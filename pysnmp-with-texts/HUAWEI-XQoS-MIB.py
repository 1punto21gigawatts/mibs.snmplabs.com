#
# PySNMP MIB module HUAWEI-XQoS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-XQoS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:50:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, TimeTicks, Bits, Counter64, iso, Gauge32, ObjectIdentity, NotificationType, MibIdentifier, Integer32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "TimeTicks", "Bits", "Counter64", "iso", "Gauge32", "ObjectIdentity", "NotificationType", "MibIdentifier", "Integer32", "ModuleIdentity")
MacAddress, TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "DisplayString", "RowStatus")
class BaType(TextualConvention, Integer32):
    description = 'The Direction Policy apply on.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("vlan8021p", 1), ("dscp", 2), ("mplsExp", 3), ("ipPri", 4), ("hqosVlan8021p", 5), ("hqosDscp", 6), ("hqosMplsExp", 7), ("hqosIpPri", 8), ("vlan8021pInbound", 9))

hwXQoSMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4))
if mibBuilder.loadTexts: hwXQoSMIB.setLastUpdated('200409150000Z')
if mibBuilder.loadTexts: hwXQoSMIB.setOrganization('Huawei Technologies co.,Ltd.')
if mibBuilder.loadTexts: hwXQoSMIB.setContactInfo(' R&D BeiJing, Huawei Technologies co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China Zip:100085 Http://www.huawei.com E-mail:support@huawei.com ')
if mibBuilder.loadTexts: hwXQoSMIB.setDescription('The HUAWEI-XQoS-MIB contains objects to Manage configuration and Monitor running state for Class Based QoS feature.')
class XQosQueueType(TextualConvention, Integer32):
    description = 'Queue Type: BE (1) AF1(2) AF2(3) AF3(4) AF4(5) EF (6) '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("be", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("ef", 6))

class ResetFlag(TextualConvention, Integer32):
    description = 'Reset Flag: DISABLE (0) RESET (1) ENABLE (2) '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("disable", 0), ("reset", 1), ("enable", 2))

class CosType(TextualConvention, Integer32):
    description = ' BE(1) AF1(2) AF2(3) AF3(4) AF4(5) EF(6) CS6(7) CS7(8) ALL(9) queue10(10) queue11(11) queue12(12) queue13(13) queue14(14) queue15(15) queue16(16) queue17(17) queue18(18) queue19(19) queue20(20) queue21(21) queue22(22) queue23(23) queue24(24) '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))
    namedValues = NamedValues(("be", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("ef", 6), ("cs6", 7), ("cs7", 8), ("all", 9), ("queue10", 10), ("queue11", 11), ("queue12", 12), ("queue13", 13), ("queue14", 14), ("queue15", 15), ("queue16", 16), ("queue17", 17), ("queue18", 18), ("queue19", 19), ("queue20", 20), ("queue21", 21), ("queue22", 22), ("queue23", 23), ("queue24", 24))

class CarAction(TextualConvention, Integer32):
    description = 'The actions taken when packets conforming or exceeding the configured CIR: pass (1), discard (2), remark IP Precedence (3), remark DSCP(4), remark Mpls Exp(5), remark (6), remark 8021p(7) '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("pass", 1), ("discard", 2), ("remarkIpPrec", 3), ("remarkDscp", 4), ("remarkMplsExp", 5), ("remark", 6), ("remark8021p", 7))

class DirectionType(TextualConvention, Integer32):
    description = 'The Direction Policy apply on.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("inbound", 1), ("outbound", 2))

class UrpfCtrlType(TextualConvention, Integer32):
    description = 'Strict(1) Loose(2)'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("strict", 1), ("loose", 2))

class SampleType(TextualConvention, Integer32):
    description = 'Fix-packets(1) Fix-time(2) Random-packets(3) Random-time(4) '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("fix-packets", 1), ("fix-time", 2), ("random-packets", 3), ("random-time", 4))

class IPCARRuleType(TextualConvention, Integer32):
    description = 'Type of IPCAR Rule. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("ipv4Acl", 1), ("ipv4SrcIp", 2), ("ipv4DstIp", 3))

hwQoS = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32))
hwXQoSObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1))
hwXQoSConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2))
hwXQoSBaObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1))
hwXQoSBaCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 1), )
if mibBuilder.loadTexts: hwXQoSBaCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaCfgInfoTable.setDescription('A table of diff-server domain configuration information.')
hwXQoSBaCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 1, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSBaIndex"))
if mibBuilder.loadTexts: hwXQoSBaCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaCfgInfoEntry.setDescription('Diff-server domain Information Entry.')
hwXQoSBaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSBaIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaIndex.setDescription('The value of this object identifies the index of a DS domain.The value ranges from 0 to 7.This object has no default value.')
hwXQoSBaName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSBaName.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaName.setDescription('This object indicates the name of a DS domain.The value of this object is a string of 1 to 8 ASCII characters in plain text and complies with the format of the command line.The object has no default value.')
hwXQoSBaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSBaRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaRowStatus.setDescription('The value of this object identifies the row status.The value of this object can be any of the following:CreateAndGo(4),Destroy(6),Active(1).The object has no default value.')
hwXQoSBa8021pPhbCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 2), )
if mibBuilder.loadTexts: hwXQoSBa8021pPhbCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBa8021pPhbCfgInfoTable.setDescription('A table of diff-serve domain 8021p phb configuration information.')
hwXQoSBa8021pPhbCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 2, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSBaIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSBa8021pPhbIndex"))
if mibBuilder.loadTexts: hwXQoSBa8021pPhbCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBa8021pPhbCfgInfoEntry.setDescription('Diff-serve domain 8021p phb Configuration Information Entry.')
hwXQoSBa8021pPhbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSBa8021pPhbIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBa8021pPhbIndex.setDescription('The value of this object identifies the index of the Per-Hop Behavior (PHB).')
hwXQoSBa8021pPhbPri = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSBa8021pPhbPri.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBa8021pPhbPri.setDescription('The value of this object identifies the 802.1p priority.The value ranges from 0 to 7.')
hwXQoSBa8021pPhbCos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSBa8021pPhbCos.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBa8021pPhbCos.setDescription('The value of this object identifies CoS, that is, the scheduling priority.The value can be any of the following:CS7(7),CS6(6),EF(5),AF4(4),AF3(3),AF2(2),AF1(1),BE(0).')
hwXQoSBa8021pPhbColour = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSBa8021pPhbColour.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBa8021pPhbColour.setDescription('The value of this object identifies the color of the packet, that is, the discarding priority.The value can be any of the following:Green(0),Yellow(1),Red(2).')
hwXQoSBa8021pPhbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSBa8021pPhbRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBa8021pPhbRowStatus.setDescription('The value of this object identifies the row status.The value can be any of the following:CreateAndGo(4),Destroy(6),Active(1).')
hwXQoSBa8021pMapCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 3), )
if mibBuilder.loadTexts: hwXQoSBa8021pMapCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBa8021pMapCfgInfoTable.setDescription('A table of diff-serve domain 8021p map configuration information.')
hwXQoSBa8021pMapCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 3, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSBaIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSBa8021pMapIndex"))
if mibBuilder.loadTexts: hwXQoSBa8021pMapCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBa8021pMapCfgInfoEntry.setDescription('Diff-serve domain 8021p map Configuration Information Entry.')
hwXQoSBa8021pMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSBa8021pMapIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBa8021pMapIndex.setDescription('The value of this object identifies the mapping index.The value starts from 0.')
hwXQoSBa8021pMapCos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSBa8021pMapCos.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBa8021pMapCos.setDescription('The value of this object identifies CoS, that is, the scheduling priority.The value can be any of the following: CS7(7),CS6(6),EF(5),AF4(4),AF3(3),AF2(2),AF1(1),BE(0).')
hwXQoSBa8021pMapColour = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSBa8021pMapColour.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBa8021pMapColour.setDescription('The value of this object identifies the color of the packet, that is, the discarding priority.The value can be any of the following:Green(0),Yellow(1),Red(2).')
hwXQoSBa8021pMapPri = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSBa8021pMapPri.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBa8021pMapPri.setDescription('The value of this object identifies the 8021.p priority.The value ranges from 0 to 7.The object has no default value.')
hwXQoSBa8021pMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSBa8021pMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBa8021pMapRowStatus.setDescription('The value of this object identifies the row status.The value can be any of the following:CreateAndGo(4),Destroy(6),Active(1).The object has no default value.')
hwXQoSBaDscpPhbCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 4), )
if mibBuilder.loadTexts: hwXQoSBaDscpPhbCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaDscpPhbCfgInfoTable.setDescription('A table of diff-serve domain DSCP phb configuration information.')
hwXQoSBaDscpPhbCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 4, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSBaIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSBaDscpPhbIndex"))
if mibBuilder.loadTexts: hwXQoSBaDscpPhbCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaDscpPhbCfgInfoEntry.setDescription('Diff-serve domain DSCP phb Configuration Information Entry.')
hwXQoSBaDscpPhbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSBaDscpPhbIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaDscpPhbIndex.setDescription('The value of this object identifies the index of the Per-Hop Behavior (PHB).')
hwXQoSBaDscpPhbPri = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSBaDscpPhbPri.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaDscpPhbPri.setDescription('The value of this object identifies the priority of DSCP.The value ranges from 0 to 7.')
hwXQoSBaDscpPhbCos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSBaDscpPhbCos.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaDscpPhbCos.setDescription('The value of this object identifies CoS, that is, the scheduling priority.The value can be any of the following: CS(7),CS(6),EF(5),AF(4),AF(3),AF(2),AF(1),BE(0).')
hwXQoSBaDscpPhbColour = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSBaDscpPhbColour.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaDscpPhbColour.setDescription('The value of this object identifies the color of the packet, that is, the discarding priority.The value can be any of the following:Green(0),Yellow(1),Red(2).')
hwXQoSBaDscpPhbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSBaDscpPhbRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaDscpPhbRowStatus.setDescription('The value of this object identifies the row status.The value can be any of the following:CreateAndGo(4),Destroy(6),Active(1).')
hwXQoSBaDscpMapCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 5), )
if mibBuilder.loadTexts: hwXQoSBaDscpMapCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaDscpMapCfgInfoTable.setDescription('A table of diff-serve domain Dscp map configuration information.')
hwXQoSBaDscpMapCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 5, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSBaIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSBaDscpMapIndex"))
if mibBuilder.loadTexts: hwXQoSBaDscpMapCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaDscpMapCfgInfoEntry.setDescription('Diff-serve domain Dscp map Configuration Information Entry.')
hwXQoSBaDscpMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSBaDscpMapIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaDscpMapIndex.setDescription('The value of this object identifies the mapping index.')
hwXQoSBaDscpMapCos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSBaDscpMapCos.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaDscpMapCos.setDescription('The value of this object identifies CoS, that is, the scheduling priority.The value can be any of the following: CS7(7),CS6(6),EF(5),AF4(4),AF3(3),AF2(2),AF1(1),BE(0).')
hwXQoSBaDscpMapColour = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSBaDscpMapColour.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaDscpMapColour.setDescription('The value of this object identifies the color of the packet, that is, the discarding priority.The value can be any of the following:Green(0),Yellow(1),Red(2).')
hwXQoSBaDscpMapPri = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSBaDscpMapPri.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaDscpMapPri.setDescription('The value of this object identifies the DSCP value.The value ranges from 0 to 7.')
hwXQoSBaDscpMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSBaDscpMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaDscpMapRowStatus.setDescription('The value of this object identifies the row status.The value can be any of the following:CreateAndGo(4),Destroy(6),Active(1).')
hwXQoSBaExpPhbCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 6), )
if mibBuilder.loadTexts: hwXQoSBaExpPhbCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaExpPhbCfgInfoTable.setDescription('A table of diff-serve domain Exp phb configuration information.')
hwXQoSBaExpPhbCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 6, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSBaIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSBaExpPhbIndex"))
if mibBuilder.loadTexts: hwXQoSBaExpPhbCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaExpPhbCfgInfoEntry.setDescription('Diff-serve domain Exp phb Configuration Information Entry.')
hwXQoSBaExpPhbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSBaExpPhbIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaExpPhbIndex.setDescription('The value of this object identifies the index of PHB.')
hwXQoSBaExpPhbPri = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSBaExpPhbPri.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaExpPhbPri.setDescription('The value of this object identifies the EXP field of an MPLS packet.The value ranges from 0 to 7.')
hwXQoSBaExpPhbCos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSBaExpPhbCos.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaExpPhbCos.setDescription('The value of this object identifies CoS, that is, the scheduling priority.The value can be any of the following: CS7(7),CS6(6),EF(5),AF4(4),AF3(3),AF2(2),AF1(1),BE(0).')
hwXQoSBaExpPhbColour = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSBaExpPhbColour.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaExpPhbColour.setDescription('The value of this object identifies the color of the packet, that is, the discarding priority.The value can be any of the following:Green(0),Yellow(1),Red(2).')
hwXQoSBaExpPhbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSBaExpPhbRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaExpPhbRowStatus.setDescription('The value of this object identifies the row status.The value can be any of the following:CreateAndGo(4),Destroy(6),Active(1).')
hwXQoSBaExpMapCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 7), )
if mibBuilder.loadTexts: hwXQoSBaExpMapCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaExpMapCfgInfoTable.setDescription('A table of diff-serve domain Exp map configuration information.')
hwXQoSBaExpMapCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 7, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSBaIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSBaExpMapIndex"))
if mibBuilder.loadTexts: hwXQoSBaExpMapCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaExpMapCfgInfoEntry.setDescription('Diff-serve domain Exp map Configuration Information Entry.')
hwXQoSBaExpMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSBaExpMapIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaExpMapIndex.setDescription('The value of this object identifies the mapping index.')
hwXQoSBaExpMapCos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSBaExpMapCos.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaExpMapCos.setDescription('The value of this object identifies CoS, that is, the scheduling priority.The value can be any of the following:CS7(7),CS6(6),EF(5),AF4(4),AF3(3),AF2(2),AF1(1),BE(0).')
hwXQoSBaExpMapColour = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSBaExpMapColour.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaExpMapColour.setDescription('The value of this object identifies the color of the packet, that is, the discarding priority.The value can be any of the following:Green(0),Yellow(1),Red(2).')
hwXQoSBaExpMapPri = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSBaExpMapPri.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaExpMapPri.setDescription('The value of this object identifies the EXP field of the MPLS packet.The value ranges from 0 to 7.')
hwXQoSBaExpMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 7, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSBaExpMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaExpMapRowStatus.setDescription('The value of this object identifies the row status.The value can be any of the following:CreateAndGo(4),Destroy(6),Active(1).')
hwXQoSIfDiffDomainTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 8), )
if mibBuilder.loadTexts: hwXQoSIfDiffDomainTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfDiffDomainTable.setDescription('Trust diff-serve domain.')
hwXQoSIfDiffDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 8, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSIfDiffDomainIfIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSIfDiffDomainVlanId"))
if mibBuilder.loadTexts: hwXQoSIfDiffDomainEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfDiffDomainEntry.setDescription('Policy applied on interface Configuration Information Entry.')
hwXQoSIfDiffDomainIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfDiffDomainIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfDiffDomainIfIndex.setDescription('The value of this object identifies the interface index.')
hwXQoSIfDiffDomainVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfDiffDomainVlanId.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfDiffDomainVlanId.setDescription('The value of this object identifies the VLAN ID of the interface.')
hwXQoSIfDiffDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfDiffDomainName.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfDiffDomainName.setDescription('This object indicates the name of the DS domain.The value of the object ranges from 1 to 31.The name cannot contain Chinese characters.')
hwXQoSIfDiffDomainRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 8, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfDiffDomainRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfDiffDomainRowStatus.setDescription('This value of this object identifies the row status.The value can be any of the following:CreateAndGo(4), Destroy(6),Active(1).')
hwXQoSIfDiffDomainVlanId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfDiffDomainVlanId2.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfDiffDomainVlanId2.setDescription("End vlan ID. -1 can't be set. 0 is the default value")
hwXQoSIfTrust8021pTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 9), )
if mibBuilder.loadTexts: hwXQoSIfTrust8021pTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfTrust8021pTable.setDescription('Trust diff-serve domain.')
hwXQoSIfTrust8021pEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 9, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSIfTrust8021pIfIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSIfTrust8021pVlanID"))
if mibBuilder.loadTexts: hwXQoSIfTrust8021pEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfTrust8021pEntry.setDescription('Policy applied on interface Configuration Information Entry.')
hwXQoSIfTrust8021pIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfTrust8021pIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfTrust8021pIfIndex.setDescription('The value of this object identifies the interface index.')
hwXQoSIfTrust8021pVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfTrust8021pVlanID.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfTrust8021pVlanID.setDescription('The value of this object identifies the VLAN ID of the interface.')
hwXQoSIfTrust8021pAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("distrust", 1), ("trust", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfTrust8021pAction.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfTrust8021pAction.setDescription('The value of this object identifies whether the Layer 2 simple stream classification is enabled.The value can be either of the following:Distrust(1),Trust(2).The object has no default value.')
hwXQoSIfTrust8021pRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 9, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfTrust8021pRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfTrust8021pRowStatus.setDescription('This value of this object identifies the row status.The value can be any of the following:CreateAndGo(4), Destroy(6),Active(1).The object has no default value.')
hwXQoSBaAtmQosPhbCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 10), )
if mibBuilder.loadTexts: hwXQoSBaAtmQosPhbCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaAtmQosPhbCfgInfoTable.setDescription('A table of diff-serve domain AtmQos ServiceType+Clp phb configuration information.')
hwXQoSBaAtmQosPhbCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 10, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSBaIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSBaAtmQosPhbServType"), (0, "HUAWEI-XQoS-MIB", "hwXQoSBaAtmQosPhbClp"))
if mibBuilder.loadTexts: hwXQoSBaAtmQosPhbCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaAtmQosPhbCfgInfoEntry.setDescription('Diff-serve domain AtmQos ServiceType+Clp phb Configuration Information Entry.')
hwXQoSBaAtmQosPhbServType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSBaAtmQosPhbServType.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaAtmQosPhbServType.setDescription('Atm Qos ServiceType.')
hwXQoSBaAtmQosPhbClp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSBaAtmQosPhbClp.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaAtmQosPhbClp.setDescription('Atm Qos Clp.')
hwXQoSBaAtmQosPhbCos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 10, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSBaAtmQosPhbCos.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaAtmQosPhbCos.setDescription('Cos of AtmQos.')
hwXQoSBaAtmQosPhbColour = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 10, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSBaAtmQosPhbColour.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaAtmQosPhbColour.setDescription('Colour of AtmQos.')
hwXQoSBaAtmQosPhbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 10, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSBaAtmQosPhbRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaAtmQosPhbRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwXQoSBaAtmQosMapCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 11), )
if mibBuilder.loadTexts: hwXQoSBaAtmQosMapCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaAtmQosMapCfgInfoTable.setDescription('A table of diff-serve domain Atm Qos Clp map configuration information.')
hwXQoSBaAtmQosMapCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 11, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSBaIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSBaAtmQosMapIndex"))
if mibBuilder.loadTexts: hwXQoSBaAtmQosMapCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaAtmQosMapCfgInfoEntry.setDescription('Diff-serve domain Atm Qos Clp map Configuration Information Entry.')
hwXQoSBaAtmQosMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSBaAtmQosMapIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaAtmQosMapIndex.setDescription('Atm Qos index in diff-serve domain.')
hwXQoSBaAtmQosMapCos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSBaAtmQosMapCos.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaAtmQosMapCos.setDescription('Cos of AtmQos.')
hwXQoSBaAtmQosMapColour = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSBaAtmQosMapColour.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaAtmQosMapColour.setDescription('Colour of AtmQos.')
hwXQoSBaAtmQosMapClp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 11, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSBaAtmQosMapClp.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaAtmQosMapClp.setDescription('AtmQos Clp.')
hwXQoSBaAtmQosMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 11, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSBaAtmQosMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaAtmQosMapRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwXQoSAtmPvcDiffDomainTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 12), )
if mibBuilder.loadTexts: hwXQoSAtmPvcDiffDomainTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSAtmPvcDiffDomainTable.setDescription('Trust diff-serve domain.')
hwXQoSAtmPvcDiffDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 12, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSAtmPvcDiffDomainIfIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSAtmPvcVpi"), (0, "HUAWEI-XQoS-MIB", "hwXQoSAtmPvcVci"))
if mibBuilder.loadTexts: hwXQoSAtmPvcDiffDomainEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSAtmPvcDiffDomainEntry.setDescription('Policy applied on pvc interface Configuration Information Entry.')
hwXQoSAtmPvcDiffDomainIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSAtmPvcDiffDomainIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSAtmPvcDiffDomainIfIndex.setDescription('Atm Interface Index.')
hwXQoSAtmPvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSAtmPvcVpi.setStatus('current')
if mibBuilder.loadTexts: hwXQoSAtmPvcVpi.setDescription('Atm Pvc Vpi')
hwXQoSAtmPvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSAtmPvcVci.setStatus('current')
if mibBuilder.loadTexts: hwXQoSAtmPvcVci.setDescription('Atm Pvc Vci')
hwXQoSAtmPvcDiffDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 12, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSAtmPvcDiffDomainName.setStatus('current')
if mibBuilder.loadTexts: hwXQoSAtmPvcDiffDomainName.setDescription('Name of diff-serve domain.')
hwXQoSAtmPvcDiffDomainRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 12, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSAtmPvcDiffDomainRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSAtmPvcDiffDomainRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwXQoSAtmPvpDiffDomainTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 13), )
if mibBuilder.loadTexts: hwXQoSAtmPvpDiffDomainTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSAtmPvpDiffDomainTable.setDescription('Trust diff-serve domain.')
hwXQoSAtmPvpDiffDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 13, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSAtmPvpDiffDomainIfIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSAtmPvpVpi"))
if mibBuilder.loadTexts: hwXQoSAtmPvpDiffDomainEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSAtmPvpDiffDomainEntry.setDescription('Policy applied on pvp interface Configuration Information Entry.')
hwXQoSAtmPvpDiffDomainIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSAtmPvpDiffDomainIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSAtmPvpDiffDomainIfIndex.setDescription('Atm Interface Index.')
hwXQoSAtmPvpVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSAtmPvpVpi.setStatus('current')
if mibBuilder.loadTexts: hwXQoSAtmPvpVpi.setDescription('Atm Pvp Vpi')
hwXQoSAtmPvpDiffDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 13, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSAtmPvpDiffDomainName.setStatus('current')
if mibBuilder.loadTexts: hwXQoSAtmPvpDiffDomainName.setDescription('Name of diff-serve domain.')
hwXQoSAtmPvpDiffDomainRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 13, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSAtmPvpDiffDomainRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSAtmPvpDiffDomainRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwXQoSBaPhbCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 14), )
if mibBuilder.loadTexts: hwXQoSBaPhbCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaPhbCfgInfoTable.setDescription('A table of diff-serve domain 8021p/Dscp/Exp/IpPri/hqosVlan8021p/hqosDscp/hqosMplsExp/hqosIpPri phb configuration information.')
hwXQoSBaPhbCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 14, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSBaIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSBaPhbType"), (0, "HUAWEI-XQoS-MIB", "hwXQoSBaPhbPri"))
if mibBuilder.loadTexts: hwXQoSBaPhbCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaPhbCfgInfoEntry.setDescription('Diff-serve domain 8021p/Dscp/Exp/IpPri/hqosVlan8021p/hqosDscp/hqosMplsExp/hqosIpPri phb Configuration Information Entry.')
hwXQoSBaPhbType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 14, 1, 1), BaType())
if mibBuilder.loadTexts: hwXQoSBaPhbType.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaPhbType.setDescription(' 8021p (1), dscp (2), mplsExp(3), ipPri(4), hqosVlan8021p(5), hqosDscp(6), hqosMplsExp(7), hqosIpPri(8), vlan8021pInbound(9).')
hwXQoSBaPhbPri = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 14, 1, 2), Integer32())
if mibBuilder.loadTexts: hwXQoSBaPhbPri.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaPhbPri.setDescription('8021p / Dscp/Exp / IpPri / hqosVlan8021p / hqosDscp / hqosMplsExp / hqosIpPri.')
hwXQoSBaPhbCos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 14, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSBaPhbCos.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaPhbCos.setDescription('Cos of 8021p / Dscp / Exp / IpPri / hqosVlan8021p / hqosDscp / hqosMplsExp / hqosIpPri.')
hwXQoSBaPhbColour = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("green", 1), ("yellow", 2), ("red", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSBaPhbColour.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaPhbColour.setDescription('Colour of 8021p/Dscp/Exp/IpPri/hqosVlan8021p/hqosDscp/hqosMplsExp/hqosIpPri.')
hwXQoSBaPhbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 14, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSBaPhbRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaPhbRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwXQoSBaMapCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 15), )
if mibBuilder.loadTexts: hwXQoSBaMapCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaMapCfgInfoTable.setDescription('A table of diff-serve domain 8021p/Dscp/Exp/IpPri/hqosVlan8021p/hqosDscp/hqosMplsExp/hqosIpPri map configuration information.')
hwXQoSBaMapCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 15, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSBaIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSBaMapType"), (0, "HUAWEI-XQoS-MIB", "hwXQoSBaMapCos"), (0, "HUAWEI-XQoS-MIB", "hwXQoSBaMapColour"))
if mibBuilder.loadTexts: hwXQoSBaMapCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaMapCfgInfoEntry.setDescription('Diff-serve domain 8021p/Dscp/Exp/IpPri/hqosVlan8021p/hqosDscp/hqosMplsExp/hqosIpPri map Configuration Information Entry.')
hwXQoSBaMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 15, 1, 1), BaType())
if mibBuilder.loadTexts: hwXQoSBaMapType.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaMapType.setDescription(' 8021p (1), dscp (2), mplsExp(3), ipPri(4), hqosVlan8021p(5), hqosDscp(6), hqosMplsExp(7), hqosIpPri(8).')
hwXQoSBaMapCos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 15, 1, 2), Integer32())
if mibBuilder.loadTexts: hwXQoSBaMapCos.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaMapCos.setDescription('Cos of 8021p/Dscp/Exp/IpPri/hqosVlan8021p/hqosDscp/hqosMplsExp/hqosIpPri.')
hwXQoSBaMapColour = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("green", 1), ("yellow", 2), ("red", 3))))
if mibBuilder.loadTexts: hwXQoSBaMapColour.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaMapColour.setDescription('Colour of 8021p/Dscp/Exp/IpPri/hqosVlan8021p/hqosDscp/hqosMplsExp/hqosIpPri.')
hwXQoSBaMapPri = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 15, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSBaMapPri.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaMapPri.setDescription('8021p/Dscp/Exp/IpPri/hqosVlan8021p/hqosDscp/hqosMplsExp/hqosIpPri.')
hwXQoSBaMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 15, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSBaMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaMapRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwXQoSIfTrustTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 16), )
if mibBuilder.loadTexts: hwXQoSIfTrustTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfTrustTable.setDescription('Trust diff-serve domain.')
hwXQoSIfTrustEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 16, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSIfTrustIfIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSIfTrustVlanID1"), (0, "HUAWEI-XQoS-MIB", "hwXQoSIfTrustVlanID2"), (0, "HUAWEI-XQoS-MIB", "hwXQoSBaType"))
if mibBuilder.loadTexts: hwXQoSIfTrustEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfTrustEntry.setDescription('Policy applied on interface Configuration Information Entry.')
hwXQoSIfTrustIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 16, 1, 1), Integer32())
if mibBuilder.loadTexts: hwXQoSIfTrustIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfTrustIfIndex.setDescription('Interface Index, equal to ifIndex.')
hwXQoSIfTrustVlanID1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), )))
if mibBuilder.loadTexts: hwXQoSIfTrustVlanID1.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfTrustVlanID1.setDescription("start Vlan ID. -1 can't be set. 0 is the default value")
hwXQoSIfTrustVlanID2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), )))
if mibBuilder.loadTexts: hwXQoSIfTrustVlanID2.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfTrustVlanID2.setDescription("end Vlan ID. -1 can't be set. 0 is the default value")
hwXQoSBaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 16, 1, 4), BaType())
if mibBuilder.loadTexts: hwXQoSBaType.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaType.setDescription('vlan8021p (1), dscp (2), mplsExp(3), ipPri(4)')
hwXQoSIfTrustAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("distrust", 1), ("trust", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfTrustAction.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfTrustAction.setDescription('The trust 802.1p action ')
hwXQoSIfTrustRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 16, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfTrustRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfTrustRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwXQoSDeiTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 17), )
if mibBuilder.loadTexts: hwXQoSDeiTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSDeiTable.setDescription('Enable dei.')
hwXQoSDeiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 17, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSDeiIfIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSDeiVlanID1"), (0, "HUAWEI-XQoS-MIB", "hwXQoSDeiVlanID2"))
if mibBuilder.loadTexts: hwXQoSDeiEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSDeiEntry.setDescription('Policy applied on interface Configuration Information Entry.')
hwXQoSDeiIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 17, 1, 1), Integer32())
if mibBuilder.loadTexts: hwXQoSDeiIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSDeiIfIndex.setDescription('Interface Index, equal to ifIndex.')
hwXQoSDeiVlanID1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), )))
if mibBuilder.loadTexts: hwXQoSDeiVlanID1.setStatus('current')
if mibBuilder.loadTexts: hwXQoSDeiVlanID1.setDescription("start Vlan ID. -1 can't be set. 0 is the default value")
hwXQoSDeiVlanID2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), )))
if mibBuilder.loadTexts: hwXQoSDeiVlanID2.setStatus('current')
if mibBuilder.loadTexts: hwXQoSDeiVlanID2.setDescription("end Vlan ID. -1 can't be set. 0 is the default value")
hwXQoSIfEnableDeiAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("unenabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfEnableDeiAction.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfEnableDeiAction.setDescription(' The enable dei action enabled(1), unenabled(2)')
hwXQoSDeiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 17, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSDeiRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSDeiRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwXQoSRemarkTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 18), )
if mibBuilder.loadTexts: hwXQoSRemarkTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSRemarkTable.setDescription('Enable Remark.')
hwXQoSRemarkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 18, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSRemarkIfIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSRemarkVlanID1"), (0, "HUAWEI-XQoS-MIB", "hwXQoSRemarkVlanID2"))
if mibBuilder.loadTexts: hwXQoSRemarkEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSRemarkEntry.setDescription('Policy applied on interface Configuration Information Entry.')
hwXQoSRemarkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 18, 1, 1), Integer32())
if mibBuilder.loadTexts: hwXQoSRemarkIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSRemarkIfIndex.setDescription('Interface Index, equal to ifIndex.')
hwXQoSRemarkVlanID1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), )))
if mibBuilder.loadTexts: hwXQoSRemarkVlanID1.setStatus('current')
if mibBuilder.loadTexts: hwXQoSRemarkVlanID1.setDescription("start Vlan ID. -1 can't be set. 0 is the default value")
hwXQoSRemarkVlanID2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), )))
if mibBuilder.loadTexts: hwXQoSRemarkVlanID2.setStatus('current')
if mibBuilder.loadTexts: hwXQoSRemarkVlanID2.setDescription("end Vlan ID. -1 can't be set. 0 is the default value")
hwXQoSIfEnableRemarkAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("unenabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfEnableRemarkAction.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfEnableRemarkAction.setDescription(' The enable remark action enabled(1), unenabled(2)')
hwXQoSRemarkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 18, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSRemarkRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSRemarkRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwXQoSPhbEnableTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 19), )
if mibBuilder.loadTexts: hwXQoSPhbEnableTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPhbEnableTable.setDescription('PHB enable table.')
hwXQoSPhbEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 19, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSPhbEnableIfIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSPhbEnableVlanID1"), (0, "HUAWEI-XQoS-MIB", "hwXQoSPhbEnableVlanID2"))
if mibBuilder.loadTexts: hwXQoSPhbEnableEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPhbEnableEntry.setDescription('A table of diff-serve domain phb enable information.')
hwXQoSPhbEnableIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 19, 1, 1), Integer32())
if mibBuilder.loadTexts: hwXQoSPhbEnableIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPhbEnableIfIndex.setDescription('Interface Index, equal to ifIndex.')
hwXQoSPhbEnableVlanID1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), )))
if mibBuilder.loadTexts: hwXQoSPhbEnableVlanID1.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPhbEnableVlanID1.setDescription("start Vlan ID. -1 can't be set. 0 is the default value")
hwXQoSPhbEnableVlanID2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 19, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), )))
if mibBuilder.loadTexts: hwXQoSPhbEnableVlanID2.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPhbEnableVlanID2.setDescription("end Vlan ID. -1 can't be set. 0 is the default value")
hwXQoSPhbEnableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 19, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSPhbEnableRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPhbEnableRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwXQoSCommonInboundTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 20), )
if mibBuilder.loadTexts: hwXQoSCommonInboundTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCommonInboundTable.setDescription(' This table is used to configure mapping between the 802.1p priorities or the Differentiated Services CodePoint (DSCP) values of upstream packets in the current QinQ domain and service classes. ')
hwXQoSCommonInboundEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 20, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSBaIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSCommonInboundPhbIndex"))
if mibBuilder.loadTexts: hwXQoSCommonInboundEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCommonInboundEntry.setDescription(' This table is used to configure mapping between the 802.1p priorities or the Differentiated Services CodePoint (DSCP) values of upstream packets in the current QinQ domain and service classes. ')
hwXQoSCommonInboundPhbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCommonInboundPhbIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCommonInboundPhbIndex.setDescription(' This object indicates a PHB index. ')
hwXQoSCommonInboundPhbCos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("be", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("ef", 6), ("cs6", 7), ("cs7", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCommonInboundPhbCos.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCommonInboundPhbCos.setDescription(' This object indicates the 802.1p priority or the DSCP value.')
hwXQoSCommonInboundPhbColor = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("green", 1), ("yellow", 2), ("red", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCommonInboundPhbColor.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCommonInboundPhbColor.setDescription(' This object indicates the color for marking a type of packets. The value can be: 1: Green 2: Yellow 3: Red ')
hwXQoSCommonInboundPhbPri = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 20, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCommonInboundPhbPri.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCommonInboundPhbPri.setDescription(' The value of this object identifies the CoS. The value ranges from 0 to 7. ')
hwXQoSCommonInboundRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 20, 1, 50), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCommonInboundRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCommonInboundRowStatus.setDescription('This object indicates the row status.Currently, three row statuses are supported: Active, CreateAndGo, and Destroy. ')
hwXQoSPppInboundTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 21), )
if mibBuilder.loadTexts: hwXQoSPppInboundTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPppInboundTable.setDescription(' This table is used to map the priorities of PPP packets to the internal precedence of a router. ')
hwXQoSPppInboundEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 21, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSBaIndex"))
if mibBuilder.loadTexts: hwXQoSPppInboundEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPppInboundEntry.setDescription(' This table is used to map the priorities of PPP packets to the internal precedence of a router. ')
hwXQoSPppInboundCos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("be", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("ef", 6), ("cs6", 7), ("cs7", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSPppInboundCos.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPppInboundCos.setDescription(' This object indicates the CoS of a router. The value can be: 1: BE 2: AF1 3. AF2 4: AF3 5: AF4 6: EF 7: CS6 8: CS7 ')
hwXQoSPppInboundColor = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("green", 1), ("yellow", 2), ("red", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSPppInboundColor.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPppInboundColor.setDescription(' This object indicates the color for marking PPP packets. The value can be: 1: Green 2: Yellow 3; Red ')
hwXQoSPppInboundRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 21, 1, 50), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSPppInboundRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPppInboundRowStatus.setDescription('This object indicates the row status.Currently, three row statuses are supported: Active, CreateAndGo, and Destroy.')
hwXQoSServiceclassTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 22), )
if mibBuilder.loadTexts: hwXQoSServiceclassTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSServiceclassTable.setDescription(' This table is used to configure upstream traffic to enter specified queues on the interface. ')
hwXQoSServiceclassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 22, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSServiceclassPort"))
if mibBuilder.loadTexts: hwXQoSServiceclassEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSServiceclassEntry.setDescription(' This table is used to configure upstream traffic to enter specified queues on the interface. ')
hwXQoSServiceclassPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 22, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSServiceclassPort.setStatus('current')
if mibBuilder.loadTexts: hwXQoSServiceclassPort.setDescription(' This object indicates the interface index.')
hwXQoSServiceclass = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 22, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("be", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("ef", 6), ("cs6", 7), ("cs7", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSServiceclass.setStatus('current')
if mibBuilder.loadTexts: hwXQoSServiceclass.setDescription(' This object indicates the CoS of the queue that upstream traffic on an interface enters. ')
hwXQoSServiceclassRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 22, 1, 50), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSServiceclassRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSServiceclassRowStatus.setDescription('This object indicates the row status.Currently, three row statuses are supported: Active, CreateAndGo, and Destroy. ')
hwXQoSPhbTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 23), )
if mibBuilder.loadTexts: hwXQoSPhbTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPhbTable.setDescription(' This table is used to prohibit the function of checking the PHB table on the outgoing interface. ')
hwXQoSPhbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 23, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSPhbPort"))
if mibBuilder.loadTexts: hwXQoSPhbEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPhbEntry.setDescription(' This table is used to prohibit the function of checking the PHB table on the outgoing interface. ')
hwXQoSPhbPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 23, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSPhbPort.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPhbPort.setDescription(' This object indicates the interface index. ')
hwXQoSPhbEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSPhbEnable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPhbEnable.setDescription(' This object indicates the CoS of the queue that upstream traffic on an interface enters. ')
hwXQoSPhbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 23, 1, 50), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSPhbRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPhbRowStatus.setDescription('This object indicates the row status.Currently, three row statuses are supported: Active, CreateAndGo, and Destroy. ')
hwXQoSFieldDeiTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 24), )
if mibBuilder.loadTexts: hwXQoSFieldDeiTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSFieldDeiTable.setDescription(' This table is sued to enable the drop eligible indicator (DEI) capability of the packets on an interface and in a specified VLAN range. ')
hwXQoSFieldDeiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 24, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSFieldDeiInterface"), (0, "HUAWEI-XQoS-MIB", "hwXQoSFieldDeiVlanId"))
if mibBuilder.loadTexts: hwXQoSFieldDeiEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSFieldDeiEntry.setDescription(' This table is sued to enable the drop eligible indicator (DEI) capability of the packets on an interface and in a specified VLAN range. ')
hwXQoSFieldDeiInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 24, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSFieldDeiInterface.setStatus('current')
if mibBuilder.loadTexts: hwXQoSFieldDeiInterface.setDescription(' This object indicates the interface index. ')
hwXQoSFieldDeiVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 24, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSFieldDeiVlanId.setStatus('current')
if mibBuilder.loadTexts: hwXQoSFieldDeiVlanId.setDescription(' The value of this object identifies the VLAN ID. The value ranges from 1 to 4094. ')
hwXQoSFieldDeiEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 24, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSFieldDeiEnabled.setStatus('current')
if mibBuilder.loadTexts: hwXQoSFieldDeiEnabled.setDescription(' The value of this object identifies whether to enable the DEI capability of the packets on a VLAN. ')
hwXQoSFieldDeiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 24, 1, 50), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSFieldDeiRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSFieldDeiRowStatus.setDescription('This object indicates the row status.Currently, three row statuses are supported: Active, CreateAndGo, and Destroy.')
hwXQoSPicForwardingTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 25), )
if mibBuilder.loadTexts: hwXQoSPicForwardingTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPicForwardingTable.setDescription(' hwXQoSPicForwardingTable ')
hwXQoSPicForwardingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 25, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSPicForwardingInterface"))
if mibBuilder.loadTexts: hwXQoSPicForwardingEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPicForwardingEntry.setDescription(' hwXQoSPicForwardingEntry ')
hwXQoSPicForwardingInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 25, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSPicForwardingInterface.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPicForwardingInterface.setDescription(' hwXQoSPicForwardingInterface ')
hwXQoSPicForwarding8021pValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 25, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSPicForwarding8021pValue.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPicForwarding8021pValue.setDescription(' hwXQoSPicForwarding8021pValue ')
hwXQoSPicForwardingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 25, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("high", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSPicForwardingPriority.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPicForwardingPriority.setDescription(' hwXQoSPicForwardingPriority ')
hwXQoSPicForwardingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 25, 1, 50), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSPicForwardingRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPicForwardingRowStatus.setDescription(' Row status. The value ranges from 1 to 6 but usually 4 and 6 are used. createAndGo[4] - create a row. destroy[6] -delete a row. ')
hwXQoSCarTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 26), )
if mibBuilder.loadTexts: hwXQoSCarTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCarTable.setDescription(' This table is used to configure traffic policing on a Layer 3 main interface or a Layer 2 interface. ')
hwXQoSCarEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 26, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSCarInterfaceIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSCarDirection"), (0, "HUAWEI-XQoS-MIB", "hwXQoSCarVlanID"))
if mibBuilder.loadTexts: hwXQoSCarEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCarEntry.setDescription(' This table is used to configure traffic policing on a Layer 3 main interface or a Layer 2 interface. ')
hwXQoSCarInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 26, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCarInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCarInterfaceIndex.setDescription(' This object indicates the interface index.')
hwXQoSCarDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 26, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCarDirection.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCarDirection.setDescription(' This object indicates the direction where the CAR on an interface is applied. The value can be: 1: inbound 2: outbound ')
hwXQoSCarVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 26, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCarVlanID.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCarVlanID.setDescription(' The value of this object identifies the VLAN ID. The value ranges from 1 to 4094. ')
hwXQoSCarCirValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 26, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCarCirValue.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCarCirValue.setDescription(' The value of this object identifies the CIR on an interface.')
hwXQoSCarPirValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 26, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(100, 10000000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCarPirValue.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCarPirValue.setDescription(' The value of this object identifies the PIR on an interface.')
hwXQoSCarCbsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 26, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 33554432))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCarCbsValue.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCarCbsValue.setDescription(' The value of this object identifies the CBS on an interface.')
hwXQoSCarPbsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 26, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 33554432))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCarPbsValue.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCarPbsValue.setDescription(' The value of this object identifies the PBS on an interface.')
hwXQoSCarGreenAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 26, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pass", 1), ("discard", 2), ("null", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCarGreenAction.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCarGreenAction.setDescription(' This object indicates the action taken on the packets marked in green. ')
hwXQoSCarGreenServiceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 26, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("be", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("ef", 6), ("cs6", 7), ("cs7", 8), ("null", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCarGreenServiceClass.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCarGreenServiceClass.setDescription(' This object indicates the service class of the packets marked in green to be re-marked. The value can be: 1: BE 2: AF1 3. AF2 4: AF3 5: AF4 6: EF 7: CS6 8: CS7 9: null ')
hwXQoSCarGreenColor = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 26, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("green", 1), ("yellow", 2), ("red", 3), ("null", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCarGreenColor.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCarGreenColor.setDescription(' This object indicates the color in which the packets marked in green are to be re-marked. The value can be: 1: green 2: yellow 3: red 4: null ')
hwXQoSCarYellowAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 26, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pass", 1), ("discard", 2), ("null", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCarYellowAction.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCarYellowAction.setDescription(' This object indicates the action taken on the packets marked in yellow.')
hwXQoSCarYellowServiceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 26, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("be", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("ef", 6), ("cs6", 7), ("cs7", 8), ("null", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCarYellowServiceClass.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCarYellowServiceClass.setDescription(' This object indicates the service class of the packets marked in yellow to be re-marked. The value can be: 1: BE 2: AF1 3. AF2 4: AF3 5: AF4 6: EF 7: CS6 8: CS7 9: null ')
hwXQoSCarYellowColor = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 26, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("green", 1), ("yellow", 2), ("red", 3), ("null", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCarYellowColor.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCarYellowColor.setDescription(' This object indicates the color in which the packets marked in yellow are to be re-marked. The value can be: 1: green 2: yellow 3: red 4: null ')
hwXQoSCarRedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 26, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pass", 1), ("discard", 2), ("null", 3))).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCarRedAction.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCarRedAction.setDescription(' This object indicates the action taken on the packets marked in red. The value can be: 1: pass 2: discard 3: null The default value is discard. ')
hwXQoSCarRedServiceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 26, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("be", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("ef", 6), ("cs6", 7), ("cs7", 8), ("null", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCarRedServiceClass.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCarRedServiceClass.setDescription(' This object indicates the service class of the packets marked in red to be re-marked. The value can be: 1: BE 2: AF1 3. AF2 4: AF3 5: AF4 6: EF 7: CS6 8: CS7 9: null ')
hwXQoSCarRedColor = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 26, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("green", 1), ("yellow", 2), ("red", 3), ("null", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCarRedColor.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCarRedColor.setDescription(' This object indicates the color in which the packets marked in yellow are to be re-marked. The value can be: 1: green 2: yellow 3: red 4: null ')
hwXQoSCarRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 26, 1, 50), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCarRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCarRowStatus.setDescription('This object indicates the row status.Currently, three row statuses are supported: Active, CreateAndGo, and Destroy.')
hwXQoSPortShapingTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 27), )
if mibBuilder.loadTexts: hwXQoSPortShapingTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortShapingTable.setDescription(' This table is used to limit the rate at which packets are sent on an interface. ')
hwXQoSPortShapingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 27, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSPortShapingInterface"))
if mibBuilder.loadTexts: hwXQoSPortShapingEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortShapingEntry.setDescription(' This table is used to limit the rate at which packets are sent on an interface. ')
hwXQoSPortShapingInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 27, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSPortShapingInterface.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortShapingInterface.setDescription(' This object indicates the interface index.')
hwXQoSPortShapingValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 27, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSPortShapingValue.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortShapingValue.setDescription(' The value of this object identifies the shaping rate. The maximum value equals the interface bandwidth. ')
hwXQoSPortShapingPbsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 27, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 262144))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSPortShapingPbsValue.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortShapingPbsValue.setDescription(' This object indicates the PBS. The value is an integer that ranges from 1 to 262144, in bytes. the default pbs-value is 131072. ')
hwXQoSPortShapingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 27, 1, 50), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSPortShapingRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortShapingRowStatus.setDescription('This object indicates the row status.')
hwXQoSQueueTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 28), )
if mibBuilder.loadTexts: hwXQoSQueueTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSQueueTable.setDescription(' hwXQoSQueueTable ')
hwXQoSQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 28, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSQueueInterfaceIndex"))
if mibBuilder.loadTexts: hwXQoSQueueEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSQueueEntry.setDescription(' hwXQoSQueueEntry ')
hwXQoSQueueInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 28, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSQueueInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSQueueInterfaceIndex.setDescription(' hwXQoSQueueInterfaceIndex ')
hwXQoSQueueServiceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 28, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("be", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("ef", 6), ("cs6", 7), ("cs7", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSQueueServiceClass.setStatus('current')
if mibBuilder.loadTexts: hwXQoSQueueServiceClass.setDescription(' hwXQoSQueueServiceClass ')
hwXQoSQueueCirValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 28, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSQueueCirValue.setStatus('current')
if mibBuilder.loadTexts: hwXQoSQueueCirValue.setDescription(' hwXQoSQueueCirValue ')
hwXQoSQueueCirPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 28, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSQueueCirPercentage.setStatus('current')
if mibBuilder.loadTexts: hwXQoSQueueCirPercentage.setDescription(' hwXQoSQueueCirPercentage ')
hwXQoSQueueDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 28, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSQueueDirection.setStatus('current')
if mibBuilder.loadTexts: hwXQoSQueueDirection.setDescription(' hwXQoSQueueDirection ')
hwXQoSQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 28, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSQueueRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSQueueRowStatus.setDescription(' Row status. The value ranges from 1 to 6 but usually 4 and 6 are used. createAndGo[4] - create a row. destroy[6] -delete a row. ')
hwXQoSCarStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 29), )
if mibBuilder.loadTexts: hwXQoSCarStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCarStatisticsTable.setDescription(' This table is used to query the CAR statistics on an interface. ')
hwXQoSCarStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 29, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSCarStatisticsInterfaceIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSCarStatisticsDirection"), (0, "HUAWEI-XQoS-MIB", "hwXQoSCarStatisticsVlanid"), (0, "HUAWEI-XQoS-MIB", "hwXQoSCarStatisticsSlotNumber"))
if mibBuilder.loadTexts: hwXQoSCarStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCarStatisticsEntry.setDescription(' This table is used to query the CAR statistics on an interface. ')
hwXQoSCarStatisticsInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 29, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCarStatisticsInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCarStatisticsInterfaceIndex.setDescription(' This object indicates the interface index.')
hwXQoSCarStatisticsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 29, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCarStatisticsDirection.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCarStatisticsDirection.setDescription(' This object indicates the direction where the CAR statistics are queried. The value can be: 1: inbound 2: outbound ')
hwXQoSCarStatisticsVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 29, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCarStatisticsVlanid.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCarStatisticsVlanid.setDescription(' The value of this object identifies the VLAN ID of an interface where the CAR statistics are queried. The value ranges from 1 to 4094. ')
hwXQoSCarStatisticsSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 29, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCarStatisticsSlotNumber.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCarStatisticsSlotNumber.setDescription(' The value of this object identifies the number of the slot where the CAR statistics are queried. The value ranges from 0 to 128. 0 indicates that statistics of all the slots are collected. ')
hwXQoSCarStatisticsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 29, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCarStatisticsReset.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCarStatisticsReset.setDescription(' This object indicates the resetting of statistics. ')
hwXQoSCarStatisticsPassPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 29, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCarStatisticsPassPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCarStatisticsPassPackets.setDescription(' This object indicates the number of passed packets. ')
hwXQoSCarStatisticsPassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 29, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCarStatisticsPassBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCarStatisticsPassBytes.setDescription(' This object indicates the number of passed bytes. ')
hwXQoSCarStatisticsDropPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 29, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCarStatisticsDropPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCarStatisticsDropPackets.setDescription(' This object indicates the number of discarded packets. ')
hwXQoSCarStatisticsDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 29, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCarStatisticsDropBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCarStatisticsDropBytes.setDescription(' This object indicates the number of discarded bytes. ')
hwXQoSCarStatisticsPassPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 29, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCarStatisticsPassPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCarStatisticsPassPacketsRate.setDescription(' This object indicates the packet pass rate. ')
hwXQoSCarStatisticsPassBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 29, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCarStatisticsPassBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCarStatisticsPassBytesRate.setDescription(' This object indicates the byte pass rate. ')
hwXQoSCarStatisticsDropPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 29, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCarStatisticsDropPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCarStatisticsDropPacketsRate.setDescription(' This object indicates the packet drop rate. ')
hwXQoSCarStatisticsDropBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 29, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCarStatisticsDropBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCarStatisticsDropBytesRate.setDescription(' This object indicates the byte drop rate. ')
hwXQoSCpRateLimitTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 30), )
if mibBuilder.loadTexts: hwXQoSCpRateLimitTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpRateLimitTable.setDescription(' This table is used to set the limit on the rate at which IGMP packets are transmitted. ')
hwXQoSCpRateLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 30, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSCpRateLimitIfIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSCpRateLimitPeVidValue"), (0, "HUAWEI-XQoS-MIB", "hwXQoSCpRateLimitCeVidBegin"))
if mibBuilder.loadTexts: hwXQoSCpRateLimitEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpRateLimitEntry.setDescription(' This table is used to set the limit on the rate at which IGMP packets are transmitted. ')
hwXQoSCpRateLimitIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 30, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCpRateLimitIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpRateLimitIfIndex.setDescription(' This object indicates the index of an interface. ')
hwXQoSCpRateLimitPeVidValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 30, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCpRateLimitPeVidValue.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpRateLimitPeVidValue.setDescription(' This object indicates an outer VLAN tag. The value ranges from 1 to 4094. ')
hwXQoSCpRateLimitCeVidBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 30, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCpRateLimitCeVidBegin.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpRateLimitCeVidBegin.setDescription(' This object indicates the start inner VLAN tag. The value ranges from 1 to 4094. ')
hwXQoSCpRateLimitCeVidEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 30, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCpRateLimitCeVidEnd.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpRateLimitCeVidEnd.setDescription(' This object indicates the end inner VLAN tag. The value ranges from 1 to 4094. ')
hwXQoSCpRateLimitType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 30, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("igmp", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCpRateLimitType.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpRateLimitType.setDescription(' The value of this object identifies the type of packets. The value can be: 1: IGMP ')
hwXQoSCpRateLimitIgmpCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 30, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(32, 1000000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCpRateLimitIgmpCir.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpRateLimitIgmpCir.setDescription(' This object indicates the packet sending rate. The value ranges from 32 to 10000000. ')
hwXQoSCpRateLimitIgmpCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 30, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 33554432))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCpRateLimitIgmpCbs.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpRateLimitIgmpCbs.setDescription(' This object indicates the CBS of the sent packets. The value ranges from 100 to 33554432. ')
hwXQoSCpRateLimitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 30, 1, 50), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCpRateLimitRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpRateLimitRowStatus.setDescription(' Row status. The value ranges from 1 to 6 but usually 4 and 6 are used. createAndGo[4] - create a row. destroy[6] -delete a row. ')
hwXQoSPortQueueStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 31), )
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsTable.setDescription(' This table is used to query the statistics of class queues. ')
hwXQoSPortQueueStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 31, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSPortQueueStatisticsInterfaceIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSPortQueueStatisticsDirection"), (0, "HUAWEI-XQoS-MIB", "hwXQoSPortQueueStatisticsQueueIndex"))
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsEntry.setDescription(' This table is used to query the statistics of class queues. ')
hwXQoSPortQueueStatisticsInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 31, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsInterfaceIndex.setDescription(' This object indicates the interface index. ')
hwXQoSPortQueueStatisticsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 31, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsDirection.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsDirection.setDescription(' This object indicates the direction where statistics are queried. The value can be: 1: inbound 2: outbound ')
hwXQoSPortQueueStatisticsQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 31, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("be", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("ef", 6), ("cs6", 7), ("cs7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsQueueIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsQueueIndex.setDescription(' This object indicates the priority of a class queue where statistics are queried. The value can be: 1 be 2 af1 3 af2 4 af3 5 af4 6 ef 7 cs6 8 cs7 9 total ')
hwXQoSPortQueueStatisticsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 31, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsReset.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsReset.setDescription(' This object indicates the statistics are reset. ')
hwXQoSPortQueueStatisticsTotalPassPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 31, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsTotalPassPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsTotalPassPackets.setDescription(' This object indicates the number of passed packets. ')
hwXQoSPortQueueStatisticsTotalPassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 31, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsTotalPassBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsTotalPassBytes.setDescription(' This object indicates the number of passed bytes. ')
hwXQoSPortQueueStatisticsTotalDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 31, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsTotalDiscardPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsTotalDiscardPackets.setDescription(' This object indicates the number of discarded packets. ')
hwXQoSPortQueueStatisticsTotalDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 31, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsTotalDiscardBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsTotalDiscardBytes.setDescription(' This object indicates the number of discarded bytes. ')
hwXQoSPortQueueStatisticsDropTailDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 31, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsDropTailDiscardPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsDropTailDiscardPackets.setDescription(' The value of this object identifies the number of discarded tail packets. ')
hwXQoSPortQueueStatisticsDropTailDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 31, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsDropTailDiscardBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsDropTailDiscardBytes.setDescription(' The value of this object identifies the number of discarded tail bytes. ')
hwXQoSPortQueueStatisticsWredDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 31, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsWredDiscardPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsWredDiscardPackets.setDescription(' The value of this object identifies the number of packets that are discarded by WRED. ')
hwXQoSPortQueueStatisticsWredDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 31, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsWredDiscardBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsWredDiscardBytes.setDescription(' The value of this object identifies the number of bytes that are discarded by WRED. ')
hwXQoSPortQueueStatisticsPassPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 31, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsPassPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsPassPacketsRate.setDescription(' This object indicates the packet pass rate. ')
hwXQoSPortQueueStatisticsPassBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 31, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsPassBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsPassBytesRate.setDescription(' This object indicates the byte pass rate. ')
hwXQoSPortQueueStatisticsDiscardPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 31, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsDiscardPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsDiscardPacketsRate.setDescription(' This object indicates the packet drop rate. ')
hwXQoSPortQueueStatisticsDiscardBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 31, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsDiscardBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsDiscardBytesRate.setDescription(' This object indicates the byte drop rate. ')
hwXQoSPortQueueStatisticsDropTailDiscardPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 31, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsDropTailDiscardPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsDropTailDiscardPacketsRate.setDescription(' This object indicates the tail packet discarding rate. ')
hwXQoSPortQueueStatisticsDropTailDiscardBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 31, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsDropTailDiscardBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsDropTailDiscardBytesRate.setDescription(' This object indicates the tail byte discarding rate. ')
hwXQoSPortQueueStatisticsWredDiscardPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 31, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsWredDiscardPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsWredDiscardPacketsRate.setDescription(' This object indicates the WRED packet discarding rate.')
hwXQoSPortQueueStatisticsWredDiscardBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 31, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsWredDiscardBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsWredDiscardBytesRate.setDescription(' This object indicates the WRED byte discarding rate.')
hwXQoSMulBa8021pPhbCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 32), )
if mibBuilder.loadTexts: hwXQoSMulBa8021pPhbCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSMulBa8021pPhbCfgInfoTable.setDescription('Description.')
hwXQoSMulBa8021pPhbCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 32, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSMulBa8021pPhbIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSMulBa8021pPri"))
if mibBuilder.loadTexts: hwXQoSMulBa8021pPhbCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSMulBa8021pPhbCfgInfoEntry.setDescription('Description.')
hwXQoSMulBa8021pPhbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 32, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSMulBa8021pPhbIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSMulBa8021pPhbIndex.setDescription('Description.')
hwXQoSMulBa8021pPri = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 32, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSMulBa8021pPri.setStatus('current')
if mibBuilder.loadTexts: hwXQoSMulBa8021pPri.setDescription('Description.')
hwXQoSMulBa8021pPhbCos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 32, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("be", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("ef", 6), ("cs6", 7), ("cs7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSMulBa8021pPhbCos.setStatus('current')
if mibBuilder.loadTexts: hwXQoSMulBa8021pPhbCos.setDescription('Description.')
hwXQoSMulBa8021pPhbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 32, 1, 50), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSMulBa8021pPhbRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSMulBa8021pPhbRowStatus.setDescription('Description.')
hwXQoSMulDscpPhbCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 33), )
if mibBuilder.loadTexts: hwXQoSMulDscpPhbCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSMulDscpPhbCfgInfoTable.setDescription('Description.')
hwXQoSMulDscpPhbCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 33, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSMulBaDscpPhbIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSMulBaDscpPri"))
if mibBuilder.loadTexts: hwXQoSMulDscpPhbCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSMulDscpPhbCfgInfoEntry.setDescription('Description.')
hwXQoSMulBaDscpPhbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 33, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSMulBaDscpPhbIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSMulBaDscpPhbIndex.setDescription('Description.')
hwXQoSMulBaDscpPri = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 33, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSMulBaDscpPri.setStatus('current')
if mibBuilder.loadTexts: hwXQoSMulBaDscpPri.setDescription('Description.')
hwXQoSMulBaDscpPhbCos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 33, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("be", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("ef", 6), ("cs6", 7), ("cs7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSMulBaDscpPhbCos.setStatus('current')
if mibBuilder.loadTexts: hwXQoSMulBaDscpPhbCos.setDescription('Description.')
hwXQoSMulBaDscpPhbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 33, 1, 50), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSMulBaDscpPhbRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSMulBaDscpPhbRowStatus.setDescription('Description.')
hwXQoSBaUserPriPhbCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 34), )
if mibBuilder.loadTexts: hwXQoSBaUserPriPhbCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaUserPriPhbCfgInfoTable.setDescription('Description.')
hwXQoSBaUserPriPhbCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 34, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSDSUserPriIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSUserPriPhbPri"))
if mibBuilder.loadTexts: hwXQoSBaUserPriPhbCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaUserPriPhbCfgInfoEntry.setDescription('Description.')
hwXQoSDSUserPriIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 34, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSDSUserPriIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSDSUserPriIndex.setDescription('Description.')
hwXQoSUserPriPhbPri = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 34, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSUserPriPhbPri.setStatus('current')
if mibBuilder.loadTexts: hwXQoSUserPriPhbPri.setDescription('Description.')
hwXQoSUserPriPhbCos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 34, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("be", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("ef", 6), ("cs6", 7), ("cs7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSUserPriPhbCos.setStatus('current')
if mibBuilder.loadTexts: hwXQoSUserPriPhbCos.setDescription('Description.')
hwXQoSUserPriPhbColour = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 34, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("green", 1), ("yellow", 2), ("red", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSUserPriPhbColour.setStatus('current')
if mibBuilder.loadTexts: hwXQoSUserPriPhbColour.setDescription('Description.')
hwXQoSUserPriPhbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 34, 1, 50), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSUserPriPhbRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSUserPriPhbRowStatus.setDescription('Description.')
hwXQoSAAATrustCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 35), )
if mibBuilder.loadTexts: hwXQoSAAATrustCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSAAATrustCfgInfoTable.setDescription('Description.')
hwXQoSAAATrustCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 35, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSAaaDomainName"))
if mibBuilder.loadTexts: hwXQoSAAATrustCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSAAATrustCfgInfoEntry.setDescription('Description.')
hwXQoSAaaDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 35, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSAaaDomainName.setStatus('current')
if mibBuilder.loadTexts: hwXQoSAaaDomainName.setDescription('Description.')
hwXQoSAAADsDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 35, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSAAADsDomainName.setStatus('current')
if mibBuilder.loadTexts: hwXQoSAAADsDomainName.setDescription('Description.')
hwXQoSAAADsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 35, 1, 50), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSAAADsRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSAAADsRowStatus.setDescription('Description.')
hwXQoSAAATrust8021pInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 36), )
if mibBuilder.loadTexts: hwXQoSAAATrust8021pInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSAAATrust8021pInfoTable.setDescription('Description.')
hwXQoSAAATrust8021pInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 36, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSAaaDomainName"))
if mibBuilder.loadTexts: hwXQoSAAATrust8021pInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSAAATrust8021pInfoEntry.setDescription('Description.')
hwXQoSAAADs8021P = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 36, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSAAADs8021P.setStatus('current')
if mibBuilder.loadTexts: hwXQoSAAADs8021P.setDescription('Description.')
hwXQoSAAADs8021pRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 36, 1, 50), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSAAADs8021pRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSAAADs8021pRowStatus.setDescription('Description.')
hwXQoSIfActionObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2))
hwXQoSIfCarCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 1), )
if mibBuilder.loadTexts: hwXQoSIfCarCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarCfgInfoTable.setDescription('A table of CAR feature configuration information.')
hwXQoSIfCarCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 1, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSIfCarCfgIfIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSIfCarVlanID"), (0, "HUAWEI-XQoS-MIB", "hwXQoSIfCarDirection"))
if mibBuilder.loadTexts: hwXQoSIfCarCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarCfgInfoEntry.setDescription('CAR Configuration Information Entry.')
hwXQoSIfCarCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarCfgIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarCfgIfIndex.setDescription('Interface Index, equal to ifIndex.')
hwXQoSIfCarVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarVlanID.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarVlanID.setDescription("Vlan ID. -1 can't be set. 0 is the default value")
hwXQoSIfCarDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 1, 1, 3), DirectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarDirection.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarDirection.setDescription('Policy direction: inbound (1) outbound (2)')
hwXQoSIfCarCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfCarCir.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarCir.setDescription('Committed Information Rate. Unit: kbps. software QoS: 8..155000 hardware QoS: 100..10000000')
hwXQoSIfCarCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfCarCbs.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarCbs.setDescription('Committed Burst Size. Unit: byte software QoS: 1875..19375000 hardware QoS: 64..33554432')
hwXQoSIfCarEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfCarEbs.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarEbs.setDescription("Excess Burst Size. Unit: byte. 0..19375000 Only software QoS support this node. -1 is returned only when getting value from hardware QoS. -1 can't be set.")
hwXQoSIfCarPir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 1, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfCarPir.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarPir.setDescription("Peak Information Rate. Unit: kbps. 100..10000000 Only hardware QoS support this node. -1 is returned only when getting value from software QoS. -1 can't be set. 0 is the default value")
hwXQoSIfCarPbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 1, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfCarPbs.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarPbs.setDescription("Peak Burst Size. Unit: byte. 64..33554432. Only hardware QoS support this node. -1 is returned only when getting value from software QoS. -1 can't be set. 0 is the default value")
hwXQoSIfCarGreenAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 1, 1, 9), CarAction().clone('pass')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfCarGreenAction.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarGreenAction.setDescription('Green Action: pass (1) discard (2) remark IP Precedence (3) remark DSCP (4) remark MPLS EXP (5) remark (6) Hardware QoS : pass,discard,remark. Software QoS : pass,discard,remark IP Precedence,remark DSCP,remark MPLS EXP. ')
hwXQoSIfCarGreenRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 63), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfCarGreenRemarkValue.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarGreenRemarkValue.setDescription("The value is to remark When green action is remarking. For remarking DSCP, the range is 0~63; For remarking IP Precedence and MPLS EXP, the range is 0~7; Only software QoS support this node. -1 is returned only when getting value from hardware QoS or when action being pass,discard of software QoS. -1 can't be set.")
hwXQoSIfCarYellowAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 1, 1, 11), CarAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfCarYellowAction.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarYellowAction.setDescription("Yellow Action: unavailable(-1) pass (1) discard (2) remark IP Precedence (3) remark DSCP (4) remark MPLS EXP (5) remark(6) Only hardware QoS support this node.Hardware QoS support pass,discard,remark. -1 is returned only when getting value from software QoS. -1 can't be set.")
hwXQoSIfCarYellowRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 63), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfCarYellowRemarkValue.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarYellowRemarkValue.setDescription("The value is to remark When yellow action is remarking. For remarking DSCP, the range is 0~63; For remarking IP Precedence and MPLS EXP, the range is 0~7; Only software QoS support this node. -1 is returned only when getting value from hardware QoS or when action being pass,discard of software QoS. -1 can't be set.")
hwXQoSIfCarRedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 1, 1, 13), CarAction().clone('discard')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfCarRedAction.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarRedAction.setDescription('Red Action: pass (1) discard (2) remark IP Precedence (3) remark DSCP (4) remark MPLS EXP (5) remark (6) Hardware QoS : pass,discard,remark. Software QoS : pass,discard,remark IP Precedence,remark DSCP,remark MPLS EXP. ')
hwXQoSIfCarRedRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 63), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfCarRedRemarkValue.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarRedRemarkValue.setDescription("The value is to remark When red action is remarking. For remarking DSCP, the range is 0~63; For remarking IP Precedence and MPLS EXP, the range is 0~7; Only software QoS support this node. -1 is returned only when getting value from hardware QoS or when action being pass,discard of software QoS. -1 can't be set.")
hwXQoSIfCarRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 1, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfCarRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwXQoSIfMirrorCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 2), )
if mibBuilder.loadTexts: hwXQoSIfMirrorCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfMirrorCfgInfoTable.setDescription('A table of Mirror configuration information.')
hwXQoSIfMirrorCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 2, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSIfMirrorCfgIfIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSIfMirrorCfgVlanID"), (0, "HUAWEI-XQoS-MIB", "hwXQoSIfMirrorDirection"))
if mibBuilder.loadTexts: hwXQoSIfMirrorCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfMirrorCfgInfoEntry.setDescription('Mirror Configuration Information Entry.')
hwXQoSIfMirrorCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfMirrorCfgIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfMirrorCfgIfIndex.setDescription('Interface Index, equal to ifIndex.')
hwXQoSIfMirrorCfgVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfMirrorCfgVlanID.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfMirrorCfgVlanID.setDescription("Vlan ID. -1 can't be set. 0 is the default value")
hwXQoSIfMirrorDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 2, 1, 3), DirectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfMirrorDirection.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfMirrorDirection.setDescription('Policy direction: inbound (1) outbound (2)')
hwXQoSIfMirrorObserveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfMirrorObserveIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfMirrorObserveIndex.setDescription('The mirror observe port number')
hwXQoSIfMirrorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfMirrorRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfMirrorRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwXQoSIfUrpfCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 3), )
if mibBuilder.loadTexts: hwXQoSIfUrpfCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfUrpfCfgInfoTable.setDescription('A table of Urpf configuration information.')
hwXQoSIfUrpfCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 3, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSIfUrpfCfgIfIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSIfUrpfCfgVlanID"))
if mibBuilder.loadTexts: hwXQoSIfUrpfCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfUrpfCfgInfoEntry.setDescription('Urpf Configuration Information Entry.')
hwXQoSIfUrpfCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfUrpfCfgIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfUrpfCfgIfIndex.setDescription('The value of this object identifies the interface index.The object has no default value.')
hwXQoSIfUrpfCfgVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfUrpfCfgVlanID.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfUrpfCfgVlanID.setDescription("Vlan ID. -1 can't be set. 0 is the default value")
hwXQoSIfUrpfCtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 3, 1, 3), UrpfCtrlType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfUrpfCtrlType.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfUrpfCtrlType.setDescription('The value of this object identifies the control type of URPF.The value can be either of the following:Strict(1) ,Loose(2).The object has no default value.')
hwXQoSIfUrpfAllowDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfUrpfAllowDefault.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfUrpfAllowDefault.setDescription('The value of this object identifies whether the default route is allowed according to URPF.The value can be either of the following: 0: indicates that the default route is not allowed. 1: indicates that the default route is allowed. The object has no default value.')
hwXQoSIfUrpfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfUrpfRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfUrpfRowStatus.setDescription('This value of this object identifies the row status.The value can be any of the following:Active(1),CreateAndGo(4),Destroy(6).The object has no default value.')
hwXQoSIfSamplingCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 4), )
if mibBuilder.loadTexts: hwXQoSIfSamplingCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfSamplingCfgInfoTable.setDescription('A table of Sampling configuration information.')
hwXQoSIfSamplingCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 4, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSIfSamplingIfIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSIfSamplingVlanID"), (0, "HUAWEI-XQoS-MIB", "hwXQoSIfSamplingDirection"))
if mibBuilder.loadTexts: hwXQoSIfSamplingCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfSamplingCfgInfoEntry.setDescription('Sampling Configuration Information Entry.')
hwXQoSIfSamplingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfSamplingIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfSamplingIfIndex.setDescription('Indicates the index of a sampling interface.')
hwXQoSIfSamplingVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfSamplingVlanID.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfSamplingVlanID.setDescription('Indicates the VLAN ID of a sampling interface.')
hwXQoSIfSamplingDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 4, 1, 3), DirectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfSamplingDirection.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfSamplingDirection.setDescription('Indicates whether the interface is an inbound interface or an outbound interface. inbound (1) outbound (2)')
hwXQoSIfSamplingType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 4, 1, 4), SampleType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfSamplingType.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfSamplingType.setDescription('Indicates the sampling type. Fix-packets(1) Fix-time(2) Random-packets(3) Random-time(4) ')
hwXQoSIfSamplingNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfSamplingNum.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfSamplingNum.setDescription('Indicates the sampling parameter.')
hwXQoSIfSamplingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfSamplingRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfSamplingRowStatus.setDescription('Indicates the row status. Three actions are used: active, createAndGo, destroy')
hwXQoSIfLrCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 5), )
if mibBuilder.loadTexts: hwXQoSIfLrCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfLrCfgInfoTable.setDescription('A table of lr configuration information.')
hwXQoSIfLrCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 5, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSIfLrCfgIfIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSIfLrCfgVlanID"))
if mibBuilder.loadTexts: hwXQoSIfLrCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfLrCfgInfoEntry.setDescription('Lr Configuration Information Entry.')
hwXQoSIfLrCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfLrCfgIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfLrCfgIfIndex.setDescription('The value of this object identifies the interface index.The object has no default value.')
hwXQoSIfLrCfgVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfLrCfgVlanID.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfLrCfgVlanID.setDescription("Vlan ID. -1 can't be set. 0 is the default value")
hwXQoSIfLrCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 5, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfLrCir.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfLrCir.setDescription('This value of this object identifies CIR.The value ranges from 1 to the bandwidth of the interface.The object has no default value.')
hwXQoSIfLrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfLrRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfLrRowStatus.setDescription('This value of this object identifies the row status.The value can be any of the following:CreateAndGo(4), Destroy(6),Active(1).The object has no default value.')
hwXQoSIfLrCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 5, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfLrCbs.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfLrCbs.setDescription('The lr cbs Unit: byte.')
hwXQoSIfInPhyBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfInPhyBandwidth.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfInPhyBandwidth.setDescription('The inbound physical bandwidth Unit: bps.')
hwXQoSIfOutPhyBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfOutPhyBandwidth.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfOutPhyBandwidth.setDescription('The outbound physical bandwidth Unit: bps.')
hwXQoSIfInActualBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 5, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfInActualBandwidth.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfInActualBandwidth.setDescription('The inbound actual bandwidth Unit: bps.')
hwXQoSIfOutActualBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 5, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfOutActualBandwidth.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfOutActualBandwidth.setDescription('The outbound actual bandwidth Unit: bps.')
hwXQoSIfQueueCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 6), )
if mibBuilder.loadTexts: hwXQoSIfQueueCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfQueueCfgInfoTable.setDescription('A table of Queue feature configuration information.')
hwXQoSIfQueueCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 6, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSIfQueueCfgIfIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSIfQueueCfgVlanID"), (0, "HUAWEI-XQoS-MIB", "hwXQoSIfQueueDirection"), (0, "HUAWEI-XQoS-MIB", "hwXQoSIfQueueCfgCosType"))
if mibBuilder.loadTexts: hwXQoSIfQueueCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfQueueCfgInfoEntry.setDescription('CAR Configuration Information Entry.')
hwXQoSIfQueueCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfQueueCfgIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfQueueCfgIfIndex.setDescription('The value of this object identifies the interface index.The default value is 0.')
hwXQoSIfQueueCfgVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfQueueCfgVlanID.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfQueueCfgVlanID.setDescription("Vlan ID. -1 can't be set. 0 is the default value")
hwXQoSIfQueueDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 6, 1, 3), DirectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfQueueDirection.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfQueueDirection.setDescription('The value of this object identifies the direction of policy application.The value can be either of the following:Inbound(1),Outbound(2).')
hwXQoSIfQueueCfgCosType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 6, 1, 4), CosType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfQueueCfgCosType.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfQueueCfgCosType.setDescription('The value of this object identifies CoS of the queue.The value ranges from 0 to 7. CS(7),CS(6),EF(5),AF(4),AF(3) ,AF(2),AF(1),BE(0).The default value is BE(0). ')
hwXQoSIfQueuePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSIfQueuePriority.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfQueuePriority.setDescription('The queue priority of PQ queue mode. ')
hwXQoSIfQueueCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSIfQueueCir.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfQueueCir.setDescription('The value of this object identifies CIR of the queue.The value ranges from 0 to 10000000.The object has no default value.')
hwXQoSIfQueuePir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 6, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSIfQueuePir.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfQueuePir.setDescription('The value of this object identifies PIR of the queue.The value ranges from 0 to 10000000.The object has no default value.')
hwXQoSIfQueueWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 6, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSIfQueueWeight.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfQueueWeight.setDescription('The queue weight of wrr or drr queue mode')
hwXQoSIfQueueMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 6))).clone(namedValues=NamedValues(("pq", 1), ("wrr", 3), ("wfq", 4), ("default", 5), ("drr", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSIfQueueMode.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfQueueMode.setDescription('The value of this object identifies the scheduling mode for queues.The value can be either of the following: pq(1),wrr(3),wfq(4),default(5).The NE40E can support either of the following value:pq(1),wfq(4).The default value is default(5). ')
hwXQoSIfQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 6, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfQueueRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfQueueRowStatus.setDescription('This value of this object identifies the row status.The value can be any of the following:CreateAndGo(4), Destroy(6),Active(1).The object has no default value.')
hwXQoSIfObserveCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 7), )
if mibBuilder.loadTexts: hwXQoSIfObserveCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfObserveCfgInfoTable.setDescription('A table of Observe configuration information.')
hwXQoSIfObserveCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 7, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSIfObserveIndex"))
if mibBuilder.loadTexts: hwXQoSIfObserveCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfObserveCfgInfoEntry.setDescription('Observe Configuration Information Entry.')
hwXQoSIfObserveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfObserveIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfObserveIndex.setDescription('The Observe number ')
hwXQoSIfObserveIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 7, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfObserveIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfObserveIfIndex.setDescription('Interface Index, equal to ifIndex.')
hwXQoSIfObserveRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 7, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfObserveRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfObserveRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwXQoSIfWredCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 8), )
if mibBuilder.loadTexts: hwXQoSIfWredCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfWredCfgInfoTable.setDescription('A table of Wred configuration information.')
hwXQoSIfWredCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 8, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSIfWredQueueIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSIfWredDirection"))
if mibBuilder.loadTexts: hwXQoSIfWredCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfWredCfgInfoEntry.setDescription('Wred Configuration Information Entry.')
hwXQoSIfWredQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfWredQueueIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfWredQueueIndex.setDescription('The Wred queue index ')
hwXQoSIfWredDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 8, 1, 2), DirectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfWredDirection.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfWredDirection.setDescription('Policy direction: inbound (1) outbound (2)')
hwXQoSIfWredType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip-Prec", 1), ("dscp", 2))).clone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSIfWredType.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfWredType.setDescription('IP-Prec Based (1) DSCP Based (2)')
hwXQoSIfWredLowlimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 8, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfWredLowlimit.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfWredLowlimit.setDescription('The Wred Lowlimit. unit:packet')
hwXQoSIfWredHighlimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 8, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfWredHighlimit.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfWredHighlimit.setDescription('The Wred Highlimit.unit:packet')
hwXQoSIfWredDiscardProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfWredDiscardProbability.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfWredDiscardProbability.setDescription('The Wred Discard Probability.')
hwXQoSIfWredHighDiscardProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfWredHighDiscardProbability.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfWredHighDiscardProbability.setDescription('The Wred High Discard Probability.')
hwXQoSIfWredRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 8, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfWredRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfWredRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwXQoSIf8021PMapCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 9), )
if mibBuilder.loadTexts: hwXQoSIf8021PMapCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIf8021PMapCfgInfoTable.setDescription('A table of 8021PMap configuration information.')
hwXQoSIf8021PMapCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 9, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSIf8021PMap8021PValue"))
if mibBuilder.loadTexts: hwXQoSIf8021PMapCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIf8021PMapCfgInfoEntry.setDescription('8021PMap Configuration Information Entry.')
hwXQoSIf8021PMap8021PValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIf8021PMap8021PValue.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIf8021PMap8021PValue.setDescription('The 8021PMap 802.1p value ')
hwXQoSIf8021PMapLocalPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIf8021PMapLocalPrecedence.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIf8021PMapLocalPrecedence.setDescription('The 8021PMap Local Precedence.')
hwXQoSIf8021PMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 9, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIf8021PMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIf8021PMapRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwXQoSIfMplsExpMapCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 10), )
if mibBuilder.loadTexts: hwXQoSIfMplsExpMapCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfMplsExpMapCfgInfoTable.setDescription('A table of mpls exp-exp-map configuration information.')
hwXQoSIfMplsExpMapCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 10, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSIfMplsExpMapIfIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSIfMplsExpMapInbound"))
if mibBuilder.loadTexts: hwXQoSIfMplsExpMapCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfMplsExpMapCfgInfoEntry.setDescription('mpls exp-exp-map Configuration Information Entry.')
hwXQoSIfMplsExpMapIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfMplsExpMapIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfMplsExpMapIfIndex.setDescription('Interface Index, equal to ifIndex.')
hwXQoSIfMplsExpMapInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfMplsExpMapInbound.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfMplsExpMapInbound.setDescription('The mpls exp-exp-map inbound value')
hwXQoSIfMplsExpMapOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfMplsExpMapOutbound.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfMplsExpMapOutbound.setDescription('The mpls exp-exp-map outbound value')
hwXQoSIfMplsExpMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 10, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfMplsExpMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfMplsExpMapRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwXQoSIfDefaultPriorityCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 11), )
if mibBuilder.loadTexts: hwXQoSIfDefaultPriorityCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfDefaultPriorityCfgInfoTable.setDescription('A table of default priority configuration information.')
hwXQoSIfDefaultPriorityCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 11, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSIfDefaultPriorityIfIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSIfDefaultPriorityVlanID"))
if mibBuilder.loadTexts: hwXQoSIfDefaultPriorityCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfDefaultPriorityCfgInfoEntry.setDescription('Default priority Configuration Information Entry.')
hwXQoSIfDefaultPriorityIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfDefaultPriorityIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfDefaultPriorityIfIndex.setDescription('Interface Index, equal to ifIndex.')
hwXQoSIfDefaultPriorityVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfDefaultPriorityVlanID.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfDefaultPriorityVlanID.setDescription("Vlan ID. -1 can't be set. 0 is the default value")
hwXQoSIfDefaultPriorityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfDefaultPriorityValue.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfDefaultPriorityValue.setDescription('The default priority value ')
hwXQoSIfDefaultPriorityRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 11, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfDefaultPriorityRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfDefaultPriorityRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwXQoSIfSoftCarTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 12), )
if mibBuilder.loadTexts: hwXQoSIfSoftCarTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfSoftCarTable.setDescription('A table of interface software CAR configuration information.')
hwXQoSIfSoftCarEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 12, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSIfSoftCarIfIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSIfSoftCarDirection"))
if mibBuilder.loadTexts: hwXQoSIfSoftCarEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfSoftCarEntry.setDescription('Interface software CAR configuration information entry.')
hwXQoSIfSoftCarIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 12, 1, 1), Integer32())
if mibBuilder.loadTexts: hwXQoSIfSoftCarIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfSoftCarIfIndex.setDescription('Interface index,equal ifIndex.')
hwXQoSIfSoftCarDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 12, 1, 2), DirectionType())
if mibBuilder.loadTexts: hwXQoSIfSoftCarDirection.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfSoftCarDirection.setDescription('Policy direction: inbound (1) outbound (2)')
hwXQoSIfSoftCarCarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfSoftCarCarIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfSoftCarCarIndex.setDescription('Car index,refers to hwXQoSCpcarIndex.')
hwXQoSIfSoftCarRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 12, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfSoftCarRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfSoftCarRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy.')
hwXQoSIfLocalPrecedenceQueueMapTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 13), )
if mibBuilder.loadTexts: hwXQoSIfLocalPrecedenceQueueMapTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfLocalPrecedenceQueueMapTable.setDescription('A table of local precedence to queue map information.')
hwXQoSIfLocalPrecedenceQueueMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 13, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSIfLocPreQueMapIfIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSIfLocPreQueMapPreValue"))
if mibBuilder.loadTexts: hwXQoSIfLocalPrecedenceQueueMapEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfLocalPrecedenceQueueMapEntry.setDescription('local precedence to queue map Information Entry.')
hwXQoSIfLocPreQueMapIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfLocPreQueMapIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfLocPreQueMapIfIndex.setDescription('interface index ')
hwXQoSIfLocPreQueMapPreValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfLocPreQueMapPreValue.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfLocPreQueMapPreValue.setDescription(' Local precedence value.')
hwXQoSIfLocPreQueMapCosType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 13, 1, 3), CosType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSIfLocPreQueMapCosType.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfLocPreQueMapCosType.setDescription('queue index')
hwXQoSIfLocPreQueMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 13, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfLocPreQueMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfLocPreQueMapRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwXQoSIfScheduleModeCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 14), )
if mibBuilder.loadTexts: hwXQoSIfScheduleModeCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfScheduleModeCfgInfoTable.setDescription('A table of Schedule mode configuration information.')
hwXQoSIfScheduleModeCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 14, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSIfScheduleModeIfIndex"))
if mibBuilder.loadTexts: hwXQoSIfScheduleModeCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfScheduleModeCfgInfoEntry.setDescription('Schedule mode Configuration Information Entry.')
hwXQoSIfScheduleModeIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 14, 1, 1), Integer32())
if mibBuilder.loadTexts: hwXQoSIfScheduleModeIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfScheduleModeIfIndex.setDescription('Interface Index, equal to ifIndex.')
hwXQoSIfModeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pqWfq", 1), ("pq", 2), ("wfq", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfModeType.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfModeType.setDescription('Schedule mode are PQ+WFQ(1), PQ(2) or WFQ(3).')
hwXQoSIfScheduleModeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 14, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfScheduleModeRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfScheduleModeRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwXQoSIfHQOSPriCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 15), )
if mibBuilder.loadTexts: hwXQoSIfHQOSPriCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfHQOSPriCfgInfoTable.setDescription('HQOS priority configure configuration table. ')
hwXQoSIfHQOSPriCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 15, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSIfHqosPriIfIndex"))
if mibBuilder.loadTexts: hwXQoSIfHQOSPriCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfHQOSPriCfgInfoEntry.setDescription('HQOS priority Configuration Information Entry.')
hwXQoSIfHqosPriIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 15, 1, 1), Integer32())
if mibBuilder.loadTexts: hwXQoSIfHqosPriIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfHqosPriIfIndex.setDescription('Interface Index, equal to ifIndex.')
hwXQoSIfHqosPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("be", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("ef", 6), ("cs6", 7), ("cs7", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfHqosPriority.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfHqosPriority.setDescription(' be(1),af1(2),af2(3),af3(4),af4(5),ef(6),cs6(7),cs7(8)')
hwXQoSIfHqosPriRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 15, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfHqosPriRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfHqosPriRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwXQoSIfOutboundMulticastCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 16), )
if mibBuilder.loadTexts: hwXQoSIfOutboundMulticastCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfOutboundMulticastCfgInfoTable.setDescription('Multicast outbound bandwidth table.')
hwXQoSIfOutboundMulticastCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 16, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSIfOutMulticastIfIndex"))
if mibBuilder.loadTexts: hwXQoSIfOutboundMulticastCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfOutboundMulticastCfgInfoEntry.setDescription('Multicast outbound bandwidth Configuration Information Entry.')
hwXQoSIfOutMulticastIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 16, 1, 1), Integer32())
if mibBuilder.loadTexts: hwXQoSIfOutMulticastIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfOutMulticastIfIndex.setDescription('Interface Index, equal to ifIndex.')
hwXQoSIfUnicastWeightValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 16, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfUnicastWeightValue.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfUnicastWeightValue.setDescription('Unicast weight value range(0~15).')
hwXQoSIfMulticastWeightValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 16, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfMulticastWeightValue.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfMulticastWeightValue.setDescription('Multicast weight value range(0~15). ')
hwXQoSIfOutMulticastRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 16, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfOutMulticastRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfOutMulticastRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwXQoSIfSredCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 17), )
if mibBuilder.loadTexts: hwXQoSIfSredCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfSredCfgInfoTable.setDescription('A table of Sred configuration information.')
hwXQoSIfSredCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 17, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSIfSredQueueIndex"))
if mibBuilder.loadTexts: hwXQoSIfSredCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfSredCfgInfoEntry.setDescription('Sred Configuration Information Entry.')
hwXQoSIfSredQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("be", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("ef", 6), ("cs6", 7), ("cs7", 8))))
if mibBuilder.loadTexts: hwXQoSIfSredQueueIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfSredQueueIndex.setDescription('The Sred queue index be(1), af1(2), af2(3), af3(4), af4(5), ef(6), cs6(7), cs7(8)')
hwXQoSIfSredRedStartDiscardPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 17, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfSredRedStartDiscardPoint.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfSredRedStartDiscardPoint.setDescription('The Sred Red Start Discard Point.unit:packet')
hwXQoSIfSredRedDiscardProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("drop1", 1), ("drop2", 2), ("drop3", 3), ("drop4", 4), ("drop5", 5), ("drop6", 6), ("drop7", 7), ("drop8", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfSredRedDiscardProbability.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfSredRedDiscardProbability.setDescription('The Sred Red Discard Probability. drop1(1) = 100% drop2(2) = 6.25% drop3(3) = 3.125% drop4(4) = 1.5625% drop5(5) = 0.78125% drop6(6) = 0.390625% drop7(7) = 0.1953125% drop8(8) = 0.09765625% ')
hwXQoSIfSredYellowStartDiscardPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 17, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfSredYellowStartDiscardPoint.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfSredYellowStartDiscardPoint.setDescription('The Sred Yellow Start Discard Point.unit:packet')
hwXQoSIfSredYellowDiscardProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("drop1", 1), ("drop2", 2), ("drop3", 3), ("drop4", 4), ("drop5", 5), ("drop6", 6), ("drop7", 7), ("drop8", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfSredYellowDiscardProbability.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfSredYellowDiscardProbability.setDescription('The Sred Yellow Discard Probability. drop1(1) = 100% drop2(2) = 6.25% drop3(3) = 3.125% drop4(4) = 1.5625% drop5(5) = 0.78125% drop6(6) = 0.390625% drop7(7) = 0.1953125% drop8(8) = 0.09765625% ')
hwXQoSIfSredRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 17, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfSredRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfSredRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwXQosAtmTrafficQueueTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 18), )
if mibBuilder.loadTexts: hwXQosAtmTrafficQueueTable.setStatus('current')
if mibBuilder.loadTexts: hwXQosAtmTrafficQueueTable.setDescription('The table provides traffic classification.')
hwXQosAtmTrafficQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 18, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSAtmTrafficQueueIfIndex"))
if mibBuilder.loadTexts: hwXQosAtmTrafficQueueEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQosAtmTrafficQueueEntry.setDescription('Traffic classification entry.')
hwXQoSAtmTrafficQueueIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 18, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwXQoSAtmTrafficQueueIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSAtmTrafficQueueIfIndex.setDescription('Index of interface.')
hwXQoSAtmTrafficQueueServiceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 18, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSAtmTrafficQueueServiceClass.setStatus('current')
if mibBuilder.loadTexts: hwXQoSAtmTrafficQueueServiceClass.setDescription('The service class of the ATM traffic queue.')
hwXQoSAtmTrafficQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 18, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSAtmTrafficQueueRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSAtmTrafficQueueRowStatus.setDescription('State of the row.')
hwXQoSAtmPvcServiceTypeTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 19), )
if mibBuilder.loadTexts: hwXQoSAtmPvcServiceTypeTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSAtmPvcServiceTypeTable.setDescription('The table provides ATM PVC service type.')
hwXQoSAtmPvcServiceTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 19, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSAtmPvcServiceTypeVpiIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSAtmPvcServiceTypeVciIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSAtmPvcServiceTypeIfIndex"))
if mibBuilder.loadTexts: hwXQoSAtmPvcServiceTypeEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSAtmPvcServiceTypeEntry.setDescription('ATM PVC service entry.')
hwXQoSAtmPvcServiceTypeIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 19, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwXQoSAtmPvcServiceTypeIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSAtmPvcServiceTypeIfIndex.setDescription('Index of interface.')
hwXQoSAtmPvcServiceTypeVpiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 19, 1, 2), Unsigned32())
if mibBuilder.loadTexts: hwXQoSAtmPvcServiceTypeVpiIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSAtmPvcServiceTypeVpiIndex.setDescription('VPI for PVC.')
hwXQoSAtmPvcServiceTypeVciIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 19, 1, 3), Unsigned32())
if mibBuilder.loadTexts: hwXQoSAtmPvcServiceTypeVciIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSAtmPvcServiceTypeVciIndex.setDescription('VCI for PVC.')
hwXQoSAtmPvcNameServiceTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 19, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSAtmPvcNameServiceTypeIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSAtmPvcNameServiceTypeIndex.setDescription('Name for PVC.')
hwXQoSAtmPvcServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 19, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSAtmPvcServiceType.setStatus('current')
if mibBuilder.loadTexts: hwXQoSAtmPvcServiceType.setDescription('Type of the service.')
hwXQoSAtmPvcPcr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 19, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSAtmPvcPcr.setStatus('current')
if mibBuilder.loadTexts: hwXQoSAtmPvcPcr.setDescription('Peak rate for sending ATM cells.')
hwXQoSAtmPvcCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 19, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSAtmPvcCdvt.setStatus('current')
if mibBuilder.loadTexts: hwXQoSAtmPvcCdvt.setDescription('Tolerance of cell delay changes.')
hwXQoSAtmPvcVbrScr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 19, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSAtmPvcVbrScr.setStatus('current')
if mibBuilder.loadTexts: hwXQoSAtmPvcVbrScr.setDescription('Sustainable Rate for Sending ATM Cells.')
hwXQoSAtmPvcVbrMbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 19, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSAtmPvcVbrMbs.setStatus('current')
if mibBuilder.loadTexts: hwXQoSAtmPvcVbrMbs.setDescription('Maximum Burst Size for Sending ATM Cells.')
hwXQoSAtmPvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 19, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSAtmPvcRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSAtmPvcRowStatus.setDescription('State of the row.')
hwXQoSIfShapingCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 20), )
if mibBuilder.loadTexts: hwXQoSIfShapingCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfShapingCfgInfoTable.setDescription('A table of Shaping configuration information.')
hwXQoSIfShapingCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 20, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSIfShapingIfIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSIfShapingQueueIndex"))
if mibBuilder.loadTexts: hwXQoSIfShapingCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfShapingCfgInfoEntry.setDescription('Shaping Configuration Information Entry.')
hwXQoSIfShapingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 20, 1, 1), Integer32())
if mibBuilder.loadTexts: hwXQoSIfShapingIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfShapingIfIndex.setDescription('Interface Index, equal to ifIndex.')
hwXQoSIfShapingQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("be", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("ef", 6), ("cs6", 7), ("cs7", 8))))
if mibBuilder.loadTexts: hwXQoSIfShapingQueueIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfShapingQueueIndex.setDescription('The Shaping queue index be(1), af1(2), af2(3), af3(4), af4(5), ef(6), cs6(7), cs7(8)')
hwXQoSIfShapingQueueCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 20, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfShapingQueueCir.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfShapingQueueCir.setDescription('Committed Information Rate. Unit: kbps.')
hwXQoSIfShapingQueuePir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 20, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfShapingQueuePir.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfShapingQueuePir.setDescription('Peak Information Rate. Unit: kbps. Only hardware QoS support this node.')
hwXQoSIfShapingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 20, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfShapingRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfShapingRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwXQoSIfPppoeCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 21), )
if mibBuilder.loadTexts: hwXQoSIfPppoeCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfPppoeCfgInfoTable.setDescription('A table of PPPoE configuration information.')
hwXQoSIfPppoeCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 21, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSIfPppoeIfIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSIfPppoeMatchType"), (0, "HUAWEI-XQoS-MIB", "hwXQoSIfPppoeSourceMac"), (0, "HUAWEI-XQoS-MIB", "hwXQoSIfPppoeDestMac"))
if mibBuilder.loadTexts: hwXQoSIfPppoeCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfPppoeCfgInfoEntry.setDescription('PPPoE configuration information entry.')
hwXQoSIfPppoeIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hwXQoSIfPppoeIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfPppoeIfIndex.setDescription('Interface index, equal to ifIndex.')
hwXQoSIfPppoeMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 21, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: hwXQoSIfPppoeMatchType.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfPppoeMatchType.setDescription('Match type: 1.any 2.source MAC 3.dest MAC 4.source MAC and dest MAC.')
hwXQoSIfPppoeSourceMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 21, 1, 3), MacAddress())
if mibBuilder.loadTexts: hwXQoSIfPppoeSourceMac.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfPppoeSourceMac.setDescription('Source MAC address.')
hwXQoSIfPppoeDestMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 21, 1, 4), MacAddress())
if mibBuilder.loadTexts: hwXQoSIfPppoeDestMac.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfPppoeDestMac.setDescription('Destination MAC address.')
hwXQoSIfPppoeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 21, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfPppoeRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfPppoeRowStatus.setDescription('Row status. Two actions are used: createAndGo, destroy')
hwXQoSIfScheduleCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 22), )
if mibBuilder.loadTexts: hwXQoSIfScheduleCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfScheduleCfgInfoTable.setDescription('A table of interface schedule configuration information.')
hwXQoSIfScheduleCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 22, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSIfScheduleIfIndex"))
if mibBuilder.loadTexts: hwXQoSIfScheduleCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfScheduleCfgInfoEntry.setDescription('Interface schedule configuration information entry.')
hwXQoSIfScheduleIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hwXQoSIfScheduleIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfScheduleIfIndex.setDescription('Interface index, equal to ifIndex.')
hwXQoSIfScheduleProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 22, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfScheduleProfile.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfScheduleProfile.setDescription('Name of schedule profile.')
hwXQoSIfScheduleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 22, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfScheduleRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfScheduleRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwXQoSIfIPCarCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 23), )
if mibBuilder.loadTexts: hwXQoSIfIPCarCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfIPCarCfgInfoTable.setDescription('A table of IPCAR feature configuration information.')
hwXQoSIfIPCarCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 23, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSIfIPCarCfgIfIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSIfIPCarDirection"), (0, "HUAWEI-XQoS-MIB", "hwXQoSIPCarRuleIndex"))
if mibBuilder.loadTexts: hwXQoSIfIPCarCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfIPCarCfgInfoEntry.setDescription('IPCAR Configuration Information Entry.')
hwXQoSIfIPCarCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 23, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfIPCarCfgIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfIPCarCfgIfIndex.setDescription('Interface Index, equal to ifIndex. This object has no default value.')
hwXQoSIfIPCarDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 23, 1, 2), DirectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfIPCarDirection.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfIPCarDirection.setDescription('IPCAR Rule direction: inbound (1) outbound (2)')
hwXQoSIPCarRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 23, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIPCarRuleIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIPCarRuleIndex.setDescription('The value of this object identifies the index of IPCAR Rule. The value ranges from 0 to 254. This object has no default value.')
hwXQoSIPCarRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 23, 1, 4), IPCARRuleType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIPCarRuleType.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIPCarRuleType.setDescription('The value of this object identifies the rule type. The value of this object can be any of the following: ipv4-acl(1) ipv4-SrcIp(2) ipv4-DstIp(3) This object has no default value.')
hwXBQoSIPCarIntValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 23, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXBQoSIPCarIntValue.setStatus('current')
if mibBuilder.loadTexts: hwXBQoSIPCarIntValue.setDescription('This object indicates the rule contents. The value range and the default value of the object vary with hwXQoSIPCarRuleType. When the supported type is ipv4-acl(2), the value of this object ranges from 2000 to 4999. This object has no default value.')
hwXQoSIfIPCarStartIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 23, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfIPCarStartIp.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfIPCarStartIp.setDescription('The object indicates the start of source IP address segment. This object has no default value. 0.0.0.0 is invalid value.')
hwXQoSIfIPCarEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 23, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfIPCarEndIp.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfIPCarEndIp.setDescription('The object indicates the end of source IP address segment. This object has no default value. 0.0.0.0 is invalid value.')
hwXQoSIfIPCarCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 23, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfIPCarCir.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfIPCarCir.setDescription('Committed Information Rate. Unit: kbps. The value ranges from 8 to 4294967295, with no default value.')
hwXQoSIfIPCarCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 23, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfIPCarCbs.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfIPCarCbs.setDescription('Committed Burst Size. Unit: byte The value ranges from 1500 to 4294967295 bytes.')
hwXQoSIfIPCarEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 23, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfIPCarEbs.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfIPCarEbs.setDescription("Excess Burst Size. Unit: byte. Only software QoS support this node. -1 is returned only when getting value from hardware QoS. -1 can't be set.")
hwXQoSIfIPCarPir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 23, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfIPCarPir.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfIPCarPir.setDescription('Peak Information Rate. Unit: kbps. The value ranges from 8 to 4294967295')
hwXQoSIfIPCarPbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 23, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfIPCarPbs.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfIPCarPbs.setDescription('Peak Burst Size. Unit: byte. The value ranges from 1500 to 4294967295 bytes.')
hwXQoSIfIPCarGreenAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 23, 1, 13), CarAction().clone('pass')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfIPCarGreenAction.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfIPCarGreenAction.setDescription('The value of this object identifies the action adopted when CIR is not reached. pass (1), discard (2), remark IP Precedence (3), remark DSCP(4), remark Mpls Exp(5), remark (6), remark 8021p(7) The default value is pass (1). ')
hwXQoSIfIPCarGreenRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 23, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 63), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfIPCarGreenRemarkValue.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfIPCarGreenRemarkValue.setDescription("The value is to remark When green action is remarking. For remarking DSCP, the range is 0~63; For remarking IP Precedence and MPLS EXP, the range is 0~7; Only software QoS support this node. -1 is returned only when getting value from hardware QoS or when action being pass,discard of software QoS. -1 can't be set.")
hwXQoSIfIPCarYellowAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 23, 1, 15), CarAction().clone('pass')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfIPCarYellowAction.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfIPCarYellowAction.setDescription('The value of this object identifies the action adopted when CIR is exceeded but PIR is not reached. pass (1), discard (2), remark IP Precedence (3), remark DSCP(4), remark Mpls Exp(5), remark (6), remark 8021p(7) The default value is pass (1). ')
hwXQoSIfIPCarYellowRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 23, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 63), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfIPCarYellowRemarkValue.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfIPCarYellowRemarkValue.setDescription("The value is to remark When yellow action is remarking. For remarking DSCP, the range is 0~63; For remarking IP Precedence and MPLS EXP, the range is 0~7; Only software QoS support this node. -1 is returned only when getting value from hardware QoS or when action being pass,discard of software QoS. -1 can't be set.")
hwXQoSIfIPCarRedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 23, 1, 17), CarAction().clone('discard')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfIPCarRedAction.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfIPCarRedAction.setDescription('The value of this object identifies the action adopted when CIR is exceeded but PIR is not reached. pass (1), discard (2), remark IP Precedence (3), remark DSCP(4), remark Mpls Exp(5), remark (6), remark 8021p(7) The default value is pass (1). ')
hwXQoSIfIPCarRedRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 23, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 63), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfIPCarRedRemarkValue.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfIPCarRedRemarkValue.setDescription("The value is to remark When red action is remarking. For remarking DSCP, the range is 0~63; For remarking IP Precedence and MPLS EXP, the range is 0~7; Only software QoS support this node. -1 is returned only when getting value from hardware QoS or when action being pass,discard of software QoS. -1 can't be set.")
hwXQoSIfIPCarAggregation = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 23, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aggregationCar", 1), ("noneAggregationCar", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfIPCarAggregation.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfIPCarAggregation.setDescription('aggregationCar(1): aggregation car; noneAggregationCar(2) : none aggregation car.')
hwXQoSIfIPCarRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 2, 23, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfIPCarRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfIPCarRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwXQoSCpcarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3))
hwXQoSCpcarCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 1), )
if mibBuilder.loadTexts: hwXQoSCpcarCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpcarCfgInfoTable.setDescription('A table of cp car configuration information.')
hwXQoSCpcarCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 1, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSCpcarIndex"))
if mibBuilder.loadTexts: hwXQoSCpcarCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpcarCfgInfoEntry.setDescription('Diff-server domain Information Entry.')
hwXQoSCpcarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCpcarIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpcarIndex.setDescription('Index of cp car domain.')
hwXQoSCpcarName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCpcarName.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpcarName.setDescription('Exception name of cp car.')
hwXQoSCpcarRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCpcarRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpcarRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwXQoSCpCarFilterCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 2), )
if mibBuilder.loadTexts: hwXQoSCpCarFilterCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarFilterCfgInfoTable.setDescription('A table of cpcar filter configuration information.')
hwXQoSCpCarFilterCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 2, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSCpcarIndex"))
if mibBuilder.loadTexts: hwXQoSCpCarFilterCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarFilterCfgInfoEntry.setDescription('Diff-serve domain 8021p phb Configuration Information Entry.')
hwXQoSCpCarFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pass", 1), ("drop", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCpCarFilterAction.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarFilterAction.setDescription('filter action 1:pass 2:drop DEFVAL { pass }')
hwXQoSCpCarFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCpCarFilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarFilterRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwXQoSCpCarCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 3), )
if mibBuilder.loadTexts: hwXQoSCpCarCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarCfgInfoTable.setDescription('A table of CAR feature configuration information.')
hwXQoSCpCarCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 3, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSCpcarIndex"))
if mibBuilder.loadTexts: hwXQoSCpCarCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarCfgInfoEntry.setDescription('CAR Configuration Information Entry.')
hwXQoSCpCarSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCpCarSlotId.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarSlotId.setDescription('Target slot')
hwXQoSCpCarCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 10000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCpCarCir.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarCir.setDescription('Committed Information Rate. Unit: kbps. software QoS: 8..155000 hardware QoS: 100..10000000')
hwXQoSCpCarCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 19375000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCpCarCbs.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarCbs.setDescription('Committed Burst Size. Unit: byte software QoS: 1875..19375000 (default:max(cir*125/2,1875)) hardware QoS: 64..131071(default:12288)')
hwXQoSCpCarEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 19375000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCpCarEbs.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarEbs.setDescription("Excess Burst Size. Unit: byte. 0..19375000 Only software QoS support this node. -1 is returned only when getting value from hardware QoS. -1 can't be set.")
hwXQoSCpCarPir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 0), ValueRangeConstraint(100, 10000000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCpCarPir.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarPir.setDescription("Peak Information Rate. Unit: kbps. 100..10000000 Only hardware QoS support this node. -1 is returned only when getting value from software QoS. -1 can't be set. 0 is the default value")
hwXQoSCpCarPbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 4000000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCpCarPbs.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarPbs.setDescription("Peak Burst Size. Unit: byte. 64..4000000.(default:cbs when Peak Information Rate configured) Only hardware QoS support this node. -1 is returned only when getting value from software QoS. -1 can't be set. 0 is the default value")
hwXQoSCpCarGreenAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 3, 1, 7), CarAction().clone('pass')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCpCarGreenAction.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarGreenAction.setDescription('Green Action: pass (1) discard (2) remark IP Precedence (3) remark DSCP (4) remark MPLS EXP (5) remark (6) Hardware QoS : pass,discard,remark. Software QoS : pass,discard,remark IP Precedence,remark DSCP,remark MPLS EXP. ')
hwXQoSCpCarGreenRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 63), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCpCarGreenRemarkValue.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarGreenRemarkValue.setDescription("The value is to remark When green action is remarking. For remarking DSCP, the range is 0~63; For remarking IP Precedence and MPLS EXP, the range is 0~7; Only software QoS support this node. -1 is returned only when getting value from hardware QoS or when action being pass,discard of software QoS. -1 can't be set.")
hwXQoSCpCarYellowAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 3, 1, 9), CarAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCpCarYellowAction.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarYellowAction.setDescription("Yellow Action: unavailable(-1) pass (1) discard (2) remark IP Precedence (3) remark DSCP (4) remark MPLS EXP (5) remark(6) Only hardware QoS support this node.Hardware QoS support pass,discard,remark. -1 is returned only when getting value from software QoS. -1 can't be set.")
hwXQoSCpCarYellowRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 63), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCpCarYellowRemarkValue.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarYellowRemarkValue.setDescription("The value is to remark When yellow action is remarking. For remarking DSCP, the range is 0~63; For remarking IP Precedence and MPLS EXP, the range is 0~7; Only software QoS support this node. -1 is returned only when getting value from hardware QoS or when action being pass,discard of software QoS. -1 can't be set.")
hwXQoSCpCarRedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 3, 1, 11), CarAction().clone('discard')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCpCarRedAction.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarRedAction.setDescription('Red Action: pass (1) discard (2) remark IP Precedence (3) remark DSCP (4) remark MPLS EXP (5) remark (6) Hardware QoS : pass,discard,remark. Software QoS : pass,discard,remark IP Precedence,remark DSCP,remark MPLS EXP. ')
hwXQoSCpCarRedRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 63), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCpCarRedRemarkValue.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarRedRemarkValue.setDescription("The value is to remark When red action is remarking. For remarking DSCP, the range is 0~63; For remarking IP Precedence and MPLS EXP, the range is 0~7; Only software QoS support this node. -1 is returned only when getting value from hardware QoS or when action being pass,discard of software QoS. -1 can't be set.")
hwXQoSCpCarRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 3, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCpCarRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwXQoSCpApplyPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 4), )
if mibBuilder.loadTexts: hwXQoSCpApplyPolicyTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpApplyPolicyTable.setDescription('A table of QoS policy instance.')
hwXQoSCpApplyPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 4, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSCpcarIndex"))
if mibBuilder.loadTexts: hwXQoSCpApplyPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpApplyPolicyEntry.setDescription('Policy applied on Ethernet Vlan Configuration Information Entry.')
hwXQoSCpApplyPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCpApplyPolicyName.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpApplyPolicyName.setDescription('Name of Traffic Policy.')
hwXQoSCpApplyPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSCpApplyPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpApplyPolicyRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwXQoSCpCarActionTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 5), )
if mibBuilder.loadTexts: hwXQoSCpCarActionTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarActionTable.setDescription('A table of cp car action configuration information.')
hwXQoSCpCarActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 5, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSCpCarActionSlotIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSCpCarActionPacketType"))
if mibBuilder.loadTexts: hwXQoSCpCarActionEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarActionEntry.setDescription('Cp car action configuration information entry.')
hwXQoSCpCarActionSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: hwXQoSCpCarActionSlotIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarActionSlotIndex.setDescription('Slot index.')
hwXQoSCpCarActionPacketType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 5, 1, 2), Integer32())
if mibBuilder.loadTexts: hwXQoSCpCarActionPacketType.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarActionPacketType.setDescription('Packet type.')
hwXQoSCpCarActionPacketTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCpCarActionPacketTypeName.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarActionPacketTypeName.setDescription('Name of packet type.')
hwXQoSCpCarActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 5, 1, 4), Bits().clone(namedValues=NamedValues(("pass", 0), ("discard", 1), ("car", 2), ("traffic-policy", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSCpCarActionType.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarActionType.setDescription('Action type.')
hwXQoSCpCarActionPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSCpCarActionPolicyName.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarActionPolicyName.setDescription('Policy Name')
hwXQoSCpCarActionCarCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 5, 1, 6), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSCpCarActionCarCir.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarActionCarCir.setDescription('Committed Information Rate. Unit: kbps.')
hwXQoSCpCarActionCarCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 5, 1, 7), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSCpCarActionCarCbs.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarActionCarCbs.setDescription('Committed Burst Size. Unit: byte')
hwXQoSCpCarActionCarEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 5, 1, 8), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSCpCarActionCarEbs.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarActionCarEbs.setDescription('Excess Burst Size. Unit: byte.')
hwXQoSCpCarActionCarPir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 5, 1, 9), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSCpCarActionCarPir.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarActionCarPir.setDescription('Peak Information Rate. Unit: kbps.')
hwXQoSCpCarActionCarPbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 5, 1, 10), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSCpCarActionCarPbs.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarActionCarPbs.setDescription('Peak Burst Size. Unit: byte.')
hwXQoSCpCarActionGreenAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 5, 1, 11), CarAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSCpCarActionGreenAction.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarActionGreenAction.setDescription('Green Action. pass (1) discard (2) remark IP Precedence (3) remark DSCP (4) remark MPLS EXP (5) remark (6) Hardware QoS : pass,discard,remark. Software QoS : pass,discard,remark IP Precedence,remark DSCP,remark MPLS EXP.')
hwXQoSCpCarActionGreenRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 63), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSCpCarActionGreenRemarkValue.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarActionGreenRemarkValue.setDescription("The value is to remark When green action is remarking. For remarking DSCP, the range is 0~63; For remarking IP Precedence and MPLS EXP, the range is 0~7; Only software QoS support this node. -1 is returned only when getting value from hardware QoS or when action being pass,discard of software QoS. -1 can't be set.")
hwXQoSCpCarActionYellowAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 5, 1, 13), CarAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSCpCarActionYellowAction.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarActionYellowAction.setDescription('Yellow Action. pass (1) discard (2) remark IP Precedence (3) remark DSCP (4) remark MPLS EXP (5) remark (6) Hardware QoS : pass,discard,remark. Software QoS : pass,discard,remark IP Precedence,remark DSCP,remark MPLS EXP.')
hwXQoSCpCarActionYellowRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 63), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSCpCarActionYellowRemarkValue.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarActionYellowRemarkValue.setDescription("The value is to remark When yellow action is remarking. For remarking DSCP, the range is 0~63; For remarking IP Precedence and MPLS EXP, the range is 0~7; Only software QoS support this node. -1 is returned only when getting value from hardware QoS or when action being pass,discard of software QoS. -1 can't be set.")
hwXQoSCpCarActionRedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 5, 1, 15), CarAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSCpCarActionRedAction.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarActionRedAction.setDescription('Red Action. pass (1) discard (2) remark IP Precedence (3) remark DSCP (4) remark MPLS EXP (5) remark (6) Hardware QoS : pass,discard,remark. Software QoS : pass,discard,remark IP Precedence,remark DSCP,remark MPLS EXP.')
hwXQoSCpCarActionRedRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 63), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSCpCarActionRedRemarkValue.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarActionRedRemarkValue.setDescription("The value is to remark When red action is remarking. For remarking DSCP, the range is 0~63; For remarking IP Precedence and MPLS EXP, the range is 0~7; Only software QoS support this node. -1 is returned only when getting value from hardware QoS or when action being pass,discard of software QoS. -1 can't be set.")
hwXQoSCpCarActionSetDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 3, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSCpCarActionSetDefault.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarActionSetDefault.setDescription('This OID is used for setting the CP CAR info to default. When you want to set the value to default, set this OID to 1.')
hwXQoSStatisticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4))
hwXQoSCpcarStaticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 2))
hwXQoSCpcarRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 2, 1), )
if mibBuilder.loadTexts: hwXQoSCpcarRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpcarRunInfoTable.setDescription('A table of Running statistics for sample in a QoS policy applied on the interface.')
hwXQoSCpcarRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 2, 1, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSCpcarIndex"))
if mibBuilder.loadTexts: hwXQoSCpcarRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpcarRunInfoEntry.setDescription('Cp car statistics entry.')
hwXQoSCpcarPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 2, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCpcarPassedPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpcarPassedPackets.setDescription('Number of packets passed of enqueue.')
hwXQoSCpcarPassededBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 2, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCpcarPassededBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpcarPassededBytes.setDescription('Number of bytes passed of enqueue.')
hwXQoSCpcarTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCpcarTotalPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpcarTotalPackets.setDescription('Number of total packets.')
hwXQoSCpcarTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCpcarTotalBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpcarTotalBytes.setDescription('Number of total bytes.')
hwXQoSCpcarDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 2, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCpcarDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpcarDiscardedPackets.setDescription('Number of packets discarded when enqueued by discard method.')
hwXQoSCpcarDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 2, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCpcarDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpcarDiscardedBytes.setDescription('Number of bytes discarded when enqueued by discard method.')
hwXQoSCpCarSlotStatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 2, 2), )
if mibBuilder.loadTexts: hwXQoSCpCarSlotStatTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarSlotStatTable.setDescription('A table of Running statistics for sample in a QoS policy applied on the slot.')
hwXQoSCpCarSlotStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 2, 2, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSCpCarSlotStatSlotIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSCpCarSlotStatPacketType"))
if mibBuilder.loadTexts: hwXQoSCpCarSlotStatEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarSlotStatEntry.setDescription('Cp car on the slot statistics entry.')
hwXQoSCpCarSlotStatSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hwXQoSCpCarSlotStatSlotIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarSlotStatSlotIndex.setDescription('Slot index.')
hwXQoSCpCarSlotStatPacketType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 2, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: hwXQoSCpCarSlotStatPacketType.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarSlotStatPacketType.setDescription('Packet type.')
hwXQoSCpCarSlotStatDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCpCarSlotStatDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarSlotStatDiscardedPackets.setDescription('Number of packets discarded.')
hwXQoSCpCarSlotStatDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCpCarSlotStatDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarSlotStatDiscardedBytes.setDescription('Number of bytes discarded.')
hwXQoSCpCarSlotStatPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCpCarSlotStatPassedPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarSlotStatPassedPackets.setDescription('Number of packets passed.')
hwXQoSCpCarSlotStatPassededBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCpCarSlotStatPassededBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarSlotStatPassededBytes.setDescription('Number of bytes passed.')
hwXQoSCpCarSlotStatTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 2, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCpCarSlotStatTotalPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarSlotStatTotalPackets.setDescription('Number of total packets.')
hwXQoSCpCarSlotStatTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 2, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCpCarSlotStatTotalBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpCarSlotStatTotalBytes.setDescription('Number of total bytes.')
hwXQoSIfStatisticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3))
hwXQoSIfCarRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 1), )
if mibBuilder.loadTexts: hwXQoSIfCarRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarRunInfoTable.setDescription('A table of statistics for CAR on the interface.')
hwXQoSIfCarRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 1, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSIfCarIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSIfVlanID"))
if mibBuilder.loadTexts: hwXQoSIfCarRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarRunInfoEntry.setDescription('CAR statistics information entry.')
hwXQoSIfCarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarIndex.setDescription('Interface Index, equal to ifIndex.')
hwXQoSIfVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfVlanID.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfVlanID.setDescription("Vlan ID. -1 can't be set. 0 is the default value")
hwXQoSIfCarGreenPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarGreenPassedPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarGreenPassedPackets.setDescription('')
hwXQoSIfCarGreenPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarGreenPassedBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarGreenPassedBytes.setDescription('')
hwXQoSIfCarGreenRemarkedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarGreenRemarkedPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarGreenRemarkedPackets.setDescription('')
hwXQoSIfCarGreenRemarkedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarGreenRemarkedBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarGreenRemarkedBytes.setDescription('')
hwXQoSIfCarGreenDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarGreenDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarGreenDiscardedPackets.setDescription('')
hwXQoSIfCarGreenDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarGreenDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarGreenDiscardedBytes.setDescription('Number of bytes exceeding CIR.')
hwXQoSIfCarYellowPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarYellowPassedPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarYellowPassedPackets.setDescription('')
hwXQoSIfCarYellowPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarYellowPassedBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarYellowPassedBytes.setDescription('')
hwXQoSIfCarYellowRemarkedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarYellowRemarkedPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarYellowRemarkedPackets.setDescription('')
hwXQoSIfCarYellowRemarkedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarYellowRemarkedBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarYellowRemarkedBytes.setDescription('')
hwXQoSIfCarYellowDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarYellowDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarYellowDiscardedPackets.setDescription('')
hwXQoSIfCarYellowDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarYellowDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarYellowDiscardedBytes.setDescription('Number of bytes exceeding CIR.')
hwXQoSIfCarRedPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarRedPassedPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarRedPassedPackets.setDescription('')
hwXQoSIfCarRedPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarRedPassedBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarRedPassedBytes.setDescription('')
hwXQoSIfCarRedRemarkedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarRedRemarkedPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarRedRemarkedPackets.setDescription('')
hwXQoSIfCarRedRemarkedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarRedRemarkedBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarRedRemarkedBytes.setDescription('')
hwXQoSIfCarRedDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarRedDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarRedDiscardedPackets.setDescription('')
hwXQoSIfCarRedDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarRedDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarRedDiscardedBytes.setDescription('Number of bytes exceeding CIR.')
hwXQoSIfCarTotalDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarTotalDiscardPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarTotalDiscardPackets.setDescription('Number of total discard packets.')
hwXQoSIfCarInBoundDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarInBoundDiscardPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarInBoundDiscardPackets.setDescription('Number of inbound direction discard packets.')
hwXQoSIfCarOutBoundDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarOutBoundDiscardPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarOutBoundDiscardPackets.setDescription('Number of outbound direction discard packets.')
hwXQoSIfQueueRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 3), )
if mibBuilder.loadTexts: hwXQoSIfQueueRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfQueueRunInfoTable.setDescription('A table of Running statistics for queue in a QoS policy applied on the interface.')
hwXQoSIfQueueRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 3, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSIfQueueIfIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSIfQueueVlanID"), (0, "HUAWEI-XQoS-MIB", "hwXQoSIfQueueCosType"))
if mibBuilder.loadTexts: hwXQoSIfQueueRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfQueueRunInfoEntry.setDescription('Queue statistics entry.')
hwXQoSIfQueueIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfQueueIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfQueueIfIndex.setDescription('The value of this object identifies the interface index.')
hwXQoSIfQueueVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfQueueVlanID.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfQueueVlanID.setDescription("Vlan ID. -1 can't be set. 0 is the default value")
hwXQoSIfQueueCosType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 3, 1, 3), CosType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfQueueCosType.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfQueueCosType.setDescription('The value of this object identifies COS of the queue.The value can be any of the following:CS7(8),CS6(7),EF(6) AF4(5),AF3(4),AF2(3),AF1(2),BE(1).')
hwXQoSIfQueuePassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfQueuePassedPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfQueuePassedPackets.setDescription('This object indicates the number of packets that pass the queue.')
hwXQoSIfQueuePassededBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfQueuePassededBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfQueuePassededBytes.setDescription('This object indicates the number of bytes that pass the queue.The object has no default value.')
hwXQoSIfQueueTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfQueueTotalPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfQueueTotalPackets.setDescription('This object indicates the number of packets that reach the queue.The object has no default value.')
hwXQoSIfQueueTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfQueueTotalBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfQueueTotalBytes.setDescription('This object indicates the number of bytes that reach the queue.The object has no default value.')
hwXQoSIfQueueDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfQueueDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfQueueDiscardedPackets.setDescription('This object indicates the number of discarded packets.The object has no default value.')
hwXQoSIfQueueDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfQueueDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfQueueDiscardedBytes.setDescription('This object indicates the number of discarded bytes.The object has no default value.')
hwXQoSIfQueuePassedPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfQueuePassedPacketRate.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfQueuePassedPacketRate.setDescription('This object indicates the packet rate, in pps.The object has no default value.')
hwXQoSIfQueuePassedByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfQueuePassedByteRate.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfQueuePassedByteRate.setDescription('This object indicates the byte rate, in bps.The object has no default value.')
hwXQoSIfQueueDiscardedPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfQueueDiscardedPacketRate.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfQueueDiscardedPacketRate.setDescription('This object indicates the packet rate of discarded packets, in pps.The object has no default value.')
hwXQoSIfQueueDiscardedByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfQueueDiscardedByteRate.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfQueueDiscardedByteRate.setDescription('This object indicates the byte rate of discarded packets, in bps.The object has no default value.')
hwXQoSIfQueueResetFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 3, 1, 14), ResetFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSIfQueueResetFlag.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfQueueResetFlag.setDescription('Reset queue statistics information.')
hwXQoSIfQueueUsagePercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfQueueUsagePercentage.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfQueueUsagePercentage.setDescription('This object indicates the usage percentage of queue.The object has no default value.')
hwXQoSIfWredRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 4), )
if mibBuilder.loadTexts: hwXQoSIfWredRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfWredRunInfoTable.setDescription('A table of Running statistics for WRED in a QoS policy applied on the interface.')
hwXQoSIfWredRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 4, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSIfWredIfIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSIfWredVlanID"))
if mibBuilder.loadTexts: hwXQoSIfWredRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfWredRunInfoEntry.setDescription('WRED statistics entry.')
hwXQoSIfWredIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfWredIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfWredIfIndex.setDescription('Index of interface.')
hwXQoSIfWredVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfWredVlanID.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfWredVlanID.setDescription("Vlan ID. -1 can't be set. 0 is the default value")
hwXQoSIfWredRandomDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfWredRandomDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfWredRandomDiscardedPackets.setDescription('Number of packets that random-discarded by WRED.')
hwXQoSIfWredTailDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfWredTailDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfWredTailDiscardedPackets.setDescription('Number of packets that tail-discarded by WRED.')
hwXQoSIfWredDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfWredDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfWredDiscardedPackets.setDescription('Number of packets that discarded by WRED. Include random-discarded and tail-discarded')
hwXQoSIfLrRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 5), )
if mibBuilder.loadTexts: hwXQoSIfLrRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfLrRunInfoTable.setDescription('A table of Running statistics for LR in a QoS policy applied on the interface.')
hwXQoSIfLrRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 5, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSIfLrIfIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSIfLrVlanID"))
if mibBuilder.loadTexts: hwXQoSIfLrRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfLrRunInfoEntry.setDescription('LR statistics entry.')
hwXQoSIfLrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfLrIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfLrIfIndex.setDescription('Index of Interface of LR.')
hwXQoSIfLrVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfLrVlanID.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfLrVlanID.setDescription("Vlan ID. -1 can't be set. 0 is the default value")
hwXQoSIfLrPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfLrPassedPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfLrPassedPackets.setDescription('Number of packets passed by LR.')
hwXQoSIfLrPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfLrPassedBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfLrPassedBytes.setDescription('Number of bytes passed by LR.')
hwXQoSIfLrDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfLrDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfLrDiscardedPackets.setDescription('Number of packets discarded by LR.')
hwXQoSIfLrDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfLrDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfLrDiscardedBytes.setDescription('Number of bytes discarded by LR.')
hwXQoSIfLrDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 5, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfLrDelayedPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfLrDelayedPackets.setDescription('Number of packets delayed by LR.')
hwXQoSIfLrDelayedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 5, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfLrDelayedBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfLrDelayedBytes.setDescription('Number of bytes delayed by LR.')
hwXQoSIfMirrorRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 6), )
if mibBuilder.loadTexts: hwXQoSIfMirrorRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfMirrorRunInfoTable.setDescription('A table of Running statistics for mirror in a QoS policy applied on the interface.')
hwXQoSIfMirrorRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 6, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSIfMirrorIfIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSIfMirrorVlanID"))
if mibBuilder.loadTexts: hwXQoSIfMirrorRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfMirrorRunInfoEntry.setDescription('Mirror statistics entry.')
hwXQoSIfMirrorIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfMirrorIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfMirrorIfIndex.setDescription('Index of interface mirror.')
hwXQoSIfMirrorVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfMirrorVlanID.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfMirrorVlanID.setDescription("Vlan ID. -1 can't be set. 0 is the default value")
hwXQoSIfMirroredPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfMirroredPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfMirroredPackets.setDescription('Number of packets Mirrored.')
hwXQoSIfUrpfRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 7), )
if mibBuilder.loadTexts: hwXQoSIfUrpfRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfUrpfRunInfoTable.setDescription('A table of Running statistics for urpf in a QoS policy applied on the interface.')
hwXQoSIfUrpfRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 7, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSIfUrpfIfIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSIfUrpfVlanID"))
if mibBuilder.loadTexts: hwXQoSIfUrpfRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfUrpfRunInfoEntry.setDescription('Urpf statistics entry.')
hwXQoSIfUrpfIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfUrpfIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfUrpfIfIndex.setDescription('Index of interface URPF.')
hwXQoSIfUrpfVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfUrpfVlanID.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfUrpfVlanID.setDescription("Vlan ID. -1 can't be set. 0 is the default value")
hwXQoSIfUrpfPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 7, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfUrpfPassedPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfUrpfPassedPackets.setDescription('Number of packets passed.')
hwXQoSIfUrpfDroppdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 7, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfUrpfDroppdPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfUrpfDroppdPackets.setDescription('Number of packets dropped.')
hwXQoSIfSampleRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 8), )
if mibBuilder.loadTexts: hwXQoSIfSampleRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfSampleRunInfoTable.setDescription('A table of Running statistics for sample in a QoS policy applied on the interface.')
hwXQoSIfSampleRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 8, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSIfSampleIfIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSIfSampleVlanID"))
if mibBuilder.loadTexts: hwXQoSIfSampleRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfSampleRunInfoEntry.setDescription('Sample statistics entry.')
hwXQoSIfSampleIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfSampleIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfSampleIfIndex.setDescription('Index of interface Sample.')
hwXQoSIfSampleVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfSampleVlanID.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfSampleVlanID.setDescription("Vlan ID. -1 can't be set. 0 is the default value")
hwXQoSIfSampledPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 8, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfSampledPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfSampledPackets.setDescription('Number of packets Sampled.')
hwXQoSIfCarStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 9), )
if mibBuilder.loadTexts: hwXQoSIfCarStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarStatisticsTable.setDescription('A table of CAR statistics for port-based traffic.')
hwXQoSIfCarStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 9, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSIfCarCfgIfIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSIfCarVlanID"), (0, "HUAWEI-XQoS-MIB", "hwXQoSIfCarDirection"))
if mibBuilder.loadTexts: hwXQoSIfCarStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarStatisticsEntry.setDescription('A table of CAR statistics for port-based traffic, including the statistics of packets that have the rate within CIR, of CIR, of PIR or exceeds PIR. .')
hwXQoSIfCarConformedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 9, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarConformedPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarConformedPackets.setDescription('This object indicates the number of packets within CIR.')
hwXQoSIfCarConformedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 9, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarConformedBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarConformedBytes.setDescription('This object indicates the number of bytes within CIR.')
hwXQoSIfCarConformedPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 9, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarConformedPacketRate.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarConformedPacketRate.setDescription('This object indicates the packet rate within CIR, in pps.')
hwXQoSIfCarConformedByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 9, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarConformedByteRate.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarConformedByteRate.setDescription('This object indicates the byte rate within CIR, in bps.')
hwXQoSIfCarExceededPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 9, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarExceededPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarExceededPackets.setDescription('This object indicates the number of packets between PIR and CIR.')
hwXQoSIfCarExceededBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 9, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarExceededBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarExceededBytes.setDescription('This object indicates the number of bytes between PIR and CIR.')
hwXQoSIfCarExceededPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 9, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarExceededPacketRate.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarExceededPacketRate.setDescription('This object indicates the packet rate between PIR and CIR, in pps.')
hwXQoSIfCarExceededByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 9, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarExceededByteRate.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarExceededByteRate.setDescription('This object indicates the byte rate between PIR and CIR, in pps.')
hwXQoSIfCarOverflowPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 9, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarOverflowPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarOverflowPackets.setDescription('This object indicates the number of packets when PIR is set.')
hwXQoSIfCarOverflowBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 9, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarOverflowBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarOverflowBytes.setDescription('This object indicates the number of bytes when PIR is set.')
hwXQoSIfCarOverflowPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 9, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarOverflowPacketRate.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarOverflowPacketRate.setDescription('This object indicates the packet rate when PIR is set, in pps.')
hwXQoSIfCarOverflowByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 9, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarOverflowByteRate.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarOverflowByteRate.setDescription('This object indicates the byte rate when PIR is set, in bps.')
hwXQoSIfCarPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 9, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarPassedPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarPassedPackets.setDescription('This object indicates the number of passed packets after CAR is set.')
hwXQoSIfCarPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 9, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarPassedBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarPassedBytes.setDescription('This object indicates the number of discarded packets after CAR is set.')
hwXQoSIfCarDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 9, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarDiscardedPackets.setDescription('This object indicates the number of discarded packets after CAR is set.')
hwXQoSIfCarDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 9, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfCarDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarDiscardedBytes.setDescription('This object indicates the number of discarded bytes after CAR is set.')
hwXQoSIfOutboundQueueStatisticTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 10), )
if mibBuilder.loadTexts: hwXQoSIfOutboundQueueStatisticTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfOutboundQueueStatisticTable.setDescription('The table provides the discard packets.')
hwXQoSIfOutboundQueueStatisticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 10, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSIfExtIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSIfQueIndex"))
if mibBuilder.loadTexts: hwXQoSIfOutboundQueueStatisticEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfOutboundQueueStatisticEntry.setDescription('The discard packets entry.')
hwXQoSIfExtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwXQoSIfExtIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfExtIndex.setDescription('Index for the extended interface.')
hwXQoSIfQueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 10, 1, 2), OctetString())
if mibBuilder.loadTexts: hwXQoSIfQueIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfQueIndex.setDescription('Index for the queue.')
hwXQoSIfQueDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 3, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfQueDiscardPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfQueDiscardPackets.setDescription('Number of discarded packets.')
hwXQoSVlanStatisticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 4))
hwXQosVlanStatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 4, 1), )
if mibBuilder.loadTexts: hwXQosVlanStatTable.setStatus('current')
if mibBuilder.loadTexts: hwXQosVlanStatTable.setDescription('The table contains statistics information for the vlan.')
hwXQosVlanStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 4, 1, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQosVlanStatVlanId"))
if mibBuilder.loadTexts: hwXQosVlanStatEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQosVlanStatEntry.setDescription('Entries of vlan statistics table.')
hwXQosVlanStatVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), )))
if mibBuilder.loadTexts: hwXQosVlanStatVlanId.setStatus('current')
if mibBuilder.loadTexts: hwXQosVlanStatVlanId.setDescription('The id of vlan.')
hwXQosVlanStatInTotalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 4, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQosVlanStatInTotalPkts.setStatus('current')
if mibBuilder.loadTexts: hwXQosVlanStatInTotalPkts.setDescription('The number of received packets.')
hwXQosVlanStatInTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 4, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQosVlanStatInTotalBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQosVlanStatInTotalBytes.setDescription('The byte number of received packets.')
hwXQosVlanStatOutTotalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 4, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQosVlanStatOutTotalPkts.setStatus('current')
if mibBuilder.loadTexts: hwXQosVlanStatOutTotalPkts.setDescription('The number of transmittable packets.')
hwXQosVlanStatOutTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 4, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQosVlanStatOutTotalBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQosVlanStatOutTotalBytes.setDescription('The byte number of transmittable packets.')
hwXQosVlanStatInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 4, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQosVlanStatInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: hwXQosVlanStatInUcastPkts.setDescription('The number of received unicast packets.')
hwXQosVlanStatInUcastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 4, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQosVlanStatInUcastBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQosVlanStatInUcastBytes.setDescription("The number of received unicast packets' bytes.")
hwXQosVlanStatOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 4, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQosVlanStatOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: hwXQosVlanStatOutUcastPkts.setDescription('The number of transmittable unicast packets.')
hwXQosVlanStatOutUcastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 4, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQosVlanStatOutUcastBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQosVlanStatOutUcastBytes.setDescription("The number of transmittable unicast packets' bytes.")
hwXQosVlanStatInMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 4, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQosVlanStatInMcastPkts.setStatus('current')
if mibBuilder.loadTexts: hwXQosVlanStatInMcastPkts.setDescription('The number of received multicast packets.')
hwXQosVlanStatInMcastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 4, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQosVlanStatInMcastBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQosVlanStatInMcastBytes.setDescription("The number of received multicast packets' bytes.")
hwXQosVlanStatOutMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 4, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQosVlanStatOutMcastPkts.setStatus('current')
if mibBuilder.loadTexts: hwXQosVlanStatOutMcastPkts.setDescription('The number of transmittable multicast packets.')
hwXQosVlanStatOutMcastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 4, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQosVlanStatOutMcastBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQosVlanStatOutMcastBytes.setDescription("The number of transmittable multicast packets' bytes.")
hwXQosVlanStatInBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 4, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQosVlanStatInBcastPkts.setStatus('current')
if mibBuilder.loadTexts: hwXQosVlanStatInBcastPkts.setDescription('The number of received broadcast packets.')
hwXQosVlanStatInBcastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 4, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQosVlanStatInBcastBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQosVlanStatInBcastBytes.setDescription("The number of received broadcast packets' bytes.")
hwXQosVlanStatOutBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 4, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQosVlanStatOutBcastPkts.setStatus('current')
if mibBuilder.loadTexts: hwXQosVlanStatOutBcastPkts.setDescription('The number of transmittable broadcast packets.')
hwXQosVlanStatOutBcastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 4, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQosVlanStatOutBcastBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQosVlanStatOutBcastBytes.setDescription('The number of transmittable broadcast packets.')
hwXQosVlanStatInUnknownUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 4, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQosVlanStatInUnknownUcastPkts.setStatus('current')
if mibBuilder.loadTexts: hwXQosVlanStatInUnknownUcastPkts.setDescription('The number of received unknown broadcast packets.')
hwXQosVlanStatInUnknownUcastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 4, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQosVlanStatInUnknownUcastBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQosVlanStatInUnknownUcastBytes.setDescription("The number of received unknown broadcast packets' bytes.")
hwXQosVlanStatResetFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 4, 4, 1, 1, 20), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQosVlanStatResetFlag.setStatus('current')
if mibBuilder.loadTexts: hwXQosVlanStatResetFlag.setDescription('The flag of reset.')
hwXQoSGlobalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5))
hwXQoSSoftCarCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 1), )
if mibBuilder.loadTexts: hwXQoSSoftCarCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSSoftCarCfgTable.setDescription('A table of software CAR configuration information.')
hwXQoSSoftCarCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 1, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSSoftCarIndex"))
if mibBuilder.loadTexts: hwXQoSSoftCarCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSSoftCarCfgEntry.setDescription('Software CAR configuration information entry.')
hwXQoSSoftCarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534)))
if mibBuilder.loadTexts: hwXQoSSoftCarIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSSoftCarIndex.setDescription('Index of software car.')
hwXQoSSoftCarName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSSoftCarName.setStatus('current')
if mibBuilder.loadTexts: hwXQoSSoftCarName.setDescription('Software car name.')
hwXQoSSoftCarCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSSoftCarCir.setStatus('current')
if mibBuilder.loadTexts: hwXQoSSoftCarCir.setDescription('Committed Information Rate. Unit: kbps.')
hwXQoSSoftCarCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSSoftCarCbs.setStatus('current')
if mibBuilder.loadTexts: hwXQoSSoftCarCbs.setDescription('Committed Burst Size. Unit: byte')
hwXQoSSoftCarRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSSoftCarRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSSoftCarRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy.')
hwXQoSGlobalWredClassCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 2), )
if mibBuilder.loadTexts: hwXQoSGlobalWredClassCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSGlobalWredClassCfgTable.setDescription('A table of class based Wred configuration information.')
hwXQoSGlobalWredClassCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 2, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSGlobalWredClassIndex"))
if mibBuilder.loadTexts: hwXQoSGlobalWredClassCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSGlobalWredClassCfgEntry.setDescription('Class based Wred configuration information entry.')
hwXQoSGlobalWredClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: hwXQoSGlobalWredClassIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSGlobalWredClassIndex.setDescription('Index of wred class.')
hwXQoSGlobalWredClassLowlimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSGlobalWredClassLowlimit.setStatus('current')
if mibBuilder.loadTexts: hwXQoSGlobalWredClassLowlimit.setDescription('The Wred Lowlimit.')
hwXQoSGlobalWredClassHighlimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSGlobalWredClassHighlimit.setStatus('current')
if mibBuilder.loadTexts: hwXQoSGlobalWredClassHighlimit.setDescription('The Wred Highlimit.')
hwXQoSGlobalWredClassDiscardProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSGlobalWredClassDiscardProbability.setStatus('current')
if mibBuilder.loadTexts: hwXQoSGlobalWredClassDiscardProbability.setDescription('The Wred Discard Probability.')
hwXQoSGlobalWredClassSetDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSGlobalWredClassSetDefault.setStatus('current')
if mibBuilder.loadTexts: hwXQoSGlobalWredClassSetDefault.setDescription('This OID is used for setting the WRED class info to default. When you want to set the value to default, set this OID to 1. ')
hwXQoSGlobalWredTypeCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 3), )
if mibBuilder.loadTexts: hwXQoSGlobalWredTypeCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSGlobalWredTypeCfgTable.setDescription('A table of type based Wred configuration information.')
hwXQoSGlobalWredTypeCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 3, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSGlobalWredTypeIndex"))
if mibBuilder.loadTexts: hwXQoSGlobalWredTypeCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSGlobalWredTypeCfgEntry.setDescription('Type based Wred configuration information entry.')
hwXQoSGlobalWredTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: hwXQoSGlobalWredTypeIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSGlobalWredTypeIndex.setDescription('Index of type.')
hwXQoSGlobalWredTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSGlobalWredTypeName.setStatus('current')
if mibBuilder.loadTexts: hwXQoSGlobalWredTypeName.setDescription('Name of type.')
hwXQoSGlobalWredTypeLowlimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSGlobalWredTypeLowlimit.setStatus('current')
if mibBuilder.loadTexts: hwXQoSGlobalWredTypeLowlimit.setDescription('The Wred Lowlimit.')
hwXQoSGlobalWredTypeHighlimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSGlobalWredTypeHighlimit.setStatus('current')
if mibBuilder.loadTexts: hwXQoSGlobalWredTypeHighlimit.setDescription('The Wred Highlimit.')
hwXQoSGlobalWredTypeDiscardProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSGlobalWredTypeDiscardProbability.setStatus('current')
if mibBuilder.loadTexts: hwXQoSGlobalWredTypeDiscardProbability.setDescription('The Wred Discard Probability.')
hwXQoSGlobalWredTypeSetDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSGlobalWredTypeSetDefault.setStatus('current')
if mibBuilder.loadTexts: hwXQoSGlobalWredTypeSetDefault.setDescription('This OID is used for setting the WRED type info to default. When you want to set the value to default, set this OID to 1.')
hwXQoSVlanBcastSuppressTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 4), )
if mibBuilder.loadTexts: hwXQoSVlanBcastSuppressTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSVlanBcastSuppressTable.setDescription('A table of VLAN broadcast suppression.')
hwXQoSVlanBcastSuppressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 4, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSVlanBcastSuppressVlanId"))
if mibBuilder.loadTexts: hwXQoSVlanBcastSuppressEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSVlanBcastSuppressEntry.setDescription('The entry of VLAN broadcast suppression.')
hwXQoSVlanBcastSuppressVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: hwXQoSVlanBcastSuppressVlanId.setStatus('current')
if mibBuilder.loadTexts: hwXQoSVlanBcastSuppressVlanId.setDescription('VLAN ID.')
hwXQoSVlanBcastSuppressValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSVlanBcastSuppressValue.setStatus('current')
if mibBuilder.loadTexts: hwXQoSVlanBcastSuppressValue.setDescription('Suppression value for VLAN, unit KBPS.')
hwXQoSVlanBcastSuppressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSVlanBcastSuppressRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSVlanBcastSuppressRowStatus.setDescription('Row status. Two actions are used: createAndGo, destroy')
hwXQoSScheduleProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 5), )
if mibBuilder.loadTexts: hwXQoSScheduleProfileTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSScheduleProfileTable.setDescription('A table of schedule profile.')
hwXQoSScheduleProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 5, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSScheduleProfileName"))
if mibBuilder.loadTexts: hwXQoSScheduleProfileEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSScheduleProfileEntry.setDescription('The entry of schedule profile.')
hwXQoSScheduleProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: hwXQoSScheduleProfileName.setStatus('current')
if mibBuilder.loadTexts: hwXQoSScheduleProfileName.setDescription('The object specifies the schedule profile name.')
hwXQoSScheduleQueueMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 6))).clone(namedValues=NamedValues(("pq", 1), ("wrr", 3), ("wfq", 4), ("default", 5), ("drr", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSScheduleQueueMode.setStatus('current')
if mibBuilder.loadTexts: hwXQoSScheduleQueueMode.setDescription('The Queue mode: pq(1), wrr(3), wfq(4), default(5), drr(6) ')
hwXQoSScheduleQueueBeWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSScheduleQueueBeWeight.setStatus('current')
if mibBuilder.loadTexts: hwXQoSScheduleQueueBeWeight.setDescription('The be queue weight value when in wrr or drr queue mode.')
hwXQoSScheduleQueueAf1Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSScheduleQueueAf1Weight.setStatus('current')
if mibBuilder.loadTexts: hwXQoSScheduleQueueAf1Weight.setDescription('The af1 queue weight value when in wrr or drr queue mode.')
hwXQoSScheduleQueueAf2Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSScheduleQueueAf2Weight.setStatus('current')
if mibBuilder.loadTexts: hwXQoSScheduleQueueAf2Weight.setDescription('The af2 queue weight value when in wrr or drr queue mode.')
hwXQoSScheduleQueueAf3Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 5, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSScheduleQueueAf3Weight.setStatus('current')
if mibBuilder.loadTexts: hwXQoSScheduleQueueAf3Weight.setDescription('The af3 queue weight value when in wrr or drr queue mode.')
hwXQoSScheduleQueueAf4Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 5, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSScheduleQueueAf4Weight.setStatus('current')
if mibBuilder.loadTexts: hwXQoSScheduleQueueAf4Weight.setDescription('The af4 queue weight value when in wrr or drr queue mode.')
hwXQoSScheduleQueueCs6Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSScheduleQueueCs6Weight.setStatus('current')
if mibBuilder.loadTexts: hwXQoSScheduleQueueCs6Weight.setDescription('The cs6 queue weight value when in wrr or drr queue mode.')
hwXQoSScheduleQueueCs7Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSScheduleQueueCs7Weight.setStatus('current')
if mibBuilder.loadTexts: hwXQoSScheduleQueueCs7Weight.setDescription('The cs7 queue weight value when in wrr or drr queue mode.')
hwXQoSScheduleQueueEfWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 5, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSScheduleQueueEfWeight.setStatus('current')
if mibBuilder.loadTexts: hwXQoSScheduleQueueEfWeight.setDescription('The ef queue weight value when in wrr or drr queue mode.')
hwXQoSScheduleProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 5, 5, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSScheduleProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSScheduleProfileRowStatus.setDescription('Row status. Two actions are used: createAndGo, destroy')
hwXQoSCpDefendObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 6))
hwXQoSCpDefendStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 6, 1), )
if mibBuilder.loadTexts: hwXQoSCpDefendStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpDefendStatisticsTable.setDescription('A table of statistics on attack defense')
hwXQoSCpDefendStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 6, 1, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSCpDefendChassisID"), (0, "HUAWEI-XQoS-MIB", "hwXQoSCpDefendSlotId"), (0, "HUAWEI-XQoS-MIB", "hwXQoSCpDefendObjectIndex"))
if mibBuilder.loadTexts: hwXQoSCpDefendStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpDefendStatisticsEntry.setDescription('A table of statistics information on attack defense')
hwXQoSCpDefendSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: hwXQoSCpDefendSlotId.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpDefendSlotId.setDescription('Slot number of statistics for attack defense.')
hwXQoSCpDefendObjectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 511)))
if mibBuilder.loadTexts: hwXQoSCpDefendObjectIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpDefendObjectIndex.setDescription('Index of attack defense object.')
hwXQoSCpDefendPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 6, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCpDefendPassedPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpDefendPassedPackets.setDescription('Number of packets passed the attack defense.')
hwXQoSCpDefendPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 6, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCpDefendPassedBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpDefendPassedBytes.setDescription('Number of bytes passed the attack defense.')
hwXQoSCpDefendPassedPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 6, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCpDefendPassedPacketRate.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpDefendPassedPacketRate.setDescription('Rate of packets passed the attack defense. Unit: pps')
hwXQoSCpDefendPassedByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 6, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCpDefendPassedByteRate.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpDefendPassedByteRate.setDescription('Rate of bytes passed the attack defense. Unit: bps')
hwXQoSCpDefendDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 6, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCpDefendDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpDefendDiscardedPackets.setDescription('Number of packets discarded in the attack defense.')
hwXQoSCpDefendDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 6, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCpDefendDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpDefendDiscardedBytes.setDescription('Number of bytes discarded in the attack defense.')
hwXQoSCpDefendDiscardedPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 6, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCpDefendDiscardedPacketRate.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpDefendDiscardedPacketRate.setDescription('Rate of packets discarded in the attack defense. Unit: pps')
hwXQoSCpDefendDiscardedByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 6, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCpDefendDiscardedByteRate.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpDefendDiscardedByteRate.setDescription('Rate of bytes discarded in the attack defense. Unit: bps')
hwXQoSCpDefendDiscardedThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 6, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSCpDefendDiscardedThreshold.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpDefendDiscardedThreshold.setDescription('Discarded packets threshold of alarm. Unit: packets')
hwXQoSCpDefendChassisID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 6, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: hwXQoSCpDefendChassisID.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpDefendChassisID.setDescription('Chassis number of statistics for attack defense.')
hwXQoSUrpfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 7))
hwXQoSUrpfDiscardStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 7, 1), )
if mibBuilder.loadTexts: hwXQoSUrpfDiscardStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSUrpfDiscardStatisticsTable.setDescription('A table of statistics on discarded packets for IP URPF')
hwXQoSUrpfDiscardStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 7, 1, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSUrpfSlotPhysicalIndex"))
if mibBuilder.loadTexts: hwXQoSUrpfDiscardStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSUrpfDiscardStatisticsEntry.setDescription('Urpf discard statistics entry')
hwXQoSUrpfSlotPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 7, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hwXQoSUrpfSlotPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSUrpfSlotPhysicalIndex.setDescription('The index of hwXQoSUrpfDiscardStatisticsTable.This index is identical to entPhysicalIndex in ENTITY-MIB.')
hwXQoSUrpfDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 7, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSUrpfDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSUrpfDiscardedPackets.setDescription('Number of packets discarded.')
hwXQoSVlanCfgObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 8))
hwXQoSVlanCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 8, 1), )
if mibBuilder.loadTexts: hwXQoSVlanCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSVlanCfgTable.setDescription('The table of vlan config information.')
hwXQoSVlanCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 8, 1, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQosVlanStatVlanId"))
if mibBuilder.loadTexts: hwXQoSVlanCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSVlanCfgEntry.setDescription('Vlan config information entry.')
hwXQoSVlanStatEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 8, 1, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSVlanStatEnable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSVlanStatEnable.setDescription('Vlan statistics enable: enable(1),disable(2).')
hwXQoSRedirectNextHopObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 9))
hwXQoSRedirectNextHopTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 9, 1), )
if mibBuilder.loadTexts: hwXQoSRedirectNextHopTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSRedirectNextHopTable.setDescription('A table of the redirect next hop')
hwXQoSRedirectNextHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 9, 1, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSRedirectNextHopBehaviorName"))
if mibBuilder.loadTexts: hwXQoSRedirectNextHopEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSRedirectNextHopEntry.setDescription('A table of the redirect next hop information')
hwXQoSRedirectNextHopBehaviorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 9, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: hwXQoSRedirectNextHopBehaviorName.setStatus('current')
if mibBuilder.loadTexts: hwXQoSRedirectNextHopBehaviorName.setDescription('Traffic behavior name.')
hwXQoSRedirectNextHopOldIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 9, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSRedirectNextHopOldIp.setStatus('current')
if mibBuilder.loadTexts: hwXQoSRedirectNextHopOldIp.setDescription('The redirect next hop.')
hwXQoSRedirectNextHopNewIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 9, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSRedirectNextHopNewIp.setStatus('current')
if mibBuilder.loadTexts: hwXQoSRedirectNextHopNewIp.setDescription('The redirect next hop.')
hwXQoSIrsmDefendObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 10))
hwXQoSIrsmTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 10, 1), )
if mibBuilder.loadTexts: hwXQoSIrsmTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIrsmTable.setDescription('A table of Irsm ')
hwXQoSIrsmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 10, 1, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSIrsmSourceAddress"))
if mibBuilder.loadTexts: hwXQoSIrsmEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIrsmEntry.setDescription('A table of Irsm')
hwXQoSIrsmSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 10, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIrsmSourceAddress.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIrsmSourceAddress.setDescription('hwXQoSIrsmSourceAddress ')
hwXQoSIrsmGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 10, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIrsmGroupAddress.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIrsmGroupAddress.setDescription('hwXQoSIrsmGroupAddress ')
hwXQoSIrsmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 10, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIrsmTime.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIrsmTime.setDescription('hwXQoSIrsmTime ')
hwXQoSIrsmDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 10, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIrsmDelay.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIrsmDelay.setDescription('hwXQoSIrsmDelay ')
hwXQoSIrsmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 10, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIrsmThreshold.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIrsmThreshold.setDescription('hwXQoSIrsmThreshold ')
hwXQoSIrsmUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 10, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIrsmUpstream.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIrsmUpstream.setDescription('hwXQoSIrsmUpstream ')
hwXQoSIrsmLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 10, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIrsmLocal.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIrsmLocal.setDescription('hwXQoSIrsmLocal ')
hwXQoSIrsmTotalPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 10, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIrsmTotalPacket.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIrsmTotalPacket.setDescription('hwXQoSIrsmTotalPacket ')
hwXQoSIrsmDropPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 10, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIrsmDropPacket.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIrsmDropPacket.setDescription('hwXQoSIrsmDropPacket ')
hwXQoSNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 11))
hwXQoSCpDefendDiscardedRateAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 11, 1)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSCpDefendDiscardedPacketRate"))
if mibBuilder.loadTexts: hwXQoSCpDefendDiscardedRateAlarm.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpDefendDiscardedRateAlarm.setDescription('Rate alarm of packets in the attack defense.')
hwXQoSQueueDiscardThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 11, 2)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSFrameId"), ("HUAWEI-XQoS-MIB", "hwXQoSSlotId"), ("HUAWEI-XQoS-MIB", "hwXQoSPortId"), ("HUAWEI-XQoS-MIB", "hwXQoSTrapIfName"), ("HUAWEI-XQoS-MIB", "hwXQoSTrapQueueId"), ("HUAWEI-XQoS-MIB", "hwXQoSTrapDiscardPackets"))
if mibBuilder.loadTexts: hwXQoSQueueDiscardThresholdTrap.setStatus('current')
if mibBuilder.loadTexts: hwXQoSQueueDiscardThresholdTrap.setDescription('The SNMP trap is generated when the number of packages that queue discard is larger than the configured threshold.')
hwXQoSCpDefendDiscardedPacketAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 11, 3)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSCpDefendSlotId"), ("HUAWEI-XQoS-MIB", "hwXQoSCpDefendObjectIndex"), ("HUAWEI-XQoS-MIB", "hwXQoSCpDefendDiscardedPackets"), ("HUAWEI-XQoS-MIB", "hwXQoSCpDefendDiscardedThreshold"), ("HUAWEI-XQoS-MIB", "hwXQoSCpDefendChassisID"))
if mibBuilder.loadTexts: hwXQoSCpDefendDiscardedPacketAlarm.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpDefendDiscardedPacketAlarm.setDescription('The number of packets discarded by the cpu-defend policy exceed the threshold.')
hwXQoSCpDefendDiscardedPacketAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 11, 4)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSCpDefendSlotId"), ("HUAWEI-XQoS-MIB", "hwXQoSCpDefendObjectIndex"), ("HUAWEI-XQoS-MIB", "hwXQoSCpDefendDiscardedPackets"), ("HUAWEI-XQoS-MIB", "hwXQoSCpDefendDiscardedThreshold"), ("HUAWEI-XQoS-MIB", "hwXQoSCpDefendChassisID"))
if mibBuilder.loadTexts: hwXQoSCpDefendDiscardedPacketAlarmClear.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpDefendDiscardedPacketAlarmClear.setDescription('The number of packets discarded by the cpu-defend policy below the threshold.')
hwXQoSCprlDiscardedPacketAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 11, 5)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSCpRateLimitIfIndex"), ("HUAWEI-XQoS-MIB", "hwXQoSCpRateLimitPeVidValue"), ("HUAWEI-XQoS-MIB", "hwXQoSCpRateLimitCeVidBegin"))
if mibBuilder.loadTexts: hwXQoSCprlDiscardedPacketAlarm.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCprlDiscardedPacketAlarm.setDescription('Number of packets discarded in the attack defense alarm.')
hwXQoSCprlDiscardedPacketAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 11, 6)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSCpRateLimitIfIndex"), ("HUAWEI-XQoS-MIB", "hwXQoSCpRateLimitPeVidValue"), ("HUAWEI-XQoS-MIB", "hwXQoSCpRateLimitCeVidBegin"))
if mibBuilder.loadTexts: hwXQoSCprlDiscardedPacketAlarmClear.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCprlDiscardedPacketAlarmClear.setDescription('Number of packets discarded in the attack defense alarm clearing.')
hwXQoSRedirectNextHopChangedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 11, 7)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSRedirectNextHopBehaviorName"), ("HUAWEI-XQoS-MIB", "hwXQoSRedirectNextHopOldIp"), ("HUAWEI-XQoS-MIB", "hwXQoSRedirectNextHopNewIp"))
if mibBuilder.loadTexts: hwXQoSRedirectNextHopChangedAlarm.setStatus('current')
if mibBuilder.loadTexts: hwXQoSRedirectNextHopChangedAlarm.setDescription('The SNMP trap is the redirect next hop changed.')
hwXQoSIrsmDelayAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 11, 8)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSIrsmSourceAddress"), ("HUAWEI-XQoS-MIB", "hwXQoSIrsmGroupAddress"), ("HUAWEI-XQoS-MIB", "hwXQoSIrsmTime"), ("HUAWEI-XQoS-MIB", "hwXQoSIrsmDelay"), ("HUAWEI-XQoS-MIB", "hwXQoSIrsmThreshold"), ("HUAWEI-XQoS-MIB", "hwXQoSIrsmUpstream"), ("HUAWEI-XQoS-MIB", "hwXQoSIrsmLocal"))
if mibBuilder.loadTexts: hwXQoSIrsmDelayAlarm.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIrsmDelayAlarm.setDescription('IRSM delay over threshold.')
hwXQoSIrsmDropPacketAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 11, 9)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSIrsmSourceAddress"), ("HUAWEI-XQoS-MIB", "hwXQoSIrsmGroupAddress"), ("HUAWEI-XQoS-MIB", "hwXQoSIrsmTime"), ("HUAWEI-XQoS-MIB", "hwXQoSIrsmTotalPacket"), ("HUAWEI-XQoS-MIB", "hwXQoSIrsmDropPacket"), ("HUAWEI-XQoS-MIB", "hwXQoSIrsmUpstream"), ("HUAWEI-XQoS-MIB", "hwXQoSIrsmLocal"))
if mibBuilder.loadTexts: hwXQoSIrsmDropPacketAlarm.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIrsmDropPacketAlarm.setDescription('IRSM multicast drop packets.')
hwXQoSIrsmSynFrameDropAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 11, 10)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSIrsmSourceAddress"), ("HUAWEI-XQoS-MIB", "hwXQoSIrsmGroupAddress"), ("HUAWEI-XQoS-MIB", "hwXQoSIrsmTime"))
if mibBuilder.loadTexts: hwXQoSIrsmSynFrameDropAlarm.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIrsmSynFrameDropAlarm.setDescription('IRSM syn frame drop.')
hwXQoSRuleFaileAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 11, 11)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSRuleFailInfo"))
if mibBuilder.loadTexts: hwXQoSRuleFaileAlarm.setStatus('current')
if mibBuilder.loadTexts: hwXQoSRuleFaileAlarm.setDescription('hwXQoSRuleFaileAlarm.')
hwXQoSProfileUsedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 11, 12)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSProfileName"))
if mibBuilder.loadTexts: hwXQoSProfileUsedAlarm.setStatus('current')
if mibBuilder.loadTexts: hwXQoSProfileUsedAlarm.setDescription('Qos-profile used.')
hwXQoSPortQueueAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 11, 13)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSPortQueueAlarmIfIndex"), ("HUAWEI-XQoS-MIB", "hwXQoSPortQueueAlarmQueue"), ("HUAWEI-XQoS-MIB", "hwXQoSPortQueueAlarmTrunkIndex"))
if mibBuilder.loadTexts: hwXQoSPortQueueAlarm.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortQueueAlarm.setDescription('hwXQoSPortQueueAlarm.')
hwXQoSPortQueueAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 11, 14)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSPortQueueAlarmIfIndex"), ("HUAWEI-XQoS-MIB", "hwXQoSPortQueueAlarmQueue"), ("HUAWEI-XQoS-MIB", "hwXQoSPortQueueAlarmTrunkIndex"))
if mibBuilder.loadTexts: hwXQoSPortQueueAlarmClear.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortQueueAlarmClear.setDescription('hwXQoSPortQueueAlarmClear.')
hwXQoSSecurityStormControlInterfaceTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 11, 15)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSSecurityStormControlInterfaceChassisId"), ("HUAWEI-XQoS-MIB", "hwXQoSSecurityStormControlInterfaceSlotId"), ("HUAWEI-XQoS-MIB", "hwXQoSSecurityStormControlInterfaceName"), ("HUAWEI-XQoS-MIB", "hwXQoSSecurityStormControlInterfaceVlan"))
if mibBuilder.loadTexts: hwXQoSSecurityStormControlInterfaceTrap.setStatus('current')
if mibBuilder.loadTexts: hwXQoSSecurityStormControlInterfaceTrap.setDescription('The SNMP trap is generated when the status of interface is changed for storm-control.')
hwXQoSResouceNotEnoughAlarmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 22))
hwXQoSStatResouceNotEnoughAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 11, 16)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSStatResouceNotEnoughSlotId"), ("HUAWEI-XQoS-MIB", "hwXQoSStatResouceNotEnoughStatType"))
if mibBuilder.loadTexts: hwXQoSStatResouceNotEnoughAlarm.setStatus('current')
if mibBuilder.loadTexts: hwXQoSStatResouceNotEnoughAlarm.setDescription('The SNMP trap is generated when the specific statistics resource is not enough.')
hwXQoSCARResouceNotEnoughAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 11, 17)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSCARResouceNotEnoughSlotId"), ("HUAWEI-XQoS-MIB", "hwXQoSCARResouceNotEnoughCARType"))
if mibBuilder.loadTexts: hwXQoSCARResouceNotEnoughAlarm.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCARResouceNotEnoughAlarm.setDescription('The SNMP trap is generated when the specific car resource is not enough.')
hwXQoSGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 12))
hwXQoSFrameId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSFrameId.setStatus('current')
if mibBuilder.loadTexts: hwXQoSFrameId.setDescription('The ID of the frame.')
hwXQoSSlotId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 12, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSSlotId.setStatus('current')
if mibBuilder.loadTexts: hwXQoSSlotId.setDescription('The ID of the slot that the interface is located.')
hwXQoSPortId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 12, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSPortId.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortId.setDescription('The ID of the port')
hwXQoSTrapIfName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 12, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSTrapIfName.setStatus('current')
if mibBuilder.loadTexts: hwXQoSTrapIfName.setDescription('The name of the interface.')
hwXQoSTrapQueueId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 12, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSTrapQueueId.setStatus('current')
if mibBuilder.loadTexts: hwXQoSTrapQueueId.setDescription('The ID of the queue giving an alarm.')
hwXQoSTrapDiscardPackets = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 12, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSTrapDiscardPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSTrapDiscardPackets.setDescription('The number of the discarded packets.')
hwXQoSStormControlObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 13))
hwXQoSStormControlTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 13, 1), )
if mibBuilder.loadTexts: hwXQoSStormControlTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSStormControlTable.setDescription('A Table about storm-control configuration information.')
hwXQoSStormControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 13, 1, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSStormControlIfIndex"))
if mibBuilder.loadTexts: hwXQoSStormControlEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSStormControlEntry.setDescription('Description.')
hwXQoSStormControlIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 13, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwXQoSStormControlIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSStormControlIfIndex.setDescription('The interface index,equal to ifIndex.')
hwXQoSStormControlBroadcastMinRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14881000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSStormControlBroadcastMinRate.setStatus('current')
if mibBuilder.loadTexts: hwXQoSStormControlBroadcastMinRate.setDescription('The low water mark of broadcast packets rate. Unit: pps (packets per second). zero : storm-control function is not enable for broadcast packets.')
hwXQoSStormControlBroadcastMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14881000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSStormControlBroadcastMaxRate.setStatus('current')
if mibBuilder.loadTexts: hwXQoSStormControlBroadcastMaxRate.setDescription('The high water mark of broadcast packets rate. Unit: pps (packets per second). zero : storm-control function is not enable for broadcast packets.')
hwXQoSStormControlMulticastMinRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14881000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSStormControlMulticastMinRate.setStatus('current')
if mibBuilder.loadTexts: hwXQoSStormControlMulticastMinRate.setDescription('The low water mark of multicast packets rate. Unit: pps (packets per second). zero : storm-control function is not enable for multicast packets.')
hwXQoSStormControlMulticastMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14881000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSStormControlMulticastMaxRate.setStatus('current')
if mibBuilder.loadTexts: hwXQoSStormControlMulticastMaxRate.setDescription('The high water mark of multicast packets rate. Unit: pps (packets per second). zero : storm-control function is not enable for multicast packets.')
hwXQoSStormControlAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 13, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("block", 2), ("shutdown", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSStormControlAction.setStatus('current')
if mibBuilder.loadTexts: hwXQoSStormControlAction.setDescription('storm-control action. none : no action will be taken. block: packets will be blocked if receiving-rate is higher than the high water mark and will be unblocked only when the receiving-rate drops below the low water mark. shutdown: the interface will be shutdown if receiving-rate is higher than the high water mark and the interface will NOT be open when the receiving-rate drops below the low water mark. To open the interface , use undo shutdown commond.')
hwXQoSStormControlInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 13, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 180)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSStormControlInterval.setStatus('current')
if mibBuilder.loadTexts: hwXQoSStormControlInterval.setDescription('The interval that the broadcast storm or mutilcast storm will be checked. Unit: second.')
hwXQoSStormControlTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 13, 1, 1, 8), EnabledStatus().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSStormControlTrapEnable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSStormControlTrapEnable.setDescription('Enable or disable trap. enable(1): report trap when interface status changes. disable(2): do not report trap when interface status changes. ')
hwXQoSStormControlLogEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 13, 1, 1, 9), EnabledStatus().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSStormControlLogEnable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSStormControlLogEnable.setDescription('Enable or disable log. enable(1): record log when interface status changes. disable(2): do not record log when interface status changes. ')
hwXQoSStormControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 13, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("normal", 1), ("broadcastBlocked", 2), ("multicastBlocked", 3), ("bothBlocked", 4), ("shutdown", 5), ("unicastBlocked", 6), ("allBlocked", 7), ("bcmcBlocked", 8), ("bcucBlocked", 9), ("ucmcBlocked", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSStormControlStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSStormControlStatus.setDescription('The status of the interface. normal: no storm-control aciton is taken. broadcastBlocked: broadcast packets is blocked. multicastBlocked: multicast packets is blocked. bothBlocked: both the broadcast and multicast packets are blocked. shutdown: the interface is shutdown. unicastBlocked: unicast packets is blocked. allBlocked: broadcast multicast unicast packets is blocked. bcmcBlocked: both the broadcast and multicast packets are blocked. bcucBlocked: both the broadcast and unicast packets are blocked. ucmcBlocked: both the unicast and multicast packets are blocked.')
hwXQoSStormControlUnicastMinRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 13, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14881000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSStormControlUnicastMinRate.setStatus('current')
if mibBuilder.loadTexts: hwXQoSStormControlUnicastMinRate.setDescription('The low water mark of unicast packets rate. Unit: pps (packets per second). zero : storm-control function is not enable for unicast packets.')
hwXQoSStormControlUnicastMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 13, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14881000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSStormControlUnicastMaxRate.setStatus('current')
if mibBuilder.loadTexts: hwXQoSStormControlUnicastMaxRate.setDescription('The high water mark of unicast packets rate. Unit: pps (packets per second). zero : storm-control function is not enable for unicast packets.')
hwXQoSStormControlBcMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 13, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("pps", 0), ("kbps", 1), ("percent", 2), ("none", 3))).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSStormControlBcMode.setStatus('current')
if mibBuilder.loadTexts: hwXQoSStormControlBcMode.setDescription('The mode of broadcast packets. pps : (packets per second). kbps : (kbit per second). percent : (%). none: initialization.')
hwXQoSStormControlMcMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 13, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("pps", 0), ("kbps", 1), ("percent", 2), ("none", 3))).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSStormControlMcMode.setStatus('current')
if mibBuilder.loadTexts: hwXQoSStormControlMcMode.setDescription('The mode of multicast packets. pps : (packets per second). kbps : (kbit per second). percent : (%). none: initialization.')
hwXQoSStormControlUcMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 13, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("pps", 0), ("kbps", 1), ("percent", 2), ("none", 3))).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSStormControlUcMode.setStatus('current')
if mibBuilder.loadTexts: hwXQoSStormControlUcMode.setDescription('The mode of unicast packets. pps : (packets per second). kbps : (kbit per second). percent : (%). none: initialization.')
hwXQoSStormControlNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 14))
hwXQoSStormControlTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 14, 1)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSStormControlBroadcastMinRate"), ("HUAWEI-XQoS-MIB", "hwXQoSStormControlBroadcastMaxRate"), ("HUAWEI-XQoS-MIB", "hwXQoSStormControlMulticastMinRate"), ("HUAWEI-XQoS-MIB", "hwXQoSStormControlMulticastMaxRate"), ("HUAWEI-XQoS-MIB", "hwXQoSStormControlAction"), ("HUAWEI-XQoS-MIB", "hwXQoSStormControlInterval"), ("HUAWEI-XQoS-MIB", "hwXQoSStormControlStatus"), ("HUAWEI-XQoS-MIB", "hwXQoSStormControlUnicastMinRate"), ("HUAWEI-XQoS-MIB", "hwXQoSStormControlUnicastMaxRate"), ("HUAWEI-XQoS-MIB", "hwXQoSStormControlBcMode"), ("HUAWEI-XQoS-MIB", "hwXQoSStormControlMcMode"), ("HUAWEI-XQoS-MIB", "hwXQoSStormControlUcMode"))
if mibBuilder.loadTexts: hwXQoSStormControlTrap.setStatus('current')
if mibBuilder.loadTexts: hwXQoSStormControlTrap.setDescription('The SNMP trap is generated when the status of interface is changed for storm-control. hwXQoSStormControlBroadcastMinRate: The low water mark of broadcast packets rate. hwXQoSStormControlBroadcastMaxRate: The high water mark of broadcast packets rate. hwXQoSStormControlMulticastMinRate: The low water mark of multicast packets rate. hwXQoSStormControlMulticastMaxRate: The high water mark of multicast packets rate. hwXQoSStormControlAction: The storm-control action. hwXQoSStormControlInterval: The interval that the broadcast storm or mutilcast storm will be checked. hwXQoSStormControlStatus: The status of the interface. hwXQoSStormControlUnicastMinRate: The low water mark of unicast packets rate. hwXQoSStormControlUniicastMaxRate: The high water mark of unicast packets rate. hwXQoSStormControlBcMode: The mode of Broadcast packets. hwXQoSStormControlMcMode: The mode of multicast packets. hwXQoSStormControlUcMode: The mode of unicast packets.')
hwXQoSQueueStatisticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 15))
hwXQoSQueueStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 15, 1), )
if mibBuilder.loadTexts: hwXQoSQueueStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSQueueStatisticsTable.setDescription('A Table about queue statistics.')
hwXQoSQueueStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 15, 1, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSQueueStatisticsIngressIfIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSQueueStatisticsEgressIfIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSQueueStatisticsQueueIndex"))
if mibBuilder.loadTexts: hwXQoSQueueStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSQueueStatisticsEntry.setDescription('The entry of queue statistics infomation.')
hwXQoSQueueStatisticsIngressIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 15, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwXQoSQueueStatisticsIngressIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSQueueStatisticsIngressIfIndex.setDescription('The ingress interface index. 2147483647: invalid interface index, the statistics will be the count of packets of the egress interface and queue. The ingress interface index and the egress interface index can not be 2147483647 at the same time.')
hwXQoSQueueStatisticsEgressIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 15, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: hwXQoSQueueStatisticsEgressIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSQueueStatisticsEgressIfIndex.setDescription('The egress interface index. 2147483647: invalid interface index, the statistics will be the count of packets of the ingress interface and queue. The ingress interface index and the egress interface index can not be 2147483647 at the same time. ')
hwXQoSQueueStatisticsQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("be", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("ef", 6), ("cs6", 7), ("cs7", 8))))
if mibBuilder.loadTexts: hwXQoSQueueStatisticsQueueIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSQueueStatisticsQueueIndex.setDescription('The queue index.')
hwXQoSQueueStatisticsPassedPacketsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 15, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSQueueStatisticsPassedPacketsCount.setStatus('current')
if mibBuilder.loadTexts: hwXQoSQueueStatisticsPassedPacketsCount.setDescription('The passed packets count. If the ingress interface index is 2147483647, this node will be the count of passed packets of the specified queue of the ingress interface. If the egress interface index is 2147483647, this node will be the count of passed packets of the specified queue of the ingress interface. If none of the ingress and egress interface is 2147483647, this node will be the count of passed packets which is from the ingress interface to the egress interface at the specified queue. The ingress interface index and the egress interface index can not be 2147483647 at the same time .')
hwXQosQueueStatisticsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 15, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQosQueueStatisticsReset.setStatus('current')
if mibBuilder.loadTexts: hwXQosQueueStatisticsReset.setDescription('Set this node to reset the counter. Reset(1) will be returned if this node is read.')
hwXQoSQueueStatisticsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 15, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSQueueStatisticsRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSQueueStatisticsRowStatus.setDescription('RowStatus. Three actions are used: active,createandgo, destroy')
hwXQoSPortStatisticsDropObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 16))
hwXQoSPortStatisticsDropTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 16, 1), )
if mibBuilder.loadTexts: hwXQoSPortStatisticsDropTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortStatisticsDropTable.setDescription('A table about drop packets statistics of port.')
hwXQoSPortStatisticsDropEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 16, 1, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSPortStatisticsDropIfIndex"))
if mibBuilder.loadTexts: hwXQoSPortStatisticsDropEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortStatisticsDropEntry.setDescription('The entry about drop packets statistics of port.')
hwXQoSPortStatisticsDropIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 16, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwXQoSPortStatisticsDropIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortStatisticsDropIfIndex.setDescription('The interface index.')
hwXQoSPortStatisticsDropPacketsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 16, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSPortStatisticsDropPacketsCount.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortStatisticsDropPacketsCount.setDescription('The dropped packets count of the port.')
hwXQosPortStatisticsDropReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQosPortStatisticsDropReset.setStatus('current')
if mibBuilder.loadTexts: hwXQosPortStatisticsDropReset.setDescription('Set this node to reset the counter. Reset(1) will be returned if this node is read.')
hwXQosPortStatisticsDropResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 16, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQosPortStatisticsDropResetTime.setStatus('current')
if mibBuilder.loadTexts: hwXQosPortStatisticsDropResetTime.setDescription("The value of sysUpTime on the most recent occasion at which one of this interface's counters suffered a discontinuity. If no such discontinuities have occurred since the last re-initialization of the local management subsystem, then this object contains a zero value.")
hwXQoSQueueStatisticsDropObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 17))
hwXQoSQueueStatisticsDropTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 17, 1), )
if mibBuilder.loadTexts: hwXQoSQueueStatisticsDropTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSQueueStatisticsDropTable.setDescription('A table about drop packets statistics of queue.')
hwXQoSQueueStatisticsDropEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 17, 1, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSQueueStatisticsDropIfIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSQueueStatisticsDropQueueIndex"))
if mibBuilder.loadTexts: hwXQoSQueueStatisticsDropEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSQueueStatisticsDropEntry.setDescription('The entry about drop packets statistics of queue.')
hwXQoSQueueStatisticsDropIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 17, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwXQoSQueueStatisticsDropIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSQueueStatisticsDropIfIndex.setDescription('The interface index.')
hwXQoSQueueStatisticsDropQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("be", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("ef", 6), ("cs6", 7), ("cs7", 8))))
if mibBuilder.loadTexts: hwXQoSQueueStatisticsDropQueueIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSQueueStatisticsDropQueueIndex.setDescription('The queue index.')
hwXQoSQueueStatisticsDropPacketsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 17, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSQueueStatisticsDropPacketsCount.setStatus('current')
if mibBuilder.loadTexts: hwXQoSQueueStatisticsDropPacketsCount.setDescription('The dropped packets count of the queue.')
hwXQosQueueStatisticsDropReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 17, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQosQueueStatisticsDropReset.setStatus('current')
if mibBuilder.loadTexts: hwXQosQueueStatisticsDropReset.setDescription('Set this node to reset the counter. Reset(1) will be returned if this node is read.')
hwXQosQueueStatisticsDropResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 17, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQosQueueStatisticsDropResetTime.setStatus('current')
if mibBuilder.loadTexts: hwXQosQueueStatisticsDropResetTime.setDescription("The value of sysUpTime on the most recent occasion at which one of this queue's counters suffered a discontinuity. If no such discontinuities have occurred since the last re-initialization of the local management subsystem, then this object contains a zero value.")
hwXQoSRuleFailObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 18))
hwXQoSRuleFailTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 18, 1), )
if mibBuilder.loadTexts: hwXQoSRuleFailTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSRuleFailTable.setDescription('hwXQoSRuleFailTable')
hwXQoSRuleFailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 18, 1, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSRuleFailInfo"))
if mibBuilder.loadTexts: hwXQoSRuleFailEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSRuleFailEntry.setDescription('hwXQoSRuleFailEntry')
hwXQoSRuleFailInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 18, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: hwXQoSRuleFailInfo.setStatus('current')
if mibBuilder.loadTexts: hwXQoSRuleFailInfo.setDescription('hwXQoSRuleFailInfo.')
hwXQoSProfileObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 19))
hwXQoSProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 19, 1), )
if mibBuilder.loadTexts: hwXQoSProfileTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSProfileTable.setDescription('A table of the qos-profile')
hwXQoSProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 19, 1, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSProfileName"))
if mibBuilder.loadTexts: hwXQoSProfileEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSProfileEntry.setDescription('A table of the redirect next hop information')
hwXQoSProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 19, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: hwXQoSProfileName.setStatus('current')
if mibBuilder.loadTexts: hwXQoSProfileName.setDescription('Qos-profile name.')
hwXQoSPortQueueAlarmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 20))
hwXQoSPortQueueAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 20, 1), )
if mibBuilder.loadTexts: hwXQoSPortQueueAlarmTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortQueueAlarmTable.setDescription('hwXQoSPortQueueAlarmTable')
hwXQoSPortQueueAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 20, 1, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSPortQueueAlarmIfIndex"))
if mibBuilder.loadTexts: hwXQoSPortQueueAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortQueueAlarmEntry.setDescription('hwXQoSPortQueueAlarmEntry')
hwXQoSPortQueueAlarmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 20, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwXQoSPortQueueAlarmIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortQueueAlarmIfIndex.setDescription('The interface index.')
hwXQoSPortQueueAlarmQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 20, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSPortQueueAlarmQueue.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortQueueAlarmQueue.setDescription('hwXQoSPortQueueAlarmQueue.')
hwXQoSPortQueueAlarmTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 20, 1, 1, 3), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSPortQueueAlarmTrunkIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortQueueAlarmTrunkIndex.setDescription('The trunk interface index.')
hwXQoSStatResouceNotEnoughAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 22, 1), )
if mibBuilder.loadTexts: hwXQoSStatResouceNotEnoughAlarmTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSStatResouceNotEnoughAlarmTable.setDescription('hwXQoSStatResouceNotEnoughAlarmTable')
hwXQoSStatResouceNotEnoughAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 22, 1, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSStatResouceNotEnoughSlotId"), (0, "HUAWEI-XQoS-MIB", "hwXQoSStatResouceNotEnoughStatType"))
if mibBuilder.loadTexts: hwXQoSStatResouceNotEnoughAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSStatResouceNotEnoughAlarmEntry.setDescription('hwXQoSStatResouceNotEnoughAlarmEntry')
hwXQoSStatResouceNotEnoughSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 22, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: hwXQoSStatResouceNotEnoughSlotId.setStatus('current')
if mibBuilder.loadTexts: hwXQoSStatResouceNotEnoughSlotId.setDescription('Slot ID of the LPU where the stastitics resource is insufficient')
hwXQoSStatResouceNotEnoughStatType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 22, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 511)))
if mibBuilder.loadTexts: hwXQoSStatResouceNotEnoughStatType.setStatus('current')
if mibBuilder.loadTexts: hwXQoSStatResouceNotEnoughStatType.setDescription('Type of insufficient statistics resource')
hwXQoSCARResouceNotEnoughAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 22, 2), )
if mibBuilder.loadTexts: hwXQoSCARResouceNotEnoughAlarmTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCARResouceNotEnoughAlarmTable.setDescription('hwXQoSCARResouceNotEnoughAlarmTable')
hwXQoSCARResouceNotEnoughAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 22, 2, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSCARResouceNotEnoughSlotId"), (0, "HUAWEI-XQoS-MIB", "hwXQoSCARResouceNotEnoughCARType"))
if mibBuilder.loadTexts: hwXQoSCARResouceNotEnoughAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCARResouceNotEnoughAlarmEntry.setDescription('hwXQoSCARResouceNotEnoughAlarmEntry')
hwXQoSCARResouceNotEnoughSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 22, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: hwXQoSCARResouceNotEnoughSlotId.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCARResouceNotEnoughSlotId.setDescription('Slot ID of the LPU where the CAR resource is insufficient')
hwXQoSCARResouceNotEnoughCARType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 22, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 511)))
if mibBuilder.loadTexts: hwXQoSCARResouceNotEnoughCARType.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCARResouceNotEnoughCARType.setDescription('Type of insufficient car resource')
hwXQoSQppbPolicyStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 37), )
if mibBuilder.loadTexts: hwXQoSQppbPolicyStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSQppbPolicyStatisticsTable.setDescription(' This table is used to query the statistics of qppb. ')
hwXQoSQppbPolicyStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 37, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSQppbPolicyLocalID"), (0, "HUAWEI-XQoS-MIB", "hwXQoSQppbPolicyDirection"), (0, "HUAWEI-XQoS-MIB", "hwXQoSQppbPolicyStatisticsInterfaceIndex"))
if mibBuilder.loadTexts: hwXQoSQppbPolicyStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSQppbPolicyStatisticsEntry.setDescription('hwXQoSQppbPolicyStatisticsEntry')
hwXQoSQppbPolicyLocalID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 37, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSQppbPolicyLocalID.setStatus('current')
if mibBuilder.loadTexts: hwXQoSQppbPolicyLocalID.setDescription('qos-local-id <1~31>')
hwXQoSQppbPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 37, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSQppbPolicyDirection.setStatus('current')
if mibBuilder.loadTexts: hwXQoSQppbPolicyDirection.setDescription(' This object indicates the direction where statistics are queried. The value can be: 1: inbound 2: outbound ')
hwXQoSQppbPolicyStatisticsInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 37, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSQppbPolicyStatisticsInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSQppbPolicyStatisticsInterfaceIndex.setDescription(' This object indicates the interface index. ')
hwXQoSQppbPolicyStatisticsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 37, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwXQoSQppbPolicyStatisticsReset.setStatus('current')
if mibBuilder.loadTexts: hwXQoSQppbPolicyStatisticsReset.setDescription(' This object indicates the statistics are reset. ')
hwXQoSQppbPolicyMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 37, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSQppbPolicyMatchedPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSQppbPolicyMatchedPackets.setDescription(' This object indicates the number of matched packets. ')
hwXQoSQppbPolicyMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 37, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSQppbPolicyMatchedBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQoSQppbPolicyMatchedBytes.setDescription(' This object indicates the number of matched bytes. ')
hwXQoSQppbPolicyPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 37, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSQppbPolicyPassedPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSQppbPolicyPassedPackets.setDescription(' This object indicates the number of passed packets. ')
hwXQoSQppbPolicyPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 37, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSQppbPolicyPassedBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQoSQppbPolicyPassedBytes.setDescription(' This object indicates the number of passed bytes. ')
hwXQoSQppbPolicyDropedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 37, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSQppbPolicyDropedPackets.setStatus('current')
if mibBuilder.loadTexts: hwXQoSQppbPolicyDropedPackets.setDescription(' This object indicates the number of droped packets. ')
hwXQoSQppbPolicyDropedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 37, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSQppbPolicyDropedBytes.setStatus('current')
if mibBuilder.loadTexts: hwXQoSQppbPolicyDropedBytes.setDescription(' This object indicates the number of droped bytes. ')
hwXQoSQppbPolicyMatchPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 37, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSQppbPolicyMatchPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwXQoSQppbPolicyMatchPacketsRate.setDescription(' This object indicates the rate of matched packets. ')
hwXQoSQppbPolicyMatchBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 37, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSQppbPolicyMatchBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwXQoSQppbPolicyMatchBytesRate.setDescription(' This object indicates the rate of matched bytes. ')
hwXQoSIfPhbEnableTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 38), )
if mibBuilder.loadTexts: hwXQoSIfPhbEnableTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfPhbEnableTable.setDescription('qos phb enable <domain-name> [ vlan ] [vlan-id].')
hwXQoSIfPhbEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 38, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSIfPhbEnableIfIndex"), (0, "HUAWEI-XQoS-MIB", "hwXQoSIfPhbEnableVlanId"))
if mibBuilder.loadTexts: hwXQoSIfPhbEnableEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfPhbEnableEntry.setDescription('hwXQoSIfPhbEnableEntry.')
hwXQoSIfPhbEnableIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 38, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfPhbEnableIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfPhbEnableIfIndex.setDescription('The value of this object identifies the interface index.')
hwXQoSIfPhbEnableVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 38, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfPhbEnableVlanId.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfPhbEnableVlanId.setDescription('The value of this object identifies the VLAN ID of the interface.')
hwXQoSIfPhbEnableDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 38, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfPhbEnableDomainName.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfPhbEnableDomainName.setDescription('This object indicates the name of the DS domain.The value of the object ranges from 1 to 31.The name cannot contain Chinese characters.')
hwXQoSIfPhbEnableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 38, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfPhbEnableRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfPhbEnableRowStatus.setDescription('This value of this object identifies the row status.The value can be any of the following:CreateAndGo(4), Destroy(6),Active(1).')
hwXQoSIfRemarkDscpTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 39), )
if mibBuilder.loadTexts: hwXQoSIfRemarkDscpTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfRemarkDscpTable.setDescription('enable to remark DSCP of the payload. ')
hwXQoSIfRemarkDscpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 39, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSIfRemarkDscpIfIndex"))
if mibBuilder.loadTexts: hwXQoSIfRemarkDscpEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfRemarkDscpEntry.setDescription('hwXQoSIfRemarkDscpEntry.')
hwXQoSIfRemarkDscpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 39, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSIfRemarkDscpIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfRemarkDscpIfIndex.setDescription('The value of this object identifies the interface index.')
hwXQoSIfRemarkDscpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 1, 39, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwXQoSIfRemarkDscpRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfRemarkDscpRowStatus.setDescription('This value of this object identifies the row status.The value can be any of the following:CreateAndGo(4), Destroy(6),Active(1).')
hwXQoSCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 1))
hwXQoSGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2))
hwXQoSCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 1, 1)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSIfQueueGroup"), ("HUAWEI-XQoS-MIB", "hwXQoSIfCarStatisticsGroup"), ("HUAWEI-XQoS-MIB", "hwXQoSCpDefendStatisticsGroup"), ("HUAWEI-XQoS-MIB", "hwNotificationExtGroup"), ("HUAWEI-XQoS-MIB", "hwXQosAtmTrafficQueueGroup"), ("HUAWEI-XQoS-MIB", "hwXQosAtmPvcServiceTypeGroup"), ("HUAWEI-XQoS-MIB", "hwXQosIfOutboundQueueStatisticGroup"), ("HUAWEI-XQoS-MIB", "hwXQoSBaGroup"), ("HUAWEI-XQoS-MIB", "hwXQoSBa8021pPhbGroup"), ("HUAWEI-XQoS-MIB", "hwXQoSBa8021pMapGroup"), ("HUAWEI-XQoS-MIB", "hwXQoSBaDscpPhbGroup"), ("HUAWEI-XQoS-MIB", "hwXQoSBaDscpMapGroup"), ("HUAWEI-XQoS-MIB", "hwXQoSBaExpPhbGroup"), ("HUAWEI-XQoS-MIB", "hwXQoSBaExpMapGroup"), ("HUAWEI-XQoS-MIB", "hwXQoSIfDiffDomainGroup"), ("HUAWEI-XQoS-MIB", "hwXQoSIfTrust8021pGroup"), ("HUAWEI-XQoS-MIB", "hwXQoSCommonInboundGroup"), ("HUAWEI-XQoS-MIB", "hwXQoSPppInboundGroup"), ("HUAWEI-XQoS-MIB", "hwXQoSServiceclassGroup"), ("HUAWEI-XQoS-MIB", "hwXQoSPhbGroup"), ("HUAWEI-XQoS-MIB", "hwXQoSFieldDeiGroup"), ("HUAWEI-XQoS-MIB", "hwXQoSPicForwardingGroup"), ("HUAWEI-XQoS-MIB", "hwXQoSCarTableGroup"), ("HUAWEI-XQoS-MIB", "hwXQoSPortShapingGroup"), ("HUAWEI-XQoS-MIB", "hwXQoSQueueGroup"), ("HUAWEI-XQoS-MIB", "hwXQoSCarStatisticsGroup"), ("HUAWEI-XQoS-MIB", "hwXQoSCpRateLimitGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSCompliance = hwXQoSCompliance.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCompliance.setDescription('The compliance statement for entities that implement extend QoS on a router.')
hwXQoSIfQueueGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 1)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSIfQueueIfIndex"), ("HUAWEI-XQoS-MIB", "hwXQoSIfQueueVlanID"), ("HUAWEI-XQoS-MIB", "hwXQoSIfQueueCosType"), ("HUAWEI-XQoS-MIB", "hwXQoSIfQueuePassedPackets"), ("HUAWEI-XQoS-MIB", "hwXQoSIfQueuePassededBytes"), ("HUAWEI-XQoS-MIB", "hwXQoSIfQueueTotalPackets"), ("HUAWEI-XQoS-MIB", "hwXQoSIfQueueTotalBytes"), ("HUAWEI-XQoS-MIB", "hwXQoSIfQueueDiscardedPackets"), ("HUAWEI-XQoS-MIB", "hwXQoSIfQueueDiscardedBytes"), ("HUAWEI-XQoS-MIB", "hwXQoSIfQueuePassedPacketRate"), ("HUAWEI-XQoS-MIB", "hwXQoSIfQueuePassedByteRate"), ("HUAWEI-XQoS-MIB", "hwXQoSIfQueueDiscardedPacketRate"), ("HUAWEI-XQoS-MIB", "hwXQoSIfQueueDiscardedByteRate"), ("HUAWEI-XQoS-MIB", "hwXQoSIfQueueResetFlag"), ("HUAWEI-XQoS-MIB", "hwXQoSIfQueueUsagePercentage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSIfQueueGroup = hwXQoSIfQueueGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfQueueGroup.setDescription('This is a optional group of information.')
hwXQoSIfCarStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 2)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSIfCarConformedPackets"), ("HUAWEI-XQoS-MIB", "hwXQoSIfCarConformedBytes"), ("HUAWEI-XQoS-MIB", "hwXQoSIfCarConformedPacketRate"), ("HUAWEI-XQoS-MIB", "hwXQoSIfCarConformedByteRate"), ("HUAWEI-XQoS-MIB", "hwXQoSIfCarExceededPackets"), ("HUAWEI-XQoS-MIB", "hwXQoSIfCarExceededBytes"), ("HUAWEI-XQoS-MIB", "hwXQoSIfCarExceededPacketRate"), ("HUAWEI-XQoS-MIB", "hwXQoSIfCarExceededByteRate"), ("HUAWEI-XQoS-MIB", "hwXQoSIfCarOverflowPackets"), ("HUAWEI-XQoS-MIB", "hwXQoSIfCarOverflowBytes"), ("HUAWEI-XQoS-MIB", "hwXQoSIfCarOverflowPacketRate"), ("HUAWEI-XQoS-MIB", "hwXQoSIfCarOverflowByteRate"), ("HUAWEI-XQoS-MIB", "hwXQoSIfCarPassedPackets"), ("HUAWEI-XQoS-MIB", "hwXQoSIfCarPassedBytes"), ("HUAWEI-XQoS-MIB", "hwXQoSIfCarDiscardedPackets"), ("HUAWEI-XQoS-MIB", "hwXQoSIfCarDiscardedBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSIfCarStatisticsGroup = hwXQoSIfCarStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfCarStatisticsGroup.setDescription('This is a optional group of information.')
hwXQoSCpDefendStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 3)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSCpDefendSlotId"), ("HUAWEI-XQoS-MIB", "hwXQoSCpDefendObjectIndex"), ("HUAWEI-XQoS-MIB", "hwXQoSCpDefendPassedPackets"), ("HUAWEI-XQoS-MIB", "hwXQoSCpDefendPassedBytes"), ("HUAWEI-XQoS-MIB", "hwXQoSCpDefendPassedPacketRate"), ("HUAWEI-XQoS-MIB", "hwXQoSCpDefendPassedByteRate"), ("HUAWEI-XQoS-MIB", "hwXQoSCpDefendDiscardedPackets"), ("HUAWEI-XQoS-MIB", "hwXQoSCpDefendDiscardedBytes"), ("HUAWEI-XQoS-MIB", "hwXQoSCpDefendDiscardedPacketRate"), ("HUAWEI-XQoS-MIB", "hwXQoSCpDefendDiscardedByteRate"), ("HUAWEI-XQoS-MIB", "hwXQoSCpDefendDiscardedThreshold"), ("HUAWEI-XQoS-MIB", "hwXQoSCpDefendChassisID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSCpDefendStatisticsGroup = hwXQoSCpDefendStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpDefendStatisticsGroup.setDescription('This is a optional group of information.')
hwNotificationExtGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 4)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSCpDefendDiscardedRateAlarm"), ("HUAWEI-XQoS-MIB", "hwXQoSCpDefendDiscardedPacketAlarm"), ("HUAWEI-XQoS-MIB", "hwXQoSQueueDiscardThresholdTrap"), ("HUAWEI-XQoS-MIB", "hwXQoSStormControlTrap"), ("HUAWEI-XQoS-MIB", "hwXQoSCprlDiscardedPacketAlarm"), ("HUAWEI-XQoS-MIB", "hwXQoSCprlDiscardedPacketAlarmClear"), ("HUAWEI-XQoS-MIB", "hwXQoSRedirectNextHopChangedAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwNotificationExtGroup = hwNotificationExtGroup.setStatus('current')
if mibBuilder.loadTexts: hwNotificationExtGroup.setDescription('The HUAWEI defend trap info.')
hwXQoSGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 5)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSFrameId"), ("HUAWEI-XQoS-MIB", "hwXQoSSlotId"), ("HUAWEI-XQoS-MIB", "hwXQoSPortId"), ("HUAWEI-XQoS-MIB", "hwXQoSTrapIfName"), ("HUAWEI-XQoS-MIB", "hwXQoSTrapQueueId"), ("HUAWEI-XQoS-MIB", "hwXQoSTrapDiscardPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSGeneralGroup = hwXQoSGeneralGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSGeneralGroup.setDescription('This is a optional group of information.')
hwXQoSSredGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 6)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSIfSredQueueIndex"), ("HUAWEI-XQoS-MIB", "hwXQoSIfSredRedStartDiscardPoint"), ("HUAWEI-XQoS-MIB", "hwXQoSIfSredRedDiscardProbability"), ("HUAWEI-XQoS-MIB", "hwXQoSIfSredYellowStartDiscardPoint"), ("HUAWEI-XQoS-MIB", "hwXQoSIfSredYellowDiscardProbability"), ("HUAWEI-XQoS-MIB", "hwXQoSIfSredRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSSredGroup = hwXQoSSredGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSSredGroup.setDescription('This is Sred group of information.')
hwXQosAtmTrafficQueueGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 7)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSAtmTrafficQueueServiceClass"), ("HUAWEI-XQoS-MIB", "hwXQoSAtmTrafficQueueRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQosAtmTrafficQueueGroup = hwXQosAtmTrafficQueueGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQosAtmTrafficQueueGroup.setDescription('This is a optional group of information.')
hwXQosAtmPvcServiceTypeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 8)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSAtmPvcNameServiceTypeIndex"), ("HUAWEI-XQoS-MIB", "hwXQoSAtmPvcServiceType"), ("HUAWEI-XQoS-MIB", "hwXQoSAtmPvcPcr"), ("HUAWEI-XQoS-MIB", "hwXQoSAtmPvcCdvt"), ("HUAWEI-XQoS-MIB", "hwXQoSAtmPvcVbrScr"), ("HUAWEI-XQoS-MIB", "hwXQoSAtmPvcVbrMbs"), ("HUAWEI-XQoS-MIB", "hwXQoSAtmPvcRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQosAtmPvcServiceTypeGroup = hwXQosAtmPvcServiceTypeGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQosAtmPvcServiceTypeGroup.setDescription('This is a optional group of information.')
hwXQosIfOutboundQueueStatisticGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 9)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSIfQueDiscardPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQosIfOutboundQueueStatisticGroup = hwXQosIfOutboundQueueStatisticGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQosIfOutboundQueueStatisticGroup.setDescription('This is a optional group of information.')
hwXQoSShapingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 10)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSIfShapingIfIndex"), ("HUAWEI-XQoS-MIB", "hwXQoSIfShapingQueueIndex"), ("HUAWEI-XQoS-MIB", "hwXQoSIfShapingQueueCir"), ("HUAWEI-XQoS-MIB", "hwXQoSIfShapingQueuePir"), ("HUAWEI-XQoS-MIB", "hwXQoSIfShapingRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSShapingGroup = hwXQoSShapingGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSShapingGroup.setDescription('This is Shaping group of information.')
hwXQoSUrpfDiscardStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 11)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSUrpfSlotPhysicalIndex"), ("HUAWEI-XQoS-MIB", "hwXQoSUrpfDiscardedPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSUrpfDiscardStatisticsGroup = hwXQoSUrpfDiscardStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSUrpfDiscardStatisticsGroup.setDescription('This is a optional group of information.')
hwXQoSBaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 12)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSBaIndex"), ("HUAWEI-XQoS-MIB", "hwXQoSBaName"), ("HUAWEI-XQoS-MIB", "hwXQoSBaRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSBaGroup = hwXQoSBaGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaGroup.setDescription('This is different server domain group of information.')
hwXQoSBa8021pPhbGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 13)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSBa8021pPhbIndex"), ("HUAWEI-XQoS-MIB", "hwXQoSBa8021pPhbPri"), ("HUAWEI-XQoS-MIB", "hwXQoSBa8021pPhbCos"), ("HUAWEI-XQoS-MIB", "hwXQoSBa8021pPhbColour"), ("HUAWEI-XQoS-MIB", "hwXQoSBa8021pPhbRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSBa8021pPhbGroup = hwXQoSBa8021pPhbGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBa8021pPhbGroup.setDescription('This is different server domain group of information.')
hwXQoSBa8021pMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 14)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSBa8021pMapIndex"), ("HUAWEI-XQoS-MIB", "hwXQoSBa8021pMapCos"), ("HUAWEI-XQoS-MIB", "hwXQoSBa8021pMapColour"), ("HUAWEI-XQoS-MIB", "hwXQoSBa8021pMapPri"), ("HUAWEI-XQoS-MIB", "hwXQoSBa8021pMapRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSBa8021pMapGroup = hwXQoSBa8021pMapGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBa8021pMapGroup.setDescription('This is different server domain group of information.')
hwXQoSBaDscpPhbGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 15)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSBaDscpPhbIndex"), ("HUAWEI-XQoS-MIB", "hwXQoSBaDscpPhbPri"), ("HUAWEI-XQoS-MIB", "hwXQoSBaDscpPhbCos"), ("HUAWEI-XQoS-MIB", "hwXQoSBaDscpPhbColour"), ("HUAWEI-XQoS-MIB", "hwXQoSBaDscpPhbRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSBaDscpPhbGroup = hwXQoSBaDscpPhbGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaDscpPhbGroup.setDescription('This is different server domain group of information.')
hwXQoSBaDscpMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 16)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSBaDscpMapIndex"), ("HUAWEI-XQoS-MIB", "hwXQoSBaDscpMapCos"), ("HUAWEI-XQoS-MIB", "hwXQoSBaDscpMapColour"), ("HUAWEI-XQoS-MIB", "hwXQoSBaDscpMapPri"), ("HUAWEI-XQoS-MIB", "hwXQoSBaDscpMapRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSBaDscpMapGroup = hwXQoSBaDscpMapGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaDscpMapGroup.setDescription('This is different server domain group of information.')
hwXQoSBaExpPhbGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 17)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSBaExpPhbIndex"), ("HUAWEI-XQoS-MIB", "hwXQoSBaExpPhbPri"), ("HUAWEI-XQoS-MIB", "hwXQoSBaExpPhbCos"), ("HUAWEI-XQoS-MIB", "hwXQoSBaExpPhbColour"), ("HUAWEI-XQoS-MIB", "hwXQoSBaExpPhbRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSBaExpPhbGroup = hwXQoSBaExpPhbGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaExpPhbGroup.setDescription('This is different server domain group of information.')
hwXQoSBaExpMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 18)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSBaExpMapIndex"), ("HUAWEI-XQoS-MIB", "hwXQoSBaExpMapCos"), ("HUAWEI-XQoS-MIB", "hwXQoSBaExpMapColour"), ("HUAWEI-XQoS-MIB", "hwXQoSBaExpMapPri"), ("HUAWEI-XQoS-MIB", "hwXQoSBaExpMapRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSBaExpMapGroup = hwXQoSBaExpMapGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaExpMapGroup.setDescription('This is different server domain group of information.')
hwXQoSIfDiffDomainGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 19)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSIfDiffDomainIfIndex"), ("HUAWEI-XQoS-MIB", "hwXQoSIfDiffDomainVlanId"), ("HUAWEI-XQoS-MIB", "hwXQoSIfDiffDomainName"), ("HUAWEI-XQoS-MIB", "hwXQoSIfDiffDomainRowStatus"), ("HUAWEI-XQoS-MIB", "hwXQoSIfDiffDomainVlanId2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSIfDiffDomainGroup = hwXQoSIfDiffDomainGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfDiffDomainGroup.setDescription('This is different server domain group of information.')
hwXQoSBaPhbGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 20)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSBaPhbType"), ("HUAWEI-XQoS-MIB", "hwXQoSBaPhbPri"), ("HUAWEI-XQoS-MIB", "hwXQoSBaPhbCos"), ("HUAWEI-XQoS-MIB", "hwXQoSBaPhbColour"), ("HUAWEI-XQoS-MIB", "hwXQoSBaPhbRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSBaPhbGroup = hwXQoSBaPhbGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaPhbGroup.setDescription('This is different server domain group of information.')
hwXQoSBaMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 21)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSBaMapType"), ("HUAWEI-XQoS-MIB", "hwXQoSBaMapCos"), ("HUAWEI-XQoS-MIB", "hwXQoSBaMapColour"), ("HUAWEI-XQoS-MIB", "hwXQoSBaMapPri"), ("HUAWEI-XQoS-MIB", "hwXQoSBaMapRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSBaMapGroup = hwXQoSBaMapGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSBaMapGroup.setDescription('This is different server domain group of information.')
hwXQoSIfTrustGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 22)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSIfTrustIfIndex"), ("HUAWEI-XQoS-MIB", "hwXQoSIfTrustVlanID1"), ("HUAWEI-XQoS-MIB", "hwXQoSIfTrustVlanID2"), ("HUAWEI-XQoS-MIB", "hwXQoSBaType"), ("HUAWEI-XQoS-MIB", "hwXQoSIfTrustAction"), ("HUAWEI-XQoS-MIB", "hwXQoSIfTrustRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSIfTrustGroup = hwXQoSIfTrustGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfTrustGroup.setDescription('This is different server domain group of information.')
hwXQosVlanStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 23)).setObjects(("HUAWEI-XQoS-MIB", "hwXQosVlanStatInTotalPkts"), ("HUAWEI-XQoS-MIB", "hwXQosVlanStatInTotalBytes"), ("HUAWEI-XQoS-MIB", "hwXQosVlanStatOutTotalPkts"), ("HUAWEI-XQoS-MIB", "hwXQosVlanStatOutTotalBytes"), ("HUAWEI-XQoS-MIB", "hwXQosVlanStatInUcastPkts"), ("HUAWEI-XQoS-MIB", "hwXQosVlanStatInUcastBytes"), ("HUAWEI-XQoS-MIB", "hwXQosVlanStatOutUcastPkts"), ("HUAWEI-XQoS-MIB", "hwXQosVlanStatOutUcastBytes"), ("HUAWEI-XQoS-MIB", "hwXQosVlanStatInMcastPkts"), ("HUAWEI-XQoS-MIB", "hwXQosVlanStatInMcastBytes"), ("HUAWEI-XQoS-MIB", "hwXQosVlanStatOutMcastPkts"), ("HUAWEI-XQoS-MIB", "hwXQosVlanStatOutMcastBytes"), ("HUAWEI-XQoS-MIB", "hwXQosVlanStatInBcastPkts"), ("HUAWEI-XQoS-MIB", "hwXQosVlanStatInBcastBytes"), ("HUAWEI-XQoS-MIB", "hwXQosVlanStatOutBcastPkts"), ("HUAWEI-XQoS-MIB", "hwXQosVlanStatOutBcastBytes"), ("HUAWEI-XQoS-MIB", "hwXQosVlanStatInUnknownUcastPkts"), ("HUAWEI-XQoS-MIB", "hwXQosVlanStatInUnknownUcastBytes"), ("HUAWEI-XQoS-MIB", "hwXQosVlanStatResetFlag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQosVlanStatGroup = hwXQosVlanStatGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQosVlanStatGroup.setDescription('This is statistic group of information.')
hwXQoSVlanCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 24)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSVlanStatEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSVlanCfgGroup = hwXQoSVlanCfgGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSVlanCfgGroup.setDescription('This is statistic group of information.')
hwXQoSStormControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 25)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSStormControlBroadcastMinRate"), ("HUAWEI-XQoS-MIB", "hwXQoSStormControlBroadcastMaxRate"), ("HUAWEI-XQoS-MIB", "hwXQoSStormControlMulticastMinRate"), ("HUAWEI-XQoS-MIB", "hwXQoSStormControlMulticastMaxRate"), ("HUAWEI-XQoS-MIB", "hwXQoSStormControlAction"), ("HUAWEI-XQoS-MIB", "hwXQoSStormControlInterval"), ("HUAWEI-XQoS-MIB", "hwXQoSStormControlTrapEnable"), ("HUAWEI-XQoS-MIB", "hwXQoSStormControlLogEnable"), ("HUAWEI-XQoS-MIB", "hwXQoSStormControlStatus"), ("HUAWEI-XQoS-MIB", "hwXQoSStormControlUnicastMinRate"), ("HUAWEI-XQoS-MIB", "hwXQoSStormControlUnicastMaxRate"), ("HUAWEI-XQoS-MIB", "hwXQoSStormControlBcMode"), ("HUAWEI-XQoS-MIB", "hwXQoSStormControlMcMode"), ("HUAWEI-XQoS-MIB", "hwXQoSStormControlUcMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSStormControlGroup = hwXQoSStormControlGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSStormControlGroup.setDescription('This is shaping group of information.')
hwXQoSQueueStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 26)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSQueueStatisticsPassedPacketsCount"), ("HUAWEI-XQoS-MIB", "hwXQosQueueStatisticsReset"), ("HUAWEI-XQoS-MIB", "hwXQoSQueueStatisticsRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSQueueStatisticsGroup = hwXQoSQueueStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSQueueStatisticsGroup.setDescription('This is shaping group of information.')
hwXQoSIfPppoeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 27)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSIfPppoeRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSIfPppoeGroup = hwXQoSIfPppoeGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfPppoeGroup.setDescription('This is PPPoE group of information.')
hwXQoSVlanBcastSuppressGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 28)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSVlanBcastSuppressValue"), ("HUAWEI-XQoS-MIB", "hwXQoSVlanBcastSuppressRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSVlanBcastSuppressGroup = hwXQoSVlanBcastSuppressGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSVlanBcastSuppressGroup.setDescription('This is VLAN broadcast suppression group of information.')
hwXQoSRedirectNextHopGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 29)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSRedirectNextHopBehaviorName"), ("HUAWEI-XQoS-MIB", "hwXQoSRedirectNextHopOldIp"), ("HUAWEI-XQoS-MIB", "hwXQoSRedirectNextHopNewIp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSRedirectNextHopGroup = hwXQoSRedirectNextHopGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSRedirectNextHopGroup.setDescription('This is the redirect next hop group of information.')
hwXQoSIfTrust8021pGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 30)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSIfTrust8021pIfIndex"), ("HUAWEI-XQoS-MIB", "hwXQoSIfTrust8021pVlanID"), ("HUAWEI-XQoS-MIB", "hwXQoSIfTrust8021pAction"), ("HUAWEI-XQoS-MIB", "hwXQoSIfTrust8021pRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSIfTrust8021pGroup = hwXQoSIfTrust8021pGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfTrust8021pGroup.setDescription('Description.')
hwXQoSCommonInboundGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 31)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSCommonInboundPhbIndex"), ("HUAWEI-XQoS-MIB", "hwXQoSCommonInboundPhbCos"), ("HUAWEI-XQoS-MIB", "hwXQoSCommonInboundPhbColor"), ("HUAWEI-XQoS-MIB", "hwXQoSCommonInboundPhbPri"), ("HUAWEI-XQoS-MIB", "hwXQoSCommonInboundRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSCommonInboundGroup = hwXQoSCommonInboundGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCommonInboundGroup.setDescription(' hwXQoSCommonInboundGroup ')
hwXQoSPppInboundGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 32)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSPppInboundCos"), ("HUAWEI-XQoS-MIB", "hwXQoSPppInboundColor"), ("HUAWEI-XQoS-MIB", "hwXQoSPppInboundRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSPppInboundGroup = hwXQoSPppInboundGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPppInboundGroup.setDescription(' hwXQoSPppInboundGroup ')
hwXQoSServiceclassGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 33)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSServiceclassPort"), ("HUAWEI-XQoS-MIB", "hwXQoSServiceclass"), ("HUAWEI-XQoS-MIB", "hwXQoSServiceclassRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSServiceclassGroup = hwXQoSServiceclassGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSServiceclassGroup.setDescription(' hwXQoSServiceclassGroup ')
hwXQoSPhbGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 34)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSPhbPort"), ("HUAWEI-XQoS-MIB", "hwXQoSPhbEnable"), ("HUAWEI-XQoS-MIB", "hwXQoSPhbRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSPhbGroup = hwXQoSPhbGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPhbGroup.setDescription(' hwXQoSPhbGroup ')
hwXQoSFieldDeiGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 35)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSFieldDeiInterface"), ("HUAWEI-XQoS-MIB", "hwXQoSFieldDeiVlanId"), ("HUAWEI-XQoS-MIB", "hwXQoSFieldDeiEnabled"), ("HUAWEI-XQoS-MIB", "hwXQoSFieldDeiRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSFieldDeiGroup = hwXQoSFieldDeiGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSFieldDeiGroup.setDescription(' hwXQoSFieldDeiGroup ')
hwXQoSPicForwardingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 36)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSPicForwardingInterface"), ("HUAWEI-XQoS-MIB", "hwXQoSPicForwarding8021pValue"), ("HUAWEI-XQoS-MIB", "hwXQoSPicForwardingPriority"), ("HUAWEI-XQoS-MIB", "hwXQoSPicForwardingRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSPicForwardingGroup = hwXQoSPicForwardingGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPicForwardingGroup.setDescription(' hwXQoSPicForwardingGroup ')
hwXQoSCarTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 37)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSCarInterfaceIndex"), ("HUAWEI-XQoS-MIB", "hwXQoSCarDirection"), ("HUAWEI-XQoS-MIB", "hwXQoSCarVlanID"), ("HUAWEI-XQoS-MIB", "hwXQoSCarCirValue"), ("HUAWEI-XQoS-MIB", "hwXQoSCarPirValue"), ("HUAWEI-XQoS-MIB", "hwXQoSCarCbsValue"), ("HUAWEI-XQoS-MIB", "hwXQoSCarPbsValue"), ("HUAWEI-XQoS-MIB", "hwXQoSCarGreenAction"), ("HUAWEI-XQoS-MIB", "hwXQoSCarGreenServiceClass"), ("HUAWEI-XQoS-MIB", "hwXQoSCarGreenColor"), ("HUAWEI-XQoS-MIB", "hwXQoSCarYellowAction"), ("HUAWEI-XQoS-MIB", "hwXQoSCarYellowServiceClass"), ("HUAWEI-XQoS-MIB", "hwXQoSCarYellowColor"), ("HUAWEI-XQoS-MIB", "hwXQoSCarRedAction"), ("HUAWEI-XQoS-MIB", "hwXQoSCarRedServiceClass"), ("HUAWEI-XQoS-MIB", "hwXQoSCarRedColor"), ("HUAWEI-XQoS-MIB", "hwXQoSCarRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSCarTableGroup = hwXQoSCarTableGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCarTableGroup.setDescription(' hwXQoSCarTableGroup ')
hwXQoSPortShapingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 38)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSPortShapingInterface"), ("HUAWEI-XQoS-MIB", "hwXQoSPortShapingValue"), ("HUAWEI-XQoS-MIB", "hwXQoSPortShapingPbsValue"), ("HUAWEI-XQoS-MIB", "hwXQoSPortShapingRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSPortShapingGroup = hwXQoSPortShapingGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortShapingGroup.setDescription(' hwXQoSPortShapingGroup ')
hwXQoSQueueGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 39)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSQueueInterfaceIndex"), ("HUAWEI-XQoS-MIB", "hwXQoSQueueServiceClass"), ("HUAWEI-XQoS-MIB", "hwXQoSQueueCirValue"), ("HUAWEI-XQoS-MIB", "hwXQoSQueueCirPercentage"), ("HUAWEI-XQoS-MIB", "hwXQoSQueueDirection"), ("HUAWEI-XQoS-MIB", "hwXQoSQueueRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSQueueGroup = hwXQoSQueueGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSQueueGroup.setDescription(' hwXQoSQueueGroup ')
hwXQoSCarStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 40)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSCarStatisticsInterfaceIndex"), ("HUAWEI-XQoS-MIB", "hwXQoSCarStatisticsDirection"), ("HUAWEI-XQoS-MIB", "hwXQoSCarStatisticsVlanid"), ("HUAWEI-XQoS-MIB", "hwXQoSCarStatisticsSlotNumber"), ("HUAWEI-XQoS-MIB", "hwXQoSCarStatisticsReset"), ("HUAWEI-XQoS-MIB", "hwXQoSCarStatisticsPassPackets"), ("HUAWEI-XQoS-MIB", "hwXQoSCarStatisticsPassBytes"), ("HUAWEI-XQoS-MIB", "hwXQoSCarStatisticsDropPackets"), ("HUAWEI-XQoS-MIB", "hwXQoSCarStatisticsDropBytes"), ("HUAWEI-XQoS-MIB", "hwXQoSCarStatisticsPassPacketsRate"), ("HUAWEI-XQoS-MIB", "hwXQoSCarStatisticsPassBytesRate"), ("HUAWEI-XQoS-MIB", "hwXQoSCarStatisticsDropPacketsRate"), ("HUAWEI-XQoS-MIB", "hwXQoSCarStatisticsDropBytesRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSCarStatisticsGroup = hwXQoSCarStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCarStatisticsGroup.setDescription(' hwXQoSCarStatisticsGroup ')
hwXQoSCpRateLimitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 41)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSCpRateLimitIfIndex"), ("HUAWEI-XQoS-MIB", "hwXQoSCpRateLimitPeVidValue"), ("HUAWEI-XQoS-MIB", "hwXQoSCpRateLimitCeVidBegin"), ("HUAWEI-XQoS-MIB", "hwXQoSCpRateLimitCeVidEnd"), ("HUAWEI-XQoS-MIB", "hwXQoSCpRateLimitType"), ("HUAWEI-XQoS-MIB", "hwXQoSCpRateLimitIgmpCir"), ("HUAWEI-XQoS-MIB", "hwXQoSCpRateLimitIgmpCbs"), ("HUAWEI-XQoS-MIB", "hwXQoSCpRateLimitRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSCpRateLimitGroup = hwXQoSCpRateLimitGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCpRateLimitGroup.setDescription(' hwXQoSCpRateLimitGroup ')
hwXQoSPortQueueStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 42)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSPortQueueStatisticsInterfaceIndex"), ("HUAWEI-XQoS-MIB", "hwXQoSPortQueueStatisticsDirection"), ("HUAWEI-XQoS-MIB", "hwXQoSPortQueueStatisticsQueueIndex"), ("HUAWEI-XQoS-MIB", "hwXQoSPortQueueStatisticsReset"), ("HUAWEI-XQoS-MIB", "hwXQoSPortQueueStatisticsTotalPassPackets"), ("HUAWEI-XQoS-MIB", "hwXQoSPortQueueStatisticsTotalPassBytes"), ("HUAWEI-XQoS-MIB", "hwXQoSPortQueueStatisticsTotalDiscardPackets"), ("HUAWEI-XQoS-MIB", "hwXQoSPortQueueStatisticsTotalDiscardBytes"), ("HUAWEI-XQoS-MIB", "hwXQoSPortQueueStatisticsDropTailDiscardPackets"), ("HUAWEI-XQoS-MIB", "hwXQoSPortQueueStatisticsDropTailDiscardBytes"), ("HUAWEI-XQoS-MIB", "hwXQoSPortQueueStatisticsWredDiscardPackets"), ("HUAWEI-XQoS-MIB", "hwXQoSPortQueueStatisticsWredDiscardBytes"), ("HUAWEI-XQoS-MIB", "hwXQoSPortQueueStatisticsPassPacketsRate"), ("HUAWEI-XQoS-MIB", "hwXQoSPortQueueStatisticsPassBytesRate"), ("HUAWEI-XQoS-MIB", "hwXQoSPortQueueStatisticsDiscardPacketsRate"), ("HUAWEI-XQoS-MIB", "hwXQoSPortQueueStatisticsDiscardBytesRate"), ("HUAWEI-XQoS-MIB", "hwXQoSPortQueueStatisticsDropTailDiscardPacketsRate"), ("HUAWEI-XQoS-MIB", "hwXQoSPortQueueStatisticsDropTailDiscardBytesRate"), ("HUAWEI-XQoS-MIB", "hwXQoSPortQueueStatisticsWredDiscardPacketsRate"), ("HUAWEI-XQoS-MIB", "hwXQoSPortQueueStatisticsWredDiscardBytesRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSPortQueueStatisticsGroup = hwXQoSPortQueueStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortQueueStatisticsGroup.setDescription('Description.')
hwXQoSPortStatisticsDropGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 43)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSPortStatisticsDropPacketsCount"), ("HUAWEI-XQoS-MIB", "hwXQosPortStatisticsDropReset"), ("HUAWEI-XQoS-MIB", "hwXQosPortStatisticsDropResetTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSPortStatisticsDropGroup = hwXQoSPortStatisticsDropGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSPortStatisticsDropGroup.setDescription('This is the drop packets statistics of port group of information.')
hwXQoSQueueStatisticsDropGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 44)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSQueueStatisticsDropPacketsCount"), ("HUAWEI-XQoS-MIB", "hwXQosQueueStatisticsDropReset"), ("HUAWEI-XQoS-MIB", "hwXQosQueueStatisticsDropResetTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSQueueStatisticsDropGroup = hwXQoSQueueStatisticsDropGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSQueueStatisticsDropGroup.setDescription('This is the drop packets statistics of queue group of information.')
hwXQoSIfScheduleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 45)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSIfScheduleProfile"), ("HUAWEI-XQoS-MIB", "hwXQoSIfScheduleRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSIfScheduleGroup = hwXQoSIfScheduleGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSIfScheduleGroup.setDescription('This is Interface schedule group of information.')
hwXQoSScheduleProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 46)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSScheduleQueueMode"), ("HUAWEI-XQoS-MIB", "hwXQoSScheduleQueueBeWeight"), ("HUAWEI-XQoS-MIB", "hwXQoSScheduleQueueAf1Weight"), ("HUAWEI-XQoS-MIB", "hwXQoSScheduleQueueAf2Weight"), ("HUAWEI-XQoS-MIB", "hwXQoSScheduleQueueAf3Weight"), ("HUAWEI-XQoS-MIB", "hwXQoSScheduleQueueAf4Weight"), ("HUAWEI-XQoS-MIB", "hwXQoSScheduleQueueCs6Weight"), ("HUAWEI-XQoS-MIB", "hwXQoSScheduleQueueCs7Weight"), ("HUAWEI-XQoS-MIB", "hwXQoSScheduleQueueEfWeight"), ("HUAWEI-XQoS-MIB", "hwXQoSScheduleProfileRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSScheduleProfileGroup = hwXQoSScheduleProfileGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSScheduleProfileGroup.setDescription('This is schedule profile group of information.')
hwXQoSQppbPolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 47)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSQppbPolicyStatisticsInterfaceIndex"), ("HUAWEI-XQoS-MIB", "hwXQoSQppbPolicyDirection"), ("HUAWEI-XQoS-MIB", "hwXQoSQppbPolicyLocalID"), ("HUAWEI-XQoS-MIB", "hwXQoSQppbPolicyStatisticsReset"), ("HUAWEI-XQoS-MIB", "hwXQoSQppbPolicyMatchedPackets"), ("HUAWEI-XQoS-MIB", "hwXQoSQppbPolicyMatchedBytes"), ("HUAWEI-XQoS-MIB", "hwXQoSQppbPolicyPassedPackets"), ("HUAWEI-XQoS-MIB", "hwXQoSQppbPolicyPassedBytes"), ("HUAWEI-XQoS-MIB", "hwXQoSQppbPolicyDropedPackets"), ("HUAWEI-XQoS-MIB", "hwXQoSQppbPolicyDropedBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSQppbPolicyGroup = hwXQoSQppbPolicyGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSQppbPolicyGroup.setDescription('Description.')
hwXQoSStatResouceNotEnoughAlarmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 48)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSStatResouceNotEnoughSlotId"), ("HUAWEI-XQoS-MIB", "hwXQoSStatResouceNotEnoughStatType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSStatResouceNotEnoughAlarmGroup = hwXQoSStatResouceNotEnoughAlarmGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSStatResouceNotEnoughAlarmGroup.setDescription('Description.')
hwXQoSCARResouceNotEnoughAlarmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 2, 2, 49)).setObjects(("HUAWEI-XQoS-MIB", "hwXQoSCARResouceNotEnoughSlotId"), ("HUAWEI-XQoS-MIB", "hwXQoSCARResouceNotEnoughCARType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwXQoSCARResouceNotEnoughAlarmGroup = hwXQoSCARResouceNotEnoughAlarmGroup.setStatus('current')
if mibBuilder.loadTexts: hwXQoSCARResouceNotEnoughAlarmGroup.setDescription('Description.')
hwXQoSSecurityStormControlInterfaceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 21))
hwXQoSSecurityStormControlInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 21, 1), )
if mibBuilder.loadTexts: hwXQoSSecurityStormControlInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: hwXQoSSecurityStormControlInterfaceTable.setDescription('A Table about storm-control interface information.')
hwXQoSSecurityStormControlInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 21, 1, 1), ).setIndexNames((0, "HUAWEI-XQoS-MIB", "hwXQoSSecurityStormControlInterfaceChassisId"), (0, "HUAWEI-XQoS-MIB", "hwXQoSSecurityStormControlInterfaceSlotId"))
if mibBuilder.loadTexts: hwXQoSSecurityStormControlInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: hwXQoSSecurityStormControlInterfaceEntry.setDescription('Description.')
hwXQoSSecurityStormControlInterfaceChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 21, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: hwXQoSSecurityStormControlInterfaceChassisId.setStatus('current')
if mibBuilder.loadTexts: hwXQoSSecurityStormControlInterfaceChassisId.setDescription('The chassis ID indicates the slot on which chassis is configured with storm control.')
hwXQoSSecurityStormControlInterfaceSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 21, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: hwXQoSSecurityStormControlInterfaceSlotId.setStatus('current')
if mibBuilder.loadTexts: hwXQoSSecurityStormControlInterfaceSlotId.setDescription('The slot configured with storm control.')
hwXQoSSecurityStormControlInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 21, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSSecurityStormControlInterfaceName.setStatus('current')
if mibBuilder.loadTexts: hwXQoSSecurityStormControlInterfaceName.setDescription('The interface name.')
hwXQoSSecurityStormControlInterfaceVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 4, 1, 21, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwXQoSSecurityStormControlInterfaceVlan.setStatus('current')
if mibBuilder.loadTexts: hwXQoSSecurityStormControlInterfaceVlan.setDescription('The value of this object identifies the VLAN ID of the interface.')
mibBuilder.exportSymbols("HUAWEI-XQoS-MIB", hwXQoSAtmPvcVpi=hwXQoSAtmPvcVpi, hwXQoSIfCarPassedBytes=hwXQoSIfCarPassedBytes, hwXQoSIfMplsExpMapRowStatus=hwXQoSIfMplsExpMapRowStatus, hwXQoSPortQueueStatisticsGroup=hwXQoSPortQueueStatisticsGroup, hwXQoSIfCarOverflowPacketRate=hwXQoSIfCarOverflowPacketRate, hwXQoSIfModeType=hwXQoSIfModeType, hwXQoSIfCarOverflowByteRate=hwXQoSIfCarOverflowByteRate, hwXQoSIfScheduleModeCfgInfoTable=hwXQoSIfScheduleModeCfgInfoTable, hwXQoSIfTrustAction=hwXQoSIfTrustAction, hwXQoSIfIPCarEbs=hwXQoSIfIPCarEbs, hwXQoSIfRemarkDscpEntry=hwXQoSIfRemarkDscpEntry, hwXQoSBaAtmQosPhbCfgInfoTable=hwXQoSBaAtmQosPhbCfgInfoTable, hwXQoSIfQueueCfgInfoTable=hwXQoSIfQueueCfgInfoTable, hwXQoSIfLrCir=hwXQoSIfLrCir, hwXQoSCpDefendStatisticsGroup=hwXQoSCpDefendStatisticsGroup, hwXQoSIfLocPreQueMapPreValue=hwXQoSIfLocPreQueMapPreValue, hwXQoSDeiEntry=hwXQoSDeiEntry, hwXQoSIfTrustRowStatus=hwXQoSIfTrustRowStatus, hwXQoSBaExpMapCos=hwXQoSBaExpMapCos, hwXQoSIfCarPbs=hwXQoSIfCarPbs, hwXQoSVlanCfgGroup=hwXQoSVlanCfgGroup, hwXQoSIfIPCarGreenAction=hwXQoSIfIPCarGreenAction, hwXQoSFrameId=hwXQoSFrameId, hwXQoSIfMplsExpMapCfgInfoEntry=hwXQoSIfMplsExpMapCfgInfoEntry, hwXQoSBaPhbCfgInfoTable=hwXQoSBaPhbCfgInfoTable, hwXQoSAtmPvcServiceTypeVciIndex=hwXQoSAtmPvcServiceTypeVciIndex, hwXQoSQueueDirection=hwXQoSQueueDirection, hwXQoSIfIPCarYellowAction=hwXQoSIfIPCarYellowAction, hwXQoSScheduleQueueBeWeight=hwXQoSScheduleQueueBeWeight, hwXQoSCarTable=hwXQoSCarTable, hwXQoSIfCarYellowRemarkValue=hwXQoSIfCarYellowRemarkValue, hwXQoSBaDscpPhbColour=hwXQoSBaDscpPhbColour, hwXQoSPortQueueStatisticsTotalPassBytes=hwXQoSPortQueueStatisticsTotalPassBytes, hwXQoSCommonInboundRowStatus=hwXQoSCommonInboundRowStatus, hwXQoSCpCarActionCarCbs=hwXQoSCpCarActionCarCbs, hwXQoSIfScheduleGroup=hwXQoSIfScheduleGroup, hwXQoSPortShapingTable=hwXQoSPortShapingTable, hwXQoSSoftCarCir=hwXQoSSoftCarCir, hwXQoSIfMirrorCfgIfIndex=hwXQoSIfMirrorCfgIfIndex, hwXQoSPortQueueAlarmIfIndex=hwXQoSPortQueueAlarmIfIndex, hwXQoSIfCarYellowPassedBytes=hwXQoSIfCarYellowPassedBytes, hwXQoSPortQueueStatisticsWredDiscardBytesRate=hwXQoSPortQueueStatisticsWredDiscardBytesRate, hwXQoSMulBa8021pPhbRowStatus=hwXQoSMulBa8021pPhbRowStatus, hwXQoSDeiRowStatus=hwXQoSDeiRowStatus, hwXQoSIfMplsExpMapOutbound=hwXQoSIfMplsExpMapOutbound, hwXQoSIfShapingQueuePir=hwXQoSIfShapingQueuePir, hwXQoSIfCarRedDiscardedBytes=hwXQoSIfCarRedDiscardedBytes, hwQoS=hwQoS, hwXQoSQppbPolicyMatchedBytes=hwXQoSQppbPolicyMatchedBytes, hwXQoSBa8021pPhbGroup=hwXQoSBa8021pPhbGroup, hwXQoSSlotId=hwXQoSSlotId, hwXQoSIfObserveRowStatus=hwXQoSIfObserveRowStatus, hwXQoSCpDefendObjectIndex=hwXQoSCpDefendObjectIndex, hwXQoSIfUrpfCtrlType=hwXQoSIfUrpfCtrlType, hwXQoSIfUrpfCfgIfIndex=hwXQoSIfUrpfCfgIfIndex, hwXQoSBaMapRowStatus=hwXQoSBaMapRowStatus, hwXQoSPortQueueAlarmTrunkIndex=hwXQoSPortQueueAlarmTrunkIndex, hwXQoSCommonInboundPhbColor=hwXQoSCommonInboundPhbColor, hwXQoSIfIPCarCfgInfoTable=hwXQoSIfIPCarCfgInfoTable, hwXQoSIfCarCfgIfIndex=hwXQoSIfCarCfgIfIndex, hwXQoSIfLrDelayedBytes=hwXQoSIfLrDelayedBytes, hwXQoSIfCarConformedByteRate=hwXQoSIfCarConformedByteRate, hwXQoSPhbGroup=hwXQoSPhbGroup, hwXQoSStormControlUcMode=hwXQoSStormControlUcMode, hwXQoSIfCarRedRemarkedBytes=hwXQoSIfCarRedRemarkedBytes, hwXQoSIfQueuePassededBytes=hwXQoSIfQueuePassededBytes, hwXQoSBaDscpMapColour=hwXQoSBaDscpMapColour, hwXQoSCpDefendDiscardedThreshold=hwXQoSCpDefendDiscardedThreshold, hwXQoSPortQueueStatisticsDiscardPacketsRate=hwXQoSPortQueueStatisticsDiscardPacketsRate, hwXQosAtmPvcServiceTypeGroup=hwXQosAtmPvcServiceTypeGroup, hwXQoSIfQueueGroup=hwXQoSIfQueueGroup, hwXQoSIfIPCarEndIp=hwXQoSIfIPCarEndIp, hwXQoSDeiIfIndex=hwXQoSDeiIfIndex, hwXQosVlanStatOutMcastBytes=hwXQosVlanStatOutMcastBytes, hwXQoSSoftCarName=hwXQoSSoftCarName, hwXQoSDSUserPriIndex=hwXQoSDSUserPriIndex, hwXQoSIfOutboundQueueStatisticEntry=hwXQoSIfOutboundQueueStatisticEntry, hwXQoSIfTrustEntry=hwXQoSIfTrustEntry, hwXQoSCpcarCfgInfoTable=hwXQoSCpcarCfgInfoTable, hwXQoSStormControlLogEnable=hwXQoSStormControlLogEnable, hwXQoSIfCarYellowDiscardedBytes=hwXQoSIfCarYellowDiscardedBytes, hwXQoSIfHqosPriority=hwXQoSIfHqosPriority, hwXQoSIfWredLowlimit=hwXQoSIfWredLowlimit, hwXQoSFieldDeiTable=hwXQoSFieldDeiTable, hwXQoSPortQueueStatisticsDropTailDiscardBytes=hwXQoSPortQueueStatisticsDropTailDiscardBytes, hwXQoSCarStatisticsDropBytesRate=hwXQoSCarStatisticsDropBytesRate, CarAction=CarAction, hwXQoSIrsmSynFrameDropAlarm=hwXQoSIrsmSynFrameDropAlarm, hwXQoSStormControlAction=hwXQoSStormControlAction, hwXQoSIfUrpfCfgInfoEntry=hwXQoSIfUrpfCfgInfoEntry, hwXQoSIfQueueCfgCosType=hwXQoSIfQueueCfgCosType, hwXQoSCarStatisticsPassPackets=hwXQoSCarStatisticsPassPackets, hwXQosVlanStatInBcastBytes=hwXQosVlanStatInBcastBytes, hwXQoSCpDefendDiscardedRateAlarm=hwXQoSCpDefendDiscardedRateAlarm, hwXQoSFieldDeiEntry=hwXQoSFieldDeiEntry, hwXQoSAAADs8021P=hwXQoSAAADs8021P, hwXQoSIfOutMulticastRowStatus=hwXQoSIfOutMulticastRowStatus, hwXQoSIfSoftCarCarIndex=hwXQoSIfSoftCarCarIndex, hwXQoSBaAtmQosMapCos=hwXQoSBaAtmQosMapCos, hwXQoSIfCarGreenRemarkedPackets=hwXQoSIfCarGreenRemarkedPackets, hwXQosVlanStatEntry=hwXQosVlanStatEntry, hwXQoSIrsmUpstream=hwXQoSIrsmUpstream, hwXQoSIfCarCfgInfoEntry=hwXQoSIfCarCfgInfoEntry, hwXQoSIfPhbEnableTable=hwXQoSIfPhbEnableTable, hwXQoSIfPhbEnableEntry=hwXQoSIfPhbEnableEntry, hwXQoSIfWredDiscardedPackets=hwXQoSIfWredDiscardedPackets, hwXQoSBaPhbGroup=hwXQoSBaPhbGroup, hwXQoSAtmPvpDiffDomainEntry=hwXQoSAtmPvpDiffDomainEntry, hwXQoSPicForwardingRowStatus=hwXQoSPicForwardingRowStatus, hwXQoSIfSredCfgInfoEntry=hwXQoSIfSredCfgInfoEntry, hwXQoSCarTableGroup=hwXQoSCarTableGroup, hwXQoSFieldDeiVlanId=hwXQoSFieldDeiVlanId, hwXQoSIfWredTailDiscardedPackets=hwXQoSIfWredTailDiscardedPackets, hwXQoSIfQueueVlanID=hwXQoSIfQueueVlanID, hwXQoSCpCarCfgInfoEntry=hwXQoSCpCarCfgInfoEntry, hwXQoSStormControlMulticastMaxRate=hwXQoSStormControlMulticastMaxRate, hwXQoSCarStatisticsTable=hwXQoSCarStatisticsTable, hwXQoSPortStatisticsDropGroup=hwXQoSPortStatisticsDropGroup, hwXQoSUserPriPhbRowStatus=hwXQoSUserPriPhbRowStatus, hwXQoSAtmTrafficQueueServiceClass=hwXQoSAtmTrafficQueueServiceClass, hwXQoSBaExpMapIndex=hwXQoSBaExpMapIndex, hwXQosVlanStatInBcastPkts=hwXQosVlanStatInBcastPkts, hwXQoSIfWredHighDiscardProbability=hwXQoSIfWredHighDiscardProbability, hwXQoSCpDefendPassedPacketRate=hwXQoSCpDefendPassedPacketRate, hwXQoSCarInterfaceIndex=hwXQoSCarInterfaceIndex, hwXQoSIfMirrorCfgInfoTable=hwXQoSIfMirrorCfgInfoTable, hwXQoSIfCarExceededByteRate=hwXQoSIfCarExceededByteRate, hwXQoSCpCarCbs=hwXQoSCpCarCbs, hwXQoSPortShapingPbsValue=hwXQoSPortShapingPbsValue, hwXQoSIfWredDirection=hwXQoSIfWredDirection, hwXQoSNotifications=hwXQoSNotifications, hwXQoSIfTrust8021pVlanID=hwXQoSIfTrust8021pVlanID, hwXQoSIfMulticastWeightValue=hwXQoSIfMulticastWeightValue, hwXQoSPhbEnableTable=hwXQoSPhbEnableTable, hwXQoSIfMirrorCfgVlanID=hwXQoSIfMirrorCfgVlanID, hwXQoSBaAtmQosPhbColour=hwXQoSBaAtmQosPhbColour, hwXQoSCpCarCfgInfoTable=hwXQoSCpCarCfgInfoTable, hwXQoSCpCarActionCarPir=hwXQoSCpCarActionCarPir, hwXQoSCpDefendPassedPackets=hwXQoSCpDefendPassedPackets, hwXQoSIfWredVlanID=hwXQoSIfWredVlanID, hwXQoSUrpfSlotPhysicalIndex=hwXQoSUrpfSlotPhysicalIndex, hwXQoSPhbEnableRowStatus=hwXQoSPhbEnableRowStatus, hwXQoSCarStatisticsDropBytes=hwXQoSCarStatisticsDropBytes, hwXQoSCpCarPir=hwXQoSCpCarPir, hwXQoSIfEnableDeiAction=hwXQoSIfEnableDeiAction, hwXQoSSecurityStormControlInterfaceVlan=hwXQoSSecurityStormControlInterfaceVlan, hwXQoSBaDscpPhbCfgInfoTable=hwXQoSBaDscpPhbCfgInfoTable, hwXQoSScheduleProfileEntry=hwXQoSScheduleProfileEntry, hwXQoSCarRowStatus=hwXQoSCarRowStatus, hwXQoSBaAtmQosPhbRowStatus=hwXQoSBaAtmQosPhbRowStatus, hwXQoSStormControlGroup=hwXQoSStormControlGroup, hwXQoSBaPhbType=hwXQoSBaPhbType, hwXQoSIfUrpfCfgInfoTable=hwXQoSIfUrpfCfgInfoTable, hwXQoSIfSamplingType=hwXQoSIfSamplingType, hwXQoSIfObserveIndex=hwXQoSIfObserveIndex, hwXQoSCpDefendDiscardedPacketAlarmClear=hwXQoSCpDefendDiscardedPacketAlarmClear, hwXQoSCpCarEbs=hwXQoSCpCarEbs, hwXQoSIfLrDiscardedPackets=hwXQoSIfLrDiscardedPackets, hwXQosVlanStatInUcastBytes=hwXQosVlanStatInUcastBytes, hwXQoSGlobalWredClassLowlimit=hwXQoSGlobalWredClassLowlimit, hwXQoSGlobalWredTypeLowlimit=hwXQoSGlobalWredTypeLowlimit, hwXQoSMulBaDscpPhbRowStatus=hwXQoSMulBaDscpPhbRowStatus, hwXQoSAtmPvcDiffDomainRowStatus=hwXQoSAtmPvcDiffDomainRowStatus, hwXQoSCpCarGreenAction=hwXQoSCpCarGreenAction, hwXQoSQueueStatisticsRowStatus=hwXQoSQueueStatisticsRowStatus, hwXQoSBaUserPriPhbCfgInfoTable=hwXQoSBaUserPriPhbCfgInfoTable, hwXQoSAAATrustCfgInfoTable=hwXQoSAAATrustCfgInfoTable, hwXQoSCarYellowAction=hwXQoSCarYellowAction, hwXQoSPortQueueStatisticsDropTailDiscardBytesRate=hwXQoSPortQueueStatisticsDropTailDiscardBytesRate, hwXQoSCarStatisticsReset=hwXQoSCarStatisticsReset, hwXQoSIfQueueTotalPackets=hwXQoSIfQueueTotalPackets, hwXQoSIfLrIfIndex=hwXQoSIfLrIfIndex, hwXQoSIfSampleIfIndex=hwXQoSIfSampleIfIndex, hwXQoSCpDefendObjects=hwXQoSCpDefendObjects, hwXQoSCpCarCir=hwXQoSCpCarCir, hwXQoSPortStatisticsDropEntry=hwXQoSPortStatisticsDropEntry, hwXQoSAtmPvpDiffDomainIfIndex=hwXQoSAtmPvpDiffDomainIfIndex, hwXQoSCpCarActionRedRemarkValue=hwXQoSCpCarActionRedRemarkValue, hwXQoSIfCarGreenPassedPackets=hwXQoSIfCarGreenPassedPackets, hwXQoSIfLocPreQueMapIfIndex=hwXQoSIfLocPreQueMapIfIndex, hwXQoSBaDscpMapCfgInfoEntry=hwXQoSBaDscpMapCfgInfoEntry, hwXQoSIrsmThreshold=hwXQoSIrsmThreshold, hwXQoSAtmPvpDiffDomainName=hwXQoSAtmPvpDiffDomainName, hwXQoSScheduleQueueCs6Weight=hwXQoSScheduleQueueCs6Weight, hwXQoSIfCarIndex=hwXQoSIfCarIndex, hwXQoSStormControlObjects=hwXQoSStormControlObjects, hwXQoSIfHqosPriIfIndex=hwXQoSIfHqosPriIfIndex, hwXQoSCpRateLimitTable=hwXQoSCpRateLimitTable, hwXQoSCpCarActionGreenAction=hwXQoSCpCarActionGreenAction, hwXQoSCarStatisticsDirection=hwXQoSCarStatisticsDirection, hwXQoSIrsmDropPacket=hwXQoSIrsmDropPacket, hwXQosQueueStatisticsReset=hwXQosQueueStatisticsReset, hwXQoSCpcarObjects=hwXQoSCpcarObjects, hwXQoSBaObjects=hwXQoSBaObjects, hwXQoSPortQueueStatisticsWredDiscardPacketsRate=hwXQoSPortQueueStatisticsWredDiscardPacketsRate, hwXQoSCarYellowColor=hwXQoSCarYellowColor, hwXQoSAAADsDomainName=hwXQoSAAADsDomainName, hwXQoSIfLocalPrecedenceQueueMapEntry=hwXQoSIfLocalPrecedenceQueueMapEntry, hwXQoSIfSredRedStartDiscardPoint=hwXQoSIfSredRedStartDiscardPoint, ResetFlag=ResetFlag, hwXQoSBaDscpMapRowStatus=hwXQoSBaDscpMapRowStatus, hwXQoSBaExpPhbCos=hwXQoSBaExpPhbCos, hwXQoSPortShapingInterface=hwXQoSPortShapingInterface, hwXQoSPortQueueStatisticsReset=hwXQoSPortQueueStatisticsReset, hwXQoSIfMplsExpMapIfIndex=hwXQoSIfMplsExpMapIfIndex, hwXQoSIfPppoeCfgInfoEntry=hwXQoSIfPppoeCfgInfoEntry, hwXQosVlanStatOutBcastBytes=hwXQosVlanStatOutBcastBytes, hwXQoSGlobalWredClassIndex=hwXQoSGlobalWredClassIndex, hwXQoSCpCarYellowAction=hwXQoSCpCarYellowAction, hwXQoSSecurityStormControlInterfaceTable=hwXQoSSecurityStormControlInterfaceTable, hwXQoSVlanBcastSuppressVlanId=hwXQoSVlanBcastSuppressVlanId, hwXQoSCarStatisticsDropPacketsRate=hwXQoSCarStatisticsDropPacketsRate, hwXQoSIfSampleRunInfoTable=hwXQoSIfSampleRunInfoTable, hwXQoSQppbPolicyMatchPacketsRate=hwXQoSQppbPolicyMatchPacketsRate, hwXQoSCpCarActionYellowAction=hwXQoSCpCarActionYellowAction, hwXQoSIfCarYellowPassedPackets=hwXQoSIfCarYellowPassedPackets, hwXQoSSoftCarCfgTable=hwXQoSSoftCarCfgTable, hwXQoSAtmPvcVci=hwXQoSAtmPvcVci, hwXQoSCpCarActionYellowRemarkValue=hwXQoSCpCarActionYellowRemarkValue, hwXQoSIfMirrorVlanID=hwXQoSIfMirrorVlanID, hwXQoSIfSamplingVlanID=hwXQoSIfSamplingVlanID, hwXQosVlanStatInUcastPkts=hwXQosVlanStatInUcastPkts, hwXQoSCpcarTotalPackets=hwXQoSCpcarTotalPackets, hwXQoSCpRateLimitIgmpCbs=hwXQoSCpRateLimitIgmpCbs, hwXQoSCarRedAction=hwXQoSCarRedAction, hwXQoSIrsmDropPacketAlarm=hwXQoSIrsmDropPacketAlarm, hwXQoSIfSredYellowDiscardProbability=hwXQoSIfSredYellowDiscardProbability, hwXQoSAtmPvcDiffDomainEntry=hwXQoSAtmPvcDiffDomainEntry, hwXQoSVlanStatisticsObjects=hwXQoSVlanStatisticsObjects, hwXQoSCpCarGreenRemarkValue=hwXQoSCpCarGreenRemarkValue, hwXQoSQppbPolicyMatchBytesRate=hwXQoSQppbPolicyMatchBytesRate, hwXQoSScheduleQueueAf4Weight=hwXQoSScheduleQueueAf4Weight, hwXQoSProfileTable=hwXQoSProfileTable, hwXQoSBa8021pMapColour=hwXQoSBa8021pMapColour, hwXQoSCarPirValue=hwXQoSCarPirValue, hwXQoSIfUnicastWeightValue=hwXQoSIfUnicastWeightValue, hwXQoSPortQueueAlarmTable=hwXQoSPortQueueAlarmTable, hwXQoSIfWredDiscardProbability=hwXQoSIfWredDiscardProbability, hwXQoSVlanBcastSuppressRowStatus=hwXQoSVlanBcastSuppressRowStatus, hwXQoSIfCarGreenRemarkedBytes=hwXQoSIfCarGreenRemarkedBytes, hwXQoSIfCarOutBoundDiscardPackets=hwXQoSIfCarOutBoundDiscardPackets, hwXQoSBa8021pMapIndex=hwXQoSBa8021pMapIndex, hwXQoSCpApplyPolicyRowStatus=hwXQoSCpApplyPolicyRowStatus, hwXQoSIfTrustTable=hwXQoSIfTrustTable, hwXQoSMulBa8021pPhbIndex=hwXQoSMulBa8021pPhbIndex, hwXQoSRedirectNextHopChangedAlarm=hwXQoSRedirectNextHopChangedAlarm, hwXQoSPortQueueAlarmClear=hwXQoSPortQueueAlarmClear, hwXQoSCpCarActionPacketType=hwXQoSCpCarActionPacketType, hwXQoSBaAtmQosMapColour=hwXQoSBaAtmQosMapColour, hwXQoSSoftCarCfgEntry=hwXQoSSoftCarCfgEntry, hwXQoSPortShapingGroup=hwXQoSPortShapingGroup, hwXQoSMulBa8021pPri=hwXQoSMulBa8021pPri, hwXQoSGeneral=hwXQoSGeneral, hwXQoSRuleFailTable=hwXQoSRuleFailTable)
mibBuilder.exportSymbols("HUAWEI-XQoS-MIB", hwXQoSIfQueueTotalBytes=hwXQoSIfQueueTotalBytes, hwXQoSIfCarGreenDiscardedPackets=hwXQoSIfCarGreenDiscardedPackets, hwXQoSRemarkEntry=hwXQoSRemarkEntry, hwXQoSIfLrPassedBytes=hwXQoSIfLrPassedBytes, hwXQoSQppbPolicyDropedPackets=hwXQoSQppbPolicyDropedPackets, hwXQoSIfCarOverflowPackets=hwXQoSIfCarOverflowPackets, hwXQoSGlobalWredTypeIndex=hwXQoSGlobalWredTypeIndex, hwXQoSIfDefaultPriorityCfgInfoTable=hwXQoSIfDefaultPriorityCfgInfoTable, hwXQoSCprlDiscardedPacketAlarm=hwXQoSCprlDiscardedPacketAlarm, hwXQoSIfEnableRemarkAction=hwXQoSIfEnableRemarkAction, hwXQoSIfDiffDomainVlanId2=hwXQoSIfDiffDomainVlanId2, hwXQoSIrsmDelay=hwXQoSIrsmDelay, hwXQoSPortQueueStatisticsDiscardBytesRate=hwXQoSPortQueueStatisticsDiscardBytesRate, hwXQoSBaExpPhbCfgInfoTable=hwXQoSBaExpPhbCfgInfoTable, hwXQoSIfWredCfgInfoTable=hwXQoSIfWredCfgInfoTable, hwXQoSAtmPvcServiceTypeEntry=hwXQoSAtmPvcServiceTypeEntry, hwXQoSIfQueueDiscardedPackets=hwXQoSIfQueueDiscardedPackets, hwXQoSIfUrpfIfIndex=hwXQoSIfUrpfIfIndex, hwXQoSIfQueIndex=hwXQoSIfQueIndex, hwXQosVlanStatOutTotalBytes=hwXQosVlanStatOutTotalBytes, hwXQoSIf8021PMapLocalPrecedence=hwXQoSIf8021PMapLocalPrecedence, hwXQoSIfMirroredPackets=hwXQoSIfMirroredPackets, hwXQosVlanStatInTotalBytes=hwXQosVlanStatInTotalBytes, hwXQoSPortStatisticsDropIfIndex=hwXQoSPortStatisticsDropIfIndex, hwXQoSPhbEnable=hwXQoSPhbEnable, hwXQoSCompliances=hwXQoSCompliances, hwXQoSIfTrustGroup=hwXQoSIfTrustGroup, hwXQoSResouceNotEnoughAlarmObjects=hwXQoSResouceNotEnoughAlarmObjects, hwXQoSIfUrpfPassedPackets=hwXQoSIfUrpfPassedPackets, hwXQoSCpDefendPassedByteRate=hwXQoSCpDefendPassedByteRate, hwXQoSQueueInterfaceIndex=hwXQoSQueueInterfaceIndex, hwXQoSIfRemarkDscpIfIndex=hwXQoSIfRemarkDscpIfIndex, hwXQoSCarDirection=hwXQoSCarDirection, hwXQoSIfSredQueueIndex=hwXQoSIfSredQueueIndex, hwXQoSQueueStatisticsObjects=hwXQoSQueueStatisticsObjects, hwXQoSStormControlBcMode=hwXQoSStormControlBcMode, hwXQoSStormControlStatus=hwXQoSStormControlStatus, hwXQoSIfMirrorRunInfoTable=hwXQoSIfMirrorRunInfoTable, hwXQoSIfLrCfgIfIndex=hwXQoSIfLrCfgIfIndex, hwXQoSIfQueuePassedPackets=hwXQoSIfQueuePassedPackets, hwXQoSCarRedServiceClass=hwXQoSCarRedServiceClass, hwXQoSPppInboundCos=hwXQoSPppInboundCos, hwXQoSIfInPhyBandwidth=hwXQoSIfInPhyBandwidth, hwXQosAtmTrafficQueueTable=hwXQosAtmTrafficQueueTable, hwXQosIfOutboundQueueStatisticGroup=hwXQosIfOutboundQueueStatisticGroup, hwXQoSBaDscpPhbIndex=hwXQoSBaDscpPhbIndex, hwXQoSQueueStatisticsIngressIfIndex=hwXQoSQueueStatisticsIngressIfIndex, hwXQoSGlobalObjects=hwXQoSGlobalObjects, hwXQoSBaDscpMapGroup=hwXQoSBaDscpMapGroup, hwXQoSCarEntry=hwXQoSCarEntry, hwXQoSQueueStatisticsGroup=hwXQoSQueueStatisticsGroup, hwXQoSIfQueueWeight=hwXQoSIfQueueWeight, hwXQoSIfLocPreQueMapCosType=hwXQoSIfLocPreQueMapCosType, hwXQoSIrsmEntry=hwXQoSIrsmEntry, hwXQoSQueueCirValue=hwXQoSQueueCirValue, hwXQoSBa8021pMapGroup=hwXQoSBa8021pMapGroup, hwXQoSStormControlNotification=hwXQoSStormControlNotification, hwXQosVlanStatVlanId=hwXQosVlanStatVlanId, hwXQoSBaExpMapPri=hwXQoSBaExpMapPri, hwXQoSRedirectNextHopObjects=hwXQoSRedirectNextHopObjects, hwXQoSPppInboundGroup=hwXQoSPppInboundGroup, hwXQoSCarStatisticsVlanid=hwXQoSCarStatisticsVlanid, hwXBQoSIPCarIntValue=hwXBQoSIPCarIntValue, hwXQoSBa8021pMapCfgInfoEntry=hwXQoSBa8021pMapCfgInfoEntry, hwXQoSIfTrust8021pRowStatus=hwXQoSIfTrust8021pRowStatus, hwXQoSIfDiffDomainName=hwXQoSIfDiffDomainName, hwXQoSIfSoftCarEntry=hwXQoSIfSoftCarEntry, hwXQoSIfPhbEnableVlanId=hwXQoSIfPhbEnableVlanId, hwXQoSServiceclassEntry=hwXQoSServiceclassEntry, hwXQoSIfSamplingCfgInfoTable=hwXQoSIfSamplingCfgInfoTable, hwXQoSAtmPvcDiffDomainTable=hwXQoSAtmPvcDiffDomainTable, hwXQoSVlanStatEnable=hwXQoSVlanStatEnable, hwXQoSMIB=hwXQoSMIB, hwXQoSIfMirrorObserveIndex=hwXQoSIfMirrorObserveIndex, hwXQoSCpCarSlotStatPassededBytes=hwXQoSCpCarSlotStatPassededBytes, hwXQoSGlobalWredTypeDiscardProbability=hwXQoSGlobalWredTypeDiscardProbability, hwXQoSIfLrDiscardedBytes=hwXQoSIfLrDiscardedBytes, hwXQoSIfDiffDomainIfIndex=hwXQoSIfDiffDomainIfIndex, hwXQoSQppbPolicyLocalID=hwXQoSQppbPolicyLocalID, hwXQoSCpRateLimitIfIndex=hwXQoSCpRateLimitIfIndex, hwXQoSAtmPvcVbrMbs=hwXQoSAtmPvcVbrMbs, hwXQoSCpCarSlotStatPassedPackets=hwXQoSCpCarSlotStatPassedPackets, hwXQoSBaMapColour=hwXQoSBaMapColour, hwXQoSIfUrpfVlanID=hwXQoSIfUrpfVlanID, hwXQoSIfQueueIfIndex=hwXQoSIfQueueIfIndex, UrpfCtrlType=UrpfCtrlType, hwXQoSCpCarSlotStatSlotIndex=hwXQoSCpCarSlotStatSlotIndex, hwXQoSIfIPCarCfgIfIndex=hwXQoSIfIPCarCfgIfIndex, hwXQoSAtmPvcNameServiceTypeIndex=hwXQoSAtmPvcNameServiceTypeIndex, hwXQoSIfStatisticsObjects=hwXQoSIfStatisticsObjects, hwXQoSCarStatisticsGroup=hwXQoSCarStatisticsGroup, hwXQoSIfIPCarGreenRemarkValue=hwXQoSIfIPCarGreenRemarkValue, PYSNMP_MODULE_ID=hwXQoSMIB, hwXQosAtmTrafficQueueGroup=hwXQosAtmTrafficQueueGroup, hwXQoSIfIPCarRowStatus=hwXQoSIfIPCarRowStatus, hwXQoSPortQueueStatisticsPassBytesRate=hwXQoSPortQueueStatisticsPassBytesRate, hwXQoSPortQueueAlarm=hwXQoSPortQueueAlarm, hwXQoSServiceclassTable=hwXQoSServiceclassTable, hwXQoSRemarkTable=hwXQoSRemarkTable, hwXQoSIf8021PMapRowStatus=hwXQoSIf8021PMapRowStatus, hwXQoSCpCarSlotStatDiscardedPackets=hwXQoSCpCarSlotStatDiscardedPackets, hwXQoSIfCarStatisticsEntry=hwXQoSIfCarStatisticsEntry, hwXQoSQueueStatisticsEntry=hwXQoSQueueStatisticsEntry, hwXQoSBaExpMapCfgInfoEntry=hwXQoSBaExpMapCfgInfoEntry, hwXQoSIfWredRunInfoTable=hwXQoSIfWredRunInfoTable, IPCARRuleType=IPCARRuleType, hwXQoSCpDefendDiscardedPackets=hwXQoSCpDefendDiscardedPackets, hwXQoSIrsmDefendObjects=hwXQoSIrsmDefendObjects, hwXQoSBa8021pPhbCfgInfoTable=hwXQoSBa8021pPhbCfgInfoTable, hwXQoSPppInboundColor=hwXQoSPppInboundColor, hwXQoSQueueStatisticsDropEntry=hwXQoSQueueStatisticsDropEntry, hwXQoSIfCarPassedPackets=hwXQoSIfCarPassedPackets, hwXQoSIfSoftCarDirection=hwXQoSIfSoftCarDirection, hwXQoSCpRateLimitCeVidEnd=hwXQoSCpRateLimitCeVidEnd, hwXQoSBaMapPri=hwXQoSBaMapPri, hwXQoSIfHQOSPriCfgInfoEntry=hwXQoSIfHQOSPriCfgInfoEntry, hwXQoSCpApplyPolicyEntry=hwXQoSCpApplyPolicyEntry, hwXQoSDeiVlanID1=hwXQoSDeiVlanID1, hwXQoSVlanCfgEntry=hwXQoSVlanCfgEntry, hwXQoSIfLrPassedPackets=hwXQoSIfLrPassedPackets, hwXQoSQueueStatisticsDropPacketsCount=hwXQoSQueueStatisticsDropPacketsCount, hwXQoSAtmPvcServiceTypeTable=hwXQoSAtmPvcServiceTypeTable, hwXQoSQppbPolicyStatisticsEntry=hwXQoSQppbPolicyStatisticsEntry, hwXQoSAtmPvpDiffDomainTable=hwXQoSAtmPvpDiffDomainTable, hwXQoSIfSamplingNum=hwXQoSIfSamplingNum, hwXQoSCompliance=hwXQoSCompliance, hwXQoSRemarkVlanID2=hwXQoSRemarkVlanID2, hwXQoSIfScheduleModeCfgInfoEntry=hwXQoSIfScheduleModeCfgInfoEntry, hwXQoSProfileEntry=hwXQoSProfileEntry, hwXQoSQppbPolicyPassedPackets=hwXQoSQppbPolicyPassedPackets, hwXQoSAtmPvpDiffDomainRowStatus=hwXQoSAtmPvpDiffDomainRowStatus, hwXQoSRuleFailInfo=hwXQoSRuleFailInfo, hwXQoSIfQueueRunInfoTable=hwXQoSIfQueueRunInfoTable, hwXQoSCpRateLimitRowStatus=hwXQoSCpRateLimitRowStatus, hwXQoSIfLrCfgInfoTable=hwXQoSIfLrCfgInfoTable, hwXQoSCARResouceNotEnoughAlarmEntry=hwXQoSCARResouceNotEnoughAlarmEntry, hwXQoSServiceclassPort=hwXQoSServiceclassPort, hwXQosPortStatisticsDropResetTime=hwXQosPortStatisticsDropResetTime, hwXQoSBaDscpPhbGroup=hwXQoSBaDscpPhbGroup, hwXQoSStormControlInterval=hwXQoSStormControlInterval, hwXQoSCarStatisticsSlotNumber=hwXQoSCarStatisticsSlotNumber, hwXQoSPortQueueAlarmObjects=hwXQoSPortQueueAlarmObjects, hwXQoSIfMirrorDirection=hwXQoSIfMirrorDirection, hwXQoSIfPhbEnableDomainName=hwXQoSIfPhbEnableDomainName, hwXQoSScheduleQueueEfWeight=hwXQoSScheduleQueueEfWeight, hwXQoSIfQueueCfgVlanID=hwXQoSIfQueueCfgVlanID, hwXQoSIfShapingIfIndex=hwXQoSIfShapingIfIndex, hwXQoSIfQueueResetFlag=hwXQoSIfQueueResetFlag, hwXQoSIfSampleVlanID=hwXQoSIfSampleVlanID, hwXQoSBaDscpMapCfgInfoTable=hwXQoSBaDscpMapCfgInfoTable, hwXQoSStormControlBroadcastMaxRate=hwXQoSStormControlBroadcastMaxRate, hwXQoSQppbPolicyDirection=hwXQoSQppbPolicyDirection, hwXQoSCarYellowServiceClass=hwXQoSCarYellowServiceClass, hwXQoSIfDefaultPriorityRowStatus=hwXQoSIfDefaultPriorityRowStatus, hwXQoSQppbPolicyPassedBytes=hwXQoSQppbPolicyPassedBytes, hwXQoSIfScheduleRowStatus=hwXQoSIfScheduleRowStatus, hwXQoSBaAtmQosMapCfgInfoTable=hwXQoSBaAtmQosMapCfgInfoTable, hwXQoSVlanBcastSuppressValue=hwXQoSVlanBcastSuppressValue, hwXQoSBaAtmQosMapRowStatus=hwXQoSBaAtmQosMapRowStatus, hwXQoSPortQueueStatisticsQueueIndex=hwXQoSPortQueueStatisticsQueueIndex, hwXQoSIfSamplingCfgInfoEntry=hwXQoSIfSamplingCfgInfoEntry, hwXQoSStatResouceNotEnoughAlarm=hwXQoSStatResouceNotEnoughAlarm, hwXQoSAtmPvcServiceType=hwXQoSAtmPvcServiceType, hwXQoSIfDiffDomainVlanId=hwXQoSIfDiffDomainVlanId, hwXQoSMulBa8021pPhbCfgInfoEntry=hwXQoSMulBa8021pPhbCfgInfoEntry, hwXQosVlanStatInMcastBytes=hwXQosVlanStatInMcastBytes, hwXQoSSredGroup=hwXQoSSredGroup, hwXQoSPortShapingRowStatus=hwXQoSPortShapingRowStatus, hwXQoSIfWredRowStatus=hwXQoSIfWredRowStatus, hwXQosAtmTrafficQueueEntry=hwXQosAtmTrafficQueueEntry, hwXQoSAAATrust8021pInfoEntry=hwXQoSAAATrust8021pInfoEntry, hwXQoSQueueStatisticsPassedPacketsCount=hwXQoSQueueStatisticsPassedPacketsCount, hwXQoSBaExpPhbCfgInfoEntry=hwXQoSBaExpPhbCfgInfoEntry, hwXQoSIfQueDiscardPackets=hwXQoSIfQueDiscardPackets, hwXQoSBaMapGroup=hwXQoSBaMapGroup, hwXQoSIfIPCarRedRemarkValue=hwXQoSIfIPCarRedRemarkValue, hwXQoSIfCarRedRemarkValue=hwXQoSIfCarRedRemarkValue, hwXQoSStormControlUnicastMinRate=hwXQoSStormControlUnicastMinRate, hwXQoSBaExpPhbColour=hwXQoSBaExpPhbColour, hwXQoSScheduleQueueAf2Weight=hwXQoSScheduleQueueAf2Weight, hwXQoSCpCarRedAction=hwXQoSCpCarRedAction, hwXQoSQppbPolicyMatchedPackets=hwXQoSQppbPolicyMatchedPackets, hwXQoSCarPbsValue=hwXQoSCarPbsValue, hwXQoSIfDefaultPriorityVlanID=hwXQoSIfDefaultPriorityVlanID, hwXQoSIfCarCbs=hwXQoSIfCarCbs, hwXQoSBaMapCfgInfoEntry=hwXQoSBaMapCfgInfoEntry, hwXQoSPhbPort=hwXQoSPhbPort, hwXQoSBa8021pPhbCos=hwXQoSBa8021pPhbCos, hwXQoSRedirectNextHopTable=hwXQoSRedirectNextHopTable, hwXQoSPortQueueStatisticsTotalDiscardBytes=hwXQoSPortQueueStatisticsTotalDiscardBytes, hwXQoSCarStatisticsPassBytesRate=hwXQoSCarStatisticsPassBytesRate, hwXQoSIfWredHighlimit=hwXQoSIfWredHighlimit, hwXQoSIfCarCir=hwXQoSIfCarCir, hwXQoSIfHQOSPriCfgInfoTable=hwXQoSIfHQOSPriCfgInfoTable, hwXQoSCpRateLimitType=hwXQoSCpRateLimitType, hwXQoSBa8021pPhbPri=hwXQoSBa8021pPhbPri, hwXQoSIfPppoeSourceMac=hwXQoSIfPppoeSourceMac, hwXQoSCpCarSlotStatPacketType=hwXQoSCpCarSlotStatPacketType, hwXQoSCARResouceNotEnoughSlotId=hwXQoSCARResouceNotEnoughSlotId, hwXQoSCpDefendDiscardedByteRate=hwXQoSCpDefendDiscardedByteRate, hwXQoSIfWredIfIndex=hwXQoSIfWredIfIndex, hwXQoSCommonInboundEntry=hwXQoSCommonInboundEntry, hwXQoSIfQueueUsagePercentage=hwXQoSIfQueueUsagePercentage, hwXQoSCpCarYellowRemarkValue=hwXQoSCpCarYellowRemarkValue, hwXQoSCpDefendDiscardedBytes=hwXQoSCpDefendDiscardedBytes, hwXQoSCpCarActionCarPbs=hwXQoSCpCarActionCarPbs, hwXQoSAAADs8021pRowStatus=hwXQoSAAADs8021pRowStatus, hwXQoSIfScheduleModeIfIndex=hwXQoSIfScheduleModeIfIndex, hwXQoSPortQueueStatisticsDropTailDiscardPackets=hwXQoSPortQueueStatisticsDropTailDiscardPackets, hwXQoSServiceclassRowStatus=hwXQoSServiceclassRowStatus, hwXQoSBaExpMapRowStatus=hwXQoSBaExpMapRowStatus, hwXQoSIfSredYellowStartDiscardPoint=hwXQoSIfSredYellowStartDiscardPoint, hwXQoSCpCarSlotStatTotalPackets=hwXQoSCpCarSlotStatTotalPackets, hwXQoSCARResouceNotEnoughAlarmTable=hwXQoSCARResouceNotEnoughAlarmTable, hwXQoSIrsmSourceAddress=hwXQoSIrsmSourceAddress, hwXQoSTrapIfName=hwXQoSTrapIfName, hwXQoSIfCarExceededPacketRate=hwXQoSIfCarExceededPacketRate, hwXQoSCpCarActionCarCir=hwXQoSCpCarActionCarCir, hwXQoSIfCarEbs=hwXQoSIfCarEbs, hwXQoSIfCarConformedBytes=hwXQoSIfCarConformedBytes, hwXQoSIf8021PMapCfgInfoTable=hwXQoSIf8021PMapCfgInfoTable, hwXQoSCarGreenAction=hwXQoSCarGreenAction, hwXQoSPortQueueAlarmEntry=hwXQoSPortQueueAlarmEntry, hwXQoSCpCarSlotStatTable=hwXQoSCpCarSlotStatTable, hwXQoSPortQueueStatisticsDirection=hwXQoSPortQueueStatisticsDirection, hwXQoSFieldDeiInterface=hwXQoSFieldDeiInterface, hwXQoSIfSredRowStatus=hwXQoSIfSredRowStatus, hwXQosVlanStatInUnknownUcastBytes=hwXQosVlanStatInUnknownUcastBytes, hwXQoSCpCarPbs=hwXQoSCpCarPbs, hwXQoSBa8021pPhbIndex=hwXQoSBa8021pPhbIndex, hwXQoSPortStatisticsDropPacketsCount=hwXQoSPortStatisticsDropPacketsCount, hwXQoSIfCarCfgInfoTable=hwXQoSIfCarCfgInfoTable, hwXQoSCpCarRowStatus=hwXQoSCpCarRowStatus, hwXQoSIfQueueMode=hwXQoSIfQueueMode, hwXQoSCpCarFilterCfgInfoTable=hwXQoSCpCarFilterCfgInfoTable, hwXQoSCarVlanID=hwXQoSCarVlanID, hwXQoSScheduleQueueAf1Weight=hwXQoSScheduleQueueAf1Weight, hwXQoSBaGroup=hwXQoSBaGroup, hwXQoSGlobalWredClassHighlimit=hwXQoSGlobalWredClassHighlimit, hwXQoSBaPhbCos=hwXQoSBaPhbCos, hwXQoSQueueDiscardThresholdTrap=hwXQoSQueueDiscardThresholdTrap, hwXQoSPicForwardingInterface=hwXQoSPicForwardingInterface, hwXQoSRedirectNextHopNewIp=hwXQoSRedirectNextHopNewIp, hwXQoSSecurityStormControlInterfaceEntry=hwXQoSSecurityStormControlInterfaceEntry, hwXQoSIfLrDelayedPackets=hwXQoSIfLrDelayedPackets, hwXQoSIfObserveCfgInfoTable=hwXQoSIfObserveCfgInfoTable, hwXQoSIfTrustVlanID2=hwXQoSIfTrustVlanID2, hwXQoSBaExpMapColour=hwXQoSBaExpMapColour, hwXQoSStormControlUnicastMaxRate=hwXQoSStormControlUnicastMaxRate, hwXQoSIfWredRandomDiscardedPackets=hwXQoSIfWredRandomDiscardedPackets, hwXQoSPhbRowStatus=hwXQoSPhbRowStatus, hwXQoSServiceclass=hwXQoSServiceclass, hwXQoSPicForwarding8021pValue=hwXQoSPicForwarding8021pValue, hwXQoSCarStatisticsEntry=hwXQoSCarStatisticsEntry)
mibBuilder.exportSymbols("HUAWEI-XQoS-MIB", hwXQoSIfMirrorRowStatus=hwXQoSIfMirrorRowStatus, hwXQoSTrapDiscardPackets=hwXQoSTrapDiscardPackets, hwXQoSCpDefendStatisticsEntry=hwXQoSCpDefendStatisticsEntry, hwXQoSIfPppoeMatchType=hwXQoSIfPppoeMatchType, hwXQoSScheduleProfileRowStatus=hwXQoSScheduleProfileRowStatus, hwXQoSIfDefaultPriorityCfgInfoEntry=hwXQoSIfDefaultPriorityCfgInfoEntry, hwXQoSVlanCfgTable=hwXQoSVlanCfgTable, hwXQoSAtmPvcPcr=hwXQoSAtmPvcPcr, hwXQoSIfDefaultPriorityValue=hwXQoSIfDefaultPriorityValue, hwXQoSIfQueueRunInfoEntry=hwXQoSIfQueueRunInfoEntry, hwXQoSIfSamplingIfIndex=hwXQoSIfSamplingIfIndex, hwXQoSBa8021pPhbCfgInfoEntry=hwXQoSBa8021pPhbCfgInfoEntry, hwXQoSProfileObjects=hwXQoSProfileObjects, hwXQoSFieldDeiGroup=hwXQoSFieldDeiGroup, hwXQoSCarCbsValue=hwXQoSCarCbsValue, hwXQoSIfCarTotalDiscardPackets=hwXQoSIfCarTotalDiscardPackets, hwXQoSBaMapCos=hwXQoSBaMapCos, hwXQoSIfPppoeDestMac=hwXQoSIfPppoeDestMac, hwXQoSPicForwardingEntry=hwXQoSPicForwardingEntry, hwXQoSServiceclassGroup=hwXQoSServiceclassGroup, hwXQoSIfCarDiscardedBytes=hwXQoSIfCarDiscardedBytes, hwXQoSBaPhbColour=hwXQoSBaPhbColour, hwXQoSGlobalWredTypeName=hwXQoSGlobalWredTypeName, hwXQoSIfSampledPackets=hwXQoSIfSampledPackets, hwXQoSIfIPCarPbs=hwXQoSIfIPCarPbs, hwXQoSIfCarVlanID=hwXQoSIfCarVlanID, hwXQoSIfHqosPriRowStatus=hwXQoSIfHqosPriRowStatus, hwXQoSScheduleQueueCs7Weight=hwXQoSScheduleQueueCs7Weight, hwXQoSPortStatisticsDropTable=hwXQoSPortStatisticsDropTable, hwXQoSIfDefaultPriorityIfIndex=hwXQoSIfDefaultPriorityIfIndex, hwXQoSBaDscpMapPri=hwXQoSBaDscpMapPri, hwXQoSIfTrustIfIndex=hwXQoSIfTrustIfIndex, hwXQosVlanStatInMcastPkts=hwXQosVlanStatInMcastPkts, hwXQoSRemarkRowStatus=hwXQoSRemarkRowStatus, hwXQoSScheduleQueueAf3Weight=hwXQoSScheduleQueueAf3Weight, hwXQoSIfTrust8021pIfIndex=hwXQoSIfTrust8021pIfIndex, hwXQoSIf8021PMap8021PValue=hwXQoSIf8021PMap8021PValue, hwXQoSIfCarDiscardedPackets=hwXQoSIfCarDiscardedPackets, hwXQoSIfQueueCosType=hwXQoSIfQueueCosType, hwXQoSIfOutboundMulticastCfgInfoTable=hwXQoSIfOutboundMulticastCfgInfoTable, hwXQoSBaDscpMapIndex=hwXQoSBaDscpMapIndex, hwXQoSSecurityStormControlInterfaceSlotId=hwXQoSSecurityStormControlInterfaceSlotId, hwXQosVlanStatTable=hwXQosVlanStatTable, hwXQoSStatResouceNotEnoughAlarmTable=hwXQoSStatResouceNotEnoughAlarmTable, hwXQoSCarCirValue=hwXQoSCarCirValue, hwXQoSCpCarActionGreenRemarkValue=hwXQoSCpCarActionGreenRemarkValue, hwXQoSRemarkIfIndex=hwXQoSRemarkIfIndex, hwXQoSCommonInboundPhbPri=hwXQoSCommonInboundPhbPri, hwXQoSCpcarPassededBytes=hwXQoSCpcarPassededBytes, hwXQoSIfInActualBandwidth=hwXQoSIfInActualBandwidth, hwXQoSVlanCfgObjects=hwXQoSVlanCfgObjects, hwXQoSCpCarActionRedAction=hwXQoSCpCarActionRedAction, hwXQoSQueueStatisticsDropObjects=hwXQoSQueueStatisticsDropObjects, hwXQoSStatResouceNotEnoughAlarmGroup=hwXQoSStatResouceNotEnoughAlarmGroup, hwXQosVlanStatOutMcastPkts=hwXQosVlanStatOutMcastPkts, hwXQoSIfIPCarCbs=hwXQoSIfIPCarCbs, hwXQoSIfQueuePassedPacketRate=hwXQoSIfQueuePassedPacketRate, hwXQoSIfLrVlanID=hwXQoSIfLrVlanID, hwXQoSIfTrust8021pTable=hwXQoSIfTrust8021pTable, hwXQoSCARResouceNotEnoughAlarmGroup=hwXQoSCARResouceNotEnoughAlarmGroup, hwXQoSIfMirrorRunInfoEntry=hwXQoSIfMirrorRunInfoEntry, hwXQoSIfCarRowStatus=hwXQoSIfCarRowStatus, hwXQoSStatResouceNotEnoughAlarmEntry=hwXQoSStatResouceNotEnoughAlarmEntry, hwXQoSRedirectNextHopGroup=hwXQoSRedirectNextHopGroup, hwXQoSIfQueueDiscardedBytes=hwXQoSIfQueueDiscardedBytes, hwXQoSIfPppoeIfIndex=hwXQoSIfPppoeIfIndex, hwXQoSQueueStatisticsTable=hwXQoSQueueStatisticsTable, hwXQoSIfCarConformedPackets=hwXQoSIfCarConformedPackets, hwXQoSSoftCarRowStatus=hwXQoSSoftCarRowStatus, hwXQoSAaaDomainName=hwXQoSAaaDomainName, hwXQoSBaPhbRowStatus=hwXQoSBaPhbRowStatus, hwXQoSCpDefendChassisID=hwXQoSCpDefendChassisID, hwXQoSCpCarFilterRowStatus=hwXQoSCpCarFilterRowStatus, hwXQoSIfCarOverflowBytes=hwXQoSIfCarOverflowBytes, hwXQoSIfExtIndex=hwXQoSIfExtIndex, hwXQoSCpCarActionType=hwXQoSCpCarActionType, hwXQoSIfCarGreenPassedBytes=hwXQoSIfCarGreenPassedBytes, hwXQoSCpcarPassedPackets=hwXQoSCpcarPassedPackets, hwXQoSProfileUsedAlarm=hwXQoSProfileUsedAlarm, hwXQoSBaMapType=hwXQoSBaMapType, hwXQoSIfLocPreQueMapRowStatus=hwXQoSIfLocPreQueMapRowStatus, hwXQoSIfOutMulticastIfIndex=hwXQoSIfOutMulticastIfIndex, hwXQoSPortStatisticsDropObjects=hwXQoSPortStatisticsDropObjects, hwXQoSIfQueuePriority=hwXQoSIfQueuePriority, hwXQoSIfIPCarCir=hwXQoSIfIPCarCir, hwXQoSBaDscpPhbRowStatus=hwXQoSBaDscpPhbRowStatus, hwXQoSIfQueuePir=hwXQoSIfQueuePir, hwXQoSBaCfgInfoTable=hwXQoSBaCfgInfoTable, hwXQoSPicForwardingTable=hwXQoSPicForwardingTable, hwXQoSIfUrpfRowStatus=hwXQoSIfUrpfRowStatus, hwXQoSIfIPCarYellowRemarkValue=hwXQoSIfIPCarYellowRemarkValue, hwXQoSIfSoftCarRowStatus=hwXQoSIfSoftCarRowStatus, hwXQoSScheduleProfileTable=hwXQoSScheduleProfileTable, hwXQosVlanStatOutUcastPkts=hwXQosVlanStatOutUcastPkts, hwXQoSAtmPvcDiffDomainIfIndex=hwXQoSAtmPvcDiffDomainIfIndex, hwXQoSIfQueueCfgIfIndex=hwXQoSIfQueueCfgIfIndex, hwXQoSIfShapingQueueIndex=hwXQoSIfShapingQueueIndex, hwXQoSAtmPvcServiceTypeVpiIndex=hwXQoSAtmPvcServiceTypeVpiIndex, hwXQoSUserPriPhbPri=hwXQoSUserPriPhbPri, hwXQoSStormControlIfIndex=hwXQoSStormControlIfIndex, hwXQoSBaPhbCfgInfoEntry=hwXQoSBaPhbCfgInfoEntry, hwXQoSIrsmDelayAlarm=hwXQoSIrsmDelayAlarm, hwXQoSCpCarActionEntry=hwXQoSCpCarActionEntry, hwXQoSIfUrpfCfgVlanID=hwXQoSIfUrpfCfgVlanID, hwXQoSIfMirrorCfgInfoEntry=hwXQoSIfMirrorCfgInfoEntry, hwXQoSBaAtmQosMapIndex=hwXQoSBaAtmQosMapIndex, hwXQoSIfLrRowStatus=hwXQoSIfLrRowStatus, hwXQoSUrpfObjects=hwXQoSUrpfObjects, hwXQoSAtmPvcVbrScr=hwXQoSAtmPvcVbrScr, hwXQoSCpRateLimitCeVidBegin=hwXQoSCpRateLimitCeVidBegin, hwXQoSQueueStatisticsEgressIfIndex=hwXQoSQueueStatisticsEgressIfIndex, hwXQoSUrpfDiscardStatisticsEntry=hwXQoSUrpfDiscardStatisticsEntry, hwXQoSIfScheduleProfile=hwXQoSIfScheduleProfile, hwXQoSCpRateLimitPeVidValue=hwXQoSCpRateLimitPeVidValue, hwXQoSIfQueueDiscardedPacketRate=hwXQoSIfQueueDiscardedPacketRate, hwXQoSIfObserveCfgInfoEntry=hwXQoSIfObserveCfgInfoEntry, hwXQoSIfMplsExpMapInbound=hwXQoSIfMplsExpMapInbound, hwXQoSIfCarGreenRemarkValue=hwXQoSIfCarGreenRemarkValue, hwXQoSCpCarActionSetDefault=hwXQoSCpCarActionSetDefault, hwXQoSIfTrustVlanID1=hwXQoSIfTrustVlanID1, hwXQoSRuleFailObjects=hwXQoSRuleFailObjects, hwXQoSIfActionObjects=hwXQoSIfActionObjects, hwXQoSIf8021PMapCfgInfoEntry=hwXQoSIf8021PMapCfgInfoEntry, hwXQoSQueueStatisticsDropQueueIndex=hwXQoSQueueStatisticsDropQueueIndex, hwXQoSCpcarRunInfoEntry=hwXQoSCpcarRunInfoEntry, hwXQoSProfileName=hwXQoSProfileName, hwXQoSIfCarRunInfoEntry=hwXQoSIfCarRunInfoEntry, hwXQoSStatResouceNotEnoughStatType=hwXQoSStatResouceNotEnoughStatType, hwXQoSQppbPolicyStatisticsInterfaceIndex=hwXQoSQppbPolicyStatisticsInterfaceIndex, hwXQoSIfQueueRowStatus=hwXQoSIfQueueRowStatus, hwXQoSQueueServiceClass=hwXQoSQueueServiceClass, hwXQoSUrpfDiscardStatisticsTable=hwXQoSUrpfDiscardStatisticsTable, hwXQoSBa8021pPhbRowStatus=hwXQoSBa8021pPhbRowStatus, hwXQoSBaDscpMapCos=hwXQoSBaDscpMapCos, hwXQoSCpcarName=hwXQoSCpcarName, hwXQoSSecurityStormControlInterfaceTrap=hwXQoSSecurityStormControlInterfaceTrap, hwXQoSIfSamplingDirection=hwXQoSIfSamplingDirection, hwXQoSIfCarYellowDiscardedPackets=hwXQoSIfCarYellowDiscardedPackets, hwXQoSBaExpMapGroup=hwXQoSBaExpMapGroup, hwXQoSIfVlanID=hwXQoSIfVlanID, hwXQoSIfMirrorIfIndex=hwXQoSIfMirrorIfIndex, hwXQoSIfLrCbs=hwXQoSIfLrCbs, hwXQoSGlobalWredTypeCfgEntry=hwXQoSGlobalWredTypeCfgEntry, hwXQoSIfCarInBoundDiscardPackets=hwXQoSIfCarInBoundDiscardPackets, hwXQoSBa8021pPhbColour=hwXQoSBa8021pPhbColour, hwXQoSSecurityStormControlInterfaceName=hwXQoSSecurityStormControlInterfaceName, hwXQoSBaType=hwXQoSBaType, hwXQoSVlanBcastSuppressGroup=hwXQoSVlanBcastSuppressGroup, hwXQoSAAADsRowStatus=hwXQoSAAADsRowStatus, hwXQoSCpDefendStatisticsTable=hwXQoSCpDefendStatisticsTable, hwXQoSUserPriPhbColour=hwXQoSUserPriPhbColour, hwXQoSIPCarRuleType=hwXQoSIPCarRuleType, hwXQoSCpCarActionCarEbs=hwXQoSCpCarActionCarEbs, hwXQoSScheduleQueueMode=hwXQoSScheduleQueueMode, hwXQoSAtmTrafficQueueIfIndex=hwXQoSAtmTrafficQueueIfIndex, hwXQoSBaAtmQosPhbCfgInfoEntry=hwXQoSBaAtmQosPhbCfgInfoEntry, hwXQoSMulBa8021pPhbCfgInfoTable=hwXQoSMulBa8021pPhbCfgInfoTable, hwXQoSIfPppoeGroup=hwXQoSIfPppoeGroup, hwXQoSBaDscpPhbPri=hwXQoSBaDscpPhbPri, hwXQoSIfPhbEnableRowStatus=hwXQoSIfPhbEnableRowStatus, hwXQoSPppInboundTable=hwXQoSPppInboundTable, hwXQoSIfWredCfgInfoEntry=hwXQoSIfWredCfgInfoEntry, hwXQoSQueueTable=hwXQoSQueueTable, hwXQoSIfUrpfRunInfoTable=hwXQoSIfUrpfRunInfoTable, hwXQoSCommonInboundPhbCos=hwXQoSCommonInboundPhbCos, hwXQoSCpCarSlotStatDiscardedBytes=hwXQoSCpCarSlotStatDiscardedBytes, hwXQoSPortQueueStatisticsDropTailDiscardPacketsRate=hwXQoSPortQueueStatisticsDropTailDiscardPacketsRate, hwXQoSIrsmTable=hwXQoSIrsmTable, XQosQueueType=XQosQueueType, hwXQosPortStatisticsDropReset=hwXQosPortStatisticsDropReset, hwXQoSPhbEnableVlanID2=hwXQoSPhbEnableVlanID2, hwXQoSIfCarExceededPackets=hwXQoSIfCarExceededPackets, CosType=CosType, hwXQoSUrpfDiscardedPackets=hwXQoSUrpfDiscardedPackets, hwXQoSCpCarActionPolicyName=hwXQoSCpCarActionPolicyName, hwXQoSCommonInboundPhbIndex=hwXQoSCommonInboundPhbIndex, hwXQoSGlobalWredTypeHighlimit=hwXQoSGlobalWredTypeHighlimit, hwXQoSPhbEnableVlanID1=hwXQoSPhbEnableVlanID1, hwXQoSPppInboundEntry=hwXQoSPppInboundEntry, hwXQoSStormControlMulticastMinRate=hwXQoSStormControlMulticastMinRate, hwXQoSAtmPvcServiceTypeIfIndex=hwXQoSAtmPvcServiceTypeIfIndex, BaType=BaType, hwXQoSBaUserPriPhbCfgInfoEntry=hwXQoSBaUserPriPhbCfgInfoEntry, hwXQoSPortQueueStatisticsTable=hwXQoSPortQueueStatisticsTable, hwXQoSGlobalWredTypeSetDefault=hwXQoSGlobalWredTypeSetDefault, hwXQoSQueueStatisticsQueueIndex=hwXQoSQueueStatisticsQueueIndex, hwXQoSShapingGroup=hwXQoSShapingGroup, hwXQoSCpCarActionTable=hwXQoSCpCarActionTable, hwXQoSUrpfDiscardStatisticsGroup=hwXQoSUrpfDiscardStatisticsGroup, hwXQoSIfCarYellowAction=hwXQoSIfCarYellowAction, hwXQoSIfSredRedDiscardProbability=hwXQoSIfSredRedDiscardProbability, hwXQoSCpCarActionPacketTypeName=hwXQoSCpCarActionPacketTypeName, hwXQoSIfScheduleModeRowStatus=hwXQoSIfScheduleModeRowStatus, hwXQoSGlobalWredClassDiscardProbability=hwXQoSGlobalWredClassDiscardProbability, hwXQoSIfCarYellowRemarkedPackets=hwXQoSIfCarYellowRemarkedPackets, hwXQoSQppbPolicyGroup=hwXQoSQppbPolicyGroup, hwXQosQueueStatisticsDropReset=hwXQosQueueStatisticsDropReset, hwXQoSMulBaDscpPhbIndex=hwXQoSMulBaDscpPhbIndex, hwXQoSAtmPvcCdvt=hwXQoSAtmPvcCdvt, hwXQosVlanStatOutUcastBytes=hwXQosVlanStatOutUcastBytes, hwXQoSIfShapingCfgInfoTable=hwXQoSIfShapingCfgInfoTable, hwXQoSIfCarStatisticsTable=hwXQoSIfCarStatisticsTable, hwXQoSStormControlBroadcastMinRate=hwXQoSStormControlBroadcastMinRate, hwXQoSIfWredQueueIndex=hwXQoSIfWredQueueIndex, hwXQoSStormControlTrapEnable=hwXQoSStormControlTrapEnable, hwXQoSIfShapingCfgInfoEntry=hwXQoSIfShapingCfgInfoEntry, hwXQoSIfPppoeRowStatus=hwXQoSIfPppoeRowStatus, hwXQoSRuleFaileAlarm=hwXQoSRuleFaileAlarm, hwXQoSCpcarStaticsObjects=hwXQoSCpcarStaticsObjects, hwXQoSIfRemarkDscpTable=hwXQoSIfRemarkDscpTable, hwXQoSIfQueueDiscardedByteRate=hwXQoSIfQueueDiscardedByteRate, hwXQoSScheduleProfileGroup=hwXQoSScheduleProfileGroup, hwXQoSPhbTable=hwXQoSPhbTable, hwXQoSIfCarRedPassedBytes=hwXQoSIfCarRedPassedBytes, hwXQoSQppbPolicyDropedBytes=hwXQoSQppbPolicyDropedBytes, hwXQoSBaAtmQosMapClp=hwXQoSBaAtmQosMapClp, hwXQoSBaPhbPri=hwXQoSBaPhbPri, hwXQoSBaDscpPhbCos=hwXQoSBaDscpPhbCos, hwXQoSCARResouceNotEnoughCARType=hwXQoSCARResouceNotEnoughCARType, hwXQoSBaMapCfgInfoTable=hwXQoSBaMapCfgInfoTable, hwXQoSAAATrust8021pInfoTable=hwXQoSAAATrust8021pInfoTable, hwXQoSIfDiffDomainEntry=hwXQoSIfDiffDomainEntry, hwXQoSCpRateLimitGroup=hwXQoSCpRateLimitGroup, hwXQoSAtmPvcDiffDomainName=hwXQoSAtmPvcDiffDomainName, hwXQoSSecurityStormControlInterfaceChassisId=hwXQoSSecurityStormControlInterfaceChassisId, hwXQoSQppbPolicyStatisticsReset=hwXQoSQppbPolicyStatisticsReset, hwXQoSMulBa8021pPhbCos=hwXQoSMulBa8021pPhbCos, hwXQoSIfCarConformedPacketRate=hwXQoSIfCarConformedPacketRate, hwXQoSIfIPCarDirection=hwXQoSIfIPCarDirection, hwXQoSCpcarRunInfoTable=hwXQoSCpcarRunInfoTable, hwXQoSBaAtmQosPhbServType=hwXQoSBaAtmQosPhbServType, hwXQoSGroups=hwXQoSGroups, hwXQoSCpRateLimitEntry=hwXQoSCpRateLimitEntry, hwXQoSCarStatisticsPassPacketsRate=hwXQoSCarStatisticsPassPacketsRate, hwXQoSQueueStatisticsDropGroup=hwXQoSQueueStatisticsDropGroup, hwXQoSIfOutPhyBandwidth=hwXQoSIfOutPhyBandwidth, hwXQoSBa8021pMapRowStatus=hwXQoSBa8021pMapRowStatus, hwXQoSGlobalWredClassSetDefault=hwXQoSGlobalWredClassSetDefault, hwXQoSPortQueueAlarmQueue=hwXQoSPortQueueAlarmQueue, hwXQoSIfTrust8021pEntry=hwXQoSIfTrust8021pEntry, hwXQoSCommonInboundTable=hwXQoSCommonInboundTable, hwXQoSIfSredCfgInfoTable=hwXQoSIfSredCfgInfoTable, hwXQoSCpCarSlotStatEntry=hwXQoSCpCarSlotStatEntry, hwXQoSIfPhbEnableIfIndex=hwXQoSIfPhbEnableIfIndex, hwXQoSIfCarExceededBytes=hwXQoSIfCarExceededBytes, hwXQoSBaAtmQosPhbClp=hwXQoSBaAtmQosPhbClp, hwXQoSIfLrRunInfoTable=hwXQoSIfLrRunInfoTable, hwXQoSIfPppoeCfgInfoTable=hwXQoSIfPppoeCfgInfoTable, hwXQoSIfSoftCarIfIndex=hwXQoSIfSoftCarIfIndex, hwXQoSIfCarRedPassedPackets=hwXQoSIfCarRedPassedPackets, hwXQoSIfLrCfgVlanID=hwXQoSIfLrCfgVlanID, hwXQoSPortShapingValue=hwXQoSPortShapingValue, hwXQoSBa8021pMapCos=hwXQoSBa8021pMapCos, hwXQoSCpCarSlotId=hwXQoSCpCarSlotId)
mibBuilder.exportSymbols("HUAWEI-XQoS-MIB", hwXQoSIfCarRedRemarkedPackets=hwXQoSIfCarRedRemarkedPackets, hwXQoSScheduleProfileName=hwXQoSScheduleProfileName, hwXQoSPortId=hwXQoSPortId, hwXQoSBaExpPhbGroup=hwXQoSBaExpPhbGroup, DirectionType=DirectionType, hwXQosVlanStatInTotalPkts=hwXQosVlanStatInTotalPkts, hwXQoSIfTrust8021pGroup=hwXQoSIfTrust8021pGroup, hwXQoSRedirectNextHopOldIp=hwXQoSRedirectNextHopOldIp, hwXQoSIfCarDirection=hwXQoSIfCarDirection, hwXQoSQueueGroup=hwXQoSQueueGroup, hwXQosQueueStatisticsDropResetTime=hwXQosQueueStatisticsDropResetTime, hwXQoSCommonInboundGroup=hwXQoSCommonInboundGroup, hwXQoSAtmTrafficQueueRowStatus=hwXQoSAtmTrafficQueueRowStatus, hwXQoSIfOutboundQueueStatisticTable=hwXQoSIfOutboundQueueStatisticTable, hwXQoSPortQueueStatisticsWredDiscardPackets=hwXQoSPortQueueStatisticsWredDiscardPackets, hwXQoSIfOutboundMulticastCfgInfoEntry=hwXQoSIfOutboundMulticastCfgInfoEntry, hwXQoSIrsmTime=hwXQoSIrsmTime, hwXQoSQueueRowStatus=hwXQoSQueueRowStatus, hwXQoSIfIPCarAggregation=hwXQoSIfIPCarAggregation, hwXQoSStormControlEntry=hwXQoSStormControlEntry, hwXQoSIfCarGreenAction=hwXQoSIfCarGreenAction, hwXQoSIfTrust8021pAction=hwXQoSIfTrust8021pAction, hwXQoSIfLrCfgInfoEntry=hwXQoSIfLrCfgInfoEntry, hwXQoSCARResouceNotEnoughAlarm=hwXQoSCARResouceNotEnoughAlarm, hwXQoSVlanBcastSuppressTable=hwXQoSVlanBcastSuppressTable, hwXQoSObjects=hwXQoSObjects, hwXQoSPortQueueStatisticsInterfaceIndex=hwXQoSPortQueueStatisticsInterfaceIndex, hwXQoSIfUrpfDroppdPackets=hwXQoSIfUrpfDroppdPackets, hwXQoSIfLocalPrecedenceQueueMapTable=hwXQoSIfLocalPrecedenceQueueMapTable, hwXQoSIfOutActualBandwidth=hwXQoSIfOutActualBandwidth, hwXQoSIfShapingRowStatus=hwXQoSIfShapingRowStatus, hwXQoSUserPriPhbCos=hwXQoSUserPriPhbCos, hwXQoSPhbEntry=hwXQoSPhbEntry, hwXQoSIrsmTotalPacket=hwXQoSIrsmTotalPacket, hwXQoSBaExpPhbPri=hwXQoSBaExpPhbPri, hwXQoSCpDefendSlotId=hwXQoSCpDefendSlotId, hwXQoSPortQueueStatisticsTotalPassPackets=hwXQoSPortQueueStatisticsTotalPassPackets, hwXQoSGeneralGroup=hwXQoSGeneralGroup, hwXQoSCpCarFilterCfgInfoEntry=hwXQoSCpCarFilterCfgInfoEntry, hwXQoSBaDscpPhbCfgInfoEntry=hwXQoSBaDscpPhbCfgInfoEntry, hwXQosVlanStatOutBcastPkts=hwXQosVlanStatOutBcastPkts, hwXQoSCpCarFilterAction=hwXQoSCpCarFilterAction, hwXQoSBa8021pMapPri=hwXQoSBa8021pMapPri, hwXQoSIfCarPir=hwXQoSIfCarPir, hwXQoSIfCarRunInfoTable=hwXQoSIfCarRunInfoTable, hwXQoSIfScheduleIfIndex=hwXQoSIfScheduleIfIndex, hwXQoSStormControlTable=hwXQoSStormControlTable, hwXQoSIfSampleRunInfoEntry=hwXQoSIfSampleRunInfoEntry, hwXQoSAtmPvpVpi=hwXQoSAtmPvpVpi, hwXQoSIfShapingQueueCir=hwXQoSIfShapingQueueCir, hwXQoSStatisticsObjects=hwXQoSStatisticsObjects, hwXQoSIfIPCarPir=hwXQoSIfIPCarPir, hwXQoSCpCarActionSlotIndex=hwXQoSCpCarActionSlotIndex, hwXQoSCpcarTotalBytes=hwXQoSCpcarTotalBytes, hwXQoSBaName=hwXQoSBaName, hwXQoSCarStatisticsInterfaceIndex=hwXQoSCarStatisticsInterfaceIndex, hwXQoSPortQueueStatisticsPassPacketsRate=hwXQoSPortQueueStatisticsPassPacketsRate, hwXQoSMulDscpPhbCfgInfoEntry=hwXQoSMulDscpPhbCfgInfoEntry, hwXQoSBaAtmQosMapCfgInfoEntry=hwXQoSBaAtmQosMapCfgInfoEntry, hwXQoSCarGreenServiceClass=hwXQoSCarGreenServiceClass, hwXQoSIrsmLocal=hwXQoSIrsmLocal, hwXQoSRuleFailEntry=hwXQoSRuleFailEntry, hwXQoSIfScheduleCfgInfoEntry=hwXQoSIfScheduleCfgInfoEntry, hwXQoSIfWredType=hwXQoSIfWredType, hwXQoSSoftCarIndex=hwXQoSSoftCarIndex, hwXQoSAtmPvcRowStatus=hwXQoSAtmPvcRowStatus, hwXQoSBaRowStatus=hwXQoSBaRowStatus, hwXQoSIfCarGreenDiscardedBytes=hwXQoSIfCarGreenDiscardedBytes, hwXQoSRemarkVlanID1=hwXQoSRemarkVlanID1, hwXQoSStormControlTrap=hwXQoSStormControlTrap, hwXQoSBaExpMapCfgInfoTable=hwXQoSBaExpMapCfgInfoTable, hwXQoSCpCarSlotStatTotalBytes=hwXQoSCpCarSlotStatTotalBytes, hwXQoSIfIPCarCfgInfoEntry=hwXQoSIfIPCarCfgInfoEntry, hwXQoSCpCarRedRemarkValue=hwXQoSCpCarRedRemarkValue, hwXQoSIfWredRunInfoEntry=hwXQoSIfWredRunInfoEntry, hwXQoSCpcarIndex=hwXQoSCpcarIndex, hwXQoSBaCfgInfoEntry=hwXQoSBaCfgInfoEntry, hwXQosVlanStatResetFlag=hwXQosVlanStatResetFlag, hwXQoSBaAtmQosPhbCos=hwXQoSBaAtmQosPhbCos, hwXQoSCpcarCfgInfoEntry=hwXQoSCpcarCfgInfoEntry, hwXQoSBaIndex=hwXQoSBaIndex, hwXQoSPhbEnableIfIndex=hwXQoSPhbEnableIfIndex, hwXQoSIfQueuePassedByteRate=hwXQoSIfQueuePassedByteRate, hwXQoSIfLrRunInfoEntry=hwXQoSIfLrRunInfoEntry, hwXQoSIfMplsExpMapCfgInfoTable=hwXQoSIfMplsExpMapCfgInfoTable, hwXQoSFieldDeiEnabled=hwXQoSFieldDeiEnabled, hwXQoSPortShapingEntry=hwXQoSPortShapingEntry, hwXQoSPhbEnableEntry=hwXQoSPhbEnableEntry, hwXQoSIfDiffDomainGroup=hwXQoSIfDiffDomainGroup, hwXQoSRedirectNextHopEntry=hwXQoSRedirectNextHopEntry, hwXQoSPortQueueStatisticsEntry=hwXQoSPortQueueStatisticsEntry, hwXQoSIfDiffDomainTable=hwXQoSIfDiffDomainTable, hwXQosVlanStatInUnknownUcastPkts=hwXQosVlanStatInUnknownUcastPkts, hwXQoSQueueStatisticsDropTable=hwXQoSQueueStatisticsDropTable, hwXQoSAAATrustCfgInfoEntry=hwXQoSAAATrustCfgInfoEntry, hwXQoSGlobalWredClassCfgTable=hwXQoSGlobalWredClassCfgTable, hwXQoSCpApplyPolicyTable=hwXQoSCpApplyPolicyTable, hwXQoSDeiVlanID2=hwXQoSDeiVlanID2, hwXQoSIfCarRedDiscardedPackets=hwXQoSIfCarRedDiscardedPackets, hwXQoSCpDefendPassedBytes=hwXQoSCpDefendPassedBytes, hwXQoSTrapQueueId=hwXQoSTrapQueueId, hwXQoSQueueEntry=hwXQoSQueueEntry, hwXQoSStormControlMcMode=hwXQoSStormControlMcMode, hwXQoSIfUrpfRunInfoEntry=hwXQoSIfUrpfRunInfoEntry, hwXQoSIfCarRedAction=hwXQoSIfCarRedAction, hwXQoSCarStatisticsDropPackets=hwXQoSCarStatisticsDropPackets, hwXQosVlanStatOutTotalPkts=hwXQosVlanStatOutTotalPkts, hwXQoSCpcarDiscardedPackets=hwXQoSCpcarDiscardedPackets, hwXQoSCpDefendDiscardedPacketAlarm=hwXQoSCpDefendDiscardedPacketAlarm, hwXQoSPppInboundRowStatus=hwXQoSPppInboundRowStatus, hwXQoSCpcarDiscardedBytes=hwXQoSCpcarDiscardedBytes, hwXQoSIfDiffDomainRowStatus=hwXQoSIfDiffDomainRowStatus, hwXQosVlanStatGroup=hwXQosVlanStatGroup, hwXQoSVlanBcastSuppressEntry=hwXQoSVlanBcastSuppressEntry, hwXQoSCarStatisticsPassBytes=hwXQoSCarStatisticsPassBytes, hwXQoSDeiTable=hwXQoSDeiTable, hwXQoSCpRateLimitIgmpCir=hwXQoSCpRateLimitIgmpCir, hwXQoSCarRedColor=hwXQoSCarRedColor, hwXQoSQueueStatisticsDropIfIndex=hwXQoSQueueStatisticsDropIfIndex, hwXQoSSoftCarCbs=hwXQoSSoftCarCbs, hwXQoSPortQueueStatisticsTotalDiscardPackets=hwXQoSPortQueueStatisticsTotalDiscardPackets, hwXQoSIfQueueCfgInfoEntry=hwXQoSIfQueueCfgInfoEntry, hwXQoSIfObserveIfIndex=hwXQoSIfObserveIfIndex, hwXQoSCarGreenColor=hwXQoSCarGreenColor, hwXQoSBaExpPhbRowStatus=hwXQoSBaExpPhbRowStatus, hwXQoSGlobalWredTypeCfgTable=hwXQoSGlobalWredTypeCfgTable, hwXQoSIfSamplingRowStatus=hwXQoSIfSamplingRowStatus, hwXQoSIrsmGroupAddress=hwXQoSIrsmGroupAddress, hwXQoSBaExpPhbIndex=hwXQoSBaExpPhbIndex, SampleType=SampleType, hwXQoSPortQueueStatisticsWredDiscardBytes=hwXQoSPortQueueStatisticsWredDiscardBytes, hwXQoSQppbPolicyStatisticsTable=hwXQoSQppbPolicyStatisticsTable, hwXQoSMulDscpPhbCfgInfoTable=hwXQoSMulDscpPhbCfgInfoTable, hwXQoSRedirectNextHopBehaviorName=hwXQoSRedirectNextHopBehaviorName, hwXQoSFieldDeiRowStatus=hwXQoSFieldDeiRowStatus, hwXQoSMulBaDscpPhbCos=hwXQoSMulBaDscpPhbCos, hwXQoSStatResouceNotEnoughSlotId=hwXQoSStatResouceNotEnoughSlotId, hwXQoSSecurityStormControlInterfaceObjects=hwXQoSSecurityStormControlInterfaceObjects, hwNotificationExtGroup=hwNotificationExtGroup, hwXQoSIfScheduleCfgInfoTable=hwXQoSIfScheduleCfgInfoTable, hwXQoSIfIPCarStartIp=hwXQoSIfIPCarStartIp, hwXQoSGlobalWredClassCfgEntry=hwXQoSGlobalWredClassCfgEntry, hwXQoSIfCarYellowRemarkedBytes=hwXQoSIfCarYellowRemarkedBytes, hwXQoSIfQueueDirection=hwXQoSIfQueueDirection, hwXQoSPicForwardingPriority=hwXQoSPicForwardingPriority, hwXQoSConformance=hwXQoSConformance, hwXQoSPicForwardingGroup=hwXQoSPicForwardingGroup, hwXQoSCpDefendDiscardedPacketRate=hwXQoSCpDefendDiscardedPacketRate, hwXQoSMulBaDscpPri=hwXQoSMulBaDscpPri, hwXQoSQueueCirPercentage=hwXQoSQueueCirPercentage, hwXQoSIfIPCarRedAction=hwXQoSIfIPCarRedAction, hwXQoSIfUrpfAllowDefault=hwXQoSIfUrpfAllowDefault, hwXQoSCpcarRowStatus=hwXQoSCpcarRowStatus, hwXQoSIfRemarkDscpRowStatus=hwXQoSIfRemarkDscpRowStatus, hwXQoSIfCarStatisticsGroup=hwXQoSIfCarStatisticsGroup, hwXQoSIfSoftCarTable=hwXQoSIfSoftCarTable, hwXQoSCprlDiscardedPacketAlarmClear=hwXQoSCprlDiscardedPacketAlarmClear, hwXQoSIfQueueCir=hwXQoSIfQueueCir, hwXQoSIPCarRuleIndex=hwXQoSIPCarRuleIndex, hwXQoSCpApplyPolicyName=hwXQoSCpApplyPolicyName, hwXQoSBa8021pMapCfgInfoTable=hwXQoSBa8021pMapCfgInfoTable)
