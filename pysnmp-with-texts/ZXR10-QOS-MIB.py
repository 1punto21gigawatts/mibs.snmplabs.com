#
# PySNMP MIB module ZXR10-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZXR10-QOS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:48:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, Gauge32, IpAddress, Unsigned32, iso, Counter64, Integer32, ObjectIdentity, MibIdentifier, Counter32, TimeTicks, ModuleIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Gauge32", "IpAddress", "Unsigned32", "iso", "Counter64", "Integer32", "ObjectIdentity", "MibIdentifier", "Counter32", "TimeTicks", "ModuleIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
zte = MibIdentifier((1, 3, 6, 1, 4, 1, 3902))
zxr10 = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 3))
zxr10protocol = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 3, 101))
zxr10qos = ModuleIdentity((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6))
if mibBuilder.loadTexts: zxr10qos.setLastUpdated('0610101111Z')
if mibBuilder.loadTexts: zxr10qos.setOrganization('ZXR10 ROS OAM group')
if mibBuilder.loadTexts: zxr10qos.setContactInfo(' Nanjing Institute of ZTE Corporation Postal: No.68 Zijinghua Rd. Yuhuatai District, Nanjing, China Tel: +86 25 52871647 E-mail: yu.yue1@zte.com.cn')
if mibBuilder.loadTexts: zxr10qos.setDescription('This MIB Module provides Textual Conventions and OBJECT-ID Objects to be used by zxros qos module.')
qosPQconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2))
qosCQconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 3))
qosCBQconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4))
qosWREDconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 5))
qosWFQconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 6))
qosCARconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7))
qosIntfCarStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 8))
class DisplayString(OctetString):
    pass

class QosCirMatchType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 36, 37))
    namedValues = NamedValues(("match-localport", 3), ("match-acl", 4), ("match-precedence", 5), ("match-dscp", 6), ("match-mpls-exp", 7), ("match-802dot1p", 8), ("match-vlanId", 9), ("match-qos-group", 36), ("match-address-MAc", 37))

class QosCirAction(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 9, 10))
    namedValues = NamedValues(("drop", 0), ("continue", 1), ("transmit", 2), ("set-prec-continue", 3), ("set-prec-transmit", 4), ("set-dscp-continue", 5), ("set-dscp-transmit", 6), ("set-exp-continue", 9), ("set-exp-transmit", 10))

class QosCBQCarAction(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 2, 4, 6, 10))
    namedValues = NamedValues(("drop", 0), ("transmit", 2), ("set-prec-transmit", 4), ("set-dscp-transmit", 6), ("set-exp-transmit", 10))

class QosPQMatchType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 6, 7, 8, 9, 37, 36))
    namedValues = NamedValues(("match-default", 1), ("match-interface", 3), ("match-acl", 4), ("match-precedence", 5), ("match-dscp", 6), ("match-mpls-exp", 7), ("match-802dot1p", 8), ("match-vlanId", 9), ("match-address-MAc", 37), ("match-qos-group", 36))

class QosPQQueueType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("high", 0), ("medium", 1), ("normal", 2), ("low", 3))

class QosCMAPMatchType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6, 7, 8, 9, 37, 19, 21, 36))
    namedValues = NamedValues(("match-not", 1), ("match-acl", 4), ("match-precedence", 5), ("match-dscp", 6), ("match-mpls-exp", 7), ("match-802dot1p", 8), ("match-vlanId", 9), ("match-address-MAc", 37), ("match-any", 19), ("match-classmap", 21), ("match-qos-group", 36))

class TrafficDirection(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2))
    namedValues = NamedValues(("output", 2))

class QueueingBandwidthUnits(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("percentage", 1), ("kbps", 2))

class EntryStatus(TextualConvention, Integer32):
    description = 'The row status value of qos configration'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4))

qosModuleStart = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosModuleStart.setStatus('current')
if mibBuilder.loadTexts: qosModuleStart.setDescription('This object indicates if the qos module start or not. 1 start,0 not start.')
qosFreeCirIndex = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosFreeCirIndex.setStatus('current')
if mibBuilder.loadTexts: qosFreeCirIndex.setDescription('The first free cir item index.When a new cir item is created it is used to find a space to save the cir item configration;When deleted its value equals to the index of the cir item deleted, so when a new cir item is created the space can be used again.')
qosInputCirIfTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 2), )
if mibBuilder.loadTexts: qosInputCirIfTable.setStatus('current')
if mibBuilder.loadTexts: qosInputCirIfTable.setDescription('The description of zxr10 qos interface input rate-limit configuration. It is a list of qos interface cir entries.')
qosInputCirIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ZXR10-QOS-MIB", "qosInputCirIndex"))
if mibBuilder.loadTexts: qosInputCirIfEntry.setStatus('current')
if mibBuilder.loadTexts: qosInputCirIfEntry.setDescription('A qos cir interface entry containing objects that qos cir interface infomation,such as: rate-limit match type, commit rate, burst rate, confirm action etc.')
qosInputCirIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosInputCirIndex.setStatus('current')
if mibBuilder.loadTexts: qosInputCirIndex.setDescription('The qos interface cir config index.')
qosInputCirMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 2, 1, 2), QosCirMatchType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosInputCirMatchType.setStatus('current')
if mibBuilder.loadTexts: qosInputCirMatchType.setDescription('The qos interface cir match type.')
qosInputCirMatchValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 2, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosInputCirMatchValue.setStatus('current')
if mibBuilder.loadTexts: qosInputCirMatchValue.setDescription('The qos interface cir match value, for localport, it is 0.')
qosInputCirCir = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 2, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(8, 2000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosInputCirCir.setStatus('current')
if mibBuilder.loadTexts: qosInputCirCir.setDescription('The qos interface commit rate.')
qosInputCirNormalBurstRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 2, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(2000, 512000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosInputCirNormalBurstRate.setStatus('current')
if mibBuilder.loadTexts: qosInputCirNormalBurstRate.setDescription('The qos interface cir normal burst rate.')
qosInputCirPir = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 2, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(8, 2000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosInputCirPir.setStatus('current')
if mibBuilder.loadTexts: qosInputCirPir.setDescription('The qos interface peek rate.')
qosInputCirMaxBurstRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 2, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(2000, 512000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosInputCirMaxBurstRate.setStatus('current')
if mibBuilder.loadTexts: qosInputCirMaxBurstRate.setDescription('The qos interface cir max burst rate.')
qosInputCirConformAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 2, 1, 8), QosCirAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosInputCirConformAction.setStatus('current')
if mibBuilder.loadTexts: qosInputCirConformAction.setDescription('The qos interface cir confirm action.')
qosInputCirConformValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 2, 1, 9), Gauge32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosInputCirConformValue.setStatus('current')
if mibBuilder.loadTexts: qosInputCirConformValue.setDescription('New packet attribute values for each packets that conforms to the configured commit rate.')
qosInputCirExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 2, 1, 10), QosCirAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosInputCirExceedAction.setStatus('current')
if mibBuilder.loadTexts: qosInputCirExceedAction.setDescription('The qos interface cir exceed action.')
qosInputCirExceedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 2, 1, 11), Gauge32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosInputCirExceedValue.setStatus('current')
if mibBuilder.loadTexts: qosInputCirExceedValue.setDescription('New packet attribute values for each packets that exceeds to the configured commit rate.')
qosInputCirViolateAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 2, 1, 12), QosCirAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosInputCirViolateAction.setStatus('current')
if mibBuilder.loadTexts: qosInputCirViolateAction.setDescription('The qos interface cir violate action.')
qosInputCirViolateValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 2, 1, 13), Gauge32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosInputCirViolateValue.setStatus('current')
if mibBuilder.loadTexts: qosInputCirViolateValue.setDescription('New packet attribute values for each packets that exceeds to the configured exceed rate.')
qosInputCirRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 2, 1, 14), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosInputCirRowStatus.setStatus('current')
if mibBuilder.loadTexts: qosInputCirRowStatus.setDescription('The qos interface cir item row status. if it is in valid status, it only can change to invalid status, no other status.')
qosInputCirDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 2, 1, 15), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosInputCirDescription.setStatus('current')
if mibBuilder.loadTexts: qosInputCirDescription.setDescription('The qos interface cir description.')
qosInputCirIfTableLastchange = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosInputCirIfTableLastchange.setStatus('current')
if mibBuilder.loadTexts: qosInputCirIfTableLastchange.setDescription('The last time of the qos interface input cir table changed.')
qosOutputCirIfTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 4), )
if mibBuilder.loadTexts: qosOutputCirIfTable.setStatus('current')
if mibBuilder.loadTexts: qosOutputCirIfTable.setDescription('The description of zxr10 qos interface output rate-limit configuration. It is a list of qos interface cir entries.')
qosOutputCirIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ZXR10-QOS-MIB", "qosOutputCirIndex"))
if mibBuilder.loadTexts: qosOutputCirIfEntry.setStatus('current')
if mibBuilder.loadTexts: qosOutputCirIfEntry.setDescription('A qos cir interface entry containing objects that qos cir interface infomation,such as: rate-limit match type, commit rate, burst rate, confirm action etc.')
qosOutputCirIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosOutputCirIndex.setStatus('current')
if mibBuilder.loadTexts: qosOutputCirIndex.setDescription('The qos interface cir config index.')
qosOutputCirMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 4, 1, 2), QosCirMatchType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosOutputCirMatchType.setStatus('current')
if mibBuilder.loadTexts: qosOutputCirMatchType.setDescription('The qos interface cir match type.')
qosOutputCirMatchValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 4, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosOutputCirMatchValue.setStatus('current')
if mibBuilder.loadTexts: qosOutputCirMatchValue.setDescription('The qos interface cir match value, for localport, it is 0.')
qosOutputCirCir = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 4, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(8, 2000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosOutputCirCir.setStatus('current')
if mibBuilder.loadTexts: qosOutputCirCir.setDescription('The qos interface commit rate.')
qosOutputCirNormalBurstRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 4, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(2000, 512000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosOutputCirNormalBurstRate.setStatus('current')
if mibBuilder.loadTexts: qosOutputCirNormalBurstRate.setDescription('The qos interface cir normal burst rate.')
qosOutputCirPir = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 4, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(8, 2000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosOutputCirPir.setStatus('current')
if mibBuilder.loadTexts: qosOutputCirPir.setDescription('The qos interface peek rate.')
qosOutputCirMaxBurstRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 4, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(2000, 512000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosOutputCirMaxBurstRate.setStatus('current')
if mibBuilder.loadTexts: qosOutputCirMaxBurstRate.setDescription('The qos interface cir max burst rate, it must not be lower than normal burst rate.')
qosOutputCirConformAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 4, 1, 8), QosCirAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosOutputCirConformAction.setStatus('current')
if mibBuilder.loadTexts: qosOutputCirConformAction.setDescription('The qos interface cir conform action.')
qosOutputCirConformValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 4, 1, 9), Gauge32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosOutputCirConformValue.setStatus('current')
if mibBuilder.loadTexts: qosOutputCirConformValue.setDescription('New packet attribute values for each packets that conforms to the configured commit rate.')
qosOutputCirExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 4, 1, 10), QosCirAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosOutputCirExceedAction.setStatus('current')
if mibBuilder.loadTexts: qosOutputCirExceedAction.setDescription('The qos interface cir exceed action.')
qosOutputCirExceedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 4, 1, 11), Gauge32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosOutputCirExceedValue.setStatus('current')
if mibBuilder.loadTexts: qosOutputCirExceedValue.setDescription('New packet attribute values for each packets that exceeds to the configured commit rate.')
qosOutputCirViolateAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 4, 1, 12), QosCirAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosOutputCirViolateAction.setStatus('current')
if mibBuilder.loadTexts: qosOutputCirViolateAction.setDescription('The qos interface cir exceed action.')
qosOutputCirViolateValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 4, 1, 13), Gauge32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosOutputCirViolateValue.setStatus('current')
if mibBuilder.loadTexts: qosOutputCirViolateValue.setDescription('New packet attribute values for each packets that exceeds to the configured commit rate.')
qosOutputCirRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 4, 1, 14), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosOutputCirRowStatus.setStatus('current')
if mibBuilder.loadTexts: qosOutputCirRowStatus.setDescription('The qos interface cir item row status. if it is in valid status, it only can change to invalid status, no other status.')
qosOutputCirDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 4, 1, 15), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosOutputCirDescription.setStatus('current')
if mibBuilder.loadTexts: qosOutputCirDescription.setDescription('The qos interface cir description.')
qosOutputCirIfTableLastchange = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosOutputCirIfTableLastchange.setStatus('current')
if mibBuilder.loadTexts: qosOutputCirIfTableLastchange.setDescription('The last time of the qos interface Output cir table changed.')
qosPriorityQueueCfgTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 1), )
if mibBuilder.loadTexts: qosPriorityQueueCfgTable.setStatus('current')
if mibBuilder.loadTexts: qosPriorityQueueCfgTable.setDescription('The description of zxr10 qos priority queue configuration. It is a list of qos priority queue entries.')
qosPriorityQueueCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 1, 1), ).setIndexNames((0, "ZXR10-QOS-MIB", "qosPriorityQueueIndex"))
if mibBuilder.loadTexts: qosPriorityQueueCfgEntry.setStatus('current')
if mibBuilder.loadTexts: qosPriorityQueueCfgEntry.setDescription('A qos priority queue entry containing objects that qos priority queue configuration,such as: queue item num, queue limit etc.')
qosPriorityQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPriorityQueueIndex.setStatus('current')
if mibBuilder.loadTexts: qosPriorityQueueIndex.setDescription('The qos priority queue index.')
qosPriorityQueueItemTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPriorityQueueItemTotal.setStatus('current')
if mibBuilder.loadTexts: qosPriorityQueueItemTotal.setDescription('The configurated qos priority queue item total,the max number is 255.')
qosPriorityQueueDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 1, 1, 3), QosPQQueueType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPriorityQueueDefault.setStatus('current')
if mibBuilder.loadTexts: qosPriorityQueueDefault.setDescription('The qos priority default queue number.')
qosPriorityQueueLimitHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPriorityQueueLimitHigh.setStatus('current')
if mibBuilder.loadTexts: qosPriorityQueueLimitHigh.setDescription('The qos priority queue limit high value.')
qosPriorityQueueLimitMedium = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPriorityQueueLimitMedium.setStatus('current')
if mibBuilder.loadTexts: qosPriorityQueueLimitMedium.setDescription('The qos priority queue limit medium value.')
qosPriorityQueueLimitNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPriorityQueueLimitNormal.setStatus('current')
if mibBuilder.loadTexts: qosPriorityQueueLimitNormal.setDescription('The qos priority queue limit normal value.')
qosPriorityQueueLimitLow = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPriorityQueueLimitLow.setStatus('current')
if mibBuilder.loadTexts: qosPriorityQueueLimitLow.setDescription('The qos priority queue limit low value.')
qosPriorityQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 1, 1, 8), EntryStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPriorityQueueRowStatus.setStatus('current')
if mibBuilder.loadTexts: qosPriorityQueueRowStatus.setDescription('The qos priority queue status. ')
qosPriorityQueueCfgTableLastchange = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPriorityQueueCfgTableLastchange.setStatus('current')
if mibBuilder.loadTexts: qosPriorityQueueCfgTableLastchange.setDescription('The last time of the qos priority queue table changed.')
qosPriorityQueueItemTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 3), )
if mibBuilder.loadTexts: qosPriorityQueueItemTable.setStatus('current')
if mibBuilder.loadTexts: qosPriorityQueueItemTable.setDescription('The description of zxr10 qos priority queue configuration. It is a list of qos priority queue entries.')
qosPriorityQueueItemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 3, 1), ).setIndexNames((0, "ZXR10-QOS-MIB", "qosPriorityQueueIndex"), (0, "ZXR10-QOS-MIB", "qosPriorityQueueItemIndex"))
if mibBuilder.loadTexts: qosPriorityQueueItemEntry.setStatus('current')
if mibBuilder.loadTexts: qosPriorityQueueItemEntry.setDescription('A qos priority queue entry containing objects that qos priority queue configuration,such as: set type, queue num, default queue limit etc.')
qosPriorityQueueItemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPriorityQueueItemIndex.setStatus('current')
if mibBuilder.loadTexts: qosPriorityQueueItemIndex.setDescription('The qos priority queue item index.')
qosPriorityQueueItemMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 3, 1, 2), QosPQMatchType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPriorityQueueItemMatchType.setStatus('current')
if mibBuilder.loadTexts: qosPriorityQueueItemMatchType.setDescription('The qos priority queue match type such as mpls-exp,interface etc.')
qosPriorityQueueItemMatchValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 3, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPriorityQueueItemMatchValue.setStatus('current')
if mibBuilder.loadTexts: qosPriorityQueueItemMatchValue.setDescription('The qos priority queue match value.')
qosPriorityQueueItemQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 3, 1, 4), QosPQQueueType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPriorityQueueItemQueueNum.setStatus('current')
if mibBuilder.loadTexts: qosPriorityQueueItemQueueNum.setDescription('The qos priority queue num.')
qosPriorityQueueItemRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 3, 1, 5), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPriorityQueueItemRowStatus.setStatus('current')
if mibBuilder.loadTexts: qosPriorityQueueItemRowStatus.setDescription('The qos priority queue item row status. ')
qosPriorityQueueItemDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 3, 1, 6), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPriorityQueueItemDescription.setStatus('current')
if mibBuilder.loadTexts: qosPriorityQueueItemDescription.setDescription('The qos priority description.')
qosPriorityGroupTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 4), )
if mibBuilder.loadTexts: qosPriorityGroupTable.setStatus('current')
if mibBuilder.loadTexts: qosPriorityGroupTable.setDescription('This table describes the interface and the PriorityQueue that are attached to it')
qosPriorityGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: qosPriorityGroupEntry.setStatus('current')
if mibBuilder.loadTexts: qosPriorityGroupEntry.setDescription('Each entry in this table describes to which a interface a given PriorityQueue is attached')
qosPriorityGroupifname = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPriorityGroupifname.setStatus('current')
if mibBuilder.loadTexts: qosPriorityGroupifname.setDescription('The name of the interface which the priority queue attached.')
qosPriorityGroupNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 4, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPriorityGroupNum.setStatus('current')
if mibBuilder.loadTexts: qosPriorityGroupNum.setDescription('The Num of the priority-group which is attached to the interface')
qosPriorityGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 4, 1, 3), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPriorityGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: qosPriorityGroupRowStatus.setDescription('The row status of the priority group attached to the interface')
qosCBQosServicePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 1), )
if mibBuilder.loadTexts: qosCBQosServicePolicyTable.setStatus('current')
if mibBuilder.loadTexts: qosCBQosServicePolicyTable.setDescription('This table describes the interface and the policymap that are attached to it')
qosCBQosServicePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: qosCBQosServicePolicyEntry.setStatus('current')
if mibBuilder.loadTexts: qosCBQosServicePolicyEntry.setDescription('Each entry in this table describes to which a interface a given policymap is attached')
qosCbQosPolicyifname = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCbQosPolicyifname.setStatus('current')
if mibBuilder.loadTexts: qosCbQosPolicyifname.setDescription('The name of the interface which the service policy attached')
qosCbQosPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 1, 1, 2), TrafficDirection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosPolicyDirection.setStatus('current')
if mibBuilder.loadTexts: qosCbQosPolicyDirection.setDescription('This indicates the direction of traffic for which this service policy is applied')
qosCbQosServicePolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 1, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosServicePolicyName.setStatus('current')
if mibBuilder.loadTexts: qosCbQosServicePolicyName.setDescription('Name of the service policy which is attached to the interface.')
qosCbQosServicePolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 1, 1, 4), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosServicePolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: qosCbQosServicePolicyRowStatus.setDescription('The qos service policy row status.')
qosCbQosPolicyMapCfgTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 2), )
if mibBuilder.loadTexts: qosCbQosPolicyMapCfgTable.setStatus('current')
if mibBuilder.loadTexts: qosCbQosPolicyMapCfgTable.setDescription('This table specifies Policymap configuration information')
qosCbQosPolicyMapCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 2, 1), ).setIndexNames((0, "ZXR10-QOS-MIB", "qoscbQosPMapIndex"))
if mibBuilder.loadTexts: qosCbQosPolicyMapCfgEntry.setStatus('current')
if mibBuilder.loadTexts: qosCbQosPolicyMapCfgEntry.setDescription('Each entry in this table describes configuration information about a policymap. ')
qoscbQosPMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qoscbQosPMapIndex.setStatus('current')
if mibBuilder.loadTexts: qoscbQosPMapIndex.setDescription('An index assigned by system for each policy map.')
qoscbQosPolicyMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 2, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qoscbQosPolicyMapName.setStatus('current')
if mibBuilder.loadTexts: qoscbQosPolicyMapName.setDescription('Name of the policymap.')
qosCbQosPolicyMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 2, 1, 3), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosPolicyMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: qosCbQosPolicyMapRowStatus.setDescription('The policymap row status.')
qoscbQosPolicyMapDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 2, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qoscbQosPolicyMapDescription.setStatus('current')
if mibBuilder.loadTexts: qoscbQosPolicyMapDescription.setDescription('Description of the policymap. ')
qosCbQosClassMapCfgTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 3), )
if mibBuilder.loadTexts: qosCbQosClassMapCfgTable.setStatus('current')
if mibBuilder.loadTexts: qosCbQosClassMapCfgTable.setDescription('This table specifies ClassMap configuration information')
qosCbQosClassMapCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 3, 1), ).setIndexNames((0, "ZXR10-QOS-MIB", "qoscbQosCMapIndex"))
if mibBuilder.loadTexts: qosCbQosClassMapCfgEntry.setStatus('current')
if mibBuilder.loadTexts: qosCbQosClassMapCfgEntry.setDescription('Each entry in this table describes configuration information about a classmap')
qoscbQosCMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qoscbQosCMapIndex.setStatus('current')
if mibBuilder.loadTexts: qoscbQosCMapIndex.setDescription('An index assigned by system for each class map')
qosCbQosClassMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 3, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosClassMapName.setStatus('current')
if mibBuilder.loadTexts: qosCbQosClassMapName.setDescription('Name of the Classmap.')
qosCbQosClassMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 3, 1, 3), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosClassMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: qosCbQosClassMapRowStatus.setDescription('The classMap row status.')
qoscbQosClassMapDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 3, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qoscbQosClassMapDescription.setStatus('current')
if mibBuilder.loadTexts: qoscbQosClassMapDescription.setDescription('Description of the Classmap.')
qosCbQosCMAPMatchCfgTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 4), )
if mibBuilder.loadTexts: qosCbQosCMAPMatchCfgTable.setStatus('current')
if mibBuilder.loadTexts: qosCbQosCMAPMatchCfgTable.setDescription('This table specifies ClassMap configuration information ')
qosCbQosCMAPMatchCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 4, 1), ).setIndexNames((0, "ZXR10-QOS-MIB", "qoscbQosCMapIndex"), (0, "ZXR10-QOS-MIB", "qosCbQosCMAPMatchIndex"))
if mibBuilder.loadTexts: qosCbQosCMAPMatchCfgEntry.setStatus('current')
if mibBuilder.loadTexts: qosCbQosCMAPMatchCfgEntry.setDescription('Each entry in this table describes configuration information about a Match Statement')
qosCbQosCMAPMatchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 4, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosCMAPMatchIndex.setStatus('current')
if mibBuilder.loadTexts: qosCbQosCMAPMatchIndex.setDescription('An index assigned by system for each Match Statement')
qosCbQosCMAPMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 4, 1, 2), QosCMAPMatchType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosCMAPMatchType.setStatus('current')
if mibBuilder.loadTexts: qosCbQosCMAPMatchType.setDescription('Name of the Match Statement')
qosCbQosCMAPMatchValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 4, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosCMAPMatchValue.setStatus('current')
if mibBuilder.loadTexts: qosCbQosCMAPMatchValue.setDescription('Name of the Match Statement')
qosCbQosCMAPMatchRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 4, 1, 4), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosCMAPMatchRowStatus.setStatus('current')
if mibBuilder.loadTexts: qosCbQosCMAPMatchRowStatus.setDescription('The qos classMap match statment row status')
qosCbQosPolicyClassCfgTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 5), )
if mibBuilder.loadTexts: qosCbQosPolicyClassCfgTable.setStatus('current')
if mibBuilder.loadTexts: qosCbQosPolicyClassCfgTable.setDescription('This table specifies policy class information ')
qosCbQosPolicyClassCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 5, 1), ).setIndexNames((0, "ZXR10-QOS-MIB", "qoscbQosPMapIndex"), (0, "ZXR10-QOS-MIB", "qoscbQosCMapIndex"))
if mibBuilder.loadTexts: qosCbQosPolicyClassCfgEntry.setStatus('current')
if mibBuilder.loadTexts: qosCbQosPolicyClassCfgEntry.setDescription('Each entry in this table describes a policy class')
qosCbQosPolicyClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 5, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosPolicyClassName.setStatus('current')
if mibBuilder.loadTexts: qosCbQosPolicyClassName.setDescription('Name of the policy class.')
qosCbQosPolicyClassRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 5, 1, 2), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosPolicyClassRowStatus.setStatus('current')
if mibBuilder.loadTexts: qosCbQosPolicyClassRowStatus.setDescription('The policy class row status.')
qosCbQosqueueCfgTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 6), )
if mibBuilder.loadTexts: qosCbQosqueueCfgTable.setStatus('current')
if mibBuilder.loadTexts: qosCbQosqueueCfgTable.setDescription('This table specifies policy-class queue configuration information')
qosCbQosqueueCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 6, 1), ).setIndexNames((0, "ZXR10-QOS-MIB", "qoscbQosPMapIndex"), (0, "ZXR10-QOS-MIB", "qoscbQosCMapIndex"))
if mibBuilder.loadTexts: qosCbQosqueueCfgEntry.setStatus('current')
if mibBuilder.loadTexts: qosCbQosqueueCfgEntry.setDescription('Each entry in this table describes configuration information about a policy-map queue.')
qosCbQosQueueingCfgPriorityQueueNo = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 6, 1, 1), QosPQQueueType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosQueueingCfgPriorityQueueNo.setStatus('current')
if mibBuilder.loadTexts: qosCbQosQueueingCfgPriorityQueueNo.setDescription('If the traffic is specified to LLQ,the value is the queue number, else is NULL')
qosCbQosqueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 6, 1, 2), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosqueueRowStatus.setStatus('current')
if mibBuilder.loadTexts: qosCbQosqueueRowStatus.setDescription('The qos cbwfq action row status.')
qosCbQosbandwidthCfgTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 7), )
if mibBuilder.loadTexts: qosCbQosbandwidthCfgTable.setStatus('current')
if mibBuilder.loadTexts: qosCbQosbandwidthCfgTable.setDescription('This table specifies policy-class bandwidth configuration information')
qosCbQosbindwidthCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 7, 1), ).setIndexNames((0, "ZXR10-QOS-MIB", "qoscbQosPMapIndex"), (0, "ZXR10-QOS-MIB", "qoscbQosCMapIndex"))
if mibBuilder.loadTexts: qosCbQosbindwidthCfgEntry.setStatus('current')
if mibBuilder.loadTexts: qosCbQosbindwidthCfgEntry.setDescription('Each entry in this table describes configuration information about a policy-map bandwidth.')
qosCbQosQueueingCfgBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 7, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosQueueingCfgBandwidth.setStatus('current')
if mibBuilder.loadTexts: qosCbQosQueueingCfgBandwidth.setDescription('The configured bandwidth allocated to this traffic class.')
qosCbQosQueueingCfgBandwidthUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 7, 1, 2), QueueingBandwidthUnits()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosQueueingCfgBandwidthUnits.setStatus('current')
if mibBuilder.loadTexts: qosCbQosQueueingCfgBandwidthUnits.setDescription('Units of the accompanying bandwidth parameter')
qosCbQosActionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 7, 1, 3), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosActionRowStatus.setStatus('current')
if mibBuilder.loadTexts: qosCbQosActionRowStatus.setDescription('The qos cbwfq action row status.')
qosCbQosPoliceCfgTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 8), )
if mibBuilder.loadTexts: qosCbQosPoliceCfgTable.setStatus('current')
if mibBuilder.loadTexts: qosCbQosPoliceCfgTable.setDescription('This table specifies Police Action configuration information.')
qosCbQosPoliceCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 8, 1), ).setIndexNames((0, "ZXR10-QOS-MIB", "qoscbQosPMapIndex"), (0, "ZXR10-QOS-MIB", "qoscbQosCMapIndex"))
if mibBuilder.loadTexts: qosCbQosPoliceCfgEntry.setStatus('current')
if mibBuilder.loadTexts: qosCbQosPoliceCfgEntry.setDescription('Each entry in this table describes configuration information about a Police Action. The table holds Policy configuration parameters, such as rate, burst size, and actions based on traffic rates ')
qosCbQosPoliceCfgCir = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 2000000))).setUnits('Kilobits/second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosPoliceCfgCir.setStatus('current')
if mibBuilder.loadTexts: qosCbQosPoliceCfgCir.setDescription('The committed policing cir. This is the sustained rate permitted by policing.')
qosCbQosPoliceCfgBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 512000000))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosPoliceCfgBurstSize.setStatus('current')
if mibBuilder.loadTexts: qosCbQosPoliceCfgBurstSize.setDescription('The burst size ,in bytes,of a traffic.')
qosCbQosPoliceCfgPir = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 2000000))).setUnits('Kilobits/second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosPoliceCfgPir.setStatus('current')
if mibBuilder.loadTexts: qosCbQosPoliceCfgPir.setDescription('The committed policing cir. This is the peek rate permitted by policing.')
qosCbQosPoliceCfgExtBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 512000000))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosPoliceCfgExtBurstSize.setStatus('current')
if mibBuilder.loadTexts: qosCbQosPoliceCfgExtBurstSize.setDescription('The Max burst size ,in bytes,of a traffic.')
qosCbQosPoliceCfgConformAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 8, 1, 5), QosCBQCarAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosPoliceCfgConformAction.setStatus('current')
if mibBuilder.loadTexts: qosCbQosPoliceCfgConformAction.setDescription('Action to be taken when the traffic is within the configured rate, that is, the traffic rate is conforming.')
qosCbQosPoliceCfgConformSetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 8, 1, 6), Gauge32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosPoliceCfgConformSetValue.setStatus('current')
if mibBuilder.loadTexts: qosCbQosPoliceCfgConformSetValue.setDescription('New packet attribute values for each packets that conforms to the configured Police rate.')
qosCbQosPoliceCfgExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 8, 1, 7), QosCBQCarAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosPoliceCfgExceedAction.setStatus('current')
if mibBuilder.loadTexts: qosCbQosPoliceCfgExceedAction.setDescription('Action to be taken when the traffic is exceeds the configured rate, that is, the traffic rate is non-conforming.')
qosCbQosPoliceCfgExceedSetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 8, 1, 8), Gauge32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosPoliceCfgExceedSetValue.setStatus('current')
if mibBuilder.loadTexts: qosCbQosPoliceCfgExceedSetValue.setDescription('New packet attribute values for each packets that conforms to the configured Police rate.')
qosCbQosPoliceCfgViolateAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 8, 1, 9), QosCBQCarAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosPoliceCfgViolateAction.setStatus('current')
if mibBuilder.loadTexts: qosCbQosPoliceCfgViolateAction.setDescription('Action to be taken when the traffic is exceeds the peek rate, that is, the traffic rate is non-conforming.')
qosCbQosPoliceCfgViolateSetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 8, 1, 10), Gauge32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosPoliceCfgViolateSetValue.setStatus('current')
if mibBuilder.loadTexts: qosCbQosPoliceCfgViolateSetValue.setDescription('New packet attribute values for each packets that conforms to the peek Police rate.')
qosCbQosPoliceCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 8, 1, 11), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosPoliceCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: qosCbQosPoliceCfgRowStatus.setDescription('The row status qos cbwfq police configration.')
qosWREDprecedenceCfgTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 5, 1), )
if mibBuilder.loadTexts: qosWREDprecedenceCfgTable.setStatus('current')
if mibBuilder.loadTexts: qosWREDprecedenceCfgTable.setDescription('This table specifies wred precedence configuration information.')
qosWREDprecedenceCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ZXR10-QOS-MIB", "qosREDCfgPreValue"))
if mibBuilder.loadTexts: qosWREDprecedenceCfgEntry.setStatus('current')
if mibBuilder.loadTexts: qosWREDprecedenceCfgEntry.setDescription('Each entry in this table describes configuration information about a wred policy.')
qosREDCfgPreValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 5, 1, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosREDCfgPreValue.setStatus('current')
if mibBuilder.loadTexts: qosREDCfgPreValue.setDescription('The IP precedence of this entry.')
qosREDprecedenceCfgMinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 5, 1, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosREDprecedenceCfgMinThreshold.setStatus('current')
if mibBuilder.loadTexts: qosREDprecedenceCfgMinThreshold.setDescription('Minimum threshold in number of packets. When the average queue length reaches this number, WRED begins to drop packets with the specified IP precedence.')
qosREDprecedenceCfgMaxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 5, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosREDprecedenceCfgMaxThreshold.setStatus('current')
if mibBuilder.loadTexts: qosREDprecedenceCfgMaxThreshold.setDescription('Maximum threshold in number of packets. When the average queue length exceeds this number, WRED drops all packets with the specified IP precedence.')
qosREDprecedenceCfgPktDropProb = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 5, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosREDprecedenceCfgPktDropProb.setStatus('current')
if mibBuilder.loadTexts: qosREDprecedenceCfgPktDropProb.setDescription('Denominator for the fraction of packets dropped when the average queue depth is MaxDepthThreshold. For example, if the denominator is 10, one out of every 10 packets is dropped when the average queue is at the MaxDepthThreshold.')
qosREDCfgprecedenceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 5, 1, 1, 5), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosREDCfgprecedenceRowStatus.setStatus('current')
if mibBuilder.loadTexts: qosREDCfgprecedenceRowStatus.setDescription('The row status of qos wred configration.')
qosWREDweightCfgTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 5, 2), )
if mibBuilder.loadTexts: qosWREDweightCfgTable.setStatus('current')
if mibBuilder.loadTexts: qosWREDweightCfgTable.setDescription('This table specifies wred weight configuration information.')
qosWREDweightCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: qosWREDweightCfgEntry.setStatus('current')
if mibBuilder.loadTexts: qosWREDweightCfgEntry.setDescription('Each entry in this table describes configuration information about a wred weight policy.')
qosREDCfgweightValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 5, 2, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosREDCfgweightValue.setStatus('current')
if mibBuilder.loadTexts: qosREDCfgweightValue.setDescription('The decay factor for the queue average calculation. The decay factor is equal to raising 2 to the power of N, where N could be up to 16. The smaller the number, the faster it decays.')
qosREDCfgweightRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 5, 2, 1, 2), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosREDCfgweightRowStatus.setStatus('current')
if mibBuilder.loadTexts: qosREDCfgweightRowStatus.setDescription('The row status of qos wred weight configration.')
qosWFQCfgTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 6, 1), )
if mibBuilder.loadTexts: qosWFQCfgTable.setStatus('current')
if mibBuilder.loadTexts: qosWFQCfgTable.setDescription('This table specifies WFQ configuration information.')
qosWFQCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: qosWFQCfgEntry.setStatus('current')
if mibBuilder.loadTexts: qosWFQCfgEntry.setDescription('Each entry in this table describes configuration information about a wfq policy.')
qosWFQCfgTotalQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 6, 1, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosWFQCfgTotalQueueNum.setStatus('current')
if mibBuilder.loadTexts: qosWFQCfgTotalQueueNum.setDescription('Total queue number used for wfq in the interface.')
qosWFQCfgQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 6, 1, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosWFQCfgQueueLimit.setStatus('current')
if mibBuilder.loadTexts: qosWFQCfgQueueLimit.setDescription('The discard threshold for each queue.')
qosWFQCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 6, 1, 1, 3), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosWFQCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: qosWFQCfgRowStatus.setDescription('The row status of qos wfq configration.')
qosIfTraffStatInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 8, 1), )
if mibBuilder.loadTexts: qosIfTraffStatInfoTable.setStatus('current')
if mibBuilder.loadTexts: qosIfTraffStatInfoTable.setDescription('Display the traffic and the utilization of the interface after rate-limit policy. It is a list of qos interface car stat entries.')
qosIfTraffStatInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 8, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: qosIfTraffStatInfoEntry.setStatus('current')
if mibBuilder.loadTexts: qosIfTraffStatInfoEntry.setDescription('Display the traffic and the utilization of the interface after rate-limit policy.')
qosIntfName = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 8, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIntfName.setStatus('current')
if mibBuilder.loadTexts: qosIntfName.setDescription('The name of the interface.')
qosIntfInUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIntfInUtilization.setStatus('current')
if mibBuilder.loadTexts: qosIntfInUtilization.setDescription('The utilization of the in interface.')
qosIntfInCarTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 8, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIntfInCarTotalPackets.setStatus('current')
if mibBuilder.loadTexts: qosIntfInCarTotalPackets.setDescription('The total packets of the in interface.')
qosIntfInCarTranPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 8, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIntfInCarTranPackets.setStatus('current')
if mibBuilder.loadTexts: qosIntfInCarTranPackets.setDescription('The transmit packets of the in interface.')
qosIntfInCarDropPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 8, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIntfInCarDropPackets.setStatus('current')
if mibBuilder.loadTexts: qosIntfInCarDropPackets.setDescription('The drop packets of the in interface.')
qosIntfInCarTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 8, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIntfInCarTotalBytes.setStatus('current')
if mibBuilder.loadTexts: qosIntfInCarTotalBytes.setDescription('The total bytes of the in interface.')
qosIntfInCarTranBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 8, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIntfInCarTranBytes.setStatus('current')
if mibBuilder.loadTexts: qosIntfInCarTranBytes.setDescription('The transmit bytes of the in interface.')
qosIntfInCarDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 8, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIntfInCarDropBytes.setStatus('current')
if mibBuilder.loadTexts: qosIntfInCarDropBytes.setDescription('The drop bytes of the in interface.')
qosIntfOutUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 8, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIntfOutUtilization.setStatus('current')
if mibBuilder.loadTexts: qosIntfOutUtilization.setDescription('The utilization of the out interface.')
qosIntfOutCarTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 8, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIntfOutCarTotalPackets.setStatus('current')
if mibBuilder.loadTexts: qosIntfOutCarTotalPackets.setDescription('The total packets of the out interface.')
qosIntfOutCarTranPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 8, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIntfOutCarTranPackets.setStatus('current')
if mibBuilder.loadTexts: qosIntfOutCarTranPackets.setDescription('The transmit packets of the out interface.')
qosIntfOutCarDropPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 8, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIntfOutCarDropPackets.setStatus('current')
if mibBuilder.loadTexts: qosIntfOutCarDropPackets.setDescription('The drop packets of the out interface.')
qosIntfOutCarTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 8, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIntfOutCarTotalBytes.setStatus('current')
if mibBuilder.loadTexts: qosIntfOutCarTotalBytes.setDescription('The total bytes of the out interface.')
qosIntfOutCarTranBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 8, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIntfOutCarTranBytes.setStatus('current')
if mibBuilder.loadTexts: qosIntfOutCarTranBytes.setDescription('The transmit bytes of the out interface.')
qosIntfOutCarDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 8, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIntfOutCarDropBytes.setStatus('current')
if mibBuilder.loadTexts: qosIntfOutCarDropBytes.setDescription('The drop bytes of the out interface.')
mibBuilder.exportSymbols("ZXR10-QOS-MIB", QosCirMatchType=QosCirMatchType, qosCbQosPoliceCfgPir=qosCbQosPoliceCfgPir, qoscbQosClassMapDescription=qoscbQosClassMapDescription, qosREDCfgprecedenceRowStatus=qosREDCfgprecedenceRowStatus, qosOutputCirNormalBurstRate=qosOutputCirNormalBurstRate, qosInputCirExceedAction=qosInputCirExceedAction, qosIntfName=qosIntfName, qosInputCirConformValue=qosInputCirConformValue, qosWFQCfgEntry=qosWFQCfgEntry, qosOutputCirConformAction=qosOutputCirConformAction, qosREDprecedenceCfgMaxThreshold=qosREDprecedenceCfgMaxThreshold, qosCbQosServicePolicyRowStatus=qosCbQosServicePolicyRowStatus, qosIntfInCarTotalPackets=qosIntfInCarTotalPackets, zxr10protocol=zxr10protocol, qosIntfOutCarDropPackets=qosIntfOutCarDropPackets, QosCBQCarAction=QosCBQCarAction, qosIntfInCarDropBytes=qosIntfInCarDropBytes, qosCQconfig=qosCQconfig, qosIntfOutCarTranBytes=qosIntfOutCarTranBytes, qosCbQosCMAPMatchCfgTable=qosCbQosCMAPMatchCfgTable, qosPriorityQueueLimitMedium=qosPriorityQueueLimitMedium, qosCbQosPoliceCfgExceedSetValue=qosCbQosPoliceCfgExceedSetValue, qosPriorityQueueItemTable=qosPriorityQueueItemTable, qosIntfInUtilization=qosIntfInUtilization, qosIfTraffStatInfoEntry=qosIfTraffStatInfoEntry, qosFreeCirIndex=qosFreeCirIndex, qosPriorityQueueItemMatchValue=qosPriorityQueueItemMatchValue, qosCbQosPolicyClassCfgTable=qosCbQosPolicyClassCfgTable, qosCbQosPoliceCfgTable=qosCbQosPoliceCfgTable, qosCbQosCMAPMatchType=qosCbQosCMAPMatchType, qosInputCirIndex=qosInputCirIndex, qosInputCirRowStatus=qosInputCirRowStatus, qosCbQosQueueingCfgBandwidth=qosCbQosQueueingCfgBandwidth, qosCbQosPolicyClassCfgEntry=qosCbQosPolicyClassCfgEntry, EntryStatus=EntryStatus, qosOutputCirIfTable=qosOutputCirIfTable, qosCbQosClassMapName=qosCbQosClassMapName, qosCbQosActionRowStatus=qosCbQosActionRowStatus, qoscbQosCMapIndex=qoscbQosCMapIndex, qosInputCirIfTableLastchange=qosInputCirIfTableLastchange, qosIntfOutCarDropBytes=qosIntfOutCarDropBytes, qosOutputCirExceedAction=qosOutputCirExceedAction, qosCbQosPoliceCfgEntry=qosCbQosPoliceCfgEntry, qosCbQosqueueRowStatus=qosCbQosqueueRowStatus, qosCbQosPoliceCfgConformAction=qosCbQosPoliceCfgConformAction, qosPriorityGroupNum=qosPriorityGroupNum, qosIntfOutCarTotalBytes=qosIntfOutCarTotalBytes, qosWFQCfgTotalQueueNum=qosWFQCfgTotalQueueNum, zte=zte, qosInputCirIfEntry=qosInputCirIfEntry, qosREDprecedenceCfgMinThreshold=qosREDprecedenceCfgMinThreshold, qosIfTraffStatInfoTable=qosIfTraffStatInfoTable, qosOutputCirPir=qosOutputCirPir, qosPriorityQueueCfgTable=qosPriorityQueueCfgTable, DisplayString=DisplayString, qosPriorityGroupRowStatus=qosPriorityGroupRowStatus, qosCbQosPoliceCfgCir=qosCbQosPoliceCfgCir, qosWFQCfgQueueLimit=qosWFQCfgQueueLimit, qosWREDconfig=qosWREDconfig, qosOutputCirMatchType=qosOutputCirMatchType, qosPriorityQueueItemRowStatus=qosPriorityQueueItemRowStatus, qosPriorityQueueIndex=qosPriorityQueueIndex, qosPriorityGroupifname=qosPriorityGroupifname, qosIntfInCarTranBytes=qosIntfInCarTranBytes, qosCbQosPoliceCfgExceedAction=qosCbQosPoliceCfgExceedAction, zxr10qos=zxr10qos, qosCbQosPoliceCfgBurstSize=qosCbQosPoliceCfgBurstSize, qoscbQosPolicyMapName=qoscbQosPolicyMapName, qosWREDweightCfgTable=qosWREDweightCfgTable, qosOutputCirIfTableLastchange=qosOutputCirIfTableLastchange, qosCbQosQueueingCfgPriorityQueueNo=qosCbQosQueueingCfgPriorityQueueNo, qosREDCfgweightRowStatus=qosREDCfgweightRowStatus, qosIntfOutUtilization=qosIntfOutUtilization, qosOutputCirViolateAction=qosOutputCirViolateAction, qosPriorityQueueItemIndex=qosPriorityQueueItemIndex, qosOutputCirConformValue=qosOutputCirConformValue, qosCBQconfig=qosCBQconfig, qosIntfInCarTranPackets=qosIntfInCarTranPackets, qosCbQosPoliceCfgConformSetValue=qosCbQosPoliceCfgConformSetValue, qosInputCirConformAction=qosInputCirConformAction, qosInputCirMatchType=qosInputCirMatchType, qosCbQosPolicyDirection=qosCbQosPolicyDirection, qosOutputCirIfEntry=qosOutputCirIfEntry, qosCbQosPolicyifname=qosCbQosPolicyifname, qosCbQosPolicyClassRowStatus=qosCbQosPolicyClassRowStatus, qosCbQosCMAPMatchValue=qosCbQosCMAPMatchValue, qosOutputCirDescription=qosOutputCirDescription, qosCbQosPoliceCfgExtBurstSize=qosCbQosPoliceCfgExtBurstSize, qosWFQconfig=qosWFQconfig, PYSNMP_MODULE_ID=zxr10qos, qosPriorityGroupEntry=qosPriorityGroupEntry, qosOutputCirExceedValue=qosOutputCirExceedValue, qosCbQosqueueCfgTable=qosCbQosqueueCfgTable, QueueingBandwidthUnits=QueueingBandwidthUnits, qosInputCirExceedValue=qosInputCirExceedValue, qosPriorityQueueRowStatus=qosPriorityQueueRowStatus, QosCirAction=QosCirAction, qosCbQosPoliceCfgViolateSetValue=qosCbQosPoliceCfgViolateSetValue, QosPQQueueType=QosPQQueueType, qosWFQCfgTable=qosWFQCfgTable, qosInputCirViolateAction=qosInputCirViolateAction, qosModuleStart=qosModuleStart, qoscbQosPMapIndex=qoscbQosPMapIndex, qosCbQosqueueCfgEntry=qosCbQosqueueCfgEntry, qosIntfCarStat=qosIntfCarStat, qosOutputCirCir=qosOutputCirCir, qosWFQCfgRowStatus=qosWFQCfgRowStatus, qosCbQosPolicyMapCfgEntry=qosCbQosPolicyMapCfgEntry, qosPriorityQueueItemQueueNum=qosPriorityQueueItemQueueNum, qosPriorityQueueLimitNormal=qosPriorityQueueLimitNormal, qosOutputCirRowStatus=qosOutputCirRowStatus, qosPriorityQueueLimitHigh=qosPriorityQueueLimitHigh, qosCbQosCMAPMatchRowStatus=qosCbQosCMAPMatchRowStatus, qosPriorityQueueItemEntry=qosPriorityQueueItemEntry, qosCbQosPolicyMapRowStatus=qosCbQosPolicyMapRowStatus, qosCBQosServicePolicyTable=qosCBQosServicePolicyTable, qosPQconfig=qosPQconfig, qosCbQosQueueingCfgBandwidthUnits=qosCbQosQueueingCfgBandwidthUnits, qosInputCirDescription=qosInputCirDescription, qosCbQosbandwidthCfgTable=qosCbQosbandwidthCfgTable, qosOutputCirViolateValue=qosOutputCirViolateValue, qosInputCirIfTable=qosInputCirIfTable, QosCMAPMatchType=QosCMAPMatchType, qosPriorityQueueItemMatchType=qosPriorityQueueItemMatchType, qosIntfOutCarTranPackets=qosIntfOutCarTranPackets, qosIntfOutCarTotalPackets=qosIntfOutCarTotalPackets, qosWREDweightCfgEntry=qosWREDweightCfgEntry, qosCbQosServicePolicyName=qosCbQosServicePolicyName, qosOutputCirMatchValue=qosOutputCirMatchValue, qosCbQosClassMapCfgEntry=qosCbQosClassMapCfgEntry, qosWREDprecedenceCfgTable=qosWREDprecedenceCfgTable, TrafficDirection=TrafficDirection, qosInputCirMatchValue=qosInputCirMatchValue, qosREDCfgweightValue=qosREDCfgweightValue, qosCbQosCMAPMatchCfgEntry=qosCbQosCMAPMatchCfgEntry, qosPriorityQueueCfgEntry=qosPriorityQueueCfgEntry, qosCbQosClassMapCfgTable=qosCbQosClassMapCfgTable, qosPriorityQueueLimitLow=qosPriorityQueueLimitLow, qosREDCfgPreValue=qosREDCfgPreValue, qosInputCirMaxBurstRate=qosInputCirMaxBurstRate, qosCbQosClassMapRowStatus=qosCbQosClassMapRowStatus, zxr10=zxr10, qosPriorityQueueItemDescription=qosPriorityQueueItemDescription, qosCbQosbindwidthCfgEntry=qosCbQosbindwidthCfgEntry, qosCbQosPolicyClassName=qosCbQosPolicyClassName, qosCARconfig=qosCARconfig, qosCbQosCMAPMatchIndex=qosCbQosCMAPMatchIndex, qosPriorityQueueDefault=qosPriorityQueueDefault, qosInputCirViolateValue=qosInputCirViolateValue, qosIntfInCarTotalBytes=qosIntfInCarTotalBytes, QosPQMatchType=QosPQMatchType, qosInputCirNormalBurstRate=qosInputCirNormalBurstRate, qosWREDprecedenceCfgEntry=qosWREDprecedenceCfgEntry, qosOutputCirMaxBurstRate=qosOutputCirMaxBurstRate, qosIntfInCarDropPackets=qosIntfInCarDropPackets, qosPriorityQueueCfgTableLastchange=qosPriorityQueueCfgTableLastchange, qosPriorityGroupTable=qosPriorityGroupTable, qosInputCirPir=qosInputCirPir, qosREDprecedenceCfgPktDropProb=qosREDprecedenceCfgPktDropProb, qosPriorityQueueItemTotal=qosPriorityQueueItemTotal, qosCbQosPolicyMapCfgTable=qosCbQosPolicyMapCfgTable, qosCbQosPoliceCfgViolateAction=qosCbQosPoliceCfgViolateAction, qosOutputCirIndex=qosOutputCirIndex, qosCBQosServicePolicyEntry=qosCBQosServicePolicyEntry, qoscbQosPolicyMapDescription=qoscbQosPolicyMapDescription, qosCbQosPoliceCfgRowStatus=qosCbQosPoliceCfgRowStatus, qosInputCirCir=qosInputCirCir)
