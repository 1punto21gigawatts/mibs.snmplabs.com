#
# PySNMP MIB module CISCO-EXT-SCSI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-EXT-SCSI-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:57:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ciscoScsiDscLunEntry, ciscoScsiInstanceEntry, ScsiIndexValue, ciscoScsiDscTgtEntry = mibBuilder.importSymbols("CISCO-SCSI-MIB", "ciscoScsiDscLunEntry", "ciscoScsiInstanceEntry", "ScsiIndexValue", "ciscoScsiDscTgtEntry")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
DomainId, FcAddressId, VsanIndex = mibBuilder.importSymbols("CISCO-ST-TC", "DomainId", "FcAddressId", "VsanIndex")
vsanIndex, = mibBuilder.importSymbols("CISCO-VSAN-MIB", "vsanIndex")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
IpAddress, iso, Counter32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32, NotificationType, MibIdentifier, Gauge32, TimeTicks, ObjectIdentity, Unsigned32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "iso", "Counter32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32", "NotificationType", "MibIdentifier", "Gauge32", "TimeTicks", "ObjectIdentity", "Unsigned32", "ModuleIdentity")
RowStatus, TestAndIncr, TimeStamp, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TestAndIncr", "TimeStamp", "DisplayString", "TextualConvention", "TruthValue")
ciscoExtScsiMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 299))
ciscoExtScsiMIB.setRevisions(('2004-03-14 00:00', '2003-11-28 00:00', '2003-01-28 00:00', '2002-10-10 00:00', '2002-10-05 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoExtScsiMIB.setRevisionsDescriptions(("Added ciscoExtScsiIntrDiscLunPortId object to ciscoExtScsiIntrDiscLunsTable. Changed the DEFVAL of ciscoExtScsiLunDiscOs object to 'windows' from 'all'. Added ciscoExtScsiDiscType object.", 'Added ciscoExtScsiLunDiscOs, ciscoExtScsiLunDiscVsanId, ciscoExtScsiLunDiscPortId, ciscoExtScsiLunCacheScsiIndex, ciscoExtScsiLunCacheDevIndex, ciscoExtScsiLunCachePortIndex, ciscoExtScsiLunCacheTgtIndex scalar objects. Added ciscoExtScsiIntrDiscLunOs object to ciscoExtScsiIntrDiscLunsTable.', 'Added ciscoExtScsiPartialLunDiscTable to facilitate partial LUN discovery on a fabric wide basis.', 'Added ciscoExtScsiNotificationCntl object and ciscoExtScsiLunDiscDoneNotify notification.', 'Initial version of this MIB.',))
if mibBuilder.loadTexts: ciscoExtScsiMIB.setLastUpdated('200403140000Z')
if mibBuilder.loadTexts: ciscoExtScsiMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoExtScsiMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 -NETS E-mail: cs-san@cisco.com')
if mibBuilder.loadTexts: ciscoExtScsiMIB.setDescription('The Cisco extension to CISCO-SCSI-MIB which is a copy of the Internet draft, the SCSI-MIB, from the IETF. Glossary of terms used in this MIB: VSAN - Virtual Storage Area Network, similar to a VLAN. WWN - World Wide Name. Mechanism of identifying devices in Fibre Channel Networks. It is 8 bytes long. pWWN - port World Wide Name. nWWN - node World Wide Name. LUN - Logical Unit Number is a 64-bit identifier for a logical unit.')
ciscoExtScsiMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 299, 1))
ciscoExtScsiMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 299, 2))
ciscoExtScsiConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 1))
ciscoExtScsiNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 2))
ciscoExtScsiNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 2, 0))
ciscoExtScsiStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 3))
class LunDiscOS(TextualConvention, Integer32):
    description = 'Represents a set of Operating Systems on which LUN discovery is to be done.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("windows", 1), ("aix", 2), ("solaris", 3), ("linux", 4), ("hpux", 5), ("all", 6))

ciscoExtScsiGenInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 1, 1), )
if mibBuilder.loadTexts: ciscoExtScsiGenInstanceTable.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiGenInstanceTable.setDescription('This table is an extension to the ciscoScsiInstanceTable defined in the CISCO-SCSI-MIB. The ciscoScsiInstIndex values are assigned as follows: 1. there is one ciscoScsiInstIndex value defined per disk group associated with the system. 2. there is one ciscoScsiInstIndex value defined per line-card. 3. there is one ciscoScsiInstIndex value defined for the supervisor as a whole. All ciscoScsiInstIndex values defined for type 1 above have a disk group ID associated with them, which is that of the corresponding disk group. This value is present in the corresponding instance of ciscoExtScsiDiskGrpId object. The corresponding instance of ciscoExtScsiLineCardOrSup object will contain the entity physical index of the line card to which it is associated. For ciscoScsiInstIndex values defined for type 2, the ciscoExtScsiDiskGrpId object is not meaningful and will be empty. The corresponding instance of ciscoExtScsiLineCardOrSup object will contain the entity physical index value of that line card. For the ciscoScsiInstIndex value defined for type 3, the ciscoExtScsiDiskGrpId object is not meaningful and will be empty. The corresponding instance of ciscoExtScsiLineCardOrSup object will contain the entity physical index value of the supervisor.')
ciscoExtScsiGenInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 1, 1, 1), )
ciscoScsiInstanceEntry.registerAugmentions(("CISCO-EXT-SCSI-MIB", "ciscoExtScsiGenInstanceEntry"))
ciscoExtScsiGenInstanceEntry.setIndexNames(*ciscoScsiInstanceEntry.getIndexNames())
if mibBuilder.loadTexts: ciscoExtScsiGenInstanceEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiGenInstanceEntry.setDescription('An entry contains disk group ID and/or entity physical index of a disk group/line card/supervisor depending on the ciscoScsiInstIndex value assignment as defined above. There is a one-to-one mapping between an entry here and ciscoScsiInstanceEntry.')
ciscoExtScsiDiskGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 1, 1, 1, 1), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(64, 64), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoExtScsiDiskGrpId.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiDiskGrpId.setDescription('This object contains the disk group ID of a disk group if the value of the ciscoScsiInstIndex corresponds to that of a disk group. Otherwise, this object will contain a null string.')
ciscoExtScsiLineCardOrSup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoExtScsiLineCardOrSup.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiLineCardOrSup.setDescription('This object contains the entity physical index of a line card if the ciscoScsiInstIndex value corresponds to that of a disk group or a line card. Otherwise, this object contains the entity physical index value of the supervisor of the system.')
ciscoExtScsiLunDiscSpinLock = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 1, 2), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoExtScsiLunDiscSpinLock.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiLunDiscSpinLock.setDescription('This object is used to facilitate triggerring the LUN/target discovery by multiple managers. The procedure for triggering LUN/target discovery is as follows: 1. Retrieve the value of ciscoExtScsiLunDiscSpinLock and determine the value for ciscoExtScsiStartLunDisc, ciscoExtScsiLunDiscOs, ciscoExtScsiLunDiscVsanID, ciscoExtScsiLunDiscPortId and ciscoExtScsiDiscType objects. 2. Set the value of ciscoExtScsiLunDiscSpinLock to the retrieved value, and in the same PDU, the value of ciscoExtScsiLunDiscOs to the determined value. If the set fails for the ciscoExtScsiLunDiscSpinLock object, go back to step 1. 3. Set the value of ciscoExtScsiLunDiscSpinLock to the retrieved value plus 1, and in the same PDU, the value of ciscoExtScsiLunDiscVsanID to the determined value. If the set fails for the ciscoExtScsiLunDiscSpinLock object, go back to step 1. 4. Set the value of ciscoExtScsiLunDiscSpinLock to the retrieved value plus 2, and in the same PDU, the value of ciscoExtScsiLunDiscPortId to the determined value. If the set fails for the ciscoExtScsiLunDiscSpinLock object, go back to step 1. 5. Set the value of ciscoExtScsiLunDiscSpinLock to the retrieved value plus 3, and in the same PDU, the value of ciscoExtScsiDiscType to the determined value. If the set fails for the ciscoExtScsiLunDiscSpinLock object, go back to step 1. 6. Set the value of ciscoExtScsiLunDiscSpinLock to the retrieved value plus 4, and in the same PDU, the value of ciscoExtScsiStartLunDisc to the determined value. If the set fails for the ciscoExtScsiLunDiscSpinLock object, go back to step 1. Note that if it is possible to include ciscoExtScsiLunDiscVsanID, ciscoExtScsiLunDiscPortId, ciscoExtScsiDiscType and/or ciscoExtScsiStartLunDisc in the (Set Request) PDU of an earlier step, then steps 3, 4 and/or 5 can be eliminated.')
ciscoExtScsiStartLunDisc = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("startDiscovery", 1), ("startLocalDiscovery", 2), ("startRemoteDiscovery", 3), ("noop", 4), ("startPartialDiscovery", 5), ("startPortBasedDiscovery", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoExtScsiStartLunDisc.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiStartLunDisc.setDescription("If this object is set to 'startLocalDiscovery', then only the directly attached SCSI target devices/ports and/or LUNs associated with them on all VSANs will be discovered. If this object is set to 'startRemoteDiscovery', then all SCSI target devices/ports and/or LUNs associated with them on all VSANs in the whole fabric, except the directly attached ones, will be discovered. If this object is set to 'startDiscovery', then both the above discoveries will be carried out. If this object is set to 'startPartialDiscovery', then all SCSI target devices/ports and/or LUNs associated with them on the domain IDs and VSANs specified in the ciscoExtScsiPartialLunDiscTable, will be discovered. If the ciscoExtScsiPartialLunDiscTable is empty, then no SCSI target devices/ports will be discovered. If this object is set to 'startPortBasedDiscovery', then all LUNs/targets associated with the port specified by ciscoExtScsiLunDiscPortId object will be discovered. If the ciscoExtScsiLunDiscPortId object is not set to a valid value, then no LUNs/targets will be discovered. The value of ciscoExtScsiLunDiscVsanId object should be set to the value of the VSAN on which the port based discovery is to be carried out. No action is taken if this object is set to 'noop'. The value of this object when read is always 'noop'. After a discovery has been triggered, this object cannot be set again to trigger another discovery, when the value of ciscoExtScsiLunDiscStatus is 'inProgress'. In all the above cases, if the ciscoExtScsiLunDiscOs object is set to a particular Operating System, then the discovery of the LUNs will take place only for that Operating System.")
ciscoExtScsiLunDiscStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inProgress", 1), ("completed", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoExtScsiLunDiscStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiLunDiscStatus.setDescription('This object indicates the outcome of the LUN/target discovery on the local switch. This object contains the status of the most recent discovery. inProgress(1) - indicates that the discovery is still in progress. completed(2) - indicates that the discovery is complete. failure(3) - indicates that the discovery encountered a failure.')
ciscoExtScsiLunDiscCompleteTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoExtScsiLunDiscCompleteTime.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiLunDiscCompleteTime.setDescription('This object contains the value of sysUpTime when the last discovery was completed. The value of this object will be zero, if discovery has not been performed since the last system restart.')
ciscoExtScsiIntrDiscTgtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 1, 6), )
if mibBuilder.loadTexts: ciscoExtScsiIntrDiscTgtTable.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiIntrDiscTgtTable.setDescription('This table is an extension to the ciscoScsiDscTgtTable.')
ciscoExtScsiIntrDiscTgtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 1, 6, 1), )
ciscoScsiDscTgtEntry.registerAugmentions(("CISCO-EXT-SCSI-MIB", "ciscoExtScsiIntrDiscTgtEntry"))
ciscoExtScsiIntrDiscTgtEntry.setIndexNames(*ciscoScsiDscTgtEntry.getIndexNames())
if mibBuilder.loadTexts: ciscoExtScsiIntrDiscTgtEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiIntrDiscTgtEntry.setDescription('An entry (conceptual row) in this table.')
ciscoExtScsiIntrDiscTgtVsanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 1, 6, 1, 1), VsanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoExtScsiIntrDiscTgtVsanId.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiIntrDiscTgtVsanId.setDescription('The VSAN to which this target belongs to.')
ciscoExtScsiIntrDiscTgtDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 1, 6, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoExtScsiIntrDiscTgtDevType.setReference('Section 7.3.2 Standard INQUIRY Data. SCSI Primary Commands- 2 (SPC-2)')
if mibBuilder.loadTexts: ciscoExtScsiIntrDiscTgtDevType.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiIntrDiscTgtDevType.setDescription('The device type of the SCSI target.')
ciscoExtScsiIntrDiscTgtVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 1, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoExtScsiIntrDiscTgtVendorId.setReference('Section 7.3.2 Standard INQUIRY Data. SCSI Primary Commands- 2 (SPC-2)')
if mibBuilder.loadTexts: ciscoExtScsiIntrDiscTgtVendorId.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiIntrDiscTgtVendorId.setDescription('The vendor Id of the SCSI target.')
ciscoExtScsiIntrDiscTgtProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 1, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoExtScsiIntrDiscTgtProductId.setReference('Section 7.3.2 Standard INQUIRY Data. SCSI Primary Commands- 2 (SPC-2)')
if mibBuilder.loadTexts: ciscoExtScsiIntrDiscTgtProductId.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiIntrDiscTgtProductId.setDescription('The product Id of the SCSI target.')
ciscoExtScsiIntrDiscTgtRevLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 1, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoExtScsiIntrDiscTgtRevLevel.setReference('Section 7.3.2 Standard INQUIRY Data. SCSI Primary Commands- 2 (SPC-2)')
if mibBuilder.loadTexts: ciscoExtScsiIntrDiscTgtRevLevel.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiIntrDiscTgtRevLevel.setDescription('The product revision level of the SCSI target.')
ciscoExtScsiIntrDiscTgtOtherInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 1, 6, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoExtScsiIntrDiscTgtOtherInfo.setReference('Section 7.3.2 Standard INQUIRY Data. SCSI Primary Commands- 2 (SPC-2)')
if mibBuilder.loadTexts: ciscoExtScsiIntrDiscTgtOtherInfo.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiIntrDiscTgtOtherInfo.setDescription('The bytes from 0 to 7 in the INQUIRY command response data.')
ciscoExtScsiIntrDiscLunsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 1, 7), )
if mibBuilder.loadTexts: ciscoExtScsiIntrDiscLunsTable.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiIntrDiscLunsTable.setDescription('This table is an extension to the ciscoScsiDscLunTable.')
ciscoExtScsiIntrDiscLunsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 1, 7, 1), )
ciscoScsiDscLunEntry.registerAugmentions(("CISCO-EXT-SCSI-MIB", "ciscoExtScsiIntrDiscLunsEntry"))
ciscoExtScsiIntrDiscLunsEntry.setIndexNames(*ciscoScsiDscLunEntry.getIndexNames())
if mibBuilder.loadTexts: ciscoExtScsiIntrDiscLunsEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiIntrDiscLunsEntry.setDescription('An entry (conceptual row) in this table.')
ciscoExtScsiIntrDiscLunCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 1, 7, 1, 1), Unsigned32()).setUnits('MBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoExtScsiIntrDiscLunCapacity.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiIntrDiscLunCapacity.setDescription('The capacity of this Lun.')
ciscoExtScsiIntrDiscLunNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 1, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoExtScsiIntrDiscLunNumber.setReference('Section 4.8 (Logical Units) and Section 3.1.63 in SCSI Architecture Model-2 (SAM-2).')
if mibBuilder.loadTexts: ciscoExtScsiIntrDiscLunNumber.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiIntrDiscLunNumber.setDescription('The number of this LUN.')
ciscoExtScsiIntrDiscLunSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 1, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoExtScsiIntrDiscLunSerialNum.setReference('Section 8.4.6 (Unit Serial Number Page) in SCSI Primary Commands-2 (SPC-2).')
if mibBuilder.loadTexts: ciscoExtScsiIntrDiscLunSerialNum.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiIntrDiscLunSerialNum.setDescription('The serial number of this LUN.')
ciscoExtScsiIntrDiscLunOs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 1, 7, 1, 4), LunDiscOS()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoExtScsiIntrDiscLunOs.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiIntrDiscLunOs.setDescription('The Operating System for which this LUN was discovered.')
ciscoExtScsiIntrDiscLunPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 1, 7, 1, 5), FcAddressId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoExtScsiIntrDiscLunPortId.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiIntrDiscLunPortId.setDescription('The port on which this LUN was discovered. LUNs are present on SCSI target ports. This object represents the FC-ID (Fibre Channel Identifier) of the target port on which this LUN was discovered.')
ciscoExtScsiNotificationCntl = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoExtScsiNotificationCntl.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiNotificationCntl.setDescription("This object specifies if the 'ciscoExtScsiLunDiscDoneNotify' notification should be generated or not. If the value of this object is 'true', then the notification is generated when a discovery is completed. If the value of this object is 'false', then the notification is not generated.")
ciscoExtScsiPartialLunDiscTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 1, 9), )
if mibBuilder.loadTexts: ciscoExtScsiPartialLunDiscTable.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiPartialLunDiscTable.setDescription("This table contains a set of domain IDs on VSAN, on which the fabric-wide LUN/target discovery needs to be carried out. It is a mechanism to limit the fabric wide discovery of SCSI targets and LUNs to the domains and VSANs specified in this table. If this table is populated with some domain IDs on some VSANs and a discovery is started by setting ciscoExtScsiStartLunDisc object to 'startPartialDiscovery', then discovery of SCSI targets and LUNs is limited only to those domains on those VSANs.")
ciscoExtScsiPartialLunDiscEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 1, 9, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"), (0, "CISCO-EXT-SCSI-MIB", "ciscoExtScsiPartialLunDomId"))
if mibBuilder.loadTexts: ciscoExtScsiPartialLunDiscEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiPartialLunDiscEntry.setDescription('An entry (conceptual row) in this table.')
ciscoExtScsiPartialLunDomId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 1, 9, 1, 1), DomainId())
if mibBuilder.loadTexts: ciscoExtScsiPartialLunDomId.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiPartialLunDomId.setDescription('The Domain Id on which the lun discovery needs to be carried out.')
ciscoExtScsiPartialLunRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 1, 9, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoExtScsiPartialLunRowStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiPartialLunRowStatus.setDescription('The status of this conceptual row.')
ciscoExtScsiLunDiscOs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 1, 10), LunDiscOS().clone('windows')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoExtScsiLunDiscOs.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiLunDiscOs.setDescription('This object specifies the Operating System on which the LUNs/targets need to be discovered.')
ciscoExtScsiLunDiscVsanId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 1, 11), VsanIndex().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoExtScsiLunDiscVsanId.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiLunDiscVsanId.setDescription('This object specifies the VSAN on which the LUNs/ targets need to be discovered, in the case of port-based discovery. If a port-based discovery is not being initiated, then the value of this object will be ignored.')
ciscoExtScsiLunDiscPortId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 1, 12), FcAddressId().clone(hexValue="000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoExtScsiLunDiscPortId.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiLunDiscPortId.setDescription('This object specifies the FCID of the port for which the LUNs/targets need to be discovered, in the case of port-based discovery. If a port-based discovery is not being initiated, then the value of this object will be ignored and should be set to all zeros.')
ciscoExtScsiLunCacheScsiIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 1, 13), ScsiIndexValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoExtScsiLunCacheScsiIndex.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiLunCacheScsiIndex.setDescription('This object specifies the first index into the ciscoExtScsiIntrDiscLunsTable. It is populated by the agent on the completion of a successful port based discovery of LUNs. It helps the management station to directly access the discovered LUN entry.')
ciscoExtScsiLunCacheDevIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 1, 14), ScsiIndexValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoExtScsiLunCacheDevIndex.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiLunCacheDevIndex.setDescription('This object specifies the second index into the ciscoExtScsiIntrDiscLunsTable. It is populated by the agent on the completion of a successful port based discovery of LUNs. It helps the management station to directly access the discovered LUN entry.')
ciscoExtScsiLunCachePortIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 1, 15), ScsiIndexValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoExtScsiLunCachePortIndex.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiLunCachePortIndex.setDescription('This object specifies the third index into the ciscoExtScsiIntrDiscLunsTable. It is populated by the agent on the completion of a successful port based discovery of LUNs. It helps the management station to directly access the discovered LUN entry.')
ciscoExtScsiLunCacheTgtIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 1, 16), ScsiIndexValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoExtScsiLunCacheTgtIndex.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiLunCacheTgtIndex.setDescription('This object specifies the fourth index into the ciscoExtScsiIntrDiscLunsTable. It is populated by the agent on the completion of a successful port based discovery of LUNs. It helps the management station to directly access the discovered LUN entry.')
ciscoExtScsiDiscType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("targets", 1), ("luns", 2))).clone('luns')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoExtScsiDiscType.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiDiscType.setDescription("This object specifies the type of discovery desired. Setting this object to 'targets(1), results in only targets being discovered and the ciscoExtScsiIntrDiscTgtTable being populated with them. The corresponding LUNs are not discovered. Setting this object to 'luns(2)', results in targets and LUNs being discovered and the ciscoExtScsiIntrDiscTgtTable and ciscoExtScsiIntrDiscLunsTable are populated.")
ciscoExtScsiLunDiscDoneNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 299, 1, 2, 0, 1)).setObjects(("CISCO-EXT-SCSI-MIB", "ciscoExtScsiLunDiscStatus"))
if mibBuilder.loadTexts: ciscoExtScsiLunDiscDoneNotify.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiLunDiscDoneNotify.setDescription('This notification is generated whenever a Lun discovery cycle is completed.')
ciscoExtScsiMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 299, 2, 1))
ciscoExtScsiMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 299, 2, 2))
ciscoExtScsiMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 299, 2, 1, 1)).setObjects(("CISCO-EXT-SCSI-MIB", "ciscoExtScsiConfigGroup"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiNotifyControlGroup"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiNotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoExtScsiMIBCompliance = ciscoExtScsiMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoExtScsiMIBCompliance.setDescription('The compliance statement for entities that implement the Cisco extension to the CISCO-SCSI-MIB.')
ciscoExtScsiMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 299, 2, 1, 2)).setObjects(("CISCO-EXT-SCSI-MIB", "ciscoExtScsiConfigGroup"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiPartialDiscGroup"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiNotifyControlGroup"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiNotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoExtScsiMIBCompliance2 = ciscoExtScsiMIBCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoExtScsiMIBCompliance2.setDescription('The compliance statement for entities that implement the Cisco extension to the CISCO-SCSI-MIB.')
ciscoExtScsiMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 299, 2, 1, 3)).setObjects(("CISCO-EXT-SCSI-MIB", "ciscoExtScsiConfigGroup1"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiPartialDiscGroup"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiNotifyControlGroup"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiNotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoExtScsiMIBComplianceRev3 = ciscoExtScsiMIBComplianceRev3.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoExtScsiMIBComplianceRev3.setDescription('The compliance statement for entities that implement the Cisco extension to the CISCO-SCSI-MIB.')
ciscoExtScsiMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 299, 2, 1, 4)).setObjects(("CISCO-EXT-SCSI-MIB", "ciscoExtScsiConfigGroup2"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiPartialDiscGroup"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiNotifyControlGroup"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiNotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoExtScsiMIBComplianceRev4 = ciscoExtScsiMIBComplianceRev4.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiMIBComplianceRev4.setDescription('The compliance statement for entities that implement the Cisco extension to the CISCO-SCSI-MIB.')
ciscoExtScsiConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 299, 2, 2, 1)).setObjects(("CISCO-EXT-SCSI-MIB", "ciscoExtScsiDiskGrpId"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiLineCardOrSup"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiLunDiscSpinLock"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiStartLunDisc"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiLunDiscStatus"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiLunDiscCompleteTime"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiIntrDiscTgtVsanId"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiIntrDiscTgtDevType"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiIntrDiscTgtVendorId"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiIntrDiscTgtProductId"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiIntrDiscTgtRevLevel"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiIntrDiscTgtOtherInfo"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiIntrDiscLunCapacity"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiIntrDiscLunNumber"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiIntrDiscLunSerialNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoExtScsiConfigGroup = ciscoExtScsiConfigGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoExtScsiConfigGroup.setDescription('A collection of objects for displaying and configuring Cisco extension MIB objects to the CISCO-SCSI-MIB.')
ciscoExtScsiNotifyControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 299, 2, 2, 2)).setObjects(("CISCO-EXT-SCSI-MIB", "ciscoExtScsiNotificationCntl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoExtScsiNotifyControlGroup = ciscoExtScsiNotifyControlGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiNotifyControlGroup.setDescription('A collection of notification control object(s) for controlling notification generation.')
ciscoExtScsiNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 299, 2, 2, 3)).setObjects(("CISCO-EXT-SCSI-MIB", "ciscoExtScsiLunDiscDoneNotify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoExtScsiNotifyGroup = ciscoExtScsiNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiNotifyGroup.setDescription('A collection of notification(s) for monitoring Lun discovery status.')
ciscoExtScsiPartialDiscGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 299, 2, 2, 4)).setObjects(("CISCO-EXT-SCSI-MIB", "ciscoExtScsiPartialLunRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoExtScsiPartialDiscGroup = ciscoExtScsiPartialDiscGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiPartialDiscGroup.setDescription('A collection of objects for displaying and configuring partial LUN discovery.')
ciscoExtScsiConfigGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 299, 2, 2, 5)).setObjects(("CISCO-EXT-SCSI-MIB", "ciscoExtScsiDiskGrpId"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiLineCardOrSup"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiLunDiscSpinLock"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiLunDiscOs"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiStartLunDisc"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiLunDiscStatus"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiLunDiscCompleteTime"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiIntrDiscTgtVsanId"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiIntrDiscTgtDevType"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiIntrDiscTgtVendorId"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiIntrDiscTgtProductId"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiIntrDiscTgtRevLevel"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiIntrDiscTgtOtherInfo"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiIntrDiscLunCapacity"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiIntrDiscLunNumber"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiIntrDiscLunSerialNum"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiIntrDiscLunOs"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiLunDiscVsanId"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiLunDiscPortId"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiLunCacheScsiIndex"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiLunCacheDevIndex"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiLunCachePortIndex"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiLunCacheTgtIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoExtScsiConfigGroup1 = ciscoExtScsiConfigGroup1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoExtScsiConfigGroup1.setDescription('A collection of objects for displaying and configuring Cisco extension MIB objects to the CISCO-SCSI-MIB.')
ciscoExtScsiConfigGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 299, 2, 2, 6)).setObjects(("CISCO-EXT-SCSI-MIB", "ciscoExtScsiDiskGrpId"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiLineCardOrSup"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiLunDiscSpinLock"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiLunDiscOs"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiStartLunDisc"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiLunDiscStatus"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiLunDiscCompleteTime"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiIntrDiscTgtVsanId"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiIntrDiscTgtDevType"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiIntrDiscTgtVendorId"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiIntrDiscTgtProductId"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiIntrDiscTgtRevLevel"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiIntrDiscTgtOtherInfo"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiIntrDiscLunCapacity"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiIntrDiscLunNumber"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiIntrDiscLunSerialNum"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiIntrDiscLunOs"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiIntrDiscLunPortId"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiLunDiscVsanId"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiLunDiscPortId"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiLunCacheScsiIndex"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiLunCacheDevIndex"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiLunCachePortIndex"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiLunCacheTgtIndex"), ("CISCO-EXT-SCSI-MIB", "ciscoExtScsiDiscType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoExtScsiConfigGroup2 = ciscoExtScsiConfigGroup2.setStatus('current')
if mibBuilder.loadTexts: ciscoExtScsiConfigGroup2.setDescription('A collection of objects for displaying and configuring Cisco extension MIB objects to the CISCO-SCSI-MIB.')
mibBuilder.exportSymbols("CISCO-EXT-SCSI-MIB", ciscoExtScsiIntrDiscLunSerialNum=ciscoExtScsiIntrDiscLunSerialNum, ciscoExtScsiPartialLunDiscEntry=ciscoExtScsiPartialLunDiscEntry, ciscoExtScsiMIBComplianceRev4=ciscoExtScsiMIBComplianceRev4, ciscoExtScsiNotificationCntl=ciscoExtScsiNotificationCntl, ciscoExtScsiIntrDiscTgtEntry=ciscoExtScsiIntrDiscTgtEntry, ciscoExtScsiNotifyGroup=ciscoExtScsiNotifyGroup, ciscoExtScsiIntrDiscLunCapacity=ciscoExtScsiIntrDiscLunCapacity, ciscoExtScsiLunDiscSpinLock=ciscoExtScsiLunDiscSpinLock, ciscoExtScsiLunCacheTgtIndex=ciscoExtScsiLunCacheTgtIndex, ciscoExtScsiLunDiscStatus=ciscoExtScsiLunDiscStatus, ciscoExtScsiPartialLunDiscTable=ciscoExtScsiPartialLunDiscTable, ciscoExtScsiPartialLunDomId=ciscoExtScsiPartialLunDomId, ciscoExtScsiGenInstanceTable=ciscoExtScsiGenInstanceTable, ciscoExtScsiMIBCompliance=ciscoExtScsiMIBCompliance, ciscoExtScsiIntrDiscLunsTable=ciscoExtScsiIntrDiscLunsTable, ciscoExtScsiIntrDiscLunOs=ciscoExtScsiIntrDiscLunOs, ciscoExtScsiIntrDiscTgtRevLevel=ciscoExtScsiIntrDiscTgtRevLevel, ciscoExtScsiLunCacheDevIndex=ciscoExtScsiLunCacheDevIndex, ciscoExtScsiMIBCompliance2=ciscoExtScsiMIBCompliance2, ciscoExtScsiMIB=ciscoExtScsiMIB, ciscoExtScsiConfigGroup2=ciscoExtScsiConfigGroup2, ciscoExtScsiConfiguration=ciscoExtScsiConfiguration, ciscoExtScsiIntrDiscTgtProductId=ciscoExtScsiIntrDiscTgtProductId, ciscoExtScsiLunDiscVsanId=ciscoExtScsiLunDiscVsanId, ciscoExtScsiLunCachePortIndex=ciscoExtScsiLunCachePortIndex, ciscoExtScsiLunDiscCompleteTime=ciscoExtScsiLunDiscCompleteTime, ciscoExtScsiConfigGroup1=ciscoExtScsiConfigGroup1, ciscoExtScsiLunDiscDoneNotify=ciscoExtScsiLunDiscDoneNotify, ciscoExtScsiConfigGroup=ciscoExtScsiConfigGroup, ciscoExtScsiLunDiscPortId=ciscoExtScsiLunDiscPortId, ciscoExtScsiStats=ciscoExtScsiStats, LunDiscOS=LunDiscOS, ciscoExtScsiMIBGroups=ciscoExtScsiMIBGroups, ciscoExtScsiIntrDiscLunsEntry=ciscoExtScsiIntrDiscLunsEntry, ciscoExtScsiDiskGrpId=ciscoExtScsiDiskGrpId, ciscoExtScsiMIBCompliances=ciscoExtScsiMIBCompliances, ciscoExtScsiMIBComplianceRev3=ciscoExtScsiMIBComplianceRev3, ciscoExtScsiNotifyControlGroup=ciscoExtScsiNotifyControlGroup, ciscoExtScsiStartLunDisc=ciscoExtScsiStartLunDisc, PYSNMP_MODULE_ID=ciscoExtScsiMIB, ciscoExtScsiPartialLunRowStatus=ciscoExtScsiPartialLunRowStatus, ciscoExtScsiIntrDiscLunNumber=ciscoExtScsiIntrDiscLunNumber, ciscoExtScsiIntrDiscTgtVsanId=ciscoExtScsiIntrDiscTgtVsanId, ciscoExtScsiIntrDiscTgtDevType=ciscoExtScsiIntrDiscTgtDevType, ciscoExtScsiPartialDiscGroup=ciscoExtScsiPartialDiscGroup, ciscoExtScsiNotification=ciscoExtScsiNotification, ciscoExtScsiLineCardOrSup=ciscoExtScsiLineCardOrSup, ciscoExtScsiIntrDiscLunPortId=ciscoExtScsiIntrDiscLunPortId, ciscoExtScsiDiscType=ciscoExtScsiDiscType, ciscoExtScsiIntrDiscTgtOtherInfo=ciscoExtScsiIntrDiscTgtOtherInfo, ciscoExtScsiIntrDiscTgtVendorId=ciscoExtScsiIntrDiscTgtVendorId, ciscoExtScsiLunDiscOs=ciscoExtScsiLunDiscOs, ciscoExtScsiMIBObjects=ciscoExtScsiMIBObjects, ciscoExtScsiIntrDiscTgtTable=ciscoExtScsiIntrDiscTgtTable, ciscoExtScsiLunCacheScsiIndex=ciscoExtScsiLunCacheScsiIndex, ciscoExtScsiGenInstanceEntry=ciscoExtScsiGenInstanceEntry, ciscoExtScsiMIBConformance=ciscoExtScsiMIBConformance, ciscoExtScsiNotifications=ciscoExtScsiNotifications)
