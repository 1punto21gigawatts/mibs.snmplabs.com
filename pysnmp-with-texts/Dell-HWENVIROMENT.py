#
# PySNMP MIB module Dell-HWENVIROMENT (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Dell-HWENVIROMENT
# Produced by pysmi-0.3.4 at Wed May  1 12:55:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
rnd, = mibBuilder.importSymbols("Dell-MIB", "rnd")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Counter64, MibIdentifier, IpAddress, Counter32, Integer32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Unsigned32, ObjectIdentity, iso, NotificationType, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "MibIdentifier", "IpAddress", "Counter32", "Integer32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Unsigned32", "ObjectIdentity", "iso", "NotificationType", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
rlEnv = ModuleIdentity((1, 3, 6, 1, 4, 1, 89, 83))
rlEnv.setRevisions(('2003-09-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rlEnv.setRevisionsDescriptions(('Added this MODULE-IDENTITY clause.',))
if mibBuilder.loadTexts: rlEnv.setLastUpdated('200309210000Z')
if mibBuilder.loadTexts: rlEnv.setOrganization('Dell')
if mibBuilder.loadTexts: rlEnv.setContactInfo('www.dell.com')
if mibBuilder.loadTexts: rlEnv.setDescription('The private MIB module definition for environment of Dell devices.')
class RlEnvMonState(TextualConvention, Integer32):
    description = 'Represents the state of a device being monitored. Valid values are: normal(1): the environment is good, such as low temperature. warning(2): the environment is bad, such as temperature above normal operation range but not too high. critical(3): the environment is very bad, such as temperature much higher than normal operation limit. shutdown(4): the environment is the worst, the system should be shutdown immediately. notPresent(5): the environmental monitor is not present, such as temperature sensors do not exist. notFunctioning(6): the environmental monitor does not function properly, such as a temperature sensor generates a abnormal data like 1000 C. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("normal", 1), ("warning", 2), ("critical", 3), ("shutdown", 4), ("notPresent", 5), ("notFunctioning", 6))

class RlEnvMonDirection(TextualConvention, Integer32):
    description = 'Represents the state of a device being monitored. Valid values are: unKnown(1): if the board not support air flow direction. frontToBack(2): the air flow direction of the fan is front to back. backToFront(3): the air flow direction of the fan is back to front. clockwise(4): the air flow direction of the fan is clock wise unClockwise(5): the air flow direction of the fan is unclock wise insideOutside(6): the air flow direction of the fan is inside outside outsideInside(7): the air flow direction of the fan is outside inside rightToLeft(8): the air flow direction of the fan is from right to left leftToRight(9): the air flow direction of the fan is from left to right '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("unKnown", 1), ("frontToBack", 2), ("backToFront", 3), ("clockwise", 4), ("unClockwise", 5), ("insideOut", 6), ("outsideIn", 7), ("rightToLeft", 8), ("leftToRight", 9))

rlEnvPhysicalDescription = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 83, 1))
rlEnvMonFanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 89, 83, 1, 1), )
if mibBuilder.loadTexts: rlEnvMonFanStatusTable.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonFanStatusTable.setDescription('The table of fan status maintained by the environmental monitor.')
rlEnvMonFanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 83, 1, 1, 1), ).setIndexNames((0, "Dell-HWENVIROMENT", "rlEnvMonFanStatusIndex"))
if mibBuilder.loadTexts: rlEnvMonFanStatusEntry.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonFanStatusEntry.setDescription('An entry in the fan status table, representing the status of the associated fan maintained by the environmental monitor.')
rlEnvMonFanStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: rlEnvMonFanStatusIndex.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonFanStatusIndex.setDescription('Unique index for the fan being instrumented. This index is for SNMP purposes only, and has no intrinsic meaning.')
rlEnvMonFanStatusDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlEnvMonFanStatusDescr.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonFanStatusDescr.setDescription('Textual description of the fan being instrumented. This description is a short textual label, suitable as a human-sensible identification for the rest of the information in the entry.')
rlEnvMonFanState = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 1, 1, 1, 3), RlEnvMonState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlEnvMonFanState.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonFanState.setDescription('The mandatory state of the fan being instrumented.')
rlEnvMonSupplyStatusTable = MibTable((1, 3, 6, 1, 4, 1, 89, 83, 1, 2), )
if mibBuilder.loadTexts: rlEnvMonSupplyStatusTable.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonSupplyStatusTable.setDescription('The table of power supply status maintained by the environmental monitor card.')
rlEnvMonSupplyStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 83, 1, 2, 1), ).setIndexNames((0, "Dell-HWENVIROMENT", "rlEnvMonSupplyStatusIndex"))
if mibBuilder.loadTexts: rlEnvMonSupplyStatusEntry.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonSupplyStatusEntry.setDescription('An entry in the power supply status table, representing the status of the associated power supply maintained by the environmental monitor card.')
rlEnvMonSupplyStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: rlEnvMonSupplyStatusIndex.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonSupplyStatusIndex.setDescription('Unique index for the power supply being instrumented. This index is for SNMP purposes only, and has no intrinsic meaning.')
rlEnvMonSupplyStatusDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlEnvMonSupplyStatusDescr.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonSupplyStatusDescr.setDescription('Textual description of the power supply being instrumented. This description is a short textual label, suitable as a human-sensible identification for the rest of the information in the entry.')
rlEnvMonSupplyState = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 1, 2, 1, 3), RlEnvMonState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlEnvMonSupplyState.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonSupplyState.setDescription('The mandatory state of the power supply being instrumented.')
rlEnvMonSupplySource = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ac", 2), ("dc", 3), ("externalPowerSupply", 4), ("internalRedundant", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlEnvMonSupplySource.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonSupplySource.setDescription('The power supply source. unknown - Power supply source unknown ac - AC power supply dc - DC power supply externalPowerSupply - External power supply internalRedundant - Internal redundant power supply ')
rlEnvMonSupplyFanDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 1, 2, 1, 5), RlEnvMonDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlEnvMonSupplyFanDirection.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonSupplyFanDirection.setDescription("The direction of the power supply's fan.")
rlEnvFanData = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 83, 5))
rlEnvFanDataTable = MibTable((1, 3, 6, 1, 4, 1, 89, 83, 5, 1), )
if mibBuilder.loadTexts: rlEnvFanDataTable.setStatus('current')
if mibBuilder.loadTexts: rlEnvFanDataTable.setDescription('For each unit in a stack')
rlEnvFanDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 83, 5, 1, 1), ).setIndexNames((0, "Dell-HWENVIROMENT", "rlEnvFanDataStackUnit"))
if mibBuilder.loadTexts: rlEnvFanDataEntry.setStatus('current')
if mibBuilder.loadTexts: rlEnvFanDataEntry.setDescription('An entry of this table specifies a unit')
rlEnvFanDataStackUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlEnvFanDataStackUnit.setStatus('current')
if mibBuilder.loadTexts: rlEnvFanDataStackUnit.setDescription('The number of the stack unit')
rlEnvFanDataTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlEnvFanDataTemp.setStatus('current')
if mibBuilder.loadTexts: rlEnvFanDataTemp.setDescription('The unit temperature')
rlEnvFanDataSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlEnvFanDataSpeed.setStatus('current')
if mibBuilder.loadTexts: rlEnvFanDataSpeed.setDescription('Fan speed in RPM')
rlEnvFanDataOperLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlEnvFanDataOperLevel.setStatus('current')
if mibBuilder.loadTexts: rlEnvFanDataOperLevel.setDescription('Fan speed operative level')
rlEnvFanDataAdminLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 5, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlEnvFanDataAdminLevel.setStatus('current')
if mibBuilder.loadTexts: rlEnvFanDataAdminLevel.setDescription('Configured fan speed level')
rlEnvFanDataDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 5, 1, 1, 6), RlEnvMonDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlEnvFanDataDirection.setStatus('current')
if mibBuilder.loadTexts: rlEnvFanDataDirection.setDescription("The direction of the system's fan.")
mibBuilder.exportSymbols("Dell-HWENVIROMENT", rlEnvFanDataDirection=rlEnvFanDataDirection, rlEnvFanDataTemp=rlEnvFanDataTemp, rlEnvMonFanState=rlEnvMonFanState, rlEnvMonSupplyStatusEntry=rlEnvMonSupplyStatusEntry, PYSNMP_MODULE_ID=rlEnv, rlEnvFanDataStackUnit=rlEnvFanDataStackUnit, rlEnvMonSupplyStatusIndex=rlEnvMonSupplyStatusIndex, rlEnvMonFanStatusIndex=rlEnvMonFanStatusIndex, rlEnvFanDataTable=rlEnvFanDataTable, rlEnvMonSupplyFanDirection=rlEnvMonSupplyFanDirection, rlEnvMonFanStatusEntry=rlEnvMonFanStatusEntry, RlEnvMonDirection=RlEnvMonDirection, RlEnvMonState=RlEnvMonState, rlEnvMonSupplyStatusDescr=rlEnvMonSupplyStatusDescr, rlEnvFanDataOperLevel=rlEnvFanDataOperLevel, rlEnvFanDataSpeed=rlEnvFanDataSpeed, rlEnvFanDataEntry=rlEnvFanDataEntry, rlEnvPhysicalDescription=rlEnvPhysicalDescription, rlEnvFanDataAdminLevel=rlEnvFanDataAdminLevel, rlEnvFanData=rlEnvFanData, rlEnv=rlEnv, rlEnvMonFanStatusTable=rlEnvMonFanStatusTable, rlEnvMonSupplySource=rlEnvMonSupplySource, rlEnvMonSupplyStatusTable=rlEnvMonSupplyStatusTable, rlEnvMonSupplyState=rlEnvMonSupplyState, rlEnvMonFanStatusDescr=rlEnvMonFanStatusDescr)
