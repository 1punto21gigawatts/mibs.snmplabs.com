#
# PySNMP MIB module JUNIPER-MPLS-LDP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-MPLS-LDP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:59:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetPortNumber, InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddressType", "InetAddress")
jnxMibs, = mibBuilder.importSymbols("JUNIPER-SMI", "jnxMibs")
MplsLabelDistributionMethod, MplsLdpLabelType, MplsLabel, MplsLsrIdentifier, MplsLdpIdentifier, MplsLspType, MplsRetentionMode = mibBuilder.importSymbols("MPLS-TC-STD-MIB", "MplsLabelDistributionMethod", "MplsLdpLabelType", "MplsLabel", "MplsLsrIdentifier", "MplsLdpIdentifier", "MplsLspType", "MplsRetentionMode")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Unsigned32, iso, NotificationType, Bits, MibIdentifier, TimeTicks, ModuleIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Integer32, Gauge32, Counter64, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "iso", "NotificationType", "Bits", "MibIdentifier", "TimeTicks", "ModuleIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Integer32", "Gauge32", "Counter64", "ObjectIdentity")
TruthValue, TextualConvention, StorageType, TimeInterval, DisplayString, RowStatus, RowPointer, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "StorageType", "TimeInterval", "DisplayString", "RowStatus", "RowPointer", "TimeStamp")
jnxMplsLdpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 36))
jnxMplsLdpMIB.setRevisions(('2006-05-16 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxMplsLdpMIB.setRevisionsDescriptions(('This mib was earlier supported on JUNOS as ldpmib.mib (MPLS-LDP-MIB).',))
if mibBuilder.loadTexts: jnxMplsLdpMIB.setLastUpdated('200605161200Z')
if mibBuilder.loadTexts: jnxMplsLdpMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxMplsLdpMIB.setContactInfo(' Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxMplsLdpMIB.setDescription("This MIB contains managed object definitions for the 'Multiprotocol Label Switching, Label Distribution Protocol, LDP' document.")
jnxMplsLdpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1))
jnxMplsLdpNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 36, 2))
jnxMplsLdpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 36, 3))
jnxMplsLdpLsrObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 1))
jnxMplsLdpEntityObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2))
jnxMplsLdpLsrId = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 1, 1), MplsLsrIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpLsrId.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpLsrId.setDescription("The LSR's Identifier.")
jnxMplsLdpLsrLoopDetectionCapable = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("other", 2), ("hopCount", 3), ("pathVector", 4), ("hopCountAndPathVector", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpLsrLoopDetectionCapable.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpLsrLoopDetectionCapable.setDescription('A indication of whether this Label Switching Router supports loop detection. none(1) -- Loop Detection is not supported on this LSR. other(2) -- Loop Detection is supported but by a method other than those listed below. hopCount(3) -- Loop Detection is supported by Hop Count only. pathVector(4) -- Loop Detection is supported by Path Vector only. hopCountAndPathVector(5) -- Loop Detection is supported by both Hop Count And Path Vector. Since Loop Detection is determined during Session Initialization, an individual session may not be running with loop detection. This object simply gives an indication of whether or not the LSR has the ability to support Loop Detection and which types.')
jnxMplsLdpEntityLastChange = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpEntityLastChange.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpEntityLastChange.setDescription('The value of sysUpTime at the time of the most recent addition or deletion of an entry to the jnxMplsLdpEntityTable/jnxMplsLdpEntityStatsTable. If no such changes have occurred since the last re-initialization of the local management subsystem, then this object contains a zero value.')
jnxMplsLdpEntityIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpEntityIndexNext.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpEntityIndexNext.setDescription('This object contains an appropriate value to be used for jnxMplsLdpEntityIndex when creating entries in the jnxMplsLdpEntityTable. The value 0 indicates that no unassigned entries are available. To obtain the jnxMplsLdpEntityIndex value for a new entry, the manager issues a management protocol retrieval operation to obtain the current value of this object. After each retrieval, the agent should modify the value to the next unassigned index.')
jnxMplsLdpEntityTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 3), )
if mibBuilder.loadTexts: jnxMplsLdpEntityTable.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpEntityTable.setDescription('This table contains information about the MPLS Label Distribution Protocol Entities which exist on this Label Switching Router (LSR).')
jnxMplsLdpEntityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 3, 1), ).setIndexNames((0, "JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpEntityLdpId"), (0, "JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpEntityIndex"))
if mibBuilder.loadTexts: jnxMplsLdpEntityEntry.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpEntityEntry.setDescription('An entry in this table represents an LDP entity. An entry can be created by a network administrator or by an SNMP agent as instructed by LDP.')
jnxMplsLdpEntityLdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 3, 1, 1), MplsLdpIdentifier())
if mibBuilder.loadTexts: jnxMplsLdpEntityLdpId.setReference('[RFC3036] LDP Specification, Section on LDP Identifiers.')
if mibBuilder.loadTexts: jnxMplsLdpEntityLdpId.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpEntityLdpId.setDescription('The LDP identifier.')
jnxMplsLdpEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: jnxMplsLdpEntityIndex.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpEntityIndex.setDescription("This index is used as a secondary index to uniquely identify this row. Before creating a row in this table, the 'jnxMplsLdpEntityIndexNext' object should be retrieved. That value should be used for the value of this index when creating a row in this table. (NOTE: if a value of zero (0) is retrieved, that indicates that no rows can be created in this table at this time. A secondary index (this object) is meaningful to some but not all, LDP implementations. For example in an LDP implementation which uses PPP would use this index to differentiate PPP sub-links. Another way to use this index is to give this the value of ifIndex. However, this is dependant on the implementation.")
jnxMplsLdpEntityProtocolVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpEntityProtocolVersion.setReference('[RFC3036], LDP Specification, Section 3.5.3 Initialization Message.')
if mibBuilder.loadTexts: jnxMplsLdpEntityProtocolVersion.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpEntityProtocolVersion.setDescription('The version number of the LDP protocol which will be used in the session initialization message. Section 3.5.3 in the LDP Specification specifies that the version of the LDP protocol is negotiated during session establishment. The value of this object represents the value that is sent in the initialization message.')
jnxMplsLdpEntityAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpEntityAdminStatus.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpEntityAdminStatus.setDescription("The administrative status of this LDP Entity. If this object is changed from 'enable' to 'disable' and this entity has already attempted to establish contact with a Peer, then all contact with that Peer is lost and all information from that Peer needs to be removed from the MIB. (This implies that the network management subsystem should clean up any related entry in the jnxMplsLdpPeerTable). At this point the user is able to change values which are related to this entity. When the admin status is set back to 'up', then this Entity will attempt to establish a new session with the Peer.")
jnxMplsLdpEntityOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpEntityOperStatus.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpEntityOperStatus.setDescription('The operational status of this LDP Entity.')
jnxMplsLdpEntityTcpDscPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 3, 1, 6), InetPortNumber().clone(646)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpEntityTcpDscPort.setReference('[RFC3036], LDP Specification, Section 2.4.1, Basic Discovery Mechanism, Section 2.4.2, Extended Discovery Mechanism, Section 3.10, Well-known Numbers, and Section 3.10.1. UDP and TCP Ports.')
if mibBuilder.loadTexts: jnxMplsLdpEntityTcpDscPort.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpEntityTcpDscPort.setDescription('The TCP Discovery Port for LDP. The default value is the well-known value of this port.')
jnxMplsLdpEntityUdpDscPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 3, 1, 7), InetPortNumber().clone(646)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpEntityUdpDscPort.setReference('[RFC3036], LDP Specification, Section 2.4.1, Basic Discovery Mechanism, Section 2.4.2, Extended Discovery Mechanism, Section 3.10, Well-known Numbers, and Section 3.10.1. UDP and TCP Ports.')
if mibBuilder.loadTexts: jnxMplsLdpEntityUdpDscPort.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpEntityUdpDscPort.setDescription('The UDP Discovery Port for LDP. The default value is the well-known value for this port.')
jnxMplsLdpEntityMaxPduLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 3, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(256, 65535)).clone(4096)).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpEntityMaxPduLength.setReference('[RFC3036], LDP Specification, Section 3.5.3. Initialization Message.')
if mibBuilder.loadTexts: jnxMplsLdpEntityMaxPduLength.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpEntityMaxPduLength.setDescription("The maximum PDU Length that is sent in the Common Session Parameters of an Initialization Message. According to the LDP Specification [RFC3036] a value of 255 or less specifies the default maximum length of 4096 octets, this is why the value of this object starts at 256. The operator should explicitely choose the default value (i.e. 4096), or some other value. The receiving LSR MUST calculate the maximum PDU length for the session by using the smaller of its and its peer's proposals for Max PDU Length.")
jnxMplsLdpEntityKeepAliveHoldTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(40)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpEntityKeepAliveHoldTimer.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpEntityKeepAliveHoldTimer.setDescription('The 16-bit integer value which is the proposed keep alive hold timer for this LDP Entity.')
jnxMplsLdpEntityHelloHoldTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpEntityHelloHoldTimer.setReference('[RFC3036], LDP Specification, Section 3.5.2., Hello Message.')
if mibBuilder.loadTexts: jnxMplsLdpEntityHelloHoldTimer.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpEntityHelloHoldTimer.setDescription("The 16-bit integer value which is the proposed Hello hold timer for this LDP Entity. The Hello Hold time in seconds. An LSR maintains a record of Hellos received from potential peers. This object represents the Hold Time in the Common Hello Parameters TLV of the Hello Message. A value of 0 is a default value and should be interpretted in conjunction with the jnxMplsLdpEntityTargetPeer object. If the value of this object is 0: if the value of the jnxMplsLdpEntityTargetPeer object is false(2), then this specifies that the Hold Time's actual default value is 15 seconds (i.e. the default Hold time for Link Hellos is 15 seconds). Otherwise if the value of the jnxMplsLdpEntityTargetPeer object is true(1), then this specifies that the Hold Time's actual default value is 45 seconds (i.e. the default Hold time for Targeted Hellos is 45 seconds). A value of 65535 means infinite (i.e. wait forever). All other values represent the amount of time in seconds to wait for a Hello Message. Setting the hold time to a value smaller than 15 is not recommended, although not forbidden according to [RFC3036].")
jnxMplsLdpEntityInitSesThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpEntityInitSesThreshold.setReference('[RFC3036], LDP Specification, Section 2.5.3 Session Initialization.')
if mibBuilder.loadTexts: jnxMplsLdpEntityInitSesThreshold.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpEntityInitSesThreshold.setDescription("When attempting to establish a session with a given Peer, the given LDP Entity should send out the SNMP notification, 'jnxMplsLdpInitSesThresholdExceeded', when the number of Session Initialization messages sent exceeds this threshold. The notification is used to notify an operator when this Entity and its Peer are possibily engaged in an endless sequence of messages as each NAKs the other's Initialization messages with Error Notification messages. Setting this threshold which triggers the notification is one way to notify the operator. A value of 0 (zero) for this object indicates that the threshold is infinity, thus the SNMP notification will never be generated.")
jnxMplsLdpEntityLabelDistMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 3, 1, 12), MplsLabelDistributionMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpEntityLabelDistMethod.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpEntityLabelDistMethod.setDescription('For any given LDP session, the method of label distribution must be specified.')
jnxMplsLdpEntityLabelRetentionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 3, 1, 13), MplsRetentionMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpEntityLabelRetentionMode.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpEntityLabelRetentionMode.setDescription('The LDP Entity can be configured to use either conservative or liberal label retention mode. If the value of this object is conservative(1) then advertized label mappings are retained only if they will be used to forward packets, i.e. if label came from a valid next hop. If the value of this object is liberal(2) then all advertized label mappings are retained whether they are from a valid next hop or not.')
jnxMplsLdpEntityPathVectorLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpEntityPathVectorLimit.setReference('[RFC3036], LDP Specification, Section 2.8 Loop Dection, Section 3.4.5 Path Vector TLV.')
if mibBuilder.loadTexts: jnxMplsLdpEntityPathVectorLimit.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpEntityPathVectorLimit.setDescription("If the value of this object is 0 (zero) then Loop Dection for Path Vectors is disabled. Otherwise, if this object has a value greater than zero, then Loop Dection for Path Vectors is enabled, and the Path Vector Limit is this value. Also, the value of the object, 'jnxMplsLdpLsrLoopDetectionCapable', must be set to either 'pathVector(4)' or 'hopCountAndPathVector(5)', if this object has a value greater than 0 (zero), otherwise it is ignored.")
jnxMplsLdpEntityHopCountLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpEntityHopCountLimit.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpEntityHopCountLimit.setDescription("If the value of this object is 0 (zero), then Loop Detection using Hop Counters is disabled. If the value of this object is greater than 0 (zero) then Loop Detection using Hop Counters is enabled, and this object specifies this Entity's maximum allowable value for the Hop Count. Also, the value of the object jnxMplsLdpLsrLoopDetectionCapable must be set to either 'hopCount(3)' or 'hopCountAndPathVector(5)' if this object has a value greater than 0 (zero), otherwise it is ignored.")
jnxMplsLdpEntityTargetPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 3, 1, 16), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpEntityTargetPeer.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpEntityTargetPeer.setDescription('If this LDP entity uses targeted peer then set this to true.')
jnxMplsLdpEntityTargetPeerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 3, 1, 17), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpEntityTargetPeerAddrType.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpEntityTargetPeerAddrType.setDescription('The type of the internetwork layer address used for the Extended Discovery. This object indicates how the value of jnxMplsLdpEntityTargetPeerAddr is to be interpreted.')
jnxMplsLdpEntityTargetPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 3, 1, 18), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpEntityTargetPeerAddr.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpEntityTargetPeerAddr.setDescription('The value of the internetwork layer address used for the Extended Discovery.')
jnxMplsLdpEntityLabelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 3, 1, 19), MplsLdpLabelType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpEntityLabelType.setReference('[RFC3036], LDP Specification, Section 3.5.3., Initialization Message.')
if mibBuilder.loadTexts: jnxMplsLdpEntityLabelType.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpEntityLabelType.setDescription('Specifies the optional parameters for the LDP Initialization Message. If the value is generic(1) then no optional parameters will be sent in the LDP Initialization message associated with this Entity. If the value is atmParameters(2) then a row must be created in the jnxMplsLdpEntityAtmParms Table, which corresponds to this entry. If the value is frameRelayParameters(3) then a row must be created in the jnxMplsLdpEntityFrameRelayParms Table, which corresponds to this entry.')
jnxMplsLdpEntityDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 3, 1, 20), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpEntityDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpEntityDiscontinuityTime.setDescription("The value of sysUpTime on the most recent occasion at which any one or more of this entity's counters suffered a discontinuity. The relevant counters are the specific instances associated with this entity of any Counter32, or Counter64 object contained in the 'jnxMplsLdpEntityStatsTable'. If no such discontinuities have occurred since the last re-initialization of the local management subsystem, then this object contains a zero value.")
jnxMplsLdpEntityStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 3, 1, 21), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpEntityStorageType.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpEntityStorageType.setDescription('The storage type for this entry.')
jnxMplsLdpEntityRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 3, 1, 22), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpEntityRowStatus.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpEntityRowStatus.setDescription('An object that allows entries in this table to be created and deleted using the RowStatus convention.')
jnxMplsLdpEntityStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 4), )
if mibBuilder.loadTexts: jnxMplsLdpEntityStatsTable.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpEntityStatsTable.setDescription('This table is a read-only table which augments the jnxMplsLdpEntityTable. The purpose of this table is to keep statistical information about the LDP Entities on the LSR.')
jnxMplsLdpEntityStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 4, 1), )
jnxMplsLdpEntityEntry.registerAugmentions(("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpEntityStatsEntry"))
jnxMplsLdpEntityStatsEntry.setIndexNames(*jnxMplsLdpEntityEntry.getIndexNames())
if mibBuilder.loadTexts: jnxMplsLdpEntityStatsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpEntityStatsEntry.setDescription('A row in this table contains statistical information about an LDP Entity. Some counters contained in a row are for fatal errors received during a former LDP Session associated with this entry. For example, an Ldp Pdu received on a TCP connection during an LDP Session contains a fatal error. That error is counted here, because the session is terminated. If the error is NOT fatal (i.e. and the Session remains), then the error is counted in the jnxMplsLdpSesStatsEntry.')
jnxMplsLdpAttemptedSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpAttemptedSessions.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpAttemptedSessions.setDescription('A count of the total attempted sessions for this LDP Entity. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of jnxMplsLdpEntityDiscontinuityTime.')
jnxMplsLdpSesRejectedNoHelloErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpSesRejectedNoHelloErrors.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpSesRejectedNoHelloErrors.setDescription('A count of the Session Rejected/No Hello Error Notification Messages sent or received by this LDP Entity. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of jnxMplsLdpEntityDiscontinuityTime.')
jnxMplsLdpSesRejectedAdErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpSesRejectedAdErrors.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpSesRejectedAdErrors.setDescription('A count of the Session Rejected/Parameters Advertisement Mode Error Notification Messages sent or received by this LDP Entity. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of jnxMplsLdpEntityDiscontinuityTime.')
jnxMplsLdpSesRejectedMaxPduErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpSesRejectedMaxPduErrors.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpSesRejectedMaxPduErrors.setDescription('A count of the Session Rejected/Parameters Max Pdu Length Error Notification Messages sent or received by this LDP Entity. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of jnxMplsLdpEntityDiscontinuityTime.')
jnxMplsLdpSesRejectedLRErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpSesRejectedLRErrors.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpSesRejectedLRErrors.setDescription('A count of the Session Rejected/Parameters Label Range Notification Messages sent or received by this LDP Entity. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of jnxMplsLdpEntityDiscontinuityTime.')
jnxMplsLdpBadLdpIdentifierErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpBadLdpIdentifierErrors.setReference('[RFC3036], LDP Specification, Section 3.5.1.2.')
if mibBuilder.loadTexts: jnxMplsLdpBadLdpIdentifierErrors.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpBadLdpIdentifierErrors.setDescription('This object counts the number of Bad LDP Identifier Fatal Errors detected by the session(s) (past and present) associated with this LDP Entity. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of jnxMplsLdpEntityDiscontinuityTime.')
jnxMplsLdpBadPduLengthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpBadPduLengthErrors.setReference('[RFC3036], LDP Specification, Section 3.5.1.2.')
if mibBuilder.loadTexts: jnxMplsLdpBadPduLengthErrors.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpBadPduLengthErrors.setDescription('This object counts the number of Bad Pdu Length Fatal Errors detected by the session(s) (past and present) associated with this LDP Entity. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of jnxMplsLdpEntityDiscontinuityTime.')
jnxMplsLdpBadMessageLengthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpBadMessageLengthErrors.setReference('[RFC3036], LDP Specification, Section 3.5.1.2.')
if mibBuilder.loadTexts: jnxMplsLdpBadMessageLengthErrors.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpBadMessageLengthErrors.setDescription('This object counts the number of Bad Message Length Fatal Errors detected by the session(s) (past and present) associated with this LDP Entity. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of jnxMplsLdpEntityDiscontinuityTime.')
jnxMplsLdpBadTlvLengthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpBadTlvLengthErrors.setReference('[RFC3036], LDP Specification, Section 3.5.1.2.')
if mibBuilder.loadTexts: jnxMplsLdpBadTlvLengthErrors.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpBadTlvLengthErrors.setDescription('This object counts the number of Bad TLV Length Fatal Errors detected by the session(s) (past and present) associated with this LDP Entity. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of jnxMplsLdpEntityDiscontinuityTime.')
jnxMplsLdpMalformedTlvValueErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpMalformedTlvValueErrors.setReference('[RFC3036], LDP Specification, Section 3.5.1.2.')
if mibBuilder.loadTexts: jnxMplsLdpMalformedTlvValueErrors.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpMalformedTlvValueErrors.setDescription('This object counts the number of Malformed TLV Value Fatal Errors detected by the session(s) (past and present) associated with this LDP Entity. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of jnxMplsLdpEntityDiscontinuityTime.')
jnxMplsLdpKeepAliveTimerExpErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpKeepAliveTimerExpErrors.setReference('[RFC3036], LDP Specification, Section 3.5.1.2.')
if mibBuilder.loadTexts: jnxMplsLdpKeepAliveTimerExpErrors.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpKeepAliveTimerExpErrors.setDescription('This object counts the number of Session Keep Alive Timer Expired Errors detected by the session(s) (past and present) associated with this LDP Entity. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of jnxMplsLdpEntityDiscontinuityTime.')
jnxMplsLdpShutdownNotifReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpShutdownNotifReceived.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpShutdownNotifReceived.setDescription('This object counts the number of Shutdown Notfications received related to session(s) (past and present) associated with this LDP Entity. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of jnxMplsLdpEntityDiscontinuityTime.')
jnxMplsLdpShutdownNotifSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 2, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpShutdownNotifSent.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpShutdownNotifSent.setDescription('This object counts the number of Shutdown Notfications sent related to session(s) (past and present) associated with this LDP Entity. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of jnxMplsLdpEntityDiscontinuityTime.')
jnxMplsLdpSessionObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3))
jnxMplsLdpPeerLastChange = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpPeerLastChange.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpPeerLastChange.setDescription('The value of sysUpTime at the time of the most recent addition or deletion to the jnxMplsLdpPeerTable/jnxMplsLdpSessionTable.')
jnxMplsLdpPeerTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 2), )
if mibBuilder.loadTexts: jnxMplsLdpPeerTable.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpPeerTable.setDescription('Information about LDP peers known by Entities in the jnxMplsLdpEntityTable. The information in this table is based on information from the Entity-Peer interaction during session initialization but is not appropriate for the jnxMplsLdpSessionTable, because objects in this table may or may not be used in session establishment.')
jnxMplsLdpPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 2, 1), ).setIndexNames((0, "JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpEntityLdpId"), (0, "JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpEntityIndex"), (0, "JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpPeerLdpId"))
if mibBuilder.loadTexts: jnxMplsLdpPeerEntry.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpPeerEntry.setDescription('Information about a single Peer which is related to a Session. NOTE: this table is augmented by the jnxMplsLdpSessionTable.')
jnxMplsLdpPeerLdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 2, 1, 1), MplsLdpIdentifier())
if mibBuilder.loadTexts: jnxMplsLdpPeerLdpId.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpPeerLdpId.setDescription('The LDP identifier of this LDP Peer.')
jnxMplsLdpPeerLabelDistMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 2, 1, 2), MplsLabelDistributionMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpPeerLabelDistMethod.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpPeerLabelDistMethod.setDescription('For any given LDP session, the method of label distribution must be specified.')
jnxMplsLdpPeerPathVectorLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpPeerPathVectorLimit.setReference('[RFC3036], LDP Specification, Section 2.8 Loop Dection, Section 3.4.5 Path Vector TLV.')
if mibBuilder.loadTexts: jnxMplsLdpPeerPathVectorLimit.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpPeerPathVectorLimit.setDescription('If the value of this object is 0 (zero) then Loop Dection for Path Vectors for this Peer is disabled. Otherwise, if this object has a value greater than zero, then Loop Dection for Path Vectors for this Peer is enabled and the Path Vector Limit is this value.')
jnxMplsLdpSessionTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 3), )
if mibBuilder.loadTexts: jnxMplsLdpSessionTable.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpSessionTable.setDescription('A table of Sessions between the LDP Entities and LDP Peers. Each row represents a single session.')
jnxMplsLdpSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 3, 1), )
jnxMplsLdpPeerEntry.registerAugmentions(("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpSessionEntry"))
jnxMplsLdpSessionEntry.setIndexNames(*jnxMplsLdpPeerEntry.getIndexNames())
if mibBuilder.loadTexts: jnxMplsLdpSessionEntry.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpSessionEntry.setDescription("An entry in this table represents information on a single session between an LDP Entity and LDP Peer. The information contained in a row is read-only. Please note: the Path Vector Limit for the Session is the value which is configured in the corresponding jnxMplsLdpEntityEntry. The Peer's Path Vector Limit is in noted in the jnxMplsLdpPeerTable. Values which may differ from those configured are noted in the objects of this table, the jnxMplsLdpAtmSesTable and the jnxMplsLdpFrameRelaySesTable. A value will differ if it was negotiated between the Entity and the Peer. Values may or may not be negotiated. For example, if the values are the same then no negotiation takes place. If they are negotiated, then they may differ.")
jnxMplsLdpSesStateLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 3, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpSesStateLastChange.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpSesStateLastChange.setDescription('The value of this object is sysUpTime when the most recent change in the jnxMplsLdpSesState object occurred. When the entry is created, then this object has the value of sysUpTime when the entry was created.')
jnxMplsLdpSesState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("nonexistent", 1), ("initialized", 2), ("openrec", 3), ("opensent", 4), ("operational", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpSesState.setReference('[RFC3036], LDP Specification, Section 2.5.4, Initialization State Machine.')
if mibBuilder.loadTexts: jnxMplsLdpSesState.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpSesState.setDescription('The current state of the session, all of the states 1 to 5 are based on the state machine for session negotiation behavior.')
jnxMplsLdpSesProtocolVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpSesProtocolVersion.setReference('[RFC3036], LDP Specification, Section 3.5.3, Initialization Message.')
if mibBuilder.loadTexts: jnxMplsLdpSesProtocolVersion.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpSesProtocolVersion.setDescription('The version of the LDP Protocol which this session is using. This is the version of the LDP protocol which has been negotiated during session initialization.')
jnxMplsLdpSesKeepAliveHoldTimeRem = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 3, 1, 4), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpSesKeepAliveHoldTimeRem.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpSesKeepAliveHoldTimeRem.setDescription('The keep alive hold time remaining for this session.')
jnxMplsLdpSesMaxPduLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpSesMaxPduLength.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpSesMaxPduLength.setDescription('The value of maximum allowable length for LDP PDUs for this session. This value may have been negotiated during the Session Initialization. This object is related to the jnxMplsLdpEntityMaxPduLength object. The jnxMplsLdpEntityMaxPduLength object specifies the requested LDP PDU length, and this object reflects the negotiated LDP PDU length between the Entity and the Peer.')
jnxMplsLdpSesDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 3, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpSesDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpSesDiscontinuityTime.setDescription("The value of sysUpTime on the most recent occasion at which any one or more of this session's counters suffered a discontinuity. The relevant counters are the specific instances associated with this session of any Counter32 or Counter64 object contained in the jnxMplsLdpSessionStatsTable. The initial value of this object is the value of sysUpTime when the entry was created in this table. Also, a command generator can distinguish when a session between a given Entity and Peer goes away and then is 're-established'. This value would change and thus indicate to the command generator that this is a different session.")
jnxMplsLdpSesStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 4), )
if mibBuilder.loadTexts: jnxMplsLdpSesStatsTable.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpSesStatsTable.setDescription('A table of statistics for Sessions between LDP Entities and LDP Peers.')
jnxMplsLdpSesStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 4, 1), )
jnxMplsLdpPeerEntry.registerAugmentions(("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpSesStatsEntry"))
jnxMplsLdpSesStatsEntry.setIndexNames(*jnxMplsLdpPeerEntry.getIndexNames())
if mibBuilder.loadTexts: jnxMplsLdpSesStatsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpSesStatsEntry.setDescription('An entry in this table represents statistical information on a single session between an LDP Entity and LDP Peer.')
jnxMplsLdpSesStatsUnkMesTypeErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpSesStatsUnkMesTypeErrors.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpSesStatsUnkMesTypeErrors.setDescription('This object counts the number of Unknown Message Type Errors detected during this session. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of jnxMplsLdpSesDiscontinuityTime.')
jnxMplsLdpSesStatsUnkTlvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpSesStatsUnkTlvErrors.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpSesStatsUnkTlvErrors.setDescription('This object counts the number of Unknown TLV Errors detected during this session. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of jnxMplsLdpSessionDiscontinuityTime.')
jnxMplsLdpHelloAdjacencyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 5))
jnxMplsLdpHelloAdjacencyTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 5, 1), )
if mibBuilder.loadTexts: jnxMplsLdpHelloAdjacencyTable.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpHelloAdjacencyTable.setDescription('A table of Hello Adjacencies for Sessions.')
jnxMplsLdpHelloAdjacencyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 5, 1, 1), ).setIndexNames((0, "JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpEntityLdpId"), (0, "JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpEntityIndex"), (0, "JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpPeerLdpId"), (0, "JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpHelloAdjIndex"))
if mibBuilder.loadTexts: jnxMplsLdpHelloAdjacencyEntry.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpHelloAdjacencyEntry.setDescription('Each row represents a single LDP Hello Adjacency. An LDP Session can have one or more Hello adjacencies.')
jnxMplsLdpHelloAdjIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 5, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: jnxMplsLdpHelloAdjIndex.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpHelloAdjIndex.setDescription('An identifier for this specific adjacency.')
jnxMplsLdpHelloAdjHoldTimeRem = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 5, 1, 1, 2), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpHelloAdjHoldTimeRem.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpHelloAdjHoldTimeRem.setDescription("The time remaining for this Hello Adjacency. This interval will change when the 'next' Hello message which corresponds to this Hello Adjacency is received.")
jnxMplsLdpHelloAdjType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("link", 1), ("targeted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpHelloAdjType.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpHelloAdjType.setDescription("This adjacency is the result of a 'link' hello if the value of this object is link(1). Otherwise, it is a result of a 'targeted' hello, targeted(2).")
jnxMplsLdpLspTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 6), )
if mibBuilder.loadTexts: jnxMplsLdpLspTable.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpLspTable.setDescription("A table of LDP LSP's which map to a Segment Table in the the LSR MIB's (either the mplsInSegmentTable or mplsOutSegmentTable) AND to the LSR MIB's mplsXCTable.")
jnxMplsLdpLspEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 6, 1), ).setIndexNames((0, "JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpEntityLdpId"), (0, "JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpEntityIndex"), (0, "JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpPeerLdpId"), (0, "JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpLspIfIndex"), (0, "JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpLspLabel"))
if mibBuilder.loadTexts: jnxMplsLdpLspEntry.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpLspEntry.setDescription("An entry in this table represents information on a single LDP LSP which is represented by a session's index triple (jnxMplsLdpEntityLdpId, jnxMplsLdpEntityIndex, jnxMplsLdpPeerLdpId) AND the index tuple (jnxMplsLdpLspIfIndex, jnxMplsLdpLspLabel). The information contained in a row is read-only.")
jnxMplsLdpLspIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: jnxMplsLdpLspIfIndex.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpLspIfIndex.setDescription('The ifIndex value associated with this LSP.')
jnxMplsLdpLspLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 6, 1, 2), MplsLabel())
if mibBuilder.loadTexts: jnxMplsLdpLspLabel.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpLspLabel.setDescription('The LDP label for this LSP.')
jnxMplsLdpLspLabelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 6, 1, 3), MplsLdpLabelType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpLspLabelType.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpLspLabelType.setDescription('The Layer 2 Label Type.')
jnxMplsLdpLspType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 6, 1, 4), MplsLspType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpLspType.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpLspType.setDescription('The type of LSP connection. The possible values are: unknown(1) -- if the LSP is not known to be one of the following. terminatingLsp(2) -- if the LSP terminates on the LSR, then this is an ingressing LSP which ends on the LSR, originatingLsp(3) -- if the LSP originates from the LSR, then this is an egressing LSP which is the head-end of the LSP, crossConnectingLsp(4) -- if the LSP ingresses and egresses on the LSR, then it is cross-connecting on that LSR.')
jnxMplsLdpLspLsrInSegmentPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 6, 1, 5), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpLspLsrInSegmentPointer.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpLspLsrInSegmentPointer.setDescription("If this LSP terminates or is cross-connecting on this LSR, then this RowPointer should point to an instance of an object in the mplsLsrInSegmentTable. In other words if the value of jnxMplsLdpLspType is terminatingLsp(2) or crossConnectingLsp(4), then this should point to an instance of an object in the LSR-MIB's mplsInSegmentTable. Otherwise, a value of zeroDotzero indicates that this LSP has no corresponding mplsInSegmentEntry.")
jnxMplsLdpLspLsrOutSegmentPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 6, 1, 6), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpLspLsrOutSegmentPointer.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpLspLsrOutSegmentPointer.setDescription("If this LSP originates or is cross-connecting on this LSR, then this RowPointer should point to an instance of an object in the LSR-MIB's mplsOutSegmentTable. In other words if the value of jnxMplsLdpLspType is originatingLsp(3) or crossConnectingLsp(4), then this should point to an instance of an object in the LSR-MIB's mplsOutSegmentTable. Otherwise, a value of zeroDotzero indicates that this LSP has no corresponding mplsOutSegmentEntry.")
jnxMplsLdpLspLsrXCPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 6, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpLspLsrXCPointer.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpLspLsrXCPointer.setDescription("If this LSP is cross-connecting on this LSR, then this RowPointer should point to an instance of an object in the LSR-MIB's mplsXCTable. In other words if the value of jnxMplsLdpLspType is crossConnectingLsp(4), then this should point to an instance of an object in the LSR-MIB's mplsXCTable. Otherwise, a value of zeroDotzero indicates that this LSP has no corresponding mplsXCEntry.")
jnxMplsFecObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 7))
jnxMplsFecIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 7, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsFecIndexNext.setStatus('current')
if mibBuilder.loadTexts: jnxMplsFecIndexNext.setDescription('This object contains an appropriate value to be used for jnxMplsFecIndex when creating entries in the jnxMplsFecTable. The value 0 indicates that no unassigned entries are available. To obtain the jnxMplsFecIndex value for a new entry, the manager issues a management protocol retrieval operation to obtain the current value of this object. After each retrieval, the agent should modify the value to the next unassigned index.')
jnxMplsFecTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 7, 2), )
if mibBuilder.loadTexts: jnxMplsFecTable.setStatus('current')
if mibBuilder.loadTexts: jnxMplsFecTable.setDescription('This table represents the FEC (Forwarding Equivalence Class) Information associated with an LSP.')
jnxMplsFecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 7, 2, 1), ).setIndexNames((0, "JUNIPER-MPLS-LDP-MIB", "jnxMplsFecIndex"))
if mibBuilder.loadTexts: jnxMplsFecEntry.setStatus('current')
if mibBuilder.loadTexts: jnxMplsFecEntry.setDescription('Each row represents a single FEC Element.')
jnxMplsFecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 7, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: jnxMplsFecIndex.setStatus('current')
if mibBuilder.loadTexts: jnxMplsFecIndex.setDescription('The index which uniquely identifies this entry.')
jnxMplsFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("prefix", 1), ("hostAddress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsFecType.setStatus('current')
if mibBuilder.loadTexts: jnxMplsFecType.setDescription("The type of the FEC. If the value of this object is 'prefix(1)' then the FEC type described by this row is for address prefixes. If the value of this object is 'hostAddress(2)' then the FEC type described by this row is a host address.")
jnxMplsFecAddrLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsFecAddrLength.setStatus('current')
if mibBuilder.loadTexts: jnxMplsFecAddrLength.setDescription("If the value of 'jnxMplsFecType' is 'prefix(1)' then the value of this object is the length in bits of the address prefix represented by 'jnxMplsFecAddr', or if the length is zero then this is a special value which indicates that the prefix matches all addresses. In this case the prefix is also zero (i.e. 'jnxMplsFecAddr' will have the value of zero.)")
jnxMplsFecAddrFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 7, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsFecAddrFamily.setStatus('current')
if mibBuilder.loadTexts: jnxMplsFecAddrFamily.setDescription('The value of this object is from the Address Family Numbers.')
jnxMplsFecAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 7, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsFecAddr.setStatus('current')
if mibBuilder.loadTexts: jnxMplsFecAddr.setDescription("If the value of 'jnxMplsFecType' is 'prefix(1)' then the value of this object is the address prefix. If the value of the 'jnxMplsFecAddrLength' is object is zero, then this object should also be zero. If the value of the 'jnxMplsFecType' is 'hostAddress(2)' then this is the host address.")
jnxMplsFecStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 7, 2, 1, 6), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsFecStorageType.setStatus('current')
if mibBuilder.loadTexts: jnxMplsFecStorageType.setDescription('The storage type for this entry.')
jnxMplsFecRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 7, 2, 1, 7), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsFecRowStatus.setStatus('current')
if mibBuilder.loadTexts: jnxMplsFecRowStatus.setDescription('An object that allows entries in this table to be created and deleted using the RowStatus convention.')
jnxMplsLdpLspFecTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 8), )
if mibBuilder.loadTexts: jnxMplsLdpLspFecTable.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpLspFecTable.setDescription("A table which shows the relationship between LDP LSP's and FECs. Each row represents a single LSP to FEC association. This table is read-only.")
jnxMplsLdpLspFecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 8, 1), ).setIndexNames((0, "JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpEntityLdpId"), (0, "JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpEntityIndex"), (0, "JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpPeerLdpId"), (0, "JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpLspIfIndex"), (0, "JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpLspLabel"), (0, "JUNIPER-MPLS-LDP-MIB", "jnxMplsFecIndex"))
if mibBuilder.loadTexts: jnxMplsLdpLspFecEntry.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpLspFecEntry.setDescription('An entry represents a LDP LSP to FEC association.')
jnxMplsLdpLspFecOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("inUse", 2), ("notInUse", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpLspFecOperStatus.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpLspFecOperStatus.setDescription('An indication of the operational status of the FEC associated with LDP LSP. unknown(1) - this is a temporary state which may indicate the LSP-FEC association is in a state of transition. inUse(2) - the FEC associated with the LSP is currently being applied. notInUse(3) - the FEC associated with the LSP is not being applied. Eventually, this entry may be aged out.')
jnxMplsLdpLspFecLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 8, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpLspFecLastChange.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpLspFecLastChange.setDescription('This value of sysUpTime when the jnxMplsLdpLspFecOperStatus last changed state.')
jnxMplsLdpLspFecRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 8, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpLspFecRowStatus.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpLspFecRowStatus.setDescription('An object that allows entries in this table to be created and deleted using the RowStatus convention.')
jnxMplsLdpSesPeerAddrTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 9), )
if mibBuilder.loadTexts: jnxMplsLdpSesPeerAddrTable.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpSesPeerAddrTable.setDescription("This table 'extends' the jnxMplsLdpSessionTable. This table is used to store Label Address Information from Label Address Messages received by this LSR from Peers. This table is read-only and should be updated when Label Withdraw Address Messages are received, i.e. Rows should be deleted as apropriate. NOTE: since more than one address may be contained in a Label Address Message, this table 'extends', rather than 'AUGMENTS' the jnxMplsLdpSessionTable's information.")
jnxMplsLdpSesPeerAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 9, 1), ).setIndexNames((0, "JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpEntityLdpId"), (0, "JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpEntityIndex"), (0, "JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpPeerLdpId"), (0, "JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpSesPeerAddrIndex"))
if mibBuilder.loadTexts: jnxMplsLdpSesPeerAddrEntry.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpSesPeerAddrEntry.setDescription("An entry in this table represents information on session's for a single next hop address which was advertised in an Address Message from the LDP peer. The information contained in a row is read-only.")
jnxMplsLdpSesPeerAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 9, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: jnxMplsLdpSesPeerAddrIndex.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpSesPeerAddrIndex.setDescription('An index which uniquely identifies this entry within a given session.')
jnxMplsLdpSesPeerNextHopAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 9, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpSesPeerNextHopAddrType.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpSesPeerNextHopAddrType.setDescription('The internetwork layer address type of this Next Hop Address as specified in the Label Address Message associated with this Session. The value of this object indicates how to interpret the value of jnxMplsLdpSessionPeerNextHopAddress.')
jnxMplsLdpSesPeerNextHopAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 36, 1, 3, 9, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMplsLdpSesPeerNextHopAddr.setReference('[RFC3036], LDP Specification defines only IPv4 for LDP Protocol Version 1, see section 3.4.3.')
if mibBuilder.loadTexts: jnxMplsLdpSesPeerNextHopAddr.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpSesPeerNextHopAddr.setDescription('The value of the next hop address.')
jnxMplsLdpNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 36, 2, 0))
jnxMplsLdpInitSesThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 36, 2, 0, 1)).setObjects(("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpEntityInitSesThreshold"))
if mibBuilder.loadTexts: jnxMplsLdpInitSesThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpInitSesThresholdExceeded.setDescription("This notification is generated when the value of the 'jnxMplsLdpEntityInitSesThreshold' object is not zero, and the number of Session Initialization messages exceeds the value of the 'jnxMplsLdpEntityInitSesThreshold' object.")
jnxMplsLdpPathVectorLimitMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 36, 2, 0, 2)).setObjects(("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpEntityPathVectorLimit"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpPeerPathVectorLimit"))
if mibBuilder.loadTexts: jnxMplsLdpPathVectorLimitMismatch.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpPathVectorLimitMismatch.setDescription("If this notification is enabled to generated, then this notification is sent when the 'jnxMplsLdpEntityPathVectorLimit' does NOT match the value of the 'jnxMplsLdpPeerPathVectorLimit' for a specific Entity.")
if mibBuilder.loadTexts: jnxMplsLdpPathVectorLimitMismatch.setReference('[RFC3036], LDP Specification, Section 3.5.3.')
jnxMplsLdpSessionUp = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 36, 2, 0, 3)).setObjects(("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpSesState"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpSesDiscontinuityTime"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpSesStatsUnkMesTypeErrors"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpSesStatsUnkTlvErrors"))
if mibBuilder.loadTexts: jnxMplsLdpSessionUp.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpSessionUp.setDescription("If this notification is enabled to generated, then this notification is sent when the value of 'jnxMplsLdpSesState' enters the 'operational(5)' state.")
jnxMplsLdpSessionDown = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 36, 2, 0, 4)).setObjects(("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpSesState"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpSesDiscontinuityTime"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpSesStatsUnkMesTypeErrors"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpSesStatsUnkTlvErrors"))
if mibBuilder.loadTexts: jnxMplsLdpSessionDown.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpSessionDown.setDescription("If this notification is enabled to generated, then this notification is sent when the the value of 'jnxMplsLdpSesState' leaves the 'operational(5)' state.")
jnxMplsLdpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 36, 3, 1))
jnxMplsLdpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 36, 3, 2))
jnxMplsLdpModuleFullCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2636, 3, 36, 3, 2, 1)).setObjects(("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpGeneralGroup"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpLspGroup"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpNotificationsGroup"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpLsrGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxMplsLdpModuleFullCompliance = jnxMplsLdpModuleFullCompliance.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpModuleFullCompliance.setDescription('The Module is implemented with support for read-create and read-write. In other words, both monitoring and configuration are available when using this MODULE-COMPLIANCE.')
jnxMplsLdpModuleReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2636, 3, 36, 3, 2, 2)).setObjects(("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpGeneralGroup"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpLspGroup"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpNotificationsGroup"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpLsrGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxMplsLdpModuleReadOnlyCompliance = jnxMplsLdpModuleReadOnlyCompliance.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpModuleReadOnlyCompliance.setDescription('The Module is implemented with support for read-only. In other words, only monitoring is available by implementing this MODULE-COMPLIANCE.')
jnxMplsLdpGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 36, 3, 1, 1)).setObjects(("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpLsrId"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpLsrLoopDetectionCapable"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpEntityLastChange"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpEntityIndexNext"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpEntityProtocolVersion"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpEntityAdminStatus"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpEntityOperStatus"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpEntityTcpDscPort"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpEntityUdpDscPort"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpEntityMaxPduLength"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpEntityKeepAliveHoldTimer"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpEntityHelloHoldTimer"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpEntityInitSesThreshold"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpEntityLabelDistMethod"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpEntityLabelRetentionMode"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpEntityPathVectorLimit"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpEntityHopCountLimit"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpEntityTargetPeer"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpEntityTargetPeerAddrType"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpEntityTargetPeerAddr"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpEntityLabelType"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpEntityDiscontinuityTime"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpEntityStorageType"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpEntityRowStatus"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpAttemptedSessions"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpSesRejectedNoHelloErrors"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpSesRejectedAdErrors"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpSesRejectedMaxPduErrors"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpSesRejectedLRErrors"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpBadLdpIdentifierErrors"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpBadPduLengthErrors"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpBadMessageLengthErrors"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpBadTlvLengthErrors"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpMalformedTlvValueErrors"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpKeepAliveTimerExpErrors"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpShutdownNotifReceived"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpShutdownNotifSent"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpPeerLastChange"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpPeerLabelDistMethod"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpPeerPathVectorLimit"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpHelloAdjHoldTimeRem"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpHelloAdjType"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpSesStateLastChange"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpSesState"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpSesProtocolVersion"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpSesKeepAliveHoldTimeRem"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpSesMaxPduLength"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpSesDiscontinuityTime"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpSesStatsUnkMesTypeErrors"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpSesStatsUnkTlvErrors"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpSesPeerNextHopAddrType"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpSesPeerNextHopAddr"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsFecIndexNext"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsFecType"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsFecAddrFamily"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsFecAddrLength"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsFecAddr"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsFecStorageType"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsFecRowStatus"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpLspFecOperStatus"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpLspFecLastChange"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpLspFecRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxMplsLdpGeneralGroup = jnxMplsLdpGeneralGroup.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpGeneralGroup.setDescription('Objects that apply to all MPLS LDP implementations.')
jnxMplsLdpLspGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 36, 3, 1, 2)).setObjects(("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpLspLabelType"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpLspType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxMplsLdpLspGroup = jnxMplsLdpLspGroup.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpLspGroup.setDescription('These objects are specific to LDP LSPs.')
jnxMplsLdpLsrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 36, 3, 1, 3)).setObjects(("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpLspLsrInSegmentPointer"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpLspLsrOutSegmentPointer"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpLspLsrXCPointer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxMplsLdpLsrGroup = jnxMplsLdpLsrGroup.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpLsrGroup.setDescription('These objects are optional and only need to be supported for LDP implementations which support the following tables in the LSR MIB: mplsInSegmentTable, mplsOutSegmentTable and mplsXCTable.')
jnxMplsLdpNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2636, 3, 36, 3, 1, 4)).setObjects(("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpInitSesThresholdExceeded"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpPathVectorLimitMismatch"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpSessionUp"), ("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpSessionDown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxMplsLdpNotificationsGroup = jnxMplsLdpNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: jnxMplsLdpNotificationsGroup.setDescription('The notification(s) which an MPLS LDP implemention is required to implement.')
mibBuilder.exportSymbols("JUNIPER-MPLS-LDP-MIB", jnxMplsLdpLspFecOperStatus=jnxMplsLdpLspFecOperStatus, jnxMplsLdpHelloAdjIndex=jnxMplsLdpHelloAdjIndex, jnxMplsLdpModuleFullCompliance=jnxMplsLdpModuleFullCompliance, jnxMplsLdpPeerEntry=jnxMplsLdpPeerEntry, jnxMplsLdpBadPduLengthErrors=jnxMplsLdpBadPduLengthErrors, jnxMplsLdpHelloAdjType=jnxMplsLdpHelloAdjType, jnxMplsLdpPeerLastChange=jnxMplsLdpPeerLastChange, jnxMplsLdpBadLdpIdentifierErrors=jnxMplsLdpBadLdpIdentifierErrors, jnxMplsLdpObjects=jnxMplsLdpObjects, jnxMplsLdpEntityPathVectorLimit=jnxMplsLdpEntityPathVectorLimit, jnxMplsLdpSesState=jnxMplsLdpSesState, jnxMplsLdpEntityStorageType=jnxMplsLdpEntityStorageType, jnxMplsLdpEntityHopCountLimit=jnxMplsLdpEntityHopCountLimit, jnxMplsLdpSesRejectedLRErrors=jnxMplsLdpSesRejectedLRErrors, jnxMplsLdpPeerTable=jnxMplsLdpPeerTable, jnxMplsLdpEntityInitSesThreshold=jnxMplsLdpEntityInitSesThreshold, jnxMplsLdpBadTlvLengthErrors=jnxMplsLdpBadTlvLengthErrors, jnxMplsLdpSessionObjects=jnxMplsLdpSessionObjects, jnxMplsLdpSesRejectedMaxPduErrors=jnxMplsLdpSesRejectedMaxPduErrors, jnxMplsLdpSessionDown=jnxMplsLdpSessionDown, jnxMplsLdpSesStatsTable=jnxMplsLdpSesStatsTable, jnxMplsLdpEntityMaxPduLength=jnxMplsLdpEntityMaxPduLength, jnxMplsLdpEntityRowStatus=jnxMplsLdpEntityRowStatus, jnxMplsLdpLspLsrXCPointer=jnxMplsLdpLspLsrXCPointer, jnxMplsLdpEntityKeepAliveHoldTimer=jnxMplsLdpEntityKeepAliveHoldTimer, jnxMplsLdpConformance=jnxMplsLdpConformance, jnxMplsLdpEntityTargetPeerAddr=jnxMplsLdpEntityTargetPeerAddr, jnxMplsLdpGeneralGroup=jnxMplsLdpGeneralGroup, jnxMplsLdpNotificationPrefix=jnxMplsLdpNotificationPrefix, jnxMplsLdpEntityLastChange=jnxMplsLdpEntityLastChange, jnxMplsLdpLspFecLastChange=jnxMplsLdpLspFecLastChange, jnxMplsLdpSesStateLastChange=jnxMplsLdpSesStateLastChange, jnxMplsLdpEntityEntry=jnxMplsLdpEntityEntry, jnxMplsFecObjects=jnxMplsFecObjects, jnxMplsLdpSesRejectedNoHelloErrors=jnxMplsLdpSesRejectedNoHelloErrors, jnxMplsLdpLsrGroup=jnxMplsLdpLsrGroup, jnxMplsLdpPathVectorLimitMismatch=jnxMplsLdpPathVectorLimitMismatch, jnxMplsFecType=jnxMplsFecType, jnxMplsLdpBadMessageLengthErrors=jnxMplsLdpBadMessageLengthErrors, jnxMplsLdpSesPeerAddrEntry=jnxMplsLdpSesPeerAddrEntry, jnxMplsLdpEntityLabelRetentionMode=jnxMplsLdpEntityLabelRetentionMode, jnxMplsLdpEntityTcpDscPort=jnxMplsLdpEntityTcpDscPort, jnxMplsLdpSesStatsEntry=jnxMplsLdpSesStatsEntry, jnxMplsLdpEntityTargetPeerAddrType=jnxMplsLdpEntityTargetPeerAddrType, jnxMplsLdpEntityLdpId=jnxMplsLdpEntityLdpId, jnxMplsLdpEntityLabelType=jnxMplsLdpEntityLabelType, jnxMplsLdpShutdownNotifSent=jnxMplsLdpShutdownNotifSent, jnxMplsLdpSesMaxPduLength=jnxMplsLdpSesMaxPduLength, jnxMplsFecIndexNext=jnxMplsFecIndexNext, jnxMplsLdpEntityTable=jnxMplsLdpEntityTable, jnxMplsLdpEntityAdminStatus=jnxMplsLdpEntityAdminStatus, jnxMplsLdpEntityLabelDistMethod=jnxMplsLdpEntityLabelDistMethod, jnxMplsLdpLspIfIndex=jnxMplsLdpLspIfIndex, jnxMplsLdpLsrObjects=jnxMplsLdpLsrObjects, jnxMplsLdpEntityOperStatus=jnxMplsLdpEntityOperStatus, jnxMplsLdpSesRejectedAdErrors=jnxMplsLdpSesRejectedAdErrors, jnxMplsLdpLspFecEntry=jnxMplsLdpLspFecEntry, jnxMplsLdpPeerPathVectorLimit=jnxMplsLdpPeerPathVectorLimit, jnxMplsLdpSesPeerNextHopAddr=jnxMplsLdpSesPeerNextHopAddr, jnxMplsLdpHelloAdjacencyTable=jnxMplsLdpHelloAdjacencyTable, jnxMplsLdpLspGroup=jnxMplsLdpLspGroup, jnxMplsLdpLspTable=jnxMplsLdpLspTable, jnxMplsLdpEntityIndexNext=jnxMplsLdpEntityIndexNext, jnxMplsLdpLspEntry=jnxMplsLdpLspEntry, jnxMplsLdpLspLsrInSegmentPointer=jnxMplsLdpLspLsrInSegmentPointer, jnxMplsLdpEntityTargetPeer=jnxMplsLdpEntityTargetPeer, jnxMplsFecIndex=jnxMplsFecIndex, jnxMplsLdpLspType=jnxMplsLdpLspType, jnxMplsLdpSesStatsUnkTlvErrors=jnxMplsLdpSesStatsUnkTlvErrors, jnxMplsLdpSesPeerAddrTable=jnxMplsLdpSesPeerAddrTable, jnxMplsLdpEntityIndex=jnxMplsLdpEntityIndex, jnxMplsLdpLspLsrOutSegmentPointer=jnxMplsLdpLspLsrOutSegmentPointer, jnxMplsFecAddrLength=jnxMplsFecAddrLength, jnxMplsLdpSesStatsUnkMesTypeErrors=jnxMplsLdpSesStatsUnkMesTypeErrors, jnxMplsLdpEntityUdpDscPort=jnxMplsLdpEntityUdpDscPort, jnxMplsFecStorageType=jnxMplsFecStorageType, jnxMplsLdpHelloAdjHoldTimeRem=jnxMplsLdpHelloAdjHoldTimeRem, jnxMplsLdpLspFecRowStatus=jnxMplsLdpLspFecRowStatus, jnxMplsLdpLsrId=jnxMplsLdpLsrId, jnxMplsLdpHelloAdjacencyObjects=jnxMplsLdpHelloAdjacencyObjects, jnxMplsLdpLspLabelType=jnxMplsLdpLspLabelType, jnxMplsLdpSessionEntry=jnxMplsLdpSessionEntry, jnxMplsLdpSessionTable=jnxMplsLdpSessionTable, jnxMplsLdpPeerLdpId=jnxMplsLdpPeerLdpId, jnxMplsFecEntry=jnxMplsFecEntry, jnxMplsFecAddr=jnxMplsFecAddr, jnxMplsLdpKeepAliveTimerExpErrors=jnxMplsLdpKeepAliveTimerExpErrors, jnxMplsLdpEntityStatsTable=jnxMplsLdpEntityStatsTable, jnxMplsFecAddrFamily=jnxMplsFecAddrFamily, jnxMplsLdpSesPeerAddrIndex=jnxMplsLdpSesPeerAddrIndex, jnxMplsLdpPeerLabelDistMethod=jnxMplsLdpPeerLabelDistMethod, jnxMplsLdpInitSesThresholdExceeded=jnxMplsLdpInitSesThresholdExceeded, jnxMplsLdpSessionUp=jnxMplsLdpSessionUp, jnxMplsLdpEntityProtocolVersion=jnxMplsLdpEntityProtocolVersion, jnxMplsLdpCompliances=jnxMplsLdpCompliances, jnxMplsLdpShutdownNotifReceived=jnxMplsLdpShutdownNotifReceived, jnxMplsFecRowStatus=jnxMplsFecRowStatus, jnxMplsLdpNotificationsGroup=jnxMplsLdpNotificationsGroup, jnxMplsFecTable=jnxMplsFecTable, jnxMplsLdpModuleReadOnlyCompliance=jnxMplsLdpModuleReadOnlyCompliance, jnxMplsLdpLspLabel=jnxMplsLdpLspLabel, jnxMplsLdpHelloAdjacencyEntry=jnxMplsLdpHelloAdjacencyEntry, jnxMplsLdpLsrLoopDetectionCapable=jnxMplsLdpLsrLoopDetectionCapable, jnxMplsLdpAttemptedSessions=jnxMplsLdpAttemptedSessions, jnxMplsLdpMIB=jnxMplsLdpMIB, jnxMplsLdpLspFecTable=jnxMplsLdpLspFecTable, jnxMplsLdpSesPeerNextHopAddrType=jnxMplsLdpSesPeerNextHopAddrType, jnxMplsLdpEntityHelloHoldTimer=jnxMplsLdpEntityHelloHoldTimer, jnxMplsLdpEntityObjects=jnxMplsLdpEntityObjects, jnxMplsLdpSesDiscontinuityTime=jnxMplsLdpSesDiscontinuityTime, jnxMplsLdpMalformedTlvValueErrors=jnxMplsLdpMalformedTlvValueErrors, jnxMplsLdpEntityStatsEntry=jnxMplsLdpEntityStatsEntry, jnxMplsLdpSesProtocolVersion=jnxMplsLdpSesProtocolVersion, jnxMplsLdpSesKeepAliveHoldTimeRem=jnxMplsLdpSesKeepAliveHoldTimeRem, jnxMplsLdpGroups=jnxMplsLdpGroups, PYSNMP_MODULE_ID=jnxMplsLdpMIB, jnxMplsLdpNotifications=jnxMplsLdpNotifications, jnxMplsLdpEntityDiscontinuityTime=jnxMplsLdpEntityDiscontinuityTime)
