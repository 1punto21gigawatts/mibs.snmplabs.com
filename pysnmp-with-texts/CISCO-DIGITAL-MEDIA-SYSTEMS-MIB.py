#
# PySNMP MIB module CISCO-DIGITAL-MEDIA-SYSTEMS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-DIGITAL-MEDIA-SYSTEMS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:54:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Bits, Unsigned32, TimeTicks, iso, ObjectIdentity, NotificationType, IpAddress, Counter32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ModuleIdentity, Gauge32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Unsigned32", "TimeTicks", "iso", "ObjectIdentity", "NotificationType", "IpAddress", "Counter32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ModuleIdentity", "Gauge32", "MibIdentifier")
RowStatus, DateAndTime, TruthValue, TimeStamp, DisplayString, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DateAndTime", "TruthValue", "TimeStamp", "DisplayString", "TextualConvention", "MacAddress")
ciscoDigitalMediaSystemsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 655))
ciscoDigitalMediaSystemsMIB.setRevisions(('2011-09-07 00:00', '2011-07-29 00:00', '2009-10-12 00:00', '2008-05-15 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoDigitalMediaSystemsMIB.setRevisionsDescriptions(('Changed textual description for replacement field cdmsLicensedFeatureLimitRev1 to be consistent with field values. This was missed in last submitted version and caught during code review.', 'Resubmitting MIB with changes', 'Added support for High Availability (HA).', 'Initial version of this module.',))
if mibBuilder.loadTexts: ciscoDigitalMediaSystemsMIB.setLastUpdated('201109070000Z')
if mibBuilder.loadTexts: ciscoDigitalMediaSystemsMIB.setOrganization('Cisco Systems')
if mibBuilder.loadTexts: ciscoDigitalMediaSystemsMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134-1700 USA Tel: +1 800 553-NETS E-mail: cs-dms@cisco.com')
if mibBuilder.loadTexts: ciscoDigitalMediaSystemsMIB.setDescription("Acronyms and Definitions The following acronyms and terms are used in this document: DMS: Digital Media Systems DAM: Digital Asset Management System DMM: Digital Media Manager Application VP : Video Portal Application DSM: Digital Signage Manager Application ETV: Enterprise TV Manager Application DMP: Cisco Digital Media Player LAN: Local Area Network Group: A collection of DMS users grouped and managed together as a single entity for administrative convenience. Overview of the MIB This is a MIB Module for managing and monitoring the physical and logical structures in Cisco Digital Media Management System. The MIB reflects the structure as follows: * show DMS as an coherent, abstract media management system * indicate the physical inventory of DMS * indicate the media management features active (licensed) in the system. * show the streaming and storage components and their activity * elements of DMS security * external servers used by the system * events and alarms Hence, the MIB contains eight major groups of objects organized as follows: a) DMS System Group: This section models distributed DMS as a single abstract system. b) DMS Features Group: This section lists the DMS functions that this installation is licensed to perform and those that it is not. c) DMS Inventory Group: This section lists the physical elements that this installation of DMS comprises. d) Servers Group: This section models the external servers used by this installation of DMS. e) Digital Asset Management (DAM) Services Group: This section models the state and activity of various content management services that this installation of DMS is equipped with. The loose term 'content management' has been intentionally used to as to be able to accommodate more content management services in this model as they evolve. f) Security Group: This section defines the security configuration and activity of this installation of DMS. g) Fault Tolerance Group: This section models the redundancy (failover and load balancing) configuration of this installation of DMS and the associated activity. h) User Management Group: This section models the configured DMS users, groups and the associated activity. i) Events and Faults Group: This section models the events, alarms and notifications reported by this installation of DMS. j) Capacity Group: This section is planned for the future and would define the limits and capacities of functions of DMS. These include limits such as the type of media encodings that are supported, the maximum number of media players that may be managed etc. k) Resource Usage Group: This section is planned for the future and would define the current resource usage by DMS. This would include the amount of storage used by DMS, the number of encoders currently in use etc. l) Threshold group (allows definition of high water marks) This section is planned for the future and would allow the management entity to define thresholds to set high water marks on critical metrics. m) Notifications This section defines notifications to signal significant events pertaining to this installation of DMS.")
class CDmsUserAuthenMethod(TextualConvention, Integer32):
    description = "The mechanism used to authenticate the user. radius: User authentication is performed using RADIUS protocol. tacacsPlus: Authentication is performed using TACACS+ protocol. kerberos: Authentication is performed using Kerberos protocol. local: Authentication is performed using local username/password database. ldap: Authentication is performed using the Lightweight Directory Access Protocol. ntlm: Authentication is performed using the NT LAN Manager Protocol. sdi: Authentication is performed using the RSA SecurId Authentication Protocol. The value 'other' has been listed to allow for the MIB to support proprietary authentication methods not listed here. When the authentication method is 'none', authentication is disabled for all appliances of DMS except for the administrative module (DMM), which is still secured using local authentication."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("none", 1), ("other", 2), ("radius", 3), ("tacacsPlus", 4), ("kerberos", 5), ("local", 6), ("ldap", 7), ("ntlm", 8), ("sdi", 9))

class CDmsServerType(TextualConvention, Integer32):
    description = 'The type of the external server used by DMS.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("other", 1), ("dnsServer", 2), ("ldapServer", 3), ("snmpServer", 4), ("smtpServer", 5), ("syslogServer", 6), ("aaaServer", 7), ("ntpServer", 8))

class CDmsElementType(TextualConvention, Integer32):
    description = "The type of the DMS inventory element. DMS supports the following inventory element types among other types: 'other': other type not represented by any other enum value 'encoder': device capable of encoding video media to be streamed to DMS endpoints 'videoPortal': endpoint that delivers video to desktops 'mediaPlayer': endpoint that delivers video to large LCDs 'transCoder': device capable of transcoding video from one format to another 'storageServer': device capable of storing media 'streamingServer': device capable of serving media as a stream 'dmm': DMS administrative node"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("other", 1), ("encoder", 2), ("videoPortal", 3), ("mediaPlayer", 4), ("transCoder", 5), ("storageServer", 6), ("streamingServer", 7), ("dmm", 8))

class CDmsFunctionalStatus(TextualConvention, Integer32):
    description = 'The status of a DMS functional component. other: the component is in an unknown status. initialize: the component is in the process of starting up. active: the component is active and servicing requests. shutdown: the component is shut down or is shutting down. standby: the component is not servicing requests but is ready to do when needed. Objects of this type may be used to reboot a DMS element by setting value of the object to initialize(1). Management entity may not write values initialize(1) or active(2) onto objects of this type. Doing so would cause the managed entity to return an error condition.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("initialize", 2), ("active", 3), ("shutdown", 4), ("standby", 5))

class CDmsEmailAddress(TextualConvention, OctetString):
    description = 'The type used to denote the email address.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 128)

class CDmsLicensedFeature(TextualConvention, Integer32):
    description = 'The identity of a licensed features of DMS. other : a product function not covered by any of the other enumerations listed below. base : Digital Media Manager Base License. deskTopVideo : Show and Share Module. liveWebcastEnabler : Show and share Live Event Module. digitalSignage : Digital Signs Module. enterpriseTv : Cast Module. snmpManagement : SNMP Notifications Module. digitalMediaPlayer : Digital Media Player Pack. digitalMediaPlayerAuthorPack : Show and Share Content Authour Pack. digitalMedialPlayerProofOfPlayPack : Proof of Play Module. clustering : the function to configure DMS high availability.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("other", 1), ("base", 2), ("deskTopVideo", 3), ("liveWebcastEnabler", 4), ("digitalSignage", 5), ("enterpriseTv", 6), ("snmpManagement", 7), ("digitalMediaPlayer", 8), ("digitalMediaPlayerAuthorPack", 9), ("digitalMedialPlayerProofOfPlayPack", 10), ("clustering", 11))

ciscoDmsMonitorMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 655, 0))
ciscoDmsMonitorMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 655, 1))
ciscoDmsMonitorMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 655, 2))
cdmsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 1))
cdmsFeatures = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 2))
cdmsInventory = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 3))
cdmsServers = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 4))
cdmsDamServices = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 5))
cdmsSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 6))
cdmsUserGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 7))
cdmsEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 8))
cdmsNotifControl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 13))
cdmsHa = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10))
cdmsMajorVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsMajorVersion.setStatus('current')
if mibBuilder.loadTexts: cdmsMajorVersion.setDescription('A string which indicates the major version of this managed instance of Digital Media System.')
cdmsMinorVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsMinorVersion.setStatus('current')
if mibBuilder.loadTexts: cdmsMinorVersion.setDescription('A string which indicates the minor version of this managed instance of Digital Media System.')
cdmsPatchVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsPatchVersion.setStatus('current')
if mibBuilder.loadTexts: cdmsPatchVersion.setDescription('A string which indicates the patch version of this managed instance of Digital Media System.')
cdmsAdministrator = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 1, 4), CDmsEmailAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdmsAdministrator.setStatus('current')
if mibBuilder.loadTexts: cdmsAdministrator.setDescription('The email address of the administrator of this DMS system.')
cdmsFeatureSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 2, 1))
cdmsLicensableFeatures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsLicensableFeatures.setStatus('current')
if mibBuilder.loadTexts: cdmsLicensableFeatures.setDescription('The total number of licensable features available in this version of DMS.')
cdmsLicensedFeatures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsLicensedFeatures.setStatus('current')
if mibBuilder.loadTexts: cdmsLicensedFeatures.setDescription('The number of licensable features licensed in this installation of DMS.')
cdmsLastLicenseUpdate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 2, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsLastLicenseUpdate.setStatus('current')
if mibBuilder.loadTexts: cdmsLastLicenseUpdate.setDescription('The date on which the last license upgrade was performed.')
cdmsLicensedFeatureTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 2, 2), )
if mibBuilder.loadTexts: cdmsLicensedFeatureTable.setStatus('current')
if mibBuilder.loadTexts: cdmsLicensedFeatureTable.setDescription('This table lists all the DMS features licensed by this installation of DMS.')
cdmsLicensedFeatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsLicensedFeature"), (0, "CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsLicensedFeatureIndex"))
if mibBuilder.loadTexts: cdmsLicensedFeatureEntry.setStatus('current')
if mibBuilder.loadTexts: cdmsLicensedFeatureEntry.setDescription('Each entry contains the attributes of one DMS licensed feature. An entry in this table is created for each licensed feature detected by the system.')
cdmsLicensedFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 2, 2, 1, 1), CDmsLicensedFeature())
if mibBuilder.loadTexts: cdmsLicensedFeature.setStatus('current')
if mibBuilder.loadTexts: cdmsLicensedFeature.setDescription('The identity of a DMS feature which is licensed by this installation.')
cdmsLicensedFeatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 2, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: cdmsLicensedFeatureIndex.setStatus('current')
if mibBuilder.loadTexts: cdmsLicensedFeatureIndex.setDescription('The unique identifier of the DMS feature licensed by this installation. The same feature may be licensed multiple times with different limits. Hence this discriminator is required.')
cdmsLicensedFeatureLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 2, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsLicensedFeatureLimit.setStatus('deprecated')
if mibBuilder.loadTexts: cdmsLicensedFeatureLimit.setDescription('The limit on this licensed features in terms of number of elements that may be operational with this DMS feature. Limits do not apply to all DMS features; where the limit is inapplicable, the value of this object will be set to 0. cdmsLicensedFeatureLimit object is superseded by cdmsLicensedFeatureLimitRev1.')
cdmsLicensedFeatureDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 2, 2, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsLicensedFeatureDescription.setStatus('current')
if mibBuilder.loadTexts: cdmsLicensedFeatureDescription.setDescription('A human readable description of this DMS feature and its limits.')
cdmsLicensedFeatureInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 2, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsLicensedFeatureInstallDate.setStatus('current')
if mibBuilder.loadTexts: cdmsLicensedFeatureInstallDate.setDescription('The date on which the DMS licensed feature corresponding this conceptual row was first enabled.')
cdmsLicensedFeatureLimitRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-3, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsLicensedFeatureLimitRev1.setStatus('current')
if mibBuilder.loadTexts: cdmsLicensedFeatureLimitRev1.setDescription('The limit on this licensed features in terms of number of elements that may be operational with this DMS feature. Limits do not apply to all DMS features; Following are the meaning of negative limits for this field >0 : Feature limit 0 : Unlimited -1 : Feature limit not supported -2 : DONT CARE about feaute limit -3 : DONT KNOW about feature limit')
cdmsInventoryGlobalCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 3, 1))
cdmsNumMediaIngestionDevices = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 3, 1, 1), Gauge32()).setUnits('Encoders').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsNumMediaIngestionDevices.setStatus('current')
if mibBuilder.loadTexts: cdmsNumMediaIngestionDevices.setDescription('The number of media ingestion devices managed by this installation of DMS.')
cdmsNumMediaPlayerDevices = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 3, 1, 2), Gauge32()).setUnits('Media Players').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsNumMediaPlayerDevices.setStatus('current')
if mibBuilder.loadTexts: cdmsNumMediaPlayerDevices.setDescription('The number of media player devices managed by this installation of DMS.')
cdmsNumVideoPortalDevices = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 3, 1, 3), Gauge32()).setUnits('Video Portals').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsNumVideoPortalDevices.setStatus('current')
if mibBuilder.loadTexts: cdmsNumVideoPortalDevices.setDescription('The number of video portal devices managed by this installation of DMS.')
cdmsInventoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 3, 2), )
if mibBuilder.loadTexts: cdmsInventoryTable.setStatus('current')
if mibBuilder.loadTexts: cdmsInventoryTable.setDescription('This table lists all the inventory elements currently managed by this installation of DMS.')
cdmsInventoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsInventoryElementType"), (0, "CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsInventoryElementId"))
if mibBuilder.loadTexts: cdmsInventoryEntry.setStatus('current')
if mibBuilder.loadTexts: cdmsInventoryEntry.setDescription('Each entry contains the attributes of one inventory element of DMS.')
cdmsInventoryElementType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 3, 2, 1, 1), CDmsElementType())
if mibBuilder.loadTexts: cdmsInventoryElementType.setStatus('current')
if mibBuilder.loadTexts: cdmsInventoryElementType.setDescription('The type of the DMS inventory element that this conceptual row corresponds to.')
cdmsInventoryElementId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 3, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 100)))
if mibBuilder.loadTexts: cdmsInventoryElementId.setStatus('current')
if mibBuilder.loadTexts: cdmsInventoryElementId.setDescription('The unique identifier of the DMS inventory element that this conceptual row corresponds to. For instance, in case of a media player, this identifier would be the unique symbolic name of the player. In case of a Video Portal instance, this would be the name of the Video Portal instance.')
cdmsInventoryElementMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 3, 2, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsInventoryElementMacAddress.setStatus('current')
if mibBuilder.loadTexts: cdmsInventoryElementMacAddress.setDescription('The MAC address of the DMS inventory element. This object may not be supportable for all inventory elements. For an element where the MAC address is not available, the value of this object would be empty.')
cdmsInventoryElementAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 3, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsInventoryElementAddrType.setStatus('current')
if mibBuilder.loadTexts: cdmsInventoryElementAddrType.setDescription('The type of Internet address of the DMS inventory element.')
cdmsInventoryElementAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 3, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsInventoryElementAddress.setStatus('current')
if mibBuilder.loadTexts: cdmsInventoryElementAddress.setDescription("The Internet address of the DMS inventory element. The type of this address is determined by the value of 'cdmsInventoryElementAddrType' object.")
cdmsInventoryElementMetadata = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 3, 2, 1, 6), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdmsInventoryElementMetadata.setStatus('current')
if mibBuilder.loadTexts: cdmsInventoryElementMetadata.setDescription('A meta-data string associated with this inventory element. This information is interpreted by the DMS functional components using inventory elements programmatically within the system.')
cdmsInventoryElementState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 3, 2, 1, 7), CDmsFunctionalStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdmsInventoryElementState.setStatus('current')
if mibBuilder.loadTexts: cdmsInventoryElementState.setDescription("The state of the inventory element corresponding to this conceptual row as seen by the DMS server. Set operations on this object are not supported for all inventory element types. Where it is not supported, the server would yield an error. The effect of setting this object to the value 'initializing' would be to reboot the element corresponding to this conceptual row, if the element type supports this operation.")
cdmsServerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 4, 1), )
if mibBuilder.loadTexts: cdmsServerTable.setStatus('current')
if mibBuilder.loadTexts: cdmsServerTable.setDescription('This table lists all the external servers used by this installation of DMS.')
cdmsServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsServerType"), (0, "CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsServerAddrType"), (0, "CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsServerAddress"))
if mibBuilder.loadTexts: cdmsServerEntry.setStatus('current')
if mibBuilder.loadTexts: cdmsServerEntry.setDescription('Each entry contains the attributes of one external server used by DMS.')
cdmsServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 4, 1, 1, 1), CDmsServerType())
if mibBuilder.loadTexts: cdmsServerType.setStatus('current')
if mibBuilder.loadTexts: cdmsServerType.setDescription('The type of the external server corresponding to this conceptual row used by DMS.')
cdmsServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 4, 1, 1, 2), InetAddressType())
if mibBuilder.loadTexts: cdmsServerAddrType.setStatus('current')
if mibBuilder.loadTexts: cdmsServerAddrType.setDescription('The type of Internet address of the external server.')
cdmsServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 4, 1, 1, 3), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: cdmsServerAddress.setStatus('current')
if mibBuilder.loadTexts: cdmsServerAddress.setDescription('The Internet address of the external server. The type of this address is determined by the value of the cdmsServerAddrType object.')
cdmsServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 4, 1, 1, 4), CDmsFunctionalStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsServerState.setStatus('current')
if mibBuilder.loadTexts: cdmsServerState.setDescription('The state of the external server.')
cdmsServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 4, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdmsServerStatus.setStatus('current')
if mibBuilder.loadTexts: cdmsServerStatus.setDescription('This object is used to manage creation, deletion and modification of external servers in this table.')
cdmsDamGlobalCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 5, 1))
cdmsNumContentElements = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 5, 1, 1), Gauge32()).setUnits('content elements').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsNumContentElements.setStatus('current')
if mibBuilder.loadTexts: cdmsNumContentElements.setDescription('The number of content elements in the DMS catalog.')
cdmsSecurityGlobalCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 6, 1))
cdmsNumAuthenRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 6, 1, 1), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsNumAuthenRequests.setStatus('current')
if mibBuilder.loadTexts: cdmsNumAuthenRequests.setDescription('The number of user authentication requests processed by DMS since last reboot.')
cdmsNumAuthenRequestsApproved = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 5, 1, 2), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsNumAuthenRequestsApproved.setStatus('current')
if mibBuilder.loadTexts: cdmsNumAuthenRequestsApproved.setDescription('The number of user authentication requests approved by DMS since last reboot.')
cdmsNumAuthenRequestsDeclined = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 5, 1, 3), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsNumAuthenRequestsDeclined.setStatus('current')
if mibBuilder.loadTexts: cdmsNumAuthenRequestsDeclined.setDescription('The number of user authentication requests declined by DMS since last reboot.')
cdmsSecurityConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 6, 2))
cdmsAuthenticationMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 6, 2, 1), CDmsUserAuthenMethod()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdmsAuthenticationMode.setStatus('current')
if mibBuilder.loadTexts: cdmsAuthenticationMode.setDescription('The mode of authenticating users in use by DMS.')
cdmsHaClusterInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 1))
cdmsHaClusterComposition = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 2))
cdmsHaClusterStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 3))
cdmsHaClusterEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 1, 1), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsHaClusterEnabled.setStatus('current')
if mibBuilder.loadTexts: cdmsHaClusterEnabled.setDescription("This object indicates if high availability function is enabled in this installation of DMS. The value 'true(1)', indicates that high availability function is enabled. The value 'false(2)', indicates that high availability function is disabled.")
cdmsHaClusterName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdmsHaClusterName.setStatus('current')
if mibBuilder.loadTexts: cdmsHaClusterName.setDescription('This human-readable string servers as the administrative label of this DMS cluster.')
cdmsHaDmmCluster = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 2, 1))
cdmsHaVpCluster = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 2, 2))
cdmsHaClusterNumTotalDmms = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('Nodes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsHaClusterNumTotalDmms.setStatus('current')
if mibBuilder.loadTexts: cdmsHaClusterNumTotalDmms.setDescription('This object indicates the total number of DMM nodes in this cluster.')
cdmsHaClusterNumActiveDmms = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 2, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setUnits('Nodes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsHaClusterNumActiveDmms.setStatus('current')
if mibBuilder.loadTexts: cdmsHaClusterNumActiveDmms.setDescription('This object indicates the total number of DMM nodes in this cluster which are in active state.')
cdmsHaClusterDmmVipType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 2, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsHaClusterDmmVipType.setStatus('current')
if mibBuilder.loadTexts: cdmsHaClusterDmmVipType.setDescription('The type of the Virtual Internet Protocol address of the DMM cluster of this DMS cluster.')
cdmsHaClusterDmmVip = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 2, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsHaClusterDmmVip.setStatus('current')
if mibBuilder.loadTexts: cdmsHaClusterDmmVip.setDescription("The value of the virtual address of the DMM cluster. The type of this address is determined by the value of 'cdmsHaClusterDmmVipType'.")
cdmsHaDmmClusterMemberTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 2, 1, 5), )
if mibBuilder.loadTexts: cdmsHaDmmClusterMemberTable.setStatus('current')
if mibBuilder.loadTexts: cdmsHaDmmClusterMemberTable.setDescription('This table lists the membership of the DMM cluster in this DMS cluster. Each conceptual row in this table represents an instance of DMM node in the DMM cluster. Rows in this table are created by the agent when the DMM cluster is configured.')
cdmsHaDmmClusterMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 2, 1, 5, 1), ).setIndexNames((0, "CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaDmmClusterMemberAddrType"), (0, "CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaDmmClusterMemberAddress"))
if mibBuilder.loadTexts: cdmsHaDmmClusterMemberEntry.setStatus('current')
if mibBuilder.loadTexts: cdmsHaDmmClusterMemberEntry.setDescription("An entry (conceptual row) in the 'cdmsHaDmmClusterMemberTable' describes one DMM node in the membership of the DMM cluster.")
cdmsHaDmmClusterMemberAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 2, 1, 5, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cdmsHaDmmClusterMemberAddrType.setStatus('current')
if mibBuilder.loadTexts: cdmsHaDmmClusterMemberAddrType.setDescription("This object specifies the type of the actual network address of DMM node represented by the corresponding instance identifier 'cdmsHaDmmClusterMemberAddress').")
cdmsHaDmmClusterMemberAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 2, 1, 5, 1, 2), InetAddress())
if mibBuilder.loadTexts: cdmsHaDmmClusterMemberAddress.setStatus('current')
if mibBuilder.loadTexts: cdmsHaDmmClusterMemberAddress.setDescription("The actual network address of the DMM node corresponding to this conceptual row. The type of address of an instance of this object is determined by the value of the corresponding instance of 'cdmsHaDmmClusterMemberAddrType'.")
cdmsHaDmmClusterMemberIsPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 2, 1, 5, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsHaDmmClusterMemberIsPrimary.setStatus('current')
if mibBuilder.loadTexts: cdmsHaDmmClusterMemberIsPrimary.setDescription("This object indicates if the DMM node corresponding to this conceptual row is 'primary'. A node in a cluster is considered 'primary' if: a) the cluster services are preferred to be implemented on the node b) if the node acts as a management interface to the cluster. Otherwise, the node is considered 'secondary'. The value 'true(1)', indicates that the DMM is primary. The value 'false(2)', indicates that the DMM is secondary.")
cdmsHaDmmClusterMemberOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 2, 1, 5, 1, 4), CDmsFunctionalStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsHaDmmClusterMemberOperState.setStatus('current')
if mibBuilder.loadTexts: cdmsHaDmmClusterMemberOperState.setDescription('This object indicates the operational state of the DMM node corresponding to this conceptual row.')
cdmsHaVpClusterNumClusters = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 2, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsHaVpClusterNumClusters.setStatus('current')
if mibBuilder.loadTexts: cdmsHaVpClusterNumClusters.setDescription('This object indicates the number of Video Portal Clusters comprising this DMS cluster.')
cdmsHaVpClusterMemberTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 2, 2, 2), )
if mibBuilder.loadTexts: cdmsHaVpClusterMemberTable.setStatus('current')
if mibBuilder.loadTexts: cdmsHaVpClusterMemberTable.setDescription('This table serves the dual purpose of enumerating the various video portal clusters in this installation as well as listing the member video portal nodes in each video portal cluster. Entries in this table are created by the agent when the cluster is configured.')
cdmsHaVpClusterMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 2, 2, 2, 1), ).setIndexNames((0, "CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaVpClusterMemberClusterName"), (0, "CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaVpClusterMemberVipType"), (0, "CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaVpClusterMemberVip"), (0, "CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaVpClusterMemberAddrType"), (0, "CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaVpClusterMemberAddress"))
if mibBuilder.loadTexts: cdmsHaVpClusterMemberEntry.setStatus('current')
if mibBuilder.loadTexts: cdmsHaVpClusterMemberEntry.setDescription('An entry (conceptual row) in the cdmsHaVpClusterMemberTable. Each entry in this table represents a VP node that belongs to this VP cluster. This table is read-only; the agent creates the necessary rows when the cluster is configured and deletion of rows is not permitted.')
cdmsHaVpClusterMemberClusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 2, 2, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: cdmsHaVpClusterMemberClusterName.setStatus('current')
if mibBuilder.loadTexts: cdmsHaVpClusterMemberClusterName.setDescription('This object specifies a human-readable administrative name of the video portal cluster corresponding to this conceptual row.')
cdmsHaVpClusterMemberVipType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 2, 2, 2, 1, 2), InetAddressType())
if mibBuilder.loadTexts: cdmsHaVpClusterMemberVipType.setStatus('current')
if mibBuilder.loadTexts: cdmsHaVpClusterMemberVipType.setDescription("This object specifies the type of the virtual IP address of the video portal cluster represented by the corresponding instance identifier 'cdmsHaVpClusterMemberVip'.")
cdmsHaVpClusterMemberVip = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 2, 2, 2, 1, 3), InetAddress())
if mibBuilder.loadTexts: cdmsHaVpClusterMemberVip.setStatus('current')
if mibBuilder.loadTexts: cdmsHaVpClusterMemberVip.setDescription("The virtual IP address of the video portal cluster represented by this conceptual row. The type of address of an instance of this object is determined by the value of the corresponding instance of 'cdmHaVpClusterMemberVipType'.")
cdmsHaVpClusterMemberAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 2, 2, 2, 1, 4), InetAddressType())
if mibBuilder.loadTexts: cdmsHaVpClusterMemberAddrType.setStatus('current')
if mibBuilder.loadTexts: cdmsHaVpClusterMemberAddrType.setDescription("This object specifies the actual IP address of the video portal node represented by the corresponding instance identifier 'cdmsHaVpClusterMemberAddress'.")
cdmsHaVpClusterMemberAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 2, 2, 2, 1, 5), InetAddress())
if mibBuilder.loadTexts: cdmsHaVpClusterMemberAddress.setStatus('current')
if mibBuilder.loadTexts: cdmsHaVpClusterMemberAddress.setDescription("The actual IP address of the video portal represented by this conceptual row. The type of address of an instance of this object is determined by the value of the corresponding instance of 'cdmHaVpClusterMemberAddrType'.")
cdmsHaVpClusterMemberIsPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 2, 2, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsHaVpClusterMemberIsPrimary.setStatus('current')
if mibBuilder.loadTexts: cdmsHaVpClusterMemberIsPrimary.setDescription("This object indicates if the DMM node corresponding to this conceptual row is 'primary'. A node in a cluster is considered 'primary' if: a) the cluster services are preferred to be implemented on the node b) if the node acts as a management interface to the cluster. Otherwise, the node is considered 'secondary'. The value 'true(1)', indicates that the VP is primary. The value 'false(2)', indicates that the VP is secondary.")
cdmsHaVpClusterMemberOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 2, 2, 2, 1, 7), CDmsFunctionalStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsHaVpClusterMemberOperState.setStatus('current')
if mibBuilder.loadTexts: cdmsHaVpClusterMemberOperState.setDescription('This object indicates the operational state of the VP node corresponding to this conceptual row.')
cdmsHaClusterLastDmmStatusChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 3, 1), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsHaClusterLastDmmStatusChangeTime.setStatus('current')
if mibBuilder.loadTexts: cdmsHaClusterLastDmmStatusChangeTime.setDescription("The time-stamp of the most recent occurrence of the status change of a DMM node in this cluster. A status change is defined as a transition in the value of the object 'cdmsHaDmmClusterMemberOperState'.")
cdmsHaClusterLastDmmStatusChangeAddrType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 3, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsHaClusterLastDmmStatusChangeAddrType.setStatus('current')
if mibBuilder.loadTexts: cdmsHaClusterLastDmmStatusChangeAddrType.setDescription("This object indicates the type of the network address of the DMM node which changed status most recently in this cluster (represented by the value of 'cdmsHaClusterLastDmmStatusChangeAddress' object). A status change is defined as a transition in the value of the object 'cdmsHaDmmClusterMemberOperState'.")
cdmsHaClusterLastDmmStatusChangeAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 3, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsHaClusterLastDmmStatusChangeAddress.setStatus('current')
if mibBuilder.loadTexts: cdmsHaClusterLastDmmStatusChangeAddress.setDescription("The network address of the DMM node which changed status most recently in this cluster. The type of address of an instance of this object is determined by the value of the corresponding instance of 'cdmsHaClusterLastDmmStatusChangeAddrType' object.")
cdmsHaClusterLastVpStatusChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 3, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsHaClusterLastVpStatusChangeTime.setStatus('current')
if mibBuilder.loadTexts: cdmsHaClusterLastVpStatusChangeTime.setDescription("The time-stamp of the most recent occurrence of the status change of a video portal node in this cluster. A status change is defined as a transition in the value of the object 'cdmsHaVpClusterMemberOperState'.")
cdmsHaClusterLastVpStatusChangeCluster = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 3, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsHaClusterLastVpStatusChangeCluster.setStatus('current')
if mibBuilder.loadTexts: cdmsHaClusterLastVpStatusChangeCluster.setDescription('The administrative label of the video portal cluster in which a video portal node changed its state most recently.')
cdmsHaClusterLastStatusChangeVpAddrType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 3, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsHaClusterLastStatusChangeVpAddrType.setStatus('current')
if mibBuilder.loadTexts: cdmsHaClusterLastStatusChangeVpAddrType.setDescription("This object indicates the type of the network address of the VP node which changed status most recently in this cluster (represented by the value of 'cdmsHaClusterLastVpStatusChangeAddress' object). A status change is defined as a transition in the value of the object 'cdmsHaVpClusterMemberOperState'.")
cdmsHaClusterLastVpStatusChangeVpAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 3, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsHaClusterLastVpStatusChangeVpAddress.setStatus('current')
if mibBuilder.loadTexts: cdmsHaClusterLastVpStatusChangeVpAddress.setDescription("The network address of the video portal node which changed status most recently in this cluster. The type of address of an instance of this object is determined by the value of the corresponding instance of 'cdmsHaClusterLastVpStatusChangeAddrType' object.")
cdmsHaClusterStatusHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 3, 8))
cdmsHaClusterHistoryMaxRecords = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 3, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdmsHaClusterHistoryMaxRecords.setStatus('current')
if mibBuilder.loadTexts: cdmsHaClusterHistoryMaxRecords.setDescription("This object specifies the maximum number of history records pertaining to DMS Cluster history that would be maintained in the table 'cdmsHaClusterHistoryTable'.")
cdmsHaClusterHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 3, 8, 2), )
if mibBuilder.loadTexts: cdmsHaClusterHistoryTable.setStatus('current')
if mibBuilder.loadTexts: cdmsHaClusterHistoryTable.setDescription("This table contains the chronological record of all the DMS cluster events and their attributes that occurred in the manager DMS cluster since the last re-initialization of this device. When the number of entries in this table exceeds the value of object 'cdmsHaClusterHistoryMaxRecords', the older entries will be purged.")
cdmsHaClusterHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 3, 8, 2, 1), ).setIndexNames((0, "CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaClusterHistId"))
if mibBuilder.loadTexts: cdmsHaClusterHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: cdmsHaClusterHistoryEntry.setDescription('An entry (conceptual row) contains the record of a single DMS cluster event.')
cdmsHaClusterHistId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 3, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cdmsHaClusterHistId.setStatus('current')
if mibBuilder.loadTexts: cdmsHaClusterHistId.setDescription('This object uniquely identifies an entry in the cluster history.')
cdmsHaClusterHistTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 3, 8, 2, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsHaClusterHistTimestamp.setStatus('current')
if mibBuilder.loadTexts: cdmsHaClusterHistTimestamp.setDescription('The value of sysUpTime when the cluster event corresponding to this conceptual row occurred.')
cdmsHaClusterHistClusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 3, 8, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsHaClusterHistClusterName.setStatus('current')
if mibBuilder.loadTexts: cdmsHaClusterHistClusterName.setDescription('The name of the DMS cluster in which the cluster event corresponding to this conceptual row occurred.')
cdmsHaClusterHistNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 3, 8, 2, 1, 4), CDmsElementType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsHaClusterHistNodeType.setStatus('current')
if mibBuilder.loadTexts: cdmsHaClusterHistNodeType.setDescription('The type of the DMS node in which the cluster event corresponding to this conceptual row occurred, if this event pertains to a node in the cluster. If this event does not pertain to a node, the value of this column is undefined.')
cdmsHaClusterHistNodeNewStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 3, 8, 2, 1, 5), CDmsFunctionalStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsHaClusterHistNodeNewStatus.setStatus('current')
if mibBuilder.loadTexts: cdmsHaClusterHistNodeNewStatus.setDescription("If the cluster event corresponding to this conceptual row is a cluster node event, then this object identifies the new state of the cluster node identified by 'cdmsHaClusterHistNodeAddr' after this event.")
cdmsHaClusterHistNodeAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 3, 8, 2, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsHaClusterHistNodeAddrType.setStatus('current')
if mibBuilder.loadTexts: cdmsHaClusterHistNodeAddrType.setDescription("This object indicates the type of network address of the node (represented by the value of the corresponding instance of 'cdmsHaClusterHistNodeAddr') to which the cluster event pertains.")
cdmsHaClusterHistNodeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 10, 3, 8, 2, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsHaClusterHistNodeAddr.setStatus('current')
if mibBuilder.loadTexts: cdmsHaClusterHistNodeAddr.setDescription("The address of the node to which the cluster event corresponding to this conceptual row pertains. The type of address of an instance of this object is determined by the value of the corresponding instance of 'cdmsHaClusterHistNodeAddrType' object.")
cdmsNumUsers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 7, 1), Gauge32()).setUnits('Users').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsNumUsers.setStatus('current')
if mibBuilder.loadTexts: cdmsNumUsers.setDescription('The number of users who have access to this installation of DMS.')
cdmsNumActiveDmmUsers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 7, 2), Gauge32()).setUnits('Users').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsNumActiveDmmUsers.setStatus('current')
if mibBuilder.loadTexts: cdmsNumActiveDmmUsers.setDescription('The number of users who are logged into DMS administrative appliance.')
cdmsNumActiveVpUsers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 7, 3), Gauge32()).setUnits('Users').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsNumActiveVpUsers.setStatus('current')
if mibBuilder.loadTexts: cdmsNumActiveVpUsers.setDescription('The number of users who are logged into DMS Video Portal appliance.')
cdmsLastUserLastChange = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 7, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsLastUserLastChange.setStatus('current')
if mibBuilder.loadTexts: cdmsLastUserLastChange.setDescription('The date and time at which the last user was added or deleted.')
cdmsEventConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 8, 1))
cdmsEventStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 8, 2))
cdmsNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 8, 2, 1), Counter64()).setUnits('Events').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsNumEvents.setStatus('current')
if mibBuilder.loadTexts: cdmsNumEvents.setDescription('The number of events generated by this installation of DMS since last reboot.')
cdmsNumEventRate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 8, 2, 2), Gauge32()).setUnits('Events per minute').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsNumEventRate.setStatus('current')
if mibBuilder.loadTexts: cdmsNumEventRate.setDescription('The number of events per minute generated by this installation of DMS since last reboot.')
cdmsNumAlarms = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 8, 2, 3), Counter64()).setUnits('Alarms').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsNumAlarms.setStatus('current')
if mibBuilder.loadTexts: cdmsNumAlarms.setDescription("The number of events of severity greater than 'warning' ('alarms') generated by this installation of DMS since last reboot.")
cdmsNumAlarmRate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 8, 2, 4), Gauge32()).setUnits('Alarms per minute').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsNumAlarmRate.setStatus('current')
if mibBuilder.loadTexts: cdmsNumAlarmRate.setDescription('The number of alarms per minute generated by this installation of DMS since last reboot.')
cdmsNumNotifications = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 8, 2, 5), Counter64()).setUnits('Notifications').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsNumNotifications.setStatus('current')
if mibBuilder.loadTexts: cdmsNumNotifications.setDescription('The number of notifications emitted by this installation of DMS since last reboot.')
cdmsNumNotificationRate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 8, 2, 6), Gauge32()).setUnits('Notifications per minute').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdmsNumNotificationRate.setStatus('current')
if mibBuilder.loadTexts: cdmsNumNotificationRate.setDescription('The number of notifications emitted per minute by this installation of DMS since last reboot.')
cdmsMediaPlayerRegisteredEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 13, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdmsMediaPlayerRegisteredEnable.setStatus('current')
if mibBuilder.loadTexts: cdmsMediaPlayerRegisteredEnable.setDescription("This object defines the administrative state of sending the 'ciscoDmsMediaPlayerRegistered' notification to signal the fact that a digital media player which was shutdown is now operational.")
cdmsMediaPlayerUpEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 13, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdmsMediaPlayerUpEnable.setStatus('current')
if mibBuilder.loadTexts: cdmsMediaPlayerUpEnable.setDescription("This object specifies the administrative state of sending the 'ciscoDmsMediaPlayerUp' notification to signal the fact that a digital media player which is registered with this installation of DMS has become operational.")
cdmsMediaPlayerDownEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 13, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdmsMediaPlayerDownEnable.setStatus('current')
if mibBuilder.loadTexts: cdmsMediaPlayerDownEnable.setDescription("This object specifies the administrative state of sending the 'ciscoDmsMediaPlayerDown' notification to signal the fact that a digital media player which was operational and is registered with this installation of DMS is now shutdown.")
cdmsMediaPlayerAddrTakenEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 13, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdmsMediaPlayerAddrTakenEnable.setStatus('current')
if mibBuilder.loadTexts: cdmsMediaPlayerAddrTakenEnable.setDescription("This object specifies the administrative state of sending the 'ciscoDmsMediaPlayerAddrTaken' notification to signal the fact that the IP address assigned to a managed digital media player has been acquired by another media player.")
cdmsHaClusterNodeUpEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 13, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdmsHaClusterNodeUpEnable.setStatus('current')
if mibBuilder.loadTexts: cdmsHaClusterNodeUpEnable.setDescription("This object specifies the administrative state of sending the 'ciscoDmsHaClusterNodeUp' notification to signal the fact that a component in a DMS cluster has transitioned to active state.")
cdmsHaClusterNodeDownEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 13, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdmsHaClusterNodeDownEnable.setStatus('current')
if mibBuilder.loadTexts: cdmsHaClusterNodeDownEnable.setDescription("This object specifies the administrative state of sending the 'ciscoDmsHaClusterNodeDown' notification to signal the fact that a component in a DMS cluster has transitioned to inactive state.")
cdmsHaClusterConfigChangeEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 655, 1, 13, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdmsHaClusterConfigChangeEnable.setStatus('current')
if mibBuilder.loadTexts: cdmsHaClusterConfigChangeEnable.setDescription("This object specifies the administrative state of sending the 'ciscoDmsHaClusterConfigChange' notification to signal the fact that the configuration of the managed DMS cluster has changed.")
ciscoDmsMediaPlayerRegistered = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 655, 0, 1)).setObjects(("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsNumMediaPlayerDevices"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsInventoryElementMacAddress"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsInventoryElementAddrType"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsInventoryElementAddress"))
if mibBuilder.loadTexts: ciscoDmsMediaPlayerRegistered.setStatus('current')
if mibBuilder.loadTexts: ciscoDmsMediaPlayerRegistered.setDescription('This notification is generated when a media player is registered into this installation of DMS.')
ciscoDmsMediaPlayerUp = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 655, 0, 2)).setObjects(("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsNumMediaPlayerDevices"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsInventoryElementMacAddress"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsInventoryElementAddrType"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsInventoryElementAddress"))
if mibBuilder.loadTexts: ciscoDmsMediaPlayerUp.setStatus('current')
if mibBuilder.loadTexts: ciscoDmsMediaPlayerUp.setDescription('This notification is generated when a media player which is registered with DMS becomes operational.')
ciscoDmsMediaPlayerDown = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 655, 0, 3)).setObjects(("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsNumMediaPlayerDevices"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsInventoryElementAddrType"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsInventoryElementAddress"))
if mibBuilder.loadTexts: ciscoDmsMediaPlayerDown.setStatus('current')
if mibBuilder.loadTexts: ciscoDmsMediaPlayerDown.setDescription('This notification is generated when a media player which is registered with DMS and which was operational is shutdown.')
ciscoDmsMediaPlayerAddrTaken = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 655, 0, 4)).setObjects(("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsInventoryElementAddrType"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsInventoryElementAddress"))
if mibBuilder.loadTexts: ciscoDmsMediaPlayerAddrTaken.setStatus('current')
if mibBuilder.loadTexts: ciscoDmsMediaPlayerAddrTaken.setDescription('This notification is generated when it is detected that the network address of a media player is taken by a different media player.')
ciscoDmsHaClusterNodeUp = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 655, 0, 5)).setObjects(("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaClusterHistClusterName"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaClusterHistNodeType"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaClusterHistNodeAddrType"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaClusterHistNodeAddr"))
if mibBuilder.loadTexts: ciscoDmsHaClusterNodeUp.setStatus('current')
if mibBuilder.loadTexts: ciscoDmsHaClusterNodeUp.setDescription("This notification is generated when it is detected that a node in a managed DMS cluster has transitioned to active state, that is, the value of the object 'cdmsHaDmmClusterMemberOperState' or 'cdmsHaVpClusterMemberOperState' has transitioned to 'active'. This object specifies the administrative state of sending the 'ciscoDmsHaClusterNodeDown' notification to signal the fact that a component in a DMS cluster has transitioned to inactive state.")
ciscoDmsHaClusterNodeDown = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 655, 0, 6)).setObjects(("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaClusterHistClusterName"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaClusterHistNodeType"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaClusterHistNodeAddrType"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaClusterHistNodeAddr"))
if mibBuilder.loadTexts: ciscoDmsHaClusterNodeDown.setStatus('current')
if mibBuilder.loadTexts: ciscoDmsHaClusterNodeDown.setDescription("This notification is generated when it is detected that a node in a managed DMS cluster has transitioned to inactive state, that is, the value of the object 'cdmsHaDmmClusterMemberOperState' or 'cdmsHaVpClusterMemberOperState' has transitioned to 'shutdown'.")
cdmsDmsHaClusterConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 655, 0, 7)).setObjects(("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaClusterHistClusterName"))
if mibBuilder.loadTexts: cdmsDmsHaClusterConfigChange.setStatus('current')
if mibBuilder.loadTexts: cdmsDmsHaClusterConfigChange.setDescription('This notification is generated when it is detected that the configuration of a managed DMS cluster has been altered. Configuration changes that trigger this notification include modifications to the virtual IP address and the virtual IP address type.')
ciscoDmsMonitorMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 655, 2, 1))
ciscoDmsMonitorMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 655, 2, 2))
ciscoDmsMonitorMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 655, 2, 1, 1)).setObjects(("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "ciscoDmsSystemGroup"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "ciscoDmsFeatureGroup"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "ciscoDmsInventoryGroup"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "ciscoDmsFeatureAdvancedGroup"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "ciscoDmsServerGroup"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "ciscoDamGroup"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "ciscoDmsSecurityGroup"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "ciscoDmsUserGroup"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "ciscoDmsEventGroup"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "ciscoDmsHaGroup"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "ciscoDmsHaAdvancedGroup"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "ciscoDmsNotificationCntlGroup"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "ciscoDmsNotificationsGroup"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "ciscoDmsAdvancedNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDmsMonitorMIBCompliance = ciscoDmsMonitorMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoDmsMonitorMIBCompliance.setDescription('The compliance statement for SNMP entities the Cisco Digital Media System MIB.')
ciscoDmsMonitorMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 655, 2, 1, 2)).setObjects(("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "ciscoDmsSystemGroup"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "ciscoDmsFeatureGroup"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "ciscoDmsInventoryGroup"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "ciscoDmsFeatureAdvancedGroup"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "ciscoDmsServerGroup"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "ciscoDamGroup"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "ciscoDmsSecurityGroup"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "ciscoDmsUserGroup"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "ciscoDmsEventGroup"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "ciscoDmsNotificationCntlGroupRev1"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "ciscoDmsNotificationsGroupRev1"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "ciscoDmsAdvancedNotificationsGroup"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "ciscoDmsHaGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDmsMonitorMIBComplianceRev1 = ciscoDmsMonitorMIBComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoDmsMonitorMIBComplianceRev1.setDescription('The compliance statement for SNMP entities the Cisco Digital Media System MIB. This revision adds support for High Availability (HA).')
ciscoDmsSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 655, 2, 2, 1)).setObjects(("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsMajorVersion"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsMinorVersion"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsPatchVersion"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsAdministrator"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDmsSystemGroup = ciscoDmsSystemGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDmsSystemGroup.setDescription('A collection of objects that provides information about DMS system parameters.')
ciscoDmsFeatureGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 655, 2, 2, 2)).setObjects(("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsLicensableFeatures"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsLicensedFeatures"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsLastLicenseUpdate"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsLicensedFeatureLimit"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsLicensedFeatureDescription"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDmsFeatureGroup = ciscoDmsFeatureGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDmsFeatureGroup.setDescription('A collection of objects that provides information about DMS licensed features.')
ciscoDmsFeatureAdvancedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 655, 2, 2, 3)).setObjects(("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsLicensedFeatureInstallDate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDmsFeatureAdvancedGroup = ciscoDmsFeatureAdvancedGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDmsFeatureAdvancedGroup.setDescription('A collection of objects that provides information about DMS advanced licensed features.')
ciscoDmsInventoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 655, 2, 2, 4)).setObjects(("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsNumMediaIngestionDevices"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsNumMediaPlayerDevices"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsNumVideoPortalDevices"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsInventoryElementMacAddress"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsInventoryElementAddrType"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsInventoryElementAddress"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsInventoryElementMetadata"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsInventoryElementState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDmsInventoryGroup = ciscoDmsInventoryGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDmsInventoryGroup.setDescription('A collection of objects that provides information about DMS inventory.')
ciscoDmsServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 655, 2, 2, 5)).setObjects(("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsServerState"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsServerStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDmsServerGroup = ciscoDmsServerGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDmsServerGroup.setDescription('A collection of objects that provides information about DMS external servers.')
ciscoDamGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 655, 2, 2, 6)).setObjects(("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsNumContentElements"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDamGroup = ciscoDamGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDamGroup.setDescription('A collection of objects that provides information about DMS group.')
ciscoDmsSecurityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 655, 2, 2, 7)).setObjects(("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsNumAuthenRequests"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsNumAuthenRequestsApproved"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsNumAuthenRequestsDeclined"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsAuthenticationMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDmsSecurityGroup = ciscoDmsSecurityGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDmsSecurityGroup.setDescription('A collection of objects that provides information about DMS security.')
ciscoDmsUserGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 655, 2, 2, 8)).setObjects(("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsNumUsers"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsNumActiveDmmUsers"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsNumActiveVpUsers"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsLastUserLastChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDmsUserGroup = ciscoDmsUserGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDmsUserGroup.setDescription('A collection of objects that provides information about DMS users and user groups.')
ciscoDmsEventGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 655, 2, 2, 9)).setObjects(("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsNumEvents"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsNumEventRate"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsNumAlarms"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsNumAlarmRate"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsNumNotifications"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsNumNotificationRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDmsEventGroup = ciscoDmsEventGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDmsEventGroup.setDescription('A collection of objects that provides information about DMS events.')
ciscoDmsNotificationCntlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 655, 2, 2, 10)).setObjects(("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsMediaPlayerRegisteredEnable"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsMediaPlayerUpEnable"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsMediaPlayerDownEnable"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsMediaPlayerAddrTakenEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDmsNotificationCntlGroup = ciscoDmsNotificationCntlGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoDmsNotificationCntlGroup.setDescription('A collection of objects that provides information about DMS notification control.')
ciscoDmsNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 655, 2, 2, 11)).setObjects(("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "ciscoDmsMediaPlayerRegistered"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "ciscoDmsMediaPlayerUp"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "ciscoDmsMediaPlayerDown"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "ciscoDmsMediaPlayerAddrTaken"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDmsNotificationsGroup = ciscoDmsNotificationsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoDmsNotificationsGroup.setDescription('A collection of objects that provides information about DMS notifications.')
ciscoDmsAdvancedNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 655, 2, 2, 12)).setObjects(("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsDmsHaClusterConfigChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDmsAdvancedNotificationsGroup = ciscoDmsAdvancedNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDmsAdvancedNotificationsGroup.setDescription('Please enter the description here')
ciscoDmsHaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 655, 2, 2, 13)).setObjects(("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaClusterNodeUpEnable"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaClusterNodeDownEnable"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaClusterConfigChangeEnable"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaClusterEnabled"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaClusterName"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaClusterNumTotalDmms"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaClusterNumActiveDmms"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaClusterDmmVipType"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaClusterDmmVip"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaDmmClusterMemberIsPrimary"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaDmmClusterMemberOperState"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaVpClusterNumClusters"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaVpClusterMemberIsPrimary"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaVpClusterMemberOperState"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaClusterLastDmmStatusChangeTime"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaClusterLastDmmStatusChangeAddrType"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaClusterLastDmmStatusChangeAddress"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaClusterLastVpStatusChangeTime"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaClusterLastVpStatusChangeCluster"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaClusterLastStatusChangeVpAddrType"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaClusterLastVpStatusChangeVpAddress"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaClusterHistoryMaxRecords"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDmsHaGroup = ciscoDmsHaGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDmsHaGroup.setDescription('Collection of MIB objects that must be implemented to support management of DMS HA feature.')
ciscoDmsHaAdvancedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 655, 2, 2, 14)).setObjects(("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaClusterHistTimestamp"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaClusterHistClusterName"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaClusterHistNodeType"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaClusterHistNodeNewStatus"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaClusterHistNodeAddrType"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaClusterHistNodeAddr"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaClusterHistoryMaxRecords"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDmsHaAdvancedGroup = ciscoDmsHaAdvancedGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDmsHaAdvancedGroup.setDescription('Collection of MIB objects that must be implemented to support advanced management of DMS HA feature. This group is optional.')
ciscoDmsNotificationCntlGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 655, 2, 2, 15)).setObjects(("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsMediaPlayerRegisteredEnable"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsMediaPlayerUpEnable"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsMediaPlayerDownEnable"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsMediaPlayerAddrTakenEnable"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaClusterNodeUpEnable"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaClusterNodeDownEnable"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "cdmsHaClusterConfigChangeEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDmsNotificationCntlGroupRev1 = ciscoDmsNotificationCntlGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoDmsNotificationCntlGroupRev1.setDescription('A collection of objects that provides information about DMS notification control. This revision adds support for High Availability (HA).')
ciscoDmsNotificationsGroupRev1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 655, 2, 2, 16)).setObjects(("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "ciscoDmsMediaPlayerRegistered"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "ciscoDmsMediaPlayerUp"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "ciscoDmsMediaPlayerDown"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "ciscoDmsMediaPlayerAddrTaken"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "ciscoDmsHaClusterNodeUp"), ("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", "ciscoDmsHaClusterNodeDown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDmsNotificationsGroupRev1 = ciscoDmsNotificationsGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoDmsNotificationsGroupRev1.setDescription('A collection of objects that provides information about DMS notifications. This revision adds support for High Availability (HA).')
mibBuilder.exportSymbols("CISCO-DIGITAL-MEDIA-SYSTEMS-MIB", cdmsDmsHaClusterConfigChange=cdmsDmsHaClusterConfigChange, cdmsUserGroup=cdmsUserGroup, cdmsHaClusterDmmVip=cdmsHaClusterDmmVip, CDmsEmailAddress=CDmsEmailAddress, ciscoDmsNotificationCntlGroup=ciscoDmsNotificationCntlGroup, PYSNMP_MODULE_ID=ciscoDigitalMediaSystemsMIB, cdmsHaClusterNodeUpEnable=cdmsHaClusterNodeUpEnable, cdmsSecurityGlobalCounters=cdmsSecurityGlobalCounters, cdmsHaVpCluster=cdmsHaVpCluster, cdmsInventoryElementId=cdmsInventoryElementId, cdmsHaVpClusterMemberOperState=cdmsHaVpClusterMemberOperState, cdmsMediaPlayerRegisteredEnable=cdmsMediaPlayerRegisteredEnable, cdmsFeatures=cdmsFeatures, cdmsLastLicenseUpdate=cdmsLastLicenseUpdate, ciscoDmsMonitorMIBConform=ciscoDmsMonitorMIBConform, cdmsHaClusterHistoryMaxRecords=cdmsHaClusterHistoryMaxRecords, cdmsInventory=cdmsInventory, CDmsUserAuthenMethod=CDmsUserAuthenMethod, cdmsNumContentElements=cdmsNumContentElements, ciscoDmsMonitorMIBGroups=ciscoDmsMonitorMIBGroups, ciscoDmsNotificationsGroupRev1=ciscoDmsNotificationsGroupRev1, cdmsMediaPlayerUpEnable=cdmsMediaPlayerUpEnable, ciscoDmsHaAdvancedGroup=ciscoDmsHaAdvancedGroup, ciscoDmsMonitorMIBComplianceRev1=ciscoDmsMonitorMIBComplianceRev1, ciscoDmsNotificationsGroup=ciscoDmsNotificationsGroup, cdmsHaClusterInfo=cdmsHaClusterInfo, cdmsDamServices=cdmsDamServices, cdmsServerAddress=cdmsServerAddress, ciscoDmsHaGroup=ciscoDmsHaGroup, cdmsHaClusterComposition=cdmsHaClusterComposition, cdmsHaClusterHistNodeNewStatus=cdmsHaClusterHistNodeNewStatus, cdmsHaClusterConfigChangeEnable=cdmsHaClusterConfigChangeEnable, ciscoDmsMonitorMIBObjects=ciscoDmsMonitorMIBObjects, cdmsInventoryElementType=cdmsInventoryElementType, cdmsEventStatistics=cdmsEventStatistics, ciscoDmsMediaPlayerDown=ciscoDmsMediaPlayerDown, cdmsInventoryElementMetadata=cdmsInventoryElementMetadata, cdmsLicensedFeatureDescription=cdmsLicensedFeatureDescription, cdmsHaVpClusterMemberAddrType=cdmsHaVpClusterMemberAddrType, cdmsHaDmmCluster=cdmsHaDmmCluster, cdmsHaVpClusterMemberVipType=cdmsHaVpClusterMemberVipType, cdmsHaClusterNodeDownEnable=cdmsHaClusterNodeDownEnable, cdmsNumNotifications=cdmsNumNotifications, ciscoDmsEventGroup=ciscoDmsEventGroup, cdmsNumAlarmRate=cdmsNumAlarmRate, ciscoDmsServerGroup=ciscoDmsServerGroup, cdmsHaClusterLastDmmStatusChangeAddrType=cdmsHaClusterLastDmmStatusChangeAddrType, cdmsHaClusterHistoryTable=cdmsHaClusterHistoryTable, cdmsHaVpClusterMemberClusterName=cdmsHaVpClusterMemberClusterName, cdmsHaDmmClusterMemberIsPrimary=cdmsHaDmmClusterMemberIsPrimary, cdmsNumActiveVpUsers=cdmsNumActiveVpUsers, cdmsHaDmmClusterMemberAddrType=cdmsHaDmmClusterMemberAddrType, ciscoDmsFeatureAdvancedGroup=ciscoDmsFeatureAdvancedGroup, cdmsHa=cdmsHa, cdmsServerAddrType=cdmsServerAddrType, cdmsHaClusterEnabled=cdmsHaClusterEnabled, cdmsInventoryEntry=cdmsInventoryEntry, cdmsHaVpClusterMemberEntry=cdmsHaVpClusterMemberEntry, cdmsHaClusterHistNodeAddrType=cdmsHaClusterHistNodeAddrType, cdmsHaDmmClusterMemberOperState=cdmsHaDmmClusterMemberOperState, cdmsInventoryElementAddrType=cdmsInventoryElementAddrType, ciscoDigitalMediaSystemsMIB=ciscoDigitalMediaSystemsMIB, ciscoDmsNotificationCntlGroupRev1=ciscoDmsNotificationCntlGroupRev1, cdmsHaClusterLastDmmStatusChangeAddress=cdmsHaClusterLastDmmStatusChangeAddress, cdmsNumEventRate=cdmsNumEventRate, cdmsHaClusterLastVpStatusChangeCluster=cdmsHaClusterLastVpStatusChangeCluster, cdmsEvents=cdmsEvents, cdmsHaClusterHistTimestamp=cdmsHaClusterHistTimestamp, ciscoDmsMediaPlayerUp=ciscoDmsMediaPlayerUp, ciscoDmsHaClusterNodeDown=ciscoDmsHaClusterNodeDown, ciscoDmsMonitorMIBCompliance=ciscoDmsMonitorMIBCompliance, ciscoDmsHaClusterNodeUp=ciscoDmsHaClusterNodeUp, CDmsFunctionalStatus=CDmsFunctionalStatus, cdmsLicensedFeature=cdmsLicensedFeature, cdmsLicensableFeatures=cdmsLicensableFeatures, cdmsNumVideoPortalDevices=cdmsNumVideoPortalDevices, cdmsNumAlarms=cdmsNumAlarms, cdmsSystem=cdmsSystem, cdmsLicensedFeatureEntry=cdmsLicensedFeatureEntry, cdmsHaVpClusterMemberVip=cdmsHaVpClusterMemberVip, cdmsHaClusterLastVpStatusChangeTime=cdmsHaClusterLastVpStatusChangeTime, cdmsHaClusterLastDmmStatusChangeTime=cdmsHaClusterLastDmmStatusChangeTime, cdmsHaVpClusterMemberIsPrimary=cdmsHaVpClusterMemberIsPrimary, cdmsNumEvents=cdmsNumEvents, ciscoDmsSystemGroup=ciscoDmsSystemGroup, ciscoDamGroup=ciscoDamGroup, cdmsHaClusterLastStatusChangeVpAddrType=cdmsHaClusterLastStatusChangeVpAddrType, cdmsSecurityConfiguration=cdmsSecurityConfiguration, cdmsHaVpClusterNumClusters=cdmsHaVpClusterNumClusters, cdmsLicensedFeatureLimitRev1=cdmsLicensedFeatureLimitRev1, cdmsInventoryElementAddress=cdmsInventoryElementAddress, cdmsMediaPlayerAddrTakenEnable=cdmsMediaPlayerAddrTakenEnable, cdmsLicensedFeatureLimit=cdmsLicensedFeatureLimit, cdmsHaClusterHistClusterName=cdmsHaClusterHistClusterName, cdmsNumAuthenRequests=cdmsNumAuthenRequests, cdmsDamGlobalCounters=cdmsDamGlobalCounters, CDmsServerType=CDmsServerType, cdmsServers=cdmsServers, cdmsNumMediaPlayerDevices=cdmsNumMediaPlayerDevices, cdmsSecurity=cdmsSecurity, cdmsNumAuthenRequestsDeclined=cdmsNumAuthenRequestsDeclined, cdmsNumAuthenRequestsApproved=cdmsNumAuthenRequestsApproved, cdmsServerState=cdmsServerState, cdmsHaClusterName=cdmsHaClusterName, CDmsLicensedFeature=CDmsLicensedFeature, cdmsHaDmmClusterMemberEntry=cdmsHaDmmClusterMemberEntry, cdmsLicensedFeatureIndex=cdmsLicensedFeatureIndex, cdmsNotifControl=cdmsNotifControl, cdmsAdministrator=cdmsAdministrator, cdmsNumMediaIngestionDevices=cdmsNumMediaIngestionDevices, cdmsInventoryElementMacAddress=cdmsInventoryElementMacAddress, cdmsServerStatus=cdmsServerStatus, ciscoDmsMediaPlayerAddrTaken=ciscoDmsMediaPlayerAddrTaken, ciscoDmsAdvancedNotificationsGroup=ciscoDmsAdvancedNotificationsGroup, cdmsMinorVersion=cdmsMinorVersion, cdmsNumActiveDmmUsers=cdmsNumActiveDmmUsers, cdmsLicensedFeatures=cdmsLicensedFeatures, cdmsHaClusterHistoryEntry=cdmsHaClusterHistoryEntry, cdmsHaClusterHistNodeAddr=cdmsHaClusterHistNodeAddr, ciscoDmsMonitorMIBNotifs=ciscoDmsMonitorMIBNotifs, cdmsEventConfiguration=cdmsEventConfiguration, ciscoDmsFeatureGroup=ciscoDmsFeatureGroup, cdmsNumUsers=cdmsNumUsers, cdmsMediaPlayerDownEnable=cdmsMediaPlayerDownEnable, cdmsHaClusterHistId=cdmsHaClusterHistId, cdmsAuthenticationMode=cdmsAuthenticationMode, cdmsHaClusterNumTotalDmms=cdmsHaClusterNumTotalDmms, ciscoDmsUserGroup=ciscoDmsUserGroup, cdmsHaVpClusterMemberTable=cdmsHaVpClusterMemberTable, CDmsElementType=CDmsElementType, ciscoDmsMediaPlayerRegistered=ciscoDmsMediaPlayerRegistered, cdmsHaClusterHistNodeType=cdmsHaClusterHistNodeType, cdmsLastUserLastChange=cdmsLastUserLastChange, cdmsNumNotificationRate=cdmsNumNotificationRate, cdmsHaDmmClusterMemberTable=cdmsHaDmmClusterMemberTable, cdmsInventoryTable=cdmsInventoryTable, cdmsInventoryGlobalCounters=cdmsInventoryGlobalCounters, ciscoDmsSecurityGroup=ciscoDmsSecurityGroup, cdmsHaClusterNumActiveDmms=cdmsHaClusterNumActiveDmms, cdmsFeatureSummary=cdmsFeatureSummary, ciscoDmsInventoryGroup=ciscoDmsInventoryGroup, cdmsServerTable=cdmsServerTable, cdmsServerType=cdmsServerType, cdmsHaVpClusterMemberAddress=cdmsHaVpClusterMemberAddress, cdmsInventoryElementState=cdmsInventoryElementState, ciscoDmsMonitorMIBCompliances=ciscoDmsMonitorMIBCompliances, cdmsHaDmmClusterMemberAddress=cdmsHaDmmClusterMemberAddress, cdmsPatchVersion=cdmsPatchVersion, cdmsLicensedFeatureTable=cdmsLicensedFeatureTable, cdmsHaClusterLastVpStatusChangeVpAddress=cdmsHaClusterLastVpStatusChangeVpAddress, cdmsHaClusterStatusHistory=cdmsHaClusterStatusHistory, cdmsHaClusterDmmVipType=cdmsHaClusterDmmVipType, cdmsMajorVersion=cdmsMajorVersion, cdmsHaClusterStatus=cdmsHaClusterStatus, cdmsLicensedFeatureInstallDate=cdmsLicensedFeatureInstallDate, cdmsServerEntry=cdmsServerEntry)
