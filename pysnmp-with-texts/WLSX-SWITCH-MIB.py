#
# PySNMP MIB module WLSX-SWITCH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WLSX-SWITCH-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:36:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
wlsxEnterpriseMibModules, = mibBuilder.importSymbols("ARUBA-MIB", "wlsxEnterpriseMibModules")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
snmpModules, NotificationType, TimeTicks, ModuleIdentity, Gauge32, iso, IpAddress, Counter64, MibIdentifier, Unsigned32, Counter32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "snmpModules", "NotificationType", "TimeTicks", "ModuleIdentity", "Gauge32", "iso", "IpAddress", "Counter64", "MibIdentifier", "Unsigned32", "Counter32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Bits")
TextualConvention, TruthValue, StorageType, TimeInterval, MacAddress, TDomain, PhysAddress, DisplayString, TAddress, TestAndIncr, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "StorageType", "TimeInterval", "MacAddress", "TDomain", "PhysAddress", "DisplayString", "TAddress", "TestAndIncr", "RowStatus")
wlsxSwitchMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1))
wlsxSwitchMIB.setRevisions(('1908-04-16 02:06',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wlsxSwitchMIB.setRevisionsDescriptions(('The initial revision.',))
if mibBuilder.loadTexts: wlsxSwitchMIB.setLastUpdated('0804160206Z')
if mibBuilder.loadTexts: wlsxSwitchMIB.setOrganization('Aruba Wireless Networks')
if mibBuilder.loadTexts: wlsxSwitchMIB.setContactInfo('Postal: 1322 Crossman Avenue Sunnyvale, CA 94089 E-mail: dl-support@arubanetworks.com Phone: +1 408 227 4500')
if mibBuilder.loadTexts: wlsxSwitchMIB.setDescription('This MIB module defines MIB objects which provide System level information about the Aruba switches.')
wlsxSystemXGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1))
wlsxUserInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2))
wlsxAccessPointInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3))
wlsxSwitchTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100))
wlsxHostname = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxHostname.setStatus('current')
if mibBuilder.loadTexts: wlsxHostname.setDescription('Name of the switch.')
wlsxModelName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxModelName.setStatus('current')
if mibBuilder.loadTexts: wlsxModelName.setDescription('Model Name of the switch.')
wlsxSwitchIp = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxSwitchIp.setStatus('current')
if mibBuilder.loadTexts: wlsxSwitchIp.setDescription('Switch IP as configured by the user. This IP address uniquely identifies the switch.')
wlsxSwitchRole = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("local", 2), ("standbymaster", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxSwitchRole.setStatus('current')
if mibBuilder.loadTexts: wlsxSwitchRole.setDescription('Role of this switch in the Switch Domain.')
wlsxSwitchMasterIp = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxSwitchMasterIp.setStatus('current')
if mibBuilder.loadTexts: wlsxSwitchMasterIp.setDescription(' Master IP of the switch ')
wlsxSwitchListTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 6), )
if mibBuilder.loadTexts: wlsxSwitchListTable.setStatus('current')
if mibBuilder.loadTexts: wlsxSwitchListTable.setDescription('This Table will list all the switches in the Switch Domain. It will be populated only on the master switch. Local switches return empty table. ')
wlsxSwitchListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 6, 1), ).setIndexNames((0, "WLSX-SWITCH-MIB", "switchListSwitchIPAddress"))
if mibBuilder.loadTexts: wlsxSwitchListEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxSwitchListEntry.setDescription('Switch List Entry')
switchListSwitchIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: switchListSwitchIPAddress.setStatus('current')
if mibBuilder.loadTexts: switchListSwitchIPAddress.setDescription(' IP Address of the switch. ')
switchListSwitchRole = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("local", 2), ("standbymaster", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchListSwitchRole.setStatus('current')
if mibBuilder.loadTexts: switchListSwitchRole.setDescription(' Role of the Switch. ')
wlsxSwitchLicenseCount = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxSwitchLicenseCount.setStatus('current')
if mibBuilder.loadTexts: wlsxSwitchLicenseCount.setDescription(' The number of licenses installed on the switch ')
wlsxSwitchLicenseTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 8), )
if mibBuilder.loadTexts: wlsxSwitchLicenseTable.setStatus('current')
if mibBuilder.loadTexts: wlsxSwitchLicenseTable.setDescription('This table lists all licenses installed on the switch. ')
wlsxLicenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 8, 1), ).setIndexNames((0, "WLSX-SWITCH-MIB", "licenseIndex"))
if mibBuilder.loadTexts: wlsxLicenseEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxLicenseEntry.setDescription('License Entry')
licenseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 8, 1, 1), Integer32())
if mibBuilder.loadTexts: licenseIndex.setStatus('current')
if mibBuilder.loadTexts: licenseIndex.setDescription(' License ID number ')
licenseKey = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseKey.setStatus('current')
if mibBuilder.loadTexts: licenseKey.setDescription(' License Key ')
licenseInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseInstalled.setStatus('current')
if mibBuilder.loadTexts: licenseInstalled.setDescription(' License installation time ')
licenseExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseExpires.setStatus('current')
if mibBuilder.loadTexts: licenseExpires.setDescription(' License expiry time ')
licenseFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseFlags.setStatus('current')
if mibBuilder.loadTexts: licenseFlags.setDescription(' License flags; E - enabled; A - auto-generated; R - reboot required to activate ')
licenseService = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseService.setStatus('current')
if mibBuilder.loadTexts: licenseService.setDescription(' The service enabled by this license. ')
wlsxSysXProcessorTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 9), )
if mibBuilder.loadTexts: wlsxSysXProcessorTable.setStatus('current')
if mibBuilder.loadTexts: wlsxSysXProcessorTable.setDescription(' The table of processors contained by the switch. ')
wlsxSysXProcessorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 9, 1), ).setIndexNames((0, "WLSX-SWITCH-MIB", "sysXProcessorID"))
if mibBuilder.loadTexts: wlsxSysXProcessorEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxSysXProcessorEntry.setDescription(' An entry for one processor contained by the switch. ')
sysXProcessorID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 9, 1, 1), Integer32())
if mibBuilder.loadTexts: sysXProcessorID.setStatus('current')
if mibBuilder.loadTexts: sysXProcessorID.setDescription(' Processor Index. ')
sysXProcessorDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysXProcessorDescr.setStatus('current')
if mibBuilder.loadTexts: sysXProcessorDescr.setDescription(' description of the processor. ')
sysXProcessorLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysXProcessorLoad.setStatus('current')
if mibBuilder.loadTexts: sysXProcessorLoad.setDescription(' The average, over the last minute, of the percentage of time that this processor was not idle. ')
wlsxSysXStorageTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 10), )
if mibBuilder.loadTexts: wlsxSysXStorageTable.setStatus('current')
if mibBuilder.loadTexts: wlsxSysXStorageTable.setDescription(' The table of Storage-devices contained by the switch. ')
wlsxSysXStorageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 10, 1), ).setIndexNames((0, "WLSX-SWITCH-MIB", "sysXStorageIndex"))
if mibBuilder.loadTexts: wlsxSysXStorageEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxSysXStorageEntry.setDescription(' An entry for one long-term storage device contained by the switch. ')
sysXStorageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: sysXStorageIndex.setStatus('current')
if mibBuilder.loadTexts: sysXStorageIndex.setDescription(' ')
sysXStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ram", 1), ("flashMemory", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysXStorageType.setStatus('current')
if mibBuilder.loadTexts: sysXStorageType.setDescription(' ')
sysXStorageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysXStorageSize.setStatus('current')
if mibBuilder.loadTexts: sysXStorageSize.setDescription(' size of the storage filesystem in MB. ')
sysXStorageUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysXStorageUsed.setStatus('current')
if mibBuilder.loadTexts: sysXStorageUsed.setDescription(' size of the storage filesystem in MB. ')
sysXStorageName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysXStorageName.setStatus('current')
if mibBuilder.loadTexts: sysXStorageName.setDescription(' name of the storage filesystem. ')
wlsxSysXMemoryTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 11), )
if mibBuilder.loadTexts: wlsxSysXMemoryTable.setStatus('current')
if mibBuilder.loadTexts: wlsxSysXMemoryTable.setDescription(' The memory status of the switch ')
wlsxSysXMemoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 11, 1), ).setIndexNames((0, "WLSX-SWITCH-MIB", "sysXMemoryIndex"))
if mibBuilder.loadTexts: wlsxSysXMemoryEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxSysXMemoryEntry.setDescription(' An entry for one memory region on the switch. Currently, only the CP region is monitored. ')
sysXMemoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 11, 1, 1), Integer32())
if mibBuilder.loadTexts: sysXMemoryIndex.setStatus('current')
if mibBuilder.loadTexts: sysXMemoryIndex.setDescription(' ')
sysXMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysXMemorySize.setStatus('current')
if mibBuilder.loadTexts: sysXMemorySize.setDescription(' Total memory in KB. ')
sysXMemoryUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysXMemoryUsed.setStatus('current')
if mibBuilder.loadTexts: sysXMemoryUsed.setDescription(' Used memory in KB. ')
sysXMemoryFree = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysXMemoryFree.setStatus('current')
if mibBuilder.loadTexts: sysXMemoryFree.setDescription(' Free memory in KB. ')
wlsxSwitchLicenseSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxSwitchLicenseSerialNumber.setStatus('current')
if mibBuilder.loadTexts: wlsxSwitchLicenseSerialNumber.setDescription(' The license serial number of the switch ')
wlsxSwitchUserTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1), )
if mibBuilder.loadTexts: wlsxSwitchUserTable.setStatus('current')
if mibBuilder.loadTexts: wlsxSwitchUserTable.setDescription(' This Table lists all the users (both wired and wireless) currently connected to the switch. Users are identified by their IP address. ')
wlsxSwitchUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1), ).setIndexNames((0, "WLSX-SWITCH-MIB", "userIpAddress"))
if mibBuilder.loadTexts: wlsxSwitchUserEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxSwitchUserEntry.setDescription('User Entry')
userIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: userIpAddress.setStatus('current')
if mibBuilder.loadTexts: userIpAddress.setDescription(' IP Address from which the user connected to the switch. ')
userPhyAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userPhyAddress.setStatus('current')
if mibBuilder.loadTexts: userPhyAddress.setDescription(' Physical Address of the station from which the user connected to the switch. ')
userName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userName.setStatus('current')
if mibBuilder.loadTexts: userName.setDescription(' Name of the User. ')
userRole = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userRole.setStatus('current')
if mibBuilder.loadTexts: userRole.setDescription(' The Role configured for this user. ')
userUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userUpTime.setStatus('current')
if mibBuilder.loadTexts: userUpTime.setDescription(' Time since the user is connected to the switch. ')
userAuthenticationMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("other", 2), ("web", 3), ("dot1x", 4), ("vpn", 5), ("mac", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userAuthenticationMethod.setStatus('current')
if mibBuilder.loadTexts: userAuthenticationMethod.setDescription(' Authentication mechanism used by the user to connect to the switch. ')
userLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userLocation.setStatus('current')
if mibBuilder.loadTexts: userLocation.setDescription(' Location of the access point (in Building.Floor.... format), which the user used to connect to the switch. ')
userServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userServerName.setStatus('current')
if mibBuilder.loadTexts: userServerName.setDescription(' Name of the Back-end authentication server, used to authenticate the user. ')
userConnectedVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userConnectedVlan.setStatus('current')
if mibBuilder.loadTexts: userConnectedVlan.setDescription(' Vlan on which the user is connected to the switch. ')
userConnectedSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userConnectedSlot.setStatus('current')
if mibBuilder.loadTexts: userConnectedSlot.setDescription(' Slot on switch, where the user connection terminates. ')
userConnectedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userConnectedPort.setStatus('current')
if mibBuilder.loadTexts: userConnectedPort.setDescription(' Port on switch, where the user connection terminates. ')
userBWContractName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userBWContractName.setStatus('current')
if mibBuilder.loadTexts: userBWContractName.setDescription(' Name of the Bandwidth Contract applied to this user. ')
userBWContractUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("user", 1), ("shared", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userBWContractUsage.setStatus('current')
if mibBuilder.loadTexts: userBWContractUsage.setDescription(' Indicates how the Bandwidth Contract is used. ')
userConnectedModule = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userConnectedModule.setStatus('current')
if mibBuilder.loadTexts: userConnectedModule.setDescription(' The module to which the user is connected, if wired. ')
wlsxSwitchStationMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 2), )
if mibBuilder.loadTexts: wlsxSwitchStationMgmtTable.setStatus('current')
if mibBuilder.loadTexts: wlsxSwitchStationMgmtTable.setDescription(' This Table lists all the wireless stations associated with the Access points connected to this switch. ')
wlsxSwitchStationMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 2, 1), ).setIndexNames((0, "WLSX-SWITCH-MIB", "staPhyAddress"), (0, "WLSX-SWITCH-MIB", "staAccessPointBSSID"))
if mibBuilder.loadTexts: wlsxSwitchStationMgmtEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxSwitchStationMgmtEntry.setDescription('Station Management Entry')
staPhyAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: staPhyAddress.setStatus('current')
if mibBuilder.loadTexts: staPhyAddress.setDescription(' The Physical Address of the Station. ')
staAccessPointBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 2, 1, 2), MacAddress())
if mibBuilder.loadTexts: staAccessPointBSSID.setStatus('current')
if mibBuilder.loadTexts: staAccessPointBSSID.setDescription(' BSSID of the Access point through which the station is connected to the switch ')
staUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staUserName.setStatus('current')
if mibBuilder.loadTexts: staUserName.setDescription(' Name of the User connecting from this station. ')
staUserRole = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staUserRole.setStatus('current')
if mibBuilder.loadTexts: staUserRole.setDescription(' User Role. ')
staAssociationID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssociationID.setStatus('current')
if mibBuilder.loadTexts: staAssociationID.setDescription(' AID with which the Station is associated with this system. ')
staAccessPointESSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAccessPointESSID.setStatus('current')
if mibBuilder.loadTexts: staAccessPointESSID.setDescription(' ESSID of the Access point ')
staSignalToNoiseRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staSignalToNoiseRatio.setStatus('current')
if mibBuilder.loadTexts: staSignalToNoiseRatio.setDescription(' SNR for the BSSID. ')
staTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("rate1Mbps", 1), ("rate2Mbps", 2), ("rate5point5Mbps", 3), ("rate6Mbps", 4), ("rate9Mbps", 5), ("rate11Mbps", 6), ("rate12Mbps", 7), ("rate18Mbps", 8), ("rate24Mbps", 9), ("rate36Mbps", 10), ("rate48Mbps", 11), ("rate54Mbps", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTransmitRate.setStatus('current')
if mibBuilder.loadTexts: staTransmitRate.setDescription(' Indicates Transmit rate of the channel ')
staReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("rate1Mbps", 1), ("rate2Mbps", 2), ("rate5point5Mbps", 3), ("rate6Mbps", 4), ("rate9Mbps", 5), ("rate11Mbps", 6), ("rate12Mbps", 7), ("rate18Mbps", 8), ("rate24Mbps", 9), ("rate36Mbps", 10), ("rate48Mbps", 11), ("rate54Mbps", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staReceiveRate.setStatus('current')
if mibBuilder.loadTexts: staReceiveRate.setDescription(' Indicates Receive rate of the channel ')
wlsxSwitchStationStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 3), )
if mibBuilder.loadTexts: wlsxSwitchStationStatsTable.setStatus('current')
if mibBuilder.loadTexts: wlsxSwitchStationStatsTable.setDescription(' This Table lists the statistics of all the wireless stations associated with the Access points connected to this switch. ')
wlsxSwitchStationStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 3, 1), ).setIndexNames((0, "WLSX-SWITCH-MIB", "staPhyAddress"), (0, "WLSX-SWITCH-MIB", "staAccessPointBSSID"))
if mibBuilder.loadTexts: wlsxSwitchStationStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxSwitchStationStatsEntry.setDescription('Station Statistics Entry')
staTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTxPackets.setStatus('current')
if mibBuilder.loadTexts: staTxPackets.setDescription(' Total Packets Transmitted by the station. ')
staTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTxBytes.setStatus('current')
if mibBuilder.loadTexts: staTxBytes.setDescription(' Total Bytes Transmitted by the station. ')
staRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staRxPackets.setStatus('current')
if mibBuilder.loadTexts: staRxPackets.setDescription(' Total Packets Received by the Station ')
staRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staRxBytes.setStatus('current')
if mibBuilder.loadTexts: staRxBytes.setDescription(' Total Bytes Received by the station. ')
staBwRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staBwRate.setStatus('current')
if mibBuilder.loadTexts: staBwRate.setDescription(' Bandwidth Rate in Kbps of the station. ')
staFrameRetryRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staFrameRetryRate.setStatus('current')
if mibBuilder.loadTexts: staFrameRetryRate.setDescription(' Station Frame Retry Rate. ')
staFrameLowSpeedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staFrameLowSpeedRate.setStatus('current')
if mibBuilder.loadTexts: staFrameLowSpeedRate.setDescription(' Station Frame Low Speed Rate. ')
staFrameNonUnicastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staFrameNonUnicastRate.setStatus('current')
if mibBuilder.loadTexts: staFrameNonUnicastRate.setDescription(' Station Frame Non Unicast Packet Rate. ')
staFrameFragmentationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staFrameFragmentationRate.setStatus('current')
if mibBuilder.loadTexts: staFrameFragmentationRate.setDescription(' Station Frame Fragmentation Rate. ')
staFrameReceiveErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staFrameReceiveErrorRate.setStatus('current')
if mibBuilder.loadTexts: staFrameReceiveErrorRate.setDescription(' Station Frame Receive Error Rate. ')
wlsxSwitchTotalNumAccessPoints = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxSwitchTotalNumAccessPoints.setStatus('current')
if mibBuilder.loadTexts: wlsxSwitchTotalNumAccessPoints.setDescription(' Total Number of Access Points Connected to this switch. ')
wlsxSwitchTotalNumStationsAssociated = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxSwitchTotalNumStationsAssociated.setStatus('current')
if mibBuilder.loadTexts: wlsxSwitchTotalNumStationsAssociated.setDescription(' Total Number of Stations Associated to this switch. ')
wlsxSwitchAccessPointTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3), )
if mibBuilder.loadTexts: wlsxSwitchAccessPointTable.setStatus('current')
if mibBuilder.loadTexts: wlsxSwitchAccessPointTable.setDescription(' This Table lists all the Access Points Connected to this switch. ')
wlsxSwitchAccessPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1), ).setIndexNames((0, "WLSX-SWITCH-MIB", "apBSSID"))
if mibBuilder.loadTexts: wlsxSwitchAccessPointEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxSwitchAccessPointEntry.setDescription('Station Management Entry')
apBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: apBSSID.setStatus('current')
if mibBuilder.loadTexts: apBSSID.setDescription(' The Physical Address of the Access Point. ')
apESSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apESSID.setStatus('current')
if mibBuilder.loadTexts: apESSID.setDescription(' ESSID of the Access Point ')
apSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSlot.setStatus('current')
if mibBuilder.loadTexts: apSlot.setDescription(' Slot to which the Access Point is connected. ')
apPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPort.setStatus('current')
if mibBuilder.loadTexts: apPort.setDescription(' Port to which the Access Point is connected. ')
apIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpAddress.setStatus('current')
if mibBuilder.loadTexts: apIpAddress.setDescription(' Address of the Access Point. ')
apPhyType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot11a", 1), ("dot11b", 2), ("dot11g", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPhyType.setStatus('current')
if mibBuilder.loadTexts: apPhyType.setDescription(' Physical Layer Protocol support of the AP. ')
apType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ap", 1), ("am", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apType.setStatus('current')
if mibBuilder.loadTexts: apType.setDescription(' Indicates whether the Access point is an Air Monitor or regular AP. ')
apCurrentChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 165))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCurrentChannel.setStatus('current')
if mibBuilder.loadTexts: apCurrentChannel.setDescription(' The Current Operating frequency channel. ')
apLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLocation.setStatus('current')
if mibBuilder.loadTexts: apLocation.setDescription(' Location of the AP defined in Building.Floor.... mode. ')
apTotalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTotalTime.setStatus('current')
if mibBuilder.loadTexts: apTotalTime.setDescription(' Time since the Ap is connected to the switch ')
apInactiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apInactiveTime.setStatus('current')
if mibBuilder.loadTexts: apInactiveTime.setDescription(' Time since the Ap has been inactive ')
apLoadBalancing = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLoadBalancing.setStatus('current')
if mibBuilder.loadTexts: apLoadBalancing.setDescription(' Indicates whether Load balancing is enabled or not. ')
apChannelNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChannelNoise.setStatus('current')
if mibBuilder.loadTexts: apChannelNoise.setDescription(' Indicates the noise on the channel ')
apSignalToNoiseRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSignalToNoiseRatio.setStatus('current')
if mibBuilder.loadTexts: apSignalToNoiseRatio.setDescription(' SNR for the BSSID. ')
apTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("rate1Mbps", 1), ("rate2Mbps", 2), ("rate5point5Mbps", 3), ("rate6Mbps", 4), ("rate9Mbps", 5), ("rate11Mbps", 6), ("rate12Mbps", 7), ("rate18Mbps", 8), ("rate24Mbps", 9), ("rate36Mbps", 10), ("rate48Mbps", 11), ("rate54Mbps", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTransmitRate.setStatus('current')
if mibBuilder.loadTexts: apTransmitRate.setDescription(' Indicates Transmit rate of the channel ')
apReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("rate1Mbps", 1), ("rate2Mbps", 2), ("rate5point5Mbps", 3), ("rate6Mbps", 4), ("rate9Mbps", 5), ("rate11Mbps", 6), ("rate12Mbps", 7), ("rate18Mbps", 8), ("rate24Mbps", 9), ("rate36Mbps", 10), ("rate48Mbps", 11), ("rate54Mbps", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apReceiveRate.setStatus('current')
if mibBuilder.loadTexts: apReceiveRate.setDescription(' Indicates Receive rate of the channel ')
wlsxSwitchGlobalAPTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 4), )
if mibBuilder.loadTexts: wlsxSwitchGlobalAPTable.setStatus('deprecated')
if mibBuilder.loadTexts: wlsxSwitchGlobalAPTable.setDescription(' This Table lists all the Access Points Connected in the Switch Domain. This table is valid only on a Master switch. On a Local switch, the table is empty. ')
wlsxSwitchGlobalAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 4, 1), ).setIndexNames((0, "WLSX-SWITCH-MIB", "globalAPLocation"), (0, "WLSX-SWITCH-MIB", "globalAPAddress"))
if mibBuilder.loadTexts: wlsxSwitchGlobalAPEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wlsxSwitchGlobalAPEntry.setDescription('Station Management Entry')
globalAPLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: globalAPLocation.setStatus('deprecated')
if mibBuilder.loadTexts: globalAPLocation.setDescription(' Physical Location of the AP, defined in Building.Floor.Location format. ')
globalAPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 4, 1, 2), IpAddress())
if mibBuilder.loadTexts: globalAPAddress.setStatus('deprecated')
if mibBuilder.loadTexts: globalAPAddress.setDescription(' Address of the Access Point. ')
globalAPLocalSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalAPLocalSwitch.setStatus('deprecated')
if mibBuilder.loadTexts: globalAPLocalSwitch.setDescription(' IP Address of the Local Switch this Access Point is connected to. ')
globalAPdot11aPhyAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 4, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalAPdot11aPhyAddr.setStatus('deprecated')
if mibBuilder.loadTexts: globalAPdot11aPhyAddr.setDescription(' Physical Mac address of the module supporting dot11a in the Access Point. AP can have support for both dot11a and dot11b physical layer. ')
globalAPdot11bPhyAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 4, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalAPdot11bPhyAddr.setStatus('deprecated')
if mibBuilder.loadTexts: globalAPdot11bPhyAddr.setDescription(' Physical Mac address of the module supporting dot11b in the Access Point. AP can have support for both dot11a and dot11b physical layer. ')
globalAPState = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalAPState.setStatus('deprecated')
if mibBuilder.loadTexts: globalAPState.setDescription(' State of the AP. 1 -- AP is UP. 2 -- AP is DOWN. 3-7 -- Values are deprecated. ')
globalAPdot11gPhyAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 4, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalAPdot11gPhyAddr.setStatus('deprecated')
if mibBuilder.loadTexts: globalAPdot11gPhyAddr.setDescription(' Physical Mac address of the module supporting dot11g in the Access Point. AP can have support for both a,b,g physical layer. ')
wlsxSwitchAccessPointStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5), )
if mibBuilder.loadTexts: wlsxSwitchAccessPointStatsTable.setStatus('current')
if mibBuilder.loadTexts: wlsxSwitchAccessPointStatsTable.setDescription(' This Table lists the statistics of all the Access Points Connected to this switch. ')
wlsxSwitchAccessPointStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1), ).setIndexNames((0, "WLSX-SWITCH-MIB", "apBSSID"))
if mibBuilder.loadTexts: wlsxSwitchAccessPointStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxSwitchAccessPointStatsEntry.setDescription(' Ap Stats Entry. ')
apStatsChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 165))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apStatsChannel.setStatus('current')
if mibBuilder.loadTexts: apStatsChannel.setDescription(' Channel on which the ap is operating. ')
apChannelBwRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChannelBwRate.setStatus('current')
if mibBuilder.loadTexts: apChannelBwRate.setDescription(' Bandwidth Rate in Kbps of the apChannel. ')
apChannelFrameRetryRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChannelFrameRetryRate.setStatus('current')
if mibBuilder.loadTexts: apChannelFrameRetryRate.setDescription(' Ap Channel Frame Retry Rate. ')
apChannelFrameLowSpeedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChannelFrameLowSpeedRate.setStatus('current')
if mibBuilder.loadTexts: apChannelFrameLowSpeedRate.setDescription(' Ap Channel Frame Low Speed Rate. ')
apChannelFrameNonUnicastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChannelFrameNonUnicastRate.setStatus('current')
if mibBuilder.loadTexts: apChannelFrameNonUnicastRate.setDescription(' Ap Channel Frame Non Unicast Packet Rate. ')
apChannelFrameFragmentationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChannelFrameFragmentationRate.setStatus('current')
if mibBuilder.loadTexts: apChannelFrameFragmentationRate.setDescription(' Ap Channel Frame Fragmentation Rate. ')
apChannelFrameReceiveErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChannelFrameReceiveErrorRate.setStatus('current')
if mibBuilder.loadTexts: apChannelFrameReceiveErrorRate.setDescription(' Ap Channel Frame Receive Error Rate. ')
apBSSTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apBSSTxPackets.setStatus('current')
if mibBuilder.loadTexts: apBSSTxPackets.setDescription(' Total Packets Transmitted by the ap on this BSSID. ')
apBSSTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apBSSTxBytes.setStatus('current')
if mibBuilder.loadTexts: apBSSTxBytes.setDescription(' Total Bytes Transmitted by the ap on this BSSID. ')
apBSSRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apBSSRxPackets.setStatus('current')
if mibBuilder.loadTexts: apBSSRxPackets.setDescription(' Total Packets Received by the ap on this BSSID ')
apBSSRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apBSSRxBytes.setStatus('current')
if mibBuilder.loadTexts: apBSSRxBytes.setDescription(' Total Bytes Received by the ap on this BSSID. ')
apBSSBwRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apBSSBwRate.setStatus('current')
if mibBuilder.loadTexts: apBSSBwRate.setDescription(' Bandwidth Rate in Kbps of the ap on this BSSID. ')
apBSSFrameRetryRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apBSSFrameRetryRate.setStatus('current')
if mibBuilder.loadTexts: apBSSFrameRetryRate.setDescription(' Frame Retry Rate on this BSSID. ')
apBSSFrameLowSpeedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apBSSFrameLowSpeedRate.setStatus('current')
if mibBuilder.loadTexts: apBSSFrameLowSpeedRate.setDescription(' Frame Low Speed Rate on this BSSID. ')
apBSSFrameNonUnicastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apBSSFrameNonUnicastRate.setStatus('current')
if mibBuilder.loadTexts: apBSSFrameNonUnicastRate.setDescription(' Frame Non Unicast Packet Rate on this BSSID. ')
apBSSFrameFragmentationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apBSSFrameFragmentationRate.setStatus('current')
if mibBuilder.loadTexts: apBSSFrameFragmentationRate.setDescription(' Frame Fragmentation Rate on this BSSID. ')
apBSSFrameReceiveErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apBSSFrameReceiveErrorRate.setStatus('current')
if mibBuilder.loadTexts: apBSSFrameReceiveErrorRate.setDescription(' Frame Receive Error Rate on this BSSID. ')
wlsxSwitchTrapObjectsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100))
wlsxAuthServerName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxAuthServerName.setStatus('current')
if mibBuilder.loadTexts: wlsxAuthServerName.setDescription(' This Object is used in the traps to indicate the Authentication Server, used for Authentication. ')
wlsxAuthServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxAuthServerTimeout.setStatus('current')
if mibBuilder.loadTexts: wlsxAuthServerTimeout.setDescription(' This Object is used in the traps to indicate the Authentication Server Timeout. ')
wlsxFanNumber = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxFanNumber.setStatus('current')
if mibBuilder.loadTexts: wlsxFanNumber.setDescription(' This Object is used in the traps to indicate a failing fan number. ')
wlsxLineCardNumber = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxLineCardNumber.setStatus('current')
if mibBuilder.loadTexts: wlsxLineCardNumber.setDescription(' This Object is used in the traps to indicate a Line Card in the switch. ')
wlsxVoltageType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxVoltageType.setStatus('current')
if mibBuilder.loadTexts: wlsxVoltageType.setDescription(' This Object is used in the traps to indicate the type of the voltage. ')
wlsxVoltageValue = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxVoltageValue.setStatus('current')
if mibBuilder.loadTexts: wlsxVoltageValue.setDescription(' This Object is used in the traps to indicate the voltage value in Float. ')
wlsxTemperatureValue = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxTemperatureValue.setStatus('current')
if mibBuilder.loadTexts: wlsxTemperatureValue.setDescription(' This Object is used in the traps to indicate Temperature Value. ')
wlsxProcessName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxProcessName.setStatus('current')
if mibBuilder.loadTexts: wlsxProcessName.setDescription(' This Object is used in the traps to indicate a process name. ')
wlsxStationMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 10), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxStationMacAddress.setStatus('current')
if mibBuilder.loadTexts: wlsxStationMacAddress.setDescription(' The Physical Address of the Station. ')
wlsxStationBlackListReason = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 100))).clone(namedValues=NamedValues(("userDefined", 1), ("mitmAttack", 2), ("authFailure", 3), ("pingFlood", 4), ("sessionFlood", 5), ("synFlood", 6), ("sessionBlacklist", 7), ("ipSpoofing", 8), ("other", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxStationBlackListReason.setStatus('current')
if mibBuilder.loadTexts: wlsxStationBlackListReason.setDescription(' The Reason for which a station is black listed. ')
wlsxSpoofedIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxSpoofedIpAddress.setStatus('current')
if mibBuilder.loadTexts: wlsxSpoofedIpAddress.setDescription(' This Object is used in a trap to identify a Spoofed IP Address. ')
wlsxSpoofedOldPhyAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 13), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxSpoofedOldPhyAddress.setStatus('current')
if mibBuilder.loadTexts: wlsxSpoofedOldPhyAddress.setDescription(' This Object is used in a trap to identify a Old Mac Address. ')
wlsxSpoofedNewPhyAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 14), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxSpoofedNewPhyAddress.setStatus('current')
if mibBuilder.loadTexts: wlsxSpoofedNewPhyAddress.setDescription(' This Object is used in a trap to identify a New Mac Address. ')
wlsxDBName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxDBName.setStatus('current')
if mibBuilder.loadTexts: wlsxDBName.setDescription(' This Object is used in a trap to identify name of the Database. ')
wlsxDBUserName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxDBUserName.setStatus('current')
if mibBuilder.loadTexts: wlsxDBUserName.setDescription(' This Object is used in a trap to identify name of the Database user. ')
wlsxDBIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxDBIpAddress.setStatus('current')
if mibBuilder.loadTexts: wlsxDBIpAddress.setDescription(' This Object is used in a trap to identify the IpAddress of the DB. ')
wlsxDBType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mssql", 1), ("mysql", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxDBType.setStatus('current')
if mibBuilder.loadTexts: wlsxDBType.setDescription(' This Object is used in a trap to identify the Port of the user. ')
wlsxVrID = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxVrID.setStatus('current')
if mibBuilder.loadTexts: wlsxVrID.setDescription(' This Object contains the Virtual Router Identifier. ')
wlsxVrMasterIp = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxVrMasterIp.setStatus('current')
if mibBuilder.loadTexts: wlsxVrMasterIp.setDescription(' This Object contains the Master IP address. ')
wlsxVrrpOperState = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("initialize", 1), ("backup", 2), ("master", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxVrrpOperState.setStatus('current')
if mibBuilder.loadTexts: wlsxVrrpOperState.setDescription(' This Object represents the VRRP operational state. ')
wlsxApTxPower = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxApTxPower.setStatus('current')
if mibBuilder.loadTexts: wlsxApTxPower.setDescription(' This Object contains the value of the AP Transmit Power. ')
wlsxESIServerGrpName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxESIServerGrpName.setStatus('current')
if mibBuilder.loadTexts: wlsxESIServerGrpName.setDescription(' This Object represents the External Services Interface (ESI) Server Group name ')
wlsxESIServerName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxESIServerName.setStatus('current')
if mibBuilder.loadTexts: wlsxESIServerName.setDescription(' This Object represents the External Services Interface (ESI) Server name ')
wlsxESIServerIpaddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 25), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxESIServerIpaddress.setStatus('current')
if mibBuilder.loadTexts: wlsxESIServerIpaddress.setDescription(' This Object represents the External Services Interface (ESI) Server IP Address ')
wlsxLicenseDaysRemaining = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxLicenseDaysRemaining.setStatus('current')
if mibBuilder.loadTexts: wlsxLicenseDaysRemaining.setDescription(' This Object represents number of the days remaining prior to a license expiry ')
wlsxSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxSlotNumber.setStatus('current')
if mibBuilder.loadTexts: wlsxSlotNumber.setDescription(' This Object is used in the traps to indicate a Line Card in the switch. This value matches the value of sysExtCardSlot. ')
wlsxSwitchIPChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1001)).setObjects(("WLSX-SWITCH-MIB", "wlsxSwitchIp"))
if mibBuilder.loadTexts: wlsxSwitchIPChanged.setStatus('current')
if mibBuilder.loadTexts: wlsxSwitchIPChanged.setDescription('A trap which indicates that the switch IP address has changed.')
wlsxSwitchRoleChange = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1002)).setObjects(("WLSX-SWITCH-MIB", "wlsxSwitchRole"))
if mibBuilder.loadTexts: wlsxSwitchRoleChange.setStatus('current')
if mibBuilder.loadTexts: wlsxSwitchRoleChange.setDescription('A trap which indicates that the role of the switch has changed in the Domain.')
wlsxUserEntryCreated = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1003)).setObjects(("WLSX-SWITCH-MIB", "userPhyAddress"))
if mibBuilder.loadTexts: wlsxUserEntryCreated.setStatus('current')
if mibBuilder.loadTexts: wlsxUserEntryCreated.setDescription(' A trap which indicates that a New user is created. ')
wlsxUserEntryDeleted = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1004)).setObjects(("WLSX-SWITCH-MIB", "userPhyAddress"))
if mibBuilder.loadTexts: wlsxUserEntryDeleted.setStatus('current')
if mibBuilder.loadTexts: wlsxUserEntryDeleted.setDescription(' A trap which indicates that a user is deleted. ')
wlsxUserEntryAuthenticated = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1005)).setObjects(("WLSX-SWITCH-MIB", "userPhyAddress"), ("WLSX-SWITCH-MIB", "userName"), ("WLSX-SWITCH-MIB", "userAuthenticationMethod"), ("WLSX-SWITCH-MIB", "userRole"))
if mibBuilder.loadTexts: wlsxUserEntryAuthenticated.setStatus('current')
if mibBuilder.loadTexts: wlsxUserEntryAuthenticated.setDescription(' A trap which indicates that a user is Authenticated. ')
wlsxUserEntryDeAuthenticated = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1006)).setObjects(("WLSX-SWITCH-MIB", "userPhyAddress"))
if mibBuilder.loadTexts: wlsxUserEntryDeAuthenticated.setStatus('current')
if mibBuilder.loadTexts: wlsxUserEntryDeAuthenticated.setDescription(' A trap which indicates that a user is Deauthenticated. ')
wlsxUserAuthenticationFailed = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1007)).setObjects(("WLSX-SWITCH-MIB", "userPhyAddress"))
if mibBuilder.loadTexts: wlsxUserAuthenticationFailed.setStatus('current')
if mibBuilder.loadTexts: wlsxUserAuthenticationFailed.setDescription(' A trap which indicates that a user authentication has failed. ')
wlsxAuthServerReqTimedOut = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1008)).setObjects(("WLSX-SWITCH-MIB", "wlsxAuthServerName"))
if mibBuilder.loadTexts: wlsxAuthServerReqTimedOut.setStatus('current')
if mibBuilder.loadTexts: wlsxAuthServerReqTimedOut.setDescription(' A trap which indicates that the authentication server request timed out. ')
wlsxAuthServerTimedOut = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1009)).setObjects(("WLSX-SWITCH-MIB", "wlsxAuthServerName"), ("WLSX-SWITCH-MIB", "wlsxAuthServerTimeout"))
if mibBuilder.loadTexts: wlsxAuthServerTimedOut.setStatus('current')
if mibBuilder.loadTexts: wlsxAuthServerTimedOut.setDescription(' A trap which indicates that the authentication server timed out. ')
wlsxAuthServerIsUp = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1010)).setObjects(("WLSX-SWITCH-MIB", "wlsxAuthServerName"))
if mibBuilder.loadTexts: wlsxAuthServerIsUp.setStatus('current')
if mibBuilder.loadTexts: wlsxAuthServerIsUp.setDescription(' A trap which indicates that the authentication server is up. ')
wlsxAuthMaxUserEntries = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1011))
if mibBuilder.loadTexts: wlsxAuthMaxUserEntries.setStatus('current')
if mibBuilder.loadTexts: wlsxAuthMaxUserEntries.setDescription(' A trap which indicates that the User Entries table is full and cannot add any more entries. ')
wlsxAuthMaxAclEntries = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1012))
if mibBuilder.loadTexts: wlsxAuthMaxAclEntries.setStatus('current')
if mibBuilder.loadTexts: wlsxAuthMaxAclEntries.setDescription(' A trap which indicates that the Acl Entries table is full and cannot add any more entries. ')
wlsxAuthMaxBWContracts = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1013))
if mibBuilder.loadTexts: wlsxAuthMaxBWContracts.setStatus('current')
if mibBuilder.loadTexts: wlsxAuthMaxBWContracts.setDescription(' A trap which indicates that the switch reached the maximum number of configurable Bandwidth contracts. ')
wlsxPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1014))
if mibBuilder.loadTexts: wlsxPowerSupplyFailure.setStatus('current')
if mibBuilder.loadTexts: wlsxPowerSupplyFailure.setDescription(' A trap which indicates that the power supply has failed. ')
wlsxFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1015)).setObjects(("WLSX-SWITCH-MIB", "wlsxFanNumber"))
if mibBuilder.loadTexts: wlsxFanFailure.setStatus('current')
if mibBuilder.loadTexts: wlsxFanFailure.setDescription(' A trap which indicates that the fan has failed. ')
wlsxOutOfRangeVoltage = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1016)).setObjects(("WLSX-SWITCH-MIB", "wlsxVoltageType"), ("WLSX-SWITCH-MIB", "wlsxVoltageValue"))
if mibBuilder.loadTexts: wlsxOutOfRangeVoltage.setStatus('current')
if mibBuilder.loadTexts: wlsxOutOfRangeVoltage.setDescription(' A trap which indicates that the switch received out of range voltage. ')
wlsxOutOfRangeTemperature = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1017)).setObjects(("WLSX-SWITCH-MIB", "wlsxTemperatureValue"))
if mibBuilder.loadTexts: wlsxOutOfRangeTemperature.setStatus('current')
if mibBuilder.loadTexts: wlsxOutOfRangeTemperature.setDescription(' A trap which indicates that the Temperature is out of bounds. ')
wlsxLCInserted = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1018)).setObjects(("WLSX-SWITCH-MIB", "wlsxLineCardNumber"), ("WLSX-SWITCH-MIB", "wlsxSlotNumber"))
if mibBuilder.loadTexts: wlsxLCInserted.setStatus('current')
if mibBuilder.loadTexts: wlsxLCInserted.setDescription(' A trap which indicates that a Line card is inserted. ')
wlsxSCInserted = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1019))
if mibBuilder.loadTexts: wlsxSCInserted.setStatus('current')
if mibBuilder.loadTexts: wlsxSCInserted.setDescription(' A trap which indicates that a supervisory card is inserted. ')
wlsxGBICInserted = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1020))
if mibBuilder.loadTexts: wlsxGBICInserted.setStatus('current')
if mibBuilder.loadTexts: wlsxGBICInserted.setDescription(' A trap which indicates that a GBIC is inserted in a line card. ')
wlsxProcessDied = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1021)).setObjects(("WLSX-SWITCH-MIB", "wlsxProcessName"))
if mibBuilder.loadTexts: wlsxProcessDied.setStatus('current')
if mibBuilder.loadTexts: wlsxProcessDied.setDescription(' A trap which indicates that a process has died. ')
wlsxProcessExceedsMemoryLimits = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1022)).setObjects(("WLSX-SWITCH-MIB", "wlsxProcessName"))
if mibBuilder.loadTexts: wlsxProcessExceedsMemoryLimits.setStatus('current')
if mibBuilder.loadTexts: wlsxProcessExceedsMemoryLimits.setDescription(' A trap which indicates that a process is consuming large amounts of memory. ')
wlsxLowOnFlashSpace = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1023))
if mibBuilder.loadTexts: wlsxLowOnFlashSpace.setStatus('current')
if mibBuilder.loadTexts: wlsxLowOnFlashSpace.setDescription(' A trap which indicates that the switch is running low on flash space. ')
wlsxLowMemory = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1024))
if mibBuilder.loadTexts: wlsxLowMemory.setStatus('current')
if mibBuilder.loadTexts: wlsxLowMemory.setDescription(' A trap which indicates that the system free memory is low. ')
wlsxFanTrayRemoved = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1025))
if mibBuilder.loadTexts: wlsxFanTrayRemoved.setStatus('current')
if mibBuilder.loadTexts: wlsxFanTrayRemoved.setDescription(' A trap which indicates that the fan tray is removed. ')
wlsxFanTrayInserted = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1026))
if mibBuilder.loadTexts: wlsxFanTrayInserted.setStatus('current')
if mibBuilder.loadTexts: wlsxFanTrayInserted.setDescription(' A trap which indicates that the fan tray is removed. ')
wlsxLCRemoved = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1027)).setObjects(("WLSX-SWITCH-MIB", "wlsxLineCardNumber"), ("WLSX-SWITCH-MIB", "wlsxSlotNumber"))
if mibBuilder.loadTexts: wlsxLCRemoved.setStatus('current')
if mibBuilder.loadTexts: wlsxLCRemoved.setDescription(' A trap which indicates that a Line card is removed. ')
wlsxSCRemoved = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1028))
if mibBuilder.loadTexts: wlsxSCRemoved.setStatus('current')
if mibBuilder.loadTexts: wlsxSCRemoved.setDescription(' A trap which indicates that a supervisory card is removed. ')
wlsxPowerSupplyMissing = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1029))
if mibBuilder.loadTexts: wlsxPowerSupplyMissing.setStatus('current')
if mibBuilder.loadTexts: wlsxPowerSupplyMissing.setDescription(' A trap which indicates that the power supply is missing. ')
wlsxAccessPointIsUp = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1030)).setObjects(("WLSX-SWITCH-MIB", "apLocation"), ("WLSX-SWITCH-MIB", "apIpAddress"))
if mibBuilder.loadTexts: wlsxAccessPointIsUp.setStatus('deprecated')
if mibBuilder.loadTexts: wlsxAccessPointIsUp.setDescription(' A trap which indicates that an Access point at Location apLocation and Address apIpAddress is up. ')
wlsxAccessPointIsDown = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1031)).setObjects(("WLSX-SWITCH-MIB", "apLocation"), ("WLSX-SWITCH-MIB", "apIpAddress"))
if mibBuilder.loadTexts: wlsxAccessPointIsDown.setStatus('deprecated')
if mibBuilder.loadTexts: wlsxAccessPointIsDown.setDescription(' A trap which indicates that an Access point at Location apLocation and Address apIpAddress is down. ')
wlsxCoverageHoleDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1032)).setObjects(("WLSX-SWITCH-MIB", "apLocation"), ("WLSX-SWITCH-MIB", "apIpAddress"), ("WLSX-SWITCH-MIB", "wlsxStationMacAddress"))
if mibBuilder.loadTexts: wlsxCoverageHoleDetected.setStatus('current')
if mibBuilder.loadTexts: wlsxCoverageHoleDetected.setDescription(' A trap which indicates that an Access point at Location apLocation and Address apIpAddress has detected a Coverage Hole. ')
wlsxChannelChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1033)).setObjects(("WLSX-SWITCH-MIB", "apLocation"), ("WLSX-SWITCH-MIB", "apIpAddress"), ("WLSX-SWITCH-MIB", "apCurrentChannel"))
if mibBuilder.loadTexts: wlsxChannelChanged.setStatus('deprecated')
if mibBuilder.loadTexts: wlsxChannelChanged.setDescription(' A trap which indicates that an Access point at Location apLocation and Address apIpAddress has changed the channel to apCurrentChannel. ')
wlsxStationAddedToBlackList = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1034)).setObjects(("WLSX-SWITCH-MIB", "wlsxStationMacAddress"), ("WLSX-SWITCH-MIB", "wlsxStationBlackListReason"))
if mibBuilder.loadTexts: wlsxStationAddedToBlackList.setStatus('current')
if mibBuilder.loadTexts: wlsxStationAddedToBlackList.setDescription(' A trap which indicates that a station with address wlsxStationMacAddress is black listed for wlsxStationBlackListReason reason. ')
wlsxStationRemovedFromBlackList = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1035)).setObjects(("WLSX-SWITCH-MIB", "wlsxStationMacAddress"))
if mibBuilder.loadTexts: wlsxStationRemovedFromBlackList.setStatus('current')
if mibBuilder.loadTexts: wlsxStationRemovedFromBlackList.setDescription(' A trap which indicates that a station with address wlsxStationMacAddress is removed from black list. ')
wlsxIpSpoofingDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1036)).setObjects(("WLSX-SWITCH-MIB", "wlsxSpoofedIpAddress"), ("WLSX-SWITCH-MIB", "wlsxSpoofedOldPhyAddress"), ("WLSX-SWITCH-MIB", "wlsxSpoofedNewPhyAddress"))
if mibBuilder.loadTexts: wlsxIpSpoofingDetected.setStatus('current')
if mibBuilder.loadTexts: wlsxIpSpoofingDetected.setDescription(' A trap indicating that the switch detected IP Spoofing. ')
wlsxDBCommunicationFailure = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1037)).setObjects(("WLSX-SWITCH-MIB", "wlsxDBName"), ("WLSX-SWITCH-MIB", "wlsxDBUserName"), ("WLSX-SWITCH-MIB", "wlsxDBIpAddress"), ("WLSX-SWITCH-MIB", "wlsxDBType"))
if mibBuilder.loadTexts: wlsxDBCommunicationFailure.setStatus('current')
if mibBuilder.loadTexts: wlsxDBCommunicationFailure.setDescription(' A trap to indicate that communication with Database failed. ')
wlsxVrrpStateChange = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1038)).setObjects(("WLSX-SWITCH-MIB", "wlsxVrID"), ("WLSX-SWITCH-MIB", "wlsxVrMasterIp"), ("WLSX-SWITCH-MIB", "wlsxVrrpOperState"))
if mibBuilder.loadTexts: wlsxVrrpStateChange.setStatus('current')
if mibBuilder.loadTexts: wlsxVrrpStateChange.setDescription(' A trap which indicates that VRRP State has changed on the switch. ')
wlsxAPRadioAttributesChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1039)).setObjects(("WLSX-SWITCH-MIB", "apLocation"), ("WLSX-SWITCH-MIB", "apIpAddress"), ("WLSX-SWITCH-MIB", "apCurrentChannel"), ("WLSX-SWITCH-MIB", "wlsxApTxPower"))
if mibBuilder.loadTexts: wlsxAPRadioAttributesChanged.setStatus('current')
if mibBuilder.loadTexts: wlsxAPRadioAttributesChanged.setDescription(' A trap which indicates changes in the Radio attributes of an Access Point at location apLocation and address apIpAddress. Ap channel is apCurrentChannel, and Transmit power is apTxPower. ')
wlsxESIServerUp = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1040)).setObjects(("WLSX-SWITCH-MIB", "wlsxESIServerGrpName"), ("WLSX-SWITCH-MIB", "wlsxESIServerName"), ("WLSX-SWITCH-MIB", "wlsxESIServerIpaddress"))
if mibBuilder.loadTexts: wlsxESIServerUp.setStatus('current')
if mibBuilder.loadTexts: wlsxESIServerUp.setDescription(' A trap which indicates that a ESI server <wlsxESIServerName> in group <wlsxESIServerGrpName> with <wlsxESIServerIpaddress> is up ')
wlsxESIServerDown = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1041)).setObjects(("WLSX-SWITCH-MIB", "wlsxESIServerGrpName"), ("WLSX-SWITCH-MIB", "wlsxESIServerName"), ("WLSX-SWITCH-MIB", "wlsxESIServerIpaddress"))
if mibBuilder.loadTexts: wlsxESIServerDown.setStatus('current')
if mibBuilder.loadTexts: wlsxESIServerDown.setDescription(' A trap which indicates that a ESI server <wlsxESIServerName> in group <wlsxESIServerGrpName> with <wlsxESIServerIpaddress> is down ')
wlsxLicenseExpiry = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1042)).setObjects(("WLSX-SWITCH-MIB", "wlsxLicenseDaysRemaining"))
if mibBuilder.loadTexts: wlsxLicenseExpiry.setStatus('current')
if mibBuilder.loadTexts: wlsxLicenseExpiry.setDescription(' A trap which indicates that one or more licenses on the switch will expire in <wlsxLicenseDaysRemaining> days ')
mibBuilder.exportSymbols("WLSX-SWITCH-MIB", wlsxSwitchListTable=wlsxSwitchListTable, wlsxSpoofedOldPhyAddress=wlsxSpoofedOldPhyAddress, apPhyType=apPhyType, wlsxAuthServerReqTimedOut=wlsxAuthServerReqTimedOut, sysXStorageType=sysXStorageType, wlsxSwitchTraps=wlsxSwitchTraps, wlsxLicenseDaysRemaining=wlsxLicenseDaysRemaining, apReceiveRate=apReceiveRate, wlsxProcessDied=wlsxProcessDied, apBSSFrameLowSpeedRate=apBSSFrameLowSpeedRate, wlsxDBUserName=wlsxDBUserName, sysXStorageName=sysXStorageName, globalAPState=globalAPState, wlsxLicenseExpiry=wlsxLicenseExpiry, apSlot=apSlot, wlsxSwitchListEntry=wlsxSwitchListEntry, wlsxModelName=wlsxModelName, sysXMemoryFree=sysXMemoryFree, apSignalToNoiseRatio=apSignalToNoiseRatio, wlsxVoltageValue=wlsxVoltageValue, staFrameRetryRate=staFrameRetryRate, apBSSFrameRetryRate=apBSSFrameRetryRate, wlsxSlotNumber=wlsxSlotNumber, userAuthenticationMethod=userAuthenticationMethod, wlsxESIServerIpaddress=wlsxESIServerIpaddress, sysXProcessorLoad=sysXProcessorLoad, wlsxAuthMaxAclEntries=wlsxAuthMaxAclEntries, wlsxChannelChanged=wlsxChannelChanged, staFrameNonUnicastRate=staFrameNonUnicastRate, wlsxLineCardNumber=wlsxLineCardNumber, wlsxSCInserted=wlsxSCInserted, userIpAddress=userIpAddress, wlsxOutOfRangeTemperature=wlsxOutOfRangeTemperature, wlsxSwitchStationStatsEntry=wlsxSwitchStationStatsEntry, wlsxAuthMaxBWContracts=wlsxAuthMaxBWContracts, sysXMemoryIndex=sysXMemoryIndex, wlsxSwitchStationMgmtTable=wlsxSwitchStationMgmtTable, staRxPackets=staRxPackets, wlsxSwitchGlobalAPTable=wlsxSwitchGlobalAPTable, apBSSFrameFragmentationRate=apBSSFrameFragmentationRate, apBSSFrameReceiveErrorRate=apBSSFrameReceiveErrorRate, wlsxStationMacAddress=wlsxStationMacAddress, userUpTime=userUpTime, apInactiveTime=apInactiveTime, sysXStorageSize=sysXStorageSize, wlsxUserInfoGroup=wlsxUserInfoGroup, wlsxSwitchUserEntry=wlsxSwitchUserEntry, staFrameFragmentationRate=staFrameFragmentationRate, licenseInstalled=licenseInstalled, apChannelFrameLowSpeedRate=apChannelFrameLowSpeedRate, wlsxHostname=wlsxHostname, apChannelNoise=apChannelNoise, licenseIndex=licenseIndex, userConnectedSlot=userConnectedSlot, apIpAddress=apIpAddress, apType=apType, wlsxLCRemoved=wlsxLCRemoved, staPhyAddress=staPhyAddress, staAssociationID=staAssociationID, wlsxFanNumber=wlsxFanNumber, wlsxSwitchAccessPointEntry=wlsxSwitchAccessPointEntry, wlsxSwitchIp=wlsxSwitchIp, wlsxSwitchLicenseSerialNumber=wlsxSwitchLicenseSerialNumber, staRxBytes=staRxBytes, wlsxUserEntryCreated=wlsxUserEntryCreated, wlsxUserEntryDeleted=wlsxUserEntryDeleted, wlsxVrrpStateChange=wlsxVrrpStateChange, wlsxSwitchRoleChange=wlsxSwitchRoleChange, apBSSID=apBSSID, wlsxSysXStorageTable=wlsxSysXStorageTable, wlsxSwitchTrapObjectsGroup=wlsxSwitchTrapObjectsGroup, wlsxSwitchStationStatsTable=wlsxSwitchStationStatsTable, wlsxSwitchTotalNumAccessPoints=wlsxSwitchTotalNumAccessPoints, wlsxFanTrayInserted=wlsxFanTrayInserted, apChannelFrameReceiveErrorRate=apChannelFrameReceiveErrorRate, licenseKey=licenseKey, wlsxPowerSupplyFailure=wlsxPowerSupplyFailure, staUserName=staUserName, apBSSRxPackets=apBSSRxPackets, wlsxStationBlackListReason=wlsxStationBlackListReason, wlsxLowMemory=wlsxLowMemory, apPort=apPort, wlsxSwitchIPChanged=wlsxSwitchIPChanged, wlsxDBCommunicationFailure=wlsxDBCommunicationFailure, sysXStorageUsed=sysXStorageUsed, wlsxESIServerUp=wlsxESIServerUp, licenseExpires=licenseExpires, userLocation=userLocation, wlsxAPRadioAttributesChanged=wlsxAPRadioAttributesChanged, wlsxSwitchAccessPointStatsEntry=wlsxSwitchAccessPointStatsEntry, userName=userName, apTransmitRate=apTransmitRate, wlsxStationAddedToBlackList=wlsxStationAddedToBlackList, wlsxSysXMemoryEntry=wlsxSysXMemoryEntry, wlsxESIServerName=wlsxESIServerName, staAccessPointBSSID=staAccessPointBSSID, apBSSTxBytes=apBSSTxBytes, switchListSwitchRole=switchListSwitchRole, wlsxAuthServerTimedOut=wlsxAuthServerTimedOut, wlsxAuthMaxUserEntries=wlsxAuthMaxUserEntries, wlsxLowOnFlashSpace=wlsxLowOnFlashSpace, wlsxAccessPointIsUp=wlsxAccessPointIsUp, wlsxCoverageHoleDetected=wlsxCoverageHoleDetected, userRole=userRole, licenseService=licenseService, apBSSRxBytes=apBSSRxBytes, licenseFlags=licenseFlags, wlsxSysXStorageEntry=wlsxSysXStorageEntry, wlsxSystemXGroup=wlsxSystemXGroup, userServerName=userServerName, wlsxSwitchTotalNumStationsAssociated=wlsxSwitchTotalNumStationsAssociated, globalAPdot11gPhyAddr=globalAPdot11gPhyAddr, apBSSBwRate=apBSSBwRate, wlsxFanFailure=wlsxFanFailure, wlsxSCRemoved=wlsxSCRemoved, wlsxSwitchAccessPointStatsTable=wlsxSwitchAccessPointStatsTable, wlsxSwitchLicenseTable=wlsxSwitchLicenseTable, staTxPackets=staTxPackets, wlsxSwitchLicenseCount=wlsxSwitchLicenseCount, wlsxSysXProcessorEntry=wlsxSysXProcessorEntry, userConnectedPort=userConnectedPort, staSignalToNoiseRatio=staSignalToNoiseRatio, staTxBytes=staTxBytes, userBWContractName=userBWContractName, sysXProcessorID=sysXProcessorID, apBSSFrameNonUnicastRate=apBSSFrameNonUnicastRate, staFrameReceiveErrorRate=staFrameReceiveErrorRate, wlsxPowerSupplyMissing=wlsxPowerSupplyMissing, apLoadBalancing=apLoadBalancing, sysXMemoryUsed=sysXMemoryUsed, apChannelFrameFragmentationRate=apChannelFrameFragmentationRate, wlsxOutOfRangeVoltage=wlsxOutOfRangeVoltage, wlsxSysXMemoryTable=wlsxSysXMemoryTable, wlsxDBIpAddress=wlsxDBIpAddress, wlsxSwitchMasterIp=wlsxSwitchMasterIp, wlsxIpSpoofingDetected=wlsxIpSpoofingDetected, wlsxSwitchAccessPointTable=wlsxSwitchAccessPointTable, wlsxAuthServerTimeout=wlsxAuthServerTimeout, wlsxDBName=wlsxDBName, wlsxStationRemovedFromBlackList=wlsxStationRemovedFromBlackList, apESSID=apESSID, userConnectedModule=userConnectedModule, wlsxSwitchRole=wlsxSwitchRole, wlsxVoltageType=wlsxVoltageType, apCurrentChannel=apCurrentChannel, apTotalTime=apTotalTime, wlsxSwitchMIB=wlsxSwitchMIB, apLocation=apLocation, staAccessPointESSID=staAccessPointESSID, wlsxSpoofedNewPhyAddress=wlsxSpoofedNewPhyAddress, globalAPdot11bPhyAddr=globalAPdot11bPhyAddr, wlsxAuthServerName=wlsxAuthServerName, wlsxESIServerGrpName=wlsxESIServerGrpName, wlsxLicenseEntry=wlsxLicenseEntry, userPhyAddress=userPhyAddress, wlsxAccessPointIsDown=wlsxAccessPointIsDown, wlsxUserEntryAuthenticated=wlsxUserEntryAuthenticated, globalAPLocation=globalAPLocation, sysXStorageIndex=sysXStorageIndex, wlsxDBType=wlsxDBType, wlsxVrrpOperState=wlsxVrrpOperState, wlsxSwitchUserTable=wlsxSwitchUserTable, staUserRole=staUserRole, apChannelBwRate=apChannelBwRate, apStatsChannel=apStatsChannel, apChannelFrameRetryRate=apChannelFrameRetryRate, wlsxESIServerDown=wlsxESIServerDown, wlsxLCInserted=wlsxLCInserted, staBwRate=staBwRate, apBSSTxPackets=apBSSTxPackets, wlsxGBICInserted=wlsxGBICInserted, switchListSwitchIPAddress=switchListSwitchIPAddress, apChannelFrameNonUnicastRate=apChannelFrameNonUnicastRate, staReceiveRate=staReceiveRate, wlsxAccessPointInfoGroup=wlsxAccessPointInfoGroup, staFrameLowSpeedRate=staFrameLowSpeedRate, globalAPdot11aPhyAddr=globalAPdot11aPhyAddr, userConnectedVlan=userConnectedVlan, userBWContractUsage=userBWContractUsage, wlsxFanTrayRemoved=wlsxFanTrayRemoved, wlsxSwitchStationMgmtEntry=wlsxSwitchStationMgmtEntry, wlsxUserEntryDeAuthenticated=wlsxUserEntryDeAuthenticated, sysXMemorySize=sysXMemorySize, wlsxSwitchGlobalAPEntry=wlsxSwitchGlobalAPEntry, globalAPLocalSwitch=globalAPLocalSwitch, wlsxTemperatureValue=wlsxTemperatureValue, wlsxVrID=wlsxVrID, sysXProcessorDescr=sysXProcessorDescr, wlsxProcessExceedsMemoryLimits=wlsxProcessExceedsMemoryLimits, wlsxSpoofedIpAddress=wlsxSpoofedIpAddress, wlsxApTxPower=wlsxApTxPower, globalAPAddress=globalAPAddress, wlsxProcessName=wlsxProcessName, wlsxVrMasterIp=wlsxVrMasterIp, wlsxSysXProcessorTable=wlsxSysXProcessorTable, PYSNMP_MODULE_ID=wlsxSwitchMIB, wlsxUserAuthenticationFailed=wlsxUserAuthenticationFailed, wlsxAuthServerIsUp=wlsxAuthServerIsUp, staTransmitRate=staTransmitRate)
