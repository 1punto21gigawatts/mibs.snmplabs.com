#
# PySNMP MIB module ClusterX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ClusterX-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:36:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, ObjectIdentity, IpAddress, TimeTicks, NotificationType, enterprises, Gauge32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, ModuleIdentity, Unsigned32, Integer32, Counter32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ObjectIdentity", "IpAddress", "TimeTicks", "NotificationType", "enterprises", "Gauge32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "ModuleIdentity", "Unsigned32", "Integer32", "Counter32", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
veritassoftware = MibIdentifier((1, 3, 6, 1, 4, 1, 1302))
veritasproducts = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3))
clusterX = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3, 7))
clxMibStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3, 7, 1))
clxTrapData = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3, 7, 2))
clxMibStatsMajRev = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clxMibStatsMajRev.setStatus('mandatory')
if mibBuilder.loadTexts: clxMibStatsMajRev.setDescription('The major revision level of the ClusterX SNMP extension agent MIB.')
clxMibStatsMinRev = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clxMibStatsMinRev.setStatus('mandatory')
if mibBuilder.loadTexts: clxMibStatsMinRev.setDescription('The minor revision level of the ClusterX SNMP extension agent MIB.')
clxMibStatsVendorName = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clxMibStatsVendorName.setStatus('mandatory')
if mibBuilder.loadTexts: clxMibStatsVendorName.setDescription('The name of the vendor supplying the ClusterX SNMP extension agent MIB.')
clxTrapDataString01 = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 7, 2, 1), DisplayString())
if mibBuilder.loadTexts: clxTrapDataString01.setStatus('mandatory')
if mibBuilder.loadTexts: clxTrapDataString01.setDescription('Custom string 1 (Varbind #1) for ClusterX trap.')
clxTrapDataNodeName = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 7, 2, 2), DisplayString())
if mibBuilder.loadTexts: clxTrapDataNodeName.setStatus('mandatory')
if mibBuilder.loadTexts: clxTrapDataNodeName.setDescription('Name of the MSCS Node.')
clxTrapDataClusterName = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 7, 2, 3), DisplayString())
if mibBuilder.loadTexts: clxTrapDataClusterName.setStatus('mandatory')
if mibBuilder.loadTexts: clxTrapDataClusterName.setDescription('Name of the MSCS Cluster.')
clxTrapDataResourceName = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 7, 2, 4), DisplayString())
if mibBuilder.loadTexts: clxTrapDataResourceName.setStatus('mandatory')
if mibBuilder.loadTexts: clxTrapDataResourceName.setDescription('Name of the MSCS Resource.')
clxTrapDataResourceType = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 7, 2, 5), DisplayString())
if mibBuilder.loadTexts: clxTrapDataResourceType.setStatus('mandatory')
if mibBuilder.loadTexts: clxTrapDataResourceType.setDescription('Type of the MSCS Resource.')
clxTrapDataSeverityValue = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 7, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("info", 0), ("warning", 1), ("error", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clxTrapDataSeverityValue.setStatus('mandatory')
if mibBuilder.loadTexts: clxTrapDataSeverityValue.setDescription('The severity value type.')
clxTrapDataNetwork = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 7, 2, 7), DisplayString())
if mibBuilder.loadTexts: clxTrapDataNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: clxTrapDataNetwork.setDescription('Network Info.')
clxTrapEventDate = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 7, 2, 8), DisplayString())
if mibBuilder.loadTexts: clxTrapEventDate.setStatus('mandatory')
if mibBuilder.loadTexts: clxTrapEventDate.setDescription('Date of the Event created in NT event log.')
clxTrapEventTime = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 7, 2, 9), DisplayString())
if mibBuilder.loadTexts: clxTrapEventTime.setStatus('mandatory')
if mibBuilder.loadTexts: clxTrapEventTime.setDescription('Time of the Event created in NT event log.')
clxTrapEventSource = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 7, 2, 10), DisplayString())
if mibBuilder.loadTexts: clxTrapEventSource.setStatus('mandatory')
if mibBuilder.loadTexts: clxTrapEventSource.setDescription('Source of the Event created in NT event log.')
clxTrapEventCategory = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 7, 2, 11), DisplayString())
if mibBuilder.loadTexts: clxTrapEventCategory.setStatus('mandatory')
if mibBuilder.loadTexts: clxTrapEventCategory.setDescription('Category of the Event created in NT event log.')
clxTrapEventID = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 7, 2, 12), DisplayString())
if mibBuilder.loadTexts: clxTrapEventID.setStatus('mandatory')
if mibBuilder.loadTexts: clxTrapEventID.setDescription('ID of the Event created in NT event log.')
clxTrapEventUser = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 7, 2, 13), DisplayString())
if mibBuilder.loadTexts: clxTrapEventUser.setStatus('mandatory')
if mibBuilder.loadTexts: clxTrapEventUser.setDescription('User which created the event in NT event log.')
clxTrapEventComputer = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 7, 2, 14), DisplayString())
if mibBuilder.loadTexts: clxTrapEventComputer.setStatus('mandatory')
if mibBuilder.loadTexts: clxTrapEventComputer.setDescription('Computer which created Event in NT event log.')
clxTrapDataNetworkName = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 7, 2, 15), DisplayString())
if mibBuilder.loadTexts: clxTrapDataNetworkName.setStatus('mandatory')
if mibBuilder.loadTexts: clxTrapDataNetworkName.setDescription('Network Name.')
clxTrapDataWLBSNodeName = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 7, 2, 16), DisplayString())
if mibBuilder.loadTexts: clxTrapDataWLBSNodeName.setStatus('mandatory')
if mibBuilder.loadTexts: clxTrapDataWLBSNodeName.setDescription('Name of the WLBS Node.')
clxTrapDataWLBSClusterName = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 7, 2, 17), DisplayString())
if mibBuilder.loadTexts: clxTrapDataWLBSClusterName.setStatus('mandatory')
if mibBuilder.loadTexts: clxTrapDataWLBSClusterName.setDescription('Name of the WLBS Cluster.')
clxTrapDataWLBSHostID = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 7, 2, 18), DisplayString())
if mibBuilder.loadTexts: clxTrapDataWLBSHostID.setStatus('mandatory')
if mibBuilder.loadTexts: clxTrapDataWLBSHostID.setDescription('Host ID of WLBS node.')
clxTrapDataPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 7, 2, 19), DisplayString())
if mibBuilder.loadTexts: clxTrapDataPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: clxTrapDataPortNumber.setDescription('TCP or UDP port number.')
clxTrapDataApplicationName = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 7, 2, 20), DisplayString())
if mibBuilder.loadTexts: clxTrapDataApplicationName.setStatus('mandatory')
if mibBuilder.loadTexts: clxTrapDataApplicationName.setDescription('Name of application.')
clxTrapDataApplicationFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 7, 2, 21), DisplayString())
if mibBuilder.loadTexts: clxTrapDataApplicationFailureReason.setStatus('mandatory')
if mibBuilder.loadTexts: clxTrapDataApplicationFailureReason.setDescription('Reason application is classified as failed.')
clxTrapDataApplicationFailureAction = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 7, 2, 22), DisplayString())
if mibBuilder.loadTexts: clxTrapDataApplicationFailureAction.setStatus('mandatory')
if mibBuilder.loadTexts: clxTrapDataApplicationFailureAction.setDescription('Action taken after application is classified as failed.')
clxTrapDataApplicationOnLineAction = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 7, 2, 23), DisplayString())
if mibBuilder.loadTexts: clxTrapDataApplicationOnLineAction.setStatus('mandatory')
if mibBuilder.loadTexts: clxTrapDataApplicationOnLineAction.setDescription('Action taken after application is classified as on-line.')
clusterXTrapStr = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 7) + (0,1)).setObjects(("ClusterX-MIB", "clxTrapDataString01"))
if mibBuilder.loadTexts: clusterXTrapStr.setDescription('Generic SNMP trap generated by ClusterX applications and services. Varbind #1: Custom string')
clusterXTrapNodeFail = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 7) + (0,2)).setObjects(("ClusterX-MIB", "clxTrapDataClusterName"), ("ClusterX-MIB", "clxTrapDataNodeName"))
if mibBuilder.loadTexts: clusterXTrapNodeFail.setDescription('This trap is sent when ClusterX detects the failure of a node in an MSCS cluster. Varbind #1: Cluster Name Varbind #2: Node Name')
clusterXTrapClusterFail = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 7) + (0,3)).setObjects(("ClusterX-MIB", "clxTrapDataClusterName"))
if mibBuilder.loadTexts: clusterXTrapClusterFail.setDescription('This trap is sent when ClusterX detects the failure of an MSCS cluster. Varbind #1: Cluster Name')
clusterXTrapResourceFail = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 7) + (0,4)).setObjects(("ClusterX-MIB", "clxTrapDataClusterName"), ("ClusterX-MIB", "clxTrapDataNodeName"), ("ClusterX-MIB", "clxTrapDataResourceName"))
if mibBuilder.loadTexts: clusterXTrapResourceFail.setDescription('This trap is sent when ClusterX detects the failure of a resource on an MSCS cluster. Varbind #1: Cluster Name Varbind #2: Node Name Varbind #3: Resource Name')
clusterXTrapNodeJoins = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 7) + (0,5)).setObjects(("ClusterX-MIB", "clxTrapDataClusterName"), ("ClusterX-MIB", "clxTrapDataNodeName"))
if mibBuilder.loadTexts: clusterXTrapNodeJoins.setDescription('This trap is sent when ClusterX detects that a node has joined or rejoined an MSCS cluster. Varbind #1: Cluster Name Varbind #2: Node Name')
clusterXTrapNetworkFail = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 7) + (0,6)).setObjects(("ClusterX-MIB", "clxTrapDataString01"), ("ClusterX-MIB", "clxTrapDataNetworkName"))
if mibBuilder.loadTexts: clusterXTrapNetworkFail.setDescription('This trap is sent when ClusterX detects the failure of the private or public cluster interconnects on an MSCS cluster. Varbind #1: Custom string, containing information about the network failure Varbind #2: Network Name')
clusterXTrapNormalClusterServiceLog = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 7) + (0,7)).setObjects(("ClusterX-MIB", "clxTrapEventDate"), ("ClusterX-MIB", "clxTrapEventTime"), ("ClusterX-MIB", "clxTrapEventSource"), ("ClusterX-MIB", "clxTrapEventCategory"), ("ClusterX-MIB", "clxTrapEventID"), ("ClusterX-MIB", "clxTrapEventUser"), ("ClusterX-MIB", "clxTrapEventComputer"))
if mibBuilder.loadTexts: clusterXTrapNormalClusterServiceLog.setDescription('This trap is generated when ClusterX detects that MSCS has written an informational entry in the Windows NT Event Log on a managed cluster. Varbind #1: Event Creation Date Varbind #2: Event Creation Time Varbind #3: Event Source Varbind #4: Event Category Varbind #5: Event ID Varbind #6: Event Creation User Varbind #7: Event Creation Computer')
clusterXTrapWarningClusterServiceLog = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 7) + (0,8)).setObjects(("ClusterX-MIB", "clxTrapEventDate"), ("ClusterX-MIB", "clxTrapEventTime"), ("ClusterX-MIB", "clxTrapEventSource"), ("ClusterX-MIB", "clxTrapEventCategory"), ("ClusterX-MIB", "clxTrapEventID"), ("ClusterX-MIB", "clxTrapEventUser"), ("ClusterX-MIB", "clxTrapEventComputer"))
if mibBuilder.loadTexts: clusterXTrapWarningClusterServiceLog.setDescription('This trap is generated when ClusterX detects that MSCS has written a warning entry in the Windows NT Event Log on a managed cluster. Varbind #1: Event Creation Date Varbind #2: Event Creation Time Varbind #3: Event Source Varbind #4: Event Category Varbind #5: Event ID Varbind #6: Event Creation User Varbind #7: Event Creation Computer')
clusterXTrapCriticalClusterServiceLog = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 7) + (0,9)).setObjects(("ClusterX-MIB", "clxTrapEventDate"), ("ClusterX-MIB", "clxTrapEventTime"), ("ClusterX-MIB", "clxTrapEventSource"), ("ClusterX-MIB", "clxTrapEventCategory"), ("ClusterX-MIB", "clxTrapEventID"), ("ClusterX-MIB", "clxTrapEventUser"), ("ClusterX-MIB", "clxTrapEventComputer"))
if mibBuilder.loadTexts: clusterXTrapCriticalClusterServiceLog.setDescription('This trap is generated when ClusterX detects that MSCS has written an error entry in the Windows NT Event Log on a managed cluster. Varbind #1: Event Creation Date Varbind #2: Event Creation Time Varbind #3: Event Source Varbind #4: Event Category Varbind #5: Event ID Varbind #6: Event Creation User Varbind #7: Event Creation Computer')
clusterXWLBSTrapApplicationFail = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 7) + (0,10)).setObjects(("ClusterX-MIB", "clxTrapDataWLBSClusterName"), ("ClusterX-MIB", "clxTrapDataWLBSNodeName"), ("ClusterX-MIB", "clxTrapDataApplicationName"), ("ClusterX-MIB", "clxTrapDataApplicationFailureReason"), ("ClusterX-MIB", "clxTrapDataApplicationFailureAction"))
if mibBuilder.loadTexts: clusterXWLBSTrapApplicationFail.setDescription('This trap is sent when ClusterX detects the failure of an application on a monitored node. Varbind #1: Cluster Name Varbind #2: Node Name Varbind #3: Application Name Varbind #4: Application Failure Reason Varbind #5: Application Failure Action')
clusterXWLBSTrapEventLogNormal = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 7) + (0,11)).setObjects(("ClusterX-MIB", "clxTrapEventDate"), ("ClusterX-MIB", "clxTrapEventTime"), ("ClusterX-MIB", "clxTrapEventSource"), ("ClusterX-MIB", "clxTrapEventCategory"), ("ClusterX-MIB", "clxTrapEventID"), ("ClusterX-MIB", "clxTrapEventUser"), ("ClusterX-MIB", "clxTrapEventComputer"))
if mibBuilder.loadTexts: clusterXWLBSTrapEventLogNormal.setDescription('This trap is generated when ClusterX detects that WLBS has written an informational entry in the Windows NT Event Log on a managed cluster. Varbind #1: Event Creation Date Varbind #2: Event Creation Time Varbind #3: Event Source Varbind #4: Event Category Varbind #5: Event ID Varbind #6: Event Creation User Varbind #7: Event Creation Computer')
clusterXWLBSTrapEventLogWarning = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 7) + (0,12)).setObjects(("ClusterX-MIB", "clxTrapEventDate"), ("ClusterX-MIB", "clxTrapEventTime"), ("ClusterX-MIB", "clxTrapEventSource"), ("ClusterX-MIB", "clxTrapEventCategory"), ("ClusterX-MIB", "clxTrapEventID"), ("ClusterX-MIB", "clxTrapEventUser"), ("ClusterX-MIB", "clxTrapEventComputer"))
if mibBuilder.loadTexts: clusterXWLBSTrapEventLogWarning.setDescription('This trap is generated when ClusterX detects that WLBS has written a warning entry in the Windows NT Event Log on a managed cluster. Varbind #1: Event Creation Date Varbind #2: Event Creation Time Varbind #3: Event Source Varbind #4: Event Category Varbind #5: Event ID Varbind #6: Event Creation User Varbind #7: Event Creation Computer')
clusterXWLBSTrapEventLogCritical = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 7) + (0,13)).setObjects(("ClusterX-MIB", "clxTrapEventDate"), ("ClusterX-MIB", "clxTrapEventTime"), ("ClusterX-MIB", "clxTrapEventSource"), ("ClusterX-MIB", "clxTrapEventCategory"), ("ClusterX-MIB", "clxTrapEventID"), ("ClusterX-MIB", "clxTrapEventUser"), ("ClusterX-MIB", "clxTrapEventComputer"))
if mibBuilder.loadTexts: clusterXWLBSTrapEventLogCritical.setDescription('This trap is generated when ClusterX detects that WLBS has written an error entry in the Windows NT Event Log on a managed cluster. Varbind #1: Event Creation Date Varbind #2: Event Creation Time Varbind #3: Event Source Varbind #4: Event Category Varbind #5: Event ID Varbind #6: Event Creation User Varbind #7: Event Creation Computer')
clusterXWLBSTrapSuspended = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 7) + (0,14)).setObjects(("ClusterX-MIB", "clxTrapDataWLBSClusterName"), ("ClusterX-MIB", "clxTrapDataWLBSNodeName"))
if mibBuilder.loadTexts: clusterXWLBSTrapSuspended.setDescription('This trap is sent when ClusterX detects that WLBS cluster operation control has been suspended. Varbind #1: Cluster Name Varbind #2: Node Name')
clusterXWLBSTrapResumed = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 7) + (0,15)).setObjects(("ClusterX-MIB", "clxTrapDataWLBSClusterName"), ("ClusterX-MIB", "clxTrapDataWLBSNodeName"))
if mibBuilder.loadTexts: clusterXWLBSTrapResumed.setDescription('This trap is sent when ClusterX detects that WLBS cluster operation control has been resumed. Varbind #1: Cluster Name Varbind #2: Node Name')
clusterXWLBSTrapStarted = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 7) + (0,16)).setObjects(("ClusterX-MIB", "clxTrapDataWLBSClusterName"), ("ClusterX-MIB", "clxTrapDataWLBSNodeName"))
if mibBuilder.loadTexts: clusterXWLBSTrapStarted.setDescription('This trap is sent when ClusterX detects that WLBS cluster operations have started. Varbind #1: Cluster Name Varbind #2: Node Name')
clusterXWLBSTrapStopped = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 7) + (0,17)).setObjects(("ClusterX-MIB", "clxTrapDataWLBSClusterName"), ("ClusterX-MIB", "clxTrapDataWLBSNodeName"))
if mibBuilder.loadTexts: clusterXWLBSTrapStopped.setDescription('This trap is sent when ClusterX detects that WLBS cluster operations have stopped. Varbind #1: Cluster Name Varbind #2: Node Name')
clusterXWLBSTrapDrainStopped = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 7) + (0,18)).setObjects(("ClusterX-MIB", "clxTrapDataWLBSClusterName"), ("ClusterX-MIB", "clxTrapDataWLBSNodeName"))
if mibBuilder.loadTexts: clusterXWLBSTrapDrainStopped.setDescription('This trap is sent when ClusterX detects that WLBS cluster operations have started draining; once drained, cluster operations will stop. Varbind #1: Cluster Name Varbind #2: Node Name')
clusterXWLBSTrapConverged = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 7) + (0,19)).setObjects(("ClusterX-MIB", "clxTrapDataWLBSClusterName"), ("ClusterX-MIB", "clxTrapDataWLBSNodeName"))
if mibBuilder.loadTexts: clusterXWLBSTrapConverged.setDescription('This trap is sent when ClusterX detects that a node in a WLBS cluster has converged. Varbind #1: Cluster Name Varbind #2: Node Name')
clusterXWLBSTrapEnabled = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 7) + (0,20)).setObjects(("ClusterX-MIB", "clxTrapDataWLBSClusterName"), ("ClusterX-MIB", "clxTrapDataWLBSNodeName"), ("ClusterX-MIB", "clxTrapDataPortNumber"))
if mibBuilder.loadTexts: clusterXWLBSTrapEnabled.setDescription("This trap is sent when ClusterX detects that WLBS traffic handling for the rule containing the specified port number has been enabled. Varbind #1: Cluster Name Varbind #2: Node Name Varbind #3: Port Number or 'ALL'")
clusterXWLBSTrapDisabled = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 7) + (0,21)).setObjects(("ClusterX-MIB", "clxTrapDataWLBSClusterName"), ("ClusterX-MIB", "clxTrapDataWLBSNodeName"), ("ClusterX-MIB", "clxTrapDataPortNumber"))
if mibBuilder.loadTexts: clusterXWLBSTrapDisabled.setDescription("This trap is sent when ClusterX detects that WLBS traffic handling for the rule containing the specified port number has been disabled for ALL traffic. Varbind #1: Cluster Name Varbind #2: Node Name Varbind #3: Port Number or 'ALL'")
clusterXWLBSTrapDrained = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 7) + (0,22)).setObjects(("ClusterX-MIB", "clxTrapDataWLBSClusterName"), ("ClusterX-MIB", "clxTrapDataWLBSNodeName"), ("ClusterX-MIB", "clxTrapDataPortNumber"))
if mibBuilder.loadTexts: clusterXWLBSTrapDrained.setDescription("This trap is sent when ClusterX detects that WLBS traffic handling for the rule containing the specified port number has been disabled for NEW traffic. Varbind #1: Cluster Name Varbind #2: Node Name Varbind #3: Port Number or 'ALL'")
clusterXWLBSTrapApplicationOnLine = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 7) + (0,23)).setObjects(("ClusterX-MIB", "clxTrapDataWLBSClusterName"), ("ClusterX-MIB", "clxTrapDataWLBSNodeName"), ("ClusterX-MIB", "clxTrapDataApplicationName"), ("ClusterX-MIB", "clxTrapDataApplicationOnLineAction"))
if mibBuilder.loadTexts: clusterXWLBSTrapApplicationOnLine.setDescription('This trap is sent when ClusterX detects that an application has come on line on a monitored node. Varbind #1: Cluster Name Varbind #2: Node Name Varbind #3: Application Name Varbind #4: Action Taken')
clusterXWLBSTrapReloaded = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 7) + (0,24)).setObjects(("ClusterX-MIB", "clxTrapDataWLBSClusterName"), ("ClusterX-MIB", "clxTrapDataWLBSNodeName"))
if mibBuilder.loadTexts: clusterXWLBSTrapReloaded.setDescription('This trap is sent when ClusterX detects that WLBS cluster parameters have been reloaded from the registry. Varbind #1: Cluster Name Varbind #2: Node Name')
mibBuilder.exportSymbols("ClusterX-MIB", clusterXTrapNodeJoins=clusterXTrapNodeJoins, clxTrapDataString01=clxTrapDataString01, clusterXTrapWarningClusterServiceLog=clusterXTrapWarningClusterServiceLog, clxMibStatsVendorName=clxMibStatsVendorName, clxTrapEventComputer=clxTrapEventComputer, clusterXWLBSTrapEventLogWarning=clusterXWLBSTrapEventLogWarning, clusterXWLBSTrapStopped=clusterXWLBSTrapStopped, clusterXWLBSTrapStarted=clusterXWLBSTrapStarted, clusterXWLBSTrapDrainStopped=clusterXWLBSTrapDrainStopped, clusterX=clusterX, clusterXWLBSTrapDisabled=clusterXWLBSTrapDisabled, clusterXWLBSTrapResumed=clusterXWLBSTrapResumed, clxTrapDataResourceName=clxTrapDataResourceName, clxTrapEventID=clxTrapEventID, clxTrapEventTime=clxTrapEventTime, clusterXWLBSTrapDrained=clusterXWLBSTrapDrained, clusterXWLBSTrapApplicationOnLine=clusterXWLBSTrapApplicationOnLine, clxTrapDataNodeName=clxTrapDataNodeName, clusterXTrapResourceFail=clusterXTrapResourceFail, clusterXTrapNormalClusterServiceLog=clusterXTrapNormalClusterServiceLog, clusterXTrapCriticalClusterServiceLog=clusterXTrapCriticalClusterServiceLog, clusterXWLBSTrapReloaded=clusterXWLBSTrapReloaded, clxMibStatsMajRev=clxMibStatsMajRev, clxTrapDataWLBSNodeName=clxTrapDataWLBSNodeName, clxMibStats=clxMibStats, clusterXWLBSTrapApplicationFail=clusterXWLBSTrapApplicationFail, clxTrapDataResourceType=clxTrapDataResourceType, clxTrapDataApplicationName=clxTrapDataApplicationName, clxTrapEventUser=clxTrapEventUser, clxTrapDataNetworkName=clxTrapDataNetworkName, clusterXWLBSTrapEventLogCritical=clusterXWLBSTrapEventLogCritical, clxTrapEventDate=clxTrapEventDate, clxTrapDataNetwork=clxTrapDataNetwork, clxTrapDataPortNumber=clxTrapDataPortNumber, clusterXWLBSTrapEventLogNormal=clusterXWLBSTrapEventLogNormal, clusterXTrapNetworkFail=clusterXTrapNetworkFail, veritasproducts=veritasproducts, veritassoftware=veritassoftware, clxTrapDataApplicationOnLineAction=clxTrapDataApplicationOnLineAction, clusterXWLBSTrapEnabled=clusterXWLBSTrapEnabled, clxTrapDataSeverityValue=clxTrapDataSeverityValue, clxTrapData=clxTrapData, clusterXWLBSTrapConverged=clusterXWLBSTrapConverged, clxTrapDataApplicationFailureReason=clxTrapDataApplicationFailureReason, clxTrapDataApplicationFailureAction=clxTrapDataApplicationFailureAction, clusterXTrapNodeFail=clusterXTrapNodeFail, clusterXTrapClusterFail=clusterXTrapClusterFail, clusterXWLBSTrapSuspended=clusterXWLBSTrapSuspended, clxTrapDataClusterName=clxTrapDataClusterName, clxTrapEventCategory=clxTrapEventCategory, clusterXTrapStr=clusterXTrapStr, clxTrapDataWLBSClusterName=clxTrapDataWLBSClusterName, clxMibStatsMinRev=clxMibStatsMinRev, clxTrapEventSource=clxTrapEventSource, clxTrapDataWLBSHostID=clxTrapDataWLBSHostID)
