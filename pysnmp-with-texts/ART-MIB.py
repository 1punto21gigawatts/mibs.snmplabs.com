#
# PySNMP MIB module ART-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ART-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:25:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
OwnerString, = mibBuilder.importSymbols("RMON-MIB", "OwnerString")
protocolDirEntry, DataSource, protocolDirLocalIndex = mibBuilder.importSymbols("RMON2-MIB", "protocolDirEntry", "DataSource", "protocolDirLocalIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibIdentifier, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter64, NotificationType, TimeTicks, Integer32, Gauge32, ModuleIdentity, Bits, Counter32, enterprises, iso, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter64", "NotificationType", "TimeTicks", "Integer32", "Gauge32", "ModuleIdentity", "Bits", "Counter32", "enterprises", "iso", "Unsigned32")
TextualConvention, TimeStamp, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeStamp", "DisplayString", "RowStatus")
art = ModuleIdentity((1, 3, 6, 1, 4, 1, 141, 2, 1, 5))
if mibBuilder.loadTexts: art.setLastUpdated('9910050000Z')
if mibBuilder.loadTexts: art.setOrganization('NetScout Systems, Inc.')
if mibBuilder.loadTexts: art.setContactInfo('Albin Warth Postal: NetScout Systems, Inc. 4 Technology Park Drive Westford, MA 01886 Phone: +1 978 614 4306 Email: albin@netscout.com')
if mibBuilder.loadTexts: art.setDescription('The MIB module for Application Response Time measurement.')
frontier = MibIdentifier((1, 3, 6, 1, 4, 1, 141))
mibdoc2 = MibIdentifier((1, 3, 6, 1, 4, 1, 141, 2))
netscout2 = MibIdentifier((1, 3, 6, 1, 4, 1, 141, 2, 1))
protocolDir2Table = MibTable((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 1), )
if mibBuilder.loadTexts: protocolDir2Table.setStatus('current')
if mibBuilder.loadTexts: protocolDir2Table.setDescription('Contains the ART augmentations to RMON-2.')
protocolDir2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 1, 1), )
protocolDirEntry.registerAugmentions(("ART-MIB", "protocolDir2Entry"))
protocolDir2Entry.setIndexNames(*protocolDirEntry.getIndexNames())
if mibBuilder.loadTexts: protocolDir2Entry.setStatus('current')
if mibBuilder.loadTexts: protocolDir2Entry.setDescription('Contains the ART augmentations to RMON-2.')
protocolDir2ArtConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("supportedOff", 2), ("supportedOn", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: protocolDir2ArtConfig.setStatus('current')
if mibBuilder.loadTexts: protocolDir2ArtConfig.setDescription("This object describes and configures the probe's support for application response time monitoring for the protocol. When the probe creates entries in this table for all protocols that it understands, it will set the entry to notSupported(1) if it doesn't have the capability to track application response time for this protocol. If the value of this object is supportedOff(2), the probe supports tracking of application response time, but is configured to not track response time for any control entries or data sources. If the value of this object is supportedOn(3), the probe supports tracking of application response time for this protocol, and will allow creation of entries in the artControlTable for the associated protocol. Whenever this value changes from supportedOn(3) to supportedOff(2), the probe shall delete all related entries in the artTable and artSummaryTable.")
artControlTable = MibTable((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 2), )
if mibBuilder.loadTexts: artControlTable.setStatus('current')
if mibBuilder.loadTexts: artControlTable.setDescription('This table lists the data sources (typically, probe interfaces) for which application response time collection is enabled, and additionally controls the generation of ART reports in the artTable and artSummaryTable.')
artControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 2, 1), ).setIndexNames((0, "ART-MIB", "artControlIndex"))
if mibBuilder.loadTexts: artControlEntry.setStatus('current')
if mibBuilder.loadTexts: artControlEntry.setDescription('A conceptual row in the artControlTable. Creation of a row enables ART collection and report generation for the corresponding data source. The artControlRspTime{1..6} objects are used to categorize the request-response pairs observed during an ART sample interval. The NMS is responsible to ensure that: artControlRspTime1 <= artControlRspTime2 artControlRspTime2 <= artControlRspTime3 artControlRspTime3 <= artControlRspTime4 artControlRspTime4 <= artControlRspTime5 artControlRspTime5 <= artControlRspTime6 and that: artControlRspTime6 <= artControlRspTimeout If these relationships do not hold, the probe rejects any attempt to set the artControlStatus object to active(1). Suggested default values for the time ranges are: artControlRspTime1 25 milliseconds artControlRspTime2 50 milliseconds artControlRspTime3 100 milliseconds artControlRspTime4 200 milliseconds artControlRspTime5 400 milliseconds artControlRspTime6 800 milliseconds The table is implicitly indexed by data source, using the DataSource identifier corresponding to the data source.')
artControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: artControlIndex.setStatus('current')
if mibBuilder.loadTexts: artControlIndex.setDescription('A unique index for this artControlEntry.')
artControlDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 2, 1, 2), DataSource()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: artControlDataSource.setStatus('current')
if mibBuilder.loadTexts: artControlDataSource.setDescription('The source of data for application response-time collection, i.e., the data source (typically, a probe interface) for which ART statistics are to be collected and reports generated. This object shall not be modified if the associated artControlStatus is equal to active(1).')
artControlTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: artControlTimeRemaining.setStatus('current')
if mibBuilder.loadTexts: artControlTimeRemaining.setDescription('The number of seconds remaining in the current report interval. When this value reaches zero, the probe deletes any existing reports for the associated data source, creates a new report corresponding to the just-expired interval, copies the current value of artControlDuration to this object, and starts a new collection interval. The value of this object is latched in artControlDuration whenever it is written to using SNMP, allowing automatic restart of collection using the same duration. If this object is overwritten while the associated artStatus is equal to active(1), the current collection for the associated data source is abandoned, and a new collection started using the new interval. Setting this value to 0 abandons current collection and disables report generation for the associated data source. (This is not recommended -- better to delete the row.) The probe should delay the initial countdown of this object in order to align report intervals to 12:00 AM UTC.')
artControlDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: artControlDuration.setStatus('current')
if mibBuilder.loadTexts: artControlDuration.setDescription('This object is used to latch the value of artTimeRemaining for automatic collection restart at the end of a collection interval.')
artControlRspTime1 = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: artControlRspTime1.setStatus('current')
if mibBuilder.loadTexts: artControlRspTime1.setDescription('The first of six time values used to categorize the response times observed during the report interval. This object may not be changed while artControlStatus is set to active(1).')
artControlRspTime2 = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: artControlRspTime2.setStatus('current')
if mibBuilder.loadTexts: artControlRspTime2.setDescription('The second of six time values used to categorize the response times observed during the report interval. This object may not be changed while artControlStatus is set to active(1).')
artControlRspTime3 = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: artControlRspTime3.setStatus('current')
if mibBuilder.loadTexts: artControlRspTime3.setDescription('The third of six time values used to categorize the response times observed during the report interval. This object may not be changed while artControlStatus is set to active(1).')
artControlRspTime4 = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: artControlRspTime4.setStatus('current')
if mibBuilder.loadTexts: artControlRspTime4.setDescription('The fourth of six time values used to categorize the response times observed during the report interval. This object may not be changed while artControlStatus is set to active(1).')
artControlRspTime5 = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: artControlRspTime5.setStatus('current')
if mibBuilder.loadTexts: artControlRspTime5.setDescription('The fifth of six time values used to categorize the response times observed during the report interval. This object may not be changed while artControlStatus is set to active(1).')
artControlRspTime6 = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: artControlRspTime6.setStatus('current')
if mibBuilder.loadTexts: artControlRspTime6.setDescription('The sixth of six time values used to categorize the response times observed during the report interval. This object may not be changed while artControlStatus is set to active(1).')
artControlRspTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: artControlRspTimeout.setStatus('current')
if mibBuilder.loadTexts: artControlRspTimeout.setDescription('The maximum interval that the probe will wait for a server response to a client request. Requests older than this value are abandoned, and counted as artTimeouts in the artTable and as artSummaryTimeouts in the artSummaryTable. This object may not be changed while artControlStatus is set to active(1).')
artControlRptStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 2, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artControlRptStartTime.setStatus('current')
if mibBuilder.loadTexts: artControlRptStartTime.setDescription('The time at which collection of the currently available reports was started.')
artControlRequestedSize = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: artControlRequestedSize.setStatus('current')
if mibBuilder.loadTexts: artControlRequestedSize.setDescription('The maximum number of report rows to be generated in the artTable for the associated data source. If set to -1, the maximum number of report rows shall be determined by the probe based on available resources.')
artControlGrantedSize = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: artControlGrantedSize.setStatus('current')
if mibBuilder.loadTexts: artControlGrantedSize.setDescription('The maximum number of report rows in the artTable granted by the probe for the associated data source. The value of this object may be less than the requested size.')
artControlGeneratedRpts = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: artControlGeneratedRpts.setStatus('current')
if mibBuilder.loadTexts: artControlGeneratedRpts.setDescription('The number of report sets that have been generated by this entry. The NMS may use this value to poll for the availability of a new report set. It may also sample this value before and after a sweep of the artTable or artSummaryTable in order to verify that a new report set was not generated during the sweep.')
artControlDroppedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artControlDroppedFrames.setStatus('current')
if mibBuilder.loadTexts: artControlDroppedFrames.setDescription('The total number of frames which were received by the probe and therefore not accounted for in the *StatsDropEvents, but for which the probe chose not to count for this entry for whatever reason. Most often, this event occurs when the probe is out of some resources and decides to shed load from this collection. This count does not include packets that were not counted because they had MAC-layer errors. Note that, unlike the dropEvents counter, this number is the exact number of frames dropped.')
artControlOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 2, 1, 17), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: artControlOwner.setStatus('current')
if mibBuilder.loadTexts: artControlOwner.setDescription('The entity that configured this entry and is therefore using the resources assigned to it.')
artControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 2, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: artControlStatus.setStatus('current')
if mibBuilder.loadTexts: artControlStatus.setDescription('The status of this control table entry. An entry must not exist in the active state unless all objects in the entry have an appropriate value. If this object is not equal to active(1), all associated entries in the artTable and artSummaryTable shall be deleted.')
artTable = MibTable((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 3), )
if mibBuilder.loadTexts: artTable.setStatus('current')
if mibBuilder.loadTexts: artTable.setDescription('This table provides sets of application response time reports. Each row of the table corresponds to a report. Existing reports are deleted by the probe at the expiration of each sampling period, and replaced with new reports for the just-ended period. Generation of reports is controlled using the objects in the artControlTable. The maximum number of report rows in this table is the sum of each of the artControlGrantedSize object values in the artControlTable. Note that this table is shared by all data sources, although reports are generated independently for each data source.')
artEntry = MibTableRow((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 3, 1), ).setIndexNames((0, "ART-MIB", "artControlIndex"), (0, "RMON2-MIB", "protocolDirLocalIndex"), (0, "ART-MIB", "artServerAddress"), (0, "ART-MIB", "artClientAddress"))
if mibBuilder.loadTexts: artEntry.setStatus('current')
if mibBuilder.loadTexts: artEntry.setDescription('A conceptual row in the artTable. Each row corresponds to an application response time report for an individual {data source, application-protocol, client, server} quadruple. Rows are created and deleted by the probe, and all objects are read-only to the NMS. Rows are indexed (in effect) by data source, application protocol identifier, server address, and client address. Note that only the client and server address index components correspond to objects in the table.')
artServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 3, 1, 1), OctetString())
if mibBuilder.loadTexts: artServerAddress.setStatus('current')
if mibBuilder.loadTexts: artServerAddress.setDescription('The address of the server. This is identified as an octet string with specific semantics and length as identified by the protocolDirLocalIndex component of the index.')
artClientAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 3, 1, 2), OctetString())
if mibBuilder.loadTexts: artClientAddress.setStatus('current')
if mibBuilder.loadTexts: artClientAddress.setDescription('The address of the client. This is identified as an octet string with specific semantics and length as identified by the protocolDirLocalIndex component of the index.')
artAvgRspTime = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: artAvgRspTime.setStatus('current')
if mibBuilder.loadTexts: artAvgRspTime.setDescription("The average response time, in milliseconds, observed during the report interval. Specification of milliseconds as the time units does not require the probe to maintain one-millisecond time granularity. Response time is measured as the number of milliseconds, as observed by the probe, between the final packet of an application-layer request PDU from client to server and the first packet of a response PDU from server client. This object is the arithmetical mean of the individual response times observed during the interval. Only server responses that the probe has successfully paired with client requests are included in the calculation. Additional semantics of 'response time' may depend on the application being monitored.")
artMinRspTime = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: artMinRspTime.setStatus('current')
if mibBuilder.loadTexts: artMinRspTime.setDescription('The minimum response time, in milliseconds, observed during the report interval. This object is the minimum value of the individual response times observed during the interval. Only server responses that the probe has successfully paired with client requests are included in the calculation.')
artMaxRspTime = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: artMaxRspTime.setStatus('current')
if mibBuilder.loadTexts: artMaxRspTime.setDescription('The maximum response time, in milliseconds, observed during the report interval. This object is the maximum value of the individual response times observed during the interval. Only server responses that the probe has successfully paired with client requests are included in the calculation. The probe should use wait for for artControlRspTimeout milliseconds before abandoning the wait for a server response.')
artTotalResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artTotalResponses.setStatus('current')
if mibBuilder.loadTexts: artTotalResponses.setDescription('The total number of client requests that have been successfully paired with a corresponding server response during the report interval. Requests that have been timed-out by the probe are not counted by this object.')
artRsps1 = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artRsps1.setStatus('current')
if mibBuilder.loadTexts: artRsps1.setDescription('The first of seven counters used to categorize the response times observed during the report interval. This object is a count of responses that required less than artRspTime1 milliseconds.')
artRsps2 = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artRsps2.setStatus('current')
if mibBuilder.loadTexts: artRsps2.setDescription('The second of seven counters used to categorize the response times observed during the report interval. This object is a count of responses that required at least artRspTime1 milliseconds but less than artRspTime2 milliseconds.')
artRsps3 = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artRsps3.setStatus('current')
if mibBuilder.loadTexts: artRsps3.setDescription('The third of seven counters used to categorize the response times observed during the report interval. This object is a count of responses that required at least artRspTime2 milliseconds but less than artRspTime3 milliseconds.')
artRsps4 = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artRsps4.setStatus('current')
if mibBuilder.loadTexts: artRsps4.setDescription('The fourth of seven counters used to categorize the response times observed during the report interval. This object is a count of responses that required at least artRspTime3 milliseconds but less than artRspTime4 milliseconds.')
artRsps5 = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artRsps5.setStatus('current')
if mibBuilder.loadTexts: artRsps5.setDescription('The fifth of seven counters used to categorize the response times observed during the report interval. This object is a count of responses that required at least artRspTime4 milliseconds but less than artRspTime5 milliseconds.')
artRsps6 = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artRsps6.setStatus('current')
if mibBuilder.loadTexts: artRsps6.setDescription('The sixth of seven counters used to categorize the response times observed during the report interval. This object is a count of responses that required at least artRspTime5 milliseconds but less than artRspTime6 milliseconds.')
artRsps7 = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artRsps7.setStatus('current')
if mibBuilder.loadTexts: artRsps7.setDescription('The seventh of seven counters used to categorize the response times observed during the report interval. This object is a count of responses that required at least artRspTime6')
artClientOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artClientOctets.setStatus('current')
if mibBuilder.loadTexts: artClientOctets.setDescription('The total number of octets observed in client requests during the report interval. If the application-layer PDU has been fragmented into multiple packets, all octets in each of the packets are included in this count.')
artClientOverflowOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artClientOverflowOctets.setStatus('current')
if mibBuilder.loadTexts: artClientOverflowOctets.setDescription('The number of times the associated artClientOctets counter has overflowed.')
artClientHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artClientHCOctets.setStatus('current')
if mibBuilder.loadTexts: artClientHCOctets.setDescription('The high-capacity version of artClientOctets.')
artServerOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artServerOctets.setStatus('current')
if mibBuilder.loadTexts: artServerOctets.setDescription('The total number of octets in server responses during the report interval. If the application-layer PDU has been fragmented into multiple packets, all octets in each of the packets are included in this count.')
artServerOverflowOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artServerOverflowOctets.setStatus('current')
if mibBuilder.loadTexts: artServerOverflowOctets.setDescription('The number of times the associated artServerOctets counter has overflowed.')
artServerHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artServerHCOctets.setStatus('current')
if mibBuilder.loadTexts: artServerHCOctets.setDescription('The high-capacity version of artServerOctets.')
artRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artRetries.setStatus('current')
if mibBuilder.loadTexts: artRetries.setDescription('This total number of application-layer client retries observed during the report interval.')
artTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artTimeouts.setStatus('current')
if mibBuilder.loadTexts: artTimeouts.setDescription('The number of times the probe has timed-out a client request while waiting for a server response during the report interval. Timeouts may occur due to server congestion or failure, network congestion or failure, or probe congestion.')
artSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 5), )
if mibBuilder.loadTexts: artSummaryTable.setStatus('current')
if mibBuilder.loadTexts: artSummaryTable.setDescription('This table provides sets of application response time summary reports. Each row of the table corresponds to a report. Existing reports are deleted by the probe at the expiration of each sampling period, and replaced with new reports for the just-ended period. Generation of reports is controlled using the objects in the artControlTable. Note that this table is shared by all probe data sources, although reports are generated independently for each data source.')
artSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 5, 1), ).setIndexNames((0, "ART-MIB", "artControlIndex"), (0, "RMON2-MIB", "protocolDirLocalIndex"), (0, "ART-MIB", "artSummaryServerAddress"))
if mibBuilder.loadTexts: artSummaryEntry.setStatus('current')
if mibBuilder.loadTexts: artSummaryEntry.setDescription('A conceptual row in the artSummaryTable. Each row corresponds to an application response time report for an individual {data source, application-protocol, server} triple. Values in the each row correspond to the summary of response time information of all clients of the associated server, whereas the rows in the artTable contain detailed information for {data source, application- protocol, client, server} quadruples. Rows are created and deleted by the probe, and all objects are read-only to the NMS. Rows are indexed (in effect) by data source, application protocol identifier, and server address. Note that only the server address index component corresponds to an object in the table.')
artSummaryServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 5, 1, 1), OctetString())
if mibBuilder.loadTexts: artSummaryServerAddress.setStatus('current')
if mibBuilder.loadTexts: artSummaryServerAddress.setDescription('The address of the server. This is identified as an octet string with specific semantics and length as identified by the protocolDirLocalIndex component of the index.')
artSummaryClients = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: artSummaryClients.setStatus('current')
if mibBuilder.loadTexts: artSummaryClients.setDescription('The number of clients of this server for which requests were successfully paired with server responses during the report interval.')
artSummaryAvgRspTime = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: artSummaryAvgRspTime.setStatus('current')
if mibBuilder.loadTexts: artSummaryAvgRspTime.setDescription("The average response time, in milliseconds, observed during the report interval. Specification of milliseconds as the time units does not require the probe to maintain one-millisecond time granularity. Response time is measured as the number of milliseconds, as observed by the probe, between the final packet of an application-layer request PDU from client to server and the first packet of a response PDU from server client. This object is the arithmetical mean of the individual response times observed during the interval. Only server responses that the probe has successfully paired with client requests are included in the calculation. Additional semantics of 'response time' may depend on the application being monitored.")
artSummaryMinRspTime = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: artSummaryMinRspTime.setStatus('current')
if mibBuilder.loadTexts: artSummaryMinRspTime.setDescription('The minimum response time, in milliseconds, observed during the report interval. This object is the minimum value of the individual response times observed during the interval. Only server responses that the probe has successfully paired with client requests are included in the calculation.')
artSummaryMaxRspTime = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: artSummaryMaxRspTime.setStatus('current')
if mibBuilder.loadTexts: artSummaryMaxRspTime.setDescription('The maximum response time, in milliseconds, observed during the report interval. This object is the maximum value of the individual response times observed during the interval. Only server responses that the probe has successfully paired with client requests are included in the calculation. The probe should use a reasonable timeout period before abandoning the wait for a server response.')
artSummaryTotalResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artSummaryTotalResponses.setStatus('current')
if mibBuilder.loadTexts: artSummaryTotalResponses.setDescription('The total number of client requests that have been successfully paired with a corresponding server response during the report interval. Requests that have been timed-out by the probe are not counted by this object.')
artSummaryRsps1 = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artSummaryRsps1.setStatus('current')
if mibBuilder.loadTexts: artSummaryRsps1.setDescription('The first of seven counters used to categorize the response times observed during the report interval. This object is a count of responses that required less than artControlRspTime1 milliseconds.')
artSummaryRsps2 = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artSummaryRsps2.setStatus('current')
if mibBuilder.loadTexts: artSummaryRsps2.setDescription('The second of seven counters used to categorize the response times observed during the report interval. This object is a count of responses that required at least artControlRspTime1 milliseconds but less than artControlRspTime2 milliseconds.')
artSummaryRsps3 = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artSummaryRsps3.setStatus('current')
if mibBuilder.loadTexts: artSummaryRsps3.setDescription('The third of seven counters used to categorize the response times observed during the report interval. This object is a count of responses that required at least artControlRspTime2 milliseconds but less than artControlRspTime3 milliseconds.')
artSummaryRsps4 = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artSummaryRsps4.setStatus('current')
if mibBuilder.loadTexts: artSummaryRsps4.setDescription('The fourth of seven counters used to categorize the response times observed during the report interval. This object is a count of responses that required at least artControlRspTime3 milliseconds but less than artControlRspTime4 milliseconds.')
artSummaryRsps5 = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artSummaryRsps5.setStatus('current')
if mibBuilder.loadTexts: artSummaryRsps5.setDescription('The fifth of seven counters used to categorize the response times observed during the report interval. This object is a count of responses that required at least artControlRspTime4 milliseconds but less than artControlRspTime5 milliseconds.')
artSummaryRsps6 = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artSummaryRsps6.setStatus('current')
if mibBuilder.loadTexts: artSummaryRsps6.setDescription('The sixth of seven counters used to categorize the response times observed during the report interval. This object is a count of responses that required at least artControlRspTime5 milliseconds but less than artControlRspTime6 milliseconds.')
artSummaryRsps7 = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artSummaryRsps7.setStatus('current')
if mibBuilder.loadTexts: artSummaryRsps7.setDescription('The seventh of seven counters used to categorize the response times observed during the report interval. This object is a count of responses that required at least artControlRspTime6')
artSummaryClientOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artSummaryClientOctets.setStatus('current')
if mibBuilder.loadTexts: artSummaryClientOctets.setDescription('The total number of octets observed in client requests during the report interval. If the application-layer PDU has been fragmented into multiple packets, all octets in each of the packets are included in this count.')
artSummaryClientOverflowOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artSummaryClientOverflowOctets.setStatus('current')
if mibBuilder.loadTexts: artSummaryClientOverflowOctets.setDescription('The number of times the associated artClientOctets counter has overflowed.')
artSummaryClientHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 5, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artSummaryClientHCOctets.setStatus('current')
if mibBuilder.loadTexts: artSummaryClientHCOctets.setDescription('The high-capacity version of artSummaryClientOctets.')
artSummaryServerOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artSummaryServerOctets.setStatus('current')
if mibBuilder.loadTexts: artSummaryServerOctets.setDescription('The total number of octets in server responses during the report interval. If the application-layer PDU has been fragmented into multiple packets, all octets in each of the packets are included in this count.')
artSummaryServerOverflowOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artSummaryServerOverflowOctets.setStatus('current')
if mibBuilder.loadTexts: artSummaryServerOverflowOctets.setDescription('The number of times the associated artSummaryServerOctets counter has overflowed.')
artSummaryServerHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 5, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artSummaryServerHCOctets.setStatus('current')
if mibBuilder.loadTexts: artSummaryServerHCOctets.setDescription('The high-capacity version of artSummaryServerOctets.')
artSummaryRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artSummaryRetries.setStatus('current')
if mibBuilder.loadTexts: artSummaryRetries.setDescription('This total number of application-layer client retries observed during the report interval.')
artSummaryTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artSummaryTimeouts.setStatus('current')
if mibBuilder.loadTexts: artSummaryTimeouts.setDescription('The number of times the probe has timed-out a client request while waiting for a server response during the report interval. Timeouts may occur due to server congestion or failure, network congestion or failure, or probe congestion.')
artConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 4))
artMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 4, 1))
artMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 4, 2))
artMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 4, 1, 1)).setObjects(("ART-MIB", "artGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    artMIBCompliance = artMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: artMIBCompliance.setDescription('Describes the requirements for conformance to the ART MIB.')
artGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 141, 2, 1, 5, 4, 2, 1)).setObjects(("ART-MIB", "protocolDir2ArtConfig"), ("ART-MIB", "artControlDataSource"), ("ART-MIB", "artControlTimeRemaining"), ("ART-MIB", "artControlDuration"), ("ART-MIB", "artControlRspTime1"), ("ART-MIB", "artControlRspTime2"), ("ART-MIB", "artControlRspTime3"), ("ART-MIB", "artControlRspTime4"), ("ART-MIB", "artControlRspTime5"), ("ART-MIB", "artControlRspTime6"), ("ART-MIB", "artControlRspTimeout"), ("ART-MIB", "artControlRptStartTime"), ("ART-MIB", "artControlRequestedSize"), ("ART-MIB", "artControlGrantedSize"), ("ART-MIB", "artControlGeneratedRpts"), ("ART-MIB", "artControlDroppedFrames"), ("ART-MIB", "artControlOwner"), ("ART-MIB", "artControlStatus"), ("ART-MIB", "artAvgRspTime"), ("ART-MIB", "artMinRspTime"), ("ART-MIB", "artMaxRspTime"), ("ART-MIB", "artTotalResponses"), ("ART-MIB", "artRsps1"), ("ART-MIB", "artRsps2"), ("ART-MIB", "artRsps3"), ("ART-MIB", "artRsps4"), ("ART-MIB", "artRsps5"), ("ART-MIB", "artRsps6"), ("ART-MIB", "artRsps7"), ("ART-MIB", "artClientOctets"), ("ART-MIB", "artClientOverflowOctets"), ("ART-MIB", "artClientHCOctets"), ("ART-MIB", "artServerOctets"), ("ART-MIB", "artServerOverflowOctets"), ("ART-MIB", "artServerHCOctets"), ("ART-MIB", "artRetries"), ("ART-MIB", "artTimeouts"), ("ART-MIB", "artSummaryClients"), ("ART-MIB", "artSummaryAvgRspTime"), ("ART-MIB", "artSummaryMinRspTime"), ("ART-MIB", "artSummaryMaxRspTime"), ("ART-MIB", "artSummaryTotalResponses"), ("ART-MIB", "artSummaryRsps1"), ("ART-MIB", "artSummaryRsps2"), ("ART-MIB", "artSummaryRsps3"), ("ART-MIB", "artSummaryRsps4"), ("ART-MIB", "artSummaryRsps5"), ("ART-MIB", "artSummaryRsps6"), ("ART-MIB", "artSummaryRsps7"), ("ART-MIB", "artSummaryClientOctets"), ("ART-MIB", "artSummaryClientOverflowOctets"), ("ART-MIB", "artSummaryClientHCOctets"), ("ART-MIB", "artSummaryServerOctets"), ("ART-MIB", "artSummaryServerOverflowOctets"), ("ART-MIB", "artSummaryServerHCOctets"), ("ART-MIB", "artSummaryRetries"), ("ART-MIB", "artSummaryTimeouts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    artGroup = artGroup.setStatus('current')
if mibBuilder.loadTexts: artGroup.setDescription('This group adds application response time measurement to RMON-2.')
mibBuilder.exportSymbols("ART-MIB", artGroup=artGroup, artSummaryRsps4=artSummaryRsps4, artMinRspTime=artMinRspTime, artRsps2=artRsps2, artServerAddress=artServerAddress, artControlRspTime5=artControlRspTime5, artSummaryServerOctets=artSummaryServerOctets, protocolDir2Entry=protocolDir2Entry, artTimeouts=artTimeouts, artClientOverflowOctets=artClientOverflowOctets, artSummaryRetries=artSummaryRetries, artSummaryTotalResponses=artSummaryTotalResponses, artServerOverflowOctets=artServerOverflowOctets, artClientAddress=artClientAddress, artControlRspTimeout=artControlRspTimeout, artRsps1=artRsps1, artMIBCompliance=artMIBCompliance, artControlDataSource=artControlDataSource, artSummaryClients=artSummaryClients, artControlIndex=artControlIndex, artControlRspTime3=artControlRspTime3, artRsps5=artRsps5, PYSNMP_MODULE_ID=art, protocolDir2Table=protocolDir2Table, artRsps4=artRsps4, netscout2=netscout2, artRetries=artRetries, artEntry=artEntry, artServerOctets=artServerOctets, artSummaryAvgRspTime=artSummaryAvgRspTime, artControlRspTime1=artControlRspTime1, protocolDir2ArtConfig=protocolDir2ArtConfig, artConformance=artConformance, artClientOctets=artClientOctets, artSummaryRsps6=artSummaryRsps6, artControlTimeRemaining=artControlTimeRemaining, artSummaryServerOverflowOctets=artSummaryServerOverflowOctets, artMIBGroups=artMIBGroups, artSummaryRsps2=artSummaryRsps2, artClientHCOctets=artClientHCOctets, artControlTable=artControlTable, artSummaryRsps1=artSummaryRsps1, artControlDuration=artControlDuration, artSummaryTable=artSummaryTable, artSummaryEntry=artSummaryEntry, artControlRspTime6=artControlRspTime6, artSummaryServerAddress=artSummaryServerAddress, artSummaryMinRspTime=artSummaryMinRspTime, artRsps7=artRsps7, artSummaryClientOctets=artSummaryClientOctets, artControlOwner=artControlOwner, artRsps3=artRsps3, artSummaryRsps7=artSummaryRsps7, artTotalResponses=artTotalResponses, artSummaryClientOverflowOctets=artSummaryClientOverflowOctets, artControlRequestedSize=artControlRequestedSize, artControlStatus=artControlStatus, artControlGeneratedRpts=artControlGeneratedRpts, artMIBCompliances=artMIBCompliances, artSummaryServerHCOctets=artSummaryServerHCOctets, artSummaryRsps3=artSummaryRsps3, mibdoc2=mibdoc2, artControlGrantedSize=artControlGrantedSize, artServerHCOctets=artServerHCOctets, artControlRptStartTime=artControlRptStartTime, artSummaryRsps5=artSummaryRsps5, frontier=frontier, artControlEntry=artControlEntry, artTable=artTable, artAvgRspTime=artAvgRspTime, artMaxRspTime=artMaxRspTime, artSummaryTimeouts=artSummaryTimeouts, artControlRspTime4=artControlRspTime4, artSummaryMaxRspTime=artSummaryMaxRspTime, artRsps6=artRsps6, artControlDroppedFrames=artControlDroppedFrames, art=art, artControlRspTime2=artControlRspTime2, artSummaryClientHCOctets=artSummaryClientHCOctets)
