#
# PySNMP MIB module DOCS-MCAST-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DOCS-MCAST-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:53:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
clabProjDocsis, = mibBuilder.importSymbols("CLAB-DEF-MIB", "clabProjDocsis")
DocsSAId, DocsBpkmDataEncryptAlg = mibBuilder.importSymbols("DOCS-IETF-BPI2-MIB", "DocsSAId", "DocsBpkmDataEncryptAlg")
Dsid, ChSetId = mibBuilder.importSymbols("DOCS-IF3-MIB", "Dsid", "ChSetId")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
InetAddress, InetAddressPrefixLength, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressPrefixLength", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Gauge32, Integer32, ModuleIdentity, iso, TimeTicks, IpAddress, Unsigned32, Counter64, MibIdentifier, Counter32, Bits, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Gauge32", "Integer32", "ModuleIdentity", "iso", "TimeTicks", "IpAddress", "Unsigned32", "Counter64", "MibIdentifier", "Counter32", "Bits", "ObjectIdentity")
MacAddress, DisplayString, TextualConvention, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "TextualConvention", "TruthValue", "RowStatus")
docsMcastMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18))
docsMcastMib.setRevisions(('2015-04-22 00:00', '2014-07-29 00:00', '2007-08-03 00:00', '2006-12-07 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: docsMcastMib.setRevisionsDescriptions(('Revised Version includes ECN OSSIv3.0-N-15.1288-1', 'Revised Version includes ECN OSSIv3.0-N-14.1151-2 and published as I24', 'Revised Version includes ECNs OSSIv3.0-N-07.0499-1 OSSIv3.0-N-07.0473-3 and is published as I04', 'Initial version, published as part of the CableLabs OSSIv3.0 specification CM-SP-OSSIv3.0-I01-061207.',))
if mibBuilder.loadTexts: docsMcastMib.setLastUpdated('201504220000Z')
if mibBuilder.loadTexts: docsMcastMib.setOrganization('Cable Television Laboratories, Inc.')
if mibBuilder.loadTexts: docsMcastMib.setContactInfo('Postal: Cable Television Laboratories, Inc. 858 Coal Creek Circle Louisville, Colorado 80027-9750 U.S.A. Phone: +1 303-661-9100 Fax: +1 303-661-9199 E-mail: mibs@cablelabs.com')
if mibBuilder.loadTexts: docsMcastMib.setDescription('This MIB module contains the management objects for the management of Multicast over DOCSIS to support Multicast DSID forwarding and or bonded multicast. Copyright 1999-2014 Cable Television Laboratories, Inc. All rights reserved.')
docsMcastMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1))
docsMcastCmtsGrpCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 1), )
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgTable.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgTable.setDescription("This object controls the QoS, PHS and encryption settings for downstream forwarding of IP multicast sessions. An IP multicast session is replicated to one or more Downstream Channel Sets (DCSs), where each DCS is either a single downstream channel or a downstream bonding group of multiple channels. The CMTS determines on which DCSs to replicate a multicast session based on IP multicast membership reports ('joins') or other vendor-specific static configuration. The CmtsGrpCfg object allows for the configuration of a range of sessions through the SrcPrefixAddr and GrpPrefixAddr and SrcPrefixLen and GrpPrefixLen attributes. The CmtsGrpCfg object allows for the configuration of QoS, Encryption and PHS for multicast sessions. Cable operators can specify configuration rules for a range of multicast sessions through the tuple of (SrcPrefixAddr,SrcPrefixLen, GrpPrefixAddr, GrpPrefixLen) attributes in an entry. The QosConfigId attribute identifies the QoS rule, the EncryptionConfigId identifies the encryption rule and the PhsConfigId identifies the PHS rule for a particular entry. Even if an entry indicates a range of multicast sessions the Encryption and PHS rules are applied on a per-session basis. That is, a separate DSID is assigned to an individual multicast session from a range of multicast sessions identified by an entry in the CmtsGrpCfg object and a PHS rule (indicated by the PhsCfgId) is applied individually to each session which is identified by the DSID assigned for that session. Similarly, a separate SAID is assigned to individual multicast session from range identified by the CmtsGrpCfg object. The CmtsGrpQosConfigQosCtrl attribute from the CmtsGrpQosCfg object is used to determine if the traffic for a range of multicast sessions identified by an entry in the CmtsGrpCfg object will be transmitted in an 'Aggregate-Session' Group Service Flow or will be transmitted separately for each session using 'Single-Session' Group Service Flows. Even if the range of multicast sessions are transmitted on an 'Aggregate-Session' Group Service Flow, the PHS and Encryption rules are always applied individually to a multicast session on a per-session DSID basis prior to being transmitted on an 'Aggregate-Session' Group Service Flow (GSF). This object supports the creation and deletion of multiple instances. Creation of a new instance of this object requires the following attributes to be set RulePriority PrefixAddrType SrcPrefixAddr SrcPrefixLen GrpPrefixAddr GrpPrefixLen IpDsLow IpDsHigh IpDsMask")
docsMcastCmtsGrpCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 1, 1), ).setIndexNames((0, "DOCS-MCAST-MIB", "docsMcastCmtsGrpCfgId"))
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgEntry.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgEntry.setDescription('The conceptual row of docsMcastCmtsGrpCfg. The CMTS persists all instances of the CmtsGrpConfig object across system reinitializations.')
docsMcastCmtsGrpCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgId.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgId.setDescription('This attribute represents the unique identifier of instances of this object. This attribute is the key that identifies unique instances of the CmtsGrpConfig object.')
docsMcastCmtsGrpCfgRulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgRulePriority.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgRulePriority.setDescription('This attribute indicates the priority of this entry used to resolve which instance of this object apply when a newly replicated multicast session matches multiple entries. Higher values indicate a higher priority. Valid values for this attribute are 0..63 and 192..255 in order to not conflict with CMTS internally-created instances that use the range 64..191.')
docsMcastCmtsGrpCfgPrefixAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 1, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgPrefixAddrType.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgPrefixAddrType.setDescription('This attribute identifies the address family for the multicast session (S,G) of the GC which corresponds to the SrcPrefixAddr and GrpPrefixAddr attributes respectively.')
docsMcastCmtsGrpCfgSrcPrefixAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 1, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgSrcPrefixAddr.setReference('RFC 3569. RFC 3306.')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgSrcPrefixAddr.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgSrcPrefixAddr.setDescription('This attribute defines the IP source address prefix of the IP multicast session. Source prefix addresses are unicast host addresses.')
docsMcastCmtsGrpCfgSrcPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 1, 1, 5), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgSrcPrefixLen.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgSrcPrefixLen.setDescription('This attribute identifies the prefix of a range of Source (S) IP multicast group addresses. For Group or ASM based sessions this attribute is set to 0.')
docsMcastCmtsGrpCfgGrpPrefixAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 1, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgGrpPrefixAddr.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgGrpPrefixAddr.setDescription('This attribute identifies the prefix of a range of destination IP multicast group addresses.')
docsMcastCmtsGrpCfgGrpPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 1, 1, 7), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgGrpPrefixLen.setReference('DOCSIS 3.0 Operation and Support System Interface Specification CM-SP-OSSIv3.0-I01-061207, Multicast QoS Configuration Object Model section.')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgGrpPrefixLen.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgGrpPrefixLen.setDescription('This attribute identifies the prefix of a range of IP multicast group addresses.')
docsMcastCmtsGrpCfgTosLow = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgTosLow.setReference('RFC 791. RFC 3260. RFC3168.')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgTosLow.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgTosLow.setDescription('This attribute identifies the low value of a range of the TOS byte value to be defined in a packet classifier this GC instantiates in the GCR in order to limit the GCR-matched traffic to a particular set of DSCPs. This applies to the IPv4 TOS byte and the IPv6 Traffic Class byte. The IP TOS octet, as originally defined in RFC 791, has been superseded by the 6-bit Differentiated Services Field and the 2-bit Explicit Congestion Notification Field.')
docsMcastCmtsGrpCfgTosHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgTosHigh.setReference('RFC 791. RFC 3260. RFC 3168.')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgTosHigh.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgTosHigh.setDescription('This attribute identifies the high value of a range of the TOS byte value to be defined in a packet classifier this GC instantiates in the GCR in order to limit the GCR-matched traffic to a particular set of DSCPs. This applies to the IPv4 TOS byte and the IPv6 Traffic Class byte. The IP TOS octet, as originally defined in RFC 791, has been superseded by the 6-bit Differentiated Services Field (DSField, RFC 3260) and the 2-bit Explicit Congestion Notification Field (ECN field, RFC 3168).')
docsMcastCmtsGrpCfgTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgTosMask.setReference('RFC 791. RFC 3260. RFC 3168.')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgTosMask.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgTosMask.setDescription('This attribute identifies the mask value bitwise ANDed with a TOS byte value to be defined in a packet classifier this GC instantiates in the GCR in order to limit the GCR-matched traffic to a particular set of DSCPs. This applies to the IPv4 TOS byte and the IPv6 Traffic Class byte. The IP TOS octet, as originally defined in RFC 791, has been superseded by the 6-bit Differentiated Services Field (DSField, RFC 3260) and the 2-bit Explicit Congestion Notification Field (ECN field, RFC 3168).')
docsMcastCmtsGrpCfgQosConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgQosConfigId.setReference('DOCSIS 3.0 Operation and Support System Interface Specification CM-SP-OSSIv3.0-I04-070803, Multicast QoS Configuration Object Model section.')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgQosConfigId.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgQosConfigId.setDescription('This attribute identifies an instance in CmtsGrpQosCfg for configuring the QoS for the replication of the sessions matching this CmtsGrpCfg instance. The value 0 indicates that all replications referenced by this CmtsGrpCfg instance will be forwarded to the default GSF.')
docsMcastCmtsGrpCfgEncryptConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgEncryptConfigId.setReference('DOCSIS 3.0 Operation and Support System Interface Specification CM-SP-OSSIv3.0-I01-061207, Multicast QoS Configuration Object Model section.')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgEncryptConfigId.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgEncryptConfigId.setDescription('This attribute identifies an instance in CmtsGrpEncryptionCfg for configuring the encryption of replicationsderived from this GC. The value 0 indicates no encryption for all replications derived from this GC.')
docsMcastCmtsGrpCfgPhsConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgPhsConfigId.setReference('DOCSIS 3.0 Operation and Support System Interface Specification CM-SP-OSSIv3.0-I01-061207, Multicast QoS Configuration Object Model section.')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgPhsConfigId.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgPhsConfigId.setDescription('This attribute identifies an instance in CmtsGrpPhsCfg that configures DSID-indexed PHS compression for all replications derived from this GC. The value 0 indicates no PHS compression for all replications derived from this GC.')
docsMcastCmtsGrpCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 1, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgRowStatus.setDescription('The status of this instance.')
docsMcastCmtsGrpEncryptCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 2), )
if mibBuilder.loadTexts: docsMcastCmtsGrpEncryptCfgTable.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpEncryptCfgTable.setDescription('This object controls the configuration of the Security Association (SA) and the encryption algorithm used for multicast sessions. This object supports the creation and deletion of instances.')
docsMcastCmtsGrpEncryptCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 2, 1), ).setIndexNames((0, "DOCS-MCAST-MIB", "docsMcastCmtsGrpEncryptCfgId"))
if mibBuilder.loadTexts: docsMcastCmtsGrpEncryptCfgEntry.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpEncryptCfgEntry.setDescription('The conceptual row of docsMcastCmtsGrpEncryptCfg. The CMTS persists all instances of the CmtsGrpEncryptionConfig object across system reinitializations.')
docsMcastCmtsGrpEncryptCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: docsMcastCmtsGrpEncryptCfgId.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpEncryptCfgId.setDescription('This attribute specifies the unique identifier of instances of this object')
docsMcastCmtsGrpEncryptCfgCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cmts", 1), ("mgmt", 2))).clone('mgmt')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpEncryptCfgCtrl.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpEncryptCfgCtrl.setDescription("This attribute controls whether the CMTS can select the encryption algorithm or if this can be set manually using the Alg attribute. If this attribute is set to 'cmts', the CMTS can select the encryption algorithm for the Security Association (SA). If this attribute is set to 'mgmt', the Alg attribute is used to define the encryption algorithm for this SA.")
docsMcastCmtsGrpEncryptCfgAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 2, 1, 3), DocsBpkmDataEncryptAlg().clone('des56CbcMode')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpEncryptCfgAlg.setReference('DOCSIS 3.0 Security Specification CM-SP-SECv3.0-I01-060804,Security-Capabilities section.')
if mibBuilder.loadTexts: docsMcastCmtsGrpEncryptCfgAlg.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpEncryptCfgAlg.setDescription("This attribute defines which encryption algorithm will be used for an SA referenced by this object when the Ctrl is set to 'mgmt'.")
docsMcastCmtsGrpEncryptCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpEncryptCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpEncryptCfgRowStatus.setDescription('The status of this instance.')
docsMcastCmtsGrpPhsCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 3), )
if mibBuilder.loadTexts: docsMcastCmtsGrpPhsCfgTable.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpPhsCfgTable.setDescription('This object controls the configuration of DSID-indexed PHS for multicast sessions. Configuration of PHS Rules via this table must not be based on the configuration of a range of sessions, but must be configured on a single multicast session. Creation of multiple instances of this object require the following attributes to be set: PhsField PhsMask PhsSize')
docsMcastCmtsGrpPhsCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 3, 1), ).setIndexNames((0, "DOCS-MCAST-MIB", "docsMcastCmtsGrpPhsCfgId"))
if mibBuilder.loadTexts: docsMcastCmtsGrpPhsCfgEntry.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpPhsCfgEntry.setDescription('The conceptual row of docsMcastCmtsGrpPhsCfg. The CMTS persists all instances of the CmtsGrpPhsConfig object across system reinitializations.')
docsMcastCmtsGrpPhsCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: docsMcastCmtsGrpPhsCfgId.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpPhsCfgId.setDescription('This attribute identifies the unique identifier of a PHS rule that is referenced by the GrpConfig object.')
docsMcastCmtsGrpPhsCfgPhsField = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpPhsCfgPhsField.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpPhsCfgPhsField.setDescription('This attribute defines the bytes of the DOCSIS header which must be suppressed/restored by the sending/receiving device.')
docsMcastCmtsGrpPhsCfgPhsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpPhsCfgPhsMask.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I01-060804, Payload Header Suppression Encodings section and Payload Header Suppression Mask (PHSM) in the Common Radio Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: docsMcastCmtsGrpPhsCfgPhsMask.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpPhsCfgPhsMask.setDescription("This attribute defines the bit mask which is used in combination with the PhsField to define which bytes in header must be suppressed/restored by the sending or receiving device. Each bit of this bit mask corresponds to a byte in the PhsField, with the least significant bit corresponding to the first byte of the PhsField. Each bit of the bit mask specifies whether or not the corresponding byte should be suppressed in the packet. A bit value of '1' indicates that the byte should be suppressed by the sending device and restored by the receiving device. A bit value of '0' indicates that the byte should not be suppressed by the sending device or restored by the receiving device. If the bit mask does not contain a bit for each byte in the PhsField then the bit mask is extended with bit values of '1' to be the necessary length.")
docsMcastCmtsGrpPhsCfgPhsSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('Bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpPhsCfgPhsSize.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I01-060804, Payload Header Suppression Encodings section and Payload Header Suppression Size (PHSS) section in the Common Radio Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: docsMcastCmtsGrpPhsCfgPhsSize.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpPhsCfgPhsSize.setDescription('This attribute specifies the number of bytes in the header to be suppressed and restored. The value of this object matches the number of bytes the bits indicated in the PhsField attribute.')
docsMcastCmtsGrpPhsCfgPhsVerify = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 3, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpPhsCfgPhsVerify.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I01-060804, Payload Header Suppression Encodings section and Payload Header Suppression Size (PHSS) section in the Common Radio Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: docsMcastCmtsGrpPhsCfgPhsVerify.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpPhsCfgPhsVerify.setDescription("This attribute specifies the Payload Header Suppression verification value of 'true' the sender must verify PhsField is the same as what is contained in the packet to be suppressed.")
docsMcastCmtsGrpPhsCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpPhsCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpPhsCfgRowStatus.setDescription('The status of this instance.')
docsMcastCmtsGrpQosCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 4), )
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgTable.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgTable.setDescription('This object configures the QoS configured for Multicast sessions replicated to any Downstream Channel Set. It does not control which particular DCSs to which the CMTS replicates a multicast session. An instance in this object is called a GQC entry. A GQC entry controls how the CMTS instantiates a Group Classifier Rule (GCR) on the DCS to match packets of the multicast session. A Group Classifier Rule (GCR) uses source and destination IP address and ToS criteria. A GQC entry controls how and with what QoS parameters a Group Service Flow (GSF) is created on a DCS. All downstream multicast packets are scheduled on a GSF. The QoS Type attribute of the GQC entry controls whether the CMTS creates one GSF for each single IP multicast session or whether the CMTS creates one GSF for the aggregate of all sessions that match the GQC criteria. The GQC instance contains a reference to a Service Class from docsIetfQosServiceClassTable. The Service Class defines the list of QoS parameters for the GSF(s) instantiated for the GQC entry. A CMTS identifies one Service Class as the Default Group QoS Service Class. The CMTS instantiates a Default Group Service Flow on each single-channel DCS based on the parameters of the Default Group QoS Service Class. The set of GCRs and GSFs instantiated on a DCS control how QoS is provided to multicast packets replicated to the DCS. For each multicast packet, the CMTS classifies the packet to the highest priority matching GCR on that DCS. The GCR refers to a single GSF, which controls the scheduling of the packets on the DCS. If the multicast packet does not match any GCR on the DCS, the packet is scheduled on the Default Group Service Flow of the DCS. The CMTS replicates unclassified multicast traffic to only DCSs consisting of a single downstream channel. Thus, the Maximum Sustained Traffic Rate QoS parameter of the Default Group Service Class limits the aggregate rate of unclassified multicast traffic on each downstream channel. The CMTS is expected to instantiate GCRs and GSFs controlled by the entries in this table only for the duration of replication of the multicast sessions matching the entry. This object supports the creation of multiple instances. Creation of new instances of this object require the following objects to be set: ServiceClassName QosCtrl AggSessLimit')
docsMcastCmtsGrpQosCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 4, 1), ).setIndexNames((0, "DOCS-MCAST-MIB", "docsMcastCmtsGrpQosCfgId"))
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgEntry.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgEntry.setDescription('The conceptual row of docsMcastCmtsGrpQosCfg. The CMTS persists all instances of the CmtsGrpQosConfig object across system reinitialization.')
docsMcastCmtsGrpQosCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgId.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgId.setDescription('This attribute identifies a unique Group QoS Configuration object instance.')
docsMcastCmtsGrpQosCfgServiceClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 4, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 15)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgServiceClassName.setReference('DOCSIS 3.0 Operation and Support System Interface Specification CM-SP-OSSIv3.0-I01-061207, Multicast QoS Configuration Object Model section.')
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgServiceClassName.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgServiceClassName.setDescription('This attribute identifies the Service Class Name reference for the set of QoS parameters for this GQC.')
docsMcastCmtsGrpQosCfgQosCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("singleSsession", 1), ("aggregateSession", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgQosCtrl.setReference('DOCSIS 3.0 Operation and Support System Interface Specification CM-SP-OSSIv3.0-I01-061207, Multicast QoS Configuration Object Model section.')
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgQosCtrl.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgQosCtrl.setDescription("This attribute identifies how Group Classifier Rules (GCRs) and Group Service Flows (GSFs) are instantiated when multiple sessions match the (S,G) criteria of this entry. If 'singleSession', the CMTS creates a unique GCR and a unique GSF for the session. If this object's value is 'aggregateSession', all sessions matching this criterion are aggregated into the same GSF.")
docsMcastCmtsGrpQosCfgAggSessLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgAggSessLimit.setReference('DOCSIS 3.0 Operation and Support System Interface Specification CM-SP-OSSIv3.0-I01-061207, Multicast QoS Configuration Object Model section.')
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgAggSessLimit.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgAggSessLimit.setDescription("This attribute identifies the maximum number of sessions that may be aggregated in an aggregated Service Flow. This value is ignored in case of a GQC entry with QosCtrl set to 'singleSession'.")
docsMcastCmtsGrpQosCfgAppId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 4, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgAppId.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I04-070518, Application Identifier section in the Common TLV Encodings Annex; PacketCable Multimedia Specification PKT-SP-MM-I03-051221, Policy Server and CMTS Interface section.')
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgAppId.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgAppId.setDescription('This attribute allows the operator to configure a Cable Operator defined Application Identifier for multicast sessions, e.g., an Application Manager ID and Application Type. This Application Identifier can be used to influence admission control or other policies in the CMTS that are outside of the scope of this specification. This parameter is optional in defining QoS for multicast sessions. If the value of this attribute is different from the value of the AppId in the referenced SCN for this GQC instance, the value of this attribute is used.')
docsMcastCmtsGrpQosCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgRowStatus.setDescription('The status of this instance.')
docsMcastCmtsReplSessTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 5), )
if mibBuilder.loadTexts: docsMcastCmtsReplSessTable.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsReplSessTable.setDescription("This object describes the replication of IP Multicast sessions onto the different Downstream Channel Sets of a CMTS. Each DCS may be either a single downstream channel or a bonding group of multiple downstream channels. Each IP Multicast session is identified by a combination of IP source and IP Destination group address '(S,G). The CMTS replicates each IP packet in an (S,G) session onto one or more Downstream Channel Sets (DCSs), each of which is implemented in a MAC Domain. The CMTS assigns each replication a Downstream Service ID (DSID) that is unique per MAC Domain.")
docsMcastCmtsReplSessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 5, 1), ).setIndexNames((0, "DOCS-MCAST-MIB", "docsMcastCmtsReplSessPrefixAddrType"), (0, "DOCS-MCAST-MIB", "docsMcastCmtsReplSessGrpPrefix"), (0, "DOCS-MCAST-MIB", "docsMcastCmtsReplSessSrcPrefix"), (0, "DOCS-MCAST-MIB", "docsMcastCmtsReplSessMdIfIndex"), (0, "DOCS-MCAST-MIB", "docsMcastCmtsReplSessDcsId"), (0, "DOCS-MCAST-MIB", "docsMcastCmtsReplSessServiceFlowId"))
if mibBuilder.loadTexts: docsMcastCmtsReplSessEntry.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsReplSessEntry.setDescription('The conceptual row of docsMcastCmtsReplSess.')
docsMcastCmtsReplSessPrefixAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 5, 1, 1), InetAddressType())
if mibBuilder.loadTexts: docsMcastCmtsReplSessPrefixAddrType.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsReplSessPrefixAddrType.setDescription('This attribute defines the address type for the GrpPrefix and SrcPrefix addresses.')
docsMcastCmtsReplSessGrpPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 5, 1, 2), InetAddress())
if mibBuilder.loadTexts: docsMcastCmtsReplSessGrpPrefix.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsReplSessGrpPrefix.setDescription('This attribute defines the group G of a particular (S,G) IP multicast session.')
docsMcastCmtsReplSessSrcPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 5, 1, 3), InetAddress())
if mibBuilder.loadTexts: docsMcastCmtsReplSessSrcPrefix.setReference('RFC 3569. RFC 3306.')
if mibBuilder.loadTexts: docsMcastCmtsReplSessSrcPrefix.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsReplSessSrcPrefix.setDescription("This attribute identifies a specific Multicast Source Address. A Source Address that is all zeros is defined as 'all source addresses (*, G)'.")
docsMcastCmtsReplSessMdIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 5, 1, 4), InterfaceIndex())
if mibBuilder.loadTexts: docsMcastCmtsReplSessMdIfIndex.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsReplSessMdIfIndex.setDescription('This attribute defines the MAC Domain Interface index of the channel to which the (S,G) session is replicated.')
docsMcastCmtsReplSessDcsId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 5, 1, 5), ChSetId())
if mibBuilder.loadTexts: docsMcastCmtsReplSessDcsId.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsReplSessDcsId.setDescription('This attribute provides the reference for the Downstream Channel Set within a MAC Domain that the multicast session (S,G) is replicated to.')
docsMcastCmtsReplSessServiceFlowId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 5, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: docsMcastCmtsReplSessServiceFlowId.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsReplSessServiceFlowId.setDescription('This attribute indicates the service flow into which packets are classified for this replication of the multicast session (S,G).')
docsMcastCmtsReplSessDsid = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 5, 1, 7), Dsid()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsMcastCmtsReplSessDsid.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsReplSessDsid.setDescription('This attribute defines the Downstream Service ID (DSID) label with which the CMTS labels all packets of the (S,G) session on the DCS of a MAC Domain. The DSID value is unique per MAC domain.')
docsMcastCmtsReplSessSaid = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 5, 1, 8), DocsSAId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsMcastCmtsReplSessSaid.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsReplSessSaid.setDescription('This attribute defines the Security Association ID (SAID) of this multicast replication session. The value 0 indicates no SAID associated with this session.')
docsMcastDefGrpSvcClass = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 6))
docsMcastDefGrpSvcClassDef = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 6, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsMcastDefGrpSvcClassDef.setReference('RFC 4323.')
if mibBuilder.loadTexts: docsMcastDefGrpSvcClassDef.setStatus('current')
if mibBuilder.loadTexts: docsMcastDefGrpSvcClassDef.setDescription('This attribute references an instance of the SNMP table docsIetfQosServiceClassName object. This attribute is used to expand the QoS parameter Set of QoS for multicast sessions that uses a default QoS policy. The CMTS persists all instances of this attribute across reinitializations.')
docsMcastDsidPhsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 7), )
if mibBuilder.loadTexts: docsMcastDsidPhsTable.setStatus('current')
if mibBuilder.loadTexts: docsMcastDsidPhsTable.setDescription('This object reports the set of DSID-Indexed PHS rules that are signaled between the CMTS and CMs as part of the Multicast Sessions setup. The attributes PhsMask, PhsSize and PhsVerify comes from the configuration object CmtsGrpPhsCfg. The value of the PhsField attribute is derived by the CMTS from the CmtsGrpCfg object parameters, and possibly other IP header informaton of the multicast session that the CMTS is capable of knowning prior to the multicast session setup. In cases where the PhsSize is longer than the CMTS knowledge of IP/TCP header fields, the CMTS extends the PhsMask with bits set to 0 until reaching the equivalent PhsSize value.')
docsMcastDsidPhsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-MCAST-MIB", "docsMcastDsidPhsDsid"))
if mibBuilder.loadTexts: docsMcastDsidPhsEntry.setStatus('current')
if mibBuilder.loadTexts: docsMcastDsidPhsEntry.setDescription('The conceptual row of docsMcastDsidPhs. The ifIndex key corresponds to the MAC Domain interface where the PHSI-Indexed DSID is configured.')
docsMcastDsidPhsDsid = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 7, 1, 1), Dsid())
if mibBuilder.loadTexts: docsMcastDsidPhsDsid.setStatus('current')
if mibBuilder.loadTexts: docsMcastDsidPhsDsid.setDescription('This attribute represents the 20-bit DSID associated with this PHS rule.')
docsMcastDsidPhsPhsField = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsMcastDsidPhsPhsField.setStatus('current')
if mibBuilder.loadTexts: docsMcastDsidPhsPhsField.setDescription('This attribute defines the bytes of the header which must be suppressed/restored by the sending/receiving device.')
docsMcastDsidPhsPhsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsMcastDsidPhsPhsMask.setStatus('current')
if mibBuilder.loadTexts: docsMcastDsidPhsPhsMask.setDescription('This attribute defines the Payload Header Suppression mask in the header to be suppressed and restored.')
docsMcastDsidPhsPhsSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 7, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsMcastDsidPhsPhsSize.setStatus('current')
if mibBuilder.loadTexts: docsMcastDsidPhsPhsSize.setDescription('This attribute defines the number of bytes in the header to be suppressed and restored.')
docsMcastDsidPhsPhsVerify = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 7, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsMcastDsidPhsPhsVerify.setStatus('current')
if mibBuilder.loadTexts: docsMcastDsidPhsPhsVerify.setDescription("This attribute, when set to 'true', indicates that the sender must verify that the PHS Field attribute value is the same is the same as what is contained in the packet to be suppressed.")
docsMcastStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 8), )
if mibBuilder.loadTexts: docsMcastStatsTable.setStatus('current')
if mibBuilder.loadTexts: docsMcastStatsTable.setDescription('The table contains statistics for the IP multicast session identified by the combination of IP source and IP destination group address (S,G).')
docsMcastStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-MCAST-MIB", "docsMcastStatsGrpAddrType"), (0, "DOCS-MCAST-MIB", "docsMcastStatsGrpAddr"), (0, "DOCS-MCAST-MIB", "docsMcastStatsGrpPrefixLen"), (0, "DOCS-MCAST-MIB", "docsMcastStatsSrcAddrType"), (0, "DOCS-MCAST-MIB", "docsMcastStatsSrcAddr"), (0, "DOCS-MCAST-MIB", "docsMcastStatsSrcPrefixLen"))
if mibBuilder.loadTexts: docsMcastStatsEntry.setStatus('current')
if mibBuilder.loadTexts: docsMcastStatsEntry.setDescription('The conceptual row of docsMcastStatsTable. The ifIndex key corresponds to the Ethernet interface where the IP Multicast session is configured.')
docsMcastStatsGrpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 8, 1, 1), InetAddressType())
if mibBuilder.loadTexts: docsMcastStatsGrpAddrType.setStatus('current')
if mibBuilder.loadTexts: docsMcastStatsGrpAddrType.setDescription('This attribute indicates the address family of the address contained in docsMcastStatsGrpAddr.')
docsMcastStatsGrpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 8, 1, 2), InetAddress())
if mibBuilder.loadTexts: docsMcastStatsGrpAddr.setStatus('current')
if mibBuilder.loadTexts: docsMcastStatsGrpAddr.setDescription("This attribute defines 'G' as the group address for a particular (S,G) IP multicast session.")
docsMcastStatsGrpPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 8, 1, 3), InetAddressPrefixLength())
if mibBuilder.loadTexts: docsMcastStatsGrpPrefixLen.setStatus('current')
if mibBuilder.loadTexts: docsMcastStatsGrpPrefixLen.setDescription('This attribute defines the group address prefix length of a particular (S,G) IP multicast session.')
docsMcastStatsSrcAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 8, 1, 4), InetAddressType())
if mibBuilder.loadTexts: docsMcastStatsSrcAddrType.setStatus('current')
if mibBuilder.loadTexts: docsMcastStatsSrcAddrType.setDescription('This attribute indicates the address family of the address contained in docsMcastStatsSrcAddr.')
docsMcastStatsSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 8, 1, 5), InetAddress())
if mibBuilder.loadTexts: docsMcastStatsSrcAddr.setStatus('current')
if mibBuilder.loadTexts: docsMcastStatsSrcAddr.setDescription("This attribute defines 'S' as the source address for a particular (S,G) IP multicast session. For the case of Any Source Multicast (ASM), this attribute uses a value of 0.0.0.0 for IPv4 or 0::/0 for IPv6.")
docsMcastStatsSrcPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 8, 1, 6), InetAddressPrefixLength())
if mibBuilder.loadTexts: docsMcastStatsSrcPrefixLen.setStatus('current')
if mibBuilder.loadTexts: docsMcastStatsSrcPrefixLen.setDescription('This attribute defines the source address prefix length of a particular (S,G) IP multicast session.')
docsMcastStatsDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsMcastStatsDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: docsMcastStatsDroppedPkts.setDescription('This attribute returns a count of the packets dropped by the CMTS Forwarder process for a particular IP multicast session prior to replication to the outbound interface(s) (e.g., MAC domain interfaces). These packet drops can occur whenever there are no replications for this IP multicast session, or where an IP multicast packet for the specific S,G is not forwarded to the outbound interface(s).')
docsMcastStatsDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsMcastStatsDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: docsMcastStatsDroppedOctets.setDescription('This attribute returns a count of the octets for packets dropped by the CMTS Forwarder process for a particular IP multicast session prior to replication to the outbound interface(s).')
docsMcastCpeListTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 9), )
if mibBuilder.loadTexts: docsMcastCpeListTable.setStatus('current')
if mibBuilder.loadTexts: docsMcastCpeListTable.setDescription('The table contains CPE information for the IP multicast session identified by the combination of IP source and IP destination group address (S,G), MAC Domain interface and CM MAC address.')
docsMcastCpeListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-MCAST-MIB", "docsMcastCpeListGrpAddrType"), (0, "DOCS-MCAST-MIB", "docsMcastCpeListGrpAddr"), (0, "DOCS-MCAST-MIB", "docsMcastCpeListGrpPrefixLen"), (0, "DOCS-MCAST-MIB", "docsMcastCpeListSrcAddrType"), (0, "DOCS-MCAST-MIB", "docsMcastCpeListSrcAddr"), (0, "DOCS-MCAST-MIB", "docsMcastCpeListSrcPrefixLen"), (0, "DOCS-MCAST-MIB", "docsMcastCpeListCmMacAddr"))
if mibBuilder.loadTexts: docsMcastCpeListEntry.setStatus('current')
if mibBuilder.loadTexts: docsMcastCpeListEntry.setDescription('The conceptual row of docsMcastCpeListTable. The ifIndex key corresponds to the MAC Domain interface where the IP Multicast session is configured.')
docsMcastCpeListGrpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 9, 1, 1), InetAddressType())
if mibBuilder.loadTexts: docsMcastCpeListGrpAddrType.setStatus('current')
if mibBuilder.loadTexts: docsMcastCpeListGrpAddrType.setDescription('This attribute indicates the address family of the address contained in docsMcastCpeListGrpAddr.')
docsMcastCpeListGrpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 9, 1, 2), InetAddress())
if mibBuilder.loadTexts: docsMcastCpeListGrpAddr.setStatus('current')
if mibBuilder.loadTexts: docsMcastCpeListGrpAddr.setDescription("This attribute defines 'G' as the group address for a particular (S,G) IP multicast session.")
docsMcastCpeListGrpPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 9, 1, 3), InetAddressPrefixLength())
if mibBuilder.loadTexts: docsMcastCpeListGrpPrefixLen.setStatus('current')
if mibBuilder.loadTexts: docsMcastCpeListGrpPrefixLen.setDescription('This attribute defines the group address prefix length of a particular (S,G) IP multicast session.')
docsMcastCpeListSrcAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 9, 1, 4), InetAddressType())
if mibBuilder.loadTexts: docsMcastCpeListSrcAddrType.setStatus('current')
if mibBuilder.loadTexts: docsMcastCpeListSrcAddrType.setDescription('This attribute indicates the address family of the address contained in docsMcastCpeListSrcAddr.')
docsMcastCpeListSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 9, 1, 5), InetAddress())
if mibBuilder.loadTexts: docsMcastCpeListSrcAddr.setStatus('current')
if mibBuilder.loadTexts: docsMcastCpeListSrcAddr.setDescription("This attribute defines 'S' as the source address for a particular (S,G) IP multicast session. For the case of Any Source Multicast (ASM), this attribute uses a value of 0.0.0.0 for IPv4 or 0::/0 for IPv6. ")
docsMcastCpeListSrcPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 9, 1, 6), InetAddressPrefixLength())
if mibBuilder.loadTexts: docsMcastCpeListSrcPrefixLen.setStatus('current')
if mibBuilder.loadTexts: docsMcastCpeListSrcPrefixLen.setDescription('This attribute defines the source address prefix length of a particular (S,G) IP multicast session.')
docsMcastCpeListCmMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 9, 1, 7), MacAddress())
if mibBuilder.loadTexts: docsMcastCpeListCmMacAddr.setStatus('current')
if mibBuilder.loadTexts: docsMcastCpeListCmMacAddr.setDescription('This attribute defines the CM MAC address of a particular (S,G) IP multicast session.')
docsMcastCpeListDsid = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 9, 1, 8), Dsid()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsMcastCpeListDsid.setStatus('current')
if mibBuilder.loadTexts: docsMcastCpeListDsid.setDescription('This attribute defines the Downstream Service ID (DSID) label with which the CMTS labels all packets of a particular (S,G) IP multicast session.')
docsMcastCpeListCpeMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 9, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsMcastCpeListCpeMacAddr.setStatus('current')
if mibBuilder.loadTexts: docsMcastCpeListCpeMacAddr.setDescription('This attribute returns the CPE MAC address for the (S,G) IP multicast session.')
docsMcastCpeListCpeIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 9, 1, 10), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsMcastCpeListCpeIpAddrType.setStatus('current')
if mibBuilder.loadTexts: docsMcastCpeListCpeIpAddrType.setDescription('This attribute indicates the address family of the address contained in docsMcastCpeListCpeIpAddr.')
docsMcastCpeListCpeIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 9, 1, 11), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsMcastCpeListCpeIpAddr.setStatus('current')
if mibBuilder.loadTexts: docsMcastCpeListCpeIpAddr.setDescription('This attribute returns the CPE IP address for the (S,G) IP multicast session.')
docsMcastBandwidthTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 10), )
if mibBuilder.loadTexts: docsMcastBandwidthTable.setStatus('current')
if mibBuilder.loadTexts: docsMcastBandwidthTable.setDescription('The table contains the admitted aggregate bandwidth of IP Multicast sessions onto the different Downstream Channel Sets or MAC Domain Interfaces of a CMTS.')
docsMcastBandwidthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsMcastBandwidthEntry.setStatus('current')
if mibBuilder.loadTexts: docsMcastBandwidthEntry.setDescription('The conceptual row of docsMcastBandwidthTable. The ifIndex key corresponds to the MAC Domain interface or DCS associated with the bandwidth data. Note that for some vendors this CMTS cable interface will be a cable-mac interface. For others, it will be a DOCSIS Downstream Channel Set. In either case, this CMTS cable interface exists as a row entry in the ifTable (and therefore has an ifIndex which can be used as an index for this table).')
docsMcastBandwidthAdmittedAggrBW = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 10, 1, 1), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsMcastBandwidthAdmittedAggrBW.setStatus('current')
if mibBuilder.loadTexts: docsMcastBandwidthAdmittedAggrBW.setDescription('This attribute represents the Admitted Multicast Aggregate Bandwidth which is defined as the sum of the Minimum Reserved Traffic Rates of each Group Service Flow that has been admitted on a given CMTS cable interface.')
docsMcastBandwidthAdmittedAggrLowWater = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 10, 1, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsMcastBandwidthAdmittedAggrLowWater.setStatus('current')
if mibBuilder.loadTexts: docsMcastBandwidthAdmittedAggrLowWater.setDescription('This attribute represents the low watermark threshold for Admitted Multicast Aggregate Bandwidth events.')
docsMcastBandwidthAdmittedAggrHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 10, 1, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsMcastBandwidthAdmittedAggrHighWater.setStatus('current')
if mibBuilder.loadTexts: docsMcastBandwidthAdmittedAggrHighWater.setDescription('This attribute represents the high watermark threshold for Admitted Multicast Aggregate Bandwidth events.')
docsMcastMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 2))
docsMcastMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 2, 1))
docsMcastMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 2, 2))
docsMcastCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 2, 1, 1)).setObjects(("DOCS-MCAST-MIB", "docsMcastGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsMcastCompliance = docsMcastCompliance.setStatus('current')
if mibBuilder.loadTexts: docsMcastCompliance.setDescription('The compliance statement for devices that implement the DOCSIS Multicast MIB.')
docsMcastGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 2, 2, 1)).setObjects(("DOCS-MCAST-MIB", "docsMcastCmtsReplSessDsid"), ("DOCS-MCAST-MIB", "docsMcastCmtsReplSessSaid"), ("DOCS-MCAST-MIB", "docsMcastDefGrpSvcClassDef"), ("DOCS-MCAST-MIB", "docsMcastDsidPhsPhsField"), ("DOCS-MCAST-MIB", "docsMcastDsidPhsPhsMask"), ("DOCS-MCAST-MIB", "docsMcastDsidPhsPhsSize"), ("DOCS-MCAST-MIB", "docsMcastDsidPhsPhsVerify"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpCfgRulePriority"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpCfgPrefixAddrType"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpCfgSrcPrefixAddr"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpCfgSrcPrefixLen"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpCfgGrpPrefixAddr"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpCfgGrpPrefixLen"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpCfgTosLow"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpCfgTosHigh"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpCfgTosMask"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpCfgQosConfigId"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpCfgEncryptConfigId"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpCfgPhsConfigId"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpCfgRowStatus"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpQosCfgServiceClassName"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpQosCfgQosCtrl"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpQosCfgAggSessLimit"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpQosCfgAppId"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpQosCfgRowStatus"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpEncryptCfgCtrl"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpEncryptCfgAlg"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpEncryptCfgRowStatus"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpPhsCfgPhsField"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpPhsCfgPhsMask"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpPhsCfgPhsSize"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpPhsCfgPhsVerify"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpPhsCfgRowStatus"), ("DOCS-MCAST-MIB", "docsMcastStatsDroppedPkts"), ("DOCS-MCAST-MIB", "docsMcastStatsDroppedOctets"), ("DOCS-MCAST-MIB", "docsMcastCpeListDsid"), ("DOCS-MCAST-MIB", "docsMcastCpeListCpeMacAddr"), ("DOCS-MCAST-MIB", "docsMcastCpeListCpeIpAddrType"), ("DOCS-MCAST-MIB", "docsMcastCpeListCpeIpAddr"), ("DOCS-MCAST-MIB", "docsMcastBandwidthAdmittedAggrBW"), ("DOCS-MCAST-MIB", "docsMcastBandwidthAdmittedAggrLowWater"), ("DOCS-MCAST-MIB", "docsMcastBandwidthAdmittedAggrHighWater"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsMcastGroup = docsMcastGroup.setStatus('current')
if mibBuilder.loadTexts: docsMcastGroup.setDescription('Group of objects implemented in the CMTS.')
mibBuilder.exportSymbols("DOCS-MCAST-MIB", docsMcastDsidPhsDsid=docsMcastDsidPhsDsid, docsMcastCmtsGrpEncryptCfgRowStatus=docsMcastCmtsGrpEncryptCfgRowStatus, docsMcastDefGrpSvcClass=docsMcastDefGrpSvcClass, docsMcastCmtsGrpEncryptCfgTable=docsMcastCmtsGrpEncryptCfgTable, docsMcastDsidPhsPhsVerify=docsMcastDsidPhsPhsVerify, docsMcastStatsGrpAddrType=docsMcastStatsGrpAddrType, docsMcastCmtsGrpCfgQosConfigId=docsMcastCmtsGrpCfgQosConfigId, docsMcastMibObjects=docsMcastMibObjects, docsMcastCmtsReplSessSrcPrefix=docsMcastCmtsReplSessSrcPrefix, docsMcastStatsDroppedOctets=docsMcastStatsDroppedOctets, docsMcastBandwidthAdmittedAggrHighWater=docsMcastBandwidthAdmittedAggrHighWater, docsMcastDsidPhsTable=docsMcastDsidPhsTable, docsMcastCpeListGrpAddr=docsMcastCpeListGrpAddr, docsMcastCmtsGrpQosCfgServiceClassName=docsMcastCmtsGrpQosCfgServiceClassName, docsMcastCmtsGrpCfgGrpPrefixLen=docsMcastCmtsGrpCfgGrpPrefixLen, docsMcastCmtsGrpPhsCfgPhsMask=docsMcastCmtsGrpPhsCfgPhsMask, docsMcastCpeListCpeIpAddr=docsMcastCpeListCpeIpAddr, docsMcastCmtsReplSessMdIfIndex=docsMcastCmtsReplSessMdIfIndex, docsMcastCmtsGrpCfgId=docsMcastCmtsGrpCfgId, docsMcastStatsTable=docsMcastStatsTable, docsMcastCmtsGrpPhsCfgEntry=docsMcastCmtsGrpPhsCfgEntry, docsMcastBandwidthAdmittedAggrLowWater=docsMcastBandwidthAdmittedAggrLowWater, docsMcastCmtsGrpCfgRowStatus=docsMcastCmtsGrpCfgRowStatus, docsMcastCmtsGrpCfgEntry=docsMcastCmtsGrpCfgEntry, docsMcastMibCompliances=docsMcastMibCompliances, docsMcastCpeListEntry=docsMcastCpeListEntry, docsMcastCmtsGrpCfgTosHigh=docsMcastCmtsGrpCfgTosHigh, docsMcastStatsEntry=docsMcastStatsEntry, docsMcastCpeListCpeIpAddrType=docsMcastCpeListCpeIpAddrType, docsMcastCmtsReplSessDcsId=docsMcastCmtsReplSessDcsId, docsMcastStatsGrpAddr=docsMcastStatsGrpAddr, docsMcastStatsSrcAddr=docsMcastStatsSrcAddr, docsMcastDefGrpSvcClassDef=docsMcastDefGrpSvcClassDef, docsMcastCmtsGrpPhsCfgId=docsMcastCmtsGrpPhsCfgId, docsMcastCmtsGrpPhsCfgPhsField=docsMcastCmtsGrpPhsCfgPhsField, docsMcastBandwidthAdmittedAggrBW=docsMcastBandwidthAdmittedAggrBW, docsMcastBandwidthTable=docsMcastBandwidthTable, docsMcastCpeListGrpPrefixLen=docsMcastCpeListGrpPrefixLen, docsMcastCmtsGrpCfgSrcPrefixLen=docsMcastCmtsGrpCfgSrcPrefixLen, docsMcastCmtsGrpQosCfgTable=docsMcastCmtsGrpQosCfgTable, docsMcastCmtsGrpCfgRulePriority=docsMcastCmtsGrpCfgRulePriority, docsMcastCmtsGrpQosCfgQosCtrl=docsMcastCmtsGrpQosCfgQosCtrl, docsMcastCpeListSrcAddrType=docsMcastCpeListSrcAddrType, docsMcastCmtsReplSessTable=docsMcastCmtsReplSessTable, docsMcastCmtsReplSessServiceFlowId=docsMcastCmtsReplSessServiceFlowId, docsMcastCmtsGrpQosCfgRowStatus=docsMcastCmtsGrpQosCfgRowStatus, docsMcastCmtsGrpCfgSrcPrefixAddr=docsMcastCmtsGrpCfgSrcPrefixAddr, docsMcastCmtsGrpEncryptCfgAlg=docsMcastCmtsGrpEncryptCfgAlg, docsMcastStatsSrcAddrType=docsMcastStatsSrcAddrType, docsMcastCmtsGrpPhsCfgTable=docsMcastCmtsGrpPhsCfgTable, docsMcastCmtsGrpQosCfgAppId=docsMcastCmtsGrpQosCfgAppId, docsMcastCpeListGrpAddrType=docsMcastCpeListGrpAddrType, docsMcastCpeListDsid=docsMcastCpeListDsid, docsMcastCmtsGrpEncryptCfgEntry=docsMcastCmtsGrpEncryptCfgEntry, docsMcastCompliance=docsMcastCompliance, docsMcastCmtsGrpPhsCfgRowStatus=docsMcastCmtsGrpPhsCfgRowStatus, docsMcastStatsSrcPrefixLen=docsMcastStatsSrcPrefixLen, docsMcastCmtsGrpQosCfgEntry=docsMcastCmtsGrpQosCfgEntry, docsMcastMibConformance=docsMcastMibConformance, docsMcastCmtsReplSessGrpPrefix=docsMcastCmtsReplSessGrpPrefix, docsMcastCmtsGrpCfgGrpPrefixAddr=docsMcastCmtsGrpCfgGrpPrefixAddr, docsMcastCmtsReplSessPrefixAddrType=docsMcastCmtsReplSessPrefixAddrType, docsMcastStatsGrpPrefixLen=docsMcastStatsGrpPrefixLen, docsMcastCmtsReplSessSaid=docsMcastCmtsReplSessSaid, docsMcastMibGroups=docsMcastMibGroups, docsMcastCmtsGrpCfgEncryptConfigId=docsMcastCmtsGrpCfgEncryptConfigId, docsMcastCmtsReplSessEntry=docsMcastCmtsReplSessEntry, docsMcastDsidPhsPhsField=docsMcastDsidPhsPhsField, docsMcastCmtsGrpEncryptCfgId=docsMcastCmtsGrpEncryptCfgId, docsMcastCmtsReplSessDsid=docsMcastCmtsReplSessDsid, docsMcastCmtsGrpCfgPhsConfigId=docsMcastCmtsGrpCfgPhsConfigId, docsMcastCpeListSrcPrefixLen=docsMcastCpeListSrcPrefixLen, docsMcastCpeListSrcAddr=docsMcastCpeListSrcAddr, docsMcastCmtsGrpCfgTable=docsMcastCmtsGrpCfgTable, PYSNMP_MODULE_ID=docsMcastMib, docsMcastCpeListCmMacAddr=docsMcastCpeListCmMacAddr, docsMcastCmtsGrpPhsCfgPhsSize=docsMcastCmtsGrpPhsCfgPhsSize, docsMcastBandwidthEntry=docsMcastBandwidthEntry, docsMcastMib=docsMcastMib, docsMcastDsidPhsPhsMask=docsMcastDsidPhsPhsMask, docsMcastCmtsGrpEncryptCfgCtrl=docsMcastCmtsGrpEncryptCfgCtrl, docsMcastCmtsGrpCfgTosLow=docsMcastCmtsGrpCfgTosLow, docsMcastCmtsGrpCfgPrefixAddrType=docsMcastCmtsGrpCfgPrefixAddrType, docsMcastCmtsGrpQosCfgId=docsMcastCmtsGrpQosCfgId, docsMcastCpeListCpeMacAddr=docsMcastCpeListCpeMacAddr, docsMcastCmtsGrpCfgTosMask=docsMcastCmtsGrpCfgTosMask, docsMcastCmtsGrpQosCfgAggSessLimit=docsMcastCmtsGrpQosCfgAggSessLimit, docsMcastGroup=docsMcastGroup, docsMcastStatsDroppedPkts=docsMcastStatsDroppedPkts, docsMcastCmtsGrpPhsCfgPhsVerify=docsMcastCmtsGrpPhsCfgPhsVerify, docsMcastDsidPhsPhsSize=docsMcastDsidPhsPhsSize, docsMcastCpeListTable=docsMcastCpeListTable, docsMcastDsidPhsEntry=docsMcastDsidPhsEntry)
