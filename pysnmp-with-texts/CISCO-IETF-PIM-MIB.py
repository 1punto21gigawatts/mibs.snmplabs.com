#
# PySNMP MIB module CISCO-IETF-PIM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IETF-PIM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:00:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
cIpMRouteNextHopGroup, cIpMRouteAddrType, cIpMRouteNextHopSourceMask, cIpMRouteSource, cIpMRouteNextHopAddress, cIpMRouteNextHopAddrType, cIpMRouteNextHopSource, cIpMRouteNextHopIfIndex, cIpMRouteSourceMask, cIpMRouteGroup = mibBuilder.importSymbols("CISCO-IETF-IPMROUTE-MIB", "cIpMRouteNextHopGroup", "cIpMRouteAddrType", "cIpMRouteNextHopSourceMask", "cIpMRouteSource", "cIpMRouteNextHopAddress", "cIpMRouteNextHopAddrType", "cIpMRouteNextHopSource", "cIpMRouteNextHopIfIndex", "cIpMRouteSourceMask", "cIpMRouteGroup")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddress, InetAddressType, InetVersion, InetAddressPrefixLength = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetVersion", "InetAddressPrefixLength")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Gauge32, MibIdentifier, Unsigned32, Bits, iso, Counter64, ObjectIdentity, TimeTicks, Counter32, IpAddress, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Gauge32", "MibIdentifier", "Unsigned32", "Bits", "iso", "Counter64", "ObjectIdentity", "TimeTicks", "Counter32", "IpAddress", "ModuleIdentity", "NotificationType")
RowStatus, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString", "TruthValue")
ciscoIetfPimMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 119))
ciscoIetfPimMIB.setRevisions(('2005-02-22 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoIetfPimMIB.setRevisionsDescriptions(('Initial version of this MIB module',))
if mibBuilder.loadTexts: ciscoIetfPimMIB.setLastUpdated('200502220000Z')
if mibBuilder.loadTexts: ciscoIetfPimMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoIetfPimMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 Tel: +1 800 553-NETS E-mail: cs-ipmulticast@cisco.com ')
if mibBuilder.loadTexts: ciscoIetfPimMIB.setDescription('Address family independent MIB module for management of PIM routers. This MIB module is based on RFC 2934 with additional MIB objects added to make it address family independent MIB. This Cisco MIB was created due to non availability of RFC or an Internet Draft, which can provide address family independent MIB for management of PIM routers. This MIB may later be deprecated with a stable RFC or an Internet Draft. ')
cPimNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 119, 0))
cPimMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 119, 1))
cPim = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1))
cPimJoinPruneInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cPimJoinPruneInterval.setStatus('current')
if mibBuilder.loadTexts: cPimJoinPruneInterval.setDescription('The default interval at which periodic PIM-SM Join/Prune messages are to be sent.')
cPimIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 2), )
if mibBuilder.loadTexts: cPimIfTable.setStatus('current')
if mibBuilder.loadTexts: cPimIfTable.setDescription("The (conceptual) table listing the router's PIM interfaces. Along with PIM IGMP or MLD is enabled on all interfaces listed in this table.")
cPimIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-IETF-PIM-MIB", "cPimIfIndex"), (0, "CISCO-IETF-PIM-MIB", "cPimIfInetVersion"))
if mibBuilder.loadTexts: cPimIfEntry.setStatus('current')
if mibBuilder.loadTexts: cPimIfEntry.setDescription('An entry (conceptual row) in the pimIfTable.')
cPimIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cPimIfIndex.setStatus('current')
if mibBuilder.loadTexts: cPimIfIndex.setDescription('The ifIndex value of this PIM interface.')
cPimIfInetVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 2, 1, 2), InetVersion())
if mibBuilder.loadTexts: cPimIfInetVersion.setStatus('current')
if mibBuilder.loadTexts: cPimIfInetVersion.setDescription('The Inet version of this row.')
cPimIfAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 2, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cPimIfAddressType.setStatus('current')
if mibBuilder.loadTexts: cPimIfAddressType.setDescription('This objects identifies type of InetAddress presented in cPimIfAddress and cPimIfDR ')
cPimIfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 2, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cPimIfAddress.setStatus('current')
if mibBuilder.loadTexts: cPimIfAddress.setDescription('The Inet address of the PIM interface.')
cPimIfNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 2, 1, 5), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cPimIfNetMask.setStatus('current')
if mibBuilder.loadTexts: cPimIfNetMask.setDescription('The network mask for the IP address of the PIM interface.')
cPimIfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dense", 1), ("sparse", 2), ("sparseDense", 3))).clone('dense')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cPimIfMode.setStatus('current')
if mibBuilder.loadTexts: cPimIfMode.setDescription('The configured mode of this PIM interface. A value of sparseDense is only valid for PIMv1. dense (1): indicates interface is running PIM dense mode sparse (2): indicates interface is running PIM sparse mode. sparseDense (3): indicates interface is running both dense and sparse mode.')
cPimIfDR = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 2, 1, 7), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cPimIfDR.setStatus('current')
if mibBuilder.loadTexts: cPimIfDR.setDescription('The Designated Router on this PIM interface. For point-to- point interfaces, this object has the value 0.0.0.0 or 0::0')
cPimIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cPimIfHelloInterval.setStatus('current')
if mibBuilder.loadTexts: cPimIfHelloInterval.setDescription('The frequency at which PIM Hello messages are transmitted on this interface.')
cPimIfJoinPruneInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cPimIfJoinPruneInterval.setStatus('current')
if mibBuilder.loadTexts: cPimIfJoinPruneInterval.setDescription('The frequency at which PIM Join/Prune messages are transmitted on this PIM interface. The default value of this object is the pimJoinPruneInterval.')
cPimIfCBSRPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cPimIfCBSRPreference.setStatus('current')
if mibBuilder.loadTexts: cPimIfCBSRPreference.setDescription('The preference value for the local interface as a candidate bootstrap router. The value of -1 is used to indicate that the local interface is not a candidate BSR interface.')
cPimIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 2, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cPimIfStatus.setStatus('current')
if mibBuilder.loadTexts: cPimIfStatus.setDescription('The status of this entry. Creating the entry enables PIM on the interface; destroying the entry disables PIM on the interface.')
cPimNbrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 3), )
if mibBuilder.loadTexts: cPimNbrTable.setStatus('current')
if mibBuilder.loadTexts: cPimNbrTable.setDescription("The (conceptual) table listing the router's PIM neighbors.")
cPimNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-IETF-PIM-MIB", "cPimNbrIfIndex"), (0, "CISCO-IETF-PIM-MIB", "cPimNbrAddressType"), (0, "CISCO-IETF-PIM-MIB", "cPimNbrAddress"))
if mibBuilder.loadTexts: cPimNbrEntry.setStatus('current')
if mibBuilder.loadTexts: cPimNbrEntry.setDescription('An entry (conceptual row) in the pimNbrTable.')
cPimNbrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cPimNbrIfIndex.setStatus('current')
if mibBuilder.loadTexts: cPimNbrIfIndex.setDescription('The value of ifIndex for the interface used to reach this PIM neighbor.')
cPimNbrAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 3, 1, 2), InetAddressType())
if mibBuilder.loadTexts: cPimNbrAddressType.setStatus('current')
if mibBuilder.loadTexts: cPimNbrAddressType.setDescription('This objects identifies type of InetAddress presented in cPimNbrAddress.')
cPimNbrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 3, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: cPimNbrAddress.setStatus('current')
if mibBuilder.loadTexts: cPimNbrAddress.setDescription('The IP address of the PIM neighbor for which this entry contains information.')
cPimNbrUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cPimNbrUpTime.setStatus('current')
if mibBuilder.loadTexts: cPimNbrUpTime.setDescription('The time since this PIM neighbor (last) became a neighbor of the local router.')
cPimNbrExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 3, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cPimNbrExpiryTime.setStatus('current')
if mibBuilder.loadTexts: cPimNbrExpiryTime.setDescription('The minimum time remaining before this PIM neighbor will be aged out.')
cPimInetMRouteTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 4), )
if mibBuilder.loadTexts: cPimInetMRouteTable.setStatus('current')
if mibBuilder.loadTexts: cPimInetMRouteTable.setDescription('The (conceptual) table listing PIM-specific information on a subset of the rows of the cIpMRouteTable defined in the IP Multicast MIB.')
cPimInetMRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 4, 1), ).setIndexNames((0, "CISCO-IETF-IPMROUTE-MIB", "cIpMRouteAddrType"), (0, "CISCO-IETF-IPMROUTE-MIB", "cIpMRouteGroup"), (0, "CISCO-IETF-IPMROUTE-MIB", "cIpMRouteSource"), (0, "CISCO-IETF-IPMROUTE-MIB", "cIpMRouteSourceMask"))
if mibBuilder.loadTexts: cPimInetMRouteEntry.setStatus('current')
if mibBuilder.loadTexts: cPimInetMRouteEntry.setDescription('An entry (conceptual row) in the cPimInetMRouteTable. There is one entry per entry in the cIpMRouteTable whose incoming interface is running PIM.')
cPimInetMRouteUpstreamAssertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 4, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cPimInetMRouteUpstreamAssertTime.setStatus('current')
if mibBuilder.loadTexts: cPimInetMRouteUpstreamAssertTime.setDescription('The time remaining before the router changes its upstream neighbor back to its RPF neighbor. This timer is called the Assert timer in the PIM Sparse and Dense mode specification. A value of 0 indicates that no Assert has changed the upstream neighbor away from the RPF neighbor.')
cPimInetMRouteAssertMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cPimInetMRouteAssertMetric.setStatus('current')
if mibBuilder.loadTexts: cPimInetMRouteAssertMetric.setDescription('The metric advertised by the assert winner on the upstream interface, or 0 if no such assert is in received.')
cPimInetMRouteAssertMetricPref = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cPimInetMRouteAssertMetricPref.setStatus('current')
if mibBuilder.loadTexts: cPimInetMRouteAssertMetricPref.setDescription('The preference advertised by the assert winner on the upstream interface, or 0 if no such assert is in effect.')
cPimInetMRouteAssertRPTBit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 4, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cPimInetMRouteAssertRPTBit.setStatus('current')
if mibBuilder.loadTexts: cPimInetMRouteAssertRPTBit.setDescription('The value of the RPT-bit advertised by the assert winner on the upstream interface, or false if no such assert is in effect.')
cPimInetMRouteFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 4, 1, 5), Bits().clone(namedValues=NamedValues(("rpt", 0), ("spt", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cPimInetMRouteFlags.setStatus('current')
if mibBuilder.loadTexts: cPimInetMRouteFlags.setDescription('This object describes PIM-specific flags related to a multicast state entry. rpt (0): indicates the route is a shared-tree or RP-tree route. spt (1): indicates the route is a shortest-path-tree route.')
cPimInetMRouteNextHopTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 5), )
if mibBuilder.loadTexts: cPimInetMRouteNextHopTable.setStatus('current')
if mibBuilder.loadTexts: cPimInetMRouteNextHopTable.setDescription('The (conceptual) table listing PIM-specific information on a subset of the rows of the cIpMRouteNextHopTable defined in the IP Multicast MIB.')
cPimInetMRouteNextHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 5, 1), ).setIndexNames((0, "CISCO-IETF-IPMROUTE-MIB", "cIpMRouteNextHopAddrType"), (0, "CISCO-IETF-IPMROUTE-MIB", "cIpMRouteNextHopGroup"), (0, "CISCO-IETF-IPMROUTE-MIB", "cIpMRouteNextHopSource"), (0, "CISCO-IETF-IPMROUTE-MIB", "cIpMRouteNextHopSourceMask"), (0, "CISCO-IETF-IPMROUTE-MIB", "cIpMRouteNextHopIfIndex"), (0, "CISCO-IETF-IPMROUTE-MIB", "cIpMRouteNextHopAddress"))
if mibBuilder.loadTexts: cPimInetMRouteNextHopEntry.setStatus('current')
if mibBuilder.loadTexts: cPimInetMRouteNextHopEntry.setDescription('An entry (conceptual row) in the cPimInetMRouteNextHopTable. There is one entry per entry in the cIpMRouteNextHopTable whose interface is running PIM and whose cIpMRouteNextHopState is pruned(1).')
cPimInetMRouteNextHopPruneReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("prune", 2), ("assert", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cPimInetMRouteNextHopPruneReason.setStatus('current')
if mibBuilder.loadTexts: cPimInetMRouteNextHopPruneReason.setDescription('This object indicates the reason why downstream interface was pruned, prune (1): indicates downstream interface was pruned in response to a PIM prune message. assert (3): indicates downstream interface was pruned due to PIM assert processing.')
cPimRPMapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 6), )
if mibBuilder.loadTexts: cPimRPMapTable.setStatus('current')
if mibBuilder.loadTexts: cPimRPMapTable.setDescription('The (conceptual) table listing PIM information for candidate Rendezvous Points (RPs) for IP multicast groups. When the local router is the BSR, this information is obtained from received Candidate-RP-Advertisements. When the local router is not the BSR, this information is obtained from received RP-Set messages.')
cPimRPMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 6, 1), ).setIndexNames((0, "CISCO-IETF-PIM-MIB", "cPimRPMapComponent"), (0, "CISCO-IETF-PIM-MIB", "cPimRPMapAddrType"), (0, "CISCO-IETF-PIM-MIB", "cPimRPMapGroupAddress"), (0, "CISCO-IETF-PIM-MIB", "cPimRPMapGroupMask"), (0, "CISCO-IETF-PIM-MIB", "cPimRPMapAddress"))
if mibBuilder.loadTexts: cPimRPMapEntry.setStatus('current')
if mibBuilder.loadTexts: cPimRPMapEntry.setDescription('An entry (conceptual row) in the pimRPsTable.')
cPimRPMapComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: cPimRPMapComponent.setStatus('current')
if mibBuilder.loadTexts: cPimRPMapComponent.setDescription(' A number uniquely identifying the component. Each protocol instance connected to a separate domain should have a different index value.')
cPimRPMapAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 6, 1, 2), InetAddressType())
if mibBuilder.loadTexts: cPimRPMapAddrType.setStatus('current')
if mibBuilder.loadTexts: cPimRPMapAddrType.setDescription('Type of Inet address presented in this row. This includes cPimRPMapGroupAddress and cPimRPMapAddress')
cPimRPMapGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 6, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: cPimRPMapGroupAddress.setStatus('current')
if mibBuilder.loadTexts: cPimRPMapGroupAddress.setDescription('The IP multicast group address which, when combined with pimRPsGroupMask, gives the group prefix for which this entry contains information about the Candidate-RP.')
cPimRPMapGroupMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 6, 1, 4), InetAddressPrefixLength())
if mibBuilder.loadTexts: cPimRPMapGroupMask.setStatus('current')
if mibBuilder.loadTexts: cPimRPMapGroupMask.setDescription('The multicast group address mask which, when combined with pimRPsGroupAddress, gives the group prefix for which this entry contains information about the Candidate-RP.')
cPimRPMapAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 6, 1, 5), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: cPimRPMapAddress.setStatus('current')
if mibBuilder.loadTexts: cPimRPMapAddress.setDescription('The IP address of the Candidate-RP.')
cPimRPMapHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 6, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cPimRPMapHoldTime.setStatus('current')
if mibBuilder.loadTexts: cPimRPMapHoldTime.setDescription('The holdtime of a Candidate-RP. If the local router is not the BSR, this value is 0.')
cPimRPMapExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 6, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cPimRPMapExpiryTime.setStatus('current')
if mibBuilder.loadTexts: cPimRPMapExpiryTime.setDescription('The minimum time remaining before the Candidate-RP will be declared down. If the local router is not the BSR, this value is 0.')
cPimCRPTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 7), )
if mibBuilder.loadTexts: cPimCRPTable.setStatus('current')
if mibBuilder.loadTexts: cPimCRPTable.setDescription('The (conceptual) table listing the IP multicast groups for which the local router is to advertise itself as a Candidate-RP when the value of cPimComponentCRPHoldTime is non-zero. If this table is empty, then the local router will advertise itself as a Candidate-RP for all groups (providing the value of cPimComponentCRPHoldTime is non- zero).')
cPimCRPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 7, 1), ).setIndexNames((0, "CISCO-IETF-PIM-MIB", "cPimCRPAddrType"), (0, "CISCO-IETF-PIM-MIB", "cPimCRPGroupAddress"), (0, "CISCO-IETF-PIM-MIB", "cPimCRPGroupMask"))
if mibBuilder.loadTexts: cPimCRPEntry.setStatus('current')
if mibBuilder.loadTexts: cPimCRPEntry.setDescription('An entry (conceptual row) in the cPimCRPTable.')
cPimCRPAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 7, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cPimCRPAddrType.setStatus('current')
if mibBuilder.loadTexts: cPimCRPAddrType.setDescription('Type of Inet address presented in this row. This includes cPimCRPGroupAddress and cPimCRPAddress')
cPimCRPGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 7, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: cPimCRPGroupAddress.setStatus('current')
if mibBuilder.loadTexts: cPimCRPGroupAddress.setDescription('The IP multicast group address which, when combined with cPimCRPGroupMask, identifies a group prefix for which the local router will advertise itself as a Candidate-RP.')
cPimCRPGroupMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 7, 1, 3), InetAddressPrefixLength())
if mibBuilder.loadTexts: cPimCRPGroupMask.setStatus('current')
if mibBuilder.loadTexts: cPimCRPGroupMask.setDescription('The multicast group address mask which, when combined with cPimCRPGroupMask, identifies a group prefix for which the local router will advertise itself as a Candidate-RP.')
cPimCRPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 7, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cPimCRPAddress.setStatus('current')
if mibBuilder.loadTexts: cPimCRPAddress.setDescription('The (unicast) address of the interface which will be advertised as a Candidate-RP.')
cPimCRPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 7, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cPimCRPRowStatus.setStatus('current')
if mibBuilder.loadTexts: cPimCRPRowStatus.setDescription('The status of this row, by which new entries may be created, or old entries deleted from this table.')
cPimComponentTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 8), )
if mibBuilder.loadTexts: cPimComponentTable.setStatus('current')
if mibBuilder.loadTexts: cPimComponentTable.setDescription('The (conceptual) table containing objects specific to a PIM domain. One row exists for each domain to which the router is connected. A PIM-SM domain is defined as an area of the network over which Bootstrap messages are forwarded. Typically, a PIM-SM router will be a member of exactly one domain. This table also supports, however, routers which may form a border between two PIM-SM domains and do not forward Bootstrap messages between them.')
cPimComponentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 8, 1), ).setIndexNames((0, "CISCO-IETF-PIM-MIB", "cPimComponentIndex"))
if mibBuilder.loadTexts: cPimComponentEntry.setStatus('current')
if mibBuilder.loadTexts: cPimComponentEntry.setDescription('An entry (conceptual row) in the cPimComponentTable.')
cPimComponentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: cPimComponentIndex.setStatus('current')
if mibBuilder.loadTexts: cPimComponentIndex.setDescription('A number uniquely identifying the component. Each protocol instance connected to a separate domain should have a different index value. Routers that only support membership in a single PIM-SM domain should use a cPimComponentIndex value of 1.')
cPimComponentBSRAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 8, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cPimComponentBSRAddrType.setStatus('current')
if mibBuilder.loadTexts: cPimComponentBSRAddrType.setDescription('Type of Inet address presented in cPimComponentBSRAddress.')
cPimComponentBSRAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 8, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cPimComponentBSRAddress.setStatus('current')
if mibBuilder.loadTexts: cPimComponentBSRAddress.setDescription('The IP address of the bootstrap router (BSR) for the local PIM region.')
cPimComponentBSRExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 8, 1, 4), TimeTicks()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cPimComponentBSRExpiryTime.setStatus('current')
if mibBuilder.loadTexts: cPimComponentBSRExpiryTime.setDescription('The minimum time remaining before the bootstrap router in the local domain will be declared down. For candidate BSRs, this is the time until the component sends an RP-Set message. For other routers, this is the time until it may accept an RP-Set message from a lower candidate BSR.')
cPimComponentCRPHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 8, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cPimComponentCRPHoldTime.setStatus('current')
if mibBuilder.loadTexts: cPimComponentCRPHoldTime.setDescription('The holdtime of the component when it is a candidate RP in the local domain. The value of 0 is used to indicate that the local system is not a Candidate-RP.')
cPimComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 119, 1, 1, 8, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cPimComponentStatus.setStatus('current')
if mibBuilder.loadTexts: cPimComponentStatus.setDescription('The status of this entry. Creating the entry creates another protocol instance; destroying the entry disables a protocol instance.')
cPimNbrLoss = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 119, 0, 2)).setObjects(("CISCO-IETF-PIM-MIB", "cPimNbrUpTime"))
if mibBuilder.loadTexts: cPimNbrLoss.setStatus('current')
if mibBuilder.loadTexts: cPimNbrLoss.setDescription('A cPimNbrLoss trap signifies the loss of an adjacency with a neighbor. This trap should be generated when the neighbor timer expires, and the router has no other neighbors on the same interface with a lower IP address than itself.')
cPimMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 119, 2))
cPimMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 119, 2, 1))
cPimMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 119, 2, 2))
cPimSparseV2MIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 119, 2, 1, 1)).setObjects(("CISCO-IETF-PIM-MIB", "cPimV2MIBGroup"), ("CISCO-IETF-PIM-MIB", "cPimV2CRPMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cPimSparseV2MIBCompliance = cPimSparseV2MIBCompliance.setStatus('current')
if mibBuilder.loadTexts: cPimSparseV2MIBCompliance.setDescription('The compliance statement for routers running PIM Sparse Mode and implementing the PIM MIB.')
cPimDenseV2MIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 119, 2, 1, 2)).setObjects(("CISCO-IETF-PIM-MIB", "cPimDenseV2MIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cPimDenseV2MIBCompliance = cPimDenseV2MIBCompliance.setStatus('current')
if mibBuilder.loadTexts: cPimDenseV2MIBCompliance.setDescription('The compliance statement for routers running PIM Dense Mode and implementing the PIM MIB.')
cPimNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 10, 119, 2, 2, 1)).setObjects(("CISCO-IETF-PIM-MIB", "cPimNbrLoss"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cPimNotificationGroup = cPimNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: cPimNotificationGroup.setDescription('A collection of notifications for signaling important PIM events.')
cPimV2MIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 119, 2, 2, 2)).setObjects(("CISCO-IETF-PIM-MIB", "cPimJoinPruneInterval"), ("CISCO-IETF-PIM-MIB", "cPimNbrUpTime"), ("CISCO-IETF-PIM-MIB", "cPimNbrExpiryTime"), ("CISCO-IETF-PIM-MIB", "cPimIfAddressType"), ("CISCO-IETF-PIM-MIB", "cPimIfAddress"), ("CISCO-IETF-PIM-MIB", "cPimIfNetMask"), ("CISCO-IETF-PIM-MIB", "cPimIfDR"), ("CISCO-IETF-PIM-MIB", "cPimIfHelloInterval"), ("CISCO-IETF-PIM-MIB", "cPimIfStatus"), ("CISCO-IETF-PIM-MIB", "cPimIfJoinPruneInterval"), ("CISCO-IETF-PIM-MIB", "cPimIfCBSRPreference"), ("CISCO-IETF-PIM-MIB", "cPimIfMode"), ("CISCO-IETF-PIM-MIB", "cPimRPMapHoldTime"), ("CISCO-IETF-PIM-MIB", "cPimRPMapExpiryTime"), ("CISCO-IETF-PIM-MIB", "cPimComponentBSRAddrType"), ("CISCO-IETF-PIM-MIB", "cPimComponentBSRAddress"), ("CISCO-IETF-PIM-MIB", "cPimComponentBSRExpiryTime"), ("CISCO-IETF-PIM-MIB", "cPimComponentCRPHoldTime"), ("CISCO-IETF-PIM-MIB", "cPimComponentStatus"), ("CISCO-IETF-PIM-MIB", "cPimInetMRouteFlags"), ("CISCO-IETF-PIM-MIB", "cPimInetMRouteUpstreamAssertTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cPimV2MIBGroup = cPimV2MIBGroup.setStatus('current')
if mibBuilder.loadTexts: cPimV2MIBGroup.setDescription('A collection of objects to support management of PIM Sparse Mode (version 2) routers.')
cPimDenseV2MIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 119, 2, 2, 3)).setObjects(("CISCO-IETF-PIM-MIB", "cPimNbrUpTime"), ("CISCO-IETF-PIM-MIB", "cPimNbrExpiryTime"), ("CISCO-IETF-PIM-MIB", "cPimIfAddress"), ("CISCO-IETF-PIM-MIB", "cPimIfNetMask"), ("CISCO-IETF-PIM-MIB", "cPimIfDR"), ("CISCO-IETF-PIM-MIB", "cPimIfHelloInterval"), ("CISCO-IETF-PIM-MIB", "cPimIfStatus"), ("CISCO-IETF-PIM-MIB", "cPimIfMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cPimDenseV2MIBGroup = cPimDenseV2MIBGroup.setStatus('current')
if mibBuilder.loadTexts: cPimDenseV2MIBGroup.setDescription('A collection of objects to support management of PIM Dense Mode (version 2) routers.')
cPimV2CRPMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 119, 2, 2, 4)).setObjects(("CISCO-IETF-PIM-MIB", "cPimCRPAddress"), ("CISCO-IETF-PIM-MIB", "cPimCRPRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cPimV2CRPMIBGroup = cPimV2CRPMIBGroup.setStatus('current')
if mibBuilder.loadTexts: cPimV2CRPMIBGroup.setDescription('A collection of objects to support configuration of which groups a router is to advertise itself as a Candidate-RP.')
cPimNextHopGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 119, 2, 2, 5)).setObjects(("CISCO-IETF-PIM-MIB", "cPimInetMRouteNextHopPruneReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cPimNextHopGroup = cPimNextHopGroup.setStatus('current')
if mibBuilder.loadTexts: cPimNextHopGroup.setDescription('A collection of optional objects to provide per-next hop information for diagnostic purposes. Supporting this group may add a large number of instances to a tree walk, but the information in this group can be extremely useful in tracking down multicast connectivity problems.')
cPimAssertGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 119, 2, 2, 6)).setObjects(("CISCO-IETF-PIM-MIB", "cPimInetMRouteAssertMetric"), ("CISCO-IETF-PIM-MIB", "cPimInetMRouteAssertMetricPref"), ("CISCO-IETF-PIM-MIB", "cPimInetMRouteAssertRPTBit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cPimAssertGroup = cPimAssertGroup.setStatus('current')
if mibBuilder.loadTexts: cPimAssertGroup.setDescription('A collection of optional objects to provide extra information about the assert election process. There is no protocol reason to keep such information, but some implementations may already keep this information and make it available. These objects can also be very useful in debugging connectivity or duplicate packet problems, especially if the assert winner does not support the PIM and IP Multicast MIBs.')
mibBuilder.exportSymbols("CISCO-IETF-PIM-MIB", cPimIfAddress=cPimIfAddress, cPimCRPGroupAddress=cPimCRPGroupAddress, cPimMIBCompliances=cPimMIBCompliances, cPimMIBGroups=cPimMIBGroups, ciscoIetfPimMIB=ciscoIetfPimMIB, cPimIfTable=cPimIfTable, cPimInetMRouteTable=cPimInetMRouteTable, cPimInetMRouteAssertMetricPref=cPimInetMRouteAssertMetricPref, cPimRPMapGroupMask=cPimRPMapGroupMask, cPimCRPRowStatus=cPimCRPRowStatus, cPimIfDR=cPimIfDR, cPimRPMapHoldTime=cPimRPMapHoldTime, cPimNbrLoss=cPimNbrLoss, cPimComponentCRPHoldTime=cPimComponentCRPHoldTime, cPimComponentBSRAddress=cPimComponentBSRAddress, cPimNbrTable=cPimNbrTable, cPimIfCBSRPreference=cPimIfCBSRPreference, cPimJoinPruneInterval=cPimJoinPruneInterval, cPimNbrIfIndex=cPimNbrIfIndex, PYSNMP_MODULE_ID=ciscoIetfPimMIB, cPimInetMRouteEntry=cPimInetMRouteEntry, cPimRPMapTable=cPimRPMapTable, cPim=cPim, cPimCRPAddrType=cPimCRPAddrType, cPimNextHopGroup=cPimNextHopGroup, cPimInetMRouteAssertRPTBit=cPimInetMRouteAssertRPTBit, cPimInetMRouteNextHopPruneReason=cPimInetMRouteNextHopPruneReason, cPimNbrExpiryTime=cPimNbrExpiryTime, cPimIfInetVersion=cPimIfInetVersion, cPimIfNetMask=cPimIfNetMask, cPimAssertGroup=cPimAssertGroup, cPimInetMRouteUpstreamAssertTime=cPimInetMRouteUpstreamAssertTime, cPimComponentEntry=cPimComponentEntry, cPimIfJoinPruneInterval=cPimIfJoinPruneInterval, cPimRPMapExpiryTime=cPimRPMapExpiryTime, cPimComponentStatus=cPimComponentStatus, cPimDenseV2MIBCompliance=cPimDenseV2MIBCompliance, cPimNbrAddress=cPimNbrAddress, cPimComponentBSRAddrType=cPimComponentBSRAddrType, cPimCRPAddress=cPimCRPAddress, cPimRPMapAddress=cPimRPMapAddress, cPimComponentBSRExpiryTime=cPimComponentBSRExpiryTime, cPimInetMRouteNextHopEntry=cPimInetMRouteNextHopEntry, cPimV2CRPMIBGroup=cPimV2CRPMIBGroup, cPimNbrUpTime=cPimNbrUpTime, cPimIfMode=cPimIfMode, cPimSparseV2MIBCompliance=cPimSparseV2MIBCompliance, cPimComponentIndex=cPimComponentIndex, cPimIfIndex=cPimIfIndex, cPimNbrEntry=cPimNbrEntry, cPimCRPGroupMask=cPimCRPGroupMask, cPimDenseV2MIBGroup=cPimDenseV2MIBGroup, cPimComponentTable=cPimComponentTable, cPimMIBConformance=cPimMIBConformance, cPimNotifs=cPimNotifs, cPimMIBObjects=cPimMIBObjects, cPimInetMRouteFlags=cPimInetMRouteFlags, cPimNotificationGroup=cPimNotificationGroup, cPimV2MIBGroup=cPimV2MIBGroup, cPimNbrAddressType=cPimNbrAddressType, cPimInetMRouteAssertMetric=cPimInetMRouteAssertMetric, cPimRPMapComponent=cPimRPMapComponent, cPimCRPTable=cPimCRPTable, cPimIfAddressType=cPimIfAddressType, cPimIfEntry=cPimIfEntry, cPimInetMRouteNextHopTable=cPimInetMRouteNextHopTable, cPimCRPEntry=cPimCRPEntry, cPimIfStatus=cPimIfStatus, cPimIfHelloInterval=cPimIfHelloInterval, cPimRPMapAddrType=cPimRPMapAddrType, cPimRPMapEntry=cPimRPMapEntry, cPimRPMapGroupAddress=cPimRPMapGroupAddress)
