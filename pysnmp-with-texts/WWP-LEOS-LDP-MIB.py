#
# PySNMP MIB module WWP-LEOS-LDP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-LEOS-LDP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:38:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
IndexInteger, = mibBuilder.importSymbols("DIFFSERV-MIB", "IndexInteger")
MplsLdpIdentifier, = mibBuilder.importSymbols("MPLS-TC-STD-MIB", "MplsLdpIdentifier")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Gauge32, TimeTicks, IpAddress, Bits, Counter32, iso, Counter64, Integer32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ObjectIdentity, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Gauge32", "TimeTicks", "IpAddress", "Bits", "Counter32", "iso", "Counter64", "Integer32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ObjectIdentity", "ModuleIdentity")
TextualConvention, DisplayString, MacAddress, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress", "RowStatus", "TruthValue")
wwpModulesLeos, = mibBuilder.importSymbols("WWP-SMI", "wwpModulesLeos")
wwpLeosLdpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 60, 32))
wwpLeosLdpMIB.setRevisions(('2001-04-03 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpLeosLdpMIB.setRevisionsDescriptions(('Initial creation.',))
if mibBuilder.loadTexts: wwpLeosLdpMIB.setLastUpdated('200104031700Z')
if mibBuilder.loadTexts: wwpLeosLdpMIB.setOrganization('Ciena, Inc')
if mibBuilder.loadTexts: wwpLeosLdpMIB.setContactInfo(' Mib Meister 115 North Sullivan Road Spokane Valley, WA 99037 USA Phone: +1 509 242 9000 Email: support@ciena.com')
if mibBuilder.loadTexts: wwpLeosLdpMIB.setDescription('This MIB module is for the Extension of the BRIDGE MIB for WWP Products')
wwpLeosLdpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 32, 1))
wwpLeosLdpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 32, 1, 1))
wwpLeosLdp = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 32, 1, 2))
wwpLeosLdpAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 32, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosLdpAdminStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosLdpAdminStatus.setDescription('Globally enable/disable LDP')
wwpLeosLdpOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 32, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLdpOperStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosLdpOperStatus.setDescription('Current operational state of LDP')
wwpLeosLdpHelloHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 32, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosLdpHelloHoldTime.setStatus('current')
if mibBuilder.loadTexts: wwpLeosLdpHelloHoldTime.setDescription('The 16-bit integer value which is the proposed global hello hold timer (in seconds) for LDP. An LSR maintains a record of Hellos received from potential peers. This object represents the Hold Time in the Common Hello Parameters TLV of the Hello Message. A value of 65535 means infinite (i.e., wait forever). All other values represent the amount of time in seconds to wait for a Hello Message. Setting the hold time to a value smaller than 15 is not recommended, although not forbidden according to RFC3036.')
wwpLeosLdpKeepAliveHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 32, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosLdpKeepAliveHoldTime.setStatus('current')
if mibBuilder.loadTexts: wwpLeosLdpKeepAliveHoldTime.setDescription('The 16-bit integer value which is the proposed global keep alive hold timer for LDP.')
wwpLeosLdpSessionTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 32, 1, 2, 1), )
if mibBuilder.loadTexts: wwpLeosLdpSessionTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosLdpSessionTable.setDescription('A table of Sessions between the LDP Entities and LDP Peers. Each row in this table represents a single session.')
wwpLeosLdpSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 32, 1, 2, 1, 1), ).setIndexNames((0, "WWP-LEOS-LDP-MIB", "wwpLeosLdpEntityLdpId"), (0, "WWP-LEOS-LDP-MIB", "wwpLeosLdpEntityIndex"), (0, "WWP-LEOS-LDP-MIB", "wwpLeosLdpPeerLdpId"))
if mibBuilder.loadTexts: wwpLeosLdpSessionEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosLdpSessionEntry.setDescription("An entry in this table represents information on a single session between an LDP Entity and LDP Peer. The information contained in a row is read-only. Please note: the Path Vector Limit for the Session is the value which is configured in the corresponding mplsLdpEntityEntry. The Peer's Path Vector Limit is in the mplsLdpPeerPathVectorLimit object in the mplsLdpPeerTable. Values which may differ from those configured are noted in the objects of this table, the mplsLdpAtmSessionTable and the mplsLdpFrameRelaySessionTable. A value will differ if it was negotiated between the Entity and the Peer. Values may or may not be negotiated. For example, if the values are the same then no negotiation takes place. If they are negotiated, then they may differ.")
wwpLeosLdpEntityLdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 32, 1, 2, 1, 1, 1), MplsLdpIdentifier())
if mibBuilder.loadTexts: wwpLeosLdpEntityLdpId.setReference('RFC3036, LDP Specification, Section on LDP Identifiers.')
if mibBuilder.loadTexts: wwpLeosLdpEntityLdpId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosLdpEntityLdpId.setDescription('The LDP identifier. The first four octets encode an IP address assigned to the LSR, and the last two octets identify a specific label space within the LSR.')
wwpLeosLdpEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 32, 1, 2, 1, 1, 2), IndexInteger())
if mibBuilder.loadTexts: wwpLeosLdpEntityIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosLdpEntityIndex.setDescription("This index is used as a secondary index to uniquely identify this row. Before creating a row in this table, the 'mplsLdpEntityIndexNext' object should be retrieved. That value should be used for the value of this index when creating a row in this table. NOTE: if a value of zero (0) is retrieved, that indicates that no rows can be created in this table at this time. A secondary index (this object) is meaningful to some but not all, LDP implementations. For example an LDP implementation which uses PPP would use this index to differentiate PPP sub-links. Another way to use this index is to give this the value of ifIndex. However, this is dependant on the implementation. This field is deprecated in the following tables provided by DC-CR-LDP Session Controller. - mplsLdpEntityTable. - mplsLdpPeerTable. In these tables the value of the Entity Index will always be filled in to be 1.")
wwpLeosLdpPeerLdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 32, 1, 2, 1, 1, 3), MplsLdpIdentifier())
if mibBuilder.loadTexts: wwpLeosLdpPeerLdpId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosLdpPeerLdpId.setDescription('The LDP identifier of this LDP Peer.')
wwpLeosLdpSessionConfiguredHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 32, 1, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLdpSessionConfiguredHoldTime.setStatus('current')
if mibBuilder.loadTexts: wwpLeosLdpSessionConfiguredHoldTime.setDescription('The locally configured keepalive hold time for this session, in seconds. Note that the value of this field reflects configuration at the time of session initialization; this may differ from the configuration that would apply to a new session, if configuration has changed since this session was initialized.')
wwpLeosLdpSessionPeerHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 32, 1, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLdpSessionPeerHoldTime.setStatus('current')
if mibBuilder.loadTexts: wwpLeosLdpSessionPeerHoldTime.setDescription("The peer's advertised keepalive hold time for this session in seconds. Note that the value of this field reflects the peer's configuration at the time of session initialization; this may differ from the configuration that would apply to a new session, if the peer's configuration has changed since this session was initialized.")
wwpLeosLdpSessionHoldTimeInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 32, 1, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLdpSessionHoldTimeInUse.setStatus('current')
if mibBuilder.loadTexts: wwpLeosLdpSessionHoldTimeInUse.setDescription('The keepalive hold time that is currently in use for this session, in seconds.')
wwpLeosLdpHelloAdjacencyTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 32, 1, 2, 2), )
if mibBuilder.loadTexts: wwpLeosLdpHelloAdjacencyTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosLdpHelloAdjacencyTable.setDescription('A table of Hello Adjacencies for Sessions.')
wwpLeosLdpHelloAdjacencyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 32, 1, 2, 2, 1), ).setIndexNames((0, "WWP-LEOS-LDP-MIB", "wwpLeosLdpEntityLdpId"), (0, "WWP-LEOS-LDP-MIB", "wwpLeosLdpEntityIndex"), (0, "WWP-LEOS-LDP-MIB", "wwpLeosLdpPeerLdpId"), (0, "WWP-LEOS-LDP-MIB", "wwpLeosLdpHelloAdjacencyIndex"))
if mibBuilder.loadTexts: wwpLeosLdpHelloAdjacencyEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosLdpHelloAdjacencyEntry.setDescription('Each row represents a single LDP Hello Adjacency. An LDP Session can have one or more Hello Adjacencies.')
wwpLeosLdpHelloAdjacencyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 32, 1, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: wwpLeosLdpHelloAdjacencyIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosLdpHelloAdjacencyIndex.setDescription('An identifier for this specific adjacency.')
wwpLeosLdpHelloAdjacencyConfiguredHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 32, 1, 2, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLdpHelloAdjacencyConfiguredHoldTime.setStatus('current')
if mibBuilder.loadTexts: wwpLeosLdpHelloAdjacencyConfiguredHoldTime.setDescription('The locally configured hello hold time for this adjacency, in seconds.')
wwpLeosLdpHelloAdjacencyPeerHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 32, 1, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLdpHelloAdjacencyPeerHoldTime.setStatus('current')
if mibBuilder.loadTexts: wwpLeosLdpHelloAdjacencyPeerHoldTime.setDescription("The peer's advertised hello hold time for this adjacency, in seconds.")
wwpLeosLdpIfTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 32, 1, 2, 3), )
if mibBuilder.loadTexts: wwpLeosLdpIfTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosLdpIfTable.setDescription('A table of interfaces that LDP can be enabled on.')
wwpLeosLdpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 32, 1, 2, 3, 1), ).setIndexNames((0, "WWP-LEOS-LDP-MIB", "wwpLeosLdpIfIndex"))
if mibBuilder.loadTexts: wwpLeosLdpIfEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosLdpIfEntry.setDescription('WWP Descr.')
wwpLeosLdpIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 32, 1, 2, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLdpIfName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosLdpIfName.setDescription('Interface Name')
wwpLeosLdpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 32, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: wwpLeosLdpIfIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosLdpIfIndex.setDescription('Interface Index')
wwpLeosLdpIfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 32, 1, 2, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLdpIfIpAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosLdpIfIpAddr.setDescription('Interface IP Address')
wwpLeosLdpIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 32, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosLdpIfAdminStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosLdpIfAdminStatus.setDescription('Desired LDP status on this Interface')
wwpLeosLdpIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 32, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLdpIfOperStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosLdpIfOperStatus.setDescription('LDP Operational Status on this Interface')
mibBuilder.exportSymbols("WWP-LEOS-LDP-MIB", wwpLeosLdpIfOperStatus=wwpLeosLdpIfOperStatus, wwpLeosLdpHelloHoldTime=wwpLeosLdpHelloHoldTime, wwpLeosLdpIfEntry=wwpLeosLdpIfEntry, wwpLeosLdpOperStatus=wwpLeosLdpOperStatus, wwpLeosLdpIfTable=wwpLeosLdpIfTable, wwpLeosLdpSessionEntry=wwpLeosLdpSessionEntry, wwpLeosLdpIfIndex=wwpLeosLdpIfIndex, wwpLeosLdp=wwpLeosLdp, wwpLeosLdpKeepAliveHoldTime=wwpLeosLdpKeepAliveHoldTime, wwpLeosLdpHelloAdjacencyTable=wwpLeosLdpHelloAdjacencyTable, wwpLeosLdpSessionPeerHoldTime=wwpLeosLdpSessionPeerHoldTime, wwpLeosLdpIfAdminStatus=wwpLeosLdpIfAdminStatus, wwpLeosLdpIfIpAddr=wwpLeosLdpIfIpAddr, wwpLeosLdpHelloAdjacencyEntry=wwpLeosLdpHelloAdjacencyEntry, wwpLeosLdpSessionHoldTimeInUse=wwpLeosLdpSessionHoldTimeInUse, wwpLeosLdpEntityIndex=wwpLeosLdpEntityIndex, wwpLeosLdpEntityLdpId=wwpLeosLdpEntityLdpId, wwpLeosLdpPeerLdpId=wwpLeosLdpPeerLdpId, wwpLeosLdpObjects=wwpLeosLdpObjects, wwpLeosLdpSessionTable=wwpLeosLdpSessionTable, wwpLeosLdpAdminStatus=wwpLeosLdpAdminStatus, PYSNMP_MODULE_ID=wwpLeosLdpMIB, wwpLeosLdpHelloAdjacencyIndex=wwpLeosLdpHelloAdjacencyIndex, wwpLeosLdpIfName=wwpLeosLdpIfName, wwpLeosLdpMIB=wwpLeosLdpMIB, wwpLeosLdpHelloAdjacencyConfiguredHoldTime=wwpLeosLdpHelloAdjacencyConfiguredHoldTime, wwpLeosLdpSessionConfiguredHoldTime=wwpLeosLdpSessionConfiguredHoldTime, wwpLeosLdpHelloAdjacencyPeerHoldTime=wwpLeosLdpHelloAdjacencyPeerHoldTime, wwpLeosLdpMIBObjects=wwpLeosLdpMIBObjects)
