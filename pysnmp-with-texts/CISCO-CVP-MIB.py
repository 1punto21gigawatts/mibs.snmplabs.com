#
# PySNMP MIB module CISCO-CVP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CVP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:54:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoURLString, = mibBuilder.importSymbols("CISCO-TC", "CiscoURLString")
InetAddressDNS, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressDNS")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter32, NotificationType, Gauge32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter64, iso, Integer32, TimeTicks, ObjectIdentity, Bits, IpAddress, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "NotificationType", "Gauge32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter64", "iso", "Integer32", "TimeTicks", "ObjectIdentity", "Bits", "IpAddress", "ModuleIdentity")
DateAndTime, TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TruthValue", "DisplayString", "TextualConvention")
ciscoCvpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 590))
ciscoCvpMIB.setRevisions(('2011-09-22 00:00', '2007-10-31 00:00', '2006-10-06 00:00', '2006-05-19 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoCvpMIB.setRevisionsDescriptions(('Added ccvpSipIntPostCallAnswered, ccvpSipIntWhisperAnswered,ccvpSipIntWhisperFailed,ccvpSipIntGree tingAnswered , ccvpSipIntGreetingFailed', 'Added ccvpSipVideoTableGroup, ccvpIvrVideoTableGroup and ccvpIcmVideoTableGroup to include Video statistics.', "Added objects: ccvpLicPortUsageWarning and ccvpLicPortUsageCritical to expose the current threshold settings for the port usage states of 'warning' and 'critical' respectively. Also added UNITS clause 'minutes' to ccvpServiceIntPeriod.", 'This is the initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoCvpMIB.setLastUpdated('201109220000Z')
if mibBuilder.loadTexts: ciscoCvpMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoCvpMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: ccbu-serviceability@cisco.com')
if mibBuilder.loadTexts: ciscoCvpMIB.setDescription('The Cisco Unified Customer Voice Portal (CVP) application integrates with both traditional time-division multiplexing (TDM) and IP-based contact centers to provide an unparalleled call management and call treatment solution with a self- service, speech-enabled Interactive Voice Rresponse (IVR) option that can use information available to customers on the corporate Web server. With support for automated speech recognition (ASR) and text- to-speech (TTS) capabilities, callers can obtain personalized answers to increasingly complex questions and can conduct business in new and innovative ways ?- all without the costs of interacting with a live agent. CVP is a distributed, self-service IVR application. The solution is comprised of a set of distinct services; each performs a specific function. The services are loosely coupled, which aides its distributed nature, and yet they are tightly integrated. Each service provides a core function and is dependent upon the other services to perform that function. A single CVP server may have one or more services installed on a single server; even in the smallest deployment scenarios, there will be at least two servers -- a call server and a Voice XML (VXML) server. The call server, whether it is a single physical server or a virtual set of servers, will include the SIP service, the IVR service and in many cases, the ICM service. Environments desiring the use of the H.323 protocol will have the H.323 service either exclusively or in concert with the SIP service available on the call server. The server providing VXML services will have the VXML server (which executes the IVR scripts, plays prompts and collects digits) and the VXML service which provides the interface between the other CVP services and the VXML server. A reporting server houses a database management system and the CVP reporting service which receives events from other CVP services and writes data to the database. The number of servers that are part of the solution will scale to the expected capacity for that deployment. For many deployments, CVP works in concert with the Cisco Unified Intelligent Contact Management (ICM) Enterprise and/or the Cisco Unified Contact Center Enterprise contact management systems. In this deployment scenario, CVP acts as a self- service and IVR platform and interfaces with the ICM for subsequent call routing, typically to a call center agent (a human resource tasked with answering inbound calls and providing services to callers). Using the aforementioned call control protocols -- SIP and H.323 -- CVP interacts with all these devices to switch the calls to the desired destination. The Cisco Unified Customer Voice Portal (CVP) Management Information Base (MIB) module defines management instrumentation for CVP services. Each distinct CVP service exposes instrumentation related to its specific function. The bulk of this instrumentation is run-time statistics that provide insight into the health, performance and capacity utilization of the CVP solution. Notifications are also a key component of this instrumentation. This MIB also defines a notification format that offers descriptive objects as well as objects that ease the task of correlating events at the management station. The MIB is structured such that at the highest level is a single generic table which enumerates the installed CVP services and provides a description of each as well as a real-time status. The index of this table is used to relate the service entry to an entry in a table of additional instrumentation that is specific to that CVP service type. There are also several groups of objects that are exposed on each CVP server regardless of the services installed. DEFINITION OF TERMS AND ACRONYMS CVP Customer Voice Portal GED-125 A messaging protocol that extends an interface to a Interactive Voice Response (IVR) (AKA Voice Response Unit (VRU)) device. The protocol allows for basic call control and running scripts on the IVR to play prompts and collect user input. IVR Interactive Voice Response JVM Java Virtual Machine OAMP Operations, Administration, Maintenance and Provisioning RTP Real-time Transport Protocol SIP Session Initiation Protocol VRU Voice Response Unit')
ciscoCvpMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 590, 0))
ciscoCvpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 590, 1))
ccvpGeneralInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 1))
ccvpLicensingInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 2))
ccvpThreadPoolInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 3))
ccvpJvmInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 4))
ccvpServices = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 5))
ccvpServiceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6))
ccvpNotificationInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 7))
ciscoCvpMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 590, 2))
ciscoCvpMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 1))
ciscoCvpMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 2))
class CcvpIndex(TextualConvention, Unsigned32):
    description = 'This syntax is used as the index into a table. A positive value is used to identify a unique entry in the table.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class CcvpServiceType(TextualConvention, Integer32):
    description = "This syntax is used to identify the type of Customer Voice Portal service. A CVP solution includes at least one, but probably multiple, of the following services. 'sip': SIP Service: The CVP SIP service acts as an active intermediary for a call, communicating with both the source and destination legs of the call, and providing 3rd party call control capabilities on behalf of a routing engine. 'h323': H.323 Voice Browser Service: The CVP H.323 service interacts with the CVP IVR service to relay call arrival, departure and transfer instructions between it and other H.323 devices in the network. 'ivr': Interactive Voice Response (IVR) Service: The CVP IVR service is responsible for creating the VXML pages which implement the CVP microapps based on instructions received from the ICM. 'icm': Intelligent Contact Management (ICM) Interface Service: The CVP ICM service is responsible for all communication between CVP components and ICM. 'reporting': Reporting Service: The CVP Reporting service receives reporting events from the CVP IVR service, the CVP SIP service, and the CVP VoiceXML service. 'vxml': Voice XML Service: The Voice XML service affords standalone applications the ability to forward reporting events to a CVP reporting server, and to make ancillary routing requests and exchange call context information with an ICM, if one is present."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("sip", 1), ("h323", 2), ("ivr", 3), ("icm", 4), ("reporting", 5), ("vxml", 6))

class CcvpServiceStatus(TextualConvention, Integer32):
    description = "This syntax is used to identify the run status of a Customer Voice Portal distributed service. The value shown is the result of evaluating the current run status of each of the individual elements associated with the service. 'disabled' The service has not yet begun to start up. 'starting' The service is in initialization procedure, configuring and licensing, not accepting connections yet. 'inService' The service is up and running optimally, accepting connections at full QoS (if applicable). 'inServiceWarning' The service is running sub-optimally, possibly due to poor QoS or a threshold reached; see transition reason for explanation. 'inServiceCritical' The service is running but very near to failure, similar to 'inServiceWarning' but much more dire. 'partialService' The service is no longer accepting new calls but finishes processing active calls (may be due to a loss of a dependency/ connectivity, or a shutdown request). 'stopping' The service no longer accepts new connections, lets current connections terminate gracefully. 'stopped' The service has shut down and is not processing any more calls. The process itself is terminating (doing memory cleanup, saving settings, shutting down threads, etc.). 'unknown' The status of the CVP service is unknown to the SNMP agent either because the link between the agent and the application has been broken or the agent is in the midst of refreshing service status. (A refresh typically occurs after an agent restart due to configuration changes.)"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("disabled", 0), ("starting", 1), ("inService", 2), ("inServiceWarning", 3), ("inServiceCritical", 4), ("partialService", 5), ("stopping", 6), ("stopped", 7), ("unknown", 8))

ccvpServerName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 1, 1), InetAddressDNS()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpServerName.setStatus('current')
if mibBuilder.loadTexts: ccvpServerName.setDescription('The server name object is the fully-qualified domain name of the Customer Voice Portal server.')
ccvpDescription = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpDescription.setStatus('current')
if mibBuilder.loadTexts: ccvpDescription.setDescription('The description object holds a textual description of the Customer Voice Portal software installed on this server. This is typically the full name of the application.')
ccvpVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpVersion.setStatus('current')
if mibBuilder.loadTexts: ccvpVersion.setDescription('The version object identifies the version number of the Customer Voice Portal software installed on this server.')
ccvpStartTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpStartTime.setStatus('current')
if mibBuilder.loadTexts: ccvpStartTime.setDescription('The start time object is thedate and time that the Customer Voice Portal application was started on this server.')
ccvpTimeZoneName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpTimeZoneName.setStatus('current')
if mibBuilder.loadTexts: ccvpTimeZoneName.setDescription('The time zone name object specifies the name of the time zone where the Customer Voice Portal server is physically located.')
ccvpTimeZoneOffsetHours = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-12, 12))).setUnits('hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpTimeZoneOffsetHours.setStatus('current')
if mibBuilder.loadTexts: ccvpTimeZoneOffsetHours.setDescription('The time zone offset hours object represents the number of hours that the local time, in the time zone where the Customer Voice Portal server is physically located, differs from Greenwich Mean Time (GMT).')
ccvpTimeZoneOffsetMinutes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-59, 59))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpTimeZoneOffsetMinutes.setStatus('current')
if mibBuilder.loadTexts: ccvpTimeZoneOffsetMinutes.setDescription("The time zone offset minutes object represents the number of minutes that the local time, in the time zone where the Customer Voice Portal server is physically located, differs from Greenwich Mean Time (GMT). This object is combined with ccvpTimeZoneOffsetHours object to represent the local time zone's total offset from GMT.")
ccvpOpsConsoleURL = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 1, 8), CiscoURLString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpOpsConsoleURL.setStatus('current')
if mibBuilder.loadTexts: ccvpOpsConsoleURL.setDescription('The ops console URL object holds the URL for the Customer Voice Portal operations Console web server. The operations console offers a web-based, centralized interface for mapping and summarizing the solution network configuration, setting and displaying configuration infomration on a batch or per-node basis and storing local copies of those configurations. Other functions include troubleshooting, health monitoring and direct administration. This object offers a web navigation point from the management station (assuming a web interface) to quickly access the CVP Operations Console web server.')
ccvpSupportToolsURL = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 1, 9), CiscoURLString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSupportToolsURL.setStatus('current')
if mibBuilder.loadTexts: ccvpSupportToolsURL.setDescription('The support tools URL object holds the URL for an enterprise contact center support tools application server. The support tools application server is an optional component of the solution and offers a centralized server for diagnostic and troubleshooting tools. This object offers a navigation point from the management station (assuming a web interface) to quickly access the support tools application server.')
ccvpEnableNotifications = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpEnableNotifications.setStatus('current')
if mibBuilder.loadTexts: ccvpEnableNotifications.setDescription('The enable notifications object allows the management station to disable and alternatively enable outbound notifications. By default, notifications are enabled.')
ccvpLicRtPortsAvail = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 2, 1), Gauge32()).setUnits('ports').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpLicRtPortsAvail.setStatus('current')
if mibBuilder.loadTexts: ccvpLicRtPortsAvail.setDescription('The real-time port licenses available object is a real-time snapshot metric indicating the number of port licenses available for the processing of new calls. Exactly one port license is used per call, independent of the calls traversal of the individual call server subsystems.')
ccvpLicRtPortsInUse = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 2, 2), Gauge32()).setUnits('ports').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpLicRtPortsInUse.setStatus('current')
if mibBuilder.loadTexts: ccvpLicRtPortsInUse.setDescription("The real-time ports in use object is a real-time snapshot metric indicating the number of port licenses currently in use on the call server. Exactly one port license is used per call, independent of the call's traversal of the individual call server subsystems.")
ccvpLicRtPortState = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("safe", 0), ("unknown", 1), ("warning", 2), ("critical", 3), ("failure", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpLicRtPortState.setStatus('current')
if mibBuilder.loadTexts: ccvpLicRtPortState.setDescription("The real-time port state object is a real-time snapshot metric indicating the threshold level of port license usage. There are five levels: 'safe' Port usage is within a safe range. 'unknown' Port usage state is currently unknown. 'warning' Port usage is rising, approaching a level of concern. 'critical' Port usage is precariously close to the limit. 'failure' Port usage has reached or exceeded the maximum allowable and calls are currently being rejected. An administrator may set the required percentage of port licenses in use needed to reach a given threshold level, with the exception of the failure level which is reached when the number of ports checked out is equal to the total number of licenses ports.")
ccvpLicIntLastUpdate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 2, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpLicIntLastUpdate.setStatus('current')
if mibBuilder.loadTexts: ccvpLicIntLastUpdate.setDescription('The interval last update object holds the date and time of the last refresh of interval and aggregate statistic object values. Interval and aggregate statistics are reported at a regular interval (the interval held by the interval period object).')
ccvpLicIntPeriod = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 2, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpLicIntPeriod.setStatus('current')
if mibBuilder.loadTexts: ccvpLicIntPeriod.setDescription("The interval period object defines the number of minutes of accumulated values for the 'interval' and 'aggregate' statistic objects in this instrumentation group. Once this period elapses, each CVP service reports the next group of accumulated interval and aggregate statistical values.")
ccvpLicIntPortReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 2, 6), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpLicIntPortReqs.setStatus('current')
if mibBuilder.loadTexts: ccvpLicIntPortReqs.setDescription('The interval port requests object is an interval metric indicating the number of port license checkout requests made in the current interval. For each port license checkout request, whether it checks out a new port license or not, this object value is increased by one.')
ccvpLicIntAvgPortReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 2, 7), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpLicIntAvgPortReqs.setStatus('current')
if mibBuilder.loadTexts: ccvpLicIntAvgPortReqs.setDescription('The interval average port requests per minute object is an interval metric indicating the average number of port license checkout requests made per minute in the current interval. This metric is calculated by dividing the port license requests metric by the number of minutes elapsed in the current interval.')
ccvpLicIntMaxPortsInUse = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 2, 8), Gauge32()).setUnits('ports').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpLicIntMaxPortsInUse.setStatus('current')
if mibBuilder.loadTexts: ccvpLicIntMaxPortsInUse.setDescription("The interval maximum ports in use object is an interval metric indicating the peak number of simultaneous port licenses used during this interval. When a port checkout occurs, this object value is set to the current port licenses in use object value if that value is greater than this object's current peak value.")
ccvpLicIntPortReqsDenied = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 2, 9), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpLicIntPortReqsDenied.setStatus('current')
if mibBuilder.loadTexts: ccvpLicIntPortReqsDenied.setDescription('The interval port requests denied object is an interval metric indicating the number of port license checkout requests that were denied during this interval. The only reason a port license checkout request would be denied is if the number of port licenses checked out at the time of the request is equal to the total number of port license available. When a port license checkout is denied, the call does not receive regular treatment (caller may hear a busy tone or an error message).')
ccvpLicAggPortReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 2, 10), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpLicAggPortReqs.setStatus('current')
if mibBuilder.loadTexts: ccvpLicAggPortReqs.setDescription('The aggregate port requests object is an aggregate metric indicating the number of port license checkout requests made since the system was started. For each port license checkout request, whether it checks out new port license or not, this object value is increased by one.')
ccvpLicAggAvgPortReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 2, 11), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpLicAggAvgPortReqs.setStatus('current')
if mibBuilder.loadTexts: ccvpLicAggAvgPortReqs.setDescription('The aggregate average port requests per minute object is an aggregate metric indicating the average number of port license checkout requests made per minute since the system was started. This object value is calculated by dividing the aggregate port license requests metric by the number of minutes elapsed since the system was started.')
ccvpLicAggMaxPortsInUse = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 2, 12), Counter64()).setUnits('ports').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpLicAggMaxPortsInUse.setStatus('current')
if mibBuilder.loadTexts: ccvpLicAggMaxPortsInUse.setDescription("The aggregate maximum ports in use object is an aggregate metric indicating the peak number of simultaneous port licenses used since the start of the system. When a port checkout occurs, this object value is set to the current port licenses in use object value if that value is greater than this object's current peak value.")
ccvpLicAggPortReqsDenied = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 2, 13), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpLicAggPortReqsDenied.setStatus('current')
if mibBuilder.loadTexts: ccvpLicAggPortReqsDenied.setDescription('The aggregate port requests denied object is an aggregate metric indicating the number of port license checkout requests that were denied since the start of the system. The only reason a port license checkout request would be denied is if the number of port licenses checked out at the time of the request is equal to the total number of port licenses available. When a port license checkout is denied, the call does not receive regular treatment (the caller may hear a busy tone or an error message).')
ccvpLicPortUsageWarning = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 2, 14), Gauge32().clone(94)).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpLicPortUsageWarning.setStatus('current')
if mibBuilder.loadTexts: ccvpLicPortUsageWarning.setDescription("The port usage warning object reflects the threshold value of a port usage state transition from 'safe' to 'warning'. The threshold is represented as a percentage of ports currently in use. When the percentage of ports used -- ports in use divided by port available (the maximum permitted with this license) -- meets or exceeds this threshold value, there is concern that the system may soon exhaust all available ports.")
ccvpLicPortUsageCritical = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 2, 15), Gauge32().clone(97)).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpLicPortUsageCritical.setStatus('current')
if mibBuilder.loadTexts: ccvpLicPortUsageCritical.setDescription("The port usage critical object reflects the threshold value of a port usage state transition from 'warning' to 'critical'. The threshold is represented as a percentage of ports currently in use. When the percentage of ports used -- ports in use divided by port available (the maximum permitted with this license) -- meets or exceeds this threshold value, there is concern that the system will soon exhaust all available ports.")
ccvpTPoolRtIdleThreads = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 3, 1), Gauge32()).setUnits('threads').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpTPoolRtIdleThreads.setStatus('current')
if mibBuilder.loadTexts: ccvpTPoolRtIdleThreads.setDescription('The real-time idle threads object is a real-time snapshot metric indicating the number of idle threads in the pool waiting for work. The thread pool is a cache of threads used (by CVP components only) for the processing of relatively short tasks. Using a thread pool eliminates the waste of resources encountered when rapidly creating and destroying threads for these types of tasks.')
ccvpTPoolRtRunningThreads = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 3, 2), Gauge32()).setUnits('threads').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpTPoolRtRunningThreads.setStatus('current')
if mibBuilder.loadTexts: ccvpTPoolRtRunningThreads.setDescription('The real-time running threads object is a real-time snapshot metric indicating the number of running threads in the pool currently processing work. The thread pool is a cache of threads used (by CVP components only) for the processing of relatively short tasks. Using a thread pool eliminates the waste of resources encountered when rapidly creating and destroying threads for these types of tasks.')
ccvpTPoolRtCoreThreads = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 3, 3), Gauge32()).setUnits('threads').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpTPoolRtCoreThreads.setStatus('current')
if mibBuilder.loadTexts: ccvpTPoolRtCoreThreads.setDescription('The real-time core threads object is a real-time snapshot metric indicating the number of threads in the pool that will never be destroyed no matter how long they remain idle. The thread pool is a cache of threads used (by CVP components only) for the processing of relatively short tasks. Using a thread pool eliminates the waste of resources encountered when rapidly creating and destroying threads for these types of tasks.')
ccvpTPoolRtMaxThreadsAvail = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 3, 4), Gauge32()).setUnits('threads').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpTPoolRtMaxThreadsAvail.setStatus('current')
if mibBuilder.loadTexts: ccvpTPoolRtMaxThreadsAvail.setDescription('Thereal-time maximum threads available object is a real-time snapshot metric indicating the maximum number of threads in the pool that can exist simultaneously. The thread pool is a cache of threads used (by CVP components only) for the processing of relatively short tasks. Using a thread pool eliminates the waste of resources encountered when rapidly creating and destroying threads for these types of tasks.')
ccvpTPoolRtMaxThreadsUsed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 3, 5), Gauge32()).setUnits('threads').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpTPoolRtMaxThreadsUsed.setStatus('current')
if mibBuilder.loadTexts: ccvpTPoolRtMaxThreadsUsed.setDescription('The real-time maximum threads used object is a real-time snapshot metric indicating the peak number of threads in the pool that are simultaneously tasked with work to process. The thread pool is a cache of threads used (by CVP components only) for the processing of relatively short tasks. Using a thread pool eliminates the waste of resources encountered when rapidly creating and destroying threads for these types of tasks.')
ccvpJvmRtMaxMemUsed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 4, 1), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpJvmRtMaxMemUsed.setStatus('current')
if mibBuilder.loadTexts: ccvpJvmRtMaxMemUsed.setDescription('The real-time maximum memory used object is a real-time snapshot metric indicating the peak memory usage by the Java virtual machine since startup. The object value is expressed as a count of bytes and indicates the high water mark of memory used simultaneously by this JVM.')
ccvpJvmRtCurrMemUsed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 4, 2), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpJvmRtCurrMemUsed.setStatus('current')
if mibBuilder.loadTexts: ccvpJvmRtCurrMemUsed.setDescription('The real-time current memory used object is a real-time snapshot metric indicating the current memory usage by the Java virtual machine. The object value is expressed as a count of bytes and indicates the current amount of memory used by this JVM.')
ccvpJvmRtMaxMemAvail = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 4, 3), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpJvmRtMaxMemAvail.setStatus('current')
if mibBuilder.loadTexts: ccvpJvmRtMaxMemAvail.setDescription('The real-time maximum memory available object is a real-time snapshot metric indicating the amount of memory available to the Java virtual machine. The object value is expresses as a count of bytes and indicates the amount of system memory available for use by the JVM.')
ccvpJvmRtCurrMemAvail = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 4, 4), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpJvmRtCurrMemAvail.setStatus('current')
if mibBuilder.loadTexts: ccvpJvmRtCurrMemAvail.setDescription('The real-time current memory available object is a real-time snapshot metric indicating the amount of avilable memory in the Java virtual machine. The object value is expressed as a count of bytes and indicates the amount of current system memory claimed by the JVM that is not currently being used.')
ccvpJvmRtCurrThreadsInUse = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 4, 5), Gauge32()).setUnits('threads').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpJvmRtCurrThreadsInUse.setStatus('current')
if mibBuilder.loadTexts: ccvpJvmRtCurrThreadsInUse.setDescription('The real-time current threads in use object is a real-time snapshot metric indicating a count of threads that are in use in the Java virtual machine. The number of threads in use by the JVM include all of the CVP standalone and thread pool threads as well as those threads created by the web application server running within the same JVM.')
ccvpJvmRtMaxThreadsUsed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 4, 6), Gauge32()).setUnits('threads').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpJvmRtMaxThreadsUsed.setStatus('current')
if mibBuilder.loadTexts: ccvpJvmRtMaxThreadsUsed.setDescription('The real-time maximum threads used object is a real-time snapshot metric indicating the peak amount of threads used simultaneously in the Java virtual machine since startup. The maximum number of threads used by the JVM includes all Customer Voice Portal standalone and thread pool threads as well as threads created by the web application server running within the same JVM.')
ccvpJvmRtUpTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 4, 7), Counter64()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpJvmRtUpTime.setStatus('current')
if mibBuilder.loadTexts: ccvpJvmRtUpTime.setDescription('The real-time up time object is a real-time snapshot metric indicating how long the JVM has been running. The object value is expressed as a count of milliseconds that have elapsed since the Java virual machine process began executing.')
ccvpServiceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 5, 1), )
if mibBuilder.loadTexts: ccvpServiceTable.setStatus('current')
if mibBuilder.loadTexts: ccvpServiceTable.setDescription('The service table is a list of Customer Voice Portal (CVP) functional services. A CVP solution includes a collection of interconnected functional services, each of which perform a specific, necessary function of the CVP application. This table enumerates and lists all CVP functional services installed and configured on this server. A single server is permitted to have multiple functional services of a different type, but also multiple services of the same type (although far less likely). The service table is indexed by a unique numeric identifier for each functional service. This service index is arbitrarily assigned by the SNMP agent. These same index values are used in the individual service information tables, thus, the individual service information tables have a sparse dependency relationship with this table. The SNMP agent constructs the service table at startup based upon static data saved in a properties file. Since services can only be configured while the CVP application is stopped, service table entries cannot be added to or deleted from the table at run time. Object values can and will be modified by the agent but not the management station. All objects in this table are read-only to the management station.')
ccvpServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-CVP-MIB", "ccvpServiceIndex"))
if mibBuilder.loadTexts: ccvpServiceEntry.setStatus('current')
if mibBuilder.loadTexts: ccvpServiceEntry.setDescription('Each service entry represents a Customer Voice Portal functional service installed and configured on this server. This table lists these functional services and provides a map to the service information table entry via the index.')
ccvpServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 5, 1, 1, 1), CcvpIndex())
if mibBuilder.loadTexts: ccvpServiceIndex.setStatus('current')
if mibBuilder.loadTexts: ccvpServiceIndex.setDescription('The service index is a value that uniquely identifies an entry in the service table. This value is arbitrarily assigned by the SNMP agent.')
ccvpServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 5, 1, 1, 2), CcvpServiceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpServiceType.setStatus('current')
if mibBuilder.loadTexts: ccvpServiceType.setDescription('The service type object identifies the type of Customer Voice Portal application functional service.')
ccvpServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 5, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpServiceName.setStatus('current')
if mibBuilder.loadTexts: ccvpServiceName.setDescription('The service name object is a user-intuitive textual name for the Customer Voice Portal application service.')
ccvpServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 5, 1, 1, 4), CcvpServiceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpServiceStatus.setStatus('current')
if mibBuilder.loadTexts: ccvpServiceStatus.setDescription('The service status object is the last known status of the Customer Voice Portal application service.')
ccvpServiceIntLastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 5, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpServiceIntLastUpdate.setStatus('current')
if mibBuilder.loadTexts: ccvpServiceIntLastUpdate.setDescription('The service interval last update object holds the date and time of the last refresh of interval and aggregate statistic object values for this CVP service. Interval and aggregate statistics are reported at a regular interval (the interval held by the interval period object).')
ccvpServiceIntPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 5, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpServiceIntPeriod.setStatus('current')
if mibBuilder.loadTexts: ccvpServiceIntPeriod.setDescription("The interval period object defines the number of minutes of accumulated values for the 'interval' and 'aggregate' statistic objects in this instrumentation group. Once this period elapses, each CVP service reports the next group of accumulated interval and aggregate statistical values.")
ccvpSipTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1), )
if mibBuilder.loadTexts: ccvpSipTable.setStatus('current')
if mibBuilder.loadTexts: ccvpSipTable.setDescription('The SIP service table lists each Customer Voice Portal SIP service configured on this server. The CVP SIP service is a software module which always resides in the CVP Call Server. The CVP SIP service is a SIP Back-to-Back User Agent (B2BUA). On the front end, it supports two SIP call legs, one incoming and one outgoing. This service does not terminate RTP flows; it only deals with SIP messages. On the back end, the SIP service implements the (GED-125) Service Control Interface (SCI) to the Cisco Intelligent Contact Management (ICM) application for call control functions only (no VRU scripts). The purpose of a B2BUA is to act as an active intermediary for a call, communicating with both the source and the destination legs of the call, and providing 3rd party call control capabilities on behalf of a routing engine (such as the ICM contact router). Because it must track the call throughout its life, it becomes a key source of call-level reporting data and a natural place for moderating call switching resources. Generally speaking, a SIP B2BUA is two User Agents (UAs). The device receives incoming calls in one UA and immediately creates an outgoing call via its other UA. Thereafter, all SIP messages from either one are forwarded to the other. What makes it useful is the fact that it puts ICM in between the two legs. On incoming calls, it asks the ICM where the outgoing call should be addressed. Once the call has been delivered, ICM has the opportunity to end the outgoing leg and reconnect it to a subsequent destination. In practice, there will typically be a delivery to the subsequent agents (call center agents - a human resources tasked with answering inbound calls and providing specific services) or back to the VRU leg. The SIP service table has a sparse dependent relationship with the (generic) ccvpService table. The service index acts as the primary index, relating the entry to the corresponding entry in the ccvpService table. The SNMP agent constructs this table at startup. Since services can only be added or deleted when the CVP application is stopped, service information entries cannot be added to or deleted from the table either by the agent or the management station while the application is running. The agent will update service information table objects as their values change when the application is running. All objects in this table are read-only to the management station.')
ccvpSipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1), ).setIndexNames((0, "CISCO-CVP-MIB", "ccvpServiceIndex"))
if mibBuilder.loadTexts: ccvpSipEntry.setStatus('current')
if mibBuilder.loadTexts: ccvpSipEntry.setDescription('Each entry represents a Customer Voice Portal (CVP) SIP service configured on the server. The SIP service acts as an active intermediary for a call, communicating with both the source and destination legs of the call, and providing 3rd party call control capabilities on behalf of a routing engine.')
ccvpSipRtActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 1), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipRtActiveCalls.setStatus('current')
if mibBuilder.loadTexts: ccvpSipRtActiveCalls.setDescription('The real-time active calls object is a real-time snapshot metric indicating a count of active calls being handled by the CVP SIP service. It will not include H323 calls.')
ccvpSipRtTotalCallLegs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 2), Gauge32()).setUnits('call legs').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipRtTotalCallLegs.setStatus('current')
if mibBuilder.loadTexts: ccvpSipRtTotalCallLegs.setDescription('The real-time total call legs object is a real-time snapshot metric indicating a count of the number of SIP call legs being handled by the SIP service. A call leg is also known as a SIP dialog. The object value includes incoming, outgoing and ringtone type call legs. For each active call in the SIP subsystem, there will be an incoming call leg and an outgoing call leg to the destination of the transfer label.')
ccvpSipIntNewCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 3), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipIntNewCalls.setStatus('current')
if mibBuilder.loadTexts: ccvpSipIntNewCalls.setDescription("The interval new calls object is a metric indicating the number of SIP INVITE messages received by CVP since system start time. The object value also includes failed calls as well as calls rejected due to the SIP service being in an 'out of service' state.")
ccvpSipIntConnectsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 4), Gauge32()).setUnits('connects').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipIntConnectsRcv.setStatus('current')
if mibBuilder.loadTexts: ccvpSipIntConnectsRcv.setDescription("The interval connects received object is a metric indicating the number of CONNECT messages received by the SIP service in order to perform a Customer Voice Portal transfer, since system start. The object value also includes the regular CVP transfers as well as 'Refer' transfers. Any label coming from the ICM service is considered a CONNECT message, whether it is a label to send to the VRU or a label to transfer to an agent.")
ccvpSipIntAvgLatency1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 5), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipIntAvgLatency1.setStatus('current')
if mibBuilder.loadTexts: ccvpSipIntAvgLatency1.setDescription('The interval average latency first object is a metric indicating the average period of time elapsed between the arrival of a CONNECT message from ICM and when the call is actually answered, on the first transfer request for the calls. The object value also includes the average latency computation for all the calls that have been answered on the first transfer since system start. The first transfer in comprehensive deployments is typically to the VXML gateway, which will answer quickly. In call director deployments, the first transfer may be to an agent or to another SIP endpoint in the network, such as an automatic call distributor (ACD). This object value calculation does not include latency for REFER transfers.')
ccvpSipIntAvgLatency2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 6), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipIntAvgLatency2.setStatus('current')
if mibBuilder.loadTexts: ccvpSipIntAvgLatency2.setDescription('The interval average latency second object is a metric indicating the average period of time between the arrival of a CONNECT message from ICM and when the call is actually answered, on the second and subsequent transfer request for the call. The object value reflects the average latency computation for all of the calls that have been answered on the second and any subsequent transfers since system start. The second transfer in comprehensive deployments is typically to the agent on the Call Manager, and will indicate the average time to answer for agents. The computation for this metric does not include intermediate calls to play ringback for callers during subsequent Customer Voice Portal transfers. This object value calculation does not include latency for REFER transfers.')
ccvpSipIntFailedXferPre = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 7), Gauge32()).setUnits('transfers').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipIntFailedXferPre.setStatus('current')
if mibBuilder.loadTexts: ccvpSipIntFailedXferPre.setDescription("The interval failed transfers pre-dialog object is a metric indicating the total number of failed transfers on the first Customer Voice Portal transfer since system start. A SIP dialog is established after the first CVP transfer is completed. The object value does not include rejections due to the SIP service being in an 'out of service' state. The object value does include failed transfers that were attempted after a label was returned from the ICM within the CONNECT message body.")
ccvpSipIntFailedXferPost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 8), Gauge32()).setUnits('transfers').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipIntFailedXferPost.setStatus('current')
if mibBuilder.loadTexts: ccvpSipIntFailedXferPost.setDescription('The interval failed transfers post-dialog object is a metric indicating the total number of failed transfers on second and subsequent Customer Voice Portal transfers since system start. After a SIP dialog is established, CVP performs SIP transfers using re-INVITE messages. The object value does not include rejections of SIP REFER transfers. The object value does include failed transfers that were attempted after a label was returned from the ICM within the CONNECT message body.')
ccvpSipAggNewCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 9), Counter64()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipAggNewCalls.setStatus('current')
if mibBuilder.loadTexts: ccvpSipAggNewCalls.setDescription("The aggregate new calls object is a metric indicating the number of SIP INVITE messages received by the Customer Voice Portal application since service start. The object value includes failed calls as well as calls rejected due to the SIP service being in an 'out of service' state.")
ccvpSipAggConnectsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 10), Counter64()).setUnits('connects').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipAggConnectsRcv.setStatus('current')
if mibBuilder.loadTexts: ccvpSipAggConnectsRcv.setDescription('The aggregate connects received object is a metric indicating the number of SIP CONNECT messages received by the SIP service in order to perform a Customer Voice Portal transfer, since service start. This object value includes regular CVP transfers as well as REFER transfers. Any label coming from the ICM service is considered to be a CONNECT message, whether it is a label to send the call to the VRU or a label to transfer the call to an agent.')
ccvpSipAggAvgLatency1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 11), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipAggAvgLatency1.setStatus('current')
if mibBuilder.loadTexts: ccvpSipAggAvgLatency1.setDescription('The aggregate average latency first (transfer) object is a metric indicating the average period of time elapsed between receipt of the CONNECT message from the ICM and the moment when the call is actually answered, on the first transfer request for the calls. The object value is the computed average latency, since service start, for all calls that have been answered on the first transfer. The first transfer in comprehensive deployments is typically to the VXML gateway, which will answer quickly. In call director deployments, the first transfer may be to an agent or another SIP endpoint in the network, such as an automatic call distributor (ACD). The object value computation does not include REFER transfer latency.')
ccvpSipAggAvgLatency2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 12), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipAggAvgLatency2.setStatus('current')
if mibBuilder.loadTexts: ccvpSipAggAvgLatency2.setDescription('The aggregate average latency second (transfer) object is a metric indicating the average period of time elapsed between receipt of the CONNECT message from the ICM and the moment when the call is actually answered, on the second and subsequent transfer requests for the calls. The object value is the computed average latency, since service start, for all calls that have been answered on the second or subsequent transfers. The second transfer in comprehensive deployments is typically to the agent on the Call Manager, and will indicate the average time to answer for agents. The computed object value does not include intermediate calls to play ringback for callers during subsequent CVP transfers. The object value computation does not include REFER transfer latency.')
ccvpSipAggFailedXferPre = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 13), Counter64()).setUnits('transfers').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipAggFailedXferPre.setStatus('current')
if mibBuilder.loadTexts: ccvpSipAggFailedXferPre.setDescription("The aggregate failed transfers pre-dialog object is a count of failed transfers on the first Customer Voice Portal transfer since service start. A SIP dialog is established after the first CVP transfer is completed. The object value does not include rejections due to the SIP service being in an 'out of service' state. The object value does include failed transfers that were attempted after a label was returned by the ICM within a CONNECT message body.")
ccvpSipAggFailedXferPost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 14), Counter64()).setUnits('transfers').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipAggFailedXferPost.setStatus('current')
if mibBuilder.loadTexts: ccvpSipAggFailedXferPost.setDescription('The aggregate failed transfers post-dialog object is a count of failed transfers on second and subsequent Customer Voice Portal transfers since service start. After SIP dialog is established, CVP performs SIP transfers using re-INVITE messages. The object value does not include rejections of SIP REFER transfers. The object value does include failed transfers that were attempted after a label was returned by the ICM within a CONNECT message body.')
ccvpSipRtBasicVideoOffered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 15), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipRtBasicVideoOffered.setStatus('current')
if mibBuilder.loadTexts: ccvpSipRtBasicVideoOffered.setDescription('The real-time basic video calls object is a real-time snapshot metric indicating a count of active calls being handled by the CVP SIP service that have had video capability offered by the caller. Video capabilites are negotiated by caller and callee in order for two way video to occur on a call.')
ccvpSipRtBasicVideoAnswered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 16), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipRtBasicVideoAnswered.setStatus('current')
if mibBuilder.loadTexts: ccvpSipRtBasicVideoAnswered.setDescription('The real-time basic video calls object is a real-time snapshot metric indicating a count of active calls being handled by the CVP SIP service that was answered by an IVR or Agent capable of handling video services.')
ccvpSipIntBasicVideoOffered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 17), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipIntBasicVideoOffered.setStatus('current')
if mibBuilder.loadTexts: ccvpSipIntBasicVideoOffered.setDescription('The interval basic video calls object is an interval metric indicating a count of active calls being handled by the CVP SIP service that have had video capability offered by the caller. Video capabilites are negotiated by caller and callee in order for two way video to occur on a call. The interval at which this object is updated is defined by ccvpServiceIntPeriod.')
ccvpSipIntBasicVideoAnswered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 18), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipIntBasicVideoAnswered.setStatus('current')
if mibBuilder.loadTexts: ccvpSipIntBasicVideoAnswered.setDescription('The interval basic video calls object is an interval metric indicating a count of active calls being handled by the CVP SIP service that was handled by an IVR or Agent capable of handling video services. The interval at which this object is updated is defined by ccvpServiceIntPeriod.')
ccvpSipAggBasicVideoOffered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 19), Counter64()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipAggBasicVideoOffered.setStatus('current')
if mibBuilder.loadTexts: ccvpSipAggBasicVideoOffered.setDescription('The aggregate basic video calls object is a metric indicating a count of active calls being handled by the CVP SIP service that have had video capability offered by the callers since the start of the system. Video capabilites are negotiated by caller and callee in order for two way video to occur on a call.')
ccvpSipAggBasicVideoAnswered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 20), Counter64()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipAggBasicVideoAnswered.setStatus('current')
if mibBuilder.loadTexts: ccvpSipAggBasicVideoAnswered.setDescription('The interval basic video calls object is a metric indicating a count of calls that have been handled by the CVP SIP service that have been handled by an IVR or Agent capable of handling video services since the start of the system.')
ccvpSipIntPostCallAnswered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 21), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipIntPostCallAnswered.setStatus('current')
if mibBuilder.loadTexts: ccvpSipIntPostCallAnswered.setDescription('The interval post call answered object is a metric indicating Number of Post Call Survey calls which were answered since the start of the system.')
ccvpSipIntWhisperAnswered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 22), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipIntWhisperAnswered.setStatus('current')
if mibBuilder.loadTexts: ccvpSipIntWhisperAnswered.setDescription('The interval whisper answered object is a metric indicating Number of calls to the whisper service which were answered since the start of the system.')
ccvpSipIntWhisperFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 23), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipIntWhisperFailed.setStatus('current')
if mibBuilder.loadTexts: ccvpSipIntWhisperFailed.setDescription('The interval whisper failed object is a metric indicating Number of calls to the whisper service which failed since the start of the system.')
ccvpSipIntGreetingAnswered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 24), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipIntGreetingAnswered.setStatus('current')
if mibBuilder.loadTexts: ccvpSipIntGreetingAnswered.setDescription('The interval greeting answered object is a metric indicating Number of agent greeting playback calls which were answered since the start of the system.')
ccvpSipIntGreetingFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 1, 1, 25), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpSipIntGreetingFailed.setStatus('current')
if mibBuilder.loadTexts: ccvpSipIntGreetingFailed.setDescription('The interval greeting failed object is a metric indicating Number of agent greeting playback calls which failed since the start of the system.')
ccvpH323Table = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2), )
if mibBuilder.loadTexts: ccvpH323Table.setStatus('current')
if mibBuilder.loadTexts: ccvpH323Table.setDescription("The H.323 Service table lists each Customer Voice Portal (CVP) H.323 service configured on this server. This service is a software component which always resides on the CVP Call Server. The CVP H.323 service interacts with the CVP IVR service to relay call arrival, departure and transfer instructions between it and other H.323 devices. The CVP H.323 service is a legacy service used only in H.323- based deployments. Although this service started as a true, albeit incomplete, voice browser, its strength was its ability to effect complicated H.323 call control activities with the Gateway and the Cisco Call Manager. Over time, the VXML Gateway's IOS voice browser supplanted it as a voice interaction device and call control became its main focus. SIP is still a young protocol compared to H.323 and there are still certain capabilities which either the gateway, the Call Manager or the protocol itself does not yet support. Users who require these capabilities, as well as those who wish to upgrade without switching from H.323 to SIP will therefore continue to use the CVP H.323 service in place of the CVP SIP service. This table has a sparse dependent relationship with the Service table. The service index acts as the primary index, relating the entry to the corresponding entry in the Service table. The SNMP agent constructs this table at startup. Since services can only be added or deleted when the CVP application is stopped, service information table entries cannot be added to or deleted from the table either by the agent or the management station while the application is running. The agent will update service information table objects as their values change when the application is running. All objects in this table are read-only to the management station.")
ccvpH323Entry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1), ).setIndexNames((0, "CISCO-CVP-MIB", "ccvpServiceIndex"))
if mibBuilder.loadTexts: ccvpH323Entry.setStatus('current')
if mibBuilder.loadTexts: ccvpH323Entry.setDescription('Each entry represents a Customer Voice Portal (CVP) H.323 service configured on the server. The H.323 service interacts with the CVP IVR service to relay call arrival, departure and transfer instructions between it and other H.323 devices in the network.')
ccvpH323RtCallsInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1, 1), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpH323RtCallsInProgress.setStatus('current')
if mibBuilder.loadTexts: ccvpH323RtCallsInProgress.setDescription('The real-time calls in progress object represents the total number of internal call objects known to the Customer Voice Portal H.323 service. This object value should never exceed the value of the ShowMaxTotalCalls command in VBAdmin. A value greater than ShowMaxTotalCalls indicates a resource leak in the CVP H.323 service.')
ccvpH323RtMemoryInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpH323RtMemoryInUse.setStatus('current')
if mibBuilder.loadTexts: ccvpH323RtMemoryInUse.setDescription('The real-time memory in use object represents the current virtual memory in use on the server, expressed as a percentage of total virtual memory. A steadily increasing value over time could indicate a memory leak in the CVP H.323 service.')
ccvpH323IntArrivalRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1, 3), Gauge32()).setUnits('calls per minute').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpH323IntArrivalRate.setStatus('current')
if mibBuilder.loadTexts: ccvpH323IntArrivalRate.setDescription("The interval arrival rate object indicates the maximum number of inbound calls arriving per minute to the Customer Voice Portal H.323 service during this interval period. This value represents the peak value over the interval period and is expressed as 'calls per minute'.")
ccvpH323IntTransferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1, 4), Gauge32()).setUnits('calls per minute').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpH323IntTransferRate.setStatus('current')
if mibBuilder.loadTexts: ccvpH323IntTransferRate.setDescription("The interval transfer rate object indicates the maximum number of calls transferred per minute by the Customer Voice Portal H.323 service during this interval period. This value represents the peak value over the interval period and is expressed as 'calls transferred per minute'.")
ccvpH323IntMaxNewCallLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1, 5), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpH323IntMaxNewCallLatency.setStatus('current')
if mibBuilder.loadTexts: ccvpH323IntMaxNewCallLatency.setDescription("The interval maximum new call latency object represents the maximum elapsed time in milliseconds from when the Customer Voice Portal H.323 service sends a 'New Call' request to the ICM until the time when the H.323 service receives a response from the ICM. This value is expressed in milliseconds and indicates the high-water mark for the interval period.")
ccvpH323IntAvgNewCallLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1, 6), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpH323IntAvgNewCallLatency.setStatus('current')
if mibBuilder.loadTexts: ccvpH323IntAvgNewCallLatency.setDescription("The interval average new call latency object represents the average elapsed time in milliseconds from when the Customer Voice Portal H.323 service sends a 'New Call' request to the ICM until the time when the H.323 service receives a response from the ICM. This value is expressed in milliseconds and is averaged over the interval period.")
ccvpH323IntMaxXferToAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1, 7), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpH323IntMaxXferToAlert.setStatus('current')
if mibBuilder.loadTexts: ccvpH323IntMaxXferToAlert.setDescription("The interval maximum transfer to alerting object holds the maximum amount of time elapsed for a transferred call to enter the 'alerting' state once transferred. This value is expressed in milliseconds and indicates the high-water mark for the interval period.")
ccvpH323IntAvgXferToAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1, 8), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpH323IntAvgXferToAlert.setStatus('current')
if mibBuilder.loadTexts: ccvpH323IntAvgXferToAlert.setDescription("The interval average transfer to alerting object holds the average amount of time elapsed for a transferred call to enter the 'alerting' state once transferred. This value is expressed in milliseconds and is averaged over the interval period.")
ccvpH323IntMaxXferToAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1, 9), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpH323IntMaxXferToAnswer.setStatus('current')
if mibBuilder.loadTexts: ccvpH323IntMaxXferToAnswer.setDescription('The interval maximum transfer to answer object holds the maximum amount of time elapsed for a transferred call to be answered at the destination once transferred. This value is expressed in milliseconds and indicates the high-water mark for the interval period.')
ccvpH323IntAvgXferToAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1, 10), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpH323IntAvgXferToAnswer.setStatus('current')
if mibBuilder.loadTexts: ccvpH323IntAvgXferToAnswer.setDescription('The interval average transfer to answer object holds the average amount of time elapsed for a transferred call to be answered at the destination once transferred. This value is expressed in milliseconds and indicates the average time for the interval period.')
ccvpH323IntNewCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1, 11), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpH323IntNewCalls.setStatus('current')
if mibBuilder.loadTexts: ccvpH323IntNewCalls.setDescription('The interval new calls object holds a count of new inbound calls handled by the Customer Voice Portal H.323 service during the interval period.')
ccvpH323IntTransferred = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1, 12), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpH323IntTransferred.setStatus('current')
if mibBuilder.loadTexts: ccvpH323IntTransferred.setDescription('The interval transferred object holds a count of calls that have been transferred by the Customer Voice Portal H.323 service during the interval period. The CVP H.323 service may do multiple transfers for a single call so the value may not be equal to the new calls object.')
ccvpH323IntRedirected = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1, 13), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpH323IntRedirected.setStatus('current')
if mibBuilder.loadTexts: ccvpH323IntRedirected.setDescription("The interval redirected object holds a count of calls that have been redirected by the Customer Voice Portal H.323 service. The H.323 service will only redirect calls when it is in an 'out of service' state. A redirected call means that the H.323 service did not accept the call. This allows the originating gateway to redirect the call to an alternate CVP H.323 server, if so configured in its dial-peers.")
ccvpH323IntNotTransferred = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1, 14), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpH323IntNotTransferred.setStatus('current')
if mibBuilder.loadTexts: ccvpH323IntNotTransferred.setDescription('The interval not transferred object holds a count of calls that could not be transferred by the Customer Voice Portal H.323 service during this interval. The CVP H.323 service was unable to transfer the call to a particular destination due to one of several factors: ring-no-answer; busy; incorrect configuration; call admission control (CAC) denials. It is a recoverable error if proper configuration elements have been put in place, such as ICM router requery, and/or gatekeeper alternate endpoints.')
ccvpH323IntPromptsNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1, 15), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpH323IntPromptsNotFound.setStatus('current')
if mibBuilder.loadTexts: ccvpH323IntPromptsNotFound.setDescription('The interval prompts not found object holds a count of calls to which prompts could not be played during this interval period. This is indicative of a failure within the solution for each of these calls. It could be caused by an ICM script error, a missing prompt, or failure of the HTTP media server.')
ccvpH323IntCriticalMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1, 16), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpH323IntCriticalMedia.setStatus('current')
if mibBuilder.loadTexts: ccvpH323IntCriticalMedia.setDescription('The interval critical media object holds a count of calls to which critical media needed to be played during the interval period. This usually, but not always, indicates an abnormal termination of the caller. In some benign cases, it can be caused by improper ICM script termination practices.')
ccvpH323IntCallsFinished = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1, 17), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpH323IntCallsFinished.setStatus('current')
if mibBuilder.loadTexts: ccvpH323IntCallsFinished.setDescription('The interval calls finished object holds a count of calls to which the Customer Voice Portal H.323 service has completed servicing during the interval period. These calls have ended and are no longer being handled by the CVP H.323 service.')
ccvpH323IntMaxCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1, 18), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpH323IntMaxCpuUsage.setStatus('current')
if mibBuilder.loadTexts: ccvpH323IntMaxCpuUsage.setDescription('The interval maximum CPU usage object holds the maximum server central processing unit (CPU) usage for the Customer Voice Portal H.323 service during this particular interval period. The CPU usage value is expressed as a percentage of potential usage available is represents a high water mark of CPU usage during this interval.')
ccvpH323IntAvgCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 2, 1, 19), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpH323IntAvgCpuUsage.setStatus('current')
if mibBuilder.loadTexts: ccvpH323IntAvgCpuUsage.setDescription('The interval average CPU usage object holds the average server central processing unit (CPU) usage for the Customer Voice Portal H.323 service computed during this particular interval period. The CPU usage value is expressed as a percentage of potential usage available.')
ccvpIvrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3), )
if mibBuilder.loadTexts: ccvpIvrTable.setStatus('current')
if mibBuilder.loadTexts: ccvpIvrTable.setDescription("The IVR Service table lists each Customer Voice Portal Interactive Voice Response service configured on this server. Each entry in the table defines a separate IVR service; a single server is permitted to have multiple IVR services. The CVP IVR service is a software module which always resides int he CVP Call Server. The CVP IVR service is responsible for creating the VXML pages which implement the CVP Microapps based on 'Run Script' instructions received from the ICM. (The 'Run Script' instruction is part of the Service Control Interface offered with the GED-125 messaging protocol.) The service function as the VRU leg in ICM parlance and calls must be transferred to it from the SIP service in order to execute microapps. The VXML pages created by this module are sent to the VXML Gateway to be executed. In legacy deployments only -- those which use H.323 instead of SIP -- the CVP IVR service can act as the switch leg as well. The deployment includes a CVP H.3232 service which interacts with the CVP IVR service for call control activities. Calls still need to be transferred to a VRU leg before microapps can be executed, however, in legacy deployments, that transferred leg may end up using the same CVP IVR service as the switch leg. The CVP IVR service plays a significant role in implementing CVP's native failover mechanism -- those capabilities which can be achieved without a Content Services Switch -- for Media Servers, ASR/TTS Servers and CVP VoiceXML Servers. Up to two of each such server are supported and the CVP IVR service orchestrates retries and failover between them. This table has a sparse dependent relationship with the Service table. The service index acts as the primary index, relating the entry to the corresponding entry in the Service table. The SNMP agent constructs this table at startup. Since services can only be added or deleted when the CVP application is stopped, service information table entries cannot be added to or deleted from the table either by the agent or the management station while the application is running. The agent will update service information table objects as their values change when the application is running. All objects in this table are read-only to the management station.")
ccvpIvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1), ).setIndexNames((0, "CISCO-CVP-MIB", "ccvpServiceIndex"))
if mibBuilder.loadTexts: ccvpIvrEntry.setStatus('current')
if mibBuilder.loadTexts: ccvpIvrEntry.setDescription('Each entry represents a Customer Voice Portal (CVP) Interactive Voice Response (IVR) service configured on the server. The IVR service is responsible for creating the VXML pages which implement the CVP microapps based on instructions received from the ICM.')
ccvpIvrRtActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 1), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrRtActiveCalls.setStatus('current')
if mibBuilder.loadTexts: ccvpIvrRtActiveCalls.setDescription('The real-time active calls object is a metric that indicates the current number of simultaneous calls being processed by the IVR service. This object value represents the real-time number of simultaneous calls being serviced by the IVR service.')
ccvpIvrRtActiveHttpReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 2), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrRtActiveHttpReqs.setStatus('current')
if mibBuilder.loadTexts: ccvpIvrRtActiveHttpReqs.setDescription('The real-time active HTTP requests object is a metric that indicates the current number of simultaneous HTTP requests being processed by the IVR Service. This object value represents the real-time number of simultaneous HTTP requests being serviced by the IVR service.')
ccvpIvrIntNewCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 3), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrIntNewCalls.setStatus('current')
if mibBuilder.loadTexts: ccvpIvrIntNewCalls.setDescription('The interval new calls object is a metric that counts the number of New Call requests received from the IOS Gateway or the CVP H323 service. A New Call includes the switch leg of the call and the IVR leg of the call. This object value reflects a count of the total number of New Call requests received by the IVR service during this interval.')
ccvpIvrIntMaxActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 4), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrIntMaxActiveCalls.setStatus('current')
if mibBuilder.loadTexts: ccvpIvrIntMaxActiveCalls.setDescription('The interval maximum active calls object is a metric that indicates the maximum number of simulteneous calls being processed by the IVR service during this interval.')
ccvpIvrIntCallsFinished = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 5), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrIntCallsFinished.setStatus('current')
if mibBuilder.loadTexts: ccvpIvrIntCallsFinished.setDescription('A call is a metric that represents the switch leg of the CVP call and the IVR leg of the CVP call. When both legs of the call are finished, this object value will be incremented by one. The interval calls finished object is a metric that counts the number of CVP calls that have finished during this interval.')
ccvpIvrIntAvgCallLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 6), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrIntAvgCallLatency.setStatus('current')
if mibBuilder.loadTexts: ccvpIvrIntAvgCallLatency.setDescription('The interval average call latency object is a metric that represents the average amount of time, in milliseconds, that elapsed for the IVR service to complete the processing of a New Call or Call Result request during this interval.')
ccvpIvrIntMaxCallLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 7), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrIntMaxCallLatency.setStatus('current')
if mibBuilder.loadTexts: ccvpIvrIntMaxCallLatency.setDescription('The interval maximum call latency object is a metric that represents the maximum amount of time, in milliseconds, that elapsed for the IVR service to complete the processing of a New Call Request or a Call Result. Maximum call latency is the highest call latency value reached during this interval.')
ccvpIvrIntMinCallLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 8), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrIntMinCallLatency.setStatus('current')
if mibBuilder.loadTexts: ccvpIvrIntMinCallLatency.setDescription('The interval minimum call latency object is a metric that represents the least amount of time, in milliseconds, that elapsed for the IVR service to complete the processing of a New Call Request or a Call Result. Minimum call latency is the lowest call latency value seen during this interval.')
ccvpIvrIntHttpReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 9), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrIntHttpReqs.setStatus('current')
if mibBuilder.loadTexts: ccvpIvrIntHttpReqs.setDescription('The interval HTTP requests object is a metric that represents the total number of HTTP Requests received by the IVR service during this interval.')
ccvpIvrIntMaxActiveHttpReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 10), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrIntMaxActiveHttpReqs.setStatus('current')
if mibBuilder.loadTexts: ccvpIvrIntMaxActiveHttpReqs.setDescription('The interval maximum active HTTP requests object is a metric that represents the maximum simultaneous HTTP requests being processed by the IVR service during this interval.')
ccvpIvrIntMaxHttpReqRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 11), Gauge32()).setUnits('requests per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrIntMaxHttpReqRate.setStatus('current')
if mibBuilder.loadTexts: ccvpIvrIntMaxHttpReqRate.setDescription('The interval maximum HTTP request Rate is a metric that represents the maximum number of HTTP requests the IVR service received, per second, from a client. This object value is a high water mark.')
ccvpIvrIntAvgHttpReqRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 12), Gauge32()).setUnits('requests per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrIntAvgHttpReqRate.setStatus('current')
if mibBuilder.loadTexts: ccvpIvrIntAvgHttpReqRate.setDescription('The interval average HTTP request rate object is the average number of HTTP requests the IVR service received per second during this interval.')
ccvpIvrAggNewCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 13), Counter64()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrAggNewCalls.setStatus('current')
if mibBuilder.loadTexts: ccvpIvrAggNewCalls.setDescription('The aggregate new calls object is a metric that indicates the accumulated count of New Call requests received from the IOS Gateway or the CVP H323 service since system startup. A New Call includes the switch leg of the call and the IVR leg of the call.')
ccvpIvrAggMaxActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 14), Counter32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrAggMaxActiveCalls.setStatus('current')
if mibBuilder.loadTexts: ccvpIvrAggMaxActiveCalls.setDescription('The aggregate maximum active calls object is the maximum number of simultaneous calls processed by the IVR service at any given time since system startup. This object value represents a high water mark.')
ccvpIvrAggHttpReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 15), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrAggHttpReqs.setStatus('current')
if mibBuilder.loadTexts: ccvpIvrAggHttpReqs.setDescription('The aggregate HTTP requests object is a metric that represents the total number of HTTP requests received from a client. This object value is the accumulated count of HTTP requests received by the IVR service since system startup.')
ccvpIvrAggMaxHttpReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 16), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrAggMaxHttpReqs.setStatus('current')
if mibBuilder.loadTexts: ccvpIvrAggMaxHttpReqs.setDescription('The aggregate maximum HTTP requests object represents the maximum number of active HTTP requests received since system startup. This object value is a high water.')
ccvpIvrRtFullVideoCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 17), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrRtFullVideoCalls.setStatus('current')
if mibBuilder.loadTexts: ccvpIvrRtFullVideoCalls.setDescription('The real-time active full video calls object is a metric that indicates the current number of simultaneous full video calls being processed by the IVR service.')
ccvpIvrIntFullVideoCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 18), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrIntFullVideoCalls.setStatus('current')
if mibBuilder.loadTexts: ccvpIvrIntFullVideoCalls.setDescription('The interval new full video calls object is a metric that counts the number of New Full Video Call requests received. The interval at which this object is updated is defined by ccvpServiceIntPeriod.')
ccvpIvrAggFullVideoCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 19), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrAggFullVideoCalls.setStatus('current')
if mibBuilder.loadTexts: ccvpIvrAggFullVideoCalls.setDescription('The aggregate maximum active full video calls object is a metric that indicates the maximum number of simultaneous full video calls being processed by the IVR service during this interval.')
ccvpIvrIntMaxFullVideoCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 20), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrIntMaxFullVideoCalls.setStatus('current')
if mibBuilder.loadTexts: ccvpIvrIntMaxFullVideoCalls.setDescription('The interval new full video calls object is a metric that indicates the accumulated count of New Full Video Call requests received since system startup. The interval at which this object is updated is defined by ccvpServiceIntPeriod.')
ccvpIvrAggMaxFullVideoCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 21), Counter64()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrAggMaxFullVideoCalls.setStatus('current')
if mibBuilder.loadTexts: ccvpIvrAggMaxFullVideoCalls.setDescription('The aggregate maximum active full video calls object is the maximum number of simultaneous full video calls processed by the IVR service at any given time since system startup. This object value represents a high water mark.')
ccvpIvrAggAgentPushedVideo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 22), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrAggAgentPushedVideo.setStatus('current')
if mibBuilder.loadTexts: ccvpIvrAggAgentPushedVideo.setDescription('The aggregate agent initiated video pushed object is a metric that indicates the accumulated count of video push requests received since system startup from Call Center agents.')
ccvpIvrAggAgentInitiatedRecordings = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 23), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrAggAgentInitiatedRecordings.setStatus('current')
if mibBuilder.loadTexts: ccvpIvrAggAgentInitiatedRecordings.setDescription('The aggregate agent initiated video recording object is a metric that indicates the accumulated count of start video recording requests received since system startup from Call Center agents.')
ccvpIvrAggAgentVCRControlInvocations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 3, 1, 24), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIvrAggAgentVCRControlInvocations.setStatus('current')
if mibBuilder.loadTexts: ccvpIvrAggAgentVCRControlInvocations.setDescription('The aggregate agent initiated video VCR control object is a metric that indicates the accumulated count of video VCR control requests received since system startup from Call Center agents.')
ccvpIcmTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4), )
if mibBuilder.loadTexts: ccvpIcmTable.setStatus('current')
if mibBuilder.loadTexts: ccvpIcmTable.setDescription('The ICM Service table lists each Customer Voice Portal ICM service configured on this server. Each entry in the table defines a separate ICM service. The CVP ICM service is responsible for all communication between CVP components and the Intelligent Contact Management (ICM) application. The CVP ICM service implements the GED-125 Service Control Interface (SCI) protocol, and sends and receives messages on behalf of the CVP SIP service, the CVP IVR service, and the CVP VoiceXML service. Users do not explicitly install the CVP ICM Subsystem; it is installed and activated automatically in the CVP Call Server and the CVP VoiceXML Server. This service is visible at the CVP Operations Server, however, since it does require a small amount of configuration. This table has a sparse dependent relationship with the Service table. The service index acts as the primary index, relating the entry to the corresponding entry in the Service table. The SNMP agent constructs this table at startup. Since services can only be added or deleted when the CVP application is stopped, service information table entries cannot be added to or deleted from the table either by the agent or the management station while the application is running. The agent will update service information table objects as their values change when the application is running. All objects in this table are read-only to the management station.')
ccvpIcmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1), ).setIndexNames((0, "CISCO-CVP-MIB", "ccvpServiceIndex"))
if mibBuilder.loadTexts: ccvpIcmEntry.setStatus('current')
if mibBuilder.loadTexts: ccvpIcmEntry.setDescription('Each entry represents a Customer Voice Portal (CVP) ICM service configured on the server. The ICM service is responsible for all communication between CVP components and ICM.')
ccvpIcmRtActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 1), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmRtActiveCalls.setStatus('current')
if mibBuilder.loadTexts: ccvpIcmRtActiveCalls.setDescription('The real-time active calls object is a real-time snapshot metric indicating the current number of calls being processed by the Intelligent Contact Management (ICM) application. This object value represents a count of calls currently being serviced by the ICM for follow-on routing to a contact center agent.')
ccvpIcmRtActiveSIPCallLegs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 2), Gauge32()).setUnits('call legs').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmRtActiveSIPCallLegs.setStatus('current')
if mibBuilder.loadTexts: ccvpIcmRtActiveSIPCallLegs.setDescription('The Intelligent Contact Management (ICM) application has the ability to accept Voice over IP (VoIP) calls that originate via the Session Initiation Protocol (SIP) or H.323 protocol. The real-time active SIP call legs object is a real-time snapshot metric indicating the current number of calls received by the ICM application via SIP.')
ccvpIcmRtActiveH323CallLegs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 3), Gauge32()).setUnits('call legs').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmRtActiveH323CallLegs.setStatus('current')
if mibBuilder.loadTexts: ccvpIcmRtActiveH323CallLegs.setDescription('The Intelligent Contact Management (ICM) application has the ability to accept Voice over IP (VoIP)Calls that originate via the Session Initiation Protocol (SIP) or H.323 protocol. The real-time active H323 call legs object is a real-time snapshot metric indicating the current number of calls received by the Intelligent Contact Management (ICM) application via the H.323 protocol.')
ccvpIcmRtActiveVRUCallLegs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 4), Gauge32()).setUnits('call legs').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmRtActiveVRUCallLegs.setStatus('current')
if mibBuilder.loadTexts: ccvpIcmRtActiveVRUCallLegs.setDescription("The real-time active VRU call legs object is a real-time snapshot metric indicating the current number of calls receiving Voice Response Unit (VRU) treatment from the Intelligent Contact Management (ICM) application. The VRU treatment includes playing pre-recorded messages, asking for Caller Entered Digits (CED) or speech recognition techniques to understand the caller's spoken request.")
ccvpIcmRtActiveICMLookupReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 5), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmRtActiveICMLookupReqs.setStatus('current')
if mibBuilder.loadTexts: ccvpIcmRtActiveICMLookupReqs.setDescription('Calls orginating in an external VXML (Voice XML) server need call routing instructions from the Intelligent Contact Management (ICM) application. The real-time active ICM lookup requests object is a specific snapshot metric indicating the current number of external VXML server call routing requests sent to the ICM application.')
ccvpIcmIntNewCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 6), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmIntNewCalls.setStatus('current')
if mibBuilder.loadTexts: ccvpIcmIntNewCalls.setDescription('The interval new calls object is an interval specific snapshot metric indicating the number of new calls received by the Intelligent Contact Management (ICM) application for follow-on Voice Response Unit (VRU) treatment and routing to a contact center agent.')
ccvpIcmIntSipCallLegs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 7), Gauge32()).setUnits('call legs').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmIntSipCallLegs.setStatus('current')
if mibBuilder.loadTexts: ccvpIcmIntSipCallLegs.setDescription('The Intelligent Contact Management (ICM) application has the ability to accept Voice over IP (VoIP) calls that originate via the Session Initiation Protocol (SIP) or H.323 protocol. The interval SIP call legs object is an interval specific snapshot metric indicating the number of calls received by the ICM application via SIP during this interval period.')
ccvpIcmIntH323CallLegs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 8), Gauge32()).setUnits('call legs').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmIntH323CallLegs.setStatus('current')
if mibBuilder.loadTexts: ccvpIcmIntH323CallLegs.setDescription('The Intelligent Contact Management (ICM) application has the ability to accept Voice over IP (VoIP) calls that originate via the Session Initiation Protocol (SIP) or H.323 protocol. The interval H323 call legs object is an interval specific snapshot metric indicating the number of calls received by the ICM application via the H.323 protocol during this interval period.')
ccvpIcmIntVruCallLegs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 9), Gauge32()).setUnits('call legs').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmIntVruCallLegs.setStatus('current')
if mibBuilder.loadTexts: ccvpIcmIntVruCallLegs.setDescription("The interval VRU call legs object is an interval specific snapshot metric indicating the number of calls receiving Voice Response Unit (VRU) treatment from the Intelligent Contact Management (ICM) application during this interval period. The VRU treatment includes playing pre-recorded messages, asking for Caller Entered Digits (CED) or speech recognition techniques to understand the caller's spoken request.")
ccvpIcmIntIcmLookupReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 10), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmIntIcmLookupReqs.setStatus('current')
if mibBuilder.loadTexts: ccvpIcmIntIcmLookupReqs.setDescription('Calls orginating in an external VXML (Voice XML) Server need call routing instructions from the Intelligent Contact Management (ICM) application. The interval ICM lookup requests object is an interval specific metric indicating the number of external VXML Server call routing requests sent to the ICM application during this interval period.')
ccvpIcmAggCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 11), Counter64()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmAggCalls.setStatus('current')
if mibBuilder.loadTexts: ccvpIcmAggCalls.setDescription('The aggregate calls object is a metric indicating the total number of new calls received by the Intelligent Contact Management (ICM) application for follow-on Voice Response Unit (VRU) treatment and routing to a contact center agent since system start time.')
ccvpIcmAggSipCallLegs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 12), Counter64()).setUnits('call legs').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmAggSipCallLegs.setStatus('current')
if mibBuilder.loadTexts: ccvpIcmAggSipCallLegs.setDescription('The Intelligent Contact Management (ICM) application has the ability to accept Voice over IP (VoIP) calls that originate via the Session Initiation Protocol (SIP) or H.323 protocol. The aggregate SIP call legs object is a metric indicating the total number of calls received by the ICM application via SIP since system start time.')
ccvpIcmAggH323CallLegs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 13), Counter64()).setUnits('call legs').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmAggH323CallLegs.setStatus('current')
if mibBuilder.loadTexts: ccvpIcmAggH323CallLegs.setDescription('The Intelligent Contact Management (ICM) application has the ability to accept Voice over IP (VoIP) calls that originate via the Session Initiation Protocol (SIP) or H.323 protocol. The aggregate H323 call legs object is a metric indicating the total number of calls received by the ICM application via the H.323 protocol since system start time.')
ccvpIcmAggVruCallLegs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 14), Counter64()).setUnits('call legs').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmAggVruCallLegs.setStatus('current')
if mibBuilder.loadTexts: ccvpIcmAggVruCallLegs.setDescription("The aggregate VRU call legs object is a metric indicating the total number of calls that have received Voice Response Unit (VRU) treatment from the Intelligent Contact Management (ICM) application since system start time. The VRU treatment includes playing pre-recorded messages, asking for Caller Entered Digits (CED) or speech recognition techniques to understand the caller's spoken request.")
ccvpIcmAggIcmLookupReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 15), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmAggIcmLookupReqs.setStatus('current')
if mibBuilder.loadTexts: ccvpIcmAggIcmLookupReqs.setDescription('Calls orginating in an external VXML (Voice XML) Server need call routing instructions from the Intelligent Contact Management (ICM) application. The aggregate ICM lookup requests object is a metric indicating the total number of external VXML server call routing requests sent to the ICM application since system start time.')
ccvpIcmRtFullVideoCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 16), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmRtFullVideoCalls.setStatus('current')
if mibBuilder.loadTexts: ccvpIcmRtFullVideoCalls.setDescription('The real-time full video calls object is a real-time snapshot metric indicating the current number of calls being processed by the Intelligent Contact Management (ICM) application that offer full video capabilities. Full video capabilities include video calls to IVR and Agents.')
ccvpIcmRtOfferedBasicVideoCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 17), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmRtOfferedBasicVideoCalls.setStatus('current')
if mibBuilder.loadTexts: ccvpIcmRtOfferedBasicVideoCalls.setDescription('The real-time offered basic video calls object is a real-time snapshot metric indicating the current number of calls being processed by the Intelligent Contact Management (ICM) application that offer basic video capabilities. Basic video capabilities include video calls to Agents, but not to IVR.')
ccvpIcmRtAcceptedBasicVideoCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 18), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmRtAcceptedBasicVideoCalls.setStatus('current')
if mibBuilder.loadTexts: ccvpIcmRtAcceptedBasicVideoCalls.setDescription('The real-time accepted basic video calls object is a real-time snapshot metric indicating the current number of calls being processed by the Intelligent Contact Management (ICM) application that have been accepted for using basic video capabilities. Basic video capabilities include video calls to Agents, but not to IVR.')
ccvpIcmIntFullVideoCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 19), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmIntFullVideoCalls.setStatus('current')
if mibBuilder.loadTexts: ccvpIcmIntFullVideoCalls.setDescription('The interval full video calls object is an interval snapshot metric indicating the number of calls being processed by the Intelligent Contact Management (ICM) application that offer full video capabilities. Full video capabilities include video calls to IVR and Agents. The interval at which this object is updated is defined by ccvpServiceIntPeriod.')
ccvpIcmIntOfferedBasicVideoCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 20), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmIntOfferedBasicVideoCalls.setStatus('current')
if mibBuilder.loadTexts: ccvpIcmIntOfferedBasicVideoCalls.setDescription('The interval offered basic video calls object is an interval snapshot metric indicating the number of calls being processed by the Intelligent Contact Management (ICM) application that offer basic video capabilities. Basic video capabilities include video calls to Agents, but not to IVR. The interval at which this object is updated is defined by ccvpServiceIntPeriod.')
ccvpIcmIntAcceptedBasicVideoCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 21), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmIntAcceptedBasicVideoCalls.setStatus('current')
if mibBuilder.loadTexts: ccvpIcmIntAcceptedBasicVideoCalls.setDescription('The interval accepted basic video calls object is an interval snapshot metric indicating the number of calls being processed by the Intelligent Contact Management (ICM) application that have been accepted for using basic video capabilities. Basic video capabilities include video calls to Agents, but not to IVR. The interval at which this object is updated is defined by ccvpServiceIntPeriod.')
ccvpIcmAggFullVideoCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 22), Counter64()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmAggFullVideoCalls.setStatus('current')
if mibBuilder.loadTexts: ccvpIcmAggFullVideoCalls.setDescription('The aggregate full video calls object is a metric indicating the number of calls being processed by the Intelligent Contact Management (ICM) application that offer full video capabilities since the start of the system. Full video capabilities include video calls to IVR and Agents.')
ccvpIcmAggOfferedBasicVideoCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 23), Counter64()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmAggOfferedBasicVideoCalls.setStatus('current')
if mibBuilder.loadTexts: ccvpIcmAggOfferedBasicVideoCalls.setDescription('The aggregate offered basic video calls object is a metric indicating the number of calls being processed by the Intelligent Contact Management (ICM) application that offer basic video capabilities since the start of the system. Basic video capabilities include video calls to Agents, but not to IVR.')
ccvpIcmAggAcceptedBasicVideoCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 4, 1, 24), Counter64()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpIcmAggAcceptedBasicVideoCalls.setStatus('current')
if mibBuilder.loadTexts: ccvpIcmAggAcceptedBasicVideoCalls.setDescription('The interval accepted basic video calls object is a metric indicating the number of calls being processed by the Intelligent Contact Management (ICM) application that have been accepted for using basic video capabilities since the start of the system. Basic video capabilities include video calls to Agents, but not to IVR.')
ccvpReptTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 5), )
if mibBuilder.loadTexts: ccvpReptTable.setStatus('current')
if mibBuilder.loadTexts: ccvpReptTable.setDescription('The Reporting service table lists each Customer Voice Portal reporting service configured on this server. The CVP Reporting Server houses the CVP Reporting service as well as a database management system to persist data. The CVP reporting service receives reporting events from the CVP IVR service, the CVP SIP service, and the CVP VoiceXML service. The service is deployed together with a database management system and it transforms and writes this reporting data into that database. The database schema is prescribed by the CVP product, but it is an open schema in that customers may develop custom reports based on it. There can only be one CVP Reporting Server in a deployment. This does not represent a single point of failure however, because data safety and security are provided by the database management system, and temporary outages are tolerated due to persistent buffering of information on the source components. This table has a sparse dependent relationship with the Service table. The service index acts as the primary index, relating the entry to the corresponding entry in the Service table. The SNMP agent constructs this table at startup. Since services can only be added or deleted when the CVP application is stopped, service information table entries cannot be added to or deleted from the table either by the agent or the management station while the application is running. The agent will update service information table objects as their values change when the application is running. All objects in this table are read-only to the management station.')
ccvpReptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 5, 1), ).setIndexNames((0, "CISCO-CVP-MIB", "ccvpServiceIndex"))
if mibBuilder.loadTexts: ccvpReptEntry.setStatus('current')
if mibBuilder.loadTexts: ccvpReptEntry.setDescription('Each entry represents a Customer Voice Portal Reporting service configured on the server. The Reporting service receives reporting events from the CVP IVR service, the CVP SIP service, and the CVP VoiceXML service.')
ccvpReptIntVxmlEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 5, 1, 1), Gauge32()).setUnits('events').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpReptIntVxmlEvents.setStatus('current')
if mibBuilder.loadTexts: ccvpReptIntVxmlEvents.setDescription('The interval VXML events object is an interval metric indicating the total number of reporting events received from the VXML service during the interval. For each reporting event received from the VXML service, this object value will be increased by one.')
ccvpReptIntSipEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 5, 1, 2), Gauge32()).setUnits('events').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpReptIntSipEvents.setStatus('current')
if mibBuilder.loadTexts: ccvpReptIntSipEvents.setDescription('The interval SIP events object is an interval metric indicating the total number of reporting events received from the SIP service during the interval. For each reporting event received from the SIP service, this metric will be increased by one.')
ccvpReptIntIvrEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 5, 1, 3), Gauge32()).setUnits('events').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpReptIntIvrEvents.setStatus('current')
if mibBuilder.loadTexts: ccvpReptIntIvrEvents.setDescription('The interval IVR events object is an interval metric indicating the total number of reporting events received from the IVR service during the interval. For each reporting event received from the IVR service, this object value will be increased by one.')
ccvpReptIntDatabaseWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 5, 1, 4), Gauge32()).setUnits('writes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpReptIntDatabaseWrites.setStatus('current')
if mibBuilder.loadTexts: ccvpReptIntDatabaseWrites.setDescription('The interval database writes object is an interval metric indicating the total number of writes to the database made by the reporting service during the interval. For each write to the database by the reporting service, this object value will be increased by one.')
ccvpReptAggVxmlEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 5, 1, 5), Counter64()).setUnits('events').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpReptAggVxmlEvents.setStatus('current')
if mibBuilder.loadTexts: ccvpReptAggVxmlEvents.setDescription('The aggregate VXML events object is a metric indicating the total number of reporting events received from the VXML service since startup. For each reporting event received from the VXML service, this object value will be increased by one.')
ccvpReptAggSipEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 5, 1, 6), Counter64()).setUnits('events').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpReptAggSipEvents.setStatus('current')
if mibBuilder.loadTexts: ccvpReptAggSipEvents.setDescription('The aggregate SIP events object is a metric indicating the total number of reporting events received from the SIP service since startup. For each reporting event received from the SIP service, this object value will be increased by one.')
ccvpReptAggIvrEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 5, 1, 7), Counter64()).setUnits('events').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpReptAggIvrEvents.setStatus('current')
if mibBuilder.loadTexts: ccvpReptAggIvrEvents.setDescription('The aggregate IVR events object is a metric indicating the total number of reporting events received from the IVR service since startup. For each reporting event received from the IVR service, this object value will be increased by one.')
ccvpReptAggDatabaseWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 5, 1, 8), Counter64()).setUnits('writes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpReptAggDatabaseWrites.setStatus('current')
if mibBuilder.loadTexts: ccvpReptAggDatabaseWrites.setDescription('The aggregate database writes object is a metric indicating the total number of writes to the database made by the reporting service since startup. For each write to the database by the reporting service, this object value will be increased by one.')
ccvpVxmlTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 6), )
if mibBuilder.loadTexts: ccvpVxmlTable.setStatus('current')
if mibBuilder.loadTexts: ccvpVxmlTable.setDescription('The Voice XML Service table lists each Customer Voice Portal Voice XML service installed and configured on this server. The CVP VXML server includes both the CVP VXML service and the VXML server software that executes complex IVR applications by exchanging VoiceXML pages with the VXML Gateway?s built-in voice browser. Like almost all other CVP product components, it runs within a J2EE application server environment such as Tomcat, and many customers add their own custom-built or off-the-shelf J2EE components to interact with back-end hosts and services. CVP VoiceXML Server applications are written using the CVP VoiceXML Studio, and deployed to the Server for execution. They are invoked on an as-needed basis by a special microapp which must be executed from within the ICM routing script. The VXML Server may also be deployed in a standalone configuration ?- one which includes no ICM components. In this model, applications are invoked as a direct result of calls arriving in the VXML Gateway, and a single post-application transfer is allowed. Users may add the CVP VXML service software. This affords standalone applications the additional ability to forward reporting events to a CVP Reporting Server, and to make ancillary routing requests and exchange call context information with an ICM if one is present. However, the integration with ICM is nominal. This table has a sparse dependent relationship with the Service table. The service index acts as the primary index, relating the entry to the corresponding entry in the Service table. The SNMP agent constructs this table at startup. Since services can only be added or deleted when the CVP application is stopped, service information table entries cannot be added to or deleted from the table either by the agent or the management station while the application is running. The agent will update service information table objects as their values change when the application is running. All objects in this table are read-only to the management station.')
ccvpVxmlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 6, 1), ).setIndexNames((0, "CISCO-CVP-MIB", "ccvpServiceIndex"))
if mibBuilder.loadTexts: ccvpVxmlEntry.setStatus('current')
if mibBuilder.loadTexts: ccvpVxmlEntry.setDescription('Each entry represents a Customer Voice Portal (CVP) Voice XML service configured on the server. The Voice XML service affords standalone applications the additional ability to forward reporting events to a CVP reporting server, and to make ancillary routing requests and exchange call context information with an ICM if one is present.')
ccvpVxmlRtActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 6, 1, 1), Gauge32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpVxmlRtActiveSessions.setStatus('current')
if mibBuilder.loadTexts: ccvpVxmlRtActiveSessions.setDescription('The real-time active sessions object is a real time snapshot metric indicating a count of the number of current sessions being handled by the CVP VXML service.')
ccvpVxmlRtActiveIcmLookups = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 6, 1, 2), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpVxmlRtActiveIcmLookups.setStatus('current')
if mibBuilder.loadTexts: ccvpVxmlRtActiveIcmLookups.setDescription('The real-time active ICM lookups object is a real time snapshot metric indicating the number of current ICM lookup requests being handled by the CVP VXML service.')
ccvpVxmlIntSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 6, 1, 3), Gauge32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpVxmlIntSessions.setStatus('current')
if mibBuilder.loadTexts: ccvpVxmlIntSessions.setDescription('The interval sessions object is an interval metric indicating the total number of sessions being handled by the CVP VXML service during this interval. For each session handled by the VXML service, this object value will be increased by one.')
ccvpVxmlIntReptEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 6, 1, 4), Gauge32()).setUnits('events').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpVxmlIntReptEvents.setStatus('current')
if mibBuilder.loadTexts: ccvpVxmlIntReptEvents.setDescription('The interval reporting events object is an interval metric indicating the number of events sent to the CVP reporting service from the VXML service during this interval. For each reporting event sent to the reporting service, this object value will be increased by one.')
ccvpVxmlIntIcmLookupReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 6, 1, 5), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpVxmlIntIcmLookupReqs.setStatus('current')
if mibBuilder.loadTexts: ccvpVxmlIntIcmLookupReqs.setDescription('The interval ICM lookup requests object is an interval metric indicating the number of requests sent from the VXML service to the ICM during this interval. For each ICM lookup request, whether the request succeeded or failed, this object value will be increased by one.')
ccvpVxmlIntIcmLookupResp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 6, 1, 6), Gauge32()).setUnits('responses').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpVxmlIntIcmLookupResp.setStatus('current')
if mibBuilder.loadTexts: ccvpVxmlIntIcmLookupResp.setDescription('The interval ICM lookup responses object is an interval metric indicating the number of responses the ICM service has sent to the VXML service during this interval. For each ICM lookup response, whether the response is a result of a successful or a failed request, this object value will be increased by one. In the case that multiple response messages are sent back to the VXML service to a single request, this object value will increment once per response message from the ICM service.')
ccvpVxmlIntIcmLookupSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 6, 1, 7), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpVxmlIntIcmLookupSuccess.setStatus('current')
if mibBuilder.loadTexts: ccvpVxmlIntIcmLookupSuccess.setDescription('The interval ICM lookup success object is an interval metric indicating the number of requests from the VXML service to the ICM during this interval that were successful. For each ICM lookup request that succeeded, this object value will be increased by one.')
ccvpVxmlIntIcmLookupFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 6, 1, 8), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpVxmlIntIcmLookupFails.setStatus('current')
if mibBuilder.loadTexts: ccvpVxmlIntIcmLookupFails.setDescription('The interval ICM lookup fails object is an interval metric indicating the number of requests from the VXML service to the ICM that failed during this interval. For each ICM lookup request that failed, this object value will be increased by one. This object value will be incremented in the case where an ICM failed message was received or in the case where the VXML service generated the failed message.')
ccvpVxmlAggSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 6, 1, 9), Counter64()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpVxmlAggSessions.setStatus('current')
if mibBuilder.loadTexts: ccvpVxmlAggSessions.setDescription('The aggregate sessions object is a metric indicating the total number of sessions handled by the CVP VXML service since startup. For each session handled by the VXML service, this object value will be increased by one.')
ccvpVxmlAggReptEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 6, 1, 10), Counter64()).setUnits('events').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpVxmlAggReptEvents.setStatus('current')
if mibBuilder.loadTexts: ccvpVxmlAggReptEvents.setDescription('The aggregate reporting events object is a metric indicating the total reporting events sent from the VXML service since startup. For each reporting event sent to the reporting service, this object value will be increased by one.')
ccvpVxmlAggIcmLookupReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 6, 1, 11), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpVxmlAggIcmLookupReqs.setStatus('current')
if mibBuilder.loadTexts: ccvpVxmlAggIcmLookupReqs.setDescription('The aggregate ICM lookup requests object is a metric indicating the total number of requests from the VXML service to the ICM since startup. For each ICM lookup request, whether the request succeeded or failed, this object value will be increased by one.')
ccvpVxmlAggIcmLookupResp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 6, 1, 12), Counter64()).setUnits('responses').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpVxmlAggIcmLookupResp.setStatus('current')
if mibBuilder.loadTexts: ccvpVxmlAggIcmLookupResp.setDescription('The aggregate ICM lookup responses object is a metric indicating the total number of responses the ICM service has sent to the VXML service since startup. For each ICM lookup response, whether the response is to a successful or failed request, this metric will be increased by one. In the case where multiple response messages are sent back to the VXML service for a single request, this object value will increment once per response message from the ICM service.')
ccvpVxmlAggIcmLookupSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 6, 1, 13), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpVxmlAggIcmLookupSuccess.setStatus('current')
if mibBuilder.loadTexts: ccvpVxmlAggIcmLookupSuccess.setDescription('The aggregate ICM lookup success object is a metric indicating the total number of requests from the VXML service to the ICM since startup. For each ICM lookup request that succeeded, this object value will be increased by one.')
ccvpVxmlAggIcmLookupFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 6, 6, 1, 14), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccvpVxmlAggIcmLookupFails.setStatus('current')
if mibBuilder.loadTexts: ccvpVxmlAggIcmLookupFails.setDescription('The aggregate ICM lookup failures object is a metric indicating the total number of failed requests from the VXML service to the ICM since startup. For each ICM lookup request that failed, this object value will be increased by one. This object value will be incremented in the case where an ICM failed message was received or in the case where VXML service generates a failed message.')
ccvpEventMessageId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 7, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccvpEventMessageId.setStatus('current')
if mibBuilder.loadTexts: ccvpEventMessageId.setDescription('The event message ID is the unique notification message identifier (value) that was assigned by the Customer Voice Portal (CVP) application. This identifier is unique for each different notification but consistent for each instance of the same notification.')
ccvpEventHostName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 7, 2), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccvpEventHostName.setStatus('current')
if mibBuilder.loadTexts: ccvpEventHostName.setDescription('The event host name object specifies the host name or the fully qualified domain name of the Customer Voice Portal server from which this event originated.')
ccvpEventAppName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 7, 3), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccvpEventAppName.setStatus('current')
if mibBuilder.loadTexts: ccvpEventAppName.setDescription("The event application name object specifies the service- specific name of the Customer Voice Portal functional service that generated this notification. This name will vary, both in content and in format, based on the service that generated the notification. For example, the name for a SIP service may be 'CVP_SIP_SS' while the voice XML service name map be 'CVP_VXML_SS'. By convention, the CVP application version number shall appear in the application name as well, thus the SIP service application name for CVP version 4.0 will be 'CVP_4_0_SIP'.")
ccvpEventMessageName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 7, 4), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccvpEventMessageName.setStatus('current')
if mibBuilder.loadTexts: ccvpEventMessageName.setDescription('The event message name object specifies the service- specific name of the Customer Voice Portal (CVP) service notification message. This name will vary, both in content and in format, based on the event itself. The object value is used to group and correlate similar notifications.')
ccvpEventState = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("raise", 1), ("clear", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccvpEventState.setStatus('current')
if mibBuilder.loadTexts: ccvpEventState.setDescription("The event state object identifies the state (not to be confused with severity) of the notification and potentially the current state of the functional component that generated the notification. The possible states are: 'raise': A raise state identifies a notification received as a result of a health-impacting condition, such as a process failure. A subsequent clear state notification will follow when the error condition is resolved. 'clear': The clear state indicates that the condition which generated a previous raise notification has been resolved.")
ccvpEventSeverity = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("informational", 6), ("debug", 7)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccvpEventSeverity.setStatus('current')
if mibBuilder.loadTexts: ccvpEventSeverity.setDescription("The event severity object indicates the severity level of this notification. The severity levels are: 'emergency': The notification indicates that a devastating failure has occurred; the system or service is unusable. Immediate operator intervention is required. 'alert': The notification indicates that a devastating failure is imminent that will render the system unusable. Immediate operator attention is necessary. 'critical': The notification indicates that a service impacting failure is likely to occur soon; an error has occurred that was not appropriately handled by the system. Operator attention is needed as soon as possible. 'error': The notification contains important operational state information and may indicate that the system has experienced a temporary impairment or an error that was appropriately handled by the system. An operator should review the notification soon to determine if action is needed. 'warning': The notification contains important operational state information that may be a precursor to an error occurrence. An operator should review the notification soon to determine if action is needed. 'notice': The notification contains health or operational state information that may be pertinent to the health of the system but does not require the attention of the administrator at this time. 'informational': The notification contains interesting system-level information that is valuable to an administrator, however, the event itself does not indicate a failure or impairment condition. 'debug': The notification provides supplemental information that may be beneficial toward diagnosing or resolving a problem but does not in itself provide operational health status.")
ccvpEventTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 7, 7), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccvpEventTimestamp.setStatus('current')
if mibBuilder.loadTexts: ccvpEventTimestamp.setDescription('The event time stamp object specifies the date and time that the notification was generated on the originating device.')
ccvpEventText = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 590, 1, 7, 8), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccvpEventText.setStatus('current')
if mibBuilder.loadTexts: ccvpEventText.setDescription('The event text is the full text of the notification. This text includes a description of the event that was generated, component state information and potentially a brief description of administrative action that may be necessary to correct the condition that caused the event to occur.')
ccvpCvpEvent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 590, 0, 1)).setObjects(("CISCO-CVP-MIB", "ccvpEventMessageId"), ("CISCO-CVP-MIB", "ccvpEventHostName"), ("CISCO-CVP-MIB", "ccvpEventAppName"), ("CISCO-CVP-MIB", "ccvpEventMessageName"), ("CISCO-CVP-MIB", "ccvpEventState"), ("CISCO-CVP-MIB", "ccvpEventSeverity"), ("CISCO-CVP-MIB", "ccvpEventTimestamp"), ("CISCO-CVP-MIB", "ccvpEventText"))
if mibBuilder.loadTexts: ccvpCvpEvent.setStatus('current')
if mibBuilder.loadTexts: ccvpCvpEvent.setDescription('A CVP event is a notification that is sent by a functional service of the Cisco Customer Voice Portal (CVP) self service interactive voice response application.')
ciscoCcvpMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 1, 1)).setObjects(("CISCO-CVP-MIB", "ccvpGeneralInfoGroup"), ("CISCO-CVP-MIB", "ccvpLicensingInfoGroup"), ("CISCO-CVP-MIB", "ccvpThreadPoolInfoGroup"), ("CISCO-CVP-MIB", "ccvpJvmInfoGroup"), ("CISCO-CVP-MIB", "ccvpServiceTableGroup"), ("CISCO-CVP-MIB", "ccvpSipTableGroup"), ("CISCO-CVP-MIB", "ccvpH323TableGroup"), ("CISCO-CVP-MIB", "ccvpIvrTableGroup"), ("CISCO-CVP-MIB", "ccvpIcmTableGroup"), ("CISCO-CVP-MIB", "ccvpReptTableGroup"), ("CISCO-CVP-MIB", "ccvpVxmlTableGroup"), ("CISCO-CVP-MIB", "ccvpCvpNotificationInfoGroup"), ("CISCO-CVP-MIB", "ccvpCvpEventsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCcvpMIBComplianceRev1 = ciscoCcvpMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoCcvpMIBComplianceRev1.setDescription('This object is the compliance statement for entities which implement the Cisco Customer Voice Portal MIB.')
ciscoCcvpMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 1, 2)).setObjects(("CISCO-CVP-MIB", "ccvpGeneralInfoGroup"), ("CISCO-CVP-MIB", "ccvpLicensingInfoGroup"), ("CISCO-CVP-MIB", "ccvpThreadPoolInfoGroup"), ("CISCO-CVP-MIB", "ccvpJvmInfoGroup"), ("CISCO-CVP-MIB", "ccvpServiceTableGroup"), ("CISCO-CVP-MIB", "ccvpSipTableGroup"), ("CISCO-CVP-MIB", "ccvpSipVideoTableGroup"), ("CISCO-CVP-MIB", "ccvpH323TableGroup"), ("CISCO-CVP-MIB", "ccvpIvrTableGroup"), ("CISCO-CVP-MIB", "ccvpIvrVideoTableGroup"), ("CISCO-CVP-MIB", "ccvpIcmTableGroup"), ("CISCO-CVP-MIB", "ccvpIcmVideoTableGroup"), ("CISCO-CVP-MIB", "ccvpReptTableGroup"), ("CISCO-CVP-MIB", "ccvpVxmlTableGroup"), ("CISCO-CVP-MIB", "ccvpCvpNotificationInfoGroup"), ("CISCO-CVP-MIB", "ccvpCvpEventsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCcvpMIBComplianceRev2 = ciscoCcvpMIBComplianceRev2.setStatus('current')
if mibBuilder.loadTexts: ciscoCcvpMIBComplianceRev2.setDescription('This object is the compliance statement for entities which implement the Cisco Customer Voice Portal MIB.')
ccvpGeneralInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 2, 1)).setObjects(("CISCO-CVP-MIB", "ccvpServerName"), ("CISCO-CVP-MIB", "ccvpDescription"), ("CISCO-CVP-MIB", "ccvpVersion"), ("CISCO-CVP-MIB", "ccvpStartTime"), ("CISCO-CVP-MIB", "ccvpTimeZoneName"), ("CISCO-CVP-MIB", "ccvpTimeZoneOffsetHours"), ("CISCO-CVP-MIB", "ccvpTimeZoneOffsetMinutes"), ("CISCO-CVP-MIB", "ccvpOpsConsoleURL"), ("CISCO-CVP-MIB", "ccvpSupportToolsURL"), ("CISCO-CVP-MIB", "ccvpEnableNotifications"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccvpGeneralInfoGroup = ccvpGeneralInfoGroup.setStatus('current')
if mibBuilder.loadTexts: ccvpGeneralInfoGroup.setDescription('The general info group defines the general Customer Voice Portal information objects. All application servers will populate these objects.')
ccvpLicensingInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 2, 2)).setObjects(("CISCO-CVP-MIB", "ccvpLicRtPortsAvail"), ("CISCO-CVP-MIB", "ccvpLicRtPortsInUse"), ("CISCO-CVP-MIB", "ccvpLicRtPortState"), ("CISCO-CVP-MIB", "ccvpLicIntLastUpdate"), ("CISCO-CVP-MIB", "ccvpLicIntPeriod"), ("CISCO-CVP-MIB", "ccvpLicIntPortReqs"), ("CISCO-CVP-MIB", "ccvpLicIntAvgPortReqs"), ("CISCO-CVP-MIB", "ccvpLicIntMaxPortsInUse"), ("CISCO-CVP-MIB", "ccvpLicIntPortReqsDenied"), ("CISCO-CVP-MIB", "ccvpLicAggPortReqs"), ("CISCO-CVP-MIB", "ccvpLicAggAvgPortReqs"), ("CISCO-CVP-MIB", "ccvpLicAggMaxPortsInUse"), ("CISCO-CVP-MIB", "ccvpLicAggPortReqsDenied"), ("CISCO-CVP-MIB", "ccvpLicPortUsageWarning"), ("CISCO-CVP-MIB", "ccvpLicPortUsageCritical"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccvpLicensingInfoGroup = ccvpLicensingInfoGroup.setStatus('current')
if mibBuilder.loadTexts: ccvpLicensingInfoGroup.setDescription('The licensing information group defines the set of statistic objects for the Customer Voice Portal port licensing system. All application servers will populate these objects.')
ccvpThreadPoolInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 2, 3)).setObjects(("CISCO-CVP-MIB", "ccvpTPoolRtIdleThreads"), ("CISCO-CVP-MIB", "ccvpTPoolRtRunningThreads"), ("CISCO-CVP-MIB", "ccvpTPoolRtCoreThreads"), ("CISCO-CVP-MIB", "ccvpTPoolRtMaxThreadsAvail"), ("CISCO-CVP-MIB", "ccvpTPoolRtMaxThreadsUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccvpThreadPoolInfoGroup = ccvpThreadPoolInfoGroup.setStatus('current')
if mibBuilder.loadTexts: ccvpThreadPoolInfoGroup.setDescription('The thread pool information group defines the set of statistic objects for the Customer Voice Portal thread pools. All application servers will populate these objects.')
ccvpJvmInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 2, 4)).setObjects(("CISCO-CVP-MIB", "ccvpJvmRtMaxMemUsed"), ("CISCO-CVP-MIB", "ccvpJvmRtCurrMemUsed"), ("CISCO-CVP-MIB", "ccvpJvmRtMaxMemAvail"), ("CISCO-CVP-MIB", "ccvpJvmRtCurrMemAvail"), ("CISCO-CVP-MIB", "ccvpJvmRtCurrThreadsInUse"), ("CISCO-CVP-MIB", "ccvpJvmRtMaxThreadsUsed"), ("CISCO-CVP-MIB", "ccvpJvmRtUpTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccvpJvmInfoGroup = ccvpJvmInfoGroup.setStatus('current')
if mibBuilder.loadTexts: ccvpJvmInfoGroup.setDescription('The Java virtual machine (JVM) information group defines the set of statistic objects for the Customer Voice Portal JVM. All application servers will populate these objects.')
ccvpServiceTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 2, 5)).setObjects(("CISCO-CVP-MIB", "ccvpServiceType"), ("CISCO-CVP-MIB", "ccvpServiceName"), ("CISCO-CVP-MIB", "ccvpServiceStatus"), ("CISCO-CVP-MIB", "ccvpServiceIntLastUpdate"), ("CISCO-CVP-MIB", "ccvpServiceIntPeriod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccvpServiceTableGroup = ccvpServiceTableGroup.setStatus('current')
if mibBuilder.loadTexts: ccvpServiceTableGroup.setDescription('The service table group defines the enterprise contact center application functional component table objects.')
ccvpSipTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 2, 6)).setObjects(("CISCO-CVP-MIB", "ccvpSipRtActiveCalls"), ("CISCO-CVP-MIB", "ccvpSipRtTotalCallLegs"), ("CISCO-CVP-MIB", "ccvpSipIntNewCalls"), ("CISCO-CVP-MIB", "ccvpSipIntConnectsRcv"), ("CISCO-CVP-MIB", "ccvpSipIntAvgLatency1"), ("CISCO-CVP-MIB", "ccvpSipIntAvgLatency2"), ("CISCO-CVP-MIB", "ccvpSipIntFailedXferPre"), ("CISCO-CVP-MIB", "ccvpSipIntFailedXferPost"), ("CISCO-CVP-MIB", "ccvpSipAggNewCalls"), ("CISCO-CVP-MIB", "ccvpSipAggConnectsRcv"), ("CISCO-CVP-MIB", "ccvpSipAggAvgLatency1"), ("CISCO-CVP-MIB", "ccvpSipAggAvgLatency2"), ("CISCO-CVP-MIB", "ccvpSipAggFailedXferPre"), ("CISCO-CVP-MIB", "ccvpSipAggFailedXferPost"), ("CISCO-CVP-MIB", "ccvpSipIntPostCallAnswered"), ("CISCO-CVP-MIB", "ccvpSipIntWhisperAnswered"), ("CISCO-CVP-MIB", "ccvpSipIntWhisperFailed"), ("CISCO-CVP-MIB", "ccvpSipIntGreetingAnswered"), ("CISCO-CVP-MIB", "ccvpSipIntGreetingFailed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccvpSipTableGroup = ccvpSipTableGroup.setStatus('current')
if mibBuilder.loadTexts: ccvpSipTableGroup.setDescription('The SIP service table group defines the customer voice portal SIP service table objects.')
ccvpH323TableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 2, 7)).setObjects(("CISCO-CVP-MIB", "ccvpH323RtCallsInProgress"), ("CISCO-CVP-MIB", "ccvpH323RtMemoryInUse"), ("CISCO-CVP-MIB", "ccvpH323IntArrivalRate"), ("CISCO-CVP-MIB", "ccvpH323IntTransferRate"), ("CISCO-CVP-MIB", "ccvpH323IntMaxNewCallLatency"), ("CISCO-CVP-MIB", "ccvpH323IntAvgNewCallLatency"), ("CISCO-CVP-MIB", "ccvpH323IntMaxXferToAlert"), ("CISCO-CVP-MIB", "ccvpH323IntAvgXferToAlert"), ("CISCO-CVP-MIB", "ccvpH323IntMaxXferToAnswer"), ("CISCO-CVP-MIB", "ccvpH323IntAvgXferToAnswer"), ("CISCO-CVP-MIB", "ccvpH323IntNewCalls"), ("CISCO-CVP-MIB", "ccvpH323IntTransferred"), ("CISCO-CVP-MIB", "ccvpH323IntRedirected"), ("CISCO-CVP-MIB", "ccvpH323IntNotTransferred"), ("CISCO-CVP-MIB", "ccvpH323IntPromptsNotFound"), ("CISCO-CVP-MIB", "ccvpH323IntCriticalMedia"), ("CISCO-CVP-MIB", "ccvpH323IntCallsFinished"), ("CISCO-CVP-MIB", "ccvpH323IntMaxCpuUsage"), ("CISCO-CVP-MIB", "ccvpH323IntAvgCpuUsage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccvpH323TableGroup = ccvpH323TableGroup.setStatus('current')
if mibBuilder.loadTexts: ccvpH323TableGroup.setDescription('The CVP H.323 service table group defines the Customer Voice Portal H.323 service table objects.')
ccvpIvrTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 2, 8)).setObjects(("CISCO-CVP-MIB", "ccvpIvrRtActiveCalls"), ("CISCO-CVP-MIB", "ccvpIvrRtActiveHttpReqs"), ("CISCO-CVP-MIB", "ccvpIvrIntNewCalls"), ("CISCO-CVP-MIB", "ccvpIvrIntMaxActiveCalls"), ("CISCO-CVP-MIB", "ccvpIvrIntCallsFinished"), ("CISCO-CVP-MIB", "ccvpIvrIntAvgCallLatency"), ("CISCO-CVP-MIB", "ccvpIvrIntMaxCallLatency"), ("CISCO-CVP-MIB", "ccvpIvrIntMinCallLatency"), ("CISCO-CVP-MIB", "ccvpIvrIntHttpReqs"), ("CISCO-CVP-MIB", "ccvpIvrIntMaxActiveHttpReqs"), ("CISCO-CVP-MIB", "ccvpIvrIntMaxHttpReqRate"), ("CISCO-CVP-MIB", "ccvpIvrIntAvgHttpReqRate"), ("CISCO-CVP-MIB", "ccvpIvrAggNewCalls"), ("CISCO-CVP-MIB", "ccvpIvrAggMaxActiveCalls"), ("CISCO-CVP-MIB", "ccvpIvrAggHttpReqs"), ("CISCO-CVP-MIB", "ccvpIvrAggMaxHttpReqs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccvpIvrTableGroup = ccvpIvrTableGroup.setStatus('current')
if mibBuilder.loadTexts: ccvpIvrTableGroup.setDescription('The IVR service table group defines the customer voice portal interactive voice response service table objects.')
ccvpIcmTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 2, 9)).setObjects(("CISCO-CVP-MIB", "ccvpIcmRtActiveCalls"), ("CISCO-CVP-MIB", "ccvpIcmRtActiveSIPCallLegs"), ("CISCO-CVP-MIB", "ccvpIcmRtActiveH323CallLegs"), ("CISCO-CVP-MIB", "ccvpIcmRtActiveVRUCallLegs"), ("CISCO-CVP-MIB", "ccvpIcmRtActiveICMLookupReqs"), ("CISCO-CVP-MIB", "ccvpIcmIntNewCalls"), ("CISCO-CVP-MIB", "ccvpIcmIntSipCallLegs"), ("CISCO-CVP-MIB", "ccvpIcmIntH323CallLegs"), ("CISCO-CVP-MIB", "ccvpIcmIntVruCallLegs"), ("CISCO-CVP-MIB", "ccvpIcmIntIcmLookupReqs"), ("CISCO-CVP-MIB", "ccvpIcmAggCalls"), ("CISCO-CVP-MIB", "ccvpIcmAggSipCallLegs"), ("CISCO-CVP-MIB", "ccvpIcmAggH323CallLegs"), ("CISCO-CVP-MIB", "ccvpIcmAggVruCallLegs"), ("CISCO-CVP-MIB", "ccvpIcmAggIcmLookupReqs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccvpIcmTableGroup = ccvpIcmTableGroup.setStatus('current')
if mibBuilder.loadTexts: ccvpIcmTableGroup.setDescription('The ICM table group defines the Customer Voice Portal Intelligent Contact Management interface table objects.')
ccvpReptTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 2, 10)).setObjects(("CISCO-CVP-MIB", "ccvpReptIntVxmlEvents"), ("CISCO-CVP-MIB", "ccvpReptIntSipEvents"), ("CISCO-CVP-MIB", "ccvpReptIntIvrEvents"), ("CISCO-CVP-MIB", "ccvpReptIntDatabaseWrites"), ("CISCO-CVP-MIB", "ccvpReptAggVxmlEvents"), ("CISCO-CVP-MIB", "ccvpReptAggSipEvents"), ("CISCO-CVP-MIB", "ccvpReptAggIvrEvents"), ("CISCO-CVP-MIB", "ccvpReptAggDatabaseWrites"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccvpReptTableGroup = ccvpReptTableGroup.setStatus('current')
if mibBuilder.loadTexts: ccvpReptTableGroup.setDescription('The reporting service table group defines the Customer Voice Portal reporting service table objects.')
ccvpVxmlTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 2, 11)).setObjects(("CISCO-CVP-MIB", "ccvpVxmlRtActiveSessions"), ("CISCO-CVP-MIB", "ccvpVxmlRtActiveIcmLookups"), ("CISCO-CVP-MIB", "ccvpVxmlIntSessions"), ("CISCO-CVP-MIB", "ccvpVxmlIntReptEvents"), ("CISCO-CVP-MIB", "ccvpVxmlIntIcmLookupReqs"), ("CISCO-CVP-MIB", "ccvpVxmlIntIcmLookupResp"), ("CISCO-CVP-MIB", "ccvpVxmlIntIcmLookupSuccess"), ("CISCO-CVP-MIB", "ccvpVxmlIntIcmLookupFails"), ("CISCO-CVP-MIB", "ccvpVxmlAggSessions"), ("CISCO-CVP-MIB", "ccvpVxmlAggReptEvents"), ("CISCO-CVP-MIB", "ccvpVxmlAggIcmLookupReqs"), ("CISCO-CVP-MIB", "ccvpVxmlAggIcmLookupResp"), ("CISCO-CVP-MIB", "ccvpVxmlAggIcmLookupSuccess"), ("CISCO-CVP-MIB", "ccvpVxmlAggIcmLookupFails"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccvpVxmlTableGroup = ccvpVxmlTableGroup.setStatus('current')
if mibBuilder.loadTexts: ccvpVxmlTableGroup.setDescription('The voice XML service table group defines the Customer Voice Portal voice XML table objects.')
ccvpCvpNotificationInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 2, 12)).setObjects(("CISCO-CVP-MIB", "ccvpEventMessageId"), ("CISCO-CVP-MIB", "ccvpEventHostName"), ("CISCO-CVP-MIB", "ccvpEventAppName"), ("CISCO-CVP-MIB", "ccvpEventMessageName"), ("CISCO-CVP-MIB", "ccvpEventState"), ("CISCO-CVP-MIB", "ccvpEventSeverity"), ("CISCO-CVP-MIB", "ccvpEventTimestamp"), ("CISCO-CVP-MIB", "ccvpEventText"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccvpCvpNotificationInfoGroup = ccvpCvpNotificationInfoGroup.setStatus('current')
if mibBuilder.loadTexts: ccvpCvpNotificationInfoGroup.setDescription('The CVP notification info group defines the Customer Voice Portal notification objects.')
ccvpCvpEventsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 2, 13)).setObjects(("CISCO-CVP-MIB", "ccvpCvpEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccvpCvpEventsGroup = ccvpCvpEventsGroup.setStatus('current')
if mibBuilder.loadTexts: ccvpCvpEventsGroup.setDescription('The CVP events group defines the notification types identified in this MIB.')
ccvpSipVideoTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 2, 14)).setObjects(("CISCO-CVP-MIB", "ccvpSipRtBasicVideoOffered"), ("CISCO-CVP-MIB", "ccvpSipRtBasicVideoAnswered"), ("CISCO-CVP-MIB", "ccvpSipIntBasicVideoOffered"), ("CISCO-CVP-MIB", "ccvpSipIntBasicVideoAnswered"), ("CISCO-CVP-MIB", "ccvpSipAggBasicVideoOffered"), ("CISCO-CVP-MIB", "ccvpSipAggBasicVideoAnswered"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccvpSipVideoTableGroup = ccvpSipVideoTableGroup.setStatus('current')
if mibBuilder.loadTexts: ccvpSipVideoTableGroup.setDescription('The SIP service table group defines the customer voice portal SIP service table objects.')
ccvpIvrVideoTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 2, 15)).setObjects(("CISCO-CVP-MIB", "ccvpIvrRtFullVideoCalls"), ("CISCO-CVP-MIB", "ccvpIvrIntFullVideoCalls"), ("CISCO-CVP-MIB", "ccvpIvrAggFullVideoCalls"), ("CISCO-CVP-MIB", "ccvpIvrIntMaxFullVideoCalls"), ("CISCO-CVP-MIB", "ccvpIvrAggMaxFullVideoCalls"), ("CISCO-CVP-MIB", "ccvpIvrAggAgentPushedVideo"), ("CISCO-CVP-MIB", "ccvpIvrAggAgentInitiatedRecordings"), ("CISCO-CVP-MIB", "ccvpIvrAggAgentVCRControlInvocations"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccvpIvrVideoTableGroup = ccvpIvrVideoTableGroup.setStatus('current')
if mibBuilder.loadTexts: ccvpIvrVideoTableGroup.setDescription('The IVR service table group defines the customer voice portal interactive voice response service table objects.')
ccvpIcmVideoTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 590, 2, 2, 16)).setObjects(("CISCO-CVP-MIB", "ccvpIcmRtFullVideoCalls"), ("CISCO-CVP-MIB", "ccvpIcmRtOfferedBasicVideoCalls"), ("CISCO-CVP-MIB", "ccvpIcmRtAcceptedBasicVideoCalls"), ("CISCO-CVP-MIB", "ccvpIcmIntFullVideoCalls"), ("CISCO-CVP-MIB", "ccvpIcmIntOfferedBasicVideoCalls"), ("CISCO-CVP-MIB", "ccvpIcmIntAcceptedBasicVideoCalls"), ("CISCO-CVP-MIB", "ccvpIcmAggFullVideoCalls"), ("CISCO-CVP-MIB", "ccvpIcmAggOfferedBasicVideoCalls"), ("CISCO-CVP-MIB", "ccvpIcmAggAcceptedBasicVideoCalls"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccvpIcmVideoTableGroup = ccvpIcmVideoTableGroup.setStatus('current')
if mibBuilder.loadTexts: ccvpIcmVideoTableGroup.setDescription('The ICM table group defines the Customer Voice Portal Intelligent Contact Management interface table objects.')
mibBuilder.exportSymbols("CISCO-CVP-MIB", ccvpEventText=ccvpEventText, ciscoCvpMIB=ciscoCvpMIB, ccvpJvmRtCurrMemUsed=ccvpJvmRtCurrMemUsed, ccvpSipIntWhisperFailed=ccvpSipIntWhisperFailed, ccvpIvrRtActiveHttpReqs=ccvpIvrRtActiveHttpReqs, ccvpEventSeverity=ccvpEventSeverity, ccvpReptIntIvrEvents=ccvpReptIntIvrEvents, ccvpLicIntPortReqsDenied=ccvpLicIntPortReqsDenied, ccvpIvrIntHttpReqs=ccvpIvrIntHttpReqs, ccvpIcmTable=ccvpIcmTable, ccvpServiceType=ccvpServiceType, ccvpSipIntBasicVideoAnswered=ccvpSipIntBasicVideoAnswered, ccvpSipTable=ccvpSipTable, ccvpVxmlTableGroup=ccvpVxmlTableGroup, ccvpThreadPoolInfo=ccvpThreadPoolInfo, ccvpLicIntPortReqs=ccvpLicIntPortReqs, ccvpServiceTable=ccvpServiceTable, ccvpSipIntAvgLatency2=ccvpSipIntAvgLatency2, ccvpIvrAggNewCalls=ccvpIvrAggNewCalls, ccvpReptAggSipEvents=ccvpReptAggSipEvents, ccvpNotificationInfo=ccvpNotificationInfo, ccvpIvrAggMaxHttpReqs=ccvpIvrAggMaxHttpReqs, ccvpIvrRtFullVideoCalls=ccvpIvrRtFullVideoCalls, ccvpReptAggDatabaseWrites=ccvpReptAggDatabaseWrites, ccvpReptTableGroup=ccvpReptTableGroup, ccvpVxmlIntIcmLookupReqs=ccvpVxmlIntIcmLookupReqs, ccvpH323IntAvgNewCallLatency=ccvpH323IntAvgNewCallLatency, ccvpIcmRtActiveH323CallLegs=ccvpIcmRtActiveH323CallLegs, CcvpServiceStatus=CcvpServiceStatus, ccvpIcmAggH323CallLegs=ccvpIcmAggH323CallLegs, ccvpSipAggBasicVideoAnswered=ccvpSipAggBasicVideoAnswered, ccvpIvrIntCallsFinished=ccvpIvrIntCallsFinished, ccvpIcmAggIcmLookupReqs=ccvpIcmAggIcmLookupReqs, ccvpJvmRtCurrMemAvail=ccvpJvmRtCurrMemAvail, ccvpSipEntry=ccvpSipEntry, ccvpServerName=ccvpServerName, ccvpLicRtPortsAvail=ccvpLicRtPortsAvail, ccvpH323IntArrivalRate=ccvpH323IntArrivalRate, ccvpServices=ccvpServices, ccvpJvmRtMaxMemAvail=ccvpJvmRtMaxMemAvail, ccvpIcmEntry=ccvpIcmEntry, ccvpServiceIndex=ccvpServiceIndex, ccvpIcmRtActiveICMLookupReqs=ccvpIcmRtActiveICMLookupReqs, ccvpServiceInfo=ccvpServiceInfo, ccvpIvrTableGroup=ccvpIvrTableGroup, ccvpSipAggFailedXferPre=ccvpSipAggFailedXferPre, ccvpSipIntPostCallAnswered=ccvpSipIntPostCallAnswered, ccvpVxmlAggReptEvents=ccvpVxmlAggReptEvents, ccvpEventMessageId=ccvpEventMessageId, ccvpH323Entry=ccvpH323Entry, ciscoCvpMIBGroups=ciscoCvpMIBGroups, ccvpIcmIntNewCalls=ccvpIcmIntNewCalls, ccvpSupportToolsURL=ccvpSupportToolsURL, ccvpH323Table=ccvpH323Table, ccvpReptIntSipEvents=ccvpReptIntSipEvents, ccvpVxmlAggIcmLookupResp=ccvpVxmlAggIcmLookupResp, ccvpH323IntPromptsNotFound=ccvpH323IntPromptsNotFound, ccvpVxmlAggIcmLookupFails=ccvpVxmlAggIcmLookupFails, ccvpVxmlIntIcmLookupSuccess=ccvpVxmlIntIcmLookupSuccess, ccvpDescription=ccvpDescription, ccvpVxmlIntReptEvents=ccvpVxmlIntReptEvents, ccvpJvmInfo=ccvpJvmInfo, ccvpSipAggNewCalls=ccvpSipAggNewCalls, ccvpServiceIntLastUpdate=ccvpServiceIntLastUpdate, ccvpLicAggPortReqsDenied=ccvpLicAggPortReqsDenied, ccvpIcmAggOfferedBasicVideoCalls=ccvpIcmAggOfferedBasicVideoCalls, ccvpStartTime=ccvpStartTime, ccvpSipIntFailedXferPre=ccvpSipIntFailedXferPre, ccvpIcmIntAcceptedBasicVideoCalls=ccvpIcmIntAcceptedBasicVideoCalls, ciscoCvpMIBNotifs=ciscoCvpMIBNotifs, ccvpIcmRtActiveCalls=ccvpIcmRtActiveCalls, ccvpReptIntDatabaseWrites=ccvpReptIntDatabaseWrites, ccvpSipRtActiveCalls=ccvpSipRtActiveCalls, ccvpSipIntConnectsRcv=ccvpSipIntConnectsRcv, ccvpH323IntMaxXferToAlert=ccvpH323IntMaxXferToAlert, ccvpIcmTableGroup=ccvpIcmTableGroup, ccvpIvrIntAvgHttpReqRate=ccvpIvrIntAvgHttpReqRate, ccvpSipRtBasicVideoAnswered=ccvpSipRtBasicVideoAnswered, ccvpH323IntAvgXferToAnswer=ccvpH323IntAvgXferToAnswer, ccvpCvpNotificationInfoGroup=ccvpCvpNotificationInfoGroup, ccvpSipIntNewCalls=ccvpSipIntNewCalls, ccvpIvrIntMinCallLatency=ccvpIvrIntMinCallLatency, ccvpIvrAggAgentPushedVideo=ccvpIvrAggAgentPushedVideo, ccvpSipAggAvgLatency2=ccvpSipAggAvgLatency2, ccvpIcmIntIcmLookupReqs=ccvpIcmIntIcmLookupReqs, ccvpEventTimestamp=ccvpEventTimestamp, ccvpServiceIntPeriod=ccvpServiceIntPeriod, ccvpTPoolRtRunningThreads=ccvpTPoolRtRunningThreads, ccvpTPoolRtIdleThreads=ccvpTPoolRtIdleThreads, ccvpSipIntGreetingFailed=ccvpSipIntGreetingFailed, ccvpSipIntGreetingAnswered=ccvpSipIntGreetingAnswered, ccvpH323IntCallsFinished=ccvpH323IntCallsFinished, ccvpIcmIntFullVideoCalls=ccvpIcmIntFullVideoCalls, ccvpLicAggMaxPortsInUse=ccvpLicAggMaxPortsInUse, ccvpReptAggVxmlEvents=ccvpReptAggVxmlEvents, ccvpOpsConsoleURL=ccvpOpsConsoleURL, ccvpGeneralInfoGroup=ccvpGeneralInfoGroup, ccvpIcmIntH323CallLegs=ccvpIcmIntH323CallLegs, ccvpServiceEntry=ccvpServiceEntry, ccvpLicensingInfo=ccvpLicensingInfo, CcvpServiceType=CcvpServiceType, ccvpVxmlAggIcmLookupSuccess=ccvpVxmlAggIcmLookupSuccess, ccvpVxmlEntry=ccvpVxmlEntry, ccvpSipAggAvgLatency1=ccvpSipAggAvgLatency1, ccvpSipIntAvgLatency1=ccvpSipIntAvgLatency1, ccvpIvrIntFullVideoCalls=ccvpIvrIntFullVideoCalls, ccvpIcmRtOfferedBasicVideoCalls=ccvpIcmRtOfferedBasicVideoCalls, ccvpSipAggFailedXferPost=ccvpSipAggFailedXferPost, PYSNMP_MODULE_ID=ciscoCvpMIB, ccvpIcmRtActiveVRUCallLegs=ccvpIcmRtActiveVRUCallLegs, ccvpIvrIntNewCalls=ccvpIvrIntNewCalls, ccvpIvrAggMaxFullVideoCalls=ccvpIvrAggMaxFullVideoCalls, ccvpServiceStatus=ccvpServiceStatus, ccvpH323IntNewCalls=ccvpH323IntNewCalls, ccvpIvrAggMaxActiveCalls=ccvpIvrAggMaxActiveCalls, ccvpLicIntLastUpdate=ccvpLicIntLastUpdate, ccvpVxmlRtActiveSessions=ccvpVxmlRtActiveSessions, ccvpThreadPoolInfoGroup=ccvpThreadPoolInfoGroup, ccvpIcmAggFullVideoCalls=ccvpIcmAggFullVideoCalls, ccvpReptIntVxmlEvents=ccvpReptIntVxmlEvents, ccvpVxmlAggIcmLookupReqs=ccvpVxmlAggIcmLookupReqs, ccvpVxmlIntIcmLookupFails=ccvpVxmlIntIcmLookupFails, ccvpVxmlIntIcmLookupResp=ccvpVxmlIntIcmLookupResp, ccvpH323RtCallsInProgress=ccvpH323RtCallsInProgress, ccvpVersion=ccvpVersion, ccvpIcmAggCalls=ccvpIcmAggCalls, ccvpH323IntTransferRate=ccvpH323IntTransferRate, ccvpSipRtTotalCallLegs=ccvpSipRtTotalCallLegs, ciscoCvpMIBCompliances=ciscoCvpMIBCompliances, ccvpIvrIntAvgCallLatency=ccvpIvrIntAvgCallLatency, ccvpReptTable=ccvpReptTable, ccvpReptAggIvrEvents=ccvpReptAggIvrEvents, ccvpH323IntNotTransferred=ccvpH323IntNotTransferred, ccvpTimeZoneName=ccvpTimeZoneName, ccvpIvrTable=ccvpIvrTable, ccvpLicAggPortReqs=ccvpLicAggPortReqs, ccvpH323IntAvgCpuUsage=ccvpH323IntAvgCpuUsage, ccvpIcmRtActiveSIPCallLegs=ccvpIcmRtActiveSIPCallLegs, ccvpIvrIntMaxCallLatency=ccvpIvrIntMaxCallLatency, ccvpIvrEntry=ccvpIvrEntry, ccvpVxmlAggSessions=ccvpVxmlAggSessions, ccvpLicPortUsageCritical=ccvpLicPortUsageCritical, ccvpIcmIntVruCallLegs=ccvpIcmIntVruCallLegs, ciscoCvpMIBObjects=ciscoCvpMIBObjects, ccvpH323IntMaxNewCallLatency=ccvpH323IntMaxNewCallLatency, ccvpCvpEvent=ccvpCvpEvent, ccvpJvmInfoGroup=ccvpJvmInfoGroup, ccvpLicRtPortsInUse=ccvpLicRtPortsInUse, ccvpIvrAggAgentInitiatedRecordings=ccvpIvrAggAgentInitiatedRecordings, ciscoCcvpMIBComplianceRev2=ciscoCcvpMIBComplianceRev2, ccvpLicIntMaxPortsInUse=ccvpLicIntMaxPortsInUse, ccvpIcmRtFullVideoCalls=ccvpIcmRtFullVideoCalls, ccvpReptEntry=ccvpReptEntry, ccvpIvrIntMaxFullVideoCalls=ccvpIvrIntMaxFullVideoCalls, ccvpH323IntMaxCpuUsage=ccvpH323IntMaxCpuUsage, ccvpH323IntAvgXferToAlert=ccvpH323IntAvgXferToAlert, ccvpSipIntFailedXferPost=ccvpSipIntFailedXferPost, ccvpEventState=ccvpEventState, ccvpSipVideoTableGroup=ccvpSipVideoTableGroup, ccvpJvmRtMaxThreadsUsed=ccvpJvmRtMaxThreadsUsed, ccvpIvrAggHttpReqs=ccvpIvrAggHttpReqs, ccvpH323IntRedirected=ccvpH323IntRedirected, ccvpJvmRtCurrThreadsInUse=ccvpJvmRtCurrThreadsInUse, ccvpVxmlRtActiveIcmLookups=ccvpVxmlRtActiveIcmLookups, ccvpGeneralInfo=ccvpGeneralInfo, ccvpLicensingInfoGroup=ccvpLicensingInfoGroup, ccvpTimeZoneOffsetHours=ccvpTimeZoneOffsetHours, ccvpIcmIntOfferedBasicVideoCalls=ccvpIcmIntOfferedBasicVideoCalls, ccvpH323TableGroup=ccvpH323TableGroup, ccvpIcmRtAcceptedBasicVideoCalls=ccvpIcmRtAcceptedBasicVideoCalls, ccvpIcmVideoTableGroup=ccvpIcmVideoTableGroup, ccvpEventHostName=ccvpEventHostName, ccvpJvmRtMaxMemUsed=ccvpJvmRtMaxMemUsed, ccvpEnableNotifications=ccvpEnableNotifications, ccvpTimeZoneOffsetMinutes=ccvpTimeZoneOffsetMinutes, ccvpSipIntWhisperAnswered=ccvpSipIntWhisperAnswered, ccvpTPoolRtMaxThreadsUsed=ccvpTPoolRtMaxThreadsUsed, ccvpIvrVideoTableGroup=ccvpIvrVideoTableGroup, ccvpTPoolRtCoreThreads=ccvpTPoolRtCoreThreads, ccvpJvmRtUpTime=ccvpJvmRtUpTime, ccvpIvrRtActiveCalls=ccvpIvrRtActiveCalls, ccvpIvrIntMaxActiveHttpReqs=ccvpIvrIntMaxActiveHttpReqs, ccvpIcmAggVruCallLegs=ccvpIcmAggVruCallLegs, CcvpIndex=CcvpIndex, ccvpSipTableGroup=ccvpSipTableGroup, ccvpLicIntPeriod=ccvpLicIntPeriod, ccvpVxmlIntSessions=ccvpVxmlIntSessions, ccvpSipRtBasicVideoOffered=ccvpSipRtBasicVideoOffered, ccvpServiceTableGroup=ccvpServiceTableGroup, ccvpLicRtPortState=ccvpLicRtPortState, ccvpSipAggConnectsRcv=ccvpSipAggConnectsRcv, ccvpCvpEventsGroup=ccvpCvpEventsGroup, ccvpIcmIntSipCallLegs=ccvpIcmIntSipCallLegs, ccvpH323IntCriticalMedia=ccvpH323IntCriticalMedia, ccvpIvrAggAgentVCRControlInvocations=ccvpIvrAggAgentVCRControlInvocations, ccvpH323IntMaxXferToAnswer=ccvpH323IntMaxXferToAnswer, ccvpServiceName=ccvpServiceName, ccvpLicPortUsageWarning=ccvpLicPortUsageWarning, ccvpIvrAggFullVideoCalls=ccvpIvrAggFullVideoCalls, ccvpIvrIntMaxActiveCalls=ccvpIvrIntMaxActiveCalls, ccvpH323RtMemoryInUse=ccvpH323RtMemoryInUse, ccvpTPoolRtMaxThreadsAvail=ccvpTPoolRtMaxThreadsAvail, ccvpH323IntTransferred=ccvpH323IntTransferred, ccvpEventAppName=ccvpEventAppName, ciscoCvpMIBConform=ciscoCvpMIBConform, ccvpSipAggBasicVideoOffered=ccvpSipAggBasicVideoOffered, ccvpLicIntAvgPortReqs=ccvpLicIntAvgPortReqs, ccvpIcmAggAcceptedBasicVideoCalls=ccvpIcmAggAcceptedBasicVideoCalls, ccvpSipIntBasicVideoOffered=ccvpSipIntBasicVideoOffered, ccvpIvrIntMaxHttpReqRate=ccvpIvrIntMaxHttpReqRate, ccvpEventMessageName=ccvpEventMessageName, ciscoCcvpMIBComplianceRev1=ciscoCcvpMIBComplianceRev1, ccvpLicAggAvgPortReqs=ccvpLicAggAvgPortReqs, ccvpVxmlTable=ccvpVxmlTable, ccvpIcmAggSipCallLegs=ccvpIcmAggSipCallLegs)
