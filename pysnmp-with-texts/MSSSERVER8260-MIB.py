#
# PySNMP MIB module MSSSERVER8260-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MSSSERVER8260-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:15:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
proElsSubSysEventMsg, = mibBuilder.importSymbols("PROTEON-MIB", "proElsSubSysEventMsg")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, iso, Counter64, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Bits, IpAddress, ModuleIdentity, Integer32, enterprises, MibIdentifier, NotificationType, NotificationType, TimeTicks, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "iso", "Counter64", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Bits", "IpAddress", "ModuleIdentity", "Integer32", "enterprises", "MibIdentifier", "NotificationType", "NotificationType", "TimeTicks", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmProd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6))
nwaysMSS = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118))
mssServer8260 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 3))
mss8260Prod = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 3, 1))
mss8260PCAdapter = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 3, 2))
mss8260ResetFlag = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 118, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noreset", 1), ("reboot", 2))).clone('noreset')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mss8260ResetFlag.setStatus('mandatory')
if mibBuilder.loadTexts: mss8260ResetFlag.setDescription('The flag that controls the reset process in this blade. This variable shall assume a value of noreset(1) in the absence of a request for a reset from the management application. This variable shall assume a value of reboot(2) if the management application requests that this blade execute a complete hardware reboot which reloads the code load from storage.')
mss8260DRAMinstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 118, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mss8260DRAMinstalled.setStatus('mandatory')
if mibBuilder.loadTexts: mss8260DRAMinstalled.setDescription('The total amount of dynamic RAM installed on this blade. The amount is in units of megabytes.')
mss8260NotifyStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 118, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mss8260NotifyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mss8260NotifyStatus.setDescription('The status of the trap reporting service in this blade. This variable shall assume a value of enabled(1) if this blade is permitted to send traps. This variable shall assume a value of disabled(2) if this blade is prohibited from sending traps.')
mss8260TempThresholdStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 118, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("shutdown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mss8260TempThresholdStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mss8260TempThresholdStatus.setDescription('The status of the temperature in this blade. This variable shall assume a value of normal(1) if the temperature is within proper operating range for this blade. This variable shall assume a value of warning(2) if the temperature becomes elevated but this blade can still operate. This variable shall assume a value of shutdown(3) if the temperature is beyond the operating limits of this blade.')
mss8260PCAdapNumSlot = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 118, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mss8260PCAdapNumSlot.setStatus('mandatory')
if mibBuilder.loadTexts: mss8260PCAdapNumSlot.setDescription('The number of PC adapter slots available for this blade.')
mss8260PCAdapTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 118, 3, 2, 2), )
if mibBuilder.loadTexts: mss8260PCAdapTable.setStatus('mandatory')
if mibBuilder.loadTexts: mss8260PCAdapTable.setDescription('A table of PC adapters entries. The number of entries is given by the value of mss8260PCAdapNumSlot.')
mss8260PCAdapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 118, 3, 2, 2, 1), ).setIndexNames((0, "MSSSERVER8260-MIB", "mss8260PCAdapSlotNum"))
if mibBuilder.loadTexts: mss8260PCAdapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mss8260PCAdapEntry.setDescription('A PC adapter entry containing objects to describe the operational aspects of the PC adapter on this blade.')
mss8260PCAdapSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mss8260PCAdapSlotNum.setStatus('mandatory')
if mibBuilder.loadTexts: mss8260PCAdapSlotNum.setDescription('The relative slot location at which the adapter is attached to this blade. Slots are numbered from 1 to 2 (bottom to top) when facing this blade. This variable serves as the index for the mss8260PCAdapTable.')
mss8260PCAdapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 3, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("harddrive", 2), ("modem", 3), ("notPresent", 4), ("flashcard", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mss8260PCAdapType.setStatus('mandatory')
if mibBuilder.loadTexts: mss8260PCAdapType.setDescription('The type of PC adapter that is inserted into this slot. The variable shall assume a value of unknown(1) if the adapter in the slot is not supported by this blade. The variable shall assume a value of harddrive(2) if the slot contains a PC disk drive. The variable shall assume a value of modem(3) if the slot contains a PC data/fax/voice modem. The variable shall assume a value of flashcard(5) if the slot contains a PC flash card. This variable shall assume a value of notPresent(4), when a PC card is not plugged into the corrisponding slot. ')
mssServer8260ELSTrapV2 = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 118, 3) + (0,2)).setObjects(("PROTEON-MIB", "proElsSubSysEventMsg"))
if mibBuilder.loadTexts: mssServer8260ELSTrapV2.setDescription('The trap announces an Event Logging System (ELS) event occurred. The variable proElsSubSysEventMsg provides a textual description of the event. The variable is in one of two formats. If ELS timestamping is enabled, the format is hr:min:sec subsys_name.event_num: message_text. An example would be 09:32:56 IP.008: no rte 9.7.1.8 -> 9.7.4.3 dsc. If ELS timestamping is disabled, the format is subsys_name.event_num: message_text. An example would be IP.008: no rte 9.7.1.8 -> 9.7.4.3 dsc.')
mss8260PCAdapTypeChg = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 118, 3) + (0,3)).setObjects(("MSSSERVER8260-MIB", "mss8260PCAdapType"))
if mibBuilder.loadTexts: mss8260PCAdapTypeChg.setDescription('The trap announces a change in the type of PC card. It shall be sent if the value of the mss8260PCAdapType changes and mss8260NotifyStatus has a value of enabled(1).')
mss8260TempThresholdChg = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 118, 3) + (0,4)).setObjects(("MSSSERVER8260-MIB", "mss8260TempThresholdStatus"))
if mibBuilder.loadTexts: mss8260TempThresholdChg.setDescription('The trap announces a change in the temperature of the blade. It shall be sent if the value of the mss8260TempThreshold changes and mss8260NotifyStatus has a value of enabled(1).')
mibBuilder.exportSymbols("MSSSERVER8260-MIB", mss8260Prod=mss8260Prod, mss8260PCAdapSlotNum=mss8260PCAdapSlotNum, nwaysMSS=nwaysMSS, mss8260NotifyStatus=mss8260NotifyStatus, mss8260TempThresholdStatus=mss8260TempThresholdStatus, mss8260PCAdapTable=mss8260PCAdapTable, mss8260PCAdapEntry=mss8260PCAdapEntry, mss8260PCAdapType=mss8260PCAdapType, mssServer8260ELSTrapV2=mssServer8260ELSTrapV2, mss8260DRAMinstalled=mss8260DRAMinstalled, mss8260PCAdapTypeChg=mss8260PCAdapTypeChg, mss8260TempThresholdChg=mss8260TempThresholdChg, mss8260ResetFlag=mss8260ResetFlag, mss8260PCAdapNumSlot=mss8260PCAdapNumSlot, mssServer8260=mssServer8260, mss8260PCAdapter=mss8260PCAdapter, ibm=ibm, ibmProd=ibmProd)
