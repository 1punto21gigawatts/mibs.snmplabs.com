#
# PySNMP MIB module RBN-PVC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RBN-PVC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:53:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
rbnMgmt, = mibBuilder.importSymbols("RBN-SMI", "rbnMgmt")
RbnSlot, RbnPort, RbnCircuitHandle, RbnVidOrUntagged = mibBuilder.importSymbols("RBN-TC", "RbnSlot", "RbnPort", "RbnCircuitHandle", "RbnVidOrUntagged")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, IpAddress, Bits, TimeTicks, NotificationType, Unsigned32, ModuleIdentity, ObjectIdentity, Counter64, Integer32, MibIdentifier, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "IpAddress", "Bits", "TimeTicks", "NotificationType", "Unsigned32", "ModuleIdentity", "ObjectIdentity", "Counter64", "Integer32", "MibIdentifier", "iso")
TextualConvention, RowStatus, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString", "TruthValue")
rbnPvcMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2352, 2, 7))
rbnPvcMib.setRevisions(('2007-10-29 17:00', '2004-05-21 17:00', '2003-03-17 17:00', '2002-12-20 17:00', '2002-11-13 00:00', '2002-05-23 17:00', '2001-05-09 17:00', '2001-02-10 17:00', '2000-08-30 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rbnPvcMib.setRevisionsDescriptions(('Added new encaps type to TEXTUAL-CONVENTION RbnAtmEncapsulation.', 'Added new encaps type to TEXTUAL-CONVENTION RbnFrameRelayEncapsulation. Added new encaps type to TEXTUAL-CONVENTION RbnAtmEncapsulation.', 'The following changes were made to manage the configuration of 802.1Q PVCs on Ethernet ports, ATM circuits and Frame Relay circuits: Updated MODULE-IDENTITY. Added TEXTUAL-CONVENTION RbnDot1qEncapsulation. Added three new tables: rbnDot1qPvcOnEthConfigTable rbnDot1qPvcOnAtmConfigTable rbnDot1qPvcOnFrConfigTable Added new compliance module and groups: rbnPvcCompliance3 rbnDot1qPvcOnEthGroup rbnDot1qPvcOnAtmGroup rbnDot1qPvcOnFrGroup', 'To support categorization of circuit types, to provide an object to link entries in the rbnAtmPvcConfigTable and the rbnFrameRelayPvcConfigTable to the rbnBindTable from the RBN-BIND-MIB, and to provide the capability to clear subscribers from circuits, witness the following changes: Updated MODULE-IDENTITY. Added TEXTUAL-CONVENTION RbnPvcCircuitType. Added new objects to rbnAtmPvcConfigTable: rbnAtmPvcCircuitType rbnAtmPvcCircuitHandle rbnAtmPvcClearCircuit Added new objects to rbnFrameRelayPvcConfigTable: rbnFrameRelayPvcCircuitType rbnFrameRelayPvcCircuitHandle rbnFrameRelayPvcClearCircuit Added new MODULE-COMPLIANCE and OBJECT-GROUPs: rbnPvcCompliance2 rbnAtmPvcGroup2 rbnFrameRelayPvcGroup2', 'Moved RbnSlot and RbnPort definitions to Redback Textual Convention MIB (RBN-TC).', 'Updated CONTACT-INFO clause in MODULE-IDENTITY. Added new CLIPs encaps type to the RbnFrameRelayEncapsulation and RbnAtmEncapsulation TEXTUAL-CONVENTION definitions.', 'Updated range on RbnSlot, RbnPort, and rbnAtmPvcVpi.', 'Removed all references to padding which was an obsoleted attribute of PVC circuits.', 'Initial version.',))
if mibBuilder.loadTexts: rbnPvcMib.setLastUpdated('200710291700Z')
if mibBuilder.loadTexts: rbnPvcMib.setOrganization('Redback Networks, Inc.')
if mibBuilder.loadTexts: rbnPvcMib.setContactInfo(' RedBack Networks, Inc. Postal: 300 Holger Way San Jose, CA 95134-1362 USA Phone: +1 408 750 5000 Fax: +1 408 750 5599 E-mail: mib-info@redback.com')
if mibBuilder.loadTexts: rbnPvcMib.setDescription('Defines the objects necessary to support the management of ATM, Frame Relay and IEEE 802.1Q permanent virtual circuits (PVC).')
rbnPvcMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1))
rbnPvcMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 7, 2))
rbnPvcMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 7, 3))
class RbnFrameRelayEncapsulation(TextualConvention, Integer32):
    description = 'The encapsulation types supported by frame relay.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("auto1490", 1), ("bridge1490", 2), ("multi1490", 3), ("route1490", 4), ("l2tp", 5), ("l2tpVcMuxed", 6), ("ppp", 7), ("pppAuto", 8), ("pppOverEthernet", 9), ("dot1q1490", 10), ("clips1490", 11), ("pppAutoNopoe", 12))

class RbnAtmEncapsulation(TextualConvention, Integer32):
    description = 'The encapsulation types supported by ATM.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))
    namedValues = NamedValues(("unknown", 0), ("auto1483", 1), ("bridge1483", 2), ("multi1483", 3), ("route1483", 4), ("l2tp", 5), ("l2tpVcMuxed", 6), ("ppp", 7), ("pppAuto", 8), ("pppOverEthernet", 9), ("pppSerial", 10), ("pppNlpid", 11), ("pppLlc", 12), ("pppVcMuxed", 13), ("raw", 14), ("dot1q1483", 15), ("clips1483", 16), ("pppAutoNopoe", 17), ("cell", 18))

class RbnDot1qEncapsulation(TextualConvention, Integer32):
    description = 'The encapsulation types supported by 802.1Q PVC.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("unknown", 0), ("ipOverEthernet", 1), ("dot1qMulti", 2), ("pppOverEthernet", 3), ("dot1qRaw", 4), ("dot1qClips", 5), ("dot1qTunnelMulti", 6), ("dot1qTunnelPppOverEthernet", 7), ("dot1qTunnelRaw", 8), ("dot1qTunnelClips", 9))

class RbnPvcCircuitType(TextualConvention, Integer32):
    description = 'The PVC circuit type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("explicit", 1), ("explicitRange", 2), ("onDemandRange", 3), ("protection", 4))

rbnAtmPvcConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 1), )
if mibBuilder.loadTexts: rbnAtmPvcConfigTable.setStatus('current')
if mibBuilder.loadTexts: rbnAtmPvcConfigTable.setDescription('This table contains the objects which identify and configure ATM PVCs.')
rbnAtmPvcConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 1, 1), ).setIndexNames((0, "RBN-PVC-MIB", "rbnAtmPvcSlot"), (0, "RBN-PVC-MIB", "rbnAtmPvcPort"), (0, "RBN-PVC-MIB", "rbnAtmPvcVpi"), (0, "RBN-PVC-MIB", "rbnAtmPvcVci"))
if mibBuilder.loadTexts: rbnAtmPvcConfigEntry.setStatus('current')
if mibBuilder.loadTexts: rbnAtmPvcConfigEntry.setDescription('A conceptual row in the rbnAtmPvcConfigTable.')
rbnAtmPvcSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 1, 1, 1), RbnSlot())
if mibBuilder.loadTexts: rbnAtmPvcSlot.setStatus('current')
if mibBuilder.loadTexts: rbnAtmPvcSlot.setDescription('The chassis slot number')
rbnAtmPvcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 1, 1, 2), RbnPort())
if mibBuilder.loadTexts: rbnAtmPvcPort.setStatus('current')
if mibBuilder.loadTexts: rbnAtmPvcPort.setDescription('The port number')
rbnAtmPvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: rbnAtmPvcVpi.setStatus('current')
if mibBuilder.loadTexts: rbnAtmPvcVpi.setDescription('The Virtual Path Identifier for the PVC.')
rbnAtmPvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: rbnAtmPvcVci.setStatus('current')
if mibBuilder.loadTexts: rbnAtmPvcVci.setDescription('The Virtual Channel Identifier for the PVC.')
rbnAtmPvcProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnAtmPvcProfileName.setStatus('current')
if mibBuilder.loadTexts: rbnAtmPvcProfileName.setDescription('The profile name to use with the PVC.')
rbnAtmPvcEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 1, 1, 6), RbnAtmEncapsulation()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnAtmPvcEncapsulation.setStatus('current')
if mibBuilder.loadTexts: rbnAtmPvcEncapsulation.setDescription('The encapsulation to use with the PVC.')
rbnAtmPvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnAtmPvcRowStatus.setStatus('current')
if mibBuilder.loadTexts: rbnAtmPvcRowStatus.setDescription('The row status for creating, modifying, or deleting an entry in the table.')
rbnAtmPvcCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 1, 1, 9), RbnPvcCircuitType().clone('explicit')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnAtmPvcCircuitType.setStatus('current')
if mibBuilder.loadTexts: rbnAtmPvcCircuitType.setDescription("The PVC circuit type. With respect to this mib object, only those entries whose rbnAtmPvcCircuitType has a value 'explicit' may be removed by setting rbnAtmPvcRowStatus equal to 'destroy'. A set operation with rbnAtmPvcRowStatus equal to 'destroy' on any row with rbnAtmPvcCircuitType not equal to 'explicit' will result in an INCONSISTENT_VALUE_ERROR.")
rbnAtmPvcCircuitHandle = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 1, 1, 10), RbnCircuitHandle()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnAtmPvcCircuitHandle.setStatus('current')
if mibBuilder.loadTexts: rbnAtmPvcCircuitHandle.setDescription('This object is used internally to uniquely identify a circuit. The value of this object may be used to correlate entries with those in the rbnBindTable defined in the RBN-BIND-MIB.')
rbnAtmPvcClearCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnAtmPvcClearCircuit.setStatus('current')
if mibBuilder.loadTexts: rbnAtmPvcClearCircuit.setDescription('When this object is true(1), the system will clear active subscriber sessions on the specified circuit. When false(2), there is no action taken. This object can only be written when the conceptual row exists. When this object is set to true(1) and the encapsulation of the circuit is bridged or routed, e.g. bridge1483(2) or route1483(4), subscribers will re-authenticate after being cleared.')
rbnFrameRelayPvcConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 2), )
if mibBuilder.loadTexts: rbnFrameRelayPvcConfigTable.setStatus('current')
if mibBuilder.loadTexts: rbnFrameRelayPvcConfigTable.setDescription('This table contains the objects which identify and configure Frame Relay PVCs.')
rbnFrameRelayPvcConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 2, 1), ).setIndexNames((0, "RBN-PVC-MIB", "rbnFrameRelayPvcSlot"), (0, "RBN-PVC-MIB", "rbnFrameRelayPvcPort"), (0, "RBN-PVC-MIB", "rbnFrameRelayPvcChannel"), (0, "RBN-PVC-MIB", "rbnFrameRelayPvcDLCI"))
if mibBuilder.loadTexts: rbnFrameRelayPvcConfigEntry.setStatus('current')
if mibBuilder.loadTexts: rbnFrameRelayPvcConfigEntry.setDescription('A conceptual row in the rbnFrameRelayPvcConfigTable.')
rbnFrameRelayPvcSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 2, 1, 1), RbnSlot())
if mibBuilder.loadTexts: rbnFrameRelayPvcSlot.setStatus('current')
if mibBuilder.loadTexts: rbnFrameRelayPvcSlot.setDescription('The chassis slot number')
rbnFrameRelayPvcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 2, 1, 2), RbnPort())
if mibBuilder.loadTexts: rbnFrameRelayPvcPort.setStatus('current')
if mibBuilder.loadTexts: rbnFrameRelayPvcPort.setDescription('The port number')
rbnFrameRelayPvcChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: rbnFrameRelayPvcChannel.setStatus('current')
if mibBuilder.loadTexts: rbnFrameRelayPvcChannel.setDescription('The channel number')
rbnFrameRelayPvcDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: rbnFrameRelayPvcDLCI.setStatus('current')
if mibBuilder.loadTexts: rbnFrameRelayPvcDLCI.setDescription('The Data Link Connection Identifier')
rbnFrameRelayPvcProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 2, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnFrameRelayPvcProfileName.setStatus('current')
if mibBuilder.loadTexts: rbnFrameRelayPvcProfileName.setDescription('The profile name to use with the PVC.')
rbnFrameRelayPvcEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 2, 1, 6), RbnFrameRelayEncapsulation()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnFrameRelayPvcEncapsulation.setStatus('current')
if mibBuilder.loadTexts: rbnFrameRelayPvcEncapsulation.setDescription('The encapsulation to use with the PVC.')
rbnFrameRelayPvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnFrameRelayPvcRowStatus.setStatus('current')
if mibBuilder.loadTexts: rbnFrameRelayPvcRowStatus.setDescription('The row status for creating, modifying, or deleting an entry in the table.')
rbnFrameRelayPvcCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 2, 1, 9), RbnPvcCircuitType().clone('explicit')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnFrameRelayPvcCircuitType.setStatus('current')
if mibBuilder.loadTexts: rbnFrameRelayPvcCircuitType.setDescription("The PVC circuit type. With respect to this mib object, only those entries whose rbnFrameRelayPvcCircuitType has a value 'explicit' may be removed by setting rbnFrameRelayPvcRowStatus equal to 'destroy'. A set operation with rbnFrameRelayPvcRowStatus equal to 'destroy' on any row with rbnFrameRelayPvcCircuitType not equal to 'explicit' will result in an INCONSISTENT_VALUE_ERROR.")
rbnFrameRelayPvcCircuitHandle = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 2, 1, 10), RbnCircuitHandle()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnFrameRelayPvcCircuitHandle.setStatus('current')
if mibBuilder.loadTexts: rbnFrameRelayPvcCircuitHandle.setDescription('This object is used internally to uniquely identify a circuit. The value of this object may be used to correlate entries with those in the rbnBindTable defined in the RBN-BIND-MIB.')
rbnFrameRelayPvcClearCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 2, 1, 11), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnFrameRelayPvcClearCircuit.setStatus('current')
if mibBuilder.loadTexts: rbnFrameRelayPvcClearCircuit.setDescription('When this object is true(1), the system will clear active subscriber sessions on the specified circuit. When false(2), there is no action taken. This object can only be written when the conceptual row exists. When this object is set to true(1) and the encapsulation of the circuit is bridged or routed, e.g. bridge1490(2) or route1490(4), subscribers will re-authenticate after being cleared.')
rbnDot1qPvcOnEthConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 3), )
if mibBuilder.loadTexts: rbnDot1qPvcOnEthConfigTable.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnEthConfigTable.setDescription('This table contains the objects which identify and configure IEEE 802.1Q PVCs on Ethernet ports.')
rbnDot1qPvcOnEthConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 3, 1), ).setIndexNames((0, "RBN-PVC-MIB", "rbnDot1qPvcOnEthSlot"), (0, "RBN-PVC-MIB", "rbnDot1qPvcOnEthPort"), (0, "RBN-PVC-MIB", "rbnDot1qPvcOnEthVlanId"))
if mibBuilder.loadTexts: rbnDot1qPvcOnEthConfigEntry.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnEthConfigEntry.setDescription('A conceptual row in the rbnDot1qPvcOnEthConfigTable.')
rbnDot1qPvcOnEthSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 3, 1, 1), RbnSlot())
if mibBuilder.loadTexts: rbnDot1qPvcOnEthSlot.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnEthSlot.setDescription('The chassis slot number.')
rbnDot1qPvcOnEthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 3, 1, 2), RbnPort())
if mibBuilder.loadTexts: rbnDot1qPvcOnEthPort.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnEthPort.setDescription('The port number.')
rbnDot1qPvcOnEthVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 3, 1, 3), RbnVidOrUntagged())
if mibBuilder.loadTexts: rbnDot1qPvcOnEthVlanId.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnEthVlanId.setDescription('IEEE 802.1Q Virtual LAN (VLAN) tag value.')
rbnDot1qPvcOnEthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnDot1qPvcOnEthRowStatus.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnEthRowStatus.setDescription('The row status for creating, modifying, or deleting an entry in the table.')
rbnDot1qPvcOnEthProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 3, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnDot1qPvcOnEthProfileName.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnEthProfileName.setDescription('The profile name to use with the PVC.')
rbnDot1qPvcOnEthEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 3, 1, 6), RbnDot1qEncapsulation()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnDot1qPvcOnEthEncapsulation.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnEthEncapsulation.setDescription('The encapsulation to use with the PVC.')
rbnDot1qPvcOnEthCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 3, 1, 7), RbnPvcCircuitType().clone('explicit')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnDot1qPvcOnEthCircuitType.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnEthCircuitType.setDescription("The PVC circuit type. With respect to this mib object, only those entries whose rbnDot1qPvcOnEthCircuitType has a value 'explicit' may be removed by setting rbnDot1qPvcOnEthRowStatus equal to 'destroy'. A set operation with rbnDot1qPvcOnEthRowStatus equal to 'destroy' on any row with rbnDot1qPvcOnEthCircuitType not equal to 'explicit' will result in an INCONSISTENT_VALUE_ERROR.")
rbnDot1qPvcOnEthCircuitHandle = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 3, 1, 8), RbnCircuitHandle()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnDot1qPvcOnEthCircuitHandle.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnEthCircuitHandle.setDescription('This object is used internally to uniquely identify a circuit. The value of this object may be used to correlate entries with those in the rbnBindTable defined in the RBN-BIND-MIB.')
rbnDot1qPvcOnEthClearCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 3, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnDot1qPvcOnEthClearCircuit.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnEthClearCircuit.setDescription('When this object is true(1), the system will clear active subscriber sessions on the specified circuit. When false(2), there is no action taken. This object can only be written when the conceptual row exists.')
rbnDot1qPvcOnAtmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 4), )
if mibBuilder.loadTexts: rbnDot1qPvcOnAtmConfigTable.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnAtmConfigTable.setDescription('This table contains the objects which identify and configure IEEE 802.1Q PVCs on ATM circuits.')
rbnDot1qPvcOnAtmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 4, 1), ).setIndexNames((0, "RBN-PVC-MIB", "rbnDot1qPvcOnAtmSlot"), (0, "RBN-PVC-MIB", "rbnDot1qPvcOnAtmPort"), (0, "RBN-PVC-MIB", "rbnDot1qPvcOnAtmVpi"), (0, "RBN-PVC-MIB", "rbnDot1qPvcOnAtmVci"), (0, "RBN-PVC-MIB", "rbnDot1qPvcOnAtmVlanId"))
if mibBuilder.loadTexts: rbnDot1qPvcOnAtmConfigEntry.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnAtmConfigEntry.setDescription('A conceptual row in the rbnDot1qPvcOnAtmConfigTable.')
rbnDot1qPvcOnAtmSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 4, 1, 1), RbnSlot())
if mibBuilder.loadTexts: rbnDot1qPvcOnAtmSlot.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnAtmSlot.setDescription('The chassis slot number.')
rbnDot1qPvcOnAtmPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 4, 1, 2), RbnPort())
if mibBuilder.loadTexts: rbnDot1qPvcOnAtmPort.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnAtmPort.setDescription('The port number.')
rbnDot1qPvcOnAtmVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: rbnDot1qPvcOnAtmVpi.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnAtmVpi.setDescription('The Virtual Path Identifier for the PVC.')
rbnDot1qPvcOnAtmVci = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: rbnDot1qPvcOnAtmVci.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnAtmVci.setDescription('The Virtual Channel Identifier for the PVC.')
rbnDot1qPvcOnAtmVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 4, 1, 5), RbnVidOrUntagged())
if mibBuilder.loadTexts: rbnDot1qPvcOnAtmVlanId.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnAtmVlanId.setDescription('IEEE 802.1Q Virtual LAN (VLAN) tag value.')
rbnDot1qPvcOnAtmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnDot1qPvcOnAtmRowStatus.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnAtmRowStatus.setDescription('The row status for creating, modifying, or deleting an entry in the table.')
rbnDot1qPvcOnAtmProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 4, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnDot1qPvcOnAtmProfileName.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnAtmProfileName.setDescription('The profile name to use with the PVC.')
rbnDot1qPvcOnAtmEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 4, 1, 8), RbnDot1qEncapsulation()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnDot1qPvcOnAtmEncapsulation.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnAtmEncapsulation.setDescription('The encapsulation to use with the PVC.')
rbnDot1qPvcOnAtmCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 4, 1, 9), RbnPvcCircuitType().clone('explicit')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnDot1qPvcOnAtmCircuitType.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnAtmCircuitType.setDescription("The PVC circuit type. With respect to this mib object, only those entries whose rbnDot1qPvcOnAtmCircuitType has a value 'explicit' may be removed by setting rbnDot1qPvcOnAtmRowStatus equal to 'destroy'. A set operation with rbnDot1qPvcOnAtmRowStatus equal to 'destroy' on any row with rbnDot1qPvcOnAtmCircuitType not equal to 'explicit' will result in an INCONSISTENT_VALUE_ERROR.")
rbnDot1qPvcOnAtmCircuitHandle = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 4, 1, 10), RbnCircuitHandle()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnDot1qPvcOnAtmCircuitHandle.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnAtmCircuitHandle.setDescription('This object is used internally to uniquely identify a circuit. The value of this object may be used to correlate entries with those in the rbnBindTable defined in the RBN-BIND-MIB.')
rbnDot1qPvcOnAtmClearCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 4, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnDot1qPvcOnAtmClearCircuit.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnAtmClearCircuit.setDescription('When this object is true(1), the system will clear active subscriber sessions on the specified circuit. When false(2), there is no action taken. This object can only be written when the conceptual row exists.')
rbnDot1qPvcOnFrConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 5), )
if mibBuilder.loadTexts: rbnDot1qPvcOnFrConfigTable.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnFrConfigTable.setDescription('This table contains the objects which identify and configure IEEE 802.1Q PVCs on ATM circuits.')
rbnDot1qPvcOnFrConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 5, 1), ).setIndexNames((0, "RBN-PVC-MIB", "rbnDot1qPvcOnFrSlot"), (0, "RBN-PVC-MIB", "rbnDot1qPvcOnFrPort"), (0, "RBN-PVC-MIB", "rbnDot1qPvcOnFrChannel"), (0, "RBN-PVC-MIB", "rbnDot1qPvcOnFrDLCI"), (0, "RBN-PVC-MIB", "rbnDot1qPvcOnFrVlanId"))
if mibBuilder.loadTexts: rbnDot1qPvcOnFrConfigEntry.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnFrConfigEntry.setDescription('A conceptual row in the rbnDot1qPvcOnFrConfigTable.')
rbnDot1qPvcOnFrSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 5, 1, 1), RbnSlot())
if mibBuilder.loadTexts: rbnDot1qPvcOnFrSlot.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnFrSlot.setDescription('The chassis slot number.')
rbnDot1qPvcOnFrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 5, 1, 2), RbnPort())
if mibBuilder.loadTexts: rbnDot1qPvcOnFrPort.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnFrPort.setDescription('The port number.')
rbnDot1qPvcOnFrChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 5, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: rbnDot1qPvcOnFrChannel.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnFrChannel.setDescription('The channel number.')
rbnDot1qPvcOnFrDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 5, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: rbnDot1qPvcOnFrDLCI.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnFrDLCI.setDescription('The Data Link Connection Identifier.')
rbnDot1qPvcOnFrVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 5, 1, 5), RbnVidOrUntagged())
if mibBuilder.loadTexts: rbnDot1qPvcOnFrVlanId.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnFrVlanId.setDescription('IEEE 802.1Q Virtual LAN (VLAN) tag value.')
rbnDot1qPvcOnFrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 5, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnDot1qPvcOnFrRowStatus.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnFrRowStatus.setDescription('The row status for creating, modifying, or deleting an entry in the table.')
rbnDot1qPvcOnFrProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 5, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnDot1qPvcOnFrProfileName.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnFrProfileName.setDescription('The profile name to use with the PVC.')
rbnDot1qPvcOnFrEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 5, 1, 8), RbnDot1qEncapsulation()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnDot1qPvcOnFrEncapsulation.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnFrEncapsulation.setDescription('The encapsulation to use with the PVC.')
rbnDot1qPvcOnFrCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 5, 1, 9), RbnPvcCircuitType().clone('explicit')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnDot1qPvcOnFrCircuitType.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnFrCircuitType.setDescription("The PVC circuit type. With respect to this mib object, only those entries whose rbnDot1qPvcOnFrCircuitType has a value 'explicit' may be removed by setting rbnDot1qPvcOnFrRowStatus equal to 'destroy'. A set operation with rbnDot1qPvcOnFrRowStatus equal to 'destroy' on any row with rbnDot1qPvcOnFrCircuitType not equal to 'explicit' will result in an INCONSISTENT_VALUE_ERROR.")
rbnDot1qPvcOnFrCircuitHandle = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 5, 1, 10), RbnCircuitHandle()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnDot1qPvcOnFrCircuitHandle.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnFrCircuitHandle.setDescription('This object is used internally to uniquely identify a circuit. The value of this object may be used to correlate entries with those in the rbnBindTable defined in the RBN-BIND-MIB.')
rbnDot1qPvcOnFrClearCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 7, 1, 5, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnDot1qPvcOnFrClearCircuit.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnFrClearCircuit.setDescription('When this object is true(1), the system will clear active subscriber sessions on the specified circuit. When false(2), there is no action taken. This object can only be written when the conceptual row exists.')
rbnPvcCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 7, 2, 1))
rbnPvcGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 7, 2, 2))
rbnPvcCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 7, 2, 1, 1)).setObjects(("RBN-PVC-MIB", "rbnAtmPvcGroup"), ("RBN-PVC-MIB", "rbnFrameRelayPvcGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnPvcCompliance = rbnPvcCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: rbnPvcCompliance.setDescription('The compliance statement for SNMP entities which implement the RBN-PVC-MIB.')
rbnPvcCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 7, 2, 1, 2)).setObjects(("RBN-PVC-MIB", "rbnAtmPvcGroup2"), ("RBN-PVC-MIB", "rbnFrameRelayPvcGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnPvcCompliance2 = rbnPvcCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: rbnPvcCompliance2.setDescription('The compliance statement for SNMP entities which implement the RBN-PVC-MIB.')
rbnPvcCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 7, 2, 1, 3)).setObjects(("RBN-PVC-MIB", "rbnAtmPvcGroup2"), ("RBN-PVC-MIB", "rbnFrameRelayPvcGroup2"), ("RBN-PVC-MIB", "rbnDot1qPvcOnEthGroup"), ("RBN-PVC-MIB", "rbnDot1qPvcOnAtmGroup"), ("RBN-PVC-MIB", "rbnDot1qPvcOnFrGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnPvcCompliance3 = rbnPvcCompliance3.setStatus('current')
if mibBuilder.loadTexts: rbnPvcCompliance3.setDescription('The compliance statement for SNMP entities which implement the RBN-PVC-MIB.')
rbnAtmPvcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 7, 2, 2, 1)).setObjects(("RBN-PVC-MIB", "rbnAtmPvcProfileName"), ("RBN-PVC-MIB", "rbnAtmPvcEncapsulation"), ("RBN-PVC-MIB", "rbnAtmPvcRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnAtmPvcGroup = rbnAtmPvcGroup.setStatus('deprecated')
if mibBuilder.loadTexts: rbnAtmPvcGroup.setDescription('the collection of objects which represent the ATM PVC.')
rbnFrameRelayPvcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 7, 2, 2, 2)).setObjects(("RBN-PVC-MIB", "rbnFrameRelayPvcProfileName"), ("RBN-PVC-MIB", "rbnFrameRelayPvcEncapsulation"), ("RBN-PVC-MIB", "rbnFrameRelayPvcRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnFrameRelayPvcGroup = rbnFrameRelayPvcGroup.setStatus('deprecated')
if mibBuilder.loadTexts: rbnFrameRelayPvcGroup.setDescription('the collection of objects which represent the FrameRelay PVC.')
rbnAtmPvcGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 7, 2, 2, 3)).setObjects(("RBN-PVC-MIB", "rbnAtmPvcProfileName"), ("RBN-PVC-MIB", "rbnAtmPvcEncapsulation"), ("RBN-PVC-MIB", "rbnAtmPvcRowStatus"), ("RBN-PVC-MIB", "rbnAtmPvcCircuitType"), ("RBN-PVC-MIB", "rbnAtmPvcCircuitHandle"), ("RBN-PVC-MIB", "rbnAtmPvcClearCircuit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnAtmPvcGroup2 = rbnAtmPvcGroup2.setStatus('current')
if mibBuilder.loadTexts: rbnAtmPvcGroup2.setDescription('The collection of objects which represent the ATM PVC.')
rbnFrameRelayPvcGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 7, 2, 2, 4)).setObjects(("RBN-PVC-MIB", "rbnFrameRelayPvcProfileName"), ("RBN-PVC-MIB", "rbnFrameRelayPvcEncapsulation"), ("RBN-PVC-MIB", "rbnFrameRelayPvcRowStatus"), ("RBN-PVC-MIB", "rbnFrameRelayPvcCircuitType"), ("RBN-PVC-MIB", "rbnFrameRelayPvcCircuitHandle"), ("RBN-PVC-MIB", "rbnFrameRelayPvcClearCircuit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnFrameRelayPvcGroup2 = rbnFrameRelayPvcGroup2.setStatus('current')
if mibBuilder.loadTexts: rbnFrameRelayPvcGroup2.setDescription('The collection of objects which represent the FrameRelay PVC.')
rbnDot1qPvcOnEthGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 7, 2, 2, 5)).setObjects(("RBN-PVC-MIB", "rbnDot1qPvcOnEthRowStatus"), ("RBN-PVC-MIB", "rbnDot1qPvcOnEthProfileName"), ("RBN-PVC-MIB", "rbnDot1qPvcOnEthEncapsulation"), ("RBN-PVC-MIB", "rbnDot1qPvcOnEthCircuitType"), ("RBN-PVC-MIB", "rbnDot1qPvcOnEthCircuitHandle"), ("RBN-PVC-MIB", "rbnDot1qPvcOnEthClearCircuit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnDot1qPvcOnEthGroup = rbnDot1qPvcOnEthGroup.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnEthGroup.setDescription('A collection of objects providing information specific to IEEE 802.1Q PVCs on Ethernet ports.')
rbnDot1qPvcOnAtmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 7, 2, 2, 6)).setObjects(("RBN-PVC-MIB", "rbnDot1qPvcOnAtmRowStatus"), ("RBN-PVC-MIB", "rbnDot1qPvcOnAtmProfileName"), ("RBN-PVC-MIB", "rbnDot1qPvcOnAtmEncapsulation"), ("RBN-PVC-MIB", "rbnDot1qPvcOnAtmCircuitType"), ("RBN-PVC-MIB", "rbnDot1qPvcOnAtmCircuitHandle"), ("RBN-PVC-MIB", "rbnDot1qPvcOnAtmClearCircuit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnDot1qPvcOnAtmGroup = rbnDot1qPvcOnAtmGroup.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnAtmGroup.setDescription('A collection of objects providing information specific to IEEE 802.1Q PVCs on ATM circuits.')
rbnDot1qPvcOnFrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 7, 2, 2, 7)).setObjects(("RBN-PVC-MIB", "rbnDot1qPvcOnFrRowStatus"), ("RBN-PVC-MIB", "rbnDot1qPvcOnFrProfileName"), ("RBN-PVC-MIB", "rbnDot1qPvcOnFrEncapsulation"), ("RBN-PVC-MIB", "rbnDot1qPvcOnFrCircuitType"), ("RBN-PVC-MIB", "rbnDot1qPvcOnFrCircuitHandle"), ("RBN-PVC-MIB", "rbnDot1qPvcOnFrClearCircuit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnDot1qPvcOnFrGroup = rbnDot1qPvcOnFrGroup.setStatus('current')
if mibBuilder.loadTexts: rbnDot1qPvcOnFrGroup.setDescription('A collection of objects providing information specific to IEEE 802.1Q PVCs on Frame Relay circuits.')
mibBuilder.exportSymbols("RBN-PVC-MIB", rbnAtmPvcCircuitHandle=rbnAtmPvcCircuitHandle, RbnPvcCircuitType=RbnPvcCircuitType, rbnDot1qPvcOnAtmClearCircuit=rbnDot1qPvcOnAtmClearCircuit, rbnAtmPvcConfigTable=rbnAtmPvcConfigTable, rbnDot1qPvcOnFrDLCI=rbnDot1qPvcOnFrDLCI, rbnFrameRelayPvcDLCI=rbnFrameRelayPvcDLCI, rbnFrameRelayPvcEncapsulation=rbnFrameRelayPvcEncapsulation, rbnDot1qPvcOnEthSlot=rbnDot1qPvcOnEthSlot, rbnDot1qPvcOnAtmEncapsulation=rbnDot1qPvcOnAtmEncapsulation, rbnDot1qPvcOnEthGroup=rbnDot1qPvcOnEthGroup, rbnDot1qPvcOnAtmGroup=rbnDot1qPvcOnAtmGroup, rbnFrameRelayPvcConfigTable=rbnFrameRelayPvcConfigTable, rbnFrameRelayPvcChannel=rbnFrameRelayPvcChannel, RbnDot1qEncapsulation=RbnDot1qEncapsulation, rbnDot1qPvcOnEthClearCircuit=rbnDot1qPvcOnEthClearCircuit, rbnDot1qPvcOnFrClearCircuit=rbnDot1qPvcOnFrClearCircuit, rbnDot1qPvcOnAtmRowStatus=rbnDot1qPvcOnAtmRowStatus, rbnDot1qPvcOnAtmVci=rbnDot1qPvcOnAtmVci, rbnAtmPvcProfileName=rbnAtmPvcProfileName, rbnDot1qPvcOnEthConfigEntry=rbnDot1qPvcOnEthConfigEntry, rbnAtmPvcCircuitType=rbnAtmPvcCircuitType, RbnAtmEncapsulation=RbnAtmEncapsulation, rbnPvcCompliance2=rbnPvcCompliance2, rbnFrameRelayPvcProfileName=rbnFrameRelayPvcProfileName, rbnDot1qPvcOnFrGroup=rbnDot1qPvcOnFrGroup, rbnDot1qPvcOnAtmConfigEntry=rbnDot1qPvcOnAtmConfigEntry, rbnDot1qPvcOnAtmCircuitHandle=rbnDot1qPvcOnAtmCircuitHandle, rbnDot1qPvcOnEthConfigTable=rbnDot1qPvcOnEthConfigTable, rbnDot1qPvcOnFrChannel=rbnDot1qPvcOnFrChannel, rbnDot1qPvcOnAtmProfileName=rbnDot1qPvcOnAtmProfileName, rbnAtmPvcConfigEntry=rbnAtmPvcConfigEntry, rbnDot1qPvcOnAtmVlanId=rbnDot1qPvcOnAtmVlanId, RbnFrameRelayEncapsulation=RbnFrameRelayEncapsulation, rbnPvcCompliance=rbnPvcCompliance, rbnFrameRelayPvcClearCircuit=rbnFrameRelayPvcClearCircuit, rbnPvcCompliance3=rbnPvcCompliance3, rbnDot1qPvcOnFrProfileName=rbnDot1qPvcOnFrProfileName, rbnAtmPvcEncapsulation=rbnAtmPvcEncapsulation, rbnDot1qPvcOnAtmVpi=rbnDot1qPvcOnAtmVpi, rbnDot1qPvcOnAtmPort=rbnDot1qPvcOnAtmPort, rbnDot1qPvcOnEthProfileName=rbnDot1qPvcOnEthProfileName, rbnFrameRelayPvcConfigEntry=rbnFrameRelayPvcConfigEntry, rbnFrameRelayPvcCircuitType=rbnFrameRelayPvcCircuitType, rbnFrameRelayPvcGroup=rbnFrameRelayPvcGroup, rbnFrameRelayPvcCircuitHandle=rbnFrameRelayPvcCircuitHandle, rbnDot1qPvcOnFrConfigTable=rbnDot1qPvcOnFrConfigTable, rbnAtmPvcGroup=rbnAtmPvcGroup, rbnPvcCompliances=rbnPvcCompliances, PYSNMP_MODULE_ID=rbnPvcMib, rbnDot1qPvcOnFrCircuitType=rbnDot1qPvcOnFrCircuitType, rbnFrameRelayPvcSlot=rbnFrameRelayPvcSlot, rbnDot1qPvcOnAtmSlot=rbnDot1qPvcOnAtmSlot, rbnDot1qPvcOnFrEncapsulation=rbnDot1qPvcOnFrEncapsulation, rbnAtmPvcVpi=rbnAtmPvcVpi, rbnFrameRelayPvcRowStatus=rbnFrameRelayPvcRowStatus, rbnPvcMIBConformance=rbnPvcMIBConformance, rbnPvcMIBNotifications=rbnPvcMIBNotifications, rbnDot1qPvcOnFrSlot=rbnDot1qPvcOnFrSlot, rbnPvcMib=rbnPvcMib, rbnAtmPvcClearCircuit=rbnAtmPvcClearCircuit, rbnDot1qPvcOnEthPort=rbnDot1qPvcOnEthPort, rbnDot1qPvcOnAtmCircuitType=rbnDot1qPvcOnAtmCircuitType, rbnDot1qPvcOnFrConfigEntry=rbnDot1qPvcOnFrConfigEntry, rbnDot1qPvcOnEthCircuitHandle=rbnDot1qPvcOnEthCircuitHandle, rbnPvcGroups=rbnPvcGroups, rbnAtmPvcSlot=rbnAtmPvcSlot, rbnAtmPvcPort=rbnAtmPvcPort, rbnPvcMIBObjects=rbnPvcMIBObjects, rbnAtmPvcVci=rbnAtmPvcVci, rbnFrameRelayPvcPort=rbnFrameRelayPvcPort, rbnDot1qPvcOnAtmConfigTable=rbnDot1qPvcOnAtmConfigTable, rbnFrameRelayPvcGroup2=rbnFrameRelayPvcGroup2, rbnDot1qPvcOnFrVlanId=rbnDot1qPvcOnFrVlanId, rbnDot1qPvcOnEthRowStatus=rbnDot1qPvcOnEthRowStatus, rbnDot1qPvcOnEthVlanId=rbnDot1qPvcOnEthVlanId, rbnDot1qPvcOnEthCircuitType=rbnDot1qPvcOnEthCircuitType, rbnDot1qPvcOnFrPort=rbnDot1qPvcOnFrPort, rbnAtmPvcGroup2=rbnAtmPvcGroup2, rbnDot1qPvcOnFrRowStatus=rbnDot1qPvcOnFrRowStatus, rbnDot1qPvcOnEthEncapsulation=rbnDot1qPvcOnEthEncapsulation, rbnAtmPvcRowStatus=rbnAtmPvcRowStatus, rbnDot1qPvcOnFrCircuitHandle=rbnDot1qPvcOnFrCircuitHandle)
