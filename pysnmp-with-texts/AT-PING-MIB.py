#
# PySNMP MIB module AT-PING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AT-PING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:30:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
DisplayStringUnsized, modules = mibBuilder.importSymbols("AT-SMI-MIB", "DisplayStringUnsized", "modules")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, iso, Unsigned32, ModuleIdentity, Integer32, Counter32, MibIdentifier, ObjectIdentity, Gauge32, Counter64, TimeTicks, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "iso", "Unsigned32", "ModuleIdentity", "Integer32", "Counter32", "MibIdentifier", "ObjectIdentity", "Gauge32", "Counter64", "TimeTicks", "IpAddress")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
ping = ModuleIdentity((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58))
ping.setRevisions(('2006-06-28 12:22',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ping.setRevisionsDescriptions(('Initial Revision',))
if mibBuilder.loadTexts: ping.setLastUpdated('200606281222Z')
if mibBuilder.loadTexts: ping.setOrganization('Allied Telesis, Inc')
if mibBuilder.loadTexts: ping.setContactInfo('http://www.alliedtelesis.com')
if mibBuilder.loadTexts: ping.setDescription('This MIB file contains definitions of managed objects for the PING module. ')
pingTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 1), )
if mibBuilder.loadTexts: pingTable.setStatus('current')
if mibBuilder.loadTexts: pingTable.setDescription('The table of ping parameters, dynamic and static.')
pingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 1, 1), ).setIndexNames((0, "AT-PING-MIB", "pingIndex"))
if mibBuilder.loadTexts: pingEntry.setStatus('current')
if mibBuilder.loadTexts: pingEntry.setDescription('A single entry of ping parameters. This contains the parameters required to perform a ping from the router. The ping specified by the dynamic parameters, can be initiated or stopped at any time by altering the pingStatus accordingly.')
pingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingIndex.setStatus('current')
if mibBuilder.loadTexts: pingIndex.setDescription('There are two sets of ping information, dynamic and static. The dynamic information is used only once, for the next ping, then automatically replaced with the static information. The static information is used whenever specific dynamic information is not specified. The dynamic information indicates the current ping parameters when a ping is in progress. If static information is not specified, defaults are used. Static information can be changed at any time, but dynamic information cannot be changed while a ping is in progress. A change to the static information when a ping is not currently active, also updates the dynamic information.')
pingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 0), ("apple", 1), ("ip", 2), ("ipx", 3), ("osi", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingProtocol.setStatus('current')
if mibBuilder.loadTexts: pingProtocol.setDescription('The protocol that the ping will use. The protocol must match the destination address. Ping supports both IP, IPX, Appletalk, and OSI addresses. The protocol must be specified before the address is set, because when the protocol is changed, address is reset to undefined. The default value for this variable is undefined(0).')
pingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingAddress.setStatus('current')
if mibBuilder.loadTexts: pingAddress.setDescription('The address specifies the destination address for ping packets for Appletalk, IP, IPX and OSI networks, respectively. The address format must match the protocol being used. The protocol must be specified before the address is set, because changing the protocol resets the address to undefined. The default value for this variable is an undefined address which is coded as a zero length octet string.')
pingNumberOfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingNumberOfPackets.setStatus('current')
if mibBuilder.loadTexts: pingNumberOfPackets.setDescription('The number of ping packets to transmit.')
pingPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingPacketSize.setStatus('current')
if mibBuilder.loadTexts: pingPacketSize.setDescription('The packet size parameter specifies the length in bytes, of data to include in the data portion of the ping packet. The protocol packet header size and the size of headers for the particular link protocol in use have to be added to the packet size to get the total size of the ping packet. The maximum pingPacketSize can be set to is 1500.')
pingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingTimeout.setStatus('current')
if mibBuilder.loadTexts: pingTimeout.setDescription('Timeout specifies the amount of time, in seconds, to wait for a response to a ping packet.')
pingDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingDelay.setStatus('current')
if mibBuilder.loadTexts: pingDelay.setDescription('The delay parameter specifies the time interval, in seconds, between ping packets.')
pingTrapOnCompletion = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingTrapOnCompletion.setStatus('current')
if mibBuilder.loadTexts: pingTrapOnCompletion.setDescription('Specifies whether a trap should be issued on completion of the sequence of pings.')
pingTypeOfService = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingTypeOfService.setStatus('current')
if mibBuilder.loadTexts: pingTypeOfService.setDescription('The Type Of Service (TOS) parameter is only valid for IP addresses, and specifies the TOS field in the IP header of the ping packet, as a decimal in the range 0 to 255.')
pingPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 1, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingPattern.setStatus('current')
if mibBuilder.loadTexts: pingPattern.setDescription('The pattern parameter specifies the data pattern to use in the data portion of the ping packet.')
pingStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("startRunning", 1), ("stopStopped", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingStatus.setStatus('current')
if mibBuilder.loadTexts: pingStatus.setDescription("Status and action object for the ping module. A status of '1' indicates that the ping is currently running, the status can be set to '2' to stop the ping. A status of '2' indicates that the ping is currently stopped, the pingStatus can be set to '1' to start the ping. The parameters for the ping can be altered in the pingTable. The destination ping address and protocol have defaults of undefined and must be specified before a ping can be started. The ping statistics are reset to defaults when a ping is started, and updated when the ping stops. Dynamic pingTable information is used only once, for the next ping. Static pingTable information is used for all pings by default, whenever the respective dynamic settings are not specified.")
pingStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 3))
pingSentPackets = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingSentPackets.setStatus('current')
if mibBuilder.loadTexts: pingSentPackets.setDescription('The number of ping packets sent to the target in the last ping. The default before the completion of a ping is zero.')
pingReceivedPackets = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingReceivedPackets.setStatus('current')
if mibBuilder.loadTexts: pingReceivedPackets.setDescription('The number of packets received from the target in the last ping. The default before the completion of a ping is zero.')
pingMinimumRoundTripTime = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingMinimumRoundTripTime.setStatus('current')
if mibBuilder.loadTexts: pingMinimumRoundTripTime.setDescription('The quickest round trip time taken by any of the ping packets in milliseconds in the last ping. The default before the completion of a ping is zero.')
pingAverageRoundTripTime = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingAverageRoundTripTime.setStatus('current')
if mibBuilder.loadTexts: pingAverageRoundTripTime.setDescription('The average round trip time taken by the ping packets in milliseconds in the last ping. The default before the completion of a ping is zero.')
pingMaximumRoundTripTime = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingMaximumRoundTripTime.setStatus('current')
if mibBuilder.loadTexts: pingMaximumRoundTripTime.setDescription('The slowest round trip time taken by any of the ping packets in milliseconds in the last ping. The default before the completion of a ping is zero.')
pingTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 0))
pingCompletionTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 0, 1))
if mibBuilder.loadTexts: pingCompletionTrap.setStatus('current')
if mibBuilder.loadTexts: pingCompletionTrap.setDescription('A ping trap is generated when a ping has completed. Traps are only generated if the variable pingTrapOnCompletion is set to true(1) in the dynamic ping entry. A trap is still generated if the ping is stopped prematurely by setting the variable pingStatus to stop/stopped(2).')
mibBuilder.exportSymbols("AT-PING-MIB", pingProtocol=pingProtocol, pingPattern=pingPattern, pingTimeout=pingTimeout, pingIndex=pingIndex, pingMinimumRoundTripTime=pingMinimumRoundTripTime, pingTable=pingTable, pingDelay=pingDelay, pingSentPackets=pingSentPackets, ping=ping, pingMaximumRoundTripTime=pingMaximumRoundTripTime, pingNumberOfPackets=pingNumberOfPackets, pingStatistics=pingStatistics, PYSNMP_MODULE_ID=ping, pingCompletionTrap=pingCompletionTrap, pingTrapOnCompletion=pingTrapOnCompletion, pingAddress=pingAddress, pingTraps=pingTraps, pingAverageRoundTripTime=pingAverageRoundTripTime, pingEntry=pingEntry, pingTypeOfService=pingTypeOfService, pingReceivedPackets=pingReceivedPackets, pingPacketSize=pingPacketSize, pingStatus=pingStatus)
