#
# PySNMP MIB module WWP-IGMP-SNOOP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-IGMP-SNOOP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:37:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Unsigned32, IpAddress, iso, NotificationType, Gauge32, MibIdentifier, TimeTicks, Counter32, Integer32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Unsigned32", "IpAddress", "iso", "NotificationType", "Gauge32", "MibIdentifier", "TimeTicks", "Counter32", "Integer32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter64")
DateAndTime, DisplayString, TruthValue, TextualConvention, MacAddress, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "TruthValue", "TextualConvention", "MacAddress", "RowStatus")
wwpModules, = mibBuilder.importSymbols("WWP-SMI", "wwpModules")
wwpIgmpSnoopMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 10))
wwpIgmpSnoopMIB.setRevisions(('2001-04-03 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpIgmpSnoopMIB.setRevisionsDescriptions(('Initial creation.',))
if mibBuilder.loadTexts: wwpIgmpSnoopMIB.setLastUpdated('200104031700Z')
if mibBuilder.loadTexts: wwpIgmpSnoopMIB.setOrganization('World Wide Packets, Inc')
if mibBuilder.loadTexts: wwpIgmpSnoopMIB.setContactInfo(' Mib Meister Postal: World Wide Packets P.O. Box 950 Veradale, WA 99037 USA Phone: +1 509 242 9000 Email: mib.meister@worldwidepackets.com')
if mibBuilder.loadTexts: wwpIgmpSnoopMIB.setDescription('This MIB specifies the managed objects for IGMP Snooping specific to the WWP products.')
class PortList(TextualConvention, OctetString):
    description = "Each octet within this value specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the bridge is represented by a single bit within the value of this object. If that bit has a value of '1' then that port is included in the set of ports; the port is not included if its bit has a value of '0'."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class VlanId(TextualConvention, Integer32):
    description = 'A 12-bit VLAN ID used in the VLAN Tag header.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4094)

wwpIgmpSnoopMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 10, 1))
wwpIgmpSnoop = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 10, 1, 1))
wwpIgmpSnoopMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 10, 2))
wwpIgmpSnoopMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 10, 2, 0))
wwpIgmpSnoopMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 10, 3))
wwpIgmpSnoopMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 10, 3, 1))
wwpIgmpSnoopMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 10, 3, 2))
wwpIgmpSnoopActivate = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 10, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpIgmpSnoopActivate.setStatus('current')
if mibBuilder.loadTexts: wwpIgmpSnoopActivate.setDescription('Activate the Igmp Snooping operation with a value of True(1) or stop it with False(2).')
wwpIgmpSnoopTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 10, 1, 1, 2), )
if mibBuilder.loadTexts: wwpIgmpSnoopTable.setStatus('current')
if mibBuilder.loadTexts: wwpIgmpSnoopTable.setDescription('The (conceptual) table listing the IP multicast groups for which there are members on particular vlans.')
wwpIgmpSnoopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 10, 1, 1, 2, 1), ).setIndexNames((0, "WWP-IGMP-SNOOP-MIB", "wwpIgmpSnoopVlanId"), (0, "WWP-IGMP-SNOOP-MIB", "wwpIgmpSnoopGroupAddress"))
if mibBuilder.loadTexts: wwpIgmpSnoopEntry.setStatus('current')
if mibBuilder.loadTexts: wwpIgmpSnoopEntry.setDescription('An entry (conceptual row) in the wwpIgmpSnoopTable.')
wwpIgmpSnoopVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 10, 1, 1, 2, 1, 1), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpIgmpSnoopVlanId.setStatus('current')
if mibBuilder.loadTexts: wwpIgmpSnoopVlanId.setDescription('The vlan for which this entry contains information for an IP multicast group address.')
wwpIgmpSnoopGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 10, 1, 1, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpIgmpSnoopGroupAddress.setStatus('current')
if mibBuilder.loadTexts: wwpIgmpSnoopGroupAddress.setDescription('The IP multicast group address for which this entry contains information.')
wwpIgmpSnoopActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 10, 1, 1, 2, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpIgmpSnoopActivePorts.setStatus('current')
if mibBuilder.loadTexts: wwpIgmpSnoopActivePorts.setDescription('The Port Map of the active ports for the igmp filter indexed by wwpIgmpSnoopVlanId and wwpIgmpSnoopGroupAddress.')
wwpIgmpSnoopRouterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 10, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpIgmpSnoopRouterPort.setStatus('current')
if mibBuilder.loadTexts: wwpIgmpSnoopRouterPort.setDescription('The router port from which the igmp query messages are received, and joins/leaves messages are sent.')
wwpIgmpSnoopQueryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 10, 1, 1, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpIgmpSnoopQueryTime.setStatus('current')
if mibBuilder.loadTexts: wwpIgmpSnoopQueryTime.setDescription('The time at which the last activity was observed on this stream.')
wwpIgmpSnoopLingerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(20)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpIgmpSnoopLingerTimeout.setStatus('current')
if mibBuilder.loadTexts: wwpIgmpSnoopLingerTimeout.setDescription('This value specifies the amount of time that a multicast filter will be in place after the last host has left. In essence it configures how long to filter the stream after all the hosts have left the group. This can tune the system as to how long the router has to remove the stream from the subnet. The minimum value is 1 second, with no maximum value.')
wwpIgmpSnoopExpiryTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpIgmpSnoopExpiryTimeout.setStatus('current')
if mibBuilder.loadTexts: wwpIgmpSnoopExpiryTimeout.setDescription('The interval of time for which an igmp protocol entry, is allowed to remain valid without any activity.')
wwpIgmpSnoopQueryMessages = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 10, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpIgmpSnoopQueryMessages.setStatus('current')
if mibBuilder.loadTexts: wwpIgmpSnoopQueryMessages.setDescription('The total number of query messages snooped.')
wwpIgmpSnoopJoinMessages = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 10, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpIgmpSnoopJoinMessages.setStatus('current')
if mibBuilder.loadTexts: wwpIgmpSnoopJoinMessages.setDescription('The total number of Join messages snooped.')
wwpIgmpSnoopLeaveMessages = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 10, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpIgmpSnoopLeaveMessages.setStatus('current')
if mibBuilder.loadTexts: wwpIgmpSnoopLeaveMessages.setDescription('The total number of leave messages snooped.')
wwpIgmpSnoopRouterDiscards = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 10, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpIgmpSnoopRouterDiscards.setStatus('current')
if mibBuilder.loadTexts: wwpIgmpSnoopRouterDiscards.setDescription('The total number of messages discarded by the Router.')
wwpIgmpSnoopMinQueryTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 10, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpIgmpSnoopMinQueryTimeout.setStatus('current')
if mibBuilder.loadTexts: wwpIgmpSnoopMinQueryTimeout.setDescription('The minimum interval of time for which an igmp protocol entry, is allowed to wait for any igmp query.')
wwpIgmpSnoopLeaveMode = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fast", 1), ("inquisitive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpIgmpSnoopLeaveMode.setStatus('current')
if mibBuilder.loadTexts: wwpIgmpSnoopLeaveMode.setDescription("Setting the igmp leave mode to 'fast(1)' will cause the multicast stream to be pruned as soon as a leave is received. If this object is set to 'inquisitive(2)', then a Group Specific Query is created for the multicast stream for which the leave was received. If no membership report is received in the time interval configured by the wwpIgmpSnoopInqLeaveTimeout, then the multicast stream is pruned.")
wwpIgmpSnoopInqLeaveTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 10, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpIgmpSnoopInqLeaveTimeout.setStatus('current')
if mibBuilder.loadTexts: wwpIgmpSnoopInqLeaveTimeout.setDescription("The interval of time in units of 0.1 ( tenth ) seconds for which the Group Specific Query, is allowed to wait for any response. The inquisitive leave timer is started only when the wwpIgmpSnoopLeaveMode is set to 'inquisitive(2)'.")
wwpIgmpSnoopUnresMcastFilterAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 10, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpIgmpSnoopUnresMcastFilterAdminStatus.setStatus('current')
if mibBuilder.loadTexts: wwpIgmpSnoopUnresMcastFilterAdminStatus.setDescription('The desired state of the unsolicited (unresolved) multicast streams.')
wwpIgmpSnoopUnresMcastFilterOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 10, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpIgmpSnoopUnresMcastFilterOperStatus.setStatus('current')
if mibBuilder.loadTexts: wwpIgmpSnoopUnresMcastFilterOperStatus.setDescription("The current operational state of the unsolicited (unresolved) multicast streams. If this object value is 'enable', then unsolicited (unresolved) multicast streams will not be flooded to any port.")
mibBuilder.exportSymbols("WWP-IGMP-SNOOP-MIB", wwpIgmpSnoopMIBNotificationPrefix=wwpIgmpSnoopMIBNotificationPrefix, VlanId=VlanId, wwpIgmpSnoopLeaveMessages=wwpIgmpSnoopLeaveMessages, wwpIgmpSnoopMIBCompliances=wwpIgmpSnoopMIBCompliances, wwpIgmpSnoopMIBConformance=wwpIgmpSnoopMIBConformance, wwpIgmpSnoopGroupAddress=wwpIgmpSnoopGroupAddress, wwpIgmpSnoopLeaveMode=wwpIgmpSnoopLeaveMode, wwpIgmpSnoopMinQueryTimeout=wwpIgmpSnoopMinQueryTimeout, wwpIgmpSnoopRouterDiscards=wwpIgmpSnoopRouterDiscards, wwpIgmpSnoopUnresMcastFilterAdminStatus=wwpIgmpSnoopUnresMcastFilterAdminStatus, PortList=PortList, wwpIgmpSnoopUnresMcastFilterOperStatus=wwpIgmpSnoopUnresMcastFilterOperStatus, wwpIgmpSnoopEntry=wwpIgmpSnoopEntry, wwpIgmpSnoopMIBGroups=wwpIgmpSnoopMIBGroups, wwpIgmpSnoopQueryTime=wwpIgmpSnoopQueryTime, wwpIgmpSnoopInqLeaveTimeout=wwpIgmpSnoopInqLeaveTimeout, wwpIgmpSnoopActivePorts=wwpIgmpSnoopActivePorts, wwpIgmpSnoopJoinMessages=wwpIgmpSnoopJoinMessages, wwpIgmpSnoopLingerTimeout=wwpIgmpSnoopLingerTimeout, wwpIgmpSnoopMIBNotifications=wwpIgmpSnoopMIBNotifications, wwpIgmpSnoopTable=wwpIgmpSnoopTable, wwpIgmpSnoop=wwpIgmpSnoop, wwpIgmpSnoopActivate=wwpIgmpSnoopActivate, wwpIgmpSnoopMIBObjects=wwpIgmpSnoopMIBObjects, PYSNMP_MODULE_ID=wwpIgmpSnoopMIB, wwpIgmpSnoopQueryMessages=wwpIgmpSnoopQueryMessages, wwpIgmpSnoopMIB=wwpIgmpSnoopMIB, wwpIgmpSnoopVlanId=wwpIgmpSnoopVlanId, wwpIgmpSnoopExpiryTimeout=wwpIgmpSnoopExpiryTimeout, wwpIgmpSnoopRouterPort=wwpIgmpSnoopRouterPort)
