#
# PySNMP MIB module DELL-SNMP-UPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DELL-SNMP-UPS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:38:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Unsigned32, Integer32, Gauge32, IpAddress, Bits, enterprises, Counter32, iso, MibIdentifier, ObjectIdentity, NotificationType, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Unsigned32", "Integer32", "Gauge32", "IpAddress", "Bits", "enterprises", "Counter32", "iso", "MibIdentifier", "ObjectIdentity", "NotificationType", "TimeTicks")
TimeStamp, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "DisplayString", "TextualConvention")
dell = MibIdentifier((1, 3, 6, 1, 4, 1, 674))
upsdell = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10902))
hardware = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10902, 2))
productID = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10902, 2, 100))
productStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10902, 2, 110))
physical = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120))
logical = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10902, 2, 130))
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140))
physicalIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 1))
physicalOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 2))
physicalRectifier = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 3))
physicalUPS = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 4))
physicalBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 5))
physicalLoadSegment = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 6))
physicalEnvironment = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7))
productIDDisplayName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 100, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIDDisplayName.setStatus('mandatory')
if mibBuilder.loadTexts: productIDDisplayName.setDescription('Name of this product for display purposes.')
productIDDescription = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 100, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIDDescription.setStatus('mandatory')
if mibBuilder.loadTexts: productIDDescription.setDescription('A short description of this product.')
productIDVendor = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 100, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIDVendor.setStatus('mandatory')
if mibBuilder.loadTexts: productIDVendor.setDescription('The name of the product manufacturer.')
productIDVersion = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 100, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIDVersion.setStatus('mandatory')
if mibBuilder.loadTexts: productIDVersion.setDescription('The version of this product.')
productIDBuildNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 100, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIDBuildNumber.setStatus('mandatory')
if mibBuilder.loadTexts: productIDBuildNumber.setDescription('The software build number of the product populating the MIB.')
productIDURL = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 100, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIDURL.setStatus('mandatory')
if mibBuilder.loadTexts: productIDURL.setDescription('The URL of the web-based application to manage this device, should the device provide one.')
productIDDeviceNetworkName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 100, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIDDeviceNetworkName.setStatus('mandatory')
if mibBuilder.loadTexts: productIDDeviceNetworkName.setDescription('Operating system specific computer name if product SNMP service is hosted.')
productStatusGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 110, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("non-critical", 4), ("critical", 5), ("non-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productStatusGlobalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: productStatusGlobalStatus.setDescription('Current status of the product. This is a rollup for the entire product including any monitored devices. The status is intended to give initiative to an SNMP monitor to get further data when this status is abnormal.')
productStatusLastGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 110, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productStatusLastGlobalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: productStatusLastGlobalStatus.setDescription('The status before the current status which induced an initiative to issue a global status change trap.')
productStatusTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 110, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productStatusTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: productStatusTimeStamp.setDescription('The last time that the SNMP table geometries changed and/or attribute data was significantly updated. This is to be used by management applications to trigger a refresh of data acquired from the MIB.')
productStatusGetTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 110, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productStatusGetTimeOut.setStatus('optional')
if mibBuilder.loadTexts: productStatusGetTimeOut.setDescription('Suggested time out value in milliseconds for how long the SNMP getter should wait while attempting to poll the product SNMP service.')
productStatusRefreshRate = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 110, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productStatusRefreshRate.setStatus('optional')
if mibBuilder.loadTexts: productStatusRefreshRate.setDescription('Rate in seconds at which the SNMP service cached data is being updated.')
productStatusGeneratingTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 110, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productStatusGeneratingTrapFlag.setStatus('optional')
if mibBuilder.loadTexts: productStatusGeneratingTrapFlag.setDescription('Indicates if this SNMP sub-agent is capable of and/or is generating SNMP Traps. This variable can take the following values: 1 True, this service is capable of sending traps and is the originator of SNMP traps generated for the devices represented in this MIB and is currently generating traps. 2 False, this service not capable of sending traps and is not the originator of any SNMP traps generated for the devices represented in this MIB. 3 Disabled, this service is capable of sending traps and is the originator of SNMP traps for the devices represented in this MIB, but traps are currently disabled.')
physicalIdentFamilyName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalIdentFamilyName.setStatus('mandatory')
if mibBuilder.loadTexts: physicalIdentFamilyName.setDescription('UPS Family name.')
physicalIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalIdentSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: physicalIdentSerialNumber.setDescription('UPS Serial number.')
physicalIdentConverterType = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("lineInteractive", 1), ("onLine", 2), ("onLineUnitaryParallel", 3), ("onLineParallelWithNS", 4), ("onLineHotStandbyRedundancy", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalIdentConverterType.setStatus('mandatory')
if mibBuilder.loadTexts: physicalIdentConverterType.setDescription('UPS type.')
physicalIdentReferenceNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalIdentReferenceNumber.setStatus('mandatory')
if mibBuilder.loadTexts: physicalIdentReferenceNumber.setDescription('Technical Reference of UPS firmware.')
physicalOutputInstantHeadroom = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalOutputInstantHeadroom.setStatus('mandatory')
if mibBuilder.loadTexts: physicalOutputInstantHeadroom.setDescription('This is the present amount of watt capacity remaining before overload.')
physicalOutputPeakHeadroom = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalOutputPeakHeadroom.setStatus('mandatory')
if mibBuilder.loadTexts: physicalOutputPeakHeadroom.setDescription('Statistical value holding the lowest value that Instantaneous Headroom Watts was ever set too since the last time this statistic was reset.')
physicalOutputPeakHeadroomTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 2, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalOutputPeakHeadroomTimestamp.setStatus('mandatory')
if mibBuilder.loadTexts: physicalOutputPeakHeadroomTimestamp.setDescription('Time and date stamp of the last time the Peak Headroom Watts value was updated.')
physicalOutputPeakConsumption = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalOutputPeakConsumption.setStatus('mandatory')
if mibBuilder.loadTexts: physicalOutputPeakConsumption.setDescription('Statistical value of the maximum RMS Watts the UPS has seen since the last time this statistic was reset.')
physicalOutputPeakConsumptionTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 2, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalOutputPeakConsumptionTimestamp.setStatus('mandatory')
if mibBuilder.loadTexts: physicalOutputPeakConsumptionTimestamp.setDescription('Time and date stamp of the last time the Peak Consumption Watts value was updated.')
physicalOutputPresentConsumption = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalOutputPresentConsumption.setStatus('mandatory')
if mibBuilder.loadTexts: physicalOutputPresentConsumption.setDescription('Derived by averaging the watt second consumption over the past hour. Use an array of 60 words to store the average watt seconds consumed over the last minute then after you have a full hours worth of data in the 60 word array, average those values to get your Present KWH Consumption meter. Then every minute after that update the oldest value in the array, average again and update the meter. Value is 0 until the minimum 1 hour of data has been accumulated.')
physicalOutputCumulativeConsumption = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalOutputCumulativeConsumption.setStatus('mandatory')
if mibBuilder.loadTexts: physicalOutputCumulativeConsumption.setDescription('64 bit meter value that is derived by reading the Present KWH Consumption meter once per hour and adding it to the last value of this meter. Value accumulates until it is reset from the LCD or via the SHUT protocol or the meter rolls over.')
physicalOutputCumulativeConsumptionTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 2, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalOutputCumulativeConsumptionTimestamp.setStatus('mandatory')
if mibBuilder.loadTexts: physicalOutputCumulativeConsumptionTimestamp.setDescription('Time and date stamp of last time this meter value was reset.')
physicalOutputVA = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalOutputVA.setStatus('mandatory')
if mibBuilder.loadTexts: physicalOutputVA.setDescription('Output VA.')
physicalRectifierPosVoltage = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalRectifierPosVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: physicalRectifierPosVoltage.setDescription('DC bus positive voltage.')
physicalRectifierNegVoltage = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalRectifierNegVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: physicalRectifierNegVoltage.setDescription('DC bus negative voltage.')
physicalUPSDateTime = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 4, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalUPSDateTime.setStatus('mandatory')
if mibBuilder.loadTexts: physicalUPSDateTime.setDescription('Real Time Clock with Date and Time.')
physicalUPSAlarmsStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 4, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalUPSAlarmsStatus.setStatus('mandatory')
if mibBuilder.loadTexts: physicalUPSAlarmsStatus.setDescription('List of traps that are in active mode. This list is coded in ASCI format and each trap number is separated by a coma (ex: 1,5,23,77). Only odd traps are listed.')
physicalUPSRuntimeToShutdown = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalUPSRuntimeToShutdown.setStatus('mandatory')
if mibBuilder.loadTexts: physicalUPSRuntimeToShutdown.setDescription('Number of seconds remaining until UPS will receive a ShutdownAfterDelay command. 2147483647 if no countdown is in effect.')
physicalUPSOutpoutSwitchable = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switchable", 1), ("notSwitchable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalUPSOutpoutSwitchable.setStatus('mandatory')
if mibBuilder.loadTexts: physicalUPSOutpoutSwitchable.setDescription('Parameter to enable or not remote UPS commands coming from all communication ports.')
physicalBatteryABMStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("abmCharging", 1), ("abmDischarging", 2), ("abmFloating", 3), ("abmResting", 4), ("abmOff", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalBatteryABMStatus.setStatus('mandatory')
if mibBuilder.loadTexts: physicalBatteryABMStatus.setDescription('Advanced Battery Monitoring satus.')
physicalBatteryTestStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("donePassed", 1), ("doneWarning", 2), ("doneError", 3), ("aborted", 4), ("inProgress", 5), ("noTestIniated", 6), ("testScheduled", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalBatteryTestStatus.setStatus('mandatory')
if mibBuilder.loadTexts: physicalBatteryTestStatus.setDescription('Battery test satus.')
physicalBatterySecondsRemaining = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalBatterySecondsRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: physicalBatterySecondsRemaining.setDescription('Battery remaining time calculated by the autonometer.')
physicalLoadSegment1ShutdownAfterDelay = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalLoadSegment1ShutdownAfterDelay.setStatus('mandatory')
if mibBuilder.loadTexts: physicalLoadSegment1ShutdownAfterDelay.setDescription('Number of seconds remaining until load segment 1 will switch off. -1 if no shutdown countdown is in effect.')
physicalLoadSegment1StartupAfterDelay = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalLoadSegment1StartupAfterDelay.setStatus('mandatory')
if mibBuilder.loadTexts: physicalLoadSegment1StartupAfterDelay.setDescription('Number of seconds remaining until load segment 1 will switch on. -1 if no startup countdown is in effect.')
physicalLoadSegment2ShutdownAfterDelay = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalLoadSegment2ShutdownAfterDelay.setStatus('mandatory')
if mibBuilder.loadTexts: physicalLoadSegment2ShutdownAfterDelay.setDescription('Number of seconds remaining until load segment 2 will switch off. -1 if no shutdown countdown is in effect.')
physicalLoadSegment2StartupAfterDelay = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalLoadSegment2StartupAfterDelay.setStatus('mandatory')
if mibBuilder.loadTexts: physicalLoadSegment2StartupAfterDelay.setDescription('Number of seconds remaining until load segment 2 will switch on. -1 if no startup countdown is in effect.')
physicalLoadSegment1RuntimeToShutdown = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalLoadSegment1RuntimeToShutdown.setStatus('mandatory')
if mibBuilder.loadTexts: physicalLoadSegment1RuntimeToShutdown.setDescription('Number of seconds remaining until load segment 1 will receive a ShutdownAfterDelay command. 2147483647 if no countdown is in effect.')
physicalLoadSegment2RuntimeToShutdown = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalLoadSegment2RuntimeToShutdown.setStatus('mandatory')
if mibBuilder.loadTexts: physicalLoadSegment2RuntimeToShutdown.setDescription('Number of seconds remaining until load segment 2 will receive a ShutdownAfterDelay command. 2147483647 if no countdown is in effect.')
physicalEnvironmentSensorPresent = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalEnvironmentSensorPresent.setStatus('mandatory')
if mibBuilder.loadTexts: physicalEnvironmentSensorPresent.setDescription('Informations, if there is Environment Measurement Probe connected.')
physicalEnvironmentSensorName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalEnvironmentSensorName.setStatus('mandatory')
if mibBuilder.loadTexts: physicalEnvironmentSensorName.setDescription('User name of EMP.')
physicalEnvironmentValues = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7, 3))
physicalEnvironmentValuesTemperatureUnit = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalEnvironmentValuesTemperatureUnit.setStatus('mandatory')
if mibBuilder.loadTexts: physicalEnvironmentValuesTemperatureUnit.setDescription('Temperature unit setting.')
physicalEnvironmentValuesTemperature = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalEnvironmentValuesTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: physicalEnvironmentValuesTemperature.setDescription('Current temperature value in 0.1 degree Celsius.')
physicalEnvironmentValuesHumidity = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalEnvironmentValuesHumidity.setStatus('mandatory')
if mibBuilder.loadTexts: physicalEnvironmentValuesHumidity.setDescription('Current humidity value in 0.1 percents.')
physicalEnvironmentValuesTemperatureLow = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalEnvironmentValuesTemperatureLow.setStatus('mandatory')
if mibBuilder.loadTexts: physicalEnvironmentValuesTemperatureLow.setDescription('Temperature low threshhold in units of degree Celsius.')
physicalEnvironmentValuesTemperatureHigh = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalEnvironmentValuesTemperatureHigh.setStatus('mandatory')
if mibBuilder.loadTexts: physicalEnvironmentValuesTemperatureHigh.setDescription('Temperature high threshhold in units of degree Celsius.')
physicalEnvironmentValuesTemperatureHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalEnvironmentValuesTemperatureHysteresis.setStatus('mandatory')
if mibBuilder.loadTexts: physicalEnvironmentValuesTemperatureHysteresis.setDescription('Temperature hysteresis in units of degree Celsius.')
physicalEnvironmentValueshHumidityLow = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalEnvironmentValueshHumidityLow.setStatus('mandatory')
if mibBuilder.loadTexts: physicalEnvironmentValueshHumidityLow.setDescription('Humidity low threshhold in percents.')
physicalEnvironmentValuesHumidityHigh = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalEnvironmentValuesHumidityHigh.setStatus('mandatory')
if mibBuilder.loadTexts: physicalEnvironmentValuesHumidityHigh.setDescription('Humidity high threshhold in percents.')
physicalEnvironmentValuesHumidityHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalEnvironmentValuesHumidityHysteresis.setStatus('mandatory')
if mibBuilder.loadTexts: physicalEnvironmentValuesHumidityHysteresis.setDescription('Humidity hysteresis in percents.')
physicalEnvironmentInputTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7, 4), )
if mibBuilder.loadTexts: physicalEnvironmentInputTable.setStatus('mandatory')
if mibBuilder.loadTexts: physicalEnvironmentInputTable.setDescription('The table containins dry contact inputs information.')
physicalEnvironmentInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7, 4, 1), ).setIndexNames((0, "DELL-SNMP-UPS-MIB", "physicalEnvironmentInputIndex"))
if mibBuilder.loadTexts: physicalEnvironmentInputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: physicalEnvironmentInputEntry.setDescription('The description of an entry in the table.')
physicalEnvironmentInputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalEnvironmentInputIndex.setStatus('mandatory')
if mibBuilder.loadTexts: physicalEnvironmentInputIndex.setDescription('The input index, ranging from 1 to 2.')
physicalEnvironmentInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 27))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalEnvironmentInputName.setStatus('mandatory')
if mibBuilder.loadTexts: physicalEnvironmentInputName.setDescription('The input user-friendly name.')
physicalEnvironmentInputState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("opened", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalEnvironmentInputState.setStatus('mandatory')
if mibBuilder.loadTexts: physicalEnvironmentInputState.setDescription('Current state of input.')
physicalEnvironmentInputOpenedState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalEnvironmentInputOpenedState.setStatus('mandatory')
if mibBuilder.loadTexts: physicalEnvironmentInputOpenedState.setDescription('The input opened state user-friendly name.')
physicalEnvironmentInputClosedState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10902, 2, 120, 7, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalEnvironmentInputClosedState.setStatus('mandatory')
if mibBuilder.loadTexts: physicalEnvironmentInputClosedState.setDescription('The input closed state user-friendly name.')
trapInverterOverVoltage = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,1))
if mibBuilder.loadTexts: trapInverterOverVoltage.setDescription('Inverter AC over voltage.')
trapInverterOverVoltageOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,2))
if mibBuilder.loadTexts: trapInverterOverVoltageOk.setDescription('Inverter AC over voltage ok.')
trapInverterUnderVoltage = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,3))
if mibBuilder.loadTexts: trapInverterUnderVoltage.setDescription('Inverter AC under voltage.')
trapInverterUnderVoltageOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,4))
if mibBuilder.loadTexts: trapInverterUnderVoltageOk.setDescription('Inverter AC under voltage ok.')
trapBypassFrequencyOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,5))
if mibBuilder.loadTexts: trapBypassFrequencyOutOfRange.setDescription('Bypass under or over frequency.')
trapBypassFrequencyOutOfRangeOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,6))
if mibBuilder.loadTexts: trapBypassFrequencyOutOfRangeOk.setDescription('Bypass under or over frequency ok.')
trapOnBuck = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,7))
if mibBuilder.loadTexts: trapOnBuck.setDescription('On Buck / Input Voltage Reducer.')
trapReturnFromBuck = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,8))
if mibBuilder.loadTexts: trapReturnFromBuck.setDescription('Return from Buck.')
trapOnBoost = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,9))
if mibBuilder.loadTexts: trapOnBoost.setDescription('On Boost / Input Voltage Booster.')
trapReturnFromBoost = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,10))
if mibBuilder.loadTexts: trapReturnFromBoost.setDescription('Return from Boost.')
trapInputOverVoltage = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,11))
if mibBuilder.loadTexts: trapInputOverVoltage.setDescription('Input AC over voltage.')
trapInputOverVoltageOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,12))
if mibBuilder.loadTexts: trapInputOverVoltageOk.setDescription('Input AC over voltage ok.')
trapInputUnderVoltage = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,13))
if mibBuilder.loadTexts: trapInputUnderVoltage.setDescription('Input AC under voltage.')
trapInputUnderVoltageOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,14))
if mibBuilder.loadTexts: trapInputUnderVoltageOk.setDescription('Input AC under voltage ok.')
trapInputFrequencyOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,15))
if mibBuilder.loadTexts: trapInputFrequencyOutOfRange.setDescription('Input under or over frequency.')
trapInputFrequencyOutOfRangeOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,16))
if mibBuilder.loadTexts: trapInputFrequencyOutOfRangeOk.setDescription('Input under or over frequency ok.')
trapRemoteEmergencyPowerOff = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,17))
if mibBuilder.loadTexts: trapRemoteEmergencyPowerOff.setDescription('Remote emergency power off.')
trapReturnFromEmergencyPowerOff = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,18))
if mibBuilder.loadTexts: trapReturnFromEmergencyPowerOff.setDescription('Return from remote emergency power off.')
trapLevel1Overload = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,19))
if mibBuilder.loadTexts: trapLevel1Overload.setDescription('Output Level 1 overload.')
trapLevel1OverloadOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,20))
if mibBuilder.loadTexts: trapLevel1OverloadOk.setDescription('Output Level 1 overload ok.')
trapLevel2Overload = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,21))
if mibBuilder.loadTexts: trapLevel2Overload.setDescription('Level 2 overload.')
trapLevel2OverloadOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,22))
if mibBuilder.loadTexts: trapLevel2OverloadOk.setDescription('Level 2 overload ok.')
trapLevel3Overload = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,23))
if mibBuilder.loadTexts: trapLevel3Overload.setDescription('Level 3 overload.')
trapLevel3OverloadOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,24))
if mibBuilder.loadTexts: trapLevel3OverloadOk.setDescription('Level 3 overload ok.')
trapPosDCLinkOverVoltage = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,25))
if mibBuilder.loadTexts: trapPosDCLinkOverVoltage.setDescription('Positive DC link over voltage.')
trapPosDCLinkOverVoltageOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,26))
if mibBuilder.loadTexts: trapPosDCLinkOverVoltageOk.setDescription('Positive DC link over voltage ok.')
trapPosDCLinkUnderVoltage = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,27))
if mibBuilder.loadTexts: trapPosDCLinkUnderVoltage.setDescription('Positive DC link under voltage.')
trapPosDCLinkUnderVoltageOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,28))
if mibBuilder.loadTexts: trapPosDCLinkUnderVoltageOk.setDescription('Positive DC link under voltage ok.')
trapNegDCLinkOverVoltage = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,29))
if mibBuilder.loadTexts: trapNegDCLinkOverVoltage.setDescription('Negative DC link over voltage.')
trapNegDCLinkOverVoltageOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,30))
if mibBuilder.loadTexts: trapNegDCLinkOverVoltageOk.setDescription('Negative DC link over voltage ok.')
trapNegDCLinkUnderVoltage = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,31))
if mibBuilder.loadTexts: trapNegDCLinkUnderVoltage.setDescription('Negative DC link under voltage.')
trapNegDCLinkUnderVoltageOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,32))
if mibBuilder.loadTexts: trapNegDCLinkUnderVoltageOk.setDescription('Negative DC link under voltage ok.')
trapRectifierFault = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,33))
if mibBuilder.loadTexts: trapRectifierFault.setDescription('Rectifier fault.')
trapRectifierOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,34))
if mibBuilder.loadTexts: trapRectifierOk.setDescription('Rectifier ok.')
trapInverterFault = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,35))
if mibBuilder.loadTexts: trapInverterFault.setDescription('Inverter fault.')
trapInverterOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,36))
if mibBuilder.loadTexts: trapInverterOk.setDescription('Inverter ok.')
trapChargerFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,37))
if mibBuilder.loadTexts: trapChargerFailure.setDescription('Charger failure.')
trapChargerOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,38))
if mibBuilder.loadTexts: trapChargerOk.setDescription('Charger ok.')
trapEepromFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,39))
if mibBuilder.loadTexts: trapEepromFailure.setDescription('EEPROM failure.')
trapEepromOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,40))
if mibBuilder.loadTexts: trapEepromOk.setDescription('EEPROM off.')
trapShutdownImminent = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,41))
if mibBuilder.loadTexts: trapShutdownImminent.setDescription('Shutdown imminent.')
trapShutdownImminentOver = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,42))
if mibBuilder.loadTexts: trapShutdownImminentOver.setDescription('Shutdown imminent over.')
trapBatteryLow = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,43))
if mibBuilder.loadTexts: trapBatteryLow.setDescription('Battery low.')
trapBatteryOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,44))
if mibBuilder.loadTexts: trapBatteryOk.setDescription('Battery ok.')
trapOutputShortCircuit = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,45))
if mibBuilder.loadTexts: trapOutputShortCircuit.setDescription('Output short circuit.')
trapOutputReturnFromShortCircuit = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,46))
if mibBuilder.loadTexts: trapOutputReturnFromShortCircuit.setDescription('Output return from short circuit.')
trapUtilityNotPresent = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,47))
if mibBuilder.loadTexts: trapUtilityNotPresent.setDescription('Utility not present.')
trapUtilityPresent = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,48))
if mibBuilder.loadTexts: trapUtilityPresent.setDescription('Utility present.')
trapBatteryOverVoltage = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,49))
if mibBuilder.loadTexts: trapBatteryOverVoltage.setDescription('Battery DC over voltage.')
trapBatteryOverVoltageOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,50))
if mibBuilder.loadTexts: trapBatteryOverVoltageOk.setDescription('Battery DC over voltage ok.')
trapHeatsinkOvertemperature = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,51))
if mibBuilder.loadTexts: trapHeatsinkOvertemperature.setDescription('Heatsink overtemperature.')
trapHeatsinkOvertemperatureOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,52))
if mibBuilder.loadTexts: trapHeatsinkOvertemperatureOk.setDescription('Heatsink overtemperature ok.')
trapBypassNotAvailable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,53))
if mibBuilder.loadTexts: trapBypassNotAvailable.setDescription('Bypass not available.')
trapBypassNotAvailableOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,54))
if mibBuilder.loadTexts: trapBypassNotAvailableOk.setDescription('Bypass not available ok.')
trapOnManualBypass = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,55))
if mibBuilder.loadTexts: trapOnManualBypass.setDescription('On manual/ maintenance bypass.')
trapUPSOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,57))
if mibBuilder.loadTexts: trapUPSOnBattery.setDescription('UPS on battery.')
trapUPSReturnFromBattery = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,58))
if mibBuilder.loadTexts: trapUPSReturnFromBattery.setDescription('UPS return from battery.')
trapUPSOnBypass = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,59))
if mibBuilder.loadTexts: trapUPSOnBypass.setDescription('UPS on bypass.')
trapUPSReturnFromBypass = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,60))
if mibBuilder.loadTexts: trapUPSReturnFromBypass.setDescription('UPS return from bypass.')
trapBatteryTestInProgress = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,61))
if mibBuilder.loadTexts: trapBatteryTestInProgress.setDescription('Battery manual or automatic test in progress.')
trapBatteryTestDone = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,62)).setObjects(("DELL-SNMP-UPS-MIB", "physicalBatteryTestStatus"))
if mibBuilder.loadTexts: trapBatteryTestDone.setDescription('Battery test done.')
trapBatteryNeedReplacement = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,63))
if mibBuilder.loadTexts: trapBatteryNeedReplacement.setDescription('Battery test failed, battery needs to be replaced.')
trapBatteryReplacementDone = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,64))
if mibBuilder.loadTexts: trapBatteryReplacementDone.setDescription('Battery replacement done.')
trapFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,65))
if mibBuilder.loadTexts: trapFanFailure.setDescription('Fan failure.')
trapFanOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,66))
if mibBuilder.loadTexts: trapFanOk.setDescription('Fan ok.')
trapSiteWiringFault = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,67))
if mibBuilder.loadTexts: trapSiteWiringFault.setDescription('Site wiring fault.')
trapSiteWiringOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,68))
if mibBuilder.loadTexts: trapSiteWiringOk.setDescription('Site wiring ok.')
trapBatteryDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,69))
if mibBuilder.loadTexts: trapBatteryDisconnected.setDescription('Batteries disconnected.')
trapBatteryConnected = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,70))
if mibBuilder.loadTexts: trapBatteryConnected.setDescription('Batteries connected.')
trapUPSOff = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,71))
if mibBuilder.loadTexts: trapUPSOff.setDescription('UPS off.')
trapUPSOn = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,72))
if mibBuilder.loadTexts: trapUPSOn.setDescription('UPS on.')
trapDCLinkImbalance = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,73))
if mibBuilder.loadTexts: trapDCLinkImbalance.setDescription('DC link imbalance.')
trapDCLinkImbalanceOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,74))
if mibBuilder.loadTexts: trapDCLinkImbalanceOk.setDescription('DC link imbalance ok.')
trapABMOn = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,79)).setObjects(("DELL-SNMP-UPS-MIB", "physicalBatteryABMStatus"))
if mibBuilder.loadTexts: trapABMOn.setDescription('ABM state on.')
trapABMOff = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,80))
if mibBuilder.loadTexts: trapABMOff.setDescription('ABM state off.')
trapLoadSegment1Off = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,81))
if mibBuilder.loadTexts: trapLoadSegment1Off.setDescription('Load segment 1 off.')
trapLoadSegment1On = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,82))
if mibBuilder.loadTexts: trapLoadSegment1On.setDescription('Load segment 1 on.')
trapLoadSegment2Off = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,83))
if mibBuilder.loadTexts: trapLoadSegment2Off.setDescription('Load segment 2 off.')
trapLoadSegment2On = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,84))
if mibBuilder.loadTexts: trapLoadSegment2On.setDescription('Load segment 2 on.')
trapInHighEfficiencyMode = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,85))
if mibBuilder.loadTexts: trapInHighEfficiencyMode.setDescription('In High Efficiency mode.')
trapReturnFromHighEfficiencyMode = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,86))
if mibBuilder.loadTexts: trapReturnFromHighEfficiencyMode.setDescription('Return from High Efficiency mode.')
trapRectifierOverload = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,87))
if mibBuilder.loadTexts: trapRectifierOverload.setDescription('Rectifier input over current.')
trapRectifierOverloadOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,88))
if mibBuilder.loadTexts: trapRectifierOverloadOk.setDescription('Rectifier current ok.')
trapInverterOverload = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,89))
if mibBuilder.loadTexts: trapInverterOverload.setDescription('Inverter output over current.')
trapInverterOverloadOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,90))
if mibBuilder.loadTexts: trapInverterOverloadOk.setDescription('Inverter output current ok.')
trapBypassVoltageOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,91))
if mibBuilder.loadTexts: trapBypassVoltageOutOfRange.setDescription('Bypass AC under or over voltage.')
trapBypassVoltageOutOfRangeOk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,92))
if mibBuilder.loadTexts: trapBypassVoltageOutOfRangeOk.setDescription('Bypass AC under or over voltage ok.')
trapServiceBattery = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,93))
if mibBuilder.loadTexts: trapServiceBattery.setDescription('Service battery.')
trapToBypassCommand = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,94))
if mibBuilder.loadTexts: trapToBypassCommand.setDescription('UPS received command to switch on bypass.')
trapFromBypassCommand = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,95))
if mibBuilder.loadTexts: trapFromBypassCommand.setDescription('UPS received command to switch on inverter.')
trapCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,96))
if mibBuilder.loadTexts: trapCommunicationLost.setDescription('Lost communication with UPS, HID databasis is not updated.')
trapCommunicationRestored = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,97))
if mibBuilder.loadTexts: trapCommunicationRestored.setDescription('Communication restored with UPS, HID databasis is updated.')
trapEnvironComFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,98))
if mibBuilder.loadTexts: trapEnvironComFailure.setDescription('Environment Probe communication failure.')
trapEnvironComOK = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,99))
if mibBuilder.loadTexts: trapEnvironComOK.setDescription('Environment Probe communication restored.')
trapEnvironTemperatureLow = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,100))
if mibBuilder.loadTexts: trapEnvironTemperatureLow.setDescription('Temperature is below low threshold.')
trapEnvironTemperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,102))
if mibBuilder.loadTexts: trapEnvironTemperatureHigh.setDescription('Temperature is above high threshold.')
trapEnvironTemperatureOK = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,103))
if mibBuilder.loadTexts: trapEnvironTemperatureOK.setDescription('Temperature is in normal range.')
trapEnvironHumidityLow = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,104))
if mibBuilder.loadTexts: trapEnvironHumidityLow.setDescription('Humidity is below low threshold.')
trapEnvironHumidityHigh = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,106))
if mibBuilder.loadTexts: trapEnvironHumidityHigh.setDescription('Humidity is above high threshold.')
trapEnvironHumidityOK = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,107))
if mibBuilder.loadTexts: trapEnvironHumidityOK.setDescription('Humidity is in normal range.')
trapEnvironInput1Closed = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,108))
if mibBuilder.loadTexts: trapEnvironInput1Closed.setDescription('Input #1 is Closed.')
trapEnvironInput1Open = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,109))
if mibBuilder.loadTexts: trapEnvironInput1Open.setDescription('Input #1 is Open.')
trapEnvironInput2Closed = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,110))
if mibBuilder.loadTexts: trapEnvironInput2Closed.setDescription('Input #2 is Closed.')
trapEnvironInput2Open = NotificationType((1, 3, 6, 1, 4, 1, 674, 10902, 2, 140) + (0,111))
if mibBuilder.loadTexts: trapEnvironInput2Open.setDescription('Input #2 is Open.')
mibBuilder.exportSymbols("DELL-SNMP-UPS-MIB", trapUPSReturnFromBattery=trapUPSReturnFromBattery, physical=physical, physicalEnvironmentSensorPresent=physicalEnvironmentSensorPresent, trapUtilityPresent=trapUtilityPresent, physicalEnvironmentValuesHumidity=physicalEnvironmentValuesHumidity, trapPosDCLinkOverVoltage=trapPosDCLinkOverVoltage, physicalLoadSegment1ShutdownAfterDelay=physicalLoadSegment1ShutdownAfterDelay, trapOnManualBypass=trapOnManualBypass, physicalOutput=physicalOutput, physicalIdentFamilyName=physicalIdentFamilyName, physicalEnvironmentValuesTemperatureHigh=physicalEnvironmentValuesTemperatureHigh, productIDVendor=productIDVendor, trapLoadSegment2Off=trapLoadSegment2Off, productIDURL=productIDURL, physicalUPSRuntimeToShutdown=physicalUPSRuntimeToShutdown, trapBatteryOverVoltageOk=trapBatteryOverVoltageOk, trapReturnFromEmergencyPowerOff=trapReturnFromEmergencyPowerOff, productIDDeviceNetworkName=productIDDeviceNetworkName, physicalOutputPeakConsumptionTimestamp=physicalOutputPeakConsumptionTimestamp, trapBypassFrequencyOutOfRange=trapBypassFrequencyOutOfRange, trapLevel3OverloadOk=trapLevel3OverloadOk, physicalEnvironment=physicalEnvironment, physicalOutputPeakConsumption=physicalOutputPeakConsumption, physicalEnvironmentInputTable=physicalEnvironmentInputTable, trapUtilityNotPresent=trapUtilityNotPresent, trapUPSOnBattery=trapUPSOnBattery, trapServiceBattery=trapServiceBattery, productStatusGeneratingTrapFlag=productStatusGeneratingTrapFlag, physicalOutputPresentConsumption=physicalOutputPresentConsumption, physicalEnvironmentInputState=physicalEnvironmentInputState, trapUPSOn=trapUPSOn, trapInverterOverloadOk=trapInverterOverloadOk, physicalBatterySecondsRemaining=physicalBatterySecondsRemaining, physicalEnvironmentValuesTemperatureUnit=physicalEnvironmentValuesTemperatureUnit, trapInputUnderVoltageOk=trapInputUnderVoltageOk, trapEnvironComOK=trapEnvironComOK, trapBypassNotAvailableOk=trapBypassNotAvailableOk, physicalEnvironmentValuesHumidityHysteresis=physicalEnvironmentValuesHumidityHysteresis, trapInverterFault=trapInverterFault, physicalIdentSerialNumber=physicalIdentSerialNumber, productStatusGlobalStatus=productStatusGlobalStatus, physicalEnvironmentInputEntry=physicalEnvironmentInputEntry, productStatusLastGlobalStatus=productStatusLastGlobalStatus, trapLoadSegment2On=trapLoadSegment2On, trapRectifierOverload=trapRectifierOverload, trapBatteryTestInProgress=trapBatteryTestInProgress, trapFromBypassCommand=trapFromBypassCommand, trapNegDCLinkOverVoltageOk=trapNegDCLinkOverVoltageOk, physicalLoadSegment2StartupAfterDelay=physicalLoadSegment2StartupAfterDelay, trapInverterOverload=trapInverterOverload, trapNegDCLinkUnderVoltageOk=trapNegDCLinkUnderVoltageOk, trapInverterOverVoltage=trapInverterOverVoltage, trapLevel2Overload=trapLevel2Overload, physicalEnvironmentValuesHumidityHigh=physicalEnvironmentValuesHumidityHigh, physicalIdentConverterType=physicalIdentConverterType, physicalEnvironmentValues=physicalEnvironmentValues, trapDCLinkImbalanceOk=trapDCLinkImbalanceOk, trapFanFailure=trapFanFailure, physicalOutputCumulativeConsumption=physicalOutputCumulativeConsumption, productIDBuildNumber=productIDBuildNumber, trapInputOverVoltage=trapInputOverVoltage, trapABMOff=trapABMOff, physicalLoadSegment2ShutdownAfterDelay=physicalLoadSegment2ShutdownAfterDelay, trapBypassVoltageOutOfRange=trapBypassVoltageOutOfRange, trapBatteryReplacementDone=trapBatteryReplacementDone, trapFanOk=trapFanOk, trapInHighEfficiencyMode=trapInHighEfficiencyMode, trapEnvironTemperatureHigh=trapEnvironTemperatureHigh, physicalUPSDateTime=physicalUPSDateTime, physicalRectifierNegVoltage=physicalRectifierNegVoltage, trapShutdownImminentOver=trapShutdownImminentOver, trapOutputReturnFromShortCircuit=trapOutputReturnFromShortCircuit, trapBatteryOverVoltage=trapBatteryOverVoltage, physicalEnvironmentInputOpenedState=physicalEnvironmentInputOpenedState, physicalRectifier=physicalRectifier, trapEepromFailure=trapEepromFailure, physicalEnvironmentInputClosedState=physicalEnvironmentInputClosedState, physicalLoadSegment=physicalLoadSegment, physicalLoadSegment1StartupAfterDelay=physicalLoadSegment1StartupAfterDelay, physicalIdentReferenceNumber=physicalIdentReferenceNumber, trapRectifierOverloadOk=trapRectifierOverloadOk, trapLevel3Overload=trapLevel3Overload, trapOnBoost=trapOnBoost, trapInputOverVoltageOk=trapInputOverVoltageOk, trapBatteryDisconnected=trapBatteryDisconnected, trapBypassVoltageOutOfRangeOk=trapBypassVoltageOutOfRangeOk, dell=dell, physicalUPS=physicalUPS, trapEnvironInput1Open=trapEnvironInput1Open, trapReturnFromHighEfficiencyMode=trapReturnFromHighEfficiencyMode, productStatusTimeStamp=productStatusTimeStamp, physicalBattery=physicalBattery, trapPosDCLinkUnderVoltageOk=trapPosDCLinkUnderVoltageOk, physicalEnvironmentValuesTemperature=physicalEnvironmentValuesTemperature, trapBatteryTestDone=trapBatteryTestDone, physicalLoadSegment2RuntimeToShutdown=physicalLoadSegment2RuntimeToShutdown, physicalOutputPeakHeadroomTimestamp=physicalOutputPeakHeadroomTimestamp, trapLevel1Overload=trapLevel1Overload, trapRectifierOk=trapRectifierOk, trapCommunicationLost=trapCommunicationLost, trapBatteryNeedReplacement=trapBatteryNeedReplacement, trapShutdownImminent=trapShutdownImminent, trapEnvironInput2Open=trapEnvironInput2Open, physicalBatteryTestStatus=physicalBatteryTestStatus, trapUPSOnBypass=trapUPSOnBypass, trapReturnFromBuck=trapReturnFromBuck, trapOutputShortCircuit=trapOutputShortCircuit, physicalOutputCumulativeConsumptionTimestamp=physicalOutputCumulativeConsumptionTimestamp, physicalBatteryABMStatus=physicalBatteryABMStatus, trapDCLinkImbalance=trapDCLinkImbalance, productIDDisplayName=productIDDisplayName, trapLoadSegment1Off=trapLoadSegment1Off, trapEnvironComFailure=trapEnvironComFailure, trapNegDCLinkUnderVoltage=trapNegDCLinkUnderVoltage, productStatusGetTimeOut=productStatusGetTimeOut, trapUPSReturnFromBypass=trapUPSReturnFromBypass, trapChargerFailure=trapChargerFailure, trapUPSOff=trapUPSOff, physicalOutputPeakHeadroom=physicalOutputPeakHeadroom, physicalLoadSegment1RuntimeToShutdown=physicalLoadSegment1RuntimeToShutdown, trapBatteryOk=trapBatteryOk, trapSiteWiringOk=trapSiteWiringOk, physicalEnvironmentValuesTemperatureLow=physicalEnvironmentValuesTemperatureLow, trapEepromOk=trapEepromOk, trapRectifierFault=trapRectifierFault, trapInverterUnderVoltage=trapInverterUnderVoltage, physicalEnvironmentSensorName=physicalEnvironmentSensorName, trapEnvironHumidityHigh=trapEnvironHumidityHigh, upsdell=upsdell, trapNegDCLinkOverVoltage=trapNegDCLinkOverVoltage, trapBypassFrequencyOutOfRangeOk=trapBypassFrequencyOutOfRangeOk, traps=traps, trapSiteWiringFault=trapSiteWiringFault, physicalEnvironmentInputIndex=physicalEnvironmentInputIndex, trapEnvironTemperatureLow=trapEnvironTemperatureLow, productStatus=productStatus, trapOnBuck=trapOnBuck, physicalEnvironmentInputName=physicalEnvironmentInputName, trapLevel1OverloadOk=trapLevel1OverloadOk, trapABMOn=trapABMOn, trapEnvironInput1Closed=trapEnvironInput1Closed, physicalUPSAlarmsStatus=physicalUPSAlarmsStatus, trapInputFrequencyOutOfRange=trapInputFrequencyOutOfRange, trapRemoteEmergencyPowerOff=trapRemoteEmergencyPowerOff, trapHeatsinkOvertemperature=trapHeatsinkOvertemperature, trapHeatsinkOvertemperatureOk=trapHeatsinkOvertemperatureOk, trapInputUnderVoltage=trapInputUnderVoltage, hardware=hardware, trapBatteryLow=trapBatteryLow, physicalIdent=physicalIdent, trapInverterUnderVoltageOk=trapInverterUnderVoltageOk, productStatusRefreshRate=productStatusRefreshRate, logical=logical, trapInverterOk=trapInverterOk, trapReturnFromBoost=trapReturnFromBoost, trapEnvironTemperatureOK=trapEnvironTemperatureOK, trapToBypassCommand=trapToBypassCommand, trapLevel2OverloadOk=trapLevel2OverloadOk, trapInverterOverVoltageOk=trapInverterOverVoltageOk, trapBypassNotAvailable=trapBypassNotAvailable, physicalEnvironmentValuesTemperatureHysteresis=physicalEnvironmentValuesTemperatureHysteresis, physicalEnvironmentValueshHumidityLow=physicalEnvironmentValueshHumidityLow, trapEnvironHumidityLow=trapEnvironHumidityLow, trapInputFrequencyOutOfRangeOk=trapInputFrequencyOutOfRangeOk, productID=productID, physicalRectifierPosVoltage=physicalRectifierPosVoltage, physicalOutputVA=physicalOutputVA, productIDVersion=productIDVersion, physicalUPSOutpoutSwitchable=physicalUPSOutpoutSwitchable, trapPosDCLinkOverVoltageOk=trapPosDCLinkOverVoltageOk, productIDDescription=productIDDescription, trapLoadSegment1On=trapLoadSegment1On, physicalOutputInstantHeadroom=physicalOutputInstantHeadroom, trapPosDCLinkUnderVoltage=trapPosDCLinkUnderVoltage, trapEnvironHumidityOK=trapEnvironHumidityOK, trapChargerOk=trapChargerOk, trapCommunicationRestored=trapCommunicationRestored, trapEnvironInput2Closed=trapEnvironInput2Closed, trapBatteryConnected=trapBatteryConnected)
