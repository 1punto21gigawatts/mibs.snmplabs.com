#
# PySNMP MIB module SONICWALL-SSL-TRAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SONICWALL-SSL-TRAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:09:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, Counter32, ObjectIdentity, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, MibIdentifier, Integer32, NotificationType, TimeTicks, Bits, Unsigned32, NotificationType, ModuleIdentity, Gauge32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Counter32", "ObjectIdentity", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "MibIdentifier", "Integer32", "NotificationType", "TimeTicks", "Bits", "Unsigned32", "NotificationType", "ModuleIdentity", "Gauge32", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
sonicWALL = MibIdentifier((1, 3, 6, 1, 4, 1, 8714))
sonicSEC = MibIdentifier((1, 3, 6, 1, 4, 1, 8714, 2))
sonicSSL = MibIdentifier((1, 3, 6, 1, 4, 1, 8714, 2, 1))
sonicSSLTran = ModuleIdentity((1, 3, 6, 1, 4, 1, 8714, 2, 1, 7))
if mibBuilder.loadTexts: sonicSSLTran.setLastUpdated('200203061330Z')
if mibBuilder.loadTexts: sonicSSLTran.setOrganization('SonicWALL, Inc.')
if mibBuilder.loadTexts: sonicSSLTran.setContactInfo(' SonicWall Inc. Postal: 1160 Bordeaux Dr. Sunnyvale, CA 94089 USA Tel: +1 408 745 9600 Fax: +1 408 745 9300 E-mail: support@sonicwall.com')
if mibBuilder.loadTexts: sonicSSLTran.setDescription('The MIB module for SonicWALL enterprise SSL Transaction parameters statistics, and configuration objects and traps.')
sslTranStats = MibIdentifier((1, 3, 6, 1, 4, 1, 8714, 2, 1, 7, 2))
totalRSAOperations = MibScalar((1, 3, 6, 1, 4, 1, 8714, 2, 1, 7, 2, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalRSAOperations.setStatus('mandatory')
if mibBuilder.loadTexts: totalRSAOperations.setDescription('The total number of RSA operations performed on the device.')
connRejNoRes = MibScalar((1, 3, 6, 1, 4, 1, 8714, 2, 1, 7, 2, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRejNoRes.setStatus('mandatory')
if mibBuilder.loadTexts: connRejNoRes.setDescription('SSL connections rejected due to low resources - indicates that the limit to server connections for existing resources was reached resulting in the rejection of additional connections.')
activeConnBlock = MibScalar((1, 3, 6, 1, 4, 1, 8714, 2, 1, 7, 2, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeConnBlock.setStatus('mandatory')
if mibBuilder.loadTexts: activeConnBlock.setDescription('Active SSL connection blocks - equivalent to number of active client SSL connections')
activeClientConns = MibScalar((1, 3, 6, 1, 4, 1, 8714, 2, 1, 7, 2, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeClientConns.setStatus('mandatory')
if mibBuilder.loadTexts: activeClientConns.setDescription('Active client SSL connections.')
connAccepted = MibScalar((1, 3, 6, 1, 4, 1, 8714, 2, 1, 7, 2, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connAccepted.setStatus('mandatory')
if mibBuilder.loadTexts: connAccepted.setDescription('Total SSL connections accepted')
activeServerConns = MibScalar((1, 3, 6, 1, 4, 1, 8714, 2, 1, 7, 2, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeServerConns.setStatus('mandatory')
if mibBuilder.loadTexts: activeServerConns.setDescription('Active backend webserver connections')
sslNegRefused = MibScalar((1, 3, 6, 1, 4, 1, 8714, 2, 1, 7, 2, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslNegRefused.setStatus('mandatory')
if mibBuilder.loadTexts: sslNegRefused.setDescription('SSL Connection negotiations refused')
sslNegAccept = MibScalar((1, 3, 6, 1, 4, 1, 8714, 2, 1, 7, 2, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslNegAccept.setStatus('mandatory')
if mibBuilder.loadTexts: sslNegAccept.setDescription('Number of successful SSL socket negotiations')
activeOpenSockets = MibScalar((1, 3, 6, 1, 4, 1, 8714, 2, 1, 7, 2, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeOpenSockets.setStatus('mandatory')
if mibBuilder.loadTexts: activeOpenSockets.setDescription('Active SSL related open socket count. Includes client, server, and listening sockets.')
sslTranErrs = MibIdentifier((1, 3, 6, 1, 4, 1, 8714, 2, 1, 7, 3))
connErrs = MibScalar((1, 3, 6, 1, 4, 1, 8714, 2, 1, 7, 3, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connErrs.setStatus('mandatory')
if mibBuilder.loadTexts: connErrs.setDescription('Connection failures to the remote server.')
connBlockErrs = MibScalar((1, 3, 6, 1, 4, 1, 8714, 2, 1, 7, 3, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connBlockErrs.setStatus('mandatory')
if mibBuilder.loadTexts: connBlockErrs.setDescription('SSL Connection Block errors')
sslNegErrs = MibScalar((1, 3, 6, 1, 4, 1, 8714, 2, 1, 7, 3, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslNegErrs.setStatus('mandatory')
if mibBuilder.loadTexts: sslNegErrs.setDescription('SSL Connection Negotiation errors')
sslErrors = MibScalar((1, 3, 6, 1, 4, 1, 8714, 2, 1, 7, 3, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslErrors.setStatus('mandatory')
if mibBuilder.loadTexts: sslErrors.setDescription('Total SSL errors')
openSSLAcceptErrs = MibScalar((1, 3, 6, 1, 4, 1, 8714, 2, 1, 7, 3, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: openSSLAcceptErrs.setStatus('mandatory')
if mibBuilder.loadTexts: openSSLAcceptErrs.setDescription('Total SSL accept errors')
openSSLConnErrs = MibScalar((1, 3, 6, 1, 4, 1, 8714, 2, 1, 7, 3, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: openSSLConnErrs.setStatus('mandatory')
if mibBuilder.loadTexts: openSSLConnErrs.setDescription('Total SSL connection errors')
totSocketErrs = MibScalar((1, 3, 6, 1, 4, 1, 8714, 2, 1, 7, 3, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totSocketErrs.setStatus('mandatory')
if mibBuilder.loadTexts: totSocketErrs.setDescription('Total SSL socket errors')
openSSLWriteErr = MibScalar((1, 3, 6, 1, 4, 1, 8714, 2, 1, 7, 3, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: openSSLWriteErr.setStatus('mandatory')
if mibBuilder.loadTexts: openSSLWriteErr.setDescription('SSL client write errors')
sslPipeWriteErr = MibScalar((1, 3, 6, 1, 4, 1, 8714, 2, 1, 7, 3, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslPipeWriteErr.setStatus('mandatory')
if mibBuilder.loadTexts: sslPipeWriteErr.setDescription('SSL client pipe write errors')
toServerWriteErr = MibScalar((1, 3, 6, 1, 4, 1, 8714, 2, 1, 7, 3, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: toServerWriteErr.setStatus('mandatory')
if mibBuilder.loadTexts: toServerWriteErr.setDescription('Backend server write errors')
toServerPipeWriteErr = MibScalar((1, 3, 6, 1, 4, 1, 8714, 2, 1, 7, 3, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: toServerPipeWriteErr.setStatus('mandatory')
if mibBuilder.loadTexts: toServerPipeWriteErr.setDescription('Backend server write pipe errors')
openSSLReadErr = MibScalar((1, 3, 6, 1, 4, 1, 8714, 2, 1, 7, 3, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: openSSLReadErr.setStatus('mandatory')
if mibBuilder.loadTexts: openSSLReadErr.setDescription('SSL client read errors')
sslPipeReadErr = MibScalar((1, 3, 6, 1, 4, 1, 8714, 2, 1, 7, 3, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslPipeReadErr.setStatus('mandatory')
if mibBuilder.loadTexts: sslPipeReadErr.setDescription('SSL client read pipe errors')
toServerReadErr = MibScalar((1, 3, 6, 1, 4, 1, 8714, 2, 1, 7, 3, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: toServerReadErr.setStatus('mandatory')
if mibBuilder.loadTexts: toServerReadErr.setDescription('Backend server read errors')
toServerPipeReadErr = MibScalar((1, 3, 6, 1, 4, 1, 8714, 2, 1, 7, 3, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: toServerPipeReadErr.setStatus('mandatory')
if mibBuilder.loadTexts: toServerPipeReadErr.setDescription('Backend server pipe read errors')
sslTranEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 8714, 2, 1, 7, 10))
sslTpsChangeHi = NotificationType((1, 3, 6, 1, 4, 1, 8714, 2, 1, 7, 10) + (0,4))
if mibBuilder.loadTexts: sslTpsChangeHi.setDescription('The number of SSL negotiations per second has transitioned above the upper threshold limit.')
sslTpsChangeLo = NotificationType((1, 3, 6, 1, 4, 1, 8714, 2, 1, 7, 10) + (0,5))
if mibBuilder.loadTexts: sslTpsChangeLo.setDescription('The number of SSL transactions per second has transitioned below the lower threshold limit.')
sslTotalConnectsChangeHi = NotificationType((1, 3, 6, 1, 4, 1, 8714, 2, 1, 7, 10) + (0,6))
if mibBuilder.loadTexts: sslTotalConnectsChangeHi.setDescription('The number of SSL connections has transitioned above the upper threshold limit.')
sslTotalConnectsChangeLo = NotificationType((1, 3, 6, 1, 4, 1, 8714, 2, 1, 7, 10) + (0,7))
if mibBuilder.loadTexts: sslTotalConnectsChangeLo.setDescription('The number of SSL connections has transitioned below the lower threshould limit.')
mibBuilder.exportSymbols("SONICWALL-SSL-TRAN-MIB", activeConnBlock=activeConnBlock, openSSLConnErrs=openSSLConnErrs, activeServerConns=activeServerConns, activeOpenSockets=activeOpenSockets, sslPipeWriteErr=sslPipeWriteErr, sslTpsChangeHi=sslTpsChangeHi, sslErrors=sslErrors, totSocketErrs=totSocketErrs, sslNegRefused=sslNegRefused, toServerWriteErr=toServerWriteErr, toServerPipeReadErr=toServerPipeReadErr, sslTranEvents=sslTranEvents, toServerPipeWriteErr=toServerPipeWriteErr, sslTpsChangeLo=sslTpsChangeLo, connRejNoRes=connRejNoRes, sonicSSL=sonicSSL, openSSLWriteErr=openSSLWriteErr, sslTotalConnectsChangeHi=sslTotalConnectsChangeHi, totalRSAOperations=totalRSAOperations, sslNegAccept=sslNegAccept, sslTotalConnectsChangeLo=sslTotalConnectsChangeLo, sonicSSLTran=sonicSSLTran, sslTranStats=sslTranStats, connAccepted=connAccepted, sonicWALL=sonicWALL, sslNegErrs=sslNegErrs, toServerReadErr=toServerReadErr, openSSLAcceptErrs=openSSLAcceptErrs, sslTranErrs=sslTranErrs, PYSNMP_MODULE_ID=sonicSSLTran, sslPipeReadErr=sslPipeReadErr, sonicSEC=sonicSEC, connErrs=connErrs, connBlockErrs=connBlockErrs, activeClientConns=activeClientConns, openSSLReadErr=openSSLReadErr)
