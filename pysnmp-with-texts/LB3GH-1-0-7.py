#
# PySNMP MIB module LB3GH-1-0-7 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LB3GH-1-0-7
# Produced by pysmi-0.3.4 at Wed May  1 14:05:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, TimeTicks, NotificationType, MibIdentifier, Counter64, Counter32, IpAddress, Unsigned32, ObjectIdentity, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ModuleIdentity, Gauge32, Integer32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "TimeTicks", "NotificationType", "MibIdentifier", "Counter64", "Counter32", "IpAddress", "Unsigned32", "ObjectIdentity", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ModuleIdentity", "Gauge32", "Integer32", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
a3Com = MibIdentifier((1, 3, 6, 1, 4, 1, 43))
lb3gh = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7))
lb3ghMib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7, 1))
chassis = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7, 1, 1))
slot = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7, 1, 2))
smm = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7, 1, 3))
fbcm = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7, 1, 4))
fcm = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7, 1, 5))
port = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7, 1, 6))
elm = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7, 1, 7))
elmFddiMAC = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7, 1, 8))
elmEthernetPort = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7, 1, 9))
elmMACAddress = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7, 1, 10))
lbSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7, 1, 11))
lbSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7, 1, 12))
lbFddiMac = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7, 1, 13))
lbEthernetPort = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7, 1, 14))
lbFddiPort = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7, 1, 15))
lbExpress = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7, 1, 16))
lbExpressFddiPort = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7, 1, 17))
lbExpressEthernetPort = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7, 1, 18))
lbExpressEthernetPortAddress = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7, 1, 19))
lbPowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7, 1, 20))
lbBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7, 1, 21))
lbTrapEnterprise = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7, 1, 22))
lbTrapDest = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7, 1, 23))
chassisId = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisId.setStatus('deprecated')
if mibBuilder.loadTexts: chassisId.setDescription('The unique identifier assigned to this station during manufacturing.')
chassisType = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("linkBuilder3GH", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisType.setStatus('deprecated')
if mibBuilder.loadTexts: chassisType.setDescription('The type of the LinkBuilder 3GH chassis.')
chassisRevision = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisRevision.setStatus('deprecated')
if mibBuilder.loadTexts: chassisRevision.setDescription('The revision number of this chassis.')
chassisName = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisName.setStatus('deprecated')
if mibBuilder.loadTexts: chassisName.setDescription('The text string describing this chassis.')
chassisNameAbbrev = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisNameAbbrev.setStatus('deprecated')
if mibBuilder.loadTexts: chassisNameAbbrev.setDescription('The text string describing the generic name for this chassis.')
chassisManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisManufacturer.setStatus('deprecated')
if mibBuilder.loadTexts: chassisManufacturer.setDescription('The text string describing the manufacturer of this chassis.')
chassisSlotCount = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSlotCount.setStatus('deprecated')
if mibBuilder.loadTexts: chassisSlotCount.setDescription('The number of slots in this chassis.')
chassisBuildTime = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisBuildTime.setStatus('deprecated')
if mibBuilder.loadTexts: chassisBuildTime.setDescription('The build time of the LinkBuilder 3GH system software.')
chassisSoftwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSoftwareRevision.setStatus('deprecated')
if mibBuilder.loadTexts: chassisSoftwareRevision.setDescription('The revision number of the LinkBuilder 3GH system software.')
chassisControlPanelColumns = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisControlPanelColumns.setStatus('deprecated')
if mibBuilder.loadTexts: chassisControlPanelColumns.setDescription('The number of columns in the control panel display.')
chassisControlPanelLines = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisControlPanelLines.setStatus('deprecated')
if mibBuilder.loadTexts: chassisControlPanelLines.setDescription('The number of lines in the control panel display.')
chassisControlPanelText = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisControlPanelText.setStatus('deprecated')
if mibBuilder.loadTexts: chassisControlPanelText.setDescription('The text currently displayed in the control panel display.')
chassisAction = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisAction.setStatus('deprecated')
if mibBuilder.loadTexts: chassisAction.setDescription('This object, when read, always returns the value other (1). The result of setting this object to each acceptable value is: reset: resets the LinkBuilder 3GH system.')
slotTable = MibTable((1, 3, 6, 1, 4, 1, 43, 7, 1, 2, 1), )
if mibBuilder.loadTexts: slotTable.setStatus('deprecated')
if mibBuilder.loadTexts: slotTable.setDescription('A list of slot entries. A single instance of this object exists for each slot in the LinkBuilder 3GH chassis.')
slotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 7, 1, 2, 1, 1), ).setIndexNames((0, "LB3GH-1-0-7", "slotIndex"))
if mibBuilder.loadTexts: slotEntry.setStatus('deprecated')
if mibBuilder.loadTexts: slotEntry.setDescription('A slot entry contains information common to a specified slot within a LinkBuilder 3GH system.')
slotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotIndex.setStatus('deprecated')
if mibBuilder.loadTexts: slotIndex.setDescription('The physical slot number of this slot within the LinkBuilder 3GH chassis.')
slotBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("emptySlot", 2), ("smm", 3), ("fbcm", 4), ("fcm", 5), ("elm", 6), ("esm", 7), ("fcm2", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBoardType.setStatus('deprecated')
if mibBuilder.loadTexts: slotBoardType.setDescription('The type of board residing in this slot.')
slotBoardRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBoardRevision.setStatus('deprecated')
if mibBuilder.loadTexts: slotBoardRevision.setDescription('The revision number of the board in this slot.')
slotBoardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notPresent", 1), ("testing", 2), ("offline", 3), ("online", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBoardStatus.setStatus('deprecated')
if mibBuilder.loadTexts: slotBoardStatus.setDescription('The status of the board in this slot.')
slotBoardName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBoardName.setStatus('deprecated')
if mibBuilder.loadTexts: slotBoardName.setDescription('The text string describing this board type.')
slotBoardNameAbbrev = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBoardNameAbbrev.setStatus('deprecated')
if mibBuilder.loadTexts: slotBoardNameAbbrev.setDescription('The abbreviation describing this board type.')
slotBoardAction = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("runDiagnostics", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBoardAction.setStatus('deprecated')
if mibBuilder.loadTexts: slotBoardAction.setDescription("This object, when read, always returns the value other (1). The result of setting this object to each acceptable value is: runDiagnostics: runs the board's offline diagnostics.")
smmTable = MibTable((1, 3, 6, 1, 4, 1, 43, 7, 1, 3, 1), )
if mibBuilder.loadTexts: smmTable.setStatus('deprecated')
if mibBuilder.loadTexts: smmTable.setDescription('A list of System Management Module (SMM) entries. An entry exists for each Slot Table Entry whose board type is SMM. This table is indexed by the physical slot number of this SMM within the LinkBuilder 3GH chassis. The entries need not have consecutive slot indices. Note that this object has been marked as deprecated and is included here for backward compatibilty. It will be removed from the next revision of the lb3gh MIB. The objects defined in this table are now available via the lbSlot table.')
smmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 7, 1, 3, 1, 1), ).setIndexNames((0, "LB3GH-1-0-7", "smmSlotIndex"))
if mibBuilder.loadTexts: smmEntry.setStatus('deprecated')
if mibBuilder.loadTexts: smmEntry.setDescription('An SMM entry contains information common to a single System Management Module (SMM) within a LinkBuilder 3GH system.')
smmSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smmSlotIndex.setStatus('deprecated')
if mibBuilder.loadTexts: smmSlotIndex.setDescription('The physical slot number of this slot within the LinkBuilder 3GH chassis.')
smmEthernetPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smmEthernetPortCount.setStatus('deprecated')
if mibBuilder.loadTexts: smmEthernetPortCount.setDescription('The number of Ethernet ports on this board.')
smmBaseEthernetPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smmBaseEthernetPortIndex.setStatus('deprecated')
if mibBuilder.loadTexts: smmBaseEthernetPortIndex.setDescription('The system-wide index for the first Ethernet port on this board.')
fbcmTable = MibTable((1, 3, 6, 1, 4, 1, 43, 7, 1, 4, 1), )
if mibBuilder.loadTexts: fbcmTable.setStatus('deprecated')
if mibBuilder.loadTexts: fbcmTable.setDescription('A list of FDDI Backbone Connectivity Module (FBCM) entries. An entry exists for each Slot Table Entry whose board type is FBCM. This table is indexed by the physical slot number of this FBCM within the LinkBuilder 3GH chassis. The entries need not have consecutive slot indices. Note that this object has been marked as deprecated and is included here for backward compatibilty. It will be removed from the next revision of the lb3gh MIB. The objects defined in this table are now available via the lbSlot table.')
fbcmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 7, 1, 4, 1, 1), ).setIndexNames((0, "LB3GH-1-0-7", "fbcmSlotIndex"))
if mibBuilder.loadTexts: fbcmEntry.setStatus('deprecated')
if mibBuilder.loadTexts: fbcmEntry.setDescription('An FBCM entry contains information common to a single FDDI Backbone Connectivity Module (FBCM) within a LinkBuilder 3GH system.')
fbcmSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fbcmSlotIndex.setStatus('deprecated')
if mibBuilder.loadTexts: fbcmSlotIndex.setDescription('The physical slot number of this slot within the LinkBuilder 3GH chassis.')
fbcmMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fbcmMACCount.setStatus('deprecated')
if mibBuilder.loadTexts: fbcmMACCount.setDescription('The number of FDDI MACs present on this board.')
fbcmBaseMACIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fbcmBaseMACIndex.setStatus('deprecated')
if mibBuilder.loadTexts: fbcmBaseMACIndex.setDescription('The system-wide index of the first FDDI MAC on this board. Additional MACs on this board will have consecutively increasing MAC indices following this index.')
fbcmPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fbcmPortCount.setStatus('deprecated')
if mibBuilder.loadTexts: fbcmPortCount.setDescription('The number of FDDI ports present on this board.')
fbcmBasePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fbcmBasePortIndex.setStatus('deprecated')
if mibBuilder.loadTexts: fbcmBasePortIndex.setDescription('The system-wide index of the first FDDI port on this board. Additional ports on this board will have consecutively increasing port indices following this index.')
fcmTable = MibTable((1, 3, 6, 1, 4, 1, 43, 7, 1, 5, 1), )
if mibBuilder.loadTexts: fcmTable.setStatus('deprecated')
if mibBuilder.loadTexts: fcmTable.setDescription('A list of FDDI Concentrator Module (FCM) entries. An entry exists for each Slot Table Entry whose board type is FCM. This table is indexed by the physical slot number of this FCM within the LinkBuilder 3GH chassis. The entries need not have consecutive slot indices. Note that this object has been marked as deprecated and is included here for backward compatibilty. It will be removed from the next revision of the lb3gh MIB. The objects defined in this table are now available via the lbSlot table.')
fcmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 7, 1, 5, 1, 1), ).setIndexNames((0, "LB3GH-1-0-7", "fcmSlotIndex"))
if mibBuilder.loadTexts: fcmEntry.setStatus('deprecated')
if mibBuilder.loadTexts: fcmEntry.setDescription('An FCM entry contains information common to a single FDDI Concentrator Module (FCM) within a LinkBuilder 3GH system.')
fcmSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmSlotIndex.setStatus('deprecated')
if mibBuilder.loadTexts: fcmSlotIndex.setDescription('The physical slot number of this slot within the LinkBuilder 3GH chassis.')
fcmPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortCount.setStatus('deprecated')
if mibBuilder.loadTexts: fcmPortCount.setDescription('The number of FDDI ports present on this board.')
fcmBasePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmBasePortIndex.setStatus('deprecated')
if mibBuilder.loadTexts: fcmBasePortIndex.setDescription('The system-wide index of the first FDDI port on this board. Additional ports on this board will have consecutively increasing port indices following this index.')
portTable = MibTable((1, 3, 6, 1, 4, 1, 43, 7, 1, 6, 1), )
if mibBuilder.loadTexts: portTable.setStatus('deprecated')
if mibBuilder.loadTexts: portTable.setDescription('A list of port entries. A single instance of this object exists for each port (excluding Ethernet ports) in the LinkBuilder 3GH system. Note that this object has been marked as deprecated and is included here for backward compatibilty. It will be removed from the next revision of the lb3gh MIB. The objects defined in this table are now available either via the fddiPort group or the enetPort group.')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 7, 1, 6, 1, 1), ).setIndexNames((0, "LB3GH-1-0-7", "portSlotIndex"), (0, "LB3GH-1-0-7", "portIndex"))
if mibBuilder.loadTexts: portEntry.setStatus('deprecated')
if mibBuilder.loadTexts: portEntry.setDescription('A port entry contains information common to a particular port located on a particular board within the LinkBuilder 3GH system.')
portSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSlotIndex.setStatus('deprecated')
if mibBuilder.loadTexts: portSlotIndex.setDescription('The physical slot number of this slot within the LinkBuilder 3GH chassis.')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndex.setStatus('deprecated')
if mibBuilder.loadTexts: portIndex.setDescription('The index of the port on a particular slot.')
portLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLabel.setStatus('deprecated')
if mibBuilder.loadTexts: portLabel.setDescription('An ASCII text string describing this port.')
elmTable = MibTable((1, 3, 6, 1, 4, 1, 43, 7, 1, 7, 1), )
if mibBuilder.loadTexts: elmTable.setStatus('deprecated')
if mibBuilder.loadTexts: elmTable.setDescription('A list of Ethernet LAN Module (ELM) entries. An entry exists for each Slot Table Entry whose board type is ELM. This table is indexed by the physical slot number of this ELM within the LinkBuilder 3GH chassis. The entries need not have consecutive slot indices. Note that this object has been marked as deprecated and is included here for backward compatibilty. It will be removed from the next revision of the lb3gh MIB. The objects defined in this table are now available either via the slot group or the express group.')
elmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 7, 1, 7, 1, 1), ).setIndexNames((0, "LB3GH-1-0-7", "elmSlotIndex"))
if mibBuilder.loadTexts: elmEntry.setStatus('deprecated')
if mibBuilder.loadTexts: elmEntry.setDescription('An ELM entry contains information common to a single Ethernet LAN Module (ELM) within a LinkBuilder 3GH system.')
elmSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elmSlotIndex.setStatus('deprecated')
if mibBuilder.loadTexts: elmSlotIndex.setDescription('The physical slot number of this slot within the LinkBuilder 3GH chassis.')
elmFddiMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elmFddiMACCount.setStatus('deprecated')
if mibBuilder.loadTexts: elmFddiMACCount.setDescription('The number of FDDI MACs present on this board.')
elmBaseFddiMACIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elmBaseFddiMACIndex.setStatus('deprecated')
if mibBuilder.loadTexts: elmBaseFddiMACIndex.setDescription('The system-wide index of the first FDDI MAC on this board. Additional ports on this board will have consecutively increasing port indices following this index.')
elmEthernetPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elmEthernetPortCount.setStatus('deprecated')
if mibBuilder.loadTexts: elmEthernetPortCount.setDescription('The number of Ethernet ports present on this board.')
elmBaseEthernetPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 7, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elmBaseEthernetPortIndex.setStatus('deprecated')
if mibBuilder.loadTexts: elmBaseEthernetPortIndex.setDescription('The system-wide index of the first Ethernet port on this board. Additional ports on this board will have consecutively increasing port indices following this index.')
elmAddressThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 7, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elmAddressThreshold.setStatus('deprecated')
if mibBuilder.loadTexts: elmAddressThreshold.setDescription('A reporting threshold for the total number of Ethernet addresses known for this board. When the threshold is reached, the event elmAddress- ThresholdEvent is generated.')
elmFddiMACTable = MibTable((1, 3, 6, 1, 4, 1, 43, 7, 1, 8, 1), )
if mibBuilder.loadTexts: elmFddiMACTable.setStatus('deprecated')
if mibBuilder.loadTexts: elmFddiMACTable.setDescription('A list of ELM FDDI MAC entries. The entries need not have consecutive slot indices. Note that this object has been marked as deprecated and is included here for backward compatibilty. It will be removed from the next revision of the lb3gh MIB. The objects defined in this table are now available via the expressFddiPort group.')
elmFddiMACEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 7, 1, 8, 1, 1), ).setIndexNames((0, "LB3GH-1-0-7", "elmFddiSlotIndex"), (0, "LB3GH-1-0-7", "elmFddiMACIndex"))
if mibBuilder.loadTexts: elmFddiMACEntry.setStatus('deprecated')
if mibBuilder.loadTexts: elmFddiMACEntry.setDescription('An ELM FDDI MAC entry contains information common to an FDDI MAC located on an ELM within a LinkBuilder 3GH system.')
elmFddiSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elmFddiSlotIndex.setStatus('deprecated')
if mibBuilder.loadTexts: elmFddiSlotIndex.setDescription('The physical slot number of this board.')
elmFddiMACIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elmFddiMACIndex.setStatus('deprecated')
if mibBuilder.loadTexts: elmFddiMACIndex.setDescription('A unique value for each FDDI MAC on this board.')
elmFddiMACForwardedCts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 8, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elmFddiMACForwardedCts.setStatus('deprecated')
if mibBuilder.loadTexts: elmFddiMACForwardedCts.setDescription('A counter indicating the number of frames forwarded by a MAC from an Ethernet port to the FDDI network.')
elmFddiMACDroppedCts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 8, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elmFddiMACDroppedCts.setStatus('deprecated')
if mibBuilder.loadTexts: elmFddiMACDroppedCts.setDescription('A counter indicating the number of frames that were dropped by a MAC due to local resource limitation or unknown destination MAC address.')
elmEthernetPortTable = MibTable((1, 3, 6, 1, 4, 1, 43, 7, 1, 9, 1), )
if mibBuilder.loadTexts: elmEthernetPortTable.setStatus('deprecated')
if mibBuilder.loadTexts: elmEthernetPortTable.setDescription('A list of ELM Ethernet LAN port entries. The slot indices may not be consecutive. The MAC indices must be consecutive. Note that this object has been marked as deprecated and is included here for backward compatibilty. It will be removed from the next revision of the lb3gh MIB. The objects defined in this table are now available via the expressEthernetPort group.')
elmEthernetPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 7, 1, 9, 1, 1), ).setIndexNames((0, "LB3GH-1-0-7", "elmEthernetPortSlotIndex"), (0, "LB3GH-1-0-7", "elmEthernetPortIndex"))
if mibBuilder.loadTexts: elmEthernetPortEntry.setStatus('deprecated')
if mibBuilder.loadTexts: elmEthernetPortEntry.setDescription('An ELM Ethernet LAN port entry contains information common to an Ethernet port located on an Ethernet LAN Module (ELM) within a LinkBuilder 3GH system.')
elmEthernetPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elmEthernetPortSlotIndex.setStatus('deprecated')
if mibBuilder.loadTexts: elmEthernetPortSlotIndex.setDescription('The physical slot number of the slot containing this port within the LinkBuilder 3GH chassis.')
elmEthernetPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elmEthernetPortIndex.setStatus('deprecated')
if mibBuilder.loadTexts: elmEthernetPortIndex.setDescription('The index of the port on a particular ELM board. This index ranges from 1 to elmEthernetPortCount.')
elmEthernetPortLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 9, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elmEthernetPortLabel.setStatus('deprecated')
if mibBuilder.loadTexts: elmEthernetPortLabel.setDescription('An ASCII text string describing this Ethernet port.')
elmEthernetPortForwardedCts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 9, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elmEthernetPortForwardedCts.setStatus('deprecated')
if mibBuilder.loadTexts: elmEthernetPortForwardedCts.setDescription('A counter indicating the number of frames forwarded from this Ethernet port onto the FDDI network.')
elmEthernetPortDroppedCts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 9, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elmEthernetPortDroppedCts.setStatus('deprecated')
if mibBuilder.loadTexts: elmEthernetPortDroppedCts.setDescription('A counter indicating the numer of frames received on this port that were dropped because the destination MAC address was determined to be on the same Ethernet segment as the source MAC address.')
elmEthernetPortUTurnCts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 9, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elmEthernetPortUTurnCts.setStatus('deprecated')
if mibBuilder.loadTexts: elmEthernetPortUTurnCts.setDescription('A counter indicating the number of frames received on this Ethernet port and directed to another Ethernet port.')
elmEthernetPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("onlineActive", 1), ("onlineInactive", 2), ("offline", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elmEthernetPortState.setStatus('deprecated')
if mibBuilder.loadTexts: elmEthernetPortState.setDescription('The state of the Ethernet LAN port. This value can be set to enable or disable the Ethernet LAN port.')
elmEthernetPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("freezeAddress", 2), ("flushAddress", 3), ("flushDynamicAddress", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elmEthernetPortAction.setStatus('deprecated')
if mibBuilder.loadTexts: elmEthernetPortAction.setDescription("This object, when read, always returns the value other (1). The result of setting this object to each acceptable value is: freezeAddress: causes all the learned dynamic addresses to be converted into static addresses. flushAddress: causes all the addresses to be flushed from a port's address list. flushDynamicAddress: causes all a port's dynamic addresses to be flushed from the port's address list.")
elmEthernetMACAddressTable = MibTable((1, 3, 6, 1, 4, 1, 43, 7, 1, 10, 1), )
if mibBuilder.loadTexts: elmEthernetMACAddressTable.setStatus('deprecated')
if mibBuilder.loadTexts: elmEthernetMACAddressTable.setDescription('A list of ELM Ethernet LAN Remote MAC Address entries. The slot indices may not be consecutive. The port indices must be consecutive. Note that this object has been marked as deprecated and is included here for backward compatibilty. It will be removed from the next revision of the lb3gh MIB. The objects defined in this table are now available via the expressEthernetPort group.')
elmEthernetMACAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 7, 1, 10, 1, 1), ).setIndexNames((0, "LB3GH-1-0-7", "elmEthernetMACAddressSlotIndex"), (0, "LB3GH-1-0-7", "elmEthernetMACAddressPortIndex"), (0, "LB3GH-1-0-7", "elmEthernetMACAddressIndex"))
if mibBuilder.loadTexts: elmEthernetMACAddressEntry.setStatus('deprecated')
if mibBuilder.loadTexts: elmEthernetMACAddressEntry.setDescription('A collection of information describing a remote Ethernet MAC detected to be attached to an Ethernet LAN port.')
elmEthernetMACAddressSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 10, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elmEthernetMACAddressSlotIndex.setStatus('deprecated')
if mibBuilder.loadTexts: elmEthernetMACAddressSlotIndex.setDescription('The physical slot number of the slot containing this ELM within the within th LinkBuilder 3GH chassis.')
elmEthernetMACAddressPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 10, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elmEthernetMACAddressPortIndex.setStatus('deprecated')
if mibBuilder.loadTexts: elmEthernetMACAddressPortIndex.setDescription('The port index of this address entry within the table. This index ranges from 1 to elmEthernetPortCount.')
elmEthernetMACAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 10, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elmEthernetMACAddressIndex.setStatus('deprecated')
if mibBuilder.loadTexts: elmEthernetMACAddressIndex.setDescription('The index of this address entry within the table.')
elmEthernetMACAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elmEthernetMACAddressType.setStatus('deprecated')
if mibBuilder.loadTexts: elmEthernetMACAddressType.setDescription('This object, when read, always returns the value other (1). Setting this object to invalid (2) removes the corresponding address entry from the table.')
elmEthernetMACAddressRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 10, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elmEthernetMACAddressRemoteAddress.setStatus('deprecated')
if mibBuilder.loadTexts: elmEthernetMACAddressRemoteAddress.setDescription('The remote MAC address detected on this Ethernet LAN port.')
elmEthernetMACAddressIsStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isStatic", 1), ("isDynamic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elmEthernetMACAddressIsStatic.setStatus('deprecated')
if mibBuilder.loadTexts: elmEthernetMACAddressIsStatic.setDescription('A value indicating whether this MAC address was statically configured or dynamically learned on this port.')
elmEthernetMACAddressStaticPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 10, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elmEthernetMACAddressStaticPort.setStatus('deprecated')
if mibBuilder.loadTexts: elmEthernetMACAddressStaticPort.setDescription('If the object elmEthernetMACAddress- IsStatic has value isStatic(1), this object indicates the port for which this MAC address was statically configured.')
elmEthernetMACAddressAge = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 10, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elmEthernetMACAddressAge.setStatus('deprecated')
if mibBuilder.loadTexts: elmEthernetMACAddressAge.setDescription("This object indicates the time elapsed since this MAC address was added to this port's address table.")
lbSystemId = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSystemId.setStatus('mandatory')
if mibBuilder.loadTexts: lbSystemId.setDescription('The unique identifier assigned to this system during manufacturing.')
lbSystemType = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("tweleveSlot", 2), ("fourSlot", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSystemType.setStatus('mandatory')
if mibBuilder.loadTexts: lbSystemType.setDescription('The type of the LinkBuilder system.')
lbSystemName = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 11, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSystemName.setStatus('mandatory')
if mibBuilder.loadTexts: lbSystemName.setDescription('The text string describing this system.')
lbSystemManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 11, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSystemManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: lbSystemManufacturer.setDescription('The text string describing the manufacturer of this system.')
lbSystemBackplaneRevision = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 11, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSystemBackplaneRevision.setStatus('mandatory')
if mibBuilder.loadTexts: lbSystemBackplaneRevision.setDescription('The revision level of the system backplane. Bits 6 and 7 indicate the artwork revision. Bits 0 through 5 indicate the rework level.')
lbSystemSlotCount = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 11, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSystemSlotCount.setStatus('mandatory')
if mibBuilder.loadTexts: lbSystemSlotCount.setDescription('The number of slots in the system.')
lbSystemMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 11, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSystemMemorySize.setStatus('mandatory')
if mibBuilder.loadTexts: lbSystemMemorySize.setDescription('The amount of memory (RAM), in bytes, present on the system processor board.')
lbSystemFlashMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 11, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSystemFlashMemorySize.setStatus('mandatory')
if mibBuilder.loadTexts: lbSystemFlashMemorySize.setDescription('The amount of flash memory, in bytes, present on the system processor board.')
lbSystemNvMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 11, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSystemNvMemorySize.setStatus('mandatory')
if mibBuilder.loadTexts: lbSystemNvMemorySize.setDescription('The amount of non-volatile memory, in bytes, present on the system processor board.')
lbSystemSoftwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 11, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSystemSoftwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: lbSystemSoftwareRevision.setDescription('The revision number of the LinkBuilder system software. Each byte indicates the following: byte 0: major release number. byte 1: minor release number. byte 2: update number. byte 3: bits 7-6: release type. bits 5-0: supplemental identifier.')
lbSystemBuildTime = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 11, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSystemBuildTime.setStatus('mandatory')
if mibBuilder.loadTexts: lbSystemBuildTime.setDescription('The build time of the system software.')
lbSystemControlPanelHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 11, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSystemControlPanelHardwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: lbSystemControlPanelHardwareRevision.setDescription('An 8-bit value specifying the revision level of the control panel hardware.')
lbSystemControlPanelSoftwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 11, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSystemControlPanelSoftwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: lbSystemControlPanelSoftwareRevision.setDescription('An 8-bit value specifying the revision level of the control panel software.')
lbSystemControlPanelLines = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 11, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSystemControlPanelLines.setStatus('mandatory')
if mibBuilder.loadTexts: lbSystemControlPanelLines.setDescription('The number of lines in the control panel display.')
lbSystemControlPanelColumns = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 11, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSystemControlPanelColumns.setStatus('mandatory')
if mibBuilder.loadTexts: lbSystemControlPanelColumns.setDescription('The number of columns in the control panel display.')
lbSystemControlPanelText = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 11, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSystemControlPanelText.setStatus('mandatory')
if mibBuilder.loadTexts: lbSystemControlPanelText.setDescription('The currently displayed text in the control panel display.')
lbSystemFddiMacCount = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 11, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSystemFddiMacCount.setStatus('mandatory')
if mibBuilder.loadTexts: lbSystemFddiMacCount.setDescription("The number of FDDI MAC's present in the system.")
lbSystemFddiPortCount = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 11, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSystemFddiPortCount.setStatus('mandatory')
if mibBuilder.loadTexts: lbSystemFddiPortCount.setDescription('The number of FDDI ports present in the system.')
lbSystemEthernetPortCount = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 11, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSystemEthernetPortCount.setStatus('mandatory')
if mibBuilder.loadTexts: lbSystemEthernetPortCount.setDescription('The number of ethernet ports present in the system.')
lbSystemExpressFunctionCount = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 11, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSystemExpressFunctionCount.setStatus('deprecated')
if mibBuilder.loadTexts: lbSystemExpressFunctionCount.setDescription('The number of Ethernet Express functions present in the system. Curently this value is equal to the number of Express boards present in the system.')
lbSystemExpressFddiPortCount = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 11, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSystemExpressFddiPortCount.setStatus('deprecated')
if mibBuilder.loadTexts: lbSystemExpressFddiPortCount.setDescription('The number of Ethernet Express FDDI ports present in the system.')
lbSystemExpressEthernetPortCount = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 11, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSystemExpressEthernetPortCount.setStatus('deprecated')
if mibBuilder.loadTexts: lbSystemExpressEthernetPortCount.setDescription('The number of Ethernet Express ethernet ports present in the system.')
lbSystemPowerSupplyCount = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 11, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSystemPowerSupplyCount.setStatus('mandatory')
if mibBuilder.loadTexts: lbSystemPowerSupplyCount.setDescription('The number of power supply units present in the system.')
lbSystemAction = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 11, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbSystemAction.setStatus('mandatory')
if mibBuilder.loadTexts: lbSystemAction.setDescription('This object, when read, always returns the value other (1). The behavior of setting this object to each of the acceptable values is as follows: reset: resets the LinkBuilder system.')
lbSystemBridgeFunctionCount = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 11, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSystemBridgeFunctionCount.setStatus('mandatory')
if mibBuilder.loadTexts: lbSystemBridgeFunctionCount.setDescription('The number of bridge functions present in the system. Curently this value is equal to the sum of the number of Express and Switching modules in the system.')
lbSystemSmtProxyTimeoutBase = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 11, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbSystemSmtProxyTimeoutBase.setStatus('mandatory')
if mibBuilder.loadTexts: lbSystemSmtProxyTimeoutBase.setDescription('The initial timeout value, in seconds, before the SMT proxy attempts to backoff and retry. Since the SMT proxy will attempt three retries before determining that the proxied station is not answering, with the timeout doubling for each retry, the total time for a request to time out is equal to seven times the base timeout value.')
lbSystemSmtProxyEvents = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 1, 11, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbSystemSmtProxyEvents.setStatus('mandatory')
if mibBuilder.loadTexts: lbSystemSmtProxyEvents.setDescription('This object determines if the SMT proxy will generate traps for SMT events occuring at other stations. If enabled, the SMT proxy will generate traps for all SMT events, those that occur locally, and those that occur at other stations. If disabled, the SMT proxy will only generate traps for events which occur locally. The default value for this object is enabled(1).')
lbSlotTable = MibTable((1, 3, 6, 1, 4, 1, 43, 7, 1, 12, 1), )
if mibBuilder.loadTexts: lbSlotTable.setStatus('mandatory')
if mibBuilder.loadTexts: lbSlotTable.setDescription('A list of slot entries. A single instance of this object exists for each slot in the LinkBuilder system.')
lbSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 7, 1, 12, 1, 1), ).setIndexNames((0, "LB3GH-1-0-7", "lbSlotIndex"))
if mibBuilder.loadTexts: lbSlotEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lbSlotEntry.setDescription('A slot entry contains information common to a given slot within a LinkBuilder system.')
lbSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbSlotIndex.setDescription('The physical slot number of this slot within the system.')
lbSlotBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("emptySlot", 2), ("spm", 3), ("feam", 4), ("fcm", 5), ("elm", 6), ("esm", 7), ("fcm2", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSlotBoardType.setStatus('mandatory')
if mibBuilder.loadTexts: lbSlotBoardType.setDescription('The type of board residing in this slot.')
lbSlotBoardRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 12, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSlotBoardRevision.setStatus('mandatory')
if mibBuilder.loadTexts: lbSlotBoardRevision.setDescription('The revision number of the board in this slot.')
lbSlotBoardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notPresent", 1), ("testing", 2), ("offline", 3), ("online", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSlotBoardStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lbSlotBoardStatus.setDescription('The status of the board in this slot.')
lbSlotBoardName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 12, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSlotBoardName.setStatus('mandatory')
if mibBuilder.loadTexts: lbSlotBoardName.setDescription('The text string describing this board.')
lbSlotBoardNameAbbrev = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 12, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSlotBoardNameAbbrev.setStatus('mandatory')
if mibBuilder.loadTexts: lbSlotBoardNameAbbrev.setDescription('The abbreviation used to describe this board.')
lbSlotFddiMacCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 12, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSlotFddiMacCount.setStatus('mandatory')
if mibBuilder.loadTexts: lbSlotFddiMacCount.setDescription("The number of FDDI MAC's present in this slot.")
lbSlotFddiMacBaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 12, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSlotFddiMacBaseIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbSlotFddiMacBaseIndex.setDescription('The index of the first FDDI MAC in this slot.')
lbSlotFddiPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 12, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSlotFddiPortCount.setStatus('mandatory')
if mibBuilder.loadTexts: lbSlotFddiPortCount.setDescription('The number of FDDI ports present in this slot.')
lbSlotFddiPortBaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 12, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSlotFddiPortBaseIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbSlotFddiPortBaseIndex.setDescription('The index of the first FDDI port in this slot.')
lbSlotEthernetPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 12, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSlotEthernetPortCount.setStatus('mandatory')
if mibBuilder.loadTexts: lbSlotEthernetPortCount.setDescription('The number of ethernet ports present in this slot.')
lbSlotEthernetPortBaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 12, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSlotEthernetPortBaseIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbSlotEthernetPortBaseIndex.setDescription('The index of the first ethernet port in this slot.')
lbSlotExpressFunctionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 12, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSlotExpressFunctionCount.setStatus('deprecated')
if mibBuilder.loadTexts: lbSlotExpressFunctionCount.setDescription('The number of Express functions present in this slot.')
lbSlotExpressFunctionBaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 12, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSlotExpressFunctionBaseIndex.setStatus('deprecated')
if mibBuilder.loadTexts: lbSlotExpressFunctionBaseIndex.setDescription('The index of the first Express function in this slot.')
lbSlotExpressFddiPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 12, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSlotExpressFddiPortCount.setStatus('deprecated')
if mibBuilder.loadTexts: lbSlotExpressFddiPortCount.setDescription('The number of Express FDDI ports present in this slot.')
lbSlotExpressFddiPortBaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 12, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSlotExpressFddiPortBaseIndex.setStatus('deprecated')
if mibBuilder.loadTexts: lbSlotExpressFddiPortBaseIndex.setDescription('The index of the first Express FDDI port in this slot.')
lbSlotExpressEthernetPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 12, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSlotExpressEthernetPortCount.setStatus('deprecated')
if mibBuilder.loadTexts: lbSlotExpressEthernetPortCount.setDescription('The number of Express ethernet ports present in this slot.')
lbSlotExpressEthernetPortBaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 12, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSlotExpressEthernetPortBaseIndex.setStatus('deprecated')
if mibBuilder.loadTexts: lbSlotExpressEthernetPortBaseIndex.setDescription('The index of the first Express ethernet port in this slot.')
lbSlotBoardAction = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 12, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("runDiagnostics", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbSlotBoardAction.setStatus('mandatory')
if mibBuilder.loadTexts: lbSlotBoardAction.setDescription("This object, when read, always returns the value other (1). The behavior of setting this object to each of the acceptable values is as follows: runDiagnostics: runs the board's offline diagnostics.")
lbSlotBridgeFunctionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 12, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSlotBridgeFunctionCount.setStatus('mandatory')
if mibBuilder.loadTexts: lbSlotBridgeFunctionCount.setDescription('The number of bridge functions present in this slot.')
lbSlotBridgeFunctionBaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 12, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbSlotBridgeFunctionBaseIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbSlotBridgeFunctionBaseIndex.setDescription('The index of the first bridge function in this slot.')
lbFddiMacTable = MibTable((1, 3, 6, 1, 4, 1, 43, 7, 1, 13, 1), )
if mibBuilder.loadTexts: lbFddiMacTable.setStatus('mandatory')
if mibBuilder.loadTexts: lbFddiMacTable.setDescription('A list of FDDI MAC entries. A single instance of this object exists for each FDDI MAC present in the system.')
lbFddiMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 7, 1, 13, 1, 1), ).setIndexNames((0, "LB3GH-1-0-7", "lbFddiMacIndex"))
if mibBuilder.loadTexts: lbFddiMacEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lbFddiMacEntry.setDescription('An FDDI MAC entry contains information common to a particular FDDI MAC within the system.')
lbFddiMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbFddiMacIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbFddiMacIndex.setDescription('A unique value for each FDDI MAC in the system. The MAC identified by a particular value of this index is the same MAC as identified by the same value of ifIndex.')
lbFddiMacSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 13, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbFddiMacSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbFddiMacSlotIndex.setDescription('The slot number corresponding to the physical location of this MAC.')
lbFddiMacLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 13, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbFddiMacLocalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbFddiMacLocalIndex.setDescription('The index of this MAC relative to the slot on which it is physically present.')
lbFddiMacByteReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 13, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbFddiMacByteReceiveRate.setStatus('mandatory')
if mibBuilder.loadTexts: lbFddiMacByteReceiveRate.setDescription('The average number of bytes received per second by this MAC during the most recent sampling period.')
lbFddiMacPeakByteReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 13, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbFddiMacPeakByteReceiveRate.setStatus('mandatory')
if mibBuilder.loadTexts: lbFddiMacPeakByteReceiveRate.setDescription('The peak value of lbFddiMacByteReceiveRate for this MAC since the system was last initialized.')
lbFddiMacFrameReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 13, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbFddiMacFrameReceiveRate.setStatus('mandatory')
if mibBuilder.loadTexts: lbFddiMacFrameReceiveRate.setDescription('The average number of frames received per second by this MAC during the most recent sampling period.')
lbFddiMacPeakFrameReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 13, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbFddiMacPeakFrameReceiveRate.setStatus('mandatory')
if mibBuilder.loadTexts: lbFddiMacPeakFrameReceiveRate.setDescription('The peak value of lbFddiMacFrameReceiveRate for this MAC since the system was last initialized.')
lbFddiMacByteTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 13, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbFddiMacByteTransmitRate.setStatus('mandatory')
if mibBuilder.loadTexts: lbFddiMacByteTransmitRate.setDescription('The average number of bytes transmitted per second by this MAC during the most recent sampling period.')
lbFddiMacPeakByteTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 13, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbFddiMacPeakByteTransmitRate.setStatus('mandatory')
if mibBuilder.loadTexts: lbFddiMacPeakByteTransmitRate.setDescription('The peak value of lbFddiMacByteTransmitRate for this MAC since the system was last initialized.')
lbFddiMacFrameTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 13, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbFddiMacFrameTransmitRate.setStatus('mandatory')
if mibBuilder.loadTexts: lbFddiMacFrameTransmitRate.setDescription('The average number of frames transmitted per second by this MAC during the most recent sampling period.')
lbFddiMacPeakFrameTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 13, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbFddiMacPeakFrameTransmitRate.setStatus('mandatory')
if mibBuilder.loadTexts: lbFddiMacPeakFrameTransmitRate.setDescription('The peak value of lbFddiMacFrameTransmitRate for this MAC since the system was last initialized.')
lbFddiMacReceiveMulticastThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 13, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbFddiMacReceiveMulticastThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: lbFddiMacReceiveMulticastThreshold.setDescription('The maximum number of multicast frames per second that can be received in the sample interval. The sample interval is one second. The default value for this object is zero which implies an infinite rate.')
lbFddiMacBeaconHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 13, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbFddiMacBeaconHistory.setStatus('mandatory')
if mibBuilder.loadTexts: lbFddiMacBeaconHistory.setDescription('This object gives a history of the most recent beacon information received on this MAC. It can contain up to a maximum of eight records. Each record is of the form: source MAC: 6 bytes beacon data length: 2 bytes. beacon data: 0-16 bytes.')
lbEthernetPortTable = MibTable((1, 3, 6, 1, 4, 1, 43, 7, 1, 14, 1), )
if mibBuilder.loadTexts: lbEthernetPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: lbEthernetPortTable.setDescription('A list of ethernet port entries. A single instance of this object exists for each ethernet port present in the system.')
lbEthernetPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 7, 1, 14, 1, 1), ).setIndexNames((0, "LB3GH-1-0-7", "lbEthernetPortIndex"))
if mibBuilder.loadTexts: lbEthernetPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lbEthernetPortEntry.setDescription('An ethernet port entry contains information common to a particular ethernet port within the system.')
lbEthernetPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbEthernetPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbEthernetPortIndex.setDescription('A unique value for each ethernet port in the system. The port identified by a particular value of this index is the same port as identified by the same value of ifIndex.')
lbEthernetPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 14, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbEthernetPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbEthernetPortSlotIndex.setDescription('The slot number corresponding to the physical location of this port.')
lbEthernetPortLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 14, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbEthernetPortLocalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbEthernetPortLocalIndex.setDescription('The index of this port relative to the slot on which it is physically present.')
lbEthernetPortLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 14, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbEthernetPortLabel.setStatus('mandatory')
if mibBuilder.loadTexts: lbEthernetPortLabel.setDescription('An ASCII text string describing this port.')
lbEthernetPortChipsetType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 14, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("chipsetAMD79900", 2), ("chipsetIntel82586", 3), ("chipsetIntel82596", 4), ("chipsetSEEQ8003", 5), ("chipsetNational8390", 6), ("chipsetNationalSonic", 7), ("chipsetFujitsu86950", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbEthernetPortChipsetType.setStatus('mandatory')
if mibBuilder.loadTexts: lbEthernetPortChipsetType.setDescription('The type of chipset used to implement this port.')
lbEthernetPortLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 14, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inActive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbEthernetPortLinkStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lbEthernetPortLinkStatus.setDescription('The current value of the link status for this port.')
lbEthernetPortByteReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 14, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbEthernetPortByteReceiveRate.setStatus('mandatory')
if mibBuilder.loadTexts: lbEthernetPortByteReceiveRate.setDescription('The average number of bytes received per second by this port during the most recent sampling period.')
lbEthernetPortPeakByteReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 14, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbEthernetPortPeakByteReceiveRate.setStatus('mandatory')
if mibBuilder.loadTexts: lbEthernetPortPeakByteReceiveRate.setDescription('The peak value of lbEthernetPortByteReceiveRate for this port since the system was last initialized.')
lbEthernetPortFrameReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 14, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbEthernetPortFrameReceiveRate.setStatus('mandatory')
if mibBuilder.loadTexts: lbEthernetPortFrameReceiveRate.setDescription('The average number of frames received per second by this port during the most recent sampling period.')
lbEthernetPortPeakFrameReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 14, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbEthernetPortPeakFrameReceiveRate.setStatus('mandatory')
if mibBuilder.loadTexts: lbEthernetPortPeakFrameReceiveRate.setDescription('The peak value of lbEthernetPortFrameReceiveRate for this port since the system was last initialized.')
lbEthernetPortByteTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 14, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbEthernetPortByteTransmitRate.setStatus('mandatory')
if mibBuilder.loadTexts: lbEthernetPortByteTransmitRate.setDescription('The average number of bytes transmitted per second by this port during the most recent sampling period.')
lbEthernetPortPeakByteTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 14, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbEthernetPortPeakByteTransmitRate.setStatus('mandatory')
if mibBuilder.loadTexts: lbEthernetPortPeakByteTransmitRate.setDescription('The peak value of lbEthernetPortByteTransmitRate for this port since the system was last initialized.')
lbEthernetPortFrameTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 14, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbEthernetPortFrameTransmitRate.setStatus('mandatory')
if mibBuilder.loadTexts: lbEthernetPortFrameTransmitRate.setDescription('The average number of frames transmitted per second by this port during the most recent sampling period.')
lbEthernetPortPeakFrameTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 14, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbEthernetPortPeakFrameTransmitRate.setStatus('mandatory')
if mibBuilder.loadTexts: lbEthernetPortPeakFrameTransmitRate.setDescription('The peak value of lbEthernetPortFrameTransmitRate for this port since the system was last initialized.')
lbEthernetPortReceiveMulticastThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 14, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbEthernetPortReceiveMulticastThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: lbEthernetPortReceiveMulticastThreshold.setDescription('The maximum number of multicast frames per second that can be received in the sample interval. The sample interval is one second. The default value for this object is zero which implies an infinite rate.')
lbEthernetPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 14, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("telco10BaseT", 1), ("rj4510BaseT", 2), ("foirl", 3), ("aui", 4), ("other", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbEthernetPortType.setStatus('mandatory')
if mibBuilder.loadTexts: lbEthernetPortType.setDescription("Specific description of this port's type.")
lbFddiPortTable = MibTable((1, 3, 6, 1, 4, 1, 43, 7, 1, 15, 1), )
if mibBuilder.loadTexts: lbFddiPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: lbFddiPortTable.setDescription('A list of FDDI port entries. A single instance of this object exists for each FDDI port in the system.')
lbFddiPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 7, 1, 15, 1, 1), ).setIndexNames((0, "LB3GH-1-0-7", "lbFddiPortIndex"))
if mibBuilder.loadTexts: lbFddiPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lbFddiPortEntry.setDescription('A Port entry contains information common to a particular FDDI port in the system.')
lbFddiPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 15, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbFddiPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbFddiPortIndex.setDescription("A unique value for each FDDI port in the system. It's value ranges between 1 and the value of lbSystemFddiPortCount.")
lbFddiPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 15, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbFddiPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbFddiPortSlotIndex.setDescription('The slot number corresponding to the physical location of this port.')
lbFddiPortLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 15, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbFddiPortLocalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbFddiPortLocalIndex.setDescription('The index of this port relative to the slot on which it is physically present.')
lbFddiPortLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 15, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbFddiPortLabel.setStatus('mandatory')
if mibBuilder.loadTexts: lbFddiPortLabel.setDescription('An ASCII text string describing this port.')
lbExpressTable = MibTable((1, 3, 6, 1, 4, 1, 43, 7, 1, 16, 1), )
if mibBuilder.loadTexts: lbExpressTable.setStatus('deprecated')
if mibBuilder.loadTexts: lbExpressTable.setDescription('A list of Express function entries.')
lbExpressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 7, 1, 16, 1, 1), ).setIndexNames((0, "LB3GH-1-0-7", "lbExpressIndex"))
if mibBuilder.loadTexts: lbExpressEntry.setStatus('deprecated')
if mibBuilder.loadTexts: lbExpressEntry.setDescription('An Express entry contains information common to a particular Express function in a given system.')
lbExpressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 16, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbExpressIndex.setStatus('deprecated')
if mibBuilder.loadTexts: lbExpressIndex.setDescription("A unique value for each Express function in the system. It's value ranges between 1 and the value of lbSystemExpressFunctionCount.")
lbExpressSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 16, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbExpressSlotIndex.setStatus('deprecated')
if mibBuilder.loadTexts: lbExpressSlotIndex.setDescription('The slot number corresponding to the physical location of this function.')
lbExpressLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 16, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbExpressLocalIndex.setStatus('deprecated')
if mibBuilder.loadTexts: lbExpressLocalIndex.setDescription('The index of this function relative to the slot on which it is physically present.')
lbExpressAddressThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 16, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbExpressAddressThreshold.setStatus('deprecated')
if mibBuilder.loadTexts: lbExpressAddressThreshold.setDescription('A reporting threshold for the total number of Ethernet Addresses known for this board. When this threshold is reached, the event lbEemAddressThresholdEvent is generated.')
lbExpressFddiPortTable = MibTable((1, 3, 6, 1, 4, 1, 43, 7, 1, 17, 1), )
if mibBuilder.loadTexts: lbExpressFddiPortTable.setStatus('deprecated')
if mibBuilder.loadTexts: lbExpressFddiPortTable.setDescription('A list of Express FDDI port entries.')
lbExpressFddiPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 7, 1, 17, 1, 1), ).setIndexNames((0, "LB3GH-1-0-7", "lbExpressFddiPortIndex"))
if mibBuilder.loadTexts: lbExpressFddiPortEntry.setStatus('deprecated')
if mibBuilder.loadTexts: lbExpressFddiPortEntry.setDescription('A Port entry contains information for a particular Express FDDI port in a given system.')
lbExpressFddiPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 17, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbExpressFddiPortIndex.setStatus('deprecated')
if mibBuilder.loadTexts: lbExpressFddiPortIndex.setDescription("A unique value for each Express port in the system. It's value ranges between 1 and the value of lbSystemExpressFddiPortCount.")
lbExpressFddiPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 17, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbExpressFddiPortSlotIndex.setStatus('deprecated')
if mibBuilder.loadTexts: lbExpressFddiPortSlotIndex.setDescription('The slot number corresponding to the physical location of this port.')
lbExpressFddiPortLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 17, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbExpressFddiPortLocalIndex.setStatus('deprecated')
if mibBuilder.loadTexts: lbExpressFddiPortLocalIndex.setDescription('The index of this port relative to the slot on which it is physically present.')
lbExpressFddiPortForwardedCts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 17, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbExpressFddiPortForwardedCts.setStatus('deprecated')
if mibBuilder.loadTexts: lbExpressFddiPortForwardedCts.setDescription('The number of frames forwarded by this MAC from an ethernet port to the FDDI network.')
lbExpressFddiPortDroppedCts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 17, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbExpressFddiPortDroppedCts.setStatus('deprecated')
if mibBuilder.loadTexts: lbExpressFddiPortDroppedCts.setDescription('The number of frames received by this MAC that were not forwarded.')
lbExpressEthernetPortTable = MibTable((1, 3, 6, 1, 4, 1, 43, 7, 1, 18, 1), )
if mibBuilder.loadTexts: lbExpressEthernetPortTable.setStatus('deprecated')
if mibBuilder.loadTexts: lbExpressEthernetPortTable.setDescription('A list of Express ethernet port entries.')
lbExpressEthernetPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 7, 1, 18, 1, 1), ).setIndexNames((0, "LB3GH-1-0-7", "lbExpressEthernetPortIndex"))
if mibBuilder.loadTexts: lbExpressEthernetPortEntry.setStatus('deprecated')
if mibBuilder.loadTexts: lbExpressEthernetPortEntry.setDescription('An Expres ethernet port entry contains information common to a particular Express ethernet port located in the system.')
lbExpressEthernetPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 18, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbExpressEthernetPortIndex.setStatus('deprecated')
if mibBuilder.loadTexts: lbExpressEthernetPortIndex.setDescription("A unique value for each Express ethernet port in the system. It's value ranges between 1 and the value of lbSystemExpressEthernetPortCount.")
lbExpressEthernetPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 18, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbExpressEthernetPortSlotIndex.setStatus('deprecated')
if mibBuilder.loadTexts: lbExpressEthernetPortSlotIndex.setDescription('The slot number corresponding to the physical location of this port.')
lbExpressEthernetPortLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 18, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbExpressEthernetPortLocalIndex.setStatus('deprecated')
if mibBuilder.loadTexts: lbExpressEthernetPortLocalIndex.setDescription('The index of this port relative to the slot on which it is physically present.')
lbExpressEthernetPortForwardedCts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 18, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbExpressEthernetPortForwardedCts.setStatus('deprecated')
if mibBuilder.loadTexts: lbExpressEthernetPortForwardedCts.setDescription('The number of frames forwarded from this ethernet port to the FDDI network.')
lbExpressEthernetPortDroppedCts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 18, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbExpressEthernetPortDroppedCts.setStatus('deprecated')
if mibBuilder.loadTexts: lbExpressEthernetPortDroppedCts.setDescription('The number of frames received by this ethernet port that were not forwarded or u-turned.')
lbExpressEthernetPortUTurnCts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 18, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbExpressEthernetPortUTurnCts.setStatus('deprecated')
if mibBuilder.loadTexts: lbExpressEthernetPortUTurnCts.setDescription('The number of frames received by this ethernet port that were directed to another ethernet port.')
lbExpressEthernetPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 18, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("freezeAddress", 2), ("flushAddress", 3), ("flushDynamicAddress", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbExpressEthernetPortAction.setStatus('deprecated')
if mibBuilder.loadTexts: lbExpressEthernetPortAction.setDescription("This object, when read, always returns the value other (1). The behavior of setting this object to each of the acceptable values is as follows: freezeAddress: causes all the learned dynamic addresses to be converted into static addresses. flushAddress: causes all the addresses to be flushed from a port's address list. flushDynamicAddress: causes all the port's dynamic addresses to be flushed from a port's address list.")
lbExpressEthernetPortAddressTable = MibTable((1, 3, 6, 1, 4, 1, 43, 7, 1, 19, 1), )
if mibBuilder.loadTexts: lbExpressEthernetPortAddressTable.setStatus('deprecated')
if mibBuilder.loadTexts: lbExpressEthernetPortAddressTable.setDescription('A list of Express Remote MAC Address entries.')
lbExpressEthernetPortAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 7, 1, 19, 1, 1), ).setIndexNames((0, "LB3GH-1-0-7", "lbExpressEthernetPortAddressPortIndex"), (0, "LB3GH-1-0-7", "lbExpressEthernetPortAddressIndex"))
if mibBuilder.loadTexts: lbExpressEthernetPortAddressEntry.setStatus('deprecated')
if mibBuilder.loadTexts: lbExpressEthernetPortAddressEntry.setDescription('An entry contains information describing a remote Ethernet MAC detected to be attached to an Express port.')
lbExpressEthernetPortAddressPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 19, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbExpressEthernetPortAddressPortIndex.setStatus('deprecated')
if mibBuilder.loadTexts: lbExpressEthernetPortAddressPortIndex.setDescription("A unique value for each Express ethernet port in the system. It's value ranges between 1 and the value of lbSystemExpressEthernetPortCount.")
lbExpressEthernetPortAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 19, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbExpressEthernetPortAddressIndex.setStatus('deprecated')
if mibBuilder.loadTexts: lbExpressEthernetPortAddressIndex.setDescription('The index of this address entry within the address table.')
lbExpressEthernetPortAddressSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 19, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbExpressEthernetPortAddressSlotIndex.setStatus('deprecated')
if mibBuilder.loadTexts: lbExpressEthernetPortAddressSlotIndex.setDescription('The slot number corresponding to the physical location of this port.')
lbExpressEthernetPortAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 19, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbExpressEthernetPortAddressType.setStatus('deprecated')
if mibBuilder.loadTexts: lbExpressEthernetPortAddressType.setDescription('This object, when read, always returns the value other (1). Setting this object to invalid (2) will remove the corresponding address entry from the table.')
lbExpressEthernetPortAddressRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 19, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbExpressEthernetPortAddressRemoteAddress.setStatus('deprecated')
if mibBuilder.loadTexts: lbExpressEthernetPortAddressRemoteAddress.setDescription('The remote MAC address detected on this port.')
lbExpressEthernetPortAddressIsStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 19, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isStatic", 1), ("isDynamic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbExpressEthernetPortAddressIsStatic.setStatus('deprecated')
if mibBuilder.loadTexts: lbExpressEthernetPortAddressIsStatic.setDescription('A value indicating whether this MAC address was statically configured or was dynamically learned on this port.')
lbExpressEthernetPortAddressStaticPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 19, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbExpressEthernetPortAddressStaticPort.setStatus('deprecated')
if mibBuilder.loadTexts: lbExpressEthernetPortAddressStaticPort.setDescription('If the object lbExpressEthernetPortAddressIsStatic has value isStatic(1), this object indicates the port for which this MAC address was statically configured.')
lbExpressEthernetPortAddressAge = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 19, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbExpressEthernetPortAddressAge.setStatus('deprecated')
if mibBuilder.loadTexts: lbExpressEthernetPortAddressAge.setDescription("This object indicates the time, in seconds, elapsed since this MAC address was added to this port's address table.")
lbPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 43, 7, 1, 20, 1), )
if mibBuilder.loadTexts: lbPowerSupplyTable.setStatus('mandatory')
if mibBuilder.loadTexts: lbPowerSupplyTable.setDescription('A list of power supply entries.')
lbPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 7, 1, 20, 1, 1), ).setIndexNames((0, "LB3GH-1-0-7", "lbPowerSupplyIndex"))
if mibBuilder.loadTexts: lbPowerSupplyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lbPowerSupplyEntry.setDescription('A power supply entry contains information common for a particular power supply unit in the system.')
lbPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 20, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbPowerSupplyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbPowerSupplyIndex.setDescription("A unique value for each power supply in the system. It's value ranges between 1 and the value of lbSystemPowerSupplyCount.")
lbPowerSupplyLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 20, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbPowerSupplyLocation.setStatus('mandatory')
if mibBuilder.loadTexts: lbPowerSupplyLocation.setDescription('The physical slot in which this power supply unit resides in the system.')
lbPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 20, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbPowerSupplyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lbPowerSupplyStatus.setDescription('The status of the power supply. A value of 0 indicates a working unit. A non-zero value represents a bit mask of the possible failure types. Each set bit indicates the following failure type: bit0: systemAcFailure bit1: systemPlus5Failure bit2: systemPlus12Failure bit3: systemOverTemperatureFailure.')
lbPowerSupplyFailureType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 20, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("systemAcFailure", 1), ("systemPlus5Failure", 2), ("systemPlus12Failure", 3), ("systemOverTemperatureFailure", 4))))
if mibBuilder.loadTexts: lbPowerSupplyFailureType.setStatus('deprecated')
if mibBuilder.loadTexts: lbPowerSupplyFailureType.setDescription('This object is sent in the varlist when the lbPowerSupplyFailureEvent trap is generated. It indicates the particular failure type that caused this trap to be generated.')
lbPowerSupplyLastFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 20, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("systemAcFailure", 1), ("systemPlus5Failure", 2), ("systemPlus12Failure", 3), ("systemOverTemperatureFailure", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbPowerSupplyLastFailure.setStatus('mandatory')
if mibBuilder.loadTexts: lbPowerSupplyLastFailure.setDescription('This object represents the most recent power supply failure type. If no failure has occured, the value of this object is none. This object is included in the varlist when the lbPowerSupplyFailureEvent trap is generated. It indicates the failure type that caused the trap to be generated.')
lbBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 1), )
if mibBuilder.loadTexts: lbBridgeTable.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgeTable.setDescription('A list of bridge function entries.')
lbBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 1, 1), ).setIndexNames((0, "LB3GH-1-0-7", "lbBridgeIndex"))
if mibBuilder.loadTexts: lbBridgeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgeEntry.setDescription('A bridge entry contains information common to a particular bridge function in a given system.')
lbBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgeIndex.setDescription("A unique value for each bridge function in the system. It's value ranges between 1 and the value of lbSystemBridgeFunctionCount.")
lbBridgeBaseSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgeBaseSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgeBaseSlotIndex.setDescription('The slot number of the lowest numbered slot which contains a physical port that this bridge function controls.')
lbBridgePortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgePortCount.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortCount.setDescription('The number of ports that this bridge function controls.')
lbBridgeAddressTableSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgeAddressTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgeAddressTableSize.setDescription('The size of the address table for this bridge function.')
lbBridgeAddressThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbBridgeAddressThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgeAddressThreshold.setDescription('A reporting threshold for the total number of addresses known for this board. When this threshold is reached, the event lbBridgeAddressThresholdEvent is generated. The range of valid values for setting this object is between 1 and the value reported by lbBridgeAddressTableSize + 1 (Note that this range applies to values issued in set requests. The current value may be outside this range, for example if the value of lbBridgeMode is changed). Setting this object to one greater than the address table size disables the generation of lbBridgeAddressThresholdEvents since the limit will never be reached.')
lbBridgeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("expressMode", 1), ("ieee8021dBridgeMode", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbBridgeMode.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgeMode.setDescription('The operational mode of this bridge function. Note that bridges which report notSupported(3) will not support sets of this object, and that the value notSupported(3) is not a valid value for a set operation.')
lbBridgeLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgeLocalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgeLocalIndex.setDescription('The index of this bridge function relative to the slot on which it is physically present.')
lbBridgePortTable = MibTable((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 2), )
if mibBuilder.loadTexts: lbBridgePortTable.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortTable.setDescription('A list of bridge port entries.')
lbBridgePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 2, 1), ).setIndexNames((0, "LB3GH-1-0-7", "lbBridgePortBridgeIndex"), (0, "LB3GH-1-0-7", "lbBridgePortIndex"))
if mibBuilder.loadTexts: lbBridgePortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortEntry.setDescription('A Port entry contains information for a particular bridge port in a given system.')
lbBridgePortBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgePortBridgeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortBridgeIndex.setDescription("A unique value for each bridge function in the system. It's value ranges between 1 and the value of lbSystemBridgeFunctionCount.")
lbBridgePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgePortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortIndex.setDescription("A unique value for each bridge port controlled by a given bridge function. It's value ranges between 1 and the value of lbBridgePortCount for the bridge function which this entry references.")
lbBridgePortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgePortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortSlotIndex.setDescription('The slot number corresponding to the physical location of this port.')
lbBridgePortLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgePortLocalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortLocalIndex.setDescription('The index of this port relative to the slot on which it is physically present and its port type. For example FDDI ports in a slot are identified with local indices from 1 to the number of FDDI ports in that slot, and the Ethernet ports in the same slot are identified with local indices from 1 to the number of Ethernet ports in that slot.')
lbBridgePortType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ethernet", 1), ("fddi", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgePortType.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortType.setDescription('The type of this port.')
lbBridgePortIpFragmentationEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbBridgePortIpFragmentationEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortIpFragmentationEnabled.setDescription('A flag indicating whether or not IP fragmentation is enabled on this bridge port. Note that bridges which report notSupported(3) will not support sets of this object, and that the value notSupported(3) is not a valid value for a set operation.')
lbBridgePortReceiveMulticastLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbBridgePortReceiveMulticastLimit.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortReceiveMulticastLimit.setDescription('The maximum number of multicast frames per second that can be received in the sample interval. The sample interval is four seconds. The default value for this object is zero which implies an infinite rate.')
lbBridgePortAddressAction = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("freezeAddress", 2), ("flushAddress", 3), ("flushDynamicAddress", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbBridgePortAddressAction.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortAddressAction.setDescription("This object, when read, always returns the value other (1). The behavior of setting this object to each of the acceptable values is as follows: freezeAddress: causes all the learned dynamic addresses to be converted into static addresses. flushAddress: causes all the addresses to be flushed from the port's address list. flushDynamicAddress: causes all dynamic addresses to be flushed from the port's address list.")
lbBridgePortTotalForwardedCts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgePortTotalForwardedCts.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortTotalForwardedCts.setDescription("The total number of frames forwarded from this port to all other ports of this bridge. Note that the total forwarded count is NOT equal to the receive count minus the discard count, as a single received multicast/broadcast frame can be forwarded to multiple bridge ports. Also frames which are 'flooded' because of unknown destination addresses account for multiple forwarding as well. The total forwarding count is the instantaneous sumation of the 'forwarded to' counts to all other ports of the bridge.")
lbBridgePortManagementFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgePortManagementFramesReceived.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortManagementFramesReceived.setDescription('The number of bridge management frames received by this port.')
lbBridgePortTotalDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgePortTotalDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortTotalDiscards.setDescription('The total number of frames discarded by this port.')
lbBridgePortReceiveBlockedDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgePortReceiveBlockedDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortReceiveBlockedDiscards.setDescription("The number of frames discarded by this port because the the receiving bridge port was not in the 'forwarding' state.")
lbBridgePortReceiveMulticastLimitExceededs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgePortReceiveMulticastLimitExceededs.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortReceiveMulticastLimitExceededs.setDescription('The number of multicast/broadcast frames discarded by this port because the lbBridgePortReceiveMulticastLimit was exceeded.')
lbBridgePortReceiveSecurityDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgePortReceiveSecurityDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortReceiveSecurityDiscards.setDescription('The number of frames discarded by this port because they contained source addresses which were statically configured on another bridge port. A statically configured address (station), which is not allowed to move, appears to have moved.')
lbBridgePortReceiveUnknownDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgePortReceiveUnknownDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortReceiveUnknownDiscards.setDescription('The number of frames discarded by this port because the destination address was unknown. Note that this counter is only valid for FDDI ports, and only when the bridge is an EEM, or an ESM operating in express mode.')
lbBridgePortReceiveOtherDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgePortReceiveOtherDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortReceiveOtherDiscards.setDescription('The number of frames discarded by this port because they contained either invalid (group) source addresses or source addresses belonging to this bridge (indicative of network loops).')
lbBridgePortReceiveErrorDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgePortReceiveErrorDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortReceiveErrorDiscards.setDescription('The number of frames discarded by this port because of internal bridge system errors (e.g., hardware and software address table discrepencies).')
lbBridgePortSameSegmentDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgePortSameSegmentDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortSameSegmentDiscards.setDescription('The number of frames discarded by this port because the destination address is known on the same network segment as the source address, i.e., the frame does not need to be bridged.')
lbBridgePortTransmitBlockedDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgePortTransmitBlockedDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortTransmitBlockedDiscards.setDescription("The number of frames discarded by this port because the the transmitting bridge port was not in the 'forwarding' state.")
lbBridgePortTotalFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgePortTotalFiltered.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortTotalFiltered.setDescription('The total number of frames discarded by this port due to user defined filters.')
lbBridgePortReceiveUnicastFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgePortReceiveUnicastFiltered.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortReceiveUnicastFiltered.setDescription('The number of frames discarded by this port due to user defined receive path filters.')
lbBridgePortReceiveMulticastFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgePortReceiveMulticastFiltered.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortReceiveMulticastFiltered.setDescription('The number of frames discarded by this port due to user defined receive multicast path filters.')
lbBridgePortTransmitUnicastFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgePortTransmitUnicastFiltered.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortTransmitUnicastFiltered.setDescription('The number of frames discarded by this port due to user defined transmit path filters.')
lbBridgePortTransmitMulticastFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgePortTransmitMulticastFiltered.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortTransmitMulticastFiltered.setDescription('The number of frames discarded by this port due to user defined transmit multicast path filters.')
lbBridgePortReceiveMulticastLimitExceededCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgePortReceiveMulticastLimitExceededCount.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortReceiveMulticastLimitExceededCount.setDescription('The number of times the lbBridgePortReceiveMulticastLimit was exceeded.')
lbBridgePortForwardedToTable = MibTable((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 3), )
if mibBuilder.loadTexts: lbBridgePortForwardedToTable.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortForwardedToTable.setDescription('A list of port forwarding count information.')
lbBridgePortForwardedToEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 3, 1), ).setIndexNames((0, "LB3GH-1-0-7", "lbBridgePortForwardedToBridgeIndex"), (0, "LB3GH-1-0-7", "lbBridgePortForwardedToReceivePortIndex"), (0, "LB3GH-1-0-7", "lbBridgePortForwardedToDstPortIndex"))
if mibBuilder.loadTexts: lbBridgePortForwardedToEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortForwardedToEntry.setDescription('A bridge port forwarded-to entry contains information on the count of frames forwarded from the receiving port indicated by the corresponding lbBridgePortForwardedToReceivePortIndex, to the destination port indicated by the corresponding lbBridgePortForwardedToDstPortIndex. Note that no entries exist which are indexed with the same values for both the lbBridgePortForwardedToReceivePortIndex and the lbBridgePortForwardedToDstPortIndex objects.')
lbBridgePortForwardedToBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgePortForwardedToBridgeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortForwardedToBridgeIndex.setDescription("A unique value for each bridge function in the system. It's value ranges between 1 and the value of lbSystemBridgeFunctionCount.")
lbBridgePortForwardedToReceivePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgePortForwardedToReceivePortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortForwardedToReceivePortIndex.setDescription("A unique value for each bridge port controlled by a given bridge function. It's value ranges between 1 and the value of lbBridgePortCount for the bridge function which this entry references. This port index refers to the receiving port which is forwarding frames.")
lbBridgePortForwardedToDstPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgePortForwardedToDstPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortForwardedToDstPortIndex.setDescription("A unique value for each bridge port controlled by a given bridge function. It's value ranges between 1 and the value of lbBridgePortCount for the bridge function which this entry references. This port index refers to the destination port to which frames are being forwarded.")
lbBridgePortForwardedToCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgePortForwardedToCount.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortForwardedToCount.setDescription('The count of frames forwarded from the receiving port to the destination port.')
lbBridgePortFilteredToTable = MibTable((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 4), )
if mibBuilder.loadTexts: lbBridgePortFilteredToTable.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortFilteredToTable.setDescription('A list of port filtering count information.')
lbBridgePortFilteredToEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 4, 1), ).setIndexNames((0, "LB3GH-1-0-7", "lbBridgePortFilteredToBridgeIndex"), (0, "LB3GH-1-0-7", "lbBridgePortFilteredToReceivePortIndex"), (0, "LB3GH-1-0-7", "lbBridgePortFilteredToDstPortIndex"))
if mibBuilder.loadTexts: lbBridgePortFilteredToEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortFilteredToEntry.setDescription('A bridge port filtered-to entry contains information on the count of frames filtered from the receiving port indicated by the corresponding lbBridgePortFilteredToReceivePortIndex, to the destination port indicated by the corresponding lbBridgePortFilteredToDstPortIndex. Note that no entries exist which are indexed with the same values for both the lbBridgePortFilteredToReceivePortIndex and the lbBridgePortFilteredToDstPortIndex objects.')
lbBridgePortFilteredToBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgePortFilteredToBridgeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortFilteredToBridgeIndex.setDescription("A unique value for each bridge function in the system. It's value ranges between 1 and the value of lbSystemBridgeFunctionCount.")
lbBridgePortFilteredToReceivePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgePortFilteredToReceivePortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortFilteredToReceivePortIndex.setDescription("A unique value for each bridge port controlled by a given bridge function. It's value ranges between 1 and the value of lbBridgePortCount for the bridge function which this entry references. This port index refers to the receiving port which is filtering frames.")
lbBridgePortFilteredToDstPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgePortFilteredToDstPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortFilteredToDstPortIndex.setDescription("A unique value for each bridge port controlled by a given bridge function. It's value ranges between 1 and the value of lbBridgePortCount for the bridge function which this entry references. This port index refers to the destination port to which frames are being filtered.")
lbBridgePortFilteredToCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgePortFilteredToCount.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortFilteredToCount.setDescription('The count of frames filtered from the receiving port to the destination port.')
lbBridgePortAddressTable = MibTable((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 5), )
if mibBuilder.loadTexts: lbBridgePortAddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortAddressTable.setDescription('A list of bridge port address entries.')
lbBridgePortAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 5, 1), ).setIndexNames((0, "LB3GH-1-0-7", "lbBridgePortAddressBridgeIndex"), (0, "LB3GH-1-0-7", "lbBridgePortAddressPortIndex"), (0, "LB3GH-1-0-7", "lbBridgePortAddressIndex"))
if mibBuilder.loadTexts: lbBridgePortAddressEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortAddressEntry.setDescription('An bridge port address entry contains information about particular bridge port address in a given system.')
lbBridgePortAddressBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgePortAddressBridgeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortAddressBridgeIndex.setDescription("A unique value for each bridge function in the system. It's value ranges between 1 and the value of lbSystemBridgeFunctionCount.")
lbBridgePortAddressPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgePortAddressPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortAddressPortIndex.setDescription("A unique value for each bridge port controlled by a given bridge function. It's value ranges between 1 and the value of lbBridgePortCount for the bridge function which this entry references.")
lbBridgePortAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgePortAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortAddressIndex.setDescription('The index of this address entry within the bridge address table.')
lbBridgePortAddressRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbBridgePortAddressRemoteAddress.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortAddressRemoteAddress.setDescription('The remote MAC address detected on the port corresponding to this entry. Setting this object attempts to create a new entry in the table. Since the value of lbBridgePortAddressIndex is determined automatically internal to the bridge, a set is only successful if the index value specified for lbBridgePortAddressIndex is zero. A get-next using the values of lbBridgePortAddressBridgeIndex and lbBridgePortAddressPortIndex can be used to determine the address index assigned to the newly added address entry.')
lbBridgePortAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbBridgePortAddressType.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortAddressType.setDescription('This object, when read, always returns the value other (1). Setting this object to invalid (2) will remove the corresponding address entry from the table.')
lbBridgePortAddressIsStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isStatic", 1), ("isDynamic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbBridgePortAddressIsStatic.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortAddressIsStatic.setDescription('A value indicating whether this MAC address was statically configured or was dynamically learned.')
lbBridgePortAddressStaticPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgePortAddressStaticPort.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortAddressStaticPort.setDescription('If the object lbBridgePortAddressIsStatic has value isStatic(1), this object indicates the local port index (as reported by lbBridgePortLocalIndex) for which this MAC address was statically configured. If the object lbBridgePortAddressIsStatic has the value isDynamic(2), the value of this object is 0.')
lbBridgePortAddressAge = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 21, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbBridgePortAddressAge.setStatus('mandatory')
if mibBuilder.loadTexts: lbBridgePortAddressAge.setDescription('This object indicates the time, in seconds, elapsed since a packet containing this address as a source was last seen on the port corresponding to this entry.')
lbTrapEnterpriseTable = MibTable((1, 3, 6, 1, 4, 1, 43, 7, 1, 22, 1), )
if mibBuilder.loadTexts: lbTrapEnterpriseTable.setStatus('mandatory')
if mibBuilder.loadTexts: lbTrapEnterpriseTable.setDescription('This table contains a listing of enterprises under which various traps are defined. In all cases except for the MIB-II generic traps, the enterprise under which a trap is defined is the same as that appearing in the ENTERPRISE portion of the trap. Associated with each trap enterprise is a trap enterprise index.')
lbTrapEnterpriseTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 7, 1, 22, 1, 1), ).setIndexNames((0, "LB3GH-1-0-7", "lbTrapEnterpriseIndex"))
if mibBuilder.loadTexts: lbTrapEnterpriseTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lbTrapEnterpriseTableEntry.setDescription('Information relating a specific trap enterprise OID with a trap enterprise index.')
lbTrapEnterpriseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 22, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbTrapEnterpriseIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbTrapEnterpriseIndex.setDescription('A unique index corresponding to a particular enterprise OID under which traps are defined. This value of this object corresponding to a particular enterprise OID will remain constant accross system resets.')
lbTrapEnterpriseOID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 22, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbTrapEnterpriseOID.setStatus('mandatory')
if mibBuilder.loadTexts: lbTrapEnterpriseOID.setDescription('An enterpise OID under which traps are defined.')
lbTrapDestTable = MibTable((1, 3, 6, 1, 4, 1, 43, 7, 1, 23, 1), )
if mibBuilder.loadTexts: lbTrapDestTable.setStatus('mandatory')
if mibBuilder.loadTexts: lbTrapDestTable.setDescription('This table contains information specifying which traps will be transmitted by the LANplex to a given destination address. The table is indexed by the destination address, the index of the enterprise which generates the trap, and the trap number. Each entry in the table with a status of valid identifies a trap which, when generated, will be transmitted to the corresponding destination address listed in that entry.')
lbTrapDestTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 7, 1, 23, 1, 1), ).setIndexNames((0, "LB3GH-1-0-7", "lbTrapDestAddr"), (0, "LB3GH-1-0-7", "lbTrapDestEnterpriseIndex"), (0, "LB3GH-1-0-7", "lbTrapNumber"))
if mibBuilder.loadTexts: lbTrapDestTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lbTrapDestTableEntry.setDescription('Information relating a trap with a destination address to which the trap will be sent when it is generated.')
lbTrapDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 23, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbTrapDestAddr.setStatus('mandatory')
if mibBuilder.loadTexts: lbTrapDestAddr.setDescription('The network address to which the trap identified by this entry is to be transmitted.')
lbTrapDestEnterpriseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 23, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbTrapDestEnterpriseIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbTrapDestEnterpriseIndex.setDescription('The enterprise index of the enterprise identified in this entry. The value of this object is the same as the lbTrapEnterpriseIndex value for a given enterprise.')
lbTrapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 23, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbTrapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: lbTrapNumber.setDescription('The number of the trap within the corresponding enterprise for this entry.')
lbTrapEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 1, 23, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbTrapEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lbTrapEntryStatus.setDescription('The status of the trap destination table entry. Setting this object to valid has the effect of attempting to add the row corresponding to the instance specified. If the instance already exists, the set is successful (with no new entry added). If the instance specified is invalid, the set fails, otherwise the set succeeds and results in a new entry being added to the table. Setting this object to invalid has the effect of removing the corresponding entry from the table.')
lbSlotInsertEvent = NotificationType((1, 3, 6, 1, 4, 1, 43, 7, 1) + (0,1)).setObjects(("LB3GH-1-0-7", "lbSlotIndex"), ("LB3GH-1-0-7", "lbSlotBoardType"), ("LB3GH-1-0-7", "lbSlotBoardRevision"))
if mibBuilder.loadTexts: lbSlotInsertEvent.setDescription('The SNMP trap that is generated when a board is inserted into a particular slot in the chassis.')
lbSlotExtractEvent = NotificationType((1, 3, 6, 1, 4, 1, 43, 7, 1) + (0,2)).setObjects(("LB3GH-1-0-7", "lbSlotIndex"))
if mibBuilder.loadTexts: lbSlotExtractEvent.setDescription('The SNMP trap that is generated when a board is extracted from a particular slot in the chassis.')
lbBridgeAddressThresholdEvent = NotificationType((1, 3, 6, 1, 4, 1, 43, 7, 1) + (0,3)).setObjects(("LB3GH-1-0-7", "lbBridgeIndex"), ("LB3GH-1-0-7", "lbBridgeBaseSlotIndex"))
if mibBuilder.loadTexts: lbBridgeAddressThresholdEvent.setDescription('The SNMP trap that is generated when the number of addresses stored in the bridge reaches lbBridgeAddressThreshold.')
lbSystemOverTemperatureEvent = NotificationType((1, 3, 6, 1, 4, 1, 43, 7, 1) + (0,6))
if mibBuilder.loadTexts: lbSystemOverTemperatureEvent.setDescription('The SNMP trap that is generated when the system temperature exceeds a certain threshold.')
lbSlotOverTemperatureEvent = NotificationType((1, 3, 6, 1, 4, 1, 43, 7, 1) + (0,7)).setObjects(("LB3GH-1-0-7", "lbSlotIndex"), ("LB3GH-1-0-7", "lbSlotBoardType"), ("LB3GH-1-0-7", "lbSlotBoardRevision"), ("LB3GH-1-0-7", "lbSlotBoardStatus"))
if mibBuilder.loadTexts: lbSlotOverTemperatureEvent.setDescription('The SNMP trap that is generated when the temperature of a board in a particular slot exceeds a certain threshold.')
lbPowerSupplyFailureEvent = NotificationType((1, 3, 6, 1, 4, 1, 43, 7, 1) + (0,8)).setObjects(("LB3GH-1-0-7", "lbPowerSupplyIndex"), ("LB3GH-1-0-7", "lbPowerSupplyLocation"), ("LB3GH-1-0-7", "lbPowerSupplyLastFailure"), ("LB3GH-1-0-7", "lbSystemPowerSupplyCount"))
if mibBuilder.loadTexts: lbPowerSupplyFailureEvent.setDescription('The SNMP trap that is generated when a power supply unit fails in the system.')
mibBuilder.exportSymbols("LB3GH-1-0-7", lbBridgePortType=lbBridgePortType, lbBridgePortSameSegmentDiscards=lbBridgePortSameSegmentDiscards, port=port, lbExpressFddiPortTable=lbExpressFddiPortTable, chassisType=chassisType, lbBridgePortReceiveMulticastLimit=lbBridgePortReceiveMulticastLimit, elmEthernetMACAddressSlotIndex=elmEthernetMACAddressSlotIndex, slotBoardName=slotBoardName, lbBridgePortEntry=lbBridgePortEntry, lbEthernetPortPeakFrameReceiveRate=lbEthernetPortPeakFrameReceiveRate, lbBridgeMode=lbBridgeMode, chassisControlPanelText=chassisControlPanelText, lbBridgePortForwardedToCount=lbBridgePortForwardedToCount, lbSystemBackplaneRevision=lbSystemBackplaneRevision, lbEthernetPortTable=lbEthernetPortTable, lbSlotFddiPortBaseIndex=lbSlotFddiPortBaseIndex, smmBaseEthernetPortIndex=smmBaseEthernetPortIndex, lbEthernetPortFrameTransmitRate=lbEthernetPortFrameTransmitRate, lbBridgePortSlotIndex=lbBridgePortSlotIndex, lbSlotBoardStatus=lbSlotBoardStatus, lbExpressEthernetPortAddressIndex=lbExpressEthernetPortAddressIndex, lbSlotEthernetPortCount=lbSlotEthernetPortCount, lbBridgePortAddressAction=lbBridgePortAddressAction, lbSystemBridgeFunctionCount=lbSystemBridgeFunctionCount, lbExpressEthernetPortEntry=lbExpressEthernetPortEntry, fbcmBasePortIndex=fbcmBasePortIndex, lbBridgePortAddressType=lbBridgePortAddressType, a3Com=a3Com, lbFddiMacLocalIndex=lbFddiMacLocalIndex, elmEthernetPortTable=elmEthernetPortTable, lbEthernetPortLocalIndex=lbEthernetPortLocalIndex, chassisNameAbbrev=chassisNameAbbrev, fcm=fcm, portEntry=portEntry, lbSystemMemorySize=lbSystemMemorySize, lbExpressEthernetPortTable=lbExpressEthernetPortTable, lbBridgeLocalIndex=lbBridgeLocalIndex, lbExpressFddiPortSlotIndex=lbExpressFddiPortSlotIndex, lbExpress=lbExpress, lbBridgePortForwardedToEntry=lbBridgePortForwardedToEntry, smmTable=smmTable, elmEthernetMACAddressIsStatic=elmEthernetMACAddressIsStatic, elmEthernetPortSlotIndex=elmEthernetPortSlotIndex, lbBridgePortReceiveMulticastLimitExceededCount=lbBridgePortReceiveMulticastLimitExceededCount, lbSystemPowerSupplyCount=lbSystemPowerSupplyCount, elmFddiMACIndex=elmFddiMACIndex, lbSlotFddiPortCount=lbSlotFddiPortCount, lbBridgePortReceiveErrorDiscards=lbBridgePortReceiveErrorDiscards, lbSlotFddiMacBaseIndex=lbSlotFddiMacBaseIndex, lbSystem=lbSystem, elmEthernetMACAddressType=elmEthernetMACAddressType, lbSlotBoardAction=lbSlotBoardAction, lbBridgePortManagementFramesReceived=lbBridgePortManagementFramesReceived, slot=slot, lbBridgePortReceiveMulticastLimitExceededs=lbBridgePortReceiveMulticastLimitExceededs, lbBridgePortFilteredToTable=lbBridgePortFilteredToTable, lbBridgePortAddressPortIndex=lbBridgePortAddressPortIndex, lbBridgePortAddressStaticPort=lbBridgePortAddressStaticPort, smmEntry=smmEntry, lb3gh=lb3gh, lbTrapDestEnterpriseIndex=lbTrapDestEnterpriseIndex, slotBoardType=slotBoardType, lbEthernetPortReceiveMulticastThreshold=lbEthernetPortReceiveMulticastThreshold, lbSystemFddiMacCount=lbSystemFddiMacCount, slotEntry=slotEntry, lbTrapEnterpriseOID=lbTrapEnterpriseOID, slotBoardRevision=slotBoardRevision, elmBaseFddiMACIndex=elmBaseFddiMACIndex, chassisManufacturer=chassisManufacturer, elmEthernetPortDroppedCts=elmEthernetPortDroppedCts, lbSlotOverTemperatureEvent=lbSlotOverTemperatureEvent, lbSystemNvMemorySize=lbSystemNvMemorySize, lbExpressEthernetPortLocalIndex=lbExpressEthernetPortLocalIndex, lbSlotExpressFddiPortBaseIndex=lbSlotExpressFddiPortBaseIndex, elmEthernetPortLabel=elmEthernetPortLabel, lbEthernetPortEntry=lbEthernetPortEntry, lbSlotInsertEvent=lbSlotInsertEvent, lbFddiPortSlotIndex=lbFddiPortSlotIndex, lbBridgePortForwardedToBridgeIndex=lbBridgePortForwardedToBridgeIndex, lbFddiMacSlotIndex=lbFddiMacSlotIndex, lbFddiPortEntry=lbFddiPortEntry, lbBridgeAddressThreshold=lbBridgeAddressThreshold, lbTrapNumber=lbTrapNumber, elmFddiMAC=elmFddiMAC, elmFddiMACEntry=elmFddiMACEntry, elmEthernetPortAction=elmEthernetPortAction, lbBridgePortAddressIsStatic=lbBridgePortAddressIsStatic, smmSlotIndex=smmSlotIndex, lbEthernetPortChipsetType=lbEthernetPortChipsetType, fbcmTable=fbcmTable, elmEthernetPortUTurnCts=elmEthernetPortUTurnCts, fbcmBaseMACIndex=fbcmBaseMACIndex, lbFddiMacPeakByteReceiveRate=lbFddiMacPeakByteReceiveRate, lbBridgePortCount=lbBridgePortCount, lbFddiPortTable=lbFddiPortTable, lbBridgeEntry=lbBridgeEntry, lbEthernetPortFrameReceiveRate=lbEthernetPortFrameReceiveRate, fbcm=fbcm, chassisControlPanelLines=chassisControlPanelLines, lbBridgePortReceiveUnicastFiltered=lbBridgePortReceiveUnicastFiltered, lbFddiMacBeaconHistory=lbFddiMacBeaconHistory, lbSlotBridgeFunctionCount=lbSlotBridgeFunctionCount, lbSystemExpressFddiPortCount=lbSystemExpressFddiPortCount, lbSystemControlPanelColumns=lbSystemControlPanelColumns, lbFddiMacIndex=lbFddiMacIndex, lbExpressFddiPort=lbExpressFddiPort, lbBridgePortTotalForwardedCts=lbBridgePortTotalForwardedCts, lb3ghMib=lb3ghMib, lbBridgePortIndex=lbBridgePortIndex, lbSystemName=lbSystemName, lbBridgeAddressTableSize=lbBridgeAddressTableSize, lbTrapDest=lbTrapDest, lbFddiMacPeakByteTransmitRate=lbFddiMacPeakByteTransmitRate, lbBridgePortTransmitMulticastFiltered=lbBridgePortTransmitMulticastFiltered, chassisSoftwareRevision=chassisSoftwareRevision, elmFddiMACForwardedCts=elmFddiMACForwardedCts, lbPowerSupply=lbPowerSupply, lbExpressEthernetPortAction=lbExpressEthernetPortAction, chassisAction=chassisAction, lbBridgeTable=lbBridgeTable, elmEthernetPortCount=elmEthernetPortCount, lbSystemFlashMemorySize=lbSystemFlashMemorySize, lbExpressEthernetPortDroppedCts=lbExpressEthernetPortDroppedCts, lbBridgePortReceiveBlockedDiscards=lbBridgePortReceiveBlockedDiscards, lbFddiPort=lbFddiPort, fbcmMACCount=fbcmMACCount, lbEthernetPortPeakByteReceiveRate=lbEthernetPortPeakByteReceiveRate, fbcmSlotIndex=fbcmSlotIndex, elmEthernetMACAddressTable=elmEthernetMACAddressTable, elmEthernetMACAddressRemoteAddress=elmEthernetMACAddressRemoteAddress, lbExpressFddiPortDroppedCts=lbExpressFddiPortDroppedCts, elmEthernetMACAddressEntry=elmEthernetMACAddressEntry, lbFddiMacByteReceiveRate=lbFddiMacByteReceiveRate, lbSystemControlPanelSoftwareRevision=lbSystemControlPanelSoftwareRevision, lbFddiPortLocalIndex=lbFddiPortLocalIndex, lbTrapDestAddr=lbTrapDestAddr, lbBridgePortReceiveSecurityDiscards=lbBridgePortReceiveSecurityDiscards, lbSlotExpressFunctionBaseIndex=lbSlotExpressFunctionBaseIndex, lbSystemExpressEthernetPortCount=lbSystemExpressEthernetPortCount, lbBridgePortTotalFiltered=lbBridgePortTotalFiltered, lbBridgePortFilteredToBridgeIndex=lbBridgePortFilteredToBridgeIndex, lbTrapEnterpriseTableEntry=lbTrapEnterpriseTableEntry, elmFddiMACCount=elmFddiMACCount, lbExpressAddressThreshold=lbExpressAddressThreshold, portSlotIndex=portSlotIndex, lbSystemSmtProxyTimeoutBase=lbSystemSmtProxyTimeoutBase, lbExpressIndex=lbExpressIndex, elmEthernetMACAddressStaticPort=elmEthernetMACAddressStaticPort, lbBridgePortTransmitBlockedDiscards=lbBridgePortTransmitBlockedDiscards, lbBridgeAddressThresholdEvent=lbBridgeAddressThresholdEvent, lbSystemFddiPortCount=lbSystemFddiPortCount, lbExpressFddiPortEntry=lbExpressFddiPortEntry, lbSystemControlPanelHardwareRevision=lbSystemControlPanelHardwareRevision, lbPowerSupplyStatus=lbPowerSupplyStatus, lbBridgePortFilteredToEntry=lbBridgePortFilteredToEntry, smm=smm, elmMACAddress=elmMACAddress, lbExpressFddiPortForwardedCts=lbExpressFddiPortForwardedCts, lbExpressEthernetPortAddressSlotIndex=lbExpressEthernetPortAddressSlotIndex, lbEthernetPortLabel=lbEthernetPortLabel, lbPowerSupplyFailureType=lbPowerSupplyFailureType, elmEthernetPortState=elmEthernetPortState, lbSystemExpressFunctionCount=lbSystemExpressFunctionCount, chassisSlotCount=chassisSlotCount, lbExpressEthernetPortSlotIndex=lbExpressEthernetPortSlotIndex, lbSlotExtractEvent=lbSlotExtractEvent, elmFddiSlotIndex=elmFddiSlotIndex, lbExpressEthernetPortIndex=lbExpressEthernetPortIndex, lbEthernetPortIndex=lbEthernetPortIndex, slotBoardStatus=slotBoardStatus, lbSlotEthernetPortBaseIndex=lbSlotEthernetPortBaseIndex, elmEthernetMACAddressAge=elmEthernetMACAddressAge, lbSlotBoardName=lbSlotBoardName, lbSlotBridgeFunctionBaseIndex=lbSlotBridgeFunctionBaseIndex, lbPowerSupplyLastFailure=lbPowerSupplyLastFailure, chassis=chassis, lbSlotBoardType=lbSlotBoardType, lbEthernetPortPeakByteTransmitRate=lbEthernetPortPeakByteTransmitRate, lbSlotFddiMacCount=lbSlotFddiMacCount, lbSlotExpressFunctionCount=lbSlotExpressFunctionCount, lbBridgePortTable=lbBridgePortTable, lbExpressLocalIndex=lbExpressLocalIndex, lbExpressEthernetPortAddressIsStatic=lbExpressEthernetPortAddressIsStatic, elmAddressThreshold=elmAddressThreshold, slotBoardNameAbbrev=slotBoardNameAbbrev, lbBridgeBaseSlotIndex=lbBridgeBaseSlotIndex, lbEthernetPortSlotIndex=lbEthernetPortSlotIndex, lbFddiMacPeakFrameReceiveRate=lbFddiMacPeakFrameReceiveRate, lbBridgePortForwardedToTable=lbBridgePortForwardedToTable, lbTrapEnterpriseTable=lbTrapEnterpriseTable, lbBridgePortAddressIndex=lbBridgePortAddressIndex, lbSlotExpressEthernetPortBaseIndex=lbSlotExpressEthernetPortBaseIndex, lbExpressTable=lbExpressTable, elmEthernetPortEntry=elmEthernetPortEntry, lbFddiMacFrameReceiveRate=lbFddiMacFrameReceiveRate, elmTable=elmTable, lbEthernetPort=lbEthernetPort, lbExpressFddiPortLocalIndex=lbExpressFddiPortLocalIndex, lbExpressEthernetPortAddressTable=lbExpressEthernetPortAddressTable, lbSlotBoardRevision=lbSlotBoardRevision, lbExpressSlotIndex=lbExpressSlotIndex, lbBridgePortReceiveOtherDiscards=lbBridgePortReceiveOtherDiscards, lbBridgePortForwardedToReceivePortIndex=lbBridgePortForwardedToReceivePortIndex, lbBridgePortBridgeIndex=lbBridgePortBridgeIndex, lbFddiMacReceiveMulticastThreshold=lbFddiMacReceiveMulticastThreshold, lbExpressEthernetPort=lbExpressEthernetPort, lbFddiMacPeakFrameTransmitRate=lbFddiMacPeakFrameTransmitRate, portLabel=portLabel, portTable=portTable, lbSystemBuildTime=lbSystemBuildTime, lbExpressEthernetPortForwardedCts=lbExpressEthernetPortForwardedCts, lbExpressEthernetPortAddressStaticPort=lbExpressEthernetPortAddressStaticPort, slotIndex=slotIndex, lbFddiMacTable=lbFddiMacTable, lbBridgePortFilteredToCount=lbBridgePortFilteredToCount, elmFddiMACTable=elmFddiMACTable, lbSystemSoftwareRevision=lbSystemSoftwareRevision, lbSystemAction=lbSystemAction, lbPowerSupplyIndex=lbPowerSupplyIndex, lbBridgePortAddressRemoteAddress=lbBridgePortAddressRemoteAddress, lbBridgePortAddressAge=lbBridgePortAddressAge, elm=elm, lbSystemType=lbSystemType, chassisBuildTime=chassisBuildTime, elmEthernetMACAddressPortIndex=elmEthernetMACAddressPortIndex, lbSlotEntry=lbSlotEntry, lbBridgePortTotalDiscards=lbBridgePortTotalDiscards, lbTrapEnterpriseIndex=lbTrapEnterpriseIndex, lbSlotExpressFddiPortCount=lbSlotExpressFddiPortCount, lbSlotBoardNameAbbrev=lbSlotBoardNameAbbrev, chassisId=chassisId, lbFddiMacByteTransmitRate=lbFddiMacByteTransmitRate, lbExpressEthernetPortAddress=lbExpressEthernetPortAddress, lbBridgePortReceiveUnknownDiscards=lbBridgePortReceiveUnknownDiscards, lbSlotTable=lbSlotTable, lbBridgePortIpFragmentationEnabled=lbBridgePortIpFragmentationEnabled, elmEthernetPort=elmEthernetPort, elmBaseEthernetPortIndex=elmBaseEthernetPortIndex, lbEthernetPortType=lbEthernetPortType, lbFddiMacEntry=lbFddiMacEntry, lbFddiMacFrameTransmitRate=lbFddiMacFrameTransmitRate, lbExpressEthernetPortAddressEntry=lbExpressEthernetPortAddressEntry, lbFddiPortLabel=lbFddiPortLabel, lbBridgePortLocalIndex=lbBridgePortLocalIndex, lbBridgePortTransmitUnicastFiltered=lbBridgePortTransmitUnicastFiltered, elmEthernetPortForwardedCts=elmEthernetPortForwardedCts, slotBoardAction=slotBoardAction, lbBridgePortReceiveMulticastFiltered=lbBridgePortReceiveMulticastFiltered, fcmTable=fcmTable, fcmBasePortIndex=fcmBasePortIndex, lbSystemSmtProxyEvents=lbSystemSmtProxyEvents, lbExpressEthernetPortAddressType=lbExpressEthernetPortAddressType, fbcmEntry=fbcmEntry, slotTable=slotTable)
mibBuilder.exportSymbols("LB3GH-1-0-7", lbFddiPortIndex=lbFddiPortIndex, lbBridgePortAddressEntry=lbBridgePortAddressEntry, lbSystemControlPanelText=lbSystemControlPanelText, lbExpressFddiPortIndex=lbExpressFddiPortIndex, lbExpressEthernetPortAddressAge=lbExpressEthernetPortAddressAge, lbTrapDestTable=lbTrapDestTable, lbBridgePortAddressTable=lbBridgePortAddressTable, portIndex=portIndex, lbEthernetPortPeakFrameTransmitRate=lbEthernetPortPeakFrameTransmitRate, lbTrapDestTableEntry=lbTrapDestTableEntry, lbExpressEthernetPortAddressRemoteAddress=lbExpressEthernetPortAddressRemoteAddress, lbPowerSupplyFailureEvent=lbPowerSupplyFailureEvent, elmEntry=elmEntry, lbSystemEthernetPortCount=lbSystemEthernetPortCount, elmEthernetPortIndex=elmEthernetPortIndex, lbFddiMac=lbFddiMac, lbSystemControlPanelLines=lbSystemControlPanelLines, fcmPortCount=fcmPortCount, lbBridgePortFilteredToDstPortIndex=lbBridgePortFilteredToDstPortIndex, lbEthernetPortByteReceiveRate=lbEthernetPortByteReceiveRate, lbSlot=lbSlot, lbBridgeIndex=lbBridgeIndex, lbTrapEntryStatus=lbTrapEntryStatus, lbExpressEntry=lbExpressEntry, lbSlotIndex=lbSlotIndex, lbExpressEthernetPortAddressPortIndex=lbExpressEthernetPortAddressPortIndex, chassisControlPanelColumns=chassisControlPanelColumns, fcmSlotIndex=fcmSlotIndex, elmEthernetMACAddressIndex=elmEthernetMACAddressIndex, elmFddiMACDroppedCts=elmFddiMACDroppedCts, fbcmPortCount=fbcmPortCount, fcmEntry=fcmEntry, lbSystemId=lbSystemId, lbSlotExpressEthernetPortCount=lbSlotExpressEthernetPortCount, lbEthernetPortLinkStatus=lbEthernetPortLinkStatus, lbEthernetPortByteTransmitRate=lbEthernetPortByteTransmitRate, lbExpressEthernetPortUTurnCts=lbExpressEthernetPortUTurnCts, lbBridgePortFilteredToReceivePortIndex=lbBridgePortFilteredToReceivePortIndex, chassisRevision=chassisRevision, lbSystemManufacturer=lbSystemManufacturer, lbPowerSupplyEntry=lbPowerSupplyEntry, lbBridge=lbBridge, chassisName=chassisName, smmEthernetPortCount=smmEthernetPortCount, lbSystemOverTemperatureEvent=lbSystemOverTemperatureEvent, elmSlotIndex=elmSlotIndex, lbSystemSlotCount=lbSystemSlotCount, lbTrapEnterprise=lbTrapEnterprise, lbPowerSupplyLocation=lbPowerSupplyLocation, lbBridgePortAddressBridgeIndex=lbBridgePortAddressBridgeIndex, lbPowerSupplyTable=lbPowerSupplyTable, lbBridgePortForwardedToDstPortIndex=lbBridgePortForwardedToDstPortIndex)
