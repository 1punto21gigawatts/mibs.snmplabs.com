#
# PySNMP MIB module INTELCORPORATIONBASEBOARD2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTELCORPORATIONBASEBOARD2-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:55:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, iso, Bits, Integer32, Counter32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ModuleIdentity, MibIdentifier, TimeTicks, enterprises, NotificationType, Counter64, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "iso", "Bits", "Integer32", "Counter32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ModuleIdentity", "MibIdentifier", "TimeTicks", "enterprises", "NotificationType", "Counter64", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DmiCounter(Counter32):
    pass

class DmiInteger(Integer32):
    pass

class DmiInteger64X(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-18446744073709551615, 18446744073709551615)

class DmiOctetstring(OctetString):
    pass

class DmiDisplaystring(DisplayString):
    pass

class DmiDateX(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(28, 28)
    fixedLength = 28

class DmiComponentIndex(Integer32):
    pass

intel = MibIdentifier((1, 3, 6, 1, 4, 1, 343))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2))
server_products = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 6)).setLabel("server-products")
platforms = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 6, 2))
basebrd2 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2))
dmtfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1))
tComponentid = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1), )
if mibBuilder.loadTexts: tComponentid.setStatus('mandatory')
if mibBuilder.loadTexts: tComponentid.setDescription('This group defines the attributes common to all components. This groupis required.')
eComponentid = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eComponentid.setStatus('mandatory')
if mibBuilder.loadTexts: eComponentid.setDescription('')
a1Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Manufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: a1Manufacturer.setDescription('Manufacturer of this system.')
a1Product = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Product.setStatus('mandatory')
if mibBuilder.loadTexts: a1Product.setDescription('Product name for this system.')
a1Version = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Version.setStatus('mandatory')
if mibBuilder.loadTexts: a1Version.setDescription('Version number of this system.')
a1SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1SerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a1SerialNumber.setDescription('Serial number for this system.')
a1Installation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1, 1, 5), DmiDateX()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Installation.setStatus('mandatory')
if mibBuilder.loadTexts: a1Installation.setDescription('The time and date when this component was installed.')
a1Verify = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vAnErrorOccurredCheckStatusCode", 0), ("vThisComponentDoesNotExist", 1), ("vVerificationIsNotSupported", 2), ("vReserved", 3), ("vThisComponentExistsButTheFunctionalityI", 4), ("vThisComponentExistsButTheFunctionality1", 5), ("vThisComponentExistsAndIsNotFunctioningC", 6), ("vThisComponentExistsAndIsFunctioningCorr", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Verify.setStatus('mandatory')
if mibBuilder.loadTexts: a1Verify.setDescription('A code that provides a level of verification that the component is stillinstalled and working.')
tGeneralInformation = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 2), )
if mibBuilder.loadTexts: tGeneralInformation.setStatus('mandatory')
if mibBuilder.loadTexts: tGeneralInformation.setDescription('This group defines general information about this system.')
eGeneralInformation = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 2, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eGeneralInformation.setStatus('mandatory')
if mibBuilder.loadTexts: eGeneralInformation.setDescription('')
a2SystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 2, 1, 1), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2SystemName.setStatus('mandatory')
if mibBuilder.loadTexts: a2SystemName.setDescription('A name to identify this system.')
a2SystemLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 2, 1, 2), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2SystemLocation.setStatus('mandatory')
if mibBuilder.loadTexts: a2SystemLocation.setDescription('The physical location of this system.')
a2SystemPrimaryUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 2, 1, 3), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2SystemPrimaryUserName.setStatus('mandatory')
if mibBuilder.loadTexts: a2SystemPrimaryUserName.setDescription('The name of the primary user or owner of this system.')
a2SystemPrimaryUserPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 2, 1, 4), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2SystemPrimaryUserPhone.setStatus('mandatory')
if mibBuilder.loadTexts: a2SystemPrimaryUserPhone.setDescription('The phone number of the primary user of this system.')
a2SystemBootupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 2, 1, 5), DmiDateX()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2SystemBootupTime.setStatus('mandatory')
if mibBuilder.loadTexts: a2SystemBootupTime.setDescription('The time at which the system was last booted.')
a2SystemDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 2, 1, 6), DmiDateX()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2SystemDateTime.setStatus('mandatory')
if mibBuilder.loadTexts: a2SystemDateTime.setDescription('The actual system date and time.')
tSystemBios = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 4), )
if mibBuilder.loadTexts: tSystemBios.setStatus('mandatory')
if mibBuilder.loadTexts: tSystemBios.setDescription('This group defines the attributes for the System BIOS.')
eSystemBios = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 4, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a4BiosIndex"))
if mibBuilder.loadTexts: eSystemBios.setStatus('mandatory')
if mibBuilder.loadTexts: eSystemBios.setDescription('')
a4BiosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 4, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4BiosIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a4BiosIndex.setDescription('The index into the system BIOS table.')
a4BiosManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 4, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4BiosManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: a4BiosManufacturer.setDescription('The name of the company that wrote this System BIOS.')
a4BiosVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 4, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4BiosVersion.setStatus('mandatory')
if mibBuilder.loadTexts: a4BiosVersion.setDescription('The version number or version string of this BIOS.')
a4BiosRomSize = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 4, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4BiosRomSize.setStatus('mandatory')
if mibBuilder.loadTexts: a4BiosRomSize.setDescription('The physical size of this BIOS ROM device in kilobytes.')
a4BiosStartingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 4, 1, 5), DmiInteger64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4BiosStartingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a4BiosStartingAddress.setDescription('The starting physical address for the memory which the BIOS occupies.')
a4BiosEndingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 4, 1, 6), DmiInteger64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4BiosEndingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a4BiosEndingAddress.setDescription('The ending physical address for the memory which the BIOS occupies.')
a4BiosLoaderVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 4, 1, 7), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4BiosLoaderVersion.setStatus('mandatory')
if mibBuilder.loadTexts: a4BiosLoaderVersion.setDescription('The BIOS flash loader version number or string.')
a4BiosReleaseDate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 4, 1, 8), DmiDateX()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4BiosReleaseDate.setStatus('mandatory')
if mibBuilder.loadTexts: a4BiosReleaseDate.setDescription('The BIOS release date.')
a4PrimaryBios = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4PrimaryBios.setStatus('mandatory')
if mibBuilder.loadTexts: a4PrimaryBios.setDescription('If true, this is the primary System BIOS.')
tSystemBiosCharacteristics = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 5), )
if mibBuilder.loadTexts: tSystemBiosCharacteristics.setStatus('mandatory')
if mibBuilder.loadTexts: tSystemBiosCharacteristics.setDescription('This group defines the characteristics of the System BIOS.')
eSystemBiosCharacteristics = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 5, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a5BiosCharacteristicIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a5BiosNumber"))
if mibBuilder.loadTexts: eSystemBiosCharacteristics.setStatus('mandatory')
if mibBuilder.loadTexts: eSystemBiosCharacteristics.setDescription('')
a5BiosCharacteristicIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 5, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5BiosCharacteristicIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a5BiosCharacteristicIndex.setDescription('This is an index into the BIOS Characteristics table.')
a5BiosNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 5, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5BiosNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a5BiosNumber.setDescription('The BIOS number, which correlates to the BIOS Index attribute in theSystem BIOS group.')
a5BiosCharacteristic = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 160))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vUnsupported", 3), ("vIsaSupport", 4), ("vMcaSupport", 5), ("vEisaSupport", 6), ("vPciSupport", 7), ("vPcmciaSupport", 8), ("vPnpSupport", 9), ("vApmSupport", 10), ("vUpgradeableBios", 11), ("vBiosShadowingAllowed", 12), ("vVlVesaSupport", 13), ("vEscdSupport", 14), ("vPc-98", 160)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5BiosCharacteristic.setStatus('mandatory')
if mibBuilder.loadTexts: a5BiosCharacteristic.setDescription('The different features supported by this version of the BIOS.')
a5BiosCharacteristicDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 5, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5BiosCharacteristicDescription.setStatus('mandatory')
if mibBuilder.loadTexts: a5BiosCharacteristicDescription.setDescription('An expanded description of this BIOS Characteristic.')
tProcessor = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 6), )
if mibBuilder.loadTexts: tProcessor.setStatus('mandatory')
if mibBuilder.loadTexts: tProcessor.setDescription('This group defines the attributes for each and every processorin talled in this system.')
eProcessor = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 6, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a6ProcessorIndex"))
if mibBuilder.loadTexts: eProcessor.setStatus('mandatory')
if mibBuilder.loadTexts: eProcessor.setDescription('')
a6ProcessorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 6, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6ProcessorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a6ProcessorIndex.setDescription('An index into the processor table.')
a6ProcessorType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vCentralProcessor", 3), ("vMathProcessor", 4), ("vDspProcessor", 5), ("vVideoProcessor", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6ProcessorType.setStatus('mandatory')
if mibBuilder.loadTexts: a6ProcessorType.setDescription('The type of processor currently in the system.')
a6ProcessorFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 18, 25, 32, 33, 34, 35, 36, 48, 64, 80, 96, 97, 98, 99, 100, 101, 112, 128, 144, 160))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("v8086", 3), ("v80286", 4), ("v80386", 5), ("v80486", 6), ("v8087", 7), ("v80287", 8), ("v80387", 9), ("v80487", 10), ("vPentiumFamily", 11), ("vPentiumPro", 12), ("vM1Family", 18), ("vK5Family", 25), ("vPowerPcFamily", 32), ("vPowerPc601", 33), ("vPowerPc603", 34), ("vPowerPc603plus", 35), ("vPowerPc604", 36), ("vAlphaFamily", 48), ("vMipsFamily", 64), ("vSparcFamily", 80), ("v68040", 96), ("v68xxxFamily", 97), ("v68000", 98), ("v68010", 99), ("v68020", 100), ("v68030", 101), ("vHobbitFamily", 112), ("vWeitek", 128), ("vPa-riscFamily", 144), ("vV30Family", 160)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6ProcessorFamily.setStatus('mandatory')
if mibBuilder.loadTexts: a6ProcessorFamily.setDescription('The family of processors to which this processor belongs.')
a6ProcessorVersionInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 6, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6ProcessorVersionInformation.setStatus('mandatory')
if mibBuilder.loadTexts: a6ProcessorVersionInformation.setDescription('The version number or string for this processor.')
a6MaximumSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 6, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6MaximumSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: a6MaximumSpeed.setDescription('The maximum speed (in MHz) of this processor.')
a6CurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 6, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6CurrentSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: a6CurrentSpeed.setDescription('The current speed (in MHz) of this processor.')
a6ProcessorUpgrade = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vDaughterBoard", 3), ("vZifSocket", 4), ("vReplacementpiggyBack", 5), ("vNone", 6), ("vLifSocket", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6ProcessorUpgrade.setStatus('mandatory')
if mibBuilder.loadTexts: a6ProcessorUpgrade.setDescription('The method by which this processor can be upgraded, if upgrades aresupported.')
a6FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 6, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6FruGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a6FruGroupIndex.setDescription("If this is a Field Replaceable Unit or if it is part of another FRU, thisprovides an index into the FRU table; 'value = -1' indicates that the group is not a FRU.")
a6OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 6, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6OperationalGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a6OperationalGroupIndex.setDescription('The index into the Operational State Table for this device if applicable.')
a6Level1CacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 6, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6Level1CacheIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a6Level1CacheIndex.setDescription('An index into the System Cache table that identifies the entrythat describes the L1 cache for this processor. If more than oneprocessor points to the same cache entry this means they sharethat cache.')
a6Level2CacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 6, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6Level2CacheIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a6Level2CacheIndex.setDescription('An index into the System Cache table that identifies the entrythat describes the L2 cache for this processor If more than oneprocessor points to the same cache entry this means they sharethat cache.')
a6Level3CacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 6, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6Level3CacheIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a6Level3CacheIndex.setDescription('An index into the System Cache table that identifies the entrythat describes the L3 cache for this processor. If more than oneprocessor points to the same cache entry this means they sharethat cache.')
tMotherboard = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 7), )
if mibBuilder.loadTexts: tMotherboard.setStatus('mandatory')
if mibBuilder.loadTexts: tMotherboard.setDescription('This group defines attributes for the motherboard.')
eMotherboard = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 7, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eMotherboard.setStatus('mandatory')
if mibBuilder.loadTexts: eMotherboard.setDescription('')
a7NumberOfExpansionSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 7, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7NumberOfExpansionSlots.setStatus('mandatory')
if mibBuilder.loadTexts: a7NumberOfExpansionSlots.setDescription('The total number of expansion slots which physically exist on themotherboard whether occupied or not (see System Slots group).')
a7FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 7, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7FruGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a7FruGroupIndex.setDescription("If this is a Field Replaceable Unit or if it is part of another FRU, thisprovides an index into the FRU table; 'value = -1' indicates that the group is not a FRU.")
a7OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 7, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7OperationalGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a7OperationalGroupIndex.setDescription('The index into the Operational State Table for this device if applicable.')
tSystemCache = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 10), )
if mibBuilder.loadTexts: tSystemCache.setStatus('mandatory')
if mibBuilder.loadTexts: tSystemCache.setDescription('This group defines the attributes for different System Caches installed inthis system.')
eSystemCache = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 10, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a10SystemCacheIndex"))
if mibBuilder.loadTexts: eSystemCache.setStatus('mandatory')
if mibBuilder.loadTexts: eSystemCache.setDescription('')
a10SystemCacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 10, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10SystemCacheIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a10SystemCacheIndex.setDescription('An index into the System Cache table.')
a10SystemCacheLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vPrimary", 3), ("vSecondary", 4), ("vTertiary", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10SystemCacheLevel.setStatus('mandatory')
if mibBuilder.loadTexts: a10SystemCacheLevel.setDescription('Is this the primary System Cache, or a subsidiary cache?')
a10SystemCacheSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 10, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10SystemCacheSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: a10SystemCacheSpeed.setDescription('The speed of this System Cache module in nanoseconds.')
a10SystemCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 10, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10SystemCacheSize.setStatus('mandatory')
if mibBuilder.loadTexts: a10SystemCacheSize.setDescription('The size of this System Cache module in kilobytes.')
a10SystemCacheWritePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vWriteBack", 3), ("vWriteThrough", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10SystemCacheWritePolicy.setStatus('mandatory')
if mibBuilder.loadTexts: a10SystemCacheWritePolicy.setDescription('Is this a write-back or a write-through cache?')
a10SystemCacheErrorCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNone", 3), ("vParity", 4), ("vSingleBitEcc", 5), ("vMultibitEcc", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10SystemCacheErrorCorrection.setStatus('mandatory')
if mibBuilder.loadTexts: a10SystemCacheErrorCorrection.setDescription('The error correction scheme supported by this cache component.')
a10FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 10, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10FruGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a10FruGroupIndex.setDescription("If this is a Field Replaceable Unit or if it is part of another FRU, thisprovides an index into the FRU table; 'value = -1' indicates that the group is not a FRU.")
a10OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 10, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10OperationalGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a10OperationalGroupIndex.setDescription('The index into the Operational State Table for this device.')
a10SystemCacheType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vInstruction", 3), ("vData", 4), ("vUnified", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10SystemCacheType.setStatus('mandatory')
if mibBuilder.loadTexts: a10SystemCacheType.setDescription('This defines the system cache type.')
tPowerSupply = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17), )
if mibBuilder.loadTexts: tPowerSupply.setStatus('mandatory')
if mibBuilder.loadTexts: tPowerSupply.setDescription('This group defines various attributes for power supplies in this system.')
ePowerSupply = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a17PowerSupplyIndex"))
if mibBuilder.loadTexts: ePowerSupply.setStatus('mandatory')
if mibBuilder.loadTexts: ePowerSupply.setDescription('')
a17PowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17PowerSupplyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a17PowerSupplyIndex.setDescription('The index number of the current power supply.')
a17FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17FruGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a17FruGroupIndex.setDescription("If this is a Field Replaceable Unit or if it is part of another FRU, thisprovides an index into the FRU table; 'value = -1' indicates that the group is not a FRU.")
a17OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17OperationalGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a17OperationalGroupIndex.setDescription('The index into the Operational State table for this device.')
a17PowerUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17PowerUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a17PowerUnitIndex.setDescription('This is the ID of the Power Unit (logical power supply) to which thisPower Supply belongs. This value matches up with the Power Unit Table Indexattribute defined in the Power Unit Globe Table.')
a17PowerSupplyType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vLinear", 3), ("vSwitching", 4), ("vBattery", 5), ("vUps", 6), ("vConverter", 7), ("vRegulator", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17PowerSupplyType.setStatus('mandatory')
if mibBuilder.loadTexts: a17PowerSupplyType.setDescription('This attribute describes the type of Power Supply, e.g. Linear, Switching, Battery, etc.')
a17InputVoltageCapabilityDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17InputVoltageCapabilityDescription.setStatus('mandatory')
if mibBuilder.loadTexts: a17InputVoltageCapabilityDescription.setDescription('An expanded description of the Input Voltage Capability for this PowerSupply.')
a17Range1InputVoltageLow = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17Range1InputVoltageLow.setStatus('mandatory')
if mibBuilder.loadTexts: a17Range1InputVoltageLow.setDescription("The low voltage of Input Voltage Range 1 for this Power Supply, inmillivolts. A value of 0x80000000 denotes 'unknown'.")
a17Range1InputVoltageHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17Range1InputVoltageHigh.setStatus('mandatory')
if mibBuilder.loadTexts: a17Range1InputVoltageHigh.setDescription("The high voltage of Input Voltage Range 1 for this Power Supply, inmillivolts. A value of 0x80000000 denotes 'unknown'.")
a17Range1VoltageProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17Range1VoltageProbeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a17Range1VoltageProbeIndex.setDescription('Index into the Voltage Probe table identifying the voltage probemonitoring this input range. 0 indicates no probe provided.')
a17Range1ElectricalCurrentProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17Range1ElectricalCurrentProbeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a17Range1ElectricalCurrentProbeIndex.setDescription('Index into the Elelctrical Current Probe table identifying the Electrical current probe monitoring this input range. 0 indicates no probe provided.')
a17Range2InputVoltageLow = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17Range2InputVoltageLow.setStatus('mandatory')
if mibBuilder.loadTexts: a17Range2InputVoltageLow.setDescription("The low voltage of Input Voltage Range 2 for this Power Supply, inmillivolts. A value of 0x80000000 denotes 'unknown'.")
a17Range2InputVoltageHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17Range2InputVoltageHigh.setStatus('mandatory')
if mibBuilder.loadTexts: a17Range2InputVoltageHigh.setDescription("The high voltage of Input Voltage Range 2 for this Power Supply, inmillivolts. A value of 0x80000000 denotes 'unknown'")
a17Range2VoltageProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 13), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17Range2VoltageProbeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a17Range2VoltageProbeIndex.setDescription('Index into the Voltage Probe table identifying the voltage probemonitoring this input range. 0 indicates no probe provided.')
a17Range2CurrentProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 14), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17Range2CurrentProbeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a17Range2CurrentProbeIndex.setDescription('Index into the Current Probe table identifying the current probemonitoring this input range. 0 indicates no probe provided.')
a17ActiveInputVoltageRange = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vRange1", 3), ("vRange2", 4), ("vBoth", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17ActiveInputVoltageRange.setStatus('mandatory')
if mibBuilder.loadTexts: a17ActiveInputVoltageRange.setDescription('The value of this attribute indicates which input voltage range of thisPower Supply is currently active.')
a17InputVoltageRangeSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vManual", 3), ("vAutoswitch", 4), ("vWideRange", 5), ("vNotApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17InputVoltageRangeSwitching.setStatus('mandatory')
if mibBuilder.loadTexts: a17InputVoltageRangeSwitching.setDescription('This attribute describes the kind of input voltage range switching that isimplemented in this power supply.')
a17Range1InputFrequencyLow = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 17), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17Range1InputFrequencyLow.setStatus('mandatory')
if mibBuilder.loadTexts: a17Range1InputFrequencyLow.setDescription("The frequency at the low end of this power supply's Input FrequencyRange 1. A value of zero implies DC. A value of 0x80000000 denotes 'unknown'")
a17Range1InputFrequencyHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 18), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17Range1InputFrequencyHigh.setStatus('mandatory')
if mibBuilder.loadTexts: a17Range1InputFrequencyHigh.setDescription("The frequency at the high end of this power supply's Input FrequencyRange 1. A value of zero implies DC. A value of 0x80000000 denotes 'unknown'")
a17Range2InputFrequencyLow = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 19), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17Range2InputFrequencyLow.setStatus('mandatory')
if mibBuilder.loadTexts: a17Range2InputFrequencyLow.setDescription("The frequency at the low end of this power supply's Input FrequencyRange 2. A value of zero implies DC. A value of 0x80000000 denotes 'unknown'")
a17Range2InputFrequencyHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 20), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17Range2InputFrequencyHigh.setStatus('mandatory')
if mibBuilder.loadTexts: a17Range2InputFrequencyHigh.setDescription("The frequency at the high end of this power supply's Input FrequencyRange 2. A value of zero implies DC. A value of 0x80000000 denotes 'unknown'")
a17TotalOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 21), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17TotalOutputPower.setStatus('mandatory')
if mibBuilder.loadTexts: a17TotalOutputPower.setDescription("This attribute value represents the total output power of this powersupply in milliWatts. 0x80000000 denotes 'unknown'")
tSystemSlots = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 19), )
if mibBuilder.loadTexts: tSystemSlots.setStatus('mandatory')
if mibBuilder.loadTexts: tSystemSlots.setDescription('This group defines the attributes for the different system expansion slotssupportedin this system.')
eSystemSlots = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 19, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a19SlotIndex"))
if mibBuilder.loadTexts: eSystemSlots.setStatus('mandatory')
if mibBuilder.loadTexts: eSystemSlots.setDescription('')
a19SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 19, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a19SlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a19SlotIndex.setDescription('An index into the system slot table. This is the hardware ID number foreach expansion slot, whether it is occupied or not (starting with 1).')
a19SlotType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 19, 1, 2), DmiInteger64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a19SlotType.setStatus('mandatory')
if mibBuilder.loadTexts: a19SlotType.setDescription('The bus type supported in this slot. This is a bit field with the followingdefinitions: Bit 0 (2^0), if set, means it is a long-length card; if 0, it is a short-length card, Bit 1(2^1), if set, indicates ISA, Bit 2 (2^2) indicates EISA, Bit 3 (2^3) indicates MCA, Bit 4 (2^4) indicates PCI, Bit 5 (2^5) indicates VL,Bit 6 (2^6) indicates PCMCIA, Bit (2^7) refers to NuBus, Bit 8 (2^8) indicates PC-98/C20, Bit 9 (2^9) indicates PC-98/C24, Bit 10 (2^10) indicates PC-98/E, Bit 11 (2^11) indicates PC-98/Local ')
a19SlotWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 19, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("v8BitCard", 3), ("v16BitCard", 4), ("v32BitCard", 5), ("v64BitCard", 6), ("v128BitCard", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a19SlotWidth.setStatus('mandatory')
if mibBuilder.loadTexts: a19SlotWidth.setDescription('The maximum bus width of cards accepted in this slot.')
a19CurrentUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 19, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vAvailable", 3), ("vInUse", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a19CurrentUsage.setStatus('mandatory')
if mibBuilder.loadTexts: a19CurrentUsage.setDescription('Is this slot is currently in use?')
a19SlotDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 19, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a19SlotDescription.setStatus('mandatory')
if mibBuilder.loadTexts: a19SlotDescription.setDescription('The card currently occupying this slot.')
a19SlotCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 19, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vBusConnector", 3), ("vPcmciaSlot", 4), ("vMotherboard", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a19SlotCategory.setStatus('mandatory')
if mibBuilder.loadTexts: a19SlotCategory.setDescription("The word 'slot' is used to refer to bus slots. The last case (motherboard)refers to situations where a functional element is integrated onto, say, a motherboardand connects to a bus without a connector. It still takes up an expansion site on the busbut this is termed a 'virtual slot' as opposed to a physical slot (see the attribute 'VirtualSlot'). Virtual slots are in effect permanently occupied expansion sites. This attributeestablis es which category of physical slot this table entry is defining.")
a19VirtualSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 19, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a19VirtualSlot.setStatus('mandatory')
if mibBuilder.loadTexts: a19VirtualSlot.setDescription("This attribute indicates whether this is a 'virtual slot' or not. A 'virtualslot' is an expansion site that is permanently occupied because of the level ofintegration of an expandable component. An example of a virtual slot is an I/O busposition taken up by a LAN controller that is integrated onto a motherboard. A slot withthe 'Slot Category' of Motherboard is typically a Virtual Slot.")
a19ResourceUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 19, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a19ResourceUserId.setStatus('mandatory')
if mibBuilder.loadTexts: a19ResourceUserId.setDescription("Value used to locate the rows in the System Resources 2 table forthe resources associated with this slot or expansion site. 0 = 'unspecified'.")
tFieldReplaceableUnit = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 30), )
if mibBuilder.loadTexts: tFieldReplaceableUnit.setStatus('mandatory')
if mibBuilder.loadTexts: tFieldReplaceableUnit.setDescription('A Field Replaceable Unit (FRU), is defined as a hardware componentwhich is designed to be separately removable for replacement or repair. For thepurposes of this definition, a motherboard and a fixed hard disk are FRUs, whereas afixed hard disk platter or a chip fixed in place on the motherboard are not FRUs sincethey are not designed to be separately removable. Each instance within the FRU tableshould contain the device group and instance data for the associated hardwarecomponent.')
eFieldReplaceableUnit = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 30, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a30FruIndex"))
if mibBuilder.loadTexts: eFieldReplaceableUnit.setStatus('mandatory')
if mibBuilder.loadTexts: eFieldReplaceableUnit.setDescription('')
a30FruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 30, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a30FruIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a30FruIndex.setDescription('The index into the Field Replaceable Unit table.')
a30DeviceGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 30, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a30DeviceGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a30DeviceGroupIndex.setDescription('The group ID of the group referencing this Field Replaceable Unitinstance.')
a30Description = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 30, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a30Description.setStatus('mandatory')
if mibBuilder.loadTexts: a30Description.setDescription('A clear description of this Field Replaceable Unit.')
a30Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 30, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a30Manufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: a30Manufacturer.setDescription('The name of the company manufacturing or providing this FieldRep aceableUnit.')
a30Model = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 30, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a30Model.setStatus('mandatory')
if mibBuilder.loadTexts: a30Model.setDescription("The manufacturer's model number for this Field Replaceable Unit.")
a30PartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 30, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a30PartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a30PartNumber.setDescription('A part number by which a replacement part can be ordered for this FieldReplaceable Unit.')
a30FruSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 30, 1, 7), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a30FruSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a30FruSerialNumber.setDescription("The manufacturer's serial number for this Field Replaceable Unit.")
a30RevisionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 30, 1, 8), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a30RevisionLevel.setStatus('mandatory')
if mibBuilder.loadTexts: a30RevisionLevel.setDescription('The revision level of this Field Replaceable Unit.')
a30WarrantyStartDate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 30, 1, 9), DmiDateX()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a30WarrantyStartDate.setStatus('mandatory')
if mibBuilder.loadTexts: a30WarrantyStartDate.setDescription('The start date of the service warranty for this Field Replaceabl Unit.')
a30WarrantyDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 30, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a30WarrantyDuration.setStatus('mandatory')
if mibBuilder.loadTexts: a30WarrantyDuration.setDescription('The total duration of this Field Replaceable Unit warranty in months.')
a30SupportPhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 30, 1, 11), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a30SupportPhoneNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a30SupportPhoneNumber.setDescription('The phone number(s) for support for this Field Replaceable Unit.')
a30FruInternetUniformResourceLocator = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 30, 1, 12), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a30FruInternetUniformResourceLocator.setStatus('mandatory')
if mibBuilder.loadTexts: a30FruInternetUniformResourceLocator.setDescription('The Internet Uniform Resource Locator string that can be used through a World Wide Web browser to obtain further information about this FRU')
tOperationalState = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 31), )
if mibBuilder.loadTexts: tOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: tOperationalState.setDescription('This group provides the operational state, usage, and availabili y status,and administrative state indicators for specific Device Group instances ')
eOperationalState = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 31, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a31OperationalStateInstanceIndex"))
if mibBuilder.loadTexts: eOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: eOperationalState.setDescription('')
a31OperationalStateInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 31, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31OperationalStateInstanceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a31OperationalStateInstanceIndex.setDescription('The Index into the Operational State table.')
a31DeviceGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 31, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31DeviceGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a31DeviceGroupIndex.setDescription('The group ID of the group referencing this instance.')
a31OperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 31, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vEnabled", 3), ("vDisabled", 4), ("vNotApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31OperationalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a31OperationalStatus.setDescription('The operational status of the Device Group instance.')
a31UsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 31, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vIdle", 3), ("vActive", 4), ("vBusy", 5), ("vNotApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31UsageState.setStatus('mandatory')
if mibBuilder.loadTexts: a31UsageState.setDescription('The usage state of the Device Group instance.')
a31AvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 31, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vRunning", 3), ("vWarning", 4), ("vInTest", 5), ("vNotApplicable", 6), ("vPowerOff", 7), ("vOffLine", 8), ("vOffDuty", 9), ("vDegraded", 10), ("vNotInstalled", 11), ("vInstallError", 12), ("vPowerSave", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31AvailabilityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a31AvailabilityStatus.setDescription('The availability status of the Device Group instance.')
a31AdministrativeState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 31, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vLocked", 3), ("vUnlocked", 4), ("vNotApplicable", 5), ("vShuttingDown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31AdministrativeState.setStatus('mandatory')
if mibBuilder.loadTexts: a31AdministrativeState.setDescription('The administrative state of the Device Group instance.')
a31FatalErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 31, 1, 7), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31FatalErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: a31FatalErrorCount.setDescription('The accumulated Fatal or Non-recoverable error count for this DeviceGroup instance.')
a31MajorErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 31, 1, 8), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31MajorErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: a31MajorErrorCount.setDescription('The accumulated Major or Critical error count for this Device Groupinstance.')
a31WarningErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 31, 1, 9), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31WarningErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: a31WarningErrorCount.setDescription('The accumulated Warning or Non-Critical error count for this DeviceGroup instance.')
a31CurrentErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 31, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vNon-critical", 4), ("vCritical", 5), ("vNon-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31CurrentErrorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a31CurrentErrorStatus.setDescription("This attribute presents the current error status for this Device Groupinstance. The most critical error status in effect should be presented. I.e. if a part of theDevice Group instance is 'Critical', while other status is 'Non-critical' then the status'Critical' should be reported.")
tPhysicalMemoryArray = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 34), )
if mibBuilder.loadTexts: tPhysicalMemoryArray.setStatus('mandatory')
if mibBuilder.loadTexts: tPhysicalMemoryArray.setDescription('This group represents an array of physical memory as a collectio ofone or more Memory Devices associated in sets and partitions.')
ePhysicalMemoryArray = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 34, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a34MemoryArrayTableIndex"))
if mibBuilder.loadTexts: ePhysicalMemoryArray.setStatus('mandatory')
if mibBuilder.loadTexts: ePhysicalMemoryArray.setDescription('')
a34MemoryArrayTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 34, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a34MemoryArrayTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a34MemoryArrayTableIndex.setDescription('A unique number that identifies this row.')
a34MemoryArrayLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 34, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 160, 161, 162, 163, 164))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vSystemBoardOrMotherboard", 3), ("vIsaAdd-onCard", 4), ("vEisaAdd-onCard", 5), ("vPciAdd-onCard", 6), ("vMcaAdd-onCard", 7), ("vPcmciaAdd-onCard", 8), ("vProprietaryAdd-onCard", 9), ("vNubus", 16), ("vPc-98c20Add-onCard", 160), ("vPc-98c24Add-onCard", 161), ("vPc-98eAdd-onCard", 162), ("vPc-98localBusAdd-onCard", 163), ("vPc-98cardSlotAdd-onCard", 164)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a34MemoryArrayLocation.setStatus('mandatory')
if mibBuilder.loadTexts: a34MemoryArrayLocation.setDescription('The physical location of the Memory Array, whether on the systemboard or an add-on board.')
a34MemoryArrayUse = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 34, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vSystemMemory", 3), ("vVideoMemory", 4), ("vFlashMemory", 5), ("vNonVolatileRam", 6), ("vCacheMemory", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a34MemoryArrayUse.setStatus('mandatory')
if mibBuilder.loadTexts: a34MemoryArrayUse.setDescription('What this Memory Array is used for.')
a34MaximumMemoryCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 34, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a34MaximumMemoryCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: a34MaximumMemoryCapacity.setDescription("The maximum memory capacity, in kilobytes, on this array. 0x80000000denotes 'unknown'.")
a34NumberOfMemoryDeviceSockets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 34, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a34NumberOfMemoryDeviceSockets.setStatus('mandatory')
if mibBuilder.loadTexts: a34NumberOfMemoryDeviceSockets.setDescription("The number of SIMM slots or sockets available for Memory Devices inthis array. 0x80000000 denotes 'unknown'.")
a34NumberOfMemoryDeviceSocketsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 34, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a34NumberOfMemoryDeviceSocketsUsed.setStatus('mandatory')
if mibBuilder.loadTexts: a34NumberOfMemoryDeviceSocketsUsed.setDescription("The number of SIMM slots or sockets in use for Memory Devices in thisarray. 0x80000000 denotes 'unknown'.")
a34MemoryErrorCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 34, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNone", 3), ("vParity", 4), ("vSingleBitEcc", 5), ("vMultibitEcc", 6), ("vCrc", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a34MemoryErrorCorrection.setStatus('mandatory')
if mibBuilder.loadTexts: a34MemoryErrorCorrection.setDescription('The main hardware error correction or detection method supported bythis Memory Array.')
a34ArrayErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 34, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vBadRead", 4), ("vParityError", 5), ("vSingle-bitError", 6), ("vDouble-bitError", 7), ("vMulti-bitError", 8), ("vNibbleError", 9), ("vChecksumError", 10), ("vCrcError", 11), ("vCorrectedSingle-bitError", 12), ("vCorrectedError", 13), ("vUncorrectableError", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a34ArrayErrorType.setStatus('mandatory')
if mibBuilder.loadTexts: a34ArrayErrorType.setDescription('The type of error that is associated with the current status reported inOperational State for this Memory Array.')
a34LastErrorUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 34, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNoUpdateSinceLastInstrumentationStart", 3), ("vUpdatedFromInformationObtainedPriorToIn", 4), ("vUpdatedDuringInstrumentationRun-time", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a34LastErrorUpdate.setStatus('mandatory')
if mibBuilder.loadTexts: a34LastErrorUpdate.setDescription('System state during which last error status was collected.')
a34ErrorOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 34, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vRead", 3), ("vWrite", 4), ("vPartialWrite", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a34ErrorOperation.setStatus('mandatory')
if mibBuilder.loadTexts: a34ErrorOperation.setDescription('The memory access operation that caused the current error.')
a34ErrorDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 34, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a34ErrorDataSize.setStatus('mandatory')
if mibBuilder.loadTexts: a34ErrorDataSize.setDescription("The size of the data transfer that caused the error, in bits. Zero indicatesno error, 0x80000000 denotes 'unknown'.")
a34ErrorData = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 34, 1, 12), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a34ErrorData.setStatus('mandatory')
if mibBuilder.loadTexts: a34ErrorData.setDescription("Data captured during the erroneous Memory Array access. The dataoccupy the first n bytes of the octetstring required to hold 'Error Data Size' bits of thedata. Data are stored least-significant byte first.")
a34VendorSyndrome = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 34, 1, 13), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a34VendorSyndrome.setStatus('mandatory')
if mibBuilder.loadTexts: a34VendorSyndrome.setDescription('Vendor-specific syndrome or CRC data associated with the erroneousaccess.')
a34ErrorAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 34, 1, 14), DmiInteger64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a34ErrorAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a34ErrorAddress.setDescription("Physical address of the error based on the addressing of the bus that theMemory Array is connected to. 0x8000 0000 0000 0000 denotes 'unknown'.")
a34ErrorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 34, 1, 15), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a34ErrorResolution.setStatus('mandatory')
if mibBuilder.loadTexts: a34ErrorResolution.setDescription("Range in bytes that the error can be determined to be within, when anError Address is given. 0x80000000 denotes 'unknown'.")
a34FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 34, 1, 16), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a34FruGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a34FruGroupIndex.setDescription("If this is a Field Replaceable Unit or if it is part of another FRU, thisprovides an index into the FRU table; 'value = -1' indicates that the group is not aFRU.")
a34OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 34, 1, 17), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a34OperationalGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a34OperationalGroupIndex.setDescription('The index into the Operational State Table for this Memory Array. TheOperational State row is used to hold the overall error count and error status for thisarray.')
tMemoryArrayMappedAddresses = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 35), )
if mibBuilder.loadTexts: tMemoryArrayMappedAddresses.setStatus('mandatory')
if mibBuilder.loadTexts: tMemoryArrayMappedAddresses.setDescription('This table presents ranges of physical addresses that are mapped to agiven Memory Array.')
eMemoryArrayMappedAddresses = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 35, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a35MemoryArrayMappedAddressesTableIndex"))
if mibBuilder.loadTexts: eMemoryArrayMappedAddresses.setStatus('mandatory')
if mibBuilder.loadTexts: eMemoryArrayMappedAddresses.setDescription('')
a35MemoryArrayMappedAddressesTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 35, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a35MemoryArrayMappedAddressesTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a35MemoryArrayMappedAddressesTableIndex.setDescription('A unique number that identifies this row.')
a35MemoryArrayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 35, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a35MemoryArrayIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a35MemoryArrayIndex.setDescription('The ID of the Memory Array that this address range is mapped to.Multiple address ranges may be mapped to a Memory Array.')
a35MappedRangeStartingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 35, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a35MappedRangeStartingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a35MappedRangeStartingAddress.setDescription("The physical starting address, in kilobytes, of a range of memorymapped to the specified Memory Array. 0x80000000 denotes 'unknown'.")
a35MappedRangeEndingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 35, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a35MappedRangeEndingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a35MappedRangeEndingAddress.setDescription("The physical ending address of the last kilobyte of a range of addressesmapped to the specified Memory Array. 0x80000000 denotes 'unknown'.")
a35PartitionId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 35, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a35PartitionId.setStatus('mandatory')
if mibBuilder.loadTexts: a35PartitionId.setDescription("Identifies a Memory Partition associated with the Memory Arrayspecified by Memory Array Table Index. 0x80000000 denotes 'unknown'.")
a35PartitionWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 35, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a35PartitionWidth.setStatus('mandatory')
if mibBuilder.loadTexts: a35PartitionWidth.setDescription("The number of Memory Devices that form a single row of memory forthe partition. 0x80000000 denotes 'unknown'.")
a35OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 35, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a35OperationalGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a35OperationalGroupIndex.setDescription('The index into the Operational State Table for this Memory Range.Generally, there will be a 1:1 correspondence between a mapped range and a partition.In which case, the Operational State will be for the partition as well. In the case thatthere is more than one mapped range for a partion, it will be necessary to check theOperational State entries for each range to determine the overall status of the partition.')
tMemoryDevice = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36), )
if mibBuilder.loadTexts: tMemoryDevice.setStatus('mandatory')
if mibBuilder.loadTexts: tMemoryDevice.setDescription('This group presents information about individual memory devices in thesystem. A memory device can be a SIMM, a SIPP, or a single chip, or an entire card -based on the resolution to which a memory error can be determine and whether thedevice is replaceable as a unit.')
eMemoryDevice = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a36MemoryDeviceTableIndex"))
if mibBuilder.loadTexts: eMemoryDevice.setStatus('mandatory')
if mibBuilder.loadTexts: eMemoryDevice.setDescription('')
a36MemoryDeviceTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36MemoryDeviceTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a36MemoryDeviceTableIndex.setDescription('A unique number that identifies this row.')
a36MemoryArrayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36MemoryArrayIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a36MemoryArrayIndex.setDescription('The ID of the Memory Array that this Memory Device is a part of.')
a36DeviceLocator = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36DeviceLocator.setStatus('mandatory')
if mibBuilder.loadTexts: a36DeviceLocator.setDescription("A string identifying the physically labeled socket or board positionwhere the memory device is located. Eg. 'SIMM 3' or 'IC12'.")
a36BankLocator = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36BankLocator.setStatus('mandatory')
if mibBuilder.loadTexts: a36BankLocator.setDescription("A string identifying the physically labeled bank where the memorydevice is located. Eg. 'Bank 0' or 'A'.")
a36Size = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36Size.setStatus('mandatory')
if mibBuilder.loadTexts: a36Size.setDescription('Size of this memory device, in bytes.')
a36FormFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vSimm", 3), ("vSip", 4), ("vChip", 5), ("vDip", 6), ("vZip", 7), ("vProprietaryCard", 8), ("vDimm", 9), ("vTsop", 10), ("vRowOfChips", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36FormFactor.setStatus('mandatory')
if mibBuilder.loadTexts: a36FormFactor.setDescription('Implementation form factor for this memory device.')
a36TotalWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36TotalWidth.setStatus('mandatory')
if mibBuilder.loadTexts: a36TotalWidth.setDescription("Total width of this memory device, including check or error correctionbits, in bits. If there are no error correction bits, the value in this attribute should matchthat specified in Data Width. 0x80000000 denotes 'unknown'.")
a36DataWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36DataWidth.setStatus('mandatory')
if mibBuilder.loadTexts: a36DataWidth.setDescription("Data width of this memory device, in bits. A data width of 0 and a TotalWidth of 8 would indicate that the device is solely being used to provide eight errorcorrection bits. 0x80000000 denotes 'unknown'.")
a36MemoryType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vDram", 3), ("vEdram", 4), ("vVram", 5), ("vSram", 6), ("vRam", 7), ("vRom", 8), ("vFlash", 9), ("vEeprom", 10), ("vFeprom", 11), ("vEprom", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36MemoryType.setStatus('mandatory')
if mibBuilder.loadTexts: a36MemoryType.setDescription('Type of memory used in this memory device.')
a36TypeDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vFastPaged", 3), ("vStaticColumn", 4), ("vPseudo-static", 5), ("vRambus", 6), ("vSynchronous", 7), ("vCmos", 8), ("vEdo", 9), ("vWindowDram", 10), ("vCacheDram", 11), ("vNon-volatile", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36TypeDetail.setStatus('mandatory')
if mibBuilder.loadTexts: a36TypeDetail.setDescription('Additional detail on the device type.')
a36DeviceSet = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36DeviceSet.setStatus('mandatory')
if mibBuilder.loadTexts: a36DeviceSet.setDescription("This attribute is used to identify when the Memory Device is one of a setof Memory Devices that must be populated with all devices of the same type and size, and which set the device belongs to. For example, when one SIMM belongs to a set offour. 0 indicates the Memory Device isn't part of a set. 0x80000000 denotes 'unknown'.")
a36DeviceErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vBadRead", 4), ("vParityError", 5), ("vSingle-bitError", 6), ("vDouble-bitError", 7), ("vMulti-bitError", 8), ("vNibbleError", 9), ("vChecksumError", 10), ("vCrcError", 11), ("vCorrectedSingle-bitError", 12), ("vCorrectedError", 13), ("vUncorrectableError", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36DeviceErrorType.setStatus('mandatory')
if mibBuilder.loadTexts: a36DeviceErrorType.setDescription('The type of error that is associated with the current status reported inOperational State for this Memory Device.')
a36ErrorGranularity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vDeviceLevel", 3), ("vMemoryPartitionLevel", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36ErrorGranularity.setStatus('mandatory')
if mibBuilder.loadTexts: a36ErrorGranularity.setDescription("Specifies whether the current error's location can be resolved to thepartition or device level.")
a36LastErrorUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNoUpdateSinceLastInstrumentationStart", 3), ("vUpdatedFromInformationObtainedPriorToIn", 4), ("vUpdatedDuringInstrumentationRun-time", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36LastErrorUpdate.setStatus('mandatory')
if mibBuilder.loadTexts: a36LastErrorUpdate.setDescription('System state during which the last error update was collected.')
a36ErrorOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vRead", 3), ("vWrite", 4), ("vPartialWrite", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36ErrorOperation.setStatus('mandatory')
if mibBuilder.loadTexts: a36ErrorOperation.setDescription('The memory access operation that caused the current error.')
a36ErrorDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 16), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36ErrorDataSize.setStatus('mandatory')
if mibBuilder.loadTexts: a36ErrorDataSize.setDescription("The size of the data transfer that caused the error,in bits. Zero indicatesno error, 0x80000000 denotes 'unknown'.")
a36ErrorData = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 17), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36ErrorData.setStatus('mandatory')
if mibBuilder.loadTexts: a36ErrorData.setDescription("Data captured during the erroneous Memory Array access. The dataoccupies the first n bytes of the octetstring required to hold 'Error Data Size' bits of thedata. Data is stored least-significant byte first.")
a36VendorSyndrome = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 18), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36VendorSyndrome.setStatus('mandatory')
if mibBuilder.loadTexts: a36VendorSyndrome.setDescription('Vendor-specific syndrome or CRC data associated withthe erroneou access.')
a36DeviceErrorAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 19), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36DeviceErrorAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a36DeviceErrorAddress.setDescription("Physical address of the error relative to the start of the device, in bytes.0x80000000 denotes 'unknown'.")
a36ArrayErrorAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 20), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36ArrayErrorAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a36ArrayErrorAddress.setDescription("Physical address of the kilobyte where the error is located, relative to thebus for the Memory Array. 0x80000000 denotes 'unknown'.")
a36ErrorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 21), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36ErrorResolution.setStatus('mandatory')
if mibBuilder.loadTexts: a36ErrorResolution.setDescription("Range in bytes that the error can be determined to be within, when anError Address is given. 0x80000000 denotes 'unknown'.")
a36FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 22), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36FruGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a36FruGroupIndex.setDescription("If this is a Field Replaceable Unit or if it is partof another FRU, thisprovides an index into the FRU table; 'value = -1' indicates that the group is not a FRU.")
a36OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 23), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36OperationalGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a36OperationalGroupIndex.setDescription('The index into the Operational State Table for this device.')
tMemoryDeviceMappedAddresses = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 37), )
if mibBuilder.loadTexts: tMemoryDeviceMappedAddresses.setStatus('mandatory')
if mibBuilder.loadTexts: tMemoryDeviceMappedAddresses.setDescription('This table presents ranges of physical addresses that are mapped to agiven Memory Device Set.')
eMemoryDeviceMappedAddresses = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 37, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a37MemoryDeviceMappedAddressesTableIndex"))
if mibBuilder.loadTexts: eMemoryDeviceMappedAddresses.setStatus('mandatory')
if mibBuilder.loadTexts: eMemoryDeviceMappedAddresses.setDescription('')
a37MemoryDeviceMappedAddressesTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 37, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a37MemoryDeviceMappedAddressesTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a37MemoryDeviceMappedAddressesTableIndex.setDescription('A unique number that identifies this row.')
a37MemoryDeviceSetId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 37, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a37MemoryDeviceSetId.setStatus('mandatory')
if mibBuilder.loadTexts: a37MemoryDeviceSetId.setDescription('The row in the Memory Device table that this address range is for. Thismatches with a Memory Device Table Index. There may be multiple rows in MemoryDevice Mapped addresses for a single Memory Device.')
a37Partition = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 37, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a37Partition.setStatus('mandatory')
if mibBuilder.loadTexts: a37Partition.setDescription("Identifies the Memory partition in the Memory Array Mapped Addressestable that this Memory Device is part of. Partition number should be positive.0x80000000 denotes 'unknown'.")
a37MappedRangeStartingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 37, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a37MappedRangeStartingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a37MappedRangeStartingAddress.setDescription("The physical starting address, in kilobytes, of a range of memorymapped to the specified Memory Device set. The address is specified relative to the busthat the device is connected to. 0x80000000 denotes 'unknown' ")
a37MappedRangeEndingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 37, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a37MappedRangeEndingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a37MappedRangeEndingAddress.setDescription("The physical ending address of the last kilobyte of a range of addressesmapped to the specified Memory Device. The address is specified relative to the busthat the device is connected to. 0x80000000 denotes 'unknown' ")
a37PartitionRowPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 37, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a37PartitionRowPosition.setStatus('mandatory')
if mibBuilder.loadTexts: a37PartitionRowPosition.setDescription("This specifies the position of the device in a row of the partition. Forexample, if it takes two 8-bit memory devices to form a 16-bit row, then a value of '2'in this attribute means the device is the second device. 0 is an invalid return value.0x80000000 denotes 'unknown'.")
a37InterleavePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 37, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a37InterleavePosition.setStatus('mandatory')
if mibBuilder.loadTexts: a37InterleavePosition.setDescription("The position of this device in an interleave. 0 indicates non-interleaved.1 indicates the first position 2 the second, and so on. For example, in a 2:1 interleave,a value of '1' would indicate the device is in the 'even' position, in a 4:1 interleave thiswould be the first of four possible positions). 0x80000000 denotes 'unknown' or'unsupported'.")
a37DataDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 37, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a37DataDepth.setStatus('mandatory')
if mibBuilder.loadTexts: a37DataDepth.setDescription("The maximum number of consecutive rows accessed from this device ina single interleaved transfer. For example, if a device transfer two rows each time it'sread it's Interleaved Data Depth would be 2. If that device is 2:1 interleaved and inInterleave Position '1' then the rows mapped to that device would be rows1,2,5,6,9,10,etc. If the device is not part of an interleave, this value should be 0.0x80000000 denotes 'unknown'.")
tSystemHardwareSecurity = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 50), )
if mibBuilder.loadTexts: tSystemHardwareSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: tSystemHardwareSecurity.setDescription('This group describes the system-wide hardware security settings.')
eSystemHardwareSecurity = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 50, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eSystemHardwareSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: eSystemHardwareSecurity.setDescription('')
a50Power_onPasswordStatus = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 50, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vDisabled", 3), ("vEnabled", 4), ("vNotImplemented", 5)))).setLabel("a50Power-onPasswordStatus").setMaxAccess("readonly")
if mibBuilder.loadTexts: a50Power_onPasswordStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a50Power_onPasswordStatus.setDescription('The current power-on password setting on the system.')
a50KeyboardPasswordStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 50, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vDisabled", 3), ("vEnabled", 4), ("vNotImplemented", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a50KeyboardPasswordStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a50KeyboardPasswordStatus.setDescription('The current keyboard password setting on the system')
a50AdministratorPasswordStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 50, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vDisabled", 3), ("vEnabled", 4), ("vNotImplemented", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a50AdministratorPasswordStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a50AdministratorPasswordStatus.setDescription('The current administrator password setting on the system. This passwordis required to make hardware configuration changes to the system.')
a50FrontPanelResetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 50, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vDisabled", 3), ("vEnabled", 4), ("vNotImplemented", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a50FrontPanelResetStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a50FrontPanelResetStatus.setDescription('The present status of the front panel reset button capability. If Enabled, the machine can be reset via the front panel reset button. IfDisable , the reset button, if available, is inoperative.')
tSystemPowerControls = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 52), )
if mibBuilder.loadTexts: tSystemPowerControls.setStatus('mandatory')
if mibBuilder.loadTexts: tSystemPowerControls.setDescription('This group defines attributes for controlling the main power supply tothe system.')
eSystemPowerControls = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 52, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eSystemPowerControls.setStatus('mandatory')
if mibBuilder.loadTexts: eSystemPowerControls.setDescription('')
a52PowerControlRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 52, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vPowerOff", 3), ("vPowerOffThenOnAgain", 4), ("vEnterStandbyMode", 5), ("vEnterSuspendMode", 6), ("vEnterHibernationMode", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a52PowerControlRequest.setStatus('mandatory')
if mibBuilder.loadTexts: a52PowerControlRequest.setDescription('Reading the value of this attribute gives the value of the last valid power control request that was written into it. Writing a valid value into it causes the appropriate power control action to be exeucted immediately. Writing an invalid or unimplemented value causes no change.')
a52TimedPower_onAvailable = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 52, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setLabel("a52TimedPower-onAvailable").setMaxAccess("readonly")
if mibBuilder.loadTexts: a52TimedPower_onAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: a52TimedPower_onAvailable.setDescription('Defines whether a timed power-on facility is available.')
a52TimeToNextScheduledPower_on = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 52, 1, 3), DmiInteger()).setLabel("a52TimeToNextScheduledPower-on").setMaxAccess("readwrite")
if mibBuilder.loadTexts: a52TimeToNextScheduledPower_on.setStatus('mandatory')
if mibBuilder.loadTexts: a52TimeToNextScheduledPower_on.setDescription("The number of seconds until the next timed power-on is scheduled tooccur. A value of 0 means that if the system is powered off, no automatic timed poweron will occur. A value of 0x80000000 denotes 'unknown'.")
tVoltageProbe = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54), )
if mibBuilder.loadTexts: tVoltageProbe.setStatus('mandatory')
if mibBuilder.loadTexts: tVoltageProbe.setDescription('This group defines the attributes for the voltage probes in this system.')
eVoltageProbe = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a54VoltageProbeIndex"))
if mibBuilder.loadTexts: eVoltageProbe.setStatus('mandatory')
if mibBuilder.loadTexts: eVoltageProbe.setDescription('')
a54VoltageProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a54VoltageProbeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a54VoltageProbeIndex.setDescription('Index into this voltage probe table.')
a54VoltageProbeLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vProcessor", 3), ("vDisk", 4), ("vPeripheralBay", 5), ("vSystemManagementModule", 6), ("vMotherboard", 7), ("vMemoryModule", 8), ("vProcessorModule", 9), ("vPowerUnit", 10), ("vAdd-inCard", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a54VoltageProbeLocation.setStatus('mandatory')
if mibBuilder.loadTexts: a54VoltageProbeLocation.setDescription('Identifies the physical location of the voltage probe.')
a54VoltageProbeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a54VoltageProbeDescription.setStatus('mandatory')
if mibBuilder.loadTexts: a54VoltageProbeDescription.setDescription("Additional descriptive information about the voltage probe or probe'slocation.")
a54VoltageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vNon-critical", 4), ("vCritical", 5), ("vNon-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a54VoltageStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a54VoltageStatus.setDescription('Defines the status of the voltage monitored by this voltage probe.')
a54VoltageProbeVoltageLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a54VoltageProbeVoltageLevel.setStatus('mandatory')
if mibBuilder.loadTexts: a54VoltageProbeVoltageLevel.setDescription("The current voltage level of this voltage probe in millivolts. 0x8000000denotes 'unknown'.")
a54MonitoredVoltageNominalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a54MonitoredVoltageNominalLevel.setStatus('mandatory')
if mibBuilder.loadTexts: a54MonitoredVoltageNominalLevel.setDescription("The nominal voltage level of the voltage monitored by this probe inmillivolts. 0x80000000 denotes 'unknown'.")
a54MonitoredVoltageNormalMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a54MonitoredVoltageNormalMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: a54MonitoredVoltageNormalMaximum.setDescription("The normal maximum voltage level of the voltage monitored by thisprobe in millivolts. 0x80000000 denotes 'unknown'.")
a54MonitoredVoltageNormalMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a54MonitoredVoltageNormalMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: a54MonitoredVoltageNormalMinimum.setDescription("The normal minimum voltage level of the voltage monitored by thisprobe in millivolts. 0x80000000 denotes 'unknown'.")
a54VoltageProbeMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a54VoltageProbeMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: a54VoltageProbeMaximum.setDescription("The maximum voltage level specified to be readable by this probe inmillivolts. 0x80000000 denotes 'unknown'.")
a54VoltageProbeMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a54VoltageProbeMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: a54VoltageProbeMinimum.setDescription("The minimum voltage level specified to be readable by this probe inmillivolts. 0x80000000 denotes 'unknown'.")
a54VoltageLevelLowerThreshold_Non_critic = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 11), DmiInteger()).setLabel("a54VoltageLevelLowerThreshold-Non-critic").setMaxAccess("readwrite")
if mibBuilder.loadTexts: a54VoltageLevelLowerThreshold_Non_critic.setStatus('mandatory')
if mibBuilder.loadTexts: a54VoltageLevelLowerThreshold_Non_critic.setDescription("The lower non-critical threshold for the voltage level set by the user, inmillivolts. 0x80000000 denotes 'unknown'.")
a54VoltageLevelUpperThreshold_Non_critic = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 12), DmiInteger()).setLabel("a54VoltageLevelUpperThreshold-Non-critic").setMaxAccess("readwrite")
if mibBuilder.loadTexts: a54VoltageLevelUpperThreshold_Non_critic.setStatus('mandatory')
if mibBuilder.loadTexts: a54VoltageLevelUpperThreshold_Non_critic.setDescription("The upper non-critical threshold for the voltage probe, in millivolts.0x80000000 denotes 'unknown'.")
a54VoltageLevelLowerThreshold_Critical = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 13), DmiInteger()).setLabel("a54VoltageLevelLowerThreshold-Critical").setMaxAccess("readwrite")
if mibBuilder.loadTexts: a54VoltageLevelLowerThreshold_Critical.setStatus('mandatory')
if mibBuilder.loadTexts: a54VoltageLevelLowerThreshold_Critical.setDescription("The lower critical threshold for the voltage probe, in millivolt .0x80000000 denotes 'unknown'.")
a54VoltageLevelUpperThreshold_Critical = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 14), DmiInteger()).setLabel("a54VoltageLevelUpperThreshold-Critical").setMaxAccess("readwrite")
if mibBuilder.loadTexts: a54VoltageLevelUpperThreshold_Critical.setStatus('mandatory')
if mibBuilder.loadTexts: a54VoltageLevelUpperThreshold_Critical.setDescription("The upper critical threshold for the voltage probe, in millivolt .0x80000000 denotes 'unknown'.")
a54VoltageLevelLowerThreshold_Non_recove = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 15), DmiInteger()).setLabel("a54VoltageLevelLowerThreshold-Non-recove").setMaxAccess("readwrite")
if mibBuilder.loadTexts: a54VoltageLevelLowerThreshold_Non_recove.setStatus('mandatory')
if mibBuilder.loadTexts: a54VoltageLevelLowerThreshold_Non_recove.setDescription("The lower non-recoverable threshold for the voltage probe, in millivolts.0x80000000 denotes 'unknown'.")
a54VoltageLevelUpperThreshold_Non_recove = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 16), DmiInteger()).setLabel("a54VoltageLevelUpperThreshold-Non-recove").setMaxAccess("readwrite")
if mibBuilder.loadTexts: a54VoltageLevelUpperThreshold_Non_recove.setStatus('mandatory')
if mibBuilder.loadTexts: a54VoltageLevelUpperThreshold_Non_recove.setDescription("The upper non-recoverable threshold for the voltage probe, in millivolts.0x80000000 denotes 'unknown'.")
a54VoltageProbeResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 17), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a54VoltageProbeResolution.setStatus('mandatory')
if mibBuilder.loadTexts: a54VoltageProbeResolution.setDescription("The resolution for the reading from this voltage probe, in tenths ofmillivolts. '0x80000000 denotes 'unknown'.")
a54VoltageProbeTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 18), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a54VoltageProbeTolerance.setStatus('mandatory')
if mibBuilder.loadTexts: a54VoltageProbeTolerance.setDescription("The tolerance for the reading from this voltage probe, in plus/minusmillivolts. 0x80000000 denotes 'unknown'.")
a54VoltageProbeAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 19), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a54VoltageProbeAccuracy.setStatus('mandatory')
if mibBuilder.loadTexts: a54VoltageProbeAccuracy.setDescription("The accuracy for the reading from this voltage probe, in plus/minushundredths of a percent. 0x80000000 denotes 'unknown'.")
a54FruGroupIndex = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 20), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a54FruGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a54FruGroupIndex.setDescription('Index into the FRU table')
a54OperationalGroupIndex = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 21), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a54OperationalGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a54OperationalGroupIndex.setDescription('Index into the Operational State table')
tTemperatureProbe = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55), )
if mibBuilder.loadTexts: tTemperatureProbe.setStatus('mandatory')
if mibBuilder.loadTexts: tTemperatureProbe.setDescription('This group defines the attributes for the temperature probes in thissystem.')
eTemperatureProbe = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a55TemperatureProbeTableIndex"))
if mibBuilder.loadTexts: eTemperatureProbe.setStatus('mandatory')
if mibBuilder.loadTexts: eTemperatureProbe.setDescription('')
a55TemperatureProbeTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a55TemperatureProbeTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a55TemperatureProbeTableIndex.setDescription('Index into this temperature probe table.')
a55TemperatureProbeLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vProcessor", 3), ("vDisk", 4), ("vPeripheralBay", 5), ("vSmbMaster", 6), ("vMotherboard", 7), ("vMemoryModule", 8), ("vProcessorModule", 9), ("vPowerUnit", 10), ("vAdd-inCard", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a55TemperatureProbeLocation.setStatus('mandatory')
if mibBuilder.loadTexts: a55TemperatureProbeLocation.setDescription('Identifies the physical location of the temperature probe.')
a55TemperatureProbeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a55TemperatureProbeDescription.setStatus('mandatory')
if mibBuilder.loadTexts: a55TemperatureProbeDescription.setDescription("Additional descriptive information about the temperature probe orprobe's location.")
a55TemperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vNon-critical", 4), ("vCritical", 5), ("vNon-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a55TemperatureStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a55TemperatureStatus.setDescription('Defines the status of the temperature monitored by this temperat reprobe.')
a55TemperatureProbeTemperatureReading = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a55TemperatureProbeTemperatureReading.setStatus('mandatory')
if mibBuilder.loadTexts: a55TemperatureProbeTemperatureReading.setDescription("The present temperature reading of this temperature probe in 1/10th degrees C. 0x8000000 denotes 'unknown'.")
a55MonitoredTemperatureNominalReading = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a55MonitoredTemperatureNominalReading.setStatus('mandatory')
if mibBuilder.loadTexts: a55MonitoredTemperatureNominalReading.setDescription("The nominal temperature reading of the temperature monitoredby this probe in 1/10th degrees C. 0x80000000 denotes 'unknown'.")
a55MonitoredTemperatureNormalMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a55MonitoredTemperatureNormalMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: a55MonitoredTemperatureNormalMaximum.setDescription("The normal maximum temperature reading of the temperaturemonitor d by this probe in 1/10th degrees C. 0x80000000 denotes 'unknown'.")
a55MonitoredTemperatureNormalMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a55MonitoredTemperatureNormalMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: a55MonitoredTemperatureNormalMinimum.setDescription("The normal minimum temperature reading of the temperaturemonitor d by this probe in 1/10th degrees C. 0x80000000 denotes 'unknown'.")
a55TemperatureProbeMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a55TemperatureProbeMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: a55TemperatureProbeMaximum.setDescription("The maximum temperature reading specified to be readable bythis probe in 1/10th degrees C. 0x80000000 denotes 'unknown'.")
a55TemperatureProbeMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a55TemperatureProbeMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: a55TemperatureProbeMinimum.setDescription("The minimum temperature reading specified to be readable bythis probe in 1/10th degrees C. 0x80000000 denotes 'unknown'.")
a55TemperatureLowerThreshold_Non_critica = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 11), DmiInteger()).setLabel("a55TemperatureLowerThreshold-Non-critica").setMaxAccess("readwrite")
if mibBuilder.loadTexts: a55TemperatureLowerThreshold_Non_critica.setStatus('mandatory')
if mibBuilder.loadTexts: a55TemperatureLowerThreshold_Non_critica.setDescription("The lower non-critical threshold for the temperature reading setby the user, in 1/10th degrees C. 0x80000000 denotes 'unknown'.")
a55TemperatureUpperThreshold_Non_critica = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 12), DmiInteger()).setLabel("a55TemperatureUpperThreshold-Non-critica").setMaxAccess("readwrite")
if mibBuilder.loadTexts: a55TemperatureUpperThreshold_Non_critica.setStatus('mandatory')
if mibBuilder.loadTexts: a55TemperatureUpperThreshold_Non_critica.setDescription("The upper non-critical threshold for the temperature probe, in 1/10th degrees C. 0x80000000 denotes 'unknown'.")
a55TemperatureLowerThreshold_Critical = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 13), DmiInteger()).setLabel("a55TemperatureLowerThreshold-Critical").setMaxAccess("readwrite")
if mibBuilder.loadTexts: a55TemperatureLowerThreshold_Critical.setStatus('mandatory')
if mibBuilder.loadTexts: a55TemperatureLowerThreshold_Critical.setDescription("The lower critical threshold for the temperature probe, in 1/10 degrees C. 0x80000000 denotes 'unknown'.")
a55TemperatureUpperThreshold_Critical = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 14), DmiInteger()).setLabel("a55TemperatureUpperThreshold-Critical").setMaxAccess("readwrite")
if mibBuilder.loadTexts: a55TemperatureUpperThreshold_Critical.setStatus('mandatory')
if mibBuilder.loadTexts: a55TemperatureUpperThreshold_Critical.setDescription("The upper critical threshold for the temperature probe, in /10th degrees C. 0x80000000 denotes 'unknown'.")
a55TemperatureLowerThreshold_Non_recover = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 15), DmiInteger()).setLabel("a55TemperatureLowerThreshold-Non-recover").setMaxAccess("readwrite")
if mibBuilder.loadTexts: a55TemperatureLowerThreshold_Non_recover.setStatus('mandatory')
if mibBuilder.loadTexts: a55TemperatureLowerThreshold_Non_recover.setDescription("The lower non-recoverable threshold for the temperature probe, in 1/10th degrees C. 0x80000000 denotes 'unknown'.")
a55TemperatureUpperThreshold_Non_recover = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 16), DmiInteger()).setLabel("a55TemperatureUpperThreshold-Non-recover").setMaxAccess("readwrite")
if mibBuilder.loadTexts: a55TemperatureUpperThreshold_Non_recover.setStatus('mandatory')
if mibBuilder.loadTexts: a55TemperatureUpperThreshold_Non_recover.setDescription("The upper non-recoverable threshold for the temperature probe, in 1/10th degrees C. 0x80000000 denotes 'unknown'.")
a55TemperatureProbeResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 17), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a55TemperatureProbeResolution.setStatus('mandatory')
if mibBuilder.loadTexts: a55TemperatureProbeResolution.setDescription("The resolution for the reading from this temperature probe, in tenths of 1/10th degrees C. '0x80000000 denotes 'unknown'.")
a55TemperatureProbeTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 18), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a55TemperatureProbeTolerance.setStatus('mandatory')
if mibBuilder.loadTexts: a55TemperatureProbeTolerance.setDescription("The tolerance for the reading from this temperature probe, in plus/minus 1/10 degrees C. 0x80000000 denotes 'unknown'.")
a55TemperatureProbeAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 19), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a55TemperatureProbeAccuracy.setStatus('mandatory')
if mibBuilder.loadTexts: a55TemperatureProbeAccuracy.setDescription("The accuracy for the reading from this temperature probe, in plus/minus hundredths of a percent. 0x80000000 denotes 'unknown' or'unsupport d'.")
a55FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 20), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a55FruGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a55FruGroupIndex.setDescription('Index into the FRU table. A value of -1 indicatesthat this device is not an FRU.')
a55OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 21), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a55OperationalGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a55OperationalGroupIndex.setDescription('Index into the Operational State table')
tPhysicalContainerGlobalTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 64), )
if mibBuilder.loadTexts: tPhysicalContainerGlobalTable.setStatus('mandatory')
if mibBuilder.loadTexts: tPhysicalContainerGlobalTable.setDescription('This group of attributes describes the fields in a row ofthe Physical Container Global Table. This table lists all ofthe containers (e.g. chassis, sub-chassis, etc.) included withinthe component whose structure is being described')
ePhysicalContainerGlobalTable = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 64, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a64ContainerIndex"))
if mibBuilder.loadTexts: ePhysicalContainerGlobalTable.setStatus('mandatory')
if mibBuilder.loadTexts: ePhysicalContainerGlobalTable.setDescription('')
a64ContainerOrChassisType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 64, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vDesktop", 3), ("vLowProfileDesktop", 4), ("vPizzaBox", 5), ("vMiniTower", 6), ("vTower", 7), ("vPortable", 8), ("vLaptop", 9), ("vNotebook", 10), ("vHandHeld", 11), ("vDockingStation", 12), ("vAllInOne", 13), ("vSubNotebook", 14), ("vSpace-saving", 15), ("vLunchBox", 16), ("vMainSystemChassis", 17), ("vExpansionChassis", 18), ("vSubchassis", 19), ("vBusExpansionChassis", 20), ("vPeripheralChassis", 21), ("vRaidChassis", 22), ("vRackMountChassis", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a64ContainerOrChassisType.setStatus('mandatory')
if mibBuilder.loadTexts: a64ContainerOrChassisType.setDescription('The type of container or chassis.')
a64AssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 64, 1, 2), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a64AssetTag.setStatus('mandatory')
if mibBuilder.loadTexts: a64AssetTag.setDescription('The Container asset tag string.This asset tag string is writeabl by the system administrator.')
a64ChassisLockPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 64, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a64ChassisLockPresent.setStatus('mandatory')
if mibBuilder.loadTexts: a64ChassisLockPresent.setDescription('If true, a chassis lock is present on the Container.')
a64BootupState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 64, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vWarning", 4), ("vCritical", 5), ("vNon-recoverable1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a64BootupState.setStatus('mandatory')
if mibBuilder.loadTexts: a64BootupState.setDescription('The current state of this system when it booted.')
a64PowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 64, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vWarning", 4), ("vCritical", 5), ("vNon-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a64PowerState.setStatus('mandatory')
if mibBuilder.loadTexts: a64PowerState.setDescription('The current state of the power supply for this system.')
a64ThermalState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 64, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vWarning", 4), ("vCritical", 5), ("vNon-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a64ThermalState.setStatus('mandatory')
if mibBuilder.loadTexts: a64ThermalState.setDescription('The current thermal state of this Container.')
a64FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 64, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a64FruGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a64FruGroupIndex.setDescription("If this is a Field Replaceable Unit or if it is part of another FRU, this provides an index into the FRU table; 'value = -1' indicates that the group is not a FRU.")
a64OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 64, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a64OperationalGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a64OperationalGroupIndex.setDescription('The index into the Operational State table for this deviceif applicable.')
a64ContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 64, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a64ContainerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a64ContainerIndex.setDescription('A unique index for the Physical Container in Physical Container Global Table.')
a64ContainerName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 64, 1, 10), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a64ContainerName.setStatus('mandatory')
if mibBuilder.loadTexts: a64ContainerName.setDescription('This is any 64-octet long name that the user orsystem administra or wishes to give this specific physical container.')
a64ContainerLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 64, 1, 11), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a64ContainerLocation.setStatus('mandatory')
if mibBuilder.loadTexts: a64ContainerLocation.setDescription('This attribute is a string name for the location of thecontainer This attribute is Read-Write and may be set to any appropriate value by the user. The string may be 128 octets long.')
a64ContainerSecurityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 64, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNoSecurityBreachDetected", 3), ("vContainerSecurityBreachAttempted", 4), ("vContainerSecurityBreached", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a64ContainerSecurityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a64ContainerSecurityStatus.setDescription('This attribute describes whether the Container is physically secure or not. This includes the state of the door lock, or the boot devices or the keyboard or mouse.')
tOperatingSystem = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 66), )
if mibBuilder.loadTexts: tOperatingSystem.setStatus('mandatory')
if mibBuilder.loadTexts: tOperatingSystem.setDescription('This group defines general information about operating systems installedon this system.')
eOperatingSystem = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 66, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a66OperatingSystemIndex"))
if mibBuilder.loadTexts: eOperatingSystem.setStatus('mandatory')
if mibBuilder.loadTexts: eOperatingSystem.setDescription('')
a66OperatingSystemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 66, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a66OperatingSystemIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a66OperatingSystemIndex.setDescription('The index into the operating system table.')
a66OperatingSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 66, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a66OperatingSystemName.setStatus('mandatory')
if mibBuilder.loadTexts: a66OperatingSystemName.setDescription('The name of this operating system.')
a66OperatingSystemVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 66, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a66OperatingSystemVersion.setStatus('mandatory')
if mibBuilder.loadTexts: a66OperatingSystemVersion.setDescription('The version number of this operating system.')
a66PrimaryOperatingSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 66, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a66PrimaryOperatingSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a66PrimaryOperatingSystem.setDescription('If true, this is the primary operating system.')
a66OperatingSystemBootDeviceStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 66, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vHardDisk", 3), ("vFloppyDisk", 4), ("vOpticalRom", 5), ("vOpticalWorm", 6), ("vOpticalRw", 7), ("vCompactDisk", 8), ("vFlashDisk", 9), ("vBernoulli", 10), ("vOpticalFloppyDisk", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a66OperatingSystemBootDeviceStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: a66OperatingSystemBootDeviceStorageType.setDescription('An index into the Disks Table to indicate the device from which thisoperating system was booted. To fully access the Disks Table, this index must becombined with the attribute Boot Device Index.')
a66OperatingSystemBootDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 66, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a66OperatingSystemBootDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a66OperatingSystemBootDeviceIndex.setDescription('An index into the Disks Table.')
a66OperatingSystemBootPartitionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 66, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a66OperatingSystemBootPartitionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a66OperatingSystemBootPartitionIndex.setDescription('An index into the Partition table indicating the partition from which thisoperating system booted.')
a66OperatingSystemDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 66, 1, 8), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a66OperatingSystemDescription.setStatus('mandatory')
if mibBuilder.loadTexts: a66OperatingSystemDescription.setDescription('A description of this operating system.')
tPowerUnitGlobalTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 67), )
if mibBuilder.loadTexts: tPowerUnitGlobalTable.setStatus('mandatory')
if mibBuilder.loadTexts: tPowerUnitGlobalTable.setDescription("This global table describes all of the Power Units in thissystem component. The unique index of each Power Unit is the keyinto this table. A Power Unit is composed of potentially more than onePower Supply in a redundant configuration. Individual power supplies are described inthe 'Power Supply' standard group. In that group, each individual power supply entry willpoint to a Power Unit in this table by using the index of the row in this table that describesthe Power Unit. If a Power Unit is redundant, mo")
ePowerUnitGlobalTable = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 67, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a67PowerUnitIndex"))
if mibBuilder.loadTexts: ePowerUnitGlobalTable.setStatus('mandatory')
if mibBuilder.loadTexts: ePowerUnitGlobalTable.setDescription('')
a67PowerUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 67, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a67PowerUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a67PowerUnitIndex.setDescription('The unique index given to each Power Unit being describedby this table. This unique index is the key into this table.')
a67PowerUnitRedundancyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 67, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNotApplicableUnitNotRedundant", 3), ("vOffline", 4), ("vFullyRedundant", 5), ("vDegradedRedundancy", 6), ("vRedundancyLost", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a67PowerUnitRedundancyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a67PowerUnitRedundancyStatus.setDescription("Gives the redundancy status of the Power Unit.'Fully Redundant' means that all of the configured redundancy is stillavailable; 'Degraded Redundancy' means that some failures have beenexperienced but some reduced amount of redundancy is still available;'Redundancy Lost' means that a sufficien number of failures have beenexperienced that no redundancy is available and the next failure experiencedwithin the Power Unit will cause overall Power Unit failure.")
tParallelPorts = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 74), )
if mibBuilder.loadTexts: tParallelPorts.setStatus('mandatory')
if mibBuilder.loadTexts: tParallelPorts.setDescription('This group defines the attributes for parallel ports in this system.')
eParallelPorts = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 74, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a74ParallelPortIndex"))
if mibBuilder.loadTexts: eParallelPorts.setStatus('mandatory')
if mibBuilder.loadTexts: eParallelPorts.setDescription('')
a74ParallelPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 74, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a74ParallelPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a74ParallelPortIndex.setDescription('An index into the parallel ports table.')
a74ParallelBaseIoAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 74, 1, 2), DmiInteger64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a74ParallelBaseIoAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a74ParallelBaseIoAddress.setDescription('Base I/O address for this parallel port.')
a74IrqUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 74, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a74IrqUsed.setStatus('mandatory')
if mibBuilder.loadTexts: a74IrqUsed.setDescription('IRQ number that is being used by this parallel port.')
a74LogicalName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 74, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a74LogicalName.setStatus('mandatory')
if mibBuilder.loadTexts: a74LogicalName.setDescription('The logical name of the I/O device on this parallel port, under thisoperating environment.')
a74ConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 74, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 160, 161, 162))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vDb-25Female", 3), ("vDb-25Male", 4), ("vCentronics", 5), ("vMini-centronics", 6), ("vProprietary", 7), ("vCentronics-14", 160), ("vDb-36Female", 161), ("vMini-centronics-20", 162)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a74ConnectorType.setStatus('mandatory')
if mibBuilder.loadTexts: a74ConnectorType.setDescription('The connector used to interface with the I/O device on this parallel port.')
a74ConnectorPinout = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 74, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 160, 161, 162, 163, 164))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vXtat", 3), ("vPs2", 4), ("vIeee1284", 5), ("vProprietary", 6), ("vPc-98", 160), ("vPc-98-hireso", 161), ("vPc-h98", 162), ("vPc-98note", 163), ("vPc-98full", 164)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a74ConnectorPinout.setStatus('mandatory')
if mibBuilder.loadTexts: a74ConnectorPinout.setDescription('The pinout used by the I/O device on this parallel port.')
a74DmaSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 74, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a74DmaSupport.setStatus('mandatory')
if mibBuilder.loadTexts: a74DmaSupport.setDescription('If true, DMA is supported.')
a74ParallelPortCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 74, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a74ParallelPortCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: a74ParallelPortCapabilities.setDescription('Capabilities of this parallel port. This is a bit field mask with the bitsdefined as follows: Bit 0 (2^0) set = XT/AT compatibleBit 1 (2^1) set = PS/2 compatibleBit 2 (2^2) set = ECPBit 3 (2^3) set = EPPBit 4 (2^4) set = PC-98Bit 5 (2^5) set = PC-98-HiresoBit 6 (2^6) set = PC-H98')
a74OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 74, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a74OperationalGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a74OperationalGroupIndex.setDescription('The index into the Operational State Table for this device.')
a74ParallelPortSecuritySettings = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 74, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNone", 3), ("vExternalInterfaceLockedOut", 4), ("vExternalInterfaceEnabled", 5), ("vBoot-bypass", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a74ParallelPortSecuritySettings.setStatus('mandatory')
if mibBuilder.loadTexts: a74ParallelPortSecuritySettings.setDescription('Attribute describing the current hardware security settings on this device')
tSerialPorts = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 75), )
if mibBuilder.loadTexts: tSerialPorts.setStatus('mandatory')
if mibBuilder.loadTexts: tSerialPorts.setDescription('This group defines the attributes for serial ports in this system.')
eSerialPorts = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 75, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a75SerialPortIndex"))
if mibBuilder.loadTexts: eSerialPorts.setStatus('mandatory')
if mibBuilder.loadTexts: eSerialPorts.setDescription('')
a75SerialPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 75, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a75SerialPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a75SerialPortIndex.setDescription('An index into the serial ports table.')
a75SerialBaseIoAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 75, 1, 2), DmiInteger64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a75SerialBaseIoAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a75SerialBaseIoAddress.setDescription('Base I/O address for this serial port.')
a75IrqUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 75, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a75IrqUsed.setStatus('mandatory')
if mibBuilder.loadTexts: a75IrqUsed.setDescription('IRQ number that is being used by this serial port.')
a75LogicalName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 75, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a75LogicalName.setStatus('mandatory')
if mibBuilder.loadTexts: a75LogicalName.setDescription('The logical name of this serial port under this operating environment.')
a75ConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 75, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 160, 161))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vDb-9PinMale", 3), ("vDb-9PinFemale", 4), ("vDb-25PinMale", 5), ("vDb-25PinFemale", 6), ("vRj-11", 7), ("vRj-45", 8), ("vProprietary", 9), ("vCircularDin-8Male", 10), ("vCircularDin-8Female", 11), ("vMini-centronicsType-14", 160), ("vMini-centronicsType-26", 161)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a75ConnectorType.setStatus('mandatory')
if mibBuilder.loadTexts: a75ConnectorType.setDescription('The connector used to interface with the I/O device on this serial port.')
a75MaximumSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 75, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a75MaximumSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: a75MaximumSpeed.setDescription('Maximum transfer speed of the device on this serial port in bits persecond.')
a75SerialPortCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 75, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 160, 161))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vXtatCompatible", 3), ("v16450Compatible", 4), ("v16550Compatible", 5), ("v16550aCompatible", 6), ("v8251Compatible", 160), ("v8251fifoCompatible", 161)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a75SerialPortCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: a75SerialPortCapabilities.setDescription('The capabilities of this Serial port.')
a75OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 75, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a75OperationalGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a75OperationalGroupIndex.setDescription('The index into the Operational State Table for this device.')
a75SerialPortSecuritySettings = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 75, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNone", 3), ("vExternalInterfaceLockedOut", 4), ("vExternalInterfaceEnabled", 5), ("vBoot-bypass", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a75SerialPortSecuritySettings.setStatus('mandatory')
if mibBuilder.loadTexts: a75SerialPortSecuritySettings.setDescription('Attribute describing the current hardware security settings on this device')
tCoolingDevice = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 81), )
if mibBuilder.loadTexts: tCoolingDevice.setStatus('mandatory')
if mibBuilder.loadTexts: tCoolingDevice.setDescription('This group defines various attributes for cooling devices in this system.')
eCoolingDevice = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 81, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a81CoolingDeviceTableIndex"))
if mibBuilder.loadTexts: eCoolingDevice.setStatus('mandatory')
if mibBuilder.loadTexts: eCoolingDevice.setDescription('')
a81CoolingDeviceTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 81, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a81CoolingDeviceTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a81CoolingDeviceTableIndex.setDescription('An index into the cooling device table.')
a81FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 81, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a81FruGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a81FruGroupIndex.setDescription("If this is a Field Replaceable Unit or if it is part of another FRU, thisprovides an index into the FRU table; 'value = -1' indicates that the group is not a FRU.")
a81OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 81, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a81OperationalGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a81OperationalGroupIndex.setDescription('The index into the Operational State table for this device.')
a81CoolingUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 81, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a81CoolingUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a81CoolingUnitIndex.setDescription('This is the ID of the Cooling Unit (logical cooling device) of which thisCooling Device is a part. This value matches up with the Cooling Unit Table Indexattribute defined in the Cooling Unit Globe Table.')
a81CoolingDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 81, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 32, 33))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vFan", 3), ("vCentrifugalBlower", 4), ("vChipFan", 5), ("vCabinetFan", 6), ("vPowerSupplyFan", 7), ("vHeatPipe", 8), ("vIntegratedRefrigeration", 9), ("vActiveCooling", 32), ("vPassiveCooling", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a81CoolingDeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: a81CoolingDeviceType.setDescription('The type of Cooling Device that this is e.g. Fan, Heat Pipe, etc.')
a81TemperatureProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 81, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a81TemperatureProbeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a81TemperatureProbeIndex.setDescription('Index into the Temperature Probe table identifying the temperatu eprobe monitoring this cooling device. 0 indicates no probe provided.')
tVideo = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 83), )
if mibBuilder.loadTexts: tVideo.setStatus('mandatory')
if mibBuilder.loadTexts: tVideo.setDescription('This group defines the attributes of video devices in this system.')
eVideo = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 83, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a83VideoIndex"))
if mibBuilder.loadTexts: eVideo.setStatus('mandatory')
if mibBuilder.loadTexts: eVideo.setDescription('')
a83VideoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 83, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a83VideoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a83VideoIndex.setDescription('An index into the video table.')
a83VideoType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 83, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 160))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vCga", 3), ("vEga", 4), ("vVga", 5), ("vSvga", 6), ("vMda", 7), ("vHgc", 8), ("vMcga", 9), ("v8514a", 10), ("vXga", 11), ("vLinearFrameBuffer", 12), ("vPc-98", 160)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a83VideoType.setStatus('mandatory')
if mibBuilder.loadTexts: a83VideoType.setDescription('The architecture of the video subsystem in this system.')
a83CurrentVideoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 83, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a83CurrentVideoMode.setStatus('mandatory')
if mibBuilder.loadTexts: a83CurrentVideoMode.setDescription('The current video mode in this system.')
a83MinimumRefreshRate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 83, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a83MinimumRefreshRate.setStatus('mandatory')
if mibBuilder.loadTexts: a83MinimumRefreshRate.setDescription('The minimum refresh rate for this video subsystem in Hz.')
a83MaximumRefreshRate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 83, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a83MaximumRefreshRate.setStatus('mandatory')
if mibBuilder.loadTexts: a83MaximumRefreshRate.setDescription('The maximum refresh rate for this video subsystem in Hz.')
a83VideoMemoryType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 83, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vVram", 3), ("vDram", 4), ("vSram", 5), ("vWram", 6), ("vEdoRam", 7), ("vBurstSynchronousDram", 8), ("vPipelinedBurstSram", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a83VideoMemoryType.setStatus('mandatory')
if mibBuilder.loadTexts: a83VideoMemoryType.setDescription('The type of video memory for this adapter.')
a83VideoRamMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 83, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a83VideoRamMemorySize.setStatus('mandatory')
if mibBuilder.loadTexts: a83VideoRamMemorySize.setDescription('Video adapter memory size in kilobytes.')
a83ScanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 83, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vInterlaced", 3), ("vNonInterlaced", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a83ScanMode.setStatus('mandatory')
if mibBuilder.loadTexts: a83ScanMode.setDescription('The scan mode for this video device.')
a83VideoPhysicalLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 83, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vIntegrated", 3), ("vAdd-onCard", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a83VideoPhysicalLocation.setStatus('mandatory')
if mibBuilder.loadTexts: a83VideoPhysicalLocation.setDescription('The location of the video controller circuitry.')
a83CurrentVerticalResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 83, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a83CurrentVerticalResolution.setStatus('mandatory')
if mibBuilder.loadTexts: a83CurrentVerticalResolution.setDescription('The current number of vertical pixels.')
a83CurrentHorizontalResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 83, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a83CurrentHorizontalResolution.setStatus('mandatory')
if mibBuilder.loadTexts: a83CurrentHorizontalResolution.setDescription('The current number of horizontal pixels.')
a83CurrentNumberOfBitsPerPixel = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 83, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a83CurrentNumberOfBitsPerPixel.setStatus('mandatory')
if mibBuilder.loadTexts: a83CurrentNumberOfBitsPerPixel.setDescription('The number of bits used to display each pixel for this video device.')
a83CurrentNumberOfRows = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 83, 1, 13), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a83CurrentNumberOfRows.setStatus('mandatory')
if mibBuilder.loadTexts: a83CurrentNumberOfRows.setDescription('The number of rows in character mode for this video device.')
a83CurrentNumberOfColumns = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 83, 1, 14), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a83CurrentNumberOfColumns.setStatus('mandatory')
if mibBuilder.loadTexts: a83CurrentNumberOfColumns.setDescription('The number of columns in character mode for this video device.')
a83CurrentRefreshRate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 83, 1, 15), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a83CurrentRefreshRate.setStatus('mandatory')
if mibBuilder.loadTexts: a83CurrentRefreshRate.setDescription('The current refresh rate in Hz for this video device.')
a83FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 83, 1, 16), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a83FruGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a83FruGroupIndex.setDescription("If this is a Field Replaceable Unit or if it is part of another FRU, thisprovides an index into the FRU table; 'value = -1' indicates that the group is not a FRU.")
a83OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 83, 1, 17), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a83OperationalGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a83OperationalGroupIndex.setDescription('The index into the Operational State table for this device.')
tVideoBios = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 84), )
if mibBuilder.loadTexts: tVideoBios.setStatus('mandatory')
if mibBuilder.loadTexts: tVideoBios.setDescription('This group defines the attributes for the Video BIOS.')
eVideoBios = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 84, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a84VideoBiosIndex"))
if mibBuilder.loadTexts: eVideoBios.setStatus('mandatory')
if mibBuilder.loadTexts: eVideoBios.setDescription('')
a84VideoBiosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 84, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a84VideoBiosIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a84VideoBiosIndex.setDescription('The index into the Video BIOS table.')
a84VideoBiosManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 84, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a84VideoBiosManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: a84VideoBiosManufacturer.setDescription('The name of the company that wrote this Video BIOS.')
a84VideoBiosVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 84, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a84VideoBiosVersion.setStatus('mandatory')
if mibBuilder.loadTexts: a84VideoBiosVersion.setDescription('The version number or version string of this Video BIOS.')
a84VideoBiosReleaseDate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 84, 1, 4), DmiDateX()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a84VideoBiosReleaseDate.setStatus('mandatory')
if mibBuilder.loadTexts: a84VideoBiosReleaseDate.setDescription('The Video BIOS release date.')
a84VideoBiosShadowingState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 84, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a84VideoBiosShadowingState.setStatus('mandatory')
if mibBuilder.loadTexts: a84VideoBiosShadowingState.setDescription('If true, the Video BIOS is currently being shadowed.')
tMouse = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 91), )
if mibBuilder.loadTexts: tMouse.setStatus('mandatory')
if mibBuilder.loadTexts: tMouse.setDescription('This group defines the characteristics of a mouse input device.')
eMouse = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 91, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eMouse.setStatus('mandatory')
if mibBuilder.loadTexts: eMouse.setDescription('')
a91MouseInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 91, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 160, 161))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vSerial", 3), ("vPs2", 4), ("vInfrared", 5), ("vHp-hil", 6), ("vBusMouse", 7), ("vAdb", 8), ("vBusMouseDb-9", 160), ("vBusMouseMicro-din", 161)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a91MouseInterface.setStatus('mandatory')
if mibBuilder.loadTexts: a91MouseInterface.setDescription('The interface type of this mouse.')
a91MouseIrq = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 91, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a91MouseIrq.setStatus('mandatory')
if mibBuilder.loadTexts: a91MouseIrq.setDescription('The IRQ number used by this mouse.')
a91MouseButtons = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 91, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a91MouseButtons.setStatus('mandatory')
if mibBuilder.loadTexts: a91MouseButtons.setDescription('The number of mouse buttons on this mouse.')
a91MousePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 91, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a91MousePortName.setStatus('mandatory')
if mibBuilder.loadTexts: a91MousePortName.setDescription('The name of the port currently being used by this mouse.')
a91MouseDriverName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 91, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a91MouseDriverName.setStatus('mandatory')
if mibBuilder.loadTexts: a91MouseDriverName.setDescription('The name of the mouse driver.')
a91MouseDriverVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 91, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a91MouseDriverVersion.setStatus('mandatory')
if mibBuilder.loadTexts: a91MouseDriverVersion.setDescription('The version number of the mouse driver.')
a91FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 91, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a91FruGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a91FruGroupIndex.setDescription("If this is a Field Replaceable Unit or if it is part of another FRU, thisprovides an index into the FRU table; 'value = -1' indicates that the group is not a FRU.")
a91OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 91, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a91OperationalGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a91OperationalGroupIndex.setDescription('The index into the Operational State table for this device.')
a91SecuritySettings = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 91, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNone", 3), ("vExternalInterfaceLockedOut", 4), ("vExternalInterfaceEnabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a91SecuritySettings.setStatus('mandatory')
if mibBuilder.loadTexts: a91SecuritySettings.setDescription('Enum describing the current hardware security settings on this device')
tKeyboard = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 92), )
if mibBuilder.loadTexts: tKeyboard.setStatus('mandatory')
if mibBuilder.loadTexts: tKeyboard.setDescription('This group defines the characteristics of the system keyboard.')
eKeyboard = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 92, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eKeyboard.setStatus('mandatory')
if mibBuilder.loadTexts: eKeyboard.setDescription('')
a92KeyboardLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 92, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a92KeyboardLayout.setStatus('mandatory')
if mibBuilder.loadTexts: a92KeyboardLayout.setDescription('A description of the layout of this keyboard.')
a92KeyboardType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 92, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a92KeyboardType.setStatus('mandatory')
if mibBuilder.loadTexts: a92KeyboardType.setDescription('The type description of this keyboard.')
a92KeyboardConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 92, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 160))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vMini-din", 3), ("vMicro-din", 4), ("vPs2", 5), ("vInfrared", 6), ("vHp-hil", 7), ("vDb-9", 8), ("vAccessBus", 9), ("vPc-98", 160)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a92KeyboardConnectorType.setStatus('mandatory')
if mibBuilder.loadTexts: a92KeyboardConnectorType.setDescription('The type of keyboard connector used by this keyboard.')
a92FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 92, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a92FruGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a92FruGroupIndex.setDescription("If this is a Field Replaceable Unit or if it is part of another FRU, thisprovides an index into the FRU table; 'value = -1' indicates that the group is not a FRU.")
a92OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 92, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a92OperationalGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a92OperationalGroupIndex.setDescription('The index into the Operational State table for this device.')
a92SecuritySettings = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 92, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNone", 3), ("vExternalInterfaceLockedOut", 4), ("vExternalInterfaceEnabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a92SecuritySettings.setStatus('mandatory')
if mibBuilder.loadTexts: a92SecuritySettings.setDescription('Enum describing the current hardware security settings on this device')
tEventGenerationForProcessor = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 100), )
if mibBuilder.loadTexts: tEventGenerationForProcessor.setStatus('mandatory')
if mibBuilder.loadTexts: tEventGenerationForProcessor.setDescription('')
eEventGenerationForProcessor = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 100, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a100AssociatedGroup"))
if mibBuilder.loadTexts: eEventGenerationForProcessor.setStatus('mandatory')
if mibBuilder.loadTexts: eEventGenerationForProcessor.setDescription('')
a100EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 100, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 257, 258))).clone(namedValues=NamedValues(("vProcessorInternalError", 256), ("vProcessorThermalTrip", 257), ("vProcessorFrb-3Failure", 258)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a100EventType.setStatus('mandatory')
if mibBuilder.loadTexts: a100EventType.setDescription('The type of event that has occurred.')
a100EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 100, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical1", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a100EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a100EventSeverity.setDescription('The severity of this event.')
a100IsEventState_based = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 100, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setLabel("a100IsEventState-based").setMaxAccess("readonly")
if mibBuilder.loadTexts: a100IsEventState_based.setStatus('mandatory')
if mibBuilder.loadTexts: a100IsEventState_based.setDescription('The value of this attributedetermines whether the Event being reportedis a state-based Event or not. If the valueof this attribute is TRUE then the Event isstate-based. Otherwise the Event is notstate-based.')
a100EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 100, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a100EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a100EventStateKey.setDescription("A unique, single integer key into the EventState group if this is a state-based Event.If this is not a state-based Event then thisthis attribute's value is not defined.")
a100AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 100, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a100AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a100AssociatedGroup.setDescription('The class name of the group that is associatedwith the events defined in this EventGeneration group.')
a100EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 100, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a100EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a100EventSystem.setDescription('The major functional aspect of the productcausing the fault.')
a100EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 100, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a100EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a100EventSubsystem.setDescription('The minor functional aspect of the productcausing the fault.')
a100IsInstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 100, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a100IsInstanceDataPresent.setStatus('mandatory')
if mibBuilder.loadTexts: a100IsInstanceDataPresent.setDescription('Indicates whether the second event block containsinstance-specif c data.')
a100EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 100, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a100EventMessage.setStatus('mandatory')
if mibBuilder.loadTexts: a100EventMessage.setDescription('Auxillary information releated to the eventThis text contains the name of the Probe')
tEventGenerationForPowerSupply = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 104), )
if mibBuilder.loadTexts: tEventGenerationForPowerSupply.setStatus('mandatory')
if mibBuilder.loadTexts: tEventGenerationForPowerSupply.setDescription('')
eEventGenerationForPowerSupply = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 104, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a104AssociatedGroup"))
if mibBuilder.loadTexts: eEventGenerationForPowerSupply.setStatus('mandatory')
if mibBuilder.loadTexts: eEventGenerationForPowerSupply.setDescription('')
a104EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 104, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 257, 258))).clone(namedValues=NamedValues(("vPowerSupplyFailed", 256), ("vPowerSupplyOk", 257), ("vPowerSupplyLikelyToFail", 258)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104EventType.setStatus('mandatory')
if mibBuilder.loadTexts: a104EventType.setDescription('The type of event that has occurred.')
a104EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 104, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a104EventSeverity.setDescription('The severity of this event.')
a104IsEventState_based = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 104, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setLabel("a104IsEventState-based").setMaxAccess("readonly")
if mibBuilder.loadTexts: a104IsEventState_based.setStatus('mandatory')
if mibBuilder.loadTexts: a104IsEventState_based.setDescription('The value of this attributedetermines whether the Event being reportedis a state-based Event or not. If the valueof this attribute is TRUE then the Event isstate-based. Otherwise the Event is notstate-based.')
a104EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 104, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a104EventStateKey.setDescription("A unique, single integer key into the EventState group if this is a state-based Event.If this is not a state-based Event then thisthis attribute's value is not defined.")
a104AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 104, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a104AssociatedGroup.setDescription('The class name of the group that is associatedwith the events defined in this EventGeneration group.')
a104EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 104, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a104EventSystem.setDescription('The major functional aspect of the productcausing the fault.')
a104EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 104, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a104EventSubsystem.setDescription('The minor functional aspect of the productcausing the fault.')
a104IsInstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 104, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104IsInstanceDataPresent.setStatus('mandatory')
if mibBuilder.loadTexts: a104IsInstanceDataPresent.setDescription('Indicates whether the second event block containsinstance-specif c data.')
a104EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 104, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104EventMessage.setStatus('mandatory')
if mibBuilder.loadTexts: a104EventMessage.setDescription('Auxillary information releated to the eventThis text contains the name of the Probe')
tEventGenerationForPhysicalMemory = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 108), )
if mibBuilder.loadTexts: tEventGenerationForPhysicalMemory.setStatus('mandatory')
if mibBuilder.loadTexts: tEventGenerationForPhysicalMemory.setDescription('')
eEventGenerationForPhysicalMemory = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 108, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a108AssociatedGroup"))
if mibBuilder.loadTexts: eEventGenerationForPhysicalMemory.setStatus('mandatory')
if mibBuilder.loadTexts: eEventGenerationForPhysicalMemory.setDescription('')
a108EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 108, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 257))).clone(namedValues=NamedValues(("vSingle-bitMemoryError", 256), ("vMulti-bitMemoryErrorFromPreviousBoot", 257)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a108EventType.setStatus('mandatory')
if mibBuilder.loadTexts: a108EventType.setDescription('The type of event that has occurred.')
a108EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 108, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a108EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a108EventSeverity.setDescription('The severity of this event.')
a108IsEventState_based = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 108, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setLabel("a108IsEventState-based").setMaxAccess("readonly")
if mibBuilder.loadTexts: a108IsEventState_based.setStatus('mandatory')
if mibBuilder.loadTexts: a108IsEventState_based.setDescription('The value of this attributedetermines whether the Event being reportedis a state-based Event or not. If the valueof this attribute is TRUE then the Event isstate-based. Otherwise the Event is notstate-based.')
a108EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 108, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a108EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a108EventStateKey.setDescription("A unique, single integer key into the EventState group if this is a state-based Event.If this is not a state-based Event then thisthis attribute's value is not defined.")
a108AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 108, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a108AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a108AssociatedGroup.setDescription('The class name of the group that is associatedwith the events defined in this EventGeneration group.')
a108EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 108, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a108EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a108EventSystem.setDescription('The major functional aspect of the productcausing the fault.')
a108EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 108, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a108EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a108EventSubsystem.setDescription('The minor functional aspect of the productcausing the fault.')
a108IsInstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 108, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a108IsInstanceDataPresent.setStatus('mandatory')
if mibBuilder.loadTexts: a108IsInstanceDataPresent.setDescription('Indicates whether the second event block containsinstance-specif c data.')
a108EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 108, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a108EventMessage.setStatus('mandatory')
if mibBuilder.loadTexts: a108EventMessage.setDescription('Auxillary information releated to the eventThis text contains the name of the Probe')
tEventGenerationForVoltageProbe = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 113), )
if mibBuilder.loadTexts: tEventGenerationForVoltageProbe.setStatus('mandatory')
if mibBuilder.loadTexts: tEventGenerationForVoltageProbe.setDescription('')
eEventGenerationForVoltageProbe = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 113, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a113AssociatedGroup"))
if mibBuilder.loadTexts: eEventGenerationForVoltageProbe.setStatus('mandatory')
if mibBuilder.loadTexts: eEventGenerationForVoltageProbe.setDescription('')
a113EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 113, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 257, 258, 259, 260, 261, 262))).clone(namedValues=NamedValues(("vStatusChangedToOk", 256), ("vStatusChangedToUpperCritical", 257), ("vStatusChangedToLowerCritical", 258), ("vStatusChangedFromOkToUpperNon-critical", 259), ("vStatusChangedFromOkToLowerNon-critical", 260), ("vStatusChangedFromUpperCriticalToUpperNo", 261), ("vStatusChangedFromLowerCriticalToLowerNo", 262)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a113EventType.setStatus('mandatory')
if mibBuilder.loadTexts: a113EventType.setDescription('The type of event that has occurred.')
a113EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 113, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a113EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a113EventSeverity.setDescription('The severity of this event.')
a113IsEventState_based = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 113, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setLabel("a113IsEventState-based").setMaxAccess("readonly")
if mibBuilder.loadTexts: a113IsEventState_based.setStatus('mandatory')
if mibBuilder.loadTexts: a113IsEventState_based.setDescription('The value of this attributedetermines whether the Event being reportedis a state-based Event or not. If the valueof this attribute is TRUE then the Event isstate-based. Otherwise the Event is notstate-based.')
a113EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 113, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a113EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a113EventStateKey.setDescription("A unique, single integer key into the EventState group if this is a state-based Event.If this is not a state-based Event then thisthis attribute's value is not defined.")
a113AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 113, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a113AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a113AssociatedGroup.setDescription('The class name of the group that is associatedwith the events defined in this EventGeneration group.')
a113EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 113, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a113EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a113EventSystem.setDescription('The major functional aspect of the productcausing the fault.')
a113EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 113, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a113EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a113EventSubsystem.setDescription('The minor functional aspect of the productcausing the fault.')
a113IsInstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 113, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a113IsInstanceDataPresent.setStatus('mandatory')
if mibBuilder.loadTexts: a113IsInstanceDataPresent.setDescription('Indicates whether the second event block containsinstance-specif c data.')
a113EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 113, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a113EventMessage.setStatus('mandatory')
if mibBuilder.loadTexts: a113EventMessage.setDescription('Auxillary information releated to the eventThis text contains the name of the Probe')
tEventGenerationForTemperatureProbe = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 114), )
if mibBuilder.loadTexts: tEventGenerationForTemperatureProbe.setStatus('mandatory')
if mibBuilder.loadTexts: tEventGenerationForTemperatureProbe.setDescription('')
eEventGenerationForTemperatureProbe = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 114, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a114AssociatedGroup"))
if mibBuilder.loadTexts: eEventGenerationForTemperatureProbe.setStatus('mandatory')
if mibBuilder.loadTexts: eEventGenerationForTemperatureProbe.setDescription('')
a114EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 114, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 257, 258, 259, 260, 261, 262))).clone(namedValues=NamedValues(("vStatusChangedToOk", 256), ("vStatusChangedToUpperCritical", 257), ("vStatusChangedToLowerCritical", 258), ("vStatusChangedFromOkToUpperNon-critical", 259), ("vStatusChangedFromOkToLowerNon-critical", 260), ("vStatusChangedFromUpperCriticalToUpperNo", 261), ("vStatusChangedFromLowerCriticalToLowerNo", 262)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a114EventType.setStatus('mandatory')
if mibBuilder.loadTexts: a114EventType.setDescription('The type of event that has occurred.')
a114EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 114, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a114EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a114EventSeverity.setDescription('The severity of this event.')
a114IsEventState_based = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 114, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setLabel("a114IsEventState-based").setMaxAccess("readonly")
if mibBuilder.loadTexts: a114IsEventState_based.setStatus('mandatory')
if mibBuilder.loadTexts: a114IsEventState_based.setDescription('The value of this attributedetermines whether the Event being reportedis a state-based Event or not. If the valueof this attribute is TRUE then the Event isstate-based. Otherwise the Event is notstate-based.')
a114EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 114, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a114EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a114EventStateKey.setDescription("A unique, single integer key into the EventState group if this is a state-based Event.If this is not a state-based Event then thisthis attribute's value is not defined.")
a114AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 114, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a114AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a114AssociatedGroup.setDescription('The class name of the group that is associatedwith the events defined in this EventGeneration group.')
a114EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 114, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a114EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a114EventSystem.setDescription('The major functional aspect of the productcausing the fault.')
a114EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 114, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a114EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a114EventSubsystem.setDescription('The minor functional aspect of the productcausing the fault.')
a114IsInstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 114, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a114IsInstanceDataPresent.setStatus('mandatory')
if mibBuilder.loadTexts: a114IsInstanceDataPresent.setDescription('Indicates whether the second event block containsinstance-specif c data.')
a114EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 114, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a114EventMessage.setStatus('mandatory')
if mibBuilder.loadTexts: a114EventMessage.setDescription('Auxillary information releated to the eventThis text contains the name of the Probe')
tEventGenerationForPhysicalContainer = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 116), )
if mibBuilder.loadTexts: tEventGenerationForPhysicalContainer.setStatus('mandatory')
if mibBuilder.loadTexts: tEventGenerationForPhysicalContainer.setDescription('')
eEventGenerationForPhysicalContainer = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 116, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a116AssociatedGroup"))
if mibBuilder.loadTexts: eEventGenerationForPhysicalContainer.setStatus('mandatory')
if mibBuilder.loadTexts: eEventGenerationForPhysicalContainer.setDescription('')
a116EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 116, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 256))).clone(namedValues=NamedValues(("vContainerSecurityBreach", 6), ("vContainerSecurityStatusOk", 256)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a116EventType.setStatus('mandatory')
if mibBuilder.loadTexts: a116EventType.setDescription('The type of event that has occurred.')
a116EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 116, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a116EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a116EventSeverity.setDescription('The severity of this event.')
a116IsEventState_based = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 116, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setLabel("a116IsEventState-based").setMaxAccess("readonly")
if mibBuilder.loadTexts: a116IsEventState_based.setStatus('mandatory')
if mibBuilder.loadTexts: a116IsEventState_based.setDescription('The value of this attributedetermines whether the Event being reportedis a state-based Event or not. If the valueof this attribute is TRUE then the Event isstate-based. Otherwise the Event is notstate-based.')
a116EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 116, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a116EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a116EventStateKey.setDescription("A unique, single integer key into the EventState group if this is a state-based Event.If this is not a state-based Event then thisthis attribute's value is not defined.")
a116AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 116, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a116AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a116AssociatedGroup.setDescription('The class name of the group that is associatedwith the events defined in this EventGeneration group.')
a116EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 116, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a116EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a116EventSystem.setDescription('The major functional aspect of the productcausing the fault.')
a116EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 116, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a116EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a116EventSubsystem.setDescription('The minor functional aspect of the productcausing the fault.')
a116IsInstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 116, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a116IsInstanceDataPresent.setStatus('mandatory')
if mibBuilder.loadTexts: a116IsInstanceDataPresent.setDescription('Indicates whether the second event block containsinstance-specif c data.')
a116EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 116, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a116EventMessage.setStatus('mandatory')
if mibBuilder.loadTexts: a116EventMessage.setDescription('Auxillary information releated to the eventThis text contains the name of the Probe')
tBusGlobalTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 128), )
if mibBuilder.loadTexts: tBusGlobalTable.setStatus('mandatory')
if mibBuilder.loadTexts: tBusGlobalTable.setDescription('This global table has one entry for each of the Busesin this Component. The unique ID provided to each bus is the index into this table.')
eBusGlobalTable = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 128, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a128BusId"))
if mibBuilder.loadTexts: eBusGlobalTable.setStatus('mandatory')
if mibBuilder.loadTexts: eBusGlobalTable.setDescription('')
a128BusId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 128, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a128BusId.setStatus('mandatory')
if mibBuilder.loadTexts: a128BusId.setDescription('Unique index provided to each Bus in this Component and usedas a key into the Bus Global Table.')
a128BusType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 128, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vEisa", 3), ("vIsa", 4), ("vPci", 5), ("vScsi", 6), ("vIde", 7), ("vDiagnostic", 8), ("vI2c", 9), ("vPower", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a128BusType.setStatus('mandatory')
if mibBuilder.loadTexts: a128BusType.setDescription('The type of the bus being described by this entry in the BusGlobal Table.')
tPhysicalExpansionSitesTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 129), )
if mibBuilder.loadTexts: tPhysicalExpansionSitesTable.setStatus('mandatory')
if mibBuilder.loadTexts: tPhysicalExpansionSitesTable.setDescription('This global table describes all of the expansion sites in this expandablecomponent in the system. The unique index of each expansion site is the key into thistable. Card/Bus slots, disk bays, hot-plug power supply bays, etc., are all examples of expansion sites.')
ePhysicalExpansionSitesTable = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 129, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a129ExpansionSiteIndex"))
if mibBuilder.loadTexts: ePhysicalExpansionSitesTable.setStatus('mandatory')
if mibBuilder.loadTexts: ePhysicalExpansionSitesTable.setDescription('')
a129ExpansionSiteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 129, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a129ExpansionSiteIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a129ExpansionSiteIndex.setDescription('The unique integer index into Physical Expansion Sites table.')
a129ExpansionSiteType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 129, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vBusSlot", 3), ("vDriveBay", 4), ("vPowerUnitBay", 5), ("vSubchassisSlot", 6), ("vPcmciaSlot", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a129ExpansionSiteType.setStatus('mandatory')
if mibBuilder.loadTexts: a129ExpansionSiteType.setDescription('This attribute describes the type of expansion sitethat is being defined by this entry in the Physical Expansion SitesTable.')
a129VirtualExpansionSite = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 129, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a129VirtualExpansionSite.setStatus('mandatory')
if mibBuilder.loadTexts: a129VirtualExpansionSite.setDescription("This attribute indicates whether this is a 'virtual'expansion site or not. A virtual expansion site is one that ispermanently occupied because of the level of integration ofan expandable component. An example of a virtual expansion site isan I/O bus load taken up by a LAN controller that is integrated onto amotherboard.")
a129ExpansionSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 129, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a129ExpansionSiteName.setStatus('mandatory')
if mibBuilder.loadTexts: a129ExpansionSiteName.setDescription("Name chosen by the vendor of this component toname this particul r expansion site within this component, e.g. 'Slot 6', 'DriveBay 1'.")
a129ExpansionSiteDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 129, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a129ExpansionSiteDescription.setStatus('mandatory')
if mibBuilder.loadTexts: a129ExpansionSiteDescription.setDescription('This is a vendor-settable string that describes theexpandable site in whatever way is desired.')
a129ExpansionSiteCurrentlyOccupied = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 129, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a129ExpansionSiteCurrentlyOccupied.setStatus('mandatory')
if mibBuilder.loadTexts: a129ExpansionSiteCurrentlyOccupied.setDescription('A boolean whose value indicates whether thisExpansion Site is currently occupied or not.')
tEventGenerationForCoolingDevice = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 140), )
if mibBuilder.loadTexts: tEventGenerationForCoolingDevice.setStatus('mandatory')
if mibBuilder.loadTexts: tEventGenerationForCoolingDevice.setDescription('')
eEventGenerationForCoolingDevice = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 140, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a140AssociatedGroup"))
if mibBuilder.loadTexts: eEventGenerationForCoolingDevice.setStatus('mandatory')
if mibBuilder.loadTexts: eEventGenerationForCoolingDevice.setDescription('')
a140EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 140, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vCoolingDeviceStatusChange", 1), ("vTemperatureFault", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a140EventType.setStatus('mandatory')
if mibBuilder.loadTexts: a140EventType.setDescription('The type of event that has occurred.')
a140EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 140, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a140EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a140EventSeverity.setDescription('The severity of this event.')
a140IsEventState_based = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 140, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setLabel("a140IsEventState-based").setMaxAccess("readonly")
if mibBuilder.loadTexts: a140IsEventState_based.setStatus('mandatory')
if mibBuilder.loadTexts: a140IsEventState_based.setDescription('The value of this attributedetermines whether the Event being reportedis a state-based Event or not. If the valueof this attribute is TRUE then the Event isstate-based. Otherwise the Event is notstate-based.')
a140EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 140, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a140EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a140EventStateKey.setDescription("A unique, single integer key into the EventState group if this is a state-based Event.If this is not a state-based Event then thisthis attribute's value is not defined.")
a140AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 140, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a140AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a140AssociatedGroup.setDescription('The class name of the group that is associatedwith the events defined in this EventGeneration group.')
a140EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 140, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a140EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a140EventSystem.setDescription('The major functional aspect of the productcausing the fault.')
a140EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 140, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a140EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a140EventSubsystem.setDescription('The minor functional aspect of the productcausing the fault.')
tEventGenerationForPowerUnit = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 201), )
if mibBuilder.loadTexts: tEventGenerationForPowerUnit.setStatus('mandatory')
if mibBuilder.loadTexts: tEventGenerationForPowerUnit.setDescription('')
eEventGenerationForPowerUnit = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 201, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a201AssociatedGroup"))
if mibBuilder.loadTexts: eEventGenerationForPowerUnit.setStatus('mandatory')
if mibBuilder.loadTexts: eEventGenerationForPowerUnit.setDescription('')
a201EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 201, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vPowerUnitRedundancyLost", 1), ("vPowerUnitRedundancyRegained", 2), ("vPowerUnitRedundancyDegraded", 3), ("vPowerUnitVaShutdownConditionCleared", 4), ("vPowerUnitVaShutdownLimitExceeded", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a201EventType.setStatus('mandatory')
if mibBuilder.loadTexts: a201EventType.setDescription('The type of event that has occurred.')
a201EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 201, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a201EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a201EventSeverity.setDescription('The severity of this event.')
a201IsEventState_based = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 201, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setLabel("a201IsEventState-based").setMaxAccess("readonly")
if mibBuilder.loadTexts: a201IsEventState_based.setStatus('mandatory')
if mibBuilder.loadTexts: a201IsEventState_based.setDescription('The value of this attributedetermines whether the Event being reportedis a state-based Event or not. If the valueof this attribute is TRUE then the Event isstate-based. Otherwise the Event is notstate-based.')
a201EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 201, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a201EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a201EventStateKey.setDescription("A unique, single integer key into the EventState group if this is a state-based Event.If this is not a state-based Event then thisthis attribute's value is not defined.")
a201AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 201, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a201AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a201AssociatedGroup.setDescription('The class name of the group that is associatedwith the events defined in this EventGeneration group.')
a201EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 201, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a201EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a201EventSystem.setDescription('The major functional aspect of the productcausing the fault.')
a201EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 201, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a201EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a201EventSubsystem.setDescription('The minor functional aspect of the productcausing the fault.')
a201IsInstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 201, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a201IsInstanceDataPresent.setStatus('mandatory')
if mibBuilder.loadTexts: a201IsInstanceDataPresent.setDescription('Indicates whether the second event block containsinstance-specif c data.')
a201EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 201, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a201EventMessage.setStatus('mandatory')
if mibBuilder.loadTexts: a201EventMessage.setDescription('Auxillary information releated to the eventThis text contains the name of the Probe')
tEventGenerationForCoolingSensors = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 202), )
if mibBuilder.loadTexts: tEventGenerationForCoolingSensors.setStatus('mandatory')
if mibBuilder.loadTexts: tEventGenerationForCoolingSensors.setDescription('')
eEventGenerationForCoolingSensors = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 202, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a202AssociatedGroup"))
if mibBuilder.loadTexts: eEventGenerationForCoolingSensors.setStatus('mandatory')
if mibBuilder.loadTexts: eEventGenerationForCoolingSensors.setDescription('')
a202EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 202, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 257))).clone(namedValues=NamedValues(("vCoolingDeviceFailure", 256), ("vCoolingDeviceOk", 257)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a202EventType.setStatus('mandatory')
if mibBuilder.loadTexts: a202EventType.setDescription('The type of event that has occurred.')
a202EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 202, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a202EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a202EventSeverity.setDescription('The severity of this event.')
a202IsEventState_based = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 202, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setLabel("a202IsEventState-based").setMaxAccess("readonly")
if mibBuilder.loadTexts: a202IsEventState_based.setStatus('mandatory')
if mibBuilder.loadTexts: a202IsEventState_based.setDescription('The value of this attributedetermines whether the Event being reportedis a state-based Event or not. If the valueof this attribute is TRUE then the Event isstate-based. Otherwise the Event is notstate-based.')
a202EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 202, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a202EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a202EventStateKey.setDescription("A unique, single integer key into the EventState group if this is a state-based Event.If this is not a state-based Event then thisthis attribute's value is not defined.")
a202AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 202, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a202AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a202AssociatedGroup.setDescription('The class name of the group that is associatedwith the events defined in this EventGeneration group.')
a202EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 202, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a202EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a202EventSystem.setDescription('The major functional aspect of the productcausing the fault.')
a202EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 202, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a202EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a202EventSubsystem.setDescription('The minor functional aspect of the productcausing the fault.')
a202IsInstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 202, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a202IsInstanceDataPresent.setStatus('mandatory')
if mibBuilder.loadTexts: a202IsInstanceDataPresent.setDescription('Indicates whether the second event block containsinstance-specif c data.')
a202EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 202, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a202EventMessage.setStatus('mandatory')
if mibBuilder.loadTexts: a202EventMessage.setDescription('Auxillary information releated to the eventThis text contains the name of the Probe')
tMiftomib = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1001), )
if mibBuilder.loadTexts: tMiftomib.setStatus('mandatory')
if mibBuilder.loadTexts: tMiftomib.setDescription('This group defines attributes required for DMI to SNMP translati n.')
eMiftomib = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1001, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eMiftomib.setStatus('mandatory')
if mibBuilder.loadTexts: eMiftomib.setDescription('')
a1001MibName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1001, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1001MibName.setStatus('mandatory')
if mibBuilder.loadTexts: a1001MibName.setDescription('The MIB name that defines this MIF')
a1001MibOid = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1001, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1001MibOid.setStatus('mandatory')
if mibBuilder.loadTexts: a1001MibOid.setDescription('The MIB Object Identifier that corresponds to this MIF')
a1001DisableTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1001, 1, 3), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1001DisableTrap.setStatus('mandatory')
if mibBuilder.loadTexts: a1001DisableTrap.setDescription('This attribute can be changed to disable sending oftraps from this component')
tSystemControl = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004), )
if mibBuilder.loadTexts: tSystemControl.setStatus('mandatory')
if mibBuilder.loadTexts: tSystemControl.setDescription('Status and control of global system control features.')
eSystemControl = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a1004Selfid"))
if mibBuilder.loadTexts: eSystemControl.setStatus('mandatory')
if mibBuilder.loadTexts: eSystemControl.setDescription('')
a1004Selfid = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1004Selfid.setStatus('mandatory')
if mibBuilder.loadTexts: a1004Selfid.setDescription('A unique number that identifies this row.')
a1004ResetSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vDoNotReset", 0), ("vInitiateReset", 1), ("vUnsupported", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1004ResetSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a1004ResetSystem.setDescription('Writing to the attribute initiates an immediate system hard reset. The value for this attribute is either Do Not Reset or Initiate Reset.')
a1004TimedResetIncrement = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1004TimedResetIncrement.setStatus('mandatory')
if mibBuilder.loadTexts: a1004TimedResetIncrement.setDescription('This attribute contains the increments in which a timed reset can be set, in microseconds.')
a1004TimedResetResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1004TimedResetResolution.setStatus('mandatory')
if mibBuilder.loadTexts: a1004TimedResetResolution.setDescription('This attribute contains the resolution to which a Timed Reset can be set, in microseconds. For example, a resolution of 1 second and an increment of 10 seconds would indicate that a 10 second delay interval setting produces a 9 to 10 second delay. ')
a1004TimeUntilSystemReset = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1, 5), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1004TimeUntilSystemReset.setStatus('mandatory')
if mibBuilder.loadTexts: a1004TimeUntilSystemReset.setDescription('This attribute contains the interval for timed resets, in units of the Timed Reset Increment attribute. Writing a non-zero value, and setting the Timed Reset Enable on, initiates a timed reset countdown. ')
a1004SystemPowerCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("vUnknown", 0), ("vUnsupported", 1), ("vOnAndOff", 2), ("vOffOnly", 3), ("vOnOnly", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1004SystemPowerCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: a1004SystemPowerCapabilities.setDescription('This attribute describes the system power control capabilities. It can have one of the following values: Unknown, On And Off, Off Only, or On Only.')
a1004SystemPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vOff", 0), ("vOn", 1), ("vUnsupported", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1004SystemPowerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a1004SystemPowerStatus.setDescription('This attribute provides access to the status and control of system power. Its value is either On or Off.')
a1004EventLoggingCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("vUnknown", 0), ("vUnsupported", 1), ("vActive", 2), ("vInactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1004EventLoggingCapability.setStatus('mandatory')
if mibBuilder.loadTexts: a1004EventLoggingCapability.setDescription('This attribute describes the Event Logging Capabilities. The attribute value can be : Unknown, Unsupported, Active, or Inactive. If the Event logging capability is Active, the BIOS logs the system errors to the FLASH. The LSC reads this FLASH log and takes appropriate actions. If this feature is Inactive, the LSC will read the values from the system registers directly. The Event logging capability can be set to Active or Inactive using the System Configuration Utility (SCU).')
a1004WatchdogTimerIncrement = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1004WatchdogTimerIncrement.setStatus('mandatory')
if mibBuilder.loadTexts: a1004WatchdogTimerIncrement.setDescription('This attribute contains the increments in which a watchdog update interval can be set. This value is maintained internally by instrumentati n code in microseconds. In LSC Local Console, this value is shown in Seconds.')
a1004WatchdogTimerResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1004WatchdogTimerResolution.setStatus('mandatory')
if mibBuilder.loadTexts: a1004WatchdogTimerResolution.setDescription('Resolution to which a watchdog update interval can be set. For example, a watchdog timer resolution of R microsecond and an watchdog timer increment of I microseconds would indicate that a watchdog update interva setting of N will produce a (N*I)-R to (N*I) microseconds delay. In LSC Local Console, this value is shown in Seconds.')
a1004WatchdogUpdateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1, 11), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1004WatchdogUpdateInterval.setStatus('mandatory')
if mibBuilder.loadTexts: a1004WatchdogUpdateInterval.setDescription("This attribute specifies the Interval for watchdog resets, in minutes. If the system software does not update the watchdog timer within this interval, a hard reset will occur. Selecting a non-zero value for this attribute and setting the Use System Watchdog Feature attribute to 'On' starts the watchdog reset timer countdown. ")
a1004UseSystemWatchdogFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vOff", 0), ("vOn", 1), ("vUnsupported", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1004UseSystemWatchdogFeature.setStatus('mandatory')
if mibBuilder.loadTexts: a1004UseSystemWatchdogFeature.setDescription('If this value is On, then the Watchdog feature is enabled and the Watchdog Update Interval value is valid. If enabled this feature automatically resets the server if the LSC software does not reset the watchdog timer within the specified Watchdog Update Interval. NOTE : This is a hard reset that will immediately reset the system without taking NetWare down. This might result in some files being corrupted.')
a1004ResetSystemAfterDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vOff", 0), ("vOn", 1), ("vUnsupported", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1004ResetSystemAfterDelay.setStatus('mandatory')
if mibBuilder.loadTexts: a1004ResetSystemAfterDelay.setDescription('This attribute controls whether or not the timed reset function is enabled. If the value is On, then the system will reset when the Timed Reset Interval expires.')
a1004SavePersistentData = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vOff", 0), ("vOn", 1), ("vUnsupported", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1004SavePersistentData.setStatus('mandatory')
if mibBuilder.loadTexts: a1004SavePersistentData.setDescription('When this attribute value is set to ON all the persistent data like thresholds are stored into the persistent data Table. ')
a1004RestoreFactoryDefaults = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vOff", 0), ("vOn", 1), ("vUnsupported", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1004RestoreFactoryDefaults.setStatus('mandatory')
if mibBuilder.loadTexts: a1004RestoreFactoryDefaults.setDescription('When this attribute value is set to ON all the Factory default thresholds are restored. ')
a1004ShutdownOs = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vDoNotShutdown", 0), ("vShutdownOs", 1), ("vUnsupported", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1004ShutdownOs.setStatus('mandatory')
if mibBuilder.loadTexts: a1004ShutdownOs.setDescription('Writing to this attribute initiates an immediate OS shutdown. The value of this attribute is either Do Not Shutdown or Shutdown OS.')
a1004ShutdownOsAndPowerOff = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vDoNotShutdownAndPowerOff", 0), ("vShutdownAndPowerOff", 1), ("vUnsupported", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1004ShutdownOsAndPowerOff.setStatus('mandatory')
if mibBuilder.loadTexts: a1004ShutdownOsAndPowerOff.setDescription('Writing to this attribute initiates an immediate OS shutdown and Power Off of the system. The value of this attribute is either Do Not Shutdown and Power Off or Shutdown OS and Power Off.')
a1004ShutdownOsAndHardwareReset = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vDoNotShutdownAndHardwareReset", 0), ("vShutdownAndHardwareReset", 1), ("vUnsupported", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1004ShutdownOsAndHardwareReset.setStatus('mandatory')
if mibBuilder.loadTexts: a1004ShutdownOsAndHardwareReset.setDescription('Writing to this attribute initiates an immediate OS shutdown. The value of this attribute is either Do Not Shutdown and Hardware Reset or Shutdown OS and Hardware Reset.')
a1004IssueAHardwareNmi = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vDoNotIssueAnNmi", 0), ("vIssueAnNmi", 1), ("vUnsupported", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1004IssueAHardwareNmi.setStatus('mandatory')
if mibBuilder.loadTexts: a1004IssueAHardwareNmi.setDescription('Writing to this attribute causes a hardware NMI (Non Maskabale Interrup). It will have one of the two values. Issue an NMI, or Do Not Issue an NMI ')
tCoolingSensors = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005), )
if mibBuilder.loadTexts: tCoolingSensors.setStatus('mandatory')
if mibBuilder.loadTexts: tCoolingSensors.setDescription('This table contains one row for each cooling fan in the system. Each row contains the status and control information for a single fan.')
eCoolingSensors = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a1005Selfid"))
if mibBuilder.loadTexts: eCoolingSensors.setStatus('mandatory')
if mibBuilder.loadTexts: eCoolingSensors.setDescription('')
a1005Selfid = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1005Selfid.setStatus('mandatory')
if mibBuilder.loadTexts: a1005Selfid.setDescription('A unique number that identifies this row.')
a1005FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1005FruGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a1005FruGroupIndex.setDescription("If this is a Field Replaceable Unit or if it is part of another FRU, thisprovides an index into the FRU table; 'value = -1' indicates that the group is not a FRU.")
a1005OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1005OperationalGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a1005OperationalGroupIndex.setDescription('The index into the Operational State table for this device.')
a1005CoolingDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 32, 33))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vFan", 3), ("vCentrifugalBlower", 4), ("vChipFan", 5), ("vCabinetFan", 6), ("vPowerSupplyFan", 7), ("vHeatPipe", 8), ("vIntegratedRefrigeration", 9), ("vActiveCooling", 32), ("vPassiveCooling", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1005CoolingDeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: a1005CoolingDeviceType.setDescription('This attribute describes the fan type. It has one of the following values: Muffin, Axial, Piezo, or Squirrel Cage.')
a1005CfmRating = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1005CfmRating.setStatus('mandatory')
if mibBuilder.loadTexts: a1005CfmRating.setDescription('This attribute presents the maximum CFM rating of this fan.')
a1005FanUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vRpm", 0), ("vCfm", 1), ("vOkfatal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1005FanUnits.setStatus('mandatory')
if mibBuilder.loadTexts: a1005FanUnits.setDescription('This attribute describes the units of fan status measurement. It has one of the following values: RPM, CFM, or OK/Fatal.')
a1005MaximumReading = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1005MaximumReading.setStatus('mandatory')
if mibBuilder.loadTexts: a1005MaximumReading.setDescription("This attribute contains the highest reading supported on this fan's sensor, measured in the units specified by the Fan Units attribute. This attribute may not apply to all fan types.")
a1005MinimumReading = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1005MinimumReading.setStatus('mandatory')
if mibBuilder.loadTexts: a1005MinimumReading.setDescription("This attribute contains the lowest reading supported on this fan's sensor, measured in the units specified Fan Units attribute. This attribute may not apply to all fan types.")
a1005CurrentReading = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1005CurrentReading.setStatus('mandatory')
if mibBuilder.loadTexts: a1005CurrentReading.setDescription('This attribute contains the current fan sensor reading, measured in the units specified by the Fan Units attribute. This attribute will display as Unsupported if the hardware does not support this feature. ')
a1005SensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1, 13), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1005SensorAccuracy.setStatus('mandatory')
if mibBuilder.loadTexts: a1005SensorAccuracy.setDescription("This attribute describes the sensor's accuracy in +/- hundredth of a percent.")
a1005SensorTolerancePlus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1, 14), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1005SensorTolerancePlus.setStatus('mandatory')
if mibBuilder.loadTexts: a1005SensorTolerancePlus.setDescription("This attribute describes the sensor's '+' tolerance in the units specified by the Fan Units attribute.")
a1005SensorToleranceMinus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1, 15), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1005SensorToleranceMinus.setStatus('mandatory')
if mibBuilder.loadTexts: a1005SensorToleranceMinus.setDescription("This attribute describes the sensor's '-' tolerance in the units specified by the Fan Units attribute.")
a1005Non_criticalThreshold = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1, 16), DmiInteger()).setLabel("a1005Non-criticalThreshold").setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1005Non_criticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: a1005Non_criticalThreshold.setDescription('This attribute contains the warning threshold level for the fan. The threshold is given in the units specified by the Fan Units attribute.')
a1005CriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1, 17), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1005CriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: a1005CriticalThreshold.setDescription('This attribute contains the major error threshold level for the fan. The threshold is given in the units specified by the Fan Units attribute.')
a1005Non_recoverableThreshold = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1, 18), DmiInteger()).setLabel("a1005Non-recoverableThreshold").setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1005Non_recoverableThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: a1005Non_recoverableThreshold.setDescription('This attribute contains the fatal error threshold level for the fan. The threshold is given in the units specified by the Fan Units attribute.')
a1005CoolingSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1, 19), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1005CoolingSensorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: a1005CoolingSensorDescription.setDescription("Additional descriptive information about the Cooling sensor orsensor's location.")
a1005NominalReading = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1, 21), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1005NominalReading.setStatus('mandatory')
if mibBuilder.loadTexts: a1005NominalReading.setDescription('Nominal reading for this fan, in units. 80000000h indicates that this attribute is not supported.')
a1005LowestNormalReading = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1, 22), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1005LowestNormalReading.setStatus('mandatory')
if mibBuilder.loadTexts: a1005LowestNormalReading.setDescription('Specified lowest normal reading for this fan, in units. Readings beyond this value indicate an abnormal condition. 80000000h indicates that this attribute is not supported.')
a1005HighestNormalReading = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1, 23), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1005HighestNormalReading.setStatus('mandatory')
if mibBuilder.loadTexts: a1005HighestNormalReading.setDescription('Specified lowest normal reading for this fan, in units. Readings beyond this value indicate an abnormal condition. 80000000h indicates that this attribute is not supported.')
tSystemEventLog = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1006), )
if mibBuilder.loadTexts: tSystemEventLog.setStatus('mandatory')
if mibBuilder.loadTexts: tSystemEventLog.setDescription('This group provides raw access to System Event Log (SEL) recordsThis data is intended for use by a Service & Support person')
eSystemEventLog = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1006, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a1006Selfid"))
if mibBuilder.loadTexts: eSystemEventLog.setStatus('mandatory')
if mibBuilder.loadTexts: eSystemEventLog.setDescription('')
a1006Selfid = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1006, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1006Selfid.setStatus('mandatory')
if mibBuilder.loadTexts: a1006Selfid.setDescription('A unique number that identifies this row.')
a1006Timestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1006, 1, 2), DmiDateX()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1006Timestamp.setStatus('mandatory')
if mibBuilder.loadTexts: a1006Timestamp.setDescription('The time and date when this record was written.')
a1006RecordType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1006, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1006RecordType.setStatus('mandatory')
if mibBuilder.loadTexts: a1006RecordType.setDescription('Type of this record.')
a1006RecordLength = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1006, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1006RecordLength.setStatus('mandatory')
if mibBuilder.loadTexts: a1006RecordLength.setDescription('Length of this record.')
a1006RecordData = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1006, 1, 5), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1006RecordData.setStatus('mandatory')
if mibBuilder.loadTexts: a1006RecordData.setDescription('Binary Data associated with this record')
trap1ForProcessor = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 100, 1) + (0,256)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a100EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100EventMessage"), ("INTELCORPORATIONBASEBOARD2-MIB", "a6ProcessorIndex"))
if mibBuilder.loadTexts: trap1ForProcessor.setDescription('Processor Internal Error')
trap2ForProcessor = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 100, 1) + (0,257)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a100EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100EventMessage"), ("INTELCORPORATIONBASEBOARD2-MIB", "a6ProcessorIndex"))
if mibBuilder.loadTexts: trap2ForProcessor.setDescription('Processor Thermal Trip')
trap3ForProcessor = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 100, 1) + (0,258)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a100EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100EventMessage"), ("INTELCORPORATIONBASEBOARD2-MIB", "a6ProcessorIndex"))
if mibBuilder.loadTexts: trap3ForProcessor.setDescription('Processor FRB-3 Failure')
trap1ForPowerSupply = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 104, 1) + (0,256)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a104EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a17PowerSupplyIndex"))
if mibBuilder.loadTexts: trap1ForPowerSupply.setDescription('Power Supply Failed')
trap2ForPowerSupply = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 104, 1) + (0,257)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a104EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a17PowerSupplyIndex"))
if mibBuilder.loadTexts: trap2ForPowerSupply.setDescription('Power Supply OK')
trap3ForPowerSupply = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 104, 1) + (0,258)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a104EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a17PowerSupplyIndex"))
if mibBuilder.loadTexts: trap3ForPowerSupply.setDescription('Power Supply Likely To Fail')
trap1ForPhysicalMemory = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 108, 1) + (0,256)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a108EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a108EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a108IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a108EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a108AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a108EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a108EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a108IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a34MemoryArrayTableIndex"))
if mibBuilder.loadTexts: trap1ForPhysicalMemory.setDescription('Single BIT ECC Error')
trap2ForPhysicalMemory = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 108, 1) + (0,257)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a108EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a108EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a108IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a108EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a108AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a108EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a108EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a108IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a34MemoryArrayTableIndex"))
if mibBuilder.loadTexts: trap2ForPhysicalMemory.setDescription('Multi BIT ECC Error from previous boot')
trap1ForVoltageProbe = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 113, 1) + (0,256)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a113EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a54VoltageProbeIndex"))
if mibBuilder.loadTexts: trap1ForVoltageProbe.setDescription('Status Changed to OK')
trap2ForVoltageProbe = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 113, 1) + (0,257)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a113EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a54VoltageProbeIndex"))
if mibBuilder.loadTexts: trap2ForVoltageProbe.setDescription('Status Changed to Upper Critical')
trap3ForVoltageProbe = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 113, 1) + (0,258)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a113EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a54VoltageProbeIndex"))
if mibBuilder.loadTexts: trap3ForVoltageProbe.setDescription('Status Changed to Lower Critical')
trap4ForVoltageProbe = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 113, 1) + (0,259)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a113EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a54VoltageProbeIndex"))
if mibBuilder.loadTexts: trap4ForVoltageProbe.setDescription('Status Changed to from OK to Upper Non Critical')
trap5ForVoltageProbe = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 113, 1) + (0,260)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a113EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a54VoltageProbeIndex"))
if mibBuilder.loadTexts: trap5ForVoltageProbe.setDescription('Status Changed to from OK to Lower Non Critical')
trap6ForVoltageProbe = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 113, 1) + (0,261)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a113EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a54VoltageProbeIndex"))
if mibBuilder.loadTexts: trap6ForVoltageProbe.setDescription('Status Changed to from Upper Critical to Upper Non Critical')
trap7ForVoltageProbe = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 113, 1) + (0,262)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a113EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a54VoltageProbeIndex"))
if mibBuilder.loadTexts: trap7ForVoltageProbe.setDescription('Status Changed to from Lower Critical to Lower Non Critical')
trap1ForTemperatureProbe = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 114, 1) + (0,256)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a114EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a55TemperatureProbeTableIndex"))
if mibBuilder.loadTexts: trap1ForTemperatureProbe.setDescription('Status Changed to OK')
trap2ForTemperatureProbe = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 114, 1) + (0,257)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a114EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a55TemperatureProbeTableIndex"))
if mibBuilder.loadTexts: trap2ForTemperatureProbe.setDescription('Status Changed to Upper Critical')
trap3ForTemperatureProbe = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 114, 1) + (0,258)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a114EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a55TemperatureProbeTableIndex"))
if mibBuilder.loadTexts: trap3ForTemperatureProbe.setDescription('Status Changed to Lower Critical')
trap4ForTemperatureProbe = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 114, 1) + (0,259)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a114EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a55TemperatureProbeTableIndex"))
if mibBuilder.loadTexts: trap4ForTemperatureProbe.setDescription('Status Changed to from OK to Upper Non Critical')
trap5ForTemperatureProbe = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 114, 1) + (0,260)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a114EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a55TemperatureProbeTableIndex"))
if mibBuilder.loadTexts: trap5ForTemperatureProbe.setDescription('Status Changed to from OK to Lower Non Critical')
trap6ForTemperatureProbe = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 114, 1) + (0,261)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a114EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a55TemperatureProbeTableIndex"))
if mibBuilder.loadTexts: trap6ForTemperatureProbe.setDescription('Status Changed to from Upper Critical to Upper Non Critical')
trap7ForTemperatureProbe = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 114, 1) + (0,262)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a114EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a55TemperatureProbeTableIndex"))
if mibBuilder.loadTexts: trap7ForTemperatureProbe.setDescription('Status Changed to from Lower Critical to Lower Non Critical')
trap1ForPhysicalContainer = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 116, 1) + (0,6)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a116EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a116EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a116IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a116EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a116AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a116EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a116EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a116IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a64ContainerIndex"))
if mibBuilder.loadTexts: trap1ForPhysicalContainer.setDescription('Container Security Breached')
trap2ForPhysicalContainer = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 116, 1) + (0,256)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a116EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a116EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a116IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a116EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a116AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a116EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a116EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a116IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a64ContainerIndex"))
if mibBuilder.loadTexts: trap2ForPhysicalContainer.setDescription('Container Secured')
trap1ForPowerUnit = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 201, 1) + (0,1)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a201EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a67PowerUnitIndex"))
if mibBuilder.loadTexts: trap1ForPowerUnit.setDescription('Power Unit Redundancy Lost')
trap2ForPowerUnit = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 201, 1) + (0,2)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a201EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a67PowerUnitIndex"))
if mibBuilder.loadTexts: trap2ForPowerUnit.setDescription('Power Unit Redundancy Regained')
trap3ForPowerUnit = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 201, 1) + (0,3)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a201EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a67PowerUnitIndex"))
if mibBuilder.loadTexts: trap3ForPowerUnit.setDescription('Power Unit Redundancy Degraded')
trap4ForPowerUnit = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 201, 1) + (0,4)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a201EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a67PowerUnitIndex"))
if mibBuilder.loadTexts: trap4ForPowerUnit.setDescription('Power Unit VA Shutdown Condition Cleared')
trap5ForPowerUnit = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 201, 1) + (0,5)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a201EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a67PowerUnitIndex"))
if mibBuilder.loadTexts: trap5ForPowerUnit.setDescription('Power Unit VA Shutdown Limit Exceeded')
trap1ForCoolingSensors = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 202, 1) + (0,256)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a202EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a202EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a202IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a202EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a202AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a202EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a202EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a202IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a1005Selfid"))
if mibBuilder.loadTexts: trap1ForCoolingSensors.setDescription('Cooling Device Failure')
trap2ForCoolingSensors = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 202, 1) + (0,257)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a202EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a202EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a202IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a202EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a202AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a202EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a202EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a202IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a1005Selfid"))
if mibBuilder.loadTexts: trap2ForCoolingSensors.setDescription('Cooling Device OK')
mibBuilder.exportSymbols("INTELCORPORATIONBASEBOARD2-MIB", a1005CoolingDeviceType=a1005CoolingDeviceType, tPhysicalContainerGlobalTable=tPhysicalContainerGlobalTable, a140EventType=a140EventType, a129ExpansionSiteCurrentlyOccupied=a129ExpansionSiteCurrentlyOccupied, a36ErrorGranularity=a36ErrorGranularity, a17Range2InputFrequencyLow=a17Range2InputFrequencyLow, a4BiosRomSize=a4BiosRomSize, eEventGenerationForTemperatureProbe=eEventGenerationForTemperatureProbe, a54VoltageProbeDescription=a54VoltageProbeDescription, a7OperationalGroupIndex=a7OperationalGroupIndex, a92OperationalGroupIndex=a92OperationalGroupIndex, a81CoolingUnitIndex=a81CoolingUnitIndex, a113EventSystem=a113EventSystem, a1Version=a1Version, a55OperationalGroupIndex=a55OperationalGroupIndex, eOperatingSystem=eOperatingSystem, eComponentid=eComponentid, a6Level2CacheIndex=a6Level2CacheIndex, a31OperationalStatus=a31OperationalStatus, a54VoltageProbeVoltageLevel=a54VoltageProbeVoltageLevel, a92FruGroupIndex=a92FruGroupIndex, a17Range1InputVoltageLow=a17Range1InputVoltageLow, trap2ForProcessor=trap2ForProcessor, a35MappedRangeStartingAddress=a35MappedRangeStartingAddress, a37MemoryDeviceMappedAddressesTableIndex=a37MemoryDeviceMappedAddressesTableIndex, a54VoltageLevelLowerThreshold_Critical=a54VoltageLevelLowerThreshold_Critical, tSystemBios=tSystemBios, a114IsEventState_based=a114IsEventState_based, a104EventType=a104EventType, a37MappedRangeStartingAddress=a37MappedRangeStartingAddress, a55MonitoredTemperatureNominalReading=a55MonitoredTemperatureNominalReading, a1004ShutdownOsAndPowerOff=a1004ShutdownOsAndPowerOff, a1005HighestNormalReading=a1005HighestNormalReading, a108EventSubsystem=a108EventSubsystem, a104IsEventState_based=a104IsEventState_based, a54VoltageLevelUpperThreshold_Non_recove=a54VoltageLevelUpperThreshold_Non_recove, a50KeyboardPasswordStatus=a50KeyboardPasswordStatus, a91MouseDriverVersion=a91MouseDriverVersion, a36VendorSyndrome=a36VendorSyndrome, trap3ForProcessor=trap3ForProcessor, a202EventSubsystem=a202EventSubsystem, a74ConnectorPinout=a74ConnectorPinout, a34ErrorOperation=a34ErrorOperation, tMemoryDeviceMappedAddresses=tMemoryDeviceMappedAddresses, a66OperatingSystemDescription=a66OperatingSystemDescription, a30PartNumber=a30PartNumber, a34MemoryArrayUse=a34MemoryArrayUse, eProcessor=eProcessor, trap1ForVoltageProbe=trap1ForVoltageProbe, a83FruGroupIndex=a83FruGroupIndex, a83CurrentRefreshRate=a83CurrentRefreshRate, trap3ForTemperatureProbe=trap3ForTemperatureProbe, a5BiosCharacteristicDescription=a5BiosCharacteristicDescription, a17PowerSupplyIndex=a17PowerSupplyIndex, a10OperationalGroupIndex=a10OperationalGroupIndex, a100EventSubsystem=a100EventSubsystem, tEventGenerationForCoolingDevice=tEventGenerationForCoolingDevice, eEventGenerationForPowerSupply=eEventGenerationForPowerSupply, a55TemperatureStatus=a55TemperatureStatus, a92KeyboardType=a92KeyboardType, a54MonitoredVoltageNormalMinimum=a54MonitoredVoltageNormalMinimum, a30Model=a30Model, trap2ForCoolingSensors=trap2ForCoolingSensors, DmiDisplaystring=DmiDisplaystring, a37Partition=a37Partition, a31WarningErrorCount=a31WarningErrorCount, tVideo=tVideo, eTemperatureProbe=eTemperatureProbe, a17OperationalGroupIndex=a17OperationalGroupIndex, a113IsEventState_based=a113IsEventState_based, trap5ForVoltageProbe=trap5ForVoltageProbe, a34MemoryErrorCorrection=a34MemoryErrorCorrection, a4BiosStartingAddress=a4BiosStartingAddress, a116EventSubsystem=a116EventSubsystem, eParallelPorts=eParallelPorts, a30Description=a30Description, a6Level1CacheIndex=a6Level1CacheIndex, a10SystemCacheIndex=a10SystemCacheIndex, a1005CriticalThreshold=a1005CriticalThreshold, a5BiosCharacteristic=a5BiosCharacteristic, a83CurrentNumberOfRows=a83CurrentNumberOfRows, a129ExpansionSiteDescription=a129ExpansionSiteDescription, a1005CurrentReading=a1005CurrentReading, a31OperationalStateInstanceIndex=a31OperationalStateInstanceIndex, a75SerialPortIndex=a75SerialPortIndex, a74ParallelPortSecuritySettings=a74ParallelPortSecuritySettings, a34VendorSyndrome=a34VendorSyndrome, a75OperationalGroupIndex=a75OperationalGroupIndex, a17Range1ElectricalCurrentProbeIndex=a17Range1ElectricalCurrentProbeIndex, a10SystemCacheSpeed=a10SystemCacheSpeed, a34NumberOfMemoryDeviceSocketsUsed=a34NumberOfMemoryDeviceSocketsUsed, a67PowerUnitIndex=a67PowerUnitIndex, ePhysicalMemoryArray=ePhysicalMemoryArray, a66OperatingSystemBootDeviceIndex=a66OperatingSystemBootDeviceIndex, a55TemperatureProbeTableIndex=a55TemperatureProbeTableIndex, a36MemoryArrayIndex=a36MemoryArrayIndex, trap1ForPhysicalMemory=trap1ForPhysicalMemory, a74ParallelBaseIoAddress=a74ParallelBaseIoAddress, a66OperatingSystemName=a66OperatingSystemName, tSystemCache=tSystemCache, a55TemperatureProbeMaximum=a55TemperatureProbeMaximum, a100IsInstanceDataPresent=a100IsInstanceDataPresent, a6ProcessorVersionInformation=a6ProcessorVersionInformation, a36ArrayErrorAddress=a36ArrayErrorAddress, a100EventSeverity=a100EventSeverity, a129ExpansionSiteType=a129ExpansionSiteType, a116IsEventState_based=a116IsEventState_based, a113EventSubsystem=a113EventSubsystem, eMemoryDeviceMappedAddresses=eMemoryDeviceMappedAddresses, a1005CoolingSensorDescription=a1005CoolingSensorDescription, a4BiosIndex=a4BiosIndex, a19SlotWidth=a19SlotWidth, a36ErrorOperation=a36ErrorOperation, a83VideoType=a83VideoType, eSystemEventLog=eSystemEventLog, a54MonitoredVoltageNominalLevel=a54MonitoredVoltageNominalLevel, a4BiosReleaseDate=a4BiosReleaseDate, a1005SensorAccuracy=a1005SensorAccuracy, a201EventType=a201EventType, a17InputVoltageCapabilityDescription=a17InputVoltageCapabilityDescription, DmiComponentIndex=DmiComponentIndex, a37DataDepth=a37DataDepth, a116EventSystem=a116EventSystem, a17Range2InputFrequencyHigh=a17Range2InputFrequencyHigh, a55TemperatureProbeTemperatureReading=a55TemperatureProbeTemperatureReading, a17Range1InputFrequencyLow=a17Range1InputFrequencyLow, a1Installation=a1Installation, a64FruGroupIndex=a64FruGroupIndex, a17PowerUnitIndex=a17PowerUnitIndex, eGeneralInformation=eGeneralInformation, a36MemoryType=a36MemoryType, a129ExpansionSiteIndex=a129ExpansionSiteIndex, intel=intel, eMemoryArrayMappedAddresses=eMemoryArrayMappedAddresses, a1005SensorToleranceMinus=a1005SensorToleranceMinus, a30FruSerialNumber=a30FruSerialNumber, eEventGenerationForPowerUnit=eEventGenerationForPowerUnit, a1005NominalReading=a1005NominalReading, eFieldReplaceableUnit=eFieldReplaceableUnit, a113IsInstanceDataPresent=a113IsInstanceDataPresent, a36LastErrorUpdate=a36LastErrorUpdate, trap7ForTemperatureProbe=trap7ForTemperatureProbe, a54OperationalGroupIndex=a54OperationalGroupIndex, a84VideoBiosShadowingState=a84VideoBiosShadowingState, a54VoltageProbeMinimum=a54VoltageProbeMinimum, eKeyboard=eKeyboard, DmiCounter=DmiCounter, tMotherboard=tMotherboard, a75IrqUsed=a75IrqUsed, a108IsEventState_based=a108IsEventState_based, a75SerialPortCapabilities=a75SerialPortCapabilities, a55TemperatureUpperThreshold_Non_critica=a55TemperatureUpperThreshold_Non_critica, a31UsageState=a31UsageState, eSystemControl=eSystemControl, a66OperatingSystemVersion=a66OperatingSystemVersion, a37MemoryDeviceSetId=a37MemoryDeviceSetId, a2SystemName=a2SystemName, eMiftomib=eMiftomib, a91MouseButtons=a91MouseButtons, a35OperationalGroupIndex=a35OperationalGroupIndex, a1006RecordLength=a1006RecordLength, a81CoolingDeviceTableIndex=a81CoolingDeviceTableIndex, a34ErrorAddress=a34ErrorAddress, a52PowerControlRequest=a52PowerControlRequest, a1005MaximumReading=a1005MaximumReading, a6ProcessorIndex=a6ProcessorIndex, a108EventMessage=a108EventMessage, a30FruInternetUniformResourceLocator=a30FruInternetUniformResourceLocator, a113EventMessage=a113EventMessage, a1005Selfid=a1005Selfid, a75ConnectorType=a75ConnectorType, a140AssociatedGroup=a140AssociatedGroup, a83CurrentHorizontalResolution=a83CurrentHorizontalResolution, a100EventStateKey=a100EventStateKey, a83CurrentNumberOfBitsPerPixel=a83CurrentNumberOfBitsPerPixel, a36DeviceErrorType=a36DeviceErrorType, a1004TimeUntilSystemReset=a1004TimeUntilSystemReset, a114EventStateKey=a114EventStateKey, a54VoltageLevelLowerThreshold_Non_critic=a54VoltageLevelLowerThreshold_Non_critic, a4BiosEndingAddress=a4BiosEndingAddress, a19ResourceUserId=a19ResourceUserId, a140EventSubsystem=a140EventSubsystem, tParallelPorts=tParallelPorts, a34OperationalGroupIndex=a34OperationalGroupIndex, tMouse=tMouse, a83VideoMemoryType=a83VideoMemoryType, a140EventSeverity=a140EventSeverity, a113AssociatedGroup=a113AssociatedGroup, a36DeviceLocator=a36DeviceLocator, a30Manufacturer=a30Manufacturer, a55MonitoredTemperatureNormalMaximum=a55MonitoredTemperatureNormalMaximum, a116AssociatedGroup=a116AssociatedGroup, a64ContainerSecurityStatus=a64ContainerSecurityStatus, a108AssociatedGroup=a108AssociatedGroup, a1004TimedResetIncrement=a1004TimedResetIncrement, a1004TimedResetResolution=a1004TimedResetResolution, tKeyboard=tKeyboard, tSystemControl=tSystemControl, trap4ForVoltageProbe=trap4ForVoltageProbe, a1006RecordType=a1006RecordType, a6Level3CacheIndex=a6Level3CacheIndex, a84VideoBiosIndex=a84VideoBiosIndex, a67PowerUnitRedundancyStatus=a67PowerUnitRedundancyStatus, a55TemperatureLowerThreshold_Critical=a55TemperatureLowerThreshold_Critical, a104IsInstanceDataPresent=a104IsInstanceDataPresent, eEventGenerationForPhysicalContainer=eEventGenerationForPhysicalContainer, trap7ForVoltageProbe=trap7ForVoltageProbe, ePhysicalExpansionSitesTable=ePhysicalExpansionSitesTable, eEventGenerationForProcessor=eEventGenerationForProcessor, a116IsInstanceDataPresent=a116IsInstanceDataPresent, a55TemperatureProbeDescription=a55TemperatureProbeDescription, a1006Selfid=a1006Selfid, a1006RecordData=a1006RecordData, a84VideoBiosManufacturer=a84VideoBiosManufacturer, a5BiosNumber=a5BiosNumber, a91MousePortName=a91MousePortName, a66OperatingSystemBootPartitionIndex=a66OperatingSystemBootPartitionIndex, a75MaximumSpeed=a75MaximumSpeed, a1005Non_recoverableThreshold=a1005Non_recoverableThreshold, a17PowerSupplyType=a17PowerSupplyType, a1005MinimumReading=a1005MinimumReading, a34MemoryArrayTableIndex=a34MemoryArrayTableIndex, tPhysicalMemoryArray=tPhysicalMemoryArray, tSystemEventLog=tSystemEventLog, eEventGenerationForCoolingSensors=eEventGenerationForCoolingSensors, a35PartitionWidth=a35PartitionWidth, a36ErrorResolution=a36ErrorResolution, a64OperationalGroupIndex=a64OperationalGroupIndex, a81FruGroupIndex=a81FruGroupIndex, tVideoBios=tVideoBios, a35MemoryArrayMappedAddressesTableIndex=a35MemoryArrayMappedAddressesTableIndex, a64ContainerIndex=a64ContainerIndex, a6FruGroupIndex=a6FruGroupIndex, a75SerialPortSecuritySettings=a75SerialPortSecuritySettings, trap4ForPowerUnit=trap4ForPowerUnit, a1005Non_criticalThreshold=a1005Non_criticalThreshold, a31CurrentErrorStatus=a31CurrentErrorStatus, eVoltageProbe=eVoltageProbe, a55MonitoredTemperatureNormalMinimum=a55MonitoredTemperatureNormalMinimum, tSystemBiosCharacteristics=tSystemBiosCharacteristics, a6OperationalGroupIndex=a6OperationalGroupIndex, tFieldReplaceableUnit=tFieldReplaceableUnit, a1004SystemPowerStatus=a1004SystemPowerStatus, a201EventStateKey=a201EventStateKey, a116EventStateKey=a116EventStateKey, a202IsEventState_based=a202IsEventState_based, trap4ForTemperatureProbe=trap4ForTemperatureProbe, tEventGenerationForCoolingSensors=tEventGenerationForCoolingSensors, a17Range2InputVoltageLow=a17Range2InputVoltageLow, a91SecuritySettings=a91SecuritySettings, a52TimedPower_onAvailable=a52TimedPower_onAvailable, tProcessor=tProcessor, a2SystemPrimaryUserPhone=a2SystemPrimaryUserPhone, a113EventSeverity=a113EventSeverity)
mibBuilder.exportSymbols("INTELCORPORATIONBASEBOARD2-MIB", a7NumberOfExpansionSlots=a7NumberOfExpansionSlots, eEventGenerationForPhysicalMemory=eEventGenerationForPhysicalMemory, a202EventStateKey=a202EventStateKey, a36FruGroupIndex=a36FruGroupIndex, trap2ForTemperatureProbe=trap2ForTemperatureProbe, a36TotalWidth=a36TotalWidth, a54VoltageProbeLocation=a54VoltageProbeLocation, a114EventMessage=a114EventMessage, a1SerialNumber=a1SerialNumber, a83MaximumRefreshRate=a83MaximumRefreshRate, a201EventMessage=a201EventMessage, a92SecuritySettings=a92SecuritySettings, a55TemperatureLowerThreshold_Non_critica=a55TemperatureLowerThreshold_Non_critica, a201EventSubsystem=a201EventSubsystem, server_products=server_products, tEventGenerationForPowerUnit=tEventGenerationForPowerUnit, a36ErrorData=a36ErrorData, tVoltageProbe=tVoltageProbe, a36BankLocator=a36BankLocator, trap1ForProcessor=trap1ForProcessor, a37PartitionRowPosition=a37PartitionRowPosition, a1004ShutdownOsAndHardwareReset=a1004ShutdownOsAndHardwareReset, a36DeviceErrorAddress=a36DeviceErrorAddress, tCoolingSensors=tCoolingSensors, a54VoltageProbeResolution=a54VoltageProbeResolution, a10SystemCacheType=a10SystemCacheType, a116EventType=a116EventType, a55TemperatureProbeLocation=a55TemperatureProbeLocation, ePowerUnitGlobalTable=ePowerUnitGlobalTable, a1Manufacturer=a1Manufacturer, a201EventSystem=a201EventSystem, a50FrontPanelResetStatus=a50FrontPanelResetStatus, a74IrqUsed=a74IrqUsed, a1004WatchdogTimerResolution=a1004WatchdogTimerResolution, a36DataWidth=a36DataWidth, a201IsInstanceDataPresent=a201IsInstanceDataPresent, basebrd2=basebrd2, a104EventSystem=a104EventSystem, a1004UseSystemWatchdogFeature=a1004UseSystemWatchdogFeature, a36TypeDetail=a36TypeDetail, a75LogicalName=a75LogicalName, trap2ForVoltageProbe=trap2ForVoltageProbe, a36MemoryDeviceTableIndex=a36MemoryDeviceTableIndex, a37MappedRangeEndingAddress=a37MappedRangeEndingAddress, a114EventSeverity=a114EventSeverity, a1004EventLoggingCapability=a1004EventLoggingCapability, a54VoltageLevelUpperThreshold_Critical=a54VoltageLevelUpperThreshold_Critical, a1005FanUnits=a1005FanUnits, a50AdministratorPasswordStatus=a50AdministratorPasswordStatus, a128BusType=a128BusType, a34ArrayErrorType=a34ArrayErrorType, eVideoBios=eVideoBios, eSystemBiosCharacteristics=eSystemBiosCharacteristics, a1005CfmRating=a1005CfmRating, DmiInteger=DmiInteger, products=products, a81OperationalGroupIndex=a81OperationalGroupIndex, a1005FruGroupIndex=a1005FruGroupIndex, a31DeviceGroupIndex=a31DeviceGroupIndex, a129ExpansionSiteName=a129ExpansionSiteName, eSystemHardwareSecurity=eSystemHardwareSecurity, a35MappedRangeEndingAddress=a35MappedRangeEndingAddress, a19VirtualSlot=a19VirtualSlot, a35PartitionId=a35PartitionId, a64PowerState=a64PowerState, a84VideoBiosVersion=a84VideoBiosVersion, a36Size=a36Size, a34ErrorDataSize=a34ErrorDataSize, a64ContainerOrChassisType=a64ContainerOrChassisType, a104AssociatedGroup=a104AssociatedGroup, tBusGlobalTable=tBusGlobalTable, a31FatalErrorCount=a31FatalErrorCount, eSystemBios=eSystemBios, a34MemoryArrayLocation=a34MemoryArrayLocation, a17FruGroupIndex=a17FruGroupIndex, a4PrimaryBios=a4PrimaryBios, a19CurrentUsage=a19CurrentUsage, a74ParallelPortIndex=a74ParallelPortIndex, a1001DisableTrap=a1001DisableTrap, tMiftomib=tMiftomib, a74LogicalName=a74LogicalName, a4BiosManufacturer=a4BiosManufacturer, a1001MibName=a1001MibName, eEventGenerationForCoolingDevice=eEventGenerationForCoolingDevice, a83VideoRamMemorySize=a83VideoRamMemorySize, a36DeviceSet=a36DeviceSet, a201IsEventState_based=a201IsEventState_based, a201AssociatedGroup=a201AssociatedGroup, eSystemPowerControls=eSystemPowerControls, trap5ForPowerUnit=trap5ForPowerUnit, a83VideoIndex=a83VideoIndex, a54VoltageProbeIndex=a54VoltageProbeIndex, eBusGlobalTable=eBusGlobalTable, eCoolingDevice=eCoolingDevice, a54VoltageProbeMaximum=a54VoltageProbeMaximum, a64ContainerLocation=a64ContainerLocation, a55TemperatureProbeMinimum=a55TemperatureProbeMinimum, tPowerUnitGlobalTable=tPowerUnitGlobalTable, a83CurrentVideoMode=a83CurrentVideoMode, a2SystemLocation=a2SystemLocation, a91MouseInterface=a91MouseInterface, DmiInteger64X=DmiInteger64X, a1Product=a1Product, a100EventSystem=a100EventSystem, trap2ForPhysicalContainer=trap2ForPhysicalContainer, a10SystemCacheSize=a10SystemCacheSize, a54VoltageProbeAccuracy=a54VoltageProbeAccuracy, a66OperatingSystemBootDeviceStorageType=a66OperatingSystemBootDeviceStorageType, a108EventType=a108EventType, a1004ResetSystem=a1004ResetSystem, tEventGenerationForPhysicalContainer=tEventGenerationForPhysicalContainer, a202EventMessage=a202EventMessage, tMemoryDevice=tMemoryDevice, a31AvailabilityStatus=a31AvailabilityStatus, trap3ForVoltageProbe=trap3ForVoltageProbe, a54VoltageProbeTolerance=a54VoltageProbeTolerance, a19SlotDescription=a19SlotDescription, a31AdministrativeState=a31AdministrativeState, DmiDateX=DmiDateX, a36FormFactor=a36FormFactor, a7FruGroupIndex=a7FruGroupIndex, a74OperationalGroupIndex=a74OperationalGroupIndex, a75SerialBaseIoAddress=a75SerialBaseIoAddress, trap6ForVoltageProbe=trap6ForVoltageProbe, trap1ForCoolingSensors=trap1ForCoolingSensors, a140EventStateKey=a140EventStateKey, trap1ForTemperatureProbe=trap1ForTemperatureProbe, a17Range2CurrentProbeIndex=a17Range2CurrentProbeIndex, a17Range1InputVoltageHigh=a17Range1InputVoltageHigh, a74ParallelPortCapabilities=a74ParallelPortCapabilities, a81TemperatureProbeIndex=a81TemperatureProbeIndex, DmiOctetstring=DmiOctetstring, a5BiosCharacteristicIndex=a5BiosCharacteristicIndex, a91FruGroupIndex=a91FruGroupIndex, a104EventSeverity=a104EventSeverity, a1Verify=a1Verify, a34MaximumMemoryCapacity=a34MaximumMemoryCapacity, a6ProcessorUpgrade=a6ProcessorUpgrade, a74ConnectorType=a74ConnectorType, tEventGenerationForProcessor=tEventGenerationForProcessor, eOperationalState=eOperationalState, a100IsEventState_based=a100IsEventState_based, tEventGenerationForTemperatureProbe=tEventGenerationForTemperatureProbe, tPowerSupply=tPowerSupply, a36OperationalGroupIndex=a36OperationalGroupIndex, a2SystemDateTime=a2SystemDateTime, tSystemPowerControls=tSystemPowerControls, a202IsInstanceDataPresent=a202IsInstanceDataPresent, a55FruGroupIndex=a55FruGroupIndex, a52TimeToNextScheduledPower_on=a52TimeToNextScheduledPower_on, a1004Selfid=a1004Selfid, a54VoltageStatus=a54VoltageStatus, a83CurrentNumberOfColumns=a83CurrentNumberOfColumns, a2SystemPrimaryUserName=a2SystemPrimaryUserName, a55TemperatureUpperThreshold_Non_recover=a55TemperatureUpperThreshold_Non_recover, tEventGenerationForPowerSupply=tEventGenerationForPowerSupply, tEventGenerationForPhysicalMemory=tEventGenerationForPhysicalMemory, a30RevisionLevel=a30RevisionLevel, a30FruIndex=a30FruIndex, a55TemperatureProbeResolution=a55TemperatureProbeResolution, tSystemHardwareSecurity=tSystemHardwareSecurity, eCoolingSensors=eCoolingSensors, a4BiosVersion=a4BiosVersion, a81CoolingDeviceType=a81CoolingDeviceType, a35MemoryArrayIndex=a35MemoryArrayIndex, a66PrimaryOperatingSystem=a66PrimaryOperatingSystem, trap2ForPhysicalMemory=trap2ForPhysicalMemory, a74DmaSupport=a74DmaSupport, tPhysicalExpansionSitesTable=tPhysicalExpansionSitesTable, tOperationalState=tOperationalState, a91MouseIrq=a91MouseIrq, eVideo=eVideo, tEventGenerationForVoltageProbe=tEventGenerationForVoltageProbe, a19SlotIndex=a19SlotIndex, a84VideoBiosReleaseDate=a84VideoBiosReleaseDate, a17Range2InputVoltageHigh=a17Range2InputVoltageHigh, a17ActiveInputVoltageRange=a17ActiveInputVoltageRange, a91MouseDriverName=a91MouseDriverName, a34ErrorData=a34ErrorData, a104EventStateKey=a104EventStateKey, ePowerSupply=ePowerSupply, a34NumberOfMemoryDeviceSockets=a34NumberOfMemoryDeviceSockets, a36ErrorDataSize=a36ErrorDataSize, eSystemCache=eSystemCache, a6ProcessorType=a6ProcessorType, a34ErrorResolution=a34ErrorResolution, a1004RestoreFactoryDefaults=a1004RestoreFactoryDefaults, a92KeyboardConnectorType=a92KeyboardConnectorType, tSystemSlots=tSystemSlots, a92KeyboardLayout=a92KeyboardLayout, a55TemperatureUpperThreshold_Critical=a55TemperatureUpperThreshold_Critical, trap5ForTemperatureProbe=trap5ForTemperatureProbe, a30WarrantyStartDate=a30WarrantyStartDate, a1005OperationalGroupIndex=a1005OperationalGroupIndex, a64ThermalState=a64ThermalState, a1004WatchdogTimerIncrement=a1004WatchdogTimerIncrement, a100EventMessage=a100EventMessage, a64AssetTag=a64AssetTag, a202EventSeverity=a202EventSeverity, a31MajorErrorCount=a31MajorErrorCount, a202EventType=a202EventType, platforms=platforms, a116EventSeverity=a116EventSeverity, a1004SystemPowerCapabilities=a1004SystemPowerCapabilities, a113EventType=a113EventType, trap2ForPowerSupply=trap2ForPowerSupply, a1001MibOid=a1001MibOid, a91OperationalGroupIndex=a91OperationalGroupIndex, a1004SavePersistentData=a1004SavePersistentData, a19SlotType=a19SlotType, a202AssociatedGroup=a202AssociatedGroup, a30WarrantyDuration=a30WarrantyDuration, a66OperatingSystemIndex=a66OperatingSystemIndex, a17TotalOutputPower=a17TotalOutputPower, a114IsInstanceDataPresent=a114IsInstanceDataPresent, a30SupportPhoneNumber=a30SupportPhoneNumber, a83MinimumRefreshRate=a83MinimumRefreshRate, a83OperationalGroupIndex=a83OperationalGroupIndex, a114EventSubsystem=a114EventSubsystem, a6MaximumSpeed=a6MaximumSpeed, a64ChassisLockPresent=a64ChassisLockPresent, a201EventSeverity=a201EventSeverity, a1004ShutdownOs=a1004ShutdownOs, tOperatingSystem=tOperatingSystem, a83ScanMode=a83ScanMode, a113EventStateKey=a113EventStateKey, trap1ForPhysicalContainer=trap1ForPhysicalContainer, a1005SensorTolerancePlus=a1005SensorTolerancePlus, eMouse=eMouse, trap2ForPowerUnit=trap2ForPowerUnit, a1006Timestamp=a1006Timestamp, a114AssociatedGroup=a114AssociatedGroup, trap3ForPowerUnit=trap3ForPowerUnit, a1004ResetSystemAfterDelay=a1004ResetSystemAfterDelay, a64ContainerName=a64ContainerName, a55TemperatureLowerThreshold_Non_recover=a55TemperatureLowerThreshold_Non_recover, a108EventSystem=a108EventSystem, a114EventSystem=a114EventSystem, tGeneralInformation=tGeneralInformation, ePhysicalContainerGlobalTable=ePhysicalContainerGlobalTable, a17Range1InputFrequencyHigh=a17Range1InputFrequencyHigh, a2SystemBootupTime=a2SystemBootupTime, a1004WatchdogUpdateInterval=a1004WatchdogUpdateInterval, tTemperatureProbe=tTemperatureProbe, a10SystemCacheErrorCorrection=a10SystemCacheErrorCorrection, a37InterleavePosition=a37InterleavePosition, a108EventSeverity=a108EventSeverity, eSystemSlots=eSystemSlots, a55TemperatureProbeTolerance=a55TemperatureProbeTolerance, a104EventSubsystem=a104EventSubsystem, eEventGenerationForVoltageProbe=eEventGenerationForVoltageProbe, a54MonitoredVoltageNormalMaximum=a54MonitoredVoltageNormalMaximum, a100EventType=a100EventType, a100AssociatedGroup=a100AssociatedGroup)
mibBuilder.exportSymbols("INTELCORPORATIONBASEBOARD2-MIB", trap6ForTemperatureProbe=trap6ForTemperatureProbe, eSerialPorts=eSerialPorts, tCoolingDevice=tCoolingDevice, a108IsInstanceDataPresent=a108IsInstanceDataPresent, a64BootupState=a64BootupState, dmtfGroups=dmtfGroups, a10FruGroupIndex=a10FruGroupIndex, trap3ForPowerSupply=trap3ForPowerSupply, a6ProcessorFamily=a6ProcessorFamily, a17Range1VoltageProbeIndex=a17Range1VoltageProbeIndex, a4BiosLoaderVersion=a4BiosLoaderVersion, tSerialPorts=tSerialPorts, a83CurrentVerticalResolution=a83CurrentVerticalResolution, a34LastErrorUpdate=a34LastErrorUpdate, a30DeviceGroupIndex=a30DeviceGroupIndex, a128BusId=a128BusId, a129VirtualExpansionSite=a129VirtualExpansionSite, a114EventType=a114EventType, a50Power_onPasswordStatus=a50Power_onPasswordStatus, a83VideoPhysicalLocation=a83VideoPhysicalLocation, trap1ForPowerUnit=trap1ForPowerUnit, a140EventSystem=a140EventSystem, a55TemperatureProbeAccuracy=a55TemperatureProbeAccuracy, a202EventSystem=a202EventSystem, a17Range2VoltageProbeIndex=a17Range2VoltageProbeIndex, a116EventMessage=a116EventMessage, a10SystemCacheWritePolicy=a10SystemCacheWritePolicy, a6CurrentSpeed=a6CurrentSpeed, a54VoltageLevelUpperThreshold_Non_critic=a54VoltageLevelUpperThreshold_Non_critic, a1004IssueAHardwareNmi=a1004IssueAHardwareNmi, a19SlotCategory=a19SlotCategory, a140IsEventState_based=a140IsEventState_based, a54VoltageLevelLowerThreshold_Non_recove=a54VoltageLevelLowerThreshold_Non_recove, tMemoryArrayMappedAddresses=tMemoryArrayMappedAddresses, a1005LowestNormalReading=a1005LowestNormalReading, a17InputVoltageRangeSwitching=a17InputVoltageRangeSwitching, a104EventMessage=a104EventMessage, eMemoryDevice=eMemoryDevice, a108EventStateKey=a108EventStateKey, eMotherboard=eMotherboard, a54FruGroupIndex=a54FruGroupIndex, tComponentid=tComponentid, a10SystemCacheLevel=a10SystemCacheLevel, trap1ForPowerSupply=trap1ForPowerSupply, a34FruGroupIndex=a34FruGroupIndex)
