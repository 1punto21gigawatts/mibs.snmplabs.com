#
# PySNMP MIB module REDLINE-AN50-PMP-V2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/REDLINE-AN50-PMP-V2-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:55:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
redlineMgmt, = mibBuilder.importSymbols("REDLINE-MIB", "redlineMgmt")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter32, NotificationType, MibIdentifier, Gauge32, IpAddress, Integer32, iso, Counter64, TimeTicks, Bits, ObjectIdentity, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "NotificationType", "MibIdentifier", "Gauge32", "IpAddress", "Integer32", "iso", "Counter64", "TimeTicks", "Bits", "ObjectIdentity", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
redlineAN50PMPV2 = ModuleIdentity((1, 3, 6, 1, 4, 1, 10728, 2, 51))
if mibBuilder.loadTexts: redlineAN50PMPV2.setLastUpdated('200503160000Z')
if mibBuilder.loadTexts: redlineAN50PMPV2.setOrganization('Redline Communications, Inc.')
if mibBuilder.loadTexts: redlineAN50PMPV2.setContactInfo('Primary Authors: Ari Mark Sodhi Octavian Banica postal: Redline Communications Inc. 302 Town Centre Blvd. Markham, ON Canada L3R 0E8 phone: +1 905 479-8344 email: asodhi@redlinecommunications.com')
if mibBuilder.loadTexts: redlineAN50PMPV2.setDescription('This MIB contains Redline-defined attributes for AN-50 PMP switched device based on V2 processor. The device can connect multiple subscriber stations to a central base station.')
an50pmpLinkTable = MibTable((1, 3, 6, 1, 4, 1, 10728, 2, 51, 1), )
if mibBuilder.loadTexts: an50pmpLinkTable.setStatus('current')
if mibBuilder.loadTexts: an50pmpLinkTable.setDescription('Table with Wireless links and connections information configured into AN50 PMP device based on V1 processor.')
an50pmpLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10728, 2, 51, 1, 1), ).setIndexNames((0, "REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkID"))
if mibBuilder.loadTexts: an50pmpLinkEntry.setStatus('current')
if mibBuilder.loadTexts: an50pmpLinkEntry.setDescription('A unique set of link parameters.')
an50pmpLinkID = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536)))
if mibBuilder.loadTexts: an50pmpLinkID.setStatus('current')
if mibBuilder.loadTexts: an50pmpLinkID.setDescription('Link ID, a unique number between 1 and 65536 that identifies a particular link.')
an50pmpLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpLinkName.setStatus('current')
if mibBuilder.loadTexts: an50pmpLinkName.setDescription('The name of the Link/Connection')
an50pmpLinkGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpLinkGroupId.setStatus('obsolete')
if mibBuilder.loadTexts: an50pmpLinkGroupId.setDescription('Group assigned to this link.')
an50pmpLinkPeerMac = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpLinkPeerMac.setStatus('current')
if mibBuilder.loadTexts: an50pmpLinkPeerMac.setDescription('Link Destination MAC address.')
an50pmpLinkMaxDLBurstRate = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpLinkMaxDLBurstRate.setStatus('current')
if mibBuilder.loadTexts: an50pmpLinkMaxDLBurstRate.setDescription('Maximum downlink rate for this link. Rate range: 6Mb/s=1, 9Mb/s=2, 12Mb/s=3, 18Mb/s=4, 24Mb/s=5, 36Mb/s=6, 48Mb/s=7, 54Mbs=8.')
an50pmpLinkMaxULBurstRate = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpLinkMaxULBurstRate.setStatus('current')
if mibBuilder.loadTexts: an50pmpLinkMaxULBurstRate.setDescription('Maximum uplink rate for this link. Rate range: 6Mb/s=1, 9Mb/s=2, 12Mb/s=3, 18Mb/s=4, 24Mb/s=5, 36Mb/s=6, 48Mb/s=7, 54Mbs=8.')
an50pmpLinkMaxHost = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpLinkMaxHost.setStatus('obsolete')
if mibBuilder.loadTexts: an50pmpLinkMaxHost.setDescription('Group this Link belongs to.')
an50pmpLinkCIDDLCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpLinkCIDDLCIR.setStatus('obsolete')
if mibBuilder.loadTexts: an50pmpLinkCIDDLCIR.setDescription('The downlink commited rate for this connection in kb/s.')
an50pmpLinkCIDDLPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpLinkCIDDLPIR.setStatus('obsolete')
if mibBuilder.loadTexts: an50pmpLinkCIDDLPIR.setDescription('The downlink peak rate for this connection in kb/s.')
an50pmpLinkCIDULCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpLinkCIDULCIR.setStatus('obsolete')
if mibBuilder.loadTexts: an50pmpLinkCIDULCIR.setDescription('The uplink commited rate for this connection in kb/s.')
an50pmpLinkCIDULPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpLinkCIDULPIR.setStatus('obsolete')
if mibBuilder.loadTexts: an50pmpLinkCIDULPIR.setDescription('The uplink peak rate for this connection in kb/s.')
an50pmpLinkDLQoS = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpLinkDLQoS.setStatus('obsolete')
if mibBuilder.loadTexts: an50pmpLinkDLQoS.setDescription('The downlink QoS level.')
an50pmpLinkULQoS = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpLinkULQoS.setStatus('obsolete')
if mibBuilder.loadTexts: an50pmpLinkULQoS.setDescription('The uplink QoS level.')
an50pmpLinkEncryptionKey = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpLinkEncryptionKey.setStatus('current')
if mibBuilder.loadTexts: an50pmpLinkEncryptionKey.setDescription('The encryption key')
an50pmpLinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 1, 1, 14), RowStatus().clone('createAndWait')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpLinkRowStatus.setStatus('current')
if mibBuilder.loadTexts: an50pmpLinkRowStatus.setDescription('Status of the row')
an50pmpLinkStatusTable = MibTable((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2), )
if mibBuilder.loadTexts: an50pmpLinkStatusTable.setStatus('current')
if mibBuilder.loadTexts: an50pmpLinkStatusTable.setDescription('Statistics per uplink connections.')
an50pmpLinkStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1), ).setIndexNames((0, "REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkStatusID"))
if mibBuilder.loadTexts: an50pmpLinkStatusEntry.setStatus('current')
if mibBuilder.loadTexts: an50pmpLinkStatusEntry.setDescription('Statistics for a link connection.')
an50pmpLinkStatusID = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: an50pmpLinkStatusID.setStatus('current')
if mibBuilder.loadTexts: an50pmpLinkStatusID.setDescription('Index for an50pmpLinkStatusTable table')
an50pmpLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkStatus.setStatus('current')
if mibBuilder.loadTexts: an50pmpLinkStatus.setDescription('Status of the Link.')
an50pmpLinkStatusCode = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkStatusCode.setStatus('current')
if mibBuilder.loadTexts: an50pmpLinkStatusCode.setDescription('Alarm bits shown as a hex number.')
an50pmpLinkRegConn = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkRegConn.setStatus('current')
if mibBuilder.loadTexts: an50pmpLinkRegConn.setDescription('Number of connections configured for this link.')
an50pmpLinkDLBurstRate = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("tx6Mbs", 1), ("tx9Mbs", 2), ("tx12Mbs", 3), ("tx18Mbs", 4), ("tx24Mbs", 5), ("tx36Mbs", 6), ("tx48Mbs", 7), ("tx54Mbs", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkDLBurstRate.setStatus('current')
if mibBuilder.loadTexts: an50pmpLinkDLBurstRate.setDescription('Current master Tx burst rate. Rate range: 6Mb/s=1, 9Mb/s=2, 12Mb/s=3, 18Mb/s=4, 24Mb/s=5, 36Mb/s=6, 48Mb/s=7, 54Mbs=8.')
an50pmpLinkDLRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkDLRSSI.setStatus('current')
if mibBuilder.loadTexts: an50pmpLinkDLRSSI.setDescription('RSSI (Received Signal Strength Indicator) at slave.')
an50pmpLinkDLSINADR = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkDLSINADR.setStatus('current')
if mibBuilder.loadTexts: an50pmpLinkDLSINADR.setDescription('SINADR (Signal Interference and Noise Distorsion Ratio) at slave.')
an50pmpLinkDLStatLostFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkDLStatLostFrm.setStatus('current')
if mibBuilder.loadTexts: an50pmpLinkDLStatLostFrm.setDescription('SINADR at slave.')
an50pmpLinkDLStatBlksTot = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkDLStatBlksTot.setStatus('current')
if mibBuilder.loadTexts: an50pmpLinkDLStatBlksTot.setDescription('Blocks transmitted from master to slave.')
an50pmpLinkDLStatBlksRetr = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkDLStatBlksRetr.setStatus('current')
if mibBuilder.loadTexts: an50pmpLinkDLStatBlksRetr.setDescription('Block re-transmitted from master to slave.')
an50pmpLinkDLStatBlksDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkDLStatBlksDisc.setStatus('current')
if mibBuilder.loadTexts: an50pmpLinkDLStatBlksDisc.setDescription('Blocks lost from master to slave')
an50pmpLinkDLCIDStatPktDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkDLCIDStatPktDisc.setStatus('current')
if mibBuilder.loadTexts: an50pmpLinkDLCIDStatPktDisc.setDescription('Packets discarded by master due to buffer full.')
an50pmpLinkDLCIDStatPktTran = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkDLCIDStatPktTran.setStatus('current')
if mibBuilder.loadTexts: an50pmpLinkDLCIDStatPktTran.setDescription('Packets transmitted from master to slave.')
an50pmpLinkDLCIDStatPktRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkDLCIDStatPktRecv.setStatus('current')
if mibBuilder.loadTexts: an50pmpLinkDLCIDStatPktRecv.setDescription('Packets received by slave')
an50pmpLinkULBurstRate = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("tx6Mbs", 1), ("tx9Mbs", 2), ("tx12Mbs", 3), ("tx18Mbs", 4), ("tx24Mbs", 5), ("tx36Mbs", 6), ("tx48Mbs", 7), ("tx54Mbs", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkULBurstRate.setStatus('current')
if mibBuilder.loadTexts: an50pmpLinkULBurstRate.setDescription('Current Slave Tx Burst Rate. Rate range: 6Mb/s=1, 9Mb/s=2, 12Mb/s=3, 18Mb/s=4, 24Mb/s=5, 36Mb/s=6, 48Mb/s=7, 54Mbs=8.')
an50pmpLinkULRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkULRSSI.setStatus('current')
if mibBuilder.loadTexts: an50pmpLinkULRSSI.setDescription('RSSI at master.')
an50pmpLinkULSINADR = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkULSINADR.setStatus('current')
if mibBuilder.loadTexts: an50pmpLinkULSINADR.setDescription('SINADR at master.')
an50pmpLinkULStatLostFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkULStatLostFrm.setStatus('current')
if mibBuilder.loadTexts: an50pmpLinkULStatLostFrm.setDescription('Frames lost from slave to master')
an50pmpLinkULStatBlksTot = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkULStatBlksTot.setStatus('current')
if mibBuilder.loadTexts: an50pmpLinkULStatBlksTot.setDescription('Blocks transmitted slave to master.')
an50pmpLinkULStatBlksRetr = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkULStatBlksRetr.setStatus('current')
if mibBuilder.loadTexts: an50pmpLinkULStatBlksRetr.setDescription('Block re-transmitted slave to master.')
an50pmpLinkULStatBlksDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkULStatBlksDisc.setStatus('current')
if mibBuilder.loadTexts: an50pmpLinkULStatBlksDisc.setDescription('Blocks lost from slave to master.')
an50pmpLinkULCIDStatPktDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkULCIDStatPktDisc.setStatus('current')
if mibBuilder.loadTexts: an50pmpLinkULCIDStatPktDisc.setDescription('Packets discarded by slave due to buffer full.')
an50pmpLinkULCIDStatPktTran = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkULCIDStatPktTran.setStatus('current')
if mibBuilder.loadTexts: an50pmpLinkULCIDStatPktTran.setDescription('Packets transmitted from slave to master.')
an50pmpLinkULCIDStatPktRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkULCIDStatPktRecv.setStatus('current')
if mibBuilder.loadTexts: an50pmpLinkULCIDStatPktRecv.setDescription('Packets received by master from slave.')
an50pmpLinkUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 25), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkUpTime.setStatus('current')
if mibBuilder.loadTexts: an50pmpLinkUpTime.setDescription('Time since the link is UP (in hundreths of a second).')
an50pmpLinkLostCount = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkLostCount.setStatus('current')
if mibBuilder.loadTexts: an50pmpLinkLostCount.setDescription('Number of times the link has been lost.')
an50pmpCIDSaveConfig = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 51, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("doNothing", 1), ("saveConfig", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpCIDSaveConfig.setStatus('current')
if mibBuilder.loadTexts: an50pmpCIDSaveConfig.setDescription('The attribute saves the entire config set of the AN50 PMP.')
an50pmpLastModifiedCID = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 51, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLastModifiedCID.setStatus('current')
if mibBuilder.loadTexts: an50pmpLastModifiedCID.setDescription('The attribute represents the last modified CID.')
an50pmpLastMissedSsMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 51, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLastMissedSsMacAddress.setStatus('current')
if mibBuilder.loadTexts: an50pmpLastMissedSsMacAddress.setDescription('MAC address of the SS that missed the registration with the BS.')
an50pmpLastRegisteredSsMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 51, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLastRegisteredSsMacAddress.setStatus('current')
if mibBuilder.loadTexts: an50pmpLastRegisteredSsMacAddress.setDescription('MAC address of the last SS that successfuly registered with the BS.')
an50pmpLastSuccessfulID = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 51, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLastSuccessfulID.setStatus('current')
if mibBuilder.loadTexts: an50pmpLastSuccessfulID.setDescription('The ID of the Link registered in BS table that is sent through LastSuccessfulRegisteredSS Trap(number10).')
an50pmpLastDeniedSsMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 51, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpLastDeniedSsMacAddress.setStatus('current')
if mibBuilder.loadTexts: an50pmpLastDeniedSsMacAddress.setDescription('MAC address of the SS that will be denied by this BS.')
an50pmpGroupTable = MibTable((1, 3, 6, 1, 4, 1, 10728, 2, 51, 9), )
if mibBuilder.loadTexts: an50pmpGroupTable.setStatus('current')
if mibBuilder.loadTexts: an50pmpGroupTable.setDescription('')
an50pmpGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10728, 2, 51, 9, 1), ).setIndexNames((0, "REDLINE-AN50-PMP-V2-MIB", "an50pmpGroupId"))
if mibBuilder.loadTexts: an50pmpGroupEntry.setStatus('current')
if mibBuilder.loadTexts: an50pmpGroupEntry.setDescription('')
an50pmpGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536)))
if mibBuilder.loadTexts: an50pmpGroupId.setStatus('current')
if mibBuilder.loadTexts: an50pmpGroupId.setDescription('')
an50pmpGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 9, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpGroupName.setStatus('current')
if mibBuilder.loadTexts: an50pmpGroupName.setDescription('')
an50pmpGroupBSPortTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("passThrough", 1), ("tagged", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpGroupBSPortTagging.setStatus('current')
if mibBuilder.loadTexts: an50pmpGroupBSPortTagging.setDescription('')
an50pmpGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpGroupVlanId.setStatus('current')
if mibBuilder.loadTexts: an50pmpGroupVlanId.setDescription('')
an50pmpGroupDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpGroupDefaultPriority.setStatus('current')
if mibBuilder.loadTexts: an50pmpGroupDefaultPriority.setDescription('Has meaning only for PassThrough groups')
an50pmpGroupBSPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpGroupBSPortEnabled.setStatus('current')
if mibBuilder.loadTexts: an50pmpGroupBSPortEnabled.setDescription('')
an50pmpGroupQos = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpGroupQos.setStatus('current')
if mibBuilder.loadTexts: an50pmpGroupQos.setDescription('The QOS value for the group.')
an50pmpGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 9, 1, 8), RowStatus().clone('createAndWait')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: an50pmpGroupRowStatus.setDescription('')
an50pmpConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 10728, 2, 51, 10), )
if mibBuilder.loadTexts: an50pmpConnectionTable.setStatus('current')
if mibBuilder.loadTexts: an50pmpConnectionTable.setDescription('')
an50pmpConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10728, 2, 51, 10, 1), ).setIndexNames((0, "REDLINE-AN50-PMP-V2-MIB", "an50pmpConnectionId"))
if mibBuilder.loadTexts: an50pmpConnectionEntry.setStatus('current')
if mibBuilder.loadTexts: an50pmpConnectionEntry.setDescription('')
an50pmpConnectionId = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536)))
if mibBuilder.loadTexts: an50pmpConnectionId.setStatus('current')
if mibBuilder.loadTexts: an50pmpConnectionId.setDescription('Id for the connection as assigned by the system')
an50pmpConnectionName = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpConnectionName.setStatus('current')
if mibBuilder.loadTexts: an50pmpConnectionName.setDescription('The name of the connection')
an50pmpConnectionPortTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("passThrough", 1), ("tagged", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpConnectionPortTagging.setStatus('current')
if mibBuilder.loadTexts: an50pmpConnectionPortTagging.setDescription('Specified the way egress packets are treated.')
an50pmpConnectionVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpConnectionVlanId.setStatus('current')
if mibBuilder.loadTexts: an50pmpConnectionVlanId.setDescription('The VLAN Id associated with the group.')
an50pmpConnectionDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpConnectionDefaultPriority.setStatus('current')
if mibBuilder.loadTexts: an50pmpConnectionDefaultPriority.setDescription('The default priority in the case of PassThrough')
an50pmpConnectionParentLink = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpConnectionParentLink.setStatus('current')
if mibBuilder.loadTexts: an50pmpConnectionParentLink.setDescription('The parent link id')
an50pmpConnectionParentGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpConnectionParentGroup.setStatus('current')
if mibBuilder.loadTexts: an50pmpConnectionParentGroup.setDescription('The parent group id.')
an50pmpConnectionDLQoS = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpConnectionDLQoS.setStatus('current')
if mibBuilder.loadTexts: an50pmpConnectionDLQoS.setDescription('Downlink QoS parameter for this connection.')
an50pmpConnectionULQoS = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpConnectionULQoS.setStatus('current')
if mibBuilder.loadTexts: an50pmpConnectionULQoS.setDescription('The uplink QoS for this connection')
an50pmpConnectionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 10, 1, 10), RowStatus().clone('createAndWait')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpConnectionRowStatus.setStatus('current')
if mibBuilder.loadTexts: an50pmpConnectionRowStatus.setDescription('')
an50pmpGroupStatusTable = MibTable((1, 3, 6, 1, 4, 1, 10728, 2, 51, 11), )
if mibBuilder.loadTexts: an50pmpGroupStatusTable.setStatus('current')
if mibBuilder.loadTexts: an50pmpGroupStatusTable.setDescription('')
an50pmpGroupStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10728, 2, 51, 11, 1), ).setIndexNames((0, "REDLINE-AN50-PMP-V2-MIB", "an50pmpGroupStatusId"))
if mibBuilder.loadTexts: an50pmpGroupStatusEntry.setStatus('current')
if mibBuilder.loadTexts: an50pmpGroupStatusEntry.setDescription('')
an50pmpGroupStatusId = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536)))
if mibBuilder.loadTexts: an50pmpGroupStatusId.setStatus('current')
if mibBuilder.loadTexts: an50pmpGroupStatusId.setDescription('The an50pmpGroupId')
an50pmpGroupStatusDLPacketsDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpGroupStatusDLPacketsDiscards.setStatus('current')
if mibBuilder.loadTexts: an50pmpGroupStatusDLPacketsDiscards.setDescription('The packets discarded at master due to full buffer')
an50pmpGroupStatusDLPacketsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpGroupStatusDLPacketsTx.setStatus('current')
if mibBuilder.loadTexts: an50pmpGroupStatusDLPacketsTx.setDescription('Packets transmitted by master')
an50pmpGroupStatusDLPacketsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpGroupStatusDLPacketsRx.setStatus('current')
if mibBuilder.loadTexts: an50pmpGroupStatusDLPacketsRx.setDescription('Packets received by slave')
an50pmpGroupStatusULPacketsDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpGroupStatusULPacketsDiscards.setStatus('current')
if mibBuilder.loadTexts: an50pmpGroupStatusULPacketsDiscards.setDescription('The packets discarded at slave due to full buffer')
an50pmpGroupStatusULPacketsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpGroupStatusULPacketsTx.setStatus('current')
if mibBuilder.loadTexts: an50pmpGroupStatusULPacketsTx.setDescription('Packets transmitted by slave')
an50pmpGroupStatusULPacketsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpGroupStatusULPacketsRx.setStatus('current')
if mibBuilder.loadTexts: an50pmpGroupStatusULPacketsRx.setDescription('Packets received by master')
an50pmpConnectionStatusTable = MibTable((1, 3, 6, 1, 4, 1, 10728, 2, 51, 12), )
if mibBuilder.loadTexts: an50pmpConnectionStatusTable.setStatus('current')
if mibBuilder.loadTexts: an50pmpConnectionStatusTable.setDescription('')
an50pmpConnectionStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10728, 2, 51, 12, 1), ).setIndexNames((0, "REDLINE-AN50-PMP-V2-MIB", "an50pmpConnectionStatusId"))
if mibBuilder.loadTexts: an50pmpConnectionStatusEntry.setStatus('current')
if mibBuilder.loadTexts: an50pmpConnectionStatusEntry.setDescription('')
an50pmpConnectionStatusId = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536)))
if mibBuilder.loadTexts: an50pmpConnectionStatusId.setStatus('current')
if mibBuilder.loadTexts: an50pmpConnectionStatusId.setDescription('The an50pmpGroupId')
an50pmpConnectionStatusDLPacketsDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpConnectionStatusDLPacketsDiscards.setStatus('current')
if mibBuilder.loadTexts: an50pmpConnectionStatusDLPacketsDiscards.setDescription('The packets discarded at master due to full buffer')
an50pmpConnectionStatusDLPacketsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpConnectionStatusDLPacketsTx.setStatus('current')
if mibBuilder.loadTexts: an50pmpConnectionStatusDLPacketsTx.setDescription('Packets transmitted by master')
an50pmpConnectionStatusDLPacketsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpConnectionStatusDLPacketsRx.setStatus('current')
if mibBuilder.loadTexts: an50pmpConnectionStatusDLPacketsRx.setDescription('Packets received by slave')
an50pmpConnectionStatusULPacketsDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpConnectionStatusULPacketsDiscards.setStatus('current')
if mibBuilder.loadTexts: an50pmpConnectionStatusULPacketsDiscards.setDescription('The packets discarded at slave due to full buffer')
an50pmpConnectionStatusULPacketsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpConnectionStatusULPacketsTx.setStatus('current')
if mibBuilder.loadTexts: an50pmpConnectionStatusULPacketsTx.setDescription('Packets transmitted by slave')
an50pmpConnectionStatusULPacketsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 12, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpConnectionStatusULPacketsRx.setStatus('current')
if mibBuilder.loadTexts: an50pmpConnectionStatusULPacketsRx.setDescription('Packets received by master')
an50PMPObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10728, 2, 51, 13)).setObjects(("REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkName"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkPeerMac"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkMaxDLBurstRate"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkMaxULBurstRate"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkEncryptionKey"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkRowStatus"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkStatus"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkStatusCode"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkRegConn"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkDLBurstRate"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkDLRSSI"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkDLSINADR"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkDLStatLostFrm"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkDLStatBlksTot"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkDLStatBlksRetr"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkDLStatBlksDisc"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkDLCIDStatPktDisc"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkDLCIDStatPktTran"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkDLCIDStatPktRecv"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkULBurstRate"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkULRSSI"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkULSINADR"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkULStatLostFrm"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkULStatBlksTot"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkULStatBlksRetr"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkULStatBlksDisc"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkULCIDStatPktDisc"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkULCIDStatPktTran"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkULCIDStatPktRecv"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkUpTime"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkLostCount"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpCIDSaveConfig"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLastModifiedCID"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLastMissedSsMacAddress"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLastRegisteredSsMacAddress"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLastSuccessfulID"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLastDeniedSsMacAddress"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpGroupName"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpGroupBSPortTagging"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpGroupVlanId"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpGroupDefaultPriority"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpGroupBSPortEnabled"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpGroupQos"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpGroupRowStatus"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpConnectionName"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpConnectionPortTagging"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpConnectionVlanId"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpConnectionDefaultPriority"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpConnectionParentLink"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpConnectionParentGroup"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpConnectionDLQoS"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpConnectionULQoS"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpConnectionRowStatus"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpGroupStatusDLPacketsDiscards"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpGroupStatusDLPacketsTx"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpGroupStatusDLPacketsRx"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpGroupStatusULPacketsDiscards"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpGroupStatusULPacketsTx"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpGroupStatusULPacketsRx"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpConnectionStatusDLPacketsDiscards"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpConnectionStatusDLPacketsTx"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpConnectionStatusDLPacketsRx"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpConnectionStatusULPacketsDiscards"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpConnectionStatusULPacketsTx"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpConnectionStatusULPacketsRx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    an50PMPObjectGroup = an50PMPObjectGroup.setStatus('current')
if mibBuilder.loadTexts: an50PMPObjectGroup.setDescription('All the current members')
an50PMPObsoleteObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10728, 2, 51, 14)).setObjects(("REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkGroupId"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkMaxHost"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkCIDDLCIR"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkCIDDLPIR"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkCIDULCIR"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkCIDULPIR"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkDLQoS"), ("REDLINE-AN50-PMP-V2-MIB", "an50pmpLinkULQoS"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    an50PMPObsoleteObjectGroup = an50PMPObsoleteObjectGroup.setStatus('obsolete')
if mibBuilder.loadTexts: an50PMPObsoleteObjectGroup.setDescription('All the obsolete objects')
mibBuilder.exportSymbols("REDLINE-AN50-PMP-V2-MIB", an50pmpLinkGroupId=an50pmpLinkGroupId, an50pmpLinkDLCIDStatPktDisc=an50pmpLinkDLCIDStatPktDisc, an50pmpLinkDLStatBlksDisc=an50pmpLinkDLStatBlksDisc, an50pmpLastMissedSsMacAddress=an50pmpLastMissedSsMacAddress, an50pmpLinkStatusEntry=an50pmpLinkStatusEntry, an50pmpConnectionDLQoS=an50pmpConnectionDLQoS, an50pmpLinkStatusCode=an50pmpLinkStatusCode, an50pmpLastSuccessfulID=an50pmpLastSuccessfulID, an50PMPObjectGroup=an50PMPObjectGroup, an50pmpLinkCIDDLPIR=an50pmpLinkCIDDLPIR, an50pmpLinkULCIDStatPktTran=an50pmpLinkULCIDStatPktTran, an50pmpLinkStatus=an50pmpLinkStatus, an50pmpLinkStatusID=an50pmpLinkStatusID, an50pmpLinkLostCount=an50pmpLinkLostCount, an50pmpGroupTable=an50pmpGroupTable, an50pmpGroupName=an50pmpGroupName, an50pmpGroupStatusULPacketsDiscards=an50pmpGroupStatusULPacketsDiscards, an50pmpConnectionTable=an50pmpConnectionTable, an50pmpLastDeniedSsMacAddress=an50pmpLastDeniedSsMacAddress, an50pmpConnectionEntry=an50pmpConnectionEntry, an50pmpLinkTable=an50pmpLinkTable, an50pmpLinkDLQoS=an50pmpLinkDLQoS, an50pmpLinkCIDULCIR=an50pmpLinkCIDULCIR, an50pmpConnectionDefaultPriority=an50pmpConnectionDefaultPriority, an50pmpLastModifiedCID=an50pmpLastModifiedCID, an50pmpGroupStatusTable=an50pmpGroupStatusTable, an50pmpLinkCIDULPIR=an50pmpLinkCIDULPIR, an50pmpGroupStatusULPacketsRx=an50pmpGroupStatusULPacketsRx, an50pmpLinkMaxULBurstRate=an50pmpLinkMaxULBurstRate, an50pmpConnectionName=an50pmpConnectionName, an50pmpLinkDLStatBlksTot=an50pmpLinkDLStatBlksTot, an50pmpLinkRowStatus=an50pmpLinkRowStatus, an50pmpConnectionStatusULPacketsRx=an50pmpConnectionStatusULPacketsRx, an50pmpConnectionId=an50pmpConnectionId, an50pmpCIDSaveConfig=an50pmpCIDSaveConfig, redlineAN50PMPV2=redlineAN50PMPV2, an50pmpLinkDLStatLostFrm=an50pmpLinkDLStatLostFrm, an50pmpGroupEntry=an50pmpGroupEntry, an50pmpLinkULQoS=an50pmpLinkULQoS, an50pmpLinkStatusTable=an50pmpLinkStatusTable, an50pmpConnectionStatusTable=an50pmpConnectionStatusTable, an50pmpGroupStatusDLPacketsDiscards=an50pmpGroupStatusDLPacketsDiscards, an50pmpLinkID=an50pmpLinkID, an50pmpLinkDLCIDStatPktRecv=an50pmpLinkDLCIDStatPktRecv, an50pmpConnectionParentLink=an50pmpConnectionParentLink, an50pmpLinkMaxDLBurstRate=an50pmpLinkMaxDLBurstRate, an50pmpLinkULSINADR=an50pmpLinkULSINADR, an50pmpGroupBSPortEnabled=an50pmpGroupBSPortEnabled, an50pmpLinkULStatBlksRetr=an50pmpLinkULStatBlksRetr, an50pmpGroupDefaultPriority=an50pmpGroupDefaultPriority, an50pmpConnectionStatusEntry=an50pmpConnectionStatusEntry, an50pmpConnectionStatusULPacketsTx=an50pmpConnectionStatusULPacketsTx, an50pmpLinkDLStatBlksRetr=an50pmpLinkDLStatBlksRetr, an50pmpLinkUpTime=an50pmpLinkUpTime, an50pmpLinkULStatBlksTot=an50pmpLinkULStatBlksTot, an50pmpLinkULRSSI=an50pmpLinkULRSSI, an50pmpLinkCIDDLCIR=an50pmpLinkCIDDLCIR, an50pmpLinkULStatLostFrm=an50pmpLinkULStatLostFrm, an50pmpGroupRowStatus=an50pmpGroupRowStatus, an50PMPObsoleteObjectGroup=an50PMPObsoleteObjectGroup, an50pmpLinkULCIDStatPktDisc=an50pmpLinkULCIDStatPktDisc, an50pmpLinkRegConn=an50pmpLinkRegConn, an50pmpConnectionVlanId=an50pmpConnectionVlanId, an50pmpLinkEncryptionKey=an50pmpLinkEncryptionKey, an50pmpConnectionPortTagging=an50pmpConnectionPortTagging, an50pmpLinkName=an50pmpLinkName, an50pmpLinkULStatBlksDisc=an50pmpLinkULStatBlksDisc, an50pmpConnectionStatusULPacketsDiscards=an50pmpConnectionStatusULPacketsDiscards, an50pmpLinkMaxHost=an50pmpLinkMaxHost, an50pmpGroupStatusDLPacketsRx=an50pmpGroupStatusDLPacketsRx, an50pmpLinkEntry=an50pmpLinkEntry, an50pmpConnectionRowStatus=an50pmpConnectionRowStatus, an50pmpGroupStatusEntry=an50pmpGroupStatusEntry, an50pmpLinkDLCIDStatPktTran=an50pmpLinkDLCIDStatPktTran, an50pmpGroupStatusDLPacketsTx=an50pmpGroupStatusDLPacketsTx, an50pmpGroupVlanId=an50pmpGroupVlanId, an50pmpGroupQos=an50pmpGroupQos, an50pmpGroupStatusId=an50pmpGroupStatusId, an50pmpGroupBSPortTagging=an50pmpGroupBSPortTagging, an50pmpLinkDLBurstRate=an50pmpLinkDLBurstRate, an50pmpLinkDLSINADR=an50pmpLinkDLSINADR, an50pmpConnectionULQoS=an50pmpConnectionULQoS, an50pmpLinkDLRSSI=an50pmpLinkDLRSSI, an50pmpLastRegisteredSsMacAddress=an50pmpLastRegisteredSsMacAddress, an50pmpLinkULCIDStatPktRecv=an50pmpLinkULCIDStatPktRecv, an50pmpGroupStatusULPacketsTx=an50pmpGroupStatusULPacketsTx, an50pmpConnectionStatusDLPacketsTx=an50pmpConnectionStatusDLPacketsTx, an50pmpGroupId=an50pmpGroupId, an50pmpConnectionParentGroup=an50pmpConnectionParentGroup, an50pmpConnectionStatusDLPacketsDiscards=an50pmpConnectionStatusDLPacketsDiscards, an50pmpConnectionStatusDLPacketsRx=an50pmpConnectionStatusDLPacketsRx, an50pmpLinkPeerMac=an50pmpLinkPeerMac, an50pmpConnectionStatusId=an50pmpConnectionStatusId, PYSNMP_MODULE_ID=redlineAN50PMPV2, an50pmpLinkULBurstRate=an50pmpLinkULBurstRate)
