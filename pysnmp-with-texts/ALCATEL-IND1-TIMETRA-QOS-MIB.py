#
# PySNMP MIB module ALCATEL-IND1-TIMETRA-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-TIMETRA-QOS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:19:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
tmnxSRObjs, timetraSRMIBModules, tmnxSRNotifyPrefix, tmnxSRConfs = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-GLOBAL-MIB", "tmnxSRObjs", "timetraSRMIBModules", "tmnxSRNotifyPrefix", "tmnxSRConfs")
Dot1PPriority, TDSCPName, TFCNameOrEmpty, TQueueId, TmnxEnabledDisabled, TNamedItem, TCIRRate, TTcpUdpPortOperator, TPolicyID, TItemDescription, TDSCPNameOrEmpty, TPortSchedulerCIR, TLspExpValue, TDSCPValue, TSapEgressPolicyID, TPIRRate, TEgressQueueId, TSapIngressPolicyID, TFrameType, TIngressQueueId, TFCName, TPIRRateOrZero, TTcpUdpPort, IpAddressPrefixLength, TWeight, TPortSchedulerPIR, TIpProtocol, ServiceAccessPoint, TNamedItemOrEmpty = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-TC-MIB", "Dot1PPriority", "TDSCPName", "TFCNameOrEmpty", "TQueueId", "TmnxEnabledDisabled", "TNamedItem", "TCIRRate", "TTcpUdpPortOperator", "TPolicyID", "TItemDescription", "TDSCPNameOrEmpty", "TPortSchedulerCIR", "TLspExpValue", "TDSCPValue", "TSapEgressPolicyID", "TPIRRate", "TEgressQueueId", "TSapIngressPolicyID", "TFrameType", "TIngressQueueId", "TFCName", "TPIRRateOrZero", "TTcpUdpPort", "IpAddressPrefixLength", "TWeight", "TPortSchedulerPIR", "TIpProtocol", "ServiceAccessPoint", "TNamedItemOrEmpty")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
AtmTrafficDescrParamIndex, AtmServiceCategory = mibBuilder.importSymbols("ATM-TC-MIB", "AtmTrafficDescrParamIndex", "AtmServiceCategory")
InetAddressPrefixLength, InetAddressIPv6, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressPrefixLength", "InetAddressIPv6", "InetAddress", "InetAddressType")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ModuleIdentity, iso, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, TimeTicks, Counter32, IpAddress, Bits, MibIdentifier, NotificationType, Integer32, Gauge32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "iso", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "TimeTicks", "Counter32", "IpAddress", "Bits", "MibIdentifier", "NotificationType", "Integer32", "Gauge32", "Unsigned32")
DisplayString, TruthValue, TextualConvention, MacAddress, RowStatus, TimeStamp, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention", "MacAddress", "RowStatus", "TimeStamp", "StorageType")
timetraQosMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 16))
timetraQosMIBModule.setRevisions(('1908-01-01 00:00', '1907-01-01 00:00', '1906-02-28 00:00', '1905-08-31 00:00', '1905-01-24 00:00', '1904-01-15 00:00', '1903-08-15 00:00', '2003-01-20 00:00', '2001-05-29 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: timetraQosMIBModule.setRevisionsDescriptions(('Rev 6.0 01 Jan 2008 00:00 6.0 release of the TIMETRA-QOS-MIB.', 'Rev 5.0 01 Jan 2007 00:00 5.0 release of the TIMETRA-QOS-MIB.', 'Rev 4.0 28 Feb 2006 00:00 4.0 release of the TIMETRA-QOS-MIB.', 'Rev 3.0 31 Aug 2005 00:00 3.0 release of the TIMETRA-QOS-MIB.', 'Rev 2.1 24 Jan 2005 00:00 2.1 release of the TIMETRA-QOS-MIB.', 'Rev 2.0 15 Jan 2004 00:00 2.0 release of the TIMETRA-QOS-MIB.', 'Rev 1.2 15 Aug 2003 00:00 1.2 release of the TIMETRA-QOS-MIB.', 'Rev 1.0 20 Jan 2003 00:00 1.0 Release of the TIMETRA-QOS-MIB.', 'Rev 0.1 29 May 2001 00:00 Initial version of the TIMETRA-QOS-MIB.',))
if mibBuilder.loadTexts: timetraQosMIBModule.setLastUpdated('0801010000Z')
if mibBuilder.loadTexts: timetraQosMIBModule.setOrganization('Alcatel')
if mibBuilder.loadTexts: timetraQosMIBModule.setContactInfo('Alcatel 7x50 Support Web: http://www.alcatel.com/comps/pages/carrier_support.jhtml')
if mibBuilder.loadTexts: timetraQosMIBModule.setDescription("This document is the SNMP MIB module to manage and provision Quality of Service features on Alcatel 7x50 systems. Copyright 2003-2008 Alcatel-Lucent. All rights reserved. Reproduction of this document is authorized on the condition that the foregoing copyright notice is included. This SNMP MIB module (Specification) embodies Alcatel's proprietary intellectual property. Alcatel retains all title and ownership in the Specification, including any revisions. Alcatel grants all interested parties a non-exclusive license to use and distribute an unmodified copy of this Specification in connection with management of Alcatel products, and without fee, provided this copyright notice and license appear on all copies. This Specification is supplied 'as is', and Alcatel makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
tQosObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16))
tQosNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 16))
tQosNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 16, 0))
tmnxQosConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16))
tDSCPObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 1))
tFCObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 2))
tSapIngressObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3))
tSapEgressObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4))
tNetworkObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5))
tNetworkQueueObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6))
tSharedQueueObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7))
tSlopeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10))
tSchedulerObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12))
tQosTimeStampObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20))
tAtmTdpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21))
tPoolObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22))
class TNetworkPolicyID(TextualConvention, Unsigned32):
    description = 'the identification number of a network policy.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 65535)

class TItemScope(TextualConvention, Integer32):
    description = "This textual-convention determines some aspects of an item's behavior regarding creation and use, unused entry garbage collection, and automated promulgation by Element Management System to other systems in the service domain. TItemScope applies to SAP-ingress, SAP-egress, and Network policies, and to IP filters and MAC filters. exclusive: When the scope of an item is defined as exclusive, the item can only be applied once, for example to a single SAP. Attempting to assign the policy to a second SAP is not allowed and will result in an error. If the item is removed from the exclusive SAP, it will become available for assignment to another exclusive SAP. A non-applied exclusive scope policy is a candidate to be removed from the system by a TBD garbage collection command. The system default policies cannot be put into the exclusive scope. An error will be generated if scope exclusive is executed in any policies with a policy-id equal to 1. template: When the scope of an item is defined as template, the item can be applied any number of times. Policies with template scope will not be considered for deletion by a TBD garbage collection command; all items of scope 'template' must be deleted explicitly. The system default policies will always be scope template. An error will occur if a policy-id 1 is attempted to be set to scope exclusive."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("exclusive", 1), ("template", 2))

class TItemMatch(TextualConvention, Integer32):
    description = 'when set to off, the item is not matched. when set to false, packets without the item match the filter. when set to true, packets with the item match the filter.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("off", 1), ("false", 2), ("true", 3))

class TPriority(TextualConvention, Integer32):
    description = 'the priority to apply to a packet'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("low", 1), ("high", 2))

class TPriorityOrDefault(TextualConvention, Integer32):
    description = 'the priority to apply to a packet. when set to default(3), the priority from the default-action is used.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("low", 1), ("high", 2), ("default", 3))

class TProfile(TextualConvention, Integer32):
    description = 'the profile marking of a packet at the ingress.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("in", 1), ("out", 2))

class TDEProfile(TextualConvention, Integer32):
    description = "This textual-convention specifies the profile marking of a packet. Value of 'in' specifies the in-profile marking. Value of 'out' specifies the out-profile marking. Value of 'de' specifies that the profile marking will be based on the DE (Drop-Eligible) bit. DE bit-value of '0' specifies in-profile and DE bit value of '1' specifies out-profile marking."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("in", 1), ("out", 2), ("de", 3))

class TProfileOrNone(TextualConvention, Integer32):
    description = 'Profile marking of a packet.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("in", 1), ("out", 2))

class TAdaptationRule(TextualConvention, Integer32):
    description = 'The adaptation rule to be applied to calcluate the operational values for the specified entity.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("max", 1), ("min", 2), ("closest", 3))

class TRemarkType(TextualConvention, Integer32):
    description = 'The remarking to be used.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("dscp", 2), ("precedence", 3))

class TPrecValue(TextualConvention, Integer32):
    description = 'The precedence bits as used in the IPv4 header. This constitutes of 3 bits and hence can hold the values from 0 to 7.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 7)

class TPrecValueOrNone(TextualConvention, Integer32):
    description = "The precedence bits as used in the IPv4 header. This constitutes of 3 bits and hence can hold the values from 0 to 7. The value '-1' specifies that the precedence value is undefined/unused."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 7), )
class TBurstSize(TextualConvention, Integer32):
    description = "The amount of buffer space (in kbytes) assigned to a queue. The value -1 means that the actual value is derived from the corresponding buffer policy's default value."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 131072), )
class TBurstPercent(TextualConvention, Integer32):
    description = 'The percentage of buffer space assigned to a queue that is reserved for some purpose.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 100)

class TBurstHundredthsOfPercent(TextualConvention, Integer32):
    description = 'The percentage of buffer space assigned to a queue that is reserved for some purpose, defined to two decimal places.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 10000)

class TBurstPercentOrDefault(TextualConvention, Integer32):
    description = "The percentage of buffer space assigned to a queue that is reserved for some purpose. The value -1 means that the actual value is derived from the corresponding buffer policy's default value."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 100), )
class TRatePercent(TextualConvention, Integer32):
    description = 'The percentage of maximum rate allowed.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 100)

class TPIRRatePercent(TextualConvention, Integer32):
    description = 'The percentage of maximum PIR rate allowed. A value of 0 is no acceptable, so the range begins at 1.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 100)

class TLevel(TextualConvention, Integer32):
    description = 'The level of the specified entity while feeding into the parent.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 8)

class TLevelOrDefault(TextualConvention, Integer32):
    description = 'The level of the specified entity while feeding into the parent. The value 0 is used to denote a default value.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8), )
class TQueueMode(TextualConvention, Integer32):
    description = "The mode in which the queue is operating. If the queue is operating in the 'priority' mode, it is capable of handling traffic differently with two distinct priorities. These priorities are assigned by the stages preceding the queueing framework in the system. When the queue is operating in the 'profile' mode, in other words the color aware mode, the queue tries to provide the appropriate bandwidth to the packets with different profiles. The profiles are assigned according to the configuration of the forwarding class or the sub-forwarding class. In 'priority' mode, the queue does not have the functionality to support the profiled traffic and in such cases the queue will have a degraded performance. However, the converse is not valid and a queue in 'profile' mode should be capable of supporting the different priorities of traffic."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("priority", 1), ("profile", 2))

class TEntryIndicator(TextualConvention, Unsigned32):
    description = 'Uniquely identifies an entry in a policy or filter table. The value 0 is not a valid entry-id. When used as insertion point the value 0 indicates that entries must be inserted at the very beginning, i.e.before the first entry defined.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 65535)

class TEntryId(TextualConvention, Unsigned32):
    description = 'uniquely identifies an entry in a policy or filter table. to facilitate insertion of entries in the tables, we recommend assigning entry IDs by 10s: 10, 20, 30, etc. '
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 65535)

class TMatchCriteria(TextualConvention, Integer32):
    description = 'determines whether the entry matches traffic using IP match entries or MAC match entries.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("ip", 1), ("mac", 2), ("none", 3))

class TAtmTdpDescrType(TextualConvention, Integer32):
    description = 'The TAtmTdpDescrType is an enumerated integer whose value indicates the types of cell loss priority to be used in conjunction with traffic parameters. The following values are outlined: Integer Value Interpretation ------------- ------------------------ clp0And1pcr PCR applies to CLP 0 and CLP 1 cell flows clp0And1pcrPlusClp0And1scr PCR applies to CLP 0 and CLP 1 cell flows. SCR applies to CLP 0 and CLP 1 cell flows. clp0And1pcrPlusClp0scr PCR applies to CLP 0 and CLP 1 cell flows. SCR applies to CLP 0 cell flows. clp0And1pcrPlusClp0scrTag PCR applies to CLP 0 and CLP 1 cell flows. SCR applies to CLP 0 cell flows. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("clp0And1pcr", 0), ("clp0And1pcrPlusClp0And1scr", 1), ("clp0And1pcrPlusClp0scr", 2), ("clp0And1pcrPlusClp0scrTag", 3))

class TDEValue(TextualConvention, Integer32):
    description = "This textual-convention specifies the DE (Drop Eligible) bit value. The value of '-1' means DE value is not specified."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 1), )
tDSCPNameTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 1, 1), )
if mibBuilder.loadTexts: tDSCPNameTable.setStatus('current')
if mibBuilder.loadTexts: tDSCPNameTable.setDescription('A list of all DSCP Names. DSCP Name entries must exist here and be active before they can be referenced elsewhere (e.g. IP filter).')
tDSCPNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tDSCPName"))
if mibBuilder.loadTexts: tDSCPNameEntry.setStatus('current')
if mibBuilder.loadTexts: tDSCPNameEntry.setDescription('Information about a particular DSCP Name, particularly the DSCP value. It maps a DSCP Name into a DSCP value. Some default entries are created by the agent. Default entries have tDSCPNameStorageType permanent, and can not be deleted. Entries cannot be created by user but may be supported later. An attempt to create a row in this table would return no creation.')
tDSCPName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 1, 1, 1, 1), TDSCPName())
if mibBuilder.loadTexts: tDSCPName.setReference('')
if mibBuilder.loadTexts: tDSCPName.setStatus('current')
if mibBuilder.loadTexts: tDSCPName.setDescription('The name assigned to the DSCP Value.')
tDSCPNameRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tDSCPNameRowStatus.setStatus('current')
if mibBuilder.loadTexts: tDSCPNameRowStatus.setDescription('Row Status of the entry.')
tDSCPNameStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 1, 1, 1, 3), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tDSCPNameStorageType.setStatus('current')
if mibBuilder.loadTexts: tDSCPNameStorageType.setDescription('The storage type of this row in the table.')
tDSCPNameDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 1, 1, 1, 4), TDSCPValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tDSCPNameDscpValue.setReference('')
if mibBuilder.loadTexts: tDSCPNameDscpValue.setStatus('current')
if mibBuilder.loadTexts: tDSCPNameDscpValue.setDescription('The DSCP Value.')
tDSCPNameLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 1, 1, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tDSCPNameLastChanged.setStatus('current')
if mibBuilder.loadTexts: tDSCPNameLastChanged.setDescription('timestamp of last change to this row in tDSCPNameTable.')
tFCNameTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 2, 1), )
if mibBuilder.loadTexts: tFCNameTable.setStatus('current')
if mibBuilder.loadTexts: tFCNameTable.setDescription('A list of all Forwarding Class Names. Forwarding Class Name entries must exist here and be active before they can be referenced elsewhere (e.g. qos queue).')
tFCNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 2, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tFCName"))
if mibBuilder.loadTexts: tFCNameEntry.setStatus('current')
if mibBuilder.loadTexts: tFCNameEntry.setDescription('Information about a particular Forwarding Class Name, particularly the Forwarding Class value. Some default entries are created by the agent. Default entries have tFCStorageType permanent, and can not be deleted. Entries cannot be created by user but maybe supported in future. An attempt to create a row in this table would return no creation.')
tFCName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 2, 1, 1, 1), TFCName())
if mibBuilder.loadTexts: tFCName.setReference('')
if mibBuilder.loadTexts: tFCName.setStatus('current')
if mibBuilder.loadTexts: tFCName.setDescription('Forwarding class name.')
tFCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFCRowStatus.setStatus('current')
if mibBuilder.loadTexts: tFCRowStatus.setDescription('Row Status of the entry.')
tFCStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 2, 1, 1, 3), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFCStorageType.setStatus('current')
if mibBuilder.loadTexts: tFCStorageType.setDescription('The storage type of this row in the table.')
tFCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFCValue.setReference('')
if mibBuilder.loadTexts: tFCValue.setStatus('current')
if mibBuilder.loadTexts: tFCValue.setDescription('FC Value.')
tFCNameLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 2, 1, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFCNameLastChanged.setStatus('current')
if mibBuilder.loadTexts: tFCNameLastChanged.setDescription('timestamp of last change to this row in tFCNameTable.')
tSapIngressTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 1), )
if mibBuilder.loadTexts: tSapIngressTable.setStatus('current')
if mibBuilder.loadTexts: tSapIngressTable.setDescription(' ')
tSapIngressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIndex"))
if mibBuilder.loadTexts: tSapIngressEntry.setStatus('current')
if mibBuilder.loadTexts: tSapIngressEntry.setDescription('Information about a particular Sap Ingress Policy. sap-ingress policy (1) is the default entry. Default Entry is created by the agent, other entries are created by user. Default Entry cannot be modified/deleted. The other entries are deleted by user. There is no StorageType object, entries have a presumed StorageType of nonVolatile. ')
tSapIngressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 1, 1, 1), TSapIngressPolicyID().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: tSapIngressIndex.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIndex.setDescription('the policy ID is the index to this table.')
tSapIngressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSapIngressRowStatus.setDescription('Row Status for the policy. The deletion of this row has an action of removing the dependent rows in the following tables : - tSapIngressQueueTable - tSapIngressDSCPTable - tSapIngressDot1pTable ')
tSapIngressScope = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 1, 1, 3), TItemScope().clone('template')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressScope.setStatus('current')
if mibBuilder.loadTexts: tSapIngressScope.setDescription("Scope of the policy. If the scope is 'exclusive', it can only be instantiated once whereas it could have multiple instances if defined as 'exclusive'.")
tSapIngressDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 1, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressDescription.setStatus('current')
if mibBuilder.loadTexts: tSapIngressDescription.setDescription('user-provided description of the policy.')
tSapIngressDefaultFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 1, 1, 5), TNamedItem().clone(hexValue="be")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressDefaultFC.setStatus('current')
if mibBuilder.loadTexts: tSapIngressDefaultFC.setDescription("tSapIngressDefaultFC specifies the forwarding class or the sub forwarding class which should be used for all traffic that does not match a specific classification specified in this SAP ingress QoS policy. Specification of a sub forwarding class is also allowed. The format of a sub forwarding class is the concatenation of the base forwarding class and a sub class identifier in the form base-fc-name[.sub-fc-name] To reference a sub forwarding class, the mapping of the sub forwarding class should be existing in this QoS policy. If not specified explicitly, all traffic will be classified as best-effort 'be'.")
tSapIngressDefaultFCPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 1, 1, 6), TPriority().clone('low')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressDefaultFCPriority.setStatus('current')
if mibBuilder.loadTexts: tSapIngressDefaultFCPriority.setDescription('the priority to assign to traffic ingressing as the default action queue.')
tSapIngressMatchCriteria = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 1, 1, 7), TMatchCriteria()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressMatchCriteria.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMatchCriteria.setDescription('indicates which type of match criteria the policy should use. when set to ip(1), the policy looks for match entries in tSapIngressIPCriteriaTable or tSapIngressIPv6CriteriaTable. When set to mac(2), the policy looks for match entries in tSapIngressMacCriteriaTable. the value of tSapIngressMatchCriteria is set when the first match criteria table entry is created. the value is set to none(3) when the last criteria table entry is removed. when tSapIngressMatchCriteria is set to ip(1), no tSapIngressMacCriteriaTable entries can be created. when set to mac(2), no tSapIngressIPCriteriaTable or tSapIngressIPv6CriteriaTable entries can be created. ')
tSapIngressLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 1, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngressLastChanged.setDescription('timestamp of last change to this row in tSapIngressTable.')
tSapIngressQueueTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2), )
if mibBuilder.loadTexts: tSapIngressQueueTable.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueTable.setDescription("information about all sap-ingress policies' queues.")
tSapIngressQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIndex"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueue"))
if mibBuilder.loadTexts: tSapIngressQueueEntry.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueEntry.setDescription('Information about a particular queue for a sap-ingress policy. Queue (1) is the used as a default for unicast and queue (11) is used as a default for multicast. Both these are created by the agent and can be edited but not removed from the system. Other entries are created by user.')
tSapIngressQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 1), TIngressQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: tSapIngressQueue.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueue.setDescription('The queue ID is used as the secondary index to the table entry.')
tSapIngressQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueRowStatus.setDescription('Row Status of the entry. This allows creation/deletion of rows in this table.')
tSapIngressQueueParent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 3), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueParent.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueParent.setDescription('The scheduler to which this queue would be feeding to.')
tSapIngressQueueLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 4), TLevel().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueLevel.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueLevel.setDescription('This specifies the level of priority while feeding to the parent.')
tSapIngressQueueWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 5), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueWeight.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueWeight.setDescription('The weight that needs to be used by the scheduler to which this queue would be feeding to.')
tSapIngressQueueCIRLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 6), TLevelOrDefault()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueCIRLevel.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueCIRLevel.setDescription("This specifies the level of priority while feeding to the parent. The level '0' means treat all offered load for this queue as for the above CIR traffic.")
tSapIngressQueueCIRWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 7), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueCIRWeight.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueCIRWeight.setDescription('The weight that needs to be used until the committed rate by the scheduler to which this queue would be feeding to.')
tSapIngressQueueMCast = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueMCast.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueMCast.setDescription('This object specifies if this is a multicast queue or not.')
tSapIngressQueueExpedite = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("expedited", 1), ("auto-expedited", 2), ("non-expedited", 3))).clone('auto-expedited')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueExpedite.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueExpedite.setDescription("tSapIngressQueueExpedite specifies the priority that this queue should be assigned by the hardware level schedulers. The value 'auto-expedited' implies that this attribute should be dynamically updated by looking at the forwarding classes mapping into this queue. In such a case the queue is treated as 'non-expedited' if there is even a single non-expedited forwarding class using this queue. This attribute is associated with the queue at the time of creation and cannot be modified thereafter.")
tSapIngressQueueCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 10), TBurstSize().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueCBS.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueCBS.setDescription('The amount of reserved buffer space (in kilo bytes) for the queue.')
tSapIngressQueueMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 11), TBurstSize().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueMBS.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueMBS.setDescription('The maximum amount of buffer space (in kilo bytes) allowed for the queue.')
tSapIngressQueueHiPrioOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 12), TBurstPercentOrDefault().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueHiPrioOnly.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueHiPrioOnly.setDescription('The percentage of buffer space for the queue, used exclusively by high priority packets.')
tSapIngressQueuePIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 13), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueuePIRAdaptation.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueuePIRAdaptation.setDescription('The adaptation rule to be used while computing the operational PIR value. The adaptation rule specifies the rules to compute the operational values while maintaining minimum offset.')
tSapIngressQueueCIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 14), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueCIRAdaptation.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueCIRAdaptation.setDescription('The adaptation rule to be used while computing the operational CIR value. The adaptation rule specifies the rules to compute the operational values while maintaining minimum offset.')
tSapIngressQueueAdminPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 15), TPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueAdminPIR.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueAdminPIR.setDescription('The administrative PIR specified by the user.')
tSapIngressQueueAdminCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 16), TCIRRate()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueAdminCIR.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueAdminCIR.setDescription('The administrative CIR specified by the user.')
tSapIngressQueueOperPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 17), TPIRRate()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressQueueOperPIR.setStatus('obsolete')
if mibBuilder.loadTexts: tSapIngressQueueOperPIR.setDescription('The operating PIR.')
tSapIngressQueueOperCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 18), TCIRRate()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressQueueOperCIR.setStatus('obsolete')
if mibBuilder.loadTexts: tSapIngressQueueOperCIR.setDescription('The operational value derived by computing the CIR value from the administrative CIR and PIR values and their corresponding adaptation rules.')
tSapIngressQueueLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 19), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressQueueLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueLastChanged.setDescription('timestamp of last change to this row in tSapIngressQueueTable.')
tSapIngressQueuePoliced = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 20), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueuePoliced.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueuePoliced.setDescription('tSapIngressQueuePoliced specifies that the out of profile traffic feeding into the physical queue instance should be dropped. tSapIngressQueuePoliced overrides the bandwidth specified by the object tSapIngressQueueAdminCIR.')
tSapIngressQueueMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 21), TQueueMode().clone('priority')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueMode.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueMode.setDescription('tSapIngressQueueMode specifies the mode in which the queue is operating. This attribute is associated with the queue at the time of creation and cannot be modified thereafter.')
tSapIngressQueuePoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 22), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueuePoolName.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueuePoolName.setDescription('The value of tSapIngressQueuePoolName specifies the name of the pool to be applied for SAP ingress queue.')
tSapIngressDSCPTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 3), )
if mibBuilder.loadTexts: tSapIngressDSCPTable.setStatus('current')
if mibBuilder.loadTexts: tSapIngressDSCPTable.setDescription('a list of all DSCP entries for all sap-ingress policies.')
tSapIngressDSCPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIndex"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDSCP"))
if mibBuilder.loadTexts: tSapIngressDSCPEntry.setStatus('current')
if mibBuilder.loadTexts: tSapIngressDSCPEntry.setDescription('Information about a particular DSCP entry for a sap-ingress policy. Entries are created by user. Entries are deleted by user. There is no StorageType object, entries have a presumed StorageType of nonVolatile. in the event that one policy has multiple entries, and the tSapIngressDSCP values are the same, only one queue will be created (the queue for the lexicographically first tSapIngressDSCP). ')
tSapIngressDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 3, 1, 1), TDSCPName())
if mibBuilder.loadTexts: tSapIngressDSCP.setStatus('current')
if mibBuilder.loadTexts: tSapIngressDSCP.setDescription('')
tSapIngressDSCPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressDSCPRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSapIngressDSCPRowStatus.setDescription('This object allows creation/deletion of rows in this table.')
tSapIngressDSCPFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 3, 1, 3), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressDSCPFC.setStatus('current')
if mibBuilder.loadTexts: tSapIngressDSCPFC.setDescription('tSapIngressDSCPFC specifies the forwarding class or the sub forwarding class to be used to classify all the traffic that matches the specific DSCP i.e. tSapIngressDSCP. Specification of a sub forwarding class is also allowed. The format of a sub forwarding class is the concatenation of the base forwarding class and a sub class identifier in the form base-fc-name[.sub-fc-name] To reference a sub forwarding class, the mapping of the sub forwarding class should be existing in this QoS policy. Unless tSapIngressDSCPFC is specified explicitly, this match will be ignored for classification purposes.')
tSapIngressDSCPPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 3, 1, 4), TPriorityOrDefault().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressDSCPPriority.setStatus('current')
if mibBuilder.loadTexts: tSapIngressDSCPPriority.setDescription('')
tSapIngressDSCPLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 3, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressDSCPLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngressDSCPLastChanged.setDescription('timestamp of last change to this row in tSapIngressDSCPTable.')
tSapIngressDot1pTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 4), )
if mibBuilder.loadTexts: tSapIngressDot1pTable.setStatus('current')
if mibBuilder.loadTexts: tSapIngressDot1pTable.setDescription('a list of all dot1p entries for all sap-ingress policies.')
tSapIngressDot1pEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIndex"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDot1pValue"))
if mibBuilder.loadTexts: tSapIngressDot1pEntry.setStatus('current')
if mibBuilder.loadTexts: tSapIngressDot1pEntry.setDescription('Information about a particular dot1p match for a sap-ingress policy. Entries are created by user. Entries are deleted by user. There is no StorageType object, entries have a presumed StorageType of nonVolatile. ')
tSapIngressDot1pValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 4, 1, 1), Dot1PPriority().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: tSapIngressDot1pValue.setStatus('current')
if mibBuilder.loadTexts: tSapIngressDot1pValue.setDescription('dot1p value to match in the packet. this value is also used as an index so that for any dot1p value there is only one possible disposition queue and priority. ')
tSapIngressDot1pRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressDot1pRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSapIngressDot1pRowStatus.setDescription("Row Status for this sap-ingress policy's dot1p entry.")
tSapIngressDot1pFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 4, 1, 3), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressDot1pFC.setStatus('current')
if mibBuilder.loadTexts: tSapIngressDot1pFC.setDescription('tSapIngressDot1pFC specifies the forwarding class or the sub forwarding class to be used to classify all the traffic that matches the specific Dot1p i.e. tSapIngressDot1pValue. Specification of a sub forwarding class is also allowed. The format of a sub forwarding class is the concatenation of the base forwarding class and a sub class identifier in the form base-fc-name[.sub-fc-name] To reference a sub forwarding class, the mapping of the sub forwarding class should be existing in this QoS policy. Unless tSapIngressDot1pFC is specified explicitly, this match will be ignored for classification purposes.')
tSapIngressDot1pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 4, 1, 4), TPriorityOrDefault().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressDot1pPriority.setStatus('current')
if mibBuilder.loadTexts: tSapIngressDot1pPriority.setDescription('priority to use for packets that match the dot1p value tSapIngressDot1pValue.')
tSapIngressDot1pLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 4, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressDot1pLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngressDot1pLastChanged.setDescription('timestamp of last change to this row in tSapIngressDot1pTable.')
tSapIngressIPCriteriaTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5), )
if mibBuilder.loadTexts: tSapIngressIPCriteriaTable.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaTable.setDescription("information about all sap-ingress policies' ip-criteria entries.")
tSapIngressIPCriteriaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIndex"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaIndex"))
if mibBuilder.loadTexts: tSapIngressIPCriteriaEntry.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaEntry.setDescription('Information about a particular ip-criteria entry for a sap-ingress policy. Entries are created by user. Entries are deleted by user. There is no StorageType object, entries have a presumed StorageType of nonVolatile. ')
tSapIngressIPCriteriaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 1), TEntryId())
if mibBuilder.loadTexts: tSapIngressIPCriteriaIndex.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaIndex.setDescription('unique identifier separates this entry from others in this policy.')
tSapIngressIPCriteriaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaRowStatus.setDescription('Row Status for the IP Criteria entry.')
tSapIngressIPCriteriaDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 3), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaDescription.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaDescription.setDescription('description of this IP criteria entry.')
tSapIngressIPCriteriaActionFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 4), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaActionFC.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaActionFC.setDescription('tSapIngressIPCriteriaActionFC specifies the forwarding class or the sub forwarding class to be used to classify all the traffic that matches the specific IP criteria. Specification of a sub forwarding class is also allowed. The format of a sub forwarding class is the concatenation of the base forwarding class and a sub class identifier in the form base-fc-name[.sub-fc-name] To reference a sub forwarding class, the mapping of the sub forwarding class should be existing in this QoS policy. Unless tSapIngressIPCriteriaActionFC is specified explicitly, this match will be ignored for classification purposes.')
tSapIngressIPCriteriaActionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 5), TPriorityOrDefault().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaActionPriority.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaActionPriority.setDescription("priority for packets which match this entry's criteria. when set to default, the packet is sent to the queue from DSCP/dot1p/FC which matched the packet, using the priority from the DSCP/dot1p/FC which matched the packet.")
tSapIngressIPCriteriaSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 6), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaSourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaSourceIpAddr.setDescription('IP address to match with source-IP of the packet.')
tSapIngressIPCriteriaSourceIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 7), IpAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaSourceIpMask.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaSourceIpMask.setDescription('the prefix is the number of bits of the source IP address to match.')
tSapIngressIPCriteriaDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 8), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaDestIpAddr.setDescription('IP address to match with destination-IP of the packet.')
tSapIngressIPCriteriaDestIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 9), IpAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaDestIpMask.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaDestIpMask.setDescription('the prefix is the number of bits of the destination IP address to match.')
tSapIngressIPCriteriaProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 10), TIpProtocol().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaProtocol.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaProtocol.setDescription('IP protocol to match. use -1 to disable matching by IP protocol.')
tSapIngressIPCriteriaSourcePortValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 11), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaSourcePortValue1.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaSourcePortValue1.setDescription('TCP/UDP port value1. The value of this object is used according to the description for tSapIngressIPCriteriaSourcePortOperator.')
tSapIngressIPCriteriaSourcePortValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 12), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaSourcePortValue2.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaSourcePortValue2.setDescription('TCP/UDP port value2. The value of this object is used according to the description for tSapIngressIPCriteriaSourcePortOperator.')
tSapIngressIPCriteriaSourcePortOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 13), TTcpUdpPortOperator().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaSourcePortOperator.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaSourcePortOperator.setDescription('The operator specifies the manner in which tSapIngressIPCriteriaSourcePortValue1 and tSapIngressIPCriteriaSourcePortValue2 are to be used. The value of these latter 2 objects and tSapIngressIPCriteriaSourcePortOperator is used as described in TTcpUdpPortOperator.')
tSapIngressIPCriteriaDestPortValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 14), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaDestPortValue1.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaDestPortValue1.setDescription('TCP/UDP port value1. The value of this object is used according to the description for tSapIngressIPCriteriaDestPortOperator.')
tSapIngressIPCriteriaDestPortValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 15), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaDestPortValue2.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaDestPortValue2.setDescription('TCP/UDP port value2. The value of this object is used according to the description for tSapIngressIPCriteriaDestPortOperator.')
tSapIngressIPCriteriaDestPortOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 16), TTcpUdpPortOperator().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaDestPortOperator.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaDestPortOperator.setDescription('The operator specifies the manner in which tSapIngressIPCriteriaDestPortValue1 and tSapIngressIPCriteriaDestPortValue2 are to be used. The value of these latter 2 objects and tSapIngressIPCriteriaDestPortOperator is used as described in TTcpUdpPortOperator.')
tSapIngressIPCriteriaDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 17), TDSCPNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaDSCP.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaDSCP.setDescription('DSCP value to match in the packet')
tSapIngressIPCriteriaFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 19), TItemMatch().clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaFragment.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaFragment.setDescription('matches when the packet is a fragment (true) or when the packet is not a fragment (false) or matches all packets fragmented or not (off).')
tSapIngressIPCriteriaLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 20), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressIPCriteriaLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaLastChanged.setDescription('timestamp of last change to this row in tSapIngressIPCriteriaTable.')
tSapIngressMacCriteriaTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6), )
if mibBuilder.loadTexts: tSapIngressMacCriteriaTable.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaTable.setDescription("information about all sap-ingress policies' mac-criteria entries.")
tSapIngressMacCriteriaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIndex"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaIndex"))
if mibBuilder.loadTexts: tSapIngressMacCriteriaEntry.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaEntry.setDescription('Information about a particular mac-criteria entry for a sap-ingress policy. Entries are created by user. Entries are deleted by user. There is no StorageType object, entries have a presumed StorageType of nonVolatile.')
tSapIngressMacCriteriaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 1), TEntryId())
if mibBuilder.loadTexts: tSapIngressMacCriteriaIndex.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaIndex.setDescription('')
tSapIngressMacCriteriaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaRowStatus.setDescription('')
tSapIngressMacCriteriaDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 3), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaDescription.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaDescription.setDescription('')
tSapIngressMacCriteriaActionFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 4), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaActionFC.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaActionFC.setDescription('tSapIngressMacCriteriaActionFC specifies the forwarding class or the sub forwarding class to be used to classify all the traffic that matches the specific Mac criteria. Specification of a sub forwarding class is also allowed. The format of a sub forwarding class is the concatenation of the base forwarding class and a sub class identifier in the form base-fc-name[.sub-fc-name] To reference a sub forwarding class, the mapping of the sub forwarding class should be existing in this QoS policy. Unless tSapIngressMacCriteriaActionFC is specified explicitly, this match will be ignored for classification purposes.')
tSapIngressMacCriteriaActionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 5), TPriorityOrDefault().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaActionPriority.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaActionPriority.setDescription('')
tSapIngressMacCriteriaFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 6), TFrameType().clone('e802dot3')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaFrameType.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaFrameType.setDescription('The type of mac frame for which we are defining this match criteria.')
tSapIngressMacCriteriaSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 8), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaSrcMacAddr.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaSrcMacAddr.setDescription('')
tSapIngressMacCriteriaSrcMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 9), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaSrcMacMask.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaSrcMacMask.setDescription('')
tSapIngressMacCriteriaDstMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 10), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaDstMacAddr.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaDstMacAddr.setDescription('')
tSapIngressMacCriteriaDstMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 11), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaDstMacMask.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaDstMacMask.setDescription('')
tSapIngressMacCriteriaDot1PValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 12), Dot1PPriority().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaDot1PValue.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaDot1PValue.setDescription('')
tSapIngressMacCriteriaDot1PMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 13), Dot1PPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaDot1PMask.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaDot1PMask.setDescription('')
tSapIngressMacCriteriaEthernetType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1536, 65535), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaEthernetType.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaEthernetType.setDescription('the ethernet type, ssap/dsap, and snap-pid match criteria are mutually exclusive and only one can be set per entry.')
tSapIngressMacCriteriaDSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 15), ServiceAccessPoint().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaDSAP.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaDSAP.setDescription('the ethernet type, ssap/dsap, and snap-pid match criteria are mutually exclusive and only one can be set per entry.')
tSapIngressMacCriteriaDSAPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 16), ServiceAccessPoint().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaDSAPMask.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaDSAPMask.setDescription('the ethernet type, ssap/dsap, and snap-pid match criteria are mutually exclusive and only one can be set per entry.')
tSapIngressMacCriteriaSSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 17), ServiceAccessPoint().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaSSAP.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaSSAP.setDescription('the ethernet type, ssap/dsap, and snap-pid match criteria are mutually exclusive and only one can be set per entry.')
tSapIngressMacCriteriaSSAPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 18), ServiceAccessPoint().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaSSAPMask.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaSSAPMask.setDescription('the ethernet type, ssap/dsap, and snap-pid match criteria are mutually exclusive and only one can be set per entry.')
tSapIngressMacCriteriaSnapPid = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65535), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaSnapPid.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaSnapPid.setDescription('the ethernet type, ssap/dsap, and snap-pid match criteria are mutually exclusive and only one can be set per entry.')
tSapIngressMacCriteriaSnapOui = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("zero", 2), ("nonZero", 3))).clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaSnapOui.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaSnapOui.setDescription('whether to match snap-oui, and what to match.')
tSapIngressMacCriteriaLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 21), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressMacCriteriaLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaLastChanged.setDescription('timestamp of last change to this row in tSapIngressMacCriteriaTable.')
tSapIngressFCTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7), )
if mibBuilder.loadTexts: tSapIngressFCTable.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCTable.setDescription('This table maintains the mapping of a particular forwarding class traffic into the specified queue.')
tSapIngressFCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIndex"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCName"))
if mibBuilder.loadTexts: tSapIngressFCEntry.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCEntry.setDescription("Information about a particular sap-ingress policy's forwarding class mappings to queues. Entries are created and deleted by user. They have a presumed StorageType of nonVolatile.")
tSapIngressFCName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tSapIngressFCName.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCName.setDescription('tSapIngressFCName specifies the forwarding class or the sub forwarding class for which this mapping is defined. A sub forwarding class mapping can also be configured. The format of a sub forwarding class is the concatenation of the base forwarding class and a sub class identifier in the form base-fc-name[.sub-fc-name] A sub forwarding class mapping should exist in this table if any explicit match criteria in this SAP ingress QoS policy try to use it. However, it is not the same for the base forwarding classes.')
tSapIngressFCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCRowStatus.setDescription('Row Status for this queue.')
tSapIngressFCQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 3), TIngressQueueId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCQueue.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCQueue.setDescription('The specific queue to be used for packets in this forwarding class. A value of zero implies that the default queues should be used.')
tSapIngressFCMCastQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 4), TIngressQueueId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCMCastQueue.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCMCastQueue.setDescription('The specific multicast queue to be used for packets in this forwarding class. The queue is used only for specific entities and will be ignored wherever it is irrelevant. A value of zero implies that the default queues should be used.')
tSapIngressFCBCastQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 5), TIngressQueueId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCBCastQueue.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCBCastQueue.setDescription('The specific broadcast queue to be used for packets in this forwarding class. The queue is used only for specific entities and will be ignored wherever it is irrelevant. A value of zero implies that the default queues should be used.')
tSapIngressFCUnknownQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 6), TIngressQueueId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCUnknownQueue.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCUnknownQueue.setDescription('The specific unknown destination queue to be used for packets in this forwarding class. The queue is used only for specific entities and will be ignored wherever it is irrelevant. A value of zero implies that the default queues should be used.')
tSapIngressFCLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressFCLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCLastChanged.setDescription('tSapIngressFCLastChanged indicates the value of sysUpTime when the forwarding class entry was last modified.')
tSapIngressFCInProfRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 8), TRemarkType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCInProfRemark.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCInProfRemark.setDescription('tSapIngressFCInProfRemark specifies the remarking type to be used for the in profile packets feeding into the queues.')
tSapIngressFCInProfDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 9), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCInProfDscp.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCInProfDscp.setDescription("tSapIngressFCInProfDscp specifies the DSCP to be used while remarking the in profile packets when the in-profile remarking type, tSapIngressFCInProfRemark is specified to be 'dscp'.")
tSapIngressFCInProfPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 10), TPrecValueOrNone().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCInProfPrec.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCInProfPrec.setDescription("tSapIngressFCInProfPrec specifies the precedence value to be used while remarking the in profile packets when the in-profile remarking type, tSapIngressFCInProfRemark is specified to be 'precedence'.")
tSapIngressFCOutProfRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 11), TRemarkType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCOutProfRemark.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCOutProfRemark.setDescription('tSapIngressFCOutProfRemark specifies the remarking type to be used for the in profile packets feeding into the queues.')
tSapIngressFCOutProfDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 12), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCOutProfDscp.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCOutProfDscp.setDescription("tSapIngressFCOutProfDscp specifies the DSCP to be used while remarking the in profile packets when the in-profile remarking type, tSapIngressFCOutProfRemark is specified to be 'dscp'.")
tSapIngressFCOutProfPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 13), TPrecValueOrNone().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCOutProfPrec.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCOutProfPrec.setDescription("tSapIngressFCOutProfPrec specifies the precedence value to be used while remarking the in profile packets when the in-profile remarking type, tSapIngressFCOutProfRemark is specified to be 'precedence'.")
tSapIngressFCProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 14), TProfileOrNone().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCProfile.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCProfile.setDescription("tSapIngressFCProfile specifies the profile of the packets associated with this forwarding class. This object can not be set to anything but 'none' if the queues being used by this mapping do not have their modes, tSapIngressQueueMode set to 'profile'.")
tSapIngressFCDE1OutOfProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 18), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCDE1OutOfProfile.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCDE1OutOfProfile.setDescription("The value of tSapIngressFCDE1OutOfProfile specifies whether frames with DE value of '1' are to be treated as out-of-profile (as if tSapIngressFCProfile was set to 'out'). When tSapIngressFCDE1OutOfProfile is set to 'true', frames with DE value of '1' are autmatically classified as out-of-profile. Frames with DE value of '0' will continue to be policed based on the value of tSapIngressQueueAdminCIR. That is, if the dynamic rate of ingress queue is within CIR, frames with DE=0 will be treated as in-profile (as if tSapIngressFCProfile was set to 'in') otherwise these frames are treated as out-of-profile. When tSapIngressFCDE1OutOfProfile is set to 'true', it supercedes action specified by the value of tSapIngressFCProfile.")
tSapIngressPrecTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 8), )
if mibBuilder.loadTexts: tSapIngressPrecTable.setStatus('current')
if mibBuilder.loadTexts: tSapIngressPrecTable.setDescription('This table maintains the mapping of a particular precedence value into a forwarding class')
tSapIngressPrecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 8, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIndex"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressPrecValue"))
if mibBuilder.loadTexts: tSapIngressPrecEntry.setStatus('current')
if mibBuilder.loadTexts: tSapIngressPrecEntry.setDescription("Information about a particular sap-ingress policy's IP precedence values to forwarding class mappings. Entries are created and deleted by user. They have a presumed StorageType of nonVolatile.")
tSapIngressPrecValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 8, 1, 1), TPrecValue())
if mibBuilder.loadTexts: tSapIngressPrecValue.setStatus('current')
if mibBuilder.loadTexts: tSapIngressPrecValue.setDescription('Precedence value for which the mapping is done.')
tSapIngressPrecRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 8, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressPrecRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSapIngressPrecRowStatus.setDescription('Row Status for this mapping.')
tSapIngressPrecFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 8, 1, 3), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressPrecFC.setStatus('current')
if mibBuilder.loadTexts: tSapIngressPrecFC.setDescription('tSapIngressPrecFC specifies the forwarding class or the sub forwarding class to be used to classify all the traffic that matches the specific precedence value i.e. tSapIngressPrecValue. Specification of a sub forwarding class is also allowed. The format of a sub forwarding class is the concatenation of the base forwarding class and a sub class identifier in the form base-fc-name[.sub-fc-name] To reference a sub forwarding class, the mapping of the sub forwarding class should be existing in this QoS policy. Unless tSapIngressPrecFC is specified explicitly, this match will be ignored for classification purposes.')
tSapIngressPrecFCPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 8, 1, 4), TPriorityOrDefault().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressPrecFCPriority.setStatus('current')
if mibBuilder.loadTexts: tSapIngressPrecFCPriority.setDescription('The priority to be assigned to the matching traffic.')
tSapIngressPrecLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 8, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressPrecLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngressPrecLastChanged.setDescription('timestamp of last change to this row in tSapIngressPrecTable.')
tSapIngressIPv6CriteriaTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9), )
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaTable.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaTable.setDescription("Information about all sap-ingress policies' ipv6-criteria entries.")
tSapIngressIPv6CriteriaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIndex"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaIndex"))
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaEntry.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaEntry.setDescription('Information about a particular ipv6-criteria entry for a sap-ingress policy. Entries are created/deleted by user. There is no StorageType object, entries have a presumed StorageType of nonVolatile.')
tSapIngressIPv6CriteriaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 1), TEntryId())
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaIndex.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaIndex.setDescription('The value of the object tSapIngressIPv6CriteriaIndex specifies uniquely each entry in the policy.')
tSapIngressIPv6CriteriaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaRowStatus.setDescription('The value of the object tSapIngressIPv6CriteriaRowStatus specifies the Row Status for the IPv6 Criteria entry.')
tSapIngressIPv6CriteriaDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 3), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaDescription.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaDescription.setDescription('The value of the object tSapIngressIPv6CriteriaDescription specifies an optional user provided description of this IPv6 criteria entry.')
tSapIngressIPv6CriteriaActionFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 4), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaActionFC.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaActionFC.setDescription('The value of the object tSapIngressIPv6CriteriaActionFC specifies the forwarding class or the sub forwarding class to be used to classify all the traffic that matches the specific IPv6 criteria. Specification of a sub forwarding class is also allowed. The format of a sub forwarding class is the concatenation of the base forwarding class and a sub class identifier in the form base-fc-name[.sub-fc-name] To reference a sub forwarding class, the mapping of the sub forwarding class should be existing in this QoS policy. Unless tSapIngressIPv6CriteriaActionFC is specified explicitly, this match will be ignored for classification purposes.')
tSapIngressIPv6CriteriaActionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 5), TPriorityOrDefault().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaActionPriority.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaActionPriority.setDescription("The value of the object tSapIngressIPv6CriteriaActionPriority specifies the priority for packets which match this entry's criteria. When set to 'default', the packet is sent to the queue from DSCP/dot1p/FC which matched the packet, using the priority from the DSCP/dot1p/FC which matched the packet.")
tSapIngressIPv6CriteriaSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 6), InetAddressIPv6().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaSourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaSourceIpAddr.setDescription('The value of the object tSapIngressIPv6CriteriaSourceIpAddr specifies the IPv6 address to match with source-IPv6 of the packet.')
tSapIngressIPv6CriteriaSourceIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 7), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaSourceIpMask.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaSourceIpMask.setDescription('The value of the object tSapIngressIPv6CriteriaSourceIpMask specifies the prefix is the number of bits of the source IPv6 address to match.')
tSapIngressIPv6CriteriaDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 8), InetAddressIPv6().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaDestIpAddr.setDescription('The value of the object tSapIngressIPv6CriteriaDestIpAddr specifies the IPv6 address to match with destination-IPv6 of the packet.')
tSapIngressIPv6CriteriaDestIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 9), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaDestIpMask.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaDestIpMask.setDescription('The value of the object tSapIngressIPv6CriteriaDestIpMask specifies the prefix is the number of bits of the destination IPv6 address to match.')
tSapIngressIPv6CriteriaNextHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 10), TIpProtocol().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaNextHeader.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaNextHeader.setDescription('The value of the object tSapIngressIPv6CriteriaNextHeader specifies the Next Header to match. use -1 to disable matching by Next Header. Because the match criteria only pertains to the last next-header, the following values are not accepted: 0, 43, 44, 50, 51, and 60.')
tSapIngressIPv6CriteriaSourcePortValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 11), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaSourcePortValue1.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaSourcePortValue1.setDescription('The value of the object tSapIngressIPv6CriteriaSourcePortValue1 specifies the TCP/UDP port value1. The value of this object is used according to the description for tSapIngressIPv6CriteriaSourcePortOperator.')
tSapIngressIPv6CriteriaSourcePortValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 12), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaSourcePortValue2.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaSourcePortValue2.setDescription('The value of the object tSapIngressIPv6CriteriaSourcePortValue2 specifies TCP/UDP port value2. The value of this object is used according to the description for tSapIngressIPv6CriteriaSourcePortOperator.')
tSapIngressIPv6CriteriaSourcePortOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 13), TTcpUdpPortOperator().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaSourcePortOperator.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaSourcePortOperator.setDescription('The value of the object tSapIngressIPv6CriteriaSourcePortOperator specifies The operator specifies the manner in which tSapIngressIPv6CriteriaSourcePortValue1 and tSapIngressIPv6CriteriaSourcePortValue2 are to be used.')
tSapIngressIPv6CriteriaDestPortValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 14), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaDestPortValue1.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaDestPortValue1.setDescription('The value of the object tSapIngressIPv6CriteriaDestPortValue1 specifies the TCP/UDP port value1. The value of this object is used according to the description for tSapIngressIPv6CriteriaDestPortOperator.')
tSapIngressIPv6CriteriaDestPortValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 15), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaDestPortValue2.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaDestPortValue2.setDescription('The value of the object tSapIngressIPv6CriteriaDestPortValue2 specifies the TCP/UDP port value2. The value of this object is used according to the description for tSapIngressIPv6CriteriaDestPortOperator.')
tSapIngressIPv6CriteriaDestPortOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 16), TTcpUdpPortOperator().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaDestPortOperator.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaDestPortOperator.setDescription('The value of the object tSapIngressIPv6CriteriaDestPortOperator specifies the manner in which tSapIngressIPv6CriteriaDestPortValue1 and tSapIngressIPv6CriteriaDestPortValue2 are to be used.')
tSapIngressIPv6CriteriaDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 17), TDSCPNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaDSCP.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaDSCP.setDescription('The value of the object tSapIngressIPv6CriteriaDSCP specifies the DSCP value to match in the packet')
tSapIngressIPv6CriteriaLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 20), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaLastChanged.setDescription('The value of the object indicates timestamp of last change to this row in tSapIngressIPv6CriteriaTable.')
tSapEgressTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 1), )
if mibBuilder.loadTexts: tSapEgressTable.setStatus('current')
if mibBuilder.loadTexts: tSapEgressTable.setDescription('information about all sap-egress policies.')
tSapEgressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressIndex"))
if mibBuilder.loadTexts: tSapEgressEntry.setStatus('current')
if mibBuilder.loadTexts: tSapEgressEntry.setDescription('Information about a particular sap-egress policy. Entries are created by user. Entries are deleted by user. There is no StorageType object, entries have a presumed StorageType of nonVolatile. the default sap-egress policy (1) cannot be changed or destroyed. ')
tSapEgressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 1, 1, 1), TSapEgressPolicyID())
if mibBuilder.loadTexts: tSapEgressIndex.setStatus('current')
if mibBuilder.loadTexts: tSapEgressIndex.setDescription('the sap-egress policy ID is used as index for the table.')
tSapEgressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSapEgressRowStatus.setDescription("Row Status of this policy's entry.")
tSapEgressScope = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 1, 1, 3), TItemScope().clone('template')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressScope.setStatus('current')
if mibBuilder.loadTexts: tSapEgressScope.setDescription('scope of the sap-egress policy.')
tSapEgressDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 1, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressDescription.setStatus('current')
if mibBuilder.loadTexts: tSapEgressDescription.setDescription('user-supplied description of this sap-egress policy.')
tSapEgressLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 1, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapEgressLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapEgressLastChanged.setDescription('timestamp of last change to this row in tSapEgressTable.')
tSapEgressQueueTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2), )
if mibBuilder.loadTexts: tSapEgressQueueTable.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueTable.setDescription("information about all sap-egress policies' queues.")
tSapEgressQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressIndex"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueIndex"))
if mibBuilder.loadTexts: tSapEgressQueueEntry.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueEntry.setDescription('Information about a particular sap-egress queue. Entries are created/deleted by user. There is no StorageType object, entries have a presumed StorageType of nonVolatile.')
tSapEgressQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 1), TEgressQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: tSapEgressQueueIndex.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueIndex.setDescription('the number of a queue. zero is not allowed. for sap-egress, only three queues are allowed, so the queue index range is restricted.')
tSapEgressQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueRowStatus.setDescription('Row Status of the entry.')
tSapEgressQueueParent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 3), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueParent.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueParent.setDescription('The scheduler to which this queue would be feeding to.')
tSapEgressQueueLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 4), TLevel().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueLevel.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueLevel.setDescription('This specifies the level of priority while feeding to the parent.')
tSapEgressQueueWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 5), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueWeight.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueWeight.setDescription('The weight that needs to be used by the scheduler to which this queue would be feeding to.')
tSapEgressQueueCIRLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 6), TLevelOrDefault()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueCIRLevel.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueCIRLevel.setDescription("This specifies the level of priority while feeding to the parent. The level '0' means treat all offered load for this queue as for the above CIR traffic.")
tSapEgressQueueCIRWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 7), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueCIRWeight.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueCIRWeight.setDescription('The weight that needs to be used until the committed rate by the scheduler to which this queue would be feeding to.')
tSapEgressQueueExpedite = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("expedited", 1), ("auto-expedited", 2), ("non-expedited", 3))).clone('auto-expedited')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueExpedite.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueExpedite.setDescription("tSapEgressQueueExpedite specifies the priority that this queue should be assigned by the hardware level schedulers. The value 'auto-expedited' implies that this attribute should be dynamically updated by looking at the forwarding classes mapping into this queue. In such a case the queue is treated as 'non-expedited' if there is even a single non-expedited forwarding class using this queue. This attribute is associated with the queue at the time of creation and cannot be modified thereafter.")
tSapEgressQueueCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 9), TBurstSize().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueCBS.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueCBS.setDescription('The amount of reserved buffer space (in kilo bytes) for the queue.')
tSapEgressQueueMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 10), TBurstSize().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueMBS.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueMBS.setDescription('The maximum amount of buffer space (in kilo bytes) allowed for the queue.')
tSapEgressQueueHiPrioOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 11), TBurstPercentOrDefault().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueHiPrioOnly.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueHiPrioOnly.setDescription('The percentage of buffer space for the queue, used exclusively by high priority packets.')
tSapEgressQueuePIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 12), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueuePIRAdaptation.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueuePIRAdaptation.setDescription('The adaptation rule to be used while computing the operational PIR value. The adaptation rule specifies the rules to compute the operational values while maintaining minimum offset.')
tSapEgressQueueCIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 13), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueCIRAdaptation.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueCIRAdaptation.setDescription('The adaptation rule to be used while computing the operational CIR value. The adaptation rule specifies the rules to compute the operational values while maintaining minimum offset.')
tSapEgressQueueAdminPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 14), TPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueAdminPIR.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueAdminPIR.setDescription('The administrative PIR specified by the user.')
tSapEgressQueueAdminCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 15), TCIRRate()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueAdminCIR.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueAdminCIR.setDescription('The administrative CIR specified by the user.')
tSapEgressQueueOperPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 16), TPIRRate()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapEgressQueueOperPIR.setStatus('obsolete')
if mibBuilder.loadTexts: tSapEgressQueueOperPIR.setDescription('The administrative PIR specified by the user.')
tSapEgressQueueOperCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 17), TCIRRate()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapEgressQueueOperCIR.setStatus('obsolete')
if mibBuilder.loadTexts: tSapEgressQueueOperCIR.setDescription('The operational value derived by computing the CIR value from the administrative CIR and PIR values and their corresponding adaptation rules.')
tSapEgressQueueLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 18), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapEgressQueueLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueLastChanged.setDescription('timestamp of last change to this row in tSapEgressQueueTable.')
tSapEgressQueueUsePortParent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 19), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueUsePortParent.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueUsePortParent.setDescription("The value of the object tSapEgressQueueUsePortParent specifies whether this queue is parented by a port-level scheduler. When the value is 'true', this SAP egress queue is parented by a port-level scheduler. This object is mutually exclusive with tSapEgressQueueParent. Only one kind of parent is allowed.")
tSapEgressQueuePortLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 20), TLevel().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueuePortLvl.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueuePortLvl.setDescription('The value of the object tSapEgressQueuePortLvl specifies the port priority this queue will use to receive bandwidth from the port-level scheduler for its above-cir offered load.')
tSapEgressQueuePortWght = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 21), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueuePortWght.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueuePortWght.setDescription('The value of the object tSapEgressQueuePortWght specifies the weight this queue will use to receive bandwidth from the port-level scheduler for its above-cir offered load.')
tSapEgressQueuePortCIRLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 22), TLevelOrDefault()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueuePortCIRLvl.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueuePortCIRLvl.setDescription('The value of the object tSapEgressQueuePortCIRLvl specifies the port priority this queue will use to receive bandwidth from the port-level scheduler for its within-cir offered load.')
tSapEgressQueuePortCIRWght = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 23), TWeight()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueuePortCIRWght.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueuePortCIRWght.setDescription('The value of the object tSapEgressQueuePortCIRWght specifies the weight this queue will use to receive bandwidth from the port-level scheduler for its within-cir offered load.')
tSapEgressQueuePortAvgOverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('Hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueuePortAvgOverhead.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueuePortAvgOverhead.setDescription('The value of tSapEgressQueuePortAvgOverhead specifies the encapsulation overhead, in hundredths of a percent, used to translate packet-based rate to frame-based rate and vice versa.')
tSapEgressQueuePoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 25), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueuePoolName.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueuePoolName.setDescription('The value of tSapEgressQueuePoolName specifies the name of the pool to be applied for SAP egress queue.')
tSapEgressFCTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3), )
if mibBuilder.loadTexts: tSapEgressFCTable.setStatus('current')
if mibBuilder.loadTexts: tSapEgressFCTable.setDescription(' ')
tSapEgressFCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressIndex"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCName"))
if mibBuilder.loadTexts: tSapEgressFCEntry.setStatus('current')
if mibBuilder.loadTexts: tSapEgressFCEntry.setDescription("Information about a particular sap-egress policy's forwarding class mappings to queues and dot1p values. Entries are created/deleted by user. There is no StorageType object, entries have a presumed StorageType of nonVolatile. ")
tSapEgressFCName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 1), TFCName())
if mibBuilder.loadTexts: tSapEgressFCName.setStatus('current')
if mibBuilder.loadTexts: tSapEgressFCName.setDescription('forwarding class name.')
tSapEgressFCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressFCRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSapEgressFCRowStatus.setDescription('Row Status for this queue.')
tSapEgressFCQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 3), TEgressQueueId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressFCQueue.setStatus('current')
if mibBuilder.loadTexts: tSapEgressFCQueue.setDescription("The queue to use for packets in this forwarding class. No FC can map to the same queue being used by 'premium' class. You must specify a valid queue-id before setting the row status to active.")
tSapEgressFCDot1PValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 4), Dot1PPriority().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressFCDot1PValue.setStatus('obsolete')
if mibBuilder.loadTexts: tSapEgressFCDot1PValue.setDescription('The value of tSapEgressFCDot1PValue specifies 802.1p value to use for packets in this forwarding class. This object has been replaced by tSapEgressFCDot1PInProfile and tSapEgressFCDot1POutProfile objects.')
tSapEgressFCLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapEgressFCLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapEgressFCLastChanged.setDescription('timestamp of last change to this row in tSapEgressFCTable.')
tSapEgressFCDot1PInProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 8), Dot1PPriority().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressFCDot1PInProfile.setStatus('current')
if mibBuilder.loadTexts: tSapEgressFCDot1PInProfile.setDescription("The value of tSapEgressFCDot1PInProfile specifies 802.1p value to set for in-profile frames in this forwarding class. An inconsistentValue error is returned if this object is set to any value other than '-1', when tSapEgressFCDot1POutProfile object is set to '-1'.")
tSapEgressFCDot1POutProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 9), Dot1PPriority().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressFCDot1POutProfile.setStatus('current')
if mibBuilder.loadTexts: tSapEgressFCDot1POutProfile.setDescription("The value of tSapEgressFCDot1POutProfile specifies 802.1p value to set for out-profile frames in this forwarding class. An inconsistentValue error is returned if this object is set to any value other than '-1', when tSapEgressFCDot1PInProfile object is set to '-1'.")
tSapEgressFCForceDEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 10), TDEValue().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressFCForceDEValue.setStatus('current')
if mibBuilder.loadTexts: tSapEgressFCForceDEValue.setDescription("The value of tSapEgressFCForceDEValue specifies the DE value to set for all the frames of this forwarding class regardless of frame's profile status. An inconsistentValue error is returned if this object is set to any value other than '-1', when tSapEgressFCDEMark object is set to 'false'.")
tSapEgressFCDEMark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressFCDEMark.setStatus('current')
if mibBuilder.loadTexts: tSapEgressFCDEMark.setDescription("The value of tSapEgressFCDEMark specifies whether to set DE value in the frames of this forwarding class. An inconsistentValue error is returned if this object is set to 'false' when tSapEgressFCForceDEValue object is not set to '-1'.")
tSapEgressFCInProfDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 12), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressFCInProfDscp.setStatus('current')
if mibBuilder.loadTexts: tSapEgressFCInProfDscp.setDescription('The value of tSapEgressFCInProfDscp specifies the DSCP name to set for in-profile frames in this forwarding class. The values of tSapEgressFCInProfDscp and tSapEgressFCOutProfDscp must be set to either the default or non-default values for both. An inconsistentValue error is returned if one object is set to the default and other is set to a non-default value. The values of tSapEgressFCInProfPrec and tSapEgressFCOutProfPrec are reset to default values when tSapEgressFCInProfDscp is set to any value other than default. An inconsistentValue error is returned if this object is set to any value other than its default value when setting tSapEgressFCInProfPrec object or tSapEgressFCOutProfPrec to a value other than their default values.')
tSapEgressFCOutProfDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 13), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressFCOutProfDscp.setStatus('current')
if mibBuilder.loadTexts: tSapEgressFCOutProfDscp.setDescription('The value of tSapEgressFCOutProfDscp specifies the DSCP name to set for out-profile frames in this forwarding class. The values of tSapEgressFCInProfDscp and tSapEgressFCOutProfDscp must be set to either the default or non-default values for both. An inconsistentValue error is returned if one object is set to the default and other is set to a non-default value. The values of tSapEgressFCInProfPrec and tSapEgressFCOutProfPrec are reset to default values when tSapEgressFCOutProfDscp is set to any value other than default. An inconsistentValue error is returned if this object is set to any value other than its default value when setting tSapEgressFCInProfPrec object or tSapEgressFCOutProfPrec to a value other than their default values.')
tSapEgressFCInProfPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 14), TPrecValueOrNone().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressFCInProfPrec.setStatus('current')
if mibBuilder.loadTexts: tSapEgressFCInProfPrec.setDescription('The value of tSapEgressFCInProfPrec specifies the precedence value to set for in-profile frames in this forwarding class. The values of tSapEgressFCInProfPrec and tSapEgressFCOutProfPrec must be set to either the default or non-default values for both. An inconsistentValue error is returned if one object is set to the default and other is set to a non-default value. The values of tSapEgressFCInProfDscp and tSapEgressFCOutProfDscp are reset to default values when tSapEgressFCOutProfPrec is set to any value other than default. An inconsistentValue error is returned if this object is set to any value other than its default value when setting tSapEgressFCInProfDscp object or tSapEgressFCOutProfDscp to a value other than their default values.')
tSapEgressFCOutProfPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 15), TPrecValueOrNone().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressFCOutProfPrec.setStatus('current')
if mibBuilder.loadTexts: tSapEgressFCOutProfPrec.setDescription('The value of tSapEgressFCOutProfPrec specifies the precedence value to set for out-profile frames in this forwarding class. The values of tSapEgressFCInProfPrec and tSapEgressFCOutProfPrec must be be set to either the default or non-default values for both. An inconsistentValue error is returned if one object is set to the default and other is set to a non-default value. The values of tSapEgressFCInProfDscp and tSapEgressFCOutProfDscp are reset to default values when tSapEgressFCOutProfPrec is set to any value other than default. An inconsistentValue error is returned if this object is set to any value other than its default value when setting tSapEgressFCInProfDscp object or tSapEgressFCOutProfDscp to a value other than their default values.')
tNetworkPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 1), )
if mibBuilder.loadTexts: tNetworkPolicyTable.setStatus('current')
if mibBuilder.loadTexts: tNetworkPolicyTable.setDescription(' ')
tNetworkPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyIndex"))
if mibBuilder.loadTexts: tNetworkPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: tNetworkPolicyEntry.setDescription('Information about a particular Network Policy. network policy (1) is the default entry. Default Entry is created by the agent, other entries are created by user. Default Entry cannot be modified/deleted. The other entries are deleted by user. There is no StorageType object, entries have a presumed StorageType of nonVolatile. The default Egress FC entries are created as an action of setting the rowstatus.')
tNetworkPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 1, 1, 1), TNetworkPolicyID())
if mibBuilder.loadTexts: tNetworkPolicyIndex.setReference('')
if mibBuilder.loadTexts: tNetworkPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: tNetworkPolicyIndex.setDescription('')
tNetworkPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: tNetworkPolicyRowStatus.setDescription('')
tNetworkPolicyScope = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 1, 1, 5), TItemScope().clone('template')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkPolicyScope.setStatus('current')
if mibBuilder.loadTexts: tNetworkPolicyScope.setDescription('')
tNetworkPolicyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 1, 1, 6), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkPolicyDescription.setStatus('current')
if mibBuilder.loadTexts: tNetworkPolicyDescription.setDescription('tNetworkPolicyDescription holds the description for this policy.')
tNetworkPolicyIngressDefaultActionFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 1, 1, 7), TFCName().clone(hexValue="be")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkPolicyIngressDefaultActionFC.setStatus('current')
if mibBuilder.loadTexts: tNetworkPolicyIngressDefaultActionFC.setDescription('tNetworkPolicyIngressDefaultActionFC specifies the default forwarding class to be used while classifying the ingress traffic.')
tNetworkPolicyIngressDefaultActionProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 1, 1, 8), TProfile().clone('out')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkPolicyIngressDefaultActionProfile.setStatus('current')
if mibBuilder.loadTexts: tNetworkPolicyIngressDefaultActionProfile.setDescription('tNetworkPolicyIngressDefaultActionProfile specifies the default profile to be used for the ingressing traffic.')
tNetworkPolicyEgressRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 1, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkPolicyEgressRemark.setStatus('current')
if mibBuilder.loadTexts: tNetworkPolicyEgressRemark.setDescription('The object tNetworkPolicyEgressRemark specifies if the system will remark the egress packets or not.')
tNetworkPolicyLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 1, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkPolicyLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNetworkPolicyLastChanged.setDescription('Timestamp of last change to this row in tNetworkPolicyTable.')
tNetworkPolicyIngressLerUseDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkPolicyIngressLerUseDscp.setStatus('current')
if mibBuilder.loadTexts: tNetworkPolicyIngressLerUseDscp.setDescription('The object has significance only for the label edge routers which should honor the DSCP markings instead of the LSPEXP bits.')
tNetworkIngressDSCPTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 2), )
if mibBuilder.loadTexts: tNetworkIngressDSCPTable.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressDSCPTable.setDescription(' ')
tNetworkIngressDSCPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyIndex"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDSCP"))
if mibBuilder.loadTexts: tNetworkIngressDSCPEntry.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressDSCPEntry.setDescription('Information about a dscp map for a network policy. Some default entries are created by the agent for the default network policy (1). These cannot be deleted or modified. Other entries are created/deleted by user. There is no StorageType object, entries have a presumed StorageType of nonVolatile. ')
tNetworkIngressDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 2, 1, 1), TDSCPName())
if mibBuilder.loadTexts: tNetworkIngressDSCP.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressDSCP.setDescription('')
tNetworkIngressDSCPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkIngressDSCPRowStatus.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressDSCPRowStatus.setDescription('')
tNetworkIngressDSCPFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 2, 1, 3), TFCNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkIngressDSCPFC.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressDSCPFC.setDescription('')
tNetworkIngressDSCPProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 2, 1, 4), TProfile()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkIngressDSCPProfile.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressDSCPProfile.setDescription('there is no DEFVAL for this object. it must be deliberately set before activating the row.')
tNetworkIngressDSCPLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 2, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkIngressDSCPLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressDSCPLastChanged.setDescription('timestamp of last change to this row in tNetworkIngressDSCPTable.')
tNetworkIngressDot1pTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 3), )
if mibBuilder.loadTexts: tNetworkIngressDot1pTable.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressDot1pTable.setDescription(' ')
tNetworkIngressDot1pEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyIndex"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDot1pValue"))
if mibBuilder.loadTexts: tNetworkIngressDot1pEntry.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressDot1pEntry.setDescription('Information about a dot1p map for a network policy. Some default entries are created by the agent for the default network policy (1). These cannot be deleted or modified. Other entries are created/deleted by user. There is no StorageType object, entries have a presumed StorageType of nonVolatile. ')
tNetworkIngressDot1pValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 3, 1, 1), Dot1PPriority().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: tNetworkIngressDot1pValue.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressDot1pValue.setDescription('')
tNetworkIngressDot1pRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkIngressDot1pRowStatus.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressDot1pRowStatus.setDescription('')
tNetworkIngressDot1pFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 3, 1, 3), TFCNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkIngressDot1pFC.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressDot1pFC.setDescription('')
tNetworkIngressDot1pProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 3, 1, 4), TDEProfile()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkIngressDot1pProfile.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressDot1pProfile.setDescription('there is no DEFVAL for this object. It must be deliberately set before activating the row.')
tNetworkIngressDot1pLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 3, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkIngressDot1pLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressDot1pLastChanged.setDescription('timestamp of last change to this row in tNetworkIngressDot1pTable.')
tNetworkIngressLSPEXPTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 4), )
if mibBuilder.loadTexts: tNetworkIngressLSPEXPTable.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressLSPEXPTable.setDescription(' ')
tNetworkIngressLSPEXPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyIndex"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressLSPEXP"))
if mibBuilder.loadTexts: tNetworkIngressLSPEXPEntry.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressLSPEXPEntry.setDescription('Information about LSP EXP mapping for a network policy. Some default entries are created by the agent for the default network policy (1). These cannot be deleted or modified. Other entries are created/deleted by user. There is no StorageType object, entries have a presumed StorageType of nonVolatile.')
tNetworkIngressLSPEXP = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 4, 1, 1), TLspExpValue().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: tNetworkIngressLSPEXP.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressLSPEXP.setDescription('')
tNetworkIngressLSPEXPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkIngressLSPEXPRowStatus.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressLSPEXPRowStatus.setDescription('')
tNetworkIngressLSPEXPFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 4, 1, 3), TFCNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkIngressLSPEXPFC.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressLSPEXPFC.setDescription('')
tNetworkIngressLSPEXPProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 4, 1, 4), TProfile()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkIngressLSPEXPProfile.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressLSPEXPProfile.setDescription('there is no DEFVAL for this object. it must be deliberately set before activating the row.')
tNetworkIngressLSPEXPLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 4, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkIngressLSPEXPLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressLSPEXPLastChanged.setDescription('timestamp of last change to this row in tNetworkIngressLSPEXPTable.')
tNetworkEgressFCTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 7), )
if mibBuilder.loadTexts: tNetworkEgressFCTable.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressFCTable.setDescription("Information about all network policies' egress FC traffic disposition.")
tNetworkEgressFCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 7, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyIndex"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCName"))
if mibBuilder.loadTexts: tNetworkEgressFCEntry.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressFCEntry.setDescription("Information about a particular network policy's egress per-forwarding-class traffic disposition. Entries are created/deleted as an action of creating/deleting a row in the tNetworkPolicyTable. There is no StorageType object, entries have a presumed StorageType of nonVolatile.")
tNetworkEgressFCName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 7, 1, 1), TFCName())
if mibBuilder.loadTexts: tNetworkEgressFCName.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressFCName.setDescription('the name of the forwarding class (FC).')
tNetworkEgressFCDSCPInProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 7, 1, 2), TDSCPNameOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tNetworkEgressFCDSCPInProfile.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressFCDSCPInProfile.setDescription('the DSCP to use for in-profile traffic.')
tNetworkEgressFCDSCPOutProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 7, 1, 3), TDSCPNameOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tNetworkEgressFCDSCPOutProfile.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressFCDSCPOutProfile.setDescription('the DSCP to use for out-of-profile traffic.')
tNetworkEgressFCLspExpInProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 7, 1, 4), TLspExpValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tNetworkEgressFCLspExpInProfile.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressFCLspExpInProfile.setDescription('the lsp-exp value to use for in-profile traffic.')
tNetworkEgressFCLspExpOutProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 7, 1, 5), TLspExpValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tNetworkEgressFCLspExpOutProfile.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressFCLspExpOutProfile.setDescription('the lsp-exp value to use for out-of-profile traffic.')
tNetworkEgressFCDot1pInProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 7, 1, 6), Dot1PPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tNetworkEgressFCDot1pInProfile.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressFCDot1pInProfile.setDescription('the Dot1p to use for in-profile traffic.')
tNetworkEgressFCDot1pOutProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 7, 1, 7), Dot1PPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tNetworkEgressFCDot1pOutProfile.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressFCDot1pOutProfile.setDescription('the Dot1p to use for out-of-profile traffic.')
tNetworkEgressFCLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 7, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkEgressFCLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressFCLastChanged.setDescription('timestamp of last change to this row in tNetworkEgressFCTable.')
tNetworkEgressFCForceDEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 7, 1, 9), TDEValue().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tNetworkEgressFCForceDEValue.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressFCForceDEValue.setDescription("The value of tNetworkEgressFCForceDEValue specifies the DE value to set for network egress packets in this forwarding class regardless of profile status of the frames. An inconsistentValue error is returned if this object is set to any value other than '-1', when tNetworkEgressFCDEMark object is set to 'false'.")
tNetworkEgressFCDEMark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 7, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tNetworkEgressFCDEMark.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressFCDEMark.setDescription("The value of tNetworkEgressFCDEMark specifies whether to set DE value in the frames of this forwarding class. An inconsistentValue error is returned if this object is set to 'false' when tNetworkEgressFCForceDEValue object is not set to '-1'.")
tNetworkQueuePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 1), )
if mibBuilder.loadTexts: tNetworkQueuePolicyTable.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueuePolicyTable.setDescription(' ')
tNetworkQueuePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePolicy"))
if mibBuilder.loadTexts: tNetworkQueuePolicyEntry.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueuePolicyEntry.setDescription('')
tNetworkQueuePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 1, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tNetworkQueuePolicy.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueuePolicy.setDescription('')
tNetworkQueuePolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueuePolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueuePolicyRowStatus.setDescription('')
tNetworkQueuePolicyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 1, 1, 3), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueuePolicyDescription.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueuePolicyDescription.setDescription('')
tNetworkQueuePolicyLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 1, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkQueuePolicyLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueuePolicyLastChanged.setDescription('')
tNetworkQueueTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2), )
if mibBuilder.loadTexts: tNetworkQueueTable.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueTable.setDescription('')
tNetworkQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePolicy"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueue"))
if mibBuilder.loadTexts: tNetworkQueueEntry.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueEntry.setDescription('')
tNetworkQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 1), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: tNetworkQueue.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueue.setDescription('The queue ID is used as the secondary index to the table entry.')
tNetworkQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueRowStatus.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueRowStatus.setDescription('Row Status of the entry. This allows creation/deletion of rows in this table.')
tNetworkQueuePoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 3), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueuePoolName.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueuePoolName.setDescription('The tNetworkQueuePoolName specifies the pool that is associated with this network queue. If tNetworkQueuePoolName is empty, no pool has been associated with the queue.')
tNetworkQueueParent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 4), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueParent.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueParent.setDescription('The scheduler to which this queue would be feeding to.')
tNetworkQueueLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 5), TLevel().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueLevel.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueLevel.setDescription('This specifies the level of priority while feeding to the parent.')
tNetworkQueueWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 6), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueWeight.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueWeight.setDescription('The weight that needs to be used by the scheduler to which this queue would be feeding to.')
tNetworkQueueCIRLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 7), TLevelOrDefault()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueCIRLevel.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueCIRLevel.setDescription("This specifies the level of priority while feeding to the parent. The level '0' means treat all offered load for this queue as for the above CIR traffic.")
tNetworkQueueCIRWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 8), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueCIRWeight.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueCIRWeight.setDescription('The weight that needs to be used until the committed rate by the scheduler to which this queue would be feeding to.')
tNetworkQueueMCast = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueMCast.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueMCast.setDescription('This object specifies if this is a multicast queue or not.')
tNetworkQueueExpedite = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("expedited", 1), ("auto-expedited", 2), ("non-expedited", 3))).clone('auto-expedited')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueExpedite.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueExpedite.setDescription("tNetworkQueueExpedite specifies the priority that this queue should be assigned by the hardware level schedulers. The value 'auto-expedited' implies that this attribute should be dynamically updated by looking at the forwarding classes mapping into this queue. In such a case the queue is treated as 'non-expedited' if there is even a single non-expedited forwarding class using this queue. This attribute is associated with the queue at the time of creation and cannot be modified thereafter.")
tNetworkQueueCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 11), TRatePercent()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueCIR.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueCIR.setDescription('The percentage of max rate allowed.')
tNetworkQueuePIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 12), TPIRRatePercent().clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueuePIR.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueuePIR.setDescription('The percentage of max rate allowed.')
tNetworkQueueCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 13), TBurstHundredthsOfPercent()).setUnits('Hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueCBS.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueCBS.setDescription('The percentage of reserved buffer space for the queue, defined to two decimal places.')
tNetworkQueueMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 14), TBurstHundredthsOfPercent().clone(10000)).setUnits('Hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueMBS.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueMBS.setDescription('The percentage of reserved buffer space for the queue, defined to two decimal places.')
tNetworkQueueHiPrioOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 15), TBurstPercentOrDefault().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueHiPrioOnly.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueHiPrioOnly.setDescription('The percentage of buffer space for the queue, used exclusively by high priority packets.')
tNetworkQueueLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 16), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkQueueLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueLastChanged.setDescription('The value of the object tNetworkQueueLastChanged indicates the timestamp of last change to this row in tNetworkQueueTable.')
tNetworkQueueUsePortParent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueUsePortParent.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueUsePortParent.setDescription("The value of the object tNetworkQueueUsePortParent specifies whether this queue is parented by a port-level scheduler. When the value is 'true', this network queue is parented by a port-level scheduler.")
tNetworkQueuePortLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 18), TLevel().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueuePortLvl.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueuePortLvl.setDescription('The value of the object tNetworkQueuePortLvl specifies the port priority this queue will use to receive bandwidth from the port-level scheduler for its above-cir offered load.')
tNetworkQueuePortWght = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 19), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueuePortWght.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueuePortWght.setDescription('The value of the object tNetworkQueuePortWght specifies the weight this queue will use to receive bandwidth from the port-level scheduler for its above-cir offered load.')
tNetworkQueuePortCIRLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 20), TLevelOrDefault()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueuePortCIRLvl.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueuePortCIRLvl.setDescription('The value of the object tNetworkQueuePortCIRLvl specifies the port priority this queue will use to receive bandwidth from the port-level scheduler for its within-cir offered load.')
tNetworkQueuePortCIRWght = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 21), TWeight()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueuePortCIRWght.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueuePortCIRWght.setDescription('The value of the object tNetworkQueuePortCIRWght specifies the weight this queue will use to receive bandwidth from the port-level scheduler for its within-cir offered load.')
tNetworkQueuePortAvgOverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('Hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueuePortAvgOverhead.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueuePortAvgOverhead.setDescription('The value of tNetworkQueuePortAvgOverhead specifies the encapsulation overhead, in hundredths of a percent, used to translate packet-based rate to frame-based rate and vice versa.')
tNetworkQueueCIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 23), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueCIRAdaptation.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueCIRAdaptation.setDescription('The value of tNetworkQueueCIRAdaptation specifies the adaptation rule to be used while computing the operational CIR value. The adaptation rule specifies the rules to compute the operational value while maintaining the minimum offset.')
tNetworkQueuePIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 24), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueuePIRAdaptation.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueuePIRAdaptation.setDescription('The value of tNetworkQueuePIRAdaptation specifies the adaptation rule to be used while computing the operational PIR value. The adaptation rule specifies the rules to compute the operational value while maintaining the minimum offset.')
tNetworkQueueFCTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 3), )
if mibBuilder.loadTexts: tNetworkQueueFCTable.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueFCTable.setDescription('')
tNetworkQueueFCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePolicy"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueFCName"))
if mibBuilder.loadTexts: tNetworkQueueFCEntry.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueFCEntry.setDescription('')
tNetworkQueueFCName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 3, 1, 1), TFCName())
if mibBuilder.loadTexts: tNetworkQueueFCName.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueFCName.setDescription('Forwarding class name.')
tNetworkQueueFCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueFCRowStatus.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueFCRowStatus.setDescription('Row Status for this queue.')
tNetworkQueueFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 3, 1, 3), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueFC.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueFC.setDescription('The specific queue to be used for packets in this forwarding class.')
tNetworkQueueFCMCast = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 3, 1, 4), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueFCMCast.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueFCMCast.setDescription('The specific multicast queue to be used for packets in this forwarding class. The queue is used only for specific entities and will be ignored wherever it is irrelevant.')
tNetworkQueueFCLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 3, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkQueueFCLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueFCLastChanged.setDescription('timestamp of last change to this row in tNetworkQueueFCTable.')
tSharedQueuePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 1), )
if mibBuilder.loadTexts: tSharedQueuePolicyTable.setStatus('current')
if mibBuilder.loadTexts: tSharedQueuePolicyTable.setDescription("Defines the Alcatel 7x50 SR series Shared Queue Policy Table for providing, via SNMP, the capability of defining the queue policies. tSharedQueuePolicyTable holds a list of all shared queue policies in the managed system. Shared queue policies should exist in this table before being referenced elsewhere. There is a default queue policy 'default' created by the agent and can not be deleted.")
tSharedQueuePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueuePolicy"))
if mibBuilder.loadTexts: tSharedQueuePolicyEntry.setStatus('current')
if mibBuilder.loadTexts: tSharedQueuePolicyEntry.setDescription('Defines an entry in the tSharedQueuePolicyTable. Entries are created and deleted in this table by SNMP sets to tSharedQueuePolicyRowStatus.')
tSharedQueuePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 1, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tSharedQueuePolicy.setStatus('current')
if mibBuilder.loadTexts: tSharedQueuePolicy.setDescription('tSharedQueuePolicy serves as an index and uniquely identifies a queue policy in the managed system.')
tSharedQueuePolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueuePolicyRowStatus.setReference("See definition of RowStatus in RFC 2579, 'Textual Conventions for SMIv2.'")
if mibBuilder.loadTexts: tSharedQueuePolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSharedQueuePolicyRowStatus.setDescription('tSharedQueuePolicyRowStatus allows entries to be created and deleted in the tSharedQueuePolicyTable. The deletion of an entry in this table will fail if the action is performed on the default policy or the policy is being used within the system.')
tSharedQueuePolicyLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSharedQueuePolicyLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSharedQueuePolicyLastChanged.setDescription('tSharedQueuePolicyLastChanged indicates the value of sysUpTime when the queue policy entry was last modified.')
tSharedQueuePolicyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 1, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueuePolicyDescription.setStatus('current')
if mibBuilder.loadTexts: tSharedQueuePolicyDescription.setDescription('tSharedQueuePolicyDescription specifies the user provided description string for this queue policy entry. It can consist of only the printable, seven-bit ASCII characters.')
tSharedQueueTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2), )
if mibBuilder.loadTexts: tSharedQueueTable.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueTable.setDescription("Defines the Alcatel 7x50 SR series Shared Queue Table for providing, via SNMP, the capability of defining the queues for the shared queue policies existing in the tSharedQueuePolicyTable. tSharedQueueTable holds a list of all the shared queues in the managed system defined for the queue policies. Queues should exist in this table before being referenced by the forwarding class mappings within the queue policy as defined in the tSharedQueueFCTable. There is a default queue with the queue identifier '1' which gets created automatically when a new queue policy is created.")
tSharedQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueuePolicy"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueId"))
if mibBuilder.loadTexts: tSharedQueueEntry.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueEntry.setDescription('Defines an entry in the tSharedQueueTable. Entries are created/deleted in this table by SNMP sets to tSharedQueueRowStatus. An exception to this rule is the default queue. The default queue is created/deleted as a result of the creation/deletion of a new queue policy in the tSharedQueuePolicyTable.')
tSharedQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 1), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: tSharedQueueId.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueId.setDescription('tSharedQueueId serves as the secondary index. When used in conjunction with tSharedQueuePolicy, it uniquely identifies a shared queue in the managed system.')
tSharedQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueRowStatus.setReference("See definition of RowStatus in RFC 2579, 'Textual Conventions for SMIv2.'")
if mibBuilder.loadTexts: tSharedQueueRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueRowStatus.setDescription('tSharedQueueRowStatus allows entries to be created and deleted in the tSharedQueueTable. The deletion of an entry in this table will fail if the action is performed on the default queue or if the queue is being referenced by a forwarding class mapping in the queue policy.')
tSharedQueueLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSharedQueueLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueLastChanged.setDescription('tSharedQueueLastChanged indicates the value of sysUpTime when the queue entry was last modified.')
tSharedQueuePoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 4), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueuePoolName.setStatus('current')
if mibBuilder.loadTexts: tSharedQueuePoolName.setDescription('tSharedQueuePoolName specifies the pool from which the queue should be allocating its buffer. By default it will share the default pool being used by the entity where the queue is instantiated.')
tSharedQueueParent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 5), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueParent.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueParent.setDescription('tSharedQueueParent specifies the scheduler to which this queue should be feeding into. By default there would be no parent for the queue and it will be controlled by the entity where the queue is instantiated.')
tSharedQueueLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 6), TLevel().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueLevel.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueLevel.setDescription('tSharedQueueLevel specifies the level of priority to be used by the parent entity to compute the priority of this queue when the traffic is exceeding the committed rate.')
tSharedQueueWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 7), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueWeight.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueWeight.setDescription('tSharedQueueWeight specifies the weight that this queue should be assigned by the parent among all the entities feeding into the parent with the same level when the traffic is exceeding the committed rate.')
tSharedQueueCIRLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 8), TLevelOrDefault()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueCIRLevel.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueCIRLevel.setDescription("tSharedQueueCIRLevel specifies the level of priority to be used by the parent entity to compute the priority of this queue when the traffic is conforming to the committed rate. The level '0' means treat all offered load for this queue same as the load which is exceeding the committed rate.")
tSharedQueueCIRWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 9), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueCIRWeight.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueCIRWeight.setDescription('tSharedQueueCIRWeight specifies the weight that this queue should be assigned by the parent among all the entities feeding into the parent with the same level when the traffic is conforming to the committed rate.')
tSharedQueueExpedite = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("expedited", 1), ("auto-expedited", 2), ("non-expedited", 3))).clone('auto-expedited')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueExpedite.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueExpedite.setDescription("tSharedQueueExpedite specifies the priority that this queue should be assigned by the hardware level schedulers. The value 'auto-expedited' implies that this attribute should be dynamically updated by looking at the forwarding classes mapping into this queue. In such a case the queue is treated as 'non-expedited' if there is even a single non-expedited forwarding class using this queue.")
tSharedQueueCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 11), TRatePercent()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueCIR.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueCIR.setDescription('tSharedQueueCIR specifies the committed rate as a percentage of maximum rate for this queue.')
tSharedQueuePIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 12), TRatePercent().clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueuePIR.setStatus('current')
if mibBuilder.loadTexts: tSharedQueuePIR.setDescription('tSharedQueuePIR specifies the peak rate as a percentage of maximum rate for this queue.')
tSharedQueueCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 13), TBurstPercent()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueCBS.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueCBS.setDescription('tSharedQueueCBS specifies the committed burst size as a percentage of maximum reserved buffer space for the queue.')
tSharedQueueMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 14), TBurstPercent().clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueMBS.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueMBS.setDescription('tSharedQueueMBS specifies the maximum burst size as a percentage of maximum reserved buffer space for the queue.')
tSharedQueueHiPrioOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 15), TBurstPercentOrDefault().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueHiPrioOnly.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueHiPrioOnly.setDescription('tSharedQueueHiPrioOnly specifies the percentage of buffer space to be exclusively by high priority packets as a percentage of maximum reserved buffer space for the queue.')
tSharedQueueIsMultipoint = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueIsMultipoint.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueIsMultipoint.setDescription('The value of tSharedQueueIsMultipoint specifies whether this shared queue is a multipoint-shared queue. This object can only be set at row creation time.')
tSharedQueueFCTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 3), )
if mibBuilder.loadTexts: tSharedQueueFCTable.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueFCTable.setDescription('Defines the Alcatel 7x50 SR series forwarding class to shared queue mapping table for providing, via SNMP, the capability of defining the forwarding class to shared queue mapping for the queue policies existing in the tSharedQueuePolicyTable. tSharedQueueFCTable holds a list of forwarding class to queue mappings managed system defined for the queue policies. The forwarding classes which are not existing in this table should use the default shared queue for this policy.')
tSharedQueueFCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueuePolicy"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueFCName"))
if mibBuilder.loadTexts: tSharedQueueFCEntry.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueFCEntry.setDescription('Defines an entry in the tSharedQueueFCTable. Entries are created/deleted in this table by SNMP sets to tSharedQueueFCRowStatus.')
tSharedQueueFCName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 3, 1, 1), TFCName())
if mibBuilder.loadTexts: tSharedQueueFCName.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueFCName.setDescription('tSharedQueueFCName serves as the secondary index. When used in conjunction with tSharedQueuePolicy, it uniquely identifies a forwarding class to queue mapping in the managed system.')
tSharedQueueFCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueFCRowStatus.setReference("See definition of RowStatus in RFC 2579, 'Textual Conventions for SMIv2.'")
if mibBuilder.loadTexts: tSharedQueueFCRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueFCRowStatus.setDescription('tSharedQueueFCRowStatus allows entries to be created and deleted in the tSharedQueueFCTable. Deletion of an entry from this table will cause the forwarding class to use the default mapping.')
tSharedQueueFCLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 3, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSharedQueueFCLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueFCLastChanged.setDescription('tSharedQueueFCLastChanged indicates the value of sysUpTime when the forwarding class to queue mapping entry was last modified.')
tSharedQueueFCQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 3, 1, 4), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueFCQueue.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueFCQueue.setDescription('tSharedQueueFCQueue specifies the logical queue that the traffic classified into this forwarding class should use.')
tSharedQueueFCMCastQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 3, 1, 5), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(9, 16)).clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueFCMCastQueue.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueFCMCastQueue.setDescription('The value of tSharedQueueFCMCastQueue specifies the logical queue that mutlticast traffic classified into this forwarding class should use.')
tSharedQueueFCBCastQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 3, 1, 6), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(17, 24)).clone(17)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueFCBCastQueue.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueFCBCastQueue.setDescription('The value of tSharedQueueFCBCastQueue specifies the logical queue that broadscast traffic classified into this forwarding class should use.')
tSharedQueueFCUnknownQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 3, 1, 7), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(25, 32)).clone(25)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueFCUnknownQueue.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueFCUnknownQueue.setDescription('The value of tSharedQueueFCUnknownQueue specifies the logical queue that unknown traffic classified into this forwarding class should use.')
tSlopePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1), )
if mibBuilder.loadTexts: tSlopePolicyTable.setStatus('current')
if mibBuilder.loadTexts: tSlopePolicyTable.setDescription('Slope Policy Table. Each entry in this table defines the RED slopes for the high and the low priority traffic.')
tSlopePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSlopePolicy"))
if mibBuilder.loadTexts: tSlopePolicyEntry.setStatus('current')
if mibBuilder.loadTexts: tSlopePolicyEntry.setDescription('Slope Policy Entry.')
tSlopePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tSlopePolicy.setStatus('current')
if mibBuilder.loadTexts: tSlopePolicy.setDescription('tSlopePolicy maintains the name of the slope policy identifying the policy.')
tSlopeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSlopeRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSlopeRowStatus.setDescription('Row Status of the entry. This allows creation/deletion of rows in this table.')
tSlopeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1, 3), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSlopeDescription.setStatus('current')
if mibBuilder.loadTexts: tSlopeDescription.setDescription('User-provided description of the policy.')
tSlopeHiAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSlopeHiAdminStatus.setStatus('current')
if mibBuilder.loadTexts: tSlopeHiAdminStatus.setDescription("tSlopeHiAdminStatus specifies the admin state for the high priority RED slope. If the tSlopeHiAdminStatus is set to 'down', the RED slope is inactive.")
tSlopeHiStartAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(70)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSlopeHiStartAverage.setStatus('current')
if mibBuilder.loadTexts: tSlopeHiStartAverage.setDescription('The percentage of the buffer utilized after which the drop probability starts to rise above 0.')
tSlopeHiMaxAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSlopeHiMaxAverage.setStatus('current')
if mibBuilder.loadTexts: tSlopeHiMaxAverage.setDescription('The percentage of the buffer utilized after which the drop probability is 100 percent. This implies that all packets beyond this point will be dropped.')
tSlopeHiMaxProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(80)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSlopeHiMaxProbability.setStatus('current')
if mibBuilder.loadTexts: tSlopeHiMaxProbability.setDescription('The drop probability increases steadily from 0 at the tSlopeHiStartAverage upto the tSlopeHiMaxProbability at the tSlopeHiMaxAverage.')
tSlopeLoAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSlopeLoAdminStatus.setStatus('current')
if mibBuilder.loadTexts: tSlopeLoAdminStatus.setDescription("tSlopeLoAdminStatus specifies the admin state for the high priority RED slope. If the tSlopeLoAdminStatus is set to 'down', the RED slope is inactive.")
tSlopeLoStartAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSlopeLoStartAverage.setStatus('current')
if mibBuilder.loadTexts: tSlopeLoStartAverage.setDescription('The percentage of the buffer utilized after which the drop probability starts to rise above 0.')
tSlopeLoMaxAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(75)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSlopeLoMaxAverage.setStatus('current')
if mibBuilder.loadTexts: tSlopeLoMaxAverage.setDescription('The percentage of the buffer utilized after which the drop probability is 100 percent. This implies that all packets beyond this point will be dropped.')
tSlopeLoMaxProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(80)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSlopeLoMaxProbability.setStatus('current')
if mibBuilder.loadTexts: tSlopeLoMaxProbability.setDescription('The drop probability increases steadily from 0 at the tSlopeLoStartAverage upto the tSlopeLoMaxProbability at the tSlopeLoMaxAverage.')
tSlopeTimeAvgFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSlopeTimeAvgFactor.setStatus('current')
if mibBuilder.loadTexts: tSlopeTimeAvgFactor.setDescription('The time average factor describes the weighting between the previous shared buffer average utilization result and the new shared buffer utilization in determining the new shared buffer average utilization.')
tSlopeLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1, 13), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSlopeLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSlopeLastChanged.setDescription('Timestamp of when this entry was last changed.')
tSchedulerPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 1), )
if mibBuilder.loadTexts: tSchedulerPolicyTable.setStatus('current')
if mibBuilder.loadTexts: tSchedulerPolicyTable.setDescription(' ')
tSchedulerPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 1, 1), ).setIndexNames((1, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyName"))
if mibBuilder.loadTexts: tSchedulerPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: tSchedulerPolicyEntry.setDescription('Information about a particular Scheduler Policy.')
tSchedulerPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 1, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tSchedulerPolicyName.setStatus('current')
if mibBuilder.loadTexts: tSchedulerPolicyName.setDescription('Name of the scheduler policy.')
tSchedulerPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSchedulerPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSchedulerPolicyRowStatus.setDescription('Row Status of the entry.')
tSchedulerPolicyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 1, 1, 3), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSchedulerPolicyDescription.setStatus('current')
if mibBuilder.loadTexts: tSchedulerPolicyDescription.setDescription('Description for the scheduler policy')
tSchedulerPolicyLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 1, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSchedulerPolicyLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSchedulerPolicyLastChanged.setDescription('timestamp of last change to this row in tSchedulerPolicyTable.')
tSchedulerPolicyFrameBasedAccnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSchedulerPolicyFrameBasedAccnt.setStatus('current')
if mibBuilder.loadTexts: tSchedulerPolicyFrameBasedAccnt.setDescription("The value of tSchedulerPolicyFrameBasedAccnt specifies whether to use frame-based accounting for the schedulers within the scheduler policy and the children queues parented to the scheduling policy. If the value is 'false', the default packet-based accounting method will be used.")
tVirtualSchedulerTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2), )
if mibBuilder.loadTexts: tVirtualSchedulerTable.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerTable.setDescription(' ')
tVirtualSchedulerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyName"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerTier"), (1, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerName"))
if mibBuilder.loadTexts: tVirtualSchedulerEntry.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerEntry.setDescription('Information about a particular Scheduler belonging to a Scheduler Policy.')
tVirtualSchedulerTier = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: tVirtualSchedulerTier.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerTier.setDescription('Tier to which this scheduler belongs to.')
tVirtualSchedulerName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 2), TNamedItem())
if mibBuilder.loadTexts: tVirtualSchedulerName.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerName.setDescription('Name of the scheduler policy.')
tVirtualSchedulerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerRowStatus.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerRowStatus.setDescription('Row Status of the entry.')
tVirtualSchedulerDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerDescription.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerDescription.setDescription('Description for the scheduler policy')
tVirtualSchedulerParent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 5), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerParent.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerParent.setDescription('The scheduler to which this scheduler would be feeding to.')
tVirtualSchedulerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 6), TLevel().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerLevel.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerLevel.setDescription('This specifies the level of priority while feeding to the parent.')
tVirtualSchedulerWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 7), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerWeight.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerWeight.setDescription('The weight that needs to be used by the scheduler to which this queue would be feeding to.')
tVirtualSchedulerCIRLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 8), TLevelOrDefault()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerCIRLevel.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerCIRLevel.setDescription("This specifies the level of priority while feeding to the parent. The level '0' means treat all offered load for this queue as for the above CIR traffic.")
tVirtualSchedulerCIRWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 9), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerCIRWeight.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerCIRWeight.setDescription('The weight that needs to be used until the committed rate by the scheduler to which this queue would be feeding to.')
tVirtualSchedulerPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 10), TPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerPIR.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerPIR.setDescription('The rate allowed for this scheduler. A value of -1 implies maximum.')
tVirtualSchedulerCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 11), TCIRRate()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerCIR.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerCIR.setDescription('The rate allowed for this scheduler. A value of -1 implies maximum.')
tVirtualSchedulerSummedCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 12), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerSummedCIR.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerSummedCIR.setDescription("tVirtualSchedulerSummedCIR specifies if the CIR should be used as the summed value of the children. If set to 'true', tVirtualSchedulerCIR loses its meaning.")
tVirtualSchedulerLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 13), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVirtualSchedulerLastChanged.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerLastChanged.setDescription('The value of the object tVirtualSchedulerLastChanged indicates the timestamp of last change to this row in tVirtualSchedulerTable.')
tVirtualSchedulerUsePortParent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 14), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerUsePortParent.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerUsePortParent.setDescription("The value of the object tVirtualSchedulerUsePortParent specifies whether this scheduler is parented by a port-level scheduler. When the value is 'true', this virtual scheduler is parented by a port-level scheduler. This object is mutually exclusive with tVirtualSchedulerParent. Only one kind of parent is allowed.")
tVirtualSchedulerPortLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 15), TLevel().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerPortLvl.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerPortLvl.setDescription('The value of the object tVirtualSchedulerPortLvl specifies the port priority this scheduler will use to receive bandwidth from the port-level scheduler for its above-cir offered load.')
tVirtualSchedulerPortWght = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 16), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerPortWght.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerPortWght.setDescription('The value of the object tVirtualSchedulerPortWght specifies the weight this scheduler will use to receive bandwidth from the port-level scheduler for its above-cir offered load.')
tVirtualSchedulerPortCIRLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 17), TLevelOrDefault()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerPortCIRLvl.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerPortCIRLvl.setDescription('The value of the object tVirtualSchedulerPortCIRLvl specifies the port priority this scheduler will use to receive bandwidth from the port-level scheduler for its within-cir offered load.')
tVirtualSchedulerPortCIRWght = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 18), TWeight()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerPortCIRWght.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerPortCIRWght.setDescription('The value of the object tVirtualSchedulerPortCIRWght specifies the weight this scheduler will use to receive bandwidth from the port-level scheduler for its within-cir offered load.')
tPortSchedulerPlcyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3), )
if mibBuilder.loadTexts: tPortSchedulerPlcyTable.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyTable.setDescription('The tPortSchedulerPlcyTable has an entry for each port scheduler configured on this system.')
tPortSchedulerPlcyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1), ).setIndexNames((1, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyName"))
if mibBuilder.loadTexts: tPortSchedulerPlcyEntry.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyEntry.setDescription('Each row represents a particular port scheduler. Entries are created and deleted by the user.')
tPortSchedulerPlcyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tPortSchedulerPlcyName.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyName.setDescription('The value of tPortSchedulerPlcyName specifies the name of the port scheduler.')
tPortSchedulerPlcyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyRowStatus.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyRowStatus.setDescription('The value of tPortSchedulerPlcyRowStatus is used for the creation and deletion of port scheduler policies.')
tPortSchedulerPlcyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 3), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyDescription.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyDescription.setDescription('The value of tPortSchedulerPlcyDescription specifies the description of this port scheduler.')
tPortSchedulerPlcyLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortSchedulerPlcyLastChanged.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyLastChanged.setDescription('The value of tPortSchedulerPlcyLastChanged indicates the value of sysUpTime at the time of the most recent management change to this row.')
tPortSchedulerPlcyMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 5), TPortSchedulerPIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyMaxRate.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyMaxRate.setDescription('The value of tPortSchedulerPlcyMaxRate specifies the explicit maximum frame based bandwidth limit of this port scheduler.')
tPortSchedulerPlcyLvl1PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 6), TPortSchedulerPIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl1PIR.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl1PIR.setDescription('The value of tPortSchedulerPlcyLvl1PIR specifies the total bandwidth limit, PIR, for priority level 1.')
tPortSchedulerPlcyLvl1CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 7), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl1CIR.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl1CIR.setDescription('The value of tPortSchedulerPlcyLvl1CIR specifies the within-cir bandwidth limit for priority level 1.')
tPortSchedulerPlcyLvl2PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 8), TPortSchedulerPIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl2PIR.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl2PIR.setDescription('The value of tPortSchedulerPlcyLvl2PIR specifies the total bandwidth limit, PIR, for priority level 2.')
tPortSchedulerPlcyLvl2CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 9), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl2CIR.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl2CIR.setDescription('The value of tPortSchedulerPlcyLvl2CIR specifies the within-cir bandwidth limit for priority level 2.')
tPortSchedulerPlcyLvl3PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 10), TPortSchedulerPIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl3PIR.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl3PIR.setDescription('The value of tPortSchedulerPlcyLvl3PIR specifies the total bandwidth limit, PIR, for priority level 3.')
tPortSchedulerPlcyLvl3CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 11), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl3CIR.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl3CIR.setDescription('The value of tPortSchedulerPlcyLvl3CIR specifies the within-cir bandwidth limit for priority level 3.')
tPortSchedulerPlcyLvl4PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 12), TPortSchedulerPIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl4PIR.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl4PIR.setDescription('The value of tPortSchedulerPlcyLvl4PIR specifies the total bandwidth limit, PIR, for priority level 4.')
tPortSchedulerPlcyLvl4CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 13), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl4CIR.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl4CIR.setDescription('The value of tPortSchedulerPlcyLvl4CIR specifies the within-cir bandwidth limit for priority level 4.')
tPortSchedulerPlcyLvl5PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 14), TPortSchedulerPIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl5PIR.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl5PIR.setDescription('The value of tPortSchedulerPlcyLvl5PIR specifies the total bandwidth limit, PIR, for priority level 5.')
tPortSchedulerPlcyLvl5CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 15), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl5CIR.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl5CIR.setDescription('The value of tPortSchedulerPlcyLvl5CIR specifies the within-cir bandwidth limit for priority level 5.')
tPortSchedulerPlcyLvl6PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 16), TPortSchedulerPIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl6PIR.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl6PIR.setDescription('The value of tPortSchedulerPlcyLvl6PIR specifies the total bandwidth limit, PIR, for priority level 6.')
tPortSchedulerPlcyLvl6CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 17), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl6CIR.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl6CIR.setDescription('The value of tPortSchedulerPlcyLvl6CIR specifies the within-cir bandwidth limit for priority level 6.')
tPortSchedulerPlcyLvl7PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 18), TPortSchedulerPIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl7PIR.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl7PIR.setDescription('The value of tPortSchedulerPlcyLvl7PIR specifies the total bandwidth limit, PIR, for priority level 7.')
tPortSchedulerPlcyLvl7CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 19), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl7CIR.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl7CIR.setDescription('The value of tPortSchedulerPlcyLvl7CIR specifies the within-cir bandwidth limit for priority level 7.')
tPortSchedulerPlcyLvl8PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 20), TPortSchedulerPIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl8PIR.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl8PIR.setDescription('The value of tPortSchedulerPlcyLvl8PIR specifies the total bandwidth limit, PIR, for priority level 8.')
tPortSchedulerPlcyLvl8CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 21), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl8CIR.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl8CIR.setDescription('The value of tPortSchedulerPlcyLvl8CIR specifies the within-cir bandwidth limit for priority level 8.')
tPortSchedulerPlcyOrphanLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 22), TLevel().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyOrphanLvl.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyOrphanLvl.setDescription('The value of tPortSchedulerPlcyOrphanLvl specifies the port priority of orphaned queues and schedulers that are above-cir.')
tPortSchedulerPlcyOrphanWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 23), TWeight()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyOrphanWeight.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyOrphanWeight.setDescription('The value of tPortSchedulerPlcyOrphanWeight specifies the weight of orphaned queues and schedulers that are above-cir.')
tPortSchedulerPlcyOrphanCIRLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 24), TLevelOrDefault()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyOrphanCIRLvl.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyOrphanCIRLvl.setDescription('The value of tPortSchedulerPlcyOrphanCIRLvl specifies the port priority of orphaned queues and schedulers that are within-cir.')
tPortSchedulerPlcyOrphanCIRWght = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 25), TWeight()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyOrphanCIRWght.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyOrphanCIRWght.setDescription('The value of tPortSchedulerPlcyOrphanCIRWght specifies the weight of orphaned queues and schedulers that are within-cir.')
tQosDomainLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tQosDomainLastChanged.setStatus('current')
if mibBuilder.loadTexts: tQosDomainLastChanged.setDescription('The value of the object tQosDomainLastChanged indicates the timestamp of last change to the QoS Domain.')
tDSCPNameTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tDSCPNameTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tDSCPNameTableLastChanged.setDescription('The value of the object tDSCPNameTableLastChanged indicates the timestamp of last change to the DSCP Name Table.')
tFCNameTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFCNameTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tFCNameTableLastChanged.setDescription('The value of the object tFCNameTableLastChanged indicates the timestamp of last change to the FC Name Table.')
tSapIngressTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 20), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngressTableLastChanged.setDescription('The value of the object tSapIngressTableLastChanged indicates the timestamp of last change to the Sap Ingress Policy Table.')
tSapIngressQueueTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 21), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressQueueTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueTableLastChanged.setDescription('tSapIngressQueueTableLastChanged maintains the timestamp of the last change made to the Sap Ingress Queue Table.')
tSapIngressDSCPTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 22), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressDSCPTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngressDSCPTableLastChanged.setDescription('tSapIngressDSCPTableLastChanged maintains the timestamp of the last change made to the Sap Ingress DSCP Mapping Table.')
tSapIngressDot1pTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 23), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressDot1pTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngressDot1pTableLastChanged.setDescription('tSapIngressDot1pTableLastChanged maintains the timestamp of the last change made to the Sap Ingress Dot1p Table.')
tSapIngressIPCriteriaTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 24), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressIPCriteriaTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaTableLastChanged.setDescription('tSapIngressIPCriteriaTableLastChanged maintains the timestamp of the last change made to the Sap Ingress IP Criteria Table.')
tSapIngressMacCriteriaTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 25), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressMacCriteriaTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaTableLastChanged.setDescription('tSapIngressMacCriteriaTableLastChanged maintains the timestamp of the last change made to the Sap Ingress Mac Criteria Table.')
tSapIngressFCTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 26), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressFCTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCTableLastChanged.setDescription('tSapIngressFCTableLastChanged maintains the timestamp of the last change made to the Sap Ingress FC Table.')
tSapIngressPrecTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 27), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressPrecTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngressPrecTableLastChanged.setDescription('tSapIngressPrecTableLastChanged maintains the timestamp of the last change made to the Sap Ingress Precedence Table.')
tSapEgressTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 30), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapEgressTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapEgressTableLastChanged.setDescription('tSapEgressTableLastChanged maintains the timestamp of the last change made to the Sap Egress Policy Table.')
tSapEgressQueueTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 31), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapEgressQueueTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueTableLastChanged.setDescription('tSapEgressQueueTableLastChanged maintains the timestamp of the last change made to the Sap Egress Queue Table.')
tSapEgressFCTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 32), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapEgressFCTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapEgressFCTableLastChanged.setDescription('tSapEgressFCTableLastChanged maintains the timestamp of the last change made to the Sap Egress FC Table.')
tNetworkPolicyTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 40), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkPolicyTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNetworkPolicyTableLastChanged.setDescription('tNetworkPolicyTableLastChanged maintains the timestamp of the last change made to the Network Policy Table.')
tNetworkIngressDSCPTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 41), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkIngressDSCPTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressDSCPTableLastChanged.setDescription('tNetworkIngressDSCPTableLastChanged maintains the timestamp of the last change made to the Network Ingress DSCP Mapping Table.')
tNetworkIngressLSPEXPTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 42), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkIngressLSPEXPTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressLSPEXPTableLastChanged.setDescription('tNetworkIngressLSPEXPTableLastChanged maintains the timestamp of the last change made to the Network Ingress LSPEXP Table.')
tNetworkEgressFCTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 43), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkEgressFCTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressFCTableLastChanged.setDescription('tNetworkEgressFCTableLastChanged maintains the timestamp of the last change made to the Network Egress FC Table.')
tNetworkIngressDot1pTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 44), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkIngressDot1pTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressDot1pTableLastChanged.setDescription('tNetworkIngressDot1pTableLastChanged maintains the timestamp of the last change made to the Network Ingress Dot1p Table.')
tNetworkQueuePolicyTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 50), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkQueuePolicyTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueuePolicyTableLastChanged.setDescription('tNetworkQueuePolicyTableLastChanged maintains the timestamp of the last change made to the Network Queue Policy Table.')
tNetworkQueueTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 51), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkQueueTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueTableLastChanged.setDescription('tNetworkQueueTableLastChanged maintains the timestamp of the last change made to the Network Queue Table.')
tNetworkQueueFCTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 52), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkQueueFCTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueFCTableLastChanged.setDescription('tNetworkQueueFCTableLastChanged maintains the timestamp of the last change made to the Network Queue FC Table.')
tSlopePolicyTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 55), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSlopePolicyTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSlopePolicyTableLastChanged.setDescription('tSlopePolicyTableLastChanged maintains the timestamp of the last change made to the Slope Policy Table.')
tSchedulerPolicyTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 60), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSchedulerPolicyTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSchedulerPolicyTableLastChanged.setDescription('tSchedulerPolicyTableLastChanged maintains the timestamp of the last change made to the Scheduler Policy Table.')
tVirtualSchedulerTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 61), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVirtualSchedulerTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerTableLastChanged.setDescription('tVirtualSchedulerTableLastChanged maintains the timestamp of the last change made to the Virtual Scheduler Table.')
tAtmTdpTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 62), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmTdpTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpTableLastChanged.setDescription('tAtmTdpTableLastChanged maintains the timestamp of the last change made to the Traffic Descriptor Profile Table.')
tSharedQueuePolicyTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 63), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSharedQueuePolicyTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSharedQueuePolicyTableLastChanged.setDescription('tSharedQueuePolicyTableLastChanged maintains the timestamp of the last change made to the Queue Policy Table.')
tSharedQueueTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 64), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSharedQueueTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueTableLastChanged.setDescription('tSharedQueueTableLastChanged maintains the timestamp of the last change made to the Queue Table.')
tSharedQueueFCTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 65), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSharedQueueFCTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueFCTableLastChanged.setDescription('tSharedQueueFCTableLastChanged maintains the timestamp of the last change made to the Queue FC Table.')
tSapIngressIPv6CriteriaTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 66), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaTableLastChanged.setDescription('The value of the object tSapIngressIPv6CriteriaTableLastChanged indicates the timestamp of the last change made to the Sap Ingress IPv6 Criteria Table.')
tNamedPoolPolicyTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 73), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNamedPoolPolicyTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNamedPoolPolicyTableLastChanged.setDescription('The value of tNamedPoolPolicyTableLastChanged indicates the sysUpTime at the time of the last modification of an entry in the tNamedPoolPolicyTable. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tQ1NamedPoolTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 74), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tQ1NamedPoolTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tQ1NamedPoolTableLastChanged.setDescription('The value of tQ1NamedPoolTableLastChanged indicates the sysUpTime at the time of the last modification of an entry in the tQ1NamedPoolTable. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tAtmTdpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1), )
if mibBuilder.loadTexts: tAtmTdpTable.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpTable.setDescription('This table contains information on ATM traffic descriptors for controlling ATM traffic management capabilities.')
tAtmTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpIndex"))
if mibBuilder.loadTexts: tAtmTdpEntry.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpEntry.setDescription('This list contains ATM traffic descriptor objects and the associated parameters. All objects that do not apply to a given service category are given default values of zero.')
tAtmTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 1), AtmTrafficDescrParamIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: tAtmTdpIndex.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpIndex.setDescription('This object is used to identify an entity inside the tAtmTdpTable. When creating a new row in the table the value of this index may be obtained by retrieving the value of tAtmTdpIndexNext.')
tAtmTdpSir = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmTdpSir.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpSir.setDescription('tAtmTdpSir identifies the sustained information rate in kilobits per second. The default Sir is determined by the Service Category. The following default applies to Sir that is modifiable depending upon a given service category: Applicable Service Category Default Sir Value RT-VBR 0 NRT-VBR 0 Note that for the service categories given above, the value of Sir must be less than or equal to the value of Pir.')
tAtmTdpPir = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmTdpPir.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpPir.setDescription('tAtmTdpPir identifies the peak information rate in kilobits per second. The default Pir is determined by the Service Category. The following default applies to Pir that is modifiable depending upon a given service category: Applicable Service Category Default Pir Value UBR (with/without Mir) 4294967295 CBR 0 RT-VBR 0 NRT-VBR 0')
tAtmTdpMbs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmTdpMbs.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpMbs.setDescription('tAtmTdpMbs identifies the maximum burst size in cells. The default Mbs is determined by the Service Category. The following default applies to Mbs that is modifiable depending upon a given service category: Applicable Service Category Default Mbs Value RT-VBR 32 NRT-VBR 32')
tAtmTdpMir = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmTdpMir.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpMir.setDescription('tAtmTdpMir identifies the Minimum Information Rate in kilobits per second. The default Mir is determined by the Service Category. The following default applies for Mir that is modifiable depending upon a given service category: Applicable Service Category Default Mir Value UBR (with/without Mir) 0 Note that for the service categories given above, the value of Mir must be less than or equal to the value of Pir.')
tAtmTdpShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmTdpShaping.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpShaping.setDescription('tAtmTdpShaping determines whether egress shaping should occur. The default tAtmTdpShaping is determined by the Service Category. The following default applies for tAtmTdpShaping depending upon a given service category: Applicable Service Category Default Shaping Value UBR disabled CBR enabled RT-VBR enabled NRT-VBR enabled For a Service Category of UBR, tAtmTdpShaping cannot be enabled. For CBR and RT-VBR service cateories disabling shaping is MDA-dependent. Shaping is only applied in the egress direction.')
tAtmTdpServCat = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 7), AtmServiceCategory().clone('ubr')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmTdpServCat.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpServCat.setDescription('tAtmTdpServCat determines the ATM service category.')
tAtmTdpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 8), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmTdpDescription.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpDescription.setDescription('The value of tAtmTdpDescription specifies an ASCII string used to describe the ATM traffic descriptor.')
tAtmTdpLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmTdpLastChanged.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpLastChanged.setDescription('tAtmTdpLastChanged maintains the timestamp of the last change made to a row in the Traffic Descriptor Profile Table.')
tAtmTdpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmTdpRowStatus.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpRowStatus.setDescription('tAtmTdpRowStatus is used to create/modify/delete a new row in this table. Only createAndGo/Active/Destroy are supported')
tAtmTdpDescrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 11), TAtmTdpDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmTdpDescrType.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpDescrType.setDescription('tAtmTdpDescrType identifies the types of ATM traffic descriptor. The default is determined by the value of tAtmTdpServCat. The following default rules apply: Applicable Service Category tAtmTdpDescrType UBR clp0And1pcr CBR clp0And1pcr RT-VBR clp0And1pcrPlusClp0And1scr NRT-VBR clp0And1pcrPlusClp0And1scr')
tAtmTdpCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmTdpCdvt.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpCdvt.setDescription('tAtmTdpCdvt identifies the Cell Delay Variation Tolerance in microseconds. The following default applies for Cdvt that is modifiable depending upon a given service category: Applicable Service Category Default Cdvt Value CBR/RT-VBR/NRT-VBR/UBR 250 ')
tAtmTdpPolicing = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmTdpPolicing.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpPolicing.setDescription('tAtmTdpPolicing determines whether ingress traffic is policed. Policing by default is disabled. Policing is valid for CBR, UBR RT-VBR and NRT-VBR. This is cell-based policing. tAtmTdpDescrType Policing Scheme Applicable Serv Cat clp0And1pcr CBR.1 CBR and UBR clp0And1pcrPlusClp0And1scr VBR.1 RT/NRT-VBR clp0And1pcrPlusClp0scr VBR.2 RT/NRT-VBR clp0And1pcrPlusClp0scrTag VBR.3 RT/NRT-VBR')
tAtmTdpCLPTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmTdpCLPTagging.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpCLPTagging.setDescription('tAtmTdpCLPTagging controls the setting of the CLP bit in the ATM cell header for egress traffic on an IES or VPRN SAP. If disabled (the default), all traffic has the CLP bit set to zero. If enabled, traffic queued on expedited queues has the CLP bit set to zero, while traffic on non-expedited queues has the CLP bit set to one.')
tNamedPoolPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 1), )
if mibBuilder.loadTexts: tNamedPoolPolicyTable.setStatus('current')
if mibBuilder.loadTexts: tNamedPoolPolicyTable.setDescription('This table contains information on Named buffer pools policy.')
tNamedPoolPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tNamedPoolPolicyName"))
if mibBuilder.loadTexts: tNamedPoolPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: tNamedPoolPolicyEntry.setDescription('This list contains Named buffer pools policy related information.')
tNamedPoolPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 1, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tNamedPoolPolicyName.setStatus('current')
if mibBuilder.loadTexts: tNamedPoolPolicyName.setDescription('The value of tNamedPoolPolicyName indicates the name of Named pool policy.')
tNamedPoolPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNamedPoolPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: tNamedPoolPolicyRowStatus.setDescription('The value of tNamedPoolPolicyRowStatus is used for creation or deletion of named pool policies.')
tNamedPoolPolicyLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNamedPoolPolicyLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNamedPoolPolicyLastChanged.setDescription('The value of tNamedPoolPolicyLastChanged indicates the sysUpTime when this row was last modified.')
tNamedPoolPolicyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 1, 1, 4), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNamedPoolPolicyDescription.setStatus('current')
if mibBuilder.loadTexts: tNamedPoolPolicyDescription.setDescription('The value of tNamedPoolPolicyDescription specifies the description for a specific named pool policy.')
tNamedPoolPolicyQ1DefaultWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNamedPoolPolicyQ1DefaultWeight.setStatus('current')
if mibBuilder.loadTexts: tNamedPoolPolicyQ1DefaultWeight.setDescription('The value of tNamedPoolPolicyQ1DefaultWeight specifies the port allocation weight given to the default pools.')
tNamedPoolPolicyQ1MdaWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNamedPoolPolicyQ1MdaWeight.setStatus('current')
if mibBuilder.loadTexts: tNamedPoolPolicyQ1MdaWeight.setDescription('The value of tNamedPoolPolicyQ1MdaWeight specifies the port allocation weight given to the MDA named pools.')
tNamedPoolPolicyQ1PortWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNamedPoolPolicyQ1PortWeight.setStatus('current')
if mibBuilder.loadTexts: tNamedPoolPolicyQ1PortWeight.setDescription('The value of tNamedPoolPolicyQ1PortWeight specifies the port allocation weight given to the local port named pools.')
tQ1NamedPoolTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 2), )
if mibBuilder.loadTexts: tQ1NamedPoolTable.setStatus('current')
if mibBuilder.loadTexts: tQ1NamedPoolTable.setDescription('This table contains information on Q1 pools policy.')
tQ1NamedPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tQ1NamedPoolPolicyName"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tQ1NamedPoolName"))
if mibBuilder.loadTexts: tQ1NamedPoolEntry.setStatus('current')
if mibBuilder.loadTexts: tQ1NamedPoolEntry.setDescription('This list contains Q1 pools policy related information.')
tQ1NamedPoolPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 2, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tQ1NamedPoolPolicyName.setStatus('current')
if mibBuilder.loadTexts: tQ1NamedPoolPolicyName.setDescription('The value of tQ1NamedPoolPolicyName indicates the name of the existing Q1 named pool policy.')
tQ1NamedPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 2, 1, 2), TNamedItem())
if mibBuilder.loadTexts: tQ1NamedPoolName.setStatus('current')
if mibBuilder.loadTexts: tQ1NamedPoolName.setDescription('The value of tQ1NamedPoolName indicates the name of the existing pool within the policy.')
tQ1NamedPoolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQ1NamedPoolRowStatus.setStatus('current')
if mibBuilder.loadTexts: tQ1NamedPoolRowStatus.setDescription('The value of tQ1NamedPoolRowStatus is used for creation or deletion of Q1 named pools.')
tQ1NamedPoolLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 2, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tQ1NamedPoolLastChanged.setStatus('current')
if mibBuilder.loadTexts: tQ1NamedPoolLastChanged.setDescription('The value of tQ1NamedPoolLastChanged indicates the sysUpTime when this row was last modified. ')
tQ1NamedPoolDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 2, 1, 5), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQ1NamedPoolDescription.setStatus('current')
if mibBuilder.loadTexts: tQ1NamedPoolDescription.setDescription('The value of tQ1NamedPoolDescription specifies the description for a specific Q1 named pool.')
tQ1NamedPoolNetworkAllocWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQ1NamedPoolNetworkAllocWeight.setStatus('current')
if mibBuilder.loadTexts: tQ1NamedPoolNetworkAllocWeight.setDescription('The value of tQ1NamedPoolNetworkAllocWeight specifies the weight used to divide network associated buffer space between named pools.')
tQ1NamedPoolAccessAllocWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQ1NamedPoolAccessAllocWeight.setStatus('current')
if mibBuilder.loadTexts: tQ1NamedPoolAccessAllocWeight.setDescription('The value of tQ1NamedPoolAccessAllocWeight specifies the weight used to divide access associated buffer space between named pools.')
tQ1NamedPoolSlopePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 2, 1, 8), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQ1NamedPoolSlopePolicy.setStatus('current')
if mibBuilder.loadTexts: tQ1NamedPoolSlopePolicy.setDescription('The value of tQ1NamedPoolSlopePolicy specifies the name of the slop-policy which is used to override the default slope-policy for the named buffer pool.')
tQ1NamedPoolReservedCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 2, 1, 9), Integer32().clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQ1NamedPoolReservedCbs.setStatus('current')
if mibBuilder.loadTexts: tQ1NamedPoolReservedCbs.setDescription('The value of tQ1NamedPoolReservedCbs specifies the reserved CBS size of the pool. The reserved CBS (Committed Burst Size) defines the amount of buffer space within the pool that is not considered shared.')
tAtmTdpIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmTdpIndexNext.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpIndexNext.setDescription('This object contains an appropriate value to be used for tAtmTdpIndex when creating entries in the tAtmTdpTable. The value 0 indicates that no unassigned entries are available. To obtain the tAtmTdpIndex value for a new entry, the manager issues a management protocol retrieval operation to obtain the current value of this object. After each retrieval, the agent should modify the value to the next unassigned index. After a manager retrieves a value the agent will determine through its local policy when this index value will be made available for reuse.')
tAtmTdpsMaxSupported = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmTdpsMaxSupported.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpsMaxSupported.setDescription('This object contains the maximum number of ATM Traffic Descriptor Profiles that can be configured on this system.')
tAtmTdpsCurrentlyConfigured = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmTdpsCurrentlyConfigured.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpsCurrentlyConfigured.setDescription('This object contains the number of currently configured ATM Traffic Descriptor Profiles on this system.')
tmnxQosCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 1))
tmnxQosGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2))
tmnxQos7450V4v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 1, 4)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosGlobalGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosDSCPGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosFCGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSapIngressV4v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSapEgressR2r1Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosNetworkR2r1Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSlopeGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSchedulerGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosQueueV4v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQos7450V4v0Compliance = tmnxQos7450V4v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxQos7450V4v0Compliance.setDescription('The compliance statement for management of QOS features on Alcatel 7450 ESS series systems release R4.0.')
tmnxQos7750V4v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 1, 5)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosGlobalGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosDSCPGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosFCGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSapIngressV4v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSapEgressR2r1Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosNetworkR2r1Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSlopeGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSchedulerGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosAtmTdpV3v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosQueueV4v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSapIpv6FilterR4r0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQos7750V4v0Compliance = tmnxQos7750V4v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxQos7750V4v0Compliance.setDescription('The compliance statement for management of QOS features on Alcatel 7750 SR series systems release R4.0.')
tmnxQos7450V5v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 1, 6)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosGlobalGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosDSCPGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosFCGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSapIngressV4v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSapEgressV5v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosNetworkV5v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSlopeGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSchedulerV5v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosQueueV4v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQos7450V5v0Compliance = tmnxQos7450V5v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxQos7450V5v0Compliance.setDescription('The compliance statement for management of QOS features on Alcatel 7450 ESS series systems release R5.0.')
tmnxQos7750V5v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 1, 7)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosGlobalGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosDSCPGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosFCGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSapIngressV4v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSapEgressV5v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosNetworkV5v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSlopeGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSchedulerV5v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosAtmTdpV5v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosQueueV4v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSapIpv6FilterR4r0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQos7750V5v0Compliance = tmnxQos7750V5v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxQos7750V5v0Compliance.setDescription('The compliance statement for management of QOS features on Alcatel 7750 SR series systems release R5.0.')
tmnxQos7450V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 1, 8)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosGlobalGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosDSCPGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosFCGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSapIngressV6v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSapEgressV6v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosNetworkV6v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSlopeGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSchedulerV5v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosQueueV4v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosFrameBasedV6v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosNamedPoolPolicyV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQos7450V6v0Compliance = tmnxQos7450V6v0Compliance.setStatus('current')
if mibBuilder.loadTexts: tmnxQos7450V6v0Compliance.setDescription('The compliance statement for management of QOS features on Alcatel 7450 ESS series systems release R6.0.')
tmnxQos7750V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 1, 9)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosGlobalGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosDSCPGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosFCGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSapIngressV6v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSapEgressV6v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosNetworkV6v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSlopeGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSchedulerV5v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosAtmTdpV5v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosQueueV4v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSapIpv6FilterR4r0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosFrameBasedV6v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosNamedPoolPolicyV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQos7750V6v0Compliance = tmnxQos7750V6v0Compliance.setStatus('current')
if mibBuilder.loadTexts: tmnxQos7750V6v0Compliance.setDescription('The compliance statement for management of QOS features on Alcatel 7750 SR series systems release R6.0.')
tmnxQosGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 1)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tQosDomainLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosGlobalGroup = tmnxQosGlobalGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxQosGlobalGroup.setDescription('The group of objects supporting general management of QOS features on Alcatel 7x50 SR series systems.')
tmnxQosDSCPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 2)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tDSCPNameRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tDSCPNameStorageType"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tDSCPNameDscpValue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tDSCPNameLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tDSCPNameTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosDSCPGroup = tmnxQosDSCPGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxQosDSCPGroup.setDescription('The group of objects supporting management of Differential Services Code Points on Alcatel 7x50 SR series systems.')
tmnxQosFCGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 3)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tFCRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tFCStorageType"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tFCValue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tFCNameLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tFCNameTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosFCGroup = tmnxQosFCGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxQosFCGroup.setDescription('The group of objects supporting management of Forwarding Classes on Alcatel 7x50 SR series systems.')
tmnxQosSlopeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 7)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSlopeRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSlopeDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSlopeHiAdminStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSlopeHiStartAverage"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSlopeHiMaxAverage"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSlopeHiMaxProbability"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSlopeLoAdminStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSlopeLoStartAverage"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSlopeLoMaxAverage"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSlopeLoMaxProbability"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSlopeTimeAvgFactor"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSlopeLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSlopePolicyTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosSlopeGroup = tmnxQosSlopeGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxQosSlopeGroup.setDescription('The group of objects supporting management of Slope policies on Alcatel 7x50 SR series systems.')
tmnxQosSchedulerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 8)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerParent"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerCIRLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerCIRWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerPIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerCIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerSummedCIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosSchedulerGroup = tmnxQosSchedulerGroup.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxQosSchedulerGroup.setDescription('The group of objects supporting management of Scheduler policies on Alcatel 7x50 SR series systems.')
tQosObsoleteObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 10)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueOperPIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueOperCIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueOperPIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueOperCIR"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tQosObsoleteObjectsGroup = tQosObsoleteObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: tQosObsoleteObjectsGroup.setDescription('The group of obsolete objects in the ALCATEL-IND1-TIMETRA-QOS-MIB.')
tmnxQosSapEgressR2r1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 12)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressScope"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueParent"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueCIRLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueCIRWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueExpedite"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueCBS"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueMBS"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueHiPrioOnly"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueCIRAdaptation"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueuePIRAdaptation"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueAdminPIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueAdminCIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCQueue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCDot1PValue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosSapEgressR2r1Group = tmnxQosSapEgressR2r1Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxQosSapEgressR2r1Group.setDescription('The group of objects supporting management of SAP egress QoS policies on Alcatel 7x50 SR series systems.')
tmnxQosNetworkR2r1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 13)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyScope"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyIngressDefaultActionFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyIngressDefaultActionProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyEgressRemark"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyIngressLerUseDscp"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDSCPRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDSCPFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDSCPProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDSCPLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDSCPTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDot1pRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDot1pFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDot1pProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDot1pLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDot1pTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCDSCPInProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCDSCPOutProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCLspExpInProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCLspExpOutProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCDot1pInProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCDot1pOutProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePolicyRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePolicyDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePolicyLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePolicyTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePoolName"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueParent"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueCIRLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueCIRWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueMCast"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueExpedite"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueCIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueCBS"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueMBS"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueHiPrioOnly"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueFCRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueFCMCast"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueFCLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueFCTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosNetworkR2r1Group = tmnxQosNetworkR2r1Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxQosNetworkR2r1Group.setDescription('The group of objects supporting management of Network QoS policies on Alcatel 7x50 SR series systems.')
tmnxQosAtmTdpV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 15)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpSir"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpPir"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpMbs"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpMir"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpShaping"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpServCat"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpDescrType"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpCdvt"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpPolicing"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpIndexNext"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpsMaxSupported"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpsCurrentlyConfigured"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosAtmTdpV3v0Group = tmnxQosAtmTdpV3v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxQosAtmTdpV3v0Group.setDescription('The group of objects for ATM Traffic Descriptor Profiles on Alcatel 7x50 SR series systems release 3.0.')
tmnxQosSapIpv6FilterR4r0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 16)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaActionFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaActionPriority"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaSourceIpAddr"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaSourceIpMask"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaDestIpAddr"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaDestIpMask"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaNextHeader"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaSourcePortValue1"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaSourcePortValue2"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaSourcePortOperator"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaDestPortValue1"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaDestPortValue2"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaDestPortOperator"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaDSCP"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosSapIpv6FilterR4r0Group = tmnxQosSapIpv6FilterR4r0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosSapIpv6FilterR4r0Group.setDescription('The group of objects for Qos Policies related to IPv6 on Alcatel 7x50 SR series systems release 4.0.')
tmnxQosQueueV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 18)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueuePolicyRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueuePolicyDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueuePolicyLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueuePolicyTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueuePoolName"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueParent"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueCIRLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueCIRWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueExpedite"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueCIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueuePIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueCBS"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueMBS"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueHiPrioOnly"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueIsMultipoint"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueFCRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueFCQueue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueFCLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueFCTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueFCMCastQueue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueFCBCastQueue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueFCUnknownQueue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosQueueV4v0Group = tmnxQosQueueV4v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosQueueV4v0Group.setDescription('The group of objects supporting management of QoS queue policies on Alcatel 7x50 SR series systems release 4.0.')
tmnxQosSapIngressV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 19)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressScope"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDefaultFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDefaultFCPriority"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMatchCriteria"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueParent"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueCIRLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueCIRWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueMCast"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueExpedite"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueCBS"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueMBS"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueHiPrioOnly"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueCIRAdaptation"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueuePIRAdaptation"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueAdminPIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueAdminCIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueMode"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueuePoliced"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDSCPRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDSCPFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDSCPPriority"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDSCPLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDSCPTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDot1pRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDot1pFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDot1pPriority"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDot1pLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDot1pTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaActionFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaActionPriority"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourceIpAddr"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourceIpMask"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestIpAddr"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestIpMask"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaProtocol"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourcePortValue1"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourcePortValue2"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourcePortOperator"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestPortValue1"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestPortValue2"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestPortOperator"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDSCP"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaFragment"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaActionFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaActionPriority"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaFrameType"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSrcMacAddr"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSrcMacMask"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDstMacAddr"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDstMacMask"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDot1PValue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDot1PMask"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaEthernetType"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDSAP"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDSAPMask"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSSAP"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSSAPMask"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSnapPid"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSnapOui"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCQueue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCMCastQueue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCBCastQueue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCUnknownQueue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCInProfRemark"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCInProfDscp"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCInProfPrec"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCOutProfRemark"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCOutProfDscp"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCOutProfPrec"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressPrecRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressPrecFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressPrecFCPriority"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressPrecLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressPrecTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosSapIngressV4v0Group = tmnxQosSapIngressV4v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxQosSapIngressV4v0Group.setDescription('The group of objects supporting management of SAP ingress QoS policies on Alcatel 7x50 SR series systems release 4.0.')
tmnxQosSchedulerV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 20)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerParent"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerCIRLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerCIRWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerPIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerCIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerSummedCIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerUsePortParent"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerPortLvl"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerPortWght"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerPortCIRLvl"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerPortCIRWght"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyMaxRate"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl1PIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl1CIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl2PIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl2CIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl3PIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl3CIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl4PIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl4CIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl5PIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl5CIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl6PIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl6CIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl7PIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl7CIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl8PIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl8CIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyOrphanLvl"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyOrphanWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyOrphanCIRLvl"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyOrphanCIRWght"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosSchedulerV5v0Group = tmnxQosSchedulerV5v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosSchedulerV5v0Group.setDescription('The group of objects supporting management of Scheduler policies on Alcatel 7x50 SR series systems.')
tmnxQosSapEgressV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 21)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressScope"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueParent"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueCIRLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueCIRWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueExpedite"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueCBS"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueMBS"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueHiPrioOnly"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueCIRAdaptation"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueuePIRAdaptation"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueAdminPIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueAdminCIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCQueue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCDot1PValue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueUsePortParent"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueuePortLvl"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueuePortWght"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueuePortCIRLvl"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueuePortCIRWght"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueuePortAvgOverhead"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosSapEgressV5v0Group = tmnxQosSapEgressV5v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxQosSapEgressV5v0Group.setDescription('The group of objects supporting management of SAP egress QoS policies on Alcatel 7x50 SR series systems.')
tmnxQosNetworkV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 22)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyScope"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyIngressDefaultActionFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyIngressDefaultActionProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyEgressRemark"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyIngressLerUseDscp"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDSCPRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDSCPFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDSCPProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDSCPLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDSCPTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDot1pRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDot1pFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDot1pProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDot1pLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDot1pTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCDSCPInProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCDSCPOutProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCLspExpInProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCLspExpOutProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCDot1pInProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCDot1pOutProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePolicyRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePolicyDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePolicyLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePolicyTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePoolName"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueParent"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueCIRLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueCIRWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueMCast"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueExpedite"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueCIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueCBS"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueMBS"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueHiPrioOnly"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueUsePortParent"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePortLvl"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePortWght"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePortCIRLvl"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePortCIRWght"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePortAvgOverhead"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePIRAdaptation"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueCIRAdaptation"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueFCRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueFCMCast"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueFCLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueFCTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosNetworkV5v0Group = tmnxQosNetworkV5v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxQosNetworkV5v0Group.setDescription('The group of objects supporting management of Network QoS policies on Alcatel 7x50 SR series systems.')
tmnxQosAtmTdpV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 24)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpSir"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpPir"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpMbs"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpMir"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpShaping"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpServCat"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpDescrType"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpCdvt"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpPolicing"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpCLPTagging"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpIndexNext"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpsMaxSupported"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpsCurrentlyConfigured"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosAtmTdpV5v0Group = tmnxQosAtmTdpV5v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosAtmTdpV5v0Group.setDescription('The group of objects for ATM Traffic Descriptor Profiles on Alcatel 7x50 SR series systems release 5.0.')
tmnxQosSapIngressV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 25)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressScope"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDefaultFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDefaultFCPriority"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMatchCriteria"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueParent"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueCIRLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueCIRWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueMCast"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueExpedite"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueCBS"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueMBS"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueHiPrioOnly"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueCIRAdaptation"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueuePIRAdaptation"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueAdminPIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueAdminCIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueMode"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueuePoolName"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueuePoliced"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDSCPRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDSCPFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDSCPPriority"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDSCPLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDSCPTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDot1pRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDot1pFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDot1pPriority"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDot1pLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDot1pTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaActionFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaActionPriority"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourceIpAddr"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourceIpMask"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestIpAddr"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestIpMask"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaProtocol"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourcePortValue1"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourcePortValue2"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourcePortOperator"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestPortValue1"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestPortValue2"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestPortOperator"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDSCP"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaFragment"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaActionFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaActionPriority"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaFrameType"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSrcMacAddr"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSrcMacMask"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDstMacAddr"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDstMacMask"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDot1PValue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDot1PMask"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaEthernetType"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDSAP"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDSAPMask"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSSAP"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSSAPMask"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSnapPid"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSnapOui"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCQueue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCMCastQueue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCBCastQueue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCUnknownQueue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCInProfRemark"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCInProfDscp"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCInProfPrec"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCOutProfRemark"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCOutProfDscp"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCOutProfPrec"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressPrecRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressPrecFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressPrecFCPriority"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressPrecLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressPrecTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCDE1OutOfProfile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosSapIngressV6v0Group = tmnxQosSapIngressV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosSapIngressV6v0Group.setDescription('The group of objects supporting management of SAP ingress QoS policies on Alcatel 7x50 SR series systems release 6.0.')
tmnxQosSapEgressV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 26)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressScope"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueParent"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueCIRLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueCIRWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueExpedite"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueCBS"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueMBS"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueHiPrioOnly"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueCIRAdaptation"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueuePIRAdaptation"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueAdminPIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueAdminCIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCQueue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCDot1PInProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCDot1POutProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCForceDEValue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCDEMark"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCInProfDscp"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCOutProfDscp"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCInProfPrec"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCOutProfPrec"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueUsePortParent"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueuePortLvl"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueuePortWght"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueuePortCIRLvl"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueuePortCIRWght"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueuePortAvgOverhead"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueuePoolName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosSapEgressV6v0Group = tmnxQosSapEgressV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosSapEgressV6v0Group.setDescription('The group of objects supporting management of SAP egress QoS policies on Alcatel 7x50 SR series systems.')
tmnxQosNetworkV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 27)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyScope"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyIngressDefaultActionFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyIngressDefaultActionProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyEgressRemark"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyIngressLerUseDscp"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDSCPRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDSCPFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDSCPProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDSCPLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDSCPTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDot1pRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDot1pFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDot1pProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDot1pLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDot1pTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCDSCPInProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCDSCPOutProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCLspExpInProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCLspExpOutProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCDot1pInProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCDot1pOutProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCForceDEValue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCDEMark"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePolicyRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePolicyDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePolicyLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePolicyTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePoolName"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueParent"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueCIRLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueCIRWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueMCast"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueExpedite"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueCIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueCBS"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueMBS"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueHiPrioOnly"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueUsePortParent"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePortLvl"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePortWght"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePortCIRLvl"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePortCIRWght"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePortAvgOverhead"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePIRAdaptation"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueCIRAdaptation"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueFCRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueFCMCast"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueFCLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueFCTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosNetworkV6v0Group = tmnxQosNetworkV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosNetworkV6v0Group.setDescription('The group of objects supporting management of Network QoS policies on Alcatel 7x50 SR series systems.')
tmnxQosFrameBasedV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 28)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyFrameBasedAccnt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosFrameBasedV6v0Group = tmnxQosFrameBasedV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosFrameBasedV6v0Group.setDescription('The group of objects supporting management of frame-based queue accounting on Alcatel 7x50 SR series systems release 6.0.')
tmnxQosObsoletedV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 29)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCDot1PValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosObsoletedV6v0Group = tmnxQosObsoletedV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosObsoletedV6v0Group.setDescription('The group of obsolete objects for the QoS on Alcatel 7x50 SR series systems.')
tmnxQosNamedPoolPolicyV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 30)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNamedPoolPolicyTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNamedPoolPolicyRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNamedPoolPolicyLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNamedPoolPolicyDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNamedPoolPolicyQ1DefaultWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNamedPoolPolicyQ1MdaWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNamedPoolPolicyQ1PortWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tQ1NamedPoolTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tQ1NamedPoolRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tQ1NamedPoolLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tQ1NamedPoolDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tQ1NamedPoolNetworkAllocWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tQ1NamedPoolAccessAllocWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tQ1NamedPoolSlopePolicy"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tQ1NamedPoolReservedCbs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosNamedPoolPolicyV6v0Group = tmnxQosNamedPoolPolicyV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosNamedPoolPolicyV6v0Group.setDescription('The group of objects for the named pool policy on Alcatel 7x50 SR series systems.')
mibBuilder.exportSymbols("ALCATEL-IND1-TIMETRA-QOS-MIB", tSapIngressFCInProfPrec=tSapIngressFCInProfPrec, tNetworkPolicyRowStatus=tNetworkPolicyRowStatus, tSapIngressIPCriteriaSourceIpAddr=tSapIngressIPCriteriaSourceIpAddr, tSchedulerPolicyTableLastChanged=tSchedulerPolicyTableLastChanged, tmnxQosSchedulerV5v0Group=tmnxQosSchedulerV5v0Group, tSapEgressFCQueue=tSapEgressFCQueue, tVirtualSchedulerLevel=tVirtualSchedulerLevel, tNetworkQueueFCEntry=tNetworkQueueFCEntry, tSapIngressMacCriteriaSSAP=tSapIngressMacCriteriaSSAP, tSapIngressPrecFC=tSapIngressPrecFC, tVirtualSchedulerUsePortParent=tVirtualSchedulerUsePortParent, tSlopeTimeAvgFactor=tSlopeTimeAvgFactor, tNetworkPolicyIngressDefaultActionFC=tNetworkPolicyIngressDefaultActionFC, tSapEgressScope=tSapEgressScope, tNamedPoolPolicyRowStatus=tNamedPoolPolicyRowStatus, tSlopeLoMaxAverage=tSlopeLoMaxAverage, tSapEgressQueueRowStatus=tSapEgressQueueRowStatus, tSapIngressQueueRowStatus=tSapIngressQueueRowStatus, tSlopeLastChanged=tSlopeLastChanged, tQosNotifyPrefix=tQosNotifyPrefix, tNetworkIngressLSPEXPFC=tNetworkIngressLSPEXPFC, tSharedQueuePolicyTableLastChanged=tSharedQueuePolicyTableLastChanged, tSapIngressIPv6CriteriaDSCP=tSapIngressIPv6CriteriaDSCP, tAtmTdpSir=tAtmTdpSir, tSapIngressQueueTableLastChanged=tSapIngressQueueTableLastChanged, tSapEgressQueueCIRWeight=tSapEgressQueueCIRWeight, tSapEgressQueueParent=tSapEgressQueueParent, tmnxQosSapEgressV6v0Group=tmnxQosSapEgressV6v0Group, tFCObjects=tFCObjects, tSharedQueuePIR=tSharedQueuePIR, tQ1NamedPoolRowStatus=tQ1NamedPoolRowStatus, tSapIngressPrecTable=tSapIngressPrecTable, tSapIngressQueueTable=tSapIngressQueueTable, tSchedulerPolicyName=tSchedulerPolicyName, tPortSchedulerPlcyOrphanCIRLvl=tPortSchedulerPlcyOrphanCIRLvl, tSapIngressMacCriteriaDstMacMask=tSapIngressMacCriteriaDstMacMask, tSapIngressIPCriteriaActionPriority=tSapIngressIPCriteriaActionPriority, tSapEgressLastChanged=tSapEgressLastChanged, tSapEgressQueueTable=tSapEgressQueueTable, tPortSchedulerPlcyLvl3PIR=tPortSchedulerPlcyLvl3PIR, tDSCPNameTableLastChanged=tDSCPNameTableLastChanged, tSapIngressIPv6CriteriaDestPortValue1=tSapIngressIPv6CriteriaDestPortValue1, tSlopeLoMaxProbability=tSlopeLoMaxProbability, tDSCPNameRowStatus=tDSCPNameRowStatus, tPortSchedulerPlcyOrphanCIRWght=tPortSchedulerPlcyOrphanCIRWght, tSapEgressFCDEMark=tSapEgressFCDEMark, tmnxQosSapEgressV5v0Group=tmnxQosSapEgressV5v0Group, tSapEgressFCOutProfPrec=tSapEgressFCOutProfPrec, tNetworkPolicyIngressDefaultActionProfile=tNetworkPolicyIngressDefaultActionProfile, tSapIngressDot1pLastChanged=tSapIngressDot1pLastChanged, TLevel=TLevel, tSapEgressObjects=tSapEgressObjects, tSapIngressFCInProfRemark=tSapIngressFCInProfRemark, tVirtualSchedulerRowStatus=tVirtualSchedulerRowStatus, TBurstSize=TBurstSize, tNetworkQueueMCast=tNetworkQueueMCast, tNamedPoolPolicyTable=tNamedPoolPolicyTable, tSapEgressFCTableLastChanged=tSapEgressFCTableLastChanged, tmnxQos7750V6v0Compliance=tmnxQos7750V6v0Compliance, tSapEgressQueuePoolName=tSapEgressQueuePoolName, tSapIngressQueueCIRLevel=tSapIngressQueueCIRLevel, tSapIngressFCRowStatus=tSapIngressFCRowStatus, tSapEgressQueueWeight=tSapEgressQueueWeight, tNetworkEgressFCLspExpInProfile=tNetworkEgressFCLspExpInProfile, tVirtualSchedulerSummedCIR=tVirtualSchedulerSummedCIR, tmnxQosDSCPGroup=tmnxQosDSCPGroup, tVirtualSchedulerPortLvl=tVirtualSchedulerPortLvl, tSlopePolicyTableLastChanged=tSlopePolicyTableLastChanged, TBurstHundredthsOfPercent=TBurstHundredthsOfPercent, tSlopeHiMaxProbability=tSlopeHiMaxProbability, tSapIngressIPv6CriteriaDestPortOperator=tSapIngressIPv6CriteriaDestPortOperator, TRatePercent=TRatePercent, tSapIngressDot1pTableLastChanged=tSapIngressDot1pTableLastChanged, tSapEgressTableLastChanged=tSapEgressTableLastChanged, tSapEgressFCOutProfDscp=tSapEgressFCOutProfDscp, tSapEgressQueueExpedite=tSapEgressQueueExpedite, tSchedulerPolicyDescription=tSchedulerPolicyDescription, tSapIngressRowStatus=tSapIngressRowStatus, tSharedQueueFCBCastQueue=tSharedQueueFCBCastQueue, tSapEgressQueueOperPIR=tSapEgressQueueOperPIR, tSapIngressMacCriteriaEntry=tSapIngressMacCriteriaEntry, tSapIngressFCDE1OutOfProfile=tSapIngressFCDE1OutOfProfile, tNetworkPolicyDescription=tNetworkPolicyDescription, tmnxQosSchedulerGroup=tmnxQosSchedulerGroup, tDSCPName=tDSCPName, tmnxQosCompliances=tmnxQosCompliances, tSapIngressPrecTableLastChanged=tSapIngressPrecTableLastChanged, tQ1NamedPoolTableLastChanged=tQ1NamedPoolTableLastChanged, tDSCPObjects=tDSCPObjects, TAtmTdpDescrType=TAtmTdpDescrType, tSapIngressIPCriteriaSourceIpMask=tSapIngressIPCriteriaSourceIpMask, tNetworkQueuePortCIRLvl=tNetworkQueuePortCIRLvl, tNetworkQueuePIR=tNetworkQueuePIR, TDEValue=TDEValue, tNetworkQueueObjects=tNetworkQueueObjects, tNetworkIngressDot1pLastChanged=tNetworkIngressDot1pLastChanged, TProfile=TProfile, tNetworkIngressLSPEXPTableLastChanged=tNetworkIngressLSPEXPTableLastChanged, tSapEgressFCInProfDscp=tSapEgressFCInProfDscp, tNetworkQueueLevel=tNetworkQueueLevel, tNetworkQueueMBS=tNetworkQueueMBS, tSharedQueueFCMCastQueue=tSharedQueueFCMCastQueue, tNetworkIngressDot1pRowStatus=tNetworkIngressDot1pRowStatus, tSapIngressTableLastChanged=tSapIngressTableLastChanged, tAtmTdpLastChanged=tAtmTdpLastChanged, TPIRRatePercent=TPIRRatePercent, tSharedQueueId=tSharedQueueId, tSapEgressQueueLastChanged=tSapEgressQueueLastChanged, tPortSchedulerPlcyMaxRate=tPortSchedulerPlcyMaxRate, tSapIngressQueueLevel=tSapIngressQueueLevel, tSapIngressDSCPRowStatus=tSapIngressDSCPRowStatus, tQ1NamedPoolPolicyName=tQ1NamedPoolPolicyName, tPortSchedulerPlcyLastChanged=tPortSchedulerPlcyLastChanged, tSharedQueueObjects=tSharedQueueObjects, tNetworkIngressDSCPEntry=tNetworkIngressDSCPEntry, tSapEgressFCDot1POutProfile=tSapEgressFCDot1POutProfile, tSharedQueueExpedite=tSharedQueueExpedite, tPortSchedulerPlcyLvl7CIR=tPortSchedulerPlcyLvl7CIR, tVirtualSchedulerCIR=tVirtualSchedulerCIR, tmnxQosNamedPoolPolicyV6v0Group=tmnxQosNamedPoolPolicyV6v0Group, tSharedQueueWeight=tSharedQueueWeight, tNetworkIngressLSPEXPLastChanged=tNetworkIngressLSPEXPLastChanged, tNetworkPolicyEgressRemark=tNetworkPolicyEgressRemark, TBurstPercentOrDefault=TBurstPercentOrDefault, tSharedQueueFCTableLastChanged=tSharedQueueFCTableLastChanged, tAtmTdpTableLastChanged=tAtmTdpTableLastChanged, tSapEgressQueueIndex=tSapEgressQueueIndex, tSapIngressQueueCIRWeight=tSapIngressQueueCIRWeight, tNetworkQueueFCTableLastChanged=tNetworkQueueFCTableLastChanged, tSapIngressIPv6CriteriaSourcePortValue1=tSapIngressIPv6CriteriaSourcePortValue1, tNamedPoolPolicyQ1MdaWeight=tNamedPoolPolicyQ1MdaWeight, tNetworkQueueCBS=tNetworkQueueCBS, tSharedQueueFCName=tSharedQueueFCName, tSharedQueueCIR=tSharedQueueCIR, tSapIngressEntry=tSapIngressEntry, tSapIngressQueue=tSapIngressQueue, tNetworkEgressFCForceDEValue=tNetworkEgressFCForceDEValue, tSharedQueuePolicyDescription=tSharedQueuePolicyDescription, tSapIngressQueueCIRAdaptation=tSapIngressQueueCIRAdaptation, tNetworkIngressDSCPFC=tNetworkIngressDSCPFC, tNetworkQueuePortLvl=tNetworkQueuePortLvl, tPortSchedulerPlcyLvl1CIR=tPortSchedulerPlcyLvl1CIR, tAtmTdpDescription=tAtmTdpDescription, tPortSchedulerPlcyTable=tPortSchedulerPlcyTable, TEntryIndicator=TEntryIndicator, tNamedPoolPolicyTableLastChanged=tNamedPoolPolicyTableLastChanged, tSharedQueueIsMultipoint=tSharedQueueIsMultipoint, tVirtualSchedulerTier=tVirtualSchedulerTier, tFCNameLastChanged=tFCNameLastChanged, tNetworkEgressFCTableLastChanged=tNetworkEgressFCTableLastChanged, tSapIngressMacCriteriaSrcMacMask=tSapIngressMacCriteriaSrcMacMask, tNetworkPolicyScope=tNetworkPolicyScope, tNetworkIngressDot1pTable=tNetworkIngressDot1pTable, tSapIngressIPCriteriaProtocol=tSapIngressIPCriteriaProtocol, tSapIngressFCTable=tSapIngressFCTable, tNetworkQueuePolicyDescription=tNetworkQueuePolicyDescription, tSapEgressFCDot1PInProfile=tSapEgressFCDot1PInProfile, tSapIngressQueueMCast=tSapIngressQueueMCast, tNetworkQueuePolicyTableLastChanged=tNetworkQueuePolicyTableLastChanged, tNamedPoolPolicyQ1PortWeight=tNamedPoolPolicyQ1PortWeight, tVirtualSchedulerPortCIRWght=tVirtualSchedulerPortCIRWght, tAtmTdpsMaxSupported=tAtmTdpsMaxSupported, tSharedQueueParent=tSharedQueueParent, tSapEgressFCTable=tSapEgressFCTable, tNetworkPolicyIndex=tNetworkPolicyIndex, tNetworkQueueTableLastChanged=tNetworkQueueTableLastChanged, tNetworkEgressFCLastChanged=tNetworkEgressFCLastChanged, tSharedQueueCBS=tSharedQueueCBS, tAtmTdpRowStatus=tAtmTdpRowStatus, tNetworkQueueFCName=tNetworkQueueFCName, tAtmTdpCdvt=tAtmTdpCdvt, tmnxQos7750V5v0Compliance=tmnxQos7750V5v0Compliance, tNetworkQueue=tNetworkQueue, tPortSchedulerPlcyLvl4CIR=tPortSchedulerPlcyLvl4CIR, tSapIngressPrecLastChanged=tSapIngressPrecLastChanged, tSapIngressLastChanged=tSapIngressLastChanged, tNetworkEgressFCLspExpOutProfile=tNetworkEgressFCLspExpOutProfile, tSapIngressIPCriteriaSourcePortOperator=tSapIngressIPCriteriaSourcePortOperator, tQ1NamedPoolName=tQ1NamedPoolName, tPortSchedulerPlcyLvl1PIR=tPortSchedulerPlcyLvl1PIR, tNetworkQueueFCLastChanged=tNetworkQueueFCLastChanged, tmnxQosFrameBasedV6v0Group=tmnxQosFrameBasedV6v0Group, tSharedQueueFCRowStatus=tSharedQueueFCRowStatus, tSapEgressQueueOperCIR=tSapEgressQueueOperCIR, tmnxQosObsoletedV6v0Group=tmnxQosObsoletedV6v0Group, tNetworkQueuePIRAdaptation=tNetworkQueuePIRAdaptation, tSapIngressQueueWeight=tSapIngressQueueWeight, tPortSchedulerPlcyLvl5PIR=tPortSchedulerPlcyLvl5PIR, tSapIngressDSCP=tSapIngressDSCP, tSlopeLoStartAverage=tSlopeLoStartAverage, TItemScope=TItemScope, tSharedQueueTableLastChanged=tSharedQueueTableLastChanged, tQ1NamedPoolEntry=tQ1NamedPoolEntry, tFCStorageType=tFCStorageType, tPortSchedulerPlcyLvl2CIR=tPortSchedulerPlcyLvl2CIR, tSapIngressDSCPEntry=tSapIngressDSCPEntry, tDSCPNameDscpValue=tDSCPNameDscpValue, tSapEgressRowStatus=tSapEgressRowStatus, tSapIngressDot1pFC=tSapIngressDot1pFC, tQ1NamedPoolLastChanged=tQ1NamedPoolLastChanged, tSapIngressQueueEntry=tSapIngressQueueEntry, tSapIngressIPv6CriteriaSourcePortValue2=tSapIngressIPv6CriteriaSourcePortValue2, tPortSchedulerPlcyDescription=tPortSchedulerPlcyDescription, tmnxQosSapIpv6FilterR4r0Group=tmnxQosSapIpv6FilterR4r0Group, TBurstPercent=TBurstPercent, tSapIngressMacCriteriaFrameType=tSapIngressMacCriteriaFrameType, tNetworkIngressLSPEXPTable=tNetworkIngressLSPEXPTable, tSapEgressEntry=tSapEgressEntry, tAtmTdpMir=tAtmTdpMir, tSapIngressPrecRowStatus=tSapIngressPrecRowStatus, tNetworkQueueFC=tNetworkQueueFC, tSlopePolicyTable=tSlopePolicyTable, tVirtualSchedulerParent=tVirtualSchedulerParent, tQosTimeStampObjects=tQosTimeStampObjects, tSapEgressFCDot1PValue=tSapEgressFCDot1PValue, tmnxQos7450V4v0Compliance=tmnxQos7450V4v0Compliance, tNetworkQueueParent=tNetworkQueueParent, tNetworkQueuePolicyRowStatus=tNetworkQueuePolicyRowStatus, tSlopePolicy=tSlopePolicy, TPrecValueOrNone=TPrecValueOrNone, tNetworkQueuePoolName=tNetworkQueuePoolName, tFCNameEntry=tFCNameEntry, tVirtualSchedulerPortWght=tVirtualSchedulerPortWght, tSapIngressIPv6CriteriaTableLastChanged=tSapIngressIPv6CriteriaTableLastChanged, tFCRowStatus=tFCRowStatus, tSapIngressMacCriteriaDescription=tSapIngressMacCriteriaDescription, tSharedQueueFCLastChanged=tSharedQueueFCLastChanged, tNetworkEgressFCDot1pOutProfile=tNetworkEgressFCDot1pOutProfile, tSapIngressFCUnknownQueue=tSapIngressFCUnknownQueue, tSapIngressFCEntry=tSapIngressFCEntry, tSapIngressQueueOperPIR=tSapIngressQueueOperPIR, tSapIngressMacCriteriaIndex=tSapIngressMacCriteriaIndex, tSharedQueueLastChanged=tSharedQueueLastChanged, tSapIngressIPCriteriaDestIpMask=tSapIngressIPCriteriaDestIpMask, tSapEgressQueueMBS=tSapEgressQueueMBS, tSapIngressMacCriteriaRowStatus=tSapIngressMacCriteriaRowStatus, tNetworkIngressDot1pProfile=tNetworkIngressDot1pProfile, tPortSchedulerPlcyName=tPortSchedulerPlcyName, tVirtualSchedulerCIRWeight=tVirtualSchedulerCIRWeight, tSapIngressFCBCastQueue=tSapIngressFCBCastQueue, tNetworkEgressFCDSCPInProfile=tNetworkEgressFCDSCPInProfile, tSapIngressIPCriteriaFragment=tSapIngressIPCriteriaFragment, tSapEgressQueueCBS=tSapEgressQueueCBS, tSharedQueueFCTable=tSharedQueueFCTable, tNetworkIngressDot1pValue=tNetworkIngressDot1pValue, tSapEgressTable=tSapEgressTable, tSharedQueueFCUnknownQueue=tSharedQueueFCUnknownQueue, tSlopeObjects=tSlopeObjects, tNetworkQueueCIR=tNetworkQueueCIR, tSharedQueueLevel=tSharedQueueLevel, tFCNameTableLastChanged=tFCNameTableLastChanged, tSapIngressQueueCBS=tSapIngressQueueCBS, tmnxQosNetworkV6v0Group=tmnxQosNetworkV6v0Group, tPortSchedulerPlcyLvl2PIR=tPortSchedulerPlcyLvl2PIR)
mibBuilder.exportSymbols("ALCATEL-IND1-TIMETRA-QOS-MIB", tNetworkQueueCIRLevel=tNetworkQueueCIRLevel, tAtmTdpIndex=tAtmTdpIndex, tNetworkQueueExpedite=tNetworkQueueExpedite, tSapIngressDot1pTable=tSapIngressDot1pTable, tSapEgressQueueCIRLevel=tSapEgressQueueCIRLevel, tNetworkQueuePortAvgOverhead=tNetworkQueuePortAvgOverhead, tNetworkEgressFCDSCPOutProfile=tNetworkEgressFCDSCPOutProfile, tSharedQueuePolicyLastChanged=tSharedQueuePolicyLastChanged, tNetworkPolicyEntry=tNetworkPolicyEntry, tmnxQosNetworkV5v0Group=tmnxQosNetworkV5v0Group, tNetworkIngressLSPEXPProfile=tNetworkIngressLSPEXPProfile, tSapIngressDSCPTableLastChanged=tSapIngressDSCPTableLastChanged, tSapIngressFCLastChanged=tSapIngressFCLastChanged, tSharedQueuePolicyEntry=tSharedQueuePolicyEntry, tSapIngressIPv6CriteriaActionFC=tSapIngressIPv6CriteriaActionFC, tSapEgressQueueEntry=tSapEgressQueueEntry, tSapIngressMacCriteriaDot1PMask=tSapIngressMacCriteriaDot1PMask, tSharedQueuePolicyRowStatus=tSharedQueuePolicyRowStatus, tSapIngressDot1pEntry=tSapIngressDot1pEntry, tSapIngressIPv6CriteriaSourcePortOperator=tSapIngressIPv6CriteriaSourcePortOperator, tSapIngressIPCriteriaActionFC=tSapIngressIPCriteriaActionFC, tmnxQos7450V6v0Compliance=tmnxQos7450V6v0Compliance, tAtmTdpTable=tAtmTdpTable, tSapIngressDot1pRowStatus=tSapIngressDot1pRowStatus, tSapIngressMacCriteriaEthernetType=tSapIngressMacCriteriaEthernetType, tQ1NamedPoolTable=tQ1NamedPoolTable, TLevelOrDefault=TLevelOrDefault, tNetworkEgressFCTable=tNetworkEgressFCTable, tSapEgressFCRowStatus=tSapEgressFCRowStatus, tSapIngressMacCriteriaTable=tSapIngressMacCriteriaTable, TMatchCriteria=TMatchCriteria, tNetworkQueueLastChanged=tNetworkQueueLastChanged, tQosDomainLastChanged=tQosDomainLastChanged, timetraQosMIBModule=timetraQosMIBModule, tmnxQosNetworkR2r1Group=tmnxQosNetworkR2r1Group, tmnxQosConformance=tmnxQosConformance, tPortSchedulerPlcyOrphanLvl=tPortSchedulerPlcyOrphanLvl, tSapIngressMacCriteriaSnapPid=tSapIngressMacCriteriaSnapPid, tSharedQueueCIRWeight=tSharedQueueCIRWeight, tSharedQueuePoolName=tSharedQueuePoolName, tSapIngressDescription=tSapIngressDescription, tSapIngressDot1pValue=tSapIngressDot1pValue, tNetworkPolicyIngressLerUseDscp=tNetworkPolicyIngressLerUseDscp, tSapIngressTable=tSapIngressTable, tFCNameTable=tFCNameTable, tNetworkQueueFCMCast=tNetworkQueueFCMCast, tSlopePolicyEntry=tSlopePolicyEntry, tNetworkIngressDSCPRowStatus=tNetworkIngressDSCPRowStatus, tDSCPNameStorageType=tDSCPNameStorageType, tmnxQosAtmTdpV5v0Group=tmnxQosAtmTdpV5v0Group, tSapIngressPrecEntry=tSapIngressPrecEntry, tmnxQosSapIngressV6v0Group=tmnxQosSapIngressV6v0Group, tSapIngressIPCriteriaEntry=tSapIngressIPCriteriaEntry, tNetworkQueuePolicyEntry=tNetworkQueuePolicyEntry, tSapIngressMacCriteriaSnapOui=tSapIngressMacCriteriaSnapOui, tVirtualSchedulerName=tVirtualSchedulerName, tSharedQueueMBS=tSharedQueueMBS, tSlopeHiMaxAverage=tSlopeHiMaxAverage, tNetworkEgressFCName=tNetworkEgressFCName, tNetworkIngressDSCP=tNetworkIngressDSCP, tSapIngressQueueMBS=tSapIngressQueueMBS, tSapIngressQueueAdminPIR=tSapIngressQueueAdminPIR, tFCValue=tFCValue, tSapIngressIPv6CriteriaIndex=tSapIngressIPv6CriteriaIndex, tSapIngressIPv6CriteriaSourceIpAddr=tSapIngressIPv6CriteriaSourceIpAddr, tNetworkQueueTable=tNetworkQueueTable, tSharedQueuePolicyTable=tSharedQueuePolicyTable, tSapIngressDSCPTable=tSapIngressDSCPTable, tSapIngressMatchCriteria=tSapIngressMatchCriteria, tNetworkQueueCIRAdaptation=tNetworkQueueCIRAdaptation, tSapEgressQueuePortLvl=tSapEgressQueuePortLvl, tSapIngressDSCPLastChanged=tSapIngressDSCPLastChanged, tPortSchedulerPlcyLvl6CIR=tPortSchedulerPlcyLvl6CIR, tSharedQueueRowStatus=tSharedQueueRowStatus, tSapIngressFCInProfDscp=tSapIngressFCInProfDscp, tSapEgressQueuePortWght=tSapEgressQueuePortWght, tPortSchedulerPlcyLvl5CIR=tPortSchedulerPlcyLvl5CIR, tSharedQueuePolicy=tSharedQueuePolicy, tSchedulerObjects=tSchedulerObjects, tSapIngressIPCriteriaLastChanged=tSapIngressIPCriteriaLastChanged, tSapIngressFCQueue=tSapIngressFCQueue, tVirtualSchedulerPIR=tVirtualSchedulerPIR, tSapIngressIPv6CriteriaDestIpAddr=tSapIngressIPv6CriteriaDestIpAddr, tAtmTdpCLPTagging=tAtmTdpCLPTagging, tSapEgressQueueUsePortParent=tSapEgressQueueUsePortParent, tNetworkQueuePolicyLastChanged=tNetworkQueuePolicyLastChanged, tmnxQos7750V4v0Compliance=tmnxQos7750V4v0Compliance, tAtmTdpMbs=tAtmTdpMbs, tmnxQosSapEgressR2r1Group=tmnxQosSapEgressR2r1Group, tNamedPoolPolicyQ1DefaultWeight=tNamedPoolPolicyQ1DefaultWeight, tQosNotifications=tQosNotifications, tVirtualSchedulerEntry=tVirtualSchedulerEntry, tNetworkQueuePolicy=tNetworkQueuePolicy, tFCName=tFCName, tNetworkQueuePolicyTable=tNetworkQueuePolicyTable, tSapIngressIPv6CriteriaActionPriority=tSapIngressIPv6CriteriaActionPriority, tSapEgressQueuePortCIRLvl=tSapEgressQueuePortCIRLvl, tPortSchedulerPlcyRowStatus=tPortSchedulerPlcyRowStatus, tSapIngressIndex=tSapIngressIndex, tAtmTdpObjects=tAtmTdpObjects, tSapIngressQueueMode=tSapIngressQueueMode, tSapIngressFCOutProfRemark=tSapIngressFCOutProfRemark, tAtmTdpPir=tAtmTdpPir, tVirtualSchedulerWeight=tVirtualSchedulerWeight, tSapIngressDot1pPriority=tSapIngressDot1pPriority, tSapIngressPrecValue=tSapIngressPrecValue, tNetworkIngressLSPEXPRowStatus=tNetworkIngressLSPEXPRowStatus, tSharedQueueFCEntry=tSharedQueueFCEntry, tSapIngressIPCriteriaSourcePortValue1=tSapIngressIPCriteriaSourcePortValue1, tNetworkPolicyTableLastChanged=tNetworkPolicyTableLastChanged, tNetworkIngressDSCPTable=tNetworkIngressDSCPTable, tSapIngressDSCPFC=tSapIngressDSCPFC, tSapEgressQueueHiPrioOnly=tSapEgressQueueHiPrioOnly, tNetworkIngressDot1pEntry=tNetworkIngressDot1pEntry, tNamedPoolPolicyName=tNamedPoolPolicyName, tNetworkQueueHiPrioOnly=tNetworkQueueHiPrioOnly, tSapIngressQueuePoliced=tSapIngressQueuePoliced, tNetworkQueueUsePortParent=tNetworkQueueUsePortParent, tSapIngressScope=tSapIngressScope, tSapIngressFCTableLastChanged=tSapIngressFCTableLastChanged, tSapIngressFCOutProfDscp=tSapIngressFCOutProfDscp, tNetworkEgressFCEntry=tNetworkEgressFCEntry, tSapIngressMacCriteriaDot1PValue=tSapIngressMacCriteriaDot1PValue, tSapIngressMacCriteriaDSAPMask=tSapIngressMacCriteriaDSAPMask, tNetworkPolicyTable=tNetworkPolicyTable, TAdaptationRule=TAdaptationRule, tmnxQosSlopeGroup=tmnxQosSlopeGroup, tSharedQueueCIRLevel=tSharedQueueCIRLevel, tSapIngressQueueExpedite=tSapIngressQueueExpedite, TEntryId=TEntryId, tNetworkIngressDot1pTableLastChanged=tNetworkIngressDot1pTableLastChanged, tSapIngressMacCriteriaDSAP=tSapIngressMacCriteriaDSAP, tVirtualSchedulerPortCIRLvl=tVirtualSchedulerPortCIRLvl, tSapEgressQueuePortCIRWght=tSapEgressQueuePortCIRWght, tSapIngressFCName=tSapIngressFCName, tNetworkQueueWeight=tNetworkQueueWeight, tNetworkPolicyLastChanged=tNetworkPolicyLastChanged, tSchedulerPolicyFrameBasedAccnt=tSchedulerPolicyFrameBasedAccnt, tmnxQosGlobalGroup=tmnxQosGlobalGroup, tNamedPoolPolicyEntry=tNamedPoolPolicyEntry, tSapIngressQueueParent=tSapIngressQueueParent, tNetworkObjects=tNetworkObjects, tSapIngressFCOutProfPrec=tSapIngressFCOutProfPrec, tSapIngressMacCriteriaLastChanged=tSapIngressMacCriteriaLastChanged, TPrecValue=TPrecValue, tSapIngressDefaultFCPriority=tSapIngressDefaultFCPriority, PYSNMP_MODULE_ID=timetraQosMIBModule, tPortSchedulerPlcyLvl7PIR=tPortSchedulerPlcyLvl7PIR, tSchedulerPolicyRowStatus=tSchedulerPolicyRowStatus, tAtmTdpDescrType=tAtmTdpDescrType, tSapEgressFCEntry=tSapEgressFCEntry, tDSCPNameLastChanged=tDSCPNameLastChanged, tSharedQueueEntry=tSharedQueueEntry, tNetworkIngressDot1pFC=tNetworkIngressDot1pFC, TPriority=TPriority, tSapIngressIPv6CriteriaTable=tSapIngressIPv6CriteriaTable, tSapIngressObjects=tSapIngressObjects, tSapIngressMacCriteriaTableLastChanged=tSapIngressMacCriteriaTableLastChanged, tPortSchedulerPlcyLvl4PIR=tPortSchedulerPlcyLvl4PIR, tSapIngressPrecFCPriority=tSapIngressPrecFCPriority, tSapIngressIPCriteriaDestPortValue2=tSapIngressIPCriteriaDestPortValue2, tSapIngressIPv6CriteriaRowStatus=tSapIngressIPv6CriteriaRowStatus, tAtmTdpPolicing=tAtmTdpPolicing, tPortSchedulerPlcyEntry=tPortSchedulerPlcyEntry, tSapIngressIPv6CriteriaDestIpMask=tSapIngressIPv6CriteriaDestIpMask, tQ1NamedPoolNetworkAllocWeight=tQ1NamedPoolNetworkAllocWeight, tSapEgressIndex=tSapEgressIndex, tSapIngressIPv6CriteriaDescription=tSapIngressIPv6CriteriaDescription, tVirtualSchedulerTableLastChanged=tVirtualSchedulerTableLastChanged, TProfileOrNone=TProfileOrNone, tPortSchedulerPlcyLvl6PIR=tPortSchedulerPlcyLvl6PIR, tQosObjects=tQosObjects, tAtmTdpEntry=tAtmTdpEntry, tNetworkQueueCIRWeight=tNetworkQueueCIRWeight, tSapEgressQueueAdminCIR=tSapEgressQueueAdminCIR, tDSCPNameEntry=tDSCPNameEntry, tNetworkQueuePortWght=tNetworkQueuePortWght, tSapIngressIPv6CriteriaLastChanged=tSapIngressIPv6CriteriaLastChanged, tSharedQueueFCQueue=tSharedQueueFCQueue, tQosObsoleteObjectsGroup=tQosObsoleteObjectsGroup, tSchedulerPolicyTable=tSchedulerPolicyTable, tNamedPoolPolicyLastChanged=tNamedPoolPolicyLastChanged, tSapEgressQueueAdminPIR=tSapEgressQueueAdminPIR, TPriorityOrDefault=TPriorityOrDefault, tSapIngressQueuePoolName=tSapIngressQueuePoolName, tSapIngressIPCriteriaDSCP=tSapIngressIPCriteriaDSCP, tSapIngressIPCriteriaDestPortValue1=tSapIngressIPCriteriaDestPortValue1, tAtmTdpsCurrentlyConfigured=tAtmTdpsCurrentlyConfigured, tPortSchedulerPlcyOrphanWeight=tPortSchedulerPlcyOrphanWeight, tNetworkQueueRowStatus=tNetworkQueueRowStatus, tSapIngressQueueAdminCIR=tSapIngressQueueAdminCIR, tNetworkEgressFCDEMark=tNetworkEgressFCDEMark, tSapIngressIPCriteriaTableLastChanged=tSapIngressIPCriteriaTableLastChanged, tSlopeDescription=tSlopeDescription, tNamedPoolPolicyDescription=tNamedPoolPolicyDescription, tSapEgressQueueLevel=tSapEgressQueueLevel, tNetworkIngressLSPEXP=tNetworkIngressLSPEXP, TQueueMode=TQueueMode, tSapEgressQueueTableLastChanged=tSapEgressQueueTableLastChanged, tSharedQueueHiPrioOnly=tSharedQueueHiPrioOnly, tSapIngressIPCriteriaDestPortOperator=tSapIngressIPCriteriaDestPortOperator, tSlopeHiStartAverage=tSlopeHiStartAverage, tSapIngressIPv6CriteriaNextHeader=tSapIngressIPv6CriteriaNextHeader, tVirtualSchedulerCIRLevel=tVirtualSchedulerCIRLevel, tSapIngressMacCriteriaSrcMacAddr=tSapIngressMacCriteriaSrcMacAddr, tSapEgressFCName=tSapEgressFCName, TItemMatch=TItemMatch, tNetworkQueuePortCIRWght=tNetworkQueuePortCIRWght, tmnxQosQueueV4v0Group=tmnxQosQueueV4v0Group, TRemarkType=TRemarkType, tNetworkQueueEntry=tNetworkQueueEntry, tSapIngressIPCriteriaRowStatus=tSapIngressIPCriteriaRowStatus, tSapEgressFCForceDEValue=tSapEgressFCForceDEValue, tSapIngressQueueHiPrioOnly=tSapIngressQueueHiPrioOnly, tPortSchedulerPlcyLvl8PIR=tPortSchedulerPlcyLvl8PIR, tSapEgressQueueCIRAdaptation=tSapEgressQueueCIRAdaptation, tSharedQueueTable=tSharedQueueTable, TDEProfile=TDEProfile, tSapIngressQueuePIRAdaptation=tSapIngressQueuePIRAdaptation, tSapEgressQueuePIRAdaptation=tSapEgressQueuePIRAdaptation, tSapIngressIPv6CriteriaEntry=tSapIngressIPv6CriteriaEntry, tSapIngressIPCriteriaTable=tSapIngressIPCriteriaTable, tSapIngressMacCriteriaSSAPMask=tSapIngressMacCriteriaSSAPMask, tSapIngressQueueOperCIR=tSapIngressQueueOperCIR, tDSCPNameTable=tDSCPNameTable, tPoolObjects=tPoolObjects, tSchedulerPolicyLastChanged=tSchedulerPolicyLastChanged, tVirtualSchedulerLastChanged=tVirtualSchedulerLastChanged, tSlopeRowStatus=tSlopeRowStatus, tSapIngressIPCriteriaDescription=tSapIngressIPCriteriaDescription, tSlopeLoAdminStatus=tSlopeLoAdminStatus, tSapEgressFCInProfPrec=tSapEgressFCInProfPrec, tSchedulerPolicyEntry=tSchedulerPolicyEntry, tAtmTdpServCat=tAtmTdpServCat, tmnxQosFCGroup=tmnxQosFCGroup, tPortSchedulerPlcyLvl3CIR=tPortSchedulerPlcyLvl3CIR, tSapIngressDefaultFC=tSapIngressDefaultFC, tmnxQosGroups=tmnxQosGroups, tSapIngressDSCPPriority=tSapIngressDSCPPriority, tNetworkEgressFCDot1pInProfile=tNetworkEgressFCDot1pInProfile, tSapIngressQueueLastChanged=tSapIngressQueueLastChanged, tQ1NamedPoolReservedCbs=tQ1NamedPoolReservedCbs, tVirtualSchedulerDescription=tVirtualSchedulerDescription, tmnxQosAtmTdpV3v0Group=tmnxQosAtmTdpV3v0Group, tQ1NamedPoolAccessAllocWeight=tQ1NamedPoolAccessAllocWeight, tNetworkIngressDSCPLastChanged=tNetworkIngressDSCPLastChanged, tNetworkIngressDSCPTableLastChanged=tNetworkIngressDSCPTableLastChanged, tSapIngressIPv6CriteriaSourceIpMask=tSapIngressIPv6CriteriaSourceIpMask, tSapEgressQueuePortAvgOverhead=tSapEgressQueuePortAvgOverhead, tNetworkQueueFCRowStatus=tNetworkQueueFCRowStatus, tSlopeHiAdminStatus=tSlopeHiAdminStatus, TNetworkPolicyID=TNetworkPolicyID, tSapIngressMacCriteriaActionFC=tSapIngressMacCriteriaActionFC, tQ1NamedPoolSlopePolicy=tQ1NamedPoolSlopePolicy)
mibBuilder.exportSymbols("ALCATEL-IND1-TIMETRA-QOS-MIB", tSapIngressIPCriteriaSourcePortValue2=tSapIngressIPCriteriaSourcePortValue2, tAtmTdpIndexNext=tAtmTdpIndexNext, tSapIngressFCMCastQueue=tSapIngressFCMCastQueue, tPortSchedulerPlcyLvl8CIR=tPortSchedulerPlcyLvl8CIR, tmnxQosSapIngressV4v0Group=tmnxQosSapIngressV4v0Group, tSapIngressFCProfile=tSapIngressFCProfile, tSapIngressMacCriteriaActionPriority=tSapIngressMacCriteriaActionPriority, tSapEgressFCLastChanged=tSapEgressFCLastChanged, tNetworkIngressLSPEXPEntry=tNetworkIngressLSPEXPEntry, tSapIngressIPCriteriaDestIpAddr=tSapIngressIPCriteriaDestIpAddr, tSapIngressIPCriteriaIndex=tSapIngressIPCriteriaIndex, tAtmTdpShaping=tAtmTdpShaping, tVirtualSchedulerTable=tVirtualSchedulerTable, tSapEgressDescription=tSapEgressDescription, tSapIngressMacCriteriaDstMacAddr=tSapIngressMacCriteriaDstMacAddr, tSapIngressIPv6CriteriaDestPortValue2=tSapIngressIPv6CriteriaDestPortValue2, tNetworkIngressDSCPProfile=tNetworkIngressDSCPProfile, tNetworkQueueFCTable=tNetworkQueueFCTable, tQ1NamedPoolDescription=tQ1NamedPoolDescription, tmnxQos7450V5v0Compliance=tmnxQos7450V5v0Compliance)
