#
# PySNMP MIB module CHATEAU-CD-PRODUCT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CHATEAU-CD-PRODUCT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:48:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ChateauTrapControl, ChateauEventSeverity, chateauCDProduct = mibBuilder.importSymbols("CHATEAUSYSTEMS-REGISTRATIONS-MIB", "ChateauTrapControl", "ChateauEventSeverity", "chateauCDProduct")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
TimeTicks, Bits, Counter64, MibIdentifier, ModuleIdentity, iso, Unsigned32, Counter32, NotificationType, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Integer32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Bits", "Counter64", "MibIdentifier", "ModuleIdentity", "iso", "Unsigned32", "Counter32", "NotificationType", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Integer32", "IpAddress")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
chateauCDProductMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1))
chateauCDProductMIB.setRevisions(('2005-11-09 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: chateauCDProductMIB.setRevisionsDescriptions(('First Release.',))
if mibBuilder.loadTexts: chateauCDProductMIB.setLastUpdated('200511090000Z')
if mibBuilder.loadTexts: chateauCDProductMIB.setOrganization('Chateau Systems, Inc.')
if mibBuilder.loadTexts: chateauCDProductMIB.setContactInfo('Larry R. Walsh Chateau Systems, Inc PO Box 898 Stanwood, WA 98292 USA 360 387-2615 larrywalsh@chateausystems.com www.chateausystems.com')
if mibBuilder.loadTexts: chateauCDProductMIB.setDescription('This MIB defines Nodes and Data Objects to support Chateau Systems CD Players. This MIB has been distributed as part of the handout materials from the SNMP Technology Seminar presented by Chateau Systems. Any person or organization making use of this example MIB is responsible for ensuring its complete suitability for their own purposes. This includes the text of the legal disclaimers below, as well as all other aspects. Chateau Systems reserves the right to make changes in specifications and other information contained in this document without prior notice. The reader should contact Chateau Systems to determine whether or not such changes have been made. In no event shall Chateau Systems be liable for any incidental, indirect, special, or consequential damages whatsoever (including but not limited to lost profits) arising out of or related to this document or the information contained in it, even if Chateau Systems has been advised of, known, or should have known, the possibility of such damages. Chateau Systems grants vendors, end-users, and other interested parties a non-exclusive license to use this specification in connection with the management of Chateau Systems products. Copyright November 2005 Chateau Systems, Inc.')
chateauCDProdConfig = ObjectIdentity((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 1))
if mibBuilder.loadTexts: chateauCDProdConfig.setStatus('current')
if mibBuilder.loadTexts: chateauCDProdConfig.setDescription('CD Configuration Organizational node')
cdStaticConfig = ObjectIdentity((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 1, 1))
if mibBuilder.loadTexts: cdStaticConfig.setStatus('current')
if mibBuilder.loadTexts: cdStaticConfig.setDescription('CD Static Configuration Node')
cdStCfgManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 1, 1, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdStCfgManufacturer.setStatus('current')
if mibBuilder.loadTexts: cdStCfgManufacturer.setDescription("The IANA issued Enterprise OID for this Product's Manufacturer.")
cdStCfgModel = MibScalar((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdStCfgModel.setStatus('current')
if mibBuilder.loadTexts: cdStCfgModel.setDescription("Manufacturer's Model Designation")
cdStCfgFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdStCfgFirmwareRev.setStatus('current')
if mibBuilder.loadTexts: cdStCfgFirmwareRev.setDescription('The Firmware Revision for currently loaded firmware')
cdDynamicConfig = ObjectIdentity((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 1, 2))
if mibBuilder.loadTexts: cdDynamicConfig.setStatus('current')
if mibBuilder.loadTexts: cdDynamicConfig.setDescription('CD Dynamic Configuration Node')
cdDynCfgUserAlias = MibScalar((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdDynCfgUserAlias.setStatus('current')
if mibBuilder.loadTexts: cdDynCfgUserAlias.setDescription('Any user assigned name for this CD player')
chateauCDProdControl = ObjectIdentity((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 2))
if mibBuilder.loadTexts: chateauCDProdControl.setStatus('current')
if mibBuilder.loadTexts: chateauCDProdControl.setDescription('CD Control Organizational node')
cdCtlPower = MibScalar((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdCtlPower.setStatus('current')
if mibBuilder.loadTexts: cdCtlPower.setDescription('Indicated CD Player Power status. Can be modified by the user.')
cdCtlTrayDoor = MibScalar((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("closed", 1), ("open", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdCtlTrayDoor.setStatus('current')
if mibBuilder.loadTexts: cdCtlTrayDoor.setDescription('CD Player tray door status. Can be modified by the user. If cdCtlPower = off, then the user cannot modify this value.')
cdCtlPlaying = MibScalar((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 2, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdCtlPlaying.setStatus('current')
if mibBuilder.loadTexts: cdCtlPlaying.setDescription("CD Player 'play' status. Can be modified by the user. If cdCtlPower = off OR cdCtlTrayDoor = open, then the user cannot modify this value.")
chateauCDProdStatus = ObjectIdentity((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3))
if mibBuilder.loadTexts: chateauCDProdStatus.setStatus('current')
if mibBuilder.loadTexts: chateauCDProdStatus.setDescription('CD Player Status organizational node')
cdChassisStatus = ObjectIdentity((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 1))
if mibBuilder.loadTexts: cdChassisStatus.setStatus('current')
if mibBuilder.loadTexts: cdChassisStatus.setDescription('CD Player Chassis status node')
cdChStPowerOnHours = MibScalar((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdChStPowerOnHours.setStatus('current')
if mibBuilder.loadTexts: cdChStPowerOnHours.setDescription('The total number of hours that this CD Player has been powered on in its lifetime.')
cdChStLaserOnHours = MibScalar((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdChStLaserOnHours.setStatus('current')
if mibBuilder.loadTexts: cdChStLaserOnHours.setDescription("The total number of hours that this CD Player's Laser has been powered on in its lifetime. Trending this value may predict Laser failures.")
cdChStCrcErrorCtr = MibScalar((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdChStCrcErrorCtr.setStatus('current')
if mibBuilder.loadTexts: cdChStCrcErrorCtr.setDescription('Counter for CRC errors encountered reading CDs. This Counter is initialized whenever the CD Player is powered on.')
cdChStTemperature = MibScalar((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 1, 4), Integer32()).setUnits('Celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdChStTemperature.setStatus('current')
if mibBuilder.loadTexts: cdChStTemperature.setDescription('CD Player internal chassis temperature.')
cdChStPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("voltageError", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdChStPowerSupply.setStatus('current')
if mibBuilder.loadTexts: cdChStPowerSupply.setDescription('CD Player Power Supply status.')
cdChangerStatus = ObjectIdentity((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 2))
if mibBuilder.loadTexts: cdChangerStatus.setStatus('current')
if mibBuilder.loadTexts: cdChangerStatus.setDescription('CD Player Changer status node')
cdChangerNbrCdSlots = MibScalar((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 2, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdChangerNbrCdSlots.setStatus('current')
if mibBuilder.loadTexts: cdChangerNbrCdSlots.setDescription('The maximum number of CDs that can be loaded into this CD player. The size of (number of indexed entries in) the cdChangerSlotTable.')
cdChangerSlotTable = MibTable((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 2, 2), )
if mibBuilder.loadTexts: cdChangerSlotTable.setStatus('current')
if mibBuilder.loadTexts: cdChangerSlotTable.setDescription('CD Changer Slot Table.')
cdChangerSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 2, 2, 1), ).setIndexNames((0, "CHATEAU-CD-PRODUCT-MIB", "cdChangerSlotNbr"))
if mibBuilder.loadTexts: cdChangerSlotEntry.setStatus('current')
if mibBuilder.loadTexts: cdChangerSlotEntry.setDescription('An entry in cdChangerSlotTable.')
cdChangerSlotNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: cdChangerSlotNbr.setStatus('current')
if mibBuilder.loadTexts: cdChangerSlotNbr.setDescription('Slot number and table index.')
cdChangerSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("containsCD", 1), ("empty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdChangerSlotStatus.setStatus('current')
if mibBuilder.loadTexts: cdChangerSlotStatus.setDescription('CD Changer Slot Status.')
cdChangerSlotCDTrackPlaying = MibTableColumn((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdChangerSlotCDTrackPlaying.setStatus('current')
if mibBuilder.loadTexts: cdChangerSlotCDTrackPlaying.setDescription('If a CD is currently playing, this is the Track Number. This is also the value of cdChangerCDTrackNbr for the CD that is playing. = 0 if no CD is currently playing.')
cdChangerCDNbrTracks = MibTableColumn((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdChangerCDNbrTracks.setStatus('current')
if mibBuilder.loadTexts: cdChangerCDNbrTracks.setDescription('The number of Tracks on this CD. This is also the size the sub-table cdChangerCDTrackTable for this CD - ie, the maximum value of cdChangerCDTrackNbr.')
cdChangerCDTrackTable = MibTable((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 2, 3), )
if mibBuilder.loadTexts: cdChangerCDTrackTable.setStatus('current')
if mibBuilder.loadTexts: cdChangerCDTrackTable.setDescription('Changer Track Table for a single CD.')
cdChangerCDTrackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 2, 3, 1), ).setIndexNames((0, "CHATEAU-CD-PRODUCT-MIB", "cdChangerSlotNbr"), (0, "CHATEAU-CD-PRODUCT-MIB", "cdChangerCDTrackNbr"))
if mibBuilder.loadTexts: cdChangerCDTrackEntry.setStatus('current')
if mibBuilder.loadTexts: cdChangerCDTrackEntry.setDescription('An entry in cdChangerCDTrackTable.')
cdChangerCDTrackNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 2, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cdChangerCDTrackNbr.setStatus('current')
if mibBuilder.loadTexts: cdChangerCDTrackNbr.setDescription('CD Track Number and Table Index')
cdChangerCDTrackPlaying = MibTableColumn((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 2, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdChangerCDTrackPlaying.setStatus('current')
if mibBuilder.loadTexts: cdChangerCDTrackPlaying.setDescription('= true if this Track is currently playing. Only one Track can be true at a time.')
cdChangerCDTrackLengthSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 2, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdChangerCDTrackLengthSecs.setStatus('current')
if mibBuilder.loadTexts: cdChangerCDTrackLengthSecs.setDescription('Track time in seconds.')
cdChangerCDTrackLengthStr = MibTableColumn((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 2, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdChangerCDTrackLengthStr.setStatus('current')
if mibBuilder.loadTexts: cdChangerCDTrackLengthStr.setDescription('Track time in minutes and seconds displayed as text.')
cdChangerCDTrackTitle = MibTableColumn((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 2, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdChangerCDTrackTitle.setStatus('current')
if mibBuilder.loadTexts: cdChangerCDTrackTitle.setDescription('CD Track Title. NULL string if information is not available.')
cdChangerCDTrackArtist = MibTableColumn((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 2, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdChangerCDTrackArtist.setStatus('current')
if mibBuilder.loadTexts: cdChangerCDTrackArtist.setDescription('CD Track Artist. NULL string if information is not available.')
chateauCDProdEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 10))
if mibBuilder.loadTexts: chateauCDProdEvents.setStatus('current')
if mibBuilder.loadTexts: chateauCDProdEvents.setDescription('CD Player Event Data and Trap Definitions are organized under this node.')
cdEventControl = ObjectIdentity((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 10, 1))
if mibBuilder.loadTexts: cdEventControl.setStatus('current')
if mibBuilder.loadTexts: cdEventControl.setDescription('Node for data affecting Agent Trap Management Semantics')
cdEvCtlAgtPollFreq = MibScalar((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 10, 1, 1), Unsigned32().clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdEvCtlAgtPollFreq.setStatus('current')
if mibBuilder.loadTexts: cdEvCtlAgtPollFreq.setDescription('How often the Agent polls the CD Player for trappable conditions. Set = 0 to disable all traps. Persistent through system resets.')
cdChassisTempAlarmThresh = MibScalar((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 10, 1, 2), Integer32().clone(40)).setUnits('Celcius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdChassisTempAlarmThresh.setStatus('current')
if mibBuilder.loadTexts: cdChassisTempAlarmThresh.setDescription('User settable to define the Chassis Temperature past which a Chassis Temperature Alarm will occur. Agent semantics will apply hysterisis logic so that traps to not repeat unecessarily when the chassis temperature is very close to this threshold. Persistent through system resets.')
cdChassisTempEvTrapEn = MibScalar((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 10, 1, 10), ChateauTrapControl().clone('trapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdChassisTempEvTrapEn.setStatus('current')
if mibBuilder.loadTexts: cdChassisTempEvTrapEn.setDescription('User settable to disable/enable Chassis Temperature alarms and okay events. Persistent through system resets.')
cdPowerSupplyEvTrapEn = MibScalar((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 10, 1, 20), ChateauTrapControl().clone('trapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdPowerSupplyEvTrapEn.setStatus('current')
if mibBuilder.loadTexts: cdPowerSupplyEvTrapEn.setDescription('User settable to disable/enable Power Supply alarms and okay events. Persistent through system resets.')
cdEventDescriptors = ObjectIdentity((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 10, 2))
if mibBuilder.loadTexts: cdEventDescriptors.setStatus('current')
if mibBuilder.loadTexts: cdEventDescriptors.setDescription('Event Descriptor Node')
cdEvSeverity = MibScalar((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 10, 2, 1), ChateauEventSeverity()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cdEvSeverity.setStatus('current')
if mibBuilder.loadTexts: cdEvSeverity.setDescription('This value is sent with each trap as an indication of the intended severity of the event.')
cdEvDescription = MibScalar((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 10, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cdEvDescription.setStatus('current')
if mibBuilder.loadTexts: cdEvDescription.setDescription('Text which may provide the user with further diagnostic information.')
cdEventList = ObjectIdentity((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 10, 0))
if mibBuilder.loadTexts: cdEventList.setStatus('current')
if mibBuilder.loadTexts: cdEventList.setDescription('Notification Objects are organized under this node.')
cdChassisTempAlarmEv = NotificationType((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 10, 0, 10)).setObjects(("CHATEAU-CD-PRODUCT-MIB", "cdDynCfgUserAlias"), ("CHATEAU-CD-PRODUCT-MIB", "cdStCfgModel"), ("CHATEAU-CD-PRODUCT-MIB", "cdChStTemperature"), ("CHATEAU-CD-PRODUCT-MIB", "cdEvSeverity"), ("CHATEAU-CD-PRODUCT-MIB", "cdEvDescription"))
if mibBuilder.loadTexts: cdChassisTempAlarmEv.setStatus('current')
if mibBuilder.loadTexts: cdChassisTempAlarmEv.setDescription('Sent when cdChStTemperature > cdChassisTempAlarmThresh. Will not be resent until cdChStTemperature drops below cdChasisTempAlarmThresh less 10%. This trap can be disabled by setting cdChassisTempEvTrapEn = trapDisable.')
cdChassisTempOkayEv = NotificationType((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 10, 0, 11)).setObjects(("CHATEAU-CD-PRODUCT-MIB", "cdDynCfgUserAlias"), ("CHATEAU-CD-PRODUCT-MIB", "cdStCfgModel"), ("CHATEAU-CD-PRODUCT-MIB", "cdChStTemperature"), ("CHATEAU-CD-PRODUCT-MIB", "cdEvSeverity"), ("CHATEAU-CD-PRODUCT-MIB", "cdEvDescription"))
if mibBuilder.loadTexts: cdChassisTempOkayEv.setStatus('current')
if mibBuilder.loadTexts: cdChassisTempOkayEv.setDescription('Sent when cdChStTemperature drops below cdChassisTempAlarmThresh. This trap can be disabled by setting cdChassisTempEvTrapEn = trapDisable.')
cdPowerSupplyEv = NotificationType((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 10, 0, 20)).setObjects(("CHATEAU-CD-PRODUCT-MIB", "cdDynCfgUserAlias"), ("CHATEAU-CD-PRODUCT-MIB", "cdStCfgModel"), ("CHATEAU-CD-PRODUCT-MIB", "cdChStPowerSupply"), ("CHATEAU-CD-PRODUCT-MIB", "cdEvSeverity"), ("CHATEAU-CD-PRODUCT-MIB", "cdEvDescription"))
if mibBuilder.loadTexts: cdPowerSupplyEv.setStatus('current')
if mibBuilder.loadTexts: cdPowerSupplyEv.setDescription('Sent when cdChStPowerSupply changes from okay to voltageError, or from voltageError to okay. This trap can be disabled by setting cdPowerSupplyEvTrapEn = trapDisable.')
chateauCDProdConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 20))
if mibBuilder.loadTexts: chateauCDProdConformance.setStatus('current')
if mibBuilder.loadTexts: chateauCDProdConformance.setDescription('Organizational node for Conformance Objects.')
cdConformanceGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 20, 1))
if mibBuilder.loadTexts: cdConformanceGroups.setStatus('current')
if mibBuilder.loadTexts: cdConformanceGroups.setDescription('Organizational node for Conformance Groups.')
cdProdConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 20, 1, 1)).setObjects(("CHATEAU-CD-PRODUCT-MIB", "cdStCfgManufacturer"), ("CHATEAU-CD-PRODUCT-MIB", "cdStCfgModel"), ("CHATEAU-CD-PRODUCT-MIB", "cdStCfgFirmwareRev"), ("CHATEAU-CD-PRODUCT-MIB", "cdDynCfgUserAlias"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdProdConfigGroup = cdProdConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cdProdConfigGroup.setDescription('cdProdConfigGroup')
cdProdControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 20, 1, 2)).setObjects(("CHATEAU-CD-PRODUCT-MIB", "cdCtlPower"), ("CHATEAU-CD-PRODUCT-MIB", "cdCtlTrayDoor"), ("CHATEAU-CD-PRODUCT-MIB", "cdCtlPlaying"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdProdControlGroup = cdProdControlGroup.setStatus('current')
if mibBuilder.loadTexts: cdProdControlGroup.setDescription('cdProdControlGroup')
cdProdStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 20, 1, 3)).setObjects(("CHATEAU-CD-PRODUCT-MIB", "cdChStPowerOnHours"), ("CHATEAU-CD-PRODUCT-MIB", "cdChStLaserOnHours"), ("CHATEAU-CD-PRODUCT-MIB", "cdChStCrcErrorCtr"), ("CHATEAU-CD-PRODUCT-MIB", "cdChStTemperature"), ("CHATEAU-CD-PRODUCT-MIB", "cdChStPowerSupply"), ("CHATEAU-CD-PRODUCT-MIB", "cdChangerNbrCdSlots"), ("CHATEAU-CD-PRODUCT-MIB", "cdChangerSlotStatus"), ("CHATEAU-CD-PRODUCT-MIB", "cdChangerSlotCDTrackPlaying"), ("CHATEAU-CD-PRODUCT-MIB", "cdChangerCDNbrTracks"), ("CHATEAU-CD-PRODUCT-MIB", "cdChangerCDTrackPlaying"), ("CHATEAU-CD-PRODUCT-MIB", "cdChangerCDTrackLengthSecs"), ("CHATEAU-CD-PRODUCT-MIB", "cdChangerCDTrackLengthStr"), ("CHATEAU-CD-PRODUCT-MIB", "cdChangerCDTrackTitle"), ("CHATEAU-CD-PRODUCT-MIB", "cdChangerCDTrackArtist"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdProdStatusGroup = cdProdStatusGroup.setStatus('current')
if mibBuilder.loadTexts: cdProdStatusGroup.setDescription('cdProdStatusGroup')
cdProdEventGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 20, 1, 4)).setObjects(("CHATEAU-CD-PRODUCT-MIB", "cdEvCtlAgtPollFreq"), ("CHATEAU-CD-PRODUCT-MIB", "cdChassisTempAlarmThresh"), ("CHATEAU-CD-PRODUCT-MIB", "cdChassisTempEvTrapEn"), ("CHATEAU-CD-PRODUCT-MIB", "cdPowerSupplyEvTrapEn"), ("CHATEAU-CD-PRODUCT-MIB", "cdEvSeverity"), ("CHATEAU-CD-PRODUCT-MIB", "cdEvDescription"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdProdEventGroup = cdProdEventGroup.setStatus('current')
if mibBuilder.loadTexts: cdProdEventGroup.setDescription('cdProdEventGroup')
cdProdNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 20, 1, 5)).setObjects(("CHATEAU-CD-PRODUCT-MIB", "cdChassisTempAlarmEv"), ("CHATEAU-CD-PRODUCT-MIB", "cdChassisTempOkayEv"), ("CHATEAU-CD-PRODUCT-MIB", "cdPowerSupplyEv"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdProdNotificationsGroup = cdProdNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: cdProdNotificationsGroup.setDescription('cdProdNotificationsGroup')
cdCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 20, 2)).setObjects(("CHATEAU-CD-PRODUCT-MIB", "cdProdConfigGroup"), ("CHATEAU-CD-PRODUCT-MIB", "cdProdStatusGroup"), ("CHATEAU-CD-PRODUCT-MIB", "cdProdEventGroup"), ("CHATEAU-CD-PRODUCT-MIB", "cdProdNotificationsGroup"), ("CHATEAU-CD-PRODUCT-MIB", "cdProdControlGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdCompliance = cdCompliance.setStatus('current')
if mibBuilder.loadTexts: cdCompliance.setDescription('Specification of mandatory & non-mandatory MIB objects.')
mibBuilder.exportSymbols("CHATEAU-CD-PRODUCT-MIB", cdProdStatusGroup=cdProdStatusGroup, chateauCDProductMIB=chateauCDProductMIB, cdProdControlGroup=cdProdControlGroup, cdStaticConfig=cdStaticConfig, cdChangerSlotCDTrackPlaying=cdChangerSlotCDTrackPlaying, cdDynamicConfig=cdDynamicConfig, chateauCDProdEvents=chateauCDProdEvents, cdEventDescriptors=cdEventDescriptors, cdEvDescription=cdEvDescription, cdChassisTempAlarmThresh=cdChassisTempAlarmThresh, cdChStCrcErrorCtr=cdChStCrcErrorCtr, cdProdEventGroup=cdProdEventGroup, cdChangerCDTrackArtist=cdChangerCDTrackArtist, cdCtlTrayDoor=cdCtlTrayDoor, PYSNMP_MODULE_ID=chateauCDProductMIB, chateauCDProdConfig=chateauCDProdConfig, cdChangerNbrCdSlots=cdChangerNbrCdSlots, cdChangerCDTrackEntry=cdChangerCDTrackEntry, cdChassisTempAlarmEv=cdChassisTempAlarmEv, cdEventList=cdEventList, cdChassisTempEvTrapEn=cdChassisTempEvTrapEn, cdEvSeverity=cdEvSeverity, cdChStTemperature=cdChStTemperature, cdPowerSupplyEvTrapEn=cdPowerSupplyEvTrapEn, cdChangerCDTrackLengthStr=cdChangerCDTrackLengthStr, cdProdNotificationsGroup=cdProdNotificationsGroup, cdChangerSlotTable=cdChangerSlotTable, cdChStPowerOnHours=cdChStPowerOnHours, cdChangerCDTrackTitle=cdChangerCDTrackTitle, cdChassisStatus=cdChassisStatus, cdChangerCDNbrTracks=cdChangerCDNbrTracks, cdChangerCDTrackTable=cdChangerCDTrackTable, chateauCDProdConformance=chateauCDProdConformance, cdStCfgManufacturer=cdStCfgManufacturer, chateauCDProdControl=chateauCDProdControl, chateauCDProdStatus=chateauCDProdStatus, cdChangerSlotStatus=cdChangerSlotStatus, cdConformanceGroups=cdConformanceGroups, cdChangerStatus=cdChangerStatus, cdChassisTempOkayEv=cdChassisTempOkayEv, cdChStPowerSupply=cdChStPowerSupply, cdProdConfigGroup=cdProdConfigGroup, cdEvCtlAgtPollFreq=cdEvCtlAgtPollFreq, cdEventControl=cdEventControl, cdCompliance=cdCompliance, cdStCfgFirmwareRev=cdStCfgFirmwareRev, cdChangerCDTrackNbr=cdChangerCDTrackNbr, cdChangerCDTrackPlaying=cdChangerCDTrackPlaying, cdChangerSlotEntry=cdChangerSlotEntry, cdPowerSupplyEv=cdPowerSupplyEv, cdChangerSlotNbr=cdChangerSlotNbr, cdDynCfgUserAlias=cdDynCfgUserAlias, cdStCfgModel=cdStCfgModel, cdCtlPower=cdCtlPower, cdChStLaserOnHours=cdChStLaserOnHours, cdCtlPlaying=cdCtlPlaying, cdChangerCDTrackLengthSecs=cdChangerCDTrackLengthSecs)
