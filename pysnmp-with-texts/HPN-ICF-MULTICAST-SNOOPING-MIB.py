#
# PySNMP MIB module HPN-ICF-MULTICAST-SNOOPING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-MULTICAST-SNOOPING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:40:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Integer32, TimeTicks, Gauge32, ObjectIdentity, Unsigned32, Counter64, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, iso, ModuleIdentity, NotificationType, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "TimeTicks", "Gauge32", "ObjectIdentity", "Unsigned32", "Counter64", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "iso", "ModuleIdentity", "NotificationType", "Counter32")
DisplayString, TruthValue, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention", "RowStatus")
hpnicfMulticastSnoop = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123))
hpnicfMulticastSnoop.setRevisions(('2014-05-14 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpnicfMulticastSnoop.setRevisionsDescriptions(('The initial version of this MIB file.',))
if mibBuilder.loadTexts: hpnicfMulticastSnoop.setLastUpdated('201405141700Z')
if mibBuilder.loadTexts: hpnicfMulticastSnoop.setOrganization('')
if mibBuilder.loadTexts: hpnicfMulticastSnoop.setContactInfo('')
if mibBuilder.loadTexts: hpnicfMulticastSnoop.setDescription('IGMP/MLD Snooping Management MIB')
class HpnicfVirtualUnitType(TextualConvention, Integer32):
    description = 'VLAN configuration or VSI configuration.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("vlan", 1), ("vsi", 2))

hpnicfMulticastSnoopObject = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1))
hpnicfMcsGlobalConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 1), )
if mibBuilder.loadTexts: hpnicfMcsGlobalConfigTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsGlobalConfigTable.setDescription('Table containing information about the global configuration of IGMP/MLD snooping.')
hpnicfMcsGlobalConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 1, 1), ).setIndexNames((0, "HPN-ICF-MULTICAST-SNOOPING-MIB", "hpnicfMcsGlbSnoopingType"))
if mibBuilder.loadTexts: hpnicfMcsGlobalConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsGlobalConfigEntry.setDescription('Entry containing information about the global configuration of IGMP/MLD snooping.')
hpnicfMcsGlbSnoopingType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hpnicfMcsGlbSnoopingType.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsGlbSnoopingType.setDescription('Type of the global configuration. IPv4 means IGMP snooping configuration, and IPv6 means MLD snooping configuration.')
hpnicfMcsGlbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMcsGlbRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsGlbRowStatus.setDescription('The activation of a row enables IGMP/MLD snooping globally. The destruction of a row disables IGMP/MLD snooping globally.')
hpnicfMcsGlbEntryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMcsGlbEntryLimit.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsGlbEntryLimit.setDescription('Global maximum number of IGMP/MLD snooping forwarding entries.')
hpnicfMcsGlbHostAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8097894)).clone(260)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMcsGlbHostAgingTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsGlbHostAgingTime.setDescription('Global aging time of the multicast group on ports.')
hpnicfMcsGlbMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3174)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMcsGlbMaxResponseTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsGlbMaxResponseTime.setDescription('Global maximum query response time.')
hpnicfMcsGlbRouterAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8097894)).clone(260)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMcsGlbRouterAgingTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsGlbRouterAgingTime.setDescription('Global aging time of router ports.')
hpnicfMcsGlbLastMemQryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMcsGlbLastMemQryInterval.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsGlbLastMemQryInterval.setDescription('Global last member query interval.')
hpnicfMcsGlbDropUnknownEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMcsGlbDropUnknownEnabled.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsGlbDropUnknownEnabled.setDescription('Whether the feature of dropping unknown packets is enabled globally.')
hpnicfMcsVirtualUnitConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 2), )
if mibBuilder.loadTexts: hpnicfMcsVirtualUnitConfigTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsVirtualUnitConfigTable.setDescription('Table containing configuration information about the specified VLAN or VSI.')
hpnicfMcsVirtualUnitConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 2, 1), ).setIndexNames((0, "HPN-ICF-MULTICAST-SNOOPING-MIB", "hpnicfMcsVUType"), (0, "HPN-ICF-MULTICAST-SNOOPING-MIB", "hpnicfMcsVUID"), (0, "HPN-ICF-MULTICAST-SNOOPING-MIB", "hpnicfMcsVUSnoopingType"))
if mibBuilder.loadTexts: hpnicfMcsVirtualUnitConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsVirtualUnitConfigEntry.setDescription('Entry containing information of the specified VLAN or VSI.')
hpnicfMcsVUType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 2, 1, 1), HpnicfVirtualUnitType())
if mibBuilder.loadTexts: hpnicfMcsVUType.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsVUType.setDescription('Type of virtual unit.')
hpnicfMcsVUID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: hpnicfMcsVUID.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsVUID.setDescription('VLAN ID or VSI Index. Its value ranges from 1 to 4094 when type is VLAN, and from 0 to 0xFFFFFFFE when type is VSI')
hpnicfMcsVUSnoopingType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 2, 1, 3), InetAddressType())
if mibBuilder.loadTexts: hpnicfMcsVUSnoopingType.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsVUSnoopingType.setDescription('Type of the configuration. IPv4 means IGMP snooping configuration, and IPv6 means MLD snooping configuration.')
hpnicfMcsVURowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMcsVURowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsVURowStatus.setDescription('The activation of a row enables IGMP/MLD snooping in the VLAN or VSI. The destruction of a row disables IGMP/MLD snooping in the VLAN or VSI.')
hpnicfMcsVUHostAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8097894))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMcsVUHostAgingTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsVUHostAgingTime.setDescription('Aging time of the multicast group on ports in the VLAN or VSI. A value of zero indicates that it is not configured in the VLAN or VSI.')
hpnicfMcsVUMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3174))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMcsVUMaxResponseTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsVUMaxResponseTime.setDescription('Maximum query response time in the VLAN or VSI. A value of zero indicates that it is not configured in the VLAN or VSI.')
hpnicfMcsVURouterAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8097894))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMcsVURouterAgingTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsVURouterAgingTime.setDescription('Aging time of the router port in the VLAN or VSI. A value of zero indicates that it is not configured in the VLAN or VSI.')
hpnicfMcsVULastMemQryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 25))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMcsVULastMemQryInterval.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsVULastMemQryInterval.setDescription('Last member query interval in the VLAN or VSI. A value of zero indicates that it is not configured in the VLAN or VSI.')
hpnicfMcsVUDropUnknownEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 2, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMcsVUDropUnknownEnabled.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsVUDropUnknownEnabled.setDescription('Whether the feature of dropping unknown packets is enabled in the VLAN or VSI.')
hpnicfMcsVUPimSnoopingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 2, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMcsVUPimSnoopingEnabled.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsVUPimSnoopingEnabled.setDescription('Whether PIM snooping is enabled in the VLAN or VSI.')
hpnicfMcsVUVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), )).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMcsVUVersion.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsVUVersion.setDescription('Version of IGMP/MLD snooping that is running on the VLAN. Value 2 represents IGMPv2 snooping and MLDv1 snooping, and value 3 represents IGMPv3 snooping and MLDv2 snooping.')
hpnicfMcsVUQuerierEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 2, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMcsVUQuerierEnabled.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsVUQuerierEnabled.setDescription('Whether the querier feature is enabled in the VLAN or VSI.')
hpnicfMcsVUQuerierInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 2, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 31744)).clone(125)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMcsVUQuerierInterval.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsVUQuerierInterval.setDescription('Query interval.')
hpnicfMcsVUGeneQuerierSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 2, 1, 14), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMcsVUGeneQuerierSourceAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsVUGeneQuerierSourceAddress.setDescription('Source IP address of IGMP or MLD general query packets. Its value is 255.255.255.255 or FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF when not configured.')
hpnicfMcsVUSpecQuerierSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 2, 1, 15), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMcsVUSpecQuerierSourceAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsVUSpecQuerierSourceAddress.setDescription('Source IP address of IGMP or MLD group-specific query packets. Its value is 255.255.255.255 or FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF when not configured.')
hpnicfMcsVULeaveSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 2, 1, 16), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMcsVULeaveSourceAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsVULeaveSourceAddress.setDescription('Source IP address of IGMP or MLD leave packets. Its value is 255.255.255.255 or FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF when not configured.')
hpnicfMcsVUReportSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 2, 1, 17), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMcsVUReportSourceAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsVUReportSourceAddress.setDescription('Source IP address of IGMP or MLD report packets. Its value is 255.255.255.255 or FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF when not configured.')
hpnicfMcsL2EntryTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 3), )
if mibBuilder.loadTexts: hpnicfMcsL2EntryTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsL2EntryTable.setDescription('Table containing a list of Layer 2 multicast group entries.')
hpnicfMcsL2EntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 3, 1), ).setIndexNames((0, "HPN-ICF-MULTICAST-SNOOPING-MIB", "hpnicfMcsL2EntryVUType"), (0, "HPN-ICF-MULTICAST-SNOOPING-MIB", "hpnicfMcsL2EntryVUID"), (0, "HPN-ICF-MULTICAST-SNOOPING-MIB", "hpnicfMcsL2EntryAddressType"), (0, "HPN-ICF-MULTICAST-SNOOPING-MIB", "hpnicfMcsL2EntryGroupAddress"), (0, "HPN-ICF-MULTICAST-SNOOPING-MIB", "hpnicfMcsL2EntrySourceAddress"), (0, "HPN-ICF-MULTICAST-SNOOPING-MIB", "hpnicfMcsL2EntryIfIndex"))
if mibBuilder.loadTexts: hpnicfMcsL2EntryEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsL2EntryEntry.setDescription('Entry of l2-multicast group, which is created for each group learned or configured in the VLAN or VSI.')
hpnicfMcsL2EntryVUType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 3, 1, 1), HpnicfVirtualUnitType())
if mibBuilder.loadTexts: hpnicfMcsL2EntryVUType.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsL2EntryVUType.setDescription('Type of virtual unit.')
hpnicfMcsL2EntryVUID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: hpnicfMcsL2EntryVUID.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsL2EntryVUID.setDescription('VLAN ID or VSI Index. Its value ranges from 1 to 4094 when type is VLAN, and from 0 to 0xFFFFFFFE when type is VSI.')
hpnicfMcsL2EntryAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 3, 1, 3), InetAddressType())
if mibBuilder.loadTexts: hpnicfMcsL2EntryAddressType.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsL2EntryAddressType.setDescription('Type of multicast IP address.')
hpnicfMcsL2EntryGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 3, 1, 4), InetAddress())
if mibBuilder.loadTexts: hpnicfMcsL2EntryGroupAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsL2EntryGroupAddress.setDescription('IP address of the multicast group which the port joined.')
hpnicfMcsL2EntrySourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 3, 1, 5), InetAddress())
if mibBuilder.loadTexts: hpnicfMcsL2EntrySourceAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsL2EntrySourceAddress.setDescription('IP address of the unicast source which the port joined.')
hpnicfMcsL2EntryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 3, 1, 6), InterfaceIndex())
if mibBuilder.loadTexts: hpnicfMcsL2EntryIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsL2EntryIfIndex.setDescription('IfIndex value of the port that joined the Layer 2 IP multicast group entry.')
hpnicfMcsL2EntryPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("interface", 1), ("ac", 2), ("npw", 3), ("upw", 4), ("trill", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMcsL2EntryPortType.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsL2EntryPortType.setDescription('Type of the port.')
hpnicfMcsL2EntryPortAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 3, 1, 8), Bits().clone(namedValues=NamedValues(("d", 0), ("s", 1), ("p", 2), ("k", 3), ("r", 4), ("w", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMcsL2EntryPortAttribute.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsL2EntryPortAttribute.setDescription("Attribute of the port. 'd' means learned from IGMP/MLD packets, 's' means configured statically, 'p' means learned from PIM snooping, 'k' means obtained from the kernel, 'r' means learned from (*, *) entries, 'w' means learned from (*, G) entries.")
hpnicfMcsPacketStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 4), )
if mibBuilder.loadTexts: hpnicfMcsPacketStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsPacketStatisticsTable.setDescription('Table containing the IGMP/MLD packets statistics.')
hpnicfMcsPacketStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 4, 1), ).setIndexNames((0, "HPN-ICF-MULTICAST-SNOOPING-MIB", "hpnicfMcsStatisticsSnoopingType"))
if mibBuilder.loadTexts: hpnicfMcsPacketStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsPacketStatisticsEntry.setDescription('Entry containing the statistic information of IGMP/MLD packets that have been transmitted and received in the device.')
hpnicfMcsStatisticsSnoopingType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 4, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hpnicfMcsStatisticsSnoopingType.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsStatisticsSnoopingType.setDescription('Type of the snooping, IPv4 means the statistics for IGMP snooping, and IPv6 means the statistics for MLD snooping.')
hpnicfMcsRxGeneryQueryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMcsRxGeneryQueryNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsRxGeneryQueryNum.setDescription('Statistics of IGMP or MLD general query packets received on the device.')
hpnicfMcsRxV2SpecificQueryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMcsRxV2SpecificQueryNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsRxV2SpecificQueryNum.setDescription('Statistics of IGMPv2 or MLDv1 group-specific query packets received on the device.')
hpnicfMcsRxV3SpecificQueryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMcsRxV3SpecificQueryNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsRxV3SpecificQueryNum.setDescription('The statistics of IGMPv3 or MLDv2 group-specific query packets received on the device.')
hpnicfMcsRxV3SpecificSGQueryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMcsRxV3SpecificSGQueryNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsRxV3SpecificSGQueryNum.setDescription('Statistics of IGMPv3 or MLDv2 group-and-source-specific query packets received on the device.')
hpnicfMcsRxV1ReportNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMcsRxV1ReportNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsRxV1ReportNum.setDescription('Statistics of IGMPv1 report packets received on the device.')
hpnicfMcsRxV2ReportNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMcsRxV2ReportNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsRxV2ReportNum.setDescription('Statistics of IGMPv2 or MLDv1 report packets received on the device.')
hpnicfMcsRxV3ReportNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMcsRxV3ReportNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsRxV3ReportNum.setDescription('Statistics of IGMPv3 or MLDv2 report packets received on the device.')
hpnicfMcsRxV3ErrCorReportNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMcsRxV3ErrCorReportNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsRxV3ErrCorReportNum.setDescription('Statistics of IGMPv3 or MLDv2 report packets with correct and incorrect records received on the device.')
hpnicfMcsRxLeaveNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMcsRxLeaveNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsRxLeaveNum.setDescription('Statistics of leave packets received on the device.')
hpnicfMcsRxPimHelloNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMcsRxPimHelloNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsRxPimHelloNum.setDescription('Statistics of PIM hello packets received on the device.')
hpnicfMcsRxErrorPacketNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMcsRxErrorPacketNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsRxErrorPacketNum.setDescription('Statistics of error IGMP/MLD packets received on the device.')
hpnicfMcsTxV2SpecificQueryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMcsTxV2SpecificQueryNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsTxV2SpecificQueryNum.setDescription('Statistics of IGMPv2 or MLDv1 group-specific query packets sent from the device.')
hpnicfMcsTxV3SpecificQueryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 4, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMcsTxV3SpecificQueryNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsTxV3SpecificQueryNum.setDescription('Statistics of IGMPv3 or MLDv2 group-specific query packets sent from the device.')
hpnicfMcsTxV3SpecificSGQueryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 4, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMcsTxV3SpecificSGQueryNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsTxV3SpecificSGQueryNum.setDescription('Statistics of IGMPv3 or MLDv2 group-and-source-specific query packets sent from the device.')
hpnicfMcsPortJoinGroupConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 5), )
if mibBuilder.loadTexts: hpnicfMcsPortJoinGroupConfigTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsPortJoinGroupConfigTable.setDescription('Table for configuring a port as a simulated member host for a multicast group.')
hpnicfMcsPortJoinGroupConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 5, 1), ).setIndexNames((0, "HPN-ICF-MULTICAST-SNOOPING-MIB", "hpnicfMcsPortJoinGroupIfIndex"), (0, "HPN-ICF-MULTICAST-SNOOPING-MIB", "hpnicfMcsPortJoinGroupSnoopingType"), (0, "HPN-ICF-MULTICAST-SNOOPING-MIB", "hpnicfMcsPortJoinGroupVlanID"), (0, "HPN-ICF-MULTICAST-SNOOPING-MIB", "hpnicfMcsPortJoinGroupGroupAddress"), (0, "HPN-ICF-MULTICAST-SNOOPING-MIB", "hpnicfMcsPortJoinGroupSourceAddress"))
if mibBuilder.loadTexts: hpnicfMcsPortJoinGroupConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsPortJoinGroupConfigEntry.setDescription('Entry for configuring a port as a simulated member host for a multicast group.')
hpnicfMcsPortJoinGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hpnicfMcsPortJoinGroupIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsPortJoinGroupIfIndex.setDescription('Port for which this entry contains information.')
hpnicfMcsPortJoinGroupSnoopingType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 5, 1, 2), InetAddressType())
if mibBuilder.loadTexts: hpnicfMcsPortJoinGroupSnoopingType.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsPortJoinGroupSnoopingType.setDescription('Type of the configuration. IPv4 means IGMP snooping configuration, and IPv6 means MLD snooping configuration.')
hpnicfMcsPortJoinGroupVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 5, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: hpnicfMcsPortJoinGroupVlanID.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsPortJoinGroupVlanID.setDescription('Index uniquely identifying the specified VLAN in which a host on a port joined the multicast group.')
hpnicfMcsPortJoinGroupGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 5, 1, 4), InetAddress())
if mibBuilder.loadTexts: hpnicfMcsPortJoinGroupGroupAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsPortJoinGroupGroupAddress.setDescription('IP address of the group to which the host belongs.')
hpnicfMcsPortJoinGroupSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 5, 1, 5), InetAddress())
if mibBuilder.loadTexts: hpnicfMcsPortJoinGroupSourceAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsPortJoinGroupSourceAddress.setDescription('IP address of the source. A value of zero indicates that the multicast packets of this group can come from any sources.')
hpnicfMcsPortJoinGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 5, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMcsPortJoinGroupStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsPortJoinGroupStatus.setDescription("This object is responsible for managing rows, which supports 'active', 'createAndGo' and 'destroy'.")
hpnicfMcsPortStaticGroupConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 6), )
if mibBuilder.loadTexts: hpnicfMcsPortStaticGroupConfigTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsPortStaticGroupConfigTable.setDescription('Table for configuring static group membership entries on a port.')
hpnicfMcsPortStaticGroupConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 6, 1), ).setIndexNames((0, "HPN-ICF-MULTICAST-SNOOPING-MIB", "hpnicfMcsPortStaticGroupIfIndex"), (0, "HPN-ICF-MULTICAST-SNOOPING-MIB", "hpnicfMcsPortStaticGroupSnoopingType"), (0, "HPN-ICF-MULTICAST-SNOOPING-MIB", "hpnicfMcsPortStaticGroupVlanID"), (0, "HPN-ICF-MULTICAST-SNOOPING-MIB", "hpnicfMcsPortStaticGroupGroupAddress"), (0, "HPN-ICF-MULTICAST-SNOOPING-MIB", "hpnicfMcsPortStaticGroupSourceAddress"))
if mibBuilder.loadTexts: hpnicfMcsPortStaticGroupConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsPortStaticGroupConfigEntry.setDescription('Entry for configuring static group membership entries on a port.')
hpnicfMcsPortStaticGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hpnicfMcsPortStaticGroupIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsPortStaticGroupIfIndex.setDescription('Port for which this entry contains information.')
hpnicfMcsPortStaticGroupSnoopingType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 6, 1, 2), InetAddressType())
if mibBuilder.loadTexts: hpnicfMcsPortStaticGroupSnoopingType.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsPortStaticGroupSnoopingType.setDescription('Type of the configuration. IPv4 means IGMP snooping configuration, and IPv6 means MLD snooping configuration.')
hpnicfMcsPortStaticGroupVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 6, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: hpnicfMcsPortStaticGroupVlanID.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsPortStaticGroupVlanID.setDescription('Index uniquely identifying the specified VLAN in which a port statically joined the multicast group.')
hpnicfMcsPortStaticGroupGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 6, 1, 4), InetAddress())
if mibBuilder.loadTexts: hpnicfMcsPortStaticGroupGroupAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsPortStaticGroupGroupAddress.setDescription('IP address of the multicast group.')
hpnicfMcsPortStaticGroupSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 6, 1, 5), InetAddress())
if mibBuilder.loadTexts: hpnicfMcsPortStaticGroupSourceAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsPortStaticGroupSourceAddress.setDescription('IP address of the source. A value of zero indicates that the multicast packets of this group can come from any sources.')
hpnicfMcsPortStaticGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 6, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMcsPortStaticGroupStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsPortStaticGroupStatus.setDescription("This object is responsible for managing the creation and deletion of rows, which supports 'active', 'createAndGo' and 'destroy'.")
hpnicfMcsRouterPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 7), )
if mibBuilder.loadTexts: hpnicfMcsRouterPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsRouterPortConfigTable.setDescription('Table for configuring a port as a static router port.')
hpnicfMcsRouterPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 7, 1), ).setIndexNames((0, "HPN-ICF-MULTICAST-SNOOPING-MIB", "hpnicfMcsRouterPortConfigIfIndex"), (0, "HPN-ICF-MULTICAST-SNOOPING-MIB", "hpnicfMcsRouterPortConfigSnoopingType"), (0, "HPN-ICF-MULTICAST-SNOOPING-MIB", "hpnicfMcsRouterPortConfigVlanID"))
if mibBuilder.loadTexts: hpnicfMcsRouterPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsRouterPortConfigEntry.setDescription('Entry for configuring a port as a static router port.')
hpnicfMcsRouterPortConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 7, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hpnicfMcsRouterPortConfigIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsRouterPortConfigIfIndex.setDescription('Port for which this entry contains information.')
hpnicfMcsRouterPortConfigSnoopingType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 7, 1, 2), InetAddressType())
if mibBuilder.loadTexts: hpnicfMcsRouterPortConfigSnoopingType.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsRouterPortConfigSnoopingType.setDescription('Type of the configuration. IPv4 means IGMP snooping configuration, and IPv6 means MLD snooping configuration.')
hpnicfMcsRouterPortConfigVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 7, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: hpnicfMcsRouterPortConfigVlanID.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsRouterPortConfigVlanID.setDescription('Index uniquely identifying the specified VLAN in which a port act as a static router port.')
hpnicfMcsRouterPortConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 7, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMcsRouterPortConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsRouterPortConfigRowStatus.setDescription("This object is a conceptual row entry that allows to add or delete entries to or from the hpnicfMcsRouterPortConfigTable. When an entry is created in this table 'createAndGo' method is used and the value of this object is set to 'active'. Deactivation of an 'active' entry is not allowed. When an entry is deleted in this table 'destroy' method is used.")
hpnicfMcsPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 8), )
if mibBuilder.loadTexts: hpnicfMcsPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsPortConfigTable.setDescription('Table for configuring the fast leave status, group limit number, group policy parameter and overflow replace status on a port in the specified VLAN.')
hpnicfMcsPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 8, 1), ).setIndexNames((0, "HPN-ICF-MULTICAST-SNOOPING-MIB", "hpnicfMcsPortConfigIfIndex"), (0, "HPN-ICF-MULTICAST-SNOOPING-MIB", "hpnicfMcsPortConfigSnoopingType"), (0, "HPN-ICF-MULTICAST-SNOOPING-MIB", "hpnicfMcsPortConfigVlanID"))
if mibBuilder.loadTexts: hpnicfMcsPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsPortConfigEntry.setDescription('Entry containing information about the fast leave status, group limit number, group policy parameter and overflow replace status of a port in the specified VLAN.')
hpnicfMcsPortConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 8, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hpnicfMcsPortConfigIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsPortConfigIfIndex.setDescription('Port for which this entry contains information.')
hpnicfMcsPortConfigSnoopingType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 8, 1, 2), InetAddressType())
if mibBuilder.loadTexts: hpnicfMcsPortConfigSnoopingType.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsPortConfigSnoopingType.setDescription('Type of the configuration. IPv4 means IGMP snooping configuration, and IPv6 means MLD snooping configuration.')
hpnicfMcsPortConfigVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 8, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: hpnicfMcsPortConfigVlanID.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsPortConfigVlanID.setDescription('VLAN ID.')
hpnicfMcsPortConfigGroupLimitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 8, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMcsPortConfigGroupLimitNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsPortConfigGroupLimitNumber.setDescription('Group limit number of the port.')
hpnicfMcsPortConfigFastLeaveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 8, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMcsPortConfigFastLeaveStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsPortConfigFastLeaveStatus.setDescription('Fast leave status of the port.')
hpnicfMcsPortConfigGroupPolicyParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 8, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 3999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMcsPortConfigGroupPolicyParameter.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsPortConfigGroupPolicyParameter.setDescription('ACL number which is used as the group policy parameter of the port.')
hpnicfMcsPortConfigOverflowReplace = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 8, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMcsPortConfigOverflowReplace.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsPortConfigOverflowReplace.setDescription('This object is related to the object hpnicfMcsPortConfigGroupLimitNumber. If the current group number is less than the value of hpnicfMcsPortConfigGroupLimitNumber, any new group is permitted. If the current group number equals to the value of hpnicfMcsPortConfigGroupLimitNumber and the value of this object is enabled, the group with the minimum multicast address will be replaced by the new group. If the current group number equals to the value of hpnicfMcsPortConfigGroupLimitNumber and the value of this object is disabled, none of new group will be permitted.')
hpnicfMcsPortConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 123, 1, 8, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMcsPortConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfMcsPortConfigRowStatus.setDescription("The object is responsible for managing the creation and deletion of rows, which supports 'active', 'createAndGo' and 'destroy'.")
mibBuilder.exportSymbols("HPN-ICF-MULTICAST-SNOOPING-MIB", hpnicfMcsVUVersion=hpnicfMcsVUVersion, hpnicfMcsRouterPortConfigIfIndex=hpnicfMcsRouterPortConfigIfIndex, hpnicfMcsPortJoinGroupStatus=hpnicfMcsPortJoinGroupStatus, hpnicfMcsPortConfigEntry=hpnicfMcsPortConfigEntry, hpnicfMcsPortStaticGroupConfigTable=hpnicfMcsPortStaticGroupConfigTable, hpnicfMcsTxV3SpecificQueryNum=hpnicfMcsTxV3SpecificQueryNum, hpnicfMcsPortConfigVlanID=hpnicfMcsPortConfigVlanID, hpnicfMcsGlobalConfigTable=hpnicfMcsGlobalConfigTable, hpnicfMcsGlbDropUnknownEnabled=hpnicfMcsGlbDropUnknownEnabled, hpnicfMcsStatisticsSnoopingType=hpnicfMcsStatisticsSnoopingType, hpnicfMcsPortStaticGroupConfigEntry=hpnicfMcsPortStaticGroupConfigEntry, hpnicfMcsPacketStatisticsTable=hpnicfMcsPacketStatisticsTable, hpnicfMcsRxV3ReportNum=hpnicfMcsRxV3ReportNum, hpnicfMcsPortStaticGroupStatus=hpnicfMcsPortStaticGroupStatus, hpnicfMcsGlbRowStatus=hpnicfMcsGlbRowStatus, hpnicfMcsL2EntrySourceAddress=hpnicfMcsL2EntrySourceAddress, hpnicfMcsL2EntryIfIndex=hpnicfMcsL2EntryIfIndex, hpnicfMcsPacketStatisticsEntry=hpnicfMcsPacketStatisticsEntry, hpnicfMcsPortJoinGroupConfigTable=hpnicfMcsPortJoinGroupConfigTable, hpnicfMcsPortJoinGroupSourceAddress=hpnicfMcsPortJoinGroupSourceAddress, hpnicfMcsL2EntryPortType=hpnicfMcsL2EntryPortType, hpnicfMcsVUHostAgingTime=hpnicfMcsVUHostAgingTime, hpnicfMcsGlobalConfigEntry=hpnicfMcsGlobalConfigEntry, hpnicfMcsRouterPortConfigSnoopingType=hpnicfMcsRouterPortConfigSnoopingType, hpnicfMcsRxGeneryQueryNum=hpnicfMcsRxGeneryQueryNum, hpnicfMcsGlbHostAgingTime=hpnicfMcsGlbHostAgingTime, hpnicfMcsVUPimSnoopingEnabled=hpnicfMcsVUPimSnoopingEnabled, hpnicfMcsVUSnoopingType=hpnicfMcsVUSnoopingType, hpnicfMcsGlbLastMemQryInterval=hpnicfMcsGlbLastMemQryInterval, hpnicfMcsPortConfigRowStatus=hpnicfMcsPortConfigRowStatus, hpnicfMcsVUSpecQuerierSourceAddress=hpnicfMcsVUSpecQuerierSourceAddress, hpnicfMcsVUDropUnknownEnabled=hpnicfMcsVUDropUnknownEnabled, hpnicfMcsVULeaveSourceAddress=hpnicfMcsVULeaveSourceAddress, hpnicfMcsL2EntryGroupAddress=hpnicfMcsL2EntryGroupAddress, hpnicfMcsPortConfigGroupPolicyParameter=hpnicfMcsPortConfigGroupPolicyParameter, hpnicfMcsVULastMemQryInterval=hpnicfMcsVULastMemQryInterval, hpnicfMcsPortStaticGroupIfIndex=hpnicfMcsPortStaticGroupIfIndex, hpnicfMcsRouterPortConfigVlanID=hpnicfMcsRouterPortConfigVlanID, hpnicfMcsGlbRouterAgingTime=hpnicfMcsGlbRouterAgingTime, hpnicfMcsL2EntryPortAttribute=hpnicfMcsL2EntryPortAttribute, hpnicfMcsRouterPortConfigTable=hpnicfMcsRouterPortConfigTable, hpnicfMcsTxV2SpecificQueryNum=hpnicfMcsTxV2SpecificQueryNum, hpnicfMcsPortStaticGroupGroupAddress=hpnicfMcsPortStaticGroupGroupAddress, hpnicfMcsPortConfigTable=hpnicfMcsPortConfigTable, hpnicfMcsPortJoinGroupGroupAddress=hpnicfMcsPortJoinGroupGroupAddress, hpnicfMcsRxV3ErrCorReportNum=hpnicfMcsRxV3ErrCorReportNum, hpnicfMcsRouterPortConfigRowStatus=hpnicfMcsRouterPortConfigRowStatus, hpnicfMcsVUMaxResponseTime=hpnicfMcsVUMaxResponseTime, hpnicfMcsVUQuerierEnabled=hpnicfMcsVUQuerierEnabled, hpnicfMcsVirtualUnitConfigTable=hpnicfMcsVirtualUnitConfigTable, hpnicfMcsPortStaticGroupSnoopingType=hpnicfMcsPortStaticGroupSnoopingType, hpnicfMcsRxLeaveNum=hpnicfMcsRxLeaveNum, hpnicfMcsL2EntryEntry=hpnicfMcsL2EntryEntry, hpnicfMcsL2EntryVUID=hpnicfMcsL2EntryVUID, hpnicfMcsL2EntryTable=hpnicfMcsL2EntryTable, hpnicfMcsVUGeneQuerierSourceAddress=hpnicfMcsVUGeneQuerierSourceAddress, hpnicfMcsGlbEntryLimit=hpnicfMcsGlbEntryLimit, hpnicfMcsRxV3SpecificQueryNum=hpnicfMcsRxV3SpecificQueryNum, hpnicfMcsGlbMaxResponseTime=hpnicfMcsGlbMaxResponseTime, hpnicfMcsPortJoinGroupVlanID=hpnicfMcsPortJoinGroupVlanID, hpnicfMcsGlbSnoopingType=hpnicfMcsGlbSnoopingType, hpnicfMcsRxV2ReportNum=hpnicfMcsRxV2ReportNum, hpnicfMcsVirtualUnitConfigEntry=hpnicfMcsVirtualUnitConfigEntry, hpnicfMcsPortJoinGroupSnoopingType=hpnicfMcsPortJoinGroupSnoopingType, hpnicfMulticastSnoopObject=hpnicfMulticastSnoopObject, hpnicfMcsRxV2SpecificQueryNum=hpnicfMcsRxV2SpecificQueryNum, hpnicfMcsRouterPortConfigEntry=hpnicfMcsRouterPortConfigEntry, PYSNMP_MODULE_ID=hpnicfMulticastSnoop, HpnicfVirtualUnitType=HpnicfVirtualUnitType, hpnicfMcsTxV3SpecificSGQueryNum=hpnicfMcsTxV3SpecificSGQueryNum, hpnicfMcsPortStaticGroupSourceAddress=hpnicfMcsPortStaticGroupSourceAddress, hpnicfMcsVUQuerierInterval=hpnicfMcsVUQuerierInterval, hpnicfMcsVURouterAgingTime=hpnicfMcsVURouterAgingTime, hpnicfMcsPortConfigIfIndex=hpnicfMcsPortConfigIfIndex, hpnicfMcsVUReportSourceAddress=hpnicfMcsVUReportSourceAddress, hpnicfMcsPortConfigSnoopingType=hpnicfMcsPortConfigSnoopingType, hpnicfMcsRxErrorPacketNum=hpnicfMcsRxErrorPacketNum, hpnicfMulticastSnoop=hpnicfMulticastSnoop, hpnicfMcsRxV3SpecificSGQueryNum=hpnicfMcsRxV3SpecificSGQueryNum, hpnicfMcsRxV1ReportNum=hpnicfMcsRxV1ReportNum, hpnicfMcsPortJoinGroupConfigEntry=hpnicfMcsPortJoinGroupConfigEntry, hpnicfMcsL2EntryVUType=hpnicfMcsL2EntryVUType, hpnicfMcsVURowStatus=hpnicfMcsVURowStatus, hpnicfMcsVUID=hpnicfMcsVUID, hpnicfMcsPortConfigGroupLimitNumber=hpnicfMcsPortConfigGroupLimitNumber, hpnicfMcsPortJoinGroupIfIndex=hpnicfMcsPortJoinGroupIfIndex, hpnicfMcsPortConfigFastLeaveStatus=hpnicfMcsPortConfigFastLeaveStatus, hpnicfMcsL2EntryAddressType=hpnicfMcsL2EntryAddressType, hpnicfMcsPortConfigOverflowReplace=hpnicfMcsPortConfigOverflowReplace, hpnicfMcsVUType=hpnicfMcsVUType, hpnicfMcsPortStaticGroupVlanID=hpnicfMcsPortStaticGroupVlanID, hpnicfMcsRxPimHelloNum=hpnicfMcsRxPimHelloNum)
