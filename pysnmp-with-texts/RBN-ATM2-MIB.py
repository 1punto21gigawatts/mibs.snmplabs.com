#
# PySNMP MIB module RBN-ATM2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RBN-ATM2-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:52:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
atmAal5VclStatEntry, atmVclStatEntry, atmVplStatEntry = mibBuilder.importSymbols("ATM2-MIB", "atmAal5VclStatEntry", "atmVclStatEntry", "atmVplStatEntry")
rbnMgmt, = mibBuilder.importSymbols("RBN-SMI", "rbnMgmt")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Bits, Integer32, Counter64, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ObjectIdentity, IpAddress, NotificationType, Unsigned32, iso, MibIdentifier, TimeTicks, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Counter64", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ObjectIdentity", "IpAddress", "NotificationType", "Unsigned32", "iso", "MibIdentifier", "TimeTicks", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
rbnAtm2MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2352, 2, 50))
rbnAtm2MIB.setRevisions(('2009-06-11 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rbnAtm2MIB.setRevisionsDescriptions(('Initial Version.',))
if mibBuilder.loadTexts: rbnAtm2MIB.setLastUpdated('200906111700Z')
if mibBuilder.loadTexts: rbnAtm2MIB.setOrganization('Redback Networks, Inc.')
if mibBuilder.loadTexts: rbnAtm2MIB.setContactInfo(' Redback Networks, Inc. Postal: 300 Holger Way San Jose, CA 95134 USA Phone: +1 408 750 5000 Fax: +1 408 750 5599 E-mail: mib-info@redback.com')
if mibBuilder.loadTexts: rbnAtm2MIB.setDescription('The MIB for instrumenting statistics associated with ATM VPL and VCL beyond those instrumented by ATM2-MIB.')
rbnAtm2MIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 50, 1))
rbnAtm2MIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 50, 2))
rbnAtm2VplStatTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 50, 1, 1), )
if mibBuilder.loadTexts: rbnAtm2VplStatTable.setStatus('current')
if mibBuilder.loadTexts: rbnAtm2VplStatTable.setDescription('This table provides a collection of statistics objects of a VPL.')
rbnAtm2VplStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 50, 1, 1, 1), )
atmVplStatEntry.registerAugmentions(("RBN-ATM2-MIB", "rbnAtm2VplStatEntry"))
rbnAtm2VplStatEntry.setIndexNames(*atmVplStatEntry.getIndexNames())
if mibBuilder.loadTexts: rbnAtm2VplStatEntry.setStatus('current')
if mibBuilder.loadTexts: rbnAtm2VplStatEntry.setDescription('Each entry in this table represents a VPL.')
rbnAtm2VplOutPktDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 50, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnAtm2VplOutPktDrops.setStatus('current')
if mibBuilder.loadTexts: rbnAtm2VplOutPktDrops.setDescription('The number of transmit packets dropped by this VPL.')
rbnAtm2VclStatTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 50, 1, 2), )
if mibBuilder.loadTexts: rbnAtm2VclStatTable.setStatus('current')
if mibBuilder.loadTexts: rbnAtm2VclStatTable.setDescription('This table provides a collection of statistics objects of a VCL.')
rbnAtm2VclStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 50, 1, 2, 1), )
atmVclStatEntry.registerAugmentions(("RBN-ATM2-MIB", "rbnAtm2VclStatEntry"))
rbnAtm2VclStatEntry.setIndexNames(*atmVclStatEntry.getIndexNames())
if mibBuilder.loadTexts: rbnAtm2VclStatEntry.setStatus('current')
if mibBuilder.loadTexts: rbnAtm2VclStatEntry.setDescription('Each entry in this table represents a VCL.')
rbnAtm2VclOutPktDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 50, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnAtm2VclOutPktDrops.setStatus('current')
if mibBuilder.loadTexts: rbnAtm2VclOutPktDrops.setDescription('The number of transmit packets dropped by this VCL.')
rbnAtm2Aal5VclStatTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 50, 1, 3), )
if mibBuilder.loadTexts: rbnAtm2Aal5VclStatTable.setStatus('current')
if mibBuilder.loadTexts: rbnAtm2Aal5VclStatTable.setDescription('This table provides a collection of auxiliary objects providing AAL5 configuration and performance statistics of a VCL.')
rbnAtm2Aal5VclStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 50, 1, 3, 1), )
atmAal5VclStatEntry.registerAugmentions(("RBN-ATM2-MIB", "rbnAtm2Aal5VclStatEntry"))
rbnAtm2Aal5VclStatEntry.setIndexNames(*atmAal5VclStatEntry.getIndexNames())
if mibBuilder.loadTexts: rbnAtm2Aal5VclStatEntry.setStatus('current')
if mibBuilder.loadTexts: rbnAtm2Aal5VclStatEntry.setDescription('Each entry in this table represents a VCL.')
rbnAtm2Aal5VclOutPktDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 50, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnAtm2Aal5VclOutPktDrops.setStatus('current')
if mibBuilder.loadTexts: rbnAtm2Aal5VclOutPktDrops.setDescription('The number of AAL5 CPCS PDUs received for transmission on the AAL5 VCC at the interface identified by the ifIndex which were chosen to be dropped even though no errors had been detected to prevent their being transmitted. One possible reason for dropping such a PDU could be a lack of available space on the interface output queue.')
rbnAtm2MIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 50, 2, 1))
rbnAtm2MIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 50, 2, 2))
rbnAtm2Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 50, 2, 1, 1)).setObjects(("RBN-ATM2-MIB", "rbnAtm2CommonStatsGroup"), ("RBN-ATM2-MIB", "rbnAtm2HostGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnAtm2Compliance = rbnAtm2Compliance.setStatus('current')
if mibBuilder.loadTexts: rbnAtm2Compliance.setDescription('The compliance statement for SNMP entities which implement the Redback ATM2 MIB.')
rbnAtm2CommonStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 50, 2, 2, 1)).setObjects(("RBN-ATM2-MIB", "rbnAtm2VplOutPktDrops"), ("RBN-ATM2-MIB", "rbnAtm2VclOutPktDrops"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnAtm2CommonStatsGroup = rbnAtm2CommonStatsGroup.setStatus('current')
if mibBuilder.loadTexts: rbnAtm2CommonStatsGroup.setDescription('A collection of objects providing supplemental VPL/VCL information beyond that supplied by IETF standards-track MIBs')
rbnAtm2HostGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 50, 2, 2, 2)).setObjects(("RBN-ATM2-MIB", "rbnAtm2Aal5VclOutPktDrops"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnAtm2HostGroup = rbnAtm2HostGroup.setStatus('current')
if mibBuilder.loadTexts: rbnAtm2HostGroup.setDescription('A collection of objects providing supplemental AAL5 VCL information beyond that supplied by IETF standards-track MIBs')
mibBuilder.exportSymbols("RBN-ATM2-MIB", PYSNMP_MODULE_ID=rbnAtm2MIB, rbnAtm2Aal5VclStatTable=rbnAtm2Aal5VclStatTable, rbnAtm2VclStatTable=rbnAtm2VclStatTable, rbnAtm2VclOutPktDrops=rbnAtm2VclOutPktDrops, rbnAtm2VplStatTable=rbnAtm2VplStatTable, rbnAtm2VclStatEntry=rbnAtm2VclStatEntry, rbnAtm2MIBCompliances=rbnAtm2MIBCompliances, rbnAtm2HostGroup=rbnAtm2HostGroup, rbnAtm2VplStatEntry=rbnAtm2VplStatEntry, rbnAtm2Aal5VclStatEntry=rbnAtm2Aal5VclStatEntry, rbnAtm2MIBConformance=rbnAtm2MIBConformance, rbnAtm2Aal5VclOutPktDrops=rbnAtm2Aal5VclOutPktDrops, rbnAtm2MIBGroups=rbnAtm2MIBGroups, rbnAtm2Compliance=rbnAtm2Compliance, rbnAtm2VplOutPktDrops=rbnAtm2VplOutPktDrops, rbnAtm2MIB=rbnAtm2MIB, rbnAtm2MIBObjects=rbnAtm2MIBObjects, rbnAtm2CommonStatsGroup=rbnAtm2CommonStatsGroup)
