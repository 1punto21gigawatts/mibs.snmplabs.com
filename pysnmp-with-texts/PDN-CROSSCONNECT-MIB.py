#
# PySNMP MIB module PDN-CROSSCONNECT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PDN-CROSSCONNECT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:38:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
crossConnect, = mibBuilder.importSymbols("PDN-HEADER-MIB", "crossConnect")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Counter32, Counter64, TimeTicks, ModuleIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Integer32, MibIdentifier, Unsigned32, Bits, Gauge32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter32", "Counter64", "TimeTicks", "ModuleIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Integer32", "MibIdentifier", "Unsigned32", "Bits", "Gauge32", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
devDs1FracTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 7, 1), )
if mibBuilder.loadTexts: devDs1FracTable.setStatus('mandatory')
if mibBuilder.loadTexts: devDs1FracTable.setDescription('The Paradyne DS1 Fractional Table.')
devDs1FracEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 7, 1, 1), ).setIndexNames((0, "PDN-CROSSCONNECT-MIB", "devDs1FracIndex"), (0, "PDN-CROSSCONNECT-MIB", "devDs1FracNumber"))
if mibBuilder.loadTexts: devDs1FracEntry.setStatus('mandatory')
if mibBuilder.loadTexts: devDs1FracEntry.setDescription('An entry in the Paradyne DS1 Fractional Table.')
devDs1FracIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devDs1FracIndex.setStatus('mandatory')
if mibBuilder.loadTexts: devDs1FracIndex.setDescription('The index value which uniquely identifies the DS1 interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex from the Interfaces table of MIB II (RFC 1213).')
devDs1FracNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devDs1FracNumber.setStatus('mandatory')
if mibBuilder.loadTexts: devDs1FracNumber.setDescription("The channel number associated with the interface identified by devDs1FracIndex for this entry. If devDs1FracIfIndex indicates that the channel assignment is to a synchronous data port or to a voice port, then the interpretation of this object's meaning is dependent on the value of the allocation method, devSyncDataPortConfigAllocMethod, for the data port. If the allocation method is block, or ACAMI, then this object specifies the starting DS0 channel for the assignment. The number of channels assigned is dependent on the value of devSyncDataPortConfigRate. If the allocation method is channel, then this object specifies the individual DS0 channel to be allocated to the data port.")
devDs1FracIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 7, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devDs1FracIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: devDs1FracIfIndex.setDescription('An index value that uniquely identifies the interface to which this entry is mapped. The interface identified by a particular value of this index is the same interface as identified by the same value of an ifIndex object instance in the Interfaces table of MIB II (RFC 1213). If no interface is currently using the channel identified by devDs1FracNumber, then this value should be zero. If a single interface occupies more than one time slot, then its ifIndex value is found in multiple time slots (i.e., there are multiple entries in table with the same devDs1FracIfIndex value).')
devDs1FracIfFracNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devDs1FracIfFracNumber.setStatus('mandatory')
if mibBuilder.loadTexts: devDs1FracIfFracNumber.setDescription('The channel number associated with the interface identified by devDs1FracIfIndex for this entry. If the interface is a synchronous data port or a voice port, then the value is ignored for set, and undefined when read.')
devSyncDataPortAssignTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 7, 2), )
if mibBuilder.loadTexts: devSyncDataPortAssignTable.setStatus('mandatory')
if mibBuilder.loadTexts: devSyncDataPortAssignTable.setDescription('The Paradyne Synchronous Data Port Assignment Table.')
devSyncDataPortAssignEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 7, 2, 1), ).setIndexNames((0, "PDN-CROSSCONNECT-MIB", "devSyncDataPortAssignIndex"))
if mibBuilder.loadTexts: devSyncDataPortAssignEntry.setStatus('mandatory')
if mibBuilder.loadTexts: devSyncDataPortAssignEntry.setDescription('An entry in the Paradyne Synchronous Data Port Assignment Table.')
devSyncDataPortAssignIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devSyncDataPortAssignIndex.setStatus('mandatory')
if mibBuilder.loadTexts: devSyncDataPortAssignIndex.setDescription('The index value which uniquely identifies the synchronous data port interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex from the Interfaces table of MIB II (RFC 1213).')
devSyncDataPortAssignRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("rate56or64", 1), ("rate112or128", 2), ("rate168or192", 3), ("rate224or256", 4), ("rate280or320", 5), ("rate336or384", 6), ("rate392or448", 7), ("rate448or512", 8), ("rate504or576", 9), ("rate560or640", 10), ("rate616or704", 11), ("rate672or768", 12), ("rate728or832", 13), ("rate784or896", 14), ("rate840or960", 15), ("rate896or1024", 16), ("rate952or1088", 17), ("rate1008or1152", 18), ("rate1064or1216", 19), ("rate1120or1280", 20), ("rate1176or1344", 21), ("rate1232or1408", 22), ("rate1288or1472", 23), ("rate1344or1536", 24)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devSyncDataPortAssignRate.setStatus('mandatory')
if mibBuilder.loadTexts: devSyncDataPortAssignRate.setDescription("The synchronous data port rate expressed in Kbps for both data ports of the synchronous data port-to-synchronous data port assignment represented by this entry. The actual rate for the ports is obtained by reading the value of ifSpeed from the Interfaces table of MIB II (RFC 1213). The possible data rates depend on the current base rate configured for the data ports of this assignment. For example, rate280or320(5) represents a rate of 280 Kbps or 320 Kbps for a base rate of 56 Kbps or 64 Kbps, respectively. WARNING: changing this object's value, causes the DS0 channels assigned to the data port based on the previous rate to be deallocated. NOTE: this variable cannot be used independently to alter the value of the rate associated with a particular data port.")
devSyncDataPortAssignIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 7, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devSyncDataPortAssignIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: devSyncDataPortAssignIfIndex.setDescription('An index value that uniquely identifies the interface to which this synchronous data port is assigned. The interface identified by a particular value of this index is the same interface as identified by the same value of an ifIndex object instance in the Interfaces table of MIB II (RFC 1213). If no interface is currently connected to this data port, then this value should be zero. The value used to set this object must be the ifIndex value of another synchronous data port interface only (i.e., synchronous data port to DS0 channel assignment is allowed only in the DS1 Fractional Table, devDs1FracTable).')
devCrossConUtility = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 7, 4))
devCrossConClear = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 7, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("inprogress", 2), ("clear", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devCrossConClear.setStatus('mandatory')
if mibBuilder.loadTexts: devCrossConClear.setDescription("This object is used to delete all the entries in the Cross Connect table where bulk deletion is needed. This field can only be set to 'clear'. While the management entity within the agent deletes all the cross connects , this field will read 'inprogress'.When the 'clear' operation has completed , or no operation is being performed at all the default state will be 'idle'.")
devCrossConTableLastChange = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 7, 4, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devCrossConTableLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: devCrossConTableLastChange.setDescription('The value of sysUpTime at the time configuration or status of the Cross Connect Table has last changed. Changes in the Cross Connect table can be anything such as configuration addition/deletions or Cross Connect status changes.')
mibBuilder.exportSymbols("PDN-CROSSCONNECT-MIB", devCrossConTableLastChange=devCrossConTableLastChange, devDs1FracIndex=devDs1FracIndex, devDs1FracNumber=devDs1FracNumber, devCrossConClear=devCrossConClear, devSyncDataPortAssignRate=devSyncDataPortAssignRate, devSyncDataPortAssignIfIndex=devSyncDataPortAssignIfIndex, devDs1FracIfFracNumber=devDs1FracIfFracNumber, devSyncDataPortAssignTable=devSyncDataPortAssignTable, devDs1FracIfIndex=devDs1FracIfIndex, devDs1FracEntry=devDs1FracEntry, devDs1FracTable=devDs1FracTable, devSyncDataPortAssignEntry=devSyncDataPortAssignEntry, devCrossConUtility=devCrossConUtility, devSyncDataPortAssignIndex=devSyncDataPortAssignIndex)
