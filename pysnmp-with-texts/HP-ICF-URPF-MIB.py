#
# PySNMP MIB module HP-ICF-URPF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-URPF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:35:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddressType, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Unsigned32, iso, Counter32, Bits, IpAddress, Gauge32, TimeTicks, NotificationType, ObjectIdentity, Counter64, MibIdentifier, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "iso", "Counter32", "Bits", "IpAddress", "Gauge32", "TimeTicks", "NotificationType", "ObjectIdentity", "Counter64", "MibIdentifier", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
hpicfUrpfMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 131))
hpicfUrpfMIB.setRevisions(('2016-06-14 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfUrpfMIB.setRevisionsDescriptions(('Initial version of URPF MIB module.',))
if mibBuilder.loadTexts: hpicfUrpfMIB.setLastUpdated('201606140000Z')
if mibBuilder.loadTexts: hpicfUrpfMIB.setOrganization('Hewlett Packard Enterprise')
if mibBuilder.loadTexts: hpicfUrpfMIB.setContactInfo('Hewlett Packard Enterprise Development Company LP 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfUrpfMIB.setDescription('This MIB module describes objects for management of Unicast Reverse Path Forwarding (URPF).')
hpicfUrpfConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 131, 1))
hpicfUrpfStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 131, 2))
hpicfUrpfConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 131, 3))
hpicfUrpfConfigGlobalEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 131, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUrpfConfigGlobalEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfUrpfConfigGlobalEnable.setDescription('Is the URPF feature enabled. true(1) - URPF is enabled; false(2) URPF is disabled.')
hpicfUrpfConfigGlobalLogTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 131, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 300)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUrpfConfigGlobalLogTimeout.setStatus('current')
if mibBuilder.loadTexts: hpicfUrpfConfigGlobalLogTimeout.setDescription('The time, in seconds, between URPF logging summary messages.')
hpicfUrpfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 131, 1, 3), )
if mibBuilder.loadTexts: hpicfUrpfConfigTable.setStatus('current')
if mibBuilder.loadTexts: hpicfUrpfConfigTable.setDescription('The table contains configuration information for URPF processing.')
hpicfUrpfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 131, 1, 3, 1), ).setIndexNames((0, "HP-ICF-URPF-MIB", "hpicfUrpfIfIndex"), (0, "HP-ICF-URPF-MIB", "hpicfUrpfAddrFamily"))
if mibBuilder.loadTexts: hpicfUrpfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfUrpfConfigEntry.setDescription('Each table entry contains configuration parameters for an interface and address family.')
hpicfUrpfIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 131, 1, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hpicfUrpfIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfUrpfIfIndex.setDescription('The interface for the table entry.')
hpicfUrpfAddrFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 131, 1, 3, 1, 2), InetAddressType())
if mibBuilder.loadTexts: hpicfUrpfAddrFamily.setStatus('current')
if mibBuilder.loadTexts: hpicfUrpfAddrFamily.setDescription('The address family for the table entry.')
hpicfUrpfConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 131, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("strict", 2), ("loose", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUrpfConfigMode.setStatus('current')
if mibBuilder.loadTexts: hpicfUrpfConfigMode.setDescription('The URPF match mode. URPF operates in one of two modes: strict and loose. In strict mode, a route to the source address must exist, and the ingress interface of the packet must be the same interface used to egress packets back to the source. For example, the ingress and egress routes are symmetric and must use the same interface. In loose mode, a route to the source address must exist, but the ingress interface of the packet is not checked. none(1) - URPF not applied to the interface; strict(2) - must match expected interface; loose(3) - ingress interface is not checked.')
hpicfUrpfConfigDefRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 131, 1, 3, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUrpfConfigDefRoute.setStatus('current')
if mibBuilder.loadTexts: hpicfUrpfConfigDefRoute.setDescription('Allow use of the default route when checking the ingress port. Enabling use of the default route is only supported in strict mode. If use of the default route was enabled in loose mode, all packets would be allowed, therefore this option is not supported in loose mode. true(1) - enable use of default route in port match; false(2) - disable use of default route in port match.')
hpicfUrpfConfigAllowDhcp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 131, 1, 3, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUrpfConfigAllowDhcp.setStatus('current')
if mibBuilder.loadTexts: hpicfUrpfConfigAllowDhcp.setDescription('Allow packets with SA=0.0.0.0 and DA=255.255.255.255, such as DHCP and BOOTP, to bypass the URPF checks. true(1) - packets will bypass URPF checks; false(2) packets will be dropped.')
hpicfUrpfConfigLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 131, 1, 3, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUrpfConfigLogging.setStatus('current')
if mibBuilder.loadTexts: hpicfUrpfConfigLogging.setDescription('Is logging of dropped packets enabled. true(1) - logging enabled; false(2) - logging disabled.')
hpicfUrpfConfigHasWhitelistAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 131, 1, 3, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUrpfConfigHasWhitelistAcl.setStatus('current')
if mibBuilder.loadTexts: hpicfUrpfConfigHasWhitelistAcl.setDescription('Is a whitelist ACL applied to this interface. true(1) - whitelist ACL applied; false(2) - whitelist ACL not applied.')
hpicfUrpfConfigWhitelistAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 131, 1, 3, 1, 8), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUrpfConfigWhitelistAclName.setStatus('current')
if mibBuilder.loadTexts: hpicfUrpfConfigWhitelistAclName.setDescription('The URPF whitelist ACL name. The ACL must already exist at the time of application.')
hpicfUrpfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 131, 2, 1), )
if mibBuilder.loadTexts: hpicfUrpfStatsTable.setStatus('current')
if mibBuilder.loadTexts: hpicfUrpfStatsTable.setDescription('The table containing statistics information for packets that are dropped by URPF processing.')
hpicfUrpfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 131, 2, 1, 1), ).setIndexNames((0, "HP-ICF-URPF-MIB", "hpicfUrpfIfIndex"), (0, "HP-ICF-URPF-MIB", "hpicfUrpfAddrFamily"))
if mibBuilder.loadTexts: hpicfUrpfStatsEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfUrpfStatsEntry.setDescription('Each table entry counts packets that are dropped by URPF processing on a particular interface and IP address family.')
hpicfUrpfStatsBlockedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 131, 2, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUrpfStatsBlockedPackets.setStatus('current')
if mibBuilder.loadTexts: hpicfUrpfStatsBlockedPackets.setDescription('The number of packets blocked by URPF on this interface and address family.')
hpicfUrpfStatsBlockedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 131, 2, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUrpfStatsBlockedOctets.setStatus('current')
if mibBuilder.loadTexts: hpicfUrpfStatsBlockedOctets.setDescription('The number of octets blocked by URPF on this interface and address family.')
hpicfUrpfMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 131, 3, 1))
hpicfUrpfMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 131, 3, 2))
hpicfUrpfScalarGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 131, 3, 1, 1)).setObjects(("HP-ICF-URPF-MIB", "hpicfUrpfConfigGlobalEnable"), ("HP-ICF-URPF-MIB", "hpicfUrpfConfigGlobalLogTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUrpfScalarGroup = hpicfUrpfScalarGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfUrpfScalarGroup.setDescription('A collection of scalar objects providing global configuration information for URPF.')
hpicfUrpfConfigTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 131, 3, 1, 2)).setObjects(("HP-ICF-URPF-MIB", "hpicfUrpfConfigMode"), ("HP-ICF-URPF-MIB", "hpicfUrpfConfigDefRoute"), ("HP-ICF-URPF-MIB", "hpicfUrpfConfigAllowDhcp"), ("HP-ICF-URPF-MIB", "hpicfUrpfConfigLogging"), ("HP-ICF-URPF-MIB", "hpicfUrpfConfigHasWhitelistAcl"), ("HP-ICF-URPF-MIB", "hpicfUrpfConfigWhitelistAclName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUrpfConfigTableGroup = hpicfUrpfConfigTableGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfUrpfConfigTableGroup.setDescription('A collection of objects providing configuration information for URPF.')
hpicfUrpfStatsTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 131, 3, 1, 3)).setObjects(("HP-ICF-URPF-MIB", "hpicfUrpfStatsBlockedPackets"), ("HP-ICF-URPF-MIB", "hpicfUrpfStatsBlockedOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUrpfStatsTableGroup = hpicfUrpfStatsTableGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfUrpfStatsTableGroup.setDescription('A collection of objects providing statistics for URPF.')
hpicfUrpfMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 131, 3, 2, 1)).setObjects(("HP-ICF-URPF-MIB", "hpicfUrpfScalarGroup"), ("HP-ICF-URPF-MIB", "hpicfUrpfConfigTableGroup"), ("HP-ICF-URPF-MIB", "hpicfUrpfStatsTableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUrpfMIBCompliance = hpicfUrpfMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfUrpfMIBCompliance.setDescription('The compliance statement for HP switches implementing the HPICF-URPF MIB.')
mibBuilder.exportSymbols("HP-ICF-URPF-MIB", hpicfUrpfStatsBlockedPackets=hpicfUrpfStatsBlockedPackets, hpicfUrpfConformance=hpicfUrpfConformance, hpicfUrpfStatsBlockedOctets=hpicfUrpfStatsBlockedOctets, hpicfUrpfConfigGlobalLogTimeout=hpicfUrpfConfigGlobalLogTimeout, hpicfUrpfConfigLogging=hpicfUrpfConfigLogging, hpicfUrpfIfIndex=hpicfUrpfIfIndex, hpicfUrpfMIBCompliance=hpicfUrpfMIBCompliance, hpicfUrpfConfigMode=hpicfUrpfConfigMode, hpicfUrpfMIB=hpicfUrpfMIB, hpicfUrpfAddrFamily=hpicfUrpfAddrFamily, hpicfUrpfStats=hpicfUrpfStats, hpicfUrpfStatsEntry=hpicfUrpfStatsEntry, hpicfUrpfMIBGroups=hpicfUrpfMIBGroups, hpicfUrpfConfigHasWhitelistAcl=hpicfUrpfConfigHasWhitelistAcl, hpicfUrpfConfigWhitelistAclName=hpicfUrpfConfigWhitelistAclName, PYSNMP_MODULE_ID=hpicfUrpfMIB, hpicfUrpfConfigEntry=hpicfUrpfConfigEntry, hpicfUrpfStatsTable=hpicfUrpfStatsTable, hpicfUrpfStatsTableGroup=hpicfUrpfStatsTableGroup, hpicfUrpfConfig=hpicfUrpfConfig, hpicfUrpfConfigGlobalEnable=hpicfUrpfConfigGlobalEnable, hpicfUrpfMIBCompliances=hpicfUrpfMIBCompliances, hpicfUrpfConfigTableGroup=hpicfUrpfConfigTableGroup, hpicfUrpfScalarGroup=hpicfUrpfScalarGroup, hpicfUrpfConfigDefRoute=hpicfUrpfConfigDefRoute, hpicfUrpfConfigAllowDhcp=hpicfUrpfConfigAllowDhcp, hpicfUrpfConfigTable=hpicfUrpfConfigTable)
