#
# PySNMP MIB module TIMETRA-FILTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TIMETRA-FILTER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:17:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
InetAddressType, InetAddressPrefixLength, InetAddressIPv6, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddressPrefixLength", "InetAddressIPv6", "InetAddress")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibIdentifier, Opaque, Counter64, ObjectIdentity, Counter32, Gauge32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Integer32, Unsigned32, NotificationType, ModuleIdentity, Bits, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Opaque", "Counter64", "ObjectIdentity", "Counter32", "Gauge32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Integer32", "Unsigned32", "NotificationType", "ModuleIdentity", "Bits", "IpAddress")
TimeStamp, TruthValue, MacAddress, RowStatus, RowPointer, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TruthValue", "MacAddress", "RowStatus", "RowPointer", "DisplayString", "TextualConvention")
tmnxSRNotifyPrefix, timetraSRMIBModules, tmnxSRObjs, tmnxSRConfs = mibBuilder.importSymbols("TIMETRA-GLOBAL-MIB", "tmnxSRNotifyPrefix", "timetraSRMIBModules", "tmnxSRObjs", "tmnxSRConfs")
TNamedItem, TmnxEncapVal, TIpOption, TLNamedItemOrEmpty, TTcpUdpPortOperator, Dot1PPriority, SdpBindId, QTagFullRange, TDSCPNameOrEmpty, ServiceAccessPoint, IpAddressPrefixLength, TmnxAdminState, SvcISID, TMacFilterType, TDSCPFilterActionValue, TmnxPortID, TTcpUdpPort, TNamedItemOrEmpty, TItemDescription, TIpProtocol, TmnxVRtrIDOrZero, TFrameType, TmnxOperState, QTagFullRangeOrNone, TmnxServId = mibBuilder.importSymbols("TIMETRA-TC-MIB", "TNamedItem", "TmnxEncapVal", "TIpOption", "TLNamedItemOrEmpty", "TTcpUdpPortOperator", "Dot1PPriority", "SdpBindId", "QTagFullRange", "TDSCPNameOrEmpty", "ServiceAccessPoint", "IpAddressPrefixLength", "TmnxAdminState", "SvcISID", "TMacFilterType", "TDSCPFilterActionValue", "TmnxPortID", "TTcpUdpPort", "TNamedItemOrEmpty", "TItemDescription", "TIpProtocol", "TmnxVRtrIDOrZero", "TFrameType", "TmnxOperState", "QTagFullRangeOrNone", "TmnxServId")
timetraFilterMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 21))
timetraFilterMIBModule.setRevisions(('1911-02-01 00:00', '1909-07-01 00:00', '1908-07-01 00:00', '1908-01-01 00:00', '1907-01-01 00:00', '1906-02-28 00:00', '1905-08-31 00:00', '1905-01-24 00:00', '1904-01-15 00:00', '1903-08-15 00:00', '2003-01-29 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: timetraFilterMIBModule.setRevisionsDescriptions(('Rev 9.0 01 Feb 2011 00:00 9.0 release of the TIMETRA-FILTER-MIB.', 'Rev 8.0 01 Jul 2009 00:00 8.0 release of the TIMETRA-FILTER-MIB.', 'Rev 6.1 01 Jul 2008 00:00 6.1 release of the TIMETRA-FILTER-MIB.', 'Rev 6.0 01 Jan 2008 00:00 6.0 release of the TIMETRA-FILTER-MIB.', 'Rev 5.0 01 Jan 2007 00:00 5.0 release of the TIMETRA-FILTER-MIB.', 'Rev 4.0 28 Feb 2006 00:00 4.0 release of the TIMETRA-FILTER-MIB.', 'Rev 3.0 31 Aug 2005 00:00 3.0 release of the TIMETRA-FILTER-MIB.', 'Rev 2.1 24 Jan 2005 00:00 2.1 release of the TIMETRA-FILTER-MIB.', 'Rev 2.0 15 Jan 2004 00:00 2.0 release of the TIMETRA-FILTER-MIB.', 'Rev 1.2 15 Aug 2003 00:00 1.2 release of the TIMETRA-FILTER-MIB.', 'Rev 0.1 29 Jan 2003 00:00 Initial version of the TIMETRA-FILTER-MIB.',))
if mibBuilder.loadTexts: timetraFilterMIBModule.setLastUpdated('201102010000Z')
if mibBuilder.loadTexts: timetraFilterMIBModule.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: timetraFilterMIBModule.setContactInfo('Alcatel-Lucent SROS Support Web: http://support.alcatel-lucent.com')
if mibBuilder.loadTexts: timetraFilterMIBModule.setDescription("This document is the SNMP MIB module to manage and provision Filter features on Alcatel-Lucent SROS systems. Copyright 2003-2012 Alcatel-Lucent. All rights reserved. Reproduction of this document is authorized on the condition that the foregoing copyright notice is included. This SNMP MIB module (Specification) embodies Alcatel-Lucent's proprietary intellectual property. Alcatel-Lucent retains all title and ownership in the Specification, including any revisions. Alcatel-Lucent grants all interested parties a non-exclusive license to use and distribute an unmodified copy of this Specification in connection with management of Alcatel-Lucent products, and without fee, provided this copyright notice and license appear on all copies. This Specification is supplied 'as is', and Alcatel-Lucent makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
tFilterObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21))
tFilterNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 21))
tFilterNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 21, 0))
tFilterMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21))
tFilterNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 8))
tFilterTimeStampObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 9))
class TFilterID(TextualConvention, Unsigned32):
    description = 'the identification number of a filter. 0 indicates an invalid filter-id.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 65535)

class TIPFilterID(TFilterID):
    description = 'the identification number of an IP filter.'
    status = 'current'

class TIPFilterIdOrEmpty(TextualConvention, Integer32):
    description = 'the identification number of an IP filter.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65535), )
class TMACFilterID(TFilterID):
    description = 'the identification number of a MAC filter.'
    status = 'current'

class TAnyFilterID(TextualConvention, Unsigned32):
    description = 'Indicates a filter Id. Any value greater than 65535 indicates a filter that was created by the system. The range 0x0100xxxx (xxxx: 0000 .. FFFF) indicates a filter used for BGP Flow Spec. (the value xxxx indicating the vRtrID where the filter is active.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class TItemScope(TextualConvention, Integer32):
    description = "This textual-convention determines some aspects of an item's behavior regarding creation and use, unused entry garbage collection, and automated promulgation by Element Management System to other systems in the service domain. TItemScope applies to SAP-ingress, SAP-egress, and Network policies, and to IP filters and MAC filters. exclusive: When the scope of an item is defined as exclusive, the item can only be applied once, for example to a single SAP. Attempting to assign the policy to a second SAP is not allowed and will result in an error. If the item is removed from the exclusive SAP, it will become available for assignment to another exclusive SAP. A non-applied exclusive scope policy is a candidate to be removed from the system by a TBD garbage collection command. The system default policies cannot be put into the exclusive scope. An error will be generated if scope exclusive is executed in any policies with a policy-id equal to 1. template: When the scope of an item is defined as template, the item can be applied any number of times. Policies with template scope will not be considered for deletion by a TBD garbage collection command; all items of scope 'template' must be deleted explicitly. The system default policies will always be scope template. An error will occur if a policy-id 1 is attempted to be set to scope exclusive."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("exclusive", 1), ("template", 2))

class TItemMatch(TextualConvention, Integer32):
    description = 'when set to off, the item is not matched. when set to false, packets without the item match the filter. when set to true, packets with the item match the filter.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("off", 1), ("false", 2), ("true", 3))

class TEntryIndicator(TextualConvention, Unsigned32):
    description = 'Uniquely identifies an entry in a policy or filter table. The value 0 is not a valid entry-id. When used as insertion point the value 0 indicates that entries must be inserted at the very beginning, i.e.before the first entry defined.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 65535)

class TEntryId(TEntryIndicator):
    description = 'uniquely identifies an entry in a policy or filter table. to facilitate insertion of entries in the tables, we recommend assigning entry IDs by 10s: 10, 20, 30, etc. '
    status = 'current'
    subtypeSpec = TEntryIndicator.subtypeSpec + ValueRangeConstraint(1, 65535)

class TEntryIdOrZero(TEntryIndicator):
    description = 'uniquely identifies an entry in a policy or filter table. to facilitate insertion of entries in the tables, we recommend assigning entry IDs by 10s: 10, 20, 30, etc. The value 0, means that the object does not refer to a filter entry at this time. '
    status = 'current'
    subtypeSpec = TEntryIndicator.subtypeSpec + ValueRangeConstraint(0, 65535)

class TFilterAction(TextualConvention, Integer32):
    description = 'action to take on the traffic when no filter entry matches. when set to drop(1), packets matching the filter entry are dropped. when set to forward(2), packets matching the filter entry are forwarded. when set to nat(5), packets matching the filter entry are forwarded to the NAT function in the system. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))
    namedValues = NamedValues(("drop", 1), ("forward", 2), ("httpRedirect", 4), ("nat", 5))

class TFilterActionOrDefault(TextualConvention, Integer32):
    description = 'action to take on the traffic when the filter entry matches. when set to drop(1), packets matching the filter entry are dropped. when set to forward(2), packets matching the filter entry are forwarded. when set to default(3), packets matching the filter entry are dropped. when set to nat(5) packets matching the filter entry are forwarded to the NAT function in the system. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("drop", 1), ("forward", 2), ("default", 3), ("httpRedirect", 4), ("nat", 5))

class TFilterLogId(TextualConvention, Unsigned32):
    description = 'uniquely identifies an entry in the filter log table. 0 indicates an invalid log-id.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(101, 199), )
class TFilterLogDestination(TextualConvention, Integer32):
    description = 'determines the location where filtered packets are logged.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("memory", 1), ("syslog", 2), ("file", 3))

class TTimeRangeState(TextualConvention, Integer32):
    description = 'The textual convention TTimeRangeState is used to indicate the state of an object that is controlled by a time range. - timeRangeNotApplic: no time range is applicable for this entry. - timeRangeNotActive: A time range is defined but is not active at this moment. - timeRangeActive. A time range is defined, and is activated successfully. - timeRangeActiveDownloadFailed: A time range is defined and is activated, but the corresponding object could not be installed due to resource problems.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("timeRangeNotApplic", 0), ("timeRangeNotActive", 1), ("timeRangeActive", 2), ("timeRangeActiveDownloadFailed", 3))

class TFilterLogSummaryCriterium(TextualConvention, Integer32):
    description = 'Indicates the field on which log summarisation will be done. - when set to srcAddr, received log packets are summarized based on the src ip/mac-addr - when set to dstAddr, received log packets are summarized based on the dst ip/mac-addr'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("srcAddr", 0), ("dstAddr", 1))

class TFilterType(TextualConvention, Integer32):
    description = 'Type of filter.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("fltrtypeselNone", 0), ("fltrtypeselIp", 1), ("fltrtypeselMac", 2), ("fltrtypeselCpm", 3), ("fltrtypeselIpv6", 4), ("fltrtypeselCpm6", 5), ("fltrtypeselCpmMac", 6))

class TFilterSubInsSpaceOwner(TextualConvention, Integer32):
    description = 'Application cacapble of inserting filter entries into an existing filter'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("none", 0), ("radius", 1), ("creditControl", 2), ("bgpFlowspec", 3), ("li", 4))

class TDHCPFilterID(TFilterID):
    description = 'the identification number of a DHCP filter.'
    status = 'current'

class TDhcpFilterAction(TextualConvention, Integer32):
    description = 'Action to take on DHCP host creation when the filter entry matches. When set to none(1), host creation proceeds as normal. When set to bypass-host-creation(2), host creation is bypassed. When set to drop(3), the DHCP message is dropped. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("bypass-host-creation", 2), ("drop", 3))

class TDhcpFilterMatch(TextualConvention, Integer32):
    description = 'Match condition for a DHCP option in a DHCP filter entry When set to present(1) the related DHCP option must be present, when set to absent(2) the related DHCP option must be absent. When set to string(3) the option must (partially) match a specified ASCII string, setting string-exact(4) requires an exact match, setting string-invert(5) requires the option not to (partially) match, setting string-exact-invert(6) requires the option not to match exact. Setting hex(7), hex-exact(8), hex-invert(9) or hex-exact-invert(10) will use a hex octet string for the matching. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("present", 1), ("absent", 2), ("string", 3), ("string-exact", 4), ("string-invert", 5), ("string-exact-invert", 6), ("hex", 7), ("hex-exact", 8), ("hex-invert", 9), ("hex-exact-invert", 10))

class TFltrPrefixListType(TextualConvention, Integer32):
    description = 'The type TFltrPrefixListType enumerates all possible prefix list types.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ipv4", 1), ("ipv6", 2))

tIPFilterTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 1), )
if mibBuilder.loadTexts: tIPFilterTable.setStatus('current')
if mibBuilder.loadTexts: tIPFilterTable.setDescription('Contains a List of all ip filters configured on this system.')
tIPFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 1, 1), ).setIndexNames((0, "TIMETRA-FILTER-MIB", "tIPFilterId"))
if mibBuilder.loadTexts: tIPFilterEntry.setStatus('current')
if mibBuilder.loadTexts: tIPFilterEntry.setDescription('Information about a particular IP Filter entry. Entries are created/deleted by user. Entries have a presumed StorageType of nonVolatile.')
tIPFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 1, 1, 1), TAnyFilterID())
if mibBuilder.loadTexts: tIPFilterId.setStatus('current')
if mibBuilder.loadTexts: tIPFilterId.setDescription('Uniquely identifies an ip filter. User configured filters can only have values between (1..65535). All other values are reserved for system generated filters.')
tIPFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: tIPFilterRowStatus.setDescription('This object allows entries to be created and deleted in the tIPFilterTable.')
tIPFilterScope = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 1, 1, 3), TItemScope().clone('template')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterScope.setStatus('current')
if mibBuilder.loadTexts: tIPFilterScope.setDescription('This object specifies the scope of this filter definition. If defined as exclusive(1), this filter can be instantiated only once as compared to the multiple instances that the filter can have if defined as template(2).')
tIPFilterDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 1, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterDescription.setStatus('current')
if mibBuilder.loadTexts: tIPFilterDescription.setDescription('User-provided description for this filter.')
tIPFilterDefaultAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 1, 1, 5), TFilterAction().clone('drop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterDefaultAction.setStatus('current')
if mibBuilder.loadTexts: tIPFilterDefaultAction.setDescription('The action to take for packets that do not match any filter entries. The only allowed values for this field are drop(1) and forward(2).')
tIPFilterRadiusInsertPt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 1, 1, 6), TEntryIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterRadiusInsertPt.setStatus('current')
if mibBuilder.loadTexts: tIPFilterRadiusInsertPt.setDescription('The value of tIPFilterRadiusInsertPt specifies at what place the filter entries received from Radius will be inserted in the filter. No regular entries, nor Credit Control provided entries can be configured in this range. The value 0 means that no Radius provided filter entries can be inserted in the filter. If tIPFilterRadiusInsertSize is set to 0, then this object will be put to 0 as well. Any change attempts will be silently discarded in this case.')
tIPFilterRadiusInsertSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 1, 1, 7), TEntryIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterRadiusInsertSize.setStatus('current')
if mibBuilder.loadTexts: tIPFilterRadiusInsertSize.setDescription('The value of tIPFilterRadiusInsertSize specifies how many filter entries received from Radius for subscriber hosts can be inserted in the filter. If tIPFilterRadiusInsertPt is set to 0, then this object will be put to 0 as well. Any change attempts will be silently discarded in this case.')
tIPFilterCreditCntrlInsertPt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 1, 1, 8), TEntryIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterCreditCntrlInsertPt.setStatus('current')
if mibBuilder.loadTexts: tIPFilterCreditCntrlInsertPt.setDescription('The value of tIPFilterCreditCntrlInsertPt specifies at what place the filter entries received from Credit Control for a particular subscriber host will be inserted in the filter. No regular entries, nor Radius provided entries can be configured in this range. The value 0 means that no Credit Control provided filter entries can be inserted in the filter. If tIPFilterCreditCntrlInsertSize is set to 0, then this object will be put to 0 as well. Any change attempts will be silently discarded in this case.')
tIPFilterCreditCntrlInsertSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 1, 1, 9), TEntryIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterCreditCntrlInsertSize.setStatus('current')
if mibBuilder.loadTexts: tIPFilterCreditCntrlInsertSize.setDescription('The value of tIPFilterCreditCntrlInsertSize specifies how many filter entries received from Credit Control can be inserted in the filter. If tIPFilterCreditCntrlInsertPt is set to 0, then this object will be put to 0 as well. Any change attempts will be silently discarded in this case.')
tIPFilterSubInsertHighWmark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(95)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterSubInsertHighWmark.setStatus('current')
if mibBuilder.loadTexts: tIPFilterSubInsertHighWmark.setDescription('The value of the object tIPFilterSubInsertHighWmark specifies the utilization of the filter ranges for filter entry insertion, at which a table full alarm will be raised by the agent.')
tIPFilterSubInsertLowWmark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterSubInsertLowWmark.setStatus('current')
if mibBuilder.loadTexts: tIPFilterSubInsertLowWmark.setDescription('The value of the object tIPFilterSubInsertLowWmark specifies the utilization of the filter ranges for filter entry insertion, at which a table full alarm will be cleared by the agent.')
tIpFilterCreditCntrlNbrInsertd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tIpFilterCreditCntrlNbrInsertd.setStatus('current')
if mibBuilder.loadTexts: tIpFilterCreditCntrlNbrInsertd.setDescription('The value of the object tIpFilterCreditCntrlNbrInsertd indicates how many filter entries are currently inserted in the filter on request the credit control application.')
tIpFilterRadiusNbrInsertd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tIpFilterRadiusNbrInsertd.setStatus('current')
if mibBuilder.loadTexts: tIpFilterRadiusNbrInsertd.setDescription('The value of the object tIpFilterRadiusNbrInsertd indicates how many filter entries are currently inserted in the filter on request the RADIUS application.')
tIpFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 1, 1, 14), TLNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIpFilterName.setStatus('current')
if mibBuilder.loadTexts: tIpFilterName.setDescription('The value of tIpFilterName specifies the name to associate with this filter.')
tIPFilterParamsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2), )
if mibBuilder.loadTexts: tIPFilterParamsTable.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsTable.setDescription('A table of all IP filter match entries for all IP filters.')
tIPFilterParamsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1), ).setIndexNames((0, "TIMETRA-FILTER-MIB", "tIPFilterId"), (0, "TIMETRA-FILTER-MIB", "tIPFilterParamsIndex"))
if mibBuilder.loadTexts: tIPFilterParamsEntry.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsEntry.setDescription('Information about a particular IP Filter entry. Every IP Filter can have zero or more IP Filter match entries. a filter entry with no match criteria set will match every packet, and the entry action will be taken. Entries are created/deleted by user. There is no StorageType object, entries have a presumed StorageType of nonVolatile. ')
tIPFilterParamsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 1), TEntryId())
if mibBuilder.loadTexts: tIPFilterParamsIndex.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsIndex.setDescription('This is the secondary index for the entry. Every ip filter can have multiple entries, therefore every ip filter entry is identified by the tIPFilterId and tIPFilterParamsIndex.')
tIPFilterParamsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsRowStatus.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsRowStatus.setDescription('This object allows entries to be created and deleted in the tIPFilterParamsTable.')
tIPFilterParamsLogId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 3), TFilterLogId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsLogId.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsLogId.setDescription('This object specifies the log to use for packets that match this entry. The value zero indicates that logging is disabled.')
tIPFilterParamsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsDescription.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsDescription.setDescription('User-provided description for this filter entry.')
tIPFilterParamsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 5), TFilterActionOrDefault().clone('drop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsAction.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsAction.setDescription('The action to take for packets that match this filter entry. The value default(3) specifies this entry to inherit the behavior defined as the default for the filter.')
tIPFilterParamsForwardNH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 6), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsForwardNH.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsForwardNH.setDescription("The ip-address of the nexthop to which the packet should be forwarded if it hits this filter entry. The action of this entry should be 'forward' in such a case.")
tIPFilterParamsForwardNHIndirect = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsForwardNHIndirect.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsForwardNHIndirect.setDescription('tIPFilterParamsForwardNHIndirect specifies if the nexthop is directly/ indirectly reachable.')
tIPFilterParamsRemarkDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 8), TDSCPFilterActionValue().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsRemarkDSCP.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsRemarkDSCP.setDescription('The DSCP value that should be remarked in case a packet hits this filter entry.')
tIPFilterParamsRemarkDSCPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 9), TDSCPFilterActionValue().clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsRemarkDSCPMask.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsRemarkDSCPMask.setDescription('tIPFilterParamsRemarkDSCPMask specifies the care bits while remarking with the DSCP value.')
tIPFilterParamsRemarkDot1p = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 10), Dot1PPriority().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsRemarkDot1p.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsRemarkDot1p.setDescription('tIPFilterParamsRemarkDot1p specifies the Dot1p value that needs to be remarked on the packet if it hits this filter entry.')
tIPFilterParamsSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 11), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsSourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsSourceIpAddr.setDescription('IP address to match the source-ip of the packet.')
tIPFilterParamsSourceIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 12), IpAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsSourceIpMask.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsSourceIpMask.setDescription('If different from 0, the object tIPFilterParamsSourceIpMask specifies the IP Mask value for this policy IP Filter entry. The mask is ANDed with the received source IP address to match the tIPFilterParamsSourceIpAddr. If the value of tIPFilterParamsSourceIpMask is 0, and the value of tIPFilterParamsSrcIpFullMask is non zero then the value of tIPFilterParamsSrcIpFullMask is used as mask. If the value of tIPFilterParamsSourceIpMask is non zero, it will be equal to the mask expressed the object tIPFilterParamsSrcIpFullMask. If both tIPFilterParamsSourceIpMask and tIPFilterParamsSrcIpFullMask are set to 0, not matching is done on the source Ip address. If a value is specified for this object, then the value of the object tIPFilterParamsSrcIpFullMask will be set to reflect this same mask.')
tIPFilterParamsDestinationIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 13), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsDestinationIpAddr.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsDestinationIpAddr.setDescription('IP address to match the destination-ip of the packet.')
tIPFilterParamsDestinationIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 14), IpAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsDestinationIpMask.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsDestinationIpMask.setDescription('If different from 0, the object tIPFilterParamsDestinationIpMask specifies the IP Mask value for this policy IP Filter entry. The mask is ANDed with the received Destination IP address to match the tIPFilterParamsDestinationIpAddr. If the value of tIPFilterParamsDestinationIpMask is 0, and the value of tIPFilterParamsDestIpFullMask is non zero then the value of tIPFilterParamsDestIpFullMask is used as mask. If the value of tIPFilterParamsDestinationIpMask is non zero, it will be equal to the mask expressed the object tIPFilterParamsDestIpFullMask. If both tIPFilterParamsDestinationIpMask and tIPFilterParamsDestIpFullMask are set to 0, not matching is done on the Destination Ip address. If a value is specified for this object, then the value of the object tIPFilterParamsDestIpFullMask will be set to reflect this same mask.')
tIPFilterParamsProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 15), TIpProtocol().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsProtocol.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsProtocol.setDescription('IP protocol to match. set to -1 to disable matching IP protocol. If the protocol is changed the protocol specific parameters are reset. For instance if protocol is changed from TCP to UDP, then the objects tIPFilterParamsTcpSyn and tIPFilterParamsTcpAck will be turned off.')
tIPFilterParamsSourcePortValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 16), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsSourcePortValue1.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsSourcePortValue1.setDescription('TCP/UDP port value1. The value of this object is used as per the description for tIPFilterParamsSourcePortOperator.')
tIPFilterParamsSourcePortValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 17), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsSourcePortValue2.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsSourcePortValue2.setDescription('TCP/UDP port value2. The value of this object is used as per the description for tIPFilterParamsSourcePortOperator.')
tIPFilterParamsSourcePortOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 18), TTcpUdpPortOperator().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsSourcePortOperator.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsSourcePortOperator.setDescription('The operator specifies the manner in which tIPFilterParamsSourcePortValue1 and tIPFilterParamsSourcePortValue2 are to be used. The value of these latter 2 objects and tIPFilterParamsSourcePortOperator is used as described in TTcpUdpPortOperator.')
tIPFilterParamsDestPortValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 19), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsDestPortValue1.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsDestPortValue1.setDescription('TCP/UDP port value1. The value of this object is used as per the description for tIPFilterParamsDestPortOperator.')
tIPFilterParamsDestPortValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 20), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsDestPortValue2.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsDestPortValue2.setDescription('TCP/UDP port value2. The value of this object is used as per the description for tIPFilterParamsDestPortOperator.')
tIPFilterParamsDestPortOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 21), TTcpUdpPortOperator().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsDestPortOperator.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsDestPortOperator.setDescription('The operator specifies the manner in which tIPFilterParamsDestPortValue1 and tIPFilterParamsDestPortValue2 are to be used. The value of these latter 2 objects and tIPFilterParamsDestPortOperator is used as described in TTcpUdpPortOperator.')
tIPFilterParamsDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 22), TDSCPNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsDSCP.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsDSCP.setDescription('DSCP to be matched on the packet.')
tIPFilterParamsFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 24), TItemMatch().clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsFragment.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsFragment.setDescription('If enabled, this object matches fragmented/unfragmented packets as per the value of the object.')
tIPFilterParamsOptionPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 25), TItemMatch().clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsOptionPresent.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsOptionPresent.setDescription('If enabled, this object matches packets if they have options present or not as per the value of the object.')
tIPFilterParamsIpOptionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 26), TIpOption()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsIpOptionValue.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsIpOptionValue.setDescription('The value of the specific ip-option to match.')
tIPFilterParamsIpOptionMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 27), TIpOption()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsIpOptionMask.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsIpOptionMask.setDescription('Mask is ANDed with the ip-option before being compared to tIPFilterParamsIpOptionValue.')
tIPFilterParamsMultipleOption = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 28), TItemMatch().clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsMultipleOption.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsMultipleOption.setDescription('If enabled, matches multiple options as per the value of the object.')
tIPFilterParamsTcpSyn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 29), TItemMatch().clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsTcpSyn.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsTcpSyn.setDescription('If Enabled, matches a TCP Syn as per value of the object.')
tIPFilterParamsTcpAck = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 30), TItemMatch().clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsTcpAck.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsTcpAck.setDescription('If Enabled, matches a TCP Ack as per value of the object.')
tIPFilterParamsIcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 255), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsIcmpCode.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsIcmpCode.setDescription('Icmp code to be matched. tIPFilterParamsIcmpCode complements the object tIPFilterParamsIcmpType. Both of them need to be set to actually enable ICMP matching. The value -1 means Icmp code matching is not enabled.')
tIPFilterParamsIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 255), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsIcmpType.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsIcmpType.setDescription('Icmp type to be matched. tIPFilterParamsIcmpType complements the object tIPFilterParamsIcmpCode. Both of them need to be set to actually enable ICMP matching. The value -1 means Icmp type matching is not enabled.')
tIPFilterParamsCflowdSample = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 33), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsCflowdSample.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsCflowdSample.setDescription("When tIPFilterParamsCflowdSample has a value of 'true', Cflowd sampling and analysis is performed on those packet streams where this filter has been applied. Only packets matching this IP filter entry are subjected to Cflowd sampling and analysis. A Cflowd profile controls the sampling and analysis of data flows through the router.")
tIPFilterParamsCflowdIfSample = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 34), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsCflowdIfSample.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsCflowdIfSample.setDescription("When tIPFilterParamsCflowdIfSample has a value of 'true', Cflowd sampling and analysis is performed on those packet streams where this filter has been applied. Only packets matching this IP filter entry are subjected to Cflowd sampling and analysis. A Cflowd profile controls the sampling and analysis of data flows through the router.")
tIPFilterParamsForwardNHInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsForwardNHInterface.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsForwardNHInterface.setDescription("The interface name for the nexthop to which the packet should be forwarded if it hits this filter entry. The action of this entry should be 'forward' in such a case.")
tIPFilterParamsIngressHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tIPFilterParamsIngressHitCount.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsIngressHitCount.setDescription('This object indicates the number of times an ingress packet matched this entry.')
tIPFilterParamsEgressHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tIPFilterParamsEgressHitCount.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsEgressHitCount.setDescription('This object indicates the number of times an egress packet matched this entry.')
tIPFilterParamsLogInstantiated = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 38), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tIPFilterParamsLogInstantiated.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsLogInstantiated.setDescription('tIPFilterParamsLogInstantiated indicates if the filter log for this filter entry has been instantiated or not.')
tIPFilterParamsForwardRedPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 39), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsForwardRedPlcy.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsForwardRedPlcy.setDescription('tIPFilterParamsForwardRedPlcy specifies the redirect policy to be used to determine the nexthop.')
tIPFilterParamsActiveDest = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 40), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tIPFilterParamsActiveDest.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsActiveDest.setDescription('tIPFilterParamsActiveDest indicates the IP address of the active destination for this IP filter. A value of 0 indicates that there is currently no active destination.')
tIPFilterParamsFwdSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 41), TmnxServId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tIPFilterParamsFwdSvcId.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsFwdSvcId.setDescription('tIPFilterParamsFwdSvcId indicates the service id of the destination for this IP filter entry. A value of 0 indicates that there is currently no active SAP or SDP destination.')
tIPFilterParamsFwdSapPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 42), TmnxPortID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsFwdSapPortId.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsFwdSapPortId.setDescription("tIPFilterParamsFwdSapPortId specifies the sap port identity of the destination for this IP filter entry. A value of 0 indicates that there is currently no SAP destination defined. A value different from 0 can only be specified if the value of the tIPFilterParamsAction object of this entry is 'forward'. In addition a non-zero value can only be given if the object tIPFilterParamsFwdSdpBind has a zero value.")
tIPFilterParamsFwdSapEncapVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 43), TmnxEncapVal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsFwdSapEncapVal.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsFwdSapEncapVal.setDescription("tIPFilterParamsFwdSapEncapVal specifies the sap port encap value of the destination SAP for this IP filter entry. A value different from 0 can only be specified if the value of the tIPFilterParamsAction object of this entry is 'forward'. In addition a non-zero value can only be given if the object tIPFilterParamsFwdSdpBind has a zero value. A value of 0 indicates that either 1) the sap encapsulation value is not specified when tIPFilterParamsFwdSapPortId and tIPFilterParamsFwdSvcId have valid values; or 2) that there is no SAP destination.")
tIPFilterParamsFwdSdpBind = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 44), SdpBindId().clone(hexValue="0")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsFwdSdpBind.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsFwdSdpBind.setDescription("tIPFilterParamsFwdSdpBind specifies the sdp bibd identity of the destination for this IP filter entry. A value of 0 indicates that there is currently no SDP binding defined. A value different from 0 can only be specified if the value of the tIPFilterParamsAction object of this entry is 'forward'. In addition a non-zero value can only be given if the objects tIPFilterParamsFwdSapPortId and tIPFilterParamsFwdSapEncapVal have a zero value.")
tIPFilterParamsTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 45), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsTimeRangeName.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsTimeRangeName.setDescription('tIPFilterParamsTimeRangeName specifies the tmnxTimeRangeEntry to be associated with this filter entry. A value for this object can only be specified during row creation, and cannot be altered lateron. Also, a value is accepted only if the tmnxTimeRangeEntry is defined in the TIMETRA-SCHEDULER-MIB::tmnxTimeRangeTable.tTimeRangeName.')
tIPFilterParamsTimeRangeState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 46), TTimeRangeState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tIPFilterParamsTimeRangeState.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsTimeRangeState.setDescription('tIPFilterParamsTimeRangeState indicates whether or not the entry is currently in effect. - timeRangeNotApplic: no time range is applicable for this entry. - timeRangeNotActive: A time range is defined in tIPFilterParamsTimeRangeName, but is not active at this moment. Consequently the filter entry is not installed. - timeRangeActive. A time range is defined in tIPFilterParamsTimeRangeName, and is activated successfully. - timeRangeActiveDownloadFailed: A time range is defined in tIPFilterParamsTimeRangeName, and is activated, but the corresponding filter entry could not be installed due to resource problems.')
tIPFilterParamsRedirectURL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 47), DisplayString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsRedirectURL.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsRedirectURL.setDescription("The value of tIPFilterParamsRedirectURL specifies the URL to redirect to, when the value of tIPFilterParamsAction is 'httpRedirect'. Note that the value of tIPFilterParamsRedirectURL is silently cleared by the system if tIPFilterParamsAction is set to any value other than httpRedirect.")
tIPFilterParamsSrcIpFullMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 48), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsSrcIpFullMask.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsSrcIpFullMask.setDescription('If different from 0, the object tIPFilterParamsSrcIpFullMask specifies the IP Mask value for this policy IP Filter entry. The mask is ANDed with the received Source IP address to match the tIPFilterParamsSourceIpAddr. If the value of tIPFilterParamsSourceIpMask is non zero, it will be equal to the mask expressed the object tIPFilterParamsSrcIpFullMask. If both tIPFilterParamsSourceIpMask and tIPFilterParamsSrcIpFullMask are set to 0, no matching is done on the Source Ip address. This object should contain consecutive ones and zeros. Both a regular and an inverse mask is allowed (i.e. the sequence of consecutive ones can appear at the front or at the end of the mask). If a regular mask is specified for tIPFilterParamsSrcIpFullMask then the value of tIPFilterParamsSourceIpMask will be changed to reflect this value. If an inverse is specified, the value of tIPFilterParamsSourceIpMask will be set to 0.')
tIPFilterParamsDestIpFullMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 49), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsDestIpFullMask.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsDestIpFullMask.setDescription('If different from 0, the object tIPFilterParamsDestIpFullMask specifies the IP Mask value for this policy IP Filter entry. The mask is ANDed with the received Destination IP address to match the tIPFilterParamsDestinationIpAddr. If the value of tIPFilterParamsDestinationIpMask is non zero, it will be equal to the mask expressed the object tIPFilterParamsDestIpFullMask. If both tIPFilterParamsDestinationIpMask and tIPFilterParamsDestIpFullMask are set to 0, no matching is done on the Destination Ip address. This object should contain consecutive ones and zeros. Both a regular and an inverse mask is allowed (i.e. the sequence of consecutive ones can appear at the front or at the end of the mask). If a regular mask is specified for tIPFilterParamsDestIpFullMask then the value of tIPFilterParamsDestinationIpMask will be changed to reflect this value. If an inverse is specified, the value of tIPFilterParamsDestinationIpMask will be set to 0.')
tIPFilterParamsIngrHitByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tIPFilterParamsIngrHitByteCount.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsIngrHitByteCount.setDescription('The value of tIPFilterParamsIngrHitByteCount indicates the number of bytes of all ingress packets that matched this entry.')
tIPFilterParamsEgrHitByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tIPFilterParamsEgrHitByteCount.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsEgrHitByteCount.setDescription('The value of tIPFilterParamsEgrHitByteCount indicates the number of bytes of all egress packets that matched this entry.')
tIPFilterParamsFwdRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 52), TmnxVRtrIDOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsFwdRtrId.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsFwdRtrId.setDescription("tIPFilterParamsFwdRtrId specifies, if different from '0', the router id of the into which the packet should be forwarded if it hits this filter entry. The action of this entry should be 'forward' in such a case.")
tIPFilterParamsSrcRouteOption = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 53), TItemMatch().clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsSrcRouteOption.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsSrcRouteOption.setDescription('tIPFilterParamsSrcRouteOption specifies, when enabled, that this filter should match if a (strict or loose) source route option is present/not present at any location within the IP header, as per the value of this object.')
tIPFilterParamsSrcIpPrefixList = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 54), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsSrcIpPrefixList.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsSrcIpPrefixList.setDescription('The value of the object tIPFilterParamsSrcIpPrefixList specifies the ip-prefix-list to be used as match criterion for the source ip address. If the value of this object is empty then the values of the objects tIPFilterParamsSourceIpAddr and tIPFilterParamsSourceIpMask will be used as src-ip match criterion. The value specified for this object must correspond to a prefix-list defined in tFilterPrefixListTable. When set to a non zero value, the value of the objects tIPFilterParamsSourceIpAddr and tIPFilterParamsSourceIpMask will set to their default values. The value of this object will be set to its default value by the system if a new (non default) value is provided for any of the objects tIPFilterParamsSourceIpAddr or tIPFilterParamsSourceIpMask. An attempt to set tIPFilterParamsSrcIpPrefixList to a non-default value in combination with setting any of tIPFilterParamsSourceIpAddr or tIPFilterParamsSourceIpMask to (a) non-default value(s) is rejected by the system. Also, setting both tIPFilterParamsSrcIpPrefixList and tIPFilterParamsDstIpPrefixList to non-default values is rejected by the system')
tIPFilterParamsDstIpPrefixList = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 2, 1, 55), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPFilterParamsDstIpPrefixList.setStatus('current')
if mibBuilder.loadTexts: tIPFilterParamsDstIpPrefixList.setDescription('The value of the object tIPFilterParamsDstIpPrefixList specifies the ip-prefix-list to be used as match criterion for the destination ip address. If the value of this object is empty the values of the objects tIPFilterParamsDestinationIpAddr and tIPFilterParamsDestinationIpMask will be used as src-ip match criterion. The value specified for this object must correspond to a prefix-list defined in tFilterPrefixListTable. When set to a non zero value, the value of the objects tIPFilterParamsDestinationIpAddr and tIPFilterParamsDestinationIpMask will set to their default values. The value of this object will be set to its default value by the system if a new (non default) value is provided for any of the objects tIPFilterParamsDestinationIpAddr or tIPFilterParamsDestinationIpMask. An attempt to set tIPFilterParamsDstIpPrefixList to a non-default value in combination with setting any of tIPFilterParamsDestinationIpAddr or tIPFilterParamsDestinationIpMask to (a) non-default value(s) is rejected by the system. Also, setting both tIPFilterParamsDstIpPrefixList and tIPFilterParamsSrcIpPrefixList to non-default values is rejected by the system')
tMacFilterTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 3), )
if mibBuilder.loadTexts: tMacFilterTable.setStatus('current')
if mibBuilder.loadTexts: tMacFilterTable.setDescription('Contains a List of all mac filters configured on this system.')
tMacFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 3, 1), ).setIndexNames((0, "TIMETRA-FILTER-MIB", "tMacFilterId"))
if mibBuilder.loadTexts: tMacFilterEntry.setStatus('current')
if mibBuilder.loadTexts: tMacFilterEntry.setDescription('Information about a particular MAC Filter. Entries are created/deleted by user. Entries have a presumed StorageType of nonVolatile.')
tMacFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 3, 1, 1), TMACFilterID().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: tMacFilterId.setStatus('current')
if mibBuilder.loadTexts: tMacFilterId.setDescription('Uniquely identifies a mac filter as configures on this system.')
tMacFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMacFilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: tMacFilterRowStatus.setDescription('This object allows entries to be created and deleted in the tMacFilterTable.')
tMacFilterScope = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 3, 1, 3), TItemScope().clone('template')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMacFilterScope.setStatus('current')
if mibBuilder.loadTexts: tMacFilterScope.setDescription('This object specifies the scope of this filter definition. If defined as exclusive(1), this filter can be instantiated only once as compared to the multiple instances that the filter can have if defined as template(2).')
tMacFilterDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 3, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMacFilterDescription.setStatus('current')
if mibBuilder.loadTexts: tMacFilterDescription.setDescription('User-provided description for this filter.')
tMacFilterDefaultAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 3, 1, 5), TFilterAction().clone('drop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMacFilterDefaultAction.setStatus('current')
if mibBuilder.loadTexts: tMacFilterDefaultAction.setDescription('The action to take for packets that do not match any filter entries. The only allowed values for this field are drop(1) and forward(2).')
tMacFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 3, 1, 6), TMacFilterType().clone('normal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMacFilterType.setStatus('current')
if mibBuilder.loadTexts: tMacFilterType.setDescription("tMacFilterType specifies which type of entries this mac filter can contain. If tMacFilterType is set to 'normal(1)', all match criteria are accepted except the criteria mentioned below that belong to type isid(2) and vid(3). if tMacFilterType is set to 'isid(2)' the only accepted match criteria for the filter entries are: - tMacFilterParamsLowISID - tMacFilterParamsHighISID If tMacFilterType is set to vid(3) the only accepted match criteria for the filter entries are: - tMacFilterParamsInnerTagValue - tMacFilterParamsInnerTagMask - tMacFilterParamsOuterTagValue - tMacFilterParamsOuterTagMask tMacFilterType can only be changed if the filter is not applied and has no entries. ")
tMacFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 3, 1, 7), TLNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMacFilterName.setStatus('current')
if mibBuilder.loadTexts: tMacFilterName.setDescription('The value of tMacFilterName specifies the name to associate with this filter.')
tMacFilterParamsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 4), )
if mibBuilder.loadTexts: tMacFilterParamsTable.setStatus('current')
if mibBuilder.loadTexts: tMacFilterParamsTable.setDescription('A table of all MAC filter match entries for all MAC filters.')
tMacFilterParamsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 4, 1), ).setIndexNames((0, "TIMETRA-FILTER-MIB", "tMacFilterId"), (0, "TIMETRA-FILTER-MIB", "tMacFilterParamsIndex"))
if mibBuilder.loadTexts: tMacFilterParamsEntry.setStatus('current')
if mibBuilder.loadTexts: tMacFilterParamsEntry.setDescription('Information about a particular MAC Filter entry. Every MAC Filter can have zero or more MAC Filter match entries. a filter entry with no match criteria set will match every packet, and the entry action will be taken. Entries are created/deleted by user. There is no StorageType object, entries have a presumed StorageType of nonVolatile. ')
tMacFilterParamsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 4, 1, 1), TEntryId())
if mibBuilder.loadTexts: tMacFilterParamsIndex.setStatus('current')
if mibBuilder.loadTexts: tMacFilterParamsIndex.setDescription('This is the secondary index for the entry. Every mac filter can have multiple entries, therefore every mac filter entry is identified by the tMacFilterId and tMacFilterParamsIndex.')
tMacFilterParamsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMacFilterParamsRowStatus.setStatus('current')
if mibBuilder.loadTexts: tMacFilterParamsRowStatus.setDescription('This object allows entries to be created and deleted in the tMacFilterParamsTable.')
tMacFilterParamsLogId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 4, 1, 3), TFilterLogId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMacFilterParamsLogId.setStatus('current')
if mibBuilder.loadTexts: tMacFilterParamsLogId.setDescription('This object specifies the log to use for packets that match this entry. The value zero indicates that logging is disabled.')
tMacFilterParamsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 4, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMacFilterParamsDescription.setStatus('current')
if mibBuilder.loadTexts: tMacFilterParamsDescription.setDescription('User-provided description for this filter entry.')
tMacFilterParamsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 4, 1, 5), TFilterActionOrDefault().clone('drop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMacFilterParamsAction.setStatus('current')
if mibBuilder.loadTexts: tMacFilterParamsAction.setDescription('The action to take for packets that match this filter entry. The value default(3) specifies this entry to inherit the behavior defined as the default for the filter. The value nat(5) is not allowed.')
tMacFilterParamsFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 4, 1, 6), TFrameType().clone('e802dot3')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMacFilterParamsFrameType.setStatus('current')
if mibBuilder.loadTexts: tMacFilterParamsFrameType.setDescription('The type of mac frame for which we are defining this match criteria. For filter entries in a Mac filter of type tMacFilterType = dot1q or tMacFilterType qinq the default value for this object is set to ethernetII (3), and no changes are allowed. In all other cases the default value is set to e802dot3 (0) ')
tMacFilterParamsSrcMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 4, 1, 8), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMacFilterParamsSrcMAC.setStatus('current')
if mibBuilder.loadTexts: tMacFilterParamsSrcMAC.setDescription('Source MAC to match for this policy MAC filter entry.')
tMacFilterParamsSrcMACMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 4, 1, 9), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMacFilterParamsSrcMACMask.setStatus('current')
if mibBuilder.loadTexts: tMacFilterParamsSrcMACMask.setDescription('Source MAC mask value for this policy MAC filter entry. The mask is ANDed with the MAC to match tMacFilterParamsSrcMAC. A zero bit means ignore this bit, do not match. a one bit means match this bit with tMacFilterParamsSrcMAC. Use the value 00-00-00-00-00-00 to disable this filter criteria.')
tMacFilterParamsDstMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 4, 1, 10), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMacFilterParamsDstMAC.setStatus('current')
if mibBuilder.loadTexts: tMacFilterParamsDstMAC.setDescription('Destination MAC mask value for this policy MAC filter entry.')
tMacFilterParamsDstMACMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 4, 1, 11), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMacFilterParamsDstMACMask.setStatus('current')
if mibBuilder.loadTexts: tMacFilterParamsDstMACMask.setDescription('Destination MAC mask value for this policy MAC filter entry. The mask is ANDed with the MAC to match tMacFilterParamsDstMAC. A zero bit means ignore this bit, do not match. a one bit means match this bit with tMacFilterParamsDstMAC. Use the value 00-00-00-00-00-00 to disable this filter criteria.')
tMacFilterParamsDot1pValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 4, 1, 12), Dot1PPriority().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMacFilterParamsDot1pValue.setStatus('current')
if mibBuilder.loadTexts: tMacFilterParamsDot1pValue.setDescription('IEEE 802.1p priority value for this policy MAC filter entry. Use -1 to disable matching this filter criteria.')
tMacFilterParamsDot1pMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 4, 1, 13), Dot1PPriority().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMacFilterParamsDot1pMask.setStatus('current')
if mibBuilder.loadTexts: tMacFilterParamsDot1pMask.setDescription('IEEE 802.1p priority mask value for this policy MAC filter entry. Use zero to disable matching, use 7 to match everything.')
tMacFilterParamsEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65535), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMacFilterParamsEtherType.setStatus('current')
if mibBuilder.loadTexts: tMacFilterParamsEtherType.setDescription('Ethertype for this policy MAC filter entry. Use -1 to disable matching by this criteria. This object has no significance if the object tMacFilterParamsFrameType is not set to Ethernet_II.')
tMacFilterParamsDsap = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 4, 1, 15), ServiceAccessPoint().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMacFilterParamsDsap.setStatus('current')
if mibBuilder.loadTexts: tMacFilterParamsDsap.setDescription('MAC DSAP to match for this policy MAC filter entry. This object has no significance if the object tMacFilterParamsFrameType is not set to 802dot2LLC. In order to reset the value to the default value, both objects tMacFilterParamsDsap and tMacFilterParamsDsapMask need to be modified together to the default value.')
tMacFilterParamsDsapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 4, 1, 16), ServiceAccessPoint().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMacFilterParamsDsapMask.setStatus('current')
if mibBuilder.loadTexts: tMacFilterParamsDsapMask.setDescription('MAC DSAP mask for this policy MAC filter entry. use 0 to disable matching by this criteria. This object has no significance if the object tMacFilterParamsFrameType is not set to 802dot2LLC. In order to reset the value to the default value, both objects tMacFilterParamsDsap and tMacFilterParamsDsapMask need to be modified together to the default value.')
tMacFilterParamsSsap = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 4, 1, 17), ServiceAccessPoint().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMacFilterParamsSsap.setStatus('current')
if mibBuilder.loadTexts: tMacFilterParamsSsap.setDescription('MAC SSAP to match for this policy MAC filter entry. This object has no significance if the object tMacFilterParamsFrameType is not set to 802dot2LLC. In order to reset the value to the default value, both objects tMacFilterParamsSsap and tMacFilterParamsSsapMask need to be modified together to the default value.')
tMacFilterParamsSsapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 4, 1, 18), ServiceAccessPoint().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMacFilterParamsSsapMask.setStatus('current')
if mibBuilder.loadTexts: tMacFilterParamsSsapMask.setDescription('MAC SSAP mask for this policy MAC filter entry. use 0 to disable matching by this criteria. This object has no significance if the object tMacFilterParamsFrameType is not set to 802dot2LLC. In order to reset the value to the default value, both objects tMacFilterParamsSsap and tMacFilterParamsSsapMask need to be modified together to the default value.')
tMacFilterParamsSnapPid = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65535), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMacFilterParamsSnapPid.setStatus('current')
if mibBuilder.loadTexts: tMacFilterParamsSnapPid.setDescription('MAC SNAP PID to match for this policy MAC filter entry. use -1 to disable matching by this criteria. This object has no significance if object tMacFilterParamsFrameType is not set to 802dot2SNAP.')
tMacFilterParamsSnapOui = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("zero", 2), ("nonZero", 3))).clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMacFilterParamsSnapOui.setStatus('current')
if mibBuilder.loadTexts: tMacFilterParamsSnapOui.setDescription('MAC SNAP OUI to match. The values zero(2) and nonZero(3) specify what to match. Matching can be disabled by the use of the value off(1). This object has no significance if the object tMacFilterParamsFrameType is not set to 802dot2SNAP.')
tMacFilterParamsIngressHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 4, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tMacFilterParamsIngressHitCount.setStatus('current')
if mibBuilder.loadTexts: tMacFilterParamsIngressHitCount.setDescription('This object indicates the number of times an ingress packet matched this entry.')
tMacFilterParamsEgressHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 4, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tMacFilterParamsEgressHitCount.setStatus('current')
if mibBuilder.loadTexts: tMacFilterParamsEgressHitCount.setDescription('This object indicates the number of times an egress packet matched this entry.')
tMacFilterParamsLogInstantiated = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 4, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tMacFilterParamsLogInstantiated.setStatus('current')
if mibBuilder.loadTexts: tMacFilterParamsLogInstantiated.setDescription('tMacFilterParamsLogInstantiated indicates if the filter log for this filter entry has been instantiated or not.')
tMacFilterParamsFwdSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 4, 1, 24), TmnxServId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tMacFilterParamsFwdSvcId.setStatus('current')
if mibBuilder.loadTexts: tMacFilterParamsFwdSvcId.setDescription('tMacFilterParamsFwdSvcId indicates the service id of the destination for this Mac filter entry. A value of 0 indicates that there is currently no active SAP or SDP destination.')
tMacFilterParamsFwdSapPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 4, 1, 25), TmnxPortID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMacFilterParamsFwdSapPortId.setStatus('current')
if mibBuilder.loadTexts: tMacFilterParamsFwdSapPortId.setDescription("tMacFilterParamsFwdSapPortId specifies the sap port identity of the destination for this Mac filter entry. A value of 0 indicates that there is currently no SAP destination defined. A value different from 0 can only be specified if the tMacFilterParamsFwdSvcId object also has a non-zero value, and if the the value of the tMacFilterParamsAction object of this entry is 'forward'. In addition a non-zero value can only be given if the object tMacFilterParamsFwdSdpBind has a zero value.")
tMacFilterParamsFwdSapEncapVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 4, 1, 26), TmnxEncapVal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMacFilterParamsFwdSapEncapVal.setStatus('current')
if mibBuilder.loadTexts: tMacFilterParamsFwdSapEncapVal.setDescription("tMacFilterParamsFwdSapEncapVal specifies the sap port encap value of the destination SAP for this Mac filter entry. A value different from 0 can only be specified if the tMacFilterParamsFwdSvcId object also has a non-zero value, the tMacFilterParamsFwdSapPortId object has a non zero value, and if the the value of the tMacFilterParamsAction object of this entry is 'forward'. In addition a non-zero value can only be given if the object tMacFilterParamsFwdSdpBind has a zero value. A value of 0 indicates that either 1) the sap encapsulation value is not specified when tMacFilterParamsFwdSapPortId and tMacFilterParamsFwdSvcId have valid values; or 2) that there is no SAP destination.")
tMacFilterParamsFwdSdpBind = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 4, 1, 27), SdpBindId().clone(hexValue="0")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMacFilterParamsFwdSdpBind.setStatus('current')
if mibBuilder.loadTexts: tMacFilterParamsFwdSdpBind.setDescription("tMacFilterParamsFwdSdpBind specifies the sdp bibd identity of the destination for this Mac filter entry. A value of 0 indicates that there is currently no SDP binding defined. A value different from 0 can only be specified if the tMacFilterParamsFwdSvcId object also has a non-zero value, and if the the value of the tMacFilterParamsAction object of this entry is 'forward'. In addition a non-zero value can only be given if the objects tMacFilterParamsFwdSapPortId and tMacFilterParamsFwdSapEncapVal have a zero value.")
tMacFilterParamsTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 4, 1, 28), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMacFilterParamsTimeRangeName.setStatus('current')
if mibBuilder.loadTexts: tMacFilterParamsTimeRangeName.setDescription('tMacFilterParamsTimeRangeName specifies the tmnxTimeRangeEntry to be associated with this filter entry. A value for this object can only be specified during row creation, and cannot be altered lateron. Also, a value is accepted only if the tmnxTimeRangeEntry is defined in the TIMETRA-SCHEDULER-MIB::tmnxTimeRangeTable.tTimeRangeName.')
tMacFilterParamsTimeRangeState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 4, 1, 29), TTimeRangeState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tMacFilterParamsTimeRangeState.setStatus('current')
if mibBuilder.loadTexts: tMacFilterParamsTimeRangeState.setDescription('tMacFilterParamsTimeRangeState indicates whether or not the entry is currently in effect. - timeRangeNotApplic: no time range is applicable for this entry. - timeRangeNotActive: A time range is defined in tMacFilterParamsTimeRangeName, but is not active at this moment. Consequently the filter entry is not installed. - timeRangeActive. A time range is defined in tMacFilterParamsTimeRangeName, and is activated successfully. - timeRangeActiveDownloadFailed: A time range is defined in tMacFilterParamsTimeRangeName, and is activated, but the corresponding filter entry could not be installed due to resource problems.')
tMacFilterParamsRedirectURL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 4, 1, 30), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMacFilterParamsRedirectURL.setStatus('current')
if mibBuilder.loadTexts: tMacFilterParamsRedirectURL.setDescription("The value of tMacFilterParamsRedirectURL specifies the URL to redirect to, when the value of tMacFilterParamsAction is 'httpRedirect'.")
tMacFilterParamsIngrHitByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 4, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tMacFilterParamsIngrHitByteCount.setStatus('current')
if mibBuilder.loadTexts: tMacFilterParamsIngrHitByteCount.setDescription('The value of tMacFilterParamsIngrHitByteCount indicates the number of bytes of all ingress packets that matched this entry.')
tMacFilterParamsEgrHitByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 4, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tMacFilterParamsEgrHitByteCount.setStatus('current')
if mibBuilder.loadTexts: tMacFilterParamsEgrHitByteCount.setDescription('The value of tMacFilterParamsEgrHitByteCount indicates the number of bytes of all egress packets that matched this entry.')
tMacFilterParamsLowISID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 4, 1, 33), SvcISID().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMacFilterParamsLowISID.setStatus('current')
if mibBuilder.loadTexts: tMacFilterParamsLowISID.setDescription("The value of tMacFilterParamsLowISID specifies the lowest value of the 24 bit (0..16777215) service instance identifier for this service that matches this entry. The default value of -1 indicates no ISID matching will be performed. The value of this field can be equal to but not lower than the value of the tMacFilterParamsHighISID field. Changing the value of this field might also change the value of tMacFilterParamsHighISID: A value of -1 will change the value of tMacFilterParamsHighISID to -1. Changing the value of this field from -1 to any other value will change the value of tMacFilterParamsHighISID to this same value. Note that tMacFilterParamsLowISID and tMacFilterParamsHighISID can only be set if tMacFilterType is set to 'isid(1)'.")
tMacFilterParamsHighISID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 4, 1, 34), SvcISID().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMacFilterParamsHighISID.setStatus('current')
if mibBuilder.loadTexts: tMacFilterParamsHighISID.setDescription("The value of tMacFilterParamsHighISID specifies the highest value of the 24 bit (0..16777215) service instance identifier for this service that matches this entry. The default value of -1 indicates no ISID matching will be performed. The value of this field can be equal to but not higher than the value of the tMacFilterParamsLowISID field. Changing the value of this field might also change the value of tMacFilterParamsLowISID: A value of -1 will change the value of tMacFilterParamsLowISID to -1. Changing the value of this field from -1 to any other value will change the value of tMacFilterParamsLowISID to this same value. Note that tMacFilterParamsLowISID and tMacFilterParamsHighISID can only be set if tMacFilterType is set to 'isid(1)'.")
tMacFilterParamsInnerTagValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 4, 1, 35), QTagFullRangeOrNone().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMacFilterParamsInnerTagValue.setStatus('current')
if mibBuilder.loadTexts: tMacFilterParamsInnerTagValue.setDescription("The value of tMacFilterParamsInnerTagValue specifies the value to match against the VID of the second VLAN tag in the packet that is carried transparently through the service (the second vlan tag after the service delimiting tags). This object can only be set if tMacFilterType is set to 'vid(3)'. The (default) value of '-1' indicates no inner VLAN tag matching will be performed.")
tMacFilterParamsInnerTagMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 4, 1, 36), QTagFullRange().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)).clone(4095)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMacFilterParamsInnerTagMask.setStatus('current')
if mibBuilder.loadTexts: tMacFilterParamsInnerTagMask.setDescription("The value of tMacFilterParamsInnerTagMask is applied as a mask to VID of the inner VLAN tag of the packet prior to comparing it with tMacFilterParamsInnerTagValue. The inner tag is the second tag in the packet that is carried transparently through the service (the second tag after the service delimiting tags). This object can only be set if tMacFilterType is set to 'vid(3)'.")
tMacFilterParamsOuterTagValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 4, 1, 37), QTagFullRangeOrNone().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMacFilterParamsOuterTagValue.setStatus('current')
if mibBuilder.loadTexts: tMacFilterParamsOuterTagValue.setDescription("The value of tMacFilterParamsOuterTagValue specifies the value to match against the VID of the first VLAN tag in the packet that is carried transparently through the service (the first vlan tag after the service delimiting tags). This object can only be set if tMacFilterType is set to 'vid(3)'. The (default) value of '-1' indicates no outer VLAN tag matching will be performed.")
tMacFilterParamsOuterTagMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 4, 1, 38), QTagFullRange().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)).clone(4095)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMacFilterParamsOuterTagMask.setStatus('current')
if mibBuilder.loadTexts: tMacFilterParamsOuterTagMask.setDescription("The value of tMacFilterParamsOuterTagMask is applied as a mask to VID of the outer VLAN tag of the packet prior to comparing it with tMacFilterParamsOuterTagValue. The outer tag is the first tag in the packet that is carried transparently through the service (the first tag after the service delimiting tags). This object can only be set if tMacFilterType is set to 'vid(3)'.")
tFilterLogTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 5), )
if mibBuilder.loadTexts: tFilterLogTable.setStatus('current')
if mibBuilder.loadTexts: tFilterLogTable.setDescription('A table of all filter logs.')
tFilterLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 5, 1), ).setIndexNames((0, "TIMETRA-FILTER-MIB", "tFilterLogId"))
if mibBuilder.loadTexts: tFilterLogEntry.setStatus('current')
if mibBuilder.loadTexts: tFilterLogEntry.setDescription('Information about a particular Filter Log entry.')
tFilterLogId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 5, 1, 1), TFilterLogId())
if mibBuilder.loadTexts: tFilterLogId.setStatus('current')
if mibBuilder.loadTexts: tFilterLogId.setDescription('This is the index for the entry. An entry cannot be created with an id of 0.')
tFilterLogRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterLogRowStatus.setStatus('current')
if mibBuilder.loadTexts: tFilterLogRowStatus.setDescription('This object allows entries to be created and deleted in the tFilterLogTable.')
tFilterLogDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 5, 1, 3), TFilterLogDestination().clone('memory')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterLogDestination.setStatus('current')
if mibBuilder.loadTexts: tFilterLogDestination.setDescription('This object specifies the destination of the log.')
tFilterLogDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 5, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterLogDescription.setStatus('current')
if mibBuilder.loadTexts: tFilterLogDescription.setDescription('User-provided description for this filter log entry.')
tFilterLogMaxNumEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 5, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000)).clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterLogMaxNumEntries.setStatus('current')
if mibBuilder.loadTexts: tFilterLogMaxNumEntries.setDescription("The object tFilterLogMaxNumEntries specifies the maximum number of entries that the log can store. If tFilterLogDestination is not 'memory(1)' then the object tFilterLogMaxNumEntries maintains a value of '0', and Any change attempts will be silently discarded.")
tFilterLogSysLogId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 5, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterLogSysLogId.setStatus('current')
if mibBuilder.loadTexts: tFilterLogSysLogId.setDescription("The object tFilterLogSysLogId specifies the syslog Id to be used as destination. If tFilterLogDestination is not 'sysLog(2)' then the object tFilterLogSysLogId maintains a value of '0', and any change attempts will be silently discarded.")
tFilterLogFileId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 5, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterLogFileId.setStatus('current')
if mibBuilder.loadTexts: tFilterLogFileId.setDescription("The object tFilterLogFileId specifies the File Id to be used as destination. If tFilterLogDestination is not 'file(3)' then the object tFilterLogFileId Imaintains a value of '0', and any change attempts will be silently discarded.")
tFilterLogStopOnFull = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 5, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterLogStopOnFull.setStatus('current')
if mibBuilder.loadTexts: tFilterLogStopOnFull.setDescription('')
tFilterLogEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 5, 1, 9), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterLogEnabled.setStatus('current')
if mibBuilder.loadTexts: tFilterLogEnabled.setDescription('')
tFilterLogSummaryEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 5, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterLogSummaryEnabled.setStatus('current')
if mibBuilder.loadTexts: tFilterLogSummaryEnabled.setDescription('The value of tFilterLogSummaryEnabled specifies whether or not summarization of filter log entries is performed. Summarization is only allowed in case tFilterLogDestination is set to syslog.')
tFilterLogSummaryCrit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 5, 1, 11), TFilterLogSummaryCriterium().clone('srcAddr')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterLogSummaryCrit1.setStatus('current')
if mibBuilder.loadTexts: tFilterLogSummaryCrit1.setDescription('The value of tFilterLogSummaryCrit1 specifies how filter log entries will be summarized. This field is only meaningful if the object tFilterLogSummaryEnabled is set to true.')
tFilterLogScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 6))
tFilterLogMaxInstances = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFilterLogMaxInstances.setStatus('current')
if mibBuilder.loadTexts: tFilterLogMaxInstances.setDescription('tFilterLogMaxInstances maintains the maximum allowed instances of filter logs allowed on the system')
tFilterLogInstances = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 6, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFilterLogInstances.setStatus('current')
if mibBuilder.loadTexts: tFilterLogInstances.setDescription('tFilterLogInstances maintains the instances of filter logs presently existing on the system')
tFilterLogBindings = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 6, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFilterLogBindings.setStatus('current')
if mibBuilder.loadTexts: tFilterLogBindings.setDescription('tFilterLogBindings maintains the count of the configured filter log bindings presently existing on the system. The bindings get instantiated when the filter is instantiated')
tFilterRedirectPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 10), )
if mibBuilder.loadTexts: tFilterRedirectPolicyTable.setStatus('current')
if mibBuilder.loadTexts: tFilterRedirectPolicyTable.setDescription('Contains a List of all redirect policies configured on this system.')
tFilterRedirectPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 10, 1), ).setIndexNames((0, "TIMETRA-FILTER-MIB", "tFilterRedirectPolicy"))
if mibBuilder.loadTexts: tFilterRedirectPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: tFilterRedirectPolicyEntry.setDescription('Information about a particular redirect policy. Entries are created/deleted by user.')
tFilterRedirectPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 10, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tFilterRedirectPolicy.setStatus('current')
if mibBuilder.loadTexts: tFilterRedirectPolicy.setDescription('tFilterRedirectPolicy uniquely identifies each redirect policy configured on this system.')
tFilterRPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 10, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRPRowStatus.setStatus('current')
if mibBuilder.loadTexts: tFilterRPRowStatus.setDescription('tFilterRPRowStatus allows entries to be created and deleted in the tFilterRedirectPolicyTable.')
tFilterRPDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 10, 1, 3), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRPDescription.setStatus('current')
if mibBuilder.loadTexts: tFilterRPDescription.setDescription('User-provided description for this redirect policy is maintained in the object tFilterRPDescription.')
tFilterRPAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 10, 1, 4), TmnxAdminState().clone('inService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRPAdminState.setStatus('current')
if mibBuilder.loadTexts: tFilterRPAdminState.setDescription("tFilterRPAdminState holds the admin state of the policy. If the admin state is 'outOfService', the tests will not be conducted.")
tFilterRPActiveDest = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 10, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFilterRPActiveDest.setStatus('current')
if mibBuilder.loadTexts: tFilterRPActiveDest.setDescription('tFilterRPActiveDest indicates the IP address of the active destination. A value of 0 indicates that there is currently no active destination.')
tFilterRedirectDestTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 11), )
if mibBuilder.loadTexts: tFilterRedirectDestTable.setStatus('current')
if mibBuilder.loadTexts: tFilterRedirectDestTable.setDescription('Contains a List of all redirect destinations configured on this system.')
tFilterRedirectDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 11, 1), ).setIndexNames((0, "TIMETRA-FILTER-MIB", "tFilterRedirectPolicy"), (0, "TIMETRA-FILTER-MIB", "tFilterRedirectDest"))
if mibBuilder.loadTexts: tFilterRedirectDestEntry.setStatus('current')
if mibBuilder.loadTexts: tFilterRedirectDestEntry.setDescription('Information about a particular Redirect destination. Entries are created/deleted by user.')
tFilterRedirectDest = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 11, 1, 1), IpAddress())
if mibBuilder.loadTexts: tFilterRedirectDest.setStatus('current')
if mibBuilder.loadTexts: tFilterRedirectDest.setDescription('tFilterRedirectDest holds the IP address of the destination entry.')
tFilterRDRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 11, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRDRowStatus.setStatus('current')
if mibBuilder.loadTexts: tFilterRDRowStatus.setDescription('tFilterRDRowStatus allows entries to be created and deleted in the tFilterRedirectDestTable.')
tFilterRDDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 11, 1, 3), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRDDescription.setStatus('current')
if mibBuilder.loadTexts: tFilterRDDescription.setDescription('User-provided description for this destination is maintained in the object tFilterRDDescription.')
tFilterRDAdminPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRDAdminPriority.setStatus('current')
if mibBuilder.loadTexts: tFilterRDAdminPriority.setDescription('tFilterRDAdminPriority holds the configured base priority for the destination.')
tFilterRDOperPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFilterRDOperPriority.setStatus('current')
if mibBuilder.loadTexts: tFilterRDOperPriority.setDescription("tFilterRDAdminPriority maintains the operational value of the priority for this destination. The highest operational priority across multiple destinations is used as the preferred destination. A value of '0' is maintained if the destination if tFilterRDOperState is 'outOfService'.")
tFilterRDAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 11, 1, 6), TmnxAdminState().clone('inService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRDAdminState.setStatus('current')
if mibBuilder.loadTexts: tFilterRDAdminState.setDescription("tFilterRDAdminState maintains the configured state of the destination. If the admin state is 'outOfService', the tests for this destination will not be conducted.")
tFilterRDOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 11, 1, 7), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFilterRDOperState.setStatus('current')
if mibBuilder.loadTexts: tFilterRDOperState.setDescription('The value of tFilterRDOperState indicates the operational state of the destination.')
tFilterRedirectSNMPTestTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 12), )
if mibBuilder.loadTexts: tFilterRedirectSNMPTestTable.setStatus('current')
if mibBuilder.loadTexts: tFilterRedirectSNMPTestTable.setDescription('Contains a List of all redirect SNMP tests configured on this system.')
tFilterRedirectSNMPTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 12, 1), ).setIndexNames((0, "TIMETRA-FILTER-MIB", "tFilterRedirectPolicy"), (0, "TIMETRA-FILTER-MIB", "tFilterRedirectDest"), (0, "TIMETRA-FILTER-MIB", "tFilterRedirectSNMPTest"))
if mibBuilder.loadTexts: tFilterRedirectSNMPTestEntry.setStatus('current')
if mibBuilder.loadTexts: tFilterRedirectSNMPTestEntry.setDescription('Information about a specific SNMP test configured for a destination. Entries are created/deleted by user.')
tFilterRedirectSNMPTest = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 12, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tFilterRedirectSNMPTest.setStatus('current')
if mibBuilder.loadTexts: tFilterRedirectSNMPTest.setDescription('tFilterRedirectSNMPTest specifies the name of the SNMP test.')
tFilterRSTRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 12, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRSTRowStatus.setStatus('current')
if mibBuilder.loadTexts: tFilterRSTRowStatus.setDescription('tFilterRSTRowStatus allows tests to be created and deleted in the tFilterRedirectSNMPTestTable.')
tFilterRSTOID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 12, 1, 3), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRSTOID.setStatus('current')
if mibBuilder.loadTexts: tFilterRSTOID.setDescription('tFilterRSTOID stores the OID of the object to be fetched from the destination. The value of this object can only be changed if the object tFilterRSTCommunity is changed at the same time.')
tFilterRSTCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 12, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRSTCommunity.setStatus('current')
if mibBuilder.loadTexts: tFilterRSTCommunity.setDescription("The value of tFilterRSTCommunity is the SNMPv1 or SNMPv2c Community String or the SNMPv3 Context Name used to conduct this SNMP test as described in RFC2571 and RFC2737. When the value of tFilterRSTSNMPVersion is 'snmpv1' or 'snmpv2c' this object represents a community string. When the value of tFilterRSTSNMPVersion is 'snmpv3' this object represents a SNMPv3 context name. The value of this object can only be changed if the object tFilterRSTOID is changed at the same time.")
tFilterRSTSNMPVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("snmpv1", 1), ("snmpv2c", 2), ("snmpv3", 3))).clone('snmpv2c')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRSTSNMPVersion.setStatus('current')
if mibBuilder.loadTexts: tFilterRSTSNMPVersion.setDescription('tFilterRSTSNMPVersion specifies the SNMP PDU format to be used while conducting the test.')
tFilterRSTInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 12, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(1)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRSTInterval.setStatus('current')
if mibBuilder.loadTexts: tFilterRSTInterval.setDescription('The value of tFilterRSTInterval specifies the amount of time in seconds between consecutive requests sent to the far end host.')
tFilterRSTTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 12, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(1)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRSTTimeout.setStatus('current')
if mibBuilder.loadTexts: tFilterRSTTimeout.setDescription('The value of tFilterRSTTimeout specifies the amount of time in seconds that is allowed for receiving a response from the far end host. If a reply is not received within this time the far end host is considered unresponsive.')
tFilterRSTDropCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 12, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRSTDropCount.setStatus('current')
if mibBuilder.loadTexts: tFilterRSTDropCount.setDescription('The value of tFilterRSTDropCount specifies the number of consecutive requests that must fail for the destination to declared unreachable.')
tFilterRSTHoldDown = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 12, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRSTHoldDown.setStatus('current')
if mibBuilder.loadTexts: tFilterRSTHoldDown.setDescription('The value of tFilterRSTHoldDown specifies the amount of time in seconds that the system should be held down if any of the test has marked it unreachable.')
tFilterRSTHoldDownRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 12, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tFilterRSTHoldDownRemain.setStatus('current')
if mibBuilder.loadTexts: tFilterRSTHoldDownRemain.setDescription('The value of tFilterRSTHoldDownRemain indicates the amount of time in seconds that the system will remain in held down state before being used again.')
tFilterRSTLastActionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 12, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFilterRSTLastActionTime.setStatus('current')
if mibBuilder.loadTexts: tFilterRSTLastActionTime.setDescription('tFilterRSTLastActionTime maintains the time stamp when this test received a response for a probe sent out.')
tFilterRSTLastOID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 12, 1, 12), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFilterRSTLastOID.setStatus('current')
if mibBuilder.loadTexts: tFilterRSTLastOID.setDescription('The object tFilterRSTLastOID holds the OID received in the response.')
tFilterRSTLastType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 12, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 0), ("counter32", 1), ("unsigned32", 2), ("timeTicks", 3), ("integer32", 4), ("ipAddress", 5), ("octetString", 6), ("objectId", 7), ("counter64", 8), ("opaque", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFilterRSTLastType.setStatus('current')
if mibBuilder.loadTexts: tFilterRSTLastType.setDescription('tFilterRSTLastType maintains the type of the value received. A value of none(0) indicated that no value has been received')
tFilterRSTLastCounter32Val = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 12, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFilterRSTLastCounter32Val.setStatus('current')
if mibBuilder.loadTexts: tFilterRSTLastCounter32Val.setDescription("The value tFilterRSTLastType is 'counter32'.")
tFilterRSTLastUnsigned32Val = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 12, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFilterRSTLastUnsigned32Val.setStatus('current')
if mibBuilder.loadTexts: tFilterRSTLastUnsigned32Val.setDescription("The value tFilterRSTLastType is 'unsigned32'.")
tFilterRSTLastTimeTicksVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 12, 1, 16), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFilterRSTLastTimeTicksVal.setStatus('current')
if mibBuilder.loadTexts: tFilterRSTLastTimeTicksVal.setDescription("The value tFilterRSTLastType is 'timeTicks'.")
tFilterRSTLastInt32Val = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 12, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFilterRSTLastInt32Val.setStatus('current')
if mibBuilder.loadTexts: tFilterRSTLastInt32Val.setDescription("The value tFilterRSTLastType is 'integer32'.")
tFilterRSTLastOctetStringVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 12, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFilterRSTLastOctetStringVal.setStatus('current')
if mibBuilder.loadTexts: tFilterRSTLastOctetStringVal.setDescription("The value tFilterRSTLastType is 'octetString'.")
tFilterRSTLastIpAddressVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 12, 1, 19), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFilterRSTLastIpAddressVal.setStatus('current')
if mibBuilder.loadTexts: tFilterRSTLastIpAddressVal.setDescription("The value tFilterRSTLastType is 'ipAddress'. Although this seems to be unfriendly for IPv6, we have to recognize that there are a number of older MIBs that do contain an IPv4 format address, known as IpAddress. IPv6 addresses are represented using TAddress or InetAddress, and so the underlying datatype is OCTET STRING, and their value would be stored in the tFilterRSTLastOctetStringVal column.")
tFilterRSTLastOidVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 12, 1, 20), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFilterRSTLastOidVal.setStatus('current')
if mibBuilder.loadTexts: tFilterRSTLastOidVal.setDescription("The value tFilterRSTLastType is 'objectId'.")
tFilterRSTLastCounter64Val = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 12, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFilterRSTLastCounter64Val.setStatus('current')
if mibBuilder.loadTexts: tFilterRSTLastCounter64Val.setDescription("The value tFilterRSTLastType is 'counter64'.")
tFilterRSTLastOpaqueVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 12, 1, 22), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFilterRSTLastOpaqueVal.setStatus('current')
if mibBuilder.loadTexts: tFilterRSTLastOpaqueVal.setDescription("The value tFilterRSTLastType is 'opaque'.")
tFilterRSTLastAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 12, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFilterRSTLastAction.setStatus('current')
if mibBuilder.loadTexts: tFilterRSTLastAction.setDescription("tFilterRSTLastAction maintains impact that the last test probe made on the operational status of the destination as maintained in tFilterRDOperState. If the last action was 'disable', the destination may not be used for tFilterRSTHoldDown seconds.")
tFilterRSTLastPrioChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 12, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-255, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFilterRSTLastPrioChange.setStatus('current')
if mibBuilder.loadTexts: tFilterRSTLastPrioChange.setDescription("If the last action on the operational state of the destination i.e. tFilterRSTLastAction is 'enable', tFilterRSTLastPrioChange maintains the impact that the last test probe made on the operational priority of the destination. In other cases, this object has no significance and hence should be holding the value '0'.")
tFilterRSTNextRespIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 12, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 2147483647), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFilterRSTNextRespIndex.setStatus('current')
if mibBuilder.loadTexts: tFilterRSTNextRespIndex.setDescription("The value of tFilterRSTNextRespIndex indicates the next response index to be used while creating a row in the tFilterRedirectSNMPRespTable. The value of '-1' means that the maximum number of return values for this OID are already configured.")
tFilterRedirectSNMPRespTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 13), )
if mibBuilder.loadTexts: tFilterRedirectSNMPRespTable.setStatus('current')
if mibBuilder.loadTexts: tFilterRedirectSNMPRespTable.setDescription('Each row in this table holds the effect of the test on the destination for a specific return value. Each row is created once and cannot be modified after creation. Any change attempts will be silently discarded.')
tFilterRedirectSNMPRespEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 13, 1), ).setIndexNames((0, "TIMETRA-FILTER-MIB", "tFilterRedirectPolicy"), (0, "TIMETRA-FILTER-MIB", "tFilterRedirectDest"), (0, "TIMETRA-FILTER-MIB", "tFilterRedirectSNMPTest"), (0, "TIMETRA-FILTER-MIB", "tFilterRSTRespId"))
if mibBuilder.loadTexts: tFilterRedirectSNMPRespEntry.setStatus('current')
if mibBuilder.loadTexts: tFilterRedirectSNMPRespEntry.setDescription('Information about action to be taken for a specific destination when a specific response is received. Each row is created once and cannot be modified after creation. Any change attempts will be silently discarded.')
tFilterRSTRespId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: tFilterRSTRespId.setStatus('current')
if mibBuilder.loadTexts: tFilterRSTRespId.setDescription('tFilterRSTRespId holds the response value received from the destination.')
tFilterRSTRespRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 13, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRSTRespRowStatus.setStatus('current')
if mibBuilder.loadTexts: tFilterRSTRespRowStatus.setDescription('This object allows response strings to be specified for a specific test and the change it will cause to the priority of the destination.')
tFilterRSTRespAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("increase", 1), ("decrease", 2), ("disable", 3))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRSTRespAction.setStatus('current')
if mibBuilder.loadTexts: tFilterRSTRespAction.setDescription("tFilterRSTRespAction specifies the type of change that should be made to the destination priority tFilterRDOperPriority, if the return value is same as tFilterRSTRespId. If tFilterRSTRespPrioChange is 0 this field will be set to 'disable'. This field cannot be modified after creation. Any change attempts will be silently discarded.")
tFilterRSTRespPrioChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 13, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRSTRespPrioChange.setStatus('current')
if mibBuilder.loadTexts: tFilterRSTRespPrioChange.setDescription("tFilterRSTRespPrioChange specifies the amount of change to be made to the priority of the destination if the tFilterRSTRespAction is either 'increase' or 'decrease'. If tFilterRSTRespAction is 'disable', this field will be set to 0. This field cannot be modified after creation. Any change attempts will be silently discarded.")
tFilterRSTRespOID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 13, 1, 5), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRSTRespOID.setStatus('current')
if mibBuilder.loadTexts: tFilterRSTRespOID.setDescription('The object tFilterRSTRespOID holds the OID to be received in the response. This field cannot be modified after creation. Any change attempts will be silently discarded.')
tFilterRSTRespType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("counter32", 1), ("unsigned32", 2), ("timeTicks", 3), ("integer32", 4), ("ipAddress", 5), ("octetString", 6), ("objectId", 7), ("counter64", 8), ("opaque", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRSTRespType.setStatus('current')
if mibBuilder.loadTexts: tFilterRSTRespType.setDescription("tFilterRSTRespType maintains the type of the value to be received. Note: types 'objectId' and 'counter64' are not supported for now, and will be rejected when used. This field cannot be modified after creation. Any change attempts will be silently discarded.")
tFilterRSTCounter32Val = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 13, 1, 7), Counter32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRSTCounter32Val.setStatus('current')
if mibBuilder.loadTexts: tFilterRSTCounter32Val.setDescription("The value tFilterRSTRespType is 'counter32'. This field cannot be modified after creation. Any change attempts will be silently discarded.")
tFilterRSTUnsigned32Val = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 13, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRSTUnsigned32Val.setStatus('current')
if mibBuilder.loadTexts: tFilterRSTUnsigned32Val.setDescription("The value tFilterRSTRespType is 'unsigned32'. This field cannot be modified after creation. Any change attempts will be silently discarded.")
tFilterRSTTimeTicksVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 13, 1, 9), TimeTicks()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRSTTimeTicksVal.setStatus('current')
if mibBuilder.loadTexts: tFilterRSTTimeTicksVal.setDescription("The value tFilterRSTRespType is 'timeTicks'. This field cannot be modified after creation. Any change attempts will be silently discarded.")
tFilterRSTInt32Val = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 13, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRSTInt32Val.setStatus('current')
if mibBuilder.loadTexts: tFilterRSTInt32Val.setDescription("The value tFilterRSTRespType is 'integer32'. This field cannot be modified after creation. Any change attempts will be silently discarded.")
tFilterRSTOctetStringVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 13, 1, 11), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRSTOctetStringVal.setStatus('current')
if mibBuilder.loadTexts: tFilterRSTOctetStringVal.setDescription("The value tFilterRSTRespType is 'octetString'. This field cannot be modified after creation. Any change attempts will be silently discarded.")
tFilterRSTIpAddressVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 13, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRSTIpAddressVal.setStatus('current')
if mibBuilder.loadTexts: tFilterRSTIpAddressVal.setDescription("The value tFilterRSTRespType is 'ipAddress'. Although this seems to be unfriendly for IPv6, we have to recognize that there are a number of older MIBs that do contain an IPv4 format address, known as IpAddress. IPv6 addresses are represented using TAddress or InetAddress, and so the underlying datatype is OCTET STRING, and their value would be stored in the tFilterRSTOctetStringVal column. This field cannot be modified after creation. Any change attempts will be silently discarded.")
tFilterRSTOidVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 13, 1, 13), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRSTOidVal.setStatus('current')
if mibBuilder.loadTexts: tFilterRSTOidVal.setDescription("The response value if tFilterRSTRespType is set to 'objectId'. This field cannot be modified after creation. Any change attempts will be silently discarded.")
tFilterRSTCounter64Val = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 13, 1, 14), Counter64()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRSTCounter64Val.setStatus('current')
if mibBuilder.loadTexts: tFilterRSTCounter64Val.setDescription("The response value if tFilterRSTRespType is set to 'counter64'. This field cannot be modified after creation. Any change attempts will be silently discarded.")
tFilterRSTOpaqueVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 13, 1, 15), Opaque()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRSTOpaqueVal.setStatus('current')
if mibBuilder.loadTexts: tFilterRSTOpaqueVal.setDescription("The value tFilterRSTRespType is 'opaque'. This field cannot be modified after creation. Any change attempts will be silently discarded.")
tFilterRedirectURLTestTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 14), )
if mibBuilder.loadTexts: tFilterRedirectURLTestTable.setStatus('current')
if mibBuilder.loadTexts: tFilterRedirectURLTestTable.setDescription('Contains a List of all redirect snmp tests configured on this system.')
tFilterRedirectURLTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 14, 1), ).setIndexNames((0, "TIMETRA-FILTER-MIB", "tFilterRedirectPolicy"), (0, "TIMETRA-FILTER-MIB", "tFilterRedirectDest"), (0, "TIMETRA-FILTER-MIB", "tFilterRedirectURLTest"))
if mibBuilder.loadTexts: tFilterRedirectURLTestEntry.setStatus('current')
if mibBuilder.loadTexts: tFilterRedirectURLTestEntry.setDescription('Information about a specific URL test configured for a destination. Entries are created/deleted by user. Entries have a presumed StorageType of nonVolatile.')
tFilterRedirectURLTest = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 14, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tFilterRedirectURLTest.setStatus('current')
if mibBuilder.loadTexts: tFilterRedirectURLTest.setDescription('tFilterRedirectURLTest holds the name of the URL test.')
tFilterRUTRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 14, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRUTRowStatus.setStatus('current')
if mibBuilder.loadTexts: tFilterRUTRowStatus.setDescription('tFilterRUTRowStatus allows tests to be created and deleted in the tFilterRedirectURLTestTable.')
tFilterRUTURL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 14, 1, 3), DisplayString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRUTURL.setStatus('current')
if mibBuilder.loadTexts: tFilterRUTURL.setDescription('This object holds the URL to be probed.')
tFilterRUTHTTPVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 14, 1, 4), DisplayString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRUTHTTPVersion.setStatus('current')
if mibBuilder.loadTexts: tFilterRUTHTTPVersion.setDescription('The HTTP Version to be used while performing the URL test. The system by default uses HTTP Version 1.1 until explicitly specified.')
tFilterRUTInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 14, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(1)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRUTInterval.setStatus('current')
if mibBuilder.loadTexts: tFilterRUTInterval.setDescription('The value of tFilterRUTInterval specifies the amount of time in seconds between consecutive requests sent to the far end host.')
tFilterRUTTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 14, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(1)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRUTTimeout.setStatus('current')
if mibBuilder.loadTexts: tFilterRUTTimeout.setDescription('The value of tFilterRUTTimeout specifies the amount of time in seconds that is allowed for receiving a response from the far end host. If a reply is not received within this time the far end host is considered unresponsive.')
tFilterRUTDropCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 14, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRUTDropCount.setStatus('current')
if mibBuilder.loadTexts: tFilterRUTDropCount.setDescription('The value of tFilterRUTDropCount specifies the number of consecutive requests that must fail for the destination to declared unreachable.')
tFilterRUTHoldDown = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 14, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRUTHoldDown.setStatus('current')
if mibBuilder.loadTexts: tFilterRUTHoldDown.setDescription('The value of tFilterRUTHoldDown specifies the amount of time in seconds that the system should be held down if any of the test has marked it unreachable.')
tFilterRUTHoldDownRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 14, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tFilterRUTHoldDownRemain.setStatus('current')
if mibBuilder.loadTexts: tFilterRUTHoldDownRemain.setDescription('The value of tFilterRUTHoldDownRemain indicates the amount of time in seconds that the system will remain in held down state before being used again.')
tFilterRUTLastActionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 14, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFilterRUTLastActionTime.setStatus('current')
if mibBuilder.loadTexts: tFilterRUTLastActionTime.setDescription('tFilterRUTLastActionTime maintains the time stamp when this test received a response for a probe sent out.')
tFilterRUTLastRetCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 14, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFilterRUTLastRetCode.setStatus('current')
if mibBuilder.loadTexts: tFilterRUTLastRetCode.setDescription('tFilterRUTLastRetCode holds the return code received in the last response.')
tFilterRUTLastAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 14, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFilterRUTLastAction.setStatus('current')
if mibBuilder.loadTexts: tFilterRUTLastAction.setDescription("tFilterRUTLastAction maintains impact that the last test probe made on the operational status of the destination as maintained in tFilterRDOperState. If the last action was 'disable', the destination may not be used for tFilterRUTHoldDown seconds.")
tFilterRUTLastPrioChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 14, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-255, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFilterRUTLastPrioChange.setStatus('current')
if mibBuilder.loadTexts: tFilterRUTLastPrioChange.setDescription("If the last action on the operational state of the destination i.e. tFilterRUTLastAction is 'enable', tFilterRUTLastPrioChange maintains the impact that the last test probe made on the operational priority of the destination. In other cases, this object has no significance and hence should be holding the value '0'.")
tFilterRedirectURLRespTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 15), )
if mibBuilder.loadTexts: tFilterRedirectURLRespTable.setStatus('current')
if mibBuilder.loadTexts: tFilterRedirectURLRespTable.setDescription('Each row in this table holds the effect of the test on the destination for a range of return values.')
tFilterRedirectURLRespEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 15, 1), ).setIndexNames((0, "TIMETRA-FILTER-MIB", "tFilterRedirectPolicy"), (0, "TIMETRA-FILTER-MIB", "tFilterRedirectDest"), (0, "TIMETRA-FILTER-MIB", "tFilterRedirectURLTest"), (0, "TIMETRA-FILTER-MIB", "tFilterRedirectURLLowRespCode"), (0, "TIMETRA-FILTER-MIB", "tFilterRedirectURLHighRespCode"))
if mibBuilder.loadTexts: tFilterRedirectURLRespEntry.setStatus('current')
if mibBuilder.loadTexts: tFilterRedirectURLRespEntry.setDescription('Information about action to be taken for a specific destination when a return value within the range specified between tFilterRedirectURLLowRespCode and tFilterRedirectURLHighRespCode is received.')
tFilterRedirectURLLowRespCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 15, 1, 1), Unsigned32())
if mibBuilder.loadTexts: tFilterRedirectURLLowRespCode.setStatus('current')
if mibBuilder.loadTexts: tFilterRedirectURLLowRespCode.setDescription('tFilterRedirectURLLowRespCode specifies the lower return code of the range specified by this entry.')
tFilterRedirectURLHighRespCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 15, 1, 2), Unsigned32())
if mibBuilder.loadTexts: tFilterRedirectURLHighRespCode.setStatus('current')
if mibBuilder.loadTexts: tFilterRedirectURLHighRespCode.setDescription('tFilterRedirectURLHighRespCode specifies the higher return code of the range specified by this entry.')
tFilterRUTRespRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 15, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRUTRespRowStatus.setStatus('current')
if mibBuilder.loadTexts: tFilterRUTRespRowStatus.setDescription('tFilterRUTRespRowStatus allows the mapping of a range of return codes returned from a specific test to the change it will cause to the priority of the destination.')
tFilterRUTRespAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("increase", 1), ("decrease", 2), ("disable", 3))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRUTRespAction.setStatus('current')
if mibBuilder.loadTexts: tFilterRUTRespAction.setDescription("If the tFilterRUTRespAction is either 'increase(1)' or 'decrease(2)' tFilterRUTRespPrioChange specifies the offset to be applied to the destination base priority (tFilterRDAdminPriority) in order to compute the tFilterRDOperPriority as a result of this test. If the tFilterRUTRespAction is set to 'disable(3)', on the reception of the specified response, the destination will be deemed unusable and the tFilterRDOperPriority will be set to '0'. The value of tFilterRUTRespAction will be forced by the system to the value 'disable(3)' if the tFilterRUTRespPrioChange has the value '0'. Any change attempts will be silently discarded in this case.")
tFilterRUTRespPrioChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 15, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRUTRespPrioChange.setStatus('current')
if mibBuilder.loadTexts: tFilterRUTRespPrioChange.setDescription("tFilterRUTRespPrioChange specifies the amount of change to be made to the priority of the destination if the tFilterRUTRespAction is either 'increase' or 'decrease'. If tFilterRUTRespAction is 'disable', tFilterRUTRespPrioChange will be forced to 0. Any change to tFilterRUTRespPrioChange will be silently discarded in this case. Setting the object tFilterRUTRespPrioChange to 0 will cause the value of tFilterRUTRespAction to be set to 'disable'.")
tFilterRedirectPingTestTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 16), )
if mibBuilder.loadTexts: tFilterRedirectPingTestTable.setStatus('current')
if mibBuilder.loadTexts: tFilterRedirectPingTestTable.setDescription('Contains a List of all redirect Ping tests configured on this system.')
tFilterRedirectPingTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 16, 1), ).setIndexNames((0, "TIMETRA-FILTER-MIB", "tFilterRedirectPolicy"), (0, "TIMETRA-FILTER-MIB", "tFilterRedirectDest"))
if mibBuilder.loadTexts: tFilterRedirectPingTestEntry.setStatus('current')
if mibBuilder.loadTexts: tFilterRedirectPingTestEntry.setDescription('Information about a specific Ping test configured for a destination. Entries are created/deleted by user. Entries have a presumed StorageType of nonVolatile.')
tFilterRPTRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 16, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRPTRowStatus.setStatus('current')
if mibBuilder.loadTexts: tFilterRPTRowStatus.setDescription('This object allows tests to be created and deleted in the tFilterRedirectPingTestTable.')
tFilterRPTInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 16, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(1)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRPTInterval.setStatus('current')
if mibBuilder.loadTexts: tFilterRPTInterval.setDescription('The value of tFilterRPTInterval specifies the amount of time in seconds between consecutive requests sent to the far end host.')
tFilterRPTTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 16, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(1)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRPTTimeout.setStatus('current')
if mibBuilder.loadTexts: tFilterRPTTimeout.setDescription('The value of tFilterRPTTimeout specifies the amount of time in seconds that is allowed for receiving a response from the far end host. If a reply is not received within this time the far end host is considered unresponsive.')
tFilterRPTDropCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 16, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRPTDropCount.setStatus('current')
if mibBuilder.loadTexts: tFilterRPTDropCount.setDescription('The value of tFilterRPTDropCount specifies the number of consecutive requests that must fail for the destination to declared unreachable.')
tFilterRPTHoldDown = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 16, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterRPTHoldDown.setStatus('current')
if mibBuilder.loadTexts: tFilterRPTHoldDown.setDescription('The value of tFilterRPTHoldDown specifies the amount of time in seconds that the system should be held down if any of the test has marked it unreachable.')
tFilterRPTHoldDownRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 16, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tFilterRPTHoldDownRemain.setStatus('current')
if mibBuilder.loadTexts: tFilterRPTHoldDownRemain.setDescription('The value of tFilterRPTHoldDownRemain indicates the amount of time in seconds that the system will remain in held down state before being used again.')
tFilterRPTLastActionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 16, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFilterRPTLastActionTime.setStatus('current')
if mibBuilder.loadTexts: tFilterRPTLastActionTime.setDescription('tFilterRPTLastActionTime maintains the time stamp when this test received a response for a probe sent out.')
tFilterRPTLastAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 16, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFilterRPTLastAction.setStatus('current')
if mibBuilder.loadTexts: tFilterRPTLastAction.setDescription("tFilterRPTLastAction maintains impact that the last test probe made on the operational status of the destination as maintained in tFilterRDOperState. If the last action was 'disable', the destination may not be used for tFilterRPTHoldDown seconds.")
tAutoIPFilterEntryTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 17), )
if mibBuilder.loadTexts: tAutoIPFilterEntryTable.setStatus('obsolete')
if mibBuilder.loadTexts: tAutoIPFilterEntryTable.setDescription('Defines the Alcatel-Lucent SROS series automatic IP filters for providing, via SNMP, the capability of gathering information regarding the same. tAutoIPFilterEntryTable holds a list of all automatic filter entries being used for filtering. This table is obsoleted in release 3.0.')
tAutoIPFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 17, 1), ).setIndexNames((0, "TIMETRA-FILTER-MIB", "tAutoIPFilterId"), (0, "TIMETRA-FILTER-MIB", "tAutoIPFilterEntrySourceIpAddr"))
if mibBuilder.loadTexts: tAutoIPFilterEntry.setStatus('obsolete')
if mibBuilder.loadTexts: tAutoIPFilterEntry.setDescription('Defines an entry in the tAutoIPFilterEntryTable. Entries are created and deleted in this table by the system. Each entry provides information about a single active automatic filter entry. This entry is obsoleted in release 3.0.')
tAutoIPFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 17, 1, 1), TFilterID().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: tAutoIPFilterId.setStatus('obsolete')
if mibBuilder.loadTexts: tAutoIPFilterId.setDescription('tAutoIPFilterId serves as a primary index and uniquely identifies an application point such as a routed interface or a SAP. This object is obsoleted in release 3.0.')
tAutoIPFilterEntrySourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 17, 1, 2), IpAddress())
if mibBuilder.loadTexts: tAutoIPFilterEntrySourceIpAddr.setStatus('obsolete')
if mibBuilder.loadTexts: tAutoIPFilterEntrySourceIpAddr.setDescription('tAutoIPFilterEntrySourceIpAddr specifies the source ip-address and also serves as the secondary index to this table. This object is obsoleted in release 3.0.')
tAutoIPFilterEntrySourceIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 17, 1, 3), IpAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAutoIPFilterEntrySourceIpMask.setStatus('obsolete')
if mibBuilder.loadTexts: tAutoIPFilterEntrySourceIpMask.setDescription('The value of tAutoIPFilterEntrySourceIpMask indicates the number of bits to be matched in the source ip-address. This object is obsoleted in release 3.0.')
tFilterDomainLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 9, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFilterDomainLastChanged.setStatus('current')
if mibBuilder.loadTexts: tFilterDomainLastChanged.setDescription('timestamp of last change to tFilterObjects.')
tIPv6FilterTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 18), )
if mibBuilder.loadTexts: tIPv6FilterTable.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterTable.setDescription('Contains a List of all IPv6 filters configured on this system.')
tIPv6FilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 18, 1), ).setIndexNames((0, "TIMETRA-FILTER-MIB", "tIPv6FilterId"))
if mibBuilder.loadTexts: tIPv6FilterEntry.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterEntry.setDescription('Information about a particular IPv6 Filter entry. Entries are created/deleted by user. Entries have a presumed StorageType of nonVolatile.')
tIPv6FilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 18, 1, 1), TIPFilterID().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: tIPv6FilterId.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterId.setDescription('The value of the object tIPv6FilterId uniquely identifies a IPv6 filter on this system.')
tIPv6FilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 18, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterRowStatus.setDescription('The value of the object tIPv6FilterRowStatus specifies the status of the IPv6 filter. The object allows entries to be created and deleted in the tIPv6FilterTable.')
tIPv6FilterScope = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 18, 1, 3), TItemScope().clone('template')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterScope.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterScope.setDescription('The value of the object tIPv6FilterScope specifies the scope of this filter definition. If defined as exclusive(1), this filter can be instantiated only once as compared to the multiple instances that the filter can have if defined as template(2).')
tIPv6FilterDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 18, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterDescription.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterDescription.setDescription('The value of the object tIPv6FilterDescription specifies a user-provided description for this filter.')
tIPv6FilterDefaultAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 18, 1, 5), TFilterAction().clone('drop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterDefaultAction.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterDefaultAction.setDescription('The value of the object tIPv6FilterDefaultAction specifies the action to be taken for packets that do not match any of the filter entries. The only allowed values for this field are drop(1) and forward(2).')
tIPv6FilterRadiusInsertPt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 18, 1, 6), TEntryIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterRadiusInsertPt.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterRadiusInsertPt.setDescription('The value of tIPv6FilterRadiusInsertPt specifies at what place the filter entries received from Radius will be inserted in the filter. No regular entries, nor Credit Control provided entries can be configured in this range. The value 0 means that no Radius provided filter entries can be inserted in the filter. If tIPv6FilterRadiusInsertSize is set to 0, then this object will be put to 0 as well. Any change attempts will be silently discarded in this case.')
tIPv6FilterRadiusInsertSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 18, 1, 7), TEntryIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterRadiusInsertSize.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterRadiusInsertSize.setDescription('The value of tIPv6FilterRadiusInsertSize specifies how many filter entries received from Radius for subscriber hosts can be inserted in the filter. If tIPv6FilterRadiusInsertPt is set to 0, then this object will be put to 0 as well. Any change attempts will be silently discarded in this case.')
tIPv6FilterCreditCntrlInsertPt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 18, 1, 8), TEntryIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterCreditCntrlInsertPt.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterCreditCntrlInsertPt.setDescription('The value of tIPv6FilterCreditCntrlInsertPt specifies at what place the filter entries received from Credit Control for a particular subscriber host will be inserted in the filter. No regular entries, nor Radius provided entries can be configured in this range. The value 0 means that no Credit Control provided filter entries can be inserted in the filter. If tIPv6FilterCreditCntrlInsertSize is set to 0, then this object will be put to 0 as well. Any change attempts will be silently discarded in this case.')
tIPv6FilterCreditCntrlInsertSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 18, 1, 9), TEntryIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterCreditCntrlInsertSize.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterCreditCntrlInsertSize.setDescription('The value of tIPv6FilterCreditCntrlInsertSize specifies how many filter entries received from Credit Control can be inserted in the filter. If tIPv6FilterCreditCntrlInsertPt is set to 0, then this object will be put to 0 as well. Any change attempts will be silently discarded in this case.')
tIPv6FilterSubInsertHighWmark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 18, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(95)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterSubInsertHighWmark.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterSubInsertHighWmark.setDescription('The value of the object tIPv6FilterSubInsertHighWmark specifies the utilization of the filter ranges for filter entry insertion, at which a table full alarm will be raised by the agent. The value 0 indicates that no alarm will be generated.')
tIPv6FilterSubInsertLowWmark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 18, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterSubInsertLowWmark.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterSubInsertLowWmark.setDescription('The value of the object tIPv6FilterSubInsertLowWmark specifies the utilization of the filter ranges for filter entry insertion, at which a table full alarm will be cleared by the agent.')
tIpv6FilterCreditCntrlNbrInsertd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 18, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tIpv6FilterCreditCntrlNbrInsertd.setStatus('current')
if mibBuilder.loadTexts: tIpv6FilterCreditCntrlNbrInsertd.setDescription('The value of the object tIpv6FilterCreditCntrlNbrInsertd indicates how many filter entries are currently inserted in the filter on request the credit control application.')
tIpv6FilterRadiusNbrInsertd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 18, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tIpv6FilterRadiusNbrInsertd.setStatus('current')
if mibBuilder.loadTexts: tIpv6FilterRadiusNbrInsertd.setDescription('The value of the object tIpv6FilterRadiusNbrInsertd indicates how many filter entries are currently inserted in the filter on request the RADIUS application.')
tIpv6FilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 18, 1, 14), TLNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIpv6FilterName.setStatus('current')
if mibBuilder.loadTexts: tIpv6FilterName.setDescription('The value of tIpv6FilterName specifies the name to associate with this filter.')
tIPv6FilterParamsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19), )
if mibBuilder.loadTexts: tIPv6FilterParamsTable.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsTable.setDescription('A table of all IPv6 filter match entries for all IPv6 filters.')
tIPv6FilterParamsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1), ).setIndexNames((0, "TIMETRA-FILTER-MIB", "tIPv6FilterId"), (0, "TIMETRA-FILTER-MIB", "tIPv6FilterParamsIndex"))
if mibBuilder.loadTexts: tIPv6FilterParamsEntry.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsEntry.setDescription('Information about a particular IPv6 Filter entry. Every IPv6 Filter can have zero or more IPv6 Filter match entries. a filter entry with no match criteria set will match every packet, and the entry action will be taken. Entries are created/deleted by user. There is no StorageType object, entries have a presumed StorageType of nonVolatile.')
tIPv6FilterParamsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 1), TEntryId())
if mibBuilder.loadTexts: tIPv6FilterParamsIndex.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsIndex.setDescription('This is the secondary index for the entry. Every IPv6 filter can have multiple entries, therefore every IPv6 filter entry is identified by the tIPv6FilterId and tIPv6FilterParamsIndex.')
tIPv6FilterParamsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterParamsRowStatus.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsRowStatus.setDescription('This object allows entries to be created and deleted in the tIPv6FilterParamsTable.')
tIPv6FilterParamsLogId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 3), TFilterLogId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterParamsLogId.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsLogId.setDescription('This object specifies the log to use for packets that match this entry. The value zero indicates that logging is disabled.')
tIPv6FilterParamsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterParamsDescription.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsDescription.setDescription('User-provided description for this filter entry.')
tIPv6FilterParamsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 5), TFilterActionOrDefault().clone('drop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterParamsAction.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsAction.setDescription('The action to take for packets that match this filter entry. The value default(3) specifies this entry to inherit the behavior defined as the default for the filter. The value nat(5) is not supported.')
tIPv6FilterParamsForwardNH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 6), InetAddressIPv6().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterParamsForwardNH.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsForwardNH.setDescription("The ipv6-address of the nexthop to which the packet should be forwarded if it hits this filter entry. The action of this entry should be 'forward' in such a case.")
tIPv6FilterParamsForwardNHIndirect = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterParamsForwardNHIndirect.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsForwardNHIndirect.setDescription('tIPv6FilterParamsForwardNHIndirect specifies if the nexthop is directly or indirectly reachable.')
tIPv6FilterParamsRemarkDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 8), TDSCPFilterActionValue().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterParamsRemarkDSCP.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsRemarkDSCP.setDescription('The DSCP value that should be remarked in case a packet hits this filter entry.')
tIPv6FilterParamsRemarkDSCPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 9), TDSCPFilterActionValue().clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterParamsRemarkDSCPMask.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsRemarkDSCPMask.setDescription('tIPv6FilterParamsRemarkDSCPMask specifies the care bits while remarking with the DSCP value.')
tIPv6FilterParamsRemarkDot1p = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 10), Dot1PPriority().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterParamsRemarkDot1p.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsRemarkDot1p.setDescription('tIPv6FilterParamsRemarkDot1p specifies the Dot1p value that needs to be remarked on the packet if it hits this filter entry.')
tIPv6FilterParamsSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 11), InetAddressIPv6().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterParamsSourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsSourceIpAddr.setDescription('IPv6 address to match the source-ip of the packet.')
tIPv6FilterParamsSourceIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 12), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterParamsSourceIpMask.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsSourceIpMask.setDescription('The IPv6 Mask value for this policy IPv6 Filter entry. The mask is ANDed with the IPv6 to match the tIPv6FilterParamsSourceIpAddr.')
tIPv6FilterParamsDestinationIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 13), InetAddressIPv6().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterParamsDestinationIpAddr.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsDestinationIpAddr.setDescription('IPv6 address to match the destination-ip of the packet.')
tIPv6FilterParamsDestinationIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 14), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterParamsDestinationIpMask.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsDestinationIpMask.setDescription('The IPv6 Mask value for this policy IPv6 Filter entry. The mask is ANDed with the IPv6 to match the tIPv6FilterParamsDestinationIpAddr.')
tIPv6FilterParamsNextHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 15), TIpProtocol().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterParamsNextHeader.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsNextHeader.setDescription('IPv6 next header to match. set to -1 to disable matching IPv6 next header. If the next header is changed the next header specific parameters are reset. For instance if next header is changed from TCP to UDP, then the objects tIPv6FilterParamsTcpSyn and tIPv6FilterParamsTcpAck will be turned off. Because the match criteria only pertains to the last next-header, the following values are not accepted: 0, 43, 44, 50, 51, and 60.')
tIPv6FilterParamsSourcePortValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 16), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterParamsSourcePortValue1.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsSourcePortValue1.setDescription('TCP/UDP port value1. The value of this object is used as per the description for tIPv6FilterParamsSourcePortOperator.')
tIPv6FilterParamsSourcePortValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 17), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterParamsSourcePortValue2.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsSourcePortValue2.setDescription('TCP/UDP port value2. The value of this object is used as per the description for tIPv6FilterParamsSourcePortOperator.')
tIPv6FilterParamsSourcePortOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 18), TTcpUdpPortOperator().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterParamsSourcePortOperator.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsSourcePortOperator.setDescription('The operator specifies the manner in which tIPFilterParamsSourcePortValue1 and tIPFilterParamsSourcePortValue2 are to be used.')
tIPv6FilterParamsDestPortValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 19), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterParamsDestPortValue1.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsDestPortValue1.setDescription('TCP/UDP port value1. The value of this object is used as per the description for tIPv6FilterParamsDestPortOperator.')
tIPv6FilterParamsDestPortValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 20), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterParamsDestPortValue2.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsDestPortValue2.setDescription('TCP/UDP port value2. The value of this object is used as per the description for tIPv6FilterParamsDestPortOperator.')
tIPv6FilterParamsDestPortOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 21), TTcpUdpPortOperator().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterParamsDestPortOperator.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsDestPortOperator.setDescription('The operator specifies the manner in which tIPFilterParamsDestPortValue1 and tIPFilterParamsDestPortValue2 are to be used.')
tIPv6FilterParamsDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 22), TDSCPNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterParamsDSCP.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsDSCP.setDescription('DSCP to be matched on the packet.')
tIPv6FilterParamsTcpSyn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 23), TItemMatch().clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterParamsTcpSyn.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsTcpSyn.setDescription('If Enabled, matches a TCP Syn as per value of the object.')
tIPv6FilterParamsTcpAck = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 24), TItemMatch().clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterParamsTcpAck.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsTcpAck.setDescription('If Enabled, matches a TCP Ack as per value of the object.')
tIPv6FilterParamsIcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 255), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterParamsIcmpCode.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsIcmpCode.setDescription('Icmp code to be matched. tIPv6FilterParamsIcmpCode complements the object tIPv6FilterParamsIcmpType. Both of them need to be set to actually enable ICMP matching. The value -1 means Icmp code matching is not enabled.')
tIPv6FilterParamsIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 255), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterParamsIcmpType.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsIcmpType.setDescription('Icmp type to be matched. tIPv6FilterParamsIcmpType complements the object tIPv6FilterParamsIcmpCode. Both of them need to be set to actually enable ICMP matching. The value -1 means Icmp type matching is not enabled.')
tIPv6FilterParamsCflowdSample = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 27), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterParamsCflowdSample.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsCflowdSample.setDescription("When tIPFilterParamsCflowdSample has a value of 'true', Cflowd sampling and analysis is performed on those packet streams where this filter has been applied. Only packets matching this IPv6 filter entry are subjected to Cflowd sampling and analysis. A Cflowd profile controls the sampling and analysis of data flows through the router.")
tIPv6FilterParamsCflowdIfSample = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 28), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterParamsCflowdIfSample.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsCflowdIfSample.setDescription("When tIPv6FilterParamsCflowdIfSample has a value of 'true', Cflowd sampling and analysis is performed on those packet streams where this filter has been applied. Only packets matching this IPv6 filter entry are subjected to Cflowd sampling and analysis. A Cflowd profile controls the sampling and analysis of data flows through the router.")
tIPv6FilterParamsForwardNHInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterParamsForwardNHInterface.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsForwardNHInterface.setDescription("The interface name for the nexthop to which the packet should be forwarded if it hits this filter entry. The action of this entry should be 'forward' in such a case.")
tIPv6FilterParamsIngressHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tIPv6FilterParamsIngressHitCount.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsIngressHitCount.setDescription('This object indicates the number of times an ingress packet matched this entry.')
tIPv6FilterParamsEgressHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tIPv6FilterParamsEgressHitCount.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsEgressHitCount.setDescription('This object indicates the number of times an egress packet matched this entry.')
tIPv6FilterParamsLogInstantiated = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 32), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tIPv6FilterParamsLogInstantiated.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsLogInstantiated.setDescription('tIPv6FilterParamsLogInstantiated indicates if the filter log for this filter entry has been instantiated or not.')
tIPv6FilterParamsForwardRedPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 33), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterParamsForwardRedPlcy.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsForwardRedPlcy.setDescription('tIPv6FilterParamsForwardRedPlcy specifies the redirect policy to be used to determine the nexthop.')
tIPv6FilterParamsActiveDest = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 34), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tIPv6FilterParamsActiveDest.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsActiveDest.setDescription('tIPv6FilterParamsActiveDest indicates the IPv6 address of the active destination for this IPv6 filter. A value of 0 indicates that there is currently no active destination.')
tIPv6FilterParamsTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 35), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterParamsTimeRangeName.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsTimeRangeName.setDescription('tIPv6FilterParamsTimeRangeName specifies the tmnxTimeRangeEntry to be associated with this filter entry. A value for this object can only be specified during row creation, and cannot be altered lateron. Also, a value is accepted only if the tmnxTimeRangeEntry is defined in the TIMETRA-SCHEDULER-MIB::tmnxTimeRangeTable.tTimeRangeName.')
tIPv6FilterParamsTimeRangeState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 36), TTimeRangeState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tIPv6FilterParamsTimeRangeState.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsTimeRangeState.setDescription('tIPv6FilterParamsTimeRangeState indicates whether or not the entry is currently in effect. - timeRangeNotApplic: no time range is applicable for this entry. - timeRangeNotActive: A time range is defined in tIPv6FilterParamsTimeRangeName, but is not active at this moment. Consequently the filter entry is not installed. - timeRangeActive. A time range is defined in tIPv6FilterParamsTimeRangeName, and is activated successfully. - timeRangeActiveDownloadFailed: A time range is defined in tIPv6FilterParamsTimeRangeName, and is activated, but the corresponding filter entry could not be installed due to resource problems.')
tIPv6FilterParamsIngrHitByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tIPv6FilterParamsIngrHitByteCount.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsIngrHitByteCount.setDescription('The value of tIPv6FilterParamsIngrHitByteCount indicates the number of bytes of all ingress packets that matched this entry.')
tIPv6FilterParamsEgrHitByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tIPv6FilterParamsEgrHitByteCount.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsEgrHitByteCount.setDescription('This tIPv6FilterParamsEgrHitByteCount indicates the number of bytes of all egress packets that matched this entry.')
tIPv6FilterParamsFwdSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 39), TmnxServId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tIPv6FilterParamsFwdSvcId.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsFwdSvcId.setDescription('tIPv6FilterParamsFwdSvcId indicates the service id of the destination for this filter entry. The value 0 indicates that there is no active SAP or SDP destination.')
tIPv6FilterParamsFwdSapPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 40), TmnxPortID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterParamsFwdSapPortId.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsFwdSapPortId.setDescription("tIPv6FilterParamsFwdSapPortId specifies the sap port id of the destination for this filter entry. The value 0 indicates that there is no SAP destination defined. A value different from 0 can only be specified if the value of the tIPv6FilterParamsAction object of this entry is 'forward'. In addition a non-zero value can only be given if the object tIPv6FilterParamsFwdSdpBind is '0'.")
tIPv6FilterParamsFwdSapEncapVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 41), TmnxEncapVal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterParamsFwdSapEncapVal.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsFwdSapEncapVal.setDescription("tIPv6FilterParamsFwdSapEncapVal specifies the sap port encap value of the destination SAP for this filter entry. A value different from 0 can only be specified if the value of the tIPv6FilterParamsAction object of this entry is 'forward'. In addition a non-zero value can only be given if the object tIPv6FilterParamsFwdSdpBind has value '0'. The value 0 indicates that either 1) the sap encapsulation value is not specified when tIPv6FilterParamsFwdSapPortId and tIPv6FilterParamsFwdSvcId have valid values; or 2) that there is no SAP destination.")
tIPv6FilterParamsFwdSdpBind = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 19, 1, 42), SdpBindId().clone(hexValue="0")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tIPv6FilterParamsFwdSdpBind.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterParamsFwdSdpBind.setDescription("tIPv6FilterParamsFwdSdpBind specifies the sdp bind id of the destination for this filter entry. The value '0' indicates that there is currently no SDP binding defined. A value different from '0' can only be specified if the value of the tIPv6FilterParamsAction object of this entry is 'forward'. In addition a non-zero value can only be given if the objects tIPv6FilterParamsFwdSapPortId and tIPv6FilterParamsFwdSapEncapVal have value 0.")
tFilterGroupInsertedEntries = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 20))
tFltrGrpInsrtdEntriesFilterType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 20, 1), TFilterType().clone('fltrtypeselNone')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tFltrGrpInsrtdEntriesFilterType.setStatus('current')
if mibBuilder.loadTexts: tFltrGrpInsrtdEntriesFilterType.setDescription("tFltrGrpInsrtdEntriesFilterType specifies the type of the filter referred to by tFltrGrpInsrtdEntriesFilterId. Inserted entries can only occur in 'fltrtypeselIp' and 'fltrtypeselIpv6'")
tFltrGrpInsrtdEntriesFilterId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 20, 2), TFilterID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tFltrGrpInsrtdEntriesFilterId.setStatus('current')
if mibBuilder.loadTexts: tFltrGrpInsrtdEntriesFilterId.setDescription('tFltrGrpInsrtdEntriesFilterId specifies for which filter the inserted entries must be grouped.')
tFltrGrpInsrtdEntriesApplication = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 20, 3), TFilterSubInsSpaceOwner().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tFltrGrpInsrtdEntriesApplication.setStatus('current')
if mibBuilder.loadTexts: tFltrGrpInsrtdEntriesApplication.setDescription('tFltrGrpInsrtdEntriesApplication specifies for which application the the inserted entries must be grouped.')
tFltrGrpInsrtdEntriesLocation = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 20, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("top", 1), ("bottom", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tFltrGrpInsrtdEntriesLocation.setStatus('current')
if mibBuilder.loadTexts: tFltrGrpInsrtdEntriesLocation.setDescription('tFltrGrpInsrtdEntriesLocation specifies at what location the inserted entries must be grouped.')
tFltrGrpInsrtdEntriesResult = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 20, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("failure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFltrGrpInsrtdEntriesResult.setStatus('current')
if mibBuilder.loadTexts: tFltrGrpInsrtdEntriesResult.setDescription('tFltrGrpInsrtdEntriesResult indicates the success or failure of the last requested grouping request on inserted entries.')
tFltrGrpInsrtdEntriesFeedback = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 20, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFltrGrpInsrtdEntriesFeedback.setStatus('current')
if mibBuilder.loadTexts: tFltrGrpInsrtdEntriesFeedback.setDescription('tFltrGrpInsrtdEntriesFeedback may indicate additional info on the last inserted filter entries grouping action performed.')
tFltrGrpInsrtdEntriesExecute = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 20, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tFltrGrpInsrtdEntriesExecute.setStatus('current')
if mibBuilder.loadTexts: tFltrGrpInsrtdEntriesExecute.setDescription("Setting the object tFltrGrpInsrtdEntriesExecute to 'true' will cause the system to attempt to execute te grouping command as specified by the other MIB objects in the tFilterGroupInsertedEntries mibgroup. When read the value will always indicate 'false'. The result of the command can be found in tFltrGrpInsrtdEntriesResult and tFltrGrpInsrtdEntriesFeedback")
tDhcpFilterTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 21), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tDhcpFilterTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tDhcpFilterTableLastChanged.setDescription('The value of tDhcpFilterTableLastChanged indicates the sysUpTime at the time of the last modification to tDhcpFilterTable by adding, deleting an entry or change to a writable object in the table. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tDhcpFilterTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 22), )
if mibBuilder.loadTexts: tDhcpFilterTable.setStatus('current')
if mibBuilder.loadTexts: tDhcpFilterTable.setDescription('Contains a list of all DHCP filters configured on this system.')
tDhcpFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 22, 1), ).setIndexNames((0, "TIMETRA-FILTER-MIB", "tDhcpFilterId"))
if mibBuilder.loadTexts: tDhcpFilterEntry.setStatus('current')
if mibBuilder.loadTexts: tDhcpFilterEntry.setDescription('Information about a particular DHCP filter. Entries are created/deleted by user. Entries have a presumed StorageType of nonVolatile.')
tDhcpFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 22, 1, 1), TDHCPFilterID().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: tDhcpFilterId.setStatus('current')
if mibBuilder.loadTexts: tDhcpFilterId.setDescription('Uniquely identifies a mac filter as configures on this system.')
tDhcpFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 22, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tDhcpFilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: tDhcpFilterRowStatus.setDescription('This object allows entries to be created and deleted in the tDhcpFilterTable.')
tDhcpFilterLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 22, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tDhcpFilterLastChanged.setStatus('current')
if mibBuilder.loadTexts: tDhcpFilterLastChanged.setDescription('The value of tDhcpFilterLastChanged indicates the timestamp of last change to this row in tDhcpFilterTable.')
tDhcpFilterDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 22, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tDhcpFilterDescription.setStatus('current')
if mibBuilder.loadTexts: tDhcpFilterDescription.setDescription('User-provided description for this filter.')
tDhcpFilterParamsTblLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 23), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tDhcpFilterParamsTblLastChanged.setStatus('current')
if mibBuilder.loadTexts: tDhcpFilterParamsTblLastChanged.setDescription('The value of tDhcpFilterParamsTblLastChanged indicates the sysUpTime at the time of the last modification to tDhcpFilterParamsTable by adding, deleting an entry or change to a writable object in the table. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tDhcpFilterParamsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 24), )
if mibBuilder.loadTexts: tDhcpFilterParamsTable.setStatus('current')
if mibBuilder.loadTexts: tDhcpFilterParamsTable.setDescription('A table of all DHCP filter match entries for all DHCP filters.')
tDhcpFilterParamsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 24, 1), ).setIndexNames((0, "TIMETRA-FILTER-MIB", "tDhcpFilterId"), (0, "TIMETRA-FILTER-MIB", "tDhcpFilterParamsId"))
if mibBuilder.loadTexts: tDhcpFilterParamsEntry.setStatus('current')
if mibBuilder.loadTexts: tDhcpFilterParamsEntry.setDescription('Information about a particular DHCP filter entry. Every DHCP filter can have zero or more DHCP filter match entries. A filter entry with no match criteria set will match every packet, and the entry action will be taken. Entries are created/deleted by user. There is no StorageType object, entries have a presumed StorageType of nonVolatile. ')
tDhcpFilterParamsId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 24, 1, 1), TEntryId())
if mibBuilder.loadTexts: tDhcpFilterParamsId.setStatus('current')
if mibBuilder.loadTexts: tDhcpFilterParamsId.setDescription('This is the secondary index for the entry. Every DHCP filter can have multiple entries, therefore every DHCP filter entry is identified by the tDhcpFilterId and tDhcpFilterParamsId.')
tDhcpFilterParamsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 24, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tDhcpFilterParamsRowStatus.setStatus('current')
if mibBuilder.loadTexts: tDhcpFilterParamsRowStatus.setDescription('This object allows entries to be created and deleted in the tDhcpFilterParamsTable.')
tDhcpFilterParamsLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 24, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tDhcpFilterParamsLastChanged.setStatus('current')
if mibBuilder.loadTexts: tDhcpFilterParamsLastChanged.setDescription('The value of tDhcpFilterParamsLastChanged indicates the timestamp of last change to this row in tDhcpFilterParamsTable.')
tDhcpFilterParamsOptionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 24, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 255), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tDhcpFilterParamsOptionNumber.setReference('RFC 2132, RFC 3315, RFC 3633')
if mibBuilder.loadTexts: tDhcpFilterParamsOptionNumber.setStatus('current')
if mibBuilder.loadTexts: tDhcpFilterParamsOptionNumber.setDescription('The value of tDhcpFilterParamsOptionNumber specifies the number of the DHCP option to filter on.')
tDhcpFilterParamsOptionMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 24, 1, 5), TDhcpFilterMatch().clone('present')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tDhcpFilterParamsOptionMatch.setStatus('current')
if mibBuilder.loadTexts: tDhcpFilterParamsOptionMatch.setDescription('The value of tDhcpFilterParamsOptionMatch specifies the criteria that the DHCP option must match to trigger this filter entry. The value present(1) specifies that the DHCP option must be present, the value absent(2) specifies that the DHCP option must be absent. In these cases tDhcpFilterParamsOptionValue will be reset to an empty string. A value string(3), string-exact(4), string-invert(5), string-exact-invert(6), hex(7), hex-exact(8), hex-invert(9) or hex-exact-invert(10) requires an octet string to be present in tDhcpFilterParamsOptionValue to match against. ')
tDhcpFilterParamsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 24, 1, 6), TDhcpFilterAction().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tDhcpFilterParamsAction.setStatus('current')
if mibBuilder.loadTexts: tDhcpFilterParamsAction.setDescription('The action to take for DHCP host creation requests that match this filter entry. The value none(1) specifies normal host creation behaviour, the value bypass-host-creation(2) specifies to bypass host creation, the value drop(3) specifies to drop the DHCP message.')
tDhcpFilterParamsOptionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 24, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tDhcpFilterParamsOptionValue.setStatus('current')
if mibBuilder.loadTexts: tDhcpFilterParamsOptionValue.setDescription('The value of the object tDhcpFilterParamsOptionValue specifies the matching pattern for the filtered DHCP option. This object is mandatory at creation time. A zero length value is only allowed when the value of tDhcpFilterParamsOptionMatch is present(1) or absent(2).')
tMacFilterNameTableLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 25), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tMacFilterNameTableLastChgd.setStatus('current')
if mibBuilder.loadTexts: tMacFilterNameTableLastChgd.setDescription('The value of tMacFilterNameTableLastChgd indicates the sysUpTime at the time of the last modification of tMacFilterNameTable. If no changes were made to the entry since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tMacFilterNameTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 26), )
if mibBuilder.loadTexts: tMacFilterNameTable.setStatus('current')
if mibBuilder.loadTexts: tMacFilterNameTable.setDescription('A table that contains MAC filter name information. Entries are created automatically by the system when tMacFilterName object is set for the MAC filter.')
tMacFilterNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 26, 1), ).setIndexNames((0, "TIMETRA-FILTER-MIB", "tMacFilterName"))
if mibBuilder.loadTexts: tMacFilterNameEntry.setStatus('current')
if mibBuilder.loadTexts: tMacFilterNameEntry.setDescription('Basic information about a specific MAC filter name.')
tMacFilterNameId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 26, 1, 1), TAnyFilterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tMacFilterNameId.setStatus('current')
if mibBuilder.loadTexts: tMacFilterNameId.setDescription('The value of the object tMacFilterNameId specifies the filter name associated with this MAC filter.')
tMacFilterNameRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 26, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tMacFilterNameRowStatus.setStatus('current')
if mibBuilder.loadTexts: tMacFilterNameRowStatus.setDescription('This value of the object tMacFilterNameRowStatus specifies the status of this row.')
tMacFilterNameLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 26, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tMacFilterNameLastChanged.setStatus('current')
if mibBuilder.loadTexts: tMacFilterNameLastChanged.setDescription('The value of tMacFilterNameLastChanged indicates the sysUpTime at the time of the last modification of this entry. If no changes were made to the entry since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tIpFilterNameTableLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 27), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tIpFilterNameTableLastChgd.setStatus('current')
if mibBuilder.loadTexts: tIpFilterNameTableLastChgd.setDescription('The value of tIpFilterNameTableLastChgd indicates the sysUpTime at the time of the last modification of tIpFilterNameTable. If no changes were made to the entry since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tIpFilterNameTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 28), )
if mibBuilder.loadTexts: tIpFilterNameTable.setStatus('current')
if mibBuilder.loadTexts: tIpFilterNameTable.setDescription('A table that contains IP filter name information. Entries are created automatically by the system when tIpFilterName object is set for the IP filter.')
tIpFilterNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 28, 1), ).setIndexNames((0, "TIMETRA-FILTER-MIB", "tIpFilterName"))
if mibBuilder.loadTexts: tIpFilterNameEntry.setStatus('current')
if mibBuilder.loadTexts: tIpFilterNameEntry.setDescription('Basic information about a specific IP filter name.')
tIpFilterNameId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 28, 1, 1), TAnyFilterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tIpFilterNameId.setStatus('current')
if mibBuilder.loadTexts: tIpFilterNameId.setDescription('The value of the object tIpFilterNameId specifies the filter name associated with this IP filter.')
tIpFilterNameRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 28, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tIpFilterNameRowStatus.setStatus('current')
if mibBuilder.loadTexts: tIpFilterNameRowStatus.setDescription('This value of the object tIpFilterNameRowStatus specifies the status of this row.')
tIpFilterNameLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 28, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tIpFilterNameLastChanged.setStatus('current')
if mibBuilder.loadTexts: tIpFilterNameLastChanged.setDescription('The value of tIpFilterNameLastChanged indicates the sysUpTime at the time of the last modification of this entry. If no changes were made to the entry since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tIpv6FilterNameTableLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 29), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tIpv6FilterNameTableLastChgd.setStatus('current')
if mibBuilder.loadTexts: tIpv6FilterNameTableLastChgd.setDescription('The value of tIpv6FilterNameTableLastChgd indicates the sysUpTime at the time of the last modification of tIpv6FilterNameTable. If no changes were made to the entry since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tIpv6FilterNameTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 30), )
if mibBuilder.loadTexts: tIpv6FilterNameTable.setStatus('current')
if mibBuilder.loadTexts: tIpv6FilterNameTable.setDescription('A table that contains IPv6 filter name information. Entries are created automatically by the system when tIpv6FilterName object is set for the IPv6 filter.')
tIpv6FilterNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 30, 1), ).setIndexNames((0, "TIMETRA-FILTER-MIB", "tIpv6FilterName"))
if mibBuilder.loadTexts: tIpv6FilterNameEntry.setStatus('current')
if mibBuilder.loadTexts: tIpv6FilterNameEntry.setDescription('Basic information about a specific IPv6 filter name.')
tIpv6FilterNameId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 30, 1, 1), TAnyFilterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tIpv6FilterNameId.setStatus('current')
if mibBuilder.loadTexts: tIpv6FilterNameId.setDescription('The value of the object tIpv6FilterNameId specifies the filter name associated with this IPv6 filter.')
tIpv6FilterNameRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 30, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tIpv6FilterNameRowStatus.setStatus('current')
if mibBuilder.loadTexts: tIpv6FilterNameRowStatus.setDescription('This value of the object tIpv6FilterNameRowStatus specifies the status of this row.')
tIpv6FilterNameLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 30, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tIpv6FilterNameLastChanged.setStatus('current')
if mibBuilder.loadTexts: tIpv6FilterNameLastChanged.setDescription('The value of tIpv6FilterNameLastChanged indicates the sysUpTime at the time of the last modification of this entry. If no changes were made to the entry since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tFilterLiObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31))
tLiReservedBlockTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tLiReservedBlockTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tLiReservedBlockTableLastChanged.setDescription('The object tLiReservedBlockTableLastChanged indicates the sysUpTime at the time of the last modification of tLiReservedBlockTable. If no changes were made to the entry since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tLiReservedBlockTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 2), )
if mibBuilder.loadTexts: tLiReservedBlockTable.setStatus('current')
if mibBuilder.loadTexts: tLiReservedBlockTable.setDescription('The table tLiReservedBlockTable describes LI reserved blocks. In this release this table can have at most one entry.')
tLiReservedBlockEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 2, 1), ).setIndexNames((0, "TIMETRA-FILTER-MIB", "tLiReservedBlockName"))
if mibBuilder.loadTexts: tLiReservedBlockEntry.setStatus('current')
if mibBuilder.loadTexts: tLiReservedBlockEntry.setDescription('Information about an LI reserved block. This block can be associated with one or more filters to reserve a number of entries in those filters for LI.')
tLiReservedBlockName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 2, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tLiReservedBlockName.setStatus('current')
if mibBuilder.loadTexts: tLiReservedBlockName.setDescription('The object tLiReservedBlockName uniquely identifies an LI reserved block.')
tLiReservedBlockRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLiReservedBlockRowStatus.setStatus('current')
if mibBuilder.loadTexts: tLiReservedBlockRowStatus.setDescription('The object tLiReservedBlockRowStatus specifies the status of this row.')
tLiReservedBlockLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tLiReservedBlockLastChanged.setStatus('current')
if mibBuilder.loadTexts: tLiReservedBlockLastChanged.setDescription('The object tLiReservedBlockLastChanged indicates the sysUpTime at the time of the last modification of this entry. If no changes were made to the entry since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tLiReservedBlockDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 2, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLiReservedBlockDescription.setStatus('current')
if mibBuilder.loadTexts: tLiReservedBlockDescription.setDescription('The object tLiReservedBlockDescription specifies a description for this LI reserved block.')
tLiReservedBlockStart = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 2, 1, 5), TEntryIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLiReservedBlockStart.setStatus('current')
if mibBuilder.loadTexts: tLiReservedBlockStart.setDescription("The object tLiReservedBlockStart specifies the starting entry of the LI reserved block. If set to '0' no block is reserved. In this case the value of the object tLiReservedBlockSize will be set to '0' by the system.")
tLiReservedBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 2, 1, 6), TEntryIdOrZero().subtype(subtypeSpec=ValueRangeConstraint(0, 8192))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLiReservedBlockSize.setStatus('current')
if mibBuilder.loadTexts: tLiReservedBlockSize.setDescription("The object tLiReservedBlockSize specifies the size of the LI reserved block. If set to '0' no block is reserved. In this case the value of the object tLiReservedBlockStart will be set to '0' by the system.")
tLiReservedBlockFltrTableLastChg = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tLiReservedBlockFltrTableLastChg.setStatus('current')
if mibBuilder.loadTexts: tLiReservedBlockFltrTableLastChg.setDescription('The value of tLiReservedBlockFltrTableLastChg indicates the sysUpTime at the time of the last modification of tLiReservedBlockFltrTable. If no changes were made to the entry since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tLiReservedBlockFltrTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 4), )
if mibBuilder.loadTexts: tLiReservedBlockFltrTable.setStatus('current')
if mibBuilder.loadTexts: tLiReservedBlockFltrTable.setDescription('The table tLiReservedBlockFltrTable contains associations between normal filters and LI block reservations.')
tLiReservedBlockFltrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 4, 1), ).setIndexNames((0, "TIMETRA-FILTER-MIB", "tLiReservedBlockName"), (0, "TIMETRA-FILTER-MIB", "tLiReservedBlockFltrType"), (0, "TIMETRA-FILTER-MIB", "tLiReservedBlockFltrIdStart"), (0, "TIMETRA-FILTER-MIB", "tLiReservedBlockFltrIdEnd"))
if mibBuilder.loadTexts: tLiReservedBlockFltrEntry.setStatus('current')
if mibBuilder.loadTexts: tLiReservedBlockFltrEntry.setDescription('An association of a normal filter with an LI block reservation. In this release, only MAC filters are supported.')
tLiReservedBlockFltrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 4, 1, 1), TFilterType())
if mibBuilder.loadTexts: tLiReservedBlockFltrType.setStatus('current')
if mibBuilder.loadTexts: tLiReservedBlockFltrType.setDescription('The object tLiReservedBlockFltrType specifies the type of filter this LI block reservation applies to. In this release only MAC filters are supported.')
tLiReservedBlockFltrIdStart = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 4, 1, 2), TFilterID())
if mibBuilder.loadTexts: tLiReservedBlockFltrIdStart.setStatus('current')
if mibBuilder.loadTexts: tLiReservedBlockFltrIdStart.setDescription('The object tLiReservedBlockFltrIdStart specifies the ID of the first filter to apply an LI block reservation. In this release, tLiReservedBlockFltrIdStart must be equal to tLiReservedBlockFltrIdEnd.')
tLiReservedBlockFltrIdEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 4, 1, 3), TFilterID())
if mibBuilder.loadTexts: tLiReservedBlockFltrIdEnd.setStatus('current')
if mibBuilder.loadTexts: tLiReservedBlockFltrIdEnd.setDescription('The object tLiReservedBlockFltrIdEnd specifies the ID of the last filter to apply an LI block reservation. In this release, tLiReservedBlockFltrIdEnd must be equal to tLiReservedBlockFltrIdStart.')
tLiReservedBlockFltrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLiReservedBlockFltrRowStatus.setStatus('current')
if mibBuilder.loadTexts: tLiReservedBlockFltrRowStatus.setDescription('The object tLiReservedBlockFltrRowStatus specifies the status of this row.')
tLiReservedBlockFltrLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 4, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tLiReservedBlockFltrLastChanged.setStatus('current')
if mibBuilder.loadTexts: tLiReservedBlockFltrLastChanged.setDescription('The object tLiReservedBlockFltrLastChanged indicates the sysUpTime at the time of the last modification of this entry. If no changes were made to the entry since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tLiFilterTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tLiFilterTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tLiFilterTableLastChanged.setDescription('The object tLiFilterTableLastChanged indicates the sysUpTime at the time of the last modification of tLiFilterTable. If no changes were made to the entry since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tLiFilterTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 6), )
if mibBuilder.loadTexts: tLiFilterTable.setStatus('current')
if mibBuilder.loadTexts: tLiFilterTable.setDescription('The table tLiFilterTable contains information about all LI MAC filters.')
tLiFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 6, 1), ).setIndexNames((0, "TIMETRA-FILTER-MIB", "tLiFilterType"), (0, "TIMETRA-FILTER-MIB", "tLiFilterName"))
if mibBuilder.loadTexts: tLiFilterEntry.setStatus('current')
if mibBuilder.loadTexts: tLiFilterEntry.setDescription('An LI MAC filter.')
tLiFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 6, 1, 1), TFilterType())
if mibBuilder.loadTexts: tLiFilterType.setStatus('current')
if mibBuilder.loadTexts: tLiFilterType.setDescription('The object tLiFilterType specifies the type of this LI filter. In this release only MAC filters are supported.')
tLiFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 6, 1, 2), TNamedItem())
if mibBuilder.loadTexts: tLiFilterName.setStatus('current')
if mibBuilder.loadTexts: tLiFilterName.setDescription('The object tLiFilterName indicates the unique name of this LI MAC Filter.')
tLiFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLiFilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: tLiFilterRowStatus.setDescription('The object tLiFilterRowStatus specifies the status of this row.')
tLiFilterLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 6, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tLiFilterLastChanged.setStatus('current')
if mibBuilder.loadTexts: tLiFilterLastChanged.setDescription('The object tLiFilterLastChanged indicates the sysUpTime at the time of the last modification of this entry. If no changes were made to the entry since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tLiFilterDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 6, 1, 5), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLiFilterDescription.setStatus('current')
if mibBuilder.loadTexts: tLiFilterDescription.setDescription('The object tLiFilterDescription specifies a description for this LI MAC filter.')
tLiFilterAssociationTableLastChg = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tLiFilterAssociationTableLastChg.setStatus('current')
if mibBuilder.loadTexts: tLiFilterAssociationTableLastChg.setDescription('The object tLiFilterAssociationTableLastChg indicates the sysUpTime at the time of the last modification of tLiFilterTable. If no changes were made to the entry since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tLiFilterAssociationTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 8), )
if mibBuilder.loadTexts: tLiFilterAssociationTable.setStatus('current')
if mibBuilder.loadTexts: tLiFilterAssociationTable.setDescription('The table tLiFilterAssociationTable contains information about the associations between LI filters and normal filters.')
tLiFilterAssociationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 8, 1), ).setIndexNames((0, "TIMETRA-FILTER-MIB", "tLiFilterType"), (0, "TIMETRA-FILTER-MIB", "tLiFilterName"), (0, "TIMETRA-FILTER-MIB", "tLiFilterAssociationFltrId"))
if mibBuilder.loadTexts: tLiFilterAssociationEntry.setStatus('current')
if mibBuilder.loadTexts: tLiFilterAssociationEntry.setDescription('An association between an LI filter and a normal filter.')
tLiFilterAssociationFltrId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 8, 1, 1), TFilterID())
if mibBuilder.loadTexts: tLiFilterAssociationFltrId.setStatus('current')
if mibBuilder.loadTexts: tLiFilterAssociationFltrId.setDescription('The object tLiFilterAssociationFltrId indicates the id of the normal filter in the association described by this entry.')
tLiFilterAssociationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 8, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLiFilterAssociationRowStatus.setStatus('current')
if mibBuilder.loadTexts: tLiFilterAssociationRowStatus.setDescription('The object tLiFilterAssociationRowStatus specifies the status of this row.')
tLiFilterAssociationLastChg = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 8, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tLiFilterAssociationLastChg.setStatus('current')
if mibBuilder.loadTexts: tLiFilterAssociationLastChg.setDescription('The object tLiFilterAssociationLastChg indicates the sysUpTime at the time of the last modification of this entry. If no changes were made to the entry since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tLiMacFilterParamsTableLastChg = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tLiMacFilterParamsTableLastChg.setStatus('current')
if mibBuilder.loadTexts: tLiMacFilterParamsTableLastChg.setDescription('The object tLiMacFilterParamsTableLastChg indicates the sysUpTime at the time of the last modification of tLiMacFilterParamsTable. If no changes were made to the entry since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tLiMacFilterParamsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 10), )
if mibBuilder.loadTexts: tLiMacFilterParamsTable.setStatus('current')
if mibBuilder.loadTexts: tLiMacFilterParamsTable.setDescription('The table tLiMacFilterParamsTable contains all LI MAC filter match entries for all LI MAC filters.')
tLiMacFilterParamsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 10, 1), ).setIndexNames((0, "TIMETRA-FILTER-MIB", "tLiFilterType"), (0, "TIMETRA-FILTER-MIB", "tLiFilterName"), (0, "TIMETRA-FILTER-MIB", "tLiMacFilterParamsId"))
if mibBuilder.loadTexts: tLiMacFilterParamsEntry.setStatus('current')
if mibBuilder.loadTexts: tLiMacFilterParamsEntry.setDescription('An LI MAC filter match entry.')
tLiMacFilterParamsId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 10, 1, 1), TEntryId())
if mibBuilder.loadTexts: tLiMacFilterParamsId.setStatus('current')
if mibBuilder.loadTexts: tLiMacFilterParamsId.setDescription('The object tLiMacFilterParamsId indicates the secondary index for this entry. Every LI MAC filter may have multiple match entries, therefore every LI MAC filter match entry is identified by the tLiFilterName and tLiMacFilterParamsId.')
tLiMacFilterParamsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 10, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLiMacFilterParamsRowStatus.setStatus('current')
if mibBuilder.loadTexts: tLiMacFilterParamsRowStatus.setDescription('The object tLiMacFilterParamsRowStatus specifies the status of this row.')
tLiMacFilterParamsLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 10, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tLiMacFilterParamsLastChanged.setStatus('current')
if mibBuilder.loadTexts: tLiMacFilterParamsLastChanged.setDescription('The object tLiMacFilterParamsLastChanged indicates the sysUpTime at the time of the last modification of this entry. If no changes were made to the entry since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tLiMacFilterParamsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 10, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLiMacFilterParamsDescription.setStatus('current')
if mibBuilder.loadTexts: tLiMacFilterParamsDescription.setDescription('The object tLiMacFilterParamsDescription specifies a description for this entry.')
tLiMacFilterParamsFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 10, 1, 5), TFrameType().clone('e802dot3')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLiMacFilterParamsFrameType.setStatus('current')
if mibBuilder.loadTexts: tLiMacFilterParamsFrameType.setDescription('The object tLiMacFilterParamsFrameType specifies the type of mac frame for which we are defining this match criterium.')
tLiMacFilterParamsSrcMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 10, 1, 6), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLiMacFilterParamsSrcMAC.setStatus('current')
if mibBuilder.loadTexts: tLiMacFilterParamsSrcMAC.setDescription('The object tLiMacFilterParamsSrcMAC specifies the source MAC address to match for this LI MAC filter entry.')
tLiMacFilterParamsSrcMACMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 10, 1, 7), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLiMacFilterParamsSrcMACMask.setStatus('current')
if mibBuilder.loadTexts: tLiMacFilterParamsSrcMACMask.setDescription('The object tLiMacFilterParamsSrcMACMask specifies the source MAC mask value for this LI MAC filter match entry. The mask is ANDed with the MAC to match tLiMacFilterParamsSrcMAC. A zero bit means ignore this bit, do not match. A one bit means match this bit with tLiMacFilterParamsSrcMAC. Use the value 00-00-00-00-00-00 to disable this filter criterium. If set to all zero, the value of tLiMacFilterParamsSrcMAC will bet set to all zero by the system, and any attept to change this value will be ignored.')
tLiMacFilterParamsDstMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 10, 1, 8), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLiMacFilterParamsDstMAC.setStatus('current')
if mibBuilder.loadTexts: tLiMacFilterParamsDstMAC.setDescription('The object tLiMacFilterParamsDstMAC specifies the destination MAC to match for this LI MAC filter entry.')
tLiMacFilterParamsDstMACMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 10, 1, 9), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLiMacFilterParamsDstMACMask.setStatus('current')
if mibBuilder.loadTexts: tLiMacFilterParamsDstMACMask.setDescription('The object tLiMacFilterParamsDstMACMask specifies the destination MAC mask value for this LI MAC filter match entry. The mask is ANDed with the MAC to match tLiMacFilterParamsDstMAC. A zero bit means ignore this bit, do not match. a one bit means match this bit with tLiMacFilterParamsDstMAC. Use the value 00-00-00-00-00-00 to disable this filter criteria. If set to all zero, the value of tLiMacFilterParamsDstMAC will bet set to all zero by the system, and any attept to change this value will be ignored.')
tLiMacFilterParamsIngrHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 10, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tLiMacFilterParamsIngrHitCount.setStatus('current')
if mibBuilder.loadTexts: tLiMacFilterParamsIngrHitCount.setDescription('The object tLiMacFilterParamsIngrHitCount indicates the number of times an ingress packet matched this entry.')
tLiMacFilterParamsEgrHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 10, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tLiMacFilterParamsEgrHitCount.setStatus('current')
if mibBuilder.loadTexts: tLiMacFilterParamsEgrHitCount.setDescription('This object tLiMacFilterParamsEgrHitCount indicates the number of times an egress packet matched this entry.')
tLiMacFilterParamsIngrHitBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 10, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tLiMacFilterParamsIngrHitBytes.setStatus('current')
if mibBuilder.loadTexts: tLiMacFilterParamsIngrHitBytes.setDescription('The value of tLiMacFilterParamsIngrHitBytes indicates the number of bytes of all ingress packets that matched this entry.')
tLiMacFilterParamsEgrHitBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 31, 10, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tLiMacFilterParamsEgrHitBytes.setStatus('current')
if mibBuilder.loadTexts: tLiMacFilterParamsEgrHitBytes.setDescription('The value of tLiMacFilterParamsEgrHitBytes indicates the number of bytes of all egress packets that matched this entry.')
tFilterPrefixListTableLstChng = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 32), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFilterPrefixListTableLstChng.setStatus('current')
if mibBuilder.loadTexts: tFilterPrefixListTableLstChng.setDescription('The object tFilterPrefixListTableLstChng indicates the sysUpTime at the time of the last modification of tFilterPrefixListTable. If no changes were made to the table since the last re-initialization of the local network management subsystem, this object contains the value zero.')
tFilterPrefixListTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 33), )
if mibBuilder.loadTexts: tFilterPrefixListTable.setStatus('current')
if mibBuilder.loadTexts: tFilterPrefixListTable.setDescription('The table tFilterPrefixListTable contains an entry for each prefix list defined in the filter area.')
tFilterPrefixListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 33, 1), ).setIndexNames((0, "TIMETRA-FILTER-MIB", "tFilterPrefixListType"), (1, "TIMETRA-FILTER-MIB", "tFilterPrefixListName"))
if mibBuilder.loadTexts: tFilterPrefixListEntry.setStatus('current')
if mibBuilder.loadTexts: tFilterPrefixListEntry.setDescription('An entry in the tFilterPrefixListTable.')
tFilterPrefixListType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 33, 1, 1), TFltrPrefixListType())
if mibBuilder.loadTexts: tFilterPrefixListType.setStatus('current')
if mibBuilder.loadTexts: tFilterPrefixListType.setDescription('The object TFltrPrefixListType specifies the type of prefix list for the prefix list tFilterPrefixListName.')
tFilterPrefixListName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 33, 1, 2), TNamedItem())
if mibBuilder.loadTexts: tFilterPrefixListName.setStatus('current')
if mibBuilder.loadTexts: tFilterPrefixListName.setDescription('The object tFilterPrefixListName specifies the name given to this prefix list.')
tFilterPrefixListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 33, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterPrefixListRowStatus.setStatus('current')
if mibBuilder.loadTexts: tFilterPrefixListRowStatus.setDescription('The object tFilterPrefixListRowStatus specifies the status of this row.')
tFilterPrefixListLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 33, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFilterPrefixListLastChanged.setStatus('current')
if mibBuilder.loadTexts: tFilterPrefixListLastChanged.setDescription('The object tFilterPrefixListLastChanged indicates the sysUpTime at the time of the last modification of this row. If no changes were made to the row since the last re-initialization of the local network management subsystem, then this object contains the value zero.')
tFilterPrefixListDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 33, 1, 5), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterPrefixListDescription.setStatus('current')
if mibBuilder.loadTexts: tFilterPrefixListDescription.setDescription('The object tFilterPrefixListDescription specifies a description for this row.')
tFilterPrefixListEntryTblLstChg = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 34), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFilterPrefixListEntryTblLstChg.setStatus('current')
if mibBuilder.loadTexts: tFilterPrefixListEntryTblLstChg.setDescription('The object tFilterPrefixListEntryTblLstChg indicates the sysUpTime at the time of the last modification of tFilterPrefixListEntryTable. If no changes were made to the table since the last re-initialization of the local network management subsystem, this object contains the value zero.')
tFilterPrefixListEntryTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 35), )
if mibBuilder.loadTexts: tFilterPrefixListEntryTable.setStatus('current')
if mibBuilder.loadTexts: tFilterPrefixListEntryTable.setDescription('The table tFilterPrefixListEntryTable contains an entry for each prefix defined in any prefix list defined in the filter area.')
tFilterPrefixListEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 35, 1), ).setIndexNames((0, "TIMETRA-FILTER-MIB", "tFilterPrefixListType"), (0, "TIMETRA-FILTER-MIB", "tFilterPrefixListName"), (0, "TIMETRA-FILTER-MIB", "tFilterPrefixListEntryPrefixType"), (0, "TIMETRA-FILTER-MIB", "tFilterPrefixListEntryPrefix"), (0, "TIMETRA-FILTER-MIB", "tFilterPrefixListEntryPrefixLen"))
if mibBuilder.loadTexts: tFilterPrefixListEntryEntry.setStatus('current')
if mibBuilder.loadTexts: tFilterPrefixListEntryEntry.setDescription('An entry in the tFilterPrefixListEntryTable.')
tFilterPrefixListEntryPrefixType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 35, 1, 1), InetAddressType())
if mibBuilder.loadTexts: tFilterPrefixListEntryPrefixType.setStatus('current')
if mibBuilder.loadTexts: tFilterPrefixListEntryPrefixType.setDescription('The object tFilterPrefixListEntryPrefixType specifies whether the prefix specified in tFilterPrefixListEntryPrefix is an IPv4 or IPv6 prefix. The value of tFilterPrefixListEntryPrefixType must match the value of the object tFilterPrefixListType.')
tFilterPrefixListEntryPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 35, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tFilterPrefixListEntryPrefix.setStatus('current')
if mibBuilder.loadTexts: tFilterPrefixListEntryPrefix.setDescription('The value of tFilterPrefixListEntryPrefix specifies the IP prefix of this prefix list entry.')
tFilterPrefixListEntryPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 35, 1, 3), InetAddressPrefixLength())
if mibBuilder.loadTexts: tFilterPrefixListEntryPrefixLen.setStatus('current')
if mibBuilder.loadTexts: tFilterPrefixListEntryPrefixLen.setDescription('The value of tFilterPrefixListEntryPrefixLen specifiesd the IP prefix length of this prefix list entry.')
tFilterPrefixListEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 35, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFilterPrefixListEntryRowStatus.setStatus('current')
if mibBuilder.loadTexts: tFilterPrefixListEntryRowStatus.setDescription('The object tFilterPrefixListEntryRowStatus specifies the status of this row.')
tFilterPBRDropReason = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("invalidInterface", 0), ("interfaceDown", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tFilterPBRDropReason.setStatus('current')
if mibBuilder.loadTexts: tFilterPBRDropReason.setDescription('Used by tIPFilterPBRPacketsDrop to report the failure reason code.')
tFilterParmRow = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 8, 2), RowPointer()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tFilterParmRow.setStatus('current')
if mibBuilder.loadTexts: tFilterParmRow.setDescription('The value of the object tFilterParmRow indicates the OID of the row status of the applicable filter parameter table. This can be a row from either one of the following tables: - tIPFilterParamsTable; - tMacFilterParamsTable; or - tIPv6FilterParamsTable')
tFilterAlarmDescription = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 8, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tFilterAlarmDescription.setStatus('current')
if mibBuilder.loadTexts: tFilterAlarmDescription.setDescription('The value of the object tFilterAlarmDescription is a printable character string which contains information about the cause of the problem.')
tFilterId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 8, 4), TFilterID()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tFilterId.setStatus('current')
if mibBuilder.loadTexts: tFilterId.setDescription('The value of the object tFilterId, together with the object tFilterType uniquely defines the filter for which this notification is generated.')
tFilterType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 8, 5), TFilterType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tFilterType.setStatus('current')
if mibBuilder.loadTexts: tFilterType.setDescription('The value of the object tFilterType, together with the object tFilterId uniquely defines the filter for which this notification is generated.')
tFilterSubInsSpaceOwner = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 8, 6), TFilterSubInsSpaceOwner()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tFilterSubInsSpaceOwner.setStatus('current')
if mibBuilder.loadTexts: tFilterSubInsSpaceOwner.setDescription('The value of the object tFilterSubInsSpaceOwner, specifies for which application, capable of inserting filter entries, this notification is generated.')
tFilterThresholdReached = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 8, 7), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tFilterThresholdReached.setStatus('current')
if mibBuilder.loadTexts: tFilterThresholdReached.setDescription('The value of the object tFilterThresholdReached, specifies the threshold reached at the moment this notificastion was generated.')
tFltrFlowSpecProblem = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("nlriDecodeProblem", 0), ("maxNbrFlowSpecEntriesReached", 1), ("fltrResourceProblem", 2), ("other", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tFltrFlowSpecProblem.setStatus('current')
if mibBuilder.loadTexts: tFltrFlowSpecProblem.setDescription('The value of the object tFltrFlowSpecProblem, indicates which problem has occured while processing a BGP flowspec NLRI in the filter module.')
tFltrFlowSpecProblemDescription = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 8, 9), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tFltrFlowSpecProblemDescription.setStatus('current')
if mibBuilder.loadTexts: tFltrFlowSpecProblemDescription.setDescription('The value of the object tFltrFlowSpecProblem may contain a more detailed problem description then as given by tFltrFlowSpecProblem.')
tFltrFLowSpecNLRI = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 8, 10), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tFltrFLowSpecNLRI.setStatus('current')
if mibBuilder.loadTexts: tFltrFLowSpecNLRI.setDescription('The value of the object tFltrFLowSpecNLRI contains at most the first 30 octets of the NLRI causing the problem.')
tFltrFlowSpecVrtrId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 21, 8, 11), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tFltrFlowSpecVrtrId.setStatus('current')
if mibBuilder.loadTexts: tFltrFlowSpecVrtrId.setDescription('The value of the object tFltrFlowSpecVrtrId indicates the virtual router Id to which the NLRI belongs.')
tIPFilterPBRPacketsDrop = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 21, 0, 1)).setObjects(("TIMETRA-FILTER-MIB", "tIPFilterParamsForwardNHInterface"), ("TIMETRA-FILTER-MIB", "tFilterPBRDropReason"))
if mibBuilder.loadTexts: tIPFilterPBRPacketsDrop.setStatus('current')
if mibBuilder.loadTexts: tIPFilterPBRPacketsDrop.setDescription('The tIPFilterPBRPacketsDrop event is generated either when the configuration of a forwarding action refers to an invalid/unconfigured next-hop or if the active interface goes down operationally in the process of active filtering.')
tFilterEntryActivationFailed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 21, 0, 2)).setObjects(("TIMETRA-FILTER-MIB", "tFilterParmRow"), ("TIMETRA-FILTER-MIB", "tFilterAlarmDescription"))
if mibBuilder.loadTexts: tFilterEntryActivationFailed.setStatus('current')
if mibBuilder.loadTexts: tFilterEntryActivationFailed.setDescription('The tFilterEntryActivationFailed event can only be generated for entries that are controlled by a tmnxTimeRangeEntry. If the tmnxTimeRangeEntry becomes active the indicated entry must be installed. The event is generated when this installation failed because of resource problems.')
tFilterEntryActivationRestored = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 21, 0, 3)).setObjects(("TIMETRA-FILTER-MIB", "tFilterParmRow"), ("TIMETRA-FILTER-MIB", "tFilterAlarmDescription"))
if mibBuilder.loadTexts: tFilterEntryActivationRestored.setStatus('current')
if mibBuilder.loadTexts: tFilterEntryActivationRestored.setDescription('The tFilterEntryActivationRestored event can only be generated for entries that are controlled by a tmnxTimeRangeEntry. If the tmnxTimeRangeEntry becomes active the indicated entry must be installed. The event tFilterEntryActivationFailed is generated when this installation originally failed because of resources problems, The notification tFilterEntryActivationRestored is sent when either the time range associated with the filter is no longer active, or when the filter entry was installed due to the availability of new resources.')
tFilterSubInsSpaceAlarmRaised = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 21, 0, 4)).setObjects(("TIMETRA-FILTER-MIB", "tFilterType"), ("TIMETRA-FILTER-MIB", "tFilterId"), ("TIMETRA-FILTER-MIB", "tFilterSubInsSpaceOwner"), ("TIMETRA-FILTER-MIB", "tFilterThresholdReached"))
if mibBuilder.loadTexts: tFilterSubInsSpaceAlarmRaised.setStatus('current')
if mibBuilder.loadTexts: tFilterSubInsSpaceAlarmRaised.setDescription('The tFilterSubInsSpaceAlarmRaised notification is generated when the utilization of a filter entry range that was reserved for filter entry insertion increases to the configured high watermark for his filter')
tFilterSubInsSpaceAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 21, 0, 5)).setObjects(("TIMETRA-FILTER-MIB", "tFilterType"), ("TIMETRA-FILTER-MIB", "tFilterId"), ("TIMETRA-FILTER-MIB", "tFilterSubInsSpaceOwner"), ("TIMETRA-FILTER-MIB", "tFilterThresholdReached"))
if mibBuilder.loadTexts: tFilterSubInsSpaceAlarmCleared.setStatus('current')
if mibBuilder.loadTexts: tFilterSubInsSpaceAlarmCleared.setDescription('The tFilterSubInsSpaceAlarmCleared notification is generated when the utilization of a filter entry range that was reserved for filter entry insertion dropped below to the configured low watermark for his filter.')
tFilterSubInsFltrEntryDropped = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 21, 0, 6)).setObjects(("TIMETRA-FILTER-MIB", "tFilterType"), ("TIMETRA-FILTER-MIB", "tFilterId"), ("TIMETRA-FILTER-MIB", "tFilterSubInsSpaceOwner"), ("TIMETRA-FILTER-MIB", "tFilterAlarmDescription"))
if mibBuilder.loadTexts: tFilterSubInsFltrEntryDropped.setStatus('current')
if mibBuilder.loadTexts: tFilterSubInsFltrEntryDropped.setDescription('The tFilterSubInsFltrEntryDropped notification is generated when a request to insert a filter entry was not successful.')
tFilterBgpFlowSpecProblem = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 21, 0, 7)).setObjects(("TIMETRA-FILTER-MIB", "tFilterType"), ("TIMETRA-FILTER-MIB", "tFltrFlowSpecVrtrId"), ("TIMETRA-FILTER-MIB", "tFltrFlowSpecProblem"), ("TIMETRA-FILTER-MIB", "tFltrFlowSpecProblemDescription"), ("TIMETRA-FILTER-MIB", "tFltrFLowSpecNLRI"))
if mibBuilder.loadTexts: tFilterBgpFlowSpecProblem.setStatus('current')
if mibBuilder.loadTexts: tFilterBgpFlowSpecProblem.setDescription('The tFilterBgpFlowSpecProblem notification is generated when a BGP flowspec NLRI is received in the filter module that cannot be treated - i.e. for which no filter entry is installed in the system, or when there is a problem inserting (new) or reshuffling (existing) flowspec or merged filter entries.')
tFilterMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 1))
tFilterMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 2))
tFilter7450V4v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 1, 4)).setObjects(("TIMETRA-FILTER-MIB", "tFilterScalarGroup"), ("TIMETRA-FILTER-MIB", "tIPFilterV4v0Group"), ("TIMETRA-FILTER-MIB", "tMacFilterV4v0Group"), ("TIMETRA-FILTER-MIB", "tFilterLogGroup"), ("TIMETRA-FILTER-MIB", "tFilterRedirectPolicyGroup"), ("TIMETRA-FILTER-MIB", "tFilterNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tFilter7450V4v0Compliance = tFilter7450V4v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tFilter7450V4v0Compliance.setDescription('The compliance statement for management of Filter features on Alcatel 7450 ESS series systems release R4.0.')
tFilter7750V4v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 1, 5)).setObjects(("TIMETRA-FILTER-MIB", "tFilterScalarGroup"), ("TIMETRA-FILTER-MIB", "tIPFilterV4v0Group"), ("TIMETRA-FILTER-MIB", "tMacFilterV4v0Group"), ("TIMETRA-FILTER-MIB", "tFilterLogGroup"), ("TIMETRA-FILTER-MIB", "tFilterRedirectPolicyGroup"), ("TIMETRA-FILTER-MIB", "tFilterNotificationsGroup"), ("TIMETRA-FILTER-MIB", "tIPv6FilterV4v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tFilter7750V4v0Compliance = tFilter7750V4v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tFilter7750V4v0Compliance.setDescription('The compliance statement for management of Filter features on Alcatel 7750 SR series systems release R4.0.')
tFilter7450V5v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 1, 6)).setObjects(("TIMETRA-FILTER-MIB", "tFilterScalarGroup"), ("TIMETRA-FILTER-MIB", "tIPFilterV5v0Group"), ("TIMETRA-FILTER-MIB", "tMacFilterV4v0Group"), ("TIMETRA-FILTER-MIB", "tFilterLogGroup"), ("TIMETRA-FILTER-MIB", "tFilterRedirectPolicyGroup"), ("TIMETRA-FILTER-MIB", "tFilterNotificationsGroup"), ("TIMETRA-FILTER-MIB", "tTodPolicies77450V5v0Group"), ("TIMETRA-FILTER-MIB", "tToDPoliciesV5v0NotifyGroup"), ("TIMETRA-FILTER-MIB", "tFilterLogV5v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tFilter7450V5v0Compliance = tFilter7450V5v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tFilter7450V5v0Compliance.setDescription('The compliance statement for management of Filter features on Alcatel 7450 ESS series systems release R5.0.')
tFilter77x0V5v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 1, 7)).setObjects(("TIMETRA-FILTER-MIB", "tFilterScalarGroup"), ("TIMETRA-FILTER-MIB", "tIPFilterV5v0Group"), ("TIMETRA-FILTER-MIB", "tMacFilterV4v0Group"), ("TIMETRA-FILTER-MIB", "tFilterLogGroup"), ("TIMETRA-FILTER-MIB", "tFilterRedirectPolicyGroup"), ("TIMETRA-FILTER-MIB", "tFilterNotificationsGroup"), ("TIMETRA-FILTER-MIB", "tIPv6FilterV4v0Group"), ("TIMETRA-FILTER-MIB", "tTodPolicies77x0V5v0Group"), ("TIMETRA-FILTER-MIB", "tToDPoliciesV5v0NotifyGroup"), ("TIMETRA-FILTER-MIB", "tFilterLogV5v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tFilter77x0V5v0Compliance = tFilter77x0V5v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tFilter77x0V5v0Compliance.setDescription('The compliance statement for management of Filter features on Alcatel 77x0 SPR/SR series systems release R5.0.')
tFilter7450V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 1, 8)).setObjects(("TIMETRA-FILTER-MIB", "tFilterScalarGroup"), ("TIMETRA-FILTER-MIB", "tIPFilterV6v0Group"), ("TIMETRA-FILTER-MIB", "tMacFilterV6v0Group"), ("TIMETRA-FILTER-MIB", "tFilterLogGroup"), ("TIMETRA-FILTER-MIB", "tFilterRedirectPolicyGroup"), ("TIMETRA-FILTER-MIB", "tFilterNotificationsGroup"), ("TIMETRA-FILTER-MIB", "tTodPolicies77450V5v0Group"), ("TIMETRA-FILTER-MIB", "tToDPoliciesV5v0NotifyGroup"), ("TIMETRA-FILTER-MIB", "tFilterLogV5v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tFilter7450V6v0Compliance = tFilter7450V6v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tFilter7450V6v0Compliance.setDescription('The compliance statement for management of Filter features on Alcatel 7450 ESS series systems release R5.0.')
tFilter77x0V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 1, 9)).setObjects(("TIMETRA-FILTER-MIB", "tFilterScalarGroup"), ("TIMETRA-FILTER-MIB", "tIPFilterV6v0Group"), ("TIMETRA-FILTER-MIB", "tMacFilterV6v0Group"), ("TIMETRA-FILTER-MIB", "tFilterLogGroup"), ("TIMETRA-FILTER-MIB", "tFilterRedirectPolicyGroup"), ("TIMETRA-FILTER-MIB", "tFilterNotificationsGroup"), ("TIMETRA-FILTER-MIB", "tIPv6FilterV6v0Group"), ("TIMETRA-FILTER-MIB", "tTodPolicies77x0V5v0Group"), ("TIMETRA-FILTER-MIB", "tToDPoliciesV5v0NotifyGroup"), ("TIMETRA-FILTER-MIB", "tFilterLogV5v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tFilter77x0V6v0Compliance = tFilter77x0V6v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tFilter77x0V6v0Compliance.setDescription('The compliance statement for management of Filter features on Alcatel 77x0 SPR/SR series systems release R5.0.')
tFilter7450V8v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 1, 10)).setObjects(("TIMETRA-FILTER-MIB", "tFilterScalarGroup"), ("TIMETRA-FILTER-MIB", "tIPFilterV8v0Group"), ("TIMETRA-FILTER-MIB", "tFilterLogGroup"), ("TIMETRA-FILTER-MIB", "tFilterLogV5v0Group"), ("TIMETRA-FILTER-MIB", "tFilterRedirectPolicyGroup"), ("TIMETRA-FILTER-MIB", "tFilterNotificationsV8v0Group"), ("TIMETRA-FILTER-MIB", "tFilterNotificationObjV8v0Group"), ("TIMETRA-FILTER-MIB", "tTodPolicies77450V5v0Group"), ("TIMETRA-FILTER-MIB", "tToDPoliciesV5v0NotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tFilter7450V8v0Compliance = tFilter7450V8v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tFilter7450V8v0Compliance.setDescription('The compliance statement for management of Filter features on Alcatel 7450 ESS series systems release R8.0.')
tFilter77x0V8v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 1, 11)).setObjects(("TIMETRA-FILTER-MIB", "tFilterScalarGroup"), ("TIMETRA-FILTER-MIB", "tIPFilterV8v0Group"), ("TIMETRA-FILTER-MIB", "tMacFilterV8v0Group"), ("TIMETRA-FILTER-MIB", "tFilterLogGroup"), ("TIMETRA-FILTER-MIB", "tFilterLogV5v0Group"), ("TIMETRA-FILTER-MIB", "tFilterRedirectPolicyGroup"), ("TIMETRA-FILTER-MIB", "tFilterNotificationsV8v0Group"), ("TIMETRA-FILTER-MIB", "tFilterNotificationObjV8v0Group"), ("TIMETRA-FILTER-MIB", "tIPv6FilterV8v0Group"), ("TIMETRA-FILTER-MIB", "tTodPolicies77x0V5v0Group"), ("TIMETRA-FILTER-MIB", "tToDPoliciesV5v0NotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tFilter77x0V8v0Compliance = tFilter77x0V8v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tFilter77x0V8v0Compliance.setDescription('The compliance statement for management of Filter features on Alcatel 77x0 SPR/SR series systems release R8.0.')
tFilter7xxxV9v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 1, 12)).setObjects(("TIMETRA-FILTER-MIB", "tFilterScalarGroup"), ("TIMETRA-FILTER-MIB", "tIPFilterV9v0Group"), ("TIMETRA-FILTER-MIB", "tMacFilterV8v0Group"), ("TIMETRA-FILTER-MIB", "tFilterLogGroup"), ("TIMETRA-FILTER-MIB", "tFilterLogV5v0Group"), ("TIMETRA-FILTER-MIB", "tFilterRedirectPolicyGroup"), ("TIMETRA-FILTER-MIB", "tFilterNotificationsV9v0Group"), ("TIMETRA-FILTER-MIB", "tFilterNotificationObjV9v0Group"), ("TIMETRA-FILTER-MIB", "tIPv6FilterV8v0Group"), ("TIMETRA-FILTER-MIB", "tTodPolicies77x0V5v0Group"), ("TIMETRA-FILTER-MIB", "tToDPoliciesV5v0NotifyGroup"), ("TIMETRA-FILTER-MIB", "tMacFilterVidFilteringV9v0Group"), ("TIMETRA-FILTER-MIB", "tDhcpFilterV9v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tFilter7xxxV9v0Compliance = tFilter7xxxV9v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tFilter7xxxV9v0Compliance.setDescription('The compliance statement for management of Filter features on Alcatel 77x0 SPR/SR series systems release R9.0.')
tFilter7xxxV10v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 1, 13)).setObjects(("TIMETRA-FILTER-MIB", "tFilterScalarGroup"), ("TIMETRA-FILTER-MIB", "tIPFilterV9v0Group"), ("TIMETRA-FILTER-MIB", "tMacFilterV8v0Group"), ("TIMETRA-FILTER-MIB", "tFilterLogGroup"), ("TIMETRA-FILTER-MIB", "tFilterLogV5v0Group"), ("TIMETRA-FILTER-MIB", "tFilterRedirectPolicyGroup"), ("TIMETRA-FILTER-MIB", "tFilterNotificationsV9v0Group"), ("TIMETRA-FILTER-MIB", "tFilterNotificationObjV9v0Group"), ("TIMETRA-FILTER-MIB", "tIPv6FilterV10v0Group"), ("TIMETRA-FILTER-MIB", "tTodPolicies77x0V5v0Group"), ("TIMETRA-FILTER-MIB", "tToDPoliciesV5v0NotifyGroup"), ("TIMETRA-FILTER-MIB", "tMacFilterVidFilteringV9v0Group"), ("TIMETRA-FILTER-MIB", "tDhcpFilterV10v0Group"), ("TIMETRA-FILTER-MIB", "tFilterNameV10v0Group"), ("TIMETRA-FILTER-MIB", "tLiFilterV10v0Group"), ("TIMETRA-FILTER-MIB", "tFilterPrefixListV10v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tFilter7xxxV10v0Compliance = tFilter7xxxV10v0Compliance.setStatus('current')
if mibBuilder.loadTexts: tFilter7xxxV10v0Compliance.setDescription('The compliance statement for management of Filter features on Alcatel 77x0 SPR/SR series systems release R10.0.')
tFilterLogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 2, 3)).setObjects(("TIMETRA-FILTER-MIB", "tFilterLogRowStatus"), ("TIMETRA-FILTER-MIB", "tFilterLogDestination"), ("TIMETRA-FILTER-MIB", "tFilterLogDescription"), ("TIMETRA-FILTER-MIB", "tFilterLogMaxNumEntries"), ("TIMETRA-FILTER-MIB", "tFilterLogSysLogId"), ("TIMETRA-FILTER-MIB", "tFilterLogFileId"), ("TIMETRA-FILTER-MIB", "tFilterLogStopOnFull"), ("TIMETRA-FILTER-MIB", "tFilterLogEnabled"), ("TIMETRA-FILTER-MIB", "tFilterLogMaxInstances"), ("TIMETRA-FILTER-MIB", "tFilterLogInstances"), ("TIMETRA-FILTER-MIB", "tFilterLogBindings"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tFilterLogGroup = tFilterLogGroup.setStatus('current')
if mibBuilder.loadTexts: tFilterLogGroup.setDescription('The group of objects supporting management of filter log objects on Alcatel-Lucent SROS series systems.')
tFilterRedirectPolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 2, 4)).setObjects(("TIMETRA-FILTER-MIB", "tFilterRPRowStatus"), ("TIMETRA-FILTER-MIB", "tFilterRPDescription"), ("TIMETRA-FILTER-MIB", "tFilterRPAdminState"), ("TIMETRA-FILTER-MIB", "tFilterRPActiveDest"), ("TIMETRA-FILTER-MIB", "tFilterRDRowStatus"), ("TIMETRA-FILTER-MIB", "tFilterRDDescription"), ("TIMETRA-FILTER-MIB", "tFilterRDAdminPriority"), ("TIMETRA-FILTER-MIB", "tFilterRDOperPriority"), ("TIMETRA-FILTER-MIB", "tFilterRDAdminState"), ("TIMETRA-FILTER-MIB", "tFilterRDOperState"), ("TIMETRA-FILTER-MIB", "tFilterRSTRowStatus"), ("TIMETRA-FILTER-MIB", "tFilterRSTOID"), ("TIMETRA-FILTER-MIB", "tFilterRSTCommunity"), ("TIMETRA-FILTER-MIB", "tFilterRSTSNMPVersion"), ("TIMETRA-FILTER-MIB", "tFilterRSTInterval"), ("TIMETRA-FILTER-MIB", "tFilterRSTTimeout"), ("TIMETRA-FILTER-MIB", "tFilterRSTDropCount"), ("TIMETRA-FILTER-MIB", "tFilterRSTHoldDown"), ("TIMETRA-FILTER-MIB", "tFilterRSTHoldDownRemain"), ("TIMETRA-FILTER-MIB", "tFilterRSTLastActionTime"), ("TIMETRA-FILTER-MIB", "tFilterRSTLastOID"), ("TIMETRA-FILTER-MIB", "tFilterRSTLastType"), ("TIMETRA-FILTER-MIB", "tFilterRSTLastCounter32Val"), ("TIMETRA-FILTER-MIB", "tFilterRSTLastUnsigned32Val"), ("TIMETRA-FILTER-MIB", "tFilterRSTLastTimeTicksVal"), ("TIMETRA-FILTER-MIB", "tFilterRSTLastInt32Val"), ("TIMETRA-FILTER-MIB", "tFilterRSTLastOctetStringVal"), ("TIMETRA-FILTER-MIB", "tFilterRSTLastIpAddressVal"), ("TIMETRA-FILTER-MIB", "tFilterRSTLastOidVal"), ("TIMETRA-FILTER-MIB", "tFilterRSTLastCounter64Val"), ("TIMETRA-FILTER-MIB", "tFilterRSTLastOpaqueVal"), ("TIMETRA-FILTER-MIB", "tFilterRSTLastAction"), ("TIMETRA-FILTER-MIB", "tFilterRSTLastPrioChange"), ("TIMETRA-FILTER-MIB", "tFilterRSTNextRespIndex"), ("TIMETRA-FILTER-MIB", "tFilterRSTRespRowStatus"), ("TIMETRA-FILTER-MIB", "tFilterRSTRespAction"), ("TIMETRA-FILTER-MIB", "tFilterRSTRespPrioChange"), ("TIMETRA-FILTER-MIB", "tFilterRSTRespOID"), ("TIMETRA-FILTER-MIB", "tFilterRSTRespType"), ("TIMETRA-FILTER-MIB", "tFilterRSTCounter32Val"), ("TIMETRA-FILTER-MIB", "tFilterRSTUnsigned32Val"), ("TIMETRA-FILTER-MIB", "tFilterRSTTimeTicksVal"), ("TIMETRA-FILTER-MIB", "tFilterRSTInt32Val"), ("TIMETRA-FILTER-MIB", "tFilterRSTOctetStringVal"), ("TIMETRA-FILTER-MIB", "tFilterRSTIpAddressVal"), ("TIMETRA-FILTER-MIB", "tFilterRSTOidVal"), ("TIMETRA-FILTER-MIB", "tFilterRSTCounter64Val"), ("TIMETRA-FILTER-MIB", "tFilterRSTOpaqueVal"), ("TIMETRA-FILTER-MIB", "tFilterRUTRowStatus"), ("TIMETRA-FILTER-MIB", "tFilterRUTURL"), ("TIMETRA-FILTER-MIB", "tFilterRUTHTTPVersion"), ("TIMETRA-FILTER-MIB", "tFilterRUTInterval"), ("TIMETRA-FILTER-MIB", "tFilterRUTTimeout"), ("TIMETRA-FILTER-MIB", "tFilterRUTDropCount"), ("TIMETRA-FILTER-MIB", "tFilterRUTHoldDown"), ("TIMETRA-FILTER-MIB", "tFilterRUTHoldDownRemain"), ("TIMETRA-FILTER-MIB", "tFilterRUTLastActionTime"), ("TIMETRA-FILTER-MIB", "tFilterRUTLastRetCode"), ("TIMETRA-FILTER-MIB", "tFilterRUTLastAction"), ("TIMETRA-FILTER-MIB", "tFilterRUTLastPrioChange"), ("TIMETRA-FILTER-MIB", "tFilterRUTRespRowStatus"), ("TIMETRA-FILTER-MIB", "tFilterRUTRespAction"), ("TIMETRA-FILTER-MIB", "tFilterRUTRespPrioChange"), ("TIMETRA-FILTER-MIB", "tFilterRPTRowStatus"), ("TIMETRA-FILTER-MIB", "tFilterRPTInterval"), ("TIMETRA-FILTER-MIB", "tFilterRPTTimeout"), ("TIMETRA-FILTER-MIB", "tFilterRPTDropCount"), ("TIMETRA-FILTER-MIB", "tFilterRPTHoldDown"), ("TIMETRA-FILTER-MIB", "tFilterRPTHoldDownRemain"), ("TIMETRA-FILTER-MIB", "tFilterRPTLastActionTime"), ("TIMETRA-FILTER-MIB", "tFilterRPTLastAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tFilterRedirectPolicyGroup = tFilterRedirectPolicyGroup.setStatus('current')
if mibBuilder.loadTexts: tFilterRedirectPolicyGroup.setDescription('The group of objects supporting management of filter redirect policy objects on Alcatel-Lucent SROS series systems.')
tFilterScalarGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 2, 7)).setObjects(("TIMETRA-FILTER-MIB", "tFilterDomainLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tFilterScalarGroup = tFilterScalarGroup.setStatus('current')
if mibBuilder.loadTexts: tFilterScalarGroup.setDescription('The group of objects supporting management of filter scalar objects on Alcatel-Lucent SROS series systems.')
tFilterNotificationObjGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 2, 8)).setObjects(("TIMETRA-FILTER-MIB", "tFilterPBRDropReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tFilterNotificationObjGroup = tFilterNotificationObjGroup.setStatus('obsolete')
if mibBuilder.loadTexts: tFilterNotificationObjGroup.setDescription('The group of objects supporting management of filter notification objects on Alcatel-Lucent SROS series systems.')
tFilterNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 2, 9)).setObjects(("TIMETRA-FILTER-MIB", "tIPFilterPBRPacketsDrop"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tFilterNotificationsGroup = tFilterNotificationsGroup.setStatus('obsolete')
if mibBuilder.loadTexts: tFilterNotificationsGroup.setDescription('The group of notifications supporting management of filter notifications on Alcatel-Lucent SROS series systems.')
tIPv6FilterV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 2, 11)).setObjects(("TIMETRA-FILTER-MIB", "tIPv6FilterRowStatus"), ("TIMETRA-FILTER-MIB", "tIPv6FilterScope"), ("TIMETRA-FILTER-MIB", "tIPv6FilterDescription"), ("TIMETRA-FILTER-MIB", "tIPv6FilterDefaultAction"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsRowStatus"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsLogId"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsDescription"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsAction"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsForwardNH"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsForwardNHIndirect"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsRemarkDSCP"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsRemarkDSCPMask"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsRemarkDot1p"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsSourceIpAddr"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsSourceIpMask"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsDestinationIpAddr"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsDestinationIpMask"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsNextHeader"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsSourcePortValue1"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsSourcePortValue2"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsSourcePortOperator"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsDestPortValue1"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsDestPortValue2"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsDestPortOperator"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsDSCP"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsTcpSyn"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsTcpAck"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsIcmpCode"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsIcmpType"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsCflowdSample"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsCflowdIfSample"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsForwardNHInterface"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsIngressHitCount"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsEgressHitCount"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsLogInstantiated"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsForwardRedPlcy"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsActiveDest"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tIPv6FilterV4v0Group = tIPv6FilterV4v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tIPv6FilterV4v0Group.setDescription('The group of objects supporting management of IPv6 filter objects on Alcatel-Lucent SROS series systems.')
tIPFilterV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 2, 12)).setObjects(("TIMETRA-FILTER-MIB", "tIPFilterRowStatus"), ("TIMETRA-FILTER-MIB", "tIPFilterScope"), ("TIMETRA-FILTER-MIB", "tIPFilterDescription"), ("TIMETRA-FILTER-MIB", "tIPFilterDefaultAction"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsRowStatus"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsLogId"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDescription"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsAction"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsForwardNH"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsForwardNHIndirect"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsRemarkDSCP"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsRemarkDSCPMask"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsRemarkDot1p"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsSourceIpAddr"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsSourceIpMask"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDestinationIpAddr"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDestinationIpMask"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsProtocol"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsSourcePortValue1"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsSourcePortValue2"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsSourcePortOperator"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDestPortValue1"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDestPortValue2"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDestPortOperator"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDSCP"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsFragment"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsOptionPresent"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsIpOptionValue"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsIpOptionMask"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsMultipleOption"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsTcpSyn"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsTcpAck"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsIcmpCode"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsIcmpType"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsCflowdSample"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsCflowdIfSample"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsForwardNHInterface"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsIngressHitCount"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsEgressHitCount"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsLogInstantiated"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsForwardRedPlcy"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsActiveDest"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsFwdSvcId"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsFwdSapPortId"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsFwdSapEncapVal"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsFwdSdpBind"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsRedirectURL"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tIPFilterV4v0Group = tIPFilterV4v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tIPFilterV4v0Group.setDescription('The group of objects supporting IP Filters on Alcatel 7x50 ESS/SR series systems 4.0 release.')
tMacFilterV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 2, 13)).setObjects(("TIMETRA-FILTER-MIB", "tMacFilterRowStatus"), ("TIMETRA-FILTER-MIB", "tMacFilterScope"), ("TIMETRA-FILTER-MIB", "tMacFilterDescription"), ("TIMETRA-FILTER-MIB", "tMacFilterDefaultAction"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsRowStatus"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsLogId"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsDescription"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsAction"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsFrameType"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsSrcMAC"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsSrcMACMask"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsDstMAC"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsDstMACMask"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsDot1pValue"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsDot1pMask"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsEtherType"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsDsap"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsDsapMask"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsSsap"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsSsapMask"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsSnapPid"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsSnapOui"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsIngressHitCount"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsEgressHitCount"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsLogInstantiated"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsFwdSvcId"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsFwdSapPortId"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsFwdSapEncapVal"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsFwdSdpBind"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsRedirectURL"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tMacFilterV4v0Group = tMacFilterV4v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tMacFilterV4v0Group.setDescription('The group of objects supporting management of mac filter objects on Alcatel-Lucent SROS series systems 4.0 release.')
tTodPoliciesV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 2, 14)).setObjects(("TIMETRA-FILTER-MIB", "tIPFilterParamsTimeRangeName"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsTimeRangeState"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsTimeRangeName"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsTimeRangeState"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsTimeRangeName"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsTimeRangeState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tTodPoliciesV4v0Group = tTodPoliciesV4v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tTodPoliciesV4v0Group.setDescription('The group of objects supporting management of time of day policy related objects on Alcatel-Lucent SROS series systems 4.0 release.')
tmnxFilterObsoleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 2, 15)).setObjects(("TIMETRA-FILTER-MIB", "tAutoIPFilterEntrySourceIpMask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxFilterObsoleteGroup = tmnxFilterObsoleteGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxFilterObsoleteGroup.setDescription('The group of objects in TIMETRA-FILTER-MIB which are obsoleted.')
tToDPoliciesV5v0NotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 2, 16)).setObjects(("TIMETRA-FILTER-MIB", "tFilterEntryActivationFailed"), ("TIMETRA-FILTER-MIB", "tFilterEntryActivationRestored"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tToDPoliciesV5v0NotifyGroup = tToDPoliciesV5v0NotifyGroup.setStatus('current')
if mibBuilder.loadTexts: tToDPoliciesV5v0NotifyGroup.setDescription('The group of notifications generated by the time of time of day policy feature on Alcatel-Lucent SROS series systems 5.0 release.')
tIPFilterV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 2, 17)).setObjects(("TIMETRA-FILTER-MIB", "tIPFilterRowStatus"), ("TIMETRA-FILTER-MIB", "tIPFilterScope"), ("TIMETRA-FILTER-MIB", "tIPFilterDescription"), ("TIMETRA-FILTER-MIB", "tIPFilterDefaultAction"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsRowStatus"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsLogId"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDescription"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsAction"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsForwardNH"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsForwardNHIndirect"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsRemarkDSCP"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsRemarkDSCPMask"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsRemarkDot1p"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsSourceIpAddr"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsSourceIpMask"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDestinationIpAddr"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDestinationIpMask"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsProtocol"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsSourcePortValue1"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsSourcePortValue2"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsSourcePortOperator"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDestPortValue1"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDestPortValue2"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDestPortOperator"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDSCP"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsFragment"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsOptionPresent"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsIpOptionValue"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsIpOptionMask"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsMultipleOption"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsTcpSyn"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsTcpAck"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsIcmpCode"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsIcmpType"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsCflowdSample"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsCflowdIfSample"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsForwardNHInterface"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsIngressHitCount"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsEgressHitCount"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsLogInstantiated"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsForwardRedPlcy"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsActiveDest"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsFwdSvcId"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsFwdSapPortId"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsFwdSapEncapVal"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsFwdSdpBind"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsRedirectURL"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsSrcIpFullMask"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDestIpFullMask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tIPFilterV5v0Group = tIPFilterV5v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tIPFilterV5v0Group.setDescription('The group of objects supporting IP Filters on Alcatel 7x50 ESS/SR series systems 5.0 release.')
tFilterLogV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 2, 18)).setObjects(("TIMETRA-FILTER-MIB", "tFilterLogSummaryEnabled"), ("TIMETRA-FILTER-MIB", "tFilterLogSummaryCrit1"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tFilterLogV5v0Group = tFilterLogV5v0Group.setStatus('current')
if mibBuilder.loadTexts: tFilterLogV5v0Group.setDescription('The group of objects supporting Filter Log Summarization on Alcatel 7x50 ESS/SR series systems 5.0 release.')
tTodPolicies77450V5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 2, 19)).setObjects(("TIMETRA-FILTER-MIB", "tIPFilterParamsTimeRangeName"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsTimeRangeState"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsTimeRangeName"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsTimeRangeState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tTodPolicies77450V5v0Group = tTodPolicies77450V5v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tTodPolicies77450V5v0Group.setDescription('The group of objects supporting management of time of day policy related objects on Alcatel 7450 ESS series systems 5.0 release. This group was made obsolete for Alcatel SROS Release 9.0.')
tTodPolicies77x0V5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 2, 20)).setObjects(("TIMETRA-FILTER-MIB", "tIPFilterParamsTimeRangeName"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsTimeRangeState"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsTimeRangeName"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsTimeRangeState"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsTimeRangeName"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsTimeRangeState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tTodPolicies77x0V5v0Group = tTodPolicies77x0V5v0Group.setStatus('current')
if mibBuilder.loadTexts: tTodPolicies77x0V5v0Group.setDescription('The group of objects supporting management of time of day policy related objects on Alcatel 77x0 series systems 5.0 release.')
tFilterNotificationObjV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 2, 21)).setObjects(("TIMETRA-FILTER-MIB", "tFilterPBRDropReason"), ("TIMETRA-FILTER-MIB", "tFilterParmRow"), ("TIMETRA-FILTER-MIB", "tFilterAlarmDescription"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tFilterNotificationObjV5v0Group = tFilterNotificationObjV5v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tFilterNotificationObjV5v0Group.setDescription('The group of objects supporting management of filter notification objects on Alcatel-Lucent SROS series systems.')
tIPFilterV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 2, 22)).setObjects(("TIMETRA-FILTER-MIB", "tIPFilterRowStatus"), ("TIMETRA-FILTER-MIB", "tIPFilterScope"), ("TIMETRA-FILTER-MIB", "tIPFilterDescription"), ("TIMETRA-FILTER-MIB", "tIPFilterDefaultAction"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsRowStatus"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsLogId"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDescription"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsAction"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsForwardNH"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsForwardNHIndirect"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsRemarkDSCP"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsRemarkDSCPMask"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsRemarkDot1p"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsSourceIpAddr"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsSourceIpMask"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDestinationIpAddr"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDestinationIpMask"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsProtocol"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsSourcePortValue1"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsSourcePortValue2"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsSourcePortOperator"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDestPortValue1"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDestPortValue2"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDestPortOperator"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDSCP"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsFragment"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsOptionPresent"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsIpOptionValue"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsIpOptionMask"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsMultipleOption"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsTcpSyn"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsTcpAck"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsIcmpCode"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsIcmpType"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsCflowdSample"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsCflowdIfSample"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsForwardNHInterface"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsIngressHitCount"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsEgressHitCount"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsLogInstantiated"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsForwardRedPlcy"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsActiveDest"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsFwdSvcId"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsFwdSapPortId"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsFwdSapEncapVal"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsFwdSdpBind"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsRedirectURL"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsSrcIpFullMask"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDestIpFullMask"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsIngrHitByteCount"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsEgrHitByteCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tIPFilterV6v0Group = tIPFilterV6v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tIPFilterV6v0Group.setDescription('The group of objects supporting IP Filters on Alcatel 7x50 ESS/SR series systems 6.0 release.')
tMacFilterV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 2, 23)).setObjects(("TIMETRA-FILTER-MIB", "tMacFilterRowStatus"), ("TIMETRA-FILTER-MIB", "tMacFilterScope"), ("TIMETRA-FILTER-MIB", "tMacFilterDescription"), ("TIMETRA-FILTER-MIB", "tMacFilterDefaultAction"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsRowStatus"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsLogId"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsDescription"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsAction"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsFrameType"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsSrcMAC"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsSrcMACMask"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsDstMAC"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsDstMACMask"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsDot1pValue"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsDot1pMask"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsEtherType"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsDsap"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsDsapMask"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsSsap"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsSsapMask"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsSnapPid"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsSnapOui"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsIngressHitCount"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsEgressHitCount"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsLogInstantiated"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsFwdSvcId"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsFwdSapPortId"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsFwdSapEncapVal"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsFwdSdpBind"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsRedirectURL"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsIngrHitByteCount"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsEgrHitByteCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tMacFilterV6v0Group = tMacFilterV6v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tMacFilterV6v0Group.setDescription('The group of objects supporting management of mac filter objects on Alcatel-Lucent SROS series systems 6.0 release.')
tIPv6FilterV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 2, 24)).setObjects(("TIMETRA-FILTER-MIB", "tIPv6FilterRowStatus"), ("TIMETRA-FILTER-MIB", "tIPv6FilterScope"), ("TIMETRA-FILTER-MIB", "tIPv6FilterDescription"), ("TIMETRA-FILTER-MIB", "tIPv6FilterDefaultAction"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsRowStatus"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsLogId"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsDescription"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsAction"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsForwardNH"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsForwardNHIndirect"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsRemarkDSCP"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsRemarkDSCPMask"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsRemarkDot1p"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsSourceIpAddr"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsSourceIpMask"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsDestinationIpAddr"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsDestinationIpMask"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsNextHeader"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsSourcePortValue1"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsSourcePortValue2"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsSourcePortOperator"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsDestPortValue1"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsDestPortValue2"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsDestPortOperator"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsDSCP"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsTcpSyn"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsTcpAck"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsIcmpCode"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsIcmpType"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsCflowdSample"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsCflowdIfSample"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsForwardNHInterface"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsIngressHitCount"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsEgressHitCount"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsLogInstantiated"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsForwardRedPlcy"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsActiveDest"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsIngrHitByteCount"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsEgrHitByteCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tIPv6FilterV6v0Group = tIPv6FilterV6v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tIPv6FilterV6v0Group.setDescription('The group of objects supporting management of IPv6 filter objects on Alcatel-Lucent SROS series systems.')
tIPFilterV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 2, 25)).setObjects(("TIMETRA-FILTER-MIB", "tIPFilterRowStatus"), ("TIMETRA-FILTER-MIB", "tIPFilterScope"), ("TIMETRA-FILTER-MIB", "tIPFilterDescription"), ("TIMETRA-FILTER-MIB", "tIPFilterDefaultAction"), ("TIMETRA-FILTER-MIB", "tIPFilterRadiusInsertPt"), ("TIMETRA-FILTER-MIB", "tIPFilterRadiusInsertSize"), ("TIMETRA-FILTER-MIB", "tIPFilterCreditCntrlInsertPt"), ("TIMETRA-FILTER-MIB", "tIPFilterCreditCntrlInsertSize"), ("TIMETRA-FILTER-MIB", "tIPFilterSubInsertHighWmark"), ("TIMETRA-FILTER-MIB", "tIPFilterSubInsertLowWmark"), ("TIMETRA-FILTER-MIB", "tIpFilterCreditCntrlNbrInsertd"), ("TIMETRA-FILTER-MIB", "tIpFilterRadiusNbrInsertd"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsRowStatus"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsLogId"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDescription"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsAction"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsForwardNH"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsForwardNHIndirect"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsRemarkDSCP"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsRemarkDSCPMask"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsRemarkDot1p"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsSourceIpAddr"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsSourceIpMask"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDestinationIpAddr"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDestinationIpMask"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsProtocol"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsSourcePortValue1"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsSourcePortValue2"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsSourcePortOperator"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDestPortValue1"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDestPortValue2"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDestPortOperator"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDSCP"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsFragment"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsOptionPresent"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsIpOptionValue"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsIpOptionMask"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsMultipleOption"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsTcpSyn"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsTcpAck"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsIcmpCode"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsIcmpType"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsCflowdSample"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsCflowdIfSample"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsForwardNHInterface"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsIngressHitCount"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsEgressHitCount"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsLogInstantiated"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsForwardRedPlcy"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsActiveDest"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsFwdSvcId"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsFwdSapPortId"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsFwdSapEncapVal"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsFwdSdpBind"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsRedirectURL"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsSrcIpFullMask"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDestIpFullMask"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsIngrHitByteCount"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsEgrHitByteCount"), ("TIMETRA-FILTER-MIB", "tFltrGrpInsrtdEntriesFilterType"), ("TIMETRA-FILTER-MIB", "tFltrGrpInsrtdEntriesFilterId"), ("TIMETRA-FILTER-MIB", "tFltrGrpInsrtdEntriesApplication"), ("TIMETRA-FILTER-MIB", "tFltrGrpInsrtdEntriesLocation"), ("TIMETRA-FILTER-MIB", "tFltrGrpInsrtdEntriesResult"), ("TIMETRA-FILTER-MIB", "tFltrGrpInsrtdEntriesFeedback"), ("TIMETRA-FILTER-MIB", "tFltrGrpInsrtdEntriesExecute"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tIPFilterV8v0Group = tIPFilterV8v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tIPFilterV8v0Group.setDescription('The group of objects supporting IP Filters on Alcatel 7x50 ESS/SR series systems 8.0 release.')
tIPv6FilterV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 2, 26)).setObjects(("TIMETRA-FILTER-MIB", "tIPv6FilterRowStatus"), ("TIMETRA-FILTER-MIB", "tIPv6FilterScope"), ("TIMETRA-FILTER-MIB", "tIPv6FilterDescription"), ("TIMETRA-FILTER-MIB", "tIPv6FilterDefaultAction"), ("TIMETRA-FILTER-MIB", "tIPv6FilterRadiusInsertPt"), ("TIMETRA-FILTER-MIB", "tIPv6FilterRadiusInsertSize"), ("TIMETRA-FILTER-MIB", "tIPv6FilterCreditCntrlInsertPt"), ("TIMETRA-FILTER-MIB", "tIPv6FilterCreditCntrlInsertSize"), ("TIMETRA-FILTER-MIB", "tIPv6FilterSubInsertHighWmark"), ("TIMETRA-FILTER-MIB", "tIPv6FilterSubInsertLowWmark"), ("TIMETRA-FILTER-MIB", "tIpv6FilterCreditCntrlNbrInsertd"), ("TIMETRA-FILTER-MIB", "tIpv6FilterRadiusNbrInsertd"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsRowStatus"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsLogId"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsDescription"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsAction"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsForwardNH"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsForwardNHIndirect"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsRemarkDSCP"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsRemarkDSCPMask"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsRemarkDot1p"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsSourceIpAddr"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsSourceIpMask"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsDestinationIpAddr"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsDestinationIpMask"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsNextHeader"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsSourcePortValue1"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsSourcePortValue2"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsSourcePortOperator"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsDestPortValue1"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsDestPortValue2"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsDestPortOperator"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsDSCP"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsTcpSyn"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsTcpAck"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsIcmpCode"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsIcmpType"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsCflowdSample"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsCflowdIfSample"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsForwardNHInterface"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsIngressHitCount"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsEgressHitCount"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsLogInstantiated"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsForwardRedPlcy"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsActiveDest"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsIngrHitByteCount"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsEgrHitByteCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tIPv6FilterV8v0Group = tIPv6FilterV8v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tIPv6FilterV8v0Group.setDescription('The group of objects supporting management of IPv6 filter objects on Alcatel-Lucent SROS series systems.')
tFilterNotificationObjV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 2, 27)).setObjects(("TIMETRA-FILTER-MIB", "tFilterPBRDropReason"), ("TIMETRA-FILTER-MIB", "tFilterParmRow"), ("TIMETRA-FILTER-MIB", "tFilterAlarmDescription"), ("TIMETRA-FILTER-MIB", "tFilterId"), ("TIMETRA-FILTER-MIB", "tFilterType"), ("TIMETRA-FILTER-MIB", "tFilterSubInsSpaceOwner"), ("TIMETRA-FILTER-MIB", "tFilterThresholdReached"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tFilterNotificationObjV8v0Group = tFilterNotificationObjV8v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tFilterNotificationObjV8v0Group.setDescription('The group of objects supporting management of filter notification objects on Alcatel-Lucent SROS series systems.')
tFilterNotificationsV8v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 2, 28)).setObjects(("TIMETRA-FILTER-MIB", "tIPFilterPBRPacketsDrop"), ("TIMETRA-FILTER-MIB", "tFilterSubInsSpaceAlarmRaised"), ("TIMETRA-FILTER-MIB", "tFilterSubInsSpaceAlarmCleared"), ("TIMETRA-FILTER-MIB", "tFilterSubInsFltrEntryDropped"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tFilterNotificationsV8v0Group = tFilterNotificationsV8v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tFilterNotificationsV8v0Group.setDescription('The group of notifications supporting management of filter notifications on Alcatel-Lucent SROS series systems.')
tMacFilterV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 2, 29)).setObjects(("TIMETRA-FILTER-MIB", "tMacFilterRowStatus"), ("TIMETRA-FILTER-MIB", "tMacFilterScope"), ("TIMETRA-FILTER-MIB", "tMacFilterDescription"), ("TIMETRA-FILTER-MIB", "tMacFilterDefaultAction"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsRowStatus"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsLogId"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsDescription"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsAction"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsFrameType"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsSrcMAC"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsSrcMACMask"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsDstMAC"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsDstMACMask"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsDot1pValue"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsDot1pMask"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsEtherType"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsDsap"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsDsapMask"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsSsap"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsSsapMask"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsSnapPid"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsSnapOui"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsIngressHitCount"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsEgressHitCount"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsLogInstantiated"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsFwdSvcId"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsFwdSapPortId"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsFwdSapEncapVal"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsFwdSdpBind"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsRedirectURL"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsIngrHitByteCount"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsEgrHitByteCount"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsLowISID"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsHighISID"), ("TIMETRA-FILTER-MIB", "tMacFilterType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tMacFilterV8v0Group = tMacFilterV8v0Group.setStatus('current')
if mibBuilder.loadTexts: tMacFilterV8v0Group.setDescription('The group of objects supporting management of mac filter objects on Alcatel-Lucent SROS series systems 8.0 release.')
tMacFilterVidFilteringV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 2, 30)).setObjects(("TIMETRA-FILTER-MIB", "tMacFilterParamsInnerTagValue"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsInnerTagMask"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsOuterTagValue"), ("TIMETRA-FILTER-MIB", "tMacFilterParamsOuterTagMask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tMacFilterVidFilteringV9v0Group = tMacFilterVidFilteringV9v0Group.setStatus('current')
if mibBuilder.loadTexts: tMacFilterVidFilteringV9v0Group.setDescription('The group of objects supporting management of mac VID filtering objects on Alcatel-Lucent SROS series systems 9.0 release.')
tIPFilterV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 2, 31)).setObjects(("TIMETRA-FILTER-MIB", "tIPFilterRowStatus"), ("TIMETRA-FILTER-MIB", "tIPFilterScope"), ("TIMETRA-FILTER-MIB", "tIPFilterDescription"), ("TIMETRA-FILTER-MIB", "tIPFilterDefaultAction"), ("TIMETRA-FILTER-MIB", "tIPFilterRadiusInsertPt"), ("TIMETRA-FILTER-MIB", "tIPFilterRadiusInsertSize"), ("TIMETRA-FILTER-MIB", "tIPFilterCreditCntrlInsertPt"), ("TIMETRA-FILTER-MIB", "tIPFilterCreditCntrlInsertSize"), ("TIMETRA-FILTER-MIB", "tIPFilterSubInsertHighWmark"), ("TIMETRA-FILTER-MIB", "tIPFilterSubInsertLowWmark"), ("TIMETRA-FILTER-MIB", "tIpFilterCreditCntrlNbrInsertd"), ("TIMETRA-FILTER-MIB", "tIpFilterRadiusNbrInsertd"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsRowStatus"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsLogId"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDescription"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsAction"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsForwardNH"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsForwardNHIndirect"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsRemarkDSCP"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsRemarkDSCPMask"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsRemarkDot1p"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsSourceIpAddr"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsSourceIpMask"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDestinationIpAddr"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDestinationIpMask"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsProtocol"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsSourcePortValue1"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsSourcePortValue2"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsSourcePortOperator"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDestPortValue1"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDestPortValue2"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDestPortOperator"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDSCP"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsFragment"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsOptionPresent"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsIpOptionValue"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsIpOptionMask"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsMultipleOption"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsTcpSyn"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsTcpAck"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsIcmpCode"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsIcmpType"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsCflowdSample"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsCflowdIfSample"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsForwardNHInterface"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsIngressHitCount"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsEgressHitCount"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsLogInstantiated"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsForwardRedPlcy"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsActiveDest"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsFwdSvcId"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsFwdSapPortId"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsFwdSapEncapVal"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsFwdSdpBind"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsRedirectURL"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsSrcIpFullMask"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDestIpFullMask"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsIngrHitByteCount"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsEgrHitByteCount"), ("TIMETRA-FILTER-MIB", "tFltrGrpInsrtdEntriesFilterType"), ("TIMETRA-FILTER-MIB", "tFltrGrpInsrtdEntriesFilterId"), ("TIMETRA-FILTER-MIB", "tFltrGrpInsrtdEntriesApplication"), ("TIMETRA-FILTER-MIB", "tFltrGrpInsrtdEntriesLocation"), ("TIMETRA-FILTER-MIB", "tFltrGrpInsrtdEntriesResult"), ("TIMETRA-FILTER-MIB", "tFltrGrpInsrtdEntriesFeedback"), ("TIMETRA-FILTER-MIB", "tFltrGrpInsrtdEntriesExecute"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsFwdRtrId"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsSrcRouteOption"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tIPFilterV9v0Group = tIPFilterV9v0Group.setStatus('current')
if mibBuilder.loadTexts: tIPFilterV9v0Group.setDescription('The group of objects supporting IP Filters on Alcatel 7x50 ESS/SR series systems 9.0 release.')
tFilterNotificationsV9v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 2, 32)).setObjects(("TIMETRA-FILTER-MIB", "tIPFilterPBRPacketsDrop"), ("TIMETRA-FILTER-MIB", "tFilterSubInsSpaceAlarmRaised"), ("TIMETRA-FILTER-MIB", "tFilterSubInsSpaceAlarmCleared"), ("TIMETRA-FILTER-MIB", "tFilterSubInsFltrEntryDropped"), ("TIMETRA-FILTER-MIB", "tFilterBgpFlowSpecProblem"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tFilterNotificationsV9v0Group = tFilterNotificationsV9v0Group.setStatus('current')
if mibBuilder.loadTexts: tFilterNotificationsV9v0Group.setDescription('The group of notifications supporting management of filter notifications on Alcatel-Lucent SROS series systems.')
tFilterNotificationObjV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 2, 33)).setObjects(("TIMETRA-FILTER-MIB", "tFilterPBRDropReason"), ("TIMETRA-FILTER-MIB", "tFilterParmRow"), ("TIMETRA-FILTER-MIB", "tFilterAlarmDescription"), ("TIMETRA-FILTER-MIB", "tFilterId"), ("TIMETRA-FILTER-MIB", "tFilterType"), ("TIMETRA-FILTER-MIB", "tFilterSubInsSpaceOwner"), ("TIMETRA-FILTER-MIB", "tFilterThresholdReached"), ("TIMETRA-FILTER-MIB", "tFltrFlowSpecProblem"), ("TIMETRA-FILTER-MIB", "tFltrFlowSpecProblemDescription"), ("TIMETRA-FILTER-MIB", "tFltrFLowSpecNLRI"), ("TIMETRA-FILTER-MIB", "tFltrFlowSpecVrtrId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tFilterNotificationObjV9v0Group = tFilterNotificationObjV9v0Group.setStatus('current')
if mibBuilder.loadTexts: tFilterNotificationObjV9v0Group.setDescription('The group of objects supporting management of filter notification objects on Alcatel-Lucent SROS series systems.')
tDhcpFilterV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 2, 34)).setObjects(("TIMETRA-FILTER-MIB", "tDhcpFilterTableLastChanged"), ("TIMETRA-FILTER-MIB", "tDhcpFilterRowStatus"), ("TIMETRA-FILTER-MIB", "tDhcpFilterLastChanged"), ("TIMETRA-FILTER-MIB", "tDhcpFilterDescription"), ("TIMETRA-FILTER-MIB", "tDhcpFilterParamsTblLastChanged"), ("TIMETRA-FILTER-MIB", "tDhcpFilterParamsRowStatus"), ("TIMETRA-FILTER-MIB", "tDhcpFilterParamsLastChanged"), ("TIMETRA-FILTER-MIB", "tDhcpFilterParamsOptionNumber"), ("TIMETRA-FILTER-MIB", "tDhcpFilterParamsOptionMatch"), ("TIMETRA-FILTER-MIB", "tDhcpFilterParamsAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tDhcpFilterV9v0Group = tDhcpFilterV9v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tDhcpFilterV9v0Group.setDescription('The group of objects supporting DHCP Filters on Alcatel 7x50 ESS/SR series systems 9.0 release.')
tIPv6FilterV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 2, 35)).setObjects(("TIMETRA-FILTER-MIB", "tIPv6FilterRowStatus"), ("TIMETRA-FILTER-MIB", "tIPv6FilterScope"), ("TIMETRA-FILTER-MIB", "tIPv6FilterDescription"), ("TIMETRA-FILTER-MIB", "tIPv6FilterDefaultAction"), ("TIMETRA-FILTER-MIB", "tIPv6FilterRadiusInsertPt"), ("TIMETRA-FILTER-MIB", "tIPv6FilterRadiusInsertSize"), ("TIMETRA-FILTER-MIB", "tIPv6FilterCreditCntrlInsertPt"), ("TIMETRA-FILTER-MIB", "tIPv6FilterCreditCntrlInsertSize"), ("TIMETRA-FILTER-MIB", "tIPv6FilterSubInsertHighWmark"), ("TIMETRA-FILTER-MIB", "tIPv6FilterSubInsertLowWmark"), ("TIMETRA-FILTER-MIB", "tIpv6FilterCreditCntrlNbrInsertd"), ("TIMETRA-FILTER-MIB", "tIpv6FilterRadiusNbrInsertd"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsRowStatus"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsLogId"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsDescription"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsAction"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsForwardNH"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsForwardNHIndirect"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsRemarkDSCP"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsRemarkDSCPMask"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsRemarkDot1p"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsSourceIpAddr"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsSourceIpMask"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsDestinationIpAddr"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsDestinationIpMask"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsNextHeader"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsSourcePortValue1"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsSourcePortValue2"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsSourcePortOperator"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsDestPortValue1"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsDestPortValue2"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsDestPortOperator"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsDSCP"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsTcpSyn"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsTcpAck"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsIcmpCode"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsIcmpType"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsCflowdSample"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsCflowdIfSample"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsForwardNHInterface"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsIngressHitCount"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsEgressHitCount"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsLogInstantiated"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsForwardRedPlcy"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsActiveDest"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsIngrHitByteCount"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsEgrHitByteCount"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsFwdSvcId"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsFwdSapPortId"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsFwdSapEncapVal"), ("TIMETRA-FILTER-MIB", "tIPv6FilterParamsFwdSdpBind"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tIPv6FilterV10v0Group = tIPv6FilterV10v0Group.setStatus('current')
if mibBuilder.loadTexts: tIPv6FilterV10v0Group.setDescription('The group of objects supporting management of IPv6 filter objects on Alcatel-Lucent SROS series systems.')
tFilterNameV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 2, 36)).setObjects(("TIMETRA-FILTER-MIB", "tIpFilterName"), ("TIMETRA-FILTER-MIB", "tIpFilterNameId"), ("TIMETRA-FILTER-MIB", "tIpFilterNameLastChanged"), ("TIMETRA-FILTER-MIB", "tIpFilterNameRowStatus"), ("TIMETRA-FILTER-MIB", "tIpFilterNameTableLastChgd"), ("TIMETRA-FILTER-MIB", "tIpv6FilterName"), ("TIMETRA-FILTER-MIB", "tIpv6FilterNameId"), ("TIMETRA-FILTER-MIB", "tIpv6FilterNameLastChanged"), ("TIMETRA-FILTER-MIB", "tIpv6FilterNameRowStatus"), ("TIMETRA-FILTER-MIB", "tIpv6FilterNameTableLastChgd"), ("TIMETRA-FILTER-MIB", "tMacFilterName"), ("TIMETRA-FILTER-MIB", "tMacFilterNameId"), ("TIMETRA-FILTER-MIB", "tMacFilterNameLastChanged"), ("TIMETRA-FILTER-MIB", "tMacFilterNameRowStatus"), ("TIMETRA-FILTER-MIB", "tMacFilterNameTableLastChgd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tFilterNameV10v0Group = tFilterNameV10v0Group.setStatus('current')
if mibBuilder.loadTexts: tFilterNameV10v0Group.setDescription('The group of objects supporting management of filter-name objects on Alcatel-Lucent SROS series systems.')
tDhcpFilterV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 2, 37)).setObjects(("TIMETRA-FILTER-MIB", "tDhcpFilterTableLastChanged"), ("TIMETRA-FILTER-MIB", "tDhcpFilterRowStatus"), ("TIMETRA-FILTER-MIB", "tDhcpFilterLastChanged"), ("TIMETRA-FILTER-MIB", "tDhcpFilterDescription"), ("TIMETRA-FILTER-MIB", "tDhcpFilterParamsTblLastChanged"), ("TIMETRA-FILTER-MIB", "tDhcpFilterParamsRowStatus"), ("TIMETRA-FILTER-MIB", "tDhcpFilterParamsLastChanged"), ("TIMETRA-FILTER-MIB", "tDhcpFilterParamsOptionNumber"), ("TIMETRA-FILTER-MIB", "tDhcpFilterParamsOptionMatch"), ("TIMETRA-FILTER-MIB", "tDhcpFilterParamsAction"), ("TIMETRA-FILTER-MIB", "tDhcpFilterParamsOptionValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tDhcpFilterV10v0Group = tDhcpFilterV10v0Group.setStatus('current')
if mibBuilder.loadTexts: tDhcpFilterV10v0Group.setDescription('The group of objects supporting DHCP Filters on Alcatel 7x50 ESS/SR series systems 10.0 release.')
tLiFilterV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 2, 38)).setObjects(("TIMETRA-FILTER-MIB", "tLiReservedBlockRowStatus"), ("TIMETRA-FILTER-MIB", "tLiReservedBlockDescription"), ("TIMETRA-FILTER-MIB", "tLiReservedBlockStart"), ("TIMETRA-FILTER-MIB", "tLiReservedBlockSize"), ("TIMETRA-FILTER-MIB", "tLiReservedBlockLastChanged"), ("TIMETRA-FILTER-MIB", "tLiReservedBlockTableLastChanged"), ("TIMETRA-FILTER-MIB", "tLiReservedBlockFltrRowStatus"), ("TIMETRA-FILTER-MIB", "tLiReservedBlockFltrLastChanged"), ("TIMETRA-FILTER-MIB", "tLiReservedBlockFltrTableLastChg"), ("TIMETRA-FILTER-MIB", "tLiFilterDescription"), ("TIMETRA-FILTER-MIB", "tLiFilterRowStatus"), ("TIMETRA-FILTER-MIB", "tLiFilterLastChanged"), ("TIMETRA-FILTER-MIB", "tLiFilterTableLastChanged"), ("TIMETRA-FILTER-MIB", "tLiFilterAssociationRowStatus"), ("TIMETRA-FILTER-MIB", "tLiFilterAssociationLastChg"), ("TIMETRA-FILTER-MIB", "tLiFilterAssociationTableLastChg"), ("TIMETRA-FILTER-MIB", "tLiMacFilterParamsDescription"), ("TIMETRA-FILTER-MIB", "tLiMacFilterParamsDstMAC"), ("TIMETRA-FILTER-MIB", "tLiMacFilterParamsDstMACMask"), ("TIMETRA-FILTER-MIB", "tLiMacFilterParamsFrameType"), ("TIMETRA-FILTER-MIB", "tLiMacFilterParamsRowStatus"), ("TIMETRA-FILTER-MIB", "tLiMacFilterParamsSrcMAC"), ("TIMETRA-FILTER-MIB", "tLiMacFilterParamsSrcMACMask"), ("TIMETRA-FILTER-MIB", "tLiMacFilterParamsLastChanged"), ("TIMETRA-FILTER-MIB", "tLiMacFilterParamsTableLastChg"), ("TIMETRA-FILTER-MIB", "tLiMacFilterParamsIngrHitCount"), ("TIMETRA-FILTER-MIB", "tLiMacFilterParamsEgrHitCount"), ("TIMETRA-FILTER-MIB", "tLiMacFilterParamsIngrHitBytes"), ("TIMETRA-FILTER-MIB", "tLiMacFilterParamsEgrHitBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tLiFilterV10v0Group = tLiFilterV10v0Group.setStatus('current')
if mibBuilder.loadTexts: tLiFilterV10v0Group.setDescription('The group of objects supporting management of LI filter entries on Alcatel-Lucent SROS series systems 10.0 release.')
tFilterPrefixListV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 21, 2, 39)).setObjects(("TIMETRA-FILTER-MIB", "tFilterPrefixListTableLstChng"), ("TIMETRA-FILTER-MIB", "tFilterPrefixListRowStatus"), ("TIMETRA-FILTER-MIB", "tFilterPrefixListLastChanged"), ("TIMETRA-FILTER-MIB", "tFilterPrefixListDescription"), ("TIMETRA-FILTER-MIB", "tFilterPrefixListEntryTblLstChg"), ("TIMETRA-FILTER-MIB", "tFilterPrefixListEntryRowStatus"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsSrcIpPrefixList"), ("TIMETRA-FILTER-MIB", "tIPFilterParamsDstIpPrefixList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tFilterPrefixListV10v0Group = tFilterPrefixListV10v0Group.setStatus('current')
if mibBuilder.loadTexts: tFilterPrefixListV10v0Group.setDescription('The group of objects supporting management of IP prefix lists in IP filters on Alcatel-Lucent SROS series systems 10.0 release.')
mibBuilder.exportSymbols("TIMETRA-FILTER-MIB", tIPv6FilterV10v0Group=tIPv6FilterV10v0Group, tMacFilterParamsIndex=tMacFilterParamsIndex, tFilterNotifications=tFilterNotifications, tIPFilterRowStatus=tIPFilterRowStatus, tFilterRSTLastInt32Val=tFilterRSTLastInt32Val, tIPv6FilterParamsDestPortValue2=tIPv6FilterParamsDestPortValue2, tDhcpFilterTableLastChanged=tDhcpFilterTableLastChanged, tIPFilterParamsCflowdSample=tIPFilterParamsCflowdSample, tFilterRSTLastOpaqueVal=tFilterRSTLastOpaqueVal, TFilterActionOrDefault=TFilterActionOrDefault, tIPv6FilterParamsDescription=tIPv6FilterParamsDescription, tLiReservedBlockFltrIdEnd=tLiReservedBlockFltrIdEnd, tLiFilterName=tLiFilterName, tLiReservedBlockSize=tLiReservedBlockSize, tLiFilterAssociationTableLastChg=tLiFilterAssociationTableLastChg, tIPv6FilterSubInsertLowWmark=tIPv6FilterSubInsertLowWmark, tLiReservedBlockTable=tLiReservedBlockTable, TDhcpFilterMatch=TDhcpFilterMatch, tLiReservedBlockDescription=tLiReservedBlockDescription, tIPv6FilterParamsSourceIpAddr=tIPv6FilterParamsSourceIpAddr, tIPv6FilterScope=tIPv6FilterScope, tMacFilterParamsIngressHitCount=tMacFilterParamsIngressHitCount, tLiReservedBlockFltrEntry=tLiReservedBlockFltrEntry, tIPv6FilterParamsActiveDest=tIPv6FilterParamsActiveDest, tFltrFlowSpecVrtrId=tFltrFlowSpecVrtrId, tFilterNotificationsPrefix=tFilterNotificationsPrefix, tLiFilterType=tLiFilterType, tFilterNotificationObjGroup=tFilterNotificationObjGroup, tFilterRSTCounter64Val=tFilterRSTCounter64Val, tLiFilterTableLastChanged=tLiFilterTableLastChanged, tLiFilterAssociationTable=tLiFilterAssociationTable, tIPFilterParamsOptionPresent=tIPFilterParamsOptionPresent, tFltrGrpInsrtdEntriesResult=tFltrGrpInsrtdEntriesResult, tIPv6FilterParamsRowStatus=tIPv6FilterParamsRowStatus, tIPv6FilterParamsEntry=tIPv6FilterParamsEntry, tMacFilterParamsInnerTagValue=tMacFilterParamsInnerTagValue, tFilterRSTTimeTicksVal=tFilterRSTTimeTicksVal, tFilter7750V4v0Compliance=tFilter7750V4v0Compliance, tFilterRPActiveDest=tFilterRPActiveDest, tFilterPrefixListEntry=tFilterPrefixListEntry, tIPv6FilterParamsFwdSapPortId=tIPv6FilterParamsFwdSapPortId, tIpv6FilterRadiusNbrInsertd=tIpv6FilterRadiusNbrInsertd, TIPFilterIdOrEmpty=TIPFilterIdOrEmpty, tLiReservedBlockStart=tLiReservedBlockStart, tMacFilterParamsDsapMask=tMacFilterParamsDsapMask, tIPFilterParamsFwdRtrId=tIPFilterParamsFwdRtrId, TMACFilterID=TMACFilterID, tDhcpFilterLastChanged=tDhcpFilterLastChanged, tIpFilterNameRowStatus=tIpFilterNameRowStatus, tFilterRPDescription=tFilterRPDescription, tFilterRedirectURLTest=tFilterRedirectURLTest, tLiMacFilterParamsEgrHitBytes=tLiMacFilterParamsEgrHitBytes, tIPFilterCreditCntrlInsertPt=tIPFilterCreditCntrlInsertPt, tFilterMIBCompliances=tFilterMIBCompliances, tIPFilterParamsTimeRangeState=tIPFilterParamsTimeRangeState, tIPv6FilterParamsTable=tIPv6FilterParamsTable, tMacFilterParamsEntry=tMacFilterParamsEntry, tIPFilterScope=tIPFilterScope, tIPFilterParamsActiveDest=tIPFilterParamsActiveDest, tFilterRPAdminState=tFilterRPAdminState, TDHCPFilterID=TDHCPFilterID, tMacFilterNameTable=tMacFilterNameTable, tFilterScalarGroup=tFilterScalarGroup, TFilterLogId=TFilterLogId, tIPFilterParamsDestinationIpMask=tIPFilterParamsDestinationIpMask, tFilterPrefixListEntryPrefixLen=tFilterPrefixListEntryPrefixLen, tMacFilterParamsFwdSapPortId=tMacFilterParamsFwdSapPortId, tLiReservedBlockTableLastChanged=tLiReservedBlockTableLastChanged, tIPFilterRadiusInsertPt=tIPFilterRadiusInsertPt, tFilterRedirectPolicyEntry=tFilterRedirectPolicyEntry, tFilterRPTRowStatus=tFilterRPTRowStatus, tFilterRedirectPolicy=tFilterRedirectPolicy, tIPv6FilterParamsForwardNHIndirect=tIPv6FilterParamsForwardNHIndirect, tMacFilterParamsFwdSapEncapVal=tMacFilterParamsFwdSapEncapVal, tMacFilterParamsLogInstantiated=tMacFilterParamsLogInstantiated, tFilterRSTLastOidVal=tFilterRSTLastOidVal, tFilterRSTRespRowStatus=tFilterRSTRespRowStatus, tMacFilterType=tMacFilterType, tDhcpFilterV10v0Group=tDhcpFilterV10v0Group, tFilterLogSysLogId=tFilterLogSysLogId, tIPv6FilterSubInsertHighWmark=tIPv6FilterSubInsertHighWmark, tIPFilterParamsSourceIpMask=tIPFilterParamsSourceIpMask, tFilterRSTLastCounter32Val=tFilterRSTLastCounter32Val, tIPv6FilterParamsIndex=tIPv6FilterParamsIndex, tIPFilterParamsForwardNHIndirect=tIPFilterParamsForwardNHIndirect, tFltrGrpInsrtdEntriesExecute=tFltrGrpInsrtdEntriesExecute, tDhcpFilterTable=tDhcpFilterTable, tFilter7450V8v0Compliance=tFilter7450V8v0Compliance, tDhcpFilterEntry=tDhcpFilterEntry, tDhcpFilterRowStatus=tDhcpFilterRowStatus, tIPFilterSubInsertHighWmark=tIPFilterSubInsertHighWmark, tFilterRPTLastAction=tFilterRPTLastAction, tFilterAlarmDescription=tFilterAlarmDescription, tLiMacFilterParamsDstMACMask=tLiMacFilterParamsDstMACMask, tLiFilterAssociationFltrId=tLiFilterAssociationFltrId, tFilterRSTInt32Val=tFilterRSTInt32Val, tIPFilterParamsProtocol=tIPFilterParamsProtocol, tFilterRedirectDestTable=tFilterRedirectDestTable, TEntryIdOrZero=TEntryIdOrZero, tLiFilterRowStatus=tLiFilterRowStatus, tFilterRPRowStatus=tFilterRPRowStatus, tIPFilterParamsLogId=tIPFilterParamsLogId, tMacFilterParamsSrcMACMask=tMacFilterParamsSrcMACMask, tFilterLogSummaryEnabled=tFilterLogSummaryEnabled, tIPv6FilterParamsDSCP=tIPv6FilterParamsDSCP, tFilterNotificationObjV8v0Group=tFilterNotificationObjV8v0Group, tFilterSubInsFltrEntryDropped=tFilterSubInsFltrEntryDropped, tLiReservedBlockFltrType=tLiReservedBlockFltrType, tFilterRUTLastPrioChange=tFilterRUTLastPrioChange, tFilterRSTOidVal=tFilterRSTOidVal, TFilterAction=TFilterAction, tIPFilterParamsTcpSyn=tIPFilterParamsTcpSyn, tMacFilterParamsDsap=tMacFilterParamsDsap, tFilterRUTRowStatus=tFilterRUTRowStatus, tIPFilterParamsTable=tIPFilterParamsTable, tFilterLogRowStatus=tFilterLogRowStatus, tLiFilterAssociationEntry=tLiFilterAssociationEntry, tFilterRSTOpaqueVal=tFilterRSTOpaqueVal, tFilterDomainLastChanged=tFilterDomainLastChanged, tIPv6FilterParamsIngressHitCount=tIPv6FilterParamsIngressHitCount, tIPv6FilterParamsLogId=tIPv6FilterParamsLogId, tMacFilterParamsHighISID=tMacFilterParamsHighISID, tMacFilterNameTableLastChgd=tMacFilterNameTableLastChgd, tIPFilterParamsDestinationIpAddr=tIPFilterParamsDestinationIpAddr, tIPFilterV8v0Group=tIPFilterV8v0Group, tAutoIPFilterEntrySourceIpAddr=tAutoIPFilterEntrySourceIpAddr, tMacFilterParamsFwdSvcId=tMacFilterParamsFwdSvcId, tMacFilterParamsSnapOui=tMacFilterParamsSnapOui, tFilterLogTable=tFilterLogTable, tFilterRedirectSNMPRespTable=tFilterRedirectSNMPRespTable, tAutoIPFilterId=tAutoIPFilterId, tLiReservedBlockLastChanged=tLiReservedBlockLastChanged, tFilterRPTLastActionTime=tFilterRPTLastActionTime, tIPFilterParamsEgrHitByteCount=tIPFilterParamsEgrHitByteCount, tDhcpFilterParamsOptionNumber=tDhcpFilterParamsOptionNumber, tAutoIPFilterEntry=tAutoIPFilterEntry, tIPv6FilterParamsDestPortValue1=tIPv6FilterParamsDestPortValue1, tMacFilterParamsEtherType=tMacFilterParamsEtherType, tFilterRSTCounter32Val=tFilterRSTCounter32Val, tFltrFlowSpecProblemDescription=tFltrFlowSpecProblemDescription, tFltrGrpInsrtdEntriesFilterId=tFltrGrpInsrtdEntriesFilterId, tIPv6FilterParamsLogInstantiated=tIPv6FilterParamsLogInstantiated, tMacFilterId=tMacFilterId, tLiReservedBlockFltrRowStatus=tLiReservedBlockFltrRowStatus, tIPFilterParamsSourcePortValue2=tIPFilterParamsSourcePortValue2, tLiMacFilterParamsRowStatus=tLiMacFilterParamsRowStatus, tDhcpFilterV9v0Group=tDhcpFilterV9v0Group, tFilterSubInsSpaceAlarmRaised=tFilterSubInsSpaceAlarmRaised, tFilterRSTTimeout=tFilterRSTTimeout, tFilterRSTSNMPVersion=tFilterRSTSNMPVersion, tFilterLogFileId=tFilterLogFileId, tLiFilterLastChanged=tLiFilterLastChanged, tFilterPrefixListEntryTblLstChg=tFilterPrefixListEntryTblLstChg, tFilterNotificationObjV5v0Group=tFilterNotificationObjV5v0Group, tLiMacFilterParamsId=tLiMacFilterParamsId, tIPv6FilterParamsTimeRangeName=tIPv6FilterParamsTimeRangeName, TFilterID=TFilterID, tFilterLogGroup=tFilterLogGroup, tIPv6FilterParamsEgrHitByteCount=tIPv6FilterParamsEgrHitByteCount, tLiReservedBlockFltrTableLastChg=tLiReservedBlockFltrTableLastChg, tLiMacFilterParamsLastChanged=tLiMacFilterParamsLastChanged, TEntryId=TEntryId, tFilterRSTUnsigned32Val=tFilterRSTUnsigned32Val, tIPFilterParamsFwdSvcId=tIPFilterParamsFwdSvcId, tIPv6FilterParamsFwdSdpBind=tIPv6FilterParamsFwdSdpBind, tFilterRUTTimeout=tFilterRUTTimeout, TFltrPrefixListType=TFltrPrefixListType, tLiFilterV10v0Group=tLiFilterV10v0Group, tFilterPrefixListEntryEntry=tFilterPrefixListEntryEntry, tFilterPBRDropReason=tFilterPBRDropReason, tFilterTimeStampObjects=tFilterTimeStampObjects, tIPv6FilterV8v0Group=tIPv6FilterV8v0Group, tMacFilterV8v0Group=tMacFilterV8v0Group, tIpFilterNameLastChanged=tIpFilterNameLastChanged, tFilterRedirectURLLowRespCode=tFilterRedirectURLLowRespCode, tIPFilterParamsIpOptionValue=tIPFilterParamsIpOptionValue, tFilterLogDescription=tFilterLogDescription, tFilterRPTTimeout=tFilterRPTTimeout, tFilterRedirectURLRespEntry=tFilterRedirectURLRespEntry, tFilter7xxxV9v0Compliance=tFilter7xxxV9v0Compliance, tFilterEntryActivationFailed=tFilterEntryActivationFailed, tLiMacFilterParamsEgrHitCount=tLiMacFilterParamsEgrHitCount, tIPFilterParamsIndex=tIPFilterParamsIndex, tIPv6FilterParamsTcpSyn=tIPv6FilterParamsTcpSyn, TItemScope=TItemScope, tMacFilterV4v0Group=tMacFilterV4v0Group, tDhcpFilterParamsEntry=tDhcpFilterParamsEntry, tIPFilterParamsSrcIpPrefixList=tIPFilterParamsSrcIpPrefixList, tIPFilterParamsFwdSapPortId=tIPFilterParamsFwdSapPortId, tFilterRSTRespPrioChange=tFilterRSTRespPrioChange, tMacFilterParamsRedirectURL=tMacFilterParamsRedirectURL, tIPFilterParamsDestPortOperator=tIPFilterParamsDestPortOperator, tFilter7450V5v0Compliance=tFilter7450V5v0Compliance, tIPFilterV9v0Group=tIPFilterV9v0Group, TTimeRangeState=TTimeRangeState, tFilterRedirectSNMPTestTable=tFilterRedirectSNMPTestTable, tIPFilterParamsSourcePortValue1=tIPFilterParamsSourcePortValue1, tIPv6FilterParamsSourceIpMask=tIPv6FilterParamsSourceIpMask, tIpv6FilterNameTableLastChgd=tIpv6FilterNameTableLastChgd, tFilterRPTHoldDownRemain=tFilterRPTHoldDownRemain, tMacFilterParamsDot1pMask=tMacFilterParamsDot1pMask, tIPv6FilterDescription=tIPv6FilterDescription, tIPFilterTable=tIPFilterTable, tMacFilterParamsOuterTagMask=tMacFilterParamsOuterTagMask, tDhcpFilterId=tDhcpFilterId, tToDPoliciesV5v0NotifyGroup=tToDPoliciesV5v0NotifyGroup, tFilterPrefixListEntryRowStatus=tFilterPrefixListEntryRowStatus, tIPv6FilterEntry=tIPv6FilterEntry, tFilterRedirectURLTestEntry=tFilterRedirectURLTestEntry, tAutoIPFilterEntryTable=tAutoIPFilterEntryTable, tFilterRSTNextRespIndex=tFilterRSTNextRespIndex, tIPFilterParamsRemarkDot1p=tIPFilterParamsRemarkDot1p, tIPv6FilterParamsIngrHitByteCount=tIPv6FilterParamsIngrHitByteCount, tIPFilterParamsDSCP=tIPFilterParamsDSCP, tIPFilterParamsRowStatus=tIPFilterParamsRowStatus, tMacFilterParamsLogId=tMacFilterParamsLogId, tFilterRSTLastOID=tFilterRSTLastOID, tFilter7xxxV10v0Compliance=tFilter7xxxV10v0Compliance, tIPv6FilterParamsNextHeader=tIPv6FilterParamsNextHeader, tIPFilterParamsRedirectURL=tIPFilterParamsRedirectURL, tFilterRUTInterval=tFilterRUTInterval, tFilterLogStopOnFull=tFilterLogStopOnFull, tmnxFilterObsoleteGroup=tmnxFilterObsoleteGroup, tLiMacFilterParamsTable=tLiMacFilterParamsTable, tFltrFLowSpecNLRI=tFltrFLowSpecNLRI, tFilter7450V4v0Compliance=tFilter7450V4v0Compliance, tIPFilterParamsForwardRedPlcy=tIPFilterParamsForwardRedPlcy, tIPFilterParamsIngressHitCount=tIPFilterParamsIngressHitCount, tMacFilterParamsEgressHitCount=tMacFilterParamsEgressHitCount, tLiMacFilterParamsIngrHitCount=tLiMacFilterParamsIngrHitCount, tIPv6FilterParamsSourcePortOperator=tIPv6FilterParamsSourcePortOperator, tIPFilterPBRPacketsDrop=tIPFilterPBRPacketsDrop, tFilterNotificationObjects=tFilterNotificationObjects, tFilterRedirectURLRespTable=tFilterRedirectURLRespTable, tIPFilterParamsDestPortValue2=tIPFilterParamsDestPortValue2, tFilterMIBGroups=tFilterMIBGroups, tIPv6FilterParamsDestPortOperator=tIPv6FilterParamsDestPortOperator, tLiReservedBlockRowStatus=tLiReservedBlockRowStatus, TEntryIndicator=TEntryIndicator, tMacFilterParamsTimeRangeName=tMacFilterParamsTimeRangeName, tMacFilterDescription=tMacFilterDescription, tIPv6FilterTable=tIPv6FilterTable, tFilterRedirectPolicyTable=tFilterRedirectPolicyTable, tMacFilterParamsFrameType=tMacFilterParamsFrameType, tLiReservedBlockName=tLiReservedBlockName, PYSNMP_MODULE_ID=timetraFilterMIBModule, tMacFilterV6v0Group=tMacFilterV6v0Group, tFilterLogScalars=tFilterLogScalars, tFilterRSTLastIpAddressVal=tFilterRSTLastIpAddressVal, tFilterRUTURL=tFilterRUTURL, tFilterThresholdReached=tFilterThresholdReached, tIPFilterParamsTimeRangeName=tIPFilterParamsTimeRangeName, tFilterMIBConformance=tFilterMIBConformance, tMacFilterParamsEgrHitByteCount=tMacFilterParamsEgrHitByteCount)
mibBuilder.exportSymbols("TIMETRA-FILTER-MIB", tFilterRSTLastActionTime=tFilterRSTLastActionTime, tIPv6FilterParamsRemarkDSCP=tIPv6FilterParamsRemarkDSCP, tFilterPrefixListTableLstChng=tFilterPrefixListTableLstChng, tIPFilterSubInsertLowWmark=tIPFilterSubInsertLowWmark, tIPFilterV4v0Group=tIPFilterV4v0Group, tIPFilterParamsLogInstantiated=tIPFilterParamsLogInstantiated, tFilterRSTLastCounter64Val=tFilterRSTLastCounter64Val, tFilterLogEntry=tFilterLogEntry, tDhcpFilterParamsRowStatus=tDhcpFilterParamsRowStatus, tLiFilterDescription=tLiFilterDescription, tMacFilterParamsDstMAC=tMacFilterParamsDstMAC, tIPv6FilterParamsSourcePortValue1=tIPv6FilterParamsSourcePortValue1, tIPFilterParamsIpOptionMask=tIPFilterParamsIpOptionMask, tDhcpFilterParamsOptionValue=tDhcpFilterParamsOptionValue, tMacFilterNameId=tMacFilterNameId, tIPv6FilterParamsTcpAck=tIPv6FilterParamsTcpAck, tIPv6FilterParamsRemarkDot1p=tIPv6FilterParamsRemarkDot1p, tFilterRSTRespAction=tFilterRSTRespAction, tIPFilterParamsFwdSdpBind=tIPFilterParamsFwdSdpBind, tTodPoliciesV4v0Group=tTodPoliciesV4v0Group, TDhcpFilterAction=TDhcpFilterAction, tFilterSubInsSpaceOwner=tFilterSubInsSpaceOwner, tFilterRSTRespOID=tFilterRSTRespOID, tFilterLogBindings=tFilterLogBindings, tIPFilterParamsRemarkDSCPMask=tIPFilterParamsRemarkDSCPMask, tIPv6FilterRowStatus=tIPv6FilterRowStatus, tFilterPrefixListRowStatus=tFilterPrefixListRowStatus, tFilterRedirectSNMPRespEntry=tFilterRedirectSNMPRespEntry, tIPv6FilterParamsForwardRedPlcy=tIPv6FilterParamsForwardRedPlcy, tIPFilterParamsSrcIpFullMask=tIPFilterParamsSrcIpFullMask, tLiMacFilterParamsFrameType=tLiMacFilterParamsFrameType, tIpFilterNameTableLastChgd=tIpFilterNameTableLastChgd, tFilterPrefixListTable=tFilterPrefixListTable, tMacFilterRowStatus=tMacFilterRowStatus, tLiReservedBlockFltrIdStart=tLiReservedBlockFltrIdStart, tIPFilterParamsEgressHitCount=tIPFilterParamsEgressHitCount, tIPFilterParamsIcmpType=tIPFilterParamsIcmpType, tFilterNotificationsGroup=tFilterNotificationsGroup, tFilterRedirectDest=tFilterRedirectDest, tIPv6FilterParamsCflowdIfSample=tIPv6FilterParamsCflowdIfSample, tFilterRUTRespRowStatus=tFilterRUTRespRowStatus, tFilterRPTHoldDown=tFilterRPTHoldDown, tIPv6FilterParamsForwardNHInterface=tIPv6FilterParamsForwardNHInterface, tFilterRDDescription=tFilterRDDescription, tFilterPrefixListType=tFilterPrefixListType, tLiReservedBlockEntry=tLiReservedBlockEntry, tIPFilterParamsFragment=tIPFilterParamsFragment, tMacFilterParamsOuterTagValue=tMacFilterParamsOuterTagValue, tIPFilterCreditCntrlInsertSize=tIPFilterCreditCntrlInsertSize, tMacFilterTable=tMacFilterTable, tLiReservedBlockFltrLastChanged=tLiReservedBlockFltrLastChanged, tFilterNotificationsV9v0Group=tFilterNotificationsV9v0Group, tDhcpFilterDescription=tDhcpFilterDescription, tFilterRSTDropCount=tFilterRSTDropCount, tFilterLogMaxInstances=tFilterLogMaxInstances, tFilterRedirectPingTestTable=tFilterRedirectPingTestTable, tMacFilterParamsInnerTagMask=tMacFilterParamsInnerTagMask, tFilterPrefixListEntryTable=tFilterPrefixListEntryTable, tFilterSubInsSpaceAlarmCleared=tFilterSubInsSpaceAlarmCleared, tIPFilterParamsCflowdIfSample=tIPFilterParamsCflowdIfSample, TIPFilterID=TIPFilterID, tFilterGroupInsertedEntries=tFilterGroupInsertedEntries, tMacFilterNameLastChanged=tMacFilterNameLastChanged, tIPv6FilterId=tIPv6FilterId, tIPv6FilterParamsIcmpType=tIPv6FilterParamsIcmpType, tIPFilterParamsEntry=tIPFilterParamsEntry, tFilterRSTRespType=tFilterRSTRespType, tFilterRSTLastType=tFilterRSTLastType, tMacFilterParamsTable=tMacFilterParamsTable, tFilterId=tFilterId, tFilterEntryActivationRestored=tFilterEntryActivationRestored, TItemMatch=TItemMatch, tFilterRedirectPolicyGroup=tFilterRedirectPolicyGroup, tFilterRUTRespPrioChange=tFilterRUTRespPrioChange, tFilterRSTLastOctetStringVal=tFilterRSTLastOctetStringVal, tFilterRedirectDestEntry=tFilterRedirectDestEntry, tIpFilterCreditCntrlNbrInsertd=tIpFilterCreditCntrlNbrInsertd, tFilterRedirectPingTestEntry=tFilterRedirectPingTestEntry, tIpv6FilterCreditCntrlNbrInsertd=tIpv6FilterCreditCntrlNbrInsertd, tFilterRUTLastRetCode=tFilterRUTLastRetCode, tLiMacFilterParamsEntry=tLiMacFilterParamsEntry, tIPFilterParamsDstIpPrefixList=tIPFilterParamsDstIpPrefixList, TFilterSubInsSpaceOwner=TFilterSubInsSpaceOwner, tFilter77x0V8v0Compliance=tFilter77x0V8v0Compliance, tFilterLogId=tFilterLogId, tLiFilterEntry=tLiFilterEntry, tIpFilterNameId=tIpFilterNameId, tFilterRSTLastAction=tFilterRSTLastAction, tFilterBgpFlowSpecProblem=tFilterBgpFlowSpecProblem, tFilterRUTLastAction=tFilterRUTLastAction, tIPv6FilterV6v0Group=tIPv6FilterV6v0Group, tFilterRDOperPriority=tFilterRDOperPriority, tDhcpFilterParamsAction=tDhcpFilterParamsAction, tIPFilterParamsSourceIpAddr=tIPFilterParamsSourceIpAddr, tFilterNotificationsV8v0Group=tFilterNotificationsV8v0Group, tIPv6FilterParamsDestinationIpAddr=tIPv6FilterParamsDestinationIpAddr, tIPv6FilterParamsDestinationIpMask=tIPv6FilterParamsDestinationIpMask, tIpFilterName=tIpFilterName, tFilterRSTOID=tFilterRSTOID, tIPv6FilterParamsFwdSapEncapVal=tIPv6FilterParamsFwdSapEncapVal, tIPv6FilterParamsTimeRangeState=tIPv6FilterParamsTimeRangeState, tFilterRSTLastTimeTicksVal=tFilterRSTLastTimeTicksVal, tIpv6FilterNameTable=tIpv6FilterNameTable, tIPv6FilterV4v0Group=tIPv6FilterV4v0Group, tIPFilterParamsTcpAck=tIPFilterParamsTcpAck, tLiMacFilterParamsDstMAC=tLiMacFilterParamsDstMAC, tFilterRSTHoldDownRemain=tFilterRSTHoldDownRemain, tLiFilterTable=tLiFilterTable, tIPv6FilterParamsRemarkDSCPMask=tIPv6FilterParamsRemarkDSCPMask, tFilterRUTDropCount=tFilterRUTDropCount, tFilter77x0V5v0Compliance=tFilter77x0V5v0Compliance, tFilterRPTInterval=tFilterRPTInterval, tTodPolicies77450V5v0Group=tTodPolicies77450V5v0Group, tMacFilterParamsTimeRangeState=tMacFilterParamsTimeRangeState, tIPFilterV6v0Group=tIPFilterV6v0Group, tFilterLiObjects=tFilterLiObjects, tIPFilterParamsMultipleOption=tIPFilterParamsMultipleOption, tIPFilterParamsDescription=tIPFilterParamsDescription, tLiReservedBlockFltrTable=tLiReservedBlockFltrTable, tFilterPrefixListName=tFilterPrefixListName, tFilterLogEnabled=tFilterLogEnabled, tMacFilterParamsSsap=tMacFilterParamsSsap, tIPv6FilterDefaultAction=tIPv6FilterDefaultAction, tFilterRUTRespAction=tFilterRUTRespAction, tLiFilterAssociationLastChg=tLiFilterAssociationLastChg, tFilterParmRow=tFilterParmRow, tDhcpFilterParamsTable=tDhcpFilterParamsTable, tIPFilterEntry=tIPFilterEntry, TFilterLogDestination=TFilterLogDestination, tIPFilterV5v0Group=tIPFilterV5v0Group, tFilterLogV5v0Group=tFilterLogV5v0Group, tIpFilterNameTable=tIpFilterNameTable, tLiMacFilterParamsDescription=tLiMacFilterParamsDescription, tMacFilterParamsDot1pValue=tMacFilterParamsDot1pValue, tFltrGrpInsrtdEntriesApplication=tFltrGrpInsrtdEntriesApplication, tFltrGrpInsrtdEntriesFeedback=tFltrGrpInsrtdEntriesFeedback, tMacFilterDefaultAction=tMacFilterDefaultAction, tFilter7450V6v0Compliance=tFilter7450V6v0Compliance, tFilterRSTRowStatus=tFilterRSTRowStatus, tLiMacFilterParamsSrcMAC=tLiMacFilterParamsSrcMAC, tFilterRUTHTTPVersion=tFilterRUTHTTPVersion, tFilterRUTLastActionTime=tFilterRUTLastActionTime, tMacFilterNameEntry=tMacFilterNameEntry, tIPFilterParamsAction=tIPFilterParamsAction, tFilterRSTRespId=tFilterRSTRespId, tIpv6FilterNameId=tIpv6FilterNameId, tFltrFlowSpecProblem=tFltrFlowSpecProblem, tMacFilterVidFilteringV9v0Group=tMacFilterVidFilteringV9v0Group, tDhcpFilterParamsOptionMatch=tDhcpFilterParamsOptionMatch, tFilterRDAdminPriority=tFilterRDAdminPriority, tMacFilterParamsRowStatus=tMacFilterParamsRowStatus, tIPv6FilterCreditCntrlInsertPt=tIPv6FilterCreditCntrlInsertPt, timetraFilterMIBModule=timetraFilterMIBModule, tIPFilterParamsForwardNH=tIPFilterParamsForwardNH, tIPFilterId=tIPFilterId, tFilterRSTLastPrioChange=tFilterRSTLastPrioChange, tDhcpFilterParamsLastChanged=tDhcpFilterParamsLastChanged, tFilterRedirectSNMPTestEntry=tFilterRedirectSNMPTestEntry, tIPFilterDescription=tIPFilterDescription, tIPFilterParamsIcmpCode=tIPFilterParamsIcmpCode, tMacFilterParamsIngrHitByteCount=tMacFilterParamsIngrHitByteCount, tFilterRDAdminState=tFilterRDAdminState, tIPFilterParamsSourcePortOperator=tIPFilterParamsSourcePortOperator, tMacFilterParamsAction=tMacFilterParamsAction, tMacFilterParamsSrcMAC=tMacFilterParamsSrcMAC, tFilterRDOperState=tFilterRDOperState, tMacFilterParamsSsapMask=tMacFilterParamsSsapMask, tFilterRPTDropCount=tFilterRPTDropCount, tDhcpFilterParamsTblLastChanged=tDhcpFilterParamsTblLastChanged, tFilterType=tFilterType, tIpv6FilterNameRowStatus=tIpv6FilterNameRowStatus, tFilterPrefixListV10v0Group=tFilterPrefixListV10v0Group, tFilterRSTInterval=tFilterRSTInterval, tFilterRSTHoldDown=tFilterRSTHoldDown, tFilterRUTHoldDownRemain=tFilterRUTHoldDownRemain, tFilterPrefixListEntryPrefixType=tFilterPrefixListEntryPrefixType, tLiMacFilterParamsSrcMACMask=tLiMacFilterParamsSrcMACMask, tLiMacFilterParamsIngrHitBytes=tLiMacFilterParamsIngrHitBytes, tMacFilterParamsFwdSdpBind=tMacFilterParamsFwdSdpBind, tMacFilterScope=tMacFilterScope, tMacFilterParamsSnapPid=tMacFilterParamsSnapPid, tFilterNameV10v0Group=tFilterNameV10v0Group, tMacFilterNameRowStatus=tMacFilterNameRowStatus, tMacFilterParamsDstMACMask=tMacFilterParamsDstMACMask, tFilterLogMaxNumEntries=tFilterLogMaxNumEntries, tIpv6FilterNameLastChanged=tIpv6FilterNameLastChanged, tFilterRDRowStatus=tFilterRDRowStatus, tFilterRUTHoldDown=tFilterRUTHoldDown, tFilterRSTCommunity=tFilterRSTCommunity, tFilterObjects=tFilterObjects, tIPFilterDefaultAction=tIPFilterDefaultAction, tFltrGrpInsrtdEntriesLocation=tFltrGrpInsrtdEntriesLocation, tIPv6FilterParamsFwdSvcId=tIPv6FilterParamsFwdSvcId, tFilterLogSummaryCrit1=tFilterLogSummaryCrit1, tIPv6FilterParamsIcmpCode=tIPv6FilterParamsIcmpCode, tLiFilterAssociationRowStatus=tLiFilterAssociationRowStatus, tFilterLogDestination=tFilterLogDestination, tIPv6FilterRadiusInsertSize=tIPv6FilterRadiusInsertSize, tIPFilterParamsSrcRouteOption=tIPFilterParamsSrcRouteOption, tIPv6FilterParamsSourcePortValue2=tIPv6FilterParamsSourcePortValue2, tLiMacFilterParamsTableLastChg=tLiMacFilterParamsTableLastChg, tIPv6FilterParamsCflowdSample=tIPv6FilterParamsCflowdSample, tIpFilterNameEntry=tIpFilterNameEntry, TFilterLogSummaryCriterium=TFilterLogSummaryCriterium, tFilter77x0V6v0Compliance=tFilter77x0V6v0Compliance, tIPv6FilterCreditCntrlInsertSize=tIPv6FilterCreditCntrlInsertSize, tIPFilterParamsDestIpFullMask=tIPFilterParamsDestIpFullMask, tMacFilterParamsDescription=tMacFilterParamsDescription, tIPv6FilterParamsEgressHitCount=tIPv6FilterParamsEgressHitCount, tIPFilterParamsIngrHitByteCount=tIPFilterParamsIngrHitByteCount, tMacFilterParamsLowISID=tMacFilterParamsLowISID, tIPv6FilterParamsAction=tIPv6FilterParamsAction, tTodPolicies77x0V5v0Group=tTodPolicies77x0V5v0Group, tIPFilterParamsDestPortValue1=tIPFilterParamsDestPortValue1, tAutoIPFilterEntrySourceIpMask=tAutoIPFilterEntrySourceIpMask, tFilterLogInstances=tFilterLogInstances, tIPv6FilterParamsForwardNH=tIPv6FilterParamsForwardNH, tIpv6FilterName=tIpv6FilterName, tFilterRedirectURLHighRespCode=tFilterRedirectURLHighRespCode, tIPFilterParamsFwdSapEncapVal=tIPFilterParamsFwdSapEncapVal, tFilterRedirectSNMPTest=tFilterRedirectSNMPTest, tIPv6FilterRadiusInsertPt=tIPv6FilterRadiusInsertPt, tFilterNotificationObjV9v0Group=tFilterNotificationObjV9v0Group, tIpFilterRadiusNbrInsertd=tIpFilterRadiusNbrInsertd, tFilterRSTOctetStringVal=tFilterRSTOctetStringVal, tIPFilterRadiusInsertSize=tIPFilterRadiusInsertSize, tFilterPrefixListLastChanged=tFilterPrefixListLastChanged, TAnyFilterID=TAnyFilterID, tFilterPrefixListEntryPrefix=tFilterPrefixListEntryPrefix, tMacFilterEntry=tMacFilterEntry, tFilterPrefixListDescription=tFilterPrefixListDescription, tFilterRSTIpAddressVal=tFilterRSTIpAddressVal, tIPFilterParamsRemarkDSCP=tIPFilterParamsRemarkDSCP, tDhcpFilterParamsId=tDhcpFilterParamsId, TFilterType=TFilterType, tFltrGrpInsrtdEntriesFilterType=tFltrGrpInsrtdEntriesFilterType, tMacFilterName=tMacFilterName, tFilterRSTLastUnsigned32Val=tFilterRSTLastUnsigned32Val, tIpv6FilterNameEntry=tIpv6FilterNameEntry, tIPFilterParamsForwardNHInterface=tIPFilterParamsForwardNHInterface, tFilterRedirectURLTestTable=tFilterRedirectURLTestTable)
