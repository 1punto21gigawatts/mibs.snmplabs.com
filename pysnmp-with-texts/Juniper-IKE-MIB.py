#
# PySNMP MIB module Juniper-IKE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Juniper-IKE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:02:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
juniMibs, = mibBuilder.importSymbols("Juniper-MIBs", "juniMibs")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter32, Counter64, Bits, Unsigned32, NotificationType, MibIdentifier, ModuleIdentity, Gauge32, ObjectIdentity, IpAddress, iso, Integer32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Counter64", "Bits", "Unsigned32", "NotificationType", "MibIdentifier", "ModuleIdentity", "Gauge32", "ObjectIdentity", "IpAddress", "iso", "Integer32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
juniIkeMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71))
juniIkeMIB.setRevisions(('2005-11-22 16:15', '2004-01-23 15:12', '2004-04-06 22:26',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: juniIkeMIB.setRevisionsDescriptions(('Replaced the juniIkePolicyRuleTable with the juniIkePolicyRuleV2Table. Added ip address and router index. Added more options to the agressive mode.', 'Replaced the juniIkeSaTable with the juniIkeSa2Table. Added local and remote IKE cookies to the IKE SA2 table. Added local port, remote port, and ikeSaNegotiationDone flag to the IKE SA2 table.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: juniIkeMIB.setLastUpdated('200404062226Z')
if mibBuilder.loadTexts: juniIkeMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: juniIkeMIB.setContactInfo(' Juniper Networks, Inc. Postal: 10 Technology Park Drive Westford, MA 01886-3146 USA Tel: +1 978 589 5800 Email: mib@Juniper.net')
if mibBuilder.loadTexts: juniIkeMIB.setDescription('The Internet Key Exchange (IKE) MIB for the Juniper Networks enterprise.')
class JuniIkeAuthenticationMethod(TextualConvention, Integer32):
    description = 'The authentication method for the IKE policy rule.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 3))
    namedValues = NamedValues(("rsaSignature", 0), ("preSharedKeys", 3))

class JuniIkeEncryptionMethod(TextualConvention, Integer32):
    description = 'The encryption method for the IKE policy rule.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("des", 0), ("tripleDes", 1))

class JuniIkeGroup(TextualConvention, Integer32):
    description = 'The PFS group for the IKE policy rule.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 4))
    namedValues = NamedValues(("group1", 0), ("group2", 1), ("group5", 4))

class JuniIkeHashMethod(TextualConvention, Integer32):
    description = 'The hash method for the IKE policy rule.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("md5", 0), ("sha", 1))

class JuniIkeNegotiationMode(TextualConvention, Integer32):
    description = 'The mode that IKE uses to negotiate its SA.'
    status = 'obsolete'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("aggressive", 0), ("main", 1))

class JuniIkeNegotiationV2Mode(TextualConvention, Integer32):
    description = 'The aggressive mode that IKE uses to negotiate its SA.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("aggressiveAccepted", 0), ("aggressiveRequested", 1), ("aggressiveRequired", 2), ("aggressiveNotAllowed", 3))

class JuniIpsecPhase1SaState(TextualConvention, Integer32):
    description = 'The state for the IKE security association.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))
    namedValues = NamedValues(("reserved", 0), ("startSaNegotiationI", 1), ("startSaNegotiationR", 2), ("mmSaI", 3), ("mmSaR", 4), ("mmKeI", 5), ("mmKeR", 6), ("mmFinalI", 7), ("mmFinalR", 8), ("mmDoneI", 9), ("amSaI", 10), ("amSaR", 11), ("amFinalI", 12), ("amDoneR", 13), ("startQmI", 14), ("startQmR", 15), ("qmHashSaI", 16), ("qmHashSaR", 17), ("qmHashI", 18), ("qmDoneR", 19), ("startNgmI", 20), ("startNgmR", 21), ("ngmHashSaI", 22), ("ngmHashSaR", 23), ("ngmDoneI", 24), ("done", 25), ("deleted", 26))

class JuniIpsecPhase1SaDirection(TextualConvention, Integer32):
    description = 'The direction for the IPsec phase 1 security association.'
    status = 'obsolete'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("initiator", 0), ("responder", 1))

juniIkeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1))
juniIke = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1))
juniIkePolicyRuleTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 1), )
if mibBuilder.loadTexts: juniIkePolicyRuleTable.setStatus('obsolete')
if mibBuilder.loadTexts: juniIkePolicyRuleTable.setDescription('Obsolete IKE policy rule table that stores the IKE policy rule. This table has been replaced by the juniIkePolicyRuleV2Table')
juniIkePolicyRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 1, 1), ).setIndexNames((0, "Juniper-IKE-MIB", "juniIkePolicyRulePriority"))
if mibBuilder.loadTexts: juniIkePolicyRuleEntry.setStatus('obsolete')
if mibBuilder.loadTexts: juniIkePolicyRuleEntry.setDescription('Describes the IKE policy rule.')
juniIkePolicyRulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)))
if mibBuilder.loadTexts: juniIkePolicyRulePriority.setStatus('obsolete')
if mibBuilder.loadTexts: juniIkePolicyRulePriority.setDescription('The priority of the IKE policy rule.')
juniIkePolicyRuleAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 1, 1, 2), JuniIkeAuthenticationMethod().clone('preSharedKeys')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIkePolicyRuleAuthMethod.setStatus('obsolete')
if mibBuilder.loadTexts: juniIkePolicyRuleAuthMethod.setDescription('The authentication method for the IKE policy rule.')
juniIkePolicyRuleEncryptMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 1, 1, 3), JuniIkeEncryptionMethod().clone('tripleDes')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIkePolicyRuleEncryptMethod.setStatus('obsolete')
if mibBuilder.loadTexts: juniIkePolicyRuleEncryptMethod.setDescription('The encryption method for the IKE policy rule.')
juniIkePolicyRulePfsGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 1, 1, 4), JuniIkeGroup().clone('group2')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIkePolicyRulePfsGroup.setStatus('obsolete')
if mibBuilder.loadTexts: juniIkePolicyRulePfsGroup.setDescription('The PFS group for the IKE policy rule.')
juniIkePolicyRuleHashMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 1, 1, 5), JuniIkeHashMethod().clone('sha')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIkePolicyRuleHashMethod.setStatus('obsolete')
if mibBuilder.loadTexts: juniIkePolicyRuleHashMethod.setDescription('The hash method for the IKE policy rule.')
juniIkePolicyRuleLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 86400)).clone(28800)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIkePolicyRuleLifetime.setStatus('obsolete')
if mibBuilder.loadTexts: juniIkePolicyRuleLifetime.setDescription('The lifetime in seconds for the IKE policy rule.')
juniIkePolicyRuleNegotiationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 1, 1, 7), JuniIkeNegotiationMode().clone('aggressive')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIkePolicyRuleNegotiationMode.setStatus('obsolete')
if mibBuilder.loadTexts: juniIkePolicyRuleNegotiationMode.setDescription('The negotiation mode for the IKE policy rule.')
juniIkePolicyRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIkePolicyRuleRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: juniIkePolicyRuleRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: juniIkePolicyRulePriority ')
juniIkePolicyRuleV2Table = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 6), )
if mibBuilder.loadTexts: juniIkePolicyRuleV2Table.setStatus('current')
if mibBuilder.loadTexts: juniIkePolicyRuleV2Table.setDescription('The IKE policy rule table that stores the IKE policy rule.')
juniIkePolicyRuleV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 6, 1), ).setIndexNames((0, "Juniper-IKE-MIB", "juniIkePolicyRuleV2Priority"))
if mibBuilder.loadTexts: juniIkePolicyRuleV2Entry.setStatus('current')
if mibBuilder.loadTexts: juniIkePolicyRuleV2Entry.setDescription('Describes the IKE policy rule.')
juniIkePolicyRuleV2Priority = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)))
if mibBuilder.loadTexts: juniIkePolicyRuleV2Priority.setStatus('current')
if mibBuilder.loadTexts: juniIkePolicyRuleV2Priority.setDescription('The priority of the IKE policy rule.')
juniIkePolicyRuleV2AuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 6, 1, 2), JuniIkeAuthenticationMethod().clone('preSharedKeys')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIkePolicyRuleV2AuthMethod.setStatus('current')
if mibBuilder.loadTexts: juniIkePolicyRuleV2AuthMethod.setDescription('The authentication method for the IKE policy rule.')
juniIkePolicyRuleV2EncryptMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 6, 1, 3), JuniIkeEncryptionMethod().clone('tripleDes')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIkePolicyRuleV2EncryptMethod.setStatus('current')
if mibBuilder.loadTexts: juniIkePolicyRuleV2EncryptMethod.setDescription('The encryption method for the IKE policy rule.')
juniIkePolicyRuleV2PfsGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 6, 1, 4), JuniIkeGroup().clone('group2')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIkePolicyRuleV2PfsGroup.setStatus('current')
if mibBuilder.loadTexts: juniIkePolicyRuleV2PfsGroup.setDescription('The PFS group for the IKE policy rule.')
juniIkePolicyRuleV2HashMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 6, 1, 5), JuniIkeHashMethod().clone('sha')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIkePolicyRuleV2HashMethod.setStatus('current')
if mibBuilder.loadTexts: juniIkePolicyRuleV2HashMethod.setDescription('The hash method for the IKE policy rule.')
juniIkePolicyRuleV2Lifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 86400)).clone(28800)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIkePolicyRuleV2Lifetime.setStatus('current')
if mibBuilder.loadTexts: juniIkePolicyRuleV2Lifetime.setDescription('The lifetime in seconds for the IKE policy rule.')
juniIkePolicyRuleV2NegotiationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 6, 1, 7), JuniIkeNegotiationV2Mode().clone('aggressiveNotAllowed')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIkePolicyRuleV2NegotiationMode.setStatus('current')
if mibBuilder.loadTexts: juniIkePolicyRuleV2NegotiationMode.setDescription('The negotiation mode for the IKE policy rule.')
juniIkePolicyRuleV2IpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 6, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIkePolicyRuleV2IpAddress.setStatus('current')
if mibBuilder.loadTexts: juniIkePolicyRuleV2IpAddress.setDescription('The ip address for the IKE policy rule.')
juniIkePolicyRuleV2RouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 6, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIkePolicyRuleV2RouterIndex.setStatus('current')
if mibBuilder.loadTexts: juniIkePolicyRuleV2RouterIndex.setDescription('The virtual router for the IKE policy rule.')
juniIkePolicyRuleV2RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 6, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIkePolicyRuleV2RowStatus.setStatus('current')
if mibBuilder.loadTexts: juniIkePolicyRuleV2RowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: juniIkePolicyRuleV2Priority ')
juniIkeIpv4PresharedKeyTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 2), )
if mibBuilder.loadTexts: juniIkeIpv4PresharedKeyTable.setStatus('current')
if mibBuilder.loadTexts: juniIkeIpv4PresharedKeyTable.setDescription('The IKE preshared key table that stores the IKE pre-share keys indexed by the IP address.')
juniIkeIpv4PresharedKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 2, 1), ).setIndexNames((0, "Juniper-IKE-MIB", "juniIkeIpv4PresharedRemoteIpAddr"), (0, "Juniper-IKE-MIB", "juniIkeIpv4PresharedRouterIdx"))
if mibBuilder.loadTexts: juniIkeIpv4PresharedKeyEntry.setStatus('current')
if mibBuilder.loadTexts: juniIkeIpv4PresharedKeyEntry.setDescription('Describes the IKE preshared key.')
juniIkeIpv4PresharedRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: juniIkeIpv4PresharedRemoteIpAddr.setStatus('current')
if mibBuilder.loadTexts: juniIkeIpv4PresharedRemoteIpAddr.setDescription('The IP address of the remote endpoint for the preshared key.')
juniIkeIpv4PresharedRouterIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: juniIkeIpv4PresharedRouterIdx.setReference('Juniper-ROUTER-MIB')
if mibBuilder.loadTexts: juniIkeIpv4PresharedRouterIdx.setStatus('current')
if mibBuilder.loadTexts: juniIkeIpv4PresharedRouterIdx.setDescription('The router index of the virtual router. The value of this object can be used to retrieve additional information in the router MIB.')
juniIkeIpv4PresharedKeyStr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIkeIpv4PresharedKeyStr.setStatus('current')
if mibBuilder.loadTexts: juniIkeIpv4PresharedKeyStr.setDescription('The IKE preshared key string.')
juniIkeIpv4PresharedMaskedKeyStr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 300))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIkeIpv4PresharedMaskedKeyStr.setStatus('current')
if mibBuilder.loadTexts: juniIkeIpv4PresharedMaskedKeyStr.setDescription('The IKE masked preshared key string.')
juniIkeIpv4PresharedKeyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIkeIpv4PresharedKeyRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniIkeIpv4PresharedKeyRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: juniIkeIpv4PresharedKeyRowStatus juniIkeIpv4PresharedRemoteIpAddr juniIkeIpv4PresharedKeyStr Once created, the following objects may not be modified: juniIkeIpv4PresharedRemoteIpAddr juniIkeIpv4PresharedMaskedKeyStr ')
juniIkeFqdnPresharedKeyTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 3), )
if mibBuilder.loadTexts: juniIkeFqdnPresharedKeyTable.setStatus('current')
if mibBuilder.loadTexts: juniIkeFqdnPresharedKeyTable.setDescription('The IPSEC preshared key table that stores the IKE pre-share keys indexed by FQDN or userFQDN string.')
juniIkeFqdnPresharedKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 3, 1), ).setIndexNames((0, "Juniper-IKE-MIB", "juniIkeFqdnPresharedRemote"), (0, "Juniper-IKE-MIB", "juniIkeFqdnPresharedRouterIndex"))
if mibBuilder.loadTexts: juniIkeFqdnPresharedKeyEntry.setStatus('current')
if mibBuilder.loadTexts: juniIkeFqdnPresharedKeyEntry.setDescription('Describes the IKE phase preshared key.')
juniIkeFqdnPresharedRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)))
if mibBuilder.loadTexts: juniIkeFqdnPresharedRemote.setStatus('current')
if mibBuilder.loadTexts: juniIkeFqdnPresharedRemote.setDescription('The remote FQDN endpoint of the IKE preshared key.')
juniIkeFqdnPresharedRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: juniIkeFqdnPresharedRouterIndex.setStatus('current')
if mibBuilder.loadTexts: juniIkeFqdnPresharedRouterIndex.setDescription('The router index of the virtual router. The value of this object can be used to retrieve additional information in the router MIB.')
juniIkeFqdnPresharedKeyStr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIkeFqdnPresharedKeyStr.setStatus('current')
if mibBuilder.loadTexts: juniIkeFqdnPresharedKeyStr.setDescription('The IKE preshared key string.')
juniIkeFqdnPresharedMaskedKeyStr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 300))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIkeFqdnPresharedMaskedKeyStr.setStatus('current')
if mibBuilder.loadTexts: juniIkeFqdnPresharedMaskedKeyStr.setDescription('The IKE masked preshared key string.')
juniIkeFqdnPresharedKeyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIkeFqdnPresharedKeyRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniIkeFqdnPresharedKeyRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: juniIpsecIkePresharedKeyRowStatus juniIkeFqdnPresharedRemote juniIkeFqdnPresharedVirtualRouter juniIkeFqdnPresharedKeyStr Once created, the following objects may not be modified: juniIkeFqdnPresharedRemote juniIkeFqdnPresharedVirtualRouter juniIkeFqdnPresharedMaskedKeyStr ')
juniIkeSaTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 4), )
if mibBuilder.loadTexts: juniIkeSaTable.setStatus('obsolete')
if mibBuilder.loadTexts: juniIkeSaTable.setDescription('Obsolete IKE security assoication table. This table has been replaced by the version 2 IKE SA table (juniIkeSa2Table).')
juniIkeSaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 4, 1), ).setIndexNames((0, "Juniper-IKE-MIB", "juniIkeSaRemoteIpAddr"), (0, "Juniper-IKE-MIB", "juniIkeSaLocalIpAddr"), (0, "Juniper-IKE-MIB", "juniIkeSaRouterIndex"), (0, "Juniper-IKE-MIB", "juniIkeSaDirection"))
if mibBuilder.loadTexts: juniIkeSaEntry.setStatus('obsolete')
if mibBuilder.loadTexts: juniIkeSaEntry.setDescription('Describes the IPsec IKE SA.')
juniIkeSaRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: juniIkeSaRemoteIpAddr.setStatus('obsolete')
if mibBuilder.loadTexts: juniIkeSaRemoteIpAddr.setDescription('The remote IP address of the IKE security association.')
juniIkeSaLocalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 4, 1, 2), IpAddress())
if mibBuilder.loadTexts: juniIkeSaLocalIpAddr.setStatus('obsolete')
if mibBuilder.loadTexts: juniIkeSaLocalIpAddr.setDescription('The local IP address of the IKE security association.')
juniIkeSaRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 4, 1, 3), Unsigned32())
if mibBuilder.loadTexts: juniIkeSaRouterIndex.setStatus('obsolete')
if mibBuilder.loadTexts: juniIkeSaRouterIndex.setDescription('The router index of the virtual router. The value of this object can be used to retrieve additional information in the router MIB.')
juniIkeSaDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 4, 1, 4), JuniIpsecPhase1SaDirection())
if mibBuilder.loadTexts: juniIkeSaDirection.setStatus('obsolete')
if mibBuilder.loadTexts: juniIkeSaDirection.setDescription('The value represents if the IKE SA is for initiator or responder. Initiator donates the value of 0, and responder denotes the value of 1.')
juniIkeSaState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 4, 1, 5), JuniIpsecPhase1SaState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIkeSaState.setStatus('obsolete')
if mibBuilder.loadTexts: juniIkeSaState.setDescription('The state of the IKE secruity association.')
juniIkeSaRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 4, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIkeSaRemaining.setStatus('obsolete')
if mibBuilder.loadTexts: juniIkeSaRemaining.setDescription('The remaining time of the IKE security association.')
juniIkeSa2Table = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 5), )
if mibBuilder.loadTexts: juniIkeSa2Table.setStatus('current')
if mibBuilder.loadTexts: juniIkeSa2Table.setDescription('The IKE security assoication table.')
juniIkeSa2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 5, 1), ).setIndexNames((0, "Juniper-IKE-MIB", "juniIkeSa2RemoteIpAddr"), (0, "Juniper-IKE-MIB", "juniIkeSaRemotePort"), (0, "Juniper-IKE-MIB", "juniIkeSa2LocalIpAddr"), (0, "Juniper-IKE-MIB", "juniIkeSaLocalPort"), (0, "Juniper-IKE-MIB", "juniIkeSa2RouterIndex"), (0, "Juniper-IKE-MIB", "juniIkeSa2Direction"), (0, "Juniper-IKE-MIB", "juniIkeSaNegotiationDone"))
if mibBuilder.loadTexts: juniIkeSa2Entry.setStatus('current')
if mibBuilder.loadTexts: juniIkeSa2Entry.setDescription('Describes the IPsec IKE SA.')
juniIkeSa2RemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 5, 1, 1), IpAddress())
if mibBuilder.loadTexts: juniIkeSa2RemoteIpAddr.setStatus('current')
if mibBuilder.loadTexts: juniIkeSa2RemoteIpAddr.setDescription('The remote IP address of the IKE security association.')
juniIkeSaRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 5, 1, 2), Unsigned32())
if mibBuilder.loadTexts: juniIkeSaRemotePort.setStatus('current')
if mibBuilder.loadTexts: juniIkeSaRemotePort.setDescription('The remote UDP port the IKE security association.')
juniIkeSa2LocalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 5, 1, 3), IpAddress())
if mibBuilder.loadTexts: juniIkeSa2LocalIpAddr.setStatus('current')
if mibBuilder.loadTexts: juniIkeSa2LocalIpAddr.setDescription('The local IP address of the IKE security association.')
juniIkeSaLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 5, 1, 4), Unsigned32())
if mibBuilder.loadTexts: juniIkeSaLocalPort.setStatus('current')
if mibBuilder.loadTexts: juniIkeSaLocalPort.setDescription('The local UDP port the IKE security association.')
juniIkeSa2RouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 5, 1, 5), Unsigned32())
if mibBuilder.loadTexts: juniIkeSa2RouterIndex.setStatus('current')
if mibBuilder.loadTexts: juniIkeSa2RouterIndex.setDescription('The router index of the virtual router. The value of this object can be used to retrieve additional information in the router MIB.')
juniIkeSa2Direction = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("responder", 0), ("initiator", 1))))
if mibBuilder.loadTexts: juniIkeSa2Direction.setStatus('current')
if mibBuilder.loadTexts: juniIkeSa2Direction.setDescription('This IKE SA is for an initiator or a responder.')
juniIkeSaNegotiationDone = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("negotiationNotDone", 0), ("negotiationDone", 1))))
if mibBuilder.loadTexts: juniIkeSaNegotiationDone.setStatus('current')
if mibBuilder.loadTexts: juniIkeSaNegotiationDone.setDescription('The phase 1 negotiation is done or not.')
juniIkeSa2State = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 5, 1, 8), JuniIpsecPhase1SaState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIkeSa2State.setStatus('current')
if mibBuilder.loadTexts: juniIkeSa2State.setDescription('The state of the IKE secruity association.')
juniIkeSa2Remaining = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 5, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIkeSa2Remaining.setStatus('current')
if mibBuilder.loadTexts: juniIkeSa2Remaining.setDescription('The remaining time of the IKE security association.')
juniRemoteCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 5, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniRemoteCookie.setStatus('current')
if mibBuilder.loadTexts: juniRemoteCookie.setDescription('The remote IKE cookie.')
juniLocalCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 1, 1, 5, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniLocalCookie.setStatus('current')
if mibBuilder.loadTexts: juniLocalCookie.setDescription('The local IKE cookie.')
juniIkeMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 2))
juniIkeMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 2, 1))
juniIkeMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 2, 2))
juniIkeCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 2, 1, 1)).setObjects(("Juniper-IKE-MIB", "juniIkePolicyRuleGroup"), ("Juniper-IKE-MIB", "juniIkeIpv4PreSharedKeyGroup"), ("Juniper-IKE-MIB", "juniIkeFqdnPreSharedKeyGroup"), ("Juniper-IKE-MIB", "juniIkeSaGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniIkeCompliance = juniIkeCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: juniIkeCompliance.setDescription('Obsolete compliance statement for SNMPv2 entities which implement the IKE MIB. This statement became obsolete when the juniIkeSaTable was replaced with the juniIkeSa2Table.')
juniIkeCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 2, 1, 2)).setObjects(("Juniper-IKE-MIB", "juniIkePolicyRuleGroup"), ("Juniper-IKE-MIB", "juniIkeIpv4PreSharedKeyGroup"), ("Juniper-IKE-MIB", "juniIkeFqdnPreSharedKeyGroup"), ("Juniper-IKE-MIB", "juniIkeSa2Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniIkeCompliance2 = juniIkeCompliance2.setStatus('obsolete')
if mibBuilder.loadTexts: juniIkeCompliance2.setDescription('Obsolete compliance statement for SNMPv2 entities which implement the IKE MIB. This statement became obsolete when the juniIkePolicyRuleGroup was replaced with the juniIkePolicyRuleV2Group')
juniIkeCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 2, 1, 3)).setObjects(("Juniper-IKE-MIB", "juniIkePolicyRuleV2Group"), ("Juniper-IKE-MIB", "juniIkeIpv4PreSharedKeyGroup"), ("Juniper-IKE-MIB", "juniIkeFqdnPreSharedKeyGroup"), ("Juniper-IKE-MIB", "juniIkeSa2Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniIkeCompliance3 = juniIkeCompliance3.setStatus('current')
if mibBuilder.loadTexts: juniIkeCompliance3.setDescription('The compliance statement for SNMPv2 entities which implement the IKE MIB.')
juniIkePolicyRuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 2, 2, 1)).setObjects(("Juniper-IKE-MIB", "juniIkePolicyRuleAuthMethod"), ("Juniper-IKE-MIB", "juniIkePolicyRuleEncryptMethod"), ("Juniper-IKE-MIB", "juniIkePolicyRulePfsGroup"), ("Juniper-IKE-MIB", "juniIkePolicyRuleHashMethod"), ("Juniper-IKE-MIB", "juniIkePolicyRuleLifetime"), ("Juniper-IKE-MIB", "juniIkePolicyRuleNegotiationMode"), ("Juniper-IKE-MIB", "juniIkePolicyRuleRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniIkePolicyRuleGroup = juniIkePolicyRuleGroup.setStatus('obsolete')
if mibBuilder.loadTexts: juniIkePolicyRuleGroup.setDescription('Obsolete collection of objects providing configuration information of the IKE policy rule. This group became obsolete when the juniIkePolicyRuleGroup was replaced with the juniIkePolicyRuleV2Group')
juniIkeIpv4PreSharedKeyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 2, 2, 2)).setObjects(("Juniper-IKE-MIB", "juniIkeIpv4PresharedKeyStr"), ("Juniper-IKE-MIB", "juniIkeIpv4PresharedMaskedKeyStr"), ("Juniper-IKE-MIB", "juniIkeIpv4PresharedKeyRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniIkeIpv4PreSharedKeyGroup = juniIkeIpv4PreSharedKeyGroup.setStatus('current')
if mibBuilder.loadTexts: juniIkeIpv4PreSharedKeyGroup.setDescription('A collection of objects providing configuration information of the IKE preshared key in IPv4 format.')
juniIkeFqdnPreSharedKeyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 2, 2, 3)).setObjects(("Juniper-IKE-MIB", "juniIkeFqdnPresharedKeyStr"), ("Juniper-IKE-MIB", "juniIkeFqdnPresharedMaskedKeyStr"), ("Juniper-IKE-MIB", "juniIkeFqdnPresharedKeyRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniIkeFqdnPreSharedKeyGroup = juniIkeFqdnPreSharedKeyGroup.setStatus('current')
if mibBuilder.loadTexts: juniIkeFqdnPreSharedKeyGroup.setDescription('A collection of objects providing configuration information of the IKE preshared key in FQDN format.')
juniIkeSaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 2, 2, 4)).setObjects(("Juniper-IKE-MIB", "juniIkeSaState"), ("Juniper-IKE-MIB", "juniIkeSaRemaining"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniIkeSaGroup = juniIkeSaGroup.setStatus('obsolete')
if mibBuilder.loadTexts: juniIkeSaGroup.setDescription('Obsolete collection of objects providing IKE SA state information. This group became obsolete when the juniIkeSaTable was replaced with the juniIkeSa2Table.')
juniIkeSa2Group = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 2, 2, 5)).setObjects(("Juniper-IKE-MIB", "juniIkeSa2State"), ("Juniper-IKE-MIB", "juniIkeSa2Remaining"), ("Juniper-IKE-MIB", "juniRemoteCookie"), ("Juniper-IKE-MIB", "juniLocalCookie"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniIkeSa2Group = juniIkeSa2Group.setStatus('current')
if mibBuilder.loadTexts: juniIkeSa2Group.setDescription('A collection of objects providing IKE SA state information.')
juniIkePolicyRuleV2Group = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 71, 2, 2, 6)).setObjects(("Juniper-IKE-MIB", "juniIkePolicyRuleV2AuthMethod"), ("Juniper-IKE-MIB", "juniIkePolicyRuleV2EncryptMethod"), ("Juniper-IKE-MIB", "juniIkePolicyRuleV2PfsGroup"), ("Juniper-IKE-MIB", "juniIkePolicyRuleV2HashMethod"), ("Juniper-IKE-MIB", "juniIkePolicyRuleV2Lifetime"), ("Juniper-IKE-MIB", "juniIkePolicyRuleV2NegotiationMode"), ("Juniper-IKE-MIB", "juniIkePolicyRuleV2IpAddress"), ("Juniper-IKE-MIB", "juniIkePolicyRuleV2RouterIndex"), ("Juniper-IKE-MIB", "juniIkePolicyRuleV2RowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniIkePolicyRuleV2Group = juniIkePolicyRuleV2Group.setStatus('current')
if mibBuilder.loadTexts: juniIkePolicyRuleV2Group.setDescription('A collection of objects providing configuration information of the IKE policy rule.')
mibBuilder.exportSymbols("Juniper-IKE-MIB", juniIkePolicyRuleV2NegotiationMode=juniIkePolicyRuleV2NegotiationMode, juniIkePolicyRuleV2HashMethod=juniIkePolicyRuleV2HashMethod, juniIkeCompliance=juniIkeCompliance, juniIkePolicyRuleLifetime=juniIkePolicyRuleLifetime, juniIkeFqdnPresharedRouterIndex=juniIkeFqdnPresharedRouterIndex, juniIkePolicyRuleTable=juniIkePolicyRuleTable, juniIkePolicyRuleV2IpAddress=juniIkePolicyRuleV2IpAddress, juniIkePolicyRuleV2RowStatus=juniIkePolicyRuleV2RowStatus, juniIkePolicyRuleEntry=juniIkePolicyRuleEntry, juniLocalCookie=juniLocalCookie, juniIkeSaDirection=juniIkeSaDirection, juniIkeSa2RemoteIpAddr=juniIkeSa2RemoteIpAddr, JuniIkeGroup=JuniIkeGroup, juniIkeSaLocalIpAddr=juniIkeSaLocalIpAddr, juniIkeMIBGroups=juniIkeMIBGroups, juniIkePolicyRuleEncryptMethod=juniIkePolicyRuleEncryptMethod, juniIkeSaRouterIndex=juniIkeSaRouterIndex, juniIkePolicyRuleRowStatus=juniIkePolicyRuleRowStatus, PYSNMP_MODULE_ID=juniIkeMIB, juniIkeIpv4PresharedKeyEntry=juniIkeIpv4PresharedKeyEntry, juniIkePolicyRuleV2RouterIndex=juniIkePolicyRuleV2RouterIndex, juniIkeSaLocalPort=juniIkeSaLocalPort, juniIkeIpv4PresharedMaskedKeyStr=juniIkeIpv4PresharedMaskedKeyStr, juniIkeMIBCompliances=juniIkeMIBCompliances, juniIkePolicyRuleV2Lifetime=juniIkePolicyRuleV2Lifetime, juniIkeIpv4PresharedKeyRowStatus=juniIkeIpv4PresharedKeyRowStatus, juniIkeSaRemotePort=juniIkeSaRemotePort, juniIkeFqdnPresharedRemote=juniIkeFqdnPresharedRemote, juniIkeFqdnPresharedKeyStr=juniIkeFqdnPresharedKeyStr, juniIkeMIBConformance=juniIkeMIBConformance, JuniIpsecPhase1SaDirection=JuniIpsecPhase1SaDirection, juniIkeFqdnPresharedMaskedKeyStr=juniIkeFqdnPresharedMaskedKeyStr, juniIkeFqdnPresharedKeyRowStatus=juniIkeFqdnPresharedKeyRowStatus, juniIkePolicyRuleV2PfsGroup=juniIkePolicyRuleV2PfsGroup, juniIkePolicyRulePriority=juniIkePolicyRulePriority, juniIkeSa2Entry=juniIkeSa2Entry, juniIkeMIB=juniIkeMIB, juniIkeSa2RouterIndex=juniIkeSa2RouterIndex, juniIkePolicyRuleV2Entry=juniIkePolicyRuleV2Entry, juniIkeSa2Remaining=juniIkeSa2Remaining, juniIkeFqdnPreSharedKeyGroup=juniIkeFqdnPreSharedKeyGroup, juniIkeSaRemaining=juniIkeSaRemaining, juniIkeSaRemoteIpAddr=juniIkeSaRemoteIpAddr, juniIkeSa2LocalIpAddr=juniIkeSa2LocalIpAddr, juniIkePolicyRuleV2Priority=juniIkePolicyRuleV2Priority, JuniIkeAuthenticationMethod=JuniIkeAuthenticationMethod, juniRemoteCookie=juniRemoteCookie, juniIkeSaState=juniIkeSaState, juniIkeSa2Direction=juniIkeSa2Direction, juniIkeObjects=juniIkeObjects, juniIkeFqdnPresharedKeyEntry=juniIkeFqdnPresharedKeyEntry, juniIkeSaTable=juniIkeSaTable, juniIkeCompliance3=juniIkeCompliance3, JuniIkeHashMethod=JuniIkeHashMethod, juniIkePolicyRulePfsGroup=juniIkePolicyRulePfsGroup, JuniIkeEncryptionMethod=JuniIkeEncryptionMethod, JuniIpsecPhase1SaState=JuniIpsecPhase1SaState, juniIkePolicyRuleV2EncryptMethod=juniIkePolicyRuleV2EncryptMethod, juniIkePolicyRuleGroup=juniIkePolicyRuleGroup, juniIkeSaNegotiationDone=juniIkeSaNegotiationDone, juniIkeFqdnPresharedKeyTable=juniIkeFqdnPresharedKeyTable, JuniIkeNegotiationMode=JuniIkeNegotiationMode, juniIkeIpv4PresharedKeyTable=juniIkeIpv4PresharedKeyTable, juniIkeIpv4PresharedKeyStr=juniIkeIpv4PresharedKeyStr, juniIke=juniIke, juniIkeSaEntry=juniIkeSaEntry, juniIkePolicyRuleV2Group=juniIkePolicyRuleV2Group, juniIkeSa2Group=juniIkeSa2Group, JuniIkeNegotiationV2Mode=JuniIkeNegotiationV2Mode, juniIkeIpv4PresharedRouterIdx=juniIkeIpv4PresharedRouterIdx, juniIkeIpv4PresharedRemoteIpAddr=juniIkeIpv4PresharedRemoteIpAddr, juniIkePolicyRuleHashMethod=juniIkePolicyRuleHashMethod, juniIkeSa2State=juniIkeSa2State, juniIkePolicyRuleV2AuthMethod=juniIkePolicyRuleV2AuthMethod, juniIkeIpv4PreSharedKeyGroup=juniIkeIpv4PreSharedKeyGroup, juniIkePolicyRuleV2Table=juniIkePolicyRuleV2Table, juniIkeSaGroup=juniIkeSaGroup, juniIkeCompliance2=juniIkeCompliance2, juniIkePolicyRuleAuthMethod=juniIkePolicyRuleAuthMethod, juniIkeSa2Table=juniIkeSa2Table, juniIkePolicyRuleNegotiationMode=juniIkePolicyRuleNegotiationMode)
