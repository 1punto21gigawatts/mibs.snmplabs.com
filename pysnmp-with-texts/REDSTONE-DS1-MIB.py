#
# PySNMP MIB module REDSTONE-DS1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/REDSTONE-DS1-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:55:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
rsMgmt, = mibBuilder.importSymbols("REDSTONE-SMI", "rsMgmt")
RsTimeSlotMap, = mibBuilder.importSymbols("REDSTONE-TC", "RsTimeSlotMap")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter64, TimeTicks, Unsigned32, Counter32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32, ModuleIdentity, MibIdentifier, ObjectIdentity, iso, NotificationType, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "TimeTicks", "Unsigned32", "Counter32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32", "ModuleIdentity", "MibIdentifier", "ObjectIdentity", "iso", "NotificationType", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
rsDs1MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2773, 2, 5))
rsDs1MIB.setRevisions(('1999-06-17 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rsDs1MIB.setRevisionsDescriptions(('Updated version of this MIB module.',))
if mibBuilder.loadTexts: rsDs1MIB.setLastUpdated('9906170000Z')
if mibBuilder.loadTexts: rsDs1MIB.setOrganization('Redstone Communications, Inc.')
if mibBuilder.loadTexts: rsDs1MIB.setContactInfo(' Redstone Communications, Inc. 5 Carlisle Road Westford MA 01886 USA Tel: +1-978-692-1999 Email: mib@redstonecom.com ')
if mibBuilder.loadTexts: rsDs1MIB.setDescription('The T1 MIB for the Redstone Communications Inc. enterprise.')
rsDs1Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 5, 1))
rsDsx1ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2773, 2, 5, 1, 1), )
if mibBuilder.loadTexts: rsDsx1ConfigTable.setStatus('current')
if mibBuilder.loadTexts: rsDsx1ConfigTable.setDescription('This table contains entries for DS1/E1 interfaces present in the system.')
rsDsx1ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2773, 2, 5, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rsDsx1ConfigEntry.setStatus('current')
if mibBuilder.loadTexts: rsDsx1ConfigEntry.setDescription('Each entry describes the characteristics of an DS1/E1 interface.')
rsDsx1TimeSlotMap = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 5, 1, 1, 1, 1), RsTimeSlotMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsDsx1TimeSlotMap.setStatus('current')
if mibBuilder.loadTexts: rsDsx1TimeSlotMap.setDescription('A bitmap representing the timeslots on the DS1/E1 interface that have been allocated for service. For channelized DS1/E1, set bits reflect the union of timeslot allocations across all fractional arrangements operating over this DS1/E1 interface. For unchannelized DS1/E1, all relevant timeslot bits will be set.')
rsDsx1Ds1ChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsDsx1Ds1ChannelNumber.setStatus('current')
if mibBuilder.loadTexts: rsDsx1Ds1ChannelNumber.setDescription('This variable represents the channel number of the DS1/E1 on its parent DS3/E3. A value of 0 indicates this DS1/E1 does not have a parent DS3/E3.')
rsDsx1Capabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsDsx1Capabilities.setStatus('current')
if mibBuilder.loadTexts: rsDsx1Capabilities.setDescription('A value which indicates the set of capabilities of the DS1/E1 interface. The value is a sum. This sum initially takes the value zero, Then, for each capability, C, in the range 1 through 3, that this interface supports, 2 raised to (C - 1) is added to the sum. For example, an interface which is only E1 capable would have a value of 2 (2^(2-1)). In contrast, an interface which is both T1 and J1 capable would have a value of 5 (2^(1-1) + 2^(3-1)). The values for DS1/E1 interface capabilities are as follows: capability function 1 T1 2 E1 3 J1')
rsDsx1Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 5, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1", 1), ("e1", 2), ("j1", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsDsx1Mode.setStatus('current')
if mibBuilder.loadTexts: rsDsx1Mode.setDescription('This variable represents the DS1/E1 interface mode. The value of the rsDsx1Capabilities object for the DS1/E1 interface indicates the valid set of values for this object.')
rsDsx1LineBuildOutCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 5, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsDsx1LineBuildOutCapabilities.setStatus('current')
if mibBuilder.loadTexts: rsDsx1LineBuildOutCapabilities.setDescription('A value which indicates the set of line build out capabilities of the DS1/E1 interface. The value is a sum. This sum initially takes the value zero, Then, for each line build out capability, C, in the range 1 or 2, that this interface supports, 2 raised to (C - 1) is added to the sum. For example, an interface which is only short haul capable would have a value of 2 (2^(2-1)). In contrast, an interface which is both short haul and long haul capable would have a value of 3 (2^(1-1) + 2^(2-1)). The values for DS1/E1 interface line build out capabilities are as follows: line build out capability function 1 short haul 2 long haul')
rsDsx1LineBuildOutType = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 5, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("shortHaul", 1), ("longHaul", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsDsx1LineBuildOutType.setStatus('current')
if mibBuilder.loadTexts: rsDsx1LineBuildOutType.setDescription('This variable represents the configured line build out type of the DS1/E1 interface. The value of the rsDsx1LineBuildOutCapabilities object for the DS1/E1 interface indicates the valid set of values for this object.')
rsDsx1LineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 5, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("db0", 1), ("dbMinus7Point5", 2), ("dbMinus15", 3), ("dbMinus22Point5", 4), ("notSupported", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsDsx1LineAttenuation.setStatus('current')
if mibBuilder.loadTexts: rsDsx1LineAttenuation.setDescription('This variable represents the configured line attenuation of the DS1/E1 interface. Note that the value of this object only takes effect when the value of the rsDsx1LineBuildOutType for the DS1/E1 interface is set to longHaul(2).')
rsDsx1LineLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 5, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64000))).setUnits('meters').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsDsx1LineLength.setStatus('current')
if mibBuilder.loadTexts: rsDsx1LineLength.setDescription('This variable represents the length of the DS1/E1 line in meters. Note that the value of this object only takes effect when the value of the rsDsx1LineBuildOutType for the DS1/E1 interface is set to shortHaul(1).')
rsDs1Conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 5, 4))
rsDs1Compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 5, 4, 1))
rsDs1Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 5, 4, 2))
rsDs1Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2773, 2, 5, 4, 1, 1)).setObjects(("REDSTONE-DS1-MIB", "rsDs1Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsDs1Compliance = rsDs1Compliance.setStatus('current')
if mibBuilder.loadTexts: rsDs1Compliance.setDescription('The compliance statement for entities which implement the Redstone DS1/E1 MIB.')
rsDs1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 2773, 2, 5, 4, 2, 1)).setObjects(("REDSTONE-DS1-MIB", "rsDsx1TimeSlotMap"), ("REDSTONE-DS1-MIB", "rsDsx1Ds1ChannelNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsDs1Group = rsDs1Group.setStatus('current')
if mibBuilder.loadTexts: rsDs1Group.setDescription('A collection of objects providing management of DS1/E1 interfaces in a Redstone product.')
mibBuilder.exportSymbols("REDSTONE-DS1-MIB", rsDsx1ConfigEntry=rsDsx1ConfigEntry, rsDs1Conformance=rsDs1Conformance, rsDs1Groups=rsDs1Groups, rsDsx1Capabilities=rsDsx1Capabilities, rsDs1Objects=rsDs1Objects, rsDsx1Ds1ChannelNumber=rsDsx1Ds1ChannelNumber, rsDsx1LineAttenuation=rsDsx1LineAttenuation, rsDs1Compliances=rsDs1Compliances, rsDsx1ConfigTable=rsDsx1ConfigTable, rsDsx1Mode=rsDsx1Mode, PYSNMP_MODULE_ID=rsDs1MIB, rsDs1Compliance=rsDs1Compliance, rsDs1Group=rsDs1Group, rsDsx1LineBuildOutType=rsDsx1LineBuildOutType, rsDsx1TimeSlotMap=rsDsx1TimeSlotMap, rsDsx1LineLength=rsDsx1LineLength, rsDsx1LineBuildOutCapabilities=rsDsx1LineBuildOutCapabilities, rsDs1MIB=rsDs1MIB)
