#
# PySNMP MIB module WWP-LEOS-BENCHMARK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-LEOS-BENCHMARK-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:37:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter64, IpAddress, NotificationType, TimeTicks, Integer32, Gauge32, MibIdentifier, Unsigned32, iso, Bits, Counter32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter64", "IpAddress", "NotificationType", "TimeTicks", "Integer32", "Gauge32", "MibIdentifier", "Unsigned32", "iso", "Bits", "Counter32", "ModuleIdentity")
DisplayString, TruthValue, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention", "MacAddress")
wwpModulesLeos, = mibBuilder.importSymbols("WWP-SMI", "wwpModulesLeos")
wwpLeosBenchmarkMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43))
wwpLeosBenchmarkMIB.setRevisions(('2012-02-13 08:00', '2012-02-03 08:00', '2010-12-14 08:00', '2010-11-25 08:00', '2010-11-15 08:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpLeosBenchmarkMIB.setRevisionsDescriptions(('Added active vid and dst mac address associated with latest version of results', 'Added new attribute to the profile table for max searches during throughput test, max samples for latency, sampling interval for latency, vid validation switch and frame loss start bandwidth. Added new frame size table indexed by profile Id and frame size index representing the list of frame sizes used when running tests for the profile.', 'Added bandwidth parameter to profile table Modified generator module to report iteration and total number of iteration', 'Added RateIndex field to frameloss stats table index.', 'Initial creation.',))
if mibBuilder.loadTexts: wwpLeosBenchmarkMIB.setLastUpdated('201202130800Z')
if mibBuilder.loadTexts: wwpLeosBenchmarkMIB.setOrganization('Ciena, Inc')
if mibBuilder.loadTexts: wwpLeosBenchmarkMIB.setContactInfo(' Mib Meister 115 North Sullivan Road Spokane Valley, WA 99037 USA Phone: +1 509 242 9000 Email: support@ciena.com')
if mibBuilder.loadTexts: wwpLeosBenchmarkMIB.setDescription('The MIB module for monitoring benchmark testing.')
class BenchmarkLatencyPdvTestState(TextualConvention, Integer32):
    description = 'Test state for latency and packet delay variation tests.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("idle", 1), ("sendingTraffic", 2), ("waitingForTimestampData", 3), ("waitingForResidualPackets", 4), ("processingResults", 5), ("stoppedByIntervalTimer", 6), ("stoppedByDurationTimer", 7), ("stoppedByUser", 8), ("done", 9))

wwpLeosBenchmarkMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1))
wwpLeosBenchmarkModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 1))
wwpLeosBenchmarkReflectorModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 2))
wwpLeosBenchmarkGeneratorModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 3))
wwpLeosBenchmarkFpgaStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 4))
wwpLeosBenchmarkPortStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5))
wwpLeosBenchmarkProfileObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6))
wwpLeosBenchmarkRole = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("reflector", 2), ("generator", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosBenchmarkRole.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkRole.setDescription('System level benchmark role')
wwpLeosBenchmarkPort = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosBenchmarkPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPort.setDescription('System level port under test')
wwpLeosBenchmarkMode = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("inService", 2), ("outOfService", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosBenchmarkMode.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkMode.setDescription('System level benchmark role')
wwpLeosBenchmarkEnable = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosBenchmarkEnable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkEnable.setDescription('System level benchmark enable/disable.')
wwpLeosBenchmarkOperEnable = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkOperEnable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkOperEnable.setDescription('System level benchmark operation enable/disable.')
wwpLeosBenchmarkLocalFpgaMac = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkLocalFpgaMac.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkLocalFpgaMac.setDescription('The RFC2544 internal test port assigned mac address.')
wwpLeosBenchmarkReflectorEnable = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosBenchmarkReflectorEnable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkReflectorEnable.setDescription('Reflector enable/disable.')
wwpLeosBenchmarkReflectorVid = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosBenchmarkReflectorVid.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkReflectorVid.setDescription('Vlan ID to match on in order for packet to be reflected. -1 instruct reflector to ignore vlan ID.')
wwpLeosBenchmarkReflectorVendorType = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("ciena", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosBenchmarkReflectorVendorType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkReflectorVendorType.setDescription('Indicator as to what type of equipement is generating the test traffic on the remote end.')
wwpLeosBenchmarkGeneratorEnable = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 3, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosBenchmarkGeneratorEnable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkGeneratorEnable.setDescription('Generator enable/disable.')
wwpLeosBenchmarkGeneratorprofileUnderTest = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkGeneratorprofileUnderTest.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkGeneratorprofileUnderTest.setDescription('Profile currently under test or for which testing was last completed.')
wwpLeosBenchmarkGeneratorThroughputTestState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("idle", 1), ("running", 2), ("waitingForResidualPackets", 3), ("processingResults", 4), ("stoppedByIntervalTimer", 5), ("stoppedByDurationTimer", 6), ("stoppedByUser", 7), ("done", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkGeneratorThroughputTestState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkGeneratorThroughputTestState.setDescription('Throughput test state.')
wwpLeosBenchmarkGeneratorFramelossTestState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("idle", 1), ("runningFirstTest", 2), ("waitingForResidualFirstPackets", 3), ("processingFirstResults", 4), ("runningSecondTest", 5), ("waitingForResidualSecondPackets", 6), ("processingSecondResults", 7), ("stoppedByIntervalTimer", 8), ("stoppedByDurationTimer", 9), ("stoppedByUser", 10), ("done", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkGeneratorFramelossTestState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkGeneratorFramelossTestState.setDescription('Frameloss test state.')
wwpLeosBenchmarkGeneratorLatencyTestState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 3, 5), BenchmarkLatencyPdvTestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkGeneratorLatencyTestState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkGeneratorLatencyTestState.setDescription('Latency test state.')
wwpLeosBenchmarkGeneratorPdvTestState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 3, 6), BenchmarkLatencyPdvTestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkGeneratorPdvTestState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkGeneratorPdvTestState.setDescription('Packet delay variation test state.')
wwpLeosBenchmarkGeneratorRfc2544State = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 1), ("running", 2), ("stoppedByIntervalTimer", 3), ("stoppedByDurationTimer", 4), ("stoppedByUser", 5), ("done", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkGeneratorRfc2544State.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkGeneratorRfc2544State.setDescription('RFC 2544 test suite state.')
wwpLeosBenchmarkGeneratorCurrentPktSize = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkGeneratorCurrentPktSize.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkGeneratorCurrentPktSize.setDescription('Packet size in bytes currently used by the running test.')
wwpLeosBenchmarkGeneratorCurrentRate = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkGeneratorCurrentRate.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkGeneratorCurrentRate.setDescription('Traffic rate currently used to generate packets in percent of the line rate')
wwpLeosBenchmarkGeneratorSamplesCompleted = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkGeneratorSamplesCompleted.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkGeneratorSamplesCompleted.setDescription('When latency and/or pdv is running, this indicates how many samples have been gathered so far.')
wwpLeosBenchmarkGeneratorCurrentIteration = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkGeneratorCurrentIteration.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkGeneratorCurrentIteration.setDescription('Indicates which iteration of the test suite is currently running for the profile under test.')
wwpLeosBenchmarkGeneratorTotalIterations = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkGeneratorTotalIterations.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkGeneratorTotalIterations.setDescription('Indicates the total number of iterations that will be run in accordance to the interval and duration settings of the profile under test. A value of -1 indicates indefinite number of iterations; test traffic will stop when the user manually stops the profile under test.')
wwpLeosBenchmarkProfileTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 1), )
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileTable.setDescription('Table of profile entries.')
wwpLeosBenchmarkProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 1, 1), ).setIndexNames((0, "WWP-LEOS-BENCHMARK-MIB", "wwpLeosBenchmarkProfileEntryId"))
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntry.setDescription('BENCHMARK Profile characteristics.')
wwpLeosBenchmarkProfileEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryId.setDescription('Index for BENCHMARK profile records.')
wwpLeosBenchmarkProfileEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryName.setDescription('Name of the profile as entered when created.')
wwpLeosBenchmarkProfileEntryEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryEnabled.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryEnabled.setDescription('Profile enable/disable')
wwpLeosBenchmarkProfileEntryStarted = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryStarted.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryStarted.setDescription('Profile start/stop')
wwpLeosBenchmarkProfileEntryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("t15min", 1), ("t1hr", 2), ("t6hr", 3), ("tCompletion", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryInterval.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryInterval.setDescription('Interval between the start of one test group to the start of the next test group.')
wwpLeosBenchmarkProfileEntryDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("t15min", 1), ("t1hr", 2), ("t6hr", 3), ("t24hr", 4), ("tIndefinite", 5), ("tOnce", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryDuration.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryDuration.setDescription('Duration of the testing. The test group is repeated until the duration ends. When indefinite is set, test group is run only once to completion')
wwpLeosBenchmarkProfileEntryThroughputTest = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryThroughputTest.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryThroughputTest.setDescription('Run throughput test')
wwpLeosBenchmarkProfileEntryFramelossTest = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryFramelossTest.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryFramelossTest.setDescription('Run frame loss test')
wwpLeosBenchmarkProfileEntryLatencyTest = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryLatencyTest.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryLatencyTest.setDescription('Run latency test')
wwpLeosBenchmarkProfileEntryPdvTest = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 1, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryPdvTest.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryPdvTest.setDescription('Run packet delay variation test')
wwpLeosBenchmarkProfileEntryRfc2544Suite = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 1, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryRfc2544Suite.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryRfc2544Suite.setDescription('Run RFC2544 test suite which includes throughput, frame loss and latency tests')
wwpLeosBenchmarkProfileEntryDstmac = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 1, 1, 12), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryDstmac.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryDstmac.setDescription('MAC address to use as the destination MAC address on the generated packets.')
wwpLeosBenchmarkProfileEntryEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("untagged", 1), ("dot1q", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryEncapType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryEncapType.setDescription('Encapsulation type to use for generated packets.')
wwpLeosBenchmarkProfileEntryVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryVid.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryVid.setDescription('Vlan ID to used for generated packets.')
wwpLeosBenchmarkProfileEntryPcp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryPcp.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryPcp.setDescription('Vlan priority code point value to use for the generated packets.')
wwpLeosBenchmarkProfileEntryCfi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryCfi.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryCfi.setDescription('Vlan canonical format indicator to use for the generated packets.')
wwpLeosBenchmarkProfileEntryTpid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryTpid.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryTpid.setDescription('Vlan tag protocol identifier to use for the generated packets.')
wwpLeosBenchmarkProfileEntryPduType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ethernet", 1), ("ip", 2), ("udpecho", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryPduType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryPduType.setDescription('Vlan tag protocol identifier to use for the generated packets.')
wwpLeosBenchmarkProfileEntrySrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 1, 1, 19), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntrySrcIpAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntrySrcIpAddr.setDescription('Source IP address to use for the generated packets.')
wwpLeosBenchmarkProfileEntryDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 1, 1, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryDstIpAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryDstIpAddr.setDescription('Destination IP address to use for the generated packets.')
wwpLeosBenchmarkProfileEntryDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryDscp.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryDscp.setDescription('IP DSCP value to use for the generated packets.')
wwpLeosBenchmarkProfileEntryCustomPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 1, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryCustomPayload.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryCustomPayload.setDescription('Custom payload to be used on the generated packets.')
wwpLeosBenchmarkProfileEntryBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryBandwidth.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryBandwidth.setDescription('Maximum bandwidth to use when generating test traffic for the profile.')
wwpLeosBenchmarkProfileEntryVidValidation = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 1, 1, 24), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryVidValidation.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryVidValidation.setDescription('Indicates whether VID validation is performed in the classifier or not on the returning packet.')
wwpLeosBenchmarkProfileEntryMaxSearches = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryMaxSearches.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryMaxSearches.setDescription('For the throughput test, this is the maximum number of searches to find a transmit rate without drops for a given frame size.')
wwpLeosBenchmarkProfileEntryMaxSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryMaxSamples.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryMaxSamples.setDescription('For the latency and PDV tests, this is the number of samples to take in order to determine the min, avg and max latency and avg PDV.')
wwpLeosBenchmarkProfileEntrySamplingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntrySamplingInterval.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntrySamplingInterval.setDescription('For the latency and PDV tests, this is the interval, in 100ms, to wait between samples.')
wwpLeosBenchmarkProfileEntryFrameLossStartBw = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("profileBandwidth", 1), ("maximumThroughput", 2), ("maximumLineRate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryFrameLossStartBw.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileEntryFrameLossStartBw.setDescription('For the frame loss test, this indicates which bandwidth value to use as the starting bandwidth; the maximum bandwidth determined via the throughput test, the bandwidth parameter configured in the profile, or the maximum bandwidth of the link.')
wwpLeosBenchmarkProfileThroughputStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 2), )
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileThroughputStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileThroughputStatisticsTable.setDescription('Table of BENCHMARK profile throughput statistics in Mbps.')
wwpLeosBenchmarkProfileThroughputStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 2, 1), ).setIndexNames((0, "WWP-LEOS-BENCHMARK-MIB", "wwpLeosBenchmarkProfileThroughputStatsProfileId"), (0, "WWP-LEOS-BENCHMARK-MIB", "wwpLeosBenchmarkProfileThroughputStatsFrameSizeIndex"))
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileThroughputStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileThroughputStatsEntry.setDescription('BENCHMARK profile throughput statistics.')
wwpLeosBenchmarkProfileThroughputStatsProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileThroughputStatsProfileId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileThroughputStatsProfileId.setDescription('Profile Id for which those throughput stats are associated.')
wwpLeosBenchmarkProfileThroughputStatsFrameSizeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileThroughputStatsFrameSizeIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileThroughputStatsFrameSizeIndex.setDescription('Frame size index for which those throughput stats are associated.')
wwpLeosBenchmarkProfileThroughputStatsFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileThroughputStatsFrameSize.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileThroughputStatsFrameSize.setDescription('Packet size in bytes.')
wwpLeosBenchmarkProfileThroughputStatsMin = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileThroughputStatsMin.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileThroughputStatsMin.setDescription('Minimum throughput recorded for the given packet size.')
wwpLeosBenchmarkProfileThroughputStatsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileThroughputStatsMax.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileThroughputStatsMax.setDescription('Maximum throughput recorded for the given packet size.')
wwpLeosBenchmarkProfileThroughputStatsAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileThroughputStatsAvg.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileThroughputStatsAvg.setDescription('Average throughput recorded for the given packet size.')
wwpLeosBenchmarkProfileThroughputStatsIterations = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileThroughputStatsIterations.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileThroughputStatsIterations.setDescription('Number of times the test has been run for this packet size.')
wwpLeosBenchmarkProfileThroughputStatsActiveVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileThroughputStatsActiveVid.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileThroughputStatsActiveVid.setDescription('Active VLAN Id. Either the value configured in the profile or the one specified with the start command.')
wwpLeosBenchmarkProfileThroughputStatsActiveDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 2, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileThroughputStatsActiveDstMac.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileThroughputStatsActiveDstMac.setDescription('Active destination MAC address. Either the value configured in the profile or the value specified with the start command.')
wwpLeosBenchmarkProfileFramelossStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 3), )
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileFramelossStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileFramelossStatisticsTable.setDescription('Table of BENCHMARK profile frameloss statistics.')
wwpLeosBenchmarkProfileFramelossStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 3, 1), ).setIndexNames((0, "WWP-LEOS-BENCHMARK-MIB", "wwpLeosBenchmarkProfileFramelossStatsProfileId"), (0, "WWP-LEOS-BENCHMARK-MIB", "wwpLeosBenchmarkProfileFramelossStatsFrameSizeIndex"), (0, "WWP-LEOS-BENCHMARK-MIB", "wwpLeosBenchmarkProfileFramelossStatsRateIndex"))
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileFramelossStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileFramelossStatsEntry.setDescription('BENCHMARK profile frameloss statistics.')
wwpLeosBenchmarkProfileFramelossStatsProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileFramelossStatsProfileId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileFramelossStatsProfileId.setDescription('Profile Id.')
wwpLeosBenchmarkProfileFramelossStatsFrameSizeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileFramelossStatsFrameSizeIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileFramelossStatsFrameSizeIndex.setDescription('Frame size index.')
wwpLeosBenchmarkProfileFramelossStatsRateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileFramelossStatsRateIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileFramelossStatsRateIndex.setDescription('Rate index.')
wwpLeosBenchmarkProfileFramelossStatsFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileFramelossStatsFrameSize.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileFramelossStatsFrameSize.setDescription('Packet size in bytes.')
wwpLeosBenchmarkProfileFramelossStatsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileFramelossStatsRate.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileFramelossStatsRate.setDescription('Rate in percent of line rate.')
wwpLeosBenchmarkProfileFramelossStatsFirst = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileFramelossStatsFirst.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileFramelossStatsFirst.setDescription('Number of frames lost on first test sequence.')
wwpLeosBenchmarkProfileFramelossStatsSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileFramelossStatsSecond.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileFramelossStatsSecond.setDescription('Number of frames lost on second test sequence.')
wwpLeosBenchmarkProfileFramelossStatsActiveVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileFramelossStatsActiveVid.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileFramelossStatsActiveVid.setDescription('Active VLAN Id. Either the value configured in the profile or the one specified with the start command.')
wwpLeosBenchmarkProfileFramelossStatsActiveDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 3, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileFramelossStatsActiveDstMac.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileFramelossStatsActiveDstMac.setDescription('Active destination MAC address. Either the value configured in the profile or the value specified with the start command.')
wwpLeosBenchmarkProfileLatencyStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 4), )
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileLatencyStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileLatencyStatisticsTable.setDescription('Table of BENCHMARK profile latency statistics in usec.')
wwpLeosBenchmarkProfileLatencyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 4, 1), ).setIndexNames((0, "WWP-LEOS-BENCHMARK-MIB", "wwpLeosBenchmarkProfileLatencyStatsProfileId"), (0, "WWP-LEOS-BENCHMARK-MIB", "wwpLeosBenchmarkProfileLatencyStatsFrameSizeIndex"))
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileLatencyStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileLatencyStatsEntry.setDescription('BENCHMARK profile latency statistics.')
wwpLeosBenchmarkProfileLatencyStatsProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileLatencyStatsProfileId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileLatencyStatsProfileId.setDescription('Profile Id for which those latency stats are associated.')
wwpLeosBenchmarkProfileLatencyStatsFrameSizeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileLatencyStatsFrameSizeIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileLatencyStatsFrameSizeIndex.setDescription('Frame size index.')
wwpLeosBenchmarkProfileLatencyStatsFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileLatencyStatsFrameSize.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileLatencyStatsFrameSize.setDescription('Packet size in bytes.')
wwpLeosBenchmarkProfileLatencyStatsMin = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileLatencyStatsMin.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileLatencyStatsMin.setDescription('Minimum latency recorded for the given packet size.')
wwpLeosBenchmarkProfileLatencyStatsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileLatencyStatsMax.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileLatencyStatsMax.setDescription('Maximum latency recorded for the given packet size.')
wwpLeosBenchmarkProfileLatencyStatsAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileLatencyStatsAvg.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileLatencyStatsAvg.setDescription('Average latency recorded for the given packet size.')
wwpLeosBenchmarkProfileLatencyStatsSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileLatencyStatsSamples.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileLatencyStatsSamples.setDescription('Number of samples taken during the test.')
wwpLeosBenchmarkProfileLatencyStatsActiveVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileLatencyStatsActiveVid.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileLatencyStatsActiveVid.setDescription('Active VLAN Id. Either the value configured in the profile or the one specified with the start command.')
wwpLeosBenchmarkProfileLatencyStatsActiveDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 4, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileLatencyStatsActiveDstMac.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileLatencyStatsActiveDstMac.setDescription('Active destination MAC address. Either the value configured in the profile or the value specified with the start command.')
wwpLeosBenchmarkProfilePdvStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 5), )
if mibBuilder.loadTexts: wwpLeosBenchmarkProfilePdvStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfilePdvStatisticsTable.setDescription('Table of BENCHMARK profile packet delay variation statistics in usec.')
wwpLeosBenchmarkProfilePdvStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 5, 1), ).setIndexNames((0, "WWP-LEOS-BENCHMARK-MIB", "wwpLeosBenchmarkProfilePdvStatsProfileId"), (0, "WWP-LEOS-BENCHMARK-MIB", "wwpLeosBenchmarkProfilePdvStatsFrameSizeIndex"))
if mibBuilder.loadTexts: wwpLeosBenchmarkProfilePdvStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfilePdvStatsEntry.setDescription('BENCHMARK profile packet delay variation statistics.')
wwpLeosBenchmarkProfilePdvStatsProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfilePdvStatsProfileId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfilePdvStatsProfileId.setDescription('Profile Id associated to those PDV stats.')
wwpLeosBenchmarkProfilePdvStatsFrameSizeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfilePdvStatsFrameSizeIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfilePdvStatsFrameSizeIndex.setDescription('Frame size index associated to those PDV stats.')
wwpLeosBenchmarkProfilePdvStatsFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfilePdvStatsFrameSize.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfilePdvStatsFrameSize.setDescription('Packet size in bytes.')
wwpLeosBenchmarkProfilePdvStatsAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfilePdvStatsAvg.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfilePdvStatsAvg.setDescription('Average PDV recorded for the given packet size.')
wwpLeosBenchmarkProfilePdvStatsSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfilePdvStatsSamples.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfilePdvStatsSamples.setDescription('Number of samples used for the test.')
wwpLeosBenchmarkProfilePdvStatsActiveVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfilePdvStatsActiveVid.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfilePdvStatsActiveVid.setDescription('Active VLAN Id. Either the value configured in the profile or the one specified with the start command.')
wwpLeosBenchmarkProfilePdvStatsActiveDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 5, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfilePdvStatsActiveDstMac.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfilePdvStatsActiveDstMac.setDescription('Active destination MAC address. Either the value configured in the profile or the value specified with the start command.')
wwpLeosBenchmarkProfileFrameSizeTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 6), )
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileFrameSizeTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileFrameSizeTable.setDescription('Table providing the list of frame sizes used for testing the profiles.')
wwpLeosBenchmarkProfileFrameSizeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 6, 1), ).setIndexNames((0, "WWP-LEOS-BENCHMARK-MIB", "wwpLeosBenchmarkProfileFrameSizeProfileId"), (0, "WWP-LEOS-BENCHMARK-MIB", "wwpLeosBenchmarkProfileFrameSizeIndex"))
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileFrameSizeEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileFrameSizeEntry.setDescription('Profile frame size entry.')
wwpLeosBenchmarkProfileFrameSizeProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileFrameSizeProfileId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileFrameSizeProfileId.setDescription('Profile Id this frame size entry is associated with.')
wwpLeosBenchmarkProfileFrameSizeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileFrameSizeIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileFrameSizeIndex.setDescription("Frame size index into the targeted profile's frame size list.")
wwpLeosBenchmarkProfileFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 6, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileFrameSize.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkProfileFrameSize.setDescription('Frame size in bytes.')
wwpLeosBenchmarkFpgaStatsRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 4, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkFpgaStatsRxPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkFpgaStatsRxPkts.setDescription('BENCHMARK FPGA stats received packets')
wwpLeosBenchmarkFpgaStatsCrcPkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 4, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkFpgaStatsCrcPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkFpgaStatsCrcPkts.setDescription('BENCHMARK FPGA stats packets received with CRC errors')
wwpLeosBenchmarkFpgaStatsUdpChecksumPkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 4, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkFpgaStatsUdpChecksumPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkFpgaStatsUdpChecksumPkts.setDescription('BENCHMARK FPGA stats packets received with CRC errors')
wwpLeosBenchmarkFpgaStatsDiscardPkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 4, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkFpgaStatsDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkFpgaStatsDiscardPkts.setDescription("BENCHMARK FPGA stats packets received which don't match any active/enabled profile(s).")
wwpLeosBenchmarkFpgaStatsDuplicatePkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 4, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkFpgaStatsDuplicatePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkFpgaStatsDuplicatePkts.setDescription('BENCHMARK FPGA stats packets received with a duplicate sequence number.')
wwpLeosBenchmarkFpgaStatsOOSeqPkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 4, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkFpgaStatsOOSeqPkts.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosBenchmarkFpgaStatsOOSeqPkts.setDescription('BENCHMARK FPGA stats packets received out of sequence')
wwpLeosBenchmarkFpgaStatsTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 4, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkFpgaStatsTxPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkFpgaStatsTxPkts.setDescription('BENCHMARK FPGA stats packets transmitted')
wwpLeosBenchmarkFpgaStatsOOOPkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 4, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkFpgaStatsOOOPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkFpgaStatsOOOPkts.setDescription('BENCHMARK FPGA stats packets received with an out of order sequence number')
wwpLeosBenchmarkFpgaStatsDiscSeqNumPkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 4, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkFpgaStatsDiscSeqNumPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkFpgaStatsDiscSeqNumPkts.setDescription('BENCHMARK FPGA stats packets received with a discontinued sequence number')
wwpLeosBenchmarkPortStatsTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsTxBytes.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsTxBytes.setDescription('Number of bytes transmitted by the benchmak port')
wwpLeosBenchmarkPortStatsTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsTxPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsTxPkts.setDescription('Number of packets transmitted by the benchmak port')
wwpLeosBenchmarkPortStatsCrcErrorPkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsCrcErrorPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsCrcErrorPkts.setDescription('Number of packets with CRC errors')
wwpLeosBenchmarkPortStatsUcastPkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsUcastPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsUcastPkts.setDescription('Number of unicast packets transmitted by the benchmak port')
wwpLeosBenchmarkPortStatsMcastPkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsMcastPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsMcastPkts.setDescription('Number of multicast packets transmitted by the benchmak port')
wwpLeosBenchmarkPortStatsBcastPkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsBcastPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsBcastPkts.setDescription('Number of broadcast packets transmitted by the benchmak port')
wwpLeosBenchmarkPortStatsUndersizePkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsUndersizePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsUndersizePkts.setDescription('The total number of packets received that were less than 64 octets long (excluding framing bits, but including FCS octets) and were otherwise well formed.')
wwpLeosBenchmarkPortStatsOversizePkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsOversizePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsOversizePkts.setDescription('The total number of packets received that were longer than 1518 octets (excluding framing bits, but including FCS octets) and were otherwise well formed.')
wwpLeosBenchmarkPortStatsFragmentsPkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsFragmentsPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsFragmentsPkts.setDescription('The total number of packets received that were less than 64 octets in length (excluding framing bits but including FCS octets) and had either a bad Frame Check Sequence (FCS) with an integral number of octets (FCS Error) or a bad FCS with a non-integral number of octets (Alignment Error).')
wwpLeosBenchmarkPortStatsJabbersPkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsJabbersPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsJabbersPkts.setDescription('The total number of packets received that were longer than 1518 octets (excluding framing bits, but including FCS octets), and had either a bad Frame Check Sequence (FCS) with an integral number of octets (FCS Error) or a bad FCS with a non-integral number of octets (Alignment Error).')
wwpLeosBenchmarkPortStatsTxPausePkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsTxPausePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsTxPausePkts.setDescription('The transmit pause packets for the port.')
wwpLeosBenchmarkPortStatsTxDropPkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsTxDropPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsTxDropPkts.setDescription('The total number of dropped packets on the benchmark port when traffic profiles are enabled. (311v only)')
wwpLeosBenchmarkPortStatsTxDiscardPkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsTxDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsTxDiscardPkts.setDescription('The total number of discarded packets.')
wwpLeosBenchmarkPortStatsTxLOutRangePkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsTxLOutRangePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsTxLOutRangePkts.setDescription('The transmit length out of range packet count.')
wwpLeosBenchmarkPortStatsTx64OctsPkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsTx64OctsPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsTx64OctsPkts.setDescription('Number of 64-byte packets transmitted on the benchmark port.')
wwpLeosBenchmarkPortStatsTx65To127Pkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsTx65To127Pkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsTx65To127Pkts.setDescription('Number of 64 to 127-byte packets transmitted on the benchmark port.')
wwpLeosBenchmarkPortStatsTx128To255Pkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsTx128To255Pkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsTx128To255Pkts.setDescription('Number of 128 to 255-byte packets transmitted on the benchmark port.')
wwpLeosBenchmarkPortStatsTx256To511Pkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsTx256To511Pkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsTx256To511Pkts.setDescription('Number of 256 to 511-byte packets transmitted on the benchmark port.')
wwpLeosBenchmarkPortStatsTx512To1023Pkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsTx512To1023Pkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsTx512To1023Pkts.setDescription('Number of 512 to 1023-byte packets transmitted on the benchmark port.')
wwpLeosBenchmarkPortStatsTx1024To1518Pkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsTx1024To1518Pkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsTx1024To1518Pkts.setDescription('Number of 1024 to 1518-byte packets transmitted on the benchmark port.')
wwpLeosBenchmarkPortStatsTx1519To2047Pkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsTx1519To2047Pkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsTx1519To2047Pkts.setDescription('Number of 1519 to 2047-byte packets transmitted on the benchmark port.')
wwpLeosBenchmarkPortStatsTx2048To4095Pkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsTx2048To4095Pkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsTx2048To4095Pkts.setDescription('Number of 2048 to 4095-byte packets transmitted on the benchmark port.')
wwpLeosBenchmarkPortStatsTx4096To9216Pkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsTx4096To9216Pkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsTx4096To9216Pkts.setDescription('Number of 4096 to 9216-byte packets transmitted on the benchmark port.')
wwpLeosBenchmarkPortStatsRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRxBytes.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRxBytes.setDescription('Number of bytes received on the benchmark port.')
wwpLeosBenchmarkPortStatsRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRxPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRxPkts.setDescription('Number of packets received on the benchmark port.')
wwpLeosBenchmarkPortStatsRxExDeferPkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRxExDeferPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRxExDeferPkts.setDescription('Number of excessive deferred packets.')
wwpLeosBenchmarkPortStatsRxDeferPkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRxDeferPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRxDeferPkts.setDescription('Number of deferred packets.')
wwpLeosBenchmarkPortStatsRxGiantPkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRxGiantPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRxGiantPkts.setDescription('Number of too big packets.')
wwpLeosBenchmarkPortStatsRxUnderRunPkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRxUnderRunPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRxUnderRunPkts.setDescription('Underrun packet count for the benchmark port.')
wwpLeosBenchmarkPortStatsRxCrcErrorPkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRxCrcErrorPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRxCrcErrorPkts.setDescription('Number of packets received with CRC errors.')
wwpLeosBenchmarkPortStatsRxLCheckErrorPkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRxLCheckErrorPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRxLCheckErrorPkts.setDescription('Number of packets with length check errors.')
wwpLeosBenchmarkPortStatsRxLOutRangePkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRxLOutRangePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRxLOutRangePkts.setDescription('The number of frames received by the benchmark port that exceeded the maximum permitted frame size.')
wwpLeosBenchmarkPortStatsRxPausePkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRxPausePkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRxPausePkts.setDescription('The total receive pause packets for the port.')
wwpLeosBenchmarkPortStatsRxUcastPkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRxUcastPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRxUcastPkts.setDescription('The total number of unicast packets received by benchmark port.')
wwpLeosBenchmarkPortStatsRxMcastPkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRxMcastPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRxMcastPkts.setDescription('The total number of multicast packets received by benchmark port.')
wwpLeosBenchmarkPortStatsRxBcastPkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRxBcastPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRxBcastPkts.setDescription('The total number of broadcast packets received by benchmark port.')
wwpLeosBenchmarkPortStatsRx64Pkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRx64Pkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRx64Pkts.setDescription('The total number of 64-byte packets received by benchmark port.')
wwpLeosBenchmarkPortStatsRx65To127Pkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRx65To127Pkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRx65To127Pkts.setDescription('The total number of 65 to 127-byte packets received by benchmark port.')
wwpLeosBenchmarkPortStatsRx128To255Pkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRx128To255Pkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRx128To255Pkts.setDescription('The total number of 128 to 255-byte packets received by benchmark port.')
wwpLeosBenchmarkPortStatsRx256To511Pkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRx256To511Pkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRx256To511Pkts.setDescription('The total number of 256 to 511-byte packets received by benchmark port.')
wwpLeosBenchmarkPortStatsRx512To1023Pkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRx512To1023Pkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRx512To1023Pkts.setDescription('The total number of 512 to 1023-byte packets received by benchmark port.')
wwpLeosBenchmarkPortStatsRx1024To1518Pkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRx1024To1518Pkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRx1024To1518Pkts.setDescription('The total number of 1024 to 1518-byte packets received by benchmark port.')
wwpLeosBenchmarkPortStatsRx1519To2047Pkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRx1519To2047Pkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRx1519To2047Pkts.setDescription('The total number of 1519 to 2047-byte packets received by benchmark port.')
wwpLeosBenchmarkPortStatsRx2048To4095Pkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRx2048To4095Pkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRx2048To4095Pkts.setDescription('The total number of 2048 to 4095-byte packets received by benchmark port.')
wwpLeosBenchmarkPortStatsRx4096To9216Pkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 43, 1, 5, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRx4096To9216Pkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBenchmarkPortStatsRx4096To9216Pkts.setDescription('The total number of 4096 to 9216-byte packets received by benchmark port.')
mibBuilder.exportSymbols("WWP-LEOS-BENCHMARK-MIB", wwpLeosBenchmarkProfileEntryDscp=wwpLeosBenchmarkProfileEntryDscp, wwpLeosBenchmarkProfilePdvStatsProfileId=wwpLeosBenchmarkProfilePdvStatsProfileId, wwpLeosBenchmarkPortStatsTx1519To2047Pkts=wwpLeosBenchmarkPortStatsTx1519To2047Pkts, wwpLeosBenchmarkProfileEntrySrcIpAddr=wwpLeosBenchmarkProfileEntrySrcIpAddr, wwpLeosBenchmarkPortStatsRx4096To9216Pkts=wwpLeosBenchmarkPortStatsRx4096To9216Pkts, wwpLeosBenchmarkProfileEntryCfi=wwpLeosBenchmarkProfileEntryCfi, wwpLeosBenchmarkProfileTable=wwpLeosBenchmarkProfileTable, wwpLeosBenchmarkPortStats=wwpLeosBenchmarkPortStats, wwpLeosBenchmarkProfileThroughputStatsFrameSizeIndex=wwpLeosBenchmarkProfileThroughputStatsFrameSizeIndex, wwpLeosBenchmarkProfileEntryEncapType=wwpLeosBenchmarkProfileEntryEncapType, wwpLeosBenchmarkProfileFramelossStatsRateIndex=wwpLeosBenchmarkProfileFramelossStatsRateIndex, wwpLeosBenchmarkPortStatsTx256To511Pkts=wwpLeosBenchmarkPortStatsTx256To511Pkts, wwpLeosBenchmarkProfilePdvStatsActiveDstMac=wwpLeosBenchmarkProfilePdvStatsActiveDstMac, wwpLeosBenchmarkPortStatsTx65To127Pkts=wwpLeosBenchmarkPortStatsTx65To127Pkts, wwpLeosBenchmarkProfileEntryBandwidth=wwpLeosBenchmarkProfileEntryBandwidth, wwpLeosBenchmarkProfileEntryName=wwpLeosBenchmarkProfileEntryName, wwpLeosBenchmarkProfileFramelossStatsSecond=wwpLeosBenchmarkProfileFramelossStatsSecond, wwpLeosBenchmarkGeneratorCurrentPktSize=wwpLeosBenchmarkGeneratorCurrentPktSize, wwpLeosBenchmarkPort=wwpLeosBenchmarkPort, wwpLeosBenchmarkProfileEntryThroughputTest=wwpLeosBenchmarkProfileEntryThroughputTest, wwpLeosBenchmarkProfileEntryDstIpAddr=wwpLeosBenchmarkProfileEntryDstIpAddr, wwpLeosBenchmarkProfileThroughputStatsEntry=wwpLeosBenchmarkProfileThroughputStatsEntry, wwpLeosBenchmarkProfileLatencyStatsActiveVid=wwpLeosBenchmarkProfileLatencyStatsActiveVid, PYSNMP_MODULE_ID=wwpLeosBenchmarkMIB, wwpLeosBenchmarkProfileEntryFramelossTest=wwpLeosBenchmarkProfileEntryFramelossTest, wwpLeosBenchmarkProfileFramelossStatsFirst=wwpLeosBenchmarkProfileFramelossStatsFirst, wwpLeosBenchmarkProfilePdvStatsAvg=wwpLeosBenchmarkProfilePdvStatsAvg, wwpLeosBenchmarkPortStatsRx65To127Pkts=wwpLeosBenchmarkPortStatsRx65To127Pkts, wwpLeosBenchmarkProfilePdvStatsSamples=wwpLeosBenchmarkProfilePdvStatsSamples, wwpLeosBenchmarkProfileLatencyStatsSamples=wwpLeosBenchmarkProfileLatencyStatsSamples, wwpLeosBenchmarkProfileFramelossStatsFrameSize=wwpLeosBenchmarkProfileFramelossStatsFrameSize, wwpLeosBenchmarkGeneratorSamplesCompleted=wwpLeosBenchmarkGeneratorSamplesCompleted, wwpLeosBenchmarkProfileFrameSizeEntry=wwpLeosBenchmarkProfileFrameSizeEntry, wwpLeosBenchmarkPortStatsRx128To255Pkts=wwpLeosBenchmarkPortStatsRx128To255Pkts, wwpLeosBenchmarkProfileLatencyStatisticsTable=wwpLeosBenchmarkProfileLatencyStatisticsTable, wwpLeosBenchmarkProfileFramelossStatisticsTable=wwpLeosBenchmarkProfileFramelossStatisticsTable, wwpLeosBenchmarkPortStatsCrcErrorPkts=wwpLeosBenchmarkPortStatsCrcErrorPkts, wwpLeosBenchmarkProfileThroughputStatsProfileId=wwpLeosBenchmarkProfileThroughputStatsProfileId, wwpLeosBenchmarkProfileThroughputStatsMin=wwpLeosBenchmarkProfileThroughputStatsMin, wwpLeosBenchmarkProfileEntryStarted=wwpLeosBenchmarkProfileEntryStarted, wwpLeosBenchmarkPortStatsTxDiscardPkts=wwpLeosBenchmarkPortStatsTxDiscardPkts, wwpLeosBenchmarkPortStatsJabbersPkts=wwpLeosBenchmarkPortStatsJabbersPkts, wwpLeosBenchmarkPortStatsTx1024To1518Pkts=wwpLeosBenchmarkPortStatsTx1024To1518Pkts, wwpLeosBenchmarkPortStatsRxGiantPkts=wwpLeosBenchmarkPortStatsRxGiantPkts, wwpLeosBenchmarkPortStatsRxUcastPkts=wwpLeosBenchmarkPortStatsRxUcastPkts, wwpLeosBenchmarkPortStatsRx512To1023Pkts=wwpLeosBenchmarkPortStatsRx512To1023Pkts, wwpLeosBenchmarkPortStatsRxMcastPkts=wwpLeosBenchmarkPortStatsRxMcastPkts, wwpLeosBenchmarkPortStatsOversizePkts=wwpLeosBenchmarkPortStatsOversizePkts, wwpLeosBenchmarkProfileFramelossStatsFrameSizeIndex=wwpLeosBenchmarkProfileFramelossStatsFrameSizeIndex, wwpLeosBenchmarkPortStatsRxPkts=wwpLeosBenchmarkPortStatsRxPkts, wwpLeosBenchmarkMIB=wwpLeosBenchmarkMIB, wwpLeosBenchmarkPortStatsRxUnderRunPkts=wwpLeosBenchmarkPortStatsRxUnderRunPkts, wwpLeosBenchmarkProfileFramelossStatsActiveDstMac=wwpLeosBenchmarkProfileFramelossStatsActiveDstMac, wwpLeosBenchmarkPortStatsTxLOutRangePkts=wwpLeosBenchmarkPortStatsTxLOutRangePkts, wwpLeosBenchmarkProfileObjects=wwpLeosBenchmarkProfileObjects, wwpLeosBenchmarkProfileThroughputStatsActiveVid=wwpLeosBenchmarkProfileThroughputStatsActiveVid, wwpLeosBenchmarkProfileEntryPduType=wwpLeosBenchmarkProfileEntryPduType, wwpLeosBenchmarkProfileEntryRfc2544Suite=wwpLeosBenchmarkProfileEntryRfc2544Suite, wwpLeosBenchmarkProfileFrameSizeProfileId=wwpLeosBenchmarkProfileFrameSizeProfileId, wwpLeosBenchmarkProfileFrameSizeTable=wwpLeosBenchmarkProfileFrameSizeTable, wwpLeosBenchmarkReflectorModule=wwpLeosBenchmarkReflectorModule, wwpLeosBenchmarkProfilePdvStatsActiveVid=wwpLeosBenchmarkProfilePdvStatsActiveVid, wwpLeosBenchmarkPortStatsRx1024To1518Pkts=wwpLeosBenchmarkPortStatsRx1024To1518Pkts, wwpLeosBenchmarkProfileEntryDuration=wwpLeosBenchmarkProfileEntryDuration, wwpLeosBenchmarkProfileEntryInterval=wwpLeosBenchmarkProfileEntryInterval, wwpLeosBenchmarkProfileThroughputStatsMax=wwpLeosBenchmarkProfileThroughputStatsMax, wwpLeosBenchmarkFpgaStatsDiscSeqNumPkts=wwpLeosBenchmarkFpgaStatsDiscSeqNumPkts, wwpLeosBenchmarkPortStatsRxLOutRangePkts=wwpLeosBenchmarkPortStatsRxLOutRangePkts, BenchmarkLatencyPdvTestState=BenchmarkLatencyPdvTestState, wwpLeosBenchmarkProfileEntryTpid=wwpLeosBenchmarkProfileEntryTpid, wwpLeosBenchmarkProfileThroughputStatisticsTable=wwpLeosBenchmarkProfileThroughputStatisticsTable, wwpLeosBenchmarkGeneratorEnable=wwpLeosBenchmarkGeneratorEnable, wwpLeosBenchmarkPortStatsRx64Pkts=wwpLeosBenchmarkPortStatsRx64Pkts, wwpLeosBenchmarkPortStatsRxBytes=wwpLeosBenchmarkPortStatsRxBytes, wwpLeosBenchmarkPortStatsTx4096To9216Pkts=wwpLeosBenchmarkPortStatsTx4096To9216Pkts, wwpLeosBenchmarkFpgaStatsDuplicatePkts=wwpLeosBenchmarkFpgaStatsDuplicatePkts, wwpLeosBenchmarkPortStatsRxBcastPkts=wwpLeosBenchmarkPortStatsRxBcastPkts, wwpLeosBenchmarkLocalFpgaMac=wwpLeosBenchmarkLocalFpgaMac, wwpLeosBenchmarkPortStatsRxDeferPkts=wwpLeosBenchmarkPortStatsRxDeferPkts, wwpLeosBenchmarkGeneratorCurrentRate=wwpLeosBenchmarkGeneratorCurrentRate, wwpLeosBenchmarkReflectorEnable=wwpLeosBenchmarkReflectorEnable, wwpLeosBenchmarkProfileLatencyStatsProfileId=wwpLeosBenchmarkProfileLatencyStatsProfileId, wwpLeosBenchmarkGeneratorRfc2544State=wwpLeosBenchmarkGeneratorRfc2544State, wwpLeosBenchmarkProfileLatencyStatsFrameSize=wwpLeosBenchmarkProfileLatencyStatsFrameSize, wwpLeosBenchmarkFpgaStatsOOSeqPkts=wwpLeosBenchmarkFpgaStatsOOSeqPkts, wwpLeosBenchmarkMode=wwpLeosBenchmarkMode, wwpLeosBenchmarkPortStatsTxPausePkts=wwpLeosBenchmarkPortStatsTxPausePkts, wwpLeosBenchmarkFpgaStatsRxPkts=wwpLeosBenchmarkFpgaStatsRxPkts, wwpLeosBenchmarkProfileEntryPdvTest=wwpLeosBenchmarkProfileEntryPdvTest, wwpLeosBenchmarkPortStatsTxBytes=wwpLeosBenchmarkPortStatsTxBytes, wwpLeosBenchmarkPortStatsRx1519To2047Pkts=wwpLeosBenchmarkPortStatsRx1519To2047Pkts, wwpLeosBenchmarkProfileEntryLatencyTest=wwpLeosBenchmarkProfileEntryLatencyTest, wwpLeosBenchmarkProfileFramelossStatsActiveVid=wwpLeosBenchmarkProfileFramelossStatsActiveVid, wwpLeosBenchmarkFpgaStatsCrcPkts=wwpLeosBenchmarkFpgaStatsCrcPkts, wwpLeosBenchmarkProfileEntryVidValidation=wwpLeosBenchmarkProfileEntryVidValidation, wwpLeosBenchmarkProfileFramelossStatsEntry=wwpLeosBenchmarkProfileFramelossStatsEntry, wwpLeosBenchmarkProfileEntryFrameLossStartBw=wwpLeosBenchmarkProfileEntryFrameLossStartBw, wwpLeosBenchmarkFpgaStatsTxPkts=wwpLeosBenchmarkFpgaStatsTxPkts, wwpLeosBenchmarkProfileFramelossStatsProfileId=wwpLeosBenchmarkProfileFramelossStatsProfileId, wwpLeosBenchmarkGeneratorLatencyTestState=wwpLeosBenchmarkGeneratorLatencyTestState, wwpLeosBenchmarkFpgaStatsUdpChecksumPkts=wwpLeosBenchmarkFpgaStatsUdpChecksumPkts, wwpLeosBenchmarkProfilePdvStatsFrameSize=wwpLeosBenchmarkProfilePdvStatsFrameSize, wwpLeosBenchmarkProfilePdvStatsEntry=wwpLeosBenchmarkProfilePdvStatsEntry, wwpLeosBenchmarkPortStatsRxPausePkts=wwpLeosBenchmarkPortStatsRxPausePkts, wwpLeosBenchmarkProfileEntryCustomPayload=wwpLeosBenchmarkProfileEntryCustomPayload, wwpLeosBenchmarkProfileEntry=wwpLeosBenchmarkProfileEntry, wwpLeosBenchmarkProfileEntryId=wwpLeosBenchmarkProfileEntryId, wwpLeosBenchmarkProfileLatencyStatsAvg=wwpLeosBenchmarkProfileLatencyStatsAvg, wwpLeosBenchmarkGeneratorPdvTestState=wwpLeosBenchmarkGeneratorPdvTestState, wwpLeosBenchmarkGeneratorFramelossTestState=wwpLeosBenchmarkGeneratorFramelossTestState, wwpLeosBenchmarkPortStatsRx2048To4095Pkts=wwpLeosBenchmarkPortStatsRx2048To4095Pkts, wwpLeosBenchmarkGeneratorThroughputTestState=wwpLeosBenchmarkGeneratorThroughputTestState, wwpLeosBenchmarkPortStatsFragmentsPkts=wwpLeosBenchmarkPortStatsFragmentsPkts, wwpLeosBenchmarkPortStatsTx64OctsPkts=wwpLeosBenchmarkPortStatsTx64OctsPkts, wwpLeosBenchmarkPortStatsRxLCheckErrorPkts=wwpLeosBenchmarkPortStatsRxLCheckErrorPkts, wwpLeosBenchmarkGeneratorModule=wwpLeosBenchmarkGeneratorModule, wwpLeosBenchmarkPortStatsTxDropPkts=wwpLeosBenchmarkPortStatsTxDropPkts, wwpLeosBenchmarkPortStatsUcastPkts=wwpLeosBenchmarkPortStatsUcastPkts, wwpLeosBenchmarkProfilePdvStatisticsTable=wwpLeosBenchmarkProfilePdvStatisticsTable, wwpLeosBenchmarkPortStatsTx512To1023Pkts=wwpLeosBenchmarkPortStatsTx512To1023Pkts, wwpLeosBenchmarkProfileEntryPcp=wwpLeosBenchmarkProfileEntryPcp, wwpLeosBenchmarkProfileLatencyStatsMax=wwpLeosBenchmarkProfileLatencyStatsMax, wwpLeosBenchmarkProfileLatencyStatsActiveDstMac=wwpLeosBenchmarkProfileLatencyStatsActiveDstMac, wwpLeosBenchmarkProfileEntryEnabled=wwpLeosBenchmarkProfileEntryEnabled, wwpLeosBenchmarkProfileEntryDstmac=wwpLeosBenchmarkProfileEntryDstmac, wwpLeosBenchmarkProfileEntrySamplingInterval=wwpLeosBenchmarkProfileEntrySamplingInterval, wwpLeosBenchmarkFpgaStatsOOOPkts=wwpLeosBenchmarkFpgaStatsOOOPkts, wwpLeosBenchmarkProfileThroughputStatsFrameSize=wwpLeosBenchmarkProfileThroughputStatsFrameSize, wwpLeosBenchmarkProfileEntryVid=wwpLeosBenchmarkProfileEntryVid, wwpLeosBenchmarkPortStatsTx2048To4095Pkts=wwpLeosBenchmarkPortStatsTx2048To4095Pkts, wwpLeosBenchmarkPortStatsRxCrcErrorPkts=wwpLeosBenchmarkPortStatsRxCrcErrorPkts, wwpLeosBenchmarkOperEnable=wwpLeosBenchmarkOperEnable, wwpLeosBenchmarkModule=wwpLeosBenchmarkModule, wwpLeosBenchmarkPortStatsMcastPkts=wwpLeosBenchmarkPortStatsMcastPkts, wwpLeosBenchmarkPortStatsBcastPkts=wwpLeosBenchmarkPortStatsBcastPkts, wwpLeosBenchmarkFpgaStats=wwpLeosBenchmarkFpgaStats, wwpLeosBenchmarkMIBObjects=wwpLeosBenchmarkMIBObjects, wwpLeosBenchmarkRole=wwpLeosBenchmarkRole, wwpLeosBenchmarkProfileEntryMaxSearches=wwpLeosBenchmarkProfileEntryMaxSearches, wwpLeosBenchmarkProfileFrameSize=wwpLeosBenchmarkProfileFrameSize, wwpLeosBenchmarkEnable=wwpLeosBenchmarkEnable, wwpLeosBenchmarkProfileLatencyStatsEntry=wwpLeosBenchmarkProfileLatencyStatsEntry, wwpLeosBenchmarkGeneratorprofileUnderTest=wwpLeosBenchmarkGeneratorprofileUnderTest, wwpLeosBenchmarkReflectorVid=wwpLeosBenchmarkReflectorVid, wwpLeosBenchmarkPortStatsTxPkts=wwpLeosBenchmarkPortStatsTxPkts, wwpLeosBenchmarkGeneratorTotalIterations=wwpLeosBenchmarkGeneratorTotalIterations, wwpLeosBenchmarkPortStatsTx128To255Pkts=wwpLeosBenchmarkPortStatsTx128To255Pkts, wwpLeosBenchmarkProfileFrameSizeIndex=wwpLeosBenchmarkProfileFrameSizeIndex, wwpLeosBenchmarkPortStatsRxExDeferPkts=wwpLeosBenchmarkPortStatsRxExDeferPkts, wwpLeosBenchmarkReflectorVendorType=wwpLeosBenchmarkReflectorVendorType, wwpLeosBenchmarkGeneratorCurrentIteration=wwpLeosBenchmarkGeneratorCurrentIteration, wwpLeosBenchmarkProfileThroughputStatsActiveDstMac=wwpLeosBenchmarkProfileThroughputStatsActiveDstMac, wwpLeosBenchmarkProfileLatencyStatsFrameSizeIndex=wwpLeosBenchmarkProfileLatencyStatsFrameSizeIndex, wwpLeosBenchmarkProfileEntryMaxSamples=wwpLeosBenchmarkProfileEntryMaxSamples, wwpLeosBenchmarkProfileThroughputStatsAvg=wwpLeosBenchmarkProfileThroughputStatsAvg, wwpLeosBenchmarkPortStatsUndersizePkts=wwpLeosBenchmarkPortStatsUndersizePkts, wwpLeosBenchmarkProfileLatencyStatsMin=wwpLeosBenchmarkProfileLatencyStatsMin, wwpLeosBenchmarkProfileThroughputStatsIterations=wwpLeosBenchmarkProfileThroughputStatsIterations, wwpLeosBenchmarkFpgaStatsDiscardPkts=wwpLeosBenchmarkFpgaStatsDiscardPkts, wwpLeosBenchmarkPortStatsRx256To511Pkts=wwpLeosBenchmarkPortStatsRx256To511Pkts, wwpLeosBenchmarkProfilePdvStatsFrameSizeIndex=wwpLeosBenchmarkProfilePdvStatsFrameSizeIndex, wwpLeosBenchmarkProfileFramelossStatsRate=wwpLeosBenchmarkProfileFramelossStatsRate)
