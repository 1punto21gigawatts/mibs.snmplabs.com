#
# PySNMP MIB module ZYXEL-IP-FORWARD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-IP-FORWARD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:49:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Gauge32, Counter32, MibIdentifier, ObjectIdentity, NotificationType, Counter64, Bits, Integer32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ModuleIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Gauge32", "Counter32", "MibIdentifier", "ObjectIdentity", "NotificationType", "Counter64", "Bits", "Integer32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ModuleIdentity", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
esMgmt, = mibBuilder.importSymbols("ZYXEL-ES-SMI", "esMgmt")
zyxelIpForward = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 32))
if mibBuilder.loadTexts: zyxelIpForward.setLastUpdated('201207010000Z')
if mibBuilder.loadTexts: zyxelIpForward.setOrganization('Enterprise Solution ZyXEL')
if mibBuilder.loadTexts: zyxelIpForward.setContactInfo('')
if mibBuilder.loadTexts: zyxelIpForward.setDescription('The subtree for ip forward')
zyxelRouteDomainStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 32, 1))
zyxelHostStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 32, 2))
zyxelIpRouteStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 32, 3))
zyxelRouteDomainTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 32, 1, 1), )
if mibBuilder.loadTexts: zyxelRouteDomainTable.setStatus('current')
if mibBuilder.loadTexts: zyxelRouteDomainTable.setDescription('The table contains route domain information.')
zyxelRouteDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 32, 1, 1, 1), ).setIndexNames((0, "ZYXEL-IP-FORWARD-MIB", "zyRouteDomainIpAddress"), (0, "ZYXEL-IP-FORWARD-MIB", "zyRouteDomainIpMaskBits"))
if mibBuilder.loadTexts: zyxelRouteDomainEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelRouteDomainEntry.setDescription('An entry contains route domain information. ')
zyRouteDomainIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 32, 1, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: zyRouteDomainIpAddress.setStatus('current')
if mibBuilder.loadTexts: zyRouteDomainIpAddress.setDescription('IP address of your switch in dotted decimal notation. This is the IP address of the switch in an IP routing domain.')
zyRouteDomainIpMaskBits = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 32, 1, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: zyRouteDomainIpMaskBits.setStatus('current')
if mibBuilder.loadTexts: zyRouteDomainIpMaskBits.setDescription('IP subnet mask of an IP routing domain.')
zyRouteDomainVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 32, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyRouteDomainVid.setStatus('current')
if mibBuilder.loadTexts: zyRouteDomainVid.setDescription('VLAN identification number to which an IP routing domain belongs.')
zyxelHostTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 32, 2, 1), )
if mibBuilder.loadTexts: zyxelHostTable.setStatus('current')
if mibBuilder.loadTexts: zyxelHostTable.setDescription('The table contains host information.')
zyxelHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 32, 2, 1, 1), ).setIndexNames((0, "ZYXEL-IP-FORWARD-MIB", "zyHostIpAddress"), (0, "ZYXEL-IP-FORWARD-MIB", "zyHostVid"))
if mibBuilder.loadTexts: zyxelHostEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelHostEntry.setDescription('An entry contains host information.')
zyHostIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 32, 2, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: zyHostIpAddress.setStatus('current')
if mibBuilder.loadTexts: zyHostIpAddress.setDescription('The IP address of the incoming packets from which device.')
zyHostVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 32, 2, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: zyHostVid.setStatus('current')
if mibBuilder.loadTexts: zyHostVid.setDescription('VLAN group to which the packet belongs.')
zyHostPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 32, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHostPort.setStatus('current')
if mibBuilder.loadTexts: zyHostPort.setDescription('Port number from which the above IP address was learned. This field displays CPU to indicate the IP address belongs to the switch.')
zyHostType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 32, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHostType.setStatus('current')
if mibBuilder.loadTexts: zyHostType.setDescription('Show whether the IP address is dynamic or static.')
zyxelIpRouteTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 32, 3, 1), )
if mibBuilder.loadTexts: zyxelIpRouteTable.setStatus('current')
if mibBuilder.loadTexts: zyxelIpRouteTable.setDescription('The table contains IP route information.')
zyxelIpRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 32, 3, 1, 1), ).setIndexNames((0, "ZYXEL-IP-FORWARD-MIB", "zyIpRouteDestinationIpAddress"), (0, "ZYXEL-IP-FORWARD-MIB", "zyIpRouteDestinationMaskBits"), (0, "ZYXEL-IP-FORWARD-MIB", "zyIpRouteGateway"))
if mibBuilder.loadTexts: zyxelIpRouteEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelIpRouteEntry.setDescription('An entry contains IP route information.')
zyIpRouteDestinationIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 32, 3, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: zyIpRouteDestinationIpAddress.setStatus('current')
if mibBuilder.loadTexts: zyIpRouteDestinationIpAddress.setDescription('The destination IP address of the route domain.')
zyIpRouteDestinationMaskBits = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 32, 3, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: zyIpRouteDestinationMaskBits.setStatus('current')
if mibBuilder.loadTexts: zyIpRouteDestinationMaskBits.setDescription('The mask bits of the route domain.')
zyIpRouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 32, 3, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: zyIpRouteGateway.setStatus('current')
if mibBuilder.loadTexts: zyIpRouteGateway.setDescription('The IP address of the gateway device.')
zyIpRouteIf = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 32, 3, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyIpRouteIf.setStatus('current')
if mibBuilder.loadTexts: zyIpRouteIf.setDescription('The IP address of the interface.')
zyIpRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 32, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyIpRouteMetric.setStatus('current')
if mibBuilder.loadTexts: zyIpRouteMetric.setDescription('The cost of the route.')
zyIpRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 32, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rip", 1), ("bgp", 2), ("ospf", 3), ("static", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyIpRouteType.setStatus('current')
if mibBuilder.loadTexts: zyIpRouteType.setDescription('The method used to learn the route.')
mibBuilder.exportSymbols("ZYXEL-IP-FORWARD-MIB", zyxelRouteDomainStatus=zyxelRouteDomainStatus, PYSNMP_MODULE_ID=zyxelIpForward, zyxelRouteDomainTable=zyxelRouteDomainTable, zyHostType=zyHostType, zyxelRouteDomainEntry=zyxelRouteDomainEntry, zyRouteDomainVid=zyRouteDomainVid, zyRouteDomainIpMaskBits=zyRouteDomainIpMaskBits, zyHostVid=zyHostVid, zyxelIpRouteStatus=zyxelIpRouteStatus, zyxelHostEntry=zyxelHostEntry, zyxelHostStatus=zyxelHostStatus, zyIpRouteIf=zyIpRouteIf, zyxelIpRouteEntry=zyxelIpRouteEntry, zyxelIpForward=zyxelIpForward, zyHostPort=zyHostPort, zyxelIpRouteTable=zyxelIpRouteTable, zyIpRouteDestinationMaskBits=zyIpRouteDestinationMaskBits, zyIpRouteMetric=zyIpRouteMetric, zyHostIpAddress=zyHostIpAddress, zyIpRouteGateway=zyIpRouteGateway, zyxelHostTable=zyxelHostTable, zyRouteDomainIpAddress=zyRouteDomainIpAddress, zyIpRouteDestinationIpAddress=zyIpRouteDestinationIpAddress, zyIpRouteType=zyIpRouteType)
