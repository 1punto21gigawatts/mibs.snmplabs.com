#
# PySNMP MIB module ASCEND-CALL-LOGGING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-CALL-LOGGING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:26:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
callLoggingGroup, = mibBuilder.importSymbols("ASCEND-MIB", "callLoggingGroup")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, MibIdentifier, TimeTicks, Unsigned32, NotificationType, Gauge32, Counter64, Counter32, iso, Bits, Integer32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibIdentifier", "TimeTicks", "Unsigned32", "NotificationType", "Gauge32", "Counter64", "Counter32", "iso", "Bits", "Integer32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
callLoggingNumServers = MibScalar((1, 3, 6, 1, 4, 1, 529, 25, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callLoggingNumServers.setStatus('mandatory')
if mibBuilder.loadTexts: callLoggingNumServers.setDescription('The maximum number of Call Logging servers supported by the system.')
callLoggingServerTable = MibTable((1, 3, 6, 1, 4, 1, 529, 25, 2), )
if mibBuilder.loadTexts: callLoggingServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: callLoggingServerTable.setDescription('A list of entries for Call Logging Server addresses.')
callLoggingServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 25, 2, 1), ).setIndexNames((0, "ASCEND-CALL-LOGGING-MIB", "callLoggingServerIndex"))
if mibBuilder.loadTexts: callLoggingServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: callLoggingServerEntry.setDescription('Entry holding information about the currently active Call Logging Server and the address of a Server.')
callLoggingServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 25, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callLoggingServerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: callLoggingServerIndex.setDescription("The index number for this Call Logging server entry. Its value ranges from 1 to 'callLoggingNumServers'. and identifies which server entry is associated with.")
callLoggingCurrentServerFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 25, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("standby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callLoggingCurrentServerFlag.setStatus('mandatory')
if mibBuilder.loadTexts: callLoggingCurrentServerFlag.setDescription('Value indicates whether this entry is the current Call Logging server or not.')
callLoggingServerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 25, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callLoggingServerIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: callLoggingServerIPAddress.setDescription('The IP address of Call Logging server. The value 0.0.0.0 is returned if entry is invalid.')
callLoggingEnableActiveServer = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 25, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notApplicable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callLoggingEnableActiveServer.setStatus('mandatory')
if mibBuilder.loadTexts: callLoggingEnableActiveServer.setDescription('This is used to set the active call Logging server. If set to enable(2) it will enable the call Logging server, A read on the variable will return notApplicable(1).')
callLoggingStatus = MibScalar((1, 3, 6, 1, 4, 1, 529, 25, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callLoggingStatus.setStatus('mandatory')
if mibBuilder.loadTexts: callLoggingStatus.setDescription('Enable/Disable call loggin support. Note: Prior to enable the call Logging, one of the Call Logging server must be setup with a valid IP address. If the server IP address is not setup, a SET to this object will return with a bad value error.')
callLoggingPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 529, 25, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callLoggingPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: callLoggingPortNumber.setDescription('The UDP server port to use for Call Logging packets.')
callLoggingKey = MibScalar((1, 3, 6, 1, 4, 1, 529, 25, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callLoggingKey.setStatus('mandatory')
if mibBuilder.loadTexts: callLoggingKey.setDescription('The (RADIUS_ACCT) call logging key to access server.')
callLoggingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 529, 25, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callLoggingTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: callLoggingTimeout.setDescription('Number of seconds to wait for a response to previous Call Logging request sent to server.')
callLoggingIdBase = MibScalar((1, 3, 6, 1, 4, 1, 529, 25, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 10, 16))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("base10", 10), ("base16", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callLoggingIdBase.setStatus('mandatory')
if mibBuilder.loadTexts: callLoggingIdBase.setDescription('The Base to use in reporting Call Logging ID.')
callLoggingResetTime = MibScalar((1, 3, 6, 1, 4, 1, 529, 25, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callLoggingResetTime.setStatus('mandatory')
if mibBuilder.loadTexts: callLoggingResetTime.setDescription('The time to reset to the primary server after it has failed.')
callLoggingStopPacketsOnly = MibScalar((1, 3, 6, 1, 4, 1, 529, 25, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callLoggingStopPacketsOnly.setStatus('mandatory')
if mibBuilder.loadTexts: callLoggingStopPacketsOnly.setDescription('Send call log Stop packets that have username=0. These are caused by connections that are dropped before authentication is done.')
callLoggingRetryLimit = MibScalar((1, 3, 6, 1, 4, 1, 529, 25, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callLoggingRetryLimit.setStatus('mandatory')
if mibBuilder.loadTexts: callLoggingRetryLimit.setDescription('Number of retries before removing Call Logging packet. 0 means leave on retry list until maximum retry entries are exceeded.')
callLoggingAssStatus = MibScalar((1, 3, 6, 1, 4, 1, 529, 25, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("active", 2), ("aborted", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callLoggingAssStatus.setStatus('mandatory')
if mibBuilder.loadTexts: callLoggingAssStatus.setDescription('Indicates the status of Active Session Snapshot protocol. Writing the attribute with a nonzero value causes the start of an Active Session Snapshot. If no server is configured the Active Session Snapshot will abort immediatly, an active session can not be aborted')
callLoggingDroppedPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 529, 25, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callLoggingDroppedPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: callLoggingDroppedPacketCount.setDescription('Number of dropped Call Logging packets since the last Active Session Snapshot')
callLoggingRadCompatMode = MibScalar((1, 3, 6, 1, 4, 1, 529, 25, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("radOldAscend", 3), ("radVendorSpecific", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callLoggingRadCompatMode.setStatus('mandatory')
if mibBuilder.loadTexts: callLoggingRadCompatMode.setDescription('Indicates call logging RADIUS compatibility mode. This variable is deprecated, starting with TAOS Release 8.0. this variable has a fixed value of radVendorSpecific(4)')
mibBuilder.exportSymbols("ASCEND-CALL-LOGGING-MIB", callLoggingKey=callLoggingKey, callLoggingServerEntry=callLoggingServerEntry, callLoggingStatus=callLoggingStatus, callLoggingDroppedPacketCount=callLoggingDroppedPacketCount, callLoggingServerIndex=callLoggingServerIndex, callLoggingTimeout=callLoggingTimeout, callLoggingServerTable=callLoggingServerTable, callLoggingStopPacketsOnly=callLoggingStopPacketsOnly, callLoggingRadCompatMode=callLoggingRadCompatMode, callLoggingNumServers=callLoggingNumServers, callLoggingResetTime=callLoggingResetTime, callLoggingRetryLimit=callLoggingRetryLimit, callLoggingIdBase=callLoggingIdBase, callLoggingEnableActiveServer=callLoggingEnableActiveServer, callLoggingAssStatus=callLoggingAssStatus, callLoggingCurrentServerFlag=callLoggingCurrentServerFlag, callLoggingServerIPAddress=callLoggingServerIPAddress, callLoggingPortNumber=callLoggingPortNumber)
