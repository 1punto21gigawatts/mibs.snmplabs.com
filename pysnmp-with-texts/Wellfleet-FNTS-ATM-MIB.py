#
# PySNMP MIB module Wellfleet-FNTS-ATM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-FNTS-ATM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:40:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, MibIdentifier, ModuleIdentity, ObjectIdentity, Unsigned32, iso, IpAddress, Bits, NotificationType, Integer32, Gauge32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "MibIdentifier", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "iso", "IpAddress", "Bits", "NotificationType", "Integer32", "Gauge32", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfFntsAtmGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfFntsAtmGroup")
wfFntsAtmTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1), )
if mibBuilder.loadTexts: wfFntsAtmTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsAtmTable.setDescription('Fnts Atm line record')
wfFntsAtmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1), ).setIndexNames((0, "Wellfleet-FNTS-ATM-MIB", "wfFntsAtmSlot"), (0, "Wellfleet-FNTS-ATM-MIB", "wfFntsAtmConnector"))
if mibBuilder.loadTexts: wfFntsAtmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsAtmEntry.setDescription('An entry in the FntsAtm table')
wfFntsAtmDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFntsAtmDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsAtmDelete.setDescription('create/delete parameter, dflt = created')
wfFntsAtmDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFntsAtmDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsAtmDisable.setDescription('enable/disable parameter, dflt = enabled')
wfFntsAtmState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmState.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsAtmState.setDescription('line driver state variable, Not Present, Init, Down, Up')
wfFntsAtmSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsAtmSlot.setDescription('instance ID Slot, filled in by driver')
wfFntsAtmConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 44))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmConnector.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsAtmConnector.setDescription("instance ID Connector, filled in by driver. For the ASN this attribute is an encoded value and is equal to 'module'*10 + 'connector'. Where 'module' is defined in attribute 42 and 'connector' is defined in attribute 43 of this table. For non-ASN platforms this attribute is the physical connector number on the slot.")
wfFntsAtmCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFntsAtmCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsAtmCct.setDescription('cct number for this line instance')
wfFntsAtmMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4508))).clone(namedValues=NamedValues(("default", 4508))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFntsAtmMtu.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsAtmMtu.setDescription('mtu parameter, fixed')
wfFntsAtmMadr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmMadr.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsAtmMadr.setDescription('line MAC address, fixed - line driver fills in')
wfFntsAtmIpAdr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmIpAdr.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsAtmIpAdr.setDescription('Ip Address, for the Sonet RPU')
wfFntsAtmAtmState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 9))).clone(namedValues=NamedValues(("notready", 1), ("init", 2), ("intloop", 3), ("extloop", 4), ("reset", 5), ("down", 6), ("up", 7), ("notpresent", 9))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmAtmState.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsAtmAtmState.setDescription('line driver state variable, Not Present, Init, Down, Up')
wfFntsAtmSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(50))).clone(namedValues=NamedValues(("default", 50))).clone('default')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsAtmSpeed.setDescription('Atm Interface speed in Meg bps.')
wfFntsAtmRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmRxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsAtmRxOctets.setDescription('counts the number of bytes received from the Atm interface.')
wfFntsAtmRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmRxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsAtmRxFrames.setDescription('counts the number of frames received from the Atm interface.')
wfFntsAtmTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmTxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsAtmTxOctets.setDescription('counts the number of bytes sent to the Atm interface.')
wfFntsAtmTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmTxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsAtmTxFrames.setDescription('counts the number of frames sent to the Atm interface.')
wfFntsAtmLackRescErrorRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmLackRescErrorRx.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsAtmLackRescErrorRx.setDescription('counts the number of requested buffers not available to the driver.')
wfFntsAtmInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmInErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsAtmInErrors.setDescription('counts the number of errors on the receive side of the driver.')
wfFntsAtmOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmOutErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsAtmOutErrors.setDescription('counts the number of errors on the transmit side of the driver.')
wfFntsAtmRxLongFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmRxLongFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsAtmRxLongFrames.setDescription('counts the number of received frames too long.')
wfFntsAtmTxClipFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmTxClipFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsAtmTxClipFrames.setDescription('counts the number of transmit frames dropped because of no transmit queue space.')
wfFntsAtmRxReplenMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmRxReplenMisses.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsAtmRxReplenMisses.setDescription('counts the number of the buffer requests without response.')
wfFntsAtmRxOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmRxOverruns.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsAtmRxOverruns.setDescription('counts the number of receiver overruns.')
wfFntsAtmRxRingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmRxRingErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsAtmRxRingErrors.setDescription('counts the number of receiver ring errors.')
wfFntsAtmTxRingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmTxRingErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsAtmTxRingErrors.setDescription('counts the number of transmit ring errors.')
wfFntsAtmOpErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmOpErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsAtmOpErrors.setDescription('counts the number of operational driver errors.')
wfFntsAtmRxProcessings = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmRxProcessings.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsAtmRxProcessings.setDescription('counts the number of times the receive processing has been called.')
wfFntsAtmTxProcessings = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmTxProcessings.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsAtmTxProcessings.setDescription('counts the number of times the transmit processing has been called.')
wfFntsAtmTxCmplProcessings = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmTxCmplProcessings.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsAtmTxCmplProcessings.setDescription('counts the number of times the transmit complete processing has been called.')
wfFntsAtmIntrProcessings = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmIntrProcessings.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsAtmIntrProcessings.setDescription('counts the number of times the interrupt service routine has been called')
wfFntsAtmSintProcessings = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmSintProcessings.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsAtmSintProcessings.setDescription('counts the number of times the change state interrupt has been called.')
wfFntsAtmPintProcessings = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFntsAtmPintProcessings.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsAtmPintProcessings.setDescription('counts the number of times the primitive interrupt service routine has been called.')
wfFntsAtmRxRingLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(63))).clone(namedValues=NamedValues(("default", 63))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFntsAtmRxRingLength.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsAtmRxRingLength.setDescription('Atm Interface Receiver Ring Length.')
wfFntsAtmTxRingLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(63))).clone(namedValues=NamedValues(("default", 63))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFntsAtmTxRingLength.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsAtmTxRingLength.setDescription('Atm Interface Transmit Ring Length.')
wfFntsAtmCfgRxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(127))).clone(namedValues=NamedValues(("default", 127))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFntsAtmCfgRxQueueLength.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsAtmCfgRxQueueLength.setDescription('Atm Configurable receive queue length.')
wfFntsAtmCfgTxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(127))).clone(namedValues=NamedValues(("default", 127))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFntsAtmCfgTxQueueLength.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsAtmCfgTxQueueLength.setDescription('Atm Configurable transmit queue length.')
wfFntsAtmLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 32, 1, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFntsAtmLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsAtmLineNumber.setDescription('Unique number identifying this interface.')
mibBuilder.exportSymbols("Wellfleet-FNTS-ATM-MIB", wfFntsAtmTable=wfFntsAtmTable, wfFntsAtmRxReplenMisses=wfFntsAtmRxReplenMisses, wfFntsAtmOpErrors=wfFntsAtmOpErrors, wfFntsAtmConnector=wfFntsAtmConnector, wfFntsAtmDisable=wfFntsAtmDisable, wfFntsAtmTxRingLength=wfFntsAtmTxRingLength, wfFntsAtmRxFrames=wfFntsAtmRxFrames, wfFntsAtmMtu=wfFntsAtmMtu, wfFntsAtmSlot=wfFntsAtmSlot, wfFntsAtmOutErrors=wfFntsAtmOutErrors, wfFntsAtmRxOverruns=wfFntsAtmRxOverruns, wfFntsAtmState=wfFntsAtmState, wfFntsAtmIpAdr=wfFntsAtmIpAdr, wfFntsAtmRxLongFrames=wfFntsAtmRxLongFrames, wfFntsAtmDelete=wfFntsAtmDelete, wfFntsAtmLackRescErrorRx=wfFntsAtmLackRescErrorRx, wfFntsAtmLineNumber=wfFntsAtmLineNumber, wfFntsAtmCct=wfFntsAtmCct, wfFntsAtmAtmState=wfFntsAtmAtmState, wfFntsAtmTxCmplProcessings=wfFntsAtmTxCmplProcessings, wfFntsAtmTxOctets=wfFntsAtmTxOctets, wfFntsAtmPintProcessings=wfFntsAtmPintProcessings, wfFntsAtmRxRingLength=wfFntsAtmRxRingLength, wfFntsAtmRxProcessings=wfFntsAtmRxProcessings, wfFntsAtmEntry=wfFntsAtmEntry, wfFntsAtmMadr=wfFntsAtmMadr, wfFntsAtmTxFrames=wfFntsAtmTxFrames, wfFntsAtmRxOctets=wfFntsAtmRxOctets, wfFntsAtmSpeed=wfFntsAtmSpeed, wfFntsAtmTxClipFrames=wfFntsAtmTxClipFrames, wfFntsAtmRxRingErrors=wfFntsAtmRxRingErrors, wfFntsAtmCfgRxQueueLength=wfFntsAtmCfgRxQueueLength, wfFntsAtmInErrors=wfFntsAtmInErrors, wfFntsAtmIntrProcessings=wfFntsAtmIntrProcessings, wfFntsAtmSintProcessings=wfFntsAtmSintProcessings, wfFntsAtmTxRingErrors=wfFntsAtmTxRingErrors, wfFntsAtmCfgTxQueueLength=wfFntsAtmCfgTxQueueLength, wfFntsAtmTxProcessings=wfFntsAtmTxProcessings)
