#
# PySNMP MIB module CT-PIC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CT-PIC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:29:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ctPIC, = mibBuilder.importSymbols("CTRON-MIB-NAMES", "ctPIC")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, TimeTicks, IpAddress, NotificationType, Unsigned32, Counter64, Counter32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ObjectIdentity, ModuleIdentity, Bits, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "TimeTicks", "IpAddress", "NotificationType", "Unsigned32", "Counter64", "Counter32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ObjectIdentity", "ModuleIdentity", "Bits", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
pic = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1))
ctPicNumberEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicNumberEntries.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicNumberEntries.setDescription('Defines the number of PIC modules defined by this MIB.')
ctPicTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2), )
if mibBuilder.loadTexts: ctPicTable.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicTable.setDescription('A table that describes the contents of all PIC modules accessible by this module.')
ctPicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1), ).setIndexNames((0, "CT-PIC-MIB", "ctPicSlot"), (0, "CT-PIC-MIB", "ctPicIndex"))
if mibBuilder.loadTexts: ctPicEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicEntry.setDescription('Description of a specific instance of a PIC module.')
ctPicSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicSlot.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicSlot.setDescription('Specific slot which the module that realizes this PIC resides. If the PIC is associated with the chassis and not a specific module then this value will be 0.')
ctPicIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicIndex.setDescription('Uniquely identifies the instance of a PIC in a particular slot.')
ctPicLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicLocation.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicLocation.setDescription('Defines location of the PIC chip. This takes on any of the encoding values defined below for backplane, module, daughter board, brim.')
ctPicStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("present", 2), ("notPresent", 3), ("checkSum", 4), ("error", 5), ("limited", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicStatus.setDescription('Provides the status of the specific PIC chip. the values are defined as follows: other(1) - firmware can not determine status present(2) - PIC seems to be functional notPresent(3) - PIC not found but expected checkSum(4) - A check sum error occured error(5) - An undefined error condition exists. limited(6) - A limited PIC implementation only type code information is present.')
ctPicVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicVersion.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicVersion.setDescription('Reflects the version of the PIC implementation that this PIC conforms to. This has the format x.yy . If non-existent, this object will be set to all blanks(ascii 32).')
ctPicModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicModuleType.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicModuleType.setDescription('Defines the standard module type value as defined in ctron-oids.')
ctPicMfgPN = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(9, 9)).setFixedLength(9)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicMfgPN.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicMfgPN.setDescription('Describes the manufacturing level part number of the module associated with this PIC. This information is encoded as follows: 7 Characters Part Number 2 Characters Rework Location. If any field of this object is non-existent, it will be set to all blanks(ascii 32).')
ctPicMfgSN = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicMfgSN.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicMfgSN.setDescription('Describes the manufacturing level serial number of the module associated with this PIC. This information is encoded as follows: 3 bytes - Date code (year/week) 4 bytes - Serial number 2 bytes - Manufacture location 3 bytes - Board level revision If any field of this object is non-existent, it will be set to all blanks(ascii 32).')
ctPicMfgPartNumb = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicMfgPartNumb.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicMfgPartNumb.setDescription('This object presents the part number portion of the ctPicMfgPN object. This object contains the same information however in a more human readable format. If non-existent, this object will be set to all blanks(ascii 32).')
ctPicMfgSerialNumb = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicMfgSerialNumb.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicMfgSerialNumb.setDescription('This object presents the serial number portion of the ctPicMfgSN object. This object contains the same information however in a more human readable format. If non-existent, this object will be set to all blanks(ascii 32).')
ctPicMfgReworkLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicMfgReworkLocation.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicMfgReworkLocation.setDescription('The 2 character code that defines the location this module was last reworked. This object contains the same information as presented in ctPicMfgPN object however in a more human readable format. If non-existent, this object will be set to all blanks(ascii 32).')
ctPicMfgMfgLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicMfgMfgLocation.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicMfgMfgLocation.setDescription('The two character code that defines the location this module was manufactured at. This object contains the same information as presented in ctPicMfgSN object however in a more human readable format. If non-existent, this object will be set to all blanks(ascii 32).')
ctPicMfgDateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicMfgDateCode.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicMfgDateCode.setDescription('The 3 byte date code field when this module was last reworked. This is in year/week format. This object contains the same information as presented in ctPicMfgSN object however in a more human readable format. If non-existent, this object will be set to all blanks(ascii 32).')
ctPicMfgRevisionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicMfgRevisionCode.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicMfgRevisionCode.setDescription('The 3 character board level revision code field of this module. This object contains the same information as presented in ctPicMfgSN object however in a more human readable format. If non-existent, this object will be set to all blanks (ascii 32).')
ctPicTLPN = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(9, 9)).setFixedLength(9)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicTLPN.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicTLPN.setDescription('Describes the top level part number of the module associated with this PIC. This information is encoded as follows: 7 Characters Part Number 2 Characters Rework Location. If any field of this object is non-existent, it will be set to all blanks(ascii 32).')
ctPicTLSN = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicTLSN.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicTLSN.setDescription('Describes the top level serial number of the module associated with this PIC. This information is encoded as follows: 3 bytes - Date code (year/week) 4 bytes - Serial number 2 bytes - Manufacture location 3 bytes - Top level revision If any field of this object is non-existent, it will be set to all blanks(ascii 32).')
ctPicTLPartNumb = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicTLPartNumb.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicTLPartNumb.setDescription('This object presents the part number portion of the ctPicTLPN object. This object contains the same information however in a more human readable format. If non-existent, this object will be set to all blanks(ascii 32).')
ctPicTLSerialNumb = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicTLSerialNumb.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicTLSerialNumb.setDescription('This object presents the serial number portion of the ctPicTLSN object. This object contains the same information however in a more human readable format. If non-existent, this object will be set to all blanks(ascii 32).')
ctPicTLReworkLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicTLReworkLocation.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicTLReworkLocation.setDescription('The 2 character code that defines the location this module was last reworked. This object contains the same information as presented in ctPicTLPN object however in a more human readable format. If non-existent, this object will be set to all blanks(ascii 32).')
ctPicTLMfgLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicTLMfgLocation.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicTLMfgLocation.setDescription('The two character code that defines the location this module was manufactured at. This object contains the same information as presented in ctPicTLSN object however in a more human readable format. If non-existent, this object will be set to all blanks(ascii 32).')
ctPicTLDateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicTLDateCode.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicTLDateCode.setDescription('The 3 byte date code field when this module was last reworked. This is in year/week format. This object contains the same information as presented in ctPicTLSN object however in a more human readable format. If non-existent, this object will be set to all blanks(ascii 32).')
ctPicTLRevisionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicTLRevisionCode.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicTLRevisionCode.setDescription('The 3 character top level revision code field of this module. This object contains the same information as presented in ctPicTLSN object however in a more human readable format. If non-existent, this object will be set to all blanks (ascii 32).')
ctPicPcbRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicPcbRevision.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicPcbRevision.setDescription('Defines the Cabletron revision of the art work for this module. If non-existent, this object will be set to all blanks(ascii 32).')
ctPicMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicMacAddr.setDescription('The base MAC address(ethernet format)assigned to the module. If this field is not used then it should have a value of a zero length string. If non-existent, this object will be set to all blanks(ascii 32).')
ctPicNumbRsvdAddrs = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicNumbRsvdAddrs.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicNumbRsvdAddrs.setDescription('The number of reserved MAC addresses starting at the address as defined in ctPicMacAddr. If no MAC addresses are reserved this object should have a value of 0.')
ctPicBoardRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicBoardRevision.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicBoardRevision.setDescription('Defines the Cabletron board level revision level code for this module. If non-existent, this object will be set to blanks (ascii 32).')
ctPicModuleTypeString = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicModuleTypeString.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicModuleTypeString.setDescription('Describes the module associated with this PIC in a human readable format. If non-existent, this object will be set to blanks (ascii 32).')
ctPicDCDCconverterType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicDCDCconverterType.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicDCDCconverterType.setDescription('Describes the voltage of the installed DCDC Converter input and output lines. If the Module does not contain a DCDC Converter this object will be set to blanks (ascii 32).')
ctPicDCDCconvInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicDCDCconvInputPower.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicDCDCconvInputPower.setDescription('Describes the maximum allowed input power for the DCDC input line. If the Module does not contain a DCDC Converter this object will be set to blanks (ascii 32).')
ctPicSMB1promVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicSMB1promVersion.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicSMB1promVersion.setDescription('Describes the current version of the SMB1 prom. If the Module does not contain an SMB1 prom this object will be set to blanks (ascii 32).')
ctPicAtmMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 31), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctPicAtmMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicAtmMacAddr.setDescription('The Atm MAC address(atm format)assigned to the chassis. If this field is not used then it should have a value of a zero length string. If non-existent, this object will be set to all blanks(ascii 32).')
ctPicOEMVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cabletron", 1), ("nEC", 2), ("dEC", 3), ("cPQ", 4), ("newbridge", 5), ("enTeraSys", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicOEMVendorId.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicOEMVendorId.setDescription('Represents the OEM vendor for a product. If the Module does not program this value this object will be set to blanks (ascii 32).')
ctPicOEMVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(40, 40)).setFixedLength(40)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicOEMVendorName.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicOEMVendorName.setDescription('ASCII name of the OEM vendor for the product. If the Module does not program this value this object will be set to blanks (ascii 32).')
ctPicMfg97SN = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicMfg97SN.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicMfg97SN.setDescription('Describes the manufacturing level serial number of the module associated with this PIC. This information is encoded as follows: 4 bytes - Date code (year/week) 4 bytes - Serial number 2 bytes - Manufacture location 2 bytes - Board level revision If any field of this object is non-existent, it will be set to all blanks(ascii 32).')
ctPicMfg97DateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicMfg97DateCode.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicMfg97DateCode.setDescription('The 4 byte date code field when this module was last reworked. This is in year/week format. This object contains the same information as presented in ctPicMfg97SN object however in a more human readable format. If non-existent, this object will be set to all blanks(ascii 32).')
ctPicMfg97RevisionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicMfg97RevisionCode.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicMfg97RevisionCode.setDescription('The 2 character board level revision code field of this module. This object contains the same information as presented in ctPicMfg97SN object however in a more human readable format. If non-existent, this object will be set to all blanks (ascii 32).')
ctPicTL97SN = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicTL97SN.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicTL97SN.setDescription('Describes the top level serial number of the module associated with this PIC. This information is encoded as follows: 4 bytes - Date code (year/week) 4 bytes - Serial number 2 bytes - Manufacture location 2 bytes - Top level revision If any field of this object is non-existent, it will be set to all blanks(ascii 32).')
ctPicTL97DateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicTL97DateCode.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicTL97DateCode.setDescription('The 4 byte date code field when this module was last reworked. This is in year/week format. This object contains the same information as presented in ctPicTL97SN object however in a more human readable format. If non-existent, this object will be set to all blanks(ascii 32).')
ctPicTL97RevisionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicTL97RevisionCode.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicTL97RevisionCode.setDescription('The 2 character top level revision code field of this module. This object contains the same information as presented in ctPicTL97SN object however in a more human readable format. If non-existent, this object will be set to all blanks (ascii 32).')
ctPicOEMTLSN = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 2, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicOEMTLSN.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicOEMTLSN.setDescription('Describes the top level serial number of the module as specified by the OEM for this device. If non-existent, this object will be set to all blanks (ascii 32).')
ctPicECOTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 3), )
if mibBuilder.loadTexts: ctPicECOTable.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicECOTable.setDescription('Each module that contains a PIC may have several ECOs performed on it. The ctPicECOTable reflects a history of the last 5 ECOs that have been performed on this module.')
ctPicECOEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 3, 1), ).setIndexNames((0, "CT-PIC-MIB", "ctPicECOSlot"), (0, "CT-PIC-MIB", "ctPicECOIndex"), (0, "CT-PIC-MIB", "ctPicECOID"))
if mibBuilder.loadTexts: ctPicECOEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicECOEntry.setDescription('Describes a particular PIC ECO entry.')
ctPicECOSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicECOSlot.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicECOSlot.setDescription('Specific slot which the module that realizes this PIC resides. If the PIC is associated with the chassis and not a specific module then this value will be 0. This refers to the same slot as identified by ctPicSlot in ctPicTable.')
ctPicECOIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicECOIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicECOIndex.setDescription('The specific PIC instance that this ECO entry pertains to. This refers to the same instance as identified by ctPicIndex in ctPicTable.')
ctPicECOID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicECOID.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicECOID.setDescription('Uniquely defines the ECO entry that is being described by this conceptual row.')
ctPicECONumber = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicECONumber.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicECONumber.setDescription("Defines Cabletron's ECO number that describes the revision of the hardware. This object is organized as follows: 6 Characters ECO Number 2 Characters Rework Location 4 Characters Date Code")
ctPicDiagTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 5), )
if mibBuilder.loadTexts: ctPicDiagTable.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicDiagTable.setDescription("Each module that contains a PIC may have several Diags performed on it. The ctPicDiagTable reflects a history of the last 8 Diags that have been performed on this module. Important: This table only contains entries diagnostic entries that are defined. Therefore it is possible for this table to be empty 'does not respond to a GET or GET-NEXT' if there are no diagnostic errors present.")
ctPicDiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 5, 1), ).setIndexNames((0, "CT-PIC-MIB", "ctPicDiagSlot"), (0, "CT-PIC-MIB", "ctPicDiagIndex"), (0, "CT-PIC-MIB", "ctPicDiagID"))
if mibBuilder.loadTexts: ctPicDiagEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicDiagEntry.setDescription('Describes a particular PIC Diag entry.')
ctPicDiagSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicDiagSlot.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicDiagSlot.setDescription('Specific slot which the module that realizes this PIC resides. If the PIC is associated with the chassis and not a specific module then this value will be 0. This refers to the same slot as identified by ctPicSlot in ctPicTable.')
ctPicDiagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicDiagIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicDiagIndex.setDescription('The specific PIC instance that this Diag entry pertains to. This refers to the same instance as identified by ctPicIndex in ctPicTable.')
ctPicDiagID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicDiagID.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicDiagID.setDescription('Uniquely defines the Diag entry that is being described by this conceptual row.')
ctPicDiagResults = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicDiagResults.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicDiagResults.setDescription("Defines Cabletron's Diag results code.")
ctPicControlTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 8), )
if mibBuilder.loadTexts: ctPicControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicControlTable.setDescription('A table allowing management control of PIC functionality. ')
ctPicControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 8, 1), ).setIndexNames((0, "CT-PIC-MIB", "ctPicSlot"), (0, "CT-PIC-MIB", "ctPicIndex"))
if mibBuilder.loadTexts: ctPicControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicControlEntry.setDescription('Describes a particular PIC Control Table entry.')
ctPicRefresh = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reFresh", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctPicRefresh.setStatus('mandatory')
if mibBuilder.loadTexts: ctPicRefresh.setDescription('Setting this value causes the PIC Driver to clear cached memory and to reread the PIC chip. This functionality removes the need for manufacturing to power cycle a board to ensure proper PIC programming. Reading this object always returns a zero (0).')
ctPicLocationID = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 4))
ctPicLocationModule = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 4, 1))
ctPicBrim = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 4, 2))
ctPicChassis = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 4, 3))
ctPicDaughter = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 4, 4))
ctPicBackPlane = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 9, 1, 4, 5))
mibBuilder.exportSymbols("CT-PIC-MIB", ctPicECONumber=ctPicECONumber, ctPicAtmMacAddr=ctPicAtmMacAddr, ctPicDCDCconvInputPower=ctPicDCDCconvInputPower, ctPicBoardRevision=ctPicBoardRevision, ctPicLocationID=ctPicLocationID, ctPicTLReworkLocation=ctPicTLReworkLocation, ctPicLocationModule=ctPicLocationModule, ctPicDCDCconverterType=ctPicDCDCconverterType, ctPicDiagID=ctPicDiagID, ctPicOEMVendorId=ctPicOEMVendorId, ctPicMfgPartNumb=ctPicMfgPartNumb, ctPicMfgDateCode=ctPicMfgDateCode, ctPicOEMVendorName=ctPicOEMVendorName, ctPicEntry=ctPicEntry, ctPicControlTable=ctPicControlTable, ctPicECOTable=ctPicECOTable, ctPicTLSerialNumb=ctPicTLSerialNumb, ctPicMfg97RevisionCode=ctPicMfg97RevisionCode, ctPicChassis=ctPicChassis, ctPicDiagTable=ctPicDiagTable, ctPicBrim=ctPicBrim, ctPicDaughter=ctPicDaughter, ctPicTLRevisionCode=ctPicTLRevisionCode, ctPicTLPartNumb=ctPicTLPartNumb, ctPicSMB1promVersion=ctPicSMB1promVersion, ctPicControlEntry=ctPicControlEntry, ctPicECOID=ctPicECOID, ctPicMfgMfgLocation=ctPicMfgMfgLocation, pic=pic, ctPicTable=ctPicTable, ctPicRefresh=ctPicRefresh, ctPicTLSN=ctPicTLSN, ctPicMfgSN=ctPicMfgSN, ctPicTLPN=ctPicTLPN, ctPicDiagIndex=ctPicDiagIndex, ctPicVersion=ctPicVersion, ctPicNumberEntries=ctPicNumberEntries, ctPicLocation=ctPicLocation, ctPicMfg97SN=ctPicMfg97SN, ctPicMfgSerialNumb=ctPicMfgSerialNumb, ctPicTLMfgLocation=ctPicTLMfgLocation, ctPicMfgReworkLocation=ctPicMfgReworkLocation, ctPicECOSlot=ctPicECOSlot, ctPicIndex=ctPicIndex, ctPicOEMTLSN=ctPicOEMTLSN, ctPicSlot=ctPicSlot, ctPicMfgRevisionCode=ctPicMfgRevisionCode, ctPicMacAddr=ctPicMacAddr, ctPicTL97RevisionCode=ctPicTL97RevisionCode, ctPicDiagSlot=ctPicDiagSlot, ctPicTL97DateCode=ctPicTL97DateCode, ctPicBackPlane=ctPicBackPlane, ctPicStatus=ctPicStatus, ctPicModuleTypeString=ctPicModuleTypeString, ctPicDiagEntry=ctPicDiagEntry, ctPicTL97SN=ctPicTL97SN, ctPicModuleType=ctPicModuleType, ctPicNumbRsvdAddrs=ctPicNumbRsvdAddrs, ctPicMfg97DateCode=ctPicMfg97DateCode, ctPicECOEntry=ctPicECOEntry, ctPicECOIndex=ctPicECOIndex, ctPicPcbRevision=ctPicPcbRevision, ctPicMfgPN=ctPicMfgPN, ctPicTLDateCode=ctPicTLDateCode, ctPicDiagResults=ctPicDiagResults)
