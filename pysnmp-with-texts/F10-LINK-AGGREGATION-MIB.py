#
# PySNMP MIB module F10-LINK-AGGREGATION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/F10-LINK-AGGREGATION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:11:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
f10Mgmt, = mibBuilder.importSymbols("FORCE10-SMI", "f10Mgmt")
PortList, = mibBuilder.importSymbols("FORCE10-TC", "PortList")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter32, ModuleIdentity, iso, TimeTicks, Counter64, Bits, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ObjectIdentity, NotificationType, IpAddress, MibIdentifier, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ModuleIdentity", "iso", "TimeTicks", "Counter64", "Bits", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ObjectIdentity", "NotificationType", "IpAddress", "MibIdentifier", "Unsigned32")
TruthValue, DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "MacAddress", "TextualConvention")
f10LinkAggMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 6027, 3, 2))
f10LinkAggMib.setRevisions(('2013-04-16 00:00', '2012-11-26 00:00', '2011-07-04 00:00', '2003-08-01 00:00', '2002-03-12 00:00', '2001-03-01 00:00', '2000-11-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: f10LinkAggMib.setRevisionsDescriptions(('linkBundleType updated.', 'link bundle notificatins added.', 'Added support for LACP state monitoring and state change traps. 1. Added dot3aAggCfgLacpSupported, dot3aAggCfgOperStatus to dot3aAggConfigTable. 2. Added a new table dot3adAggPortTable for monitoring LACP state information per port. 3. Added textual convention F10LacpState for lacp state information and F10LacpKey for lacp key maintained at every physical port. 4. Added a notification dot3adAggLacpStateChange. 5. Modified alignment and description of some objects. 6. Deprecated f10LinkAggMibCompliance and added a new compliance statement f10LinkAggMibComplianceRev1. 7. Deprecated f10LinkAggCommonGroup and added a new object group f10LinkAggCommonGroupRev1. 8. Added two new object groups- - f10LinkAggPortGroup for the aggregator port table and - f10LinkAggNotificationGroup for the notification of lacp state change.', 'Dell Networking OS Link Aggregation MIB version 1.3. - Add FDB common table for configured or negotiated link aggregation. 1. Move textual conventions to the Textual-Convention MIB f10-tc.mib. 2. Rename dot3aClearCurAggFdb to dot3aClearFdb.', 'Dell Networking OS Link Aggregation MIB version 1.1. Deprecated dot3aAggStaticTable & dot3aAggFdbTable Added dot3aCurAggStaticTable & dot3aCurAggFdbTable because of indexing changes', 'First revision of Dell Networking OS link aggregation mib.', 'Dell Networking OS Link Aggregation MIB version 1.0.',))
if mibBuilder.loadTexts: f10LinkAggMib.setLastUpdated('201304160000Z')
if mibBuilder.loadTexts: f10LinkAggMib.setOrganization('Dell Inc')
if mibBuilder.loadTexts: f10LinkAggMib.setContactInfo('http://www.force10networks.com/support')
if mibBuilder.loadTexts: f10LinkAggMib.setDescription('Dell Networking OS Link Aggregation MIB. ')
class F10LacpKey(TextualConvention, Unsigned32):
    description = 'The Actor or Partner Key value maintained by every port that is part of an aggregator.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 128)

class F10LacpState(TextualConvention, Bits):
    description = 'The Actor and Partner State values from the LACPDU.'
    status = 'current'
    namedValues = NamedValues(("lacpActivity", 0), ("lacpTimeout", 1), ("aggregation", 2), ("synchronization", 3), ("collecting", 4), ("distributing", 5), ("defaulted", 6), ("expired", 7))

f10LinkAggObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1))
f10LinkAggAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 2, 2))
f10dot3dAgg = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1))
f10LinkAggMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 2))
dot3aAggConfigTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 1), )
if mibBuilder.loadTexts: dot3aAggConfigTable.setStatus('current')
if mibBuilder.loadTexts: dot3aAggConfigTable.setDescription('A list of all aggregated links configured.')
dot3aAggConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 1, 1), ).setIndexNames((0, "F10-LINK-AGGREGATION-MIB", "dot3aAggCfgId"))
if mibBuilder.loadTexts: dot3aAggConfigEntry.setStatus('current')
if mibBuilder.loadTexts: dot3aAggConfigEntry.setDescription('A list of all aggregated links configured in the system')
dot3aAggCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: dot3aAggCfgId.setStatus('current')
if mibBuilder.loadTexts: dot3aAggCfgId.setDescription('The link aggregation id or port channel id.')
dot3aAggCfgMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3aAggCfgMacAddr.setStatus('current')
if mibBuilder.loadTexts: dot3aAggCfgMacAddr.setDescription('A 6-octet read only value MAC Address assigned to this link aggregation or user-defined MAC address if a static user-defined MAC address is configured.')
dot3aAggCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3aAggCfgIfIndex.setStatus('current')
if mibBuilder.loadTexts: dot3aAggCfgIfIndex.setDescription('The logical interface index assigned to this link aggregation.')
dot3aAggCfgNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3aAggCfgNumPorts.setStatus('current')
if mibBuilder.loadTexts: dot3aAggCfgNumPorts.setDescription('The number of physical ports configured to this link aggregation. Maximum is 16 ports')
dot3aAggCfgPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 1, 1, 5), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3aAggCfgPortList.setStatus('deprecated')
if mibBuilder.loadTexts: dot3aAggCfgPortList.setDescription('The bitmask of ports configured for this link aggregation. This object is deprecated and no longer in use. Please use the new dot3aAggCfgPortListString object instead.')
dot3aAggCfgPortListString = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3aAggCfgPortListString.setStatus('current')
if mibBuilder.loadTexts: dot3aAggCfgPortListString.setDescription('The list of ports configured for this link aggregation. The format of this output is as follows: <interface type> <slot/port>, or <port channel> <number>')
dot3aAggCfgLacpSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3aAggCfgLacpSupported.setStatus('current')
if mibBuilder.loadTexts: dot3aAggCfgLacpSupported.setDescription('This object contains information about whether the link aggregation uses IEEE 802.3ad (Link Aggregation Control Protocol). true - indicates the Aggregation link uses LACP protocol. false - indicates the aggregation link is a statically configured link.')
dot3aAggCfgOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3aAggCfgOperStatus.setStatus('current')
if mibBuilder.loadTexts: dot3aAggCfgOperStatus.setDescription('The current operational status of the link aggregation. up - indicates the aggregated link is ready to transmit and receive network traffic. down - indicates there is some fault that prevents the aggregation link from going to the up(1) state.')
dot3aAggStaticTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 2), )
if mibBuilder.loadTexts: dot3aAggStaticTable.setStatus('current')
if mibBuilder.loadTexts: dot3aAggStaticTable.setDescription('A list of statically configured MAC Address on the aggregated links.')
dot3aAggStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 2, 1), ).setIndexNames((0, "F10-LINK-AGGREGATION-MIB", "dot3aAggIndex"), (0, "F10-LINK-AGGREGATION-MIB", "dot3aAggVlanId"), (0, "F10-LINK-AGGREGATION-MIB", "dot3aAggMacAddr"))
if mibBuilder.loadTexts: dot3aAggStaticEntry.setStatus('deprecated')
if mibBuilder.loadTexts: dot3aAggStaticEntry.setDescription('A list of statically configured MAC Address on the aggregated links in the system')
dot3aAggIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: dot3aAggIndex.setStatus('deprecated')
if mibBuilder.loadTexts: dot3aAggIndex.setDescription('The link aggregation id or port channel id.')
dot3aAggVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: dot3aAggVlanId.setStatus('deprecated')
if mibBuilder.loadTexts: dot3aAggVlanId.setDescription('VLAN id that this ports configured to .')
dot3aAggMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 2, 1, 3), MacAddress())
if mibBuilder.loadTexts: dot3aAggMacAddr.setStatus('deprecated')
if mibBuilder.loadTexts: dot3aAggMacAddr.setDescription('A 6-octet read only value MAC Address assigned to this link aggregation or user-defined MAC address if a static user-defined MAC address is configured.')
dot3aAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3aAggStatus.setStatus('deprecated')
if mibBuilder.loadTexts: dot3aAggStatus.setDescription('The status of this aggregation link . active - this aggregation link is active. inactive - this aggregation link is no active.')
dot3aAggDistributedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3aAggDistributedPort.setStatus('deprecated')
if mibBuilder.loadTexts: dot3aAggDistributedPort.setDescription('The interface of the MAC address. The format of this output is as follows: <interface type> <slot/port>, or <port channel> <number>')
dot3aAggFdbTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 3), )
if mibBuilder.loadTexts: dot3aAggFdbTable.setStatus('current')
if mibBuilder.loadTexts: dot3aAggFdbTable.setDescription('A list of dynamically learned Mac Address on the aggregated links')
dot3aAggFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 3, 1), ).setIndexNames((0, "F10-LINK-AGGREGATION-MIB", "dot3aAggFdbIndex"), (0, "F10-LINK-AGGREGATION-MIB", "dot3aAggFdbVlanId"), (0, "F10-LINK-AGGREGATION-MIB", "dot3aAggFdbMacAddr"))
if mibBuilder.loadTexts: dot3aAggFdbEntry.setStatus('deprecated')
if mibBuilder.loadTexts: dot3aAggFdbEntry.setDescription('A list of dynamically learned Mac Address on the aggregated links in the system')
dot3aAggFdbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: dot3aAggFdbIndex.setStatus('deprecated')
if mibBuilder.loadTexts: dot3aAggFdbIndex.setDescription('The FDB link aggregation id or port channel id.')
dot3aAggFdbVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: dot3aAggFdbVlanId.setStatus('deprecated')
if mibBuilder.loadTexts: dot3aAggFdbVlanId.setDescription('The forwarding table VLAN id that this ports configured to .')
dot3aAggFdbMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 3, 1, 3), MacAddress())
if mibBuilder.loadTexts: dot3aAggFdbMacAddr.setStatus('deprecated')
if mibBuilder.loadTexts: dot3aAggFdbMacAddr.setDescription('A 6-octet read only value MAC Address assigned to this link aggregation or user-defined MAC address if a static user-defined MAC address is configured.')
dot3aAggFdbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3aAggFdbStatus.setStatus('deprecated')
if mibBuilder.loadTexts: dot3aAggFdbStatus.setDescription('The status of this aggregation link . active - this aggregation link is active. inactive - this aggregation link is no active.')
dot3aAggFdbDistributedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3aAggFdbDistributedPort.setStatus('deprecated')
if mibBuilder.loadTexts: dot3aAggFdbDistributedPort.setDescription('The interface of the MAC address. The format of this output is as follows: <interface type> <slot/port>, <port channel> <number>, or NULL if it is not available')
dot3aCurAggStaticTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 4), )
if mibBuilder.loadTexts: dot3aCurAggStaticTable.setStatus('current')
if mibBuilder.loadTexts: dot3aCurAggStaticTable.setDescription('A list of statically configured MAC Address on the aggregated links.')
dot3aCurAggStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 4, 1), ).setIndexNames((0, "F10-LINK-AGGREGATION-MIB", "dot3aCurAggVlanId"), (0, "F10-LINK-AGGREGATION-MIB", "dot3aCurAggMacAddr"), (0, "F10-LINK-AGGREGATION-MIB", "dot3aCurAggIndex"))
if mibBuilder.loadTexts: dot3aCurAggStaticEntry.setStatus('current')
if mibBuilder.loadTexts: dot3aCurAggStaticEntry.setDescription('A list of statically configured MAC Address on the aggregated links in the system')
dot3aCurAggVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: dot3aCurAggVlanId.setStatus('current')
if mibBuilder.loadTexts: dot3aCurAggVlanId.setDescription('This objects describes the VLAN id that this port is part of.')
dot3aCurAggMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 4, 1, 2), MacAddress())
if mibBuilder.loadTexts: dot3aCurAggMacAddr.setStatus('current')
if mibBuilder.loadTexts: dot3aCurAggMacAddr.setDescription('A 6-octet read only value MAC Address assigned to this link aggregation or user-defined MAC address if a static user-defined MAC address is configured.')
dot3aCurAggIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 4, 1, 3), Unsigned32())
if mibBuilder.loadTexts: dot3aCurAggIndex.setStatus('current')
if mibBuilder.loadTexts: dot3aCurAggIndex.setDescription('The link aggregation id or port channel id.')
dot3aCurAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3aCurAggStatus.setStatus('current')
if mibBuilder.loadTexts: dot3aCurAggStatus.setDescription('The status of the static address configured on the aggregation link . active - the mac address is active. inactive - the mac address is not active.')
dot3aCurAggFdbTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 5), )
if mibBuilder.loadTexts: dot3aCurAggFdbTable.setStatus('current')
if mibBuilder.loadTexts: dot3aCurAggFdbTable.setDescription('A list of dynamically learned Mac Address on the aggregated links')
dot3aCurAggFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 5, 1), ).setIndexNames((0, "F10-LINK-AGGREGATION-MIB", "dot3aCurAggFdbVlanId"), (0, "F10-LINK-AGGREGATION-MIB", "dot3aCurAggFdbMacAddr"), (0, "F10-LINK-AGGREGATION-MIB", "dot3aCurAggFdbIndex"))
if mibBuilder.loadTexts: dot3aCurAggFdbEntry.setStatus('current')
if mibBuilder.loadTexts: dot3aCurAggFdbEntry.setDescription('A list of dynamically learned Mac Address on the aggregated links in the system')
dot3aCurAggFdbVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: dot3aCurAggFdbVlanId.setStatus('current')
if mibBuilder.loadTexts: dot3aCurAggFdbVlanId.setDescription('This object gives information on the forwarding table VLAN id that this port is configured to .')
dot3aCurAggFdbMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 5, 1, 2), MacAddress())
if mibBuilder.loadTexts: dot3aCurAggFdbMacAddr.setStatus('current')
if mibBuilder.loadTexts: dot3aCurAggFdbMacAddr.setDescription('A 6-octet read only value MAC Address assigned to this link aggregation or user-defined MAC address if a static user-defined MAC address is configured.')
dot3aCurAggFdbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 5, 1, 3), Unsigned32())
if mibBuilder.loadTexts: dot3aCurAggFdbIndex.setStatus('current')
if mibBuilder.loadTexts: dot3aCurAggFdbIndex.setDescription('The FDB link aggregation id or port channel id.')
dot3aCurAggFdbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3aCurAggFdbStatus.setStatus('current')
if mibBuilder.loadTexts: dot3aCurAggFdbStatus.setDescription('The status of this dynamic mac address learnt on the aggregation link . active - this mac address is active. inactive - this mac address is not active.')
dot3aCommonAggFdbTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 6), )
if mibBuilder.loadTexts: dot3aCommonAggFdbTable.setStatus('current')
if mibBuilder.loadTexts: dot3aCommonAggFdbTable.setDescription('A list of configured and dynamically negotiated aggregated links')
dot3aCommonAggFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 6, 1), ).setIndexNames((0, "F10-LINK-AGGREGATION-MIB", "dot3aCommonAggFdbIndex"), (0, "F10-LINK-AGGREGATION-MIB", "dot3aCommonAggFdbVlanId"))
if mibBuilder.loadTexts: dot3aCommonAggFdbEntry.setStatus('current')
if mibBuilder.loadTexts: dot3aCommonAggFdbEntry.setDescription('A list of configured and dynamically negotiated aggregated links in the system')
dot3aCommonAggFdbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: dot3aCommonAggFdbIndex.setStatus('current')
if mibBuilder.loadTexts: dot3aCommonAggFdbIndex.setDescription('The FDB link aggregation id or port channel id.')
dot3aCommonAggFdbVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 6, 1, 2), Unsigned32())
if mibBuilder.loadTexts: dot3aCommonAggFdbVlanId.setStatus('current')
if mibBuilder.loadTexts: dot3aCommonAggFdbVlanId.setDescription('This object gives information about the VLAN id that the port channel is part of.')
dot3aCommonAggFdbTagConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tagged", 1), ("untagged", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3aCommonAggFdbTagConfig.setStatus('current')
if mibBuilder.loadTexts: dot3aCommonAggFdbTagConfig.setDescription('The status if the aggregation link is tagged, untagged, or not configured. tagged - this aggregation link is tagged. untagged - this aggregation link is untagged.')
dot3aCommonAggFdbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3aCommonAggFdbStatus.setStatus('current')
if mibBuilder.loadTexts: dot3aCommonAggFdbStatus.setDescription('The status of the aggregation link in the vlan. active - when the aggregation link is up and part of vlan. inactive - when the aggregation link is down.')
dot3adAggPortTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 7), )
if mibBuilder.loadTexts: dot3adAggPortTable.setStatus('current')
if mibBuilder.loadTexts: dot3adAggPortTable.setDescription(' A list of Link Aggregation Control configuration parameters for each Aggregation Port on this device.')
dot3adAggPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 7, 1), ).setIndexNames((0, "F10-LINK-AGGREGATION-MIB", "dot3adAggPortIndex"))
if mibBuilder.loadTexts: dot3adAggPortEntry.setStatus('current')
if mibBuilder.loadTexts: dot3adAggPortEntry.setDescription('List of aggregation control confirguration information per aggregated port in the system.')
dot3adAggPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: dot3adAggPortIndex.setStatus('current')
if mibBuilder.loadTexts: dot3adAggPortIndex.setDescription('The ifIndex of the physical port that is part of an aggregator.')
dot3adAggPortActorOperKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 7, 1, 2), F10LacpKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortActorOperKey.setStatus('current')
if mibBuilder.loadTexts: dot3adAggPortActorOperKey.setDescription('The current operational value of the Key for the Aggregation Port. The meaning of the particular Key values is of local significance.')
dot3adAggPortPartnerOperKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 7, 1, 3), F10LacpKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortPartnerOperKey.setStatus('current')
if mibBuilder.loadTexts: dot3adAggPortPartnerOperKey.setDescription('The current operational value of the Key for the protocol Partner. The value of this attribute may contain the manually configured value carried in the system if there is no protocol Partner.')
dot3adAggPortActorAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 7, 1, 4), F10LacpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortActorAdminState.setStatus('current')
if mibBuilder.loadTexts: dot3adAggPortActorAdminState.setDescription('A string of 8 bits, corresponding to the current administrative values of Actor_State as transmitted by the Actor in LACPDUs. The first bit corresponds to bit 0 of Actor_State (LACP_Activity), the second bit corresponds to bit 1 (LACP_Timeout), the third bit corresponds to bit 2 (Aggregation), the fourth bit corresponds to bit 3 (Synchronization), the fifth bit corresponds to bit 4 (Collecting), the sixth bit corresponds to bit 5 (Distributing), the seventh bit corresponds to bit 6 (Defaulted), and the eighth bit corresponds to bit 7 (Expired). These values allow administrative control over the values of LACP_Activity, LACP_Timeout and Aggregation.')
dot3adAggPortActorOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 7, 1, 5), F10LacpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortActorOperState.setStatus('current')
if mibBuilder.loadTexts: dot3adAggPortActorOperState.setDescription('A string of 8 bits, corresponding to the current operational values of Actor_State as transmitted by the Actor in LACPDUs. The bit allocations are as defined in dot3adAggPortActorAdminState.')
dot3adAggPortPartnerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 7, 1, 6), F10LacpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortPartnerAdminState.setStatus('current')
if mibBuilder.loadTexts: dot3adAggPortPartnerAdminState.setDescription('A string of 8 bits, corresponding to the current administrative value of Actor_State for the protocol Partner. The bit allocations are as defined in dot3adAggPortActorAdminState.')
dot3adAggPortPartnerOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 1, 7, 1, 7), F10LacpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortPartnerOperState.setStatus('current')
if mibBuilder.loadTexts: dot3adAggPortPartnerOperState.setDescription('A string of 8 bits, corresponding to the current values of Actor_State in the most recently received LACPDU transmitted by the protocol Partner. The bit allocations are as defined in dot3adAggPortActorAdminState. In the absence of an active protocol Partner, this value may reflect the manually configured value carried in the system.')
dot3aClearFdb = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3aClearFdb.setStatus('current')
if mibBuilder.loadTexts: dot3aClearFdb.setDescription('Write yes(1) to this object will clear all fdb entries. The value will be changed to no(2) once the fdb is cleared. yes(1) - clear fdb aggregation links. no(2) - do not clear fdb aggregation links')
f10Dot3adAggNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 2, 2, 0))
dot3adAggLacpStateChange = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 2, 2, 0, 1)).setObjects(("F10-LINK-AGGREGATION-MIB", "dot3adAggPortActorOperState"), ("F10-LINK-AGGREGATION-MIB", "dot3adAggPortPartnerOperState"))
if mibBuilder.loadTexts: dot3adAggLacpStateChange.setStatus('current')
if mibBuilder.loadTexts: dot3adAggLacpStateChange.setDescription('The dot3adAggLacpStateChange indicates that the agent has detected a change in the Lacp state for one of the member ports of the aggregation link. This notification contains the information on the port which has gone through the state change and the oper state information of the actor and its partner.')
f10LinkBundleNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 2, 2, 1))
linkBundleType = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ecmpBundle", 1), ("lagBundle", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: linkBundleType.setStatus('current')
if mibBuilder.loadTexts: linkBundleType.setDescription('Indicates whether LAG or ECMP-GROUP bundle')
linkBundleNumber = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 2, 2, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: linkBundleNumber.setStatus('current')
if mibBuilder.loadTexts: linkBundleNumber.setDescription('The LAG or ECMP-GROUP ID which is overloaded')
linkBundleImbalance = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 2, 2, 1, 1)).setObjects(("F10-LINK-AGGREGATION-MIB", "linkBundleType"), ("F10-LINK-AGGREGATION-MIB", "linkBundleNumber"))
if mibBuilder.loadTexts: linkBundleImbalance.setStatus('current')
if mibBuilder.loadTexts: linkBundleImbalance.setDescription('Trap generated when traffic imbalance observed in Link Bundle.')
linkBundleImbalanceClear = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 2, 2, 1, 2)).setObjects(("F10-LINK-AGGREGATION-MIB", "linkBundleType"), ("F10-LINK-AGGREGATION-MIB", "linkBundleNumber"))
if mibBuilder.loadTexts: linkBundleImbalanceClear.setStatus('current')
if mibBuilder.loadTexts: linkBundleImbalanceClear.setDescription('Trap generated when traffic imbalance is no longer observed.')
f10LinkAggMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 2, 3))
f10LinkAggMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 2, 3, 1))
f10LinkAggMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 2, 3, 2))
f10LinkAggMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6027, 3, 2, 3, 1, 1)).setObjects(("F10-LINK-AGGREGATION-MIB", "f10LinkAggCommonGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10LinkAggMibCompliance = f10LinkAggMibCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: f10LinkAggMibCompliance.setDescription('The compliance statement for Dell Networking OS product which implement the f10 Link Aggregation MIB. This module compliance is deprecated and is superced by f10LinkAggMibComplianceRev1.')
f10LinkAggMibComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6027, 3, 2, 3, 1, 2)).setObjects(("F10-LINK-AGGREGATION-MIB", "f10LinkAggCommonGroupRev1"), ("F10-LINK-AGGREGATION-MIB", "f10LinkAggPortGroup"), ("F10-LINK-AGGREGATION-MIB", "f10LinkAggNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10LinkAggMibComplianceRev1 = f10LinkAggMibComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: f10LinkAggMibComplianceRev1.setDescription('The compliance statement for Dell Networking OS product which implement the f10 Link Aggregation MIB.')
f10LinkAggCommonGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 2, 3, 2, 1)).setObjects(("F10-LINK-AGGREGATION-MIB", "dot3aAggCfgMacAddr"), ("F10-LINK-AGGREGATION-MIB", "dot3aAggCfgIfIndex"), ("F10-LINK-AGGREGATION-MIB", "dot3aAggCfgNumPorts"), ("F10-LINK-AGGREGATION-MIB", "dot3aAggCfgPortListString"), ("F10-LINK-AGGREGATION-MIB", "dot3aAggCfgLacpSupported"), ("F10-LINK-AGGREGATION-MIB", "dot3aAggCfgOperStatus"), ("F10-LINK-AGGREGATION-MIB", "dot3aCurAggStatus"), ("F10-LINK-AGGREGATION-MIB", "dot3aCurAggFdbStatus"), ("F10-LINK-AGGREGATION-MIB", "dot3aCommonAggFdbTagConfig"), ("F10-LINK-AGGREGATION-MIB", "dot3aCommonAggFdbStatus"), ("F10-LINK-AGGREGATION-MIB", "dot3aClearFdb"), ("F10-LINK-AGGREGATION-MIB", "dot3aAggCfgPortList"), ("F10-LINK-AGGREGATION-MIB", "dot3aAggStatus"), ("F10-LINK-AGGREGATION-MIB", "dot3aAggDistributedPort"), ("F10-LINK-AGGREGATION-MIB", "dot3aAggFdbStatus"), ("F10-LINK-AGGREGATION-MIB", "dot3aAggFdbDistributedPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10LinkAggCommonGroup = f10LinkAggCommonGroup.setStatus('deprecated')
if mibBuilder.loadTexts: f10LinkAggCommonGroup.setDescription('A collection of objects giving overall information about the Link Aggregation. This group is deprecated and is superced by f10LinkAggCommonGroupRev1.')
f10LinkAggCommonGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 2, 3, 2, 2)).setObjects(("F10-LINK-AGGREGATION-MIB", "dot3aAggCfgMacAddr"), ("F10-LINK-AGGREGATION-MIB", "dot3aAggCfgIfIndex"), ("F10-LINK-AGGREGATION-MIB", "dot3aAggCfgNumPorts"), ("F10-LINK-AGGREGATION-MIB", "dot3aAggCfgPortListString"), ("F10-LINK-AGGREGATION-MIB", "dot3aAggCfgLacpSupported"), ("F10-LINK-AGGREGATION-MIB", "dot3aAggCfgOperStatus"), ("F10-LINK-AGGREGATION-MIB", "dot3aCurAggStatus"), ("F10-LINK-AGGREGATION-MIB", "dot3aCurAggFdbStatus"), ("F10-LINK-AGGREGATION-MIB", "dot3aCommonAggFdbTagConfig"), ("F10-LINK-AGGREGATION-MIB", "dot3aCommonAggFdbStatus"), ("F10-LINK-AGGREGATION-MIB", "dot3aClearFdb"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10LinkAggCommonGroupRev1 = f10LinkAggCommonGroupRev1.setStatus('current')
if mibBuilder.loadTexts: f10LinkAggCommonGroupRev1.setDescription('A collection of objects providing the overall information on the Link Aggregation.')
f10LinkAggPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 2, 3, 2, 3)).setObjects(("F10-LINK-AGGREGATION-MIB", "dot3adAggPortActorOperKey"), ("F10-LINK-AGGREGATION-MIB", "dot3adAggPortPartnerOperKey"), ("F10-LINK-AGGREGATION-MIB", "dot3adAggPortActorAdminState"), ("F10-LINK-AGGREGATION-MIB", "dot3adAggPortActorOperState"), ("F10-LINK-AGGREGATION-MIB", "dot3adAggPortPartnerAdminState"), ("F10-LINK-AGGREGATION-MIB", "dot3adAggPortPartnerOperState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10LinkAggPortGroup = f10LinkAggPortGroup.setStatus('current')
if mibBuilder.loadTexts: f10LinkAggPortGroup.setDescription('A collection of objects providing the information about every port in an aggregation that uses IEEE 802.3ad.')
f10LinkAggNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6027, 3, 2, 3, 2, 4)).setObjects(("F10-LINK-AGGREGATION-MIB", "dot3adAggLacpStateChange"), ("F10-LINK-AGGREGATION-MIB", "linkBundleImbalance"), ("F10-LINK-AGGREGATION-MIB", "linkBundleImbalanceClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10LinkAggNotificationGroup = f10LinkAggNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: f10LinkAggNotificationGroup.setDescription('A collection of notification objects for Dell Networking OS Link Aggregation MIB')
f10LinkAggAlarmObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 2, 3, 2, 5)).setObjects(("F10-LINK-AGGREGATION-MIB", "linkBundleType"), ("F10-LINK-AGGREGATION-MIB", "linkBundleNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10LinkAggAlarmObjectGroup = f10LinkAggAlarmObjectGroup.setStatus('current')
if mibBuilder.loadTexts: f10LinkAggAlarmObjectGroup.setDescription('Conformance group for objects contained in LinkBundle Notifications.')
mibBuilder.exportSymbols("F10-LINK-AGGREGATION-MIB", f10LinkAggMibConformance=f10LinkAggMibConformance, f10LinkAggMibGroups=f10LinkAggMibGroups, dot3aCommonAggFdbIndex=dot3aCommonAggFdbIndex, dot3aAggCfgPortList=dot3aAggCfgPortList, dot3aAggConfigTable=dot3aAggConfigTable, dot3aAggFdbIndex=dot3aAggFdbIndex, dot3aCurAggIndex=dot3aCurAggIndex, f10LinkAggCommonGroupRev1=f10LinkAggCommonGroupRev1, f10LinkAggAlarmObjectGroup=f10LinkAggAlarmObjectGroup, dot3aAggCfgMacAddr=dot3aAggCfgMacAddr, dot3aAggCfgNumPorts=dot3aAggCfgNumPorts, dot3adAggPortPartnerAdminState=dot3adAggPortPartnerAdminState, f10LinkAggMgmt=f10LinkAggMgmt, F10LacpState=F10LacpState, dot3adAggPortActorAdminState=dot3adAggPortActorAdminState, dot3aAggStatus=dot3aAggStatus, dot3aAggConfigEntry=dot3aAggConfigEntry, f10LinkAggObjects=f10LinkAggObjects, linkBundleNumber=linkBundleNumber, dot3aCurAggVlanId=dot3aCurAggVlanId, dot3aAggCfgOperStatus=dot3aAggCfgOperStatus, dot3aCurAggFdbEntry=dot3aCurAggFdbEntry, f10LinkAggMibCompliance=f10LinkAggMibCompliance, dot3aAggFdbDistributedPort=dot3aAggFdbDistributedPort, dot3aCommonAggFdbTagConfig=dot3aCommonAggFdbTagConfig, dot3aCommonAggFdbVlanId=dot3aCommonAggFdbVlanId, dot3aAggFdbStatus=dot3aAggFdbStatus, F10LacpKey=F10LacpKey, f10LinkAggMibComplianceRev1=f10LinkAggMibComplianceRev1, dot3aAggCfgLacpSupported=dot3aAggCfgLacpSupported, f10LinkBundleNotifications=f10LinkBundleNotifications, dot3aCurAggFdbMacAddr=dot3aCurAggFdbMacAddr, dot3adAggPortEntry=dot3adAggPortEntry, f10LinkAggCommonGroup=f10LinkAggCommonGroup, linkBundleType=linkBundleType, dot3aCurAggFdbIndex=dot3aCurAggFdbIndex, dot3adAggPortActorOperKey=dot3adAggPortActorOperKey, dot3aCurAggStaticEntry=dot3aCurAggStaticEntry, dot3aClearFdb=dot3aClearFdb, f10LinkAggPortGroup=f10LinkAggPortGroup, dot3aCurAggFdbStatus=dot3aCurAggFdbStatus, dot3adAggPortTable=dot3adAggPortTable, dot3aAggVlanId=dot3aAggVlanId, dot3aAggDistributedPort=dot3aAggDistributedPort, dot3aAggCfgId=dot3aAggCfgId, dot3adAggPortActorOperState=dot3adAggPortActorOperState, linkBundleImbalanceClear=linkBundleImbalanceClear, dot3aCurAggMacAddr=dot3aCurAggMacAddr, dot3aAggFdbEntry=dot3aAggFdbEntry, f10LinkAggAlarms=f10LinkAggAlarms, dot3aAggCfgPortListString=dot3aAggCfgPortListString, dot3adAggLacpStateChange=dot3adAggLacpStateChange, dot3adAggPortPartnerOperKey=dot3adAggPortPartnerOperKey, PYSNMP_MODULE_ID=f10LinkAggMib, dot3aAggMacAddr=dot3aAggMacAddr, dot3aAggStaticTable=dot3aAggStaticTable, dot3aAggFdbMacAddr=dot3aAggFdbMacAddr, dot3aCurAggFdbVlanId=dot3aCurAggFdbVlanId, dot3aCurAggFdbTable=dot3aCurAggFdbTable, dot3aAggFdbTable=dot3aAggFdbTable, f10Dot3adAggNotifications=f10Dot3adAggNotifications, dot3aCommonAggFdbTable=dot3aCommonAggFdbTable, dot3aCommonAggFdbStatus=dot3aCommonAggFdbStatus, dot3adAggPortPartnerOperState=dot3adAggPortPartnerOperState, linkBundleImbalance=linkBundleImbalance, dot3aAggStaticEntry=dot3aAggStaticEntry, dot3aCommonAggFdbEntry=dot3aCommonAggFdbEntry, f10LinkAggMibCompliances=f10LinkAggMibCompliances, f10LinkAggMib=f10LinkAggMib, dot3aAggFdbVlanId=dot3aAggFdbVlanId, dot3aCurAggStaticTable=dot3aCurAggStaticTable, dot3aAggIndex=dot3aAggIndex, f10dot3dAgg=f10dot3dAgg, dot3aAggCfgIfIndex=dot3aAggCfgIfIndex, dot3aCurAggStatus=dot3aCurAggStatus, dot3adAggPortIndex=dot3adAggPortIndex, f10LinkAggNotificationGroup=f10LinkAggNotificationGroup)
