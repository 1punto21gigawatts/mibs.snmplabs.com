#
# PySNMP MIB module ADMIN-ALTEON-AC-vADC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ADMIN-ALTEON-AC-vADC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:13:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
virt_admin, = mibBuilder.importSymbols("ALTEON-ROOT-MIB", "virt-admin")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, Gauge32, NotificationType, Counter32, ObjectIdentity, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, TimeTicks, Integer32, iso, IpAddress, MibIdentifier, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Gauge32", "NotificationType", "Counter32", "ObjectIdentity", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "TimeTicks", "Integer32", "iso", "IpAddress", "MibIdentifier", "Bits")
PhysAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "TextualConvention", "DisplayString")
adminvADC = ModuleIdentity((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1))
adminvADC.setRevisions(('2010-06-17 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: adminvADC.setRevisionsDescriptions(('Added revision clause for SMIv2 compliance.',))
if mibBuilder.loadTexts: adminvADC.setLastUpdated('201006170000Z')
if mibBuilder.loadTexts: adminvADC.setOrganization('Radware Ltd.')
if mibBuilder.loadTexts: adminvADC.setContactInfo('Lobby 1 (Visitors) and Lobby 2 (Deliveries) 575 Corporate Drive Mahwah, NJ 07430 support@radware.com')
if mibBuilder.loadTexts: adminvADC.setDescription('The MIB module for the Alteon OS AdminContext configuration, statistics and information .')
adminvADCConfigs = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1))
adminvADCInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 2))
adminvADCBoot = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 3))
adminvADCStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 4))
vADCConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1))
vADCInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 2, 1))
vADCBoot = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 3, 1))
vADCStat = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 4, 1))
vADCMaxVADCId = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCMaxVADCId.setStatus('current')
if mibBuilder.loadTexts: vADCMaxVADCId.setDescription('The maximum allowed vADC ID.')
vADCMaxCU = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCMaxCU.setStatus('current')
if mibBuilder.loadTexts: vADCMaxCU.setDescription('The maximum allowed Capacity Units.')
vADCCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 3), )
if mibBuilder.loadTexts: vADCCurCfgTable.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgTable.setDescription('The table of vADC configuration.')
vADCCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 3, 1), ).setIndexNames((0, "ADMIN-ALTEON-AC-vADC-MIB", "vADCCurCfgVADCId"))
if mibBuilder.loadTexts: vADCCurCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgTableEntry.setDescription('A row in the vADC configuration table.')
vADCCurCfgVADCId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgVADCId.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgVADCId.setDescription('The vADC identifier.')
vADCCurCfgVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgVlanId.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgVlanId.setDescription('The vlans list for vADCs. The vlans are presented in bitmap format. This string displays vlan number from 1 to 4090. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ vlan 8 || || || ||___ vlan 7 || |____ vlan 6 || . . . ||_________ vlan 1 |__________ Reserved where x : 1 - The represented vlan applied to the vADC. 0 - The represented vlan not applied to the vADC.')
vADCCurCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgName.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgName.setDescription('The vADC name.')
vADCCurCfgCU = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgCU.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgCU.setDescription('Default vADC Capacity Units.')
vADCCurCfgLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgLimit.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgLimit.setDescription('The vADC Throughput value in Mbps.')
vADCCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgState.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgState.setDescription('Enable or disable a vADC')
vADCCurCfgFeatGlobal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgFeatGlobal.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgFeatGlobal.setDescription('Enable or disable of global feature license for vADC.')
vADCCurCfgFeatBWM = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgFeatBWM.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgFeatBWM.setDescription('Enable or disable of BWM feature license for vADC.')
vADCCurCfgFeatITM = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgFeatITM.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgFeatITM.setDescription('Enable or disable of ITM feature license for vADC.')
vADCCurCfgFeatADOS = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgFeatADOS.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgFeatADOS.setDescription('Enable or disable of ADoS feature license for vADC.')
vADCCurCfgFeatLLB = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgFeatLLB.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgFeatLLB.setDescription('Enable or disable of LLB feature license for vADC.')
vADCCurCfgSslLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSslLimit.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgSslLimit.setDescription('The maximum SSL throughput Limit allowed for vADC in CPSs. The SSL Throughput value should be in multiples of 10 CPSs blocks.')
vADCCurCfgCompLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgCompLimit.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgCompLimit.setDescription('The maximum compression throughput Limit allowed for vADC in Mbps. The compression Throughput value should be in multiples of 10 Mbps blocks.')
vADCCurResetImageVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurResetImageVersion.setStatus('current')
if mibBuilder.loadTexts: vADCCurResetImageVersion.setDescription('Image version to use on next reset')
vADCCurSyncPeerSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurSyncPeerSwitch.setStatus('current')
if mibBuilder.loadTexts: vADCCurSyncPeerSwitch.setDescription('The ID of the Peer Switch (agSysPeerCurCfgIndex), with which the vADC in question is associated (values 1..5). Value 0 means no association.')
vADCNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4), )
if mibBuilder.loadTexts: vADCNewCfgTable.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgTable.setDescription('The table of vADC configuration.')
vADCNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4, 1), ).setIndexNames((0, "ADMIN-ALTEON-AC-vADC-MIB", "vADCNewCfgVADCId"))
if mibBuilder.loadTexts: vADCNewCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgTableEntry.setDescription('A row in the vADC configuration table.')
vADCNewCfgVADCId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCNewCfgVADCId.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgVADCId.setDescription('The vADC identifier.')
vADCNewCfgVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCNewCfgVlanId.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgVlanId.setDescription('The vlan list in the vADC in bitmap format.')
vADCNewCfgAddVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4090))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgAddVlan.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgAddVlan.setDescription("The vlan to be added to the specified vADC. A '0' value is returned when read.")
vADCNewCfgRemoveVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4090))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgRemoveVlan.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgRemoveVlan.setDescription("The vlan to be removed from the specified vADC. A '0' value is returned when read.")
vADCNewCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgName.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgName.setDescription('The VADC name.')
vADCNewCfgCU = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgCU.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgCU.setDescription('The vADC Capacity Units.')
vADCNewCfgLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgLimit.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgLimit.setDescription('The throughput Limit allowed for vADC in Mbps.')
vADCNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgState.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgState.setDescription('Enable or disable a VADC')
vADCNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgDelete.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgDelete.setDescription('This is an action object to create or delete a vADC. other(1) is returned always when read. The following values are writable: delete(2)...to delete a VADC')
vADCNewCfgFeatGlobal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgFeatGlobal.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgFeatGlobal.setDescription('Enable or disable of Global feature license for vADC.')
vADCNewCfgFeatBWM = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgFeatBWM.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgFeatBWM.setDescription('Enable or disable of BWM feature license for vADC.')
vADCNewCfgFeatITM = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgFeatITM.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgFeatITM.setDescription('Enable or disable of ITM feature license for vADC.')
vADCNewCfgFeatADOS = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgFeatADOS.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgFeatADOS.setDescription('Enable or disable of ADoS feature license for vADC.')
vADCNewCfgFeatLLB = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgFeatLLB.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgFeatLLB.setDescription('Enable or disable of LLB feature license for vADC.')
vADCNewCfgSslLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSslLimit.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgSslLimit.setDescription('The maximum SSL throughput Limit allowed for vADC in CPSs. The SSL Throughput value should be in multiples of 10 CPSs blocks.')
vADCNewCfgCompLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7500))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgCompLimit.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgCompLimit.setDescription('The maximum compression throughput Limit allowed for vADC in Mbps. The compression Throughput value should be in multiples of 10 Mbps blocks.')
vADCNewResetImageVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCNewResetImageVersion.setStatus('current')
if mibBuilder.loadTexts: vADCNewResetImageVersion.setDescription('Image version to use on next reset')
vADCNewSyncPeerSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCNewSyncPeerSwitch.setStatus('current')
if mibBuilder.loadTexts: vADCNewSyncPeerSwitch.setDescription('The ID of the Peer Switch (agSysPeerNewCfgIndex), with which the vADC in question is associated (values 1..5). Value 0 means no association.')
vADCCurCfgSysTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5), )
if mibBuilder.loadTexts: vADCCurCfgSysTable.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgSysTable.setDescription('The table of vADC System services configuration.')
vADCCurCfgSysTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1), ).setIndexNames((0, "ADMIN-ALTEON-AC-vADC-MIB", "vADCCurCfgSysVADCId"))
if mibBuilder.loadTexts: vADCCurCfgSysTableEntry.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgSysTableEntry.setDescription('A row in the vADC System services configuration table.')
vADCCurCfgSysMmgmtAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysMmgmtAddr.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgSysMmgmtAddr.setDescription('The vADC system services management IP address.')
vADCCurCfgSysMmgmtMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysMmgmtMask.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgSysMmgmtMask.setDescription('The vADC system services management IP subnet mask address.')
vADCCurCfgSysMmgmtGw = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysMmgmtGw.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgSysMmgmtGw.setDescription('The vADC system services management IP gateway address.')
vADCCurCfgSysMmgmtState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysMmgmtState.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgSysMmgmtState.setDescription('Enable or disable a vADC management system service.')
vADCCurCfgSysPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysPeerAddr.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgSysPeerAddr.setDescription('The vADC system services peer IP address.')
vADCCurCfgSysPeerMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysPeerMask.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgSysPeerMask.setDescription('The vADC system services peer IP subnet mask address.')
vADCCurCfgSysPeerGw = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysPeerGw.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgSysPeerGw.setDescription('The vADC system services peer IP gateway address.')
vADCCurCfgSysHttpsState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysHttpsState.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgSysHttpsState.setDescription('Enable or disable a vADC https system service.')
vADCCurCfgSysSshState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysSshState.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgSysSshState.setDescription('Enable or disable a vADC ssh system service.')
vADCCurCfgSysHttpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysHttpState.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgSysHttpState.setDescription('Enable or disable a vADC http system service.')
vADCCurCfgSysSnmpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysSnmpState.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgSysSnmpState.setDescription('Enable or disable a vADC snmp system service.')
vADCCurCfgSysSyslogState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysSyslogState.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgSysSyslogState.setDescription('Enable or disable a vADC syslog system service.')
vADCCurCfgSysRadiusState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysRadiusState.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgSysRadiusState.setDescription('Enable or disable a vADC radius system service.')
vADCCurCfgSysTacacsState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysTacacsState.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgSysTacacsState.setDescription('Enable or disable a vADC tacacs system service.')
vADCCurCfgSysIdleState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysIdleState.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgSysIdleState.setDescription('Enable or disable a vADC idle system service.')
vADCCurCfgSysSmtpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysSmtpState.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgSysSmtpState.setDescription('Enable or disable a vADC smtp system service.')
vADCCurCfgSyslogDelegation = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSyslogDelegation.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgSyslogDelegation.setDescription('Enable or disable delegation for vADC syslog system service.')
vADCCurCfgRadiusDelegation = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgRadiusDelegation.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgRadiusDelegation.setDescription('Enable or disable delegation for vADC radius system service.')
vADCCurCfgTacacsDelegation = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgTacacsDelegation.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgTacacsDelegation.setDescription('Enable or disable delegation for vADC tacacs system service.')
vADCCurCfgSmtpDelegation = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSmtpDelegation.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgSmtpDelegation.setDescription('Enable or disable delegation for vADC smtp system service.')
vADCCurCfgSysMmgmtIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysMmgmtIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgSysMmgmtIpv6Addr.setDescription('The IPV6 address of the vADC management port. Address should be 16-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx ')
vADCCurCfgSysMmgmtIpv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysMmgmtIpv6PrefixLen.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgSysMmgmtIpv6PrefixLen.setDescription('The IPV6 prefix length of the vADC management port. ')
vADCCurCfgSysMmgmtIpv6Gateway = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysMmgmtIpv6Gateway.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgSysMmgmtIpv6Gateway.setDescription('The IPV6 Gateway of the vADC management port. Address should be 16-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx ')
vADCCurCfgSysPeerIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysPeerIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgSysPeerIpv6Addr.setDescription('The peer IPV6 Address of the vADC system services. Address should be 16-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx ')
vADCCurCfgSysPeerIpv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysPeerIpv6PrefixLen.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgSysPeerIpv6PrefixLen.setDescription('The vADC system services peer IPv6 prefix length. ')
vADCCurCfgSysPeerIpv6Gateway = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysPeerIpv6Gateway.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgSysPeerIpv6Gateway.setDescription('The Peer IPV6 gateway of the vADC system services. Address should be 16-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx ')
vADCCurCfgSysTnetState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysTnetState.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgSysTnetState.setDescription('Enable or disable vADC Telnet access.')
vADCCurCfgSysHaId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysHaId.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgSysHaId.setDescription('HA ID for vADC')
vADCCurCfgSysPeerId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysPeerId.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgSysPeerId.setDescription('Peer ID for vADC')
vADCCurCfgSysVADCId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysVADCId.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgSysVADCId.setDescription('The vADC identifier.')
vADCCurCfgIdleDelegation = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgIdleDelegation.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgIdleDelegation.setDescription('Enable or disable delegation for vADC idle timeout system service.')
vADCCurCfgSysMmgmtDelegation = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysMmgmtDelegation.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgSysMmgmtDelegation.setDescription('Enable or disable delegation for vADC management system service.')
vADCCurCfgSysPeerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 5, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgSysPeerName.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgSysPeerName.setDescription('The vADC system services peer Name.')
vADCNewCfgSysTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6), )
if mibBuilder.loadTexts: vADCNewCfgSysTable.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgSysTable.setDescription('The table of vADC System services configuration.')
vADCNewCfgSysTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1), ).setIndexNames((0, "ADMIN-ALTEON-AC-vADC-MIB", "vADCNewCfgSysVADCId"))
if mibBuilder.loadTexts: vADCNewCfgSysTableEntry.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgSysTableEntry.setDescription('A row in the vADC system services configuration table.')
vADCNewCfgSysMmgmtAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysMmgmtAddr.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgSysMmgmtAddr.setDescription('The vADC system services management IP address.')
vADCNewCfgSysMmgmtMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysMmgmtMask.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgSysMmgmtMask.setDescription('The vADC system services management IP subnet mask address.')
vADCNewCfgSysMmgmtGw = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysMmgmtGw.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgSysMmgmtGw.setDescription('The vADC system services management IP gateway address.')
vADCNewCfgSysMmgmtState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysMmgmtState.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgSysMmgmtState.setDescription('Enable or disable a vADC management system service.')
vADCNewCfgSysPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysPeerAddr.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgSysPeerAddr.setDescription('The vADC system services peer IP address.')
vADCNewCfgSysPeerMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysPeerMask.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgSysPeerMask.setDescription('The vADC system services peer IP subnet mask address.')
vADCNewCfgSysPeerGw = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysPeerGw.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgSysPeerGw.setDescription('The vADC system services peer IP gateway address.')
vADCNewCfgSysHttpsState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysHttpsState.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgSysHttpsState.setDescription('Enable or disable a vADC https system service.')
vADCNewCfgSysSshState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysSshState.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgSysSshState.setDescription('Enable or disable a vADC ssh system service.')
vADCNewCfgSysHttpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysHttpState.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgSysHttpState.setDescription('Enable or disable a vADC http system service.')
vADCNewCfgSysSnmpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysSnmpState.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgSysSnmpState.setDescription('Enable or disable a vADC snmp system service.')
vADCNewCfgSysSyslogState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysSyslogState.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgSysSyslogState.setDescription('Enable or disable a vADC syslog system service.')
vADCNewCfgSysRadiusState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysRadiusState.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgSysRadiusState.setDescription('Enable or disable a vADC radius system service.')
vADCNewCfgSysTacacsState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysTacacsState.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgSysTacacsState.setDescription('Enable or disable a vADC tacacs system service.')
vADCNewCfgSysIdleState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysIdleState.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgSysIdleState.setDescription('Enable or disable a vADC idle system service.')
vADCNewCfgSysSmtpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysSmtpState.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgSysSmtpState.setDescription('Enable or disable a vADC smtp system service.')
vADCNewCfgSyslogDelegation = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSyslogDelegation.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgSyslogDelegation.setDescription('Enable or disable delegation for vADC syslog system service.')
vADCNewCfgRadiusDelegation = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgRadiusDelegation.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgRadiusDelegation.setDescription('Enable or disable delegation for vADC radius system service.')
vADCNewCfgTacacsDelegation = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgTacacsDelegation.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgTacacsDelegation.setDescription('Enable or disable delegation for vADC tacacs system service.')
vADCNewCfgSmtpDelegation = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSmtpDelegation.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgSmtpDelegation.setDescription('Enable or disable delegation for vADC smtp system service.')
vADCNewCfgSysMmgmtIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysMmgmtIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgSysMmgmtIpv6Addr.setDescription('The IPV6 address of the vADC management port. Address should be 16-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx ')
vADCNewCfgSysMmgmtIpv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysMmgmtIpv6PrefixLen.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgSysMmgmtIpv6PrefixLen.setDescription('The IPV6 prefix length of the vADC management port. ')
vADCNewCfgSysMmgmtIpv6Gateway = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysMmgmtIpv6Gateway.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgSysMmgmtIpv6Gateway.setDescription('The IPV6 Gateway of the vADC management port. Address should be 16-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx ')
vADCNewCfgSysPeerIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysPeerIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgSysPeerIpv6Addr.setDescription('The peer IPV6 Address of the vADC system services. Addrvess should be 16-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx ')
vADCNewCfgSysPeerIpv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysPeerIpv6PrefixLen.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgSysPeerIpv6PrefixLen.setDescription('The vADC system services peer IPv6 prefix length. ')
vADCNewCfgSysPeerIpv6Gateway = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysPeerIpv6Gateway.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgSysPeerIpv6Gateway.setDescription('The Peer IPV6 gateway of the vADC system services. Address should be 16-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx ')
vADCNewCfgSysTnetState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysTnetState.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgSysTnetState.setDescription('Enable or disable vADC Telnet access.')
vADCNewCfgSysHaId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysHaId.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgSysHaId.setDescription('HA ID for vADC')
vADCNewCfgSysPeerId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysPeerId.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgSysPeerId.setDescription('Peer ID for vADC')
vADCNewCfgSysVADCId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCNewCfgSysVADCId.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgSysVADCId.setDescription('The vADC identifier.')
vADCNewCfgIdleDelegation = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgIdleDelegation.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgIdleDelegation.setDescription('Enable or disable delegation for vADC idle timeout system service.')
vADCNewCfgSysMmgmtDelegation = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysMmgmtDelegation.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgSysMmgmtDelegation.setDescription('Enable or disable delegation for vADC management system service.')
vADCNewCfgSysPeerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 6, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgSysPeerName.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgSysPeerName.setDescription('The vADC system services peer Name.')
vADCCurCfgNetTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 7), )
if mibBuilder.loadTexts: vADCCurCfgNetTable.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgNetTable.setDescription('The table of vADC configuration.')
vADCCurCfgNetTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 7, 1), ).setIndexNames((0, "ADMIN-ALTEON-AC-vADC-MIB", "vADCCurCfgNetVADCId"), (0, "ADMIN-ALTEON-AC-vADC-MIB", "vADCCurCfgNetId"))
if mibBuilder.loadTexts: vADCCurCfgNetTableEntry.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgNetTableEntry.setDescription('A row in the VADC allowed network configuration table.')
vADCCurCfgNetId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgNetId.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgNetId.setDescription('The vADC allowed network identifier.')
vADCCurCfgNetVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgNetVlanId.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgNetVlanId.setDescription('The vADC allowed network vlan identifier.')
vADCCurCfgNetIPver = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 6))).clone(namedValues=NamedValues(("ipv4", 4), ("ipv6", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgNetIPver.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgNetIPver.setDescription('The vADC allowed network ip version.')
vADCCurCfgNetIPBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 7, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgNetIPBegin.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgNetIPBegin.setDescription('The vADC allowed network subnet begining IP address for shared vlan.')
vADCCurCfgNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 7, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgNetMask.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgNetMask.setDescription('The vADC allowed network subnet address.')
vADCCurCfgNetIPEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 7, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgNetIPEnd.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgNetIPEnd.setDescription('The vADC allowed network subnet end IP address for shared vlan.')
vADCCurCfgNetIPv6Begin = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 7, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgNetIPv6Begin.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgNetIPv6Begin.setDescription('The IPv6 begining address of the interface. Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx')
vADCCurCfgNetPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgNetPrefix.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgNetPrefix.setDescription('The prefix length associated with this IP address .')
vADCCurCfgNetIPv6End = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 7, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgNetIPv6End.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgNetIPv6End.setDescription('The IPv6 end address of the interface. Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx')
vADCCurCfgNetVADCId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCCurCfgNetVADCId.setStatus('current')
if mibBuilder.loadTexts: vADCCurCfgNetVADCId.setDescription('The vADC identifier.')
vADCNewCfgNetTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 8), )
if mibBuilder.loadTexts: vADCNewCfgNetTable.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgNetTable.setDescription('The table of vADC allowed network new configuration.')
vADCNewCfgNetTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 8, 1), ).setIndexNames((0, "ADMIN-ALTEON-AC-vADC-MIB", "vADCNewCfgNetVADCId"), (0, "ADMIN-ALTEON-AC-vADC-MIB", "vADCNewCfgNetId"))
if mibBuilder.loadTexts: vADCNewCfgNetTableEntry.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgNetTableEntry.setDescription('A row in the VADC allowed network configuration table.')
vADCNewCfgNetId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCNewCfgNetId.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgNetId.setDescription('The vADC allowed network identifier.')
vADCNewCfgNetVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgNetVlanId.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgNetVlanId.setDescription('The new vADC allowed network vlan identifier.')
vADCNewCfgNetIPver = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 6))).clone(namedValues=NamedValues(("ipv4", 4), ("ipv6", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgNetIPver.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgNetIPver.setDescription('The new vADC allowed network ip version.')
vADCNewCfgNetIPBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 8, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgNetIPBegin.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgNetIPBegin.setDescription('The vADC allowed network subnet begining IP address for shared vlan or subnet IP address for non shared vlan.')
vADCNewCfgNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 8, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgNetMask.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgNetMask.setDescription('The vADC allowed network subnet address.')
vADCNewCfgNetIPEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 8, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgNetIPEnd.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgNetIPEnd.setDescription('The vADC allowed network subnet end IP address for shared vlan.')
vADCNewCfgNetRemId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgNetRemId.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgNetRemId.setDescription('This is an action object to create or delete a vADC allowed network. other(1) is returned always when read. The following values are writable: delete(2)...to delete a vADC allowed network')
vADCNewCfgNetIPv6Begin = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 8, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgNetIPv6Begin.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgNetIPv6Begin.setDescription('The IPv6 begining address of the interface. Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx')
vADCNewCfgNetPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgNetPrefix.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgNetPrefix.setDescription('The prefix length associated with this IP address .')
vADCNewCfgNetIPv6End = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 8, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCNewCfgNetIPv6End.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgNetIPv6End.setDescription('The IPv6 end address of the interface. Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx')
vADCNewCfgNetVADCId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 8, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCNewCfgNetVADCId.setStatus('current')
if mibBuilder.loadTexts: vADCNewCfgNetVADCId.setDescription('The vADC identifier.')
vADCAccessUser = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9))
vADCAccessUid = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1))
vADCUserCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 1), )
if mibBuilder.loadTexts: vADCUserCurCfgTable.setStatus('current')
if mibBuilder.loadTexts: vADCUserCurCfgTable.setDescription('vADC Current User configuration Table.')
vADCUserCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 1, 1), ).setIndexNames((0, "ADMIN-ALTEON-AC-vADC-MIB", "vADCUserCurCfgVADCId"), (0, "ADMIN-ALTEON-AC-vADC-MIB", "vADCUserCurCfgUId"))
if mibBuilder.loadTexts: vADCUserCurCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: vADCUserCurCfgTableEntry.setDescription('A row in the VADC User Table.')
vADCUserCurCfgVADCId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCUserCurCfgVADCId.setStatus('current')
if mibBuilder.loadTexts: vADCUserCurCfgVADCId.setDescription('The VADC identifier.')
vADCUserCurCfgUId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCUserCurCfgUId.setStatus('current')
if mibBuilder.loadTexts: vADCUserCurCfgUId.setDescription('The User identifier.')
vADCUserCurCos = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("user", 0), ("l3Oper", 1), ("slboper", 2), ("slbview", 3), ("crtadmin", 4), ("l4oper", 5), ("oper", 6), ("l3admin", 7), ("slbadmin", 8), ("l4admin", 9), ("admin", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCUserCurCos.setStatus('current')
if mibBuilder.loadTexts: vADCUserCurCos.setDescription('The user class of service.')
vADCUserCurCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCUserCurCfgName.setStatus('current')
if mibBuilder.loadTexts: vADCUserCurCfgName.setDescription('The user name.')
vADCUserCurCfgAdminPswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCUserCurCfgAdminPswd.setStatus('current')
if mibBuilder.loadTexts: vADCUserCurCfgAdminPswd.setDescription('The character string representing the admin password.')
vADCUserCurCfgPswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCUserCurCfgPswd.setStatus('current')
if mibBuilder.loadTexts: vADCUserCurCfgPswd.setDescription('The character string representing the user password.')
vADCUserCurCfgConfPswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCUserCurCfgConfPswd.setStatus('current')
if mibBuilder.loadTexts: vADCUserCurCfgConfPswd.setDescription('The character string is used to confirm the user password.')
vADCUserCurCfgBackdoor = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCUserCurCfgBackdoor.setStatus('current')
if mibBuilder.loadTexts: vADCUserCurCfgBackdoor.setDescription('Enable or disable vadc user backdoor access.')
vADCUserCurCfgCrtMng = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCUserCurCfgCrtMng.setStatus('current')
if mibBuilder.loadTexts: vADCUserCurCfgCrtMng.setDescription('Enable or disable certificate management permissions.')
vADCUserCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCUserCurCfgState.setStatus('current')
if mibBuilder.loadTexts: vADCUserCurCfgState.setDescription('Enable or disable a user.')
vADCUserNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 2), )
if mibBuilder.loadTexts: vADCUserNewCfgTable.setStatus('current')
if mibBuilder.loadTexts: vADCUserNewCfgTable.setDescription('vADC New User configuration Table.')
vADCUserNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 2, 1), ).setIndexNames((0, "ADMIN-ALTEON-AC-vADC-MIB", "vADCUserNewCfgVADCId"), (0, "ADMIN-ALTEON-AC-vADC-MIB", "vADCUserNewCfgUId"))
if mibBuilder.loadTexts: vADCUserNewCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: vADCUserNewCfgTableEntry.setDescription('A row in the VADC User Table.')
vADCUserNewCfgVADCId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCUserNewCfgVADCId.setStatus('current')
if mibBuilder.loadTexts: vADCUserNewCfgVADCId.setDescription('The VADC identifier.')
vADCUserNewCfgUId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCUserNewCfgUId.setStatus('current')
if mibBuilder.loadTexts: vADCUserNewCfgUId.setDescription('The User identifier.')
vADCUserNewCos = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("user", 0), ("l3oper", 1), ("slboper", 2), ("slbview", 3), ("crtadmin", 4), ("l4oper", 5), ("oper", 6), ("l3admin", 7), ("slbadmin", 8), ("l4admin", 9), ("admin", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCUserNewCos.setStatus('current')
if mibBuilder.loadTexts: vADCUserNewCos.setDescription('The user class of service.')
vADCUserNewCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCUserNewCfgName.setStatus('current')
if mibBuilder.loadTexts: vADCUserNewCfgName.setDescription('The user name.')
vADCUserNewCfgAdminPswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCUserNewCfgAdminPswd.setStatus('current')
if mibBuilder.loadTexts: vADCUserNewCfgAdminPswd.setDescription('The character string representing the admin password.')
vADCUserNewCfgPswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCUserNewCfgPswd.setStatus('current')
if mibBuilder.loadTexts: vADCUserNewCfgPswd.setDescription('The character string representing the user password.')
vADCUserNewCfgConfPswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCUserNewCfgConfPswd.setStatus('current')
if mibBuilder.loadTexts: vADCUserNewCfgConfPswd.setDescription('The character string is used to confirm the user password.')
vADCUserNewCfgBackdoor = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCUserNewCfgBackdoor.setStatus('current')
if mibBuilder.loadTexts: vADCUserNewCfgBackdoor.setDescription('Enable or disable vadc user backdoor access.')
vADCUserNewCfgCrtMng = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCUserNewCfgCrtMng.setStatus('current')
if mibBuilder.loadTexts: vADCUserNewCfgCrtMng.setDescription('Enable or disable certificate management permissions.')
vADCUserNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCUserNewCfgState.setStatus('current')
if mibBuilder.loadTexts: vADCUserNewCfgState.setDescription('Enable or disable a user.')
vADCUserNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCUserNewCfgDelete.setStatus('current')
if mibBuilder.loadTexts: vADCUserNewCfgDelete.setDescription('This is an action object to create or delete a User. other(1) is returned always when read. The following values are writable: delete(2)...to delete a User')
vADCUsersPswdTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 2), )
if mibBuilder.loadTexts: vADCUsersPswdTable.setStatus('current')
if mibBuilder.loadTexts: vADCUsersPswdTable.setDescription('vADC Users Table.')
vADCUsersPswdTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 2, 1), ).setIndexNames((0, "ADMIN-ALTEON-AC-vADC-MIB", "vADCUsersVADCId"))
if mibBuilder.loadTexts: vADCUsersPswdTableEntry.setStatus('current')
if mibBuilder.loadTexts: vADCUsersPswdTableEntry.setDescription('A row in the VADC User Table.')
vADCUsersVADCId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCUsersVADCId.setStatus('current')
if mibBuilder.loadTexts: vADCUsersVADCId.setDescription('The VADC identifier.')
vADCAccessUsrPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCAccessUsrPasswd.setStatus('current')
if mibBuilder.loadTexts: vADCAccessUsrPasswd.setDescription('The character string representing the user password.')
vADCAccessSlbOperPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCAccessSlbOperPasswd.setStatus('current')
if mibBuilder.loadTexts: vADCAccessSlbOperPasswd.setDescription('The character string representing the SLB operator(slboper) password.')
vADCAccessL4OperPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCAccessL4OperPasswd.setStatus('current')
if mibBuilder.loadTexts: vADCAccessL4OperPasswd.setDescription('The character string representing the L4 operator(l4oper) password.')
vADCAccessOperPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCAccessOperPasswd.setStatus('current')
if mibBuilder.loadTexts: vADCAccessOperPasswd.setDescription('The character string representing the Operator(oper) password.')
vADCAccessSlbAdminPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCAccessSlbAdminPasswd.setStatus('current')
if mibBuilder.loadTexts: vADCAccessSlbAdminPasswd.setDescription('The character string representing the Slb Admin (slbadmin) password.')
vADCAccessL4AdminPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCAccessL4AdminPasswd.setStatus('current')
if mibBuilder.loadTexts: vADCAccessL4AdminPasswd.setDescription('The character string representing the L4 Admin(l4admin) password.')
vADCAccessAdminPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCAccessAdminPasswd.setStatus('current')
if mibBuilder.loadTexts: vADCAccessAdminPasswd.setDescription('The character string representing the current Administrator(admin) password.')
vADCAccessAdminNewPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCAccessAdminNewPasswd.setStatus('current')
if mibBuilder.loadTexts: vADCAccessAdminNewPasswd.setDescription('The character string representing the Administrator(admin) New password.')
vADCAccessAdminConfNewPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 1, 1, 9, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vADCAccessAdminConfNewPasswd.setStatus('current')
if mibBuilder.loadTexts: vADCAccessAdminConfNewPasswd.setDescription('The character string is used to confirm the Administrator(admin) New password.')
vADCInfoAvailableCU = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCInfoAvailableCU.setStatus('current')
if mibBuilder.loadTexts: vADCInfoAvailableCU.setDescription('The available vADC Capacity Units.')
vADCInfoAvailableThruput = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCInfoAvailableThruput.setStatus('current')
if mibBuilder.loadTexts: vADCInfoAvailableThruput.setDescription('The available throughput in Mbps.')
vADCInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 2, 1, 3), )
if mibBuilder.loadTexts: vADCInfoTable.setStatus('current')
if mibBuilder.loadTexts: vADCInfoTable.setDescription('The table of vADC information.')
vADCInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 2, 1, 3, 1), ).setIndexNames((0, "ADMIN-ALTEON-AC-vADC-MIB", "vADCInfoId"))
if mibBuilder.loadTexts: vADCInfoTableEntry.setStatus('current')
if mibBuilder.loadTexts: vADCInfoTableEntry.setDescription('Information about a particular vADC.')
vADCInfoId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCInfoId.setStatus('current')
if mibBuilder.loadTexts: vADCInfoId.setDescription('The VADC identifier.')
vADCInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 2, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCInfoName.setStatus('current')
if mibBuilder.loadTexts: vADCInfoName.setDescription('The vADC name.')
vADCInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 2, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 0), ("init", 1), ("running", 2), ("down", 3), ("stopping", 4), ("restarting", 5), ("querying", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCInfoStatus.setStatus('current')
if mibBuilder.loadTexts: vADCInfoStatus.setDescription('vADC state information.')
vADCInfoVRRPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 2, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("init", 1), ("master", 2), ("backup", 3), ("holdoff", 4), ("off", 5), ("active", 6), ("standby", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCInfoVRRPStatus.setStatus('current')
if mibBuilder.loadTexts: vADCInfoVRRPStatus.setDescription('The vADC VRRP state information')
vADCInfoCU = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 2, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCInfoCU.setStatus('current')
if mibBuilder.loadTexts: vADCInfoCU.setDescription('The vADC Capacity Units.')
vADCInfoThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 2, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCInfoThroughput.setStatus('current')
if mibBuilder.loadTexts: vADCInfoThroughput.setDescription('The Maximum throughput allowed for vADC in Mbps.')
vADCInfoLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 2, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCInfoLimit.setStatus('current')
if mibBuilder.loadTexts: vADCInfoLimit.setDescription('The throughput Limit for vADC in Mbps.')
vADCInfoSPcpu = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 2, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCInfoSPcpu.setStatus('current')
if mibBuilder.loadTexts: vADCInfoSPcpu.setDescription('The percentage of SP CPU usage for vADC.')
vADCInfoMPcpu = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 2, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCInfoMPcpu.setStatus('current')
if mibBuilder.loadTexts: vADCInfoMPcpu.setDescription('The percentage of MP CPU usage for vADC.')
vADCInfoCUMbit = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 2, 1, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCInfoCUMbit.setStatus('current')
if mibBuilder.loadTexts: vADCInfoCUMbit.setDescription('The value of CU in Mbit.')
vADCInfoUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 2, 1, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCInfoUpTime.setStatus('current')
if mibBuilder.loadTexts: vADCInfoUpTime.setDescription('The vADC uptime information.')
vADCInfoConfigChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCInfoConfigChangeTime.setStatus('current')
if mibBuilder.loadTexts: vADCInfoConfigChangeTime.setDescription('The value of sysUpTime at the last vADC configuration change.')
vADCBootTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 3, 1, 1), )
if mibBuilder.loadTexts: vADCBootTable.setStatus('current')
if mibBuilder.loadTexts: vADCBootTable.setDescription('The table of vADC Boot Table.')
vADCBootTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 3, 1, 1, 1), ).setIndexNames((0, "ADMIN-ALTEON-AC-vADC-MIB", "vADCBootVADCId"))
if mibBuilder.loadTexts: vADCBootTableEntry.setStatus('current')
if mibBuilder.loadTexts: vADCBootTableEntry.setDescription('Information about a particular vADC.')
vADCBootVADCId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCBootVADCId.setStatus('current')
if mibBuilder.loadTexts: vADCBootVADCId.setDescription('The vADC identifier.')
vADCBootAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("reset", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vADCBootAction.setStatus('current')
if mibBuilder.loadTexts: vADCBootAction.setDescription('This object may contain the following values: none(1) This action does not reboot vADC. Setting this object to none(1) has no effect. reset(2) This action will reboot vADC without apply/save the unapplied/unsaved configuration changes. ')
vADCStatsAccelResourceTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 4, 1, 1), )
if mibBuilder.loadTexts: vADCStatsAccelResourceTable.setStatus('current')
if mibBuilder.loadTexts: vADCStatsAccelResourceTable.setDescription('The table of vADC vADCStatsAccelResourceTableEntries.')
vADCStatsAccelResourceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 4, 1, 1, 1), ).setIndexNames((0, "ADMIN-ALTEON-AC-vADC-MIB", "vADCIndex"))
if mibBuilder.loadTexts: vADCStatsAccelResourceTableEntry.setStatus('current')
if mibBuilder.loadTexts: vADCStatsAccelResourceTableEntry.setDescription('A row in the vADC accelarration resources statistics table.')
vADCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCIndex.setStatus('current')
if mibBuilder.loadTexts: vADCIndex.setDescription('The vADC identifier.')
vADCName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 4, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCName.setStatus('current')
if mibBuilder.loadTexts: vADCName.setDescription('The vADC name.')
vADCStatsCompLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 4, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCStatsCompLimit.setStatus('current')
if mibBuilder.loadTexts: vADCStatsCompLimit.setDescription(' the compression limit allocated to vADC ')
vADCStatsCompUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 4, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCStatsCompUtil.setStatus('current')
if mibBuilder.loadTexts: vADCStatsCompUtil.setDescription('the compression limit utilized by vADC')
vADCStatsSSLLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 4, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCStatsSSLLimit.setStatus('current')
if mibBuilder.loadTexts: vADCStatsSSLLimit.setDescription('the SSL limit allocated to vADC')
vADCStatsSSLUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 4, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCStatsSSLUtil.setStatus('current')
if mibBuilder.loadTexts: vADCStatsSSLUtil.setDescription(' the SSL limit utilized by vADC')
vADCMemStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 4, 1, 2), )
if mibBuilder.loadTexts: vADCMemStatsTable.setStatus('current')
if mibBuilder.loadTexts: vADCMemStatsTable.setDescription('The table of vADC vADCMemStatsTableEntries.')
vADCMemStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 4, 1, 2, 1), ).setIndexNames((0, "ADMIN-ALTEON-AC-vADC-MIB", "vADCMemStatsIndex"))
if mibBuilder.loadTexts: vADCMemStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: vADCMemStatsTableEntry.setDescription('A row in the vADC Memory table.')
vADCMemStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 4, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCMemStatsIndex.setStatus('current')
if mibBuilder.loadTexts: vADCMemStatsIndex.setDescription('The vADC index.')
vADCMemStatsName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 4, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCMemStatsName.setStatus('current')
if mibBuilder.loadTexts: vADCMemStatsName.setDescription('The vADC name.')
vADCMemStatsCurrentMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 4, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCMemStatsCurrentMemory.setStatus('current')
if mibBuilder.loadTexts: vADCMemStatsCurrentMemory.setDescription(' The current memory of vADC in KiloBytes.')
vADCMemStatsHiWaterMark = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 6, 1, 4, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vADCMemStatsHiWaterMark.setStatus('current')
if mibBuilder.loadTexts: vADCMemStatsHiWaterMark.setDescription('The high watermark of vADC in KiloBytes.')
mibBuilder.exportSymbols("ADMIN-ALTEON-AC-vADC-MIB", vADCStatsAccelResourceTable=vADCStatsAccelResourceTable, vADCCurCfgSysTnetState=vADCCurCfgSysTnetState, vADCCurCfgState=vADCCurCfgState, vADCCurCfgTacacsDelegation=vADCCurCfgTacacsDelegation, vADCCurCfgSysMmgmtIpv6Addr=vADCCurCfgSysMmgmtIpv6Addr, vADCUserCurCos=vADCUserCurCos, vADCCurCfgSysPeerIpv6Gateway=vADCCurCfgSysPeerIpv6Gateway, vADCUserNewCfgAdminPswd=vADCUserNewCfgAdminPswd, vADCNewCfgCU=vADCNewCfgCU, vADCAccessUid=vADCAccessUid, vADCStatsCompLimit=vADCStatsCompLimit, vADCNewCfgFeatBWM=vADCNewCfgFeatBWM, vADCNewCfgSysPeerName=vADCNewCfgSysPeerName, vADCCurCfgNetVADCId=vADCCurCfgNetVADCId, vADCBootVADCId=vADCBootVADCId, vADCCurCfgRadiusDelegation=vADCCurCfgRadiusDelegation, vADCUserCurCfgAdminPswd=vADCUserCurCfgAdminPswd, vADCNewCfgSysTableEntry=vADCNewCfgSysTableEntry, vADCCurCfgSysPeerId=vADCCurCfgSysPeerId, vADCCurCfgSysMmgmtAddr=vADCCurCfgSysMmgmtAddr, vADCUserCurCfgState=vADCUserCurCfgState, vADCUserCurCfgVADCId=vADCUserCurCfgVADCId, vADCNewCfgSysPeerIpv6Addr=vADCNewCfgSysPeerIpv6Addr, vADCCurCfgNetVlanId=vADCCurCfgNetVlanId, vADCNewCfgLimit=vADCNewCfgLimit, vADCCurResetImageVersion=vADCCurResetImageVersion, vADCNewCfgNetRemId=vADCNewCfgNetRemId, vADCMaxCU=vADCMaxCU, vADCInfoCU=vADCInfoCU, vADCUserNewCfgUId=vADCUserNewCfgUId, adminvADCStats=adminvADCStats, vADCConfig=vADCConfig, vADCInfoUpTime=vADCInfoUpTime, vADCInfoMPcpu=vADCInfoMPcpu, vADCUserCurCfgBackdoor=vADCUserCurCfgBackdoor, vADCBootTable=vADCBootTable, vADCMemStatsTableEntry=vADCMemStatsTableEntry, vADCNewCfgNetTableEntry=vADCNewCfgNetTableEntry, vADCNewCfgSysMmgmtIpv6Gateway=vADCNewCfgSysMmgmtIpv6Gateway, vADCCurCfgNetIPEnd=vADCCurCfgNetIPEnd, vADCNewCfgSysTable=vADCNewCfgSysTable, vADCCurCfgSyslogDelegation=vADCCurCfgSyslogDelegation, vADCInfoVRRPStatus=vADCInfoVRRPStatus, adminvADCBoot=adminvADCBoot, vADCNewCfgSysSyslogState=vADCNewCfgSysSyslogState, vADCNewCfgNetMask=vADCNewCfgNetMask, vADCInfoThroughput=vADCInfoThroughput, vADCNewCfgTableEntry=vADCNewCfgTableEntry, vADCNewCfgSysMmgmtMask=vADCNewCfgSysMmgmtMask, vADCMaxVADCId=vADCMaxVADCId, vADCUserNewCfgState=vADCUserNewCfgState, vADCUserNewCos=vADCUserNewCos, vADCCurCfgSysSnmpState=vADCCurCfgSysSnmpState, vADCUserCurCfgConfPswd=vADCUserCurCfgConfPswd, vADCNewCfgSysPeerGw=vADCNewCfgSysPeerGw, vADCAccessOperPasswd=vADCAccessOperPasswd, vADCCurCfgSysSmtpState=vADCCurCfgSysSmtpState, vADCAccessAdminNewPasswd=vADCAccessAdminNewPasswd, vADCIndex=vADCIndex, vADCMemStatsCurrentMemory=vADCMemStatsCurrentMemory, vADCInfoCUMbit=vADCInfoCUMbit, vADCMemStatsIndex=vADCMemStatsIndex, vADCNewCfgSmtpDelegation=vADCNewCfgSmtpDelegation, vADCCurCfgSysPeerIpv6Addr=vADCCurCfgSysPeerIpv6Addr, vADCNewCfgSysSmtpState=vADCNewCfgSysSmtpState, vADCCurCfgFeatBWM=vADCCurCfgFeatBWM, vADCNewCfgSyslogDelegation=vADCNewCfgSyslogDelegation, vADCCurCfgSysSshState=vADCCurCfgSysSshState, vADCNewCfgFeatGlobal=vADCNewCfgFeatGlobal, vADCCurCfgSysMmgmtIpv6PrefixLen=vADCCurCfgSysMmgmtIpv6PrefixLen, vADCCurCfgCompLimit=vADCCurCfgCompLimit, vADCNewCfgNetIPEnd=vADCNewCfgNetIPEnd, vADCNewCfgSysMmgmtGw=vADCNewCfgSysMmgmtGw, vADCCurCfgSysMmgmtDelegation=vADCCurCfgSysMmgmtDelegation, vADCNewCfgSysHttpsState=vADCNewCfgSysHttpsState, vADCCurCfgFeatGlobal=vADCCurCfgFeatGlobal, vADCCurCfgSysPeerMask=vADCCurCfgSysPeerMask, vADCUserNewCfgDelete=vADCUserNewCfgDelete, vADCNewCfgSysRadiusState=vADCNewCfgSysRadiusState, vADCStatsSSLLimit=vADCStatsSSLLimit, adminvADCConfigs=adminvADCConfigs, vADCInfo=vADCInfo, vADCAccessUser=vADCAccessUser, vADCInfoTable=vADCInfoTable, vADCCurCfgSysPeerGw=vADCCurCfgSysPeerGw, vADCCurCfgNetTableEntry=vADCCurCfgNetTableEntry, vADCUsersPswdTable=vADCUsersPswdTable, vADCNewCfgSysSshState=vADCNewCfgSysSshState, vADCInfoAvailableThruput=vADCInfoAvailableThruput, vADCCurCfgNetIPv6Begin=vADCCurCfgNetIPv6Begin, vADCCurCfgSmtpDelegation=vADCCurCfgSmtpDelegation, vADCCurCfgName=vADCCurCfgName, vADCCurCfgNetMask=vADCCurCfgNetMask, vADCNewCfgTable=vADCNewCfgTable, vADCCurCfgNetId=vADCCurCfgNetId, vADCUserCurCfgTable=vADCUserCurCfgTable, vADCInfoId=vADCInfoId, vADCAccessL4AdminPasswd=vADCAccessL4AdminPasswd, vADCCurCfgSysPeerName=vADCCurCfgSysPeerName, vADCCurCfgSysMmgmtGw=vADCCurCfgSysMmgmtGw, vADCCurCfgFeatLLB=vADCCurCfgFeatLLB, vADCBoot=vADCBoot, vADCNewCfgNetIPBegin=vADCNewCfgNetIPBegin, vADCUsersPswdTableEntry=vADCUsersPswdTableEntry, vADCCurCfgSysHaId=vADCCurCfgSysHaId, adminvADCInfo=adminvADCInfo, vADCNewCfgSysTnetState=vADCNewCfgSysTnetState, vADCNewSyncPeerSwitch=vADCNewSyncPeerSwitch, vADCUserNewCfgPswd=vADCUserNewCfgPswd, vADCCurCfgNetPrefix=vADCCurCfgNetPrefix, vADCCurCfgNetTable=vADCCurCfgNetTable, vADCName=vADCName, vADCNewCfgSysHaId=vADCNewCfgSysHaId, vADCUserNewCfgBackdoor=vADCUserNewCfgBackdoor, vADCUsersVADCId=vADCUsersVADCId, vADCNewCfgCompLimit=vADCNewCfgCompLimit, vADCCurCfgFeatADOS=vADCCurCfgFeatADOS, vADCCurCfgSysHttpState=vADCCurCfgSysHttpState, vADCNewCfgSysPeerId=vADCNewCfgSysPeerId, vADCUserCurCfgName=vADCUserCurCfgName, vADCAccessUsrPasswd=vADCAccessUsrPasswd, vADCCurCfgSysPeerIpv6PrefixLen=vADCCurCfgSysPeerIpv6PrefixLen, vADCUserNewCfgConfPswd=vADCUserNewCfgConfPswd, vADCNewCfgSysMmgmtIpv6PrefixLen=vADCNewCfgSysMmgmtIpv6PrefixLen, vADCNewResetImageVersion=vADCNewResetImageVersion, vADCNewCfgState=vADCNewCfgState, vADCNewCfgFeatLLB=vADCNewCfgFeatLLB, vADCAccessAdminPasswd=vADCAccessAdminPasswd, vADCCurCfgSysMmgmtMask=vADCCurCfgSysMmgmtMask, vADCNewCfgSysMmgmtIpv6Addr=vADCNewCfgSysMmgmtIpv6Addr, vADCNewCfgNetPrefix=vADCNewCfgNetPrefix, vADCNewCfgSysHttpState=vADCNewCfgSysHttpState, vADCUserNewCfgVADCId=vADCUserNewCfgVADCId, vADCUserCurCfgCrtMng=vADCUserCurCfgCrtMng, vADCNewCfgSysMmgmtAddr=vADCNewCfgSysMmgmtAddr, vADCNewCfgNetIPv6End=vADCNewCfgNetIPv6End, vADCCurCfgCU=vADCCurCfgCU, vADCUserCurCfgTableEntry=vADCUserCurCfgTableEntry, vADCCurCfgSysTacacsState=vADCCurCfgSysTacacsState, vADCCurCfgLimit=vADCCurCfgLimit, vADCCurCfgSysMmgmtIpv6Gateway=vADCCurCfgSysMmgmtIpv6Gateway, vADCNewCfgNetVlanId=vADCNewCfgNetVlanId, vADCNewCfgRemoveVlan=vADCNewCfgRemoveVlan, vADCNewCfgVADCId=vADCNewCfgVADCId, vADCNewCfgFeatITM=vADCNewCfgFeatITM, vADCUserNewCfgName=vADCUserNewCfgName, vADCUserNewCfgTable=vADCUserNewCfgTable, vADCNewCfgSysTacacsState=vADCNewCfgSysTacacsState, adminvADC=adminvADC, vADCCurCfgNetIPver=vADCCurCfgNetIPver, vADCNewCfgSysMmgmtState=vADCNewCfgSysMmgmtState, vADCUserNewCfgTableEntry=vADCUserNewCfgTableEntry, vADCStatsCompUtil=vADCStatsCompUtil, vADCCurCfgSysTableEntry=vADCCurCfgSysTableEntry, vADCNewCfgIdleDelegation=vADCNewCfgIdleDelegation, vADCNewCfgVlanId=vADCNewCfgVlanId, vADCCurCfgNetIPBegin=vADCCurCfgNetIPBegin, vADCCurCfgTableEntry=vADCCurCfgTableEntry, vADCNewCfgDelete=vADCNewCfgDelete, vADCCurCfgNetIPv6End=vADCCurCfgNetIPv6End, vADCAccessSlbOperPasswd=vADCAccessSlbOperPasswd, vADCCurCfgSslLimit=vADCCurCfgSslLimit, vADCCurCfgSysPeerAddr=vADCCurCfgSysPeerAddr, vADCNewCfgRadiusDelegation=vADCNewCfgRadiusDelegation, vADCUserCurCfgUId=vADCUserCurCfgUId, vADCNewCfgSysPeerMask=vADCNewCfgSysPeerMask, vADCCurCfgFeatITM=vADCCurCfgFeatITM, vADCNewCfgNetId=vADCNewCfgNetId, vADCAccessSlbAdminPasswd=vADCAccessSlbAdminPasswd, vADCStatsSSLUtil=vADCStatsSSLUtil, vADCInfoTableEntry=vADCInfoTableEntry, vADCNewCfgName=vADCNewCfgName, vADCNewCfgSysSnmpState=vADCNewCfgSysSnmpState, vADCNewCfgSysPeerIpv6Gateway=vADCNewCfgSysPeerIpv6Gateway, vADCCurCfgTable=vADCCurCfgTable, vADCCurCfgSysIdleState=vADCCurCfgSysIdleState, vADCNewCfgSslLimit=vADCNewCfgSslLimit, vADCNewCfgNetVADCId=vADCNewCfgNetVADCId, vADCInfoName=vADCInfoName, vADCNewCfgAddVlan=vADCNewCfgAddVlan, vADCNewCfgNetTable=vADCNewCfgNetTable, vADCUserNewCfgCrtMng=vADCUserNewCfgCrtMng, vADCAccessL4OperPasswd=vADCAccessL4OperPasswd, vADCCurCfgVlanId=vADCCurCfgVlanId, vADCNewCfgSysPeerIpv6PrefixLen=vADCNewCfgSysPeerIpv6PrefixLen, vADCCurCfgSysSyslogState=vADCCurCfgSysSyslogState, vADCBootTableEntry=vADCBootTableEntry, vADCCurCfgSysHttpsState=vADCCurCfgSysHttpsState, vADCNewCfgSysPeerAddr=vADCNewCfgSysPeerAddr, vADCNewCfgTacacsDelegation=vADCNewCfgTacacsDelegation, vADCNewCfgNetIPv6Begin=vADCNewCfgNetIPv6Begin, vADCNewCfgSysMmgmtDelegation=vADCNewCfgSysMmgmtDelegation, vADCStatsAccelResourceTableEntry=vADCStatsAccelResourceTableEntry, vADCMemStatsName=vADCMemStatsName, vADCInfoConfigChangeTime=vADCInfoConfigChangeTime, vADCCurCfgVADCId=vADCCurCfgVADCId, vADCInfoSPcpu=vADCInfoSPcpu, vADCBootAction=vADCBootAction, vADCStat=vADCStat, vADCCurCfgIdleDelegation=vADCCurCfgIdleDelegation, vADCCurSyncPeerSwitch=vADCCurSyncPeerSwitch, vADCCurCfgSysRadiusState=vADCCurCfgSysRadiusState, vADCCurCfgSysVADCId=vADCCurCfgSysVADCId, vADCNewCfgNetIPver=vADCNewCfgNetIPver, vADCCurCfgSysMmgmtState=vADCCurCfgSysMmgmtState, vADCNewCfgSysIdleState=vADCNewCfgSysIdleState, vADCAccessAdminConfNewPasswd=vADCAccessAdminConfNewPasswd, vADCInfoAvailableCU=vADCInfoAvailableCU, vADCMemStatsTable=vADCMemStatsTable, vADCNewCfgSysVADCId=vADCNewCfgSysVADCId, vADCMemStatsHiWaterMark=vADCMemStatsHiWaterMark, vADCCurCfgSysTable=vADCCurCfgSysTable, vADCInfoLimit=vADCInfoLimit, PYSNMP_MODULE_ID=adminvADC, vADCInfoStatus=vADCInfoStatus, vADCUserCurCfgPswd=vADCUserCurCfgPswd, vADCNewCfgFeatADOS=vADCNewCfgFeatADOS)
