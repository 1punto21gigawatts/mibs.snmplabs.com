#
# PySNMP MIB module ALCATEL-IND1-MLD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-MLD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:18:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
softentIND1Mld, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1Mld")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddressType, InetAddressIPv6, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddressIPv6", "InetAddress")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, MibIdentifier, NotificationType, Integer32, Gauge32, IpAddress, Counter32, Counter64, Unsigned32, ModuleIdentity, iso, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "MibIdentifier", "NotificationType", "Integer32", "Gauge32", "IpAddress", "Counter32", "Counter64", "Unsigned32", "ModuleIdentity", "iso", "ObjectIdentity")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
alcatelIND1MldMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1))
alcatelIND1MldMIB.setRevisions(('2011-02-23 00:00', '2008-09-10 00:00', '2008-08-08 00:00', '2007-04-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1MldMIB.setRevisionsDescriptions(('Add zero-based query object and helper address object', 'Add flood unknown object', 'The latest version of this MIB Module. Added maximum group limit objects.', 'The revised version of this MIB Module.',))
if mibBuilder.loadTexts: alcatelIND1MldMIB.setLastUpdated('201102230000Z')
if mibBuilder.loadTexts: alcatelIND1MldMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1MldMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate version of this document is used with the products in question: Alcatel-Lucent, Enterprise Solutions Division (Formerly Alcatel Internetworking, Incorporated) 26801 West Agoura Road Agoura Hills, CA 91301-5122 United States Of America Telephone: North America +1 800 995 2696 Latin America +1 877 919 9526 Europe +31 23 556 0100 Asia +65 394 7933 All Other +1 818 878 4507 Electronic Mail: support@ind.alcatel.com World Wide Web: http://alcatel-lucent.com/wps/portal/enterprise File Transfer Protocol: ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1MldMIB.setDescription('This module describes an authoritative enterprise-specific Simple Network Management Protocol (SNMP) Management Information Base (MIB): Proprietary IPv6 Multicast MIB definitions The right to make changes in specification and other information contained in this document without prior notice is reserved. No liability shall be assumed for any incidental, indirect, special, or consequential damages whatsoever arising from or related to this document or the information contained herein. Vendors, end-users, and other interested parties are granted non-exclusive license to use this specification in connection with management of the products for which it is intended to be used. Copyright (C) 1995-2007 Alcatel-Lucent ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1MldMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1))
alaMld = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1))
alaMldStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldStatus.setStatus('current')
if mibBuilder.loadTexts: alaMldStatus.setDescription('Administratively enable IPv6 multicast switching and routing on the system.')
alaMldQuerying = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldQuerying.setStatus('current')
if mibBuilder.loadTexts: alaMldQuerying.setDescription('Administratively enable MLD Querying on the system.')
alaMldSpoofing = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldSpoofing.setStatus('current')
if mibBuilder.loadTexts: alaMldSpoofing.setDescription('Administratively enable MLD Spoofing on the system.')
alaMldZapping = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldZapping.setStatus('current')
if mibBuilder.loadTexts: alaMldZapping.setDescription('Administratively enable MLD Zapping on the system.')
alaMldVersion = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 5), Unsigned32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVersion.setStatus('current')
if mibBuilder.loadTexts: alaMldVersion.setDescription('Set the default MLD protocol Version running on the system.')
alaMldRobustness = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 6), Unsigned32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldRobustness.setStatus('current')
if mibBuilder.loadTexts: alaMldRobustness.setDescription('Set the MLD Robustness variable used on the system.')
alaMldQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 7), Unsigned32().clone(125)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldQueryInterval.setStatus('current')
if mibBuilder.loadTexts: alaMldQueryInterval.setDescription('Set the MLD Query Interval used on the system.')
alaMldQueryResponseInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 8), Unsigned32().clone(10000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldQueryResponseInterval.setStatus('current')
if mibBuilder.loadTexts: alaMldQueryResponseInterval.setDescription('Set the MLD Query Response Interval on the system.')
alaMldLastMemberQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 9), Unsigned32().clone(1000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldLastMemberQueryInterval.setStatus('current')
if mibBuilder.loadTexts: alaMldLastMemberQueryInterval.setDescription('Set the MLD Last Member Query Interval on the system.')
alaMldRouterTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 10), Unsigned32().clone(90)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldRouterTimeout.setStatus('current')
if mibBuilder.loadTexts: alaMldRouterTimeout.setDescription('The MLD Router Timeout on the system.')
alaMldSourceTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 11), Unsigned32().clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldSourceTimeout.setStatus('current')
if mibBuilder.loadTexts: alaMldSourceTimeout.setDescription('The MLD Source Timeout on the system.')
alaMldProxying = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldProxying.setStatus('current')
if mibBuilder.loadTexts: alaMldProxying.setDescription('Administratively enable MLD Proxying on the system.')
alaMldUnsolicitedReportInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 13), Unsigned32().clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldUnsolicitedReportInterval.setStatus('current')
if mibBuilder.loadTexts: alaMldUnsolicitedReportInterval.setDescription('The MLD Unsolicited Report Interval on the system.')
alaMldQuerierForwarding = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldQuerierForwarding.setStatus('current')
if mibBuilder.loadTexts: alaMldQuerierForwarding.setDescription('Administratively enable MLD Querier Forwarding on the system.')
alaMldMaxGroupLimit = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldMaxGroupLimit.setStatus('current')
if mibBuilder.loadTexts: alaMldMaxGroupLimit.setDescription('The global limit on maximum number of MLD Group memberships that can be learnt on each port/vlan instance.')
alaMldMaxGroupExceedAction = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("drop", 1), ("replace", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldMaxGroupExceedAction.setStatus('current')
if mibBuilder.loadTexts: alaMldMaxGroupExceedAction.setDescription('The global configuration of action to be taken when MLD group membership limit is exceeded on a port/vlan instance.')
alaMldFloodUnknown = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldFloodUnknown.setStatus('current')
if mibBuilder.loadTexts: alaMldFloodUnknown.setDescription('Administratively enable flooding of multicast data packets during flow learning and setup.')
alaMldHelperAddressType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 18), InetAddressType().subtype(subtypeSpec=ValueRangeConstraint(2, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldHelperAddressType.setStatus('current')
if mibBuilder.loadTexts: alaMldHelperAddressType.setDescription('Set the address type of the helper address. Must be ipv4(1) and set at the same time as alaMldHelperAddress.')
alaMldHelperAddress = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 19), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldHelperAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldHelperAddress.setDescription('The configured IPv6 helper address. When an MLD report or leave is received by the device it will remove the IP header and regenerate a new IP header with a destination IP address specified. Use :: to no longer help an MLD report to an remote address. Must be set at the same time as alaMldHelperAddressType')
alaMldZeroBasedQuery = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldZeroBasedQuery.setStatus('current')
if mibBuilder.loadTexts: alaMldZeroBasedQuery.setDescription('Administratively enable the use of an all-zero source IPv6 address for query packets when a non-querier is querying the membership of a port')
alaMldVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2))
alaMldVlanTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1), )
if mibBuilder.loadTexts: alaMldVlanTable.setStatus('current')
if mibBuilder.loadTexts: alaMldVlanTable.setDescription('The VLAN table contains the information on which IPv6 multicast switching and routing is configured.')
alaMldVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-MLD-MIB", "alaMldVlanIndex"))
if mibBuilder.loadTexts: alaMldVlanEntry.setStatus('current')
if mibBuilder.loadTexts: alaMldVlanEntry.setDescription('An entry corresponds to a VLAN on which IPv6 multicast switching and routing is configured.')
alaMldVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaMldVlanIndex.setStatus('current')
if mibBuilder.loadTexts: alaMldVlanIndex.setDescription('The VLAN on which IPv6 multicast switching and routing is configured.')
alaMldVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanStatus.setStatus('current')
if mibBuilder.loadTexts: alaMldVlanStatus.setDescription('Administratively enable IPv6 multicast switching and routing on the VLAN.')
alaMldVlanQuerying = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanQuerying.setStatus('current')
if mibBuilder.loadTexts: alaMldVlanQuerying.setDescription('Administratively enable MLD Querying on the VLAN.')
alaMldVlanSpoofing = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanSpoofing.setStatus('current')
if mibBuilder.loadTexts: alaMldVlanSpoofing.setDescription('Administratively enable MLD Spoofing on the VLAN.')
alaMldVlanZapping = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanZapping.setStatus('current')
if mibBuilder.loadTexts: alaMldVlanZapping.setDescription('Administratively enable MLD Zapping on the VLAN.')
alaMldVlanVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanVersion.setStatus('current')
if mibBuilder.loadTexts: alaMldVlanVersion.setDescription('Set the default MLD protocol Version running on the VLAN.')
alaMldVlanRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanRobustness.setStatus('current')
if mibBuilder.loadTexts: alaMldVlanRobustness.setDescription('Set the MLD Robustness variable used on the VLAN.')
alaMldVlanQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 8), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanQueryInterval.setStatus('current')
if mibBuilder.loadTexts: alaMldVlanQueryInterval.setDescription('Set the MLD Query Interval used on the VLAN.')
alaMldVlanQueryResponseInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 9), Unsigned32()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanQueryResponseInterval.setStatus('current')
if mibBuilder.loadTexts: alaMldVlanQueryResponseInterval.setDescription('Set the MLD Query Response Interval on the VLAN.')
alaMldVlanLastMemberQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 10), Unsigned32()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanLastMemberQueryInterval.setStatus('current')
if mibBuilder.loadTexts: alaMldVlanLastMemberQueryInterval.setDescription('Set the MLD Last Member Query Interval on the VLAN.')
alaMldVlanRouterTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 11), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanRouterTimeout.setStatus('current')
if mibBuilder.loadTexts: alaMldVlanRouterTimeout.setDescription('Set the MLD Router Timeout on the VLAN.')
alaMldVlanSourceTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 12), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanSourceTimeout.setStatus('current')
if mibBuilder.loadTexts: alaMldVlanSourceTimeout.setDescription('Set the MLD Source Timeout on the VLAN.')
alaMldVlanProxying = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanProxying.setStatus('current')
if mibBuilder.loadTexts: alaMldVlanProxying.setDescription('Administratively enable MLD Proxying on the VLAN.')
alaMldVlanUnsolicitedReportInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 14), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanUnsolicitedReportInterval.setStatus('current')
if mibBuilder.loadTexts: alaMldVlanUnsolicitedReportInterval.setDescription('Set the MLD Unsolicited Report Interval on the VLAN.')
alaMldVlanQuerierForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanQuerierForwarding.setStatus('current')
if mibBuilder.loadTexts: alaMldVlanQuerierForwarding.setDescription('Administratively enable MLD Querier Forwarding on the VLAN.')
alaMldVlanMaxGroupLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanMaxGroupLimit.setStatus('current')
if mibBuilder.loadTexts: alaMldVlanMaxGroupLimit.setDescription('The maximum number of MLD Group memberships that can be learnt on the VLAN.')
alaMldVlanMaxGroupExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("drop", 1), ("replace", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanMaxGroupExceedAction.setStatus('current')
if mibBuilder.loadTexts: alaMldVlanMaxGroupExceedAction.setDescription('The action to be taken when the MLD group membership limit is exceeded on the VLAN.')
alaMldVlanZeroBasedQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanZeroBasedQuery.setStatus('current')
if mibBuilder.loadTexts: alaMldVlanZeroBasedQuery.setDescription('Administratively enable the use of an all-zero source IPv6 address for query packets when a non-querier is querying the membership of a port on the VLAN')
alaMldMember = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 3))
alaMldMemberTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 3, 1), )
if mibBuilder.loadTexts: alaMldMemberTable.setStatus('current')
if mibBuilder.loadTexts: alaMldMemberTable.setDescription('The table listing the MLD group membership information.')
alaMldMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 3, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-MLD-MIB", "alaMldMemberVlan"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldMemberIfIndex"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldMemberGroupAddress"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldMemberSourceAddress"))
if mibBuilder.loadTexts: alaMldMemberEntry.setStatus('current')
if mibBuilder.loadTexts: alaMldMemberEntry.setDescription('An entry corresponding to an MLD group membership request.')
alaMldMemberVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaMldMemberVlan.setStatus('current')
if mibBuilder.loadTexts: alaMldMemberVlan.setDescription("The group membership request's VLAN.")
alaMldMemberIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 3, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: alaMldMemberIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaMldMemberIfIndex.setDescription("The group membership request's ifIndex.")
alaMldMemberGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 3, 1, 1, 3), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldMemberGroupAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldMemberGroupAddress.setDescription("The group membership request's IPv6 group address.")
alaMldMemberSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 3, 1, 1, 4), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldMemberSourceAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldMemberSourceAddress.setDescription("The group membership request's IPv6 source address.")
alaMldMemberMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("include", 1), ("exclude", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldMemberMode.setStatus('current')
if mibBuilder.loadTexts: alaMldMemberMode.setDescription("The group membership request's MLD source filter mode.")
alaMldMemberCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldMemberCount.setStatus('current')
if mibBuilder.loadTexts: alaMldMemberCount.setDescription("The group membership request's counter.")
alaMldMemberTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 3, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldMemberTimeout.setStatus('current')
if mibBuilder.loadTexts: alaMldMemberTimeout.setDescription("The group membership request's timeout.")
alaMldStaticMember = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 4))
alaMldStaticMemberTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 4, 1), )
if mibBuilder.loadTexts: alaMldStaticMemberTable.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticMemberTable.setDescription('The table listing the static MLD group membership information.')
alaMldStaticMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 4, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-MLD-MIB", "alaMldStaticMemberVlan"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldStaticMemberIfIndex"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldStaticMemberGroupAddress"))
if mibBuilder.loadTexts: alaMldStaticMemberEntry.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticMemberEntry.setDescription('An entry corresponding to a static MLD group membership request.')
alaMldStaticMemberVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 4, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaMldStaticMemberVlan.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticMemberVlan.setDescription("The static group membership request's VLAN.")
alaMldStaticMemberIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 4, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: alaMldStaticMemberIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticMemberIfIndex.setDescription("The static group membership request's ifIndex.")
alaMldStaticMemberGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 4, 1, 1, 3), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldStaticMemberGroupAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticMemberGroupAddress.setDescription("The static group membership request's IPv6 group address.")
alaMldStaticMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 4, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaMldStaticMemberRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticMemberRowStatus.setDescription('Used in accordance with installation and removal conventions for conceptual rows.')
alaMldNeighbor = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 5))
alaMldNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 5, 1), )
if mibBuilder.loadTexts: alaMldNeighborTable.setStatus('current')
if mibBuilder.loadTexts: alaMldNeighborTable.setDescription('The table listing the neighboring IP multicast routers.')
alaMldNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 5, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-MLD-MIB", "alaMldNeighborVlan"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldNeighborIfIndex"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldNeighborHostAddress"))
if mibBuilder.loadTexts: alaMldNeighborEntry.setStatus('current')
if mibBuilder.loadTexts: alaMldNeighborEntry.setDescription('An entry corresponding to an IP multicast router.')
alaMldNeighborVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 5, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaMldNeighborVlan.setStatus('current')
if mibBuilder.loadTexts: alaMldNeighborVlan.setDescription("The IP multicast router's VLAN.")
alaMldNeighborIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 5, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: alaMldNeighborIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaMldNeighborIfIndex.setDescription("The IP multicast router's ifIndex.")
alaMldNeighborHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 5, 1, 1, 3), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldNeighborHostAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldNeighborHostAddress.setDescription("The IP multicast router's IPv6 host address.")
alaMldNeighborCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldNeighborCount.setStatus('current')
if mibBuilder.loadTexts: alaMldNeighborCount.setDescription("The IP multicast router's counter.")
alaMldNeighborTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 5, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldNeighborTimeout.setStatus('current')
if mibBuilder.loadTexts: alaMldNeighborTimeout.setDescription("The IP multicast router's timeout.")
alaMldStaticNeighbor = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 6))
alaMldStaticNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 6, 1), )
if mibBuilder.loadTexts: alaMldStaticNeighborTable.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticNeighborTable.setDescription('The table listing the static IP multicast routers.')
alaMldStaticNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 6, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-MLD-MIB", "alaMldStaticNeighborVlan"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldStaticNeighborIfIndex"))
if mibBuilder.loadTexts: alaMldStaticNeighborEntry.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticNeighborEntry.setDescription('An entry corresponding to a static IP multicast router.')
alaMldStaticNeighborVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 6, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaMldStaticNeighborVlan.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticNeighborVlan.setDescription("The static IP multicast router's VLAN.")
alaMldStaticNeighborIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 6, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: alaMldStaticNeighborIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticNeighborIfIndex.setDescription("The static IP multicast router's ifIndex.")
alaMldStaticNeighborRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 6, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaMldStaticNeighborRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticNeighborRowStatus.setDescription('Used in accordance with installation and removal conventions for conceptual rows.')
alaMldQuerier = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 7))
alaMldQuerierTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 7, 1), )
if mibBuilder.loadTexts: alaMldQuerierTable.setStatus('current')
if mibBuilder.loadTexts: alaMldQuerierTable.setDescription('The table listing the neighboring MLD queriers.')
alaMldQuerierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 7, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-MLD-MIB", "alaMldQuerierVlan"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldQuerierIfIndex"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldQuerierHostAddress"))
if mibBuilder.loadTexts: alaMldQuerierEntry.setStatus('current')
if mibBuilder.loadTexts: alaMldQuerierEntry.setDescription('An entry corresponding to an MLD querier.')
alaMldQuerierVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 7, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaMldQuerierVlan.setStatus('current')
if mibBuilder.loadTexts: alaMldQuerierVlan.setDescription("The MLD querier's VLAN.")
alaMldQuerierIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 7, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: alaMldQuerierIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaMldQuerierIfIndex.setDescription("The MLD querier's ifIndex.")
alaMldQuerierHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 7, 1, 1, 3), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldQuerierHostAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldQuerierHostAddress.setDescription("The MLD querier's IPv6 host address.")
alaMldQuerierCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 7, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldQuerierCount.setStatus('current')
if mibBuilder.loadTexts: alaMldQuerierCount.setDescription("The MLD querier's counter.")
alaMldQuerierTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 7, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldQuerierTimeout.setStatus('current')
if mibBuilder.loadTexts: alaMldQuerierTimeout.setDescription("The MLD querier's timeout.")
alaMldStaticQuerier = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 8))
alaMldStaticQuerierTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 8, 1), )
if mibBuilder.loadTexts: alaMldStaticQuerierTable.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticQuerierTable.setDescription('The table listing the static MLD queriers.')
alaMldStaticQuerierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 8, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-MLD-MIB", "alaMldStaticQuerierVlan"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldStaticQuerierIfIndex"))
if mibBuilder.loadTexts: alaMldStaticQuerierEntry.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticQuerierEntry.setDescription('An entry corresponding to a static MLD querier.')
alaMldStaticQuerierVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 8, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaMldStaticQuerierVlan.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticQuerierVlan.setDescription("The static MLD querier's VLAN.")
alaMldStaticQuerierIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 8, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: alaMldStaticQuerierIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticQuerierIfIndex.setDescription("The static MLD querier's ifIndex.")
alaMldStaticQuerierRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 8, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaMldStaticQuerierRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticQuerierRowStatus.setDescription('Used in accordance with installation and removal conventions for conceptual rows.')
alaMldSource = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 9))
alaMldSourceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 9, 1), )
if mibBuilder.loadTexts: alaMldSourceTable.setStatus('current')
if mibBuilder.loadTexts: alaMldSourceTable.setDescription('The table listing the IP multicast source information.')
alaMldSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 9, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-MLD-MIB", "alaMldSourceVlan"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldSourceGroupAddress"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldSourceHostAddress"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldSourceDestAddress"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldSourceOrigAddress"))
if mibBuilder.loadTexts: alaMldSourceEntry.setStatus('current')
if mibBuilder.loadTexts: alaMldSourceEntry.setDescription('An entry corresponding to an IP multicast source flow.')
alaMldSourceVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 9, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaMldSourceVlan.setStatus('current')
if mibBuilder.loadTexts: alaMldSourceVlan.setDescription("The IP multicast source flow's VLAN.")
alaMldSourceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 9, 1, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldSourceIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaMldSourceIfIndex.setDescription("The IP multicast source flow's ifIndex.")
alaMldSourceGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 9, 1, 1, 3), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldSourceGroupAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldSourceGroupAddress.setDescription("The IP multicast source flow's IPv6 group address.")
alaMldSourceHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 9, 1, 1, 4), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldSourceHostAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldSourceHostAddress.setDescription("The IP multicast source flow's IPv6 host address.")
alaMldSourceDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 9, 1, 1, 5), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldSourceDestAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldSourceDestAddress.setDescription("The IP multicast source flow's IPv6 tunnel destination address.")
alaMldSourceOrigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 9, 1, 1, 6), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldSourceOrigAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldSourceOrigAddress.setDescription("The IP multicast source flow's IPv6 tunnel source address.")
alaMldSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mcast", 1), ("pim", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldSourceType.setStatus('current')
if mibBuilder.loadTexts: alaMldSourceType.setDescription("The IP multicast source flow's encapsulation type.")
alaMldForward = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 10))
alaMldForwardTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 10, 1), )
if mibBuilder.loadTexts: alaMldForwardTable.setStatus('current')
if mibBuilder.loadTexts: alaMldForwardTable.setDescription('The table listing the IP multicast forward information.')
alaMldForwardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 10, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-MLD-MIB", "alaMldForwardVlan"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldForwardGroupAddress"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldForwardHostAddress"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldForwardDestAddress"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldForwardOrigAddress"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldForwardNextVlan"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldForwardNextIfIndex"))
if mibBuilder.loadTexts: alaMldForwardEntry.setStatus('current')
if mibBuilder.loadTexts: alaMldForwardEntry.setDescription('An entry corresponding to an IP multicast forwarded flow.')
alaMldForwardVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 10, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaMldForwardVlan.setStatus('current')
if mibBuilder.loadTexts: alaMldForwardVlan.setDescription("The IP multicast forwarded flow's VLAN.")
alaMldForwardIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 10, 1, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldForwardIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaMldForwardIfIndex.setDescription("The IP multicast forwarded flow's ifIndex.")
alaMldForwardGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 10, 1, 1, 3), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldForwardGroupAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldForwardGroupAddress.setDescription("The IP multicast forwarded flow's IPv6 group address.")
alaMldForwardHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 10, 1, 1, 4), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldForwardHostAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldForwardHostAddress.setDescription("The IP multicast forwarded flow's IPv6 host address.")
alaMldForwardDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 10, 1, 1, 5), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldForwardDestAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldForwardDestAddress.setDescription("The IP multicast forwarded flow's IPv6 tunnel destination address.")
alaMldForwardOrigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 10, 1, 1, 6), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldForwardOrigAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldForwardOrigAddress.setDescription("The IP multicast forwarded flow's IPv6 tunnel source address.")
alaMldForwardType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mcast", 1), ("pim", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldForwardType.setStatus('current')
if mibBuilder.loadTexts: alaMldForwardType.setDescription("The IP multicast forwarded flow's encapsulation type.")
alaMldForwardNextVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 10, 1, 1, 8), Unsigned32())
if mibBuilder.loadTexts: alaMldForwardNextVlan.setStatus('current')
if mibBuilder.loadTexts: alaMldForwardNextVlan.setDescription("The IP multicast forwarded flow's next VLAN.")
alaMldForwardNextIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 10, 1, 1, 9), InterfaceIndex())
if mibBuilder.loadTexts: alaMldForwardNextIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaMldForwardNextIfIndex.setDescription("The IP multicast forwarded flow's next ifIndex.")
alaMldForwardNextType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mcast", 1), ("pim", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldForwardNextType.setStatus('current')
if mibBuilder.loadTexts: alaMldForwardNextType.setDescription("The IP multicast forwarded flow's next encapsulation type.")
alaMldTunnel = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 11))
alaMldTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 11, 1), )
if mibBuilder.loadTexts: alaMldTunnelTable.setStatus('current')
if mibBuilder.loadTexts: alaMldTunnelTable.setDescription('The table listing the IP multicast tunnel information.')
alaMldTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 11, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-MLD-MIB", "alaMldTunnelVlan"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldTunnelGroupAddress"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldTunnelHostAddress"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldTunnelDestAddress"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldTunnelOrigAddress"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldTunnelNextDestAddress"))
if mibBuilder.loadTexts: alaMldTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: alaMldTunnelEntry.setDescription('An entry corresponding to an IP multicast tunneled flow.')
alaMldTunnelVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 11, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaMldTunnelVlan.setStatus('current')
if mibBuilder.loadTexts: alaMldTunnelVlan.setDescription("The IP multicast tunneled flow's VLAN.")
alaMldTunnelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 11, 1, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldTunnelIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaMldTunnelIfIndex.setDescription("The IP multicast tunneled flow's ifIndex.")
alaMldTunnelGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 11, 1, 1, 3), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldTunnelGroupAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldTunnelGroupAddress.setDescription("The IP multicast tunneled flow's IPv6 group address.")
alaMldTunnelHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 11, 1, 1, 4), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldTunnelHostAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldTunnelHostAddress.setDescription("The IP multicast tunneled flow's IPv6 host address.")
alaMldTunnelDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 11, 1, 1, 5), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldTunnelDestAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldTunnelDestAddress.setDescription("The IP multicast tunneled flow's IPv6 tunnel destination address.")
alaMldTunnelOrigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 11, 1, 1, 6), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldTunnelOrigAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldTunnelOrigAddress.setDescription("The IP multicast tunneled flow's IPv6 tunnel source address.")
alaMldTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mcast", 1), ("pim", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldTunnelType.setStatus('current')
if mibBuilder.loadTexts: alaMldTunnelType.setDescription("The IP multicast tunneled flow's encapsulation type.")
alaMldTunnelNextDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 11, 1, 1, 8), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldTunnelNextDestAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldTunnelNextDestAddress.setDescription("The IP multicast tunneled flow's next IPv6 tunnel destination address.")
alaMldTunnelNextType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 11, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mcast", 1), ("pim", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldTunnelNextType.setStatus('current')
if mibBuilder.loadTexts: alaMldTunnelNextType.setDescription("The IP multicast tunneled flow's next encapsulation type.")
alaMldPort = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 12))
alaMldPortTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 12, 1), )
if mibBuilder.loadTexts: alaMldPortTable.setStatus('current')
if mibBuilder.loadTexts: alaMldPortTable.setDescription('The table listing the IPv6 Multicast port information.')
alaMldPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 12, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-MLD-MIB", "alaMldPortIfIndex"))
if mibBuilder.loadTexts: alaMldPortEntry.setStatus('current')
if mibBuilder.loadTexts: alaMldPortEntry.setDescription('An entry corresponding to IPv6 Multicast port information.')
alaMldPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 12, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaMldPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaMldPortIfIndex.setDescription("The IP multicast port's ifIndex.")
alaMldPortMaxGroupLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 12, 1, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldPortMaxGroupLimit.setStatus('current')
if mibBuilder.loadTexts: alaMldPortMaxGroupLimit.setDescription('The maximum number of MLD Group memberships that can be learnt on the interface.')
alaMldPortMaxGroupExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("drop", 1), ("replace", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldPortMaxGroupExceedAction.setStatus('current')
if mibBuilder.loadTexts: alaMldPortMaxGroupExceedAction.setDescription('The action to be taken when MLD group membership limit is exceeded for the interface.')
alaMldPortVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 13))
alaMldPortVlanTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 13, 1), )
if mibBuilder.loadTexts: alaMldPortVlanTable.setStatus('current')
if mibBuilder.loadTexts: alaMldPortVlanTable.setDescription('The table listing the MLD group membership limit information for a port/vlan instance.')
alaMldPortVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 13, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-MLD-MIB", "alaMldPortIfIndex"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldVlanId"))
if mibBuilder.loadTexts: alaMldPortVlanEntry.setStatus('current')
if mibBuilder.loadTexts: alaMldPortVlanEntry.setDescription('An entry corresponding to MLD group membership limit on a port/vlan.')
alaMldVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 13, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaMldVlanId.setStatus('current')
if mibBuilder.loadTexts: alaMldVlanId.setDescription('The IPv6 multicast group membership VLAN.')
alaMldPortVlanCurrentGroupCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 13, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldPortVlanCurrentGroupCount.setStatus('current')
if mibBuilder.loadTexts: alaMldPortVlanCurrentGroupCount.setDescription('The current IPv6 multicast group memberships on a port/vlan instance.')
alaMldPortVlanMaxGroupLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 13, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldPortVlanMaxGroupLimit.setStatus('current')
if mibBuilder.loadTexts: alaMldPortVlanMaxGroupLimit.setDescription('Maximum MLD Group memberships on the port/vlan instance.')
alaMldPortVlanMaxGroupExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("drop", 1), ("replace", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldPortVlanMaxGroupExceedAction.setStatus('current')
if mibBuilder.loadTexts: alaMldPortVlanMaxGroupExceedAction.setDescription('The action to be taken when MLD group membership limit is exceeded for the port/vlan instance.')
alcatelIND1MldMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2))
alcatelIND1MldMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 1))
alaMldCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldGroup"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanGroup"), ("ALCATEL-IND1-MLD-MIB", "alaMldMemberGroup"), ("ALCATEL-IND1-MLD-MIB", "alaMldStaticMemberGroup"), ("ALCATEL-IND1-MLD-MIB", "alaMldNeighborGroup"), ("ALCATEL-IND1-MLD-MIB", "alaMldStaticNeighborGroup"), ("ALCATEL-IND1-MLD-MIB", "alaMldQuerierGroup"), ("ALCATEL-IND1-MLD-MIB", "alaMldStaticQuerierGroup"), ("ALCATEL-IND1-MLD-MIB", "alaMldSourceGroup"), ("ALCATEL-IND1-MLD-MIB", "alaMldForwardGroup"), ("ALCATEL-IND1-MLD-MIB", "alaMldTunnelGroup"), ("ALCATEL-IND1-MLD-MIB", "alaMldPortGroup"), ("ALCATEL-IND1-MLD-MIB", "alaMldPortVlanGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldCompliance = alaMldCompliance.setStatus('current')
if mibBuilder.loadTexts: alaMldCompliance.setDescription('The compliance statement for systems running IPv6 multicast switch and routing and implementing ALCATEL-IND1-MLD-MIB.')
alcatelIND1MldMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2))
alaMldGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldStatus"), ("ALCATEL-IND1-MLD-MIB", "alaMldQuerying"), ("ALCATEL-IND1-MLD-MIB", "alaMldSpoofing"), ("ALCATEL-IND1-MLD-MIB", "alaMldZapping"), ("ALCATEL-IND1-MLD-MIB", "alaMldVersion"), ("ALCATEL-IND1-MLD-MIB", "alaMldRobustness"), ("ALCATEL-IND1-MLD-MIB", "alaMldQueryInterval"), ("ALCATEL-IND1-MLD-MIB", "alaMldQueryResponseInterval"), ("ALCATEL-IND1-MLD-MIB", "alaMldLastMemberQueryInterval"), ("ALCATEL-IND1-MLD-MIB", "alaMldRouterTimeout"), ("ALCATEL-IND1-MLD-MIB", "alaMldSourceTimeout"), ("ALCATEL-IND1-MLD-MIB", "alaMldProxying"), ("ALCATEL-IND1-MLD-MIB", "alaMldUnsolicitedReportInterval"), ("ALCATEL-IND1-MLD-MIB", "alaMldQuerierForwarding"), ("ALCATEL-IND1-MLD-MIB", "alaMldMaxGroupLimit"), ("ALCATEL-IND1-MLD-MIB", "alaMldMaxGroupExceedAction"), ("ALCATEL-IND1-MLD-MIB", "alaMldFloodUnknown"), ("ALCATEL-IND1-MLD-MIB", "alaMldHelperAddressType"), ("ALCATEL-IND1-MLD-MIB", "alaMldHelperAddress"), ("ALCATEL-IND1-MLD-MIB", "alaMldZeroBasedQuery"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldGroup = alaMldGroup.setStatus('current')
if mibBuilder.loadTexts: alaMldGroup.setDescription('A collection of objects to support management of IPv6 multicast switching and routing system configuration.')
alaMldVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2, 2)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldVlanStatus"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanQuerying"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanSpoofing"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanZapping"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanVersion"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanRobustness"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanQueryInterval"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanQueryResponseInterval"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanLastMemberQueryInterval"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanRouterTimeout"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanSourceTimeout"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanProxying"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanUnsolicitedReportInterval"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanQuerierForwarding"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanMaxGroupLimit"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanMaxGroupExceedAction"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanZeroBasedQuery"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldVlanGroup = alaMldVlanGroup.setStatus('current')
if mibBuilder.loadTexts: alaMldVlanGroup.setDescription('A collection of objects to support management of IPv6 multicast switching and routing vlan configuration.')
alaMldMemberGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2, 3)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldMemberMode"), ("ALCATEL-IND1-MLD-MIB", "alaMldMemberCount"), ("ALCATEL-IND1-MLD-MIB", "alaMldMemberTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldMemberGroup = alaMldMemberGroup.setStatus('current')
if mibBuilder.loadTexts: alaMldMemberGroup.setDescription('A collection of objects to support IPv6 multicast switching and routing group membership information.')
alaMldStaticMemberGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2, 4)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldStaticMemberRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldStaticMemberGroup = alaMldStaticMemberGroup.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticMemberGroup.setDescription('A collection of objects to support IPv6 multicast switching and routing static group membership information tables.')
alaMldNeighborGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2, 5)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldNeighborCount"), ("ALCATEL-IND1-MLD-MIB", "alaMldNeighborTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldNeighborGroup = alaMldNeighborGroup.setStatus('current')
if mibBuilder.loadTexts: alaMldNeighborGroup.setDescription('A collection of objects to support IPv6 multicast switching and routing IP multicast router information.')
alaMldStaticNeighborGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2, 6)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldStaticNeighborRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldStaticNeighborGroup = alaMldStaticNeighborGroup.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticNeighborGroup.setDescription('A collection of objects to support IPv6 multicast switching and routing static IP multicast router information.')
alaMldQuerierGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2, 7)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldQuerierCount"), ("ALCATEL-IND1-MLD-MIB", "alaMldQuerierTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldQuerierGroup = alaMldQuerierGroup.setStatus('current')
if mibBuilder.loadTexts: alaMldQuerierGroup.setDescription('A collection of objects to support IPv6 multicast switching and routing MLD querier information.')
alaMldStaticQuerierGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2, 8)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldStaticQuerierRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldStaticQuerierGroup = alaMldStaticQuerierGroup.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticQuerierGroup.setDescription('A collection of objects to support IPv6 multicast switching and routing static MLD querier information.')
alaMldSourceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2, 9)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldSourceIfIndex"), ("ALCATEL-IND1-MLD-MIB", "alaMldSourceType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldSourceGroup = alaMldSourceGroup.setStatus('current')
if mibBuilder.loadTexts: alaMldSourceGroup.setDescription('A collection of objects to support IPv6 multicast switching and routing IP multicast source information.')
alaMldForwardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2, 10)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldForwardIfIndex"), ("ALCATEL-IND1-MLD-MIB", "alaMldForwardType"), ("ALCATEL-IND1-MLD-MIB", "alaMldForwardNextType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldForwardGroup = alaMldForwardGroup.setStatus('current')
if mibBuilder.loadTexts: alaMldForwardGroup.setDescription('A collection of objects to support IPv6 multicast switching and routing IP multicast forward information.')
alaMldTunnelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2, 11)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldTunnelIfIndex"), ("ALCATEL-IND1-MLD-MIB", "alaMldTunnelType"), ("ALCATEL-IND1-MLD-MIB", "alaMldTunnelNextType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldTunnelGroup = alaMldTunnelGroup.setStatus('current')
if mibBuilder.loadTexts: alaMldTunnelGroup.setDescription('A collection of objects to support IPv6 multicast switching and routing IP multicast tunnel information.')
alaMldPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2, 12)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldPortMaxGroupLimit"), ("ALCATEL-IND1-MLD-MIB", "alaMldPortMaxGroupExceedAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldPortGroup = alaMldPortGroup.setStatus('current')
if mibBuilder.loadTexts: alaMldPortGroup.setDescription('A collection of objects to support IPv6 multicast switching configuration.')
alaMldPortVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2, 13)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldPortVlanCurrentGroupCount"), ("ALCATEL-IND1-MLD-MIB", "alaMldPortVlanMaxGroupLimit"), ("ALCATEL-IND1-MLD-MIB", "alaMldPortVlanMaxGroupExceedAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldPortVlanGroup = alaMldPortVlanGroup.setStatus('current')
if mibBuilder.loadTexts: alaMldPortVlanGroup.setDescription('An object to support IPv6 multicast switching group limit information for a port/vlan instance.')
mibBuilder.exportSymbols("ALCATEL-IND1-MLD-MIB", alaMldProxying=alaMldProxying, alaMldForwardTable=alaMldForwardTable, alaMldStaticQuerierIfIndex=alaMldStaticQuerierIfIndex, alaMldVlanQueryResponseInterval=alaMldVlanQueryResponseInterval, alaMldTunnelNextDestAddress=alaMldTunnelNextDestAddress, alaMldNeighbor=alaMldNeighbor, alaMldSourceOrigAddress=alaMldSourceOrigAddress, alaMldPortGroup=alaMldPortGroup, alaMldZapping=alaMldZapping, alaMldForwardGroup=alaMldForwardGroup, alaMldVlanZeroBasedQuery=alaMldVlanZeroBasedQuery, alaMldUnsolicitedReportInterval=alaMldUnsolicitedReportInterval, alaMldVlanQuerying=alaMldVlanQuerying, alaMldStaticQuerier=alaMldStaticQuerier, alaMldPort=alaMldPort, alaMldNeighborTable=alaMldNeighborTable, alaMldZeroBasedQuery=alaMldZeroBasedQuery, alaMldVlanVersion=alaMldVlanVersion, alaMldSourceIfIndex=alaMldSourceIfIndex, alaMldTunnelOrigAddress=alaMldTunnelOrigAddress, alaMldTunnelDestAddress=alaMldTunnelDestAddress, alaMldTunnelType=alaMldTunnelType, alaMldPortVlanMaxGroupExceedAction=alaMldPortVlanMaxGroupExceedAction, alaMldStaticQuerierTable=alaMldStaticQuerierTable, alaMldStatus=alaMldStatus, alaMldVlanSpoofing=alaMldVlanSpoofing, alaMldNeighborVlan=alaMldNeighborVlan, alaMldGroup=alaMldGroup, alcatelIND1MldMIBCompliances=alcatelIND1MldMIBCompliances, alaMldQuerying=alaMldQuerying, alaMldMemberGroupAddress=alaMldMemberGroupAddress, alaMldVlanStatus=alaMldVlanStatus, alaMldStaticMemberGroup=alaMldStaticMemberGroup, alaMldNeighborEntry=alaMldNeighborEntry, alaMldVlanProxying=alaMldVlanProxying, alcatelIND1MldMIB=alcatelIND1MldMIB, alaMldStaticNeighborTable=alaMldStaticNeighborTable, alaMldVlanRouterTimeout=alaMldVlanRouterTimeout, alaMldPortVlanEntry=alaMldPortVlanEntry, alaMldVlan=alaMldVlan, alaMldStaticMemberGroupAddress=alaMldStaticMemberGroupAddress, alaMldQuerierHostAddress=alaMldQuerierHostAddress, alaMldNeighborTimeout=alaMldNeighborTimeout, alaMldForwardNextType=alaMldForwardNextType, alaMldPortTable=alaMldPortTable, alaMldQuerierTable=alaMldQuerierTable, alaMldRobustness=alaMldRobustness, alaMldForwardDestAddress=alaMldForwardDestAddress, alaMldQuerier=alaMldQuerier, alaMldForwardNextIfIndex=alaMldForwardNextIfIndex, alaMldVlanGroup=alaMldVlanGroup, alaMldSourceGroup=alaMldSourceGroup, alaMldMember=alaMldMember, alaMldStaticNeighbor=alaMldStaticNeighbor, alaMldSourceTimeout=alaMldSourceTimeout, alaMldSourceHostAddress=alaMldSourceHostAddress, alaMldQuerierEntry=alaMldQuerierEntry, alaMldMemberVlan=alaMldMemberVlan, alaMldStaticQuerierEntry=alaMldStaticQuerierEntry, alaMldSourceDestAddress=alaMldSourceDestAddress, alaMldMemberCount=alaMldMemberCount, alaMldCompliance=alaMldCompliance, alaMldSourceGroupAddress=alaMldSourceGroupAddress, alaMldStaticNeighborVlan=alaMldStaticNeighborVlan, alaMldVlanSourceTimeout=alaMldVlanSourceTimeout, alaMldLastMemberQueryInterval=alaMldLastMemberQueryInterval, alaMldQuerierGroup=alaMldQuerierGroup, alaMldVlanQueryInterval=alaMldVlanQueryInterval, alaMldForwardEntry=alaMldForwardEntry, alaMldForwardGroupAddress=alaMldForwardGroupAddress, alaMldTunnelGroupAddress=alaMldTunnelGroupAddress, alaMldQuerierCount=alaMldQuerierCount, alaMldTunnelEntry=alaMldTunnelEntry, alaMldForwardNextVlan=alaMldForwardNextVlan, alaMldSource=alaMldSource, alaMldMaxGroupExceedAction=alaMldMaxGroupExceedAction, alaMldForwardVlan=alaMldForwardVlan, alaMldVlanZapping=alaMldVlanZapping, alaMldMemberIfIndex=alaMldMemberIfIndex, alaMldPortIfIndex=alaMldPortIfIndex, alaMldPortVlanCurrentGroupCount=alaMldPortVlanCurrentGroupCount, alaMldStaticMemberRowStatus=alaMldStaticMemberRowStatus, alaMldQuerierTimeout=alaMldQuerierTimeout, alaMldQueryResponseInterval=alaMldQueryResponseInterval, alaMldPortVlan=alaMldPortVlan, alaMldNeighborIfIndex=alaMldNeighborIfIndex, alaMldTunnelVlan=alaMldTunnelVlan, alaMldPortVlanMaxGroupLimit=alaMldPortVlanMaxGroupLimit, alaMldStaticNeighborIfIndex=alaMldStaticNeighborIfIndex, alcatelIND1MldMIBObjects=alcatelIND1MldMIBObjects, alaMldSourceTable=alaMldSourceTable, alcatelIND1MldMIBConformance=alcatelIND1MldMIBConformance, alaMldQuerierIfIndex=alaMldQuerierIfIndex, alaMldForwardIfIndex=alaMldForwardIfIndex, alaMldForwardOrigAddress=alaMldForwardOrigAddress, alaMldVlanLastMemberQueryInterval=alaMldVlanLastMemberQueryInterval, alaMldTunnelHostAddress=alaMldTunnelHostAddress, alaMldVlanEntry=alaMldVlanEntry, alaMldStaticNeighborRowStatus=alaMldStaticNeighborRowStatus, alaMldPortMaxGroupExceedAction=alaMldPortMaxGroupExceedAction, alaMldTunnelTable=alaMldTunnelTable, alaMldNeighborHostAddress=alaMldNeighborHostAddress, alaMldForward=alaMldForward, alaMldQueryInterval=alaMldQueryInterval, alaMldTunnel=alaMldTunnel, alaMldMemberMode=alaMldMemberMode, alaMldMemberEntry=alaMldMemberEntry, alaMldPortEntry=alaMldPortEntry, alaMldMemberTable=alaMldMemberTable, alaMldTunnelIfIndex=alaMldTunnelIfIndex, alaMldQuerierVlan=alaMldQuerierVlan, alaMldVlanId=alaMldVlanId, alaMldStaticNeighborEntry=alaMldStaticNeighborEntry, alaMldMemberTimeout=alaMldMemberTimeout, alaMldMemberGroup=alaMldMemberGroup, alaMldVlanTable=alaMldVlanTable, alaMldSourceVlan=alaMldSourceVlan, alaMldStaticQuerierVlan=alaMldStaticQuerierVlan, alaMldVlanMaxGroupLimit=alaMldVlanMaxGroupLimit, alaMldStaticMemberEntry=alaMldStaticMemberEntry, alaMldVlanUnsolicitedReportInterval=alaMldVlanUnsolicitedReportInterval, alaMldStaticMember=alaMldStaticMember, alaMldTunnelGroup=alaMldTunnelGroup, alaMldSpoofing=alaMldSpoofing, alaMldRouterTimeout=alaMldRouterTimeout, alaMldForwardHostAddress=alaMldForwardHostAddress, alaMldTunnelNextType=alaMldTunnelNextType, alaMldQuerierForwarding=alaMldQuerierForwarding, alaMldPortVlanTable=alaMldPortVlanTable, alaMldMemberSourceAddress=alaMldMemberSourceAddress, alaMldNeighborCount=alaMldNeighborCount, alaMldSourceEntry=alaMldSourceEntry, alaMldStaticQuerierGroup=alaMldStaticQuerierGroup, alaMldVersion=alaMldVersion, alaMldPortVlanGroup=alaMldPortVlanGroup, alaMldVlanIndex=alaMldVlanIndex, alaMld=alaMld, alaMldStaticMemberTable=alaMldStaticMemberTable, alcatelIND1MldMIBGroups=alcatelIND1MldMIBGroups, alaMldStaticQuerierRowStatus=alaMldStaticQuerierRowStatus, PYSNMP_MODULE_ID=alcatelIND1MldMIB, alaMldVlanRobustness=alaMldVlanRobustness, alaMldFloodUnknown=alaMldFloodUnknown, alaMldHelperAddress=alaMldHelperAddress, alaMldStaticMemberIfIndex=alaMldStaticMemberIfIndex, alaMldSourceType=alaMldSourceType, alaMldVlanQuerierForwarding=alaMldVlanQuerierForwarding, alaMldNeighborGroup=alaMldNeighborGroup, alaMldStaticNeighborGroup=alaMldStaticNeighborGroup, alaMldStaticMemberVlan=alaMldStaticMemberVlan, alaMldVlanMaxGroupExceedAction=alaMldVlanMaxGroupExceedAction, alaMldPortMaxGroupLimit=alaMldPortMaxGroupLimit, alaMldHelperAddressType=alaMldHelperAddressType, alaMldMaxGroupLimit=alaMldMaxGroupLimit, alaMldForwardType=alaMldForwardType)
