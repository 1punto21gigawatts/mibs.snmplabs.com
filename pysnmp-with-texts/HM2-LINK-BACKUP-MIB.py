#
# PySNMP MIB module HM2-LINK-BACKUP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-LINK-BACKUP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:31:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
hm2L2RedundancyMibObjects, = mibBuilder.importSymbols("HM2-L2REDUNDANCY-MIB", "hm2L2RedundancyMibObjects")
HmEnabledStatus, = mibBuilder.importSymbols("HM2-TC-MIB", "HmEnabledStatus")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Gauge32, Counter32, Unsigned32, TimeTicks, Integer32, ModuleIdentity, ObjectIdentity, NotificationType, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, iso, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Gauge32", "Counter32", "Unsigned32", "TimeTicks", "Integer32", "ModuleIdentity", "ObjectIdentity", "NotificationType", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "iso", "Counter64")
DisplayString, TextualConvention, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus", "TruthValue")
hm2LinkBackupMibGroup = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 3))
hm2LinkBackupMibGroup.setRevisions(('2013-05-14 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hm2LinkBackupMibGroup.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: hm2LinkBackupMibGroup.setLastUpdated('201305140000Z')
if mibBuilder.loadTexts: hm2LinkBackupMibGroup.setOrganization('Hirschmann Automation and Control GmbH')
if mibBuilder.loadTexts: hm2LinkBackupMibGroup.setContactInfo('Postal: Stuttgarter Str. 45-51 72654 Neckartenzlingen Germany Phone: +49 7127 140 E-mail: hac.support@belden.com')
if mibBuilder.loadTexts: hm2LinkBackupMibGroup.setDescription('Hirschmann Link Backup MIB. Copyright (C) 2013. All Rights Reserved.')
hm2LinkBackupNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 3, 0))
hm2LinkBackupObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 3, 1))
hm2LinkBackupConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 3, 1, 1))
hm2LinkBackupGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 3, 1, 1, 1))
hm2LinkBackupInterfaceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 3, 1, 1, 2))
class HmLinkBackupStatus(TextualConvention, Integer32):
    description = 'Status of the interface.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("forwarding", 1), ("blocking", 2), ("down", 3), ("unknown", 4))

hm2LinkBackupAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 3, 1, 1, 1, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LinkBackupAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hm2LinkBackupAdminStatus.setDescription('Enables/disables the global link backup functionality on the device.')
hm2LinkBackupInterfaceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 3, 1, 1, 2, 1), )
if mibBuilder.loadTexts: hm2LinkBackupInterfaceConfigTable.setStatus('current')
if mibBuilder.loadTexts: hm2LinkBackupInterfaceConfigTable.setDescription('A table containing current configuration and status information for each link backup pair.')
hm2LinkBackupInterfaceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 3, 1, 1, 2, 1, 1), ).setIndexNames((0, "HM2-LINK-BACKUP-MIB", "hm2LinkBackupPrimaryInterface"), (0, "HM2-LINK-BACKUP-MIB", "hm2LinkBackupBackupInterface"))
if mibBuilder.loadTexts: hm2LinkBackupInterfaceConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hm2LinkBackupInterfaceConfigEntry.setDescription('A logical row in the hm2LinkBackupIfConfigTable.')
hm2LinkBackupPrimaryInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 3, 1, 1, 2, 1, 1, 1), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hm2LinkBackupPrimaryInterface.setStatus('current')
if mibBuilder.loadTexts: hm2LinkBackupPrimaryInterface.setDescription('The primary interface of the link backup pair.')
hm2LinkBackupBackupInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 3, 1, 1, 2, 1, 1, 2), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hm2LinkBackupBackupInterface.setStatus('current')
if mibBuilder.loadTexts: hm2LinkBackupBackupInterface.setDescription('The primary interface of the link backup pair.')
hm2LinkBackupPrimaryInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 3, 1, 1, 2, 1, 1, 3), HmLinkBackupStatus().clone(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LinkBackupPrimaryInterfaceStatus.setStatus('current')
if mibBuilder.loadTexts: hm2LinkBackupPrimaryInterfaceStatus.setDescription('The current status of the primary interface for this link backup pair.')
hm2LinkBackupBackupInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 3, 1, 1, 2, 1, 1, 4), HmLinkBackupStatus().clone(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LinkBackupBackupInterfaceStatus.setStatus('current')
if mibBuilder.loadTexts: hm2LinkBackupBackupInterfaceStatus.setDescription('The current status of the backup interface for this link backup pair.')
hm2LinkBackupFailBackEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 3, 1, 1, 2, 1, 1, 5), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LinkBackupFailBackEnable.setStatus('current')
if mibBuilder.loadTexts: hm2LinkBackupFailBackEnable.setDescription("If set to 'true', the backup interface goes to 'blocking' and the primary interface to 'forwarding' after the time configured in hm2LinkBackupFailBackDelay. If set to 'false' the backup interface stays in 'forwarding' even the primary interface has re-established a link or the admin status of the primary interface has been set from 'down' to 'up'.")
hm2LinkBackupFailBackDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 3, 1, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 3600), )).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LinkBackupFailBackDelay.setStatus('current')
if mibBuilder.loadTexts: hm2LinkBackupFailBackDelay.setDescription("The time in seconds when the backup interface goes to 'blocking' and the primary interface goes to 'forwarding' after the primary interface has re-established a link or the admin status of the primary interface has been set from 'down' to 'up' if hm2LinkBackupFailBackEnable is set to 'true'. If the hm2LinkBackupFailBackDelay is set to '0' the primary interface goes to 'forwarding' immediately after it has re-established a link or the admin status of the primary interface has been set from 'down' to 'up' and the backup interface goes to 'blocking' if hm2LinkBackupFailBackEnable is set to 'true'.")
hm2LinkBackupDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 3, 1, 1, 2, 1, 1, 7), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LinkBackupDescription.setStatus('current')
if mibBuilder.loadTexts: hm2LinkBackupDescription.setDescription('A description of the link backup pair.')
hm2LinkBackupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 3, 1, 1, 2, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LinkBackupRowStatus.setStatus('current')
if mibBuilder.loadTexts: hm2LinkBackupRowStatus.setDescription('Describes the status of a row in the table. Supports creation, deletion and activation of rows. A row must not be active(1) in order to be modified. A row can be taken out of service by setting the value notInService(2).')
hm2LinkBackupStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 3, 0, 1)).setObjects(("HM2-LINK-BACKUP-MIB", "hm2LinkBackupPrimaryInterface"), ("HM2-LINK-BACKUP-MIB", "hm2LinkBackupBackupInterface"), ("HM2-LINK-BACKUP-MIB", "hm2LinkBackupPrimaryInterfaceStatus"), ("HM2-LINK-BACKUP-MIB", "hm2LinkBackupBackupInterfaceStatus"))
if mibBuilder.loadTexts: hm2LinkBackupStatusTrap.setStatus('current')
if mibBuilder.loadTexts: hm2LinkBackupStatusTrap.setDescription('This trap is sent for each link backup pair if either the status of the hm2LinkBackupPrimaryInterfaceStatus or the status of the hm2LinkBackupBackupInterfaceStatus changes.')
mibBuilder.exportSymbols("HM2-LINK-BACKUP-MIB", hm2LinkBackupRowStatus=hm2LinkBackupRowStatus, hm2LinkBackupInterfaceConfigEntry=hm2LinkBackupInterfaceConfigEntry, hm2LinkBackupBackupInterface=hm2LinkBackupBackupInterface, hm2LinkBackupNotifications=hm2LinkBackupNotifications, hm2LinkBackupGeneralGroup=hm2LinkBackupGeneralGroup, hm2LinkBackupInterfaceGroup=hm2LinkBackupInterfaceGroup, PYSNMP_MODULE_ID=hm2LinkBackupMibGroup, hm2LinkBackupMibGroup=hm2LinkBackupMibGroup, hm2LinkBackupDescription=hm2LinkBackupDescription, hm2LinkBackupConfiguration=hm2LinkBackupConfiguration, hm2LinkBackupStatusTrap=hm2LinkBackupStatusTrap, hm2LinkBackupObjects=hm2LinkBackupObjects, hm2LinkBackupFailBackEnable=hm2LinkBackupFailBackEnable, hm2LinkBackupBackupInterfaceStatus=hm2LinkBackupBackupInterfaceStatus, hm2LinkBackupPrimaryInterface=hm2LinkBackupPrimaryInterface, hm2LinkBackupPrimaryInterfaceStatus=hm2LinkBackupPrimaryInterfaceStatus, hm2LinkBackupFailBackDelay=hm2LinkBackupFailBackDelay, hm2LinkBackupAdminStatus=hm2LinkBackupAdminStatus, hm2LinkBackupInterfaceConfigTable=hm2LinkBackupInterfaceConfigTable, HmLinkBackupStatus=HmLinkBackupStatus)
