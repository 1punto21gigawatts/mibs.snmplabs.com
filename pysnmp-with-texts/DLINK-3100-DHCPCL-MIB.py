#
# PySNMP MIB module DLINK-3100-DHCPCL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DLINK-3100-DHCPCL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:48:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
rnd, = mibBuilder.importSymbols("DLINK-3100-MIB", "rnd")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, iso, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ObjectIdentity, Gauge32, Bits, IpAddress, Counter64, Unsigned32, NotificationType, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "iso", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ObjectIdentity", "Gauge32", "Bits", "IpAddress", "Counter64", "Unsigned32", "NotificationType", "Integer32")
TextualConvention, TruthValue, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString", "RowStatus")
rlDhcpCl = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 76))
rlDhcpCl.setRevisions(('2007-01-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rlDhcpCl.setRevisionsDescriptions(('Initial revision.',))
if mibBuilder.loadTexts: rlDhcpCl.setLastUpdated('200701020000Z')
if mibBuilder.loadTexts: rlDhcpCl.setOrganization('Dlink, Inc. Dlink Semiconductor, Inc.')
if mibBuilder.loadTexts: rlDhcpCl.setContactInfo('www.dlink.com')
if mibBuilder.loadTexts: rlDhcpCl.setDescription('This private MIB module defines DHCP CL private MIBs.')
rlDhcpClActionTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 76, 3), )
if mibBuilder.loadTexts: rlDhcpClActionTable.setStatus('current')
if mibBuilder.loadTexts: rlDhcpClActionTable.setDescription(' The (conceptual) table mentione IP address which must be released/renewed on the interface.')
rlDhcpClActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 76, 3, 1), ).setIndexNames((0, "DLINK-3100-DHCPCL-MIB", "rlDhcpClActionIfIndex"))
if mibBuilder.loadTexts: rlDhcpClActionEntry.setStatus('current')
if mibBuilder.loadTexts: rlDhcpClActionEntry.setDescription('An entry (conceptual row) in dhcpClActionTable.')
rlDhcpClActionIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 76, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDhcpClActionIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlDhcpClActionIfIndex.setDescription(' The interface which the action is implemented for or NULL if it implemented for all device. ')
rlDhcpClActionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 76, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlDhcpClActionStatus.setStatus('current')
if mibBuilder.loadTexts: rlDhcpClActionStatus.setDescription('The status of this entry. Creating the entry renewing Dhcp address on the interface; destroying the entry release Dhcp address on the interface.')
rlDhcpClActionHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 76, 3, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlDhcpClActionHostName.setStatus('current')
if mibBuilder.loadTexts: rlDhcpClActionHostName.setDescription(' This option specifies the name of the client.')
rlDhcpApprovalEnabled = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 76, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDhcpApprovalEnabled.setStatus('current')
if mibBuilder.loadTexts: rlDhcpApprovalEnabled.setDescription('DHCP Approval feature status - enable (True) or desable (False). Must be True only if DHCP Approval supported, device has only one ip interface and default ip exist.')
rlDhcpApprovalWaitingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 76, 5), )
if mibBuilder.loadTexts: rlDhcpApprovalWaitingTable.setStatus('current')
if mibBuilder.loadTexts: rlDhcpApprovalWaitingTable.setDescription('IP addresses waiting for approval.')
rlDhcpApprovalWaitingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 76, 5, 1), ).setIndexNames((0, "DLINK-3100-DHCPCL-MIB", "rlDhcpApprovalWaitingIfIndex"))
if mibBuilder.loadTexts: rlDhcpApprovalWaitingEntry.setStatus('current')
if mibBuilder.loadTexts: rlDhcpApprovalWaitingEntry.setDescription('An entry in rlDhcpApprovalWaitingTable.')
rlDhcpApprovalWaitingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 76, 5, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDhcpApprovalWaitingIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlDhcpApprovalWaitingIfIndex.setDescription('IP interface ifIndex.')
rlDhcpApprovalWaitingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 76, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDhcpApprovalWaitingAddress.setStatus('current')
if mibBuilder.loadTexts: rlDhcpApprovalWaitingAddress.setDescription('IP Address waiting for approval.')
rlDhcpApprovalWaitingMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 76, 5, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDhcpApprovalWaitingMask.setStatus('current')
if mibBuilder.loadTexts: rlDhcpApprovalWaitingMask.setDescription('Mask waiting for approval.')
rlDhcpApprovalWaitingGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 76, 5, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDhcpApprovalWaitingGateway.setStatus('current')
if mibBuilder.loadTexts: rlDhcpApprovalWaitingGateway.setDescription('Default gateway of received address.')
rlDhcpApprovalActionTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 76, 6), )
if mibBuilder.loadTexts: rlDhcpApprovalActionTable.setStatus('current')
if mibBuilder.loadTexts: rlDhcpApprovalActionTable.setDescription('Action for waiting ip address (approve/decline).')
rlDhcpApprovalActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 76, 6, 1), ).setIndexNames((0, "DLINK-3100-DHCPCL-MIB", "rlDhcpApprovalActionIfIndex"), (0, "DLINK-3100-DHCPCL-MIB", "rlDhcpApprovalActionAddress"), (0, "DLINK-3100-DHCPCL-MIB", "rlDhcpApprovalActionMask"))
if mibBuilder.loadTexts: rlDhcpApprovalActionEntry.setStatus('current')
if mibBuilder.loadTexts: rlDhcpApprovalActionEntry.setDescription('An entry in rlDhcpApprovalActionTable.')
rlDhcpApprovalActionIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 76, 6, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDhcpApprovalActionIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlDhcpApprovalActionIfIndex.setDescription('IP interface ifIndex.')
rlDhcpApprovalActionAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 76, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDhcpApprovalActionAddress.setStatus('current')
if mibBuilder.loadTexts: rlDhcpApprovalActionAddress.setDescription('IP Address.')
rlDhcpApprovalActionMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 76, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDhcpApprovalActionMask.setStatus('current')
if mibBuilder.loadTexts: rlDhcpApprovalActionMask.setDescription('IP Address mask.')
rlDhcpApprovalActionApprove = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 76, 6, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDhcpApprovalActionApprove.setStatus('current')
if mibBuilder.loadTexts: rlDhcpApprovalActionApprove.setDescription('Approve or decline ip address.')
rlDhcpClCommandTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 76, 7), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDhcpClCommandTable.setStatus('current')
if mibBuilder.loadTexts: rlDhcpClCommandTable.setDescription('Action MIB for DHCP Renew command.')
rlDhcpClCommandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 76, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rlDhcpClCommandEntry.setStatus('current')
if mibBuilder.loadTexts: rlDhcpClCommandEntry.setDescription('The row definition for this table.')
rlDhcpClCommandAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 76, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("renew", 1), ("renewForceAutoconfig", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDhcpClCommandAction.setStatus('current')
if mibBuilder.loadTexts: rlDhcpClCommandAction.setDescription('Action to apply. When the field is renew_force_autoconfig the meaning is that every time when DHCP option 67 is received, the configuration is downloaded from DHCP server. The default value is false.')
rlDhcpClConfigurationFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 76, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDhcpClConfigurationFileName.setStatus('current')
if mibBuilder.loadTexts: rlDhcpClConfigurationFileName.setDescription('The configuration file name that loaded into the device. The filename is a relative path on the TFTP server, without the server IP address.')
rlDhcpClOption67Enable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 76, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDhcpClOption67Enable.setStatus('current')
if mibBuilder.loadTexts: rlDhcpClOption67Enable.setDescription('Defines whether the configuration file can be downloaded from DHCP packet option 67.')
mibBuilder.exportSymbols("DLINK-3100-DHCPCL-MIB", rlDhcpApprovalActionIfIndex=rlDhcpApprovalActionIfIndex, rlDhcpClActionHostName=rlDhcpClActionHostName, rlDhcpApprovalActionApprove=rlDhcpApprovalActionApprove, rlDhcpApprovalWaitingMask=rlDhcpApprovalWaitingMask, rlDhcpApprovalActionEntry=rlDhcpApprovalActionEntry, rlDhcpApprovalActionTable=rlDhcpApprovalActionTable, rlDhcpClActionTable=rlDhcpClActionTable, rlDhcpApprovalWaitingAddress=rlDhcpApprovalWaitingAddress, rlDhcpClConfigurationFileName=rlDhcpClConfigurationFileName, rlDhcpClActionStatus=rlDhcpClActionStatus, rlDhcpApprovalWaitingGateway=rlDhcpApprovalWaitingGateway, rlDhcpClOption67Enable=rlDhcpClOption67Enable, rlDhcpApprovalActionMask=rlDhcpApprovalActionMask, rlDhcpApprovalWaitingEntry=rlDhcpApprovalWaitingEntry, rlDhcpApprovalActionAddress=rlDhcpApprovalActionAddress, rlDhcpClCommandAction=rlDhcpClCommandAction, rlDhcpApprovalWaitingIfIndex=rlDhcpApprovalWaitingIfIndex, rlDhcpApprovalWaitingTable=rlDhcpApprovalWaitingTable, rlDhcpClCommandEntry=rlDhcpClCommandEntry, rlDhcpClActionEntry=rlDhcpClActionEntry, rlDhcpCl=rlDhcpCl, rlDhcpApprovalEnabled=rlDhcpApprovalEnabled, PYSNMP_MODULE_ID=rlDhcpCl, rlDhcpClCommandTable=rlDhcpClCommandTable, rlDhcpClActionIfIndex=rlDhcpClActionIfIndex)
