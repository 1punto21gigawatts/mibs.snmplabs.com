#
# PySNMP MIB module WG302-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WG302-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:36:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter64, NotificationType, iso, Bits, Integer32, IpAddress, Unsigned32, ObjectIdentity, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Gauge32, ModuleIdentity, MibIdentifier, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "NotificationType", "iso", "Bits", "Integer32", "IpAddress", "Unsigned32", "ObjectIdentity", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Gauge32", "ModuleIdentity", "MibIdentifier", "TimeTicks")
TextualConvention, DisplayString, MacAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress", "TruthValue")
accesspoint = ModuleIdentity((1, 3, 6, 1, 4, 1, 4526, 4, 2))
if mibBuilder.loadTexts: accesspoint.setLastUpdated('200411030003Z')
if mibBuilder.loadTexts: accesspoint.setOrganization('NETGEAR Inc.')
if mibBuilder.loadTexts: accesspoint.setContactInfo('4500 Great America Parkway Santa Clara, California 95054 Phone: (408) 907-8000 Fax: (408) 907-8097 Web Site: http://www.netgear.com')
if mibBuilder.loadTexts: accesspoint.setDescription('The MIB module for 802.11g ProSafe Wireless Access Point entities. iso(1).org(3).dod(6).internet(1).private(4). enterprises(1).netgear(4526).wireless(4).accesspoint(2)')
netgear = MibIdentifier((1, 3, 6, 1, 4, 1, 4526))
wireless = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4))
lanSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 2, 1))
apName = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apName.setStatus('current')
if mibBuilder.loadTexts: apName.setDescription('The field indicates the name of AP.')
adminName = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: adminName.setStatus('current')
if mibBuilder.loadTexts: adminName.setDescription('The field indicates the administrator name.')
adminPasswd = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: adminPasswd.setStatus('current')
if mibBuilder.loadTexts: adminPasswd.setDescription('The field indicates the administrator password. The AP can be managed in such way as utility,telnet and so on.')
dhcpStatus = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("static", 0), ("dhcpclient", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpStatus.setDescription('This attribute shall indicate whether dhcp client status.')
ipAddr = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAddr.setStatus('current')
if mibBuilder.loadTexts: ipAddr.setDescription('The field indicates the IP address of AP on the wireless interface,when worked in router or router/bridge mode. Ethernet and wireless interface share the same IP address, when worked in bridge mode. ')
netmaskAddr = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netmaskAddr.setStatus('current')
if mibBuilder.loadTexts: netmaskAddr.setDescription('The field indicates the netmask of AP on the wireless interface,when worked in router or router/bridge mode. Ethernet and wireless interface share the same netmask address,when worked in bridge mode. ')
gatewayAddr = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayAddr.setStatus('current')
if mibBuilder.loadTexts: gatewayAddr.setDescription('The field indicates the gateway of AP on the wireless interface,when worked in router or router/bridge mode. Ethernet and wireless interface share the same gateway address,when worked in bridge mode. ')
spantree = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spantree.setStatus('current')
if mibBuilder.loadTexts: spantree.setDescription('This attribute shall indicate spanning tree.')
pridnsipAddr = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pridnsipAddr.setStatus('current')
if mibBuilder.loadTexts: pridnsipAddr.setDescription('This attributes shall indicates the IP address of the primary DNS server. ***The value can only be set to an IP address in dot format.')
snddnsipAddr = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snddnsipAddr.setStatus('current')
if mibBuilder.loadTexts: snddnsipAddr.setDescription('This attributes shall indicates the IP address of the secondary DNS server. ***The value can only be set to an IP address in dot format.')
wlanSettingTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 2, 2), )
if mibBuilder.loadTexts: wlanSettingTable.setStatus('current')
if mibBuilder.loadTexts: wlanSettingTable.setDescription('wlanSettingsallow for multiple instances on an agent.')
wlanSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: wlanSettingEntry.setStatus('current')
if mibBuilder.loadTexts: wlanSettingEntry.setDescription('An entry in the wlanSettingTable. It is possible for there to be multiple AP interfaces on one agent, each with its unique MAC address. The relationship between an AP interface and an interface in the context of the Internet-standard MIB is one-to-one. As such, the value of an ifIndex object instance can be directly used to identify corresponding instances of the objects defined herein. ')
operatemode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("auto", 0), ("dot11b", 2), ("dot11g", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: operatemode.setStatus('current')
if mibBuilder.loadTexts: operatemode.setDescription('This attribute shall indicate the desired wireless operating mode. The option are: auto - Both 802.11g and 802.11b wireless stations can be used. dot11b - All 802.11b wireless stations can be used. 802.11g wireless stations can still be used if they can operate in 802.11b mode. dot11g - Only 802.11g wireless stations can be used.')
ssid = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssid.setStatus('current')
if mibBuilder.loadTexts: ssid.setDescription("This attribute shall indicate SSID.Its length can't be large than 33 .")
countrycode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(410, 36, 124, 208, 40, 246, 250, 276, 372, 380, 392, 484, 528, 554, 578, 630, 340, 724, 752, 756, 826, 840))).clone(namedValues=NamedValues(("asia", 410), ("australia", 36), ("canada", 124), ("denmark", 208), ("europe", 40), ("finland", 246), ("france", 250), ("germany", 276), ("ireland", 372), ("italy", 380), ("japan", 392), ("mexico", 484), ("netherlands", 528), ("newzealand", 554), ("norway", 578), ("puertorico", 630), ("southamerica", 340), ("spain", 724), ("sweden", 752), ("switzerland", 756), ("unitedkingdom", 826), ("unitedstates", 840)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: countrycode.setStatus('current')
if mibBuilder.loadTexts: countrycode.setDescription('This attribute shall indicate the region of operation for which which the wireless interface is inted. =410: asia =36: australia =124: canada =208: denmark =40: europe =246: finland =250: france =276: germany =372: ireland =380: italy =392: japan =484: mexico =528: netherlands =554: new zealand =578: norway =630: puerto rico =756: switzerland =340: south america =724: spain =752: sweden =826: unitedKingdom =840: usa')
channel = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: channel.setStatus('current')
if mibBuilder.loadTexts: channel.setDescription('This attribute shall indicate the channel number to use on your Wireless LAN. 1: CH01 2412MHz 2: CH02 2417MHz 3: CH03 2422MHz 4: CH04 2427MHz 5: CH05 2432MHz 6: CH06 2437MHz 7: CH07 2442MHz 8: CH08 2447MHz 9: CH09 2452MHz 10: CH10 2457MHz 11: CH11 2462MHz 12: CH12 2467MHz 13: CH13 2472MHz 14: CH14 2484MHz The default value is 11.')
datarate = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: datarate.setStatus('current')
if mibBuilder.loadTexts: datarate.setDescription('This attribute shall indicate the transmite rate. When operatemode is auto(0) can set to 0:best,1:1Mb/s,2:2Mb/s, 5.5:5.5Mb/s,11:11 Mb/s, 6:6Mb/s,9: 9Mb/s,12:12Mb/s,18:8Mb/s,24:24Mb/s 36:36Mb/s,48:48Mb/s,54:54Mb/s . When operatemode is dot11b(2) can set to 0:best,1:1Mb/s,2:2Mb/s,5.5:5.5Mb/s,11:11 Mb/s. When operatemode is dot11g(3) can set to 0:best,6:6Mb/s,9:9Mb/s,12:12Mb/s,18:18Mb/s,24:24Mb/s 36:36Mb/s,48:48Mb/s,54:54Mb/s,108:108Mb/s. ')
beaconinterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: beaconinterval.setStatus('current')
if mibBuilder.loadTexts: beaconinterval.setDescription('This attribute shall indicate the Beacon Interval.')
rtsthreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2346))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsthreshold.setStatus('current')
if mibBuilder.loadTexts: rtsthreshold.setDescription('This attribute shall indicate the RTS threshold.')
fraglength = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 2346))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fraglength.setStatus('current')
if mibBuilder.loadTexts: fraglength.setDescription('This attribute shall indicate the fragmentation threshold.')
dtiminterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtiminterval.setStatus('current')
if mibBuilder.loadTexts: dtiminterval.setDescription('This attribute shall indicate the DTIM period.')
preambletype = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("long", 0), ("auto", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: preambletype.setStatus('current')
if mibBuilder.loadTexts: preambletype.setDescription('This attribute shall indicate the preamble setting.')
hidenetworkname = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 2, 2, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hidenetworkname.setStatus('current')
if mibBuilder.loadTexts: hidenetworkname.setDescription('This attribute shall indicate whether broadcast wireless network Name (SSID).')
txpower = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("full", 0), ("half", 1), ("quarter", 2), ("eighth", 3), ("min", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txpower.setStatus('current')
if mibBuilder.loadTexts: txpower.setDescription('This attribute shall indicate the tranmiste power.')
superG = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 2, 2, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: superG.setStatus('current')
if mibBuilder.loadTexts: superG.setDescription('This attribute shall indicate whether super-G.')
antenna = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("auto", 0), ("primary", 1), ("secondary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: antenna.setStatus('current')
if mibBuilder.loadTexts: antenna.setDescription('This attribute shall indicate the tranmiste power.')
securityTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 2, 3), )
if mibBuilder.loadTexts: securityTable.setStatus('current')
if mibBuilder.loadTexts: securityTable.setDescription('Security attributes. In tablular form to allow for multiple instances on an agent.')
securityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: securityEntry.setStatus('current')
if mibBuilder.loadTexts: securityEntry.setDescription('An entry in the securityTable. It is possible for there to be multiple AP interfaces on one agent, each with its unique MAC address. The relationship between an AP interface and an interface in the context of the Internet-standard MIB is one-to-one. As such, the value of an ifIndex object instance can be directly used to identify corresponding instances of the objects defined herein. ')
authenticationtype = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("open", 0), ("shared", 1), ("legacy802dot1x", 2), ("wpa", 3), ("wpapsk", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authenticationtype.setStatus('current')
if mibBuilder.loadTexts: authenticationtype.setDescription('The field indicates how to authenticate the station.')
encryption = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("wep", 1), ("tkip", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: encryption.setStatus('current')
if mibBuilder.loadTexts: encryption.setDescription('The field indicates how to encryption the station.')
encryptionstrength = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 40, 104, 128))).clone(namedValues=NamedValues(("none", 0), ("wep64", 40), ("wep128", 104), ("wep152", 128)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: encryptionstrength.setStatus('current')
if mibBuilder.loadTexts: encryptionstrength.setDescription('The field indicates the key length of default keys.')
keyno = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: keyno.setStatus('current')
if mibBuilder.loadTexts: keyno.setDescription('The field indicates the number of default wep key.')
key1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 2, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: key1.setStatus('current')
if mibBuilder.loadTexts: key1.setDescription('The field indicates the key value of the first default wep key.')
key2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 2, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: key2.setStatus('current')
if mibBuilder.loadTexts: key2.setDescription('The field indicates the key value of the second default wep key.')
key3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 2, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: key3.setStatus('current')
if mibBuilder.loadTexts: key3.setDescription('The field indicates the key value of the third default wep key.')
key4 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 2, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: key4.setStatus('current')
if mibBuilder.loadTexts: key4.setDescription('The field indicates the key value of the fourth default wep key.')
wlanseparator = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 2, 3, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanseparator.setStatus('current')
if mibBuilder.loadTexts: wlanseparator.setDescription('This attribute shall indicate whether enable No see.')
presharekey = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 2, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: presharekey.setStatus('current')
if mibBuilder.loadTexts: presharekey.setDescription('This attribute shall indicate preshare key.')
remoteSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 2, 4))
sshd = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 4, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshd.setStatus('current')
if mibBuilder.loadTexts: sshd.setDescription('This attribute shall indicate whether enable sshd.')
snmpenable = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 4, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpenable.setStatus('current')
if mibBuilder.loadTexts: snmpenable.setDescription('This attribute shall indicate whether enable snmp.')
trapServerIP = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 4, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServerIP.setStatus('current')
if mibBuilder.loadTexts: trapServerIP.setDescription('The field indicates the trap server IP address. ***The value can only be set to a IP address in dot format.')
readOnlyCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: readOnlyCommunity.setStatus('current')
if mibBuilder.loadTexts: readOnlyCommunity.setDescription('The field indicates the read only community name. ***The value can only be set to 1 to 32 readable string.')
readWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: readWriteCommunity.setStatus('current')
if mibBuilder.loadTexts: readWriteCommunity.setDescription('The field indicates the read write community name. ***The value can only be set to 1 to 32 readable string.')
statistic = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 2, 5))
wiredethernetstat = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 2, 5, 1))
lanrecvpacket = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanrecvpacket.setStatus('current')
if mibBuilder.loadTexts: lanrecvpacket.setDescription('the field indicates the sum of received packets.')
lantranspacket = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lantranspacket.setStatus('current')
if mibBuilder.loadTexts: lantranspacket.setDescription('the field indicates the sum of transmitted packets.')
lanrecvbytes = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanrecvbytes.setStatus('current')
if mibBuilder.loadTexts: lanrecvbytes.setDescription('the field indicates the sum of received bytes.')
lantransbytes = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lantransbytes.setStatus('current')
if mibBuilder.loadTexts: lantransbytes.setDescription('the field indicates the sum of transmitted bytes.')
wirelessstat = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 2, 5, 2))
wlanrecvunicastpacket = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 5, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanrecvunicastpacket.setStatus('current')
if mibBuilder.loadTexts: wlanrecvunicastpacket.setDescription('the field indicates the sum of received unicast packets.')
wlantransunicastpacket = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 5, 2, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlantransunicastpacket.setStatus('current')
if mibBuilder.loadTexts: wlantransunicastpacket.setDescription('the field indicates the sum of transmitted unicast packets.')
wlanrecvbroadcastpacket = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 5, 2, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanrecvbroadcastpacket.setStatus('current')
if mibBuilder.loadTexts: wlanrecvbroadcastpacket.setDescription('the field indicates the sum of received broadcast packets.')
wlantransbroadcastpacket = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 5, 2, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlantransbroadcastpacket.setStatus('current')
if mibBuilder.loadTexts: wlantransbroadcastpacket.setDescription('the field indicates the sum of transmitted broadcast packets.')
wlanrecvmulticastpacket = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 5, 2, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanrecvmulticastpacket.setStatus('current')
if mibBuilder.loadTexts: wlanrecvmulticastpacket.setDescription('the field indicates the sum of received multicast packets.')
wlantransmulticastpacket = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 5, 2, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlantransmulticastpacket.setStatus('current')
if mibBuilder.loadTexts: wlantransmulticastpacket.setDescription('the field indicates the sum of transmitted multicast packets.')
wlanrecvpacket = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 5, 2, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanrecvpacket.setStatus('current')
if mibBuilder.loadTexts: wlanrecvpacket.setDescription('the field indicates the sum of received packets.')
wlantranspacket = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 5, 2, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlantranspacket.setStatus('current')
if mibBuilder.loadTexts: wlantranspacket.setDescription('the field indicates the sum of transmitted packets.')
wlanrecvbytes = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 5, 2, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanrecvbytes.setStatus('current')
if mibBuilder.loadTexts: wlanrecvbytes.setDescription('the field indicates the sum of received bytes.')
wlantransbytes = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 5, 2, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlantransbytes.setStatus('current')
if mibBuilder.loadTexts: wlantransbytes.setDescription('the field indicates the sum of transmitted bytes.')
stationnumber = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 5, 2, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationnumber.setStatus('current')
if mibBuilder.loadTexts: stationnumber.setDescription('This attribute shall indicate the stations count.')
stationListTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 2, 6), )
if mibBuilder.loadTexts: stationListTable.setStatus('current')
if mibBuilder.loadTexts: stationListTable.setDescription('stationList Table show multiple instances on an agent.')
stationListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 2, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: stationListEntry.setStatus('current')
if mibBuilder.loadTexts: stationListEntry.setDescription('stationlist Entry show the connected station status ')
macaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 2, 6, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macaddress.setStatus('current')
if mibBuilder.loadTexts: macaddress.setDescription('This attribute shall indicate MAC address of the associated stationID.')
ipaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 2, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddr.setStatus('current')
if mibBuilder.loadTexts: ipaddr.setDescription('This attribute shall indicate Ip address of the associated stationID.')
stationstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("authenticating", 1), ("authenticated", 2), ("associating", 3), ("associated", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationstatus.setStatus('current')
if mibBuilder.loadTexts: stationstatus.setDescription('This attribute shall indicate the status of station.')
operationapmode = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 2, 7))
apmode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ap", 0), ("ptp", 2), ("ptp-ap", 3), ("pxp", 4), ("pxp-ap", 5), ("repeater", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apmode.setStatus('current')
if mibBuilder.loadTexts: apmode.setDescription('This a command field for conntrol AP operation mode. ')
ptpremotemacaddress = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 7, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ptpremotemacaddress.setStatus('current')
if mibBuilder.loadTexts: ptpremotemacaddress.setDescription('This attribute shall indicate the stationID.')
pxpremotemacaddress1 = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 7, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pxpremotemacaddress1.setStatus('current')
if mibBuilder.loadTexts: pxpremotemacaddress1.setDescription('This attribute shall indicate the stationID.')
pxpremotemacaddress2 = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 7, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pxpremotemacaddress2.setStatus('current')
if mibBuilder.loadTexts: pxpremotemacaddress2.setDescription('This attribute shall indicate the stationID.')
pxpremotemacaddress3 = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 7, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pxpremotemacaddress3.setStatus('current')
if mibBuilder.loadTexts: pxpremotemacaddress3.setDescription('This attribute shall indicate the stationID.')
pxpremotemacaddress4 = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 7, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pxpremotemacaddress4.setStatus('current')
if mibBuilder.loadTexts: pxpremotemacaddress4.setDescription('This attribute shall indicate the stationID.')
repremotemacaddress1 = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 7, 7), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repremotemacaddress1.setStatus('current')
if mibBuilder.loadTexts: repremotemacaddress1.setDescription('This attribute shall indicate the stationID.')
repremotemacaddress2 = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 7, 8), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repremotemacaddress2.setStatus('current')
if mibBuilder.loadTexts: repremotemacaddress2.setDescription('This attribute shall indicate the stationID.')
repremotemacaddress3 = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 7, 9), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repremotemacaddress3.setStatus('current')
if mibBuilder.loadTexts: repremotemacaddress3.setDescription('This attribute shall indicate the stationID.')
repremotemacaddress4 = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 7, 10), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repremotemacaddress4.setStatus('current')
if mibBuilder.loadTexts: repremotemacaddress4.setDescription('This attribute shall indicate the stationID.')
info802dot1x = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 2, 8))
authinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 2, 8, 1))
priradipaddr = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 8, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priradipaddr.setStatus('current')
if mibBuilder.loadTexts: priradipaddr.setDescription('Internet address of the Primary Radius Server.')
priradport = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 8, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priradport.setStatus('current')
if mibBuilder.loadTexts: priradport.setDescription('Port number used for authentication at the Primary Radius Server.')
priradsharedsecret = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priradsharedsecret.setStatus('current')
if mibBuilder.loadTexts: priradsharedsecret.setDescription('Secret shared between NAS and the Primary Radius Server.')
sndradipaddr = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 8, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sndradipaddr.setStatus('current')
if mibBuilder.loadTexts: sndradipaddr.setDescription('Internet address of the Second Radius Server.')
sndradport = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 8, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sndradport.setStatus('current')
if mibBuilder.loadTexts: sndradport.setDescription('Port number used for authentication at the Second Radius Server.')
sndradsharedsecret = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 8, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sndradsharedsecret.setStatus('current')
if mibBuilder.loadTexts: sndradsharedsecret.setDescription('Secret shared between NAS and the Second Radius Server.')
reauthtime = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 8, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reauthtime.setStatus('current')
if mibBuilder.loadTexts: reauthtime.setDescription('Current Login Status.')
accntinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 2, 8, 2))
priacntipaddr = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 8, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priacntipaddr.setStatus('current')
if mibBuilder.loadTexts: priacntipaddr.setDescription('IP address of the Primary radius account server.')
priacntport = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 8, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priacntport.setStatus('current')
if mibBuilder.loadTexts: priacntport.setDescription('port number of the Primary radius account server.')
priacntsharedsecret = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 8, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priacntsharedsecret.setStatus('current')
if mibBuilder.loadTexts: priacntsharedsecret.setDescription('password used by the ap to connect to the Primary radius account serve.')
sndacntipaddr = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 8, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sndacntipaddr.setStatus('current')
if mibBuilder.loadTexts: sndacntipaddr.setDescription('IP address of the Second radius account server.')
sndacntport = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 8, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sndacntport.setStatus('current')
if mibBuilder.loadTexts: sndacntport.setDescription('port number of the Second radius account server.')
sndacntsharedsecret = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 8, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sndacntsharedsecret.setStatus('current')
if mibBuilder.loadTexts: sndacntsharedsecret.setDescription('password used by the ap to connect to the Second radius account server.')
userCommand = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 2, 9))
resetAP = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 9, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetAP.setStatus('current')
if mibBuilder.loadTexts: resetAP.setDescription('This a command field for conntrol AP action. Write any value to reset the AP.')
setWirelessstatus = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 9, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWirelessstatus.setStatus('current')
if mibBuilder.loadTexts: setWirelessstatus.setDescription("This a command field for conntrol AP's wireless card action. 0: enable wireless card 1: disable wireless card")
timeSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 2, 10))
currenttime = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 10, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currenttime.setStatus('current')
if mibBuilder.loadTexts: currenttime.setDescription('This attributes shall indicates the current system time in a format: YYYY/MM/DD hh:mm:ss.')
timezone = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74))).clone(namedValues=NamedValues(("gmtwest12-international-date-line-west", 0), ("gmtwest11-midway-island-samoa", 1), ("gmtwest10-hawaii", 2), ("gmtwest09-alaska", 3), ("gmtwest08-pacific-time-us-canada-tijuana", 4), ("gmtwest07-arizona", 5), ("gmtwest07-chihuahua-la-paz-mazatlan", 6), ("gmtwest07-mountain-time-us-canada", 7), ("gmtwest06-central-america", 8), ("gmtwest06-central-time-us-canada", 9), ("gmtwest06-guadalajara-mexico-city-monterrey", 10), ("gmtwest06-saskatchewan", 11), ("gmtwest05-bogota-lima-quito", 12), ("gmtwest05-eastern-time-us-canada", 13), ("gmtwest05-indiana-east", 14), ("gmtwest04-atlantic-Time-canada", 15), ("gmtwest04-caracas-la-paz", 16), ("gmtwest04-santiago", 17), ("gmtwest03-30-newfoundland", 18), ("gmtwest03-brasilia", 19), ("gmtwest03-buenos-aires-georgetown", 20), ("gmtwest03-greenland", 21), ("gmtwest02-mid-atlantic", 22), ("gmtwest01-azores", 23), ("gmtwest01-cape-verde-is", 24), ("gmt00-casablanca-monrovia", 25), ("gmt00-greenwich-mean-time-dublin-edinburgh-lisbon-London", 26), ("gmteast01-amsterdam-berlin-bern-rome-stockholm-vienna", 27), ("gmteast01-belgrade-bratislava-budapest-ljubljana-prague", 28), ("gmteast01-brussels-copenhagen-madrid-paris", 29), ("gmteast01-sarajevo-skopje-warsaw-zagreb", 30), ("gmteast01-west-central-africa", 31), ("gmteast02-athens-istanbul-minsk", 32), ("gmteast02-bucharest", 33), ("gmteast02-cairo", 34), ("gmteast02-harare-pretoria", 35), ("gmteast02-helsinki-kyiv-riga-sofia-tallinn-vilnius", 36), ("gmteast02-jerusalem", 37), ("gmteast03-baghdad", 38), ("gmteast03-kuwait-riyadh", 39), ("gmteast03-moscow-st-petersburg-volgograd", 40), ("gmteast03-nairobi", 41), ("gmteast03-tehran", 42), ("gmteast04-abu-dhabi-muscat", 43), ("gmteast04-baku-tbilisi-yerevan", 44), ("gmteast04-kabul", 45), ("gmteast05-ekaterinburg", 46), ("gmteast05-islamabad-karachi-kashkent", 47), ("gmteast05-chennai-kolkata-mumbai-new-delhi", 48), ("gmteast05-kathmandu", 49), ("gmteast06-almaty-novosibirsk", 50), ("gmteast06-astana-dhaka", 51), ("gmteast06-sri-jayawardenepura", 52), ("gmteast06-rangoon", 53), ("gmteast07-bangkok-hanoi-jakarta", 54), ("gmteast07-krasnoyarsk", 55), ("gmteast08-beijing-chongqing-hong-kong-urumqi", 56), ("gmteast08-irkutsk-ulaan-bataar", 57), ("gmteast08-kuala-lumpur-singapore", 58), ("gmteast08-perth", 59), ("gmteast08-taipei", 60), ("gmteast09-osaka-sapporo-tokyo", 61), ("gmteast09-seoul", 62), ("gmteast09-yakutsk", 63), ("gmteast09-adelaide", 64), ("gmteast09-darwin", 65), ("gmteast10-brisbane", 66), ("gmteast10-canberra-melbourne-sydney", 67), ("gmteast10-guam-port-moresby", 68), ("gmteast10-hobart", 69), ("gmteast10-vladivostok", 70), ("gmteast11-magadan-solomon-is-new-caledonia", 71), ("gmteast12-auckland-wellington", 72), ("gmteast12-fiji-kamchatka-marshall-is", 73), ("gmteast13-nuku-alofa", 74)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timezone.setStatus('current')
if mibBuilder.loadTexts: timezone.setDescription('This attribute shall indicate the timezone of the system.')
daylightsaving = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 10, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daylightsaving.setStatus('current')
if mibBuilder.loadTexts: daylightsaving.setDescription('This attribute shall indicate the Daylight Saving time.')
dhcpsSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 2, 11))
dhcpserver = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 11, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpserver.setStatus('current')
if mibBuilder.loadTexts: dhcpserver.setDescription('This attribute shall indicate whether DHCP server is enable or disable.')
dhcpsipstart = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 11, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpsipstart.setStatus('current')
if mibBuilder.loadTexts: dhcpsipstart.setDescription('This attribute indicates the starting IP address of DHCP server will give. ***The value can only be set to a IP address in dot format.')
dhcpsipend = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 11, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpsipend.setStatus('current')
if mibBuilder.loadTexts: dhcpsipend.setDescription('This attribute indicates the ending IP address of DHCP server will give. ***The value can only be set to a IP address in dot format.')
dhcpnetmask = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 11, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpnetmask.setStatus('current')
if mibBuilder.loadTexts: dhcpnetmask.setDescription('This attribute indicates the net mask of DHCP server will give. ***The value can only be set to the net mask address in dot format.')
dhcpsgateway = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 11, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpsgateway.setStatus('current')
if mibBuilder.loadTexts: dhcpsgateway.setDescription('This attribute indicates the gateway IP address of DHCP server will give. ***The value can only be set to a IP address in dot format.')
dhcpspridns = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 11, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpspridns.setStatus('current')
if mibBuilder.loadTexts: dhcpspridns.setDescription('This attribute indicates the primary DNS IP address of DHCP server will give. ***The value can only be set to a IP address in dot format.')
dhcpspsnddns = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 11, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpspsnddns.setStatus('current')
if mibBuilder.loadTexts: dhcpspsnddns.setDescription('This attribute indicates the secondary DNS IP address of DHCP server will give. ***The value can only be set to a IP address in dot format.')
dhcpspriwins = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 11, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpspriwins.setStatus('current')
if mibBuilder.loadTexts: dhcpspriwins.setDescription('This attribute indicates the primary WINS IP address of DHCP server will give. ***The value can only be set to a IP address in dot format.')
dhcpspsndwins = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 11, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpspsndwins.setStatus('current')
if mibBuilder.loadTexts: dhcpspsndwins.setDescription('This attribute indicates the secondary WINS IP address of DHCP server will give. ***The value can only be set to a IP address in dot format.')
dhcpsleasetime = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 11, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 44640))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpsleasetime.setStatus('current')
if mibBuilder.loadTexts: dhcpsleasetime.setDescription('This attribute shall indicate the IP lease time of DHCP server will give to DHCP clients in minutes')
anyip = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 11, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anyip.setStatus('current')
if mibBuilder.loadTexts: anyip.setDescription('This attribute shall indicate whether AnyIP function is enable or disable.')
logSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 2, 12))
syslog = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 12, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslog.setStatus('current')
if mibBuilder.loadTexts: syslog.setDescription('This attribute shall indicate whether syslog is enable or disable.')
syslogsrvip = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 12, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogsrvip.setStatus('current')
if mibBuilder.loadTexts: syslogsrvip.setDescription('This attributes shall indicates the IP address of the syslog server. ***The value can only be set to a IP address in dot format.')
syslogsrvport = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 2, 12, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogsrvport.setStatus('current')
if mibBuilder.loadTexts: syslogsrvport.setDescription('This attributes shall indicates the Port of the Syslog server. *** The value can only be set to a port in dot format.')
mibBuilder.exportSymbols("WG302-MIB", dhcpsipstart=dhcpsipstart, repremotemacaddress4=repremotemacaddress4, pxpremotemacaddress2=pxpremotemacaddress2, dhcpserver=dhcpserver, repremotemacaddress1=repremotemacaddress1, timeSettings=timeSettings, syslog=syslog, gatewayAddr=gatewayAddr, securityTable=securityTable, pridnsipAddr=pridnsipAddr, resetAP=resetAP, dhcpspriwins=dhcpspriwins, wlanSettingEntry=wlanSettingEntry, wireless=wireless, stationnumber=stationnumber, apmode=apmode, channel=channel, authinfo=authinfo, hidenetworkname=hidenetworkname, timezone=timezone, lanrecvbytes=lanrecvbytes, operatemode=operatemode, ssid=ssid, wlantranspacket=wlantranspacket, keyno=keyno, syslogsrvip=syslogsrvip, rtsthreshold=rtsthreshold, dhcpspridns=dhcpspridns, netgear=netgear, priacntport=priacntport, lanSettings=lanSettings, wlanrecvunicastpacket=wlanrecvunicastpacket, lantransbytes=lantransbytes, sndacntport=sndacntport, priradsharedsecret=priradsharedsecret, anyip=anyip, key3=key3, countrycode=countrycode, dhcpnetmask=dhcpnetmask, pxpremotemacaddress1=pxpremotemacaddress1, stationstatus=stationstatus, priacntipaddr=priacntipaddr, wlanSettingTable=wlanSettingTable, sndradipaddr=sndradipaddr, sndradport=sndradport, repremotemacaddress2=repremotemacaddress2, priacntsharedsecret=priacntsharedsecret, daylightsaving=daylightsaving, ptpremotemacaddress=ptpremotemacaddress, key1=key1, wlanrecvpacket=wlanrecvpacket, wlanrecvbroadcastpacket=wlanrecvbroadcastpacket, dhcpsleasetime=dhcpsleasetime, wlantransunicastpacket=wlantransunicastpacket, encryptionstrength=encryptionstrength, lanrecvpacket=lanrecvpacket, dhcpspsndwins=dhcpspsndwins, dhcpsSettings=dhcpsSettings, dhcpsgateway=dhcpsgateway, setWirelessstatus=setWirelessstatus, pxpremotemacaddress4=pxpremotemacaddress4, snddnsipAddr=snddnsipAddr, dtiminterval=dtiminterval, logSettings=logSettings, dhcpspsnddns=dhcpspsnddns, wirelessstat=wirelessstat, accntinfo=accntinfo, ipAddr=ipAddr, spantree=spantree, key4=key4, sshd=sshd, datarate=datarate, wlanrecvmulticastpacket=wlanrecvmulticastpacket, PYSNMP_MODULE_ID=accesspoint, sndradsharedsecret=sndradsharedsecret, fraglength=fraglength, preambletype=preambletype, adminName=adminName, operationapmode=operationapmode, authenticationtype=authenticationtype, txpower=txpower, remoteSettings=remoteSettings, wlanseparator=wlanseparator, trapServerIP=trapServerIP, lantranspacket=lantranspacket, info802dot1x=info802dot1x, readOnlyCommunity=readOnlyCommunity, accesspoint=accesspoint, wlantransbytes=wlantransbytes, netmaskAddr=netmaskAddr, wlantransbroadcastpacket=wlantransbroadcastpacket, beaconinterval=beaconinterval, presharekey=presharekey, ipaddr=ipaddr, wlanrecvbytes=wlanrecvbytes, dhcpStatus=dhcpStatus, encryption=encryption, userCommand=userCommand, macaddress=macaddress, readWriteCommunity=readWriteCommunity, repremotemacaddress3=repremotemacaddress3, priradipaddr=priradipaddr, dhcpsipend=dhcpsipend, sndacntipaddr=sndacntipaddr, stationListEntry=stationListEntry, priradport=priradport, antenna=antenna, statistic=statistic, reauthtime=reauthtime, stationListTable=stationListTable, adminPasswd=adminPasswd, wlantransmulticastpacket=wlantransmulticastpacket, superG=superG, pxpremotemacaddress3=pxpremotemacaddress3, apName=apName, key2=key2, snmpenable=snmpenable, securityEntry=securityEntry, currenttime=currenttime, syslogsrvport=syslogsrvport, wiredethernetstat=wiredethernetstat, sndacntsharedsecret=sndacntsharedsecret)
