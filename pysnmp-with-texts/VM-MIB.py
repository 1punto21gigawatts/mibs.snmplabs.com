#
# PySNMP MIB module VM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:34:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, ModuleIdentity, NotificationType, Integer32, enterprises, iso, Bits, NotificationType, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, MibIdentifier, ObjectIdentity, Gauge32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ModuleIdentity", "NotificationType", "Integer32", "enterprises", "iso", "Bits", "NotificationType", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "MibIdentifier", "ObjectIdentity", "Gauge32", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
dell = MibIdentifier((1, 3, 6, 1, 4, 1, 674))
server = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10890))
drac2 = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10890, 5))
identification = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10890, 5, 1))
module = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2))
configAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10890, 5, 3))
configAlert = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10890, 5, 4))
configNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10890, 5, 5))
configModem = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10890, 5, 6))
control = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10890, 5, 7))
voltage = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10890, 5, 20))
temperature = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10890, 5, 21))
battery = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10890, 5, 25))
healthStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10890, 5, 26))
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10890, 5, 100))
idManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: idManufacturer.setDescription('The name of the manufacturer that produces this module.')
idProduct = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idProduct.setStatus('mandatory')
if mibBuilder.loadTexts: idProduct.setDescription('The name of the product that produces this module.')
idAgentRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idAgentRevMajor.setStatus('mandatory')
if mibBuilder.loadTexts: idAgentRevMajor.setDescription('The major revision level of the agent that implements this MIB.')
idAgentRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idAgentRevMinor.setStatus('mandatory')
if mibBuilder.loadTexts: idAgentRevMinor.setDescription('The minor revision level of the agent that implements this MIB.')
idMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idMibRevMajor.setStatus('mandatory')
if mibBuilder.loadTexts: idMibRevMajor.setDescription('The major revision level of this MIB. A change in the major revision level could mean a possible compatibility problem with older versions of the MIB.')
idMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idMibRevMinor.setStatus('mandatory')
if mibBuilder.loadTexts: idMibRevMinor.setDescription('The minor revision level of this MIB. A change in the minor revision level may represent some minor additional support, changes to documenta- tion or fixes to errors in a previous revision. Backward compatibility is maintained as long as the major revision level is the same.')
modNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modNumber.setStatus('mandatory')
if mibBuilder.loadTexts: modNumber.setDescription('The present number of rows in the module table.')
modTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2), )
if mibBuilder.loadTexts: modTable.setStatus('mandatory')
if mibBuilder.loadTexts: modTable.setDescription('Each row describes a module in the system that is supplying environmental data or supporting management via the SNMP agent. There may be only one row in this table, but there must be at least one row.')
modEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1), ).setIndexNames((0, "VM-MIB", "modIndex"))
if mibBuilder.loadTexts: modEntry.setStatus('mandatory')
modIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modIndex.setStatus('mandatory')
if mibBuilder.loadTexts: modIndex.setDescription('Index of the module entry.')
modFwRevMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modFwRevMajor.setStatus('mandatory')
if mibBuilder.loadTexts: modFwRevMajor.setDescription('This is the firmware major version.')
modFwRevMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modFwRevMinor.setStatus('mandatory')
if mibBuilder.loadTexts: modFwRevMinor.setDescription('This is the firmware minor version.')
modType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 0), ("dell-remote-assistant-card-v2-0", 1), ("motherboard", 2), ("processor", 3), ("chassis", 4), ("powerSupply", 5), ("diskDrive", 6), ("cdrom", 7), ("tapeDrive", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modType.setStatus('mandatory')
if mibBuilder.loadTexts: modType.setDescription('The type of this module.')
modFwRelDate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modFwRelDate.setStatus('mandatory')
if mibBuilder.loadTexts: modFwRelDate.setDescription('The release date of the firmware.')
modPciBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modPciBridge.setStatus('mandatory')
if mibBuilder.loadTexts: modPciBridge.setDescription('PCI bridge description.')
modNetworkCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modNetworkCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: modNetworkCtrl.setDescription('Network Controller information')
modPcmciaHost = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modPcmciaHost.setStatus('mandatory')
if mibBuilder.loadTexts: modPcmciaHost.setDescription('Describes the PCMCIA host controller.')
modPcCardMfgr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modPcCardMfgr.setStatus('mandatory')
if mibBuilder.loadTexts: modPcCardMfgr.setDescription('Describes the manufacturer of the PC Card.')
modPcCardName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modPcCardName.setStatus('mandatory')
if mibBuilder.loadTexts: modPcCardName.setDescription('The name of the PC Card.')
modBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modBattery.setStatus('mandatory')
if mibBuilder.loadTexts: modBattery.setDescription('The battery description.')
modVoltCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modVoltCount.setStatus('mandatory')
if mibBuilder.loadTexts: modVoltCount.setDescription('Total number of volatges to monitor.')
modTempCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modTempCount.setStatus('mandatory')
if mibBuilder.loadTexts: modTempCount.setDescription('Total number of temparature zone to monitor.')
modFanCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modFanCount.setStatus('mandatory')
if mibBuilder.loadTexts: modFanCount.setDescription('Total number of fans to monitor.')
modSwitchCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modSwitchCount.setStatus('mandatory')
if mibBuilder.loadTexts: modSwitchCount.setDescription('Total number of switch inputs associated with this module.')
modFaultCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modFaultCount.setStatus('mandatory')
if mibBuilder.loadTexts: modFaultCount.setDescription('Total number of fault inputs associated with this module.')
modUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: modUpTime.setDescription('Length of time since last system power-up or last time the system was reset (whichever is most recent). This up-time is relative only to the module itself.')
modStartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modStartDelay.setStatus('mandatory')
if mibBuilder.loadTexts: modStartDelay.setDescription('Delay in minutes to look for auto reset.')
modRecoveryTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modRecoveryTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: modRecoveryTimeout.setDescription('Timeout for auto server recovery.')
modAutoRecoveryEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modAutoRecoveryEnable.setStatus('mandatory')
if mibBuilder.loadTexts: modAutoRecoveryEnable.setDescription('AutoRecovery enable / disable.')
modHeartBeatEnable = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modHeartBeatEnable.setStatus('mandatory')
if mibBuilder.loadTexts: modHeartBeatEnable.setDescription('Heartbeat enable / disable.')
modAccessControl = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modAccessControl.setStatus('mandatory')
if mibBuilder.loadTexts: modAccessControl.setDescription('The access control of the card.')
modEthernetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modEthernetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: modEthernetAddress.setDescription('This is the Ethernet address of the DRAC.')
cfgAdminNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAdminNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAdminNumber.setDescription('The present number of rows in the configuration table.')
cfgAdminTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 5, 3, 2), )
if mibBuilder.loadTexts: cfgAdminTable.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAdminTable.setDescription('This table contains configuration parameter information.')
cfgAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 5, 3, 2, 1), ).setIndexNames((0, "VM-MIB", "cfgAdminModIndex"), (0, "VM-MIB", "cfgAdminIndex"))
if mibBuilder.loadTexts: cfgAdminEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAdminEntry.setDescription('Each row contains parameters related to a configuration set.')
cfgAdminModIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAdminModIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAdminModIndex.setDescription('A link into the module table (modTable). This identifies which device this configuration set is associated with.')
cfgAdminIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAdminIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAdminIndex.setDescription('This column is used to identify a particular configuration set.')
cfgAdminAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgAdminAlias.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAdminAlias.setDescription('The log on alias of an administrator.')
cfgAdminPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 3, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgAdminPassword.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAdminPassword.setDescription('The log on password of an administrator.')
cfgAdminSessionCallback = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 3, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgAdminSessionCallback.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAdminSessionCallback.setDescription('The number to call back for a session request.')
cfgAdminPagerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 3, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgAdminPagerNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAdminPagerNumber.setDescription('The pager number to call for alert condition notification.')
cfgAdminPagerSubscriber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 3, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgAdminPagerSubscriber.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAdminPagerSubscriber.setDescription('The pager subscriber string for alpha-numeric paging.')
cfgAdminPagerType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("numeric", 1), ("alphanumeric", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgAdminPagerType.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAdminPagerType.setDescription('The paging mechanism, numeric or alpha-numeric .')
cfgAdminPagerMask = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 3, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgAdminPagerMask.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAdminPagerMask.setDescription('The pager mask. This describes the alert notification enable/disable for diffrent level of severity.')
cfgAdminCustomPagerCode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 3, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgAdminCustomPagerCode.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAdminCustomPagerCode.setDescription('The numeric/alpha-numeric code to be sent out in case of alert notification using pager.')
cfgAdminTestPager = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 3, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgAdminTestPager.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAdminTestPager.setDescription('This variable is to test the pager.')
cfgAlertNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 4, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAlertNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAlertNumber.setDescription('The present number of rows in the configuration table.')
cfgAlertTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 5, 4, 2), )
if mibBuilder.loadTexts: cfgAlertTable.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAlertTable.setDescription('This table contains configuration parameter information.')
cfgAlertEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 5, 4, 2, 1), ).setIndexNames((0, "VM-MIB", "cfgAlertModIndex"), (0, "VM-MIB", "cfgAlertIndex"))
if mibBuilder.loadTexts: cfgAlertEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAlertEntry.setDescription('Each row contains parameters related to a configuration set.')
cfgAlertModIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAlertModIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAlertModIndex.setDescription('A link into the module table (modTable). This identifies which device this configuration set is associated with.')
cfgAlertIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAlertIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAlertIndex.setDescription('This column is used to identify a particular configuration set.')
cfgAlertTrapSendIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgAlertTrapSendIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAlertTrapSendIPAddress.setDescription('The IP address of trap destination.')
cfgAlertTrapSendCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 4, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgAlertTrapSendCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAlertTrapSendCommunity.setDescription('The community name for sending trap.')
cfgAlertTrapCallBackNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgAlertTrapCallBackNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAlertTrapCallBackNumber.setDescription('The callback number in case of alert.')
cfgNetNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 5, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgNetNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cfgNetNumber.setDescription('The present number of rows in the configuration table.')
cfgNetTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 5, 5, 2), )
if mibBuilder.loadTexts: cfgNetTable.setStatus('mandatory')
if mibBuilder.loadTexts: cfgNetTable.setDescription('This table contains configuration parameter information.')
cfgNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 5, 5, 2, 1), ).setIndexNames((0, "VM-MIB", "cfgNetModIndex"), (0, "VM-MIB", "cfgNetIndex"))
if mibBuilder.loadTexts: cfgNetEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cfgNetEntry.setDescription('Each row contains parameters related to a configuration set.')
cfgNetModIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgNetModIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cfgNetModIndex.setDescription('A link into the module table (modTable). This identifies which device this configuration set is associated with.')
cfgNetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgNetIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cfgNetIndex.setDescription('This column is used to identify a particular configuration set.')
cfgNetIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgNetIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cfgNetIPAddress.setDescription('The Internet Protocol address of this network port.')
cfgNetSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 5, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgNetSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: cfgNetSubnetMask.setDescription('The Internet Protocol subnet mask of this network port.')
cfgNetGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 5, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgNetGateway.setStatus('mandatory')
if mibBuilder.loadTexts: cfgNetGateway.setDescription('The Internet Protocol address of the LAN gateway.')
cfgModemNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgModemNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cfgModemNumber.setDescription('The present number of rows in the configuration table.')
cfgModemTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 5, 6, 2), )
if mibBuilder.loadTexts: cfgModemTable.setStatus('mandatory')
if mibBuilder.loadTexts: cfgModemTable.setDescription('This table contains configuration parameter information.')
cfgModemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 5, 6, 2, 1), ).setIndexNames((0, "VM-MIB", "cfgModemModIndex"), (0, "VM-MIB", "cfgModemIndex"))
if mibBuilder.loadTexts: cfgModemEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cfgModemEntry.setDescription('Each row contains parameters related to a configuration set.')
cfgModemModIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgModemModIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cfgModemModIndex.setDescription('A link into the module table (modTable). This identifies which device this configuration set is associated with.')
cfgModemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgModemIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cfgModemIndex.setDescription('This column is used to identify a particular configuration set.')
cfgModemBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 6, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgModemBaudRate.setStatus('mandatory')
if mibBuilder.loadTexts: cfgModemBaudRate.setDescription('Baud rate.')
cfgModemDialMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 6, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgModemDialMode.setStatus('mandatory')
if mibBuilder.loadTexts: cfgModemDialMode.setDescription('Dial mode.')
cfgModemExtraInitString = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 6, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgModemExtraInitString.setStatus('mandatory')
if mibBuilder.loadTexts: cfgModemExtraInitString.setDescription('Extra initialization string.')
cfgModemPwrOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 6, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgModemPwrOnDelay.setStatus('mandatory')
if mibBuilder.loadTexts: cfgModemPwrOnDelay.setDescription('Power-on delay.')
cfgModemSignalDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 6, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgModemSignalDelay.setStatus('mandatory')
if mibBuilder.loadTexts: cfgModemSignalDelay.setDescription('Signal delay.')
cfgModemRingDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 6, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgModemRingDelay.setStatus('mandatory')
if mibBuilder.loadTexts: cfgModemRingDelay.setDescription('Ring delay.')
cfgModemCDDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 6, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgModemCDDelay.setStatus('mandatory')
if mibBuilder.loadTexts: cfgModemCDDelay.setDescription('CD delay.')
cfgModemResponseDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 6, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgModemResponseDelay.setStatus('mandatory')
if mibBuilder.loadTexts: cfgModemResponseDelay.setDescription('Response delay.')
cfgModemHangUpDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 6, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgModemHangUpDelay.setStatus('mandatory')
if mibBuilder.loadTexts: cfgModemHangUpDelay.setDescription('Hang up delay.')
cfgModemConnectTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 6, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgModemConnectTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: cfgModemConnectTimeout.setDescription('Connect timeout.')
cfgModemDetectTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 6, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgModemDetectTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: cfgModemDetectTimeout.setDescription('DetectTimeout.')
ctlNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 7, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ctlNumber.setDescription('The present number of rows in the control table.')
ctlTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 5, 7, 2), )
if mibBuilder.loadTexts: ctlTable.setStatus('mandatory')
if mibBuilder.loadTexts: ctlTable.setDescription('This table contains control parameter information.')
ctlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 5, 7, 2, 1), ).setIndexNames((0, "VM-MIB", "ctlModIndex"), (0, "VM-MIB", "ctlIndex"))
if mibBuilder.loadTexts: ctlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ctlEntry.setDescription('Each row contains parameters related to a control set.')
ctlModIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlModIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ctlModIndex.setDescription('A link into the module table (modTable). This identifies which device this control set is associated with.')
ctlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ctlIndex.setDescription('This column is used to identify a particular control set.')
ctlSystemReset = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 7, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlSystemReset.setStatus('current')
if mibBuilder.loadTexts: ctlSystemReset.setDescription('Setting this variable causes software or hardware to reset to the state it has immediately after a power-on boot. Applications are either reset or shutdown, depending on what is normal for the module.')
ctlSystemShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 7, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlSystemShutdown.setStatus('current')
if mibBuilder.loadTexts: ctlSystemShutdown.setDescription('Setting this variable causes the OS for a graceful shutdown.')
ctlSystemPwrCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 7, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlSystemPwrCycle.setStatus('current')
if mibBuilder.loadTexts: ctlSystemPwrCycle.setDescription('Setting this variable causes the software or hardware to go to the state it has before an operating system boots (if possible), turns the power to the hardware off, turns the power to the hardware back on, and then boots to the normal running state.')
ctlCardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 7, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCardShutdown.setStatus('current')
if mibBuilder.loadTexts: ctlCardShutdown.setDescription('This variable is to shutdown the card.')
ctlCardSoftReset = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 7, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCardSoftReset.setStatus('current')
if mibBuilder.loadTexts: ctlCardSoftReset.setDescription('This variable is to generate a software reset to the card.')
ctlCardHardReset = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 7, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCardHardReset.setStatus('current')
if mibBuilder.loadTexts: ctlCardHardReset.setDescription('This variable is to generate a hardware reset to the card.')
ctlCardFlushGPNV = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 7, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCardFlushGPNV.setStatus('current')
if mibBuilder.loadTexts: ctlCardFlushGPNV.setDescription('This variable is to flush the content of the General Purpose Non Volatile (GPNV) memory of DRAC2.')
voltNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 20, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltNumber.setStatus('mandatory')
if mibBuilder.loadTexts: voltNumber.setDescription('The present number of rows in the voltage table.')
voltTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 5, 20, 2), )
if mibBuilder.loadTexts: voltTable.setStatus('mandatory')
if mibBuilder.loadTexts: voltTable.setDescription('This table contains voltage measurement information.')
voltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 5, 20, 2, 1), ).setIndexNames((0, "VM-MIB", "voltModIndex"), (0, "VM-MIB", "voltIndex"))
if mibBuilder.loadTexts: voltEntry.setStatus('mandatory')
if mibBuilder.loadTexts: voltEntry.setDescription('Each row contains parameters related to a voltage measurement channel.')
voltModIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 20, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltModIndex.setStatus('mandatory')
if mibBuilder.loadTexts: voltModIndex.setDescription('A link into the module table (modTable). This identifies which environmental device is associated with this voltage.')
voltIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 20, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltIndex.setStatus('mandatory')
if mibBuilder.loadTexts: voltIndex.setDescription('This column is used to identify a particular voltage measurement channel.')
voltType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 20, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("wallAdapter", 0), ("pciVolt", 1), ("plus3", 2), ("plus5", 3), ("minus5", 4), ("plus12", 5), ("minus12", 6), ("plus15", 7), ("minus15", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltType.setStatus('mandatory')
if mibBuilder.loadTexts: voltType.setDescription('The type of the voltage measurement channel.')
voltDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 20, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltDescr.setStatus('mandatory')
if mibBuilder.loadTexts: voltDescr.setDescription('A description of the voltage measurement channel.')
voltReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 20, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: voltReading.setStatus('mandatory')
if mibBuilder.loadTexts: voltReading.setDescription('The measured voltage.')
voltLimitLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 20, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setUnits('Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltLimitLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: voltLimitLowCritical.setDescription('The low limit for the measured voltage. If the measured value falls below this limit a trap is sent.')
voltLimitHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 20, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setUnits('Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltLimitHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: voltLimitHighCritical.setDescription('The high limit for the measured voltage. If the measured value rises above this limit a trap is sent.')
voltLimitLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 20, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setUnits('Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltLimitLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: voltLimitLowWarning.setDescription('The low limit for the measured voltage. If the measured value falls below this limit a trap is sent.')
voltLimitHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 20, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setUnits('Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltLimitHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: voltLimitHighWarning.setDescription('The high limit for the measured voltage. If the measured value rises above this limit a trap is sent.')
voltItemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 20, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("undetermined", 0), ("other", 1), ("unknown", 2), ("ok", 3), ("warning", 4), ("critical", 5), ("non-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltItemStatus.setStatus('mandatory')
if mibBuilder.loadTexts: voltItemStatus.setDescription('This is the status of the particular voltage item')
voltLastAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 20, 2, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltLastAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: voltLastAlarm.setDescription('The time of the last alarm condition.')
voltTrapSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 20, 2, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltTrapSystem.setStatus('mandatory')
if mibBuilder.loadTexts: voltTrapSystem.setDescription('Name of the system generating the alert')
voltTrapGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 20, 2, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltTrapGroup.setStatus('mandatory')
if mibBuilder.loadTexts: voltTrapGroup.setDescription('DMI group generating the alert')
voltTrapMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 20, 2, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltTrapMessage.setStatus('mandatory')
if mibBuilder.loadTexts: voltTrapMessage.setDescription('Alert message')
tempNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 21, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempNumber.setStatus('mandatory')
if mibBuilder.loadTexts: tempNumber.setDescription('The present number of rows in the temperature table.')
tempTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 5, 21, 2), )
if mibBuilder.loadTexts: tempTable.setStatus('mandatory')
if mibBuilder.loadTexts: tempTable.setDescription('This table contains temperature measurement information.')
tempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 5, 21, 2, 1), ).setIndexNames((0, "VM-MIB", "tempModIndex"), (0, "VM-MIB", "tempIndex"))
if mibBuilder.loadTexts: tempEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tempEntry.setDescription('Each row contains parameters related to a temperature measurement channel.')
tempModIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 21, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempModIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tempModIndex.setDescription('A link into the module table (modTable). This identifies which environmental device this temperature is associated with.')
tempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 21, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tempIndex.setDescription('This column is used to identify a particular temperature measurement channel.')
tempType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 21, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ambient", 0), ("zone1", 1), ("zone2", 2), ("zone3", 3), ("zone4", 4), ("zone5", 5), ("zone6", 6), ("zone7", 7), ("zone8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempType.setStatus('mandatory')
if mibBuilder.loadTexts: tempType.setDescription('The type of the voltage measurement channel.')
tempDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 21, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempDescr.setStatus('mandatory')
if mibBuilder.loadTexts: tempDescr.setDescription('A description of the temperature measurement channel.')
tempReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 21, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setUnits('Degrees Celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tempReading.setStatus('mandatory')
if mibBuilder.loadTexts: tempReading.setDescription('The measured temperature.')
tempLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 21, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setUnits('Degrees Celcius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: tempLowCritical.setDescription('The high limit for the measured temperature. If the measured value rises above this limit a trap is sent.')
tempHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 21, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setUnits('Degrees Celcius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: tempHighCritical.setDescription('The high limit for the measured temperature. If the measured value rises above this limit a trap is sent.')
tempLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 21, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setUnits('Degrees Celcius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: tempLowWarning.setDescription('The high limit for the measured temperature. If the measured value rises above this limit a trap is sent.')
tempHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 21, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setUnits('Degrees Celcius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: tempHighWarning.setDescription('The high limit for the measured temperature. If the measured value rises above this limit a trap is sent.')
tempItemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 21, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("undetermined", 0), ("other", 1), ("unknown", 2), ("ok", 3), ("warning", 4), ("critical", 5), ("non-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempItemStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tempItemStatus.setDescription('This is the status of the particular temperature item')
tempLastAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 21, 2, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempLastAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: tempLastAlarm.setDescription('The time of the last alarm condition.')
tempTrapSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 21, 2, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempTrapSystem.setStatus('mandatory')
if mibBuilder.loadTexts: tempTrapSystem.setDescription('Name of the system generating the alert')
tempTrapGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 21, 2, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempTrapGroup.setStatus('mandatory')
if mibBuilder.loadTexts: tempTrapGroup.setDescription('DMI group generating the alert')
tempTrapMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 21, 2, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempTrapMessage.setStatus('mandatory')
if mibBuilder.loadTexts: tempTrapMessage.setDescription('Alert message')
batteryNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 25, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryNumber.setStatus('mandatory')
if mibBuilder.loadTexts: batteryNumber.setDescription('The present number of rows in the battery table.')
batteryTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 5, 25, 2), )
if mibBuilder.loadTexts: batteryTable.setStatus('mandatory')
if mibBuilder.loadTexts: batteryTable.setDescription('This table contains battery information.')
batteryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 5, 25, 2, 1), ).setIndexNames((0, "VM-MIB", "batteryModIndex"), (0, "VM-MIB", "batteryIndex"))
if mibBuilder.loadTexts: batteryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: batteryEntry.setDescription('Each row contains parameters related to a battery.')
batteryModIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 25, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryModIndex.setStatus('mandatory')
if mibBuilder.loadTexts: batteryModIndex.setDescription('A link into the module table (modTable). This identifies which device this battery is associated with.')
batteryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 25, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: batteryIndex.setDescription('This column is used to identify a particular battery.')
batteryType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 25, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("standardDryCell", 1), ("lithiumION", 2), ("nickelCadmium", 3), ("metalHydride", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryType.setStatus('mandatory')
if mibBuilder.loadTexts: batteryType.setDescription('The type of the battery input.')
batteryDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 25, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryDescr.setStatus('mandatory')
if mibBuilder.loadTexts: batteryDescr.setDescription('A description of the battery.')
batteryChargeStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 25, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notCharging", 0), ("fastCharging", 1), ("trickleCharging", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryChargeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: batteryChargeStatus.setDescription('Charging status of the battery.')
batteryFastChargeCount = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 25, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryFastChargeCount.setStatus('mandatory')
if mibBuilder.loadTexts: batteryFastChargeCount.setDescription('Fast charge counts of the battery.')
batteryChargePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 25, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryChargePercent.setStatus('mandatory')
if mibBuilder.loadTexts: batteryChargePercent.setDescription('The percentage of charge remaining in the battery.')
batteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 25, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("undetermined", 0), ("other", 1), ("unknown", 2), ("ok", 3), ("warning", 4), ("critical", 5), ("non-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: batteryStatus.setDescription('The status of the battery.')
batteryLastAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 25, 2, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryLastAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: batteryLastAlarm.setDescription('The time of the last alarm condition.')
batteryTrapSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 25, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTrapSystem.setStatus('mandatory')
if mibBuilder.loadTexts: batteryTrapSystem.setDescription('Name of the system generating the alert')
batteryTrapGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 25, 2, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTrapGroup.setStatus('mandatory')
if mibBuilder.loadTexts: batteryTrapGroup.setDescription('DMI group generating the alert')
batteryTrapMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 25, 2, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTrapMessage.setStatus('mandatory')
if mibBuilder.loadTexts: batteryTrapMessage.setDescription('Alert message')
healthStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 26, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthStatusNumber.setStatus('mandatory')
if mibBuilder.loadTexts: healthStatusNumber.setDescription('The present number of rows in the battery table.')
healthTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 5, 26, 2), )
if mibBuilder.loadTexts: healthTable.setStatus('mandatory')
if mibBuilder.loadTexts: healthTable.setDescription("This table contains card's health information.")
healthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 5, 26, 2, 1), ).setIndexNames((0, "VM-MIB", "healthModIndex"), (0, "VM-MIB", "healthIndex"))
if mibBuilder.loadTexts: healthEntry.setStatus('mandatory')
if mibBuilder.loadTexts: healthEntry.setDescription('Each row contains parameters related to a health status.')
healthModIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 26, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthModIndex.setStatus('mandatory')
if mibBuilder.loadTexts: healthModIndex.setDescription('A link into the module table (healthTable). This identifies which health status is associated with.')
healthIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 26, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthIndex.setStatus('mandatory')
if mibBuilder.loadTexts: healthIndex.setDescription('This column is used to identify a particular haelth information.')
healthType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 26, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("overallCard", 1), ("overallSystem", 2), ("overallIPMI", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthType.setStatus('mandatory')
if mibBuilder.loadTexts: healthType.setDescription('The particular health status type.')
overallHealthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 26, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("undetermined", 0), ("other", 1), ("unknown", 2), ("ok", 3), ("warning", 4), ("critical", 5), ("non-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: overallHealthStatus.setStatus('mandatory')
if mibBuilder.loadTexts: overallHealthStatus.setDescription('An overall report of the health of the card.')
overallVoltageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 26, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("undetermined", 0), ("other", 1), ("unknown", 2), ("ok", 3), ("warning", 4), ("critical", 5), ("non-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: overallVoltageStatus.setStatus('mandatory')
if mibBuilder.loadTexts: overallVoltageStatus.setDescription('An ovearall report of the monitored voltages.')
overallTemperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 26, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("undetermined", 0), ("other", 1), ("unknown", 2), ("ok", 3), ("warning", 4), ("critical", 5), ("non-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: overallTemperatureStatus.setStatus('mandatory')
if mibBuilder.loadTexts: overallTemperatureStatus.setDescription('An overall report of the monitored temperatures.')
overallBatteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 26, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("undetermined", 0), ("other", 1), ("unknown", 2), ("ok", 3), ("warning", 4), ("critical", 5), ("non-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: overallBatteryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: overallBatteryStatus.setDescription('An overall report from the battery management.')
trapVoltageGood = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 5) + (0,4)).setObjects(("VM-MIB", "voltTrapSystem"), ("VM-MIB", "voltTrapGroup"), ("VM-MIB", "voltTrapMessage"), ("VM-MIB", "voltItemStatus"), ("VM-MIB", "voltReading"))
if mibBuilder.loadTexts: trapVoltageGood.setDescription('This trap is sent each time a voltage channel reading comes back in normal range.')
trapVoltageWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 5) + (0,5)).setObjects(("VM-MIB", "voltTrapSystem"), ("VM-MIB", "voltTrapGroup"), ("VM-MIB", "voltTrapMessage"), ("VM-MIB", "voltItemStatus"), ("VM-MIB", "voltReading"))
if mibBuilder.loadTexts: trapVoltageWarning.setDescription('This trap is sent each time a voltage channel reading goes out of warning range.')
trapVoltageCritical = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 5) + (0,6)).setObjects(("VM-MIB", "voltTrapSystem"), ("VM-MIB", "voltTrapGroup"), ("VM-MIB", "voltTrapMessage"), ("VM-MIB", "voltItemStatus"), ("VM-MIB", "voltReading"))
if mibBuilder.loadTexts: trapVoltageCritical.setDescription('This trap is sent each time a voltage channel reading goes out of critical range.')
trapTemperatureGood = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 5) + (0,7)).setObjects(("VM-MIB", "tempTrapSystem"), ("VM-MIB", "tempTrapGroup"), ("VM-MIB", "tempTrapMessage"), ("VM-MIB", "tempItemStatus"), ("VM-MIB", "tempReading"))
if mibBuilder.loadTexts: trapTemperatureGood.setDescription('This trap is sent each time a temperature channel reading comes back in normal range.')
trapTemperatureWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 5) + (0,8)).setObjects(("VM-MIB", "tempTrapSystem"), ("VM-MIB", "tempTrapGroup"), ("VM-MIB", "tempTrapMessage"), ("VM-MIB", "tempItemStatus"), ("VM-MIB", "tempReading"))
if mibBuilder.loadTexts: trapTemperatureWarning.setDescription('This trap is sent each time a temperature channel reading goes out of warning range.')
trapTemperatureCritical = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 5) + (0,9)).setObjects(("VM-MIB", "tempTrapSystem"), ("VM-MIB", "tempTrapGroup"), ("VM-MIB", "tempTrapMessage"), ("VM-MIB", "tempItemStatus"), ("VM-MIB", "tempReading"))
if mibBuilder.loadTexts: trapTemperatureCritical.setDescription('This trap is sent each time a temperature channel reading goes out of warning range.')
trapBatteryGood = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 5) + (0,10)).setObjects(("VM-MIB", "batteryTrapSystem"), ("VM-MIB", "batteryTrapGroup"), ("VM-MIB", "batteryTrapMessage"), ("VM-MIB", "batteryStatus"), ("VM-MIB", "batteryChargePercent"))
if mibBuilder.loadTexts: trapBatteryGood.setDescription('This trap is sent each time a battery with low charge is re-charged above the specified low threshold.')
trapBatteryLow = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 5) + (0,11)).setObjects(("VM-MIB", "batteryTrapSystem"), ("VM-MIB", "batteryTrapGroup"), ("VM-MIB", "batteryTrapMessage"), ("VM-MIB", "batteryStatus"), ("VM-MIB", "batteryChargePercent"))
if mibBuilder.loadTexts: trapBatteryLow.setDescription('This trap is sent each time the battery charge is under the specified low threshold.')
mibBuilder.exportSymbols("VM-MIB", modSwitchCount=modSwitchCount, modPcCardMfgr=modPcCardMfgr, modVoltCount=modVoltCount, cfgModemRingDelay=cfgModemRingDelay, cfgModemTable=cfgModemTable, tempHighWarning=tempHighWarning, batteryType=batteryType, cfgAdminModIndex=cfgAdminModIndex, modEntry=modEntry, tempNumber=tempNumber, tempDescr=tempDescr, dell=dell, cfgNetSubnetMask=cfgNetSubnetMask, tempLowWarning=tempLowWarning, tempTrapMessage=tempTrapMessage, cfgAdminCustomPagerCode=cfgAdminCustomPagerCode, voltTable=voltTable, cfgNetIPAddress=cfgNetIPAddress, cfgAlertTrapCallBackNumber=cfgAlertTrapCallBackNumber, tempType=tempType, cfgModemEntry=cfgModemEntry, tempLowCritical=tempLowCritical, configNetwork=configNetwork, cfgAdminAlias=cfgAdminAlias, voltTrapSystem=voltTrapSystem, voltTrapGroup=voltTrapGroup, cfgAdminPagerType=cfgAdminPagerType, cfgAdminPassword=cfgAdminPassword, tempModIndex=tempModIndex, modAutoRecoveryEnable=modAutoRecoveryEnable, modFaultCount=modFaultCount, configAlert=configAlert, idMibRevMajor=idMibRevMajor, ctlCardSoftReset=ctlCardSoftReset, ctlSystemReset=ctlSystemReset, cfgModemNumber=cfgModemNumber, cfgNetModIndex=cfgNetModIndex, voltDescr=voltDescr, modTempCount=modTempCount, voltLimitLowWarning=voltLimitLowWarning, identification=identification, cfgModemSignalDelay=cfgModemSignalDelay, ctlSystemPwrCycle=ctlSystemPwrCycle, trapVoltageWarning=trapVoltageWarning, cfgModemExtraInitString=cfgModemExtraInitString, configModem=configModem, modPcCardName=modPcCardName, idMibRevMinor=idMibRevMinor, batteryChargeStatus=batteryChargeStatus, cfgAdminTestPager=cfgAdminTestPager, modTable=modTable, modUpTime=modUpTime, cfgNetGateway=cfgNetGateway, batteryModIndex=batteryModIndex, cfgNetIndex=cfgNetIndex, ctlIndex=ctlIndex, voltage=voltage, tempItemStatus=tempItemStatus, ctlEntry=ctlEntry, batteryStatus=batteryStatus, overallHealthStatus=overallHealthStatus, voltItemStatus=voltItemStatus, batteryEntry=batteryEntry, cfgModemResponseDelay=cfgModemResponseDelay, healthIndex=healthIndex, tempTrapGroup=tempTrapGroup, overallTemperatureStatus=overallTemperatureStatus, trapBatteryLow=trapBatteryLow, cfgAlertModIndex=cfgAlertModIndex, voltEntry=voltEntry, voltLimitHighWarning=voltLimitHighWarning, control=control, ctlTable=ctlTable, modFwRelDate=modFwRelDate, ctlCardHardReset=ctlCardHardReset, voltLimitHighCritical=voltLimitHighCritical, tempReading=tempReading, tempHighCritical=tempHighCritical, batteryFastChargeCount=batteryFastChargeCount, cfgModemBaudRate=cfgModemBaudRate, voltReading=voltReading, batteryTrapMessage=batteryTrapMessage, cfgAdminPagerNumber=cfgAdminPagerNumber, cfgModemHangUpDelay=cfgModemHangUpDelay, cfgModemConnectTimeout=cfgModemConnectTimeout, cfgAdminPagerSubscriber=cfgAdminPagerSubscriber, healthTable=healthTable, trapVoltageGood=trapVoltageGood, cfgAdminTable=cfgAdminTable, cfgModemPwrOnDelay=cfgModemPwrOnDelay, cfgAdminPagerMask=cfgAdminPagerMask, healthModIndex=healthModIndex, tempIndex=tempIndex, cfgAdminNumber=cfgAdminNumber, modIndex=modIndex, voltLastAlarm=voltLastAlarm, trapTemperatureWarning=trapTemperatureWarning, batteryTrapSystem=batteryTrapSystem, batteryNumber=batteryNumber, cfgNetEntry=cfgNetEntry, module=module, cfgAdminIndex=cfgAdminIndex, cfgAlertNumber=cfgAlertNumber, voltType=voltType, cfgModemDetectTimeout=cfgModemDetectTimeout, cfgModemIndex=cfgModemIndex, idAgentRevMinor=idAgentRevMinor, voltIndex=voltIndex, traps=traps, trapVoltageCritical=trapVoltageCritical, cfgAlertTrapSendCommunity=cfgAlertTrapSendCommunity, trapTemperatureCritical=trapTemperatureCritical, batteryChargePercent=batteryChargePercent, tempTrapSystem=tempTrapSystem, voltTrapMessage=voltTrapMessage, battery=battery, cfgModemCDDelay=cfgModemCDDelay, batteryDescr=batteryDescr, trapBatteryGood=trapBatteryGood, idAgentRevMajor=idAgentRevMajor, healthType=healthType, overallVoltageStatus=overallVoltageStatus, ctlCardShutdown=ctlCardShutdown, modNetworkCtrl=modNetworkCtrl, ctlModIndex=ctlModIndex, voltLimitLowCritical=voltLimitLowCritical, modPcmciaHost=modPcmciaHost, cfgModemModIndex=cfgModemModIndex, modHeartBeatEnable=modHeartBeatEnable, cfgAlertTable=cfgAlertTable, healthStatusNumber=healthStatusNumber, trapTemperatureGood=trapTemperatureGood, tempLastAlarm=tempLastAlarm, cfgModemDialMode=cfgModemDialMode, tempEntry=tempEntry, tempTable=tempTable, batteryLastAlarm=batteryLastAlarm, modAccessControl=modAccessControl, cfgAlertIndex=cfgAlertIndex, modType=modType, cfgNetTable=cfgNetTable, voltModIndex=voltModIndex, cfgAlertTrapSendIPAddress=cfgAlertTrapSendIPAddress, cfgAdminEntry=cfgAdminEntry, modFwRevMinor=modFwRevMinor, configAdmin=configAdmin, modEthernetAddress=modEthernetAddress, voltNumber=voltNumber, healthStatus=healthStatus, modStartDelay=modStartDelay, ctlNumber=ctlNumber, cfgAlertEntry=cfgAlertEntry, ctlCardFlushGPNV=ctlCardFlushGPNV, cfgNetNumber=cfgNetNumber, ctlSystemShutdown=ctlSystemShutdown, cfgAdminSessionCallback=cfgAdminSessionCallback, batteryIndex=batteryIndex, server=server, modNumber=modNumber, idProduct=idProduct, modRecoveryTimeout=modRecoveryTimeout, drac2=drac2, temperature=temperature, healthEntry=healthEntry, batteryTable=batteryTable, batteryTrapGroup=batteryTrapGroup, modBattery=modBattery, modPciBridge=modPciBridge, modFanCount=modFanCount, modFwRevMajor=modFwRevMajor, overallBatteryStatus=overallBatteryStatus, idManufacturer=idManufacturer)
