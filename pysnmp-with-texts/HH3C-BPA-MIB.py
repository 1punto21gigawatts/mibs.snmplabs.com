#
# PySNMP MIB module HH3C-BPA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-BPA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:25:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddressType, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, MibIdentifier, ModuleIdentity, Bits, Integer32, TimeTicks, iso, NotificationType, Unsigned32, IpAddress, Gauge32, ObjectIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibIdentifier", "ModuleIdentity", "Bits", "Integer32", "TimeTicks", "iso", "NotificationType", "Unsigned32", "IpAddress", "Gauge32", "ObjectIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
hh3cBpa = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 144))
hh3cBpa.setRevisions(('2013-11-13 11:28',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hh3cBpa.setRevisionsDescriptions(('The initial version of this MIB file.',))
if mibBuilder.loadTexts: hh3cBpa.setLastUpdated('201311131128Z')
if mibBuilder.loadTexts: hh3cBpa.setOrganization('Hangzhou H3C Technologies Co., Ltd.')
if mibBuilder.loadTexts: hh3cBpa.setContactInfo('Platform Team H3C Technologies Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip: 100085')
if mibBuilder.loadTexts: hh3cBpa.setDescription('This MIB contains objects that manage the configuration and information of BGP policy accounting. It accounts IP packets by user defined BGP policy. ')
hh3cBpaObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 144, 1))
hh3cBpaCfgTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 144, 1, 1), )
if mibBuilder.loadTexts: hh3cBpaCfgTable.setStatus('current')
if mibBuilder.loadTexts: hh3cBpaCfgTable.setDescription('A table for BGP policy accounting configuration.')
hh3cBpaCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 144, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-BPA-MIB", "hh3cBpaDirection"))
if mibBuilder.loadTexts: hh3cBpaCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cBpaCfgEntry.setDescription('An entry for BGP policy accounting configuration.')
hh3cBpaDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 144, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("input", 1), ("output", 2))))
if mibBuilder.loadTexts: hh3cBpaDirection.setStatus('current')
if mibBuilder.loadTexts: hh3cBpaDirection.setDescription('Identify the direction of IP packets on which BGP policy accounting takes effect. input :input direction output :output direction')
hh3cBpaSrcOrDest = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 144, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("source", 1), ("destination", 2), ("both", 3))).clone('destination')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cBpaSrcOrDest.setStatus('current')
if mibBuilder.loadTexts: hh3cBpaSrcOrDest.setDescription("Identify IP packet's Destination or Source IP address that BGP policy accounting relies on. source :source IP address of the IP packet destination :destination IP address of the IP packet both :both source and destination IP addresses")
hh3cBpaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 144, 1, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cBpaRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cBpaRowStatus.setDescription('This object manages the creation, deletion, and modification of rows in the hh3cBpaCfgTable, which supports the active status, createAndGo operation, and destroy operation.')
hh3cBpaStatTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 144, 1, 2), )
if mibBuilder.loadTexts: hh3cBpaStatTable.setStatus('current')
if mibBuilder.loadTexts: hh3cBpaStatTable.setDescription('A table for BGP policy accounting statistics.')
hh3cBpaStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 144, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-BPA-MIB", "hh3cBpaTrafficType"), (0, "HH3C-BPA-MIB", "hh3cBpaTrafficIndex"))
if mibBuilder.loadTexts: hh3cBpaStatEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cBpaStatEntry.setDescription('An entry for BGP policy accounting statistics.')
hh3cBpaTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 144, 1, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hh3cBpaTrafficType.setStatus('current')
if mibBuilder.loadTexts: hh3cBpaTrafficType.setDescription('Type of IP packets, IPv4 or IPv6.')
hh3cBpaTrafficIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 144, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: hh3cBpaTrafficIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cBpaTrafficIndex.setDescription('Traffic index generated by a BGP policy.')
hh3cBpaInPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 144, 1, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cBpaInPacketCount.setStatus('current')
if mibBuilder.loadTexts: hh3cBpaInPacketCount.setDescription('The total number of received packets with the specified traffic type and traffic index.')
hh3cBpaInOctetCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 144, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cBpaInOctetCount.setStatus('current')
if mibBuilder.loadTexts: hh3cBpaInOctetCount.setDescription('The total number of received bytes with the specified traffic type and traffic index.')
hh3cBpaOutPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 144, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cBpaOutPacketCount.setStatus('current')
if mibBuilder.loadTexts: hh3cBpaOutPacketCount.setDescription('The total number of output packets with the specified traffic type and traffic index.')
hh3cBpaOutOctetCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 144, 1, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cBpaOutOctetCount.setStatus('current')
if mibBuilder.loadTexts: hh3cBpaOutOctetCount.setDescription('The total number of output bytes with the specified traffic type and traffic index.')
mibBuilder.exportSymbols("HH3C-BPA-MIB", hh3cBpa=hh3cBpa, hh3cBpaTrafficType=hh3cBpaTrafficType, hh3cBpaRowStatus=hh3cBpaRowStatus, hh3cBpaDirection=hh3cBpaDirection, hh3cBpaObjects=hh3cBpaObjects, hh3cBpaCfgEntry=hh3cBpaCfgEntry, hh3cBpaSrcOrDest=hh3cBpaSrcOrDest, hh3cBpaOutOctetCount=hh3cBpaOutOctetCount, hh3cBpaStatTable=hh3cBpaStatTable, hh3cBpaOutPacketCount=hh3cBpaOutPacketCount, hh3cBpaInPacketCount=hh3cBpaInPacketCount, hh3cBpaTrafficIndex=hh3cBpaTrafficIndex, hh3cBpaInOctetCount=hh3cBpaInOctetCount, hh3cBpaStatEntry=hh3cBpaStatEntry, hh3cBpaCfgTable=hh3cBpaCfgTable, PYSNMP_MODULE_ID=hh3cBpa)
