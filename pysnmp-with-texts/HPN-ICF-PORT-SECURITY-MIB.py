#
# PySNMP MIB module HPN-ICF-PORT-SECURITY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-PORT-SECURITY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:40:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
hpnicfPortSecurity, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfPortSecurity")
dot1xAuthSessionTerminateCause, dot1xAuthSessionAuthenticMethod, dot1xPaePortNumber, dot1xAuthSessionUserName = mibBuilder.importSymbols("IEEE8021-PAE-MIB", "dot1xAuthSessionTerminateCause", "dot1xAuthSessionAuthenticMethod", "dot1xPaePortNumber", "dot1xAuthSessionUserName")
ifAdminStatus, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifAdminStatus", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, NotificationType, Bits, Unsigned32, ObjectIdentity, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, MibIdentifier, Counter64, iso, IpAddress, Integer32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "NotificationType", "Bits", "Unsigned32", "ObjectIdentity", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "MibIdentifier", "Counter64", "iso", "IpAddress", "Integer32", "TimeTicks")
MacAddress, RowStatus, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "RowStatus", "DisplayString", "TextualConvention", "TruthValue")
hpnicfPortSecurityMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1))
hpnicfPortSecurityMIB.setRevisions(('2004-11-24 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpnicfPortSecurityMIB.setRevisionsDescriptions(('The Initial Version of hpnicfPortSecurityMIB',))
if mibBuilder.loadTexts: hpnicfPortSecurityMIB.setLastUpdated('200411240000Z')
if mibBuilder.loadTexts: hpnicfPortSecurityMIB.setOrganization('')
if mibBuilder.loadTexts: hpnicfPortSecurityMIB.setContactInfo('')
if mibBuilder.loadTexts: hpnicfPortSecurityMIB.setDescription('The MIB module is used for managing port security.')
hpnicfPortSecurityLeaf = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 1))
hpnicfSecurePortSecurityControl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSecurePortSecurityControl.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecurePortSecurityControl.setDescription('This attribute controls the system wide operation of network access control. The configured port security options only become operational when this attribute is set to enabled.')
hpnicfSecurePortVlanMembershipList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfSecurePortVlanMembershipList.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecurePortVlanMembershipList.setDescription("This is a dummy MIB object referenced by the hpnicfsecureLogon and hpnicfsecureLogoff traps. This object contains a comma separated list of the VLAN identifiers (0-4095) assigned to a port. A tagged VLAN has a 'T' suffix after the VLAN number and an untagged VLAN may have an optional 'U' suffix.")
hpnicfSecureRalmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 1, 4))
hpnicfSecureRalmDefaultSessionTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSecureRalmDefaultSessionTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureRalmDefaultSessionTime.setDescription('Specifies the default session lifetime in seconds before a forwarding MAC address is re-authenticated. The default time is 1800 seconds.')
hpnicfSecureRalmHoldoffTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSecureRalmHoldoffTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureRalmHoldoffTime.setDescription('Specifies the time in seconds before a blocked (denied) MAC address can be re-authenticated. The default time is 60 seconds.')
hpnicfSecureRalmReauthenticate = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 1, 4, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSecureRalmReauthenticate.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureRalmReauthenticate.setDescription('Writing a MAC address to this object causes an immediate RALM re-authentication of this address (can be on any port). If the MAC address not currently known to RALM, it silently ignores the write.')
hpnicfSecureRalmAuthMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("papUsernameAsMacAddress", 1), ("papUsernameFixed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSecureRalmAuthMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureRalmAuthMode.setDescription("This controls how MAC addresses are authenticated. papUsernameAsMacAddress(1) Authentication uses the RADIUS server by sending a PAP request with Username and Password both equal to the MAC address being authenticated. This is the default. papUsernameFixed(2) Authentication uses the RADIUS server by sending a PAP request with Username and Password coming from the hpnicfSecureRalmAuthUsername and hpnicfSecureRalmAuthPassword MIB objects. In this mode the RADIUS server would normally take into account the request's calling-station-id attribute, which is the MAC address of the host being authenticated.")
hpnicfSecureRalmAuthUsername = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 1, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSecureRalmAuthUsername.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureRalmAuthUsername.setDescription("This is the username used for authentication requests where hpnicfSecureRalmAuthMode is papUsernameFixed. Default shall be 'mac'.")
hpnicfSecureRalmAuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 1, 4, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSecureRalmAuthPassword.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureRalmAuthPassword.setDescription('This is the password used for authentication requests where hpnicfSecureRalmAuthMode is papUsernameFixed. Default shall be a null string.')
hpnicfSecureRalmAuthDomain = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 1, 4, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSecureRalmAuthDomain.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureRalmAuthDomain.setDescription('MAC-authentication users may be configured in a specific domain, which excludes 802.1x and other authentication users. This specifies the domain of all MAC-authentication users.')
hpnicfSecureRalmAuthOfflineTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 1, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 2147483647)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSecureRalmAuthOfflineTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureRalmAuthOfflineTime.setDescription("Switch isn't informed when online user is offline, so switch should be able to detect offline and inform radius server to stop accounting when there is no traffic of the user. This attribute configures the timer interval of offline-detect. The default time is 300 seconds.")
hpnicfSecureRalmAuthServerTimeoutTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 1, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSecureRalmAuthServerTimeoutTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureRalmAuthServerTimeoutTime.setDescription('When switch sends request packets (include connecting request and offline request, etc) to radius server and there is no response, switch will terminate the authentication process. This attribute configures the timer interval of server-timeout. The default time is 100 seconds.')
hpnicfSecureMacControl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 1, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSecureMacControl.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureMacControl.setDescription('This attribute controls the system wide operation of mac-authentication. The system-wide mac-authentication options become non-operational when this attribute is set to disabled. This is required for hpnicfSecurePortSecurityControl to be enabled.')
hpnicfPortSecurityTables = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 2))
hpnicfSecurePortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 2, 1), )
if mibBuilder.loadTexts: hpnicfSecurePortTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecurePortTable.setDescription('This table defines the security status of each secure port. Each port can have a number of authorised MAC addresses, and these are stored in the hpnicfSecureAddressTable.')
hpnicfSecurePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfSecurePortEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecurePortEntry.setDescription('There is a row in this table for each secure port, and allows repeater ports to be configured for security on a per port basis. It is indexed using the object ifIndex in RFC1213-MIB.')
hpnicfSecurePortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("noRestrictions", 1), ("continuousLearning", 2), ("autoLearn", 3), ("secure", 4), ("userLogin", 5), ("userLoginSecure", 6), ("userLoginWithOUI", 7), ("macAddressWithRadius", 8), ("macAddressOrUserLoginSecure", 9), ("macAddressElseUserLoginSecure", 10), ("userLoginSecureExt", 11), ("macAddressOrUserLoginSecureExt", 12), ("macAddressElseUserLoginSecureExt", 13), ("macAddressAndUserLoginSecure", 14), ("macAddressAndUserLoginSecureExt", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSecurePortMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecurePortMode.setDescription('Determines the learning and security modes of the port. See hpnicfSecureNeedToKnowMode and hpnicfSecureIntrusionAction to configure Need To Know and Intrusion Action on each port. (When in a learning mode, hpnicfSecureNumberAddresses determines the maximum number of addresses that can be learned on the port. This is set by the user.) noRestrictions(1) All of the security features are disabled. continuousLearning(2) Addresses are learned continually. If more addresses are learned than are permitted on the port, then one of the older entries will be aged out. Need To Know and Intrusion Action depends on hpnicfSecureNeedToKnowMode and hpnicfSecureIntrusionAction respectively. autoLearn(3) All addresses for this port are deleted, and then addresses are learned up to the number permitted. hpnicfSecurePortMode is then set to secure. Need To Know and Intrusion Action depends on hpnicfSecureNeedToKnowMode and hpnicfSecureIntrusionAction respectively. secure(4) Learning is disabled. Need To Know and Intrusion Action depends on hpnicfSecureNeedToKnowMode and hpnicfSecureIntrusionAction respectively. userLogin(5) Access to the port is denied until the port client is authorised (by 802.1X or other authentication mechanism). Once authorised, traffic will be accepted from any MAC address. The Need To Know and Intrusion Action are ignored. userLoginSecure(6) Access to the port is denied until the port client is authorised (by 802.1X or other authentication mechanism). When the client is authorised, the MAC address is added to the Secure Address Table. The hpnicfSecureMaximumAddresses is set to one automatically when this mode is entered. Any existing MAC addresses in the Secure Address Table are deleted. Need To Know and Intrusion Action depends on hpnicfSecureNeedToKnowMode and hpnicfSecureIntrusionAction respectively. Learning is disabled. userLoginWithOUI(7) This mode is similar to the userLoginSecure mode except that a second MAC address may be placed in the Secure Address Table. This second address is authorised based on the MAC address OUI value. If a new device with an authorised OUI value is discovered, the previous entry is deleted. Traffic from the OUI authorised device will be accepted even if the user has not been authenticated. Need To Know and Intrusion Action depends on hpnicfSecureNeedToKnowMode and hpnicfSecureIntrusionAction respectively. macAddressWithRadius(8) This selects the RADIUS Authenticated Login using MAC-address (RALM) security mode on the port. This feature controls network access of a host based on authenticating its MAC address. Once authorised, the host is allowed access to the network. If unauthorised, the port can be configured to deny access to this MAC address or to allow some access depending upon the port VLAN and QoS configuration. Where access is allowed, the MAC address is added to the Secure Address Table. macAddressOrUserLoginSecure(9) This selects both the macAddressWithRadius and userLoginSecure modes together such that either or both are allowed to authorised access. Where both authorised access, userLoginSecure takes precedence. macAddressElseUserLoginSecure(10) This selects both the macAddressWithRadius and userLoginSecure modes together such that the MAC address is first authenticated and only if this fails does the userLoginSecure then attempt user authentication. userLoginSecureExt(11) Access to the port is denied until the port client is authorised (by 802.1X or other authentication mechanism). When the client is authorised, the MAC address is added to the Secure Address Table. The hpnicfSecureNumberAddresses is restricted by the value of hpnicfSecureMaximumAddresses automatically when this mode is entered. Any existing MAC addresses in the Secure Address Table are deleted. Need To Know and Intrusion Action depends on hpnicfSecureNeedToKnowMode and hpnicfSecureIntrusionAction respectively. Learning is disabled. macAddressOrUserLoginSecureExt(12) This selects both the macAddressWithRadius and userLoginSecureExt modes together such that either or both are allowed to authorised access. Where both authorised access, userLoginSecure takes precedence. macAddressElseUserLoginSecureExt(13) This selects both the macAddressWithRadius and userLoginSecureExt modes together such that the MAC address is first authenticated and only if this fails does the userLoginSecure then attempt user authentication. macAddressAndUserLoginSecure(14) This selects both the macAddressWithRadius and userLoginSecure modes together such that the MAC address is first authenticated and only if this succeeds does the userLoginSecure then attempt user authentication. macAddressAndUserLoginSecureExt(15) This selects both the macAddressWithRadius and userLoginSecureExt modes together such that the MAC address is first authenticated and only if this succeeds does the userLoginSecure then attempt user authentication. ')
hpnicfSecureNeedToKnowMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notAvailable", 1), ("disabled", 2), ("needToKnowOnly", 3), ("needToKnowWithBroadcastsAllowed", 4), ("needToKnowWithMulticastsAllowed", 5), ("permanentNeedToKnowOnly", 6), ("permanentNeedToKnowWithBroadcastsAllowed", 7), ("permanentNeedToKnowWithMulticastsAllowed", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSecureNeedToKnowMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureNeedToKnowMode.setDescription('Attribute to determine which frames are to be forwarded to this port intact. 1 - Need To Know is not available. 2 - All frames. 3 - Frames addressed to the authorised devices only. 4 - Frames addressed to the authorised devices, plus all broadcast frames. 5 - Frames addressed to the authorised devices, plus all broadcast and multicast frames. 6 - As 3 and cannot be changed. 7 - As 4 and cannot be changed. 8 - As 5 and cannot be changed. If this object returns 1,6,7 or 8, it means that the Need To Know configuration cannot be changed, and any attempt to write to this object will cause an error.')
hpnicfSecureIntrusionAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notAvailable", 1), ("noAction", 2), ("disablePort", 3), ("disablePortTemporarily", 4), ("allowDefaultAccess", 5), ("blockMacAddress", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSecureIntrusionAction.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureIntrusionAction.setDescription('Attribute to determine the action if an unauthorised device transmits on this port.')
hpnicfSecureNumberAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSecureNumberAddresses.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureNumberAddresses.setDescription('The maximum number of addresses that the port can learn or store. Reducing this number may cause some addresses to be deleted. This value is set by the user and cannot be automatically changed by the agent. The maximum number will not include and limit the number of static mac addresses that configured by manager. The following relationship must be preserved. hpnicfSecureNumberAddressesStored <= hpnicfSecureNumberAddresses <= hpnicfSecureMaximumAddresses ')
hpnicfSecureNumberAddressesStored = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfSecureNumberAddressesStored.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureNumberAddressesStored.setDescription('The number of addresses that are currently in the AddressTable for this port. If this object has the same value as hpnicfSecureNumberAddresses, then no more addresses can be authorised on this port. The number will not include and limit the number of static mac addresses that configured by manager. Those objects are bound by the relationship: hpnicfSecureNumberAddressesStored <= hpnicfSecureNumberAddresses <= hpnicfSecureMaximumAddresses ')
hpnicfSecureMaximumAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfSecureMaximumAddresses.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureMaximumAddresses.setDescription('This indicates the maximum value that hpnicfSecureNumberAddresses can be set to. It is dependent on the resources available so may change, eg. if resources are shared between ports, then this value can both increase and decrease. This object must be read before setting hpnicfSecureNumberAddresses. Those objects are bound by the relationship: hpnicfSecureNumberAddressesStored <= hpnicfSecureNumberAddresses <= hpnicfSecureMaximumAddresses ')
hpnicfSecureAddressTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 2, 2), )
if mibBuilder.loadTexts: hpnicfSecureAddressTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureAddressTable.setDescription('This table stores the MAC addresses assigned to each port. This table can be written to by the agent as well as the management station.')
hpnicfSecureAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-PORT-SECURITY-MIB", "hpnicfSecureAddrMAC"), (0, "HPN-ICF-PORT-SECURITY-MIB", "hpnicfSecureAddrVlanID"))
if mibBuilder.loadTexts: hpnicfSecureAddressEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureAddressEntry.setDescription('This table allows multiple addresses to be assigned to each secure port. It is indexed using the objects ifIndex, hpnicfSecureAddrMAC and hpnicfSecureVlanID.')
hpnicfSecureAddrMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 2, 2, 1, 1), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfSecureAddrMAC.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureAddrMAC.setDescription('The MAC address of a station assigned to this port. This is the second index into the hpnicfSecureAddressTable.')
hpnicfSecureAddrVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 2, 2, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfSecureAddrVlanID.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureAddrVlanID.setDescription('The Vlan ID associate with the port and the MAC address. This is the third index into the hpnicfSecureAddressTable.')
hpnicfSecureAddrMACStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("addressBlackhole", 1), ("addressUserConfig", 2), ("addressDot1xAuth", 3), ("addressRALM", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfSecureAddrMACStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureAddrMACStatus.setDescription('The state of the mac address assigned to this port. addressBlackhole (1) the mac address is a blackhole address, Each packet whose source address is equal to this address will be dropped by the agent. addressUserConfig (2) the mac address configed by user with this state are preserved across power cycles and resets. addressDot1xAuth (3) the mac address is authorized by 802.1x authenticator, User can not configure this mac address. This value is used for GET and GETNEXT operation. addressRALM (4) the mac address is authorized by RALM authenticator, User can not configure this mac address. This value is used for GET and GETNEXT operation. ')
hpnicfSecureAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 2, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfSecureAddrRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureAddrRowStatus.setDescription('This manages the creation and deletion or rows, and shows the current status of the indexed MAC address. This object has the following values. active(1) The indexed MAC address is authorised on this port. notInService(2) Not Supported. notReady(3) Not Supported. createAndGo(4) Assign a new MAC address to the port and authorise immediately. createAndWait(5) Not Supported. destroy(6) Delete this entry. When creating a new entry, index a new row and use createAndGo(4). When reading this object, only active(1) will be returned. ')
hpnicfSecureOUITable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 2, 3), )
if mibBuilder.loadTexts: hpnicfSecureOUITable.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureOUITable.setDescription('This table stores the OUI values for OUI based authentication.')
hpnicfSecureOUIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 2, 3, 1), ).setIndexNames((0, "HPN-ICF-PORT-SECURITY-MIB", "hpnicfSecureOUIIndex"))
if mibBuilder.loadTexts: hpnicfSecureOUIEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureOUIEntry.setDescription('This is a row in the hpnicfSecureOUITable.')
hpnicfSecureOUIIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: hpnicfSecureOUIIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureOUIIndex.setDescription('The index number. This is the first index into the hpnicfSecureOUITable.')
hpnicfSecureOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 2, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfSecureOUI.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureOUI.setDescription('The OUI value for an authorised device.')
hpnicfSecureOUIRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 2, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfSecureOUIRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureOUIRowStatus.setDescription('This manages the creation and deletion of rows, and shows the current status of the entry. active(1) The indexed OUI value is authorised. notInService(2) Not Supported. notReady(3) Not Supported. createAndGo(4) Assign a new OUI to the unit and authorise immediately. createAndWait(5) Not Supported. destroy(6) Delete this entry. When creating a new entry, index a new row and use createAndGo(4) . When reading this object, only active(1) will be returned. ')
hpnicfSecureBindingTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 2, 4), )
if mibBuilder.loadTexts: hpnicfSecureBindingTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureBindingTable.setDescription('This table stores the elements of binding rules include the MAC addresses, the IP address and the port. Only the frame exactly matching the binding rules can be forwarded. This table can be written to by the agent as well as the management station.')
hpnicfSecureBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 2, 4, 1), ).setIndexNames((0, "HPN-ICF-PORT-SECURITY-MIB", "hpnicfSecureBindingIndex"))
if mibBuilder.loadTexts: hpnicfSecureBindingEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureBindingEntry.setDescription('This table allows multiple binding rules. It is indexed using the object hpnicfSecureBindingIndex.')
hpnicfSecureBindingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 2, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfSecureBindingIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureBindingIndex.setDescription('The index number. This is the first index into the hpnicfSecureBindingTable.')
hpnicfSecureBindingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 2, 4, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfSecureBindingPort.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureBindingPort.setDescription('The port number of the port bound with the IP address and the MAC address.')
hpnicfSecureBindingAddrMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 2, 4, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfSecureBindingAddrMAC.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureBindingAddrMAC.setDescription('The MAC address bound with the port and the IP address.')
hpnicfSecureBindingAddrIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 2, 4, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfSecureBindingAddrIp.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureBindingAddrIp.setDescription('The IP address bound with the port and the MAC address.')
hpnicfSecureBindingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 2, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfSecureBindingRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureBindingRowStatus.setDescription('This manages the creation and deletion or rows, and shows status of the entry. This object has the following values. active(1) The indexed MAC address is authorised on this port. notInService(2) Not Supported. notReady(3) Not Supported. createAndGo(4) Assign a new MAC address to the port and authorise immediately. createAndWait(5) Not Supported. destroy(6) Delete this entry. When creating a new entry, index a new row and use createAndGo(4). When reading this object, only active(1) will be returned. ')
hpnicfSecureAssignTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 2, 5), )
if mibBuilder.loadTexts: hpnicfSecureAssignTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureAssignTable.setDescription('Table of port assignment management information about authorised user.')
hpnicfSecureAssignEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 2, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfSecureAssignEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureAssignEntry.setDescription('An entry (conceptual row) representing information about port assignment about authorised user.')
hpnicfSecureAssignEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 2, 5, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSecureAssignEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureAssignEnable.setDescription('The user-based port configuration control. Setting this attribute TRUE causes the port to be configured with any configuration parameters supplied by the authentication server. Setting this attribute to FALSE causes any configuration parameters supplied by the authentication server to be ignored.')
hpnicfSecureVlanAssignment = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 2, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfSecureVlanAssignment.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureVlanAssignment.setDescription('The VLAN membership assigned to the port for the authorised user. This contains the actual value received from the authentication server. This object will contain a null value if there is no user authorised to access the port or if the authorised user was not assigned a VLAN membership.')
hpnicfPortSecurityNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 3))
hpnicfSecureAddressLearned = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 3, 1)).setObjects(("IF-MIB", "ifIndex"), ("HPN-ICF-PORT-SECURITY-MIB", "hpnicfSecureAddrMAC"))
if mibBuilder.loadTexts: hpnicfSecureAddressLearned.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureAddressLearned.setDescription('This trap is sent when a new station has been learned. The port on which the address was received is the first object, and the MAC address of the learned station is in the second object.')
hpnicfSecureViolation = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 3, 2)).setObjects(("IF-MIB", "ifIndex"), ("HPN-ICF-PORT-SECURITY-MIB", "hpnicfSecureAddrMAC"), ("IF-MIB", "ifAdminStatus"))
if mibBuilder.loadTexts: hpnicfSecureViolation.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureViolation.setDescription('This trap is sent whenever a security violation has occurred. The port on which the violation occured is the first object, and the MAC address of the offending station is in the second object. ifAdminStatus indicates if the port has been disabled because of the violation. The implementation may not send violation traps from the same port at intervals of less than 5 seconds.')
hpnicfSecureLoginFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 3, 3)).setObjects(("IF-MIB", "ifIndex"), ("HPN-ICF-PORT-SECURITY-MIB", "hpnicfSecureAddrMAC"), ("IEEE8021-PAE-MIB", "dot1xAuthSessionUserName"))
if mibBuilder.loadTexts: hpnicfSecureLoginFailure.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureLoginFailure.setDescription('This trap is sent whenever a user network access authentication has failed. The port on which the violation occured is the first object, and the MAC address of the offending station is in the second object. The dot1xAuthSessionUserName is the identity supplied during the user authentication.')
hpnicfSecureLogon = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 3, 4)).setObjects(("IF-MIB", "ifIndex"), ("HPN-ICF-PORT-SECURITY-MIB", "hpnicfSecureAddrMAC"), ("IEEE8021-PAE-MIB", "dot1xAuthSessionUserName"), ("IEEE8021-PAE-MIB", "dot1xAuthSessionAuthenticMethod"), ("HPN-ICF-PORT-SECURITY-MIB", "hpnicfSecurePortVlanMembershipList"))
if mibBuilder.loadTexts: hpnicfSecureLogon.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureLogon.setDescription('This trap is sent when a new session is started for an authorised port user. The port on which the violation occured is the first object, and the MAC address of the offending station is in the second object. The dot1xAuthSessionUserName is the identity supplied during the user authentication. The dot1xAuthSessionAuthenticMethod indicates how the user was authorised. The hpnicfSecurePortVlanMembershipList object identifies the VLAN membership assigned to the port on session activation.')
hpnicfSecureLogoff = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 3, 5)).setObjects(("IF-MIB", "ifIndex"), ("HPN-ICF-PORT-SECURITY-MIB", "hpnicfSecureAddrMAC"), ("IEEE8021-PAE-MIB", "dot1xAuthSessionUserName"), ("IEEE8021-PAE-MIB", "dot1xAuthSessionTerminateCause"), ("HPN-ICF-PORT-SECURITY-MIB", "hpnicfSecurePortVlanMembershipList"))
if mibBuilder.loadTexts: hpnicfSecureLogoff.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureLogoff.setDescription('This trap is sent when a user session is terminated. The port on which the violation occured is the first object, and the MAC address of the offending station is in the second object. The dot1xAuthSessionUserName is the identity supplied during the user authentication. The dot1xAuthSessionTerminateCause indicates the reason why the session was terminated. The hpnicfSecurePortVlanMembershipList object identifies the VLAN membership assigned to the port on session termination.')
hpnicfSecureRalmLoginFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 3, 6)).setObjects(("IF-MIB", "ifIndex"), ("HPN-ICF-PORT-SECURITY-MIB", "hpnicfSecureAddrMAC"), ("HPN-ICF-PORT-SECURITY-MIB", "hpnicfSecureRalmAuthMode"), ("HPN-ICF-PORT-SECURITY-MIB", "hpnicfSecureRalmAuthUsername"))
if mibBuilder.loadTexts: hpnicfSecureRalmLoginFailure.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureRalmLoginFailure.setDescription('This trap is sent whenever a user network access authentication has failed. The port on which the violation occured is the first object, and the MAC address of the offending station is in the second object. The authentication mode indicates how the user was authorised. The hpnicfSecureRalmAuthUsername is the identity supplied during the user authentication.')
hpnicfSecureRalmLogon = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 3, 7)).setObjects(("IF-MIB", "ifIndex"), ("HPN-ICF-PORT-SECURITY-MIB", "hpnicfSecureAddrMAC"), ("HPN-ICF-PORT-SECURITY-MIB", "hpnicfSecureRalmAuthMode"), ("HPN-ICF-PORT-SECURITY-MIB", "hpnicfSecureRalmAuthUsername"), ("HPN-ICF-PORT-SECURITY-MIB", "hpnicfSecurePortVlanMembershipList"))
if mibBuilder.loadTexts: hpnicfSecureRalmLogon.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureRalmLogon.setDescription('This trap is sent when a new session is started for an authorised port user. The port on which the violation occured is the first object, and the MAC address of the offending station is in the second object. The authentication mode indicates how the user was authorised. The hpnicfSecureRalmAuthUsername is the identity supplied during the user authentication. The hpnicfSecurePortVlanMembershipList object identifies the VLAN membership assigned to the port on session activation.')
hpnicfSecureRalmLogoff = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 26, 1, 3, 8)).setObjects(("IF-MIB", "ifIndex"), ("HPN-ICF-PORT-SECURITY-MIB", "hpnicfSecureAddrMAC"), ("HPN-ICF-PORT-SECURITY-MIB", "hpnicfSecureRalmAuthMode"), ("HPN-ICF-PORT-SECURITY-MIB", "hpnicfSecureRalmAuthUsername"), ("HPN-ICF-PORT-SECURITY-MIB", "hpnicfSecurePortVlanMembershipList"))
if mibBuilder.loadTexts: hpnicfSecureRalmLogoff.setStatus('current')
if mibBuilder.loadTexts: hpnicfSecureRalmLogoff.setDescription('This trap is sent when a new session is started for an authorised port user. The port on which the violation occured is the first object, and the MAC address of the offending station is in the second object. The authentication mode indicates how the user was authorised. The hpnicfSecureRalmAuthUsername is the identity supplied during the user authentication. The hpnicfSecurePortVlanMembershipList object identifies the VLAN membership assigned to the port on session activation.')
mibBuilder.exportSymbols("HPN-ICF-PORT-SECURITY-MIB", hpnicfSecureRalmLogon=hpnicfSecureRalmLogon, hpnicfSecureAssignTable=hpnicfSecureAssignTable, hpnicfPortSecurityNotifications=hpnicfPortSecurityNotifications, hpnicfSecureRalmLoginFailure=hpnicfSecureRalmLoginFailure, hpnicfSecureBindingAddrMAC=hpnicfSecureBindingAddrMAC, hpnicfSecureMacControl=hpnicfSecureMacControl, hpnicfSecureRalmReauthenticate=hpnicfSecureRalmReauthenticate, hpnicfSecureAssignEnable=hpnicfSecureAssignEnable, hpnicfSecureAddrMACStatus=hpnicfSecureAddrMACStatus, hpnicfSecureBindingPort=hpnicfSecureBindingPort, hpnicfSecureRalmAuthOfflineTime=hpnicfSecureRalmAuthOfflineTime, hpnicfSecureRalmAuthPassword=hpnicfSecureRalmAuthPassword, hpnicfSecureAssignEntry=hpnicfSecureAssignEntry, PYSNMP_MODULE_ID=hpnicfPortSecurityMIB, hpnicfSecureRalmAuthServerTimeoutTime=hpnicfSecureRalmAuthServerTimeoutTime, hpnicfSecureNeedToKnowMode=hpnicfSecureNeedToKnowMode, hpnicfSecureAddressLearned=hpnicfSecureAddressLearned, hpnicfSecureBindingIndex=hpnicfSecureBindingIndex, hpnicfSecureBindingAddrIp=hpnicfSecureBindingAddrIp, hpnicfSecureNumberAddressesStored=hpnicfSecureNumberAddressesStored, hpnicfSecureVlanAssignment=hpnicfSecureVlanAssignment, hpnicfSecureRalmHoldoffTime=hpnicfSecureRalmHoldoffTime, hpnicfSecureAddrVlanID=hpnicfSecureAddrVlanID, hpnicfSecureRalmAuthDomain=hpnicfSecureRalmAuthDomain, hpnicfSecureBindingTable=hpnicfSecureBindingTable, hpnicfSecureMaximumAddresses=hpnicfSecureMaximumAddresses, hpnicfSecureRalmAuthMode=hpnicfSecureRalmAuthMode, hpnicfSecureOUI=hpnicfSecureOUI, hpnicfSecureAddressTable=hpnicfSecureAddressTable, hpnicfPortSecurityMIB=hpnicfPortSecurityMIB, hpnicfSecureOUITable=hpnicfSecureOUITable, hpnicfSecureViolation=hpnicfSecureViolation, hpnicfPortSecurityLeaf=hpnicfPortSecurityLeaf, hpnicfSecureRalmAuthUsername=hpnicfSecureRalmAuthUsername, hpnicfSecureLogon=hpnicfSecureLogon, hpnicfSecureLoginFailure=hpnicfSecureLoginFailure, hpnicfSecureOUIEntry=hpnicfSecureOUIEntry, hpnicfPortSecurityTables=hpnicfPortSecurityTables, hpnicfSecurePortVlanMembershipList=hpnicfSecurePortVlanMembershipList, hpnicfSecurePortEntry=hpnicfSecurePortEntry, hpnicfSecurePortSecurityControl=hpnicfSecurePortSecurityControl, hpnicfSecurePortTable=hpnicfSecurePortTable, hpnicfSecureRalmObjects=hpnicfSecureRalmObjects, hpnicfSecureAddressEntry=hpnicfSecureAddressEntry, hpnicfSecureLogoff=hpnicfSecureLogoff, hpnicfSecureRalmDefaultSessionTime=hpnicfSecureRalmDefaultSessionTime, hpnicfSecureAddrRowStatus=hpnicfSecureAddrRowStatus, hpnicfSecureBindingRowStatus=hpnicfSecureBindingRowStatus, hpnicfSecureOUIIndex=hpnicfSecureOUIIndex, hpnicfSecureNumberAddresses=hpnicfSecureNumberAddresses, hpnicfSecureIntrusionAction=hpnicfSecureIntrusionAction, hpnicfSecureBindingEntry=hpnicfSecureBindingEntry, hpnicfSecureRalmLogoff=hpnicfSecureRalmLogoff, hpnicfSecurePortMode=hpnicfSecurePortMode, hpnicfSecureOUIRowStatus=hpnicfSecureOUIRowStatus, hpnicfSecureAddrMAC=hpnicfSecureAddrMAC)
