#
# PySNMP MIB module RADLAN-Physicaldescription-old-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RADLAN-Physicaldescription-old-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:48:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
EntitySensorValue, EntitySensorStatus = mibBuilder.importSymbols("ENTITY-SENSOR-MIB", "EntitySensorValue", "EntitySensorStatus")
InterfaceIndexOrZero, ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "ifIndex", "InterfaceIndex")
JackType, = mibBuilder.importSymbols("MAU-MIB", "JackType")
rndErrorDesc, rndErrorSeverity = mibBuilder.importSymbols("RADLAN-DEVICEPARAMS-MIB", "rndErrorDesc", "rndErrorSeverity")
RlEnvMonState, = mibBuilder.importSymbols("RADLAN-HWENVIROMENT", "RlEnvMonState")
rndNotifications, rnd = mibBuilder.importSymbols("RADLAN-MIB", "rndNotifications", "rnd")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Unsigned32, TimeTicks, NotificationType, Counter32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Bits, MibIdentifier, iso, IpAddress, ObjectIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Unsigned32", "TimeTicks", "NotificationType", "Counter32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Bits", "MibIdentifier", "iso", "IpAddress", "ObjectIdentity", "Integer32")
DisplayString, PhysAddress, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "PhysAddress", "RowStatus", "TextualConvention")
rlPhysicalDescription = ModuleIdentity((1, 3, 6, 1, 4, 1, 89, 53))
rlPhysicalDescription.setRevisions(('2006-02-12 00:00', '2003-10-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rlPhysicalDescription.setRevisionsDescriptions(('Removed TRAP-TYPE from IMPORTS.', 'Initial version of this MIB.',))
if mibBuilder.loadTexts: rlPhysicalDescription.setLastUpdated('200602120000Z')
if mibBuilder.loadTexts: rlPhysicalDescription.setOrganization('Radlan Computer Communications Ltd.')
if mibBuilder.loadTexts: rlPhysicalDescription.setContactInfo('radlan.com')
if mibBuilder.loadTexts: rlPhysicalDescription.setDescription('The private MIB module definition for physical device configuration.')
rlPhdMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 89, 53, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdMibVersion.setStatus('current')
if mibBuilder.loadTexts: rlPhdMibVersion.setDescription("MIB's version, the current version is 3. 1: original version 2: a. new tables rlPhdModuleHotSwapTable rlPhdStackOrderTable b. new scalars rlPhdStackReorder rlPhdNumberOfUnits rlPhdMaxNumberOfUnits 3: a. new field rlPhdModuleRole of rlPhdModuleTable b. new scalars rlPhdForceMasterUnit 4: a. new fields rlPhdModuleConnect1 and rlPhdModuleConnect2 of rlPhdModuleTable. 5: a. Prefix rlPhD were replaced by prefix rlPhd b. fields rlPhdModuleConnect1 and rlPhdModuleConnect2 are moved from rlPhdModuleTable to rlPhdStackTable. c. new fiels rlPhdStackSofrwareVer, rlPhdStackProductID and rlPhdStackMacAddr of rlPhdStackTable. d. new scalars rlPhdStackReloadUnit e. new scalars rlPhdStackOrderTopUnit rlPhdStackOrderBottomUnit rlPhdStackOrderPermutation")
rlPhdModuleTable = MibTable((1, 3, 6, 1, 4, 1, 89, 53, 2), )
if mibBuilder.loadTexts: rlPhdModuleTable.setStatus('current')
if mibBuilder.loadTexts: rlPhdModuleTable.setDescription('For each module (board) there is an entry describing it in this module')
rlPhdModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 53, 2, 1), ).setIndexNames((0, "RADLAN-Physicaldescription-old-MIB", "rlPhdModuleStackUnit"), (0, "RADLAN-Physicaldescription-old-MIB", "rlPhdModuleIndex"))
if mibBuilder.loadTexts: rlPhdModuleEntry.setStatus('current')
if mibBuilder.loadTexts: rlPhdModuleEntry.setDescription('A entry of this table specifies a module (board)')
rlPhdModuleStackUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdModuleStackUnit.setStatus('current')
if mibBuilder.loadTexts: rlPhdModuleStackUnit.setDescription('The number of the stack unit')
rlPhdModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdModuleIndex.setStatus('current')
if mibBuilder.loadTexts: rlPhdModuleIndex.setDescription('The number of the module in its stack unit')
rlPhdModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdModuleType.setStatus('current')
if mibBuilder.loadTexts: rlPhdModuleType.setDescription('The index for each module type')
rlPhdModuleStartingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdModuleStartingPort.setStatus('current')
if mibBuilder.loadTexts: rlPhdModuleStartingPort.setDescription('The minimal number of the port residing on this module.')
rlPhdModuleNumberOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdModuleNumberOfPorts.setStatus('current')
if mibBuilder.loadTexts: rlPhdModuleNumberOfPorts.setDescription('The number of ports residing on this module.')
rlPhdModuleRow = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdModuleRow.setStatus('current')
if mibBuilder.loadTexts: rlPhdModuleRow.setDescription('On which row (the uppermost being numbered 1 and the highest row number asigned to the lowest row) this module resides within the chassis of its stack unit.')
rlPhdModuleColumn = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdModuleColumn.setStatus('current')
if mibBuilder.loadTexts: rlPhdModuleColumn.setDescription('On which column (the leftmost being numbered 1 and the highest column number asigned to the rightmost column) this module resides within the chassis of its stack unit.')
rlPhdModuleRole = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("standalone", 1), ("master", 2), ("backup", 3), ("slave", 4))).clone('standalone')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdModuleRole.setStatus('current')
if mibBuilder.loadTexts: rlPhdModuleRole.setDescription('The module role in the stack.')
rlPhdPortsTable = MibTable((1, 3, 6, 1, 4, 1, 89, 53, 3), )
if mibBuilder.loadTexts: rlPhdPortsTable.setStatus('current')
if mibBuilder.loadTexts: rlPhdPortsTable.setDescription('Lists the physical or physical-related attributes of ports')
rlPhdPortsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 53, 3, 1), ).setIndexNames((0, "RADLAN-Physicaldescription-old-MIB", "rlPhdPortsIfIndex"))
if mibBuilder.loadTexts: rlPhdPortsEntry.setStatus('current')
if mibBuilder.loadTexts: rlPhdPortsEntry.setDescription('For each port, a entry describing attributes which are either physical or are derived from the features of the device hardware')
rlPhdPortsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdPortsIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlPhdPortsIfIndex.setDescription('The L2 interface number associated with this port.')
rlPhdPortsIfIndexName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdPortsIfIndexName.setStatus('current')
if mibBuilder.loadTexts: rlPhdPortsIfIndexName.setDescription('The L2 interface number associated with this port, in string format based on the overall hardware architecture of the device (i.e., for monolithic devices just numbers, devices composed of modules (boards, cards) or stackable devices composed of monolithic units in form <module /stack unit number> - <port number on current module /stack unit number>, stackable devices in which each unit is composed of modules <stack unit number> - <module number> - <port number>')
rlPhdPortsMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("copper", 1), ("optic-fiber", 2), ("combo", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdPortsMediaType.setStatus('current')
if mibBuilder.loadTexts: rlPhdPortsMediaType.setDescription('The media type of this port.')
rlPhdPortsStackUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdPortsStackUnit.setStatus('current')
if mibBuilder.loadTexts: rlPhdPortsStackUnit.setDescription('The number of the slot to which this port belongs.')
rlPhdPortsModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdPortsModuleNumber.setStatus('current')
if mibBuilder.loadTexts: rlPhdPortsModuleNumber.setDescription('The number of the stack unit to which this port resides in.')
rlPhdPortsRow = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdPortsRow.setStatus('current')
if mibBuilder.loadTexts: rlPhdPortsRow.setDescription('On which row (the uppermost being numbered 1 and the highest row number asigned to the lowest row) this port resides within its module.')
rlPhdPortsColumn = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdPortsColumn.setStatus('current')
if mibBuilder.loadTexts: rlPhdPortsColumn.setDescription('On which column (the leftmost being numbered 1 and the highest column number asigned to the rightmost column) this this port resides within its module.')
rlPhdConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 3, 1, 8), JackType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdConnectorType.setStatus('current')
if mibBuilder.loadTexts: rlPhdConnectorType.setDescription('Type of connector.')
rlPhdPortHaul = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-relevant", 1), ("short", 2), ("long", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdPortHaul.setStatus('current')
if mibBuilder.loadTexts: rlPhdPortHaul.setDescription('Distance supported by this port.')
rlPhdStackTable = MibTable((1, 3, 6, 1, 4, 1, 89, 53, 4), )
if mibBuilder.loadTexts: rlPhdStackTable.setStatus('current')
if mibBuilder.loadTexts: rlPhdStackTable.setDescription('For each stack unit there is an entry describing it in this table')
rlPhdStackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 53, 4, 1), ).setIndexNames((0, "RADLAN-Physicaldescription-old-MIB", "rlPhdStackUnit"))
if mibBuilder.loadTexts: rlPhdStackEntry.setStatus('current')
if mibBuilder.loadTexts: rlPhdStackEntry.setDescription('A entry of this table specifies a stack unit')
rlPhdStackUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdStackUnit.setStatus('current')
if mibBuilder.loadTexts: rlPhdStackUnit.setDescription('The stack unit described by this entry.')
rlPhdStackType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdStackType.setStatus('current')
if mibBuilder.loadTexts: rlPhdStackType.setDescription('The type of the stack unit described by this entry: 1 - box 3202 2 - box LG 3 - bcm 4 - prestera')
rlPhdStackConnect1 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdStackConnect1.setStatus('current')
if mibBuilder.loadTexts: rlPhdStackConnect1.setDescription('The unit number connected to the Hyper GLink left side connection - 0 means not connected; other integer indicates the unit number.')
rlPhdStackConnect2 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdStackConnect2.setStatus('current')
if mibBuilder.loadTexts: rlPhdStackConnect2.setDescription('The unit number connected to the Hyper GLink right side connection - 0 means not connected; other integer indicates the unit number.')
rlPhdStackSofrwareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdStackSofrwareVer.setStatus('current')
if mibBuilder.loadTexts: rlPhdStackSofrwareVer.setDescription('The Software version of the unit.')
rlPhdStackProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdStackProductID.setStatus('current')
if mibBuilder.loadTexts: rlPhdStackProductID.setDescription('The Product ID of the unit.')
rlPhdStackMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 4, 1, 7), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdStackMacAddr.setStatus('current')
if mibBuilder.loadTexts: rlPhdStackMacAddr.setDescription('The physical (MAC) address of the unit.')
rlPhdModuleHotSwapTable = MibTable((1, 3, 6, 1, 4, 1, 89, 53, 5), )
if mibBuilder.loadTexts: rlPhdModuleHotSwapTable.setStatus('current')
if mibBuilder.loadTexts: rlPhdModuleHotSwapTable.setDescription('For each module (board) there is an entry describing its Hot Swap status')
rlPhdModuleHotSwapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 53, 5, 1), ).setIndexNames((0, "RADLAN-Physicaldescription-old-MIB", "rlPhdModuleStackUnit"), (0, "RADLAN-Physicaldescription-old-MIB", "rlPhdModuleIndex"))
if mibBuilder.loadTexts: rlPhdModuleHotSwapEntry.setStatus('current')
if mibBuilder.loadTexts: rlPhdModuleHotSwapEntry.setDescription('A entry of this table specifies a module (board) Hot Swap status')
rlPhdModuleHotSwapAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPhdModuleHotSwapAdminStatus.setStatus('current')
if mibBuilder.loadTexts: rlPhdModuleHotSwapAdminStatus.setDescription('The desired state of the module. The off(1) state indicates that the module is not used and its rlPhdModuleHotSwapOperStatus is always off(2). The on{1) state indicates that the module may be used and its rlPhdModuleHotSwapOperStatus will be on(1) if it presents and off(2) if it does not present.')
rlPhdModuleHotSwapOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdModuleHotSwapOperStatus.setStatus('current')
if mibBuilder.loadTexts: rlPhdModuleHotSwapOperStatus.setDescription('The current Hot Swap state of the module. If rlPhdModuleHotSwapAdminStatus is down(2) then rlPhdModuleHotSwapOperStatus should be down(2). If rlPhdModuleHotSwapAdminStatus is changed to up(1) then rlPhdModuleHotSwapOperStatus should change to up(1) if the module presents; it should remain in the down(2) state if and only if the module does not present.')
rlPhdStackOrderTable = MibTable((1, 3, 6, 1, 4, 1, 89, 53, 6), )
if mibBuilder.loadTexts: rlPhdStackOrderTable.setStatus('current')
if mibBuilder.loadTexts: rlPhdStackOrderTable.setDescription('This table enables the user to configure the order of the stack units as displayed on his GUI. The order of the entries in this table corresponds to the last configured order. If the stack units order was never configured, the order will be the same as in the rlPhdStackTable.')
rlPhdStackOrderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 53, 6, 1), ).setIndexNames((0, "RADLAN-Physicaldescription-old-MIB", "rlPhdStackOrderCurrentUnitPosition"))
if mibBuilder.loadTexts: rlPhdStackOrderEntry.setStatus('current')
if mibBuilder.loadTexts: rlPhdStackOrderEntry.setDescription('A entry of this table specifies a stack unit in the position desired by the user')
rlPhdStackOrderCurrentUnitPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: rlPhdStackOrderCurrentUnitPosition.setStatus('current')
if mibBuilder.loadTexts: rlPhdStackOrderCurrentUnitPosition.setDescription('The current stack unit position.')
rlPhdStackOrderDesiredUnitPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 6, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPhdStackOrderDesiredUnitPosition.setStatus('current')
if mibBuilder.loadTexts: rlPhdStackOrderDesiredUnitPosition.setDescription('The desired stack unit position. Note that setting this MIB object will take effect only after setting the rlPhdStackReorder MIB object below. After setting this MIB object and until a further change of at least one instance of the rlPhdStackOrderDesiredUnitPosition object, the values of the rlPhdStackOrderCurrentUnitPosition objectinstance and the corresponding rlPhdStackOrderDesiredUnitPosition object instance will be the same.')
rlPhdStackOrderUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 6, 1, 3), Integer32())
if mibBuilder.loadTexts: rlPhdStackOrderUnitIndex.setStatus('current')
if mibBuilder.loadTexts: rlPhdStackOrderUnitIndex.setDescription('This is the original unit index, i.e. has the same value as rlPhdStackUnit above.')
rlPhdStackOrderUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdStackOrderUnitType.setStatus('current')
if mibBuilder.loadTexts: rlPhdStackOrderUnitType.setDescription('The type of the stack unit described by this entry. It has the same value as rlPhdStackType above. This information is duplicated here only for easier retrieval by the device manager.')
rlPhdStackReorder = MibScalar((1, 3, 6, 1, 4, 1, 89, 53, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reorder", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPhdStackReorder.setStatus('current')
if mibBuilder.loadTexts: rlPhdStackReorder.setDescription('Setting this MIB object will cause the settings of the rlPhdStackOrderDesiredUnitPosition MIB object instances to take effect. After setting this MIB object and until a further change of at least one instance of the rlPhdStackOrderDesiredUnitPosition object, the values of the rlPhdStackOrderCurrentUnitPosition objectinstance and the corresponding rlPhdStackOrderDesiredUnitPosition object instance will be the same.')
rlPhdNumberOfUnits = MibScalar((1, 3, 6, 1, 4, 1, 89, 53, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdNumberOfUnits.setStatus('current')
if mibBuilder.loadTexts: rlPhdNumberOfUnits.setDescription('Shows the current number of units in the stack.')
rlPhdMaxNumberOfUnits = MibScalar((1, 3, 6, 1, 4, 1, 89, 53, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdMaxNumberOfUnits.setStatus('current')
if mibBuilder.loadTexts: rlPhdMaxNumberOfUnits.setDescription('Shows the maximum number of units in the stack.')
rlPhdForceMasterUnit = MibScalar((1, 3, 6, 1, 4, 1, 89, 53, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPhdForceMasterUnit.setStatus('current')
if mibBuilder.loadTexts: rlPhdForceMasterUnit.setDescription('Force unit to be master.')
rlPhdStackFixedUnit = MibScalar((1, 3, 6, 1, 4, 1, 89, 53, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPhdStackFixedUnit.setStatus('current')
if mibBuilder.loadTexts: rlPhdStackFixedUnit.setDescription('Determine which unit will be on bottom/top of list on Show-List command(see .')
rlPhdStackFixedUnitLocation = MibScalar((1, 3, 6, 1, 4, 1, 89, 53, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bottom", 1), ("top", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPhdStackFixedUnitLocation.setStatus('current')
if mibBuilder.loadTexts: rlPhdStackFixedUnitLocation.setDescription('Determine the bottom/top object in the stack table.')
rlPhdStackReloadUnit = MibScalar((1, 3, 6, 1, 4, 1, 89, 53, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPhdStackReloadUnit.setStatus('current')
if mibBuilder.loadTexts: rlPhdStackReloadUnit.setDescription('Reset a specific unit.')
rlPhdUnitGenParamTable = MibTable((1, 3, 6, 1, 4, 1, 89, 53, 14), )
if mibBuilder.loadTexts: rlPhdUnitGenParamTable.setStatus('current')
if mibBuilder.loadTexts: rlPhdUnitGenParamTable.setDescription('For each module (board) there is an entry describing it in this module')
rlPhdUnitGenParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 53, 14, 1), ).setIndexNames((0, "RADLAN-Physicaldescription-old-MIB", "rlPhdUnitGenParamStackUnit"))
if mibBuilder.loadTexts: rlPhdUnitGenParamEntry.setStatus('current')
if mibBuilder.loadTexts: rlPhdUnitGenParamEntry.setDescription('A entry of this table specifies a module (board)')
rlPhdUnitGenParamStackUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdUnitGenParamStackUnit.setStatus('current')
if mibBuilder.loadTexts: rlPhdUnitGenParamStackUnit.setDescription("The index of the stack unit to which this conceptual row corresponds. Note that the index will be the same index as the index of a 'chassis' physical entity in the entity MIB of the product.")
rlPhdUnitGenParamSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 14, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdUnitGenParamSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: rlPhdUnitGenParamSoftwareVersion.setDescription('Serial number of the product.')
rlPhdUnitGenParamFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 14, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdUnitGenParamFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: rlPhdUnitGenParamFirmwareVersion.setDescription('Serial number of the product.')
rlPhdUnitGenParamHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 14, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdUnitGenParamHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: rlPhdUnitGenParamHardwareVersion.setDescription('Serial number of the product.')
rlPhdUnitGenParamSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 14, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPhdUnitGenParamSerialNum.setStatus('current')
if mibBuilder.loadTexts: rlPhdUnitGenParamSerialNum.setDescription('Serial number of the product.')
rlPhdUnitGenParamAssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 14, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPhdUnitGenParamAssetTag.setStatus('current')
if mibBuilder.loadTexts: rlPhdUnitGenParamAssetTag.setDescription('Serial number of the product.')
rlPhdUnitGenParamServiceTag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 14, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdUnitGenParamServiceTag.setStatus('current')
if mibBuilder.loadTexts: rlPhdUnitGenParamServiceTag.setDescription('Asset tag of the product.')
rlPhdUnitGenParamSoftwareDate = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 14, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdUnitGenParamSoftwareDate.setStatus('current')
if mibBuilder.loadTexts: rlPhdUnitGenParamSoftwareDate.setDescription("Date of product's software.")
rlPhdUnitGenParamFirmwareDate = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 14, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdUnitGenParamFirmwareDate.setStatus('current')
if mibBuilder.loadTexts: rlPhdUnitGenParamFirmwareDate.setDescription("Date of product's firmware.")
rlPhdUnitGenParamManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 14, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdUnitGenParamManufacturer.setStatus('current')
if mibBuilder.loadTexts: rlPhdUnitGenParamManufacturer.setDescription("Product's Manufacturer.")
rlPhdUnitGenParamModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 14, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdUnitGenParamModelName.setStatus('current')
if mibBuilder.loadTexts: rlPhdUnitGenParamModelName.setDescription('Model Name.')
rlPhdUnitGenParamMd5ChksumBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 14, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdUnitGenParamMd5ChksumBoot.setStatus('current')
if mibBuilder.loadTexts: rlPhdUnitGenParamMd5ChksumBoot.setDescription('MD5 Checksum for Boot')
rlPhdUnitGenParamMd5ChksumImage1 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 14, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdUnitGenParamMd5ChksumImage1.setStatus('current')
if mibBuilder.loadTexts: rlPhdUnitGenParamMd5ChksumImage1.setDescription('MD5 Checksum for Image 1')
rlPhdUnitGenParamMd5ChksumImage2 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 14, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdUnitGenParamMd5ChksumImage2.setStatus('current')
if mibBuilder.loadTexts: rlPhdUnitGenParamMd5ChksumImage2.setDescription('MD5 Checksum for Image 2')
rlPhdUnitGenParamCpldVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 14, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdUnitGenParamCpldVersion.setStatus('current')
if mibBuilder.loadTexts: rlPhdUnitGenParamCpldVersion.setDescription('CPLD version of the product.')
rlPhdUnitEnvParamTable = MibTable((1, 3, 6, 1, 4, 1, 89, 53, 15), )
if mibBuilder.loadTexts: rlPhdUnitEnvParamTable.setStatus('current')
if mibBuilder.loadTexts: rlPhdUnitEnvParamTable.setDescription('For each module (board) there is an entry describing it in this module')
rlPhdUnitEnvParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 53, 15, 1), ).setIndexNames((0, "RADLAN-Physicaldescription-old-MIB", "rlPhdUnitEnvParamStackUnit"))
if mibBuilder.loadTexts: rlPhdUnitEnvParamEntry.setStatus('current')
if mibBuilder.loadTexts: rlPhdUnitEnvParamEntry.setDescription('A entry of this table specifies a module (board)')
rlPhdUnitEnvParamStackUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdUnitEnvParamStackUnit.setStatus('current')
if mibBuilder.loadTexts: rlPhdUnitEnvParamStackUnit.setDescription("The index of the stack unit to which this conceptual row corresponds. Note that the index will be the same index as the index of a 'chassis' physical entity in the entity MIB of the product.")
rlPhdUnitEnvParamMainPSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 15, 1, 2), RlEnvMonState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdUnitEnvParamMainPSStatus.setStatus('current')
if mibBuilder.loadTexts: rlPhdUnitEnvParamMainPSStatus.setDescription('The mandatory state of the main PS being instrumented.')
rlPhdUnitEnvParamRedundantPSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 15, 1, 3), RlEnvMonState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdUnitEnvParamRedundantPSStatus.setStatus('current')
if mibBuilder.loadTexts: rlPhdUnitEnvParamRedundantPSStatus.setDescription('The mandatory state of the redundant PS being instrumented.')
rlPhdUnitEnvParamFan1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 15, 1, 4), RlEnvMonState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdUnitEnvParamFan1Status.setStatus('current')
if mibBuilder.loadTexts: rlPhdUnitEnvParamFan1Status.setDescription('The mandatory state of the FAN 1 being instrumented.')
rlPhdUnitEnvParamFan2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 15, 1, 5), RlEnvMonState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdUnitEnvParamFan2Status.setStatus('current')
if mibBuilder.loadTexts: rlPhdUnitEnvParamFan2Status.setDescription('The mandatory state of the FAN 2 being instrumented.')
rlPhdUnitEnvParamFan3Status = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 15, 1, 6), RlEnvMonState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdUnitEnvParamFan3Status.setStatus('current')
if mibBuilder.loadTexts: rlPhdUnitEnvParamFan3Status.setDescription('The mandatory state of the FAN 3 being instrumented.')
rlPhdUnitEnvParamFan4Status = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 15, 1, 7), RlEnvMonState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdUnitEnvParamFan4Status.setStatus('current')
if mibBuilder.loadTexts: rlPhdUnitEnvParamFan4Status.setDescription('The mandatory state of the FAN 4 being instrumented.')
rlPhdUnitEnvParamFan5Status = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 15, 1, 8), RlEnvMonState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdUnitEnvParamFan5Status.setStatus('current')
if mibBuilder.loadTexts: rlPhdUnitEnvParamFan5Status.setDescription('The mandatory state of the FAN 5 being instrumented.')
rlPhdUnitEnvParamTempSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 15, 1, 9), EntitySensorValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdUnitEnvParamTempSensorValue.setStatus('current')
if mibBuilder.loadTexts: rlPhdUnitEnvParamTempSensorValue.setDescription('Current value for the Sensor being instrumented.')
rlPhdUnitEnvParamTempSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 15, 1, 10), EntitySensorStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdUnitEnvParamTempSensorStatus.setStatus('current')
if mibBuilder.loadTexts: rlPhdUnitEnvParamTempSensorStatus.setDescription('Status value for the Sensor being instrumented.')
rlPhdUnitEnvParamUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 15, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdUnitEnvParamUpTime.setStatus('current')
if mibBuilder.loadTexts: rlPhdUnitEnvParamUpTime.setDescription('Up time of the unit in 100th of second (sec/100).')
rlPhdUnitEnvParamTempSensor2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 15, 1, 12), EntitySensorValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdUnitEnvParamTempSensor2Value.setStatus('current')
if mibBuilder.loadTexts: rlPhdUnitEnvParamTempSensor2Value.setDescription('Current value for the Sensor2 being instrumented.')
rlPhdUnitEnvParamTempSensor2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 15, 1, 13), EntitySensorStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdUnitEnvParamTempSensor2Status.setStatus('current')
if mibBuilder.loadTexts: rlPhdUnitEnvParamTempSensor2Status.setDescription('Status value for the Sensor2 being instrumented.')
rlPhdUnitEnvParamTempSensor3Value = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 15, 1, 14), EntitySensorValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdUnitEnvParamTempSensor3Value.setStatus('current')
if mibBuilder.loadTexts: rlPhdUnitEnvParamTempSensor3Value.setDescription('Current value for the Sensor3 being instrumented.')
rlPhdUnitEnvParamTempSensor3Status = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 15, 1, 15), EntitySensorStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdUnitEnvParamTempSensor3Status.setStatus('current')
if mibBuilder.loadTexts: rlPhdUnitEnvParamTempSensor3Status.setDescription('Status value for the Sensor3 being instrumented.')
rlPhdUnitEnvParamTempSensor4Value = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 15, 1, 16), EntitySensorValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdUnitEnvParamTempSensor4Value.setStatus('current')
if mibBuilder.loadTexts: rlPhdUnitEnvParamTempSensor4Value.setDescription('Current value for the Sensor4 being instrumented.')
rlPhdUnitEnvParamTempSensor4Status = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 15, 1, 17), EntitySensorStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdUnitEnvParamTempSensor4Status.setStatus('current')
if mibBuilder.loadTexts: rlPhdUnitEnvParamTempSensor4Status.setDescription('Status value for the Sensor4 being instrumented.')
rlPhdUnitEnvParamTempSensor5Value = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 15, 1, 18), EntitySensorValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdUnitEnvParamTempSensor5Value.setStatus('current')
if mibBuilder.loadTexts: rlPhdUnitEnvParamTempSensor5Value.setDescription('Current value for the Sensor5 being instrumented.')
rlPhdUnitEnvParamTempSensor5Status = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 15, 1, 19), EntitySensorStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdUnitEnvParamTempSensor5Status.setStatus('current')
if mibBuilder.loadTexts: rlPhdUnitEnvParamTempSensor5Status.setDescription('Status value for the Sensor5 being instrumented.')
rlPhdStackOrderTopUnit = MibScalar((1, 3, 6, 1, 4, 1, 89, 53, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPhdStackOrderTopUnit.setStatus('current')
if mibBuilder.loadTexts: rlPhdStackOrderTopUnit.setDescription('This scalar mib holds the Top unit for the stack order command')
rlPhdStackOrderBottomUnit = MibScalar((1, 3, 6, 1, 4, 1, 89, 53, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPhdStackOrderBottomUnit.setStatus('current')
if mibBuilder.loadTexts: rlPhdStackOrderBottomUnit.setDescription('This scalar mib holds the Bottom unit for the stack order command')
rlPhdStackOrderPermutation = MibScalar((1, 3, 6, 1, 4, 1, 89, 53, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPhdStackOrderPermutation.setStatus('current')
if mibBuilder.loadTexts: rlPhdStackOrderPermutation.setDescription('This scalar mib holds stack permutation')
rlPhdNumberOfPoeUnits = MibScalar((1, 3, 6, 1, 4, 1, 89, 53, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdNumberOfPoeUnits.setStatus('current')
if mibBuilder.loadTexts: rlPhdNumberOfPoeUnits.setDescription('Shows the current number of poe units in the stack.')
rlPhdPoeTable = MibTable((1, 3, 6, 1, 4, 1, 89, 53, 20), )
if mibBuilder.loadTexts: rlPhdPoeTable.setStatus('current')
if mibBuilder.loadTexts: rlPhdPoeTable.setDescription('For each module (board) there is an entry describing it in this module')
rlPhdPoeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 53, 20, 1), ).setIndexNames((0, "RADLAN-Physicaldescription-old-MIB", "rlPhdPoeStackUnit"))
if mibBuilder.loadTexts: rlPhdPoeEntry.setStatus('current')
if mibBuilder.loadTexts: rlPhdPoeEntry.setDescription('A entry of this table specifies a module (board)')
rlPhdPoeStackUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdPoeStackUnit.setStatus('current')
if mibBuilder.loadTexts: rlPhdPoeStackUnit.setDescription('The stack unit to which this module belongs.')
rlPhdPoePresent = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPhdPoePresent.setStatus('current')
if mibBuilder.loadTexts: rlPhdPoePresent.setDescription('The present state of the PoE module. The no(1) state indicates that the PoE module is not present. The yes{2) state indicates that the PoE module is present.')
rlPhdPhyLedStackUnit = MibScalar((1, 3, 6, 1, 4, 1, 89, 53, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPhdPhyLedStackUnit.setStatus('current')
if mibBuilder.loadTexts: rlPhdPhyLedStackUnit.setDescription('This scalar mib holds the unit number for the stack light command')
rlPhdPhyLedTimeout = MibScalar((1, 3, 6, 1, 4, 1, 89, 53, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPhdPhyLedTimeout.setStatus('current')
if mibBuilder.loadTexts: rlPhdPhyLedTimeout.setDescription('This scalar mib holds the timeout for the stack light command. May be in the range 2..60 sec. (default - 5 sec.), if the timeout = 0 - all units return to normal state.')
rlCascadeTable = MibTable((1, 3, 6, 1, 4, 1, 89, 53, 23), )
if mibBuilder.loadTexts: rlCascadeTable.setStatus('current')
if mibBuilder.loadTexts: rlCascadeTable.setDescription('For each cascaded port for stacking unit there is an entry describing it in this table')
rlCascadeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 53, 23, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rlCascadeEntry.setStatus('current')
if mibBuilder.loadTexts: rlCascadeEntry.setDescription('An entry of this table specifies a cascaded link information in a unit')
rlCascadeNeighborIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 23, 1, 1), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCascadeNeighborIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlCascadeNeighborIfIndex.setDescription('The ifIndex of a stacking port in the neighbor unit - 0 means not connected; other integer indicates the IfIndex.')
rlCascadeNeighborUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 23, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCascadeNeighborUnit.setStatus('current')
if mibBuilder.loadTexts: rlCascadeNeighborUnit.setDescription('The unit number of the neighbor unit - 0 means not connected; other integer indicates the unit number.')
rlCascadeTrunkId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 23, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCascadeTrunkId.setStatus('current')
if mibBuilder.loadTexts: rlCascadeTrunkId.setDescription('The id of the trunk, the stacking port is member, zero if the port is not member of trunk.')
rlCascadeUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 23, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCascadeUnitId.setStatus('current')
if mibBuilder.loadTexts: rlCascadeUnitId.setDescription('The unit number matching the current ifIndex')
rlCascadeAfterResetTable = MibTable((1, 3, 6, 1, 4, 1, 89, 53, 24), )
if mibBuilder.loadTexts: rlCascadeAfterResetTable.setStatus('current')
if mibBuilder.loadTexts: rlCascadeAfterResetTable.setDescription('For each cascaded port for stacking unit there is an entry describing it in this table after reset')
rlCascadeAfterResetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 53, 24, 1), ).setIndexNames((0, "RADLAN-Physicaldescription-old-MIB", "rlCascadeIfIndexAfterReset"))
if mibBuilder.loadTexts: rlCascadeAfterResetEntry.setStatus('current')
if mibBuilder.loadTexts: rlCascadeAfterResetEntry.setDescription('A entry of this table specifies a cascaded port information in a unit after reset')
rlCascadeIfIndexAfterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 24, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCascadeIfIndexAfterReset.setStatus('current')
if mibBuilder.loadTexts: rlCascadeIfIndexAfterReset.setDescription('The ifIndex of a stacking port after reset.')
rlCascadeTrunkIdAfterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 24, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCascadeTrunkIdAfterReset.setStatus('current')
if mibBuilder.loadTexts: rlCascadeTrunkIdAfterReset.setDescription('The Id of the trunk, the stacking port will be member after reset, zero if the port is not member of trunk.')
rlCascadeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 53, 24, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlCascadeRowStatus.setStatus('current')
if mibBuilder.loadTexts: rlCascadeRowStatus.setDescription('This object indicates the status of this entry.')
rlStackUnitRemoved = NotificationType((1, 3, 6, 1, 4, 1, 89, 0, 186)).setObjects(("RADLAN-DEVICEPARAMS-MIB", "rndErrorDesc"), ("RADLAN-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlStackUnitRemoved.setStatus('current')
if mibBuilder.loadTexts: rlStackUnitRemoved.setDescription('Trap indicating that a unit was removed from the stack.')
rlStackConfigChangedRingChain = NotificationType((1, 3, 6, 1, 4, 1, 89, 0, 187)).setObjects(("RADLAN-DEVICEPARAMS-MIB", "rndErrorDesc"), ("RADLAN-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlStackConfigChangedRingChain.setStatus('current')
if mibBuilder.loadTexts: rlStackConfigChangedRingChain.setDescription('Trap indicating that the configuration of the stack has changed. - from ring to chain - from chain to ring.')
rlStackBackupUnitRemoved = NotificationType((1, 3, 6, 1, 4, 1, 89, 0, 188)).setObjects(("RADLAN-DEVICEPARAMS-MIB", "rndErrorDesc"), ("RADLAN-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlStackBackupUnitRemoved.setStatus('current')
if mibBuilder.loadTexts: rlStackBackupUnitRemoved.setDescription('Trap indicating that the backup unit was removed from the stack.')
rlStackMasterSwitchover = NotificationType((1, 3, 6, 1, 4, 1, 89, 0, 189)).setObjects(("RADLAN-DEVICEPARAMS-MIB", "rndErrorDesc"), ("RADLAN-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlStackMasterSwitchover.setStatus('current')
if mibBuilder.loadTexts: rlStackMasterSwitchover.setDescription('Trap indicating that a new master was elected. The old maste is the backup now. ')
rlStackUnitDifferentSwVersion = NotificationType((1, 3, 6, 1, 4, 1, 89, 0, 190)).setObjects(("RADLAN-DEVICEPARAMS-MIB", "rndErrorDesc"), ("RADLAN-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlStackUnitDifferentSwVersion.setStatus('current')
if mibBuilder.loadTexts: rlStackUnitDifferentSwVersion.setDescription('Trap indicating that the new unit added to the stack has different software version than the master.')
rlStackDuplicateUnitNotJoin = NotificationType((1, 3, 6, 1, 4, 1, 89, 0, 191)).setObjects(("RADLAN-DEVICEPARAMS-MIB", "rndErrorDesc"), ("RADLAN-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlStackDuplicateUnitNotJoin.setStatus('current')
if mibBuilder.loadTexts: rlStackDuplicateUnitNotJoin.setDescription('Trap indicating that a new unit with duplicated unit id was added to the stack - but it will not join the stack.')
rlStackLinkChange = NotificationType((1, 3, 6, 1, 4, 1, 89, 0, 195)).setObjects(("RADLAN-DEVICEPARAMS-MIB", "rndErrorDesc"), ("RADLAN-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlStackLinkChange.setStatus('current')
if mibBuilder.loadTexts: rlStackLinkChange.setDescription('Trap indicating that Link has change in one of the Stacking Ports.')
mibBuilder.exportSymbols("RADLAN-Physicaldescription-old-MIB", rlPhdForceMasterUnit=rlPhdForceMasterUnit, rlPhdPortsTable=rlPhdPortsTable, rlPhdUnitEnvParamFan3Status=rlPhdUnitEnvParamFan3Status, rlCascadeNeighborUnit=rlCascadeNeighborUnit, rlPhdUnitGenParamFirmwareVersion=rlPhdUnitGenParamFirmwareVersion, rlPhdUnitGenParamTable=rlPhdUnitGenParamTable, rlPhdPoeEntry=rlPhdPoeEntry, rlPhdUnitEnvParamFan4Status=rlPhdUnitEnvParamFan4Status, rlPhdPortsModuleNumber=rlPhdPortsModuleNumber, rlPhdModuleIndex=rlPhdModuleIndex, rlPhdUnitGenParamHardwareVersion=rlPhdUnitGenParamHardwareVersion, rlPhdUnitGenParamFirmwareDate=rlPhdUnitGenParamFirmwareDate, rlPhdUnitGenParamCpldVersion=rlPhdUnitGenParamCpldVersion, rlPhdModuleHotSwapOperStatus=rlPhdModuleHotSwapOperStatus, rlPhdStackMacAddr=rlPhdStackMacAddr, rlPhdModuleColumn=rlPhdModuleColumn, rlPhdStackConnect1=rlPhdStackConnect1, rlPhdNumberOfPoeUnits=rlPhdNumberOfPoeUnits, rlPhdUnitGenParamMd5ChksumImage2=rlPhdUnitGenParamMd5ChksumImage2, rlPhdPortsColumn=rlPhdPortsColumn, rlPhdConnectorType=rlPhdConnectorType, rlPhdStackType=rlPhdStackType, rlPhdStackFixedUnitLocation=rlPhdStackFixedUnitLocation, rlPhdStackOrderEntry=rlPhdStackOrderEntry, rlPhdPoePresent=rlPhdPoePresent, rlCascadeNeighborIfIndex=rlCascadeNeighborIfIndex, rlCascadeTable=rlCascadeTable, rlPhdStackOrderTopUnit=rlPhdStackOrderTopUnit, rlPhdStackEntry=rlPhdStackEntry, rlPhdPortsStackUnit=rlPhdPortsStackUnit, rlPhdMibVersion=rlPhdMibVersion, rlPhdModuleRole=rlPhdModuleRole, rlPhdUnitEnvParamTempSensor5Value=rlPhdUnitEnvParamTempSensor5Value, rlPhdUnitEnvParamTempSensor4Value=rlPhdUnitEnvParamTempSensor4Value, rlPhdStackReloadUnit=rlPhdStackReloadUnit, rlPhdUnitEnvParamStackUnit=rlPhdUnitEnvParamStackUnit, rlCascadeAfterResetEntry=rlCascadeAfterResetEntry, rlPhdPortsEntry=rlPhdPortsEntry, rlPhdUnitEnvParamTempSensor2Status=rlPhdUnitEnvParamTempSensor2Status, rlPhdModuleEntry=rlPhdModuleEntry, rlPhdUnitGenParamServiceTag=rlPhdUnitGenParamServiceTag, rlPhdUnitEnvParamTempSensor3Status=rlPhdUnitEnvParamTempSensor3Status, rlPhdUnitEnvParamTempSensor4Status=rlPhdUnitEnvParamTempSensor4Status, rlPhdPortsMediaType=rlPhdPortsMediaType, rlPhdModuleHotSwapEntry=rlPhdModuleHotSwapEntry, rlPhdStackConnect2=rlPhdStackConnect2, rlPhdPhyLedStackUnit=rlPhdPhyLedStackUnit, rlPhdUnitEnvParamFan1Status=rlPhdUnitEnvParamFan1Status, rlPhdStackUnit=rlPhdStackUnit, rlPhdUnitGenParamModelName=rlPhdUnitGenParamModelName, rlPhdMaxNumberOfUnits=rlPhdMaxNumberOfUnits, rlPhdStackProductID=rlPhdStackProductID, rlPhdUnitEnvParamTempSensor3Value=rlPhdUnitEnvParamTempSensor3Value, rlCascadeTrunkId=rlCascadeTrunkId, rlPhdStackOrderUnitType=rlPhdStackOrderUnitType, rlPhdPortHaul=rlPhdPortHaul, rlPhdModuleStackUnit=rlPhdModuleStackUnit, rlPhdModuleTable=rlPhdModuleTable, rlPhdUnitEnvParamTempSensor5Status=rlPhdUnitEnvParamTempSensor5Status, rlStackMasterSwitchover=rlStackMasterSwitchover, rlPhdUnitEnvParamTempSensorStatus=rlPhdUnitEnvParamTempSensorStatus, rlPhdStackSofrwareVer=rlPhdStackSofrwareVer, rlCascadeUnitId=rlCascadeUnitId, rlPhdPortsIfIndex=rlPhdPortsIfIndex, rlPhdNumberOfUnits=rlPhdNumberOfUnits, rlStackUnitRemoved=rlStackUnitRemoved, rlPhdModuleHotSwapAdminStatus=rlPhdModuleHotSwapAdminStatus, rlStackConfigChangedRingChain=rlStackConfigChangedRingChain, rlStackLinkChange=rlStackLinkChange, rlCascadeRowStatus=rlCascadeRowStatus, rlPhdModuleType=rlPhdModuleType, rlPhdStackFixedUnit=rlPhdStackFixedUnit, rlPhdStackOrderCurrentUnitPosition=rlPhdStackOrderCurrentUnitPosition, rlPhdStackTable=rlPhdStackTable, rlPhdUnitGenParamMd5ChksumBoot=rlPhdUnitGenParamMd5ChksumBoot, rlPhysicalDescription=rlPhysicalDescription, rlPhdStackOrderTable=rlPhdStackOrderTable, rlPhdPoeStackUnit=rlPhdPoeStackUnit, rlPhdUnitEnvParamTable=rlPhdUnitEnvParamTable, rlPhdUnitGenParamAssetTag=rlPhdUnitGenParamAssetTag, rlPhdUnitEnvParamFan5Status=rlPhdUnitEnvParamFan5Status, rlPhdUnitGenParamMd5ChksumImage1=rlPhdUnitGenParamMd5ChksumImage1, rlStackDuplicateUnitNotJoin=rlStackDuplicateUnitNotJoin, rlPhdStackOrderUnitIndex=rlPhdStackOrderUnitIndex, rlCascadeEntry=rlCascadeEntry, rlPhdModuleNumberOfPorts=rlPhdModuleNumberOfPorts, rlPhdModuleRow=rlPhdModuleRow, rlPhdUnitEnvParamEntry=rlPhdUnitEnvParamEntry, rlPhdUnitGenParamSerialNum=rlPhdUnitGenParamSerialNum, rlPhdUnitEnvParamMainPSStatus=rlPhdUnitEnvParamMainPSStatus, rlPhdPoeTable=rlPhdPoeTable, rlPhdUnitGenParamEntry=rlPhdUnitGenParamEntry, rlCascadeAfterResetTable=rlCascadeAfterResetTable, PYSNMP_MODULE_ID=rlPhysicalDescription, rlPhdModuleHotSwapTable=rlPhdModuleHotSwapTable, rlStackBackupUnitRemoved=rlStackBackupUnitRemoved, rlPhdUnitGenParamStackUnit=rlPhdUnitGenParamStackUnit, rlPhdUnitEnvParamUpTime=rlPhdUnitEnvParamUpTime, rlPhdModuleStartingPort=rlPhdModuleStartingPort, rlPhdUnitEnvParamTempSensorValue=rlPhdUnitEnvParamTempSensorValue, rlPhdUnitEnvParamFan2Status=rlPhdUnitEnvParamFan2Status, rlPhdPortsRow=rlPhdPortsRow, rlPhdUnitEnvParamRedundantPSStatus=rlPhdUnitEnvParamRedundantPSStatus, rlPhdUnitGenParamSoftwareVersion=rlPhdUnitGenParamSoftwareVersion, rlPhdStackOrderPermutation=rlPhdStackOrderPermutation, rlPhdPortsIfIndexName=rlPhdPortsIfIndexName, rlPhdStackOrderBottomUnit=rlPhdStackOrderBottomUnit, rlPhdUnitGenParamSoftwareDate=rlPhdUnitGenParamSoftwareDate, rlPhdStackReorder=rlPhdStackReorder, rlPhdUnitGenParamManufacturer=rlPhdUnitGenParamManufacturer, rlPhdUnitEnvParamTempSensor2Value=rlPhdUnitEnvParamTempSensor2Value, rlStackUnitDifferentSwVersion=rlStackUnitDifferentSwVersion, rlCascadeTrunkIdAfterReset=rlCascadeTrunkIdAfterReset, rlCascadeIfIndexAfterReset=rlCascadeIfIndexAfterReset, rlPhdStackOrderDesiredUnitPosition=rlPhdStackOrderDesiredUnitPosition, rlPhdPhyLedTimeout=rlPhdPhyLedTimeout)
