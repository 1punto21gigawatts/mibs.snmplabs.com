#
# PySNMP MIB module ZYXEL-ARP-INSPECTION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-ARP-INSPECTION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:49:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
dot1dBasePort, = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBasePort")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, TimeTicks, Counter32, NotificationType, Gauge32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Integer32, ModuleIdentity, ObjectIdentity, Unsigned32, Bits, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "TimeTicks", "Counter32", "NotificationType", "Gauge32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Integer32", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "Bits", "Counter64")
DateAndTime, DisplayString, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "TextualConvention", "MacAddress")
esMgmt, = mibBuilder.importSymbols("ZYXEL-ES-SMI", "esMgmt")
zyxelArpInspection = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12))
if mibBuilder.loadTexts: zyxelArpInspection.setLastUpdated('201207010000Z')
if mibBuilder.loadTexts: zyxelArpInspection.setOrganization('Enterprise Solution ZyXEL')
if mibBuilder.loadTexts: zyxelArpInspection.setContactInfo('')
if mibBuilder.loadTexts: zyxelArpInspection.setDescription('The subtree for arp inspection')
zyxelArpInspectSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 1))
zyxelArpInspectStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2))
zyArpInspectState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyArpInspectState.setStatus('current')
if mibBuilder.loadTexts: zyArpInspectState.setDescription('Enable/Disable ARP inspection on the switch.')
zyArpInspectFilterAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyArpInspectFilterAgingTime.setStatus('current')
if mibBuilder.loadTexts: zyArpInspectFilterAgingTime.setDescription('Enter how long (1-2147483647 seconds) the MAC address filter remains in the switch after the switch identifies an unauthorized ARP packet. The switch automatically deletes the MAC address filter afterwards. Type 0 if you want the MAC address filter to be permanent.')
zyxelArpInspectLog = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 1, 3))
zyArpInspectLogEntries = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyArpInspectLogEntries.setStatus('current')
if mibBuilder.loadTexts: zyArpInspectLogEntries.setDescription('Enter the maximum number (1-1024) of log messages that were generated by ARP packets and have not been sent to the syslog server yet. Make sure this number is appropriate for the specified syslog rate and Log interval. If the number of log messages in the switch exceeds this number, the switch stops recording log messages and simply starts counting the number of entries that were dropped due to unavailable buffer.')
zyArpInspectLogRate = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyArpInspectLogRate.setStatus('current')
if mibBuilder.loadTexts: zyArpInspectLogRate.setDescription('Enter the maximum number of syslog messages the switch can send to the syslog server in one batch. This number is expressed as a rate because the batch frequency is determined by the Log Interval. You must configure the syslog server to use this. Enter 0 if you do not want the switch to send log messages generated by ARP packets to the syslog server.')
zyArpInspectLogInterval = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyArpInspectLogInterval.setStatus('current')
if mibBuilder.loadTexts: zyArpInspectLogInterval.setDescription('Enter how often (1-86400 seconds) the switch sends a batch of syslog messages to the syslog server. Enter 0 if you want the switch to send syslog messages immediately.')
zyxelArpInspectVlanTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 1, 4), )
if mibBuilder.loadTexts: zyxelArpInspectVlanTable.setStatus('current')
if mibBuilder.loadTexts: zyxelArpInspectVlanTable.setDescription('The table contains ARP inspection VLAN configuration.')
zyxelArpInspectVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 1, 4, 1), ).setIndexNames((0, "ZYXEL-ARP-INSPECTION-MIB", "zyArpInspectVlanVid"))
if mibBuilder.loadTexts: zyxelArpInspectVlanEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelArpInspectVlanEntry.setDescription('An entry contains ARP inspection VLAN configuration.')
zyArpInspectVlanVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: zyArpInspectVlanVid.setStatus('current')
if mibBuilder.loadTexts: zyArpInspectVlanVid.setDescription('The VLAN ID of each VLAN.')
zyArpInspectVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 1, 4, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyArpInspectVlanState.setStatus('current')
if mibBuilder.loadTexts: zyArpInspectVlanState.setDescription('Enable/Disable ARP inspection on the VLAN.')
zyArpInspectVlanLog = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("all", 1), ("none", 2), ("permit", 3), ("deny", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyArpInspectVlanLog.setStatus('current')
if mibBuilder.loadTexts: zyArpInspectVlanLog.setDescription('Specify when the switch generates log messages for receiving ARP packets from the VLAN. None: The switch does not generate any log messages when it receives an ARP packet from the VLAN. Deny: The switch generates log messages when it discards an ARP packet from the VLAN. Permit: The switch generates log messages when it forwards an ARP packet from the VLAN. All: The switch generates log messages every time it receives an ARP packet from the VLAN.')
zyxelArpInspectPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 1, 5), )
if mibBuilder.loadTexts: zyxelArpInspectPortTable.setStatus('current')
if mibBuilder.loadTexts: zyxelArpInspectPortTable.setDescription('The table contains ARP inspection port configuration.')
zyxelArpInspectPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 1, 5, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: zyxelArpInspectPortEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelArpInspectPortEntry.setDescription('An entry contains ARP inspection port configuration. ')
zyArpInspectPortTrustState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 1, 5, 1, 1), EnabledStatus().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trusted", 1), ("untrusted", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyArpInspectPortTrustState.setStatus('current')
if mibBuilder.loadTexts: zyArpInspectPortTrustState.setDescription('Enable/Disable this port to be a trusted port (enable) or an untrusted port (disable). The switch does not discard ARP packets on trusted ports for any reason.')
zyArpInspectPortRate = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyArpInspectPortRate.setStatus('current')
if mibBuilder.loadTexts: zyArpInspectPortRate.setDescription('Specify the maximum rate (1-2048 packets per second) at which the switch receives ARP packets from each port. The switch discards any additional ARP packets. Enter 0 to disable this limit.')
zyArpInspectPortInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyArpInspectPortInterval.setStatus('current')
if mibBuilder.loadTexts: zyArpInspectPortInterval.setDescription('Enter the length (1-15 seconds) of the burst interval. The burst interval is the length of time over which the rate of ARP packets is monitored for each port. For example, if the Rate is 15 pps and the burst interval is 1 second, then the switch accepts a maximum of 15 ARP packets in every one-second interval. If the burst interval is 5 seconds, then the switch accepts a maximum of 75 ARP packets in every five-second interval.')
zyArpInspectFilterClearAll = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyArpInspectFilterClearAll.setStatus('current')
if mibBuilder.loadTexts: zyArpInspectFilterClearAll.setDescription('Delete all ARP inspection filters from the switch.')
zyArpInspectLogClear = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyArpInspectLogClear.setStatus('current')
if mibBuilder.loadTexts: zyArpInspectLogClear.setDescription('Delete all ARP inspection log from the switch.')
zyxelArpInspectFilterTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 3), )
if mibBuilder.loadTexts: zyxelArpInspectFilterTable.setStatus('current')
if mibBuilder.loadTexts: zyxelArpInspectFilterTable.setDescription('The table contains ARP inspection filter information.')
zyxelArpInspectFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 3, 1), ).setIndexNames((0, "ZYXEL-ARP-INSPECTION-MIB", "zyArpInspectFilterMacAddress"), (0, "ZYXEL-ARP-INSPECTION-MIB", "zyArpInspectFilterVid"))
if mibBuilder.loadTexts: zyxelArpInspectFilterEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelArpInspectFilterEntry.setDescription('An entry contains ARP inspection filter information.')
zyArpInspectFilterMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: zyArpInspectFilterMacAddress.setStatus('current')
if mibBuilder.loadTexts: zyArpInspectFilterMacAddress.setDescription('This field displays the source MAC address in ARP inspection filter.')
zyArpInspectFilterVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: zyArpInspectFilterVid.setStatus('current')
if mibBuilder.loadTexts: zyArpInspectFilterVid.setDescription('This field displays the source VLAN ID in ARP inspection filter.')
zyArpInspectFilterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyArpInspectFilterPort.setStatus('current')
if mibBuilder.loadTexts: zyArpInspectFilterPort.setDescription('This field displays the source port of the discarded ARP packet.')
zyArpInspectFilterExpiry = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyArpInspectFilterExpiry.setStatus('current')
if mibBuilder.loadTexts: zyArpInspectFilterExpiry.setDescription('This field displays how long (in seconds) the ARP inspection filter remains in the switch.')
zyArpInspectFilterReasonType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("macVid", 1), ("port", 2), ("ip", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyArpInspectFilterReasonType.setStatus('current')
if mibBuilder.loadTexts: zyArpInspectFilterReasonType.setDescription('This field displays the reason the ARP packet was discarded. MAC+VLAN: The MAC address and VLAN ID were not in the binding table. IP: The MAC address and VLAN ID were in the binding table, but the IP address was not valid. Port: The MAC address, VLAN ID, and IP address were in the binding table, but the port number was not valid.')
zyArpInspectFilterClear = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 3, 1, 6), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zyArpInspectFilterClear.setStatus('current')
if mibBuilder.loadTexts: zyArpInspectFilterClear.setDescription('This object allow entry to be deleted an ARP inspect filter entry.')
zyxelArpInspectLogTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 4), )
if mibBuilder.loadTexts: zyxelArpInspectLogTable.setStatus('current')
if mibBuilder.loadTexts: zyxelArpInspectLogTable.setDescription('The table contains ARP inspection log information.')
zyxelArpInspectLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 4, 1), ).setIndexNames((0, "ZYXEL-ARP-INSPECTION-MIB", "zyArpInspectLogMacAdderss"), (0, "ZYXEL-ARP-INSPECTION-MIB", "zyArpInspectLogVid"), (0, "ZYXEL-ARP-INSPECTION-MIB", "zyArpInspectLogPort"), (0, "ZYXEL-ARP-INSPECTION-MIB", "zyArpInspectLogIpAddress"), (0, "ZYXEL-ARP-INSPECTION-MIB", "zyArpInspectLogReasonType"))
if mibBuilder.loadTexts: zyxelArpInspectLogEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelArpInspectLogEntry.setDescription('An entry contains ARP inspection log information. ')
zyArpInspectLogMacAdderss = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 4, 1, 1), MacAddress())
if mibBuilder.loadTexts: zyArpInspectLogMacAdderss.setStatus('current')
if mibBuilder.loadTexts: zyArpInspectLogMacAdderss.setDescription('This field displays the source MAC address of the ARP packet.')
zyArpInspectLogVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: zyArpInspectLogVid.setStatus('current')
if mibBuilder.loadTexts: zyArpInspectLogVid.setDescription('This field displays the source VLAN ID of the ARP packet.')
zyArpInspectLogPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 4, 1, 3), Integer32())
if mibBuilder.loadTexts: zyArpInspectLogPort.setStatus('current')
if mibBuilder.loadTexts: zyArpInspectLogPort.setDescription('This field displays the source port of the ARP packet.')
zyArpInspectLogIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 4, 1, 4), IpAddress())
if mibBuilder.loadTexts: zyArpInspectLogIpAddress.setStatus('current')
if mibBuilder.loadTexts: zyArpInspectLogIpAddress.setDescription('This field displays the source IP address of the ARP packet.')
zyArpInspectLogNumberPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyArpInspectLogNumberPacket.setStatus('current')
if mibBuilder.loadTexts: zyArpInspectLogNumberPacket.setDescription('This field displays the number of ARP packets that were consolidated into this log message. The switch consolidates identical log messages generated by ARP packets in the log consolidation interval into one log message.')
zyArpInspectLogReasonType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("deny", 1), ("denyStatic", 2), ("denyDHCP", 3), ("permitStatic", 4), ("permitDHCP", 5))))
if mibBuilder.loadTexts: zyArpInspectLogReasonType.setStatus('current')
if mibBuilder.loadTexts: zyArpInspectLogReasonType.setDescription('This field displays the reason the log message was generated. dhcp deny: An ARP packet was discarded because it violated a dynamic binding with the same MAC address and VLAN ID. static deny: An ARP packet was discarded because it violated a static binding with the same MAC address and VLAN ID. deny: An ARP packet was discarded because there were no bindings with the same MAC address and VLAN ID. dhcp permit: An ARP packet was forwarded because it matched a dynamic binding. static permit: An ARP packet was forwarded because it matched a static binding.')
zyArpInspectLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 4, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyArpInspectLogTime.setStatus('current')
if mibBuilder.loadTexts: zyArpInspectLogTime.setDescription('This field displays when the log message was generated.')
zyxelArpInspectStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 5), )
if mibBuilder.loadTexts: zyxelArpInspectStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: zyxelArpInspectStatisticsTable.setDescription('The table contains ARP inspection statistics information.')
zyxelArpInspectStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 5, 1), ).setIndexNames((0, "ZYXEL-ARP-INSPECTION-MIB", "zyArpInspectStatisticsVid"))
if mibBuilder.loadTexts: zyxelArpInspectStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelArpInspectStatisticsEntry.setDescription('An entry contains ARP inspection statistics information. ')
zyArpInspectStatisticsVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: zyArpInspectStatisticsVid.setStatus('current')
if mibBuilder.loadTexts: zyArpInspectStatisticsVid.setDescription('The VLAN ID of each VLAN.')
zyArpInspectStatisticsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyArpInspectStatisticsReceived.setStatus('current')
if mibBuilder.loadTexts: zyArpInspectStatisticsReceived.setDescription('This field displays the total number of ARP packets received from the VLAN since the switch last restarted.')
zyArpInspectStatisticsRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyArpInspectStatisticsRequest.setStatus('current')
if mibBuilder.loadTexts: zyArpInspectStatisticsRequest.setDescription('This field displays the total number of ARP Request packets received from the VLAN since the switch last restarted.')
zyArpInspectStatisticsReply = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyArpInspectStatisticsReply.setStatus('current')
if mibBuilder.loadTexts: zyArpInspectStatisticsReply.setDescription('This field displays the total number of ARP Reply packets received from the VLAN since the switch last restarted.')
zyArpInspectStatisticsForward = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyArpInspectStatisticsForward.setStatus('current')
if mibBuilder.loadTexts: zyArpInspectStatisticsForward.setDescription('This field displays the total number of ARP packets the switch forwarded for the VLAN since the switch last restarted.')
zyArpInspectStatisticsDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyArpInspectStatisticsDrop.setStatus('current')
if mibBuilder.loadTexts: zyArpInspectStatisticsDrop.setDescription('This field displays the total number of ARP packets the switch discarded for the VLAN since the switch last restarted.')
zyArpInspectStatisticsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 12, 2, 5, 1, 7), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyArpInspectStatisticsClear.setStatus('current')
if mibBuilder.loadTexts: zyArpInspectStatisticsClear.setDescription('Removes ARP inspection statistics for the specified VLAN.')
mibBuilder.exportSymbols("ZYXEL-ARP-INSPECTION-MIB", zyArpInspectLogNumberPacket=zyArpInspectLogNumberPacket, zyArpInspectFilterClearAll=zyArpInspectFilterClearAll, zyArpInspectStatisticsVid=zyArpInspectStatisticsVid, zyxelArpInspectFilterEntry=zyxelArpInspectFilterEntry, zyxelArpInspectFilterTable=zyxelArpInspectFilterTable, zyxelArpInspectLogTable=zyxelArpInspectLogTable, zyxelArpInspectVlanTable=zyxelArpInspectVlanTable, zyxelArpInspectVlanEntry=zyxelArpInspectVlanEntry, zyxelArpInspectPortTable=zyxelArpInspectPortTable, zyxelArpInspectPortEntry=zyxelArpInspectPortEntry, zyArpInspectFilterAgingTime=zyArpInspectFilterAgingTime, zyArpInspectLogInterval=zyArpInspectLogInterval, zyArpInspectStatisticsReply=zyArpInspectStatisticsReply, zyArpInspectPortTrustState=zyArpInspectPortTrustState, zyArpInspectLogMacAdderss=zyArpInspectLogMacAdderss, zyxelArpInspectStatus=zyxelArpInspectStatus, PYSNMP_MODULE_ID=zyxelArpInspection, zyArpInspectPortRate=zyArpInspectPortRate, zyArpInspectLogReasonType=zyArpInspectLogReasonType, zyxelArpInspectStatisticsEntry=zyxelArpInspectStatisticsEntry, zyArpInspectStatisticsRequest=zyArpInspectStatisticsRequest, zyArpInspectStatisticsClear=zyArpInspectStatisticsClear, zyArpInspectFilterReasonType=zyArpInspectFilterReasonType, zyArpInspectVlanVid=zyArpInspectVlanVid, zyArpInspectFilterClear=zyArpInspectFilterClear, zyArpInspectLogVid=zyArpInspectLogVid, zyArpInspectLogRate=zyArpInspectLogRate, zyxelArpInspection=zyxelArpInspection, zyxelArpInspectSetup=zyxelArpInspectSetup, zyArpInspectLogIpAddress=zyArpInspectLogIpAddress, zyArpInspectFilterExpiry=zyArpInspectFilterExpiry, zyArpInspectFilterVid=zyArpInspectFilterVid, zyArpInspectStatisticsDrop=zyArpInspectStatisticsDrop, zyArpInspectVlanState=zyArpInspectVlanState, zyArpInspectFilterPort=zyArpInspectFilterPort, zyArpInspectLogEntries=zyArpInspectLogEntries, zyArpInspectStatisticsForward=zyArpInspectStatisticsForward, zyxelArpInspectLog=zyxelArpInspectLog, zyArpInspectState=zyArpInspectState, zyArpInspectLogTime=zyArpInspectLogTime, zyArpInspectVlanLog=zyArpInspectVlanLog, zyxelArpInspectStatisticsTable=zyxelArpInspectStatisticsTable, zyArpInspectStatisticsReceived=zyArpInspectStatisticsReceived, zyxelArpInspectLogEntry=zyxelArpInspectLogEntry, zyArpInspectFilterMacAddress=zyArpInspectFilterMacAddress, zyArpInspectPortInterval=zyArpInspectPortInterval, zyArpInspectLogPort=zyArpInspectLogPort, zyArpInspectLogClear=zyArpInspectLogClear)
