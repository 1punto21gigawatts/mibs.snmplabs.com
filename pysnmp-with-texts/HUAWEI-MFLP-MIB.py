#
# PySNMP MIB module HUAWEI-MFLP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-MFLP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:46:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
NotificationType, ModuleIdentity, MibIdentifier, Gauge32, Integer32, Unsigned32, TimeTicks, IpAddress, Counter32, iso, Counter64, ObjectIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ModuleIdentity", "MibIdentifier", "Gauge32", "Integer32", "Unsigned32", "TimeTicks", "IpAddress", "Counter32", "iso", "Counter64", "ObjectIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention, RowStatus, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus", "MacAddress")
hwMFlpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160))
if mibBuilder.loadTexts: hwMFlpMIB.setLastUpdated('200801021629Z')
if mibBuilder.loadTexts: hwMFlpMIB.setOrganization('Huawei Technologies co.,Ltd.')
if mibBuilder.loadTexts: hwMFlpMIB.setContactInfo('VRP Team Huawei Technologies co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China http://www.huawei.com Zip:100085 ')
if mibBuilder.loadTexts: hwMFlpMIB.setDescription('Mac flapping management MIB.')
hwMflpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 1))
hwMflpVlanCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 1, 1), )
if mibBuilder.loadTexts: hwMflpVlanCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwMflpVlanCfgTable.setDescription('The mac flapping table.The table that contains the mac flapping information currently operating in VLAN mode on this device.')
hwMflpVlanCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 1, 1, 1), ).setIndexNames((0, "HUAWEI-MFLP-MIB", "hwMflpVlanId"))
if mibBuilder.loadTexts: hwMflpVlanCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwMflpVlanCfgEntry.setDescription('Entries of the mac flapping table in VLAN mode.')
hwMflpVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 1, 1, 1, 1), VlanId())
if mibBuilder.loadTexts: hwMflpVlanId.setStatus('current')
if mibBuilder.loadTexts: hwMflpVlanId.setDescription('The VLAN ID referring to the VLAN which is correlative to the hwMflpVlanCfg table.')
hwMflpVlanCfgLoopTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMflpVlanCfgLoopTimes.setStatus('current')
if mibBuilder.loadTexts: hwMflpVlanCfgLoopTimes.setDescription('The number of mac move-times.')
hwMflpVlanCfgDetectCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMflpVlanCfgDetectCycle.setStatus('current')
if mibBuilder.loadTexts: hwMflpVlanCfgDetectCycle.setDescription('The interval of detecting the mac move-times.')
hwMflpVlanCfgCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMflpVlanCfgCycles.setStatus('current')
if mibBuilder.loadTexts: hwMflpVlanCfgCycles.setDescription('The number of interval.')
hwMflpVlanCfgAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("block", 1), ("alarmOnly", 2))).clone('block')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMflpVlanCfgAction.setStatus('current')
if mibBuilder.loadTexts: hwMflpVlanCfgAction.setDescription('The action switch of this entry. The meanings of the values are: block(1), alarmOnly(2)')
hwMflpVlanCfgBlockTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMflpVlanCfgBlockTime.setStatus('current')
if mibBuilder.loadTexts: hwMflpVlanCfgBlockTime.setDescription('The blocked time of the interface. When the value of hwMflpAction is 1, value of hwMflpBlockTime should be between 10 and 65535.')
hwMflpVlanCfgRetryTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMflpVlanCfgRetryTimes.setStatus('current')
if mibBuilder.loadTexts: hwMflpVlanCfgRetryTimes.setDescription('The retry times of permanent interdiction.')
hwMflpVlanCfgIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 1, 1, 1, 8), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMflpVlanCfgIfName.setStatus('current')
if mibBuilder.loadTexts: hwMflpVlanCfgIfName.setDescription('The interface name, only used for trap.')
hwMflpVlanCfgAlarmReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 1, 1, 1, 9), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMflpVlanCfgAlarmReason.setStatus('current')
if mibBuilder.loadTexts: hwMflpVlanCfgAlarmReason.setDescription('The alarm reason, only used for trap.')
hwMflpVlanCfgRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 1, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMflpVlanCfgRowstatus.setStatus('current')
if mibBuilder.loadTexts: hwMflpVlanCfgRowstatus.setDescription('The operating state of the row.')
hwMflpVlanDetectMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 1, 1, 1, 11), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMflpVlanDetectMAC.setStatus('current')
if mibBuilder.loadTexts: hwMflpVlanDetectMAC.setDescription('The detect MAC, only used for trap.')
hwMflpVlanCfgMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 1, 1, 1, 12), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMflpVlanCfgMacAddr.setStatus('current')
if mibBuilder.loadTexts: hwMflpVlanCfgMacAddr.setDescription('The MAC address, only used for trap.')
hwMflpVlanCfgPreIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 1, 1, 1, 13), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMflpVlanCfgPreIfName.setStatus('current')
if mibBuilder.loadTexts: hwMflpVlanCfgPreIfName.setDescription('The interface name, only used for trap.')
hwMflpVsiCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 1, 2), )
if mibBuilder.loadTexts: hwMflpVsiCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwMflpVsiCfgTable.setDescription('The mac flapping table .The table that contains the mac flapping information currently operating in VSI mode on this device.')
hwMflpVsiCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 1, 2, 1), ).setIndexNames((0, "HUAWEI-MFLP-MIB", "hwMflpVsiName"))
if mibBuilder.loadTexts: hwMflpVsiCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwMflpVsiCfgEntry.setDescription('Entries of The mac flapping table in VSI mode.')
hwMflpVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: hwMflpVsiName.setStatus('current')
if mibBuilder.loadTexts: hwMflpVsiName.setDescription('The VSI name referring to the VSI which is correlative to the hwMflpVsiCfg table.')
hwMflpVsiCfgLoopTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMflpVsiCfgLoopTimes.setStatus('current')
if mibBuilder.loadTexts: hwMflpVsiCfgLoopTimes.setDescription('The number of loop-times.')
hwMflpVsiCfgDetectCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMflpVsiCfgDetectCycle.setStatus('current')
if mibBuilder.loadTexts: hwMflpVsiCfgDetectCycle.setDescription('The interval of detecting the loop-times.')
hwMflpVsiCfgCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 1, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMflpVsiCfgCycles.setStatus('current')
if mibBuilder.loadTexts: hwMflpVsiCfgCycles.setDescription('The number of detect-cycle.')
hwMflpVsiCfgAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("block", 1), ("alarmOnly", 2))).clone('block')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMflpVsiCfgAction.setStatus('current')
if mibBuilder.loadTexts: hwMflpVsiCfgAction.setDescription('The action switch of this entry. The meanings of the values are: block(1), alarmOnly(2)')
hwMflpVsiCfgBlockTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 1, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMflpVsiCfgBlockTime.setStatus('current')
if mibBuilder.loadTexts: hwMflpVsiCfgBlockTime.setDescription('The blocked time of the interface. When the value of hwMflpAction is 1, value of hwMflpBlockTime should be between 10 and 65535.')
hwMflpVsiCfgRetryTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 1, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMflpVsiCfgRetryTimes.setStatus('current')
if mibBuilder.loadTexts: hwMflpVsiCfgRetryTimes.setDescription('The retry times of permanent interdiction.')
hwMflpVsiCfgBlockPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("default", 1), ("acFirst", 2), ("pwFirst", 3), ("acOnly", 4))).clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMflpVsiCfgBlockPolicy.setStatus('current')
if mibBuilder.loadTexts: hwMflpVsiCfgBlockPolicy.setDescription('The block policy switch of this entry. The meanings of the values are: default(1), acFirst(2), pwFirst(3), acOnly(4)')
hwMflpVsiCfgAcName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 1, 2, 1, 9), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMflpVsiCfgAcName.setStatus('current')
if mibBuilder.loadTexts: hwMflpVsiCfgAcName.setDescription('The AC interface name, only used for trap.')
hwMflpVsiCfgAlarmReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 1, 2, 1, 10), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMflpVsiCfgAlarmReason.setStatus('current')
if mibBuilder.loadTexts: hwMflpVsiCfgAlarmReason.setDescription('The alarm reason, only used for trap.')
hwMflpVsiCfgIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 1, 2, 1, 11), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMflpVsiCfgIpAddr.setStatus('current')
if mibBuilder.loadTexts: hwMflpVsiCfgIpAddr.setDescription('The peer IP address, only used for trap.')
hwMflpVsiCfgPwId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 1, 2, 1, 12), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMflpVsiCfgPwId.setStatus('current')
if mibBuilder.loadTexts: hwMflpVsiCfgPwId.setDescription('The PW ID, only used for trap.')
hwMflpVsiCfgRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 1, 2, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMflpVsiCfgRowstatus.setStatus('current')
if mibBuilder.loadTexts: hwMflpVsiCfgRowstatus.setDescription('The operating state of the row.')
hwMflpVsiDetectMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 1, 2, 1, 14), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMflpVsiDetectMAC.setStatus('current')
if mibBuilder.loadTexts: hwMflpVsiDetectMAC.setDescription('The detect MAC, only used for trap.')
hwMflpGeneralObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 2))
hwMflpTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 2, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMflpTrapEnable.setStatus('current')
if mibBuilder.loadTexts: hwMflpTrapEnable.setDescription('This object indicates the enable sign of MFLP notification.')
hwMflpMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 3))
hwMflpIfBlock = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 3, 1)).setObjects(("HUAWEI-MFLP-MIB", "hwMflpVlanCfgIfName"), ("HUAWEI-MFLP-MIB", "hwMflpVlanCfgBlockTime"), ("HUAWEI-MFLP-MIB", "hwMflpVlanCfgAlarmReason"), ("HUAWEI-MFLP-MIB", "hwMflpVlanDetectMAC"))
if mibBuilder.loadTexts: hwMflpIfBlock.setStatus('current')
if mibBuilder.loadTexts: hwMflpIfBlock.setDescription('This notification indicates the interface blocked.')
hwMflpIfResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 3, 2)).setObjects(("HUAWEI-MFLP-MIB", "hwMflpVlanCfgIfName"), ("HUAWEI-MFLP-MIB", "hwMflpVlanCfgBlockTime"), ("HUAWEI-MFLP-MIB", "hwMflpVlanCfgAlarmReason"))
if mibBuilder.loadTexts: hwMflpIfResume.setStatus('current')
if mibBuilder.loadTexts: hwMflpIfResume.setDescription('This notification indicates the interface resumed.')
hwMflpAcBlock = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 3, 3)).setObjects(("HUAWEI-MFLP-MIB", "hwMflpVsiCfgAcName"), ("HUAWEI-MFLP-MIB", "hwMflpVsiCfgBlockTime"), ("HUAWEI-MFLP-MIB", "hwMflpVsiCfgAlarmReason"), ("HUAWEI-MFLP-MIB", "hwMflpVsiDetectMAC"))
if mibBuilder.loadTexts: hwMflpAcBlock.setStatus('current')
if mibBuilder.loadTexts: hwMflpAcBlock.setDescription('This notification indicates the interface blocked.')
hwMflpAcResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 3, 4)).setObjects(("HUAWEI-MFLP-MIB", "hwMflpVsiCfgAcName"), ("HUAWEI-MFLP-MIB", "hwMflpVsiCfgBlockTime"), ("HUAWEI-MFLP-MIB", "hwMflpVsiCfgAlarmReason"))
if mibBuilder.loadTexts: hwMflpAcResume.setStatus('current')
if mibBuilder.loadTexts: hwMflpAcResume.setDescription('This notification indicates the interface resumed.')
hwMflpPwBlock = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 3, 5)).setObjects(("HUAWEI-MFLP-MIB", "hwMflpVsiCfgIpAddr"), ("HUAWEI-MFLP-MIB", "hwMflpVsiCfgPwId"), ("HUAWEI-MFLP-MIB", "hwMflpVsiCfgBlockTime"), ("HUAWEI-MFLP-MIB", "hwMflpVsiCfgAlarmReason"), ("HUAWEI-MFLP-MIB", "hwMflpVsiDetectMAC"))
if mibBuilder.loadTexts: hwMflpPwBlock.setStatus('current')
if mibBuilder.loadTexts: hwMflpPwBlock.setDescription('This notification indicates the PW blocked.')
hwMflpPwResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 3, 6)).setObjects(("HUAWEI-MFLP-MIB", "hwMflpVsiCfgIpAddr"), ("HUAWEI-MFLP-MIB", "hwMflpVsiCfgPwId"), ("HUAWEI-MFLP-MIB", "hwMflpVsiCfgBlockTime"), ("HUAWEI-MFLP-MIB", "hwMflpVsiCfgAlarmReason"))
if mibBuilder.loadTexts: hwMflpPwResume.setStatus('current')
if mibBuilder.loadTexts: hwMflpPwResume.setDescription('This notification indicates the PW resumed.')
hwMflpVlanAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 3, 7)).setObjects(("HUAWEI-MFLP-MIB", "hwMflpVlanCfgAlarmReason"))
if mibBuilder.loadTexts: hwMflpVlanAlarm.setStatus('current')
if mibBuilder.loadTexts: hwMflpVlanAlarm.setDescription('This notification indicates alarm only when loop existed in vlan.')
hwMflpVsiAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 3, 8)).setObjects(("HUAWEI-MFLP-MIB", "hwMflpVsiCfgAlarmReason"))
if mibBuilder.loadTexts: hwMflpVsiAlarm.setStatus('current')
if mibBuilder.loadTexts: hwMflpVsiAlarm.setDescription('This notification indicates alarm only when loop existed in vsi.')
hwMflpMacAddrAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 3, 9)).setObjects(("HUAWEI-MFLP-MIB", "hwMflpVlanCfgMacAddr"), ("HUAWEI-MFLP-MIB", "hwMflpVlanCfgBlockTime"), ("HUAWEI-MFLP-MIB", "hwMflpVlanCfgPreIfName"), ("HUAWEI-MFLP-MIB", "hwMflpVlanCfgIfName"), ("HUAWEI-MFLP-MIB", "hwMflpVlanCfgAlarmReason"))
if mibBuilder.loadTexts: hwMflpMacAddrAlarm.setStatus('current')
if mibBuilder.loadTexts: hwMflpMacAddrAlarm.setDescription('This notification indicates the MAC locked.')
hwMflpMacAddrResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 3, 10)).setObjects(("HUAWEI-MFLP-MIB", "hwMflpVlanCfgMacAddr"), ("HUAWEI-MFLP-MIB", "hwMflpVlanCfgBlockTime"), ("HUAWEI-MFLP-MIB", "hwMflpVlanCfgPreIfName"), ("HUAWEI-MFLP-MIB", "hwMflpVlanCfgIfName"), ("HUAWEI-MFLP-MIB", "hwMflpVlanCfgAlarmReason"))
if mibBuilder.loadTexts: hwMflpMacAddrResume.setStatus('current')
if mibBuilder.loadTexts: hwMflpMacAddrResume.setDescription('This notification indicates the MAC resumed.')
hwMflpQuitVlanAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 3, 11)).setObjects(("HUAWEI-MFLP-MIB", "hwMflpVlanCfgIfName"), ("HUAWEI-MFLP-MIB", "hwMflpVlanCfgAlarmReason"))
if mibBuilder.loadTexts: hwMflpQuitVlanAlarm.setStatus('current')
if mibBuilder.loadTexts: hwMflpQuitVlanAlarm.setDescription('This notification indicates the interface leaved from vlan because mac move detected.')
hwMflpQuitVlanResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 3, 12)).setObjects(("HUAWEI-MFLP-MIB", "hwMflpVlanCfgIfName"), ("HUAWEI-MFLP-MIB", "hwMflpVlanCfgAlarmReason"))
if mibBuilder.loadTexts: hwMflpQuitVlanResume.setStatus('current')
if mibBuilder.loadTexts: hwMflpQuitVlanResume.setDescription('This notification indicates the Interface leaved from vlan resumed.')
hwMflpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 4))
hwMflpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 4, 1))
hwMflpFullCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 4, 1, 1)).setObjects(("HUAWEI-MFLP-MIB", "hwMflpVlanCfgGroup"), ("HUAWEI-MFLP-MIB", "hwMflpVsiCfgGroup"), ("HUAWEI-MFLP-MIB", "hwMflpTrapEnableGroup"), ("HUAWEI-MFLP-MIB", "hwMflpTrapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMflpFullCompliance = hwMflpFullCompliance.setStatus('current')
if mibBuilder.loadTexts: hwMflpFullCompliance.setDescription('Description.')
hwMflpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 4, 2))
hwMflpVlanCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 4, 2, 1)).setObjects(("HUAWEI-MFLP-MIB", "hwMflpVlanCfgLoopTimes"), ("HUAWEI-MFLP-MIB", "hwMflpVlanCfgDetectCycle"), ("HUAWEI-MFLP-MIB", "hwMflpVlanCfgCycles"), ("HUAWEI-MFLP-MIB", "hwMflpVlanCfgRetryTimes"), ("HUAWEI-MFLP-MIB", "hwMflpVlanCfgAction"), ("HUAWEI-MFLP-MIB", "hwMflpVlanCfgBlockTime"), ("HUAWEI-MFLP-MIB", "hwMflpVlanCfgIfName"), ("HUAWEI-MFLP-MIB", "hwMflpVlanCfgAlarmReason"), ("HUAWEI-MFLP-MIB", "hwMflpVlanCfgRowstatus"), ("HUAWEI-MFLP-MIB", "hwMflpVlanDetectMAC"), ("HUAWEI-MFLP-MIB", "hwMflpVlanCfgMacAddr"), ("HUAWEI-MFLP-MIB", "hwMflpVlanCfgPreIfName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMflpVlanCfgGroup = hwMflpVlanCfgGroup.setStatus('current')
if mibBuilder.loadTexts: hwMflpVlanCfgGroup.setDescription('A collection of objects providing information about mac flapping table.')
hwMflpVsiCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 4, 2, 2)).setObjects(("HUAWEI-MFLP-MIB", "hwMflpVsiCfgLoopTimes"), ("HUAWEI-MFLP-MIB", "hwMflpVsiCfgDetectCycle"), ("HUAWEI-MFLP-MIB", "hwMflpVsiCfgCycles"), ("HUAWEI-MFLP-MIB", "hwMflpVsiCfgRetryTimes"), ("HUAWEI-MFLP-MIB", "hwMflpVsiCfgAction"), ("HUAWEI-MFLP-MIB", "hwMflpVsiCfgBlockTime"), ("HUAWEI-MFLP-MIB", "hwMflpVsiCfgBlockPolicy"), ("HUAWEI-MFLP-MIB", "hwMflpVsiCfgAcName"), ("HUAWEI-MFLP-MIB", "hwMflpVsiCfgAlarmReason"), ("HUAWEI-MFLP-MIB", "hwMflpVsiCfgIpAddr"), ("HUAWEI-MFLP-MIB", "hwMflpVsiCfgPwId"), ("HUAWEI-MFLP-MIB", "hwMflpVsiCfgRowstatus"), ("HUAWEI-MFLP-MIB", "hwMflpVsiDetectMAC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMflpVsiCfgGroup = hwMflpVsiCfgGroup.setStatus('current')
if mibBuilder.loadTexts: hwMflpVsiCfgGroup.setDescription('A collection of objects providing information about mac flapping table.')
hwMflpTrapEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 4, 2, 3)).setObjects(("HUAWEI-MFLP-MIB", "hwMflpTrapEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMflpTrapEnableGroup = hwMflpTrapEnableGroup.setStatus('current')
if mibBuilder.loadTexts: hwMflpTrapEnableGroup.setDescription('The Mflp trap enable group.')
hwMflpTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 160, 4, 2, 4)).setObjects(("HUAWEI-MFLP-MIB", "hwMflpIfBlock"), ("HUAWEI-MFLP-MIB", "hwMflpIfResume"), ("HUAWEI-MFLP-MIB", "hwMflpAcBlock"), ("HUAWEI-MFLP-MIB", "hwMflpAcResume"), ("HUAWEI-MFLP-MIB", "hwMflpPwBlock"), ("HUAWEI-MFLP-MIB", "hwMflpPwResume"), ("HUAWEI-MFLP-MIB", "hwMflpVlanAlarm"), ("HUAWEI-MFLP-MIB", "hwMflpVsiAlarm"), ("HUAWEI-MFLP-MIB", "hwMflpMacAddrAlarm"), ("HUAWEI-MFLP-MIB", "hwMflpMacAddrResume"), ("HUAWEI-MFLP-MIB", "hwMflpQuitVlanAlarm"), ("HUAWEI-MFLP-MIB", "hwMflpQuitVlanResume"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMflpTrapGroup = hwMflpTrapGroup.setStatus('current')
if mibBuilder.loadTexts: hwMflpTrapGroup.setDescription('Mflp Trap Group.')
mibBuilder.exportSymbols("HUAWEI-MFLP-MIB", hwMflpVlanCfgLoopTimes=hwMflpVlanCfgLoopTimes, hwMflpVlanCfgAlarmReason=hwMflpVlanCfgAlarmReason, hwMflpTrapEnableGroup=hwMflpTrapEnableGroup, hwMflpVsiCfgEntry=hwMflpVsiCfgEntry, hwMflpVlanCfgAction=hwMflpVlanCfgAction, hwMflpVsiCfgGroup=hwMflpVsiCfgGroup, hwMflpVsiCfgLoopTimes=hwMflpVsiCfgLoopTimes, hwMflpVlanCfgBlockTime=hwMflpVlanCfgBlockTime, hwMflpGroups=hwMflpGroups, hwMflpQuitVlanResume=hwMflpQuitVlanResume, PYSNMP_MODULE_ID=hwMFlpMIB, hwMflpVsiName=hwMflpVsiName, hwMflpVsiCfgRowstatus=hwMflpVsiCfgRowstatus, hwMflpConformance=hwMflpConformance, hwMflpMacAddrResume=hwMflpMacAddrResume, hwMflpVsiCfgTable=hwMflpVsiCfgTable, hwMflpAcResume=hwMflpAcResume, hwMflpVsiCfgRetryTimes=hwMflpVsiCfgRetryTimes, hwMflpVlanCfgMacAddr=hwMflpVlanCfgMacAddr, hwMflpPwBlock=hwMflpPwBlock, hwMflpQuitVlanAlarm=hwMflpQuitVlanAlarm, hwMflpVlanAlarm=hwMflpVlanAlarm, hwMflpVlanDetectMAC=hwMflpVlanDetectMAC, hwMFlpMIB=hwMFlpMIB, hwMflpVsiCfgBlockTime=hwMflpVsiCfgBlockTime, hwMflpVsiCfgIpAddr=hwMflpVsiCfgIpAddr, hwMflpVlanCfgPreIfName=hwMflpVlanCfgPreIfName, hwMflpGeneralObjects=hwMflpGeneralObjects, hwMflpPwResume=hwMflpPwResume, hwMflpVsiCfgCycles=hwMflpVsiCfgCycles, hwMflpVlanCfgRetryTimes=hwMflpVlanCfgRetryTimes, hwMflpMacAddrAlarm=hwMflpMacAddrAlarm, hwMflpFullCompliance=hwMflpFullCompliance, hwMflpTrapEnable=hwMflpTrapEnable, hwMflpVsiCfgAlarmReason=hwMflpVsiCfgAlarmReason, hwMflpVsiCfgDetectCycle=hwMflpVsiCfgDetectCycle, hwMflpCompliances=hwMflpCompliances, hwMflpVlanCfgDetectCycle=hwMflpVlanCfgDetectCycle, hwMflpVlanCfgGroup=hwMflpVlanCfgGroup, hwMflpVlanId=hwMflpVlanId, hwMflpVsiCfgAcName=hwMflpVsiCfgAcName, hwMflpAcBlock=hwMflpAcBlock, hwMflpVlanCfgTable=hwMflpVlanCfgTable, hwMflpVlanCfgRowstatus=hwMflpVlanCfgRowstatus, hwMflpVlanCfgEntry=hwMflpVlanCfgEntry, hwMflpVsiDetectMAC=hwMflpVsiDetectMAC, hwMflpMIBTraps=hwMflpMIBTraps, hwMflpIfBlock=hwMflpIfBlock, hwMflpIfResume=hwMflpIfResume, hwMflpVsiAlarm=hwMflpVsiAlarm, hwMflpVsiCfgPwId=hwMflpVsiCfgPwId, hwMflpVsiCfgAction=hwMflpVsiCfgAction, hwMflpVlanCfgCycles=hwMflpVlanCfgCycles, hwMflpObjects=hwMflpObjects, hwMflpVsiCfgBlockPolicy=hwMflpVsiCfgBlockPolicy, hwMflpTrapGroup=hwMflpTrapGroup, hwMflpVlanCfgIfName=hwMflpVlanCfgIfName)
