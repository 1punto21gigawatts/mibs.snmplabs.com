#
# PySNMP MIB module ASANTE-SWITCH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASANTE-SWITCH-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:25:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Counter64, TimeTicks, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, enterprises, Bits, Integer32, IpAddress, Gauge32, ModuleIdentity, iso, Unsigned32, MibIdentifier, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter64", "TimeTicks", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "enterprises", "Bits", "Integer32", "IpAddress", "Gauge32", "ModuleIdentity", "iso", "Unsigned32", "MibIdentifier", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

asante = MibIdentifier((1, 3, 6, 1, 4, 1, 298))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1))
snmpAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 1))
agentSw = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 1, 1))
agentFw = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 1, 2))
agentHw = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 1, 3))
agentNetProtocol = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 1, 5))
ipagentProtocol = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 1))
switch = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 5))
eAsntSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 5, 1))
eSWAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1))
eSWAgentSW = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1))
eSWAgentHW = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 2))
eSWAgentFW = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 3))
eSWBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2))
eSWCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3))
eSWMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 4))
productId = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 2))
concProductId = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 2, 2))
intraswitch = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 2, 2, 11))
intrastack = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 2, 2, 12))
friendlyswitch = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 2, 2, 13))
intraSwitch6216M = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 2, 2, 16))
intraSwitch6224 = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 2, 2, 17))
intraCore8000 = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 2, 2, 22))
intraCore9000 = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 2, 2, 23))
agentRunTimeImageMajorVer = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRunTimeImageMajorVer.setStatus('mandatory')
if mibBuilder.loadTexts: agentRunTimeImageMajorVer.setDescription('The major software version number of the agent runtime image.')
agentRunTimeImageMinorVer = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRunTimeImageMinorVer.setStatus('mandatory')
if mibBuilder.loadTexts: agentRunTimeImageMinorVer.setDescription('The minor software version number of the agent runtime image.')
agentImageLoadMode = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("localBoot", 2), ("netBoot", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentImageLoadMode.setStatus('mandatory')
if mibBuilder.loadTexts: agentImageLoadMode.setDescription('Tells agent device whether the software image is to be loaded from the FLASH EPROM or from over the network.')
agentRemoteBootInfo = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("eepromBootInfo", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRemoteBootInfo.setStatus('mandatory')
if mibBuilder.loadTexts: agentRemoteBootInfo.setDescription('The method for getting boot information.')
agentRemoteBootProtocol = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("bootp-tftp", 2), ("tftp-only", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRemoteBootProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: agentRemoteBootProtocol.setDescription('The boot protocol that is used to load the agent image software.')
agentRemoteBootFile = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRemoteBootFile.setStatus('mandatory')
if mibBuilder.loadTexts: agentRemoteBootFile.setDescription('The boot file name that is sent to the boot file server by agent boot code during boot time. For IntraStack switch, this file is the image file.')
agentOutBandDialString = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOutBandDialString.setStatus('mandatory')
if mibBuilder.loadTexts: agentOutBandDialString.setDescription('This is the initialization string used by the Network Management station to establish an out-of-band connection.')
agentOutBandBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("b1200", 2), ("b2400", 3), ("b4800", 4), ("b9600", 5), ("b19200", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOutBandBaudRate.setStatus('mandatory')
if mibBuilder.loadTexts: agentOutBandBaudRate.setDescription('The baud rate setting for the out-of-band port.')
agentReset = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("reset", 2), ("not-reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentReset.setStatus('mandatory')
if mibBuilder.loadTexts: agentReset.setDescription("The object to allow software to perform 'push-button' system reset.")
agentHwReVer = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentHwReVer.setStatus('mandatory')
if mibBuilder.loadTexts: agentHwReVer.setDescription('The hardware version number of the switch.')
agentHwVer = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentHwVer.setStatus('mandatory')
if mibBuilder.loadTexts: agentHwVer.setDescription('The hardware model number of the switch.')
agentFwMajorVer = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFwMajorVer.setStatus('mandatory')
if mibBuilder.loadTexts: agentFwMajorVer.setDescription('The major firmware version number of the agent PROM code.')
agentFwMinorVer = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFwMinorVer.setStatus('mandatory')
if mibBuilder.loadTexts: agentFwMinorVer.setDescription('The minor firmware version number of the agent PROM code.')
agentNetProtoStkCapMap = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetProtoStkCapMap.setStatus('mandatory')
if mibBuilder.loadTexts: agentNetProtoStkCapMap.setDescription('This octet string represents the current protocol stack configuration supported by the agent, encoded as a bit string. Each protocol statck is represented by a single bit. When the value of a bit = 1, it indicates that the protocol stack on the agent represented by that bit is supported; when zero, the protocol stack is not supported. The first protocol stack will encode in the least significant bit of the first octet. Currently, only IP Stack(bit 0) and IPX Stack(bit 1) are defined; all other bits should be zero.')
ipagentIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipagentIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ipagentIpAddr.setDescription("The IP agent's administrative IP address. The current operational IP address can be obtained from ipAdEntAddr in the ipAddrTable. This parameter will take effect only after an agent restart or reset. This parameter will always be updated in EEPROM.")
ipagentIpNetMask = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipagentIpNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: ipagentIpNetMask.setDescription("The ipagent's administrative IP subnet mask. The current operational IP subnet mask can be obtained from ipAdEntMask in the ipAddrTable. This parameter will take effect only after a agent restart or agent reset. This parameter will always be updated in the EEPROM.")
ipagentDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipagentDefaultGateway.setStatus('mandatory')
if mibBuilder.loadTexts: ipagentDefaultGateway.setDescription("The ip agent's administrative default gateway IP address. The current operational IP default gateway IP address can be obtained from ipRouteDest in the ipRouteTable. This parameter will take effect only after an agent restart or reset. This parameter will always be updated in EEPROM.")
ipagentBootServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipagentBootServerAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ipagentBootServerAddr.setDescription('The IP address of the boot server that is used to boot this ipagent. This parameter will always be updated in the EEPROM.')
ipagentUnAuthIP = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipagentUnAuthIP.setStatus('mandatory')
if mibBuilder.loadTexts: ipagentUnAuthIP.setDescription('The IP address of the last station that tried to access this ipagent with an invalid community string.')
ipagentUnAuthComm = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipagentUnAuthComm.setStatus('mandatory')
if mibBuilder.loadTexts: ipagentUnAuthComm.setDescription('The community string of the last station that tried to access this ipagent with an invalid community string.')
ipagentTrapRcvrTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 2), )
if mibBuilder.loadTexts: ipagentTrapRcvrTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipagentTrapRcvrTable.setDescription('Table listing the Network Management Stations that are to receive traps generated by this agent.')
ipagentTrapRcvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 2, 1), ).setIndexNames((0, "ASANTE-SWITCH-MIB", "ipagentTrapRcvrIpAddr"))
if mibBuilder.loadTexts: ipagentTrapRcvrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipagentTrapRcvrEntry.setDescription('Destination IP address and community string for a particular trap receiver. Entries can be added or deleted. To add an entry, all objects which have read-write access defined in the same table should be set in one set request with a valid value in the object ipagentTrapRcvrStatus. To delete an entry, set ipagentTrapRcvrStatus to invalid.')
ipagentTrapRcvrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipagentTrapRcvrIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ipagentTrapRcvrIpAddr.setDescription('IP address of the management station to receive traps.')
ipagentTrapRcvrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipagentTrapRcvrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ipagentTrapRcvrStatus.setDescription('Validation status of this entry. If the value of this object is set to invalid(3), then that particular entry is deemed invalid, meaning that the address for that entry is no longer valid because the entry has been removed from the table.')
ipagentTrapRcvrComm = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipagentTrapRcvrComm.setStatus('mandatory')
if mibBuilder.loadTexts: ipagentTrapRcvrComm.setDescription('Community string for traps sent to this trap receiver.')
eSWUpDownloadAction = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("download", 3), ("upload", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWUpDownloadAction.setStatus('mandatory')
if mibBuilder.loadTexts: eSWUpDownloadAction.setDescription('Agent upload/download action. May refer to the configuration file or image file. The upload action is valid only for the configuration file.')
eSWUpDownloadStatus = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("action-Success", 2), ("action-Failure", 3), ("in-Progress", 4), ("no-Action", 5), ("configError", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWUpDownloadStatus.setStatus('mandatory')
if mibBuilder.loadTexts: eSWUpDownloadStatus.setDescription('Result of the last upload/download request by this agent.')
eSWRemoteDownloadFile = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("config-File", 2), ("image-File", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWRemoteDownloadFile.setStatus('mandatory')
if mibBuilder.loadTexts: eSWRemoteDownloadFile.setDescription('Downloading what kind of file. The configuration file name should be stored in the agentRemoteBootFile MIB object, and the image file name should be stored in the eSWImageFileName MIB object. If this object has the value Config-File(1), agentRemoteBootProtocol cannot be set to bootp-tftp(2). If agentRemoteBootProtocol is set to bootp-tftp(2), this object cannot be set to Config-File(1). This object value is meaningful only at download time.')
eSWRemoteConfigServer = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWRemoteConfigServer.setStatus('mandatory')
if mibBuilder.loadTexts: eSWRemoteConfigServer.setDescription('The IP address of the configuration file server.')
eSWRemoteConfigFileName = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWRemoteConfigFileName.setStatus('mandatory')
if mibBuilder.loadTexts: eSWRemoteConfigFileName.setDescription("The name of switch configuration file. The server's IP address is in eSWRemoteConfigServer.")
eSWConfigRetryCounter = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWConfigRetryCounter.setStatus('mandatory')
if mibBuilder.loadTexts: eSWConfigRetryCounter.setDescription('The number of times the agent will retry a failed image file download.')
eSWRemoteImageServer = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWRemoteImageServer.setStatus('mandatory')
if mibBuilder.loadTexts: eSWRemoteImageServer.setDescription('The IP address of the image file server.')
eSWRemoteImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWRemoteImageFileName.setStatus('mandatory')
if mibBuilder.loadTexts: eSWRemoteImageFileName.setDescription('The name of the switch image file.')
eSWImageRetryCounter = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWImageRetryCounter.setStatus('mandatory')
if mibBuilder.loadTexts: eSWImageRetryCounter.setDescription('The number of times the agent will retry a failed configuration file download.')
eSWActiveImageBank = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("bank1", 2), ("bank2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWActiveImageBank.setStatus('mandatory')
if mibBuilder.loadTexts: eSWActiveImageBank.setDescription('The image bank from which runtime code will be loaded at next boot. If the value is set to other(1) the agent will boot from the default bank, i.e. Bank1(2).')
eSWRemoteDownloadImageBank = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("bank1", 2), ("bank2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWRemoteDownloadImageBank.setStatus('mandatory')
if mibBuilder.loadTexts: eSWRemoteDownloadImageBank.setDescription("The number of the destination bank to which the image will be downloaded. 'other' will be recognized as the default bank, i.e. bank 1.")
eSWResetWaitTime = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWResetWaitTime.setStatus('mandatory')
if mibBuilder.loadTexts: eSWResetWaitTime.setDescription('The time to wait before executing a reset of the agent. The time is in seconds, with a range of 1 second to 1 day.')
eSWResetLeftTime = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWResetLeftTime.setStatus('mandatory')
if mibBuilder.loadTexts: eSWResetLeftTime.setDescription('Time left until the agent will reset. If a reset request is not in progress, this should have a value of 0.')
eSWBankImageInfoTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 14), )
if mibBuilder.loadTexts: eSWBankImageInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: eSWBankImageInfoTable.setDescription("A table of information about the switch's image banks.")
eSWBankImageInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 14, 1), ).setIndexNames((0, "ASANTE-SWITCH-MIB", "eSWBankIndex"))
if mibBuilder.loadTexts: eSWBankImageInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: eSWBankImageInfoEntry.setDescription('A row in the image bank table containing information about a specific bank.')
eSWBankIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWBankIndex.setStatus('mandatory')
if mibBuilder.loadTexts: eSWBankIndex.setDescription('The index of bank image information table. It is the number of the image bank. Currently the IntraSwitch 62xx family supports 2 image banks.')
eSWMajorVer = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWMajorVer.setStatus('mandatory')
if mibBuilder.loadTexts: eSWMajorVer.setDescription('The major version of the image file loaded in the bank. If this object and eSWMinorVer both have zero values, the bank has no image code loaded.')
eSWMinorVer = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWMinorVer.setStatus('mandatory')
if mibBuilder.loadTexts: eSWMinorVer.setDescription('The minor version number of the bank image software. If this object and eSWMajorVer both have zero values, the bank has no image code loaded.')
eSWDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 14, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWDateTime.setStatus('mandatory')
if mibBuilder.loadTexts: eSWDateTime.setDescription('The date and time of the image software loaded in this bank.')
eSWTelnetSessions = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWTelnetSessions.setStatus('mandatory')
if mibBuilder.loadTexts: eSWTelnetSessions.setDescription('Number of concurrent Telnet sessions the agent will support.')
eSWTelnetSessionActive = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWTelnetSessionActive.setStatus('mandatory')
if mibBuilder.loadTexts: eSWTelnetSessionActive.setDescription('Number of Telnet sessions active. This value cannot be greater than the value of eSWTelnetSessions.')
eSWTelnetTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWTelnetTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: eSWTelnetTimeOut.setDescription('Telnet session time-out value, in minutes. The default for this object is 5 minutes.')
eSWSTP = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWSTP.setStatus('mandatory')
if mibBuilder.loadTexts: eSWSTP.setDescription('Setting this value to enable(2) will cause the switch to perform the Spanning Tree Algorithm as described in IEEE 802.1d.Setting it to disable(3) will stop the Spanning Tree Algorithm for all ports on the switch. If STP is disabled, the state of all ports in this switch should be set to Forwarding. When STP is changed from Disabled(3) to Enabled(2), the state of all enabled ports will be changed from forwarding to blocking, and the switch will recalculate the spanning tree.')
eSWUserInterfaceTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWUserInterfaceTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: eSWUserInterfaceTimeOut.setDescription('The console interface time-out value, in minutes. A value of 0 means that the console interface will not time out. The default is 5 minutes.')
eSWBCastMcastThreshold = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWBCastMcastThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: eSWBCastMcastThreshold.setDescription('The switch will detect a Broadcast or Multicast storm on the network based on the value of this object. This value is represented as number of packets per second. The value must be greater than or equal to 7000 packets per second.')
eSWBCastMcastDuration = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWBCastMcastDuration.setStatus('mandatory')
if mibBuilder.loadTexts: eSWBCastMcastDuration.setDescription('The switch will detect a Broadcast or Multicast storm on the network based on the value represented by this object. The switch will declare that a storm is present if the bcast/mcast rate is over the threshold defined by eSWBCastMcastThreshold for this duration of time. The value must be greater than or equal to 2 seconds.')
eSWCfgFileErrStatus = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWCfgFileErrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: eSWCfgFileErrStatus.setDescription('This object represents the results of previous Config File download operation. Each bit from least Significant bit represent a configuration section in the switch. Value 1 for a bit indicates that the corresponding section had error in previous config file configuration operation. Following is the detatiled section information. Bit 0 - System Administration section Bit 1 - IP section Bit 2 - Bootstrap section Bit 3 - SNMP section Bit 4 - Port section Bit 5 - STP section Bit 6 - VLAN section Bit 7 - NW Security section Bit 8 - Switch Stats and Duplicate IP Trap section Bit 9:15 - Reserved.')
eSWDRAMSize = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWDRAMSize.setStatus('mandatory')
if mibBuilder.loadTexts: eSWDRAMSize.setDescription('DRAM installed on the switch, in bytes.')
eSWFlashRAMSize = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWFlashRAMSize.setStatus('mandatory')
if mibBuilder.loadTexts: eSWFlashRAMSize.setDescription('Flash RAM installed on the switch, in bytes.')
eSWEEPROMSize = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWEEPROMSize.setStatus('mandatory')
if mibBuilder.loadTexts: eSWEEPROMSize.setDescription('EEPROM installed on the switch, in bytes.')
eSWType = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("thunderBird", 2), ("intraStack", 3), ("intraSwitch", 4), ("intraCore8000", 5), ("intraCore9000", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWType.setStatus('mandatory')
if mibBuilder.loadTexts: eSWType.setDescription('The ethernet switch type.')
eSWBkpType = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("no-Bkp", 2), ("intraStack", 3), ("intraSwitch6216M", 4), ("intraSwitch6224", 5), ("intraSwitch6224M", 6), ("intraCore8000", 7), ("intraCore9000", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWBkpType.setStatus('mandatory')
if mibBuilder.loadTexts: eSWBkpType.setDescription('The backplane type of this switch.')
eSWGroupCapacity = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGroupCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: eSWGroupCapacity.setDescription('The number of groups that can be contained within the switch.')
eSWStackLastChange = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWStackLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: eSWStackLastChange.setDescription('The value of sysUpTime at the last change of stack status. If no change has occurred since the stack was in operation, the value is zero.')
eSWGroupInfoTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 5), )
if mibBuilder.loadTexts: eSWGroupInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: eSWGroupInfoTable.setDescription('This is the table to describe basic information for each group of ports in the switch.')
eSWGroupInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 5, 1), ).setIndexNames((0, "ASANTE-SWITCH-MIB", "eSWGrpIndex"))
if mibBuilder.loadTexts: eSWGroupInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: eSWGroupInfoEntry.setDescription('This is the entry to describe basic information for a particular group of ports.')
eSWGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGrpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: eSWGrpIndex.setDescription('The group number, which is the index of the table.')
eSWGrpID = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 5, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGrpID.setStatus('mandatory')
if mibBuilder.loadTexts: eSWGrpID.setDescription('The ID of this group module. This is the MAC address of the first port in the group.')
eSWGrpState = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWGrpState.setStatus('mandatory')
if mibBuilder.loadTexts: eSWGrpState.setDescription('A command to disable or enable a physical module in the switch device stack.')
eSWGrpNumofPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGrpNumofPorts.setStatus('mandatory')
if mibBuilder.loadTexts: eSWGrpNumofPorts.setDescription('The number of ports including expansion ports in the group.')
eSWGrpType = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("empty", 2), ("intraSwitch", 3), ("intraStack-Base", 4), ("intraStack-FX8", 5), ("intraStack-TX16", 6), ("enterprise6216M-TX16", 7), ("enterprise6224M-TX24", 8), ("intraCore8000", 9), ("intraCore-RJ45", 10), ("intraCore-RJ21", 11), ("intraCore-GIGA", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGrpType.setStatus('mandatory')
if mibBuilder.loadTexts: eSWGrpType.setDescription('The type of group module described by this entry.')
eSWGrpDescrption = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGrpDescrption.setStatus('mandatory')
if mibBuilder.loadTexts: eSWGrpDescrption.setDescription('A description of the group module described by this entry.')
eSWGrpLED = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 5, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGrpLED.setStatus('mandatory')
if mibBuilder.loadTexts: eSWGrpLED.setDescription('This octet string represents the current LED setting for this slot/group. Each octet in the string represents one led. LEDs on the front panel of the slot module are ordered from the top to the bottom and order in left to right. Each LED uses two bits for its action and state, two bits for color, and has four reserved bits. Bits 0-1: 00 -- LED on 01 -- LED off 10 -- LED blink. Bits 6-7: 00 -- unknown color, 01 -- green, 10 -- yellow, 11 -- amber. Bits 2-5 are reserved. The 62XX LEDs on the front panel are ordered by port LEDs followed by power, two MII (for 6216) and eight utilization LEDs(for 6224). The Octet String will be Port1, Port2, port3 ... , PortN 0 - 3, 4 - 7, 8 -11 ... , (N - 1) * 4 - (( N * 4) - 1). For the 6216, LED#65 is the power LED and 66 & 67 are MII LEDs. For the 6224, LED#97 represents the power and LEDs 98 - 105 represent utilization information. Port octets meaning : Octet 3 : Link Status. Octet 2 : Data RX/TX. Octet 1 : FDP. Octet 0 : Speed. Utilization octets meaning: Octet 7 : 90+ % Octet 6 : 75 - 90 % Octet 5 : 50 - 75 % Octet 4 : 25 - 50 % Octet 3 : 10 - 25 % Octet 2 : 5 - 10 % Octet 1 : 3 - 5 % Octet 0 : 1 - 3 %.')
eSWGrpFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("no-fan", 2), ("normal", 3), ("fail", 4), ("fan-1-bad", 5), ("fan-2-bad", 6), ("fan-1-2-bad", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGrpFanStatus.setStatus('mandatory')
if mibBuilder.loadTexts: eSWGrpFanStatus.setDescription('The value of this object describes the fan status. If there is more than one fan within the device, the indication shows any failure among the fans.')
eSWGrpNumofExpPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGrpNumofExpPorts.setStatus('mandatory')
if mibBuilder.loadTexts: eSWGrpNumofExpPorts.setDescription('The number of expansion ports in this group.')
eSWGrpLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 5, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGrpLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: eSWGrpLastChange.setDescription('The value of sysUpTime at the last change in status of the group since it has been in operation. If no change has occurred since this group became operational, its value is zero. In IntraStack, this object is useful only for the base module.')
eSWGrpReset = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noReset", 2), ("reset", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGrpReset.setStatus('mandatory')
if mibBuilder.loadTexts: eSWGrpReset.setDescription('This object represents the current group reset state.')
eSWPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 6), )
if mibBuilder.loadTexts: eSWPortInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: eSWPortInfoTable.setDescription('A table containing basic information for each port in this switch.')
eSWPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 6, 1), ).setIndexNames((0, "ASANTE-SWITCH-MIB", "eSWPortGrpIndex"), (0, "ASANTE-SWITCH-MIB", "eSWPortIndex"))
if mibBuilder.loadTexts: eSWPortInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: eSWPortInfoEntry.setDescription('A table entry containing information about a specific port.')
eSWPortGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWPortGrpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: eSWPortGrpIndex.setDescription('The number of the group containing the port.')
eSWPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: eSWPortIndex.setDescription('The number of the port which this entry describes.')
eSWPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("mii-Empty", 2), ("mii-FL", 3), ("mii-RJ45", 4), ("mii-FX", 5), ("rj45", 6), ("foil", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWPortType.setStatus('mandatory')
if mibBuilder.loadTexts: eSWPortType.setDescription('The type port in this switch. MII-Empty(1) means there is no expansion module plugged in.')
eSWPortAutoNegAbility = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("with", 2), ("without", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWPortAutoNegAbility.setStatus('mandatory')
if mibBuilder.loadTexts: eSWPortAutoNegAbility.setDescription('Indicates whether the port has Auto Negotiation signaling ability.')
eSWPortLink = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWPortLink.setStatus('mandatory')
if mibBuilder.loadTexts: eSWPortLink.setDescription('The link status of this port.')
eSWPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("m10-Mbps", 2), ("m100-Mbps", 3), ("g1-Gbps", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: eSWPortSpeed.setDescription("The working speed of this port. If the port's link is not up, this object should show the configured speed.")
eSWPortDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("half-Duplex", 2), ("full-Duplex", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWPortDuplex.setStatus('mandatory')
if mibBuilder.loadTexts: eSWPortDuplex.setDescription('The duplex state of this port. When the port link is not up, this object should show the configured duplex information.')
eSWGpPtInfoTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 7), )
if mibBuilder.loadTexts: eSWGpPtInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: eSWGpPtInfoTable.setDescription('A table describing the port information for each group in BYTE mapping method. The main purpose of creating this table is to reduce the SNMP parsing time and the load of network traffic.')
eSWGpPtInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 7, 1), ).setIndexNames((0, "ASANTE-SWITCH-MIB", "eSWGpPtInfoIndex"))
if mibBuilder.loadTexts: eSWGpPtInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: eSWGpPtInfoEntry.setDescription('This is an entry of eSWGroupPortInfoTable.')
eSWGpPtInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGpPtInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: eSWGpPtInfoIndex.setDescription('The group number .')
eSWGpPtInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGpPtInfoType.setStatus('mandatory')
if mibBuilder.loadTexts: eSWGpPtInfoType.setDescription('This octet string is for the type of each port in this group. Each octet represents one port; therefore, octet 0 is port 1 and octet 9 is port 10. Each octet stores the data from eSWPortType.')
eSWGpPtInfoAutoNegAbility = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGpPtInfoAutoNegAbility.setStatus('mandatory')
if mibBuilder.loadTexts: eSWGpPtInfoAutoNegAbility.setDescription('This octet string is for the auto negotiation ability of each port in this group. Each octet represents one port; therefore, octet 0 is port 1 and octet 9 is port 10. Each octet stores the data from eSWPortAutoNegAbility.')
eSWGpPtInfoLink = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 7, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGpPtInfoLink.setStatus('mandatory')
if mibBuilder.loadTexts: eSWGpPtInfoLink.setDescription('This octet string is for the link status of each port in this group. Each octet represents one port; therefore, octet 0 is port 1 and octet 9 is port 10. Each octet stores the data from eSWPortLink.')
eSWGpPtInfoSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 7, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGpPtInfoSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: eSWGpPtInfoSpeed.setDescription('This octet string is for the operating speed of each port in this group. Each octet represents one port; therefore, octet 0 is port 1 and octet 9 is port 10. Each octet stores the data from eSWPortSpeed.')
eSWGpPtInfoDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 7, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGpPtInfoDuplex.setStatus('mandatory')
if mibBuilder.loadTexts: eSWGpPtInfoDuplex.setDescription('This octet string is for the Duplex state of each port in this group. Each octet represents one port; therefore, octet 0 is port 1 and octet 9 is port 10. Each octet stores the data from eSWPortDuplex.')
eSWPtMacInfoTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 8), )
if mibBuilder.loadTexts: eSWPtMacInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: eSWPtMacInfoTable.setDescription(' A table describing the MAC addresses learned on each port.')
eSWPtMacInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 8, 1), ).setIndexNames((0, "ASANTE-SWITCH-MIB", "eSWPtMacPort"), (0, "ASANTE-SWITCH-MIB", "eSWPtMacMACADDR"))
if mibBuilder.loadTexts: eSWPtMacInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: eSWPtMacInfoEntry.setDescription(' Entry of eSWPtMacInfoTable.')
eSWPtMacPort = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWPtMacPort.setStatus('mandatory')
if mibBuilder.loadTexts: eSWPtMacPort.setDescription('The port number in the switch.')
eSWPtMacMACADDR = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 8, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWPtMacMACADDR.setStatus('mandatory')
if mibBuilder.loadTexts: eSWPtMacMACADDR.setDescription('MAC address.')
eSWVlanInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 9))
eSWVlanVersion = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWVlanVersion.setStatus('mandatory')
if mibBuilder.loadTexts: eSWVlanVersion.setDescription('The version of VLAN implementation in the switch')
eSWVlanMaxCapacity = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWVlanMaxCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: eSWVlanMaxCapacity.setDescription('The maximum number of VLANs that can be supported within the switch.')
eSWVlanTypesSupported = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWVlanTypesSupported.setStatus('mandatory')
if mibBuilder.loadTexts: eSWVlanTypesSupported.setDescription('The types of VLAN supported by the switch. Here each bit position indicates the type of VLAN supported by the switch. Bit 0 - Port based VLAN Bit 1 - MAC Address based VLAN Bit 3 - Protocol based VLAN')
eSWVlanTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 9, 4), )
if mibBuilder.loadTexts: eSWVlanTable.setStatus('mandatory')
if mibBuilder.loadTexts: eSWVlanTable.setDescription('A table describing the information about every VLAN associated with the switch.')
eSWVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 9, 4, 1), ).setIndexNames((0, "ASANTE-SWITCH-MIB", "eSWVLANIndex"))
if mibBuilder.loadTexts: eSWVlanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: eSWVlanEntry.setDescription('A list of information for each VLAN within the switch.')
eSWVLANIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 9, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWVLANIndex.setStatus('mandatory')
if mibBuilder.loadTexts: eSWVLANIndex.setDescription('Index in VLAN Configuration Table within the switch.')
eSWVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 9, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWVlanName.setStatus('mandatory')
if mibBuilder.loadTexts: eSWVlanName.setDescription('This octet string is the name of the VLAN. The length of the name can be up to 32 printable characters.')
eSWVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 9, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWVlanID.setStatus('mandatory')
if mibBuilder.loadTexts: eSWVlanID.setDescription('A 12 bit indentifier for this VLAN. 0 - The NULL VLAN ID. It is used when the tagging header contains only user priority information; no VLAN identifier is present in the frame. This number is not allowed here. 1 - The default VLAN ID; To be used as default PVID for the port through which tagged frames will be sent within the switch. 4095 - Reserved for implementation use.')
eSWVlanMemberSet = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 9, 4, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWVlanMemberSet.setStatus('mandatory')
if mibBuilder.loadTexts: eSWVlanMemberSet.setDescription('The set of ports to which traffic destined for this VLAN may be transmitted. Each octet within the value of this object specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, ech port of the switch is represented by a single bit within the value of this object. Bit value 1 means the corresponding port is included in the member set and bit value 0 represents the port is not included.')
eSWVlanMgmAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 9, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWVlanMgmAccess.setStatus('mandatory')
if mibBuilder.loadTexts: eSWVlanMgmAccess.setDescription('This object provides enabling and disabling of switch management access. When this object for a VLAN entry is set to Enable(1), the switch management (Telnet, SNMP Agent, HTTP Server and ICMP serverices can be accessed by a corresponding manager in the VLAN. If this object of a VLAN entry is set to Disable(2), the switch management cannot be accessed in the VLAN.')
eSWTrunkBundleCapacity = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWTrunkBundleCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: eSWTrunkBundleCapacity.setDescription('The number of Trunk Bundles that can be supported within the switch.')
eSWTrunkBundleTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 11), )
if mibBuilder.loadTexts: eSWTrunkBundleTable.setStatus('mandatory')
if mibBuilder.loadTexts: eSWTrunkBundleTable.setDescription('A table describing the Trunk Bundles information of the switch.')
eSWTrunkBundleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 11, 1), ).setIndexNames((0, "ASANTE-SWITCH-MIB", "eSWTrunkBundleIndex"))
if mibBuilder.loadTexts: eSWTrunkBundleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: eSWTrunkBundleEntry.setDescription('This is an entry of eSWTrunkBundleTable.')
eSWTrunkBundleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWTrunkBundleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: eSWTrunkBundleIndex.setDescription(' The index of eSWTrunkBundleTable table.')
eSWTrunkBundlePortA = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWTrunkBundlePortA.setStatus('mandatory')
if mibBuilder.loadTexts: eSWTrunkBundlePortA.setDescription('The ID of the first port of the Trunk Bundles. ')
eSWTrunkBundlePortB = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWTrunkBundlePortB.setStatus('mandatory')
if mibBuilder.loadTexts: eSWTrunkBundlePortB.setDescription('The ID of the second port of the Trunk Bundles. ')
eSWTrunkBundleState = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWTrunkBundleState.setStatus('mandatory')
if mibBuilder.loadTexts: eSWTrunkBundleState.setDescription('When this function is enabled, ports specified by port A and port B will form a Trunk Bundle to provide a fat communications channel. ')
eSWNetSecurityInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 13))
eSWNetworkSecurityVersion = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWNetworkSecurityVersion.setStatus('mandatory')
if mibBuilder.loadTexts: eSWNetworkSecurityVersion.setDescription('The version of Network Security implementation in the switch')
eSWNetworkSecurityMAXLevels = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 13, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWNetworkSecurityMAXLevels.setStatus('mandatory')
if mibBuilder.loadTexts: eSWNetworkSecurityMAXLevels.setDescription('The maximum number of Security Levels that can be supported within the switch.')
eSWSecurityTypesSupported = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 13, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWSecurityTypesSupported.setStatus('mandatory')
if mibBuilder.loadTexts: eSWSecurityTypesSupported.setDescription(' The type of network security supported by the switch. Here each bit position indicates the type of Network Security Levels supported by the Switch Bit 0 - VLAN Level Security Bit 1 - Port Level Security ')
eSWSecConfigTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 13, 4), )
if mibBuilder.loadTexts: eSWSecConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: eSWSecConfigTable.setDescription('A table that contains information about the Security Configuration that is associated with each port of the switch.')
eSWSecConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 13, 4, 1), ).setIndexNames((0, "ASANTE-SWITCH-MIB", "eSWSecPortIndex"))
if mibBuilder.loadTexts: eSWSecConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: eSWSecConfigEntry.setDescription(' A list of information for each port within the switch.')
eSWSecPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 13, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWSecPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: eSWSecPortIndex.setDescription('The number of the port which this entry describes.')
eSWSecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 13, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("newNodeDetection", 1), ("knownMACAddressForwarding", 2), ("restrictedKnownMACAddressForwarding", 3), ("knownMACAddressForwardingWithIntruderLock", 4), ("normalPort", 5), ("other", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWSecurityLevel.setStatus('mandatory')
if mibBuilder.loadTexts: eSWSecurityLevel.setDescription('Security Level Configured for the port.')
eSWSecMonitorPort = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 13, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWSecMonitorPort.setStatus('mandatory')
if mibBuilder.loadTexts: eSWSecMonitorPort.setDescription('The port number within the switch which is configured as the monitor port. All the traffic from the Intruder Detection and Monitoring secured port will be also forwarded to the monitor port. Value of 0 indicates that no monitored port is been configured by the switch.')
eSWSecurityTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 13, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWSecurityTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: eSWSecurityTrapEnable.setDescription('The object is to allow the management to control the Security generated Enterprise Specific Trap.')
eSWSecIncSetConfigTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 13, 7), )
if mibBuilder.loadTexts: eSWSecIncSetConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: eSWSecIncSetConfigTable.setDescription('A table describing the MAC addresses configured by the management for a port. This entries of the MAC Address are static entries (No aging will be performed on these MAC Addresses).')
eSWSecIncSetConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 13, 7, 1), ).setIndexNames((0, "ASANTE-SWITCH-MIB", "eSWIncSetPort"), (0, "ASANTE-SWITCH-MIB", "eSWIncSetMACAddr"))
if mibBuilder.loadTexts: eSWSecIncSetConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: eSWSecIncSetConfigEntry.setDescription('Entry of eSWSecIncSetConfigTable.')
eSWIncSetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 13, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWIncSetPort.setStatus('mandatory')
if mibBuilder.loadTexts: eSWIncSetPort.setDescription('The port number in the switch associated with the Inclusive Set MAC Address.')
eSWIncSetMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 13, 7, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWIncSetMACAddr.setStatus('mandatory')
if mibBuilder.loadTexts: eSWIncSetMACAddr.setDescription('MAC address which is part of the Inclusive Set. This MAC Address when appears in the source MAC Address field in the ethernet frame will be forwarded by the Associated Port if the Port is set for Security Level 2 , Level 3 , Level 4.')
eSWIncSetMACStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 13, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWIncSetMACStatus.setStatus('mandatory')
if mibBuilder.loadTexts: eSWIncSetMACStatus.setDescription('MAC address which is part of the Inclusive Set. This MAC Address when appears in the source MAC Address field in the ethernet frame will be forwarded by the Associated Port if the Port is set for Security Level 2 , Level 3 , Level 4.')
eSWSecIntMACAddrTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 13, 8), )
if mibBuilder.loadTexts: eSWSecIntMACAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: eSWSecIntMACAddrTable.setDescription(' A table containing Intruder MAC Addresses when any port is set to Security Level 2 or Security Level 4. In case of a Port set to Security Level 4 this table indicating the Intruder MAC Addresses are locked ( that is any station with its MAC Address in the table will not able to forward \\ transmits using any of the switch Ports.')
eSWSecIntMACAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 13, 8, 1), ).setIndexNames((0, "ASANTE-SWITCH-MIB", "eSWIntMACAddrPort"), (0, "ASANTE-SWITCH-MIB", "eSWIntMACAddr"))
if mibBuilder.loadTexts: eSWSecIntMACAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: eSWSecIntMACAddrEntry.setDescription(' Entry of eSWSecIntMACAddrTable.')
eSWIntMACAddrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 13, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWIntMACAddrPort.setStatus('mandatory')
if mibBuilder.loadTexts: eSWIntMACAddrPort.setDescription('The port number in the switch associated with the Inturder MAC Address.')
eSWIntMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 13, 8, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWIntMACAddr.setStatus('mandatory')
if mibBuilder.loadTexts: eSWIntMACAddr.setDescription('Intruder MAC Address.')
eSWFilteringInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14))
eSWFilteringTypesSupported = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWFilteringTypesSupported.setStatus('mandatory')
if mibBuilder.loadTexts: eSWFilteringTypesSupported.setDescription('The type of Filtering Configuration supported by the switch. Here each bit position indicates the type of Filtering Configuration Levels supported by the Switch Bit 0 - VLAN Level MAC Address Filtering Bit 1 - Port Level MAC Address Filtering Bit 2 - VLAN Level Protocol Type Filtering Bit 3 - Port Level Protocol Type Filtering ')
eSWFiltMACVLANBasedConfigTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14, 2), )
if mibBuilder.loadTexts: eSWFiltMACVLANBasedConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: eSWFiltMACVLANBasedConfigTable.setDescription('A table describing the filtering MAC addresses configured by the management for a VLAN. This entries of the MAC Address are static entries. No aging will be performed on these MAC Addresses.')
eSWFiltMACVLANBasedConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14, 2, 1), ).setIndexNames((0, "ASANTE-SWITCH-MIB", "eSWVLANIndex"), (0, "ASANTE-SWITCH-MIB", "eSWFiltMACAddr"))
if mibBuilder.loadTexts: eSWFiltMACVLANBasedConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: eSWFiltMACVLANBasedConfigEntry.setDescription(' Entryof eSWFiltMACVLANBasedConfigTable.')
eSWVIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWVIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: eSWVIDIndex.setDescription('Index in VLAN Configuration Table within the switch for which the Filtering MAC Address is associated.')
eSWFiltMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWFiltMACAddr.setStatus('mandatory')
if mibBuilder.loadTexts: eSWFiltMACAddr.setDescription('MAC Address which will be filtered in the indexed VID, when appear in source MAC Address field of the frame.')
eSWFiltMACSts = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWFiltMACSts.setStatus('mandatory')
if mibBuilder.loadTexts: eSWFiltMACSts.setDescription('MAC address which is part of the VLAN Based Filtering MAC Address Set. This MAC Address when appears in the source MAC Address field in the ethernet frame will be filtered in the indexed VID.')
eSWFiltMACPortBasedConfigTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14, 3), )
if mibBuilder.loadTexts: eSWFiltMACPortBasedConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: eSWFiltMACPortBasedConfigTable.setDescription(' A table describing the filtering MAC addresses configured by the management for a port. This entries of the MAC Address are static entries No aging will be performed on this MAC Addresses.')
eSWFiltMACPortBasedConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14, 3, 1), ).setIndexNames((0, "ASANTE-SWITCH-MIB", "eSWFiltPortIndex"), (0, "ASANTE-SWITCH-MIB", "eSWFiltPMACAddr"))
if mibBuilder.loadTexts: eSWFiltMACPortBasedConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: eSWFiltMACPortBasedConfigEntry.setDescription('Entry of eSWFiltMACPortBasedConfigTable.')
eSWFiltPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWFiltPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: eSWFiltPortIndex.setDescription('The Port number in the switch.')
eSWFiltPMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14, 3, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWFiltPMACAddr.setStatus('mandatory')
if mibBuilder.loadTexts: eSWFiltPMACAddr.setDescription('MAC Address which will be filtered in the indexed Port, when appear in destination MAC Address field of the frame.')
eSWFiltPMACStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWFiltPMACStatus.setStatus('mandatory')
if mibBuilder.loadTexts: eSWFiltPMACStatus.setDescription('This field indicates status associated with the MAC Address.')
eSWFiltProtVLANBasedCFGTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14, 4), )
if mibBuilder.loadTexts: eSWFiltProtVLANBasedCFGTable.setStatus('mandatory')
if mibBuilder.loadTexts: eSWFiltProtVLANBasedCFGTable.setDescription('A table describing the filtering Protocol Type configured by the management for a port.')
eSWFiltProtVLANBasedCFGEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14, 4, 1), ).setIndexNames((0, "ASANTE-SWITCH-MIB", "eSWVLANIndex"))
if mibBuilder.loadTexts: eSWFiltProtVLANBasedCFGEntry.setStatus('mandatory')
if mibBuilder.loadTexts: eSWFiltProtVLANBasedCFGEntry.setDescription(' Entry of eSWFiltProtVLANBasedCFGTable.')
eSWFiltProtocolVID = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWFiltProtocolVID.setStatus('mandatory')
if mibBuilder.loadTexts: eSWFiltProtocolVID.setDescription('Index in VLAN Configuration Table within the switch for which the Filtering Protocol Type is associated.')
eSWFiltVLANProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWFiltVLANProtocolType.setStatus('mandatory')
if mibBuilder.loadTexts: eSWFiltVLANProtocolType.setDescription('This object represents the Protocol Type Filter as applied to the Indexed VID. The Filtering capabilities is indicated by each bit in this 2 bytes octet string. 1 - Filter OUT 0 - Do not Filter Bit 0 : Filter OUT All AppleTalk Protocol Packets Bit 1 : Filter OUT All Banyan VINES Protocol Packets Bit 2 : Filter OUT All IBM Netbios Protocol Packets Bit 3 : Filter OUT All IPX/SPX Novell Protocol Packets Bit 4 : Filter OUT All IP Protocol Packets Bit 5 : Filter OUT All Unknown Protocol Packets that are not defined by the above protocol Filtering bits ( Bit 0-4) Bit 6 - 7 - Reserved.')
eSWFiltProtPortBasedCFGTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14, 5), )
if mibBuilder.loadTexts: eSWFiltProtPortBasedCFGTable.setStatus('mandatory')
if mibBuilder.loadTexts: eSWFiltProtPortBasedCFGTable.setDescription('A table describing the filtering Protocol Type configured by the management for a port.')
eSWFiltProtPortBasedCFGEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14, 5, 1), ).setIndexNames((0, "ASANTE-SWITCH-MIB", "eSWPortIndex"))
if mibBuilder.loadTexts: eSWFiltProtPortBasedCFGEntry.setStatus('mandatory')
if mibBuilder.loadTexts: eSWFiltProtPortBasedCFGEntry.setDescription(' Entry of eSWFiltProtPortBasedCFGTable.')
eSWFiltProtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14, 5, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWFiltProtPort.setStatus('mandatory')
if mibBuilder.loadTexts: eSWFiltProtPort.setDescription('The Port number in the switch.')
eSWFiltProtcolType = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWFiltProtcolType.setStatus('mandatory')
if mibBuilder.loadTexts: eSWFiltProtcolType.setDescription('This object represents the Protocol Type Filter as applied to the Indexed Port. The Filtering capabilities is indicated by each bit in this 2 bytes octet string. 1 - Filter OUT 0 - Do not Filter Bit 0 : Filter OUT All AppleTalk Protocol Packets Bit 1 : Filter OUT All Banyan VINES Protocol Packets Bit 2 : Filter OUT All IBM Netbios Protocol Packets Bit 3 : Filter OUT All IPX/SPX Novell Protocol Packets Bit 4 : Filter OUT All IP Protocol Packets Bit 5 : Filter OUT All Unknown Protocol Packets that are not defined by the above protocol Filtering bits ( Bit 0-4) Bit 6 - 7 - Reserved.')
eSWPortCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 1), )
if mibBuilder.loadTexts: eSWPortCtrlTable.setStatus('mandatory')
if mibBuilder.loadTexts: eSWPortCtrlTable.setDescription('A table describing the port control information for each port in this group.')
eSWPortCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 1, 1), ).setIndexNames((0, "ASANTE-SWITCH-MIB", "eSWGrpPtCtrlIndex"), (0, "ASANTE-SWITCH-MIB", "eSWPortCtrlIndex"))
if mibBuilder.loadTexts: eSWPortCtrlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: eSWPortCtrlEntry.setDescription('An entry describing control information for a specific port.')
eSWGrpPtCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGrpPtCtrlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: eSWGrpPtCtrlIndex.setDescription('The group containing the port for which this entry has information.')
eSWPortCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWPortCtrlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: eSWPortCtrlIndex.setDescription('The port number for this entry.')
eSWPortCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWPortCtrlState.setStatus('mandatory')
if mibBuilder.loadTexts: eSWPortCtrlState.setDescription('Identifies whether the port is administratively enabled or disabled.')
eSWPortCtrlBcastFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWPortCtrlBcastFilter.setStatus('mandatory')
if mibBuilder.loadTexts: eSWPortCtrlBcastFilter.setDescription('Broadcast packet filtering control. If this is enabled, broadcast packets received on this port will be filtered out. The default is Disable(3).')
eSWPortCtrlStNFw = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWPortCtrlStNFw.setStatus('mandatory')
if mibBuilder.loadTexts: eSWPortCtrlStNFw.setDescription('Enables or disables store-and-forward switching for this port When set to Enable(2) the frame will be forwarded after it has been completely received and checksummed. When set to Disable(3), the port will use fragment-free switching.')
eSWPortCtrlSTP = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWPortCtrlSTP.setStatus('mandatory')
if mibBuilder.loadTexts: eSWPortCtrlSTP.setDescription('If this function is enable(1) and eSWPortCtrlState is also enable(1), that means this port will join the Spanning Tree Algorithm (STP) caculation. Asante 6016/6024 switches do not support individual port STP participation enable/disable, therefore this object will have the same value for all ports.')
eSWPortCtrlVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWPortCtrlVlanID.setStatus('mandatory')
if mibBuilder.loadTexts: eSWPortCtrlVlanID.setDescription('The 12 bit port VLAN indentifier for this port within the switch. 0 - The NULL VLAN ID. It is used when the tagging header contains only user priority information; no VLAN identifier is present in the frame. This number is not allowed here. 1 - The default VLAN ID; To be used as default PVID for the port through which tagged frames will be sent within the switch. 4095 - Reserved for implementation use.')
eSWPortCtrlVlanTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("enable8021Q", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWPortCtrlVlanTagging.setStatus('mandatory')
if mibBuilder.loadTexts: eSWPortCtrlVlanTagging.setDescription('Whether a frame should be tagged with VLAN Tagging Header when transmitted through this port within the switch. Enable - Use Asante proprietary tagging mechanism on this port wihtin the switch. Enable8021Q - Use 802.1Q standard tagging on this port within the switch. Disable - Disable the tagging on this port within the switch.')
eSWPortCtrlVlanGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWPortCtrlVlanGroups.setStatus('mandatory')
if mibBuilder.loadTexts: eSWPortCtrlVlanGroups.setDescription('This object represents the port vlan map in 2 octets. The octets meaning is as follow: If 2 octets are considered together as 16 bit field, then the least significant bit (bit0) represents VLAN Group1, bit1 represents VLAN Group2, ..., bit14 represents VLAN Group15. If a bit is set (bit value = 1) then the port in question is a member of the VLAN Group represented by the bit.')
eSWPortCtrlTrunkBundleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWPortCtrlTrunkBundleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: eSWPortCtrlTrunkBundleIndex.setDescription('A value of 0 means that the port does not belong to any trunk Bundle. A non-zero value is the index of the Trunk Bundle to which this port belongs. ')
eSWPortCtrlGVRPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWPortCtrlGVRPEnable.setStatus('mandatory')
if mibBuilder.loadTexts: eSWPortCtrlGVRPEnable.setDescription('This entry when set to enable, means GVRP frames can be transmitted and received on this port. If disabled, it means GVRP frames cannot be transmitted on this port and the received GVRP frames should be discarded. Default value for this entry is disable(2).')
eSWPortCtrlSecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("newNodeDetection", 1), ("knownMACAddressForwarding", 2), ("restrictedKnownMACAddressForwarding", 3), ("knownMACAddressForwardingWithIntruderLock", 4), ("normalPort", 5), ("other", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWPortCtrlSecurityLevel.setStatus('mandatory')
if mibBuilder.loadTexts: eSWPortCtrlSecurityLevel.setDescription('Security Level associated with the port. When set to Normal Port (5) , the Security Level (if present) will be cleared.')
eSWPortProtocolFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWPortProtocolFilter.setStatus('mandatory')
if mibBuilder.loadTexts: eSWPortProtocolFilter.setDescription('This object represents the Protocol Level Security Filter as applied to the Port. The Filtering capabilities is indicated by each bit in this 2 bytes octet string. 1 - Filter OUT 0 - Do not Filter Bit 0 : Filter OUT All AppleTalk Protocol Packets Bit 1 : Filter OUT All Banyan VINES Protocol Packets Bit 2 : Filter OUT All IBM Netbios Protocol Packets Bit 3 : Filter OUT All IPX/SPX Novell Protocol Packets Bit 4 : Filter OUT All IP Protocol Packets Bit 5 : Filter OUT All Unknown Protocol Packets that are not defined by the above protocol Filtering bits (Bit 0-4) Bit 6 - 7 - Reserved.')
eSWGpPtCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 2), )
if mibBuilder.loadTexts: eSWGpPtCtrlTable.setStatus('mandatory')
if mibBuilder.loadTexts: eSWGpPtCtrlTable.setDescription('A table containing control information for each port in a group. This table is indexed by the group number. It uses a BYTE mapping method. Each byte represents control information for a port in this group. The main purpose of creating this table is to reduce the SNMP engine parsing time and the load of network traffic.')
eSWGpPtCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 2, 1), ).setIndexNames((0, "ASANTE-SWITCH-MIB", "eSWGpPtCtrlIndex"))
if mibBuilder.loadTexts: eSWGpPtCtrlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: eSWGpPtCtrlEntry.setDescription('An entry of table eSWGpPtCtrlTable.')
eSWGpPtCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGpPtCtrlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: eSWGpPtCtrlIndex.setDescription('The index of this table. It is the group number.')
eSWGpPtCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWGpPtCtrlState.setStatus('mandatory')
if mibBuilder.loadTexts: eSWGpPtCtrlState.setDescription('This octet string displays the administrative enable/disable state of each port in the group. Each octet represents one port; therefore, octet 0 is port 1 and octet 9 is port 10. Each octet stores the data from eSWPortCtrlState.')
eSWGpPtCtrlBcastFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWGpPtCtrlBcastFilter.setStatus('mandatory')
if mibBuilder.loadTexts: eSWGpPtCtrlBcastFilter.setDescription('This octet string displays the broadcast filter state for each port in this group. Each octet represents one port; therefore, octet 0 is port 1 and octet 9 is port 10. Each octet stores the data from eSWPortCtrlBcastFilter.')
eSWGpPtCtrlStNFw = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGpPtCtrlStNFw.setStatus('mandatory')
if mibBuilder.loadTexts: eSWGpPtCtrlStNFw.setDescription('This octet string displays the switching technique (store-and-forward or fragment-free) being used by each port in the group. Each octet represents one port; therefore, octet 0 is port 1 and octet 9 is port 10. Each octet stores the data from eSWPortCtrlStNFw.')
eSWGpPtCtrlSTP = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGpPtCtrlSTP.setStatus('mandatory')
if mibBuilder.loadTexts: eSWGpPtCtrlSTP.setDescription("This octet string displays the individual port's participation in the Spanning Tree Algorithm. Asante 62xx switches do not support individual port STP participation, so all ports should show the same value. Each octet stores the value from eSWPortCtrlSTP.")
eSWGpPtCtrlSecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWGpPtCtrlSecurityLevel.setStatus('mandatory')
if mibBuilder.loadTexts: eSWGpPtCtrlSecurityLevel.setDescription('This octet string is for the Security Level information of each port in the group. Each octet represents one port; therefore , the octet 0 is port 1 and the octet 9 is port 10. Each octet stores the data from eSWPortCtrlSecurityLevel.')
eSWGpPtProtocolFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWGpPtProtocolFilter.setStatus('mandatory')
if mibBuilder.loadTexts: eSWGpPtProtocolFilter.setDescription('This octet string represents the Protocol Level Security Filter as applied to each Port. Each octet represents one port; therefore , the octet 0 is port 1 and the octet 9 is port 10. Each octet stores the data from eSWPortProtocolFilter.')
eSWAutoPortCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 3), )
if mibBuilder.loadTexts: eSWAutoPortCtrlTable.setStatus('mandatory')
if mibBuilder.loadTexts: eSWAutoPortCtrlTable.setDescription("A table containing information about each port's auto- negotiation information.")
eSWAutoPortCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 3, 1), ).setIndexNames((0, "ASANTE-SWITCH-MIB", "eSWAutoNegGrpIndex"), (0, "ASANTE-SWITCH-MIB", "eSWAutoNegPortIndex"))
if mibBuilder.loadTexts: eSWAutoPortCtrlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: eSWAutoPortCtrlEntry.setDescription('A entry of eSWAutoPortControlTable. It uses eSWAutoNegGrpIndex and eSWAutoNegPortIndex to find the table entry.')
eSWAutoNegGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWAutoNegGrpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: eSWAutoNegGrpIndex.setDescription('The value of this object identifies the group for which this entry contains port auto-negotiation information.')
eSWAutoNegPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWAutoNegPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: eSWAutoNegPortIndex.setDescription('The value of this object identifies the port for which this entry contains auto-negotiation information.')
eSWAutoNegAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWAutoNegAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: eSWAutoNegAdminState.setDescription('A port which has auto-negotiation signaling ability will be enabled to do so when this object is set to enabled(2). If the object is set to disable(3) the port will operate as if it had no auto-negotiation ability.')
eSWAutoNegRemoteAble = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("able", 2), ("not-able", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWAutoNegRemoteAble.setStatus('mandatory')
if mibBuilder.loadTexts: eSWAutoNegRemoteAble.setDescription('This object will be set to able(2) if the port has detected that the link partner has auto-negotiation ability.')
eSWAutoNegAutoConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("configuring", 2), ("complete", 3), ("disable", 4), ("parallel-detect-fail", 5), ("remote-fault", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWAutoNegAutoConfig.setStatus('mandatory')
if mibBuilder.loadTexts: eSWAutoNegAutoConfig.setDescription('Indicates whether Auto Negotiation signaling is in progress or has completed.')
eSWAutoNegLocalAbility = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWAutoNegLocalAbility.setStatus('mandatory')
if mibBuilder.loadTexts: eSWAutoNegLocalAbility.setDescription('The connecting ability of local port. The capability of the local port will be represented by each bit in this 2 byte octet string. The meaning of each bit is as follows: 0: is not capable 1: is capable Bit 0 : undefined Bit 1 : 10Mbps Ethernet capable Bit 2 : 10Mbps Ethernet full duplex capable Bit 3 : 100BASE-TX capable Bit 4 : 100BASE-TX full duplex capable Bit 5 : 100BASE-FX full duplex capable Bit 6 : 100BASE-T4 capable Bit 7 : 802.9 capable Bit 8 - 15 : reserved Note that the bit ordering is such that the most significant bit (in network order) is bit 0.')
eSWAutoNegAdvertisedAbility = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWAutoNegAdvertisedAbility.setStatus('mandatory')
if mibBuilder.loadTexts: eSWAutoNegAdvertisedAbility.setDescription('This object represents the capabilities which will be advertised in the Auto-Negotiation sequence. The capability is indicated by each bit in this 2 byte octet string. 0: is not capable 1: is capable Bit 0 : default capabilities Bit 1 : 10Mbps Ethernet capable Bit 2 : 10Mbps Ethernet full duplex capable Bit 3 : 100BASE-TX capable Bit 4 : 100BASE-TX full duplex capable Bit 5 : 100BASE-FX full duplex capable Bit 6 : 100BASE-T4 capable Bit 7 : 802.9 capable Bit 8 - 15 : reserved Note that Auto-Negotiation will restart automatically if the supported capabilities are set. The bit ordering is such that the most significant bit (in network order) is Bit 0.')
eSWAutoNegReceivedAbility = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWAutoNegReceivedAbility.setStatus('mandatory')
if mibBuilder.loadTexts: eSWAutoNegReceivedAbility.setDescription('Indicates the advertised capabilities of link partner. The capability will be represented by each bit in this 2 byte octet string. The meaning of each bit is as follows: 0: is not capable 1: is capable Bit 0 : undefined Bit 1 : 10Mbps Ethernet capable Bit 2 : 10Mbps Ethernet full duplex capable Bit 3 : 100BASE-TX capable Bit 4 : 100BASE-TX full duplex capable Bit 5 : 100BASE-FX full duplex capable Bit 6 : 100BASE-T4 capable Bit 7 : 802.9 capable Bit 8 - 15 : reserved Note that the bit ordering is such that the most significant bit (in network order) is bit 0.')
eSWAutoNegRestartAutoConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("reStart", 2), ("noRestart", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWAutoNegRestartAutoConfig.setStatus('mandatory')
if mibBuilder.loadTexts: eSWAutoNegRestartAutoConfig.setDescription('Forces auto-negotiation to begin link negotiation. Has no effect if auto-negotiation signaling is diabled. Always returns noRestart(3).')
eSWMonIPTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 4, 1), )
if mibBuilder.loadTexts: eSWMonIPTable.setStatus('mandatory')
if mibBuilder.loadTexts: eSWMonIPTable.setDescription('This table describes the source IP address and source MAC address mapping pair. It also provides a function to detect IP address duplication. This table can show that 2 MAC addresses map to the same IP address. It is an important function to help the system administrator to do network administration.')
eSWMonIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 4, 1, 1), ).setIndexNames((0, "ASANTE-SWITCH-MIB", "eSWMonIP"))
if mibBuilder.loadTexts: eSWMonIPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: eSWMonIPEntry.setDescription('The entry of this table. The table is indexed by the MAC address.')
eSWMonIP = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 4, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWMonIP.setStatus('mandatory')
if mibBuilder.loadTexts: eSWMonIP.setDescription('The IP address corresponding to the MAC address in eSWMonMAC.')
eSWMonMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 4, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWMonMAC.setStatus('mandatory')
if mibBuilder.loadTexts: eSWMonMAC.setDescription('The source MAC address of the monitor entry.')
eSWMonVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWMonVLANID.setStatus('mandatory')
if mibBuilder.loadTexts: eSWMonVLANID.setDescription('The VLAN number of this monitor address entry.')
eSWMonGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWMonGrp.setStatus('mandatory')
if mibBuilder.loadTexts: eSWMonGrp.setDescription('The IP address is learned from which group number.')
eSWMonPort = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWMonPort.setStatus('mandatory')
if mibBuilder.loadTexts: eSWMonPort.setDescription("The port on which the IP address was learned The agent should display value = (maximum number of ports in the system + 1) when reflecting the System's Management IP address.")
eSWFanFail = NotificationType((1, 3, 6, 1, 4, 1, 298) + (0,3)).setObjects(("ASANTE-SWITCH-MIB", "eSWGrpIndex"))
if mibBuilder.loadTexts: eSWFanFail.setDescription('The SNMP trap that is generated when a fan in the switch fails.')
eSWExpPortConnectStateChange = NotificationType((1, 3, 6, 1, 4, 1, 298) + (0,4)).setObjects(("ASANTE-SWITCH-MIB", "eSWGrpIndex"), ("ASANTE-SWITCH-MIB", "eSWPortIndex"))
if mibBuilder.loadTexts: eSWExpPortConnectStateChange.setDescription('This trap will be sent when an MII module is inserted or removed from the MII slot The trap contains the port number of the MII slot whose state has changed.')
eSWIPSpoofing = NotificationType((1, 3, 6, 1, 4, 1, 298) + (0,5)).setObjects(("ASANTE-SWITCH-MIB", "eSWMonIP"), ("ASANTE-SWITCH-MIB", "eSWMonMAC"), ("ASANTE-SWITCH-MIB", "eSWMonPort"), ("ASANTE-SWITCH-MIB", "eSWMonIP"), ("ASANTE-SWITCH-MIB", "eSWMonMAC"), ("ASANTE-SWITCH-MIB", "eSWMonPort"))
if mibBuilder.loadTexts: eSWIPSpoofing.setDescription('This trap is caused by the detection of a duplicate IP address. It means that there are 2 or more stations using the same IP address. The first three parameters are the IP address, MAC address, and port number of the existing workstation. The remaining three parameters are the IP address, MAC address, and port number of to the workstation which is trying to spoof the network environment. Therefore, the IP addresses should be the same, but the MAC addresses are different.')
eSWStationMove = NotificationType((1, 3, 6, 1, 4, 1, 298) + (0,6)).setObjects(("ASANTE-SWITCH-MIB", "eSWMonIP"), ("ASANTE-SWITCH-MIB", "eSWMonMAC"), ("ASANTE-SWITCH-MIB", "eSWMonPort"))
if mibBuilder.loadTexts: eSWStationMove.setDescription('The trap is caused by the detection of station moving.')
eSWNewNodeDetected = NotificationType((1, 3, 6, 1, 4, 1, 298) + (0,7)).setObjects(("ASANTE-SWITCH-MIB", "eSWMonPort"), ("ASANTE-SWITCH-MIB", "eSWMonMAC"), ("ASANTE-SWITCH-MIB", "eSWMonIP"))
if mibBuilder.loadTexts: eSWNewNodeDetected.setDescription('The trap is generated when any port which is set for New Node Detection Security levels detects any New Node.')
eSWIntruderDetected = NotificationType((1, 3, 6, 1, 4, 1, 298) + (0,8)).setObjects(("ASANTE-SWITCH-MIB", "eSWMonPort"), ("ASANTE-SWITCH-MIB", "eSWMonMAC"), ("ASANTE-SWITCH-MIB", "eSWMonIP"), ("ASANTE-SWITCH-MIB", "eSWSecurityLevel"))
if mibBuilder.loadTexts: eSWIntruderDetected.setDescription('The trap is generated when any port which is set for security levels 1) Known MAC Address Forwarding 2) Known MAC Address Forwarding with Intruder Lock detects any Intruder MAC Address.')
eSWIntruderPortDisable = NotificationType((1, 3, 6, 1, 4, 1, 298) + (0,9)).setObjects(("ASANTE-SWITCH-MIB", "eSWMonPort"), ("ASANTE-SWITCH-MIB", "eSWMonMAC"), ("ASANTE-SWITCH-MIB", "eSWMonIP"))
if mibBuilder.loadTexts: eSWIntruderPortDisable.setDescription('The trap is generated when any port which is set for security levels restricted Known MAC Address Forwarding detects Intruder MAC Address and disables the Port.')
eSWEnhIPSpoofing = NotificationType((1, 3, 6, 1, 4, 1, 298) + (0,10)).setObjects(("ASANTE-SWITCH-MIB", "eSWMonIP"), ("ASANTE-SWITCH-MIB", "eSWMonMAC"), ("ASANTE-SWITCH-MIB", "eSWMonVLANID"), ("ASANTE-SWITCH-MIB", "eSWMonGrp"), ("ASANTE-SWITCH-MIB", "eSWMonPort"), ("ASANTE-SWITCH-MIB", "eSWMonMAC"), ("ASANTE-SWITCH-MIB", "eSWMonVLANID"), ("ASANTE-SWITCH-MIB", "eSWMonGrp"), ("ASANTE-SWITCH-MIB", "eSWMonPort"))
if mibBuilder.loadTexts: eSWEnhIPSpoofing.setDescription('This trap is caused by the detection of a duplicate IP address. It means that there are 2 or more stations using the same IP address. The first parameter is the IP Address which is duplicated. The next three parameters are the MAC address, VLAN ID, Group number and port number of the switch from where the original IP-MAC Address binding was detected. The remaining three parameters are the MAC address, VLAN ID, Group number and Port number of the switch from where the spoofed IP-MAC Address binding was detected.')
eSWEnhStationMove = NotificationType((1, 3, 6, 1, 4, 1, 298) + (0,11)).setObjects(("ASANTE-SWITCH-MIB", "eSWMonIP"), ("ASANTE-SWITCH-MIB", "eSWMonMAC"), ("ASANTE-SWITCH-MIB", "eSWMonVLANID"), ("ASANTE-SWITCH-MIB", "eSWMonGrp"), ("ASANTE-SWITCH-MIB", "eSWMonPort"), ("ASANTE-SWITCH-MIB", "eSWMonGrp"), ("ASANTE-SWITCH-MIB", "eSWMonPort"))
if mibBuilder.loadTexts: eSWEnhStationMove.setDescription('The trap is caused by the detection of station movement. The first two parameters are the IP Address and MAC Address of the station which was moved across the switch ports. The next parameter is the VLAN ID to which eSWMonMAC MAC Address has been classified.The next two parameters are the Group number and Port number within the switch where the station was originally (first) detected. The next two parameters are the Group number and Port number within the switch where the station was moved.')
eSWEnhNewNodeDetected = NotificationType((1, 3, 6, 1, 4, 1, 298) + (0,12)).setObjects(("ASANTE-SWITCH-MIB", "eSWMonGrp"), ("ASANTE-SWITCH-MIB", "eSWMonPort"), ("ASANTE-SWITCH-MIB", "eSWMonMAC"), ("ASANTE-SWITCH-MIB", "eSWMonVLANID"), ("ASANTE-SWITCH-MIB", "eSWMonIP"))
if mibBuilder.loadTexts: eSWEnhNewNodeDetected.setDescription('The trap is generated when any port which is set for New Node Detection Security level detects any New Node. The two parameters are the Group number and Port number. The next three parameters are the MAC Address ,VLAN ID (to which eSWMonMAC MAC Address has been classifiedand) and IP Address of the newly detected node.')
eSWEnhIntruderDetected = NotificationType((1, 3, 6, 1, 4, 1, 298) + (0,13)).setObjects(("ASANTE-SWITCH-MIB", "eSWMonGrp"), ("ASANTE-SWITCH-MIB", "eSWMonPort"), ("ASANTE-SWITCH-MIB", "eSWMonMAC"), ("ASANTE-SWITCH-MIB", "eSWMonVLANID"), ("ASANTE-SWITCH-MIB", "eSWMonIP"))
if mibBuilder.loadTexts: eSWEnhIntruderDetected.setDescription('The trap is generated when any secured port detects Intruder node. For the secured port Intruder nodes are the nodes whose MAC Address is not part of port trusted MAC Address set. The first two parameters are the Group number and Port number. The next three parameters are the MAC Address ,VLAN ID (to which eSWMonMAC MAC Address has been classifiedand) and IP Address of the Intruder Node.')
eSWEnhIntruderPortDisable = NotificationType((1, 3, 6, 1, 4, 1, 298) + (0,14)).setObjects(("ASANTE-SWITCH-MIB", "eSWMonGrp"), ("ASANTE-SWITCH-MIB", "eSWMonPort"), ("ASANTE-SWITCH-MIB", "eSWMonMAC"), ("ASANTE-SWITCH-MIB", "eSWMonVLANID"), ("ASANTE-SWITCH-MIB", "eSWMonIP"))
if mibBuilder.loadTexts: eSWEnhIntruderPortDisable.setDescription('The trap is generated when any port which is set for Intruder Port Disable security level detects Intruder MAC Address and disables the secured Port. For the secured port Intruder nodes are the nodes whose MAC Address is not part of port trusted MAC Address set. The first two parameters are the Group number and Port number. The next three parameters are the MAC Address ,VLAN ID (to which eSWMonMAC MAC Address has been classifiedand) and IP Address of the Intruder Node which caused the port to be disabled.')
mibBuilder.exportSymbols("ASANTE-SWITCH-MIB", eSWFiltMACPortBasedConfigTable=eSWFiltMACPortBasedConfigTable, eSWRemoteConfigServer=eSWRemoteConfigServer, eSWTrunkBundleEntry=eSWTrunkBundleEntry, agentNetProtocol=agentNetProtocol, eSWFilteringTypesSupported=eSWFilteringTypesSupported, friendlyswitch=friendlyswitch, eSWPortCtrlIndex=eSWPortCtrlIndex, eSWAgentSW=eSWAgentSW, eSWMonIPEntry=eSWMonIPEntry, eSWResetLeftTime=eSWResetLeftTime, eSWExpPortConnectStateChange=eSWExpPortConnectStateChange, ipagentTrapRcvrIpAddr=ipagentTrapRcvrIpAddr, eSWTelnetSessions=eSWTelnetSessions, eSWVlanVersion=eSWVlanVersion, ipagentDefaultGateway=ipagentDefaultGateway, eSWConfigRetryCounter=eSWConfigRetryCounter, eSWGrpDescrption=eSWGrpDescrption, eSWTrunkBundlePortB=eSWTrunkBundlePortB, eSWGpPtCtrlState=eSWGpPtCtrlState, eSWFilteringInfo=eSWFilteringInfo, eSWFiltMACVLANBasedConfigEntry=eSWFiltMACVLANBasedConfigEntry, eSWGrpType=eSWGrpType, switch=switch, eSWStationMove=eSWStationMove, eSWVlanTypesSupported=eSWVlanTypesSupported, eSWSecMonitorPort=eSWSecMonitorPort, eSWAutoNegReceivedAbility=eSWAutoNegReceivedAbility, eSWAutoNegAdminState=eSWAutoNegAdminState, eSWEnhIntruderDetected=eSWEnhIntruderDetected, eSWGrpIndex=eSWGrpIndex, eSWAutoNegGrpIndex=eSWAutoNegGrpIndex, snmpAgent=snmpAgent, eSWIntMACAddrPort=eSWIntMACAddrPort, ipagentTrapRcvrEntry=ipagentTrapRcvrEntry, eSWAutoNegPortIndex=eSWAutoNegPortIndex, eSWFiltProtcolType=eSWFiltProtcolType, eSWAutoPortCtrlEntry=eSWAutoPortCtrlEntry, eSWGpPtInfoAutoNegAbility=eSWGpPtInfoAutoNegAbility, eSWPortIndex=eSWPortIndex, eSWSecurityTypesSupported=eSWSecurityTypesSupported, eSWNewNodeDetected=eSWNewNodeDetected, eSWAgentFW=eSWAgentFW, eSWCfgFileErrStatus=eSWCfgFileErrStatus, agentRunTimeImageMajorVer=agentRunTimeImageMajorVer, intraswitch=intraswitch, agentFwMajorVer=agentFwMajorVer, ipagentTrapRcvrTable=ipagentTrapRcvrTable, eSWFlashRAMSize=eSWFlashRAMSize, eSWGpPtInfoIndex=eSWGpPtInfoIndex, eSWGroupInfoEntry=eSWGroupInfoEntry, eSWGpPtCtrlSTP=eSWGpPtCtrlSTP, eSWGpPtCtrlSecurityLevel=eSWGpPtCtrlSecurityLevel, eSWBankIndex=eSWBankIndex, eSWGpPtCtrlStNFw=eSWGpPtCtrlStNFw, eSWIntruderPortDisable=eSWIntruderPortDisable, eSWGrpReset=eSWGrpReset, eSWEnhIntruderPortDisable=eSWEnhIntruderPortDisable, intraCore8000=intraCore8000, eSWBkpType=eSWBkpType, eSWPortGrpIndex=eSWPortGrpIndex, ipagentProtocol=ipagentProtocol, eSWGpPtCtrlTable=eSWGpPtCtrlTable, eSWEnhNewNodeDetected=eSWEnhNewNodeDetected, eSWTelnetSessionActive=eSWTelnetSessionActive, eSWNetworkSecurityVersion=eSWNetworkSecurityVersion, eAsntSwitch=eAsntSwitch, eSWNetworkSecurityMAXLevels=eSWNetworkSecurityMAXLevels, eSWPortCtrlGVRPEnable=eSWPortCtrlGVRPEnable, intraSwitch6224=intraSwitch6224, agentReset=agentReset, eSWFiltPMACStatus=eSWFiltPMACStatus, eSWFiltPMACAddr=eSWFiltPMACAddr, eSWIPSpoofing=eSWIPSpoofing, eSWGpPtInfoLink=eSWGpPtInfoLink, eSWVlanMemberSet=eSWVlanMemberSet, eSWGpPtInfoTable=eSWGpPtInfoTable, eSWPortCtrlEntry=eSWPortCtrlEntry, eSWGrpNumofPorts=eSWGrpNumofPorts, eSWGrpState=eSWGrpState, eSWPtMacPort=eSWPtMacPort, eSWNetSecurityInfo=eSWNetSecurityInfo, eSWGpPtInfoDuplex=eSWGpPtInfoDuplex, eSWSecIntMACAddrTable=eSWSecIntMACAddrTable, eSWResetWaitTime=eSWResetWaitTime, eSWEnhIPSpoofing=eSWEnhIPSpoofing, eSWUpDownloadAction=eSWUpDownloadAction, eSWTrunkBundleIndex=eSWTrunkBundleIndex, intrastack=intrastack, agentHwReVer=agentHwReVer, eSWType=eSWType, eSWSecIncSetConfigEntry=eSWSecIncSetConfigEntry, agentFw=agentFw, eSWGrpLED=eSWGrpLED, eSWIncSetMACStatus=eSWIncSetMACStatus, eSWGrpLastChange=eSWGrpLastChange, eSWAutoPortCtrlTable=eSWAutoPortCtrlTable, eSWCtrl=eSWCtrl, eSWGpPtProtocolFilter=eSWGpPtProtocolFilter, eSWDRAMSize=eSWDRAMSize, eSWGrpNumofExpPorts=eSWGrpNumofExpPorts, eSWGroupCapacity=eSWGroupCapacity, eSWFiltMACVLANBasedConfigTable=eSWFiltMACVLANBasedConfigTable, eSWPortCtrlState=eSWPortCtrlState, eSWVlanMaxCapacity=eSWVlanMaxCapacity, eSWFiltProtPortBasedCFGTable=eSWFiltProtPortBasedCFGTable, eSWFiltVLANProtocolType=eSWFiltVLANProtocolType, eSWFiltPortIndex=eSWFiltPortIndex, eSWBasic=eSWBasic, eSWMonIP=eSWMonIP, eSWFiltProtVLANBasedCFGEntry=eSWFiltProtVLANBasedCFGEntry, ipagentUnAuthIP=ipagentUnAuthIP, eSWRemoteConfigFileName=eSWRemoteConfigFileName, eSWGpPtInfoSpeed=eSWGpPtInfoSpeed, eSWGrpID=eSWGrpID, eSWBankImageInfoTable=eSWBankImageInfoTable, eSWFanFail=eSWFanFail, eSWSecConfigTable=eSWSecConfigTable, ipagentTrapRcvrComm=ipagentTrapRcvrComm, ipagentUnAuthComm=ipagentUnAuthComm, eSWRemoteDownloadFile=eSWRemoteDownloadFile, eSWStackLastChange=eSWStackLastChange, eSWAutoNegLocalAbility=eSWAutoNegLocalAbility, ipagentIpAddr=ipagentIpAddr, eSWVlanEntry=eSWVlanEntry, eSWSecIntMACAddrEntry=eSWSecIntMACAddrEntry, eSWVlanID=eSWVlanID, eSWPortCtrlSecurityLevel=eSWPortCtrlSecurityLevel, eSWGpPtCtrlEntry=eSWGpPtCtrlEntry, eSWMonitor=eSWMonitor, eSWMajorVer=eSWMajorVer, eSWSecIncSetConfigTable=eSWSecIncSetConfigTable, eSWIncSetPort=eSWIncSetPort, eSWUpDownloadStatus=eSWUpDownloadStatus, eSWGpPtInfoEntry=eSWGpPtInfoEntry, intraSwitch6216M=intraSwitch6216M, eSWMinorVer=eSWMinorVer, eSWGrpPtCtrlIndex=eSWGrpPtCtrlIndex, eSWMonVLANID=eSWMonVLANID, agentImageLoadMode=agentImageLoadMode, eSWIncSetMACAddr=eSWIncSetMACAddr, eSWAutoNegAutoConfig=eSWAutoNegAutoConfig, intraCore9000=intraCore9000, eSWSecConfigEntry=eSWSecConfigEntry, eSWTrunkBundleTable=eSWTrunkBundleTable, eSWEEPROMSize=eSWEEPROMSize, eSWTrunkBundlePortA=eSWTrunkBundlePortA, eSWFiltMACPortBasedConfigEntry=eSWFiltMACPortBasedConfigEntry, eSWPortCtrlStNFw=eSWPortCtrlStNFw, eSWMonGrp=eSWMonGrp, asante=asante, eSWImageRetryCounter=eSWImageRetryCounter, ipagentTrapRcvrStatus=ipagentTrapRcvrStatus, eSWPortAutoNegAbility=eSWPortAutoNegAbility, eSWPtMacInfoEntry=eSWPtMacInfoEntry, eSWPtMacInfoTable=eSWPtMacInfoTable, eSWFiltProtVLANBasedCFGTable=eSWFiltProtVLANBasedCFGTable, eSWAutoNegAdvertisedAbility=eSWAutoNegAdvertisedAbility, ipagentIpNetMask=ipagentIpNetMask, eSWPortInfoTable=eSWPortInfoTable, agentHw=agentHw, eSWRemoteImageServer=eSWRemoteImageServer, eSWGpPtCtrlBcastFilter=eSWGpPtCtrlBcastFilter, MacAddress=MacAddress, products=products, eSWTrunkBundleCapacity=eSWTrunkBundleCapacity, eSWSecurityLevel=eSWSecurityLevel, eSWFiltMACSts=eSWFiltMACSts, eSWVLANIndex=eSWVLANIndex, agentOutBandBaudRate=agentOutBandBaudRate, eSWTrunkBundleState=eSWTrunkBundleState, eSWVlanInfo=eSWVlanInfo, eSWVlanMgmAccess=eSWVlanMgmAccess, eSWFiltProtPort=eSWFiltProtPort, eSWAgentHW=eSWAgentHW, eSWPortInfoEntry=eSWPortInfoEntry, productId=productId, agentSw=agentSw, eSWVIDIndex=eSWVIDIndex, agentFwMinorVer=agentFwMinorVer, eSWBankImageInfoEntry=eSWBankImageInfoEntry, eSWGrpFanStatus=eSWGrpFanStatus, eSWPortLink=eSWPortLink, eSWGpPtInfoType=eSWGpPtInfoType, eSWMonMAC=eSWMonMAC, eSWIntMACAddr=eSWIntMACAddr, agentHwVer=agentHwVer, eSWPortCtrlVlanID=eSWPortCtrlVlanID, eSWPortType=eSWPortType, eSWPortSpeed=eSWPortSpeed, agentRunTimeImageMinorVer=agentRunTimeImageMinorVer, eSWAgent=eSWAgent, eSWTelnetTimeOut=eSWTelnetTimeOut, eSWBCastMcastThreshold=eSWBCastMcastThreshold, eSWPortCtrlVlanTagging=eSWPortCtrlVlanTagging, eSWDateTime=eSWDateTime, eSWPtMacMACADDR=eSWPtMacMACADDR, eSWGpPtCtrlIndex=eSWGpPtCtrlIndex, eSWPortCtrlTrunkBundleIndex=eSWPortCtrlTrunkBundleIndex, ipagentBootServerAddr=ipagentBootServerAddr, eSWFiltProtPortBasedCFGEntry=eSWFiltProtPortBasedCFGEntry, eSWRemoteDownloadImageBank=eSWRemoteDownloadImageBank, agentRemoteBootInfo=agentRemoteBootInfo, eSWIntruderDetected=eSWIntruderDetected, agentRemoteBootProtocol=agentRemoteBootProtocol, eSWFiltProtocolVID=eSWFiltProtocolVID, agentNetProtoStkCapMap=agentNetProtoStkCapMap, eSWPortCtrlBcastFilter=eSWPortCtrlBcastFilter, eSWPortCtrlTable=eSWPortCtrlTable, eSWMonIPTable=eSWMonIPTable, eSWAutoNegRemoteAble=eSWAutoNegRemoteAble, eSWBCastMcastDuration=eSWBCastMcastDuration, agentOutBandDialString=agentOutBandDialString, eSWSecurityTrapEnable=eSWSecurityTrapEnable, eSWFiltMACAddr=eSWFiltMACAddr, eSWVlanName=eSWVlanName, eSWEnhStationMove=eSWEnhStationMove, eSWSecPortIndex=eSWSecPortIndex, eSWPortProtocolFilter=eSWPortProtocolFilter, eSWPortCtrlSTP=eSWPortCtrlSTP, eSWRemoteImageFileName=eSWRemoteImageFileName, eSWAutoNegRestartAutoConfig=eSWAutoNegRestartAutoConfig, eSWVlanTable=eSWVlanTable, eSWPortCtrlVlanGroups=eSWPortCtrlVlanGroups, eSWMonPort=eSWMonPort, eSWActiveImageBank=eSWActiveImageBank, agentRemoteBootFile=agentRemoteBootFile, eSWGroupInfoTable=eSWGroupInfoTable, eSWSTP=eSWSTP, eSWPortDuplex=eSWPortDuplex, concProductId=concProductId, eSWUserInterfaceTimeOut=eSWUserInterfaceTimeOut)
