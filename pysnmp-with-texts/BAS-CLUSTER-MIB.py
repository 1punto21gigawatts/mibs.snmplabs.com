#
# PySNMP MIB module BAS-CLUSTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAS-CLUSTER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:33:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
BasSlotId, basCluster, BasInterfaceId, BasChassisId, BasLogicalPortId = mibBuilder.importSymbols("BAS-MIB", "BasSlotId", "basCluster", "BasInterfaceId", "BasChassisId", "BasLogicalPortId")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, ObjectIdentity, Bits, ModuleIdentity, MibIdentifier, iso, TimeTicks, Integer32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Unsigned32, Counter64, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ObjectIdentity", "Bits", "ModuleIdentity", "MibIdentifier", "iso", "TimeTicks", "Integer32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Unsigned32", "Counter64", "Gauge32")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
basClusterMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 3493, 2, 18, 1))
if mibBuilder.loadTexts: basClusterMib.setLastUpdated('9911181828Z')
if mibBuilder.loadTexts: basClusterMib.setOrganization('Broadband Access Systems')
if mibBuilder.loadTexts: basClusterMib.setContactInfo(' Tech Support Broadband Access Systems 8 Technology Drive Westborough, MA 01581 U.S.A. 508-336-8833 support@basystems.com')
if mibBuilder.loadTexts: basClusterMib.setDescription('This MIB module defines the configuration MIB objects for a Broadband Access System Cluster.')
basClusterConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 18, 1, 1))
basClChTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 18, 1, 1, 1), )
if mibBuilder.loadTexts: basClChTable.setStatus('current')
if mibBuilder.loadTexts: basClChTable.setDescription('Info about the list of Chassis known to a slot.')
basClChEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 18, 1, 1, 1, 1), ).setIndexNames((0, "BAS-CLUSTER-MIB", "basClChLocalChassis"), (0, "BAS-CLUSTER-MIB", "basClChLocalSlot"), (0, "BAS-CLUSTER-MIB", "basClChLocalIf"), (0, "BAS-CLUSTER-MIB", "basClChLocalLPort"), (0, "BAS-CLUSTER-MIB", "basClChRemoteChassis"))
if mibBuilder.loadTexts: basClChEntry.setStatus('current')
if mibBuilder.loadTexts: basClChEntry.setDescription('Info about a chassis.')
basClChLocalChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 18, 1, 1, 1, 1, 1), BasChassisId())
if mibBuilder.loadTexts: basClChLocalChassis.setStatus('current')
if mibBuilder.loadTexts: basClChLocalChassis.setDescription('The BAS Chassis ID of the local slot.')
basClChLocalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 18, 1, 1, 1, 1, 2), BasSlotId())
if mibBuilder.loadTexts: basClChLocalSlot.setStatus('current')
if mibBuilder.loadTexts: basClChLocalSlot.setDescription('The BAS Slot ID of the local slot.')
basClChLocalIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 18, 1, 1, 1, 1, 3), BasInterfaceId())
if mibBuilder.loadTexts: basClChLocalIf.setStatus('current')
if mibBuilder.loadTexts: basClChLocalIf.setDescription('The BAS interface ID of the local slot.')
basClChLocalLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 18, 1, 1, 1, 1, 4), BasLogicalPortId())
if mibBuilder.loadTexts: basClChLocalLPort.setStatus('current')
if mibBuilder.loadTexts: basClChLocalLPort.setDescription('The BAS logical port ID of the local slot.')
basClChRemoteChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 18, 1, 1, 1, 1, 5), BasChassisId())
if mibBuilder.loadTexts: basClChRemoteChassis.setStatus('current')
if mibBuilder.loadTexts: basClChRemoteChassis.setDescription('The BAS Chassis ID of the remote chassis.')
basClChLocalNextSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 18, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basClChLocalNextSlot.setStatus('current')
if mibBuilder.loadTexts: basClChLocalNextSlot.setDescription('The BAS Slot ID of the next hop local slot.')
basClChLocalNextIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 18, 1, 1, 1, 1, 7), BasInterfaceId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basClChLocalNextIf.setStatus('current')
if mibBuilder.loadTexts: basClChLocalNextIf.setDescription('The BAS interface ID of the next hop local slot.')
basClChLocalNextLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 18, 1, 1, 1, 1, 8), BasLogicalPortId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basClChLocalNextLPort.setStatus('current')
if mibBuilder.loadTexts: basClChLocalNextLPort.setDescription('The BAS logical port ID of the next hop local slot.')
basClChTargetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 18, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basClChTargetStatus.setStatus('current')
if mibBuilder.loadTexts: basClChTargetStatus.setDescription('The status object used to determine if the entry is valid or not.')
basClChArpFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 18, 1, 1, 1, 1, 10), Bits().clone(namedValues=NamedValues(("clear", 0), ("waiting", 1), ("doNotQueue", 2), ("doNotTimeout", 3), ("cmtsWaiting", 4), ("cmtsOk", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basClChArpFlags.setStatus('current')
if mibBuilder.loadTexts: basClChArpFlags.setDescription('ICL ARP flags.')
mibBuilder.exportSymbols("BAS-CLUSTER-MIB", PYSNMP_MODULE_ID=basClusterMib, basClChLocalSlot=basClChLocalSlot, basClChArpFlags=basClChArpFlags, basClChLocalIf=basClChLocalIf, basClChLocalNextLPort=basClChLocalNextLPort, basClChTargetStatus=basClChTargetStatus, basClusterMib=basClusterMib, basClChLocalNextIf=basClChLocalNextIf, basClChEntry=basClChEntry, basClChRemoteChassis=basClChRemoteChassis, basClChLocalLPort=basClChLocalLPort, basClChTable=basClChTable, basClChLocalNextSlot=basClChLocalNextSlot, basClusterConfig=basClusterConfig, basClChLocalChassis=basClChLocalChassis)
