#
# PySNMP MIB module HPNSAENV-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPNSAENV-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:42:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, ModuleIdentity, Integer32, ObjectIdentity, enterprises, Counter32, MibIdentifier, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, TimeTicks, Counter64, NotificationType, Bits, iso = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ModuleIdentity", "Integer32", "ObjectIdentity", "enterprises", "Counter32", "MibIdentifier", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "TimeTicks", "Counter64", "NotificationType", "Bits", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hp = MibIdentifier((1, 3, 6, 1, 4, 1, 11))
nm = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2))
hpnsa = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23))
hpnsaEnvironment = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 26))
hpnsaEnvMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 1))
hpnsaEnvVoltageData = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2))
hpnsaEnvTemperatureData = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3))
hpnsaEnvFanSensorData = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4))
hpnsaEnvChassisData = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 5))
hpnsaEnvMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvMibRevMajor.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvMibRevMajor.setDescription('The major revision level of the Agent (left of the decimal). Used for presence checking.')
hpnsaEnvMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvMibRevMinor.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvMibRevMinor.setDescription('The minor revision level of the Agent (right of the decimal).')
hpnsaEnvVoltageSensorTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1), )
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorTable.setDescription('A table consisting of status, thresholds, and readings of the voltage sensors.')
hpnsaEnvVoltageSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1), ).setIndexNames((0, "HPNSAENV-MIB", "hpnsaEnvVoltageSensorIndex"))
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorEntry.setDescription('Reading, status, and a set of system thresholds for a particular system environmet voltage sensor.')
hpnsaEnvVoltageSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorIndex.setDescription('A unique index for this sensor.')
hpnsaEnvVoltageSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("analog", 3), ("digital", 4), ("three-state-discrete", 5), ("four-state-discrete", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorType.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorType.setDescription('The sensor type (analog, digital, etc.).')
hpnsaEnvVoltageSensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("processor", 3), ("disk", 4), ("peripheral-bay", 5), ("system-management-module", 6), ("motherboard", 7), ("memory-module", 8), ("processor-module", 9), ("power-unit", 10), ("add-in-card", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorLocation.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorLocation.setDescription('The location for this sensor.')
hpnsaEnvVoltageSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("voltsensor-other", 1), ("voltsensor-unknown", 2), ("voltsensor-plus-5-volt", 3), ("voltsensor-minus-5-volt", 4), ("voltsensor-plus-12-volt", 5), ("voltsensor-minus-12-volt", 6), ("voltsensor-plus-3-3-volt", 7), ("voltsensor-plus-2-5-volt", 8), ("voltsensor-scsi-terminator", 9), ("voltsensor-processor-1", 10), ("voltsensor-processor-2", 11), ("voltsensor-processor-3", 12), ("voltsensor-processor-4", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorDescription.setDescription('The description of the voltage sensor.')
hpnsaEnvVoltageSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("non-critical", 4), ("critical", 5), ("non-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorStatus.setDescription('The status for this sensor.')
hpnsaEnvVoltageSensorLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorLevel.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorLevel.setDescription('The current voltage reading for the sensor (in millivolts).')
hpnsaEnvVoltageSensorNominalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorNominalLevel.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorNominalLevel.setDescription('The nominal (expected) voltage reading of the voltage sensor (in millivolts).')
hpnsaEnvVoltageSensorNormalMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorNormalMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorNormalMaximum.setDescription('The normal maximum voltage reading of the voltage sensor (in millivolts).')
hpnsaEnvVoltageSensorNormalMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorNormalMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorNormalMinimum.setDescription('The normal minimum voltage reading of the voltage sensor (in millivolts).')
hpnsaEnvVoltageSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorMaximum.setDescription('The maximum possible voltage reading of the voltage sensor (in millivolts).')
hpnsaEnvVoltageSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorMinimum.setDescription('The minimum possible voltage reading of the voltage sensor (in millivolts).')
hpnsaEnvVoltageSensorLowerNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorLowerNonCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorLowerNonCriticalThreshold.setDescription('The lower non-critical voltage threshold for the sensor (in millivolts).')
hpnsaEnvVoltageSensorUpperNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorUpperNonCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorUpperNonCriticalThreshold.setDescription('The upper non-critical voltage threshold for the sensor (in millivolts).')
hpnsaEnvVoltageSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorLowerCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorLowerCriticalThreshold.setDescription('The lower critical voltage threshold for the sensor (in millivolts).')
hpnsaEnvVoltageSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorUpperCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorUpperCriticalThreshold.setDescription('The upper critical voltage threshold for the sensor (in millivolts).')
hpnsaEnvVoltageSensorLowerNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorLowerNonRecoverableThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorLowerNonRecoverableThreshold.setDescription('The lower non-recoverable voltage threshold for the sensor (in millivolts).')
hpnsaEnvVoltageSensorUpperNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorUpperNonRecoverableThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorUpperNonRecoverableThreshold.setDescription('The upper non-recoverable voltage threshold for the sensor (in millivolts).')
hpnsaEnvVoltageSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorResolution.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorResolution.setDescription('The resolution of the voltage sensor reading (in tenths of millivolts).')
hpnsaEnvVoltageSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorTolerance.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorTolerance.setDescription('The tolerance of the voltage sensor reading (in plus/minus millivolts).')
hpnsaEnvVoltageSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorAccuracy.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorAccuracy.setDescription('The accuracy of the voltage sensor reading (in plus/minus hundredths of a percent).')
hpnsaEnvVoltageSensorPositiveHysterisis = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorPositiveHysterisis.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorPositiveHysterisis.setDescription('The positive hysterisis value for the voltage sensor (in millivolts).')
hpnsaEnvVoltageSensorNegativeHysterisis = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 2, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorNegativeHysterisis.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvVoltageSensorNegativeHysterisis.setDescription('The negative hysterisis value for the voltage sensor (in millivolts).')
hpnsaEnvTemperatureSensorTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1), )
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorTable.setDescription('A table consisting of status, thresholds, and readings of the temperature sensors.')
hpnsaEnvTemperatureSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1), ).setIndexNames((0, "HPNSAENV-MIB", "hpnsaEnvTemperatureSensorIndex"))
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorEntry.setDescription('Reading, status, and a set of system thresholds for a particular system environmet temperature sensor.')
hpnsaEnvTemperatureSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorIndex.setDescription('A unique index for this sensor.')
hpnsaEnvTemperatureSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("analog", 3), ("digital", 4), ("three-state-discrete", 5), ("four-state-discrete", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorType.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorType.setDescription('The sensor type (analog, digital, etc.).')
hpnsaEnvTemperatureSensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("processor", 3), ("disk", 4), ("peripheral-bay", 5), ("system-management-module", 6), ("motherboard", 7), ("memory-module", 8), ("processor-module", 9), ("power-unit", 10), ("add-in-card", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorLocation.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorLocation.setDescription('The location for this sensor.')
hpnsaEnvTemperatureSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("temperature-sensor-other", 1), ("temperature-sensor-unknown", 2), ("temperature-sensor-processor-1", 3), ("temperature-sensor-processor-2", 4), ("temperature-sensor-processor-3", 5), ("temperature-sensor-processor-4", 6), ("temperature-sensor-processor-5", 7), ("temperature-sensor-processor-6", 8), ("temperature-sensor-processor-7", 9), ("temperature-sensor-processor-8", 10), ("temperature-sensor-system-board", 11), ("temperature-sensor-disk-backplane", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorDescription.setDescription('The description of the temperature sensor.')
hpnsaEnvTemperatureSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("non-critical", 4), ("critical", 5), ("non-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorStatus.setDescription('The status for this sensor.')
hpnsaEnvTemperatureSensorReading = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorReading.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorReading.setDescription('The current temperature reading for the sensor (in degrees Celsius).')
hpnsaEnvTemperatureSensorNominalReading = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorNominalReading.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorNominalReading.setDescription('The nominal (expected) temperature reading of the temperature sensor (in degrees Celsius).')
hpnsaEnvTemperatureSensorNormalMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorNormalMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorNormalMaximum.setDescription('The normal maximum temperature reading of the temperature sensor (in degrees Celsius).')
hpnsaEnvTemperatureSensorNormalMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorNormalMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorNormalMinimum.setDescription('The normal minimum temperature reading of the temperature sensor (in degrees Celsius).')
hpnsaEnvTemperatureSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorMaximum.setDescription('The maximum possible temperature reading of the temperature sensor (in degrees Celsius).')
hpnsaEnvTemperatureSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorMinimum.setDescription('The minimum possible temperature reading of the temperature sensor (in degrees Celsius).')
hpnsaEnvTemperatureSensorLowerNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorLowerNonCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorLowerNonCriticalThreshold.setDescription('The lower non-critical temperature threshold for the sensor (in degrees Celsius).')
hpnsaEnvTemperatureSensorUpperNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorUpperNonCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorUpperNonCriticalThreshold.setDescription('The upper non-critical temperature threshold for the sensor (in degrees Celsius).')
hpnsaEnvTemperatureSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorLowerCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorLowerCriticalThreshold.setDescription('The lower critical temperature threshold for the sensor (in degrees Celsius).')
hpnsaEnvTemperatureSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorUpperCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorUpperCriticalThreshold.setDescription('The upper critical temperature threshold for the sensor (in degrees Celsius).')
hpnsaEnvTemperatureSensorLowerNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorLowerNonRecoverableThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorLowerNonRecoverableThreshold.setDescription('The lower non-recoverable temperature threshold for the sensor (in degrees Celsius).')
hpnsaEnvTemperatureSensorUpperNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorUpperNonRecoverableThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorUpperNonRecoverableThreshold.setDescription('The upper non-recoverable temperature threshold for the sensor (in degrees Celsius).')
hpnsaEnvTemperatureSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorResolution.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorResolution.setDescription('The resolution of the temperature sensor reading (in tenths of degrees Celsius).')
hpnsaEnvTemperatureSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorTolerance.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorTolerance.setDescription('The tolerance of the temperature sensor reading (in plus/minus tenths of a degree Celsius).')
hpnsaEnvTemperatureSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorAccuracy.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorAccuracy.setDescription('The accuracy of the temperature sensor reading (in plus/minus hundredths of a percent).')
hpnsaEnvTemperatureSensorPositiveHysterisis = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorPositiveHysterisis.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorPositiveHysterisis.setDescription('The positive hysterisis value for the temperature sensor (in degrees Celsius).')
hpnsaEnvTemperatureSensorNegativeHysterisis = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 3, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorNegativeHysterisis.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvTemperatureSensorNegativeHysterisis.setDescription('The negative hysterisis value for the temperature sensor (in degrees Celsius).')
hpnsaEnvFanSensorTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1), )
if mibBuilder.loadTexts: hpnsaEnvFanSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvFanSensorTable.setDescription('A table consisting of status, thresholds, and readings of the fan sensors.')
hpnsaEnvFanSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1), ).setIndexNames((0, "HPNSAENV-MIB", "hpnsaEnvFanSensorIndex"))
if mibBuilder.loadTexts: hpnsaEnvFanSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvFanSensorEntry.setDescription('Reading, status, and a set of system thresholds for a particular system environmet fan sensor.')
hpnsaEnvFanSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvFanSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvFanSensorIndex.setDescription('A unique index for this sensor.')
hpnsaEnvFanSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("analog", 3), ("digital", 4), ("three-state-discrete", 5), ("four-state-discrete", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvFanSensorType.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvFanSensorType.setDescription('The sensor type (analog, digital, etc.).')
hpnsaEnvFanSensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("processor", 3), ("disk", 4), ("peripheral-bay", 5), ("system-management-module", 6), ("motherboard", 7), ("memory-module", 8), ("processor-module", 9), ("power-unit", 10), ("add-in-card", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvFanSensorLocation.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvFanSensorLocation.setDescription('The location for this sensor.')
hpnsaEnvFanSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fan-sensor-other", 1), ("fan-sensor-unknown", 2), ("fan-sensor-cpu-board", 3), ("fan-sensor-chassis", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvFanSensorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvFanSensorDescription.setDescription('The description of the fan sensor.')
hpnsaEnvFanSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("non-critical", 4), ("critical", 5), ("non-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvFanSensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvFanSensorStatus.setDescription('The status for this sensor.')
hpnsaEnvFanSensorReading = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvFanSensorReading.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvFanSensorReading.setDescription('The current fan reading for the sensor (in RPMs).')
hpnsaEnvFanSensorNominalReading = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvFanSensorNominalReading.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvFanSensorNominalReading.setDescription('The nominal (expected) fan reading of the fan sensor (in RPMs).')
hpnsaEnvFanSensorNormalMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvFanSensorNormalMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvFanSensorNormalMaximum.setDescription('The normal maximum fan reading of the fan sensor (in RPMs).')
hpnsaEnvFanSensorNormalMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvFanSensorNormalMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvFanSensorNormalMinimum.setDescription('The normal minimum fan reading of the fan sensor (in RPMs).')
hpnsaEnvFanSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvFanSensorMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvFanSensorMaximum.setDescription('The maximum possible fan reading of the fan sensor (in RPMs).')
hpnsaEnvFanSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvFanSensorMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvFanSensorMinimum.setDescription('The minimum possible fan reading of the fan sensor (in RPMs).')
hpnsaEnvFanSensorLowerNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvFanSensorLowerNonCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvFanSensorLowerNonCriticalThreshold.setDescription('The lower non-critical fan threshold for the sensor (in RPMs).')
hpnsaEnvFanSensorUpperNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvFanSensorUpperNonCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvFanSensorUpperNonCriticalThreshold.setDescription('The upper non-critical fan threshold for the sensor (in RPMs).')
hpnsaEnvFanSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvFanSensorLowerCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvFanSensorLowerCriticalThreshold.setDescription('The lower critical fan threshold for the sensor (in RPMs).')
hpnsaEnvFanSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvFanSensorUpperCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvFanSensorUpperCriticalThreshold.setDescription('The upper critical fan threshold for the sensor (in RPMs).')
hpnsaEnvFanSensorLowerNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvFanSensorLowerNonRecoverableThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvFanSensorLowerNonRecoverableThreshold.setDescription('The lower non-recoverable fan threshold for the sensor (in RPMs).')
hpnsaEnvFanSensorUpperNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvFanSensorUpperNonRecoverableThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvFanSensorUpperNonRecoverableThreshold.setDescription('The upper non-recoverable fan threshold for the sensor (in RPMs).')
hpnsaEnvFanSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvFanSensorResolution.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvFanSensorResolution.setDescription('The resolution of the fan sensor reading (in tenths of RPMs).')
hpnsaEnvFanSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvFanSensorTolerance.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvFanSensorTolerance.setDescription('The tolerance of the fan sensor reading (in plus/minus RPMs).')
hpnsaEnvFanSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvFanSensorAccuracy.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvFanSensorAccuracy.setDescription('The accuracy of the fan sensor reading (in plus/minus hundredths of a percent).')
hpnsaEnvFanSensorPositiveHysterisis = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvFanSensorPositiveHysterisis.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvFanSensorPositiveHysterisis.setDescription('The positive hysterisis value for the fan sensor (in RPMs).')
hpnsaEnvFanSensorNegativeHysterisis = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 4, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEnvFanSensorNegativeHysterisis.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvFanSensorNegativeHysterisis.setDescription('The negative hysterisis value for the fan sensor (in RPMs).')
hpnsaEnvChassisStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 26, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("chassis-open", 1), ("chassis-closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEnvChassisStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEnvChassisStatus.setDescription('The status of the system chassis.')
mibBuilder.exportSymbols("HPNSAENV-MIB", hpnsaEnvTemperatureSensorPositiveHysterisis=hpnsaEnvTemperatureSensorPositiveHysterisis, hpnsaEnvTemperatureSensorAccuracy=hpnsaEnvTemperatureSensorAccuracy, hpnsaEnvFanSensorDescription=hpnsaEnvFanSensorDescription, hpnsaEnvMibRev=hpnsaEnvMibRev, hpnsaEnvFanSensorData=hpnsaEnvFanSensorData, hpnsaEnvTemperatureSensorResolution=hpnsaEnvTemperatureSensorResolution, hpnsaEnvVoltageData=hpnsaEnvVoltageData, hpnsaEnvFanSensorLowerCriticalThreshold=hpnsaEnvFanSensorLowerCriticalThreshold, hpnsaEnvVoltageSensorNominalLevel=hpnsaEnvVoltageSensorNominalLevel, hpnsaEnvTemperatureSensorType=hpnsaEnvTemperatureSensorType, hpnsaEnvVoltageSensorLevel=hpnsaEnvVoltageSensorLevel, hpnsaEnvFanSensorType=hpnsaEnvFanSensorType, hpnsaEnvTemperatureSensorDescription=hpnsaEnvTemperatureSensorDescription, hpnsaEnvFanSensorStatus=hpnsaEnvFanSensorStatus, hpnsaEnvTemperatureSensorNormalMinimum=hpnsaEnvTemperatureSensorNormalMinimum, hpnsaEnvFanSensorNormalMaximum=hpnsaEnvFanSensorNormalMaximum, hpnsaEnvVoltageSensorType=hpnsaEnvVoltageSensorType, hpnsaEnvFanSensorLowerNonCriticalThreshold=hpnsaEnvFanSensorLowerNonCriticalThreshold, hpnsaEnvVoltageSensorNegativeHysterisis=hpnsaEnvVoltageSensorNegativeHysterisis, hpnsaEnvVoltageSensorTable=hpnsaEnvVoltageSensorTable, hpnsaEnvFanSensorUpperCriticalThreshold=hpnsaEnvFanSensorUpperCriticalThreshold, hpnsa=hpnsa, hpnsaEnvFanSensorResolution=hpnsaEnvFanSensorResolution, hpnsaEnvFanSensorLocation=hpnsaEnvFanSensorLocation, hpnsaEnvFanSensorNominalReading=hpnsaEnvFanSensorNominalReading, hpnsaEnvVoltageSensorLowerCriticalThreshold=hpnsaEnvVoltageSensorLowerCriticalThreshold, hpnsaEnvTemperatureSensorNormalMaximum=hpnsaEnvTemperatureSensorNormalMaximum, hpnsaEnvVoltageSensorLowerNonRecoverableThreshold=hpnsaEnvVoltageSensorLowerNonRecoverableThreshold, hpnsaEnvTemperatureSensorEntry=hpnsaEnvTemperatureSensorEntry, hpnsaEnvFanSensorUpperNonCriticalThreshold=hpnsaEnvFanSensorUpperNonCriticalThreshold, hpnsaEnvFanSensorNegativeHysterisis=hpnsaEnvFanSensorNegativeHysterisis, hpnsaEnvVoltageSensorDescription=hpnsaEnvVoltageSensorDescription, hpnsaEnvTemperatureSensorTable=hpnsaEnvTemperatureSensorTable, hpnsaEnvVoltageSensorUpperNonRecoverableThreshold=hpnsaEnvVoltageSensorUpperNonRecoverableThreshold, hpnsaEnvTemperatureSensorLowerCriticalThreshold=hpnsaEnvTemperatureSensorLowerCriticalThreshold, hpnsaEnvTemperatureSensorNominalReading=hpnsaEnvTemperatureSensorNominalReading, hpnsaEnvTemperatureSensorLocation=hpnsaEnvTemperatureSensorLocation, hpnsaEnvTemperatureSensorReading=hpnsaEnvTemperatureSensorReading, hpnsaEnvFanSensorIndex=hpnsaEnvFanSensorIndex, hpnsaEnvFanSensorMinimum=hpnsaEnvFanSensorMinimum, hpnsaEnvVoltageSensorNormalMaximum=hpnsaEnvVoltageSensorNormalMaximum, hpnsaEnvVoltageSensorLocation=hpnsaEnvVoltageSensorLocation, hpnsaEnvChassisStatus=hpnsaEnvChassisStatus, hpnsaEnvChassisData=hpnsaEnvChassisData, hpnsaEnvTemperatureSensorIndex=hpnsaEnvTemperatureSensorIndex, hpnsaEnvVoltageSensorLowerNonCriticalThreshold=hpnsaEnvVoltageSensorLowerNonCriticalThreshold, hpnsaEnvTemperatureSensorUpperNonRecoverableThreshold=hpnsaEnvTemperatureSensorUpperNonRecoverableThreshold, hpnsaEnvFanSensorEntry=hpnsaEnvFanSensorEntry, hpnsaEnvVoltageSensorPositiveHysterisis=hpnsaEnvVoltageSensorPositiveHysterisis, hpnsaEnvTemperatureSensorNegativeHysterisis=hpnsaEnvTemperatureSensorNegativeHysterisis, hpnsaEnvFanSensorAccuracy=hpnsaEnvFanSensorAccuracy, hpnsaEnvVoltageSensorStatus=hpnsaEnvVoltageSensorStatus, hpnsaEnvVoltageSensorIndex=hpnsaEnvVoltageSensorIndex, hpnsaEnvFanSensorUpperNonRecoverableThreshold=hpnsaEnvFanSensorUpperNonRecoverableThreshold, hpnsaEnvVoltageSensorTolerance=hpnsaEnvVoltageSensorTolerance, nm=nm, hpnsaEnvMibRevMinor=hpnsaEnvMibRevMinor, hpnsaEnvTemperatureSensorUpperNonCriticalThreshold=hpnsaEnvTemperatureSensorUpperNonCriticalThreshold, hpnsaEnvVoltageSensorMaximum=hpnsaEnvVoltageSensorMaximum, hpnsaEnvFanSensorTable=hpnsaEnvFanSensorTable, hpnsaEnvTemperatureSensorTolerance=hpnsaEnvTemperatureSensorTolerance, hpnsaEnvVoltageSensorUpperCriticalThreshold=hpnsaEnvVoltageSensorUpperCriticalThreshold, hpnsaEnvTemperatureSensorLowerNonCriticalThreshold=hpnsaEnvTemperatureSensorLowerNonCriticalThreshold, hpnsaEnvVoltageSensorResolution=hpnsaEnvVoltageSensorResolution, hpnsaEnvFanSensorTolerance=hpnsaEnvFanSensorTolerance, hpnsaEnvFanSensorNormalMinimum=hpnsaEnvFanSensorNormalMinimum, hpnsaEnvVoltageSensorEntry=hpnsaEnvVoltageSensorEntry, hpnsaEnvTemperatureSensorLowerNonRecoverableThreshold=hpnsaEnvTemperatureSensorLowerNonRecoverableThreshold, hpnsaEnvTemperatureSensorUpperCriticalThreshold=hpnsaEnvTemperatureSensorUpperCriticalThreshold, hpnsaEnvTemperatureSensorMinimum=hpnsaEnvTemperatureSensorMinimum, hpnsaEnvTemperatureSensorMaximum=hpnsaEnvTemperatureSensorMaximum, hpnsaEnvVoltageSensorMinimum=hpnsaEnvVoltageSensorMinimum, hpnsaEnvFanSensorPositiveHysterisis=hpnsaEnvFanSensorPositiveHysterisis, hp=hp, hpnsaEnvFanSensorLowerNonRecoverableThreshold=hpnsaEnvFanSensorLowerNonRecoverableThreshold, hpnsaEnvFanSensorReading=hpnsaEnvFanSensorReading, hpnsaEnvMibRevMajor=hpnsaEnvMibRevMajor, hpnsaEnvVoltageSensorUpperNonCriticalThreshold=hpnsaEnvVoltageSensorUpperNonCriticalThreshold, hpnsaEnvironment=hpnsaEnvironment, hpnsaEnvVoltageSensorNormalMinimum=hpnsaEnvVoltageSensorNormalMinimum, hpnsaEnvVoltageSensorAccuracy=hpnsaEnvVoltageSensorAccuracy, hpnsaEnvFanSensorMaximum=hpnsaEnvFanSensorMaximum, hpnsaEnvTemperatureData=hpnsaEnvTemperatureData, hpnsaEnvTemperatureSensorStatus=hpnsaEnvTemperatureSensorStatus)
