#
# PySNMP MIB module PANDATEL-BMZ-MODEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PANDATEL-BMZ-MODEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:37:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
device_id, mdmSpecifics = mibBuilder.importSymbols("PANDATEL-MODEM-MIB", "device-id", "mdmSpecifics")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, enterprises, TimeTicks, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Unsigned32, Bits, Counter64, NotificationType, iso, IpAddress, Gauge32, ModuleIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "enterprises", "TimeTicks", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Unsigned32", "Bits", "Counter64", "NotificationType", "iso", "IpAddress", "Gauge32", "ModuleIdentity", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
bmz_modem = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 2, 302)).setLabel("bmz-modem")
bmz = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 302))
bmzModemTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 302, 1), )
if mibBuilder.loadTexts: bmzModemTable.setStatus('mandatory')
if mibBuilder.loadTexts: bmzModemTable.setDescription('This table contains information about all BM-Z converters in all racks.')
bmzTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 302, 1, 1), ).setIndexNames((0, "PANDATEL-BMZ-MODEM-MIB", "mdmRack"), (0, "PANDATEL-BMZ-MODEM-MIB", "mdmModem"), (0, "PANDATEL-BMZ-MODEM-MIB", "mdmPosition"))
if mibBuilder.loadTexts: bmzTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bmzTableEntry.setDescription('The index of the table.')
mdmRack = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 302, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmRack.setStatus('mandatory')
if mibBuilder.loadTexts: mdmRack.setDescription('The index of the rack where the converter is installed.')
mdmModem = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 302, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmModem.setStatus('mandatory')
if mibBuilder.loadTexts: mdmModem.setDescription('This entry displays the slot number where the corresponding converter is installed in the rack.')
mdmPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 302, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmPosition.setStatus('mandatory')
if mibBuilder.loadTexts: mdmPosition.setDescription("This entry displays the location of the corresponding converter: 'local' or 'remote'. The converter which is plugged into a managed rack is 'local', the counterpart is 'remote'.")
mdmModemName = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 302, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmModemName.setStatus('mandatory')
if mibBuilder.loadTexts: mdmModemName.setDescription('The verbal name of this converter.')
mdmInterfaceEmulationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 302, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 99))).clone(namedValues=NamedValues(("other", 1), ("dte", 2), ("dce", 3), ("te", 4), ("nt", 5), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmInterfaceEmulationMode.setStatus('mandatory')
if mibBuilder.loadTexts: mdmInterfaceEmulationMode.setDescription("Interface mode of the unit: 'dte', 'dce', 'te' or 'nt'.")
mdmModemProperty = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 302, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 99))).clone(namedValues=NamedValues(("other", 1), ("e1", 2), ("t1", 3), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmModemProperty.setStatus('mandatory')
if mibBuilder.loadTexts: mdmModemProperty.setDescription("This entry displays the speed class of the BM-Z: 'e1'.")
mdmHDSLUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 302, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ntu", 2), ("ltu", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmHDSLUnit.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHDSLUnit.setDescription('HDSL unit type: Line Termination Unit (LTU) or Network Termination Unit (NTU)')
mdmClockSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 302, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("dual", 2), ("single", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmClockSystem.setStatus('mandatory')
if mibBuilder.loadTexts: mdmClockSystem.setDescription("The clock system of the link: 'dual' or 'single'.")
mdmClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 302, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("internal", 2), ("remote", 3), ("external", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: mdmClockSource.setDescription("The clock source of the link: 'internal', 'external', or 'remote'.")
mdmDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 302, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("other", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDataRate.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDataRate.setDescription('The data rate at the interface in bits per seconds. The data rate at the remote counterpart changes simultaneously.')
mdmRemoteAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 302, 1, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 7))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("via-hdsl-channel", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmRemoteAccessMode.setStatus('mandatory')
if mibBuilder.loadTexts: mdmRemoteAccessMode.setDescription("The remote access mode: 'via-hdsl-channel'.")
mibBuilder.exportSymbols("PANDATEL-BMZ-MODEM-MIB", mdmModemName=mdmModemName, mdmRemoteAccessMode=mdmRemoteAccessMode, bmzModemTable=bmzModemTable, bmzTableEntry=bmzTableEntry, mdmClockSystem=mdmClockSystem, mdmModem=mdmModem, mdmDataRate=mdmDataRate, mdmClockSource=mdmClockSource, bmz=bmz, mdmRack=mdmRack, mdmModemProperty=mdmModemProperty, bmz_modem=bmz_modem, mdmHDSLUnit=mdmHDSLUnit, mdmInterfaceEmulationMode=mdmInterfaceEmulationMode, mdmPosition=mdmPosition)
