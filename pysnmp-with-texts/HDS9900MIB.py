#
# PySNMP MIB module HDS9900MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HDS9900MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:24:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, TimeTicks, ObjectIdentity, Bits, enterprises, Gauge32, ModuleIdentity, NotificationType, Integer32, IpAddress, Counter32, iso, Counter64, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "TimeTicks", "ObjectIdentity", "Bits", "enterprises", "Gauge32", "ModuleIdentity", "NotificationType", "Integer32", "IpAddress", "Counter32", "iso", "Counter64", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hitachi = MibIdentifier((1, 3, 6, 1, 4, 1, 116))
system = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 3))
storage = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 3, 11))
raid = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 3, 11, 4))
raidDummy = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 3, 11, 4, 1))
raidRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 3, 11, 4, 1, 1))
systemExMib = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5))
storageExMib = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11))
raidExMib = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 4))
raidExMibDummy = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1))
raidExMibRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1))
raidExMibName = MibScalar((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidExMibName.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibName.setDescription('Product name of the SVP.')
raidExMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidExMibVersion.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibVersion.setDescription('SVP micro-program version.')
raidExMibAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidExMibAgentVersion.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibAgentVersion.setDescription('Extension Agent version.')
raidExMibDkcCount = MibScalar((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidExMibDkcCount.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibDkcCount.setDescription('Number of DKC registered on the SVP.')
raidExMibRaidListTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 5), )
if mibBuilder.loadTexts: raidExMibRaidListTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibRaidListTable.setDescription('List of DKC registered on the SVP.')
raidExMibRaidListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 5, 1), ).setIndexNames((0, "HDS9900MIB", "raidlistSerialNumber"))
if mibBuilder.loadTexts: raidExMibRaidListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibRaidListEntry.setDescription('Entry of DKC list.')
raidlistSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidlistSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: raidlistSerialNumber.setDescription('Serial Number of the DKC.')
raidlistMibNickName = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidlistMibNickName.setStatus('mandatory')
if mibBuilder.loadTexts: raidlistMibNickName.setDescription('Nickname of the DKC.')
raidlistDKCMainVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidlistDKCMainVersion.setStatus('mandatory')
if mibBuilder.loadTexts: raidlistDKCMainVersion.setDescription('DKC Firmware Version.')
raidlistDKCProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidlistDKCProductName.setStatus('mandatory')
if mibBuilder.loadTexts: raidlistDKCProductName.setDescription('DKC Product Name.')
raidExMibDKCHWTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 6), )
if mibBuilder.loadTexts: raidExMibDKCHWTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibDKCHWTable.setDescription('Error information of the DKC.')
raidExMibDKCHWEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 6, 1), ).setIndexNames((0, "HDS9900MIB", "dkcRaidListIndexSerialNumber"))
if mibBuilder.loadTexts: raidExMibDKCHWEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibDKCHWEntry.setDescription('Entry of DKC information.')
dkcRaidListIndexSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dkcRaidListIndexSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dkcRaidListIndexSerialNumber.setDescription('Serial Number the DKC.')
dkcHWProcessor = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noError", 1), ("acute", 2), ("serious", 3), ("moderate", 4), ("service", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dkcHWProcessor.setStatus('mandatory')
if mibBuilder.loadTexts: dkcHWProcessor.setDescription('Information of processor.')
dkcHWCSW = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noError", 1), ("acute", 2), ("serious", 3), ("moderate", 4), ("service", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dkcHWCSW.setStatus('mandatory')
if mibBuilder.loadTexts: dkcHWCSW.setDescription('Information of internal bus.')
dkcHWCache = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noError", 1), ("acute", 2), ("serious", 3), ("moderate", 4), ("service", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dkcHWCache.setStatus('mandatory')
if mibBuilder.loadTexts: dkcHWCache.setDescription('Information of cache.')
dkcHWSM = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noError", 1), ("acute", 2), ("serious", 3), ("moderate", 4), ("service", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dkcHWSM.setStatus('mandatory')
if mibBuilder.loadTexts: dkcHWSM.setDescription('Information of shared memory.')
dkcHWPS = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noError", 1), ("acute", 2), ("serious", 3), ("moderate", 4), ("service", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dkcHWPS.setStatus('mandatory')
if mibBuilder.loadTexts: dkcHWPS.setDescription('Information of power supply.')
dkcHWBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noError", 1), ("acute", 2), ("serious", 3), ("moderate", 4), ("service", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dkcHWBattery.setStatus('mandatory')
if mibBuilder.loadTexts: dkcHWBattery.setDescription('Information of battery.')
dkcHWFan = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noError", 1), ("acute", 2), ("serious", 3), ("moderate", 4), ("service", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dkcHWFan.setStatus('mandatory')
if mibBuilder.loadTexts: dkcHWFan.setDescription('Information of fan.')
dkcHWEnvironment = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noError", 1), ("acute", 2), ("serious", 3), ("moderate", 4), ("service", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dkcHWEnvironment.setStatus('mandatory')
if mibBuilder.loadTexts: dkcHWEnvironment.setDescription('Information of Environment.')
raidExMibDKUHWTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 7), )
if mibBuilder.loadTexts: raidExMibDKUHWTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibDKUHWTable.setDescription('Error information of the DKU.')
raidExMibDKUHWEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 7, 1), ).setIndexNames((0, "HDS9900MIB", "dkuRaidListIndexSerialNumber"))
if mibBuilder.loadTexts: raidExMibDKUHWEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibDKUHWEntry.setDescription('Entry of DKU information.')
dkuRaidListIndexSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dkuRaidListIndexSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dkuRaidListIndexSerialNumber.setDescription('Serial Number of the DKC.')
dkuHWPS = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noError", 1), ("acute", 2), ("serious", 3), ("moderate", 4), ("service", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dkuHWPS.setStatus('mandatory')
if mibBuilder.loadTexts: dkuHWPS.setDescription('Information of DKU power supply.')
dkuHWFan = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noError", 1), ("acute", 2), ("serious", 3), ("moderate", 4), ("service", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dkuHWFan.setStatus('mandatory')
if mibBuilder.loadTexts: dkuHWFan.setDescription('Information of DKU fan.')
dkuHWEnvironment = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noError", 1), ("acute", 2), ("serious", 3), ("moderate", 4), ("service", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dkuHWEnvironment.setStatus('mandatory')
if mibBuilder.loadTexts: dkuHWEnvironment.setDescription('Information of DKU Environment.')
dkuHWDrive = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noError", 1), ("acute", 2), ("serious", 3), ("moderate", 4), ("service", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dkuHWDrive.setStatus('mandatory')
if mibBuilder.loadTexts: dkuHWDrive.setDescription('Information of Drive.')
raidExMibTrapListTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 8), )
if mibBuilder.loadTexts: raidExMibTrapListTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibTrapListTable.setDescription('Trap list Table.')
raidExMibTrapListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 8, 1), ).setIndexNames((0, "HDS9900MIB", "eventListIndexSerialNumber"), (0, "HDS9900MIB", "eventListIndexRecordNo"))
if mibBuilder.loadTexts: raidExMibTrapListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibTrapListEntry.setDescription('Trap list Table index.')
eventListIndexSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventListIndexSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: eventListIndexSerialNumber.setDescription('Serial Number of the DKC.')
eventListNickname = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventListNickname.setStatus('mandatory')
if mibBuilder.loadTexts: eventListNickname.setDescription('Nickname of the DKC.')
eventListIndexRecordNo = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventListIndexRecordNo.setStatus('mandatory')
if mibBuilder.loadTexts: eventListIndexRecordNo.setDescription(' The record number of the event trap list.')
eventListREFCODE = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 8, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventListREFCODE.setStatus('mandatory')
if mibBuilder.loadTexts: eventListREFCODE.setDescription('The Sim21&Sim22&Sim13 in the SIM sense data which is called the reference code. ')
raidExMibCommandTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 9), )
if mibBuilder.loadTexts: raidExMibCommandTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibCommandTable.setDescription('Command Request for the DKC.')
raidExMibCommandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 9, 1), ).setIndexNames((0, "HDS9900MIB", "commandSerialNumber"))
if mibBuilder.loadTexts: raidExMibCommandEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibCommandEntry.setDescription('Entry of command.')
commandSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commandSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: commandSerialNumber.setDescription('Serial Number of the DKC.')
commandManagerName = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commandManagerName.setStatus('mandatory')
if mibBuilder.loadTexts: commandManagerName.setDescription('Name of manager who has lock.')
commandKind = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 9, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commandKind.setStatus('mandatory')
if mibBuilder.loadTexts: commandKind.setDescription('Request Command. Value Mean 1 Request to refresh the configuration information. 2 Request to set the LUNM/LUSE configuration. 3 Request to set the LUN Security configuration. 4 Request to get the exclusive lock. 5 Request to free the exclusive locks. 6 Request to check the health. 7 Request to set the CVS configuration. 8 Request to set the DCR configuration. 9 Request to set the HIHSM configuration. ')
commandStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 9, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commandStatus.setStatus('mandatory')
if mibBuilder.loadTexts: commandStatus.setDescription('Status of Requested Command. Value Mean 1 Normal state. (The command ended normally.) 2 Command execution request. (now executing.) other Abnormal state (Error occurred). ')
commandProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commandProgress.setStatus('mandatory')
if mibBuilder.loadTexts: commandProgress.setDescription('Progress situation of Requested Command. (This is effective only to the CVS requesting.)')
commandRefreshTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 9, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commandRefreshTarget.setStatus('mandatory')
if mibBuilder.loadTexts: commandRefreshTarget.setDescription('The limits of Requested Command.')
commandRefreshTarget2 = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 9, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commandRefreshTarget2.setStatus('mandatory')
if mibBuilder.loadTexts: commandRefreshTarget2.setDescription('The limits of Requested Command.')
raidExMibLDev = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 10))
raidExMibLogicalDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 10, 1), )
if mibBuilder.loadTexts: raidExMibLogicalDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibLogicalDeviceTable.setDescription('Logical device information.')
raidExMibLogicalDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 10, 1, 1), ).setIndexNames((0, "HDS9900MIB", "logicalDeviceSerialNumber"), (0, "HDS9900MIB", "logicalDeviceCU"), (0, "HDS9900MIB", "logicalDeviceLDEV"))
if mibBuilder.loadTexts: raidExMibLogicalDeviceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibLogicalDeviceEntry.setDescription('Entry of logical device information.')
logicalDeviceSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalDeviceSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: logicalDeviceSerialNumber.setDescription('Serial Number of the DKC.')
logicalDeviceCU = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 10, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalDeviceCU.setStatus('mandatory')
if mibBuilder.loadTexts: logicalDeviceCU.setDescription('CU# of logical device.')
logicalDeviceLDEV = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 10, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalDeviceLDEV.setStatus('mandatory')
if mibBuilder.loadTexts: logicalDeviceLDEV.setDescription('LDEV# of logical device')
logicalDeviceEmulation = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 10, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalDeviceEmulation.setStatus('mandatory')
if mibBuilder.loadTexts: logicalDeviceEmulation.setDescription('Device emulation type. Value Mean 6586-J for mainframe only. 6586-G for mainframe only. 6586-K for mainframe only. 6588-1 for mainframe only. 6588-3 for mainframe only. 6588-9 for mainframe only. 6558-1 for mainframe only. 3380-J for mainframe only. 3380-E for mainframe only. 3380-K for mainframe only. 3390-1 for mainframe only. 3390-2 for mainframe only. 3390-3 for mainframe only. 3390-3R for mainframe only. 3390-6 for mainframe only. 3390-9 for mainframe only. NF80-J for mainframe only. NF80-E for mainframe only. NF80-K for mainframe only. 6588-3A for shared disk. (both mainframe and open system) 6588-3B for shared disk. (both mainframe and open system) 6588-3C for shared disk. (both mainframe and open system) 6588-KA for shared disk. (both mainframe and open system) 6588-KB for shared disk. (both mainframe and open system) 6588-KC for shared disk. (both mainframe and open system) 3390-3A for shared disk. (both mainframe and open system) 3390-3B for shared disk. (both mainframe and open system) 3390-3C for shared disk. (both mainframe and open system) 3380-KA for shared disk. (both mainframe and open system) 3380-KB for shared disk. (both mainframe and open system) 3380-KC for shared disk. (both mainframe and open system) NF80-KA for shared disk. (both mainframe and open system) NF80-KB for shared disk. (both mainframe and open system) NF80-KC for shared disk. (both mainframe and open system) OPEN-3 for open system only. OPEN-8 for open system only. OPEN-9 for open system only. OPEN-K for open system only. NFOP-K for open system only. ')
logicalDeviceCylinder = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 10, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalDeviceCylinder.setStatus('mandatory')
if mibBuilder.loadTexts: logicalDeviceCylinder.setDescription('Number of cylinders')
logicalDeviceLUExpand = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 10, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalDeviceLUExpand.setStatus('mandatory')
if mibBuilder.loadTexts: logicalDeviceLUExpand.setDescription('Relation to LUSE. (LUSE: logical unit size expansion). Value Mean 1 Non LUSE. 2 Top of LUSE. 3 Element of LUSE. ')
logicalDeviceLUPath = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 10, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalDeviceLUPath.setStatus('mandatory')
if mibBuilder.loadTexts: logicalDeviceLUPath.setDescription('Existence of LU path. Value Mean 0 Not exist. 1 Exist. ')
logicalDeviceSize = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 10, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalDeviceSize.setStatus('mandatory')
if mibBuilder.loadTexts: logicalDeviceSize.setDescription('Size of device.')
logicalDeviceLBA = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 10, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalDeviceLBA.setStatus('mandatory')
if mibBuilder.loadTexts: logicalDeviceLBA.setDescription('LBA Size of device.')
logicalDeviceHIHSMReserve = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 10, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalDeviceHIHSMReserve.setStatus('mandatory')
if mibBuilder.loadTexts: logicalDeviceHIHSMReserve.setDescription('Reserve Volume of HIHSM. Value Mean 0 Normal Volume. 1 Reserve Volume. ')
logicalDeviceControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 10, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalDeviceControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: logicalDeviceControlStatus.setDescription('Control flag. Value Mean 1 Return value. 2 Set request. ')
logicalDeviceRAIDLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 10, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalDeviceRAIDLevel.setStatus('mandatory')
if mibBuilder.loadTexts: logicalDeviceRAIDLevel.setDescription('RAID Level.')
logicalDeviceSlotSize = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 10, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalDeviceSlotSize.setStatus('mandatory')
if mibBuilder.loadTexts: logicalDeviceSlotSize.setDescription('Slot Size.')
raidExMibLUConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11))
raidExMibPortTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 1), )
if mibBuilder.loadTexts: raidExMibPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibPortTable.setDescription('Port information.')
raidExMibPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 1, 1), ).setIndexNames((0, "HDS9900MIB", "portSerialNumber"), (0, "HDS9900MIB", "portID"))
if mibBuilder.loadTexts: raidExMibPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibPortEntry.setDescription('Entry of port information.')
portSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: portSerialNumber.setDescription('Serial Number of the DKC.')
portID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portID.setStatus('mandatory')
if mibBuilder.loadTexts: portID.setDescription('Port ID.')
portKind = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portKind.setStatus('mandatory')
if mibBuilder.loadTexts: portKind.setDescription('Kind of port. Value Mean LCP mainframe port only. MCP mainframe port only. SCSI SCSI port. Fibre Fibre port. ')
portHostMode = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHostMode.setStatus('mandatory')
if mibBuilder.loadTexts: portHostMode.setDescription('Host mode of the port. Upper 4 bits. - Each bit has the meaning. Bit Mean 0 Not used. (For reservation. Always 0.) 1 Not used. (For reservation. Always 0.) 2 Not used. (For reservation. Always 0.) 3 Ultra-SCSI mode. Lower 4 bits. - Numerical value shown by four bits. Value Mean 0 Normal setting. 1 IBM-7135 mode. 2 NCR mode. 3 Not used. (Reserved) 4 Sequent mode. 5 DEC OPEN VMS mode. 6 UNISYS-NX mode 7 UNISYS-IX mode. 8 HP mode. 9 VxVM-DMP mode. 10 Not used. (Reserved) 11 MPE mode. other Not used. (Reserved) Note: The following value has a special meaning. Value Mean 0xFF Out of the host mode setting object. ')
portFibreAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFibreAddress.setStatus('mandatory')
if mibBuilder.loadTexts: portFibreAddress.setDescription('Fibre address. Value & Mean - describes by the format of Value(Address). 1:(EF) 17:(CD) 33:(B2) 49:(98) 65:(72) 81:(55) 97:(3A) 113:(25) 2:(E8) 18:(CC) 34:(B1) 50:(97) 66:(71) 82:(54) 98:(39) 114:(23) 3:(E4) 19:(CB) 35:(AE) 51:(90) 67:(6E) 83:(53) 99:(36) 115:(1F) 4:(E2) 20:(CA) 36:(AD) 52:(8F) 68:(6D) 84:(52) 100:(35) 116:(1E) 5:(E1) 21:(C9) 37:(AC) 53:(88) 69:(6C) 85:(51) 101:(34) 117:(1D) 6:(E0) 22:(C7) 38:(AB) 54:(84) 70:(6B) 86:(4E) 102:(33) 118:(1B) 7:(DC) 23:(C6) 39:(AA) 55:(82) 71:(6A) 87:(4D) 103:(32) 119:(18) 8:(DA) 24:(C5) 40:(A9) 56:(81) 72:(69) 88:(4C) 104:(31) 120:(17) 9:(D9) 25:(C3) 41:(A7) 57:(80) 73:(67) 89:(4B) 105:(2E) 121:(10) 10:(D6) 26:(BC) 42:(A6) 58:(7C) 74:(66) 90:(4A) 106:(2D) 122:(0F) 11:(D5) 27:(BA) 43:(A5) 59:(7A) 75:(65) 91:(49) 107:(2C) 123:(08) 12:(D4) 28:(B9) 44:(A3) 60:(79) 76:(63) 92:(47) 108:(2B) 124:(04) 13:(D3) 29:(B6) 45:(9F) 61:(76) 77:(5C) 93:(46) 109:(2A) 125:(02) 14:(D2) 30:(B5) 46:(9E) 62:(75) 78:(5A) 94:(45) 110:(29) 126:(01) 15:(D1) 31:(B4) 47:(9D) 63:(74) 79:(59) 95:(43) 111:(27) 16:(CE) 32:(B3) 48:(9B) 64:(73) 80:(56) 96:(3C) 112:(26) Note: The following value has a special meaning. Value Mean 0 Out of the Fibre address setting object. ')
portFibreTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFibreTopology.setStatus('mandatory')
if mibBuilder.loadTexts: portFibreTopology.setDescription('Topology information. Value Mean 1 Fabric(on)&FCAL 2 Fabric(off)&FCAL 3 Fabric(on)&PointToPoint 4 Fabric(off)&PointToPoint 5 Not Fibre ')
portControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: portControlStatus.setDescription('Control flag. Value Mean 1 Return value. 2 Set request. ')
portDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portDisplayName.setStatus('mandatory')
if mibBuilder.loadTexts: portDisplayName.setDescription('Display name of the port.')
portWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: portWWN.setStatus('mandatory')
if mibBuilder.loadTexts: portWWN.setDescription('WWN of the port.')
raidExMibLU = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 2))
raidExMibLUInformationLUTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 2, 1), )
if mibBuilder.loadTexts: raidExMibLUInformationLUTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibLUInformationLUTable.setDescription('Logical unit information.')
raidExMibLUInformationLUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 2, 1, 1), ).setIndexNames((0, "HDS9900MIB", "luSerialNumber"), (0, "HDS9900MIB", "luDeviceCU"), (0, "HDS9900MIB", "luDeviceLDEV"))
if mibBuilder.loadTexts: raidExMibLUInformationLUEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibLUInformationLUEntry.setDescription('Entry of logical unit information.')
luSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: luSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: luSerialNumber.setDescription('Serial Number of the DKC.')
luDeviceCU = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: luDeviceCU.setStatus('mandatory')
if mibBuilder.loadTexts: luDeviceCU.setDescription('CU# of logical device.')
luDeviceLDEV = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: luDeviceLDEV.setStatus('mandatory')
if mibBuilder.loadTexts: luDeviceLDEV.setDescription('LDEV# of logical device.')
luEmuID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: luEmuID.setStatus('mandatory')
if mibBuilder.loadTexts: luEmuID.setDescription('Device emulation type.')
luCount = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: luCount.setStatus('mandatory')
if mibBuilder.loadTexts: luCount.setDescription('Number of expansion devices.')
luSize = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: luSize.setStatus('mandatory')
if mibBuilder.loadTexts: luSize.setDescription('Storage capacity. (The unit is KB)')
luPath = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: luPath.setStatus('mandatory')
if mibBuilder.loadTexts: luPath.setDescription('existence of LU path. Value Mean 0 Not exist. 1 Exist. ')
luCommandDev = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 2, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: luCommandDev.setStatus('mandatory')
if mibBuilder.loadTexts: luCommandDev.setDescription('Setting of command device. Value Mean 0 This is not a command device. 1 This is a command device. ')
luControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 2, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: luControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: luControlStatus.setDescription('Control flag. Value Mean 1 Return value. 2 Set request. ')
raidExMibLUPathTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 2, 2), )
if mibBuilder.loadTexts: raidExMibLUPathTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibLUPathTable.setDescription('Logical unit path information.')
raidExMibLUPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 2, 2, 1), ).setIndexNames((0, "HDS9900MIB", "luPathSerialNumber"), (0, "HDS9900MIB", "luPathControlIndex"))
if mibBuilder.loadTexts: raidExMibLUPathEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibLUPathEntry.setDescription('Entry of logical unit path information.')
luPathSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: luPathSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: luPathSerialNumber.setDescription('Serial Number of the DKC.')
luPathControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: luPathControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: luPathControlIndex.setDescription('Index for Path Control.')
luPathPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: luPathPortID.setStatus('mandatory')
if mibBuilder.loadTexts: luPathPortID.setDescription('Port ID of the LU path.')
luPathSCSIID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: luPathSCSIID.setStatus('mandatory')
if mibBuilder.loadTexts: luPathSCSIID.setDescription('SCSI ID of the LU path.')
luPathLUN = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 2, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: luPathLUN.setStatus('mandatory')
if mibBuilder.loadTexts: luPathLUN.setDescription('LUN of the LU path.')
luPathDeviceCU = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 2, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: luPathDeviceCU.setStatus('mandatory')
if mibBuilder.loadTexts: luPathDeviceCU.setDescription('Target device CU# of the LU path.')
luPathDeviceLDEV = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: luPathDeviceLDEV.setStatus('mandatory')
if mibBuilder.loadTexts: luPathDeviceLDEV.setDescription('Target device LDEV# of the LU path.')
luPathControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 2, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: luPathControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: luPathControlStatus.setDescription('Control flag. Value Mean 1 Return value. 2 Add request. 3 Delete request. ')
raidExMibLUSE = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 3))
raidExMibLUSEStructureTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 3, 1), )
if mibBuilder.loadTexts: raidExMibLUSEStructureTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibLUSEStructureTable.setDescription('LUSE information.')
raidExMibLUSEStructureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 3, 1, 1), ).setIndexNames((0, "HDS9900MIB", "luSEStructSerialNumber"), (0, "HDS9900MIB", "luSEStructControlIndex"), (0, "HDS9900MIB", "luSEStructOffset"))
if mibBuilder.loadTexts: raidExMibLUSEStructureEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibLUSEStructureEntry.setDescription('Entry of LUSE information.')
luSEStructSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: luSEStructSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: luSEStructSerialNumber.setDescription('Serial Number of the DKC.')
luSEStructControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: luSEStructControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: luSEStructControlIndex.setDescription('Index for LUSE Control.')
luSEStructOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: luSEStructOffset.setStatus('mandatory')
if mibBuilder.loadTexts: luSEStructOffset.setDescription('LDEV offset in the LUSE.')
luSEStructTopDeviceCU = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 3, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: luSEStructTopDeviceCU.setStatus('mandatory')
if mibBuilder.loadTexts: luSEStructTopDeviceCU.setDescription('Top CU# of the LUSE.')
luSEStructTopDeviceLDEV = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 3, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: luSEStructTopDeviceLDEV.setStatus('mandatory')
if mibBuilder.loadTexts: luSEStructTopDeviceLDEV.setDescription('Top LDEV# of the LUSE.')
luSEStructDeviceCU = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 3, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: luSEStructDeviceCU.setStatus('mandatory')
if mibBuilder.loadTexts: luSEStructDeviceCU.setDescription('Target CU# of the LUSE.')
luSEStructDeviceLDEV = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 3, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: luSEStructDeviceLDEV.setStatus('mandatory')
if mibBuilder.loadTexts: luSEStructDeviceLDEV.setDescription('Target LDEV# of the LUSE.')
luSEStructControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 3, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: luSEStructControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: luSEStructControlStatus.setDescription('Control flag. Value Mean 1 Return value. 2 Add request. 3 Delete request. ')
raidExMibLUNS = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4))
raidExMibLUNSSwitchTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 1), )
if mibBuilder.loadTexts: raidExMibLUNSSwitchTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibLUNSSwitchTable.setDescription('LUN security switch.')
raidExMibLUNSSwitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 1, 1), ).setIndexNames((0, "HDS9900MIB", "switchSerialNumber"), (0, "HDS9900MIB", "switchPortID"))
if mibBuilder.loadTexts: raidExMibLUNSSwitchEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibLUNSSwitchEntry.setDescription('Entry of LUN security switch.')
switchSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: switchSerialNumber.setDescription('Serial Number of the DKC.')
switchPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchPortID.setStatus('mandatory')
if mibBuilder.loadTexts: switchPortID.setDescription('Port ID of the DKC.')
switchOnOff = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchOnOff.setStatus('mandatory')
if mibBuilder.loadTexts: switchOnOff.setDescription('Functional switch. Value Mean 0 off (LUN Security unused) 1 on (Use LUN Security) ')
switchControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: switchControlStatus.setDescription('Control flag. Value Mean 1 Return value. 2 Set request. ')
raidExMibLUNSWWNTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 2), )
if mibBuilder.loadTexts: raidExMibLUNSWWNTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibLUNSWWNTable.setDescription('WWN information.')
raidExMibLUNSWWNEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 2, 1), ).setIndexNames((0, "HDS9900MIB", "wwnSerialNumber"), (0, "HDS9900MIB", "wwnPortID"), (0, "HDS9900MIB", "wwnControlIndex"))
if mibBuilder.loadTexts: raidExMibLUNSWWNEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibLUNSWWNEntry.setDescription('Entry of WWN information.')
wwnSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwnSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wwnSerialNumber.setDescription('Serial number of the DKC.')
wwnPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwnPortID.setStatus('mandatory')
if mibBuilder.loadTexts: wwnPortID.setDescription('Port ID of the DKC.')
wwnControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwnControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wwnControlIndex.setDescription('Index for WWN control.')
wwnWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwnWWN.setStatus('mandatory')
if mibBuilder.loadTexts: wwnWWN.setDescription('WWN. (World Wide Name)')
wwnID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwnID.setStatus('mandatory')
if mibBuilder.loadTexts: wwnID.setDescription('ID of the WWN.')
wwnNickname = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwnNickname.setStatus('deprecated')
if mibBuilder.loadTexts: wwnNickname.setDescription('Nickname of the WWN.')
wwnUseNickname = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwnUseNickname.setStatus('mandatory')
if mibBuilder.loadTexts: wwnUseNickname.setDescription('Using of nickname. Values Mean 0 Nickname Unused. 1 Use nickname. ')
wwnControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwnControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wwnControlStatus.setDescription('Control flag. Value Mean 1 Return value. 2 Add request. 3 Delete request. 4 Set request. ')
raidExMibLUNSWWNGroupTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 3), )
if mibBuilder.loadTexts: raidExMibLUNSWWNGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibLUNSWWNGroupTable.setDescription('WWN group information.')
raidExMibLUNSWWNGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 3, 1), ).setIndexNames((0, "HDS9900MIB", "wwnGroupSerialNumber"), (0, "HDS9900MIB", "wwnGroupPortID"), (0, "HDS9900MIB", "wwnGroupControlIndex"))
if mibBuilder.loadTexts: raidExMibLUNSWWNGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibLUNSWWNGroupEntry.setDescription('Entry of WWN group information.')
wwnGroupSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwnGroupSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wwnGroupSerialNumber.setDescription('Serial number of the DKC.')
wwnGroupPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwnGroupPortID.setStatus('mandatory')
if mibBuilder.loadTexts: wwnGroupPortID.setDescription('Port ID of the DKC.')
wwnGroupControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwnGroupControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wwnGroupControlIndex.setDescription('Index for WWN group control.')
wwnGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwnGroupID.setStatus('mandatory')
if mibBuilder.loadTexts: wwnGroupID.setDescription('ID of the WWN.')
wwnGroupNickname = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwnGroupNickname.setStatus('mandatory')
if mibBuilder.loadTexts: wwnGroupNickname.setDescription('Nickname of the WWN group.')
wwnGroupControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwnGroupControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wwnGroupControlStatus.setDescription('Control flag. Value Mean 1 Return value. 2 Add request. 3 Delete request. 4 Set request. ')
wwnGroupedWWNsVL = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwnGroupedWWNsVL.setStatus('mandatory')
if mibBuilder.loadTexts: wwnGroupedWWNsVL.setDescription('Grouped WWNs. (variable length) The bit at the position corresponding to WWNID shows belongs in this WWN group. Value Mean 0 Does not belong. 1 Belongs. ')
raidExMibLUNSLUNTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 4), )
if mibBuilder.loadTexts: raidExMibLUNSLUNTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibLUNSLUNTable.setDescription('LUN information.')
raidExMibLUNSLUNEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 4, 1), ).setIndexNames((0, "HDS9900MIB", "lunSerialNumber"), (0, "HDS9900MIB", "lunPortID"), (0, "HDS9900MIB", "lunLUN"))
if mibBuilder.loadTexts: raidExMibLUNSLUNEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibLUNSLUNEntry.setDescription('Entry of LUN information.')
lunSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: lunSerialNumber.setDescription('Serial number of the DKC.')
lunPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunPortID.setStatus('mandatory')
if mibBuilder.loadTexts: lunPortID.setDescription('Port ID of the DKC.')
lunLUN = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunLUN.setStatus('mandatory')
if mibBuilder.loadTexts: lunLUN.setDescription('LUN of the Port.')
lunControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lunControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lunControlStatus.setDescription('Control flag. Value Mean 1 Return value. 2 Set request. ')
lunWWNSecurityVL = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 4, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lunWWNSecurityVL.setStatus('mandatory')
if mibBuilder.loadTexts: lunWWNSecurityVL.setDescription('WWN security setting. (variable length) The bit at the position corresponding to WWNID shows the state of the access permits. Value Mean 0 Does not accessible. 1 Accessible. ')
lunWWNGroupSecurityVL = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 4, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lunWWNGroupSecurityVL.setStatus('mandatory')
if mibBuilder.loadTexts: lunWWNGroupSecurityVL.setDescription('WWN group Security setting. (variable length) The bit at the position corresponding to WWNGroupID shows the state of the access permits. Value Mean 0 Does not accessible. 1 Accessible. ')
raidExMibLUNSLUNGroupTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 5), )
if mibBuilder.loadTexts: raidExMibLUNSLUNGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibLUNSLUNGroupTable.setDescription('LUN group information.')
raidExMibLUNSLUNGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 5, 1), ).setIndexNames((0, "HDS9900MIB", "lunGroupSerialNumber"), (0, "HDS9900MIB", "lunGroupPortID"), (0, "HDS9900MIB", "lunGroupControlIndex"))
if mibBuilder.loadTexts: raidExMibLUNSLUNGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibLUNSLUNGroupEntry.setDescription('Entry of LUN group information.')
lunGroupSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunGroupSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: lunGroupSerialNumber.setDescription('Serial number of the DKC.')
lunGroupPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunGroupPortID.setStatus('mandatory')
if mibBuilder.loadTexts: lunGroupPortID.setDescription('Port ID of the DKC.')
lunGroupControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunGroupControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lunGroupControlIndex.setDescription('Index for LUN group control.')
lunGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lunGroupID.setStatus('mandatory')
if mibBuilder.loadTexts: lunGroupID.setDescription('ID of the WWN group.')
lunGroupNickname = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lunGroupNickname.setStatus('deprecated')
if mibBuilder.loadTexts: lunGroupNickname.setDescription('Nickname of the LUN group.')
lunGroupControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lunGroupControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lunGroupControlStatus.setDescription('Control flag. Value Mean 1 Return value. 2 Add request. 3 Delete request. 4 Set request. ')
lunGroupedLUNsVL = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 5, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lunGroupedLUNsVL.setStatus('mandatory')
if mibBuilder.loadTexts: lunGroupedLUNsVL.setDescription('Grouped LUNs. (variable length) It is shown whether the bit at the position corresponding to LUNLUN belongs to the group. (0:does not belong 1:belongs) Value Mean 0 Does not belong. 1 Belongs. ')
lunGroupWWNSecurityVL = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 5, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lunGroupWWNSecurityVL.setStatus('mandatory')
if mibBuilder.loadTexts: lunGroupWWNSecurityVL.setDescription('WWN Security setting. (variable length) The bit at the position corresponding to WWNID shows the state of the access permits. Value Mean 0 Does not accessible. 1 Accessible. ')
lunGroupWWNGroupSecurityVL = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 11, 4, 5, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lunGroupWWNGroupSecurityVL.setStatus('mandatory')
if mibBuilder.loadTexts: lunGroupWWNGroupSecurityVL.setDescription('WWN group Security setting. (variable length) The bit at the position corresponding to WWNGroupID shows the state of the access permits. Value Mean 0 Does not accessible. 1 Accessible. ')
raidExMibDCRConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 12))
raidExMibCacheSizeTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 12, 1), )
if mibBuilder.loadTexts: raidExMibCacheSizeTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibCacheSizeTable.setDescription('Cache size information.')
raidExMibCacheSizeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 12, 1, 1), ).setIndexNames((0, "HDS9900MIB", "cacheSizeSerialNumber"))
if mibBuilder.loadTexts: raidExMibCacheSizeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibCacheSizeEntry.setDescription('Entry of cache size information.')
cacheSizeSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheSizeSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cacheSizeSerialNumber.setDescription('Serial number of the DKC.')
cacheSizeTotalCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 12, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheSizeTotalCacheSize.setStatus('mandatory')
if mibBuilder.loadTexts: cacheSizeTotalCacheSize.setDescription('TOTAL Cache Size(KB).')
cacheSizeUseCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 12, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheSizeUseCacheSize.setStatus('mandatory')
if mibBuilder.loadTexts: cacheSizeUseCacheSize.setDescription('Use Cache Size(KB).')
cacheSizeRemainCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 12, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheSizeRemainCacheSize.setStatus('mandatory')
if mibBuilder.loadTexts: cacheSizeRemainCacheSize.setDescription('Remain Cache Size(KB).')
raidExMibCacheDCRTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 12, 2), )
if mibBuilder.loadTexts: raidExMibCacheDCRTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibCacheDCRTable.setDescription('DCR information.')
raidExMibCacheDCREntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 12, 2, 1), ).setIndexNames((0, "HDS9900MIB", "cacheDCRSerialNumber"), (0, "HDS9900MIB", "cacheDCRCU"), (0, "HDS9900MIB", "cacheDCRLDEV"), (0, "HDS9900MIB", "cacheDCRControlIndex"))
if mibBuilder.loadTexts: raidExMibCacheDCREntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibCacheDCREntry.setDescription('Entry of DCR information.')
cacheDCRSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 12, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDCRSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cacheDCRSerialNumber.setDescription('Serial number of the DKC.')
cacheDCRCU = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 12, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDCRCU.setStatus('mandatory')
if mibBuilder.loadTexts: cacheDCRCU.setDescription('CU# of target volume.')
cacheDCRLDEV = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 12, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDCRLDEV.setStatus('mandatory')
if mibBuilder.loadTexts: cacheDCRLDEV.setDescription('LDEV# of target volume.')
cacheDCRControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 12, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDCRControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cacheDCRControlIndex.setDescription('Index for DCR control.')
cacheDCRMode = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 12, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cacheDCRMode.setStatus('mandatory')
if mibBuilder.loadTexts: cacheDCRMode.setDescription('Mode of DCR. Value Mean 0 BIND mode. 1 PRIO mode. ')
cacheDCRAllOfDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 12, 2, 1, 6), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cacheDCRAllOfDevice.setStatus('mandatory')
if mibBuilder.loadTexts: cacheDCRAllOfDevice.setDescription('Specified type of size. Value Mean 0 A part of volume. 1 The entire volume. ')
cacheDCRStartCylinder = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 12, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cacheDCRStartCylinder.setStatus('mandatory')
if mibBuilder.loadTexts: cacheDCRStartCylinder.setDescription('Start Cylinder of DCR.')
cacheDCRStartHead = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 12, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cacheDCRStartHead.setStatus('mandatory')
if mibBuilder.loadTexts: cacheDCRStartHead.setDescription('Start Head of DCR.')
cacheDCREndCylinder = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 12, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cacheDCREndCylinder.setStatus('mandatory')
if mibBuilder.loadTexts: cacheDCREndCylinder.setDescription('End Cylinder of DCR.')
cacheDCREndHead = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 12, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cacheDCREndHead.setStatus('mandatory')
if mibBuilder.loadTexts: cacheDCREndHead.setDescription('End Head of DCR.')
cacheDCRCylinderSize = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 12, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDCRCylinderSize.setStatus('mandatory')
if mibBuilder.loadTexts: cacheDCRCylinderSize.setDescription('Cylinder size of DCR.')
cacheDCRHeadSize = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 12, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDCRHeadSize.setStatus('mandatory')
if mibBuilder.loadTexts: cacheDCRHeadSize.setDescription('Head size of DCR.')
cacheDCRStartLBA = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 12, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cacheDCRStartLBA.setStatus('mandatory')
if mibBuilder.loadTexts: cacheDCRStartLBA.setDescription('Start LBA of DCR.')
cacheDCREndLBA = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 12, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cacheDCREndLBA.setStatus('mandatory')
if mibBuilder.loadTexts: cacheDCREndLBA.setDescription('End LBA of DCR.')
cacheDCRLBASize = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 12, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDCRLBASize.setStatus('mandatory')
if mibBuilder.loadTexts: cacheDCRLBASize.setDescription('LBA size of DCR.')
cacheDCRControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 12, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cacheDCRControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cacheDCRControlStatus.setDescription('Control flag. Value Mean 1 Return value. 2 Setting request. 3 Release request. ')
raidExMibCVSConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13))
raidExMibCustomizedVolumeTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 3), )
if mibBuilder.loadTexts: raidExMibCustomizedVolumeTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibCustomizedVolumeTable.setDescription('Customized Volume information.')
raidExMibCustomizedVolumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 3, 1), ).setIndexNames((0, "HDS9900MIB", "customizedVolumeSerialNumber"), (0, "HDS9900MIB", "customizedVolumeFB4Number"), (0, "HDS9900MIB", "customizedVolumePGNumber"), (0, "HDS9900MIB", "customizedVolumeCU"), (0, "HDS9900MIB", "customizedVolumeLDEV"))
if mibBuilder.loadTexts: raidExMibCustomizedVolumeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibCustomizedVolumeEntry.setDescription('Entry of Customized Volume information.')
customizedVolumeSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: customizedVolumeSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: customizedVolumeSerialNumber.setDescription('Serial number of the DKC.')
customizedVolumeFB4Number = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: customizedVolumeFB4Number.setStatus('mandatory')
if mibBuilder.loadTexts: customizedVolumeFB4Number.setDescription('FB4# of Customized Volume.')
customizedVolumePGNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: customizedVolumePGNumber.setStatus('mandatory')
if mibBuilder.loadTexts: customizedVolumePGNumber.setDescription('PG# of Customized Volume.')
customizedVolumeCU = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: customizedVolumeCU.setStatus('mandatory')
if mibBuilder.loadTexts: customizedVolumeCU.setDescription('CU# of Customized Volume.')
customizedVolumeLDEV = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: customizedVolumeLDEV.setStatus('mandatory')
if mibBuilder.loadTexts: customizedVolumeLDEV.setDescription('LDEV# of Customized Volume.')
customizedVolumeType = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: customizedVolumeType.setStatus('mandatory')
if mibBuilder.loadTexts: customizedVolumeType.setDescription('Type of this volume. Value Mean 1 Normal Volume. 2 Customized Volume. ')
customizedVolumeEmulation = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 3, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: customizedVolumeEmulation.setStatus('mandatory')
if mibBuilder.loadTexts: customizedVolumeEmulation.setDescription('Device emulation type.')
customizedVolumeUserCylinder = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: customizedVolumeUserCylinder.setStatus('mandatory')
if mibBuilder.loadTexts: customizedVolumeUserCylinder.setDescription('Number of user cylinders')
customizedVolumeUserSize = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: customizedVolumeUserSize.setStatus('mandatory')
if mibBuilder.loadTexts: customizedVolumeUserSize.setDescription('Number of user KBs.')
customizedVolumeControlCylinder = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: customizedVolumeControlCylinder.setStatus('mandatory')
if mibBuilder.loadTexts: customizedVolumeControlCylinder.setDescription('Number of control cylinders')
customizedVolumeControlSize = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: customizedVolumeControlSize.setStatus('mandatory')
if mibBuilder.loadTexts: customizedVolumeControlSize.setDescription('Number of control KBs.')
customizedVolumeControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 3, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: customizedVolumeControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: customizedVolumeControlStatus.setDescription('Control flag. Value Mean 1 Return value. 2 Install CV request. 3 Volume to Space request. ')
raidExMibCVSDeletedVolumeTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 4), )
if mibBuilder.loadTexts: raidExMibCVSDeletedVolumeTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibCVSDeletedVolumeTable.setDescription('CVS deleted normal volume information.')
raidExMibCVSDeletedVolumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 4, 1), ).setIndexNames((0, "HDS9900MIB", "cvsDVSerialNumber"), (0, "HDS9900MIB", "cvsDVFB4Number"), (0, "HDS9900MIB", "cvsDVPGNumber"), (0, "HDS9900MIB", "cvsDVControlIndex"))
if mibBuilder.loadTexts: raidExMibCVSDeletedVolumeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibCVSDeletedVolumeEntry.setDescription('Entry of CVS deleted normal volume information.')
cvsDVSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsDVSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cvsDVSerialNumber.setDescription('Serial number of the DKC.')
cvsDVFB4Number = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsDVFB4Number.setStatus('mandatory')
if mibBuilder.loadTexts: cvsDVFB4Number.setDescription('FB4# of deleted volume.')
cvsDVPGNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsDVPGNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cvsDVPGNumber.setDescription('PG# of deleted volume.')
cvsDVControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsDVControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cvsDVControlIndex.setDescription('Control index of deleted volume.')
cvsDVCU = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 4, 1, 5), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cvsDVCU.setStatus('mandatory')
if mibBuilder.loadTexts: cvsDVCU.setDescription('CU# of deleted volume.')
cvsDVLDEV = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 4, 1, 6), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cvsDVLDEV.setStatus('mandatory')
if mibBuilder.loadTexts: cvsDVLDEV.setDescription('LDEV# of deleted volume.')
cvsDVEmulation = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsDVEmulation.setStatus('mandatory')
if mibBuilder.loadTexts: cvsDVEmulation.setDescription('Device emulation type.')
cvsDVCylinder = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsDVCylinder.setStatus('mandatory')
if mibBuilder.loadTexts: cvsDVCylinder.setDescription('Number of cylinders')
cvsDVSize = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsDVSize.setStatus('mandatory')
if mibBuilder.loadTexts: cvsDVSize.setDescription('Number of KB.')
cvsDVControlCylinder = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsDVControlCylinder.setStatus('mandatory')
if mibBuilder.loadTexts: cvsDVControlCylinder.setDescription('Number of control cylinders')
cvsDVControlSize = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsDVControlSize.setStatus('mandatory')
if mibBuilder.loadTexts: cvsDVControlSize.setDescription('Number of control KB.')
cvsDVControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 4, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvsDVControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cvsDVControlStatus.setDescription('Control flag. Value Mean 1 Return value. 2 Volume initialize request. ')
raidExMibCVSFreeSpaceTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 5), )
if mibBuilder.loadTexts: raidExMibCVSFreeSpaceTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibCVSFreeSpaceTable.setDescription('CVS free space information on PG.')
raidExMibCVSFreeSpaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 5, 1), ).setIndexNames((0, "HDS9900MIB", "cvsFSSerialNumber"), (0, "HDS9900MIB", "cvsFSFB4Number"), (0, "HDS9900MIB", "cvsFSPGNumber"), (0, "HDS9900MIB", "cvsFSControlIndex"))
if mibBuilder.loadTexts: raidExMibCVSFreeSpaceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibCVSFreeSpaceEntry.setDescription('Entry of CVS free space information in PG.')
cvsFSSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsFSSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cvsFSSerialNumber.setDescription('Serial number of the DKC.')
cvsFSFB4Number = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsFSFB4Number.setStatus('mandatory')
if mibBuilder.loadTexts: cvsFSFB4Number.setDescription('FB4# of free space.')
cvsFSPGNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsFSPGNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cvsFSPGNumber.setDescription('PG# of free space.')
cvsFSControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsFSControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cvsFSControlIndex.setDescription('PG# of free space.')
cvsFSCylinder = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsFSCylinder.setStatus('mandatory')
if mibBuilder.loadTexts: cvsFSCylinder.setDescription('Number of cylinders')
cvsFSSize = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsFSSize.setStatus('mandatory')
if mibBuilder.loadTexts: cvsFSSize.setDescription('Number of KB.')
raidExMibCVSParityGroupTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 6), )
if mibBuilder.loadTexts: raidExMibCVSParityGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibCVSParityGroupTable.setDescription('CVS Parity Group Information.')
raidExMibCVSParityGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 6, 1), ).setIndexNames((0, "HDS9900MIB", "cvsPGSerialNumber"), (0, "HDS9900MIB", "cvsPGFB4Number"), (0, "HDS9900MIB", "cvsPGPGNumber"))
if mibBuilder.loadTexts: raidExMibCVSParityGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibCVSParityGroupEntry.setDescription('Entry of CVS Parity Group Information.')
cvsPGSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsPGSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cvsPGSerialNumber.setDescription('Serial number of the DKC.')
cvsPGFB4Number = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsPGFB4Number.setStatus('mandatory')
if mibBuilder.loadTexts: cvsPGFB4Number.setDescription('FB4 Number.')
cvsPGPGNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsPGPGNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cvsPGPGNumber.setDescription('PG Number.')
cvsPGDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsPGDisplayName.setStatus('mandatory')
if mibBuilder.loadTexts: cvsPGDisplayName.setDescription('Display name.')
cvsPGRAIDType = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 6, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsPGRAIDType.setStatus('mandatory')
if mibBuilder.loadTexts: cvsPGRAIDType.setDescription('RAID type')
cvsPGDriveType = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 6, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsPGDriveType.setStatus('mandatory')
if mibBuilder.loadTexts: cvsPGDriveType.setDescription('Drive type.')
cvsPGFreeCylinder = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsPGFreeCylinder.setStatus('mandatory')
if mibBuilder.loadTexts: cvsPGFreeCylinder.setDescription('Cylinder size of free space in the PG.')
cvsPGFreeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsPGFreeSize.setStatus('mandatory')
if mibBuilder.loadTexts: cvsPGFreeSize.setDescription('KB size of free space in the PG.')
cvsPGControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 6, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvsPGControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cvsPGControlStatus.setDescription('Control flag. Value Mean 1 Return value. 2 Volume initialize request. ')
raidExMibCVSCUInfTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 7), )
if mibBuilder.loadTexts: raidExMibCVSCUInfTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibCVSCUInfTable.setDescription('CVS Control Unit Information.')
raidExMibCVSCUInfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 7, 1), ).setIndexNames((0, "HDS9900MIB", "cvsCUInfSerialNumber"))
if mibBuilder.loadTexts: raidExMibCVSCUInfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibCVSCUInfEntry.setDescription('Entry of CVS Control Unit Information.')
cvsCUInfSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsCUInfSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cvsCUInfSerialNumber.setDescription('Serial number of the DKC.')
cvsCUInfFreeCUNum = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 13, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsCUInfFreeCUNum.setStatus('mandatory')
if mibBuilder.loadTexts: cvsCUInfFreeCUNum.setDescription('Available CU Number.')
raidExMibSubsystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 14))
raidExMibSubsystemIDTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 14, 1), )
if mibBuilder.loadTexts: raidExMibSubsystemIDTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibSubsystemIDTable.setDescription('Subsystem ID information.')
raidExMibSubsystemIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 14, 1, 1), ).setIndexNames((0, "HDS9900MIB", "subsystemIDSerialNumber"), (0, "HDS9900MIB", "subsystemIDCU"), (0, "HDS9900MIB", "subsystemIDStartLDEV"))
if mibBuilder.loadTexts: raidExMibSubsystemIDEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibSubsystemIDEntry.setDescription('Entry of Subsystem ID information.')
subsystemIDSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subsystemIDSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: subsystemIDSerialNumber.setDescription('Serial number of the DKC.')
subsystemIDCU = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 14, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subsystemIDCU.setStatus('mandatory')
if mibBuilder.loadTexts: subsystemIDCU.setDescription('CU# of subsystem.')
subsystemIDStartLDEV = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 14, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subsystemIDStartLDEV.setStatus('mandatory')
if mibBuilder.loadTexts: subsystemIDStartLDEV.setDescription('Start LDEV# of subsystem.')
subsystemIDEndLDEV = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 14, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subsystemIDEndLDEV.setStatus('mandatory')
if mibBuilder.loadTexts: subsystemIDEndLDEV.setDescription('End LDEV# of subsystem.')
subsystemIDSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 14, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subsystemIDSSID.setStatus('mandatory')
if mibBuilder.loadTexts: subsystemIDSSID.setDescription('ID of subsystem.')
subsystemIDControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 14, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subsystemIDControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: subsystemIDControlStatus.setDescription('Control flag. Value Mean 1 Return value. 2 Setting request. ')
raidExMibSSIDBoundaryTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 14, 2), )
if mibBuilder.loadTexts: raidExMibSSIDBoundaryTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibSSIDBoundaryTable.setDescription('Subsystem ID Boundary information.')
raidExMibSSIDBoundaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 14, 2, 1), ).setIndexNames((0, "HDS9900MIB", "ssidBoundarySerialNumber"))
if mibBuilder.loadTexts: raidExMibSSIDBoundaryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibSSIDBoundaryEntry.setDescription('Entry of Subsystem ID Boundary information.')
ssidBoundarySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 14, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssidBoundarySerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ssidBoundarySerialNumber.setDescription('Serial number of the DKC.')
ssidBoundaryBoundary = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 14, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssidBoundaryBoundary.setStatus('mandatory')
if mibBuilder.loadTexts: ssidBoundaryBoundary.setDescription('The unit of SSID.')
raidExMibEnvironmentInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 15))
raidExMibTimeZoneDataTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 15, 1), )
if mibBuilder.loadTexts: raidExMibTimeZoneDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibTimeZoneDataTable.setDescription('Time Zone information.')
raidExMibTimeZoneDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 15, 1, 1), ).setIndexNames((0, "HDS9900MIB", "timeZoneSerialNumber"))
if mibBuilder.loadTexts: raidExMibTimeZoneDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibTimeZoneDataEntry.setDescription('Time Zone information.')
timeZoneSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 15, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeZoneSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: timeZoneSerialNumber.setDescription('Serial Number of the DKC.')
timeZoneID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 15, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeZoneID.setStatus('mandatory')
if mibBuilder.loadTexts: timeZoneID.setDescription('Time Zone ID. zone = UT/GMT ;Universal Time ;North American : UT /EST/EDT ;Eastern : -5/-4 /CST/CDT ;Central : -6/-5 /MST/MDT ;Mountain: -7/-6 /PST/PDT ;Pacific : -8/-7 / 1ALPHA ;Military:Z = UT; ; A:-1;(J not used) ; M:-12;N:+1;Y:+12 /((+/-)4DIGIT ;Local differential ; hours+min.(HHMM) ')
raidExMibChannelAdapter = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 16))
raidExMibCHAConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 16, 1), )
if mibBuilder.loadTexts: raidExMibCHAConfigurationTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibCHAConfigurationTable.setDescription('Channel Adapter configuration information.')
raidExMibCHAConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 16, 1, 1), ).setIndexNames((0, "HDS9900MIB", "chaSerialNumber"), (0, "HDS9900MIB", "chaClusterNumber"), (0, "HDS9900MIB", "chaNumber"))
if mibBuilder.loadTexts: raidExMibCHAConfigurationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibCHAConfigurationEntry.setDescription('Entry of Channel Adapter configuration information.')
chaSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 16, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chaSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: chaSerialNumber.setDescription('Serial number of the DKC.')
chaClusterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 16, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chaClusterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: chaClusterNumber.setDescription('Cluster number.')
chaNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 16, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chaNumber.setStatus('mandatory')
if mibBuilder.loadTexts: chaNumber.setDescription('Channel Adapter number.')
chaDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 16, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chaDisplayName.setStatus('mandatory')
if mibBuilder.loadTexts: chaDisplayName.setDescription('Display name of the CHA.')
chaPackageType = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 16, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chaPackageType.setStatus('mandatory')
if mibBuilder.loadTexts: chaPackageType.setDescription('Package type. Value Mean 1 Metal channel. 2 ESCON channel. 3 SCSI channel. 4 Fibre-Tachyon (2 port). 5 Fibre-Tachyon (4 port). ')
chaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 16, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chaMode.setStatus('mandatory')
if mibBuilder.loadTexts: chaMode.setDescription('Operation mode. Value Mean 1 Normal mode. 2 Hi-Speed mode. 3 Irregular mode. ')
chaControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 16, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chaControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: chaControlStatus.setDescription('Control flag. Value Mean 1 Return value. 2 Setting request. ')
raidExMibCHPConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 16, 2), )
if mibBuilder.loadTexts: raidExMibCHPConfigurationTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibCHPConfigurationTable.setDescription('Channel Processor configuration information.')
raidExMibCHPConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 16, 2, 1), ).setIndexNames((0, "HDS9900MIB", "chpSerialNumber"), (0, "HDS9900MIB", "chpClusterNumber"), (0, "HDS9900MIB", "chpCHANumber"), (0, "HDS9900MIB", "chpNumber"))
if mibBuilder.loadTexts: raidExMibCHPConfigurationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibCHPConfigurationEntry.setDescription('Entry of Channel Processor configuration information.')
chpSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 16, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chpSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: chpSerialNumber.setDescription('Serial number of the DKC.')
chpClusterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 16, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chpClusterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: chpClusterNumber.setDescription('Cluster number.')
chpCHANumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 16, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chpCHANumber.setStatus('mandatory')
if mibBuilder.loadTexts: chpCHANumber.setDescription('Channel Adapter number.')
chpNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 16, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chpNumber.setStatus('mandatory')
if mibBuilder.loadTexts: chpNumber.setDescription('Channel Processor number.')
chpDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 16, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chpDisplayName.setStatus('mandatory')
if mibBuilder.loadTexts: chpDisplayName.setDescription('Display name of the CHP.')
raidExMibDiskAdapter = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 17))
raidExMibDKAConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 17, 1), )
if mibBuilder.loadTexts: raidExMibDKAConfigurationTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibDKAConfigurationTable.setDescription('Disk Adapter configuration information.')
raidExMibDKAConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 17, 1, 1), ).setIndexNames((0, "HDS9900MIB", "dkaSerialNumber"), (0, "HDS9900MIB", "dkaClusterNumber"), (0, "HDS9900MIB", "dkaNumber"))
if mibBuilder.loadTexts: raidExMibDKAConfigurationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibDKAConfigurationEntry.setDescription('Entry of Disk Adapter configuration information.')
dkaSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 17, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dkaSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dkaSerialNumber.setDescription('Serial number of the DKC.')
dkaClusterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 17, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dkaClusterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dkaClusterNumber.setDescription('Cluster number.')
dkaNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 17, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dkaNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dkaNumber.setDescription('Disk Adapter number.')
dkaDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 17, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dkaDisplayName.setStatus('mandatory')
if mibBuilder.loadTexts: dkaDisplayName.setDescription('Display name of the DKA.')
raidExMibDKPConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 17, 2), )
if mibBuilder.loadTexts: raidExMibDKPConfigurationTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibDKPConfigurationTable.setDescription('Channel Processor configuration information.')
raidExMibDKPConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 17, 2, 1), ).setIndexNames((0, "HDS9900MIB", "dkpSerialNumber"), (0, "HDS9900MIB", "dkpClusterNumber"), (0, "HDS9900MIB", "dkpDKANumber"), (0, "HDS9900MIB", "dkpNumber"))
if mibBuilder.loadTexts: raidExMibDKPConfigurationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibDKPConfigurationEntry.setDescription('Entry of Channel Processor configuration information.')
dkpSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 17, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dkpSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dkpSerialNumber.setDescription('Serial number of the DKC.')
dkpClusterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 17, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dkpClusterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dkpClusterNumber.setDescription('Cluster number.')
dkpDKANumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 17, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dkpDKANumber.setStatus('mandatory')
if mibBuilder.loadTexts: dkpDKANumber.setDescription('Disk Adapter number.')
dkpNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 17, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dkpNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dkpNumber.setDescription('Disk Processor number.')
dkpDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 17, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dkpDisplayName.setStatus('mandatory')
if mibBuilder.loadTexts: dkpDisplayName.setDescription('Display name of the DKP.')
raidExMibDRRConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 17, 3), )
if mibBuilder.loadTexts: raidExMibDRRConfigurationTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibDRRConfigurationTable.setDescription('DRR configuration information.')
raidExMibDRRConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 17, 3, 1), ).setIndexNames((0, "HDS9900MIB", "drrSerialNumber"), (0, "HDS9900MIB", "drrClusterNumber"), (0, "HDS9900MIB", "drrDKANumber"), (0, "HDS9900MIB", "drrNumber"))
if mibBuilder.loadTexts: raidExMibDRRConfigurationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibDRRConfigurationEntry.setDescription('Entry of DRR configuration information.')
drrSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 17, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drrSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: drrSerialNumber.setDescription('Serial number of the DKC.')
drrClusterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 17, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drrClusterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: drrClusterNumber.setDescription('Cluster number.')
drrDKANumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 17, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drrDKANumber.setStatus('mandatory')
if mibBuilder.loadTexts: drrDKANumber.setDescription('Disk Adapter number.')
drrNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 17, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drrNumber.setStatus('mandatory')
if mibBuilder.loadTexts: drrNumber.setDescription('DRR Number.')
drrDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 17, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drrDisplayName.setStatus('mandatory')
if mibBuilder.loadTexts: drrDisplayName.setDescription('Display name of the DRR.')
raidExMibParityGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 18))
raidExMibParityGroupListTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 18, 1), )
if mibBuilder.loadTexts: raidExMibParityGroupListTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibParityGroupListTable.setDescription('Parity Group list.')
raidExMibParityGroupListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 18, 1, 1), ).setIndexNames((0, "HDS9900MIB", "pgSerialNumber"), (0, "HDS9900MIB", "pgFB4Number"), (0, "HDS9900MIB", "pgNumber"))
if mibBuilder.loadTexts: raidExMibParityGroupListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibParityGroupListEntry.setDescription('Entry of Parity Group list.')
pgSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 18, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pgSerialNumber.setDescription('Serial number of the DKC.')
pgFB4Number = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 18, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgFB4Number.setStatus('mandatory')
if mibBuilder.loadTexts: pgFB4Number.setDescription('FB4 number.')
pgNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 18, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pgNumber.setDescription('Parity Group number.')
pgDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 18, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDisplayName.setStatus('mandatory')
if mibBuilder.loadTexts: pgDisplayName.setDescription('Display name of the PG.')
pgRAIDType = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 18, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgRAIDType.setStatus('mandatory')
if mibBuilder.loadTexts: pgRAIDType.setDescription('RAID Type.')
pgDriveType = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 18, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDriveType.setStatus('mandatory')
if mibBuilder.loadTexts: pgDriveType.setDescription('Drive Type.')
pgHIHSMFixed = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 18, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgHIHSMFixed.setStatus('mandatory')
if mibBuilder.loadTexts: pgHIHSMFixed.setDescription('HIHSM Fixed attribute. Value Mean 0 Non Fixed. 1 Fixed. ')
pgControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 18, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pgControlStatus.setDescription('Control flag. Value Mean 1 Return value. 2 Setting request. ')
raidExMibParityGroupLDEVTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 18, 2), )
if mibBuilder.loadTexts: raidExMibParityGroupLDEVTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibParityGroupLDEVTable.setDescription('Logical Device list in the PG.')
raidExMibParityGroupLDEVEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 18, 2, 1), ).setIndexNames((0, "HDS9900MIB", "pgLDEVSerialNumber"), (0, "HDS9900MIB", "pgLDEVFB4Number"), (0, "HDS9900MIB", "pgLDEVPGNumber"), (0, "HDS9900MIB", "pgLDEVControlIndex"))
if mibBuilder.loadTexts: raidExMibParityGroupLDEVEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibParityGroupLDEVEntry.setDescription('Entry of Parity Group list in the PG.')
pgLDEVSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 18, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgLDEVSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pgLDEVSerialNumber.setDescription('Serial number of the DKC.')
pgLDEVFB4Number = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 18, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgLDEVFB4Number.setStatus('mandatory')
if mibBuilder.loadTexts: pgLDEVFB4Number.setDescription('FB4 number.')
pgLDEVPGNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 18, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgLDEVPGNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pgLDEVPGNumber.setDescription('Parity Group number.')
pgLDEVControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 18, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgLDEVControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pgLDEVControlIndex.setDescription('Control index.')
pgLDEVCU = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 18, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgLDEVCU.setStatus('mandatory')
if mibBuilder.loadTexts: pgLDEVCU.setDescription('CU# of the logical device.')
pgLDEVLDEV = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 18, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgLDEVLDEV.setStatus('mandatory')
if mibBuilder.loadTexts: pgLDEVLDEV.setDescription('LDEV# of the logical device.')
raidExMibHIHSM = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20))
hihsmMonitoringParameterTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 1), )
if mibBuilder.loadTexts: hihsmMonitoringParameterTable.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmMonitoringParameterTable.setDescription('HIHSM monitoring parameter information.')
hihsmMonitoringParameterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 1, 1), ).setIndexNames((0, "HDS9900MIB", "hihsmMonParamSerialNumber"))
if mibBuilder.loadTexts: hihsmMonitoringParameterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmMonitoringParameterEntry.setDescription('Entry of HIHSM monitoring parameter information.')
hihsmMonParamSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmMonParamSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmMonParamSerialNumber.setDescription('Serial number of the DKC.')
hihsmMonParamFunctionSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hihsmMonParamFunctionSwitch.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmMonParamFunctionSwitch.setDescription('Function switch. Value Mean 0 Off 1 On ')
hihsmMonParamGatheringTime = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hihsmMonParamGatheringTime.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmMonParamGatheringTime.setDescription('Gathering time.')
hihsmMonParamGatheredFromDate = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmMonParamGatheredFromDate.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmMonParamGatheredFromDate.setDescription('Top gathered date.')
hihsmMonParamGatheredFromTime = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmMonParamGatheredFromTime.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmMonParamGatheredFromTime.setDescription('Top gathered time.')
hihsmMonParamGatheredToDate = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmMonParamGatheredToDate.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmMonParamGatheredToDate.setDescription('End gathered date.')
hihsmMonParamGatheredToTime = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmMonParamGatheredToTime.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmMonParamGatheredToTime.setDescription('End gathered time.')
hihsmMonParamControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hihsmMonParamControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmMonParamControlStatus.setDescription('Control flag. Value Mean 1 Return value. 2 Setting request. ')
hihsmCalculationParameterTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 2), )
if mibBuilder.loadTexts: hihsmCalculationParameterTable.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCalculationParameterTable.setDescription('HIHSM calculation parameter information.')
hihsmCalculationParameterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 2, 1), ).setIndexNames((0, "HDS9900MIB", "hihsmCalcParamSerialNumber"))
if mibBuilder.loadTexts: hihsmCalculationParameterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCalculationParameterEntry.setDescription('Entry of HIHSM monitoring parameter configuration.')
hihsmCalcParamSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmCalcParamSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCalcParamSerialNumber.setDescription('Serial number of the DKC.')
hihsmCalcParamCalcType = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hihsmCalcParamCalcType.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCalcParamCalcType.setDescription('Calculation type. Value Mean 0 All of gathered data. 1 Specified term. ')
hihsmCalcParamFromDate = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hihsmCalcParamFromDate.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCalcParamFromDate.setDescription('Start date of calculation term.')
hihsmCalcParamFromTime = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hihsmCalcParamFromTime.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCalcParamFromTime.setDescription('Start time of calculation term.')
hihsmCalcParamToDate = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hihsmCalcParamToDate.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCalcParamToDate.setDescription('End date of calculation term.')
hihsmCalcParamToTime = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hihsmCalcParamToTime.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCalcParamToTime.setDescription('End time of calculation term.')
hihsmCalcParamDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hihsmCalcParamDataType.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCalcParamDataType.setDescription('Data Type. Value Mean 0 Data on SVP is used. 1 DKC latest data is used. ')
hihsmCalcParamControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hihsmCalcParamControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCalcParamControlStatus.setDescription('Control flag. Value Mean 1 Return value. 2 Setting request. ')
hihsmCalculatedData = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3))
hihsmCHPUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 1), )
if mibBuilder.loadTexts: hihsmCHPUtilizationTable.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCHPUtilizationTable.setDescription('HIHSM CHP utilization information.')
hihsmCHPUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 1, 1), ).setIndexNames((0, "HDS9900MIB", "hihsmCHPUtilSerialNumber"), (0, "HDS9900MIB", "hihsmCHPUtilClusterNumber"), (0, "HDS9900MIB", "hihsmCHPUtilCHANumber"), (0, "HDS9900MIB", "hihsmCHPUtilCHPNumber"))
if mibBuilder.loadTexts: hihsmCHPUtilizationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCHPUtilizationEntry.setDescription('Entry of HIHSM CHP utilization information.')
hihsmCHPUtilSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmCHPUtilSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCHPUtilSerialNumber.setDescription('Serial number of the DKC.')
hihsmCHPUtilClusterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmCHPUtilClusterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCHPUtilClusterNumber.setDescription('Cluster number.')
hihsmCHPUtilCHANumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmCHPUtilCHANumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCHPUtilCHANumber.setDescription('Channel Adapter number.')
hihsmCHPUtilCHPNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmCHPUtilCHPNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCHPUtilCHPNumber.setDescription('Channel Processor number.')
hihsmCHPUtilData = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmCHPUtilData.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCHPUtilData.setDescription('Channel Processor utilization. Column Value 1 Average. 2 Maximum. ')
hihsmDKPUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 2), )
if mibBuilder.loadTexts: hihsmDKPUtilizationTable.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmDKPUtilizationTable.setDescription('HIHSM DKP utilization information.')
hihsmDKPUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 2, 1), ).setIndexNames((0, "HDS9900MIB", "hihsmDKPUtilSerialNumber"), (0, "HDS9900MIB", "hihsmDKPUtilClusterNumber"), (0, "HDS9900MIB", "hihsmDKPUtilDKANumber"), (0, "HDS9900MIB", "hihsmDKPUtilDKPNumber"))
if mibBuilder.loadTexts: hihsmDKPUtilizationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmDKPUtilizationEntry.setDescription('Entry of HIHSM DKP utilization information.')
hihsmDKPUtilSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmDKPUtilSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmDKPUtilSerialNumber.setDescription('Serial number of the DKC.')
hihsmDKPUtilClusterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmDKPUtilClusterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmDKPUtilClusterNumber.setDescription('Cluster number.')
hihsmDKPUtilDKANumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmDKPUtilDKANumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmDKPUtilDKANumber.setDescription('Disk Adapter number.')
hihsmDKPUtilDKPNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmDKPUtilDKPNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmDKPUtilDKPNumber.setDescription('Disk Processor number.')
hihsmDKPUtilData = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmDKPUtilData.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmDKPUtilData.setDescription('Disk Processor utilization. Column Value 1 Average. 2 Maximum. ')
hihsmDRRUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 3), )
if mibBuilder.loadTexts: hihsmDRRUtilizationTable.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmDRRUtilizationTable.setDescription('HIHSM DRR utilization information.')
hihsmDRRUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 3, 1), ).setIndexNames((0, "HDS9900MIB", "hihsmDRRUtilSerialNumber"), (0, "HDS9900MIB", "hihsmDRRUtilClusterNumber"), (0, "HDS9900MIB", "hihsmDRRUtilDKANumber"), (0, "HDS9900MIB", "hihsmDRRUtilDRRNumber"))
if mibBuilder.loadTexts: hihsmDRRUtilizationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmDRRUtilizationEntry.setDescription('Entry of HIHSM DRR utilization information.')
hihsmDRRUtilSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmDRRUtilSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmDRRUtilSerialNumber.setDescription('Serial number of the DKC.')
hihsmDRRUtilClusterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmDRRUtilClusterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmDRRUtilClusterNumber.setDescription('Cluster number.')
hihsmDRRUtilDKANumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmDRRUtilDKANumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmDRRUtilDKANumber.setDescription('Disk Adapter number.')
hihsmDRRUtilDRRNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmDRRUtilDRRNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmDRRUtilDRRNumber.setDescription('DRR number.')
hihsmDRRUtilData = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmDRRUtilData.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmDRRUtilData.setDescription('DRR utilization. Column Value 1 Average. 2 Maximum. ')
hihsmPGUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 4), )
if mibBuilder.loadTexts: hihsmPGUtilizationTable.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmPGUtilizationTable.setDescription('HIHSM PG Utilization Information.')
hihsmPGUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 4, 1), ).setIndexNames((0, "HDS9900MIB", "hihsmPGUtilSerialNumber"), (0, "HDS9900MIB", "hihsmPGUtilFB4Number"), (0, "HDS9900MIB", "hihsmPGUtilPGNumber"))
if mibBuilder.loadTexts: hihsmPGUtilizationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmPGUtilizationEntry.setDescription('Entry of HIHSM PG utilization information.')
hihsmPGUtilSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmPGUtilSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmPGUtilSerialNumber.setDescription('Serial number of the DKC.')
hihsmPGUtilFB4Number = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmPGUtilFB4Number.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmPGUtilFB4Number.setDescription('FB4 number.')
hihsmPGUtilPGNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmPGUtilPGNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmPGUtilPGNumber.setDescription('Parity Group number.')
hihsmPGUtilData = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmPGUtilData.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmPGUtilData.setDescription('PG utilization. Column Value 1 Average. 2 Maximum. 3 Whether LDEV was moved in the term or not. 0: Does not moved. 1: Moved. ')
hihsmLDEVUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 5), )
if mibBuilder.loadTexts: hihsmLDEVUtilizationTable.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmLDEVUtilizationTable.setDescription('HIHSM LDEV utilization information.')
hihsmLDEVUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 5, 1), ).setIndexNames((0, "HDS9900MIB", "hihsmLDEVUtilSerialNumber"), (0, "HDS9900MIB", "hihsmLDEVUtilFB4Number"), (0, "HDS9900MIB", "hihsmLDEVUtilPGNumber"), (0, "HDS9900MIB", "hihsmLDEVUtilCU"), (0, "HDS9900MIB", "hihsmLDEVUtilLDEV"))
if mibBuilder.loadTexts: hihsmLDEVUtilizationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmLDEVUtilizationEntry.setDescription('Entry of HIHSM LDEV utilization information.')
hihsmLDEVUtilSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmLDEVUtilSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmLDEVUtilSerialNumber.setDescription('Serial number of the DKC.')
hihsmLDEVUtilFB4Number = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmLDEVUtilFB4Number.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmLDEVUtilFB4Number.setDescription('FB4 number.')
hihsmLDEVUtilPGNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmLDEVUtilPGNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmLDEVUtilPGNumber.setDescription('Parity Group number.')
hihsmLDEVUtilCU = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmLDEVUtilCU.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmLDEVUtilCU.setDescription('CU number.')
hihsmLDEVUtilLDEV = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmLDEVUtilLDEV.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmLDEVUtilLDEV.setDescription('LDEV number.')
hihsmLDEVUtilData = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmLDEVUtilData.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmLDEVUtilData.setDescription('LDEV utilization. Column Value 1 Average. 2 Maximum. 3 Random read ratio. 4 Sequential read ratio. 5 Random write ratio. 6 Random read ratio. 7 Expectation average utilization after LDEV moves. 8 Expectation maximum utilization after LDEV moves. 9 Whether LDEV was moved in the term or not. 0: Does not moved. 1: Moved. ')
hihsmCHAtoCSWUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 6), )
if mibBuilder.loadTexts: hihsmCHAtoCSWUtilizationTable.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCHAtoCSWUtilizationTable.setDescription('HIHSM CHA to CSW utilization information.')
hihsmCHAtoCSWUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 6, 1), ).setIndexNames((0, "HDS9900MIB", "hihsmCHACSWSerialNumber"), (0, "HDS9900MIB", "hihsmCHACSWCHAClusterNumber"), (0, "HDS9900MIB", "hihsmCHACSWCHANumber"), (0, "HDS9900MIB", "hihsmCHACSWCSWClusterNumber"), (0, "HDS9900MIB", "hihsmCHACSWCSWNumber"))
if mibBuilder.loadTexts: hihsmCHAtoCSWUtilizationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCHAtoCSWUtilizationEntry.setDescription('Entry of HIHSM CHA to CSW utilization information.')
hihsmCHACSWSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmCHACSWSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCHACSWSerialNumber.setDescription('Serial number of the DKC.')
hihsmCHACSWCHAClusterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmCHACSWCHAClusterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCHACSWCHAClusterNumber.setDescription('Cluster number of CHA.')
hihsmCHACSWCHANumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmCHACSWCHANumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCHACSWCHANumber.setDescription('CHA number.')
hihsmCHACSWCSWClusterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmCHACSWCSWClusterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCHACSWCSWClusterNumber.setDescription('Cluster number of CSW.')
hihsmCHACSWCSWNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmCHACSWCSWNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCHACSWCSWNumber.setDescription('CSW number.')
hihsmCHACSWUtilData = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 6, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmCHACSWUtilData.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCHACSWUtilData.setDescription('CHA to CSW utilization. Column Value 1 Average. 2 Maximum. ')
hihsmDKAtoCSWUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 7), )
if mibBuilder.loadTexts: hihsmDKAtoCSWUtilizationTable.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmDKAtoCSWUtilizationTable.setDescription('HIHSM DKA to CSW utilization information.')
hihsmDKAtoCSWUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 7, 1), ).setIndexNames((0, "HDS9900MIB", "hihsmDKACSWSerialNumber"), (0, "HDS9900MIB", "hihsmDKACSWDKAClusterNumber"), (0, "HDS9900MIB", "hihsmDKACSWDKANumber"), (0, "HDS9900MIB", "hihsmDKACSWCSWClusterNumber"), (0, "HDS9900MIB", "hihsmDKACSWCSWNumber"))
if mibBuilder.loadTexts: hihsmDKAtoCSWUtilizationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmDKAtoCSWUtilizationEntry.setDescription('Entry of HIHSM DKA to CSW utilization information.')
hihsmDKACSWSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmDKACSWSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmDKACSWSerialNumber.setDescription('Serial number of the DKC.')
hihsmDKACSWDKAClusterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmDKACSWDKAClusterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmDKACSWDKAClusterNumber.setDescription('Cluster number of DKA.')
hihsmDKACSWDKANumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmDKACSWDKANumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmDKACSWDKANumber.setDescription('DKA number.')
hihsmDKACSWCSWClusterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmDKACSWCSWClusterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmDKACSWCSWClusterNumber.setDescription('Cluster number of CSW.')
hihsmDKACSWCSWNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmDKACSWCSWNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmDKACSWCSWNumber.setDescription('CSW number.')
hihsmDKACSWUtilData = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmDKACSWUtilData.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmDKACSWUtilData.setDescription('DKA to CSW utilization. Column Value 1 Average. 2 Maximum. ')
hihsmCSWtoCacheUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 8), )
if mibBuilder.loadTexts: hihsmCSWtoCacheUtilizationTable.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCSWtoCacheUtilizationTable.setDescription('HIHSM CSW to Cache utilization information.')
hihsmCSWtoCacheUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 8, 1), ).setIndexNames((0, "HDS9900MIB", "hihsmCSWCacheSerialNumber"), (0, "HDS9900MIB", "hihsmCSWCacheCSWClusterNumber"), (0, "HDS9900MIB", "hihsmCSWCacheCSWNumber"), (0, "HDS9900MIB", "hihsmCSWCacheCacheClusterNumber"), (0, "HDS9900MIB", "hihsmCSWCacheCacheNumber"))
if mibBuilder.loadTexts: hihsmCSWtoCacheUtilizationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCSWtoCacheUtilizationEntry.setDescription('Entry of HIHSM CSW to Cache utilization information.')
hihsmCSWCacheSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmCSWCacheSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCSWCacheSerialNumber.setDescription('Serial number of the DKC.')
hihsmCSWCacheCSWClusterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmCSWCacheCSWClusterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCSWCacheCSWClusterNumber.setDescription('Cluster number of CSW.')
hihsmCSWCacheCSWNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmCSWCacheCSWNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCSWCacheCSWNumber.setDescription('CSW number.')
hihsmCSWCacheCacheClusterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmCSWCacheCacheClusterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCSWCacheCacheClusterNumber.setDescription('Cluster number of Cache.')
hihsmCSWCacheCacheNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmCSWCacheCacheNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCSWCacheCacheNumber.setDescription('Cache number.')
hihsmCSWCacheUtilData = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmCSWCacheUtilData.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCSWCacheUtilData.setDescription('CSW to Cache utilization. Column Value 1 Average. 2 Maximum. ')
hihsmCHAtoSMUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 9), )
if mibBuilder.loadTexts: hihsmCHAtoSMUtilizationTable.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCHAtoSMUtilizationTable.setDescription('HIHSM CHA to SM utilization information.')
hihsmCHAtoSMUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 9, 1), ).setIndexNames((0, "HDS9900MIB", "hihsmCHASMSerialNumber"), (0, "HDS9900MIB", "hihsmCHASMCHAClusterNumber"), (0, "HDS9900MIB", "hihsmCHASMCHANumber"), (0, "HDS9900MIB", "hihsmCHASMSMClusterNumber"))
if mibBuilder.loadTexts: hihsmCHAtoSMUtilizationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCHAtoSMUtilizationEntry.setDescription('Entry of HIHSM CHA to SM utilization information.')
hihsmCHASMSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmCHASMSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCHASMSerialNumber.setDescription('Serial number of the DKC.')
hihsmCHASMCHAClusterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmCHASMCHAClusterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCHASMCHAClusterNumber.setDescription('Cluster number of CHA.')
hihsmCHASMCHANumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmCHASMCHANumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCHASMCHANumber.setDescription('CHA number.')
hihsmCHASMSMClusterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmCHASMSMClusterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCHASMSMClusterNumber.setDescription('Cluster number of SM.')
hihsmCHASMUtilData = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 9, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmCHASMUtilData.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmCHASMUtilData.setDescription('CHA to SM utilization. Column Value 1 Average. 2 Maximum. ')
hihsmDKAtoSMUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 10), )
if mibBuilder.loadTexts: hihsmDKAtoSMUtilizationTable.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmDKAtoSMUtilizationTable.setDescription('HIHSM DKA to SM utilization information.')
hihsmDKAtoSMUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 10, 1), ).setIndexNames((0, "HDS9900MIB", "hihsmDKASMSerialNumber"), (0, "HDS9900MIB", "hihsmDKASMDKAClusterNumber"), (0, "HDS9900MIB", "hihsmDKASMDKANumber"), (0, "HDS9900MIB", "hihsmDKASMSMClusterNumber"))
if mibBuilder.loadTexts: hihsmDKAtoSMUtilizationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmDKAtoSMUtilizationEntry.setDescription('Entry of HIHSM DKA to SM utilization information.')
hihsmDKASMSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmDKASMSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmDKASMSerialNumber.setDescription('Serial number of the DKC.')
hihsmDKASMDKAClusterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmDKASMDKAClusterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmDKASMDKAClusterNumber.setDescription('Cluster number of DKA.')
hihsmDKASMDKANumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmDKASMDKANumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmDKASMDKANumber.setDescription('DKA number.')
hihsmDKASMSMClusterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmDKASMSMClusterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmDKASMSMClusterNumber.setDescription('Cluster number of SM.')
hihsmDKASMUtilData = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 10, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmDKASMUtilData.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmDKASMUtilData.setDescription('DKA to SM utilization. Column Value 1 Average. 2 Maximum. ')
hihsmDKCUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 11), )
if mibBuilder.loadTexts: hihsmDKCUtilizationTable.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmDKCUtilizationTable.setDescription('HIHSM DKC utilization information.')
hihsmDKCUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 11, 1), ).setIndexNames((0, "HDS9900MIB", "hihsmCHASMSerialNumber"))
if mibBuilder.loadTexts: hihsmDKCUtilizationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmDKCUtilizationEntry.setDescription('Entry of HIHSM DKC utilization information.')
hihsmDKCUtilSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmDKCUtilSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmDKCUtilSerialNumber.setDescription('Serial number of the DKC.')
hihsmDKCUtilWritePending = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 3, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmDKCUtilWritePending.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmDKCUtilWritePending.setDescription('Write Pending ratio. Column Value 1 Average. 2 Maximum. ')
hihsmAutomaticMigration = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4))
hihsmAutomaticMigrationParameterTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 1), )
if mibBuilder.loadTexts: hihsmAutomaticMigrationParameterTable.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmAutomaticMigrationParameterTable.setDescription('HIHSM Automatic Migration parameter information.')
hihsmAutomaticMigrationParameterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 1, 1), ).setIndexNames((0, "HDS9900MIB", "hihsmAutoParamSerialNumber"))
if mibBuilder.loadTexts: hihsmAutomaticMigrationParameterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmAutomaticMigrationParameterEntry.setDescription('Entry of hihsm Automatic Migration parameter information.')
hihsmAutoParamSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmAutoParamSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmAutoParamSerialNumber.setDescription('Serial number of the DKC.')
hihsmAutoParamFunctionSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hihsmAutoParamFunctionSwitch.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmAutoParamFunctionSwitch.setDescription('Function switch. Value Mean 0 Off 1 On ')
hihsmAutoParamPlanningDay = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hihsmAutoParamPlanningDay.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmAutoParamPlanningDay.setDescription('Planning day type. Value Mean 0 None 1 Every day 2 Every x day 3 Select in a week 4 Once a month ')
hihsmAutoParamIntervalDay = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hihsmAutoParamIntervalDay.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmAutoParamIntervalDay.setDescription('Interval day.')
hihsmAutoParamDayOfWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hihsmAutoParamDayOfWeek.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmAutoParamDayOfWeek.setDescription('Planning day of week. Value Mean 0 Sunday 1 Monday 2 Tuesday 3 Wednesday 4 Thursday 5 Friday 6 Saturday ')
hihsmAutoParamUseFromTime = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hihsmAutoParamUseFromTime.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmAutoParamUseFromTime.setDescription('Top time of monitoring data.')
hihsmAutoParamUseToTime = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 1, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hihsmAutoParamUseToTime.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmAutoParamUseToTime.setDescription('End time of monitoring data.')
hihsmAutoParamJudgeMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hihsmAutoParamJudgeMethod.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmAutoParamJudgeMethod.setDescription('Judge method of monitoring data. Value Mean 0 Average of all data. 1 Average of top x data. ')
hihsmAutoParamHightestPoints = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hihsmAutoParamHightestPoints.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmAutoParamHightestPoints.setDescription('Highest points of judge method.')
hihsmAutoParamExecutionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 1, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hihsmAutoParamExecutionTime.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmAutoParamExecutionTime.setDescription('Execution time.')
hihsmAutoParamMaxDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hihsmAutoParamMaxDuration.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmAutoParamMaxDuration.setDescription('Maximum limitation duration.')
hihsmAutoParamMaxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hihsmAutoParamMaxUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmAutoParamMaxUtilization.setDescription('Maximum limitation utilization.')
hihsmAutoParamMaxVolumes = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hihsmAutoParamMaxVolumes.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmAutoParamMaxVolumes.setDescription('Number of Maximum migration volumes.')
hihsmAutoParamControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hihsmAutoParamControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmAutoParamControlStatus.setDescription('Control Status. Value Mean 1 Return value. 2 Parameter setting request. 3 Default setting request. ')
hihsmAutoParamDayOfMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hihsmAutoParamDayOfMonth.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmAutoParamDayOfMonth.setDescription('Planning day of month.')
hihsmAutomaticMigrationClass = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 2))
hihsmAutomaticMigrationClassListTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 2, 1), )
if mibBuilder.loadTexts: hihsmAutomaticMigrationClassListTable.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmAutomaticMigrationClassListTable.setDescription('HIHSM Automatic Migration Class information.')
hihsmAutomaticMigrationClassListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 2, 1, 1), ).setIndexNames((0, "HDS9900MIB", "hihsmClassListSerialNumber"), (0, "HDS9900MIB", "hihsmClassListClassNumber"))
if mibBuilder.loadTexts: hihsmAutomaticMigrationClassListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmAutomaticMigrationClassListEntry.setDescription('Entry of HIHSM Automatic Migration Class information.')
hihsmClassListSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmClassListSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmClassListSerialNumber.setDescription('Serial number of the DKC.')
hihsmClassListClassNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmClassListClassNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmClassListClassNumber.setDescription('Class number.')
hihsmClassListDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmClassListDisplayName.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmClassListDisplayName.setDescription('Display name of the class.')
hihsmClassListMaxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hihsmClassListMaxUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmClassListMaxUtilization.setDescription('Maximum utilization of the class.')
hihsmClassListControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hihsmClassListControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmClassListControlStatus.setDescription('Control flag. Value Mean 1 Return value. 2 Maximum Utilization setting request. ')
hihsmAutomaticMigrationClassPGTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 2, 2), )
if mibBuilder.loadTexts: hihsmAutomaticMigrationClassPGTable.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmAutomaticMigrationClassPGTable.setDescription('HIHSM PG list in Automatic Migration Class.')
hihsmAutomaticMigrationClassPGEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 2, 2, 1), ).setIndexNames((0, "HDS9900MIB", "hihsmClassPGSerialNumber"), (0, "HDS9900MIB", "hihsmClassPGClassNumber"), (0, "HDS9900MIB", "hihsmClassPGControlIndex"))
if mibBuilder.loadTexts: hihsmAutomaticMigrationClassPGEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmAutomaticMigrationClassPGEntry.setDescription('Entry of HIHSM PG list in Automatic Migration Class.')
hihsmClassPGSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmClassPGSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmClassPGSerialNumber.setDescription('Serial number of the DKC.')
hihsmClassPGClassNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmClassPGClassNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmClassPGClassNumber.setDescription('Class number.')
hihsmClassPGControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmClassPGControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmClassPGControlIndex.setDescription('Control index.')
hihsmClassPGFB4Number = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmClassPGFB4Number.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmClassPGFB4Number.setDescription('FB4 number.')
hihsmClassPGPGNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmClassPGPGNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmClassPGPGNumber.setDescription('Parity Group number.')
hihsmAutomaticMigrationPlan = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 3))
hihsmAutomaticMigrationPlanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 3, 1), )
if mibBuilder.loadTexts: hihsmAutomaticMigrationPlanStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmAutomaticMigrationPlanStatusTable.setDescription('HIHSM Automatic Migration Plan status information.')
hihsmAutomaticMigrationPlanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 3, 1, 1), ).setIndexNames((0, "HDS9900MIB", "hihsmPlanStatusSerialNumber"))
if mibBuilder.loadTexts: hihsmAutomaticMigrationPlanStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmAutomaticMigrationPlanStatusEntry.setDescription('Entry of HIHSM Automatic Migration Plan status information.')
hihsmPlanStatusSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmPlanStatusSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmPlanStatusSerialNumber.setDescription('Serial number of the DKC.')
hihsmPlanStatusData = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmPlanStatusData.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmPlanStatusData.setDescription('Automatic Migration Plan status. Value Mean 1 Not planned yet. 2 Not performed yet. 3 Under migration . 4 Last migration has canceled. 5 Failed to make a plan. ')
hihsmPlanStatusCheckDate = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmPlanStatusCheckDate.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmPlanStatusCheckDate.setDescription('Next checking date.')
hihsmPlanStatusCheckTime = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmPlanStatusCheckTime.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmPlanStatusCheckTime.setDescription('Next checking time.')
hihsmPlanStatusMigrationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 3, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmPlanStatusMigrationDate.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmPlanStatusMigrationDate.setDescription('Next migration date.')
hihsmPlanStatusMigrationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 3, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmPlanStatusMigrationTime.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmPlanStatusMigrationTime.setDescription('Next migration time.')
hihsmPlanStatusControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 3, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hihsmPlanStatusControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmPlanStatusControlStatus.setDescription('Control flag. Value Mean 1 Return value. 2 Canceling request. 3 Plan making request. ')
hihsmAutomaticMigrationPlanLDEVTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 3, 2), )
if mibBuilder.loadTexts: hihsmAutomaticMigrationPlanLDEVTable.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmAutomaticMigrationPlanLDEVTable.setDescription('hihsm Automatic Migration LDEV information.')
hihsmAutomaticMigrationPlanLDEVEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 3, 2, 1), ).setIndexNames((0, "HDS9900MIB", "hihsmPlanLDEVSerialNumber"), (0, "HDS9900MIB", "hihsmPlanLDEVControlIndex"))
if mibBuilder.loadTexts: hihsmAutomaticMigrationPlanLDEVEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmAutomaticMigrationPlanLDEVEntry.setDescription('Entry of HIHSM Automatic Migration LDEV information.')
hihsmPlanLDEVSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmPlanLDEVSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmPlanLDEVSerialNumber.setDescription('Serial number of the DKC.')
hihsmPlanLDEVControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmPlanLDEVControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmPlanLDEVControlIndex.setDescription('Control index.')
hihsmPlanLDEVSrcFB4Number = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmPlanLDEVSrcFB4Number.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmPlanLDEVSrcFB4Number.setDescription('FB4 number.')
hihsmPlanLDEVSrcPGNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmPlanLDEVSrcPGNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmPlanLDEVSrcPGNumber.setDescription('source PG number.')
hihsmPlanLDEVSrcCU = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmPlanLDEVSrcCU.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmPlanLDEVSrcCU.setDescription('source CU number.')
hihsmPlanLDEVSrcLDEV = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmPlanLDEVSrcLDEV.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmPlanLDEVSrcLDEV.setDescription('source LDEV number.')
hihsmPlanLDEVDstFB4Number = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmPlanLDEVDstFB4Number.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmPlanLDEVDstFB4Number.setDescription('Destination FB4 number.')
hihsmPlanLDEVDstPGNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmPlanLDEVDstPGNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmPlanLDEVDstPGNumber.setDescription('Destination PG number.')
hihsmPlanLDEVDstCU = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmPlanLDEVDstCU.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmPlanLDEVDstCU.setDescription('Destination CU number.')
hihsmPlanLDEVDstLDEV = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmPlanLDEVDstLDEV.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmPlanLDEVDstLDEV.setDescription('Destination LDEV number.')
hihsmAutomaticMigrationHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 4))
hihsmAutomaticMigrationHistoryCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 4, 1), )
if mibBuilder.loadTexts: hihsmAutomaticMigrationHistoryCtrlTable.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmAutomaticMigrationHistoryCtrlTable.setDescription('HIHSM Automatic Migration History control.')
hihsmAutomaticMigrationHistoryCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 4, 1, 1), ).setIndexNames((0, "HDS9900MIB", "hihsmAutoHstCtrlSerialNumber"))
if mibBuilder.loadTexts: hihsmAutomaticMigrationHistoryCtrlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmAutomaticMigrationHistoryCtrlEntry.setDescription('Entry of HIHSM Automatic Migration History control.')
hihsmAutoHstCtrlSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmAutoHstCtrlSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmAutoHstCtrlSerialNumber.setDescription('Serial number of the DKC.')
hihsmAutoHstCtrlControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 4, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hihsmAutoHstCtrlControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmAutoHstCtrlControlStatus.setDescription('Control flag. Value Mean 1 Return value. 2 clearing request. ')
hihsmAutomaticMigrationHistoryListTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 4, 2), )
if mibBuilder.loadTexts: hihsmAutomaticMigrationHistoryListTable.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmAutomaticMigrationHistoryListTable.setDescription('HIHSM Automatic Migration History List.')
hihsmAutomaticMigrationHistoryListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 4, 2, 1), ).setIndexNames((0, "HDS9900MIB", "hihsmAutoHstListSerialNumber"), (0, "HDS9900MIB", "hihsmAutoHstListControlIndex"))
if mibBuilder.loadTexts: hihsmAutomaticMigrationHistoryListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmAutomaticMigrationHistoryListEntry.setDescription('Entry of HIHSM Automatic Migration History List.')
hihsmAutoHstListSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmAutoHstListSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmAutoHstListSerialNumber.setDescription('Serial number of the DKC.')
hihsmAutoHstListControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmAutoHstListControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmAutoHstListControlIndex.setDescription('Control index.')
hihsmAutoHstListMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmAutoHstListMessage.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmAutoHstListMessage.setDescription('Control Status. Value Mean 1 Return value. 2 Clearing request. ')
hihsmVolumeMigrationHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 5))
hihsmVolumeMigrationHistoryCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 5, 1), )
if mibBuilder.loadTexts: hihsmVolumeMigrationHistoryCtrlTable.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmVolumeMigrationHistoryCtrlTable.setDescription('HIHSM Volume Migration History Control.')
hihsmVolumeMigrationHistoryCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 5, 1, 1), ).setIndexNames((0, "HDS9900MIB", "hihsmVolHstCtrlSerialNumber"))
if mibBuilder.loadTexts: hihsmVolumeMigrationHistoryCtrlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmVolumeMigrationHistoryCtrlEntry.setDescription('Entry of HIHSM Volume Migration History Control.')
hihsmVolHstCtrlSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmVolHstCtrlSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmVolHstCtrlSerialNumber.setDescription('Serial number of the DKC.')
hihsmVolHstCtrlControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 5, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hihsmVolHstCtrlControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmVolHstCtrlControlStatus.setDescription('Control flag. Value Mean 0 Return value. 1 Clearing request. ')
hihsmVolumeMigrationHistoryListTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 5, 2), )
if mibBuilder.loadTexts: hihsmVolumeMigrationHistoryListTable.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmVolumeMigrationHistoryListTable.setDescription('HIHSM Volume Migration History List.')
hihsmVolumeMigrationHistoryListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 5, 2, 1), ).setIndexNames((0, "HDS9900MIB", "hihsmVolHstListSerialNumber"), (0, "HDS9900MIB", "hihsmVolHstListControlIndex"))
if mibBuilder.loadTexts: hihsmVolumeMigrationHistoryListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmVolumeMigrationHistoryListEntry.setDescription('Entry of HIHSM Volume Migration History List.')
hihsmVolHstListSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmVolHstListSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmVolHstListSerialNumber.setDescription('Serial number of the DKC.')
hihsmVolHstListControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmVolHstListControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmVolHstListControlIndex.setDescription('Control index.')
hihsmVolHstListDate = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 5, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmVolHstListDate.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmVolHstListDate.setDescription('Date.')
hihsmVolHstListTime = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 5, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmVolHstListTime.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmVolHstListTime.setDescription('Time.')
hihsmVolHstListAction = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 5, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmVolHstListAction.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmVolHstListAction.setDescription('Action.')
hihsmVolHstListSrcFB4Number = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmVolHstListSrcFB4Number.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmVolHstListSrcFB4Number.setDescription('Source FB4 number.')
hihsmVolHstListSrcPGNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 5, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmVolHstListSrcPGNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmVolHstListSrcPGNumber.setDescription('Source PG number.')
hihsmVolHstListSrcCU = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 5, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmVolHstListSrcCU.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmVolHstListSrcCU.setDescription('Source CU number.')
hihsmVolHstListSrcLDEV = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 5, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmVolHstListSrcLDEV.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmVolHstListSrcLDEV.setDescription('Source LDEV number.')
hihsmVolHstListDstFB4Number = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 5, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmVolHstListDstFB4Number.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmVolHstListDstFB4Number.setDescription('Destination FB4 number.')
hihsmVolHstListDstPGNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 5, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmVolHstListDstPGNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmVolHstListDstPGNumber.setDescription('Destination PG number.')
hihsmVolHstListDstCU = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 5, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmVolHstListDstCU.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmVolHstListDstCU.setDescription('Destination CU number.')
hihsmVolHstListDstLDEV = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 4, 5, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmVolHstListDstLDEV.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmVolHstListDstLDEV.setDescription('Destination LDEV number.')
hihsmManualMigration = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 6))
hihsmManualVolumeMigrationTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 6, 1), )
if mibBuilder.loadTexts: hihsmManualVolumeMigrationTable.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmManualVolumeMigrationTable.setDescription('HIHSM Manual Volume Migration information.')
hihsmManualVolumeMigrationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 6, 1, 1), ).setIndexNames((0, "HDS9900MIB", "hihsmManVolMigSerialNumber"), (0, "HDS9900MIB", "hihsmManVolMigSrcCU"), (0, "HDS9900MIB", "hihsmManVolMigSrcLDEV"))
if mibBuilder.loadTexts: hihsmManualVolumeMigrationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmManualVolumeMigrationEntry.setDescription('Entry of HIHSM Manual Volume Migration information.')
hihsmManVolMigSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmManVolMigSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmManVolMigSerialNumber.setDescription('Serial number of the DKC.')
hihsmManVolMigSrcCU = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmManVolMigSrcCU.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmManVolMigSrcCU.setDescription('Source CU number.')
hihsmManVolMigSrcLDEV = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmManVolMigSrcLDEV.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmManVolMigSrcLDEV.setDescription('Source LDEV number.')
hihsmManVolMigDstCU = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 6, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hihsmManVolMigDstCU.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmManVolMigDstCU.setDescription('Destination CU number.')
hihsmManVolMigDstLDEV = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 6, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hihsmManVolMigDstLDEV.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmManVolMigDstLDEV.setDescription('Destination LDEV number.')
hihsmManVolMigProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 6, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmManVolMigProgress.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmManVolMigProgress.setDescription('Progress of migration.')
hihsmManVolMigControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 6, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hihsmManVolMigControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmManVolMigControlStatus.setDescription('Control Status. Value Mean 1 Return value. 2 Migration request. 3 Cancel request. ')
hihsmMigrationExceptation = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 7))
hihsmExpectationPGUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 7, 1), )
if mibBuilder.loadTexts: hihsmExpectationPGUtilizationTable.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmExpectationPGUtilizationTable.setDescription('HIHSM destination parity group utilization expectation.')
hihsmExpectationPGUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 7, 1, 1), ).setIndexNames((0, "HDS9900MIB", "hihsmExpPGUtilSerialNumber"), (0, "HDS9900MIB", "hihsmExpPGUtilSrcCU"), (0, "HDS9900MIB", "hihsmExpPGUtilSrcLDEV"), (0, "HDS9900MIB", "hihsmExpPGUtilDstFB4"), (0, "HDS9900MIB", "hihsmExpPGUtilDstPG"))
if mibBuilder.loadTexts: hihsmExpectationPGUtilizationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmExpectationPGUtilizationEntry.setDescription('Entry of HIHSM destination PG utilization expectation.')
hihsmExpPGUtilSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmExpPGUtilSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmExpPGUtilSerialNumber.setDescription('Serial number of the DKC.')
hihsmExpPGUtilSrcCU = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmExpPGUtilSrcCU.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmExpPGUtilSrcCU.setDescription('Source volume CU number.')
hihsmExpPGUtilSrcLDEV = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmExpPGUtilSrcLDEV.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmExpPGUtilSrcLDEV.setDescription('Source volume LDEV number.')
hihsmExpPGUtilDstFB4 = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmExpPGUtilDstFB4.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmExpPGUtilDstFB4.setDescription('Destination FB4 number.')
hihsmExpPGUtilDstPG = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 7, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmExpPGUtilDstPG.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmExpPGUtilDstPG.setDescription('Destination PG number.')
hihsmExpPGUtilData = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 7, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hihsmExpPGUtilData.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmExpPGUtilData.setDescription('Expectation Utilization of Destination PG. Column Mean 1 Average utilization after migrated. 2 Maximum utilization after migrated. ')
hihsmExpPGUtilControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 20, 7, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hihsmExpPGUtilControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hihsmExpPGUtilControlStatus.setDescription('Control Status. Value Mean 1 Return value. 2 Expectation request. 3 Deleting request. ')
raidExMibCSW = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 21))
raidExMibCSWConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 21, 1), )
if mibBuilder.loadTexts: raidExMibCSWConfigurationTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibCSWConfigurationTable.setDescription('CSW configuration information.')
raidExMibCSWConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 21, 1, 1), ).setIndexNames((0, "HDS9900MIB", "cswSerialNumber"), (0, "HDS9900MIB", "cswClusterNumber"), (0, "HDS9900MIB", "cswNumber"))
if mibBuilder.loadTexts: raidExMibCSWConfigurationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibCSWConfigurationEntry.setDescription('Entry of CSW configuration information.')
cswSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 21, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cswSerialNumber.setDescription('Serial number of the DKC.')
cswClusterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 21, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswClusterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cswClusterNumber.setDescription('Cluster number.')
cswNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 21, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cswNumber.setDescription('CSW number.')
cswDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 21, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswDisplayName.setStatus('mandatory')
if mibBuilder.loadTexts: cswDisplayName.setDescription('Display name of the CSW.')
raidExMibSharedMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 22))
raidExMibSMConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 22, 1), )
if mibBuilder.loadTexts: raidExMibSMConfigurationTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibSMConfigurationTable.setDescription('Shared Memory configuration information.')
raidExMibSMConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 22, 1, 1), ).setIndexNames((0, "HDS9900MIB", "smSerialNumber"), (0, "HDS9900MIB", "smClusterNumber"))
if mibBuilder.loadTexts: raidExMibSMConfigurationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibSMConfigurationEntry.setDescription('Entry of Shared Memory configuration information.')
smSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 22, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: smSerialNumber.setDescription('Serial number of the DKC.')
smClusterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 22, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smClusterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: smClusterNumber.setDescription('Cluster number.')
smDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 22, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smDisplayName.setStatus('mandatory')
if mibBuilder.loadTexts: smDisplayName.setDescription('Display name of the SM.')
raidExMibCacheMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 23))
raidExMibCacheConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 23, 1), )
if mibBuilder.loadTexts: raidExMibCacheConfigurationTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibCacheConfigurationTable.setDescription('Cache configuration information.')
raidExMibCacheConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 23, 1, 1), ).setIndexNames((0, "HDS9900MIB", "cacheConfSerialNumber"), (0, "HDS9900MIB", "cacheConfClusterNumber"), (0, "HDS9900MIB", "cacheConfCacheNumber"))
if mibBuilder.loadTexts: raidExMibCacheConfigurationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibCacheConfigurationEntry.setDescription('Entry of Cache configuration information.')
cacheConfSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 23, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheConfSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cacheConfSerialNumber.setDescription('Serial number of the DKC.')
cacheConfClusterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 23, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheConfClusterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cacheConfClusterNumber.setDescription('Cluster number.')
cacheConfCacheNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 23, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheConfCacheNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cacheConfCacheNumber.setDescription('Cache number.')
cacheConfDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 23, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheConfDisplayName.setStatus('mandatory')
if mibBuilder.loadTexts: cacheConfDisplayName.setDescription('Display name of the Cache.')
raidExMibPortControlConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24))
raidExMibPortControlSwitchTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 1), )
if mibBuilder.loadTexts: raidExMibPortControlSwitchTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibPortControlSwitchTable.setDescription('Port Control Switch information.')
raidExMibPortControlSwitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 1, 1), ).setIndexNames((0, "HDS9900MIB", "portControlSwitchSerialNumber"))
if mibBuilder.loadTexts: raidExMibPortControlSwitchEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibPortControlSwitchEntry.setDescription('Entry of port Control Switch information.')
portControlSwitchSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portControlSwitchSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: portControlSwitchSerialNumber.setDescription('Serial Number of the DKC.')
portControlSwitchOnOff = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portControlSwitchOnOff.setStatus('mandatory')
if mibBuilder.loadTexts: portControlSwitchOnOff.setDescription('Port Control Switch On/Off.')
portControlSwitchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portControlSwitchStatus.setStatus('mandatory')
if mibBuilder.loadTexts: portControlSwitchStatus.setDescription('Normal Return code :1 Set Request :2 ')
raidExMibPortControlSetUpTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 2), )
if mibBuilder.loadTexts: raidExMibPortControlSetUpTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibPortControlSetUpTable.setDescription('Port Control Setup information.')
raidExMibPortControlSetUpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 2, 1), ).setIndexNames((0, "HDS9900MIB", "portControlSetUpSerialNumber"), (0, "HDS9900MIB", "portControlSetUpPortID"))
if mibBuilder.loadTexts: raidExMibPortControlSetUpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibPortControlSetUpEntry.setDescription('Entry of port Control Setup information.')
portControlSetUpSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portControlSetUpSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: portControlSetUpSerialNumber.setDescription('Serial Number of the DKC.')
portControlSetUpPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portControlSetUpPortID.setStatus('mandatory')
if mibBuilder.loadTexts: portControlSetUpPortID.setDescription('Port Number ')
portControlSetUpControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portControlSetUpControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: portControlSetUpControlIndex.setDescription('Control Index ')
portControlSetUpDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portControlSetUpDisplayName.setStatus('mandatory')
if mibBuilder.loadTexts: portControlSetUpDisplayName.setDescription('Port Display Name ')
portControlSetUpSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portControlSetUpSetting.setStatus('mandatory')
if mibBuilder.loadTexts: portControlSetUpSetting.setDescription('Priority Mode ')
portControlSetUpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portControlSetUpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: portControlSetUpStatus.setDescription('Control Flag ')
raidExMibPortControlParameter = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 3))
raidExMibPortParameterTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 3, 1), )
if mibBuilder.loadTexts: raidExMibPortParameterTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibPortParameterTable.setDescription('Port Control Parameter information.')
raidExMibPortParameterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 3, 1, 1), ).setIndexNames((0, "HDS9900MIB", "portPrmSerialNumber"), (0, "HDS9900MIB", "portPrmPortID"), (0, "HDS9900MIB", "portPrmControlIndex"))
if mibBuilder.loadTexts: raidExMibPortParameterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibPortParameterEntry.setDescription('Entry of PortControl parameter information.')
portPrmSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPrmSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: portPrmSerialNumber.setDescription('Serial Number of the DKC.')
portPrmPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPrmPortID.setStatus('mandatory')
if mibBuilder.loadTexts: portPrmPortID.setDescription(' Port Number.')
portPrmControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPrmControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: portPrmControlIndex.setDescription('Control Index.')
portPrmDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPrmDisplayName.setStatus('mandatory')
if mibBuilder.loadTexts: portPrmDisplayName.setDescription('Port Display Name.')
portPrmSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPrmSetting.setStatus('mandatory')
if mibBuilder.loadTexts: portPrmSetting.setDescription('Priority Mode. Value Mean 1 Prioritized Mode. 2 Non-Prioritized Mode. ')
portPrmPrioIOPS = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPrmPrioIOPS.setStatus('mandatory')
if mibBuilder.loadTexts: portPrmPrioIOPS.setDescription('Threshold Level of IOPS for Priority ')
portPrmPrioMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPrmPrioMBS.setStatus('mandatory')
if mibBuilder.loadTexts: portPrmPrioMBS.setDescription('Threshold Level of MBs for Priority ')
portNPrmnPrioIOPS = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 3, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portNPrmnPrioIOPS.setStatus('mandatory')
if mibBuilder.loadTexts: portNPrmnPrioIOPS.setDescription('Upper Limit of IOPS for Priority ')
portNPrmnPrioMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 3, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portNPrmnPrioMBS.setStatus('mandatory')
if mibBuilder.loadTexts: portNPrmnPrioMBS.setDescription('Upper Limit of MBs for Priority ')
portPrmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 3, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPrmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: portPrmThreshold.setDescription('Threshold Level Control flag. Value Mean 0 off. 1 on. ')
portPrmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 3, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPrmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: portPrmStatus.setDescription('Control flag. Value Mean 1 Normal Return code. 2 Set Request. ')
raidExMibPrioAllPortParameterTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 3, 2), )
if mibBuilder.loadTexts: raidExMibPrioAllPortParameterTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibPrioAllPortParameterTable.setDescription('Priority All Port Parameter information.')
raidExMibPrioAllPortParameterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 3, 2, 1), ).setIndexNames((0, "HDS9900MIB", "prioAllPortPrmSerialNumber"))
if mibBuilder.loadTexts: raidExMibPrioAllPortParameterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibPrioAllPortParameterEntry.setDescription('Entry of Priority All Port Parameter information.')
prioAllPortPrmSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prioAllPortPrmSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: prioAllPortPrmSerialNumber.setDescription('Serial Number of the DKC.')
prioAllPortPrmPrioIOPS = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 3, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioAllPortPrmPrioIOPS.setStatus('mandatory')
if mibBuilder.loadTexts: prioAllPortPrmPrioIOPS.setDescription('IOPS for Priority Port.')
prioAllPortPrmPrioMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 3, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioAllPortPrmPrioMBS.setStatus('mandatory')
if mibBuilder.loadTexts: prioAllPortPrmPrioMBS.setDescription('MB/S for Priority Port.')
prioAllPortPrmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prioAllPortPrmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: prioAllPortPrmThreshold.setDescription(' Threshold Level. Value Mean 1 Non Control. 2 Control. ')
prioAllPortPrmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 3, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioAllPortPrmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: prioAllPortPrmStatus.setDescription(' Control Flag. Value Mean 1 Normal Return Code. 2 Set Request. 3 Release Request ')
raidExMibAllPortParameterTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 3, 3), )
if mibBuilder.loadTexts: raidExMibAllPortParameterTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibAllPortParameterTable.setDescription('All Port Parameter information.')
raidExMibAllPortParameterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 3, 3, 1), ).setIndexNames((0, "HDS9900MIB", "allPortPrmSerialNumber"))
if mibBuilder.loadTexts: raidExMibAllPortParameterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibAllPortParameterEntry.setDescription('Entry All Port Parameter information.')
allPortPrmSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: allPortPrmSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: allPortPrmSerialNumber.setDescription('Serial Number of the DKC.')
allPortPrmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 3, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allPortPrmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: allPortPrmStatus.setDescription(' Control Flag. Value Mean 1 Normal Return. 2 Request to Default. ')
raidExMibRealTimeMonitoringInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4))
raidExMibRTMonitoringCntlTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 1), )
if mibBuilder.loadTexts: raidExMibRTMonitoringCntlTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibRTMonitoringCntlTable.setDescription('Monitoring Control Information.')
raidExMibRTMonitoringCntlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 1, 1), ).setIndexNames((0, "HDS9900MIB", "rTMonitoringCntlSerialNumber"))
if mibBuilder.loadTexts: raidExMibRTMonitoringCntlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibRTMonitoringCntlEntry.setDescription('Entry of LUSE information.')
rTMonitoringCntlSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTMonitoringCntlSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: rTMonitoringCntlSerialNumber.setDescription('Serial Number of the DKC.')
rTMonitoringCntlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rTMonitoringCntlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rTMonitoringCntlStatus.setDescription(' Control Flag.')
raidExMibRTMonitorDataTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 2), )
if mibBuilder.loadTexts: raidExMibRTMonitorDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibRTMonitorDataTable.setDescription('Port Monitoring parameter Data Information.')
raidExMibRTMonitorDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 2, 1), ).setIndexNames((0, "HDS9900MIB", "rTMonitorDataSerialNumber"), (0, "HDS9900MIB", "rTMonitorDataPortID"), (0, "HDS9900MIB", "rTMonitorDataControlIndex"))
if mibBuilder.loadTexts: raidExMibRTMonitorDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibRTMonitorDataEntry.setDescription('Entry of Port Monitoring parameter Data Information.')
rTMonitorDataSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTMonitorDataSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: rTMonitorDataSerialNumber.setDescription('Serial Number of the DKC.')
rTMonitorDataPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTMonitorDataPortID.setStatus('mandatory')
if mibBuilder.loadTexts: rTMonitorDataPortID.setDescription(' Port Number.')
rTMonitorDataControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTMonitorDataControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rTMonitorDataControlIndex.setDescription(' Control Index.')
rTMonitorDataGatheredDate = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTMonitorDataGatheredDate.setStatus('mandatory')
if mibBuilder.loadTexts: rTMonitorDataGatheredDate.setDescription(' Monitoring Date.')
rTMonitorDataGatheredTime = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTMonitorDataGatheredTime.setStatus('mandatory')
if mibBuilder.loadTexts: rTMonitorDataGatheredTime.setDescription(' Monitoring Time.')
rTMonitorDataSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTMonitorDataSetting.setStatus('mandatory')
if mibBuilder.loadTexts: rTMonitorDataSetting.setDescription(' Priority Mode. Value Mean 1 Prioritized Mode. 2 Non-Prioritized Mode. ')
rTMonitorDataIOPSMax = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTMonitorDataIOPSMax.setStatus('mandatory')
if mibBuilder.loadTexts: rTMonitorDataIOPSMax.setDescription(' IOPS Max Value.')
rTMonitorDataIOPSAve = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTMonitorDataIOPSAve.setStatus('mandatory')
if mibBuilder.loadTexts: rTMonitorDataIOPSAve.setDescription(' IOPS Average Value.')
rTMonitorDataIOPSMin = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTMonitorDataIOPSMin.setStatus('mandatory')
if mibBuilder.loadTexts: rTMonitorDataIOPSMin.setDescription(' IOPS Min Value.')
rTMonitorDataMBSMax = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTMonitorDataMBSMax.setStatus('mandatory')
if mibBuilder.loadTexts: rTMonitorDataMBSMax.setDescription(' MBS Max Value.')
rTMonitorDataMBSAve = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTMonitorDataMBSAve.setStatus('mandatory')
if mibBuilder.loadTexts: rTMonitorDataMBSAve.setDescription(' MBS Average Value.')
rTMonitorDataMBSMin = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTMonitorDataMBSMin.setStatus('mandatory')
if mibBuilder.loadTexts: rTMonitorDataMBSMin.setDescription(' MBS Min Value.')
raidExMibPrioRTMonitorDataTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 3), )
if mibBuilder.loadTexts: raidExMibPrioRTMonitorDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibPrioRTMonitorDataTable.setDescription('All Port Monitoring parameter Data Information.')
raidExMibPrioRTMonitorDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 3, 1), ).setIndexNames((0, "HDS9900MIB", "prioRTMonitorDataSerialNumber"))
if mibBuilder.loadTexts: raidExMibPrioRTMonitorDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibPrioRTMonitorDataEntry.setDescription('Entry of All Port Monitoring parameter Data.')
prioRTMonitorDataSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prioRTMonitorDataSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: prioRTMonitorDataSerialNumber.setDescription('Serial Number of the DKC.')
prioRTMonitorDataGatheredDate = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prioRTMonitorDataGatheredDate.setStatus('mandatory')
if mibBuilder.loadTexts: prioRTMonitorDataGatheredDate.setDescription(' Monitoring Date.')
prioRTMonitorDataGatheredTime = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prioRTMonitorDataGatheredTime.setStatus('mandatory')
if mibBuilder.loadTexts: prioRTMonitorDataGatheredTime.setDescription(' Monitoring Time.')
prioRTMonitorDataIOPSMax = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prioRTMonitorDataIOPSMax.setStatus('mandatory')
if mibBuilder.loadTexts: prioRTMonitorDataIOPSMax.setDescription(' IOPS Max Total Value of All Prioritized Port .')
prioRTMonitorDataIOPSAve = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prioRTMonitorDataIOPSAve.setStatus('mandatory')
if mibBuilder.loadTexts: prioRTMonitorDataIOPSAve.setDescription(' IOPS Average Total Value of All Prioritized Port .')
prioRTMonitorDataIOPSMin = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prioRTMonitorDataIOPSMin.setStatus('mandatory')
if mibBuilder.loadTexts: prioRTMonitorDataIOPSMin.setDescription(' IOPS Min Total Value of All Prioritized Port .')
prioRTMonitorDataMBSMax = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prioRTMonitorDataMBSMax.setStatus('mandatory')
if mibBuilder.loadTexts: prioRTMonitorDataMBSMax.setDescription(' MBS Max Total Value of All Prioritized Port .')
prioRTMonitorDataMBSAve = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prioRTMonitorDataMBSAve.setStatus('mandatory')
if mibBuilder.loadTexts: prioRTMonitorDataMBSAve.setDescription(' MBS Average Total Value of All Prioritized Port .')
prioRTMonitorDataMBSMin = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prioRTMonitorDataMBSMin.setStatus('mandatory')
if mibBuilder.loadTexts: prioRTMonitorDataMBSMin.setDescription(' MBS Min Total Value of All Prioritized Port .')
raidExMibNPrioRTMonitorDataTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 4), )
if mibBuilder.loadTexts: raidExMibNPrioRTMonitorDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibNPrioRTMonitorDataTable.setDescription('All Non-Prioritized Port Monitoring parameter Data Information.')
raidExMibNPrioRTMonitorDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 4, 1), ).setIndexNames((0, "HDS9900MIB", "nPrioRTMonitorDataSerialNumber"))
if mibBuilder.loadTexts: raidExMibNPrioRTMonitorDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidExMibNPrioRTMonitorDataEntry.setDescription('Entry of All Non-Prioritized Port Monitoring parameter Data.')
nPrioRTMonitorDataSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nPrioRTMonitorDataSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nPrioRTMonitorDataSerialNumber.setDescription('Serial Number of the DKC.')
nPrioRTMonitorDataGatheredDate = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nPrioRTMonitorDataGatheredDate.setStatus('mandatory')
if mibBuilder.loadTexts: nPrioRTMonitorDataGatheredDate.setDescription(' Monitoring Date.')
nPrioRTMonitorDataGatheredTime = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nPrioRTMonitorDataGatheredTime.setStatus('mandatory')
if mibBuilder.loadTexts: nPrioRTMonitorDataGatheredTime.setDescription(' Monitoring Time.')
nPrioRTMonitorDataIOPSMax = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nPrioRTMonitorDataIOPSMax.setStatus('mandatory')
if mibBuilder.loadTexts: nPrioRTMonitorDataIOPSMax.setDescription(' IOPS Max Total Value of All Non-Prioritized Port .')
nPrioRTMonitorDataIOPSAve = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nPrioRTMonitorDataIOPSAve.setStatus('mandatory')
if mibBuilder.loadTexts: nPrioRTMonitorDataIOPSAve.setDescription(' IOPS Average Total Value of All Non-Prioritized Port .')
nPrioRTMonitorDataIOPSMin = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nPrioRTMonitorDataIOPSMin.setStatus('mandatory')
if mibBuilder.loadTexts: nPrioRTMonitorDataIOPSMin.setDescription(' IOPS Min Total Value of All Non-Prioritized Port .')
nPrioRTMonitorDataMBSMax = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nPrioRTMonitorDataMBSMax.setStatus('mandatory')
if mibBuilder.loadTexts: nPrioRTMonitorDataMBSMax.setDescription(' MBS Max Total Value of All Non-Prioritized Port .')
nPrioRTMonitorDataMBSAve = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nPrioRTMonitorDataMBSAve.setStatus('mandatory')
if mibBuilder.loadTexts: nPrioRTMonitorDataMBSAve.setDescription(' MBS Average Total Value of All Non-Prioritized Port .')
nPrioRTMonitorDataMBSMin = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 24, 4, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nPrioRTMonitorDataMBSMin.setStatus('mandatory')
if mibBuilder.loadTexts: nPrioRTMonitorDataMBSMin.setDescription(' MBS Min Total Value of All Non-Prioritized Port .')
raidExMibVersionManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50))
mibAllLeafVersionTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 1), )
if mibBuilder.loadTexts: mibAllLeafVersionTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibAllLeafVersionTable.setDescription('MIB Version information.')
mibAllLeafVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 1, 1), ).setIndexNames((0, "HDS9900MIB", "mibAllLeafVersionSerialNumber"))
if mibBuilder.loadTexts: mibAllLeafVersionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibAllLeafVersionEntry.setDescription('Entry of MIB Version.')
mibAllLeafVersionSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibAllLeafVersionSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mibAllLeafVersionSerialNumber.setDescription('Serial Number of the DKC.')
mibAllLeafVersionMIBVersionData = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibAllLeafVersionMIBVersionData.setStatus('mandatory')
if mibBuilder.loadTexts: mibAllLeafVersionMIBVersionData.setDescription('Version data.')
mibAllLeafVersionMIBVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibAllLeafVersionMIBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mibAllLeafVersionMIBVersion.setDescription('Version Number.')
mibLdevLeafVersionTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 10), )
if mibBuilder.loadTexts: mibLdevLeafVersionTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibLdevLeafVersionTable.setDescription('MIB Version information.')
mibLdevLeafVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 10, 1), ).setIndexNames((0, "HDS9900MIB", "mibLdevVersionSerialNumber"))
if mibBuilder.loadTexts: mibLdevLeafVersionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibLdevLeafVersionEntry.setDescription('Entry of MIB Version.')
mibLdevVersionSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibLdevVersionSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mibLdevVersionSerialNumber.setDescription('Serial Number of the DKC.')
mibLdevVersionMIBVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibLdevVersionMIBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mibLdevVersionMIBVersion.setDescription('Version Number.')
mibLdevVersionMIBOID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 10, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibLdevVersionMIBOID.setStatus('mandatory')
if mibBuilder.loadTexts: mibLdevVersionMIBOID.setDescription(' OID.')
mibLuLeafVersion = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 11))
mibPortleafVersionTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 11, 1), )
if mibBuilder.loadTexts: mibPortleafVersionTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibPortleafVersionTable.setDescription('LU Port MIB Version Information.')
mibPortleafVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 11, 1, 1), ).setIndexNames((0, "HDS9900MIB", "mibPortVersionSerialNumber"))
if mibBuilder.loadTexts: mibPortleafVersionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibPortleafVersionEntry.setDescription('Entry of LU Port MIB Version.')
mibPortVersionSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibPortVersionSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mibPortVersionSerialNumber.setDescription('Serial Number of the DKC.')
mibPortVersionMIBVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 11, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibPortVersionMIBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mibPortVersionMIBVersion.setDescription('Version Number.')
mibPortVersionMIBOID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 11, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibPortVersionMIBOID.setStatus('mandatory')
if mibBuilder.loadTexts: mibPortVersionMIBOID.setDescription('OID.')
mibPathLeafVersionTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 11, 2), )
if mibBuilder.loadTexts: mibPathLeafVersionTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibPathLeafVersionTable.setDescription('LU Path MIB Version information.')
mibPathLeafVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 11, 2, 1), ).setIndexNames((0, "HDS9900MIB", "mibPathVersionSerialNumber"))
if mibBuilder.loadTexts: mibPathLeafVersionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibPathLeafVersionEntry.setDescription('Entry of LU Path MIB Version.')
mibPathVersionSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibPathVersionSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mibPathVersionSerialNumber.setDescription('Serial Number of the DKC.')
mibPathVersionMIBVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 11, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibPathVersionMIBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mibPathVersionMIBVersion.setDescription('Version Number.')
mibPathVersionMIBOID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 11, 2, 1, 3), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mibPathVersionMIBOID.setStatus('mandatory')
if mibBuilder.loadTexts: mibPathVersionMIBOID.setDescription('OID.')
mibLuseLeafVersionTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 11, 3), )
if mibBuilder.loadTexts: mibLuseLeafVersionTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibLuseLeafVersionTable.setDescription('LUSE MIB Version information.')
mibLuseLeafVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 11, 3, 1), ).setIndexNames((0, "HDS9900MIB", "mibLuseVersionSerialNumber"))
if mibBuilder.loadTexts: mibLuseLeafVersionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibLuseLeafVersionEntry.setDescription('Entry of LUSE MIB Version.')
mibLuseVersionSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 11, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibLuseVersionSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mibLuseVersionSerialNumber.setDescription('Serial Number of the DKC.')
mibLuseVersionMIBVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 11, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibLuseVersionMIBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mibLuseVersionMIBVersion.setDescription('Version Number.')
mibLuseVersionMIBOID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 11, 3, 1, 3), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mibLuseVersionMIBOID.setStatus('mandatory')
if mibBuilder.loadTexts: mibLuseVersionMIBOID.setDescription('OID.')
mibLunsLeafVersionTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 11, 4), )
if mibBuilder.loadTexts: mibLunsLeafVersionTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibLunsLeafVersionTable.setDescription('LUN Security MIB Version information.')
mibLunsLeafVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 11, 4, 1), ).setIndexNames((0, "HDS9900MIB", "mibLunsVersionSerialNumber"))
if mibBuilder.loadTexts: mibLunsLeafVersionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibLunsLeafVersionEntry.setDescription('Entry of LUN Security MIB Version.')
mibLunsVersionSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 11, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibLunsVersionSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mibLunsVersionSerialNumber.setDescription('Serial Number of the DKC.')
mibLunsVersionMIBVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 11, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibLunsVersionMIBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mibLunsVersionMIBVersion.setDescription('Version Number.')
mibLunsVersionMIBOID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 11, 4, 1, 3), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mibLunsVersionMIBOID.setStatus('mandatory')
if mibBuilder.loadTexts: mibLunsVersionMIBOID.setDescription('OID.')
mibDcrLeafVersionTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 12), )
if mibBuilder.loadTexts: mibDcrLeafVersionTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibDcrLeafVersionTable.setDescription('DCR MIB Version information.')
mibDcrLeafVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 12, 1), ).setIndexNames((0, "HDS9900MIB", "mibDcrVersionSerialNumber"))
if mibBuilder.loadTexts: mibDcrLeafVersionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibDcrLeafVersionEntry.setDescription('Entry of DCR MIB Version.')
mibDcrVersionSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibDcrVersionSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mibDcrVersionSerialNumber.setDescription('Serial Number of the DKC.')
mibDcrVersionMIBVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibDcrVersionMIBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mibDcrVersionMIBVersion.setDescription('Version Number.')
mibDcrVersionMIBOID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 12, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibDcrVersionMIBOID.setStatus('mandatory')
if mibBuilder.loadTexts: mibDcrVersionMIBOID.setDescription(' OID.')
mibCvsLeafVersionTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 13), )
if mibBuilder.loadTexts: mibCvsLeafVersionTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibCvsLeafVersionTable.setDescription('CVS MIB Version information.')
mibCvsLeafVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 13, 1), ).setIndexNames((0, "HDS9900MIB", "mibCvsLeafVersionSerialNumber"))
if mibBuilder.loadTexts: mibCvsLeafVersionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibCvsLeafVersionEntry.setDescription('Entry of CVS MIB Version.')
mibCvsLeafVersionSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibCvsLeafVersionSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mibCvsLeafVersionSerialNumber.setDescription('Serial Number of the DKC.')
mibCvsLeafVersionMIBVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibCvsLeafVersionMIBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mibCvsLeafVersionMIBVersion.setDescription('Version Number.')
mibCvsLeafVersionMIBOID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 13, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibCvsLeafVersionMIBOID.setStatus('mandatory')
if mibBuilder.loadTexts: mibCvsLeafVersionMIBOID.setDescription(' OID.')
mibSsidLeafVersionTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 14), )
if mibBuilder.loadTexts: mibSsidLeafVersionTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibSsidLeafVersionTable.setDescription('SSID MIB Version information.')
mibSsidLeafVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 14, 1), ).setIndexNames((0, "HDS9900MIB", "mibSsidVersionSerialNumber"))
if mibBuilder.loadTexts: mibSsidLeafVersionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibSsidLeafVersionEntry.setDescription('Entry of SSID MIB Version.')
mibSsidVersionSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibSsidVersionSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mibSsidVersionSerialNumber.setDescription('Serial Number of the DKC.')
mibSsidVersionMIBVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibSsidVersionMIBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mibSsidVersionMIBVersion.setDescription('Version Number.')
mibSsidVersionMIBOID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 14, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibSsidVersionMIBOID.setStatus('mandatory')
if mibBuilder.loadTexts: mibSsidVersionMIBOID.setDescription(' OID.')
mibEnvLeafVersionTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 15), )
if mibBuilder.loadTexts: mibEnvLeafVersionTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibEnvLeafVersionTable.setDescription('Environment MIB Version information.')
mibEnvLeafVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 15, 1), ).setIndexNames((0, "HDS9900MIB", "mibEnvVersionSerialNumber"))
if mibBuilder.loadTexts: mibEnvLeafVersionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibEnvLeafVersionEntry.setDescription('Entry of Environment MIB Version.')
mibEnvVersionSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibEnvVersionSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mibEnvVersionSerialNumber.setDescription('Serial Number of the DKC.')
mibEnvVersionMIBVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibEnvVersionMIBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mibEnvVersionMIBVersion.setDescription('Version Number.')
mibEnvVersionMIBOID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 15, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibEnvVersionMIBOID.setStatus('mandatory')
if mibBuilder.loadTexts: mibEnvVersionMIBOID.setDescription(' OID.')
mibChaLeafVersionTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 16), )
if mibBuilder.loadTexts: mibChaLeafVersionTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibChaLeafVersionTable.setDescription('CHA MIB Version information.')
mibChaLeafVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 16, 1), ).setIndexNames((0, "HDS9900MIB", "mibChaVersionSerialNumber"))
if mibBuilder.loadTexts: mibChaLeafVersionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibChaLeafVersionEntry.setDescription('Entry of CHA MIB Version.')
mibChaVersionSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibChaVersionSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mibChaVersionSerialNumber.setDescription('Serial Number of the DKC.')
mibChaVersionMIBVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibChaVersionMIBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mibChaVersionMIBVersion.setDescription('Version Number.')
mibChaVersionMIBOID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 16, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibChaVersionMIBOID.setStatus('mandatory')
if mibBuilder.loadTexts: mibChaVersionMIBOID.setDescription(' OID.')
mibDkaLeafVersionTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 17), )
if mibBuilder.loadTexts: mibDkaLeafVersionTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibDkaLeafVersionTable.setDescription('DKA MIB Version information.')
mibDkaLeafVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 17, 1), ).setIndexNames((0, "HDS9900MIB", "mibDkaVersionSerialNumber"))
if mibBuilder.loadTexts: mibDkaLeafVersionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibDkaLeafVersionEntry.setDescription('Entry of DKA MIB Version.')
mibDkaVersionSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibDkaVersionSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mibDkaVersionSerialNumber.setDescription('Serial Number of the DKC.')
mibDkaVersionMIBVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibDkaVersionMIBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mibDkaVersionMIBVersion.setDescription('Version Number.')
mibDkaVersionMIBOID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 17, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibDkaVersionMIBOID.setStatus('mandatory')
if mibBuilder.loadTexts: mibDkaVersionMIBOID.setDescription(' OID.')
mibPgLeafVersionTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 18), )
if mibBuilder.loadTexts: mibPgLeafVersionTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibPgLeafVersionTable.setDescription('PG MIB Version information.')
mibPgLeafVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 18, 1), ).setIndexNames((0, "HDS9900MIB", "mibPgVersionSerialNumber"))
if mibBuilder.loadTexts: mibPgLeafVersionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibPgLeafVersionEntry.setDescription('Entry of PG MIB Version.')
mibPgVersionSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibPgVersionSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mibPgVersionSerialNumber.setDescription('Serial Number of the DKC.')
mibPgVersionMIBVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibPgVersionMIBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mibPgVersionMIBVersion.setDescription('Version Number.')
mibPgVersionMIBOID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 18, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibPgVersionMIBOID.setStatus('mandatory')
if mibBuilder.loadTexts: mibPgVersionMIBOID.setDescription(' OID.')
mibHihsmLeafVersionTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 20), )
if mibBuilder.loadTexts: mibHihsmLeafVersionTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibHihsmLeafVersionTable.setDescription('HIHSM MIB Version information.')
mibHihsmLeafVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 20, 1), ).setIndexNames((0, "HDS9900MIB", "mibHihsmVersionSerialNumber"))
if mibBuilder.loadTexts: mibHihsmLeafVersionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibHihsmLeafVersionEntry.setDescription('Entry of HIHSM MIB Version.')
mibHihsmVersionSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibHihsmVersionSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mibHihsmVersionSerialNumber.setDescription('Serial Number of the DKC.')
mibHihsmVersionMIBVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 20, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibHihsmVersionMIBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mibHihsmVersionMIBVersion.setDescription('Version Number.')
mibHihsmVersionMIBOID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 20, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibHihsmVersionMIBOID.setStatus('mandatory')
if mibBuilder.loadTexts: mibHihsmVersionMIBOID.setDescription(' OID.')
mibCswLeafVersionTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 21), )
if mibBuilder.loadTexts: mibCswLeafVersionTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibCswLeafVersionTable.setDescription('CSW MIB Version information.')
mibCswLeafVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 21, 1), ).setIndexNames((0, "HDS9900MIB", "mibCswVersionSerialNumber"))
if mibBuilder.loadTexts: mibCswLeafVersionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibCswLeafVersionEntry.setDescription('Entry of CSW MIB Version.')
mibCswVersionSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibCswVersionSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mibCswVersionSerialNumber.setDescription('Serial Number of the DKC.')
mibCswVersionMIBVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 21, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibCswVersionMIBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mibCswVersionMIBVersion.setDescription('Version Number.')
mibCswVersionMIBOID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 21, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibCswVersionMIBOID.setStatus('mandatory')
if mibBuilder.loadTexts: mibCswVersionMIBOID.setDescription(' OID.')
mibSmLeafVersionTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 22), )
if mibBuilder.loadTexts: mibSmLeafVersionTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibSmLeafVersionTable.setDescription('SM MIB Version information.')
mibSmLeafVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 22, 1), ).setIndexNames((0, "HDS9900MIB", "mibSmLeafVersionSerialNumber"))
if mibBuilder.loadTexts: mibSmLeafVersionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibSmLeafVersionEntry.setDescription('Entry of SM MIB Version.')
mibSmLeafVersionSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibSmLeafVersionSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mibSmLeafVersionSerialNumber.setDescription('Serial Number of the DKC.')
mibSmLeafVersionMIBVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 22, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibSmLeafVersionMIBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mibSmLeafVersionMIBVersion.setDescription('Version Number.')
mibSmLeafVersionMIBOID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 22, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibSmLeafVersionMIBOID.setStatus('mandatory')
if mibBuilder.loadTexts: mibSmLeafVersionMIBOID.setDescription(' OID.')
mibCmLeafVersionTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 23), )
if mibBuilder.loadTexts: mibCmLeafVersionTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibCmLeafVersionTable.setDescription('CM MIB Version information.')
mibCmLeafVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 23, 1), ).setIndexNames((0, "HDS9900MIB", "mibCmVersionSerialNumber"))
if mibBuilder.loadTexts: mibCmLeafVersionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibCmLeafVersionEntry.setDescription('Entry of CM MIB Version.')
mibCmVersionSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 23, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibCmVersionSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mibCmVersionSerialNumber.setDescription('Serial Number of the DKC.')
mibCmVersionMIBVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 23, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibCmVersionMIBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mibCmVersionMIBVersion.setDescription('Version Number.')
mibCmVersionMIBOID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 23, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibCmVersionMIBOID.setStatus('mandatory')
if mibBuilder.loadTexts: mibCmVersionMIBOID.setDescription(' OID.')
mibPortControlLeafVersionTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 24), )
if mibBuilder.loadTexts: mibPortControlLeafVersionTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibPortControlLeafVersionTable.setDescription('PortControl MIB Version information.')
mibPortControlLeafVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 24, 1), ).setIndexNames((0, "HDS9900MIB", "mibPortControlVersionSerialNumber"))
if mibBuilder.loadTexts: mibPortControlLeafVersionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibPortControlLeafVersionEntry.setDescription('Entry of PortControl MIB Version.')
mibPortControlVersionSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 24, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibPortControlVersionSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mibPortControlVersionSerialNumber.setDescription('Serial Number of the DKC.')
mibPortControlVersionMIBVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 24, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibPortControlVersionMIBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mibPortControlVersionMIBVersion.setDescription('Version Number.')
mibPortControlVersionMIBOID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 4, 1, 1, 50, 24, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibPortControlVersionMIBOID.setStatus('mandatory')
if mibBuilder.loadTexts: mibPortControlVersionMIBOID.setDescription(' OID.')
eventTrapSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 116, 3, 11, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventTrapSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: eventTrapSerialNumber.setDescription('Serial Number of RAID300 where an error occurred.')
eventTrapNickname = MibScalar((1, 3, 6, 1, 4, 1, 116, 3, 11, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventTrapNickname.setStatus('mandatory')
if mibBuilder.loadTexts: eventTrapNickname.setDescription('Nickname of RAID300 where an error occurred.')
eventTrapREFCODE = MibScalar((1, 3, 6, 1, 4, 1, 116, 3, 11, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventTrapREFCODE.setStatus('mandatory')
if mibBuilder.loadTexts: eventTrapREFCODE.setDescription('Error reference code (22nd,23rd,13rd byte in SIM).')
eventTrapPartsID = MibScalar((1, 3, 6, 1, 4, 1, 116, 3, 11, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventTrapPartsID.setStatus('mandatory')
if mibBuilder.loadTexts: eventTrapPartsID.setDescription(' Object identifier that does not include the component index where an error occurred. (Example) DKC processor error: 1.3.6.1.4.1.116.5.11.4.1.1.6.1.2. ')
raidEventCommandTable = MibTable((1, 3, 6, 1, 4, 1, 116, 3, 11, 4, 1, 1, 9), )
if mibBuilder.loadTexts: raidEventCommandTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidEventCommandTable.setDescription('Command Response from the DKC.')
raidEventCommandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 3, 11, 4, 1, 1, 9, 1), ).setIndexNames((0, "HDS9900MIB", "trapCommandSerialNumber"))
if mibBuilder.loadTexts: raidEventCommandEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidEventCommandEntry.setDescription('Entry of command.')
trapCommandSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 3, 11, 4, 1, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapCommandSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: trapCommandSerialNumber.setDescription('Serial Number of the DKC.')
trapCommandManagerName = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 3, 11, 4, 1, 1, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapCommandManagerName.setStatus('mandatory')
if mibBuilder.loadTexts: trapCommandManagerName.setDescription('Name of manager who has lock.')
trapCommandKind = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 3, 11, 4, 1, 1, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapCommandKind.setStatus('mandatory')
if mibBuilder.loadTexts: trapCommandKind.setDescription('Request Command. Value Mean 1 Request to refresh the configuration information. 2 Request to set the LUNM/LUSE configuration. 3 Request to set the LUN Security configuration. 4 Request to get the exclusive lock. 5 Request to free the exclusive lock. 6 Request to check the health. 7 Request to set the CVS configuration. 8 Request to set the DCR configuration. 9 Request to set the HIHSM configuration. ')
trapCommandStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 3, 11, 4, 1, 1, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapCommandStatus.setStatus('mandatory')
if mibBuilder.loadTexts: trapCommandStatus.setDescription('Status of Requested Command. Value Mean 1 Normal state. (The command ended normally.) 2 Command execution request. (now executing.) other Abnormal state (Error occurred). ')
raidEventUserAcute = NotificationType((1, 3, 6, 1, 4, 1, 116, 3, 11, 4, 1, 1) + (0,1)).setObjects(("HDS9900MIB", "eventTrapSerialNumber"), ("HDS9900MIB", "eventTrapNickname"), ("HDS9900MIB", "eventTrapREFCODE"), ("HDS9900MIB", "eventTrapPartsID"))
if mibBuilder.loadTexts: raidEventUserAcute.setDescription('The impact of this event on the subsystem is acute.')
raidEventUserSerious = NotificationType((1, 3, 6, 1, 4, 1, 116, 3, 11, 4, 1, 1) + (0,2)).setObjects(("HDS9900MIB", "eventTrapSerialNumber"), ("HDS9900MIB", "eventTrapNickname"), ("HDS9900MIB", "eventTrapREFCODE"), ("HDS9900MIB", "eventTrapPartsID"))
if mibBuilder.loadTexts: raidEventUserSerious.setDescription('The impact of this event on the subsystem is serious.')
raidEventUserModerate = NotificationType((1, 3, 6, 1, 4, 1, 116, 3, 11, 4, 1, 1) + (0,3)).setObjects(("HDS9900MIB", "eventTrapSerialNumber"), ("HDS9900MIB", "eventTrapNickname"), ("HDS9900MIB", "eventTrapREFCODE"), ("HDS9900MIB", "eventTrapPartsID"))
if mibBuilder.loadTexts: raidEventUserModerate.setDescription('The impact of this event on the subsystem is moderate.')
raidEventUserService = NotificationType((1, 3, 6, 1, 4, 1, 116, 3, 11, 4, 1, 1) + (0,4)).setObjects(("HDS9900MIB", "eventTrapSerialNumber"), ("HDS9900MIB", "eventTrapNickname"), ("HDS9900MIB", "eventTrapREFCODE"), ("HDS9900MIB", "eventTrapPartsID"))
if mibBuilder.loadTexts: raidEventUserService.setDescription('The impact of this event on the subsystem is low.')
raidEventCommandFinished = NotificationType((1, 3, 6, 1, 4, 1, 116, 3, 11, 4, 1, 1) + (0,100)).setObjects(("HDS9900MIB", "trapCommandSerialNumber"), ("HDS9900MIB", "trapCommandManagerName"), ("HDS9900MIB", "trapCommandKind"), ("HDS9900MIB", "trapCommandStatus"))
if mibBuilder.loadTexts: raidEventCommandFinished.setDescription('Required command was finished.')
mibBuilder.exportSymbols("HDS9900MIB", cvsFSFB4Number=cvsFSFB4Number, hihsmAutomaticMigrationHistoryListEntry=hihsmAutomaticMigrationHistoryListEntry, raidExMibCVSParityGroupEntry=raidExMibCVSParityGroupEntry, raidEventUserService=raidEventUserService, luSEStructControlIndex=luSEStructControlIndex, mibCswLeafVersionTable=mibCswLeafVersionTable, mibCmVersionSerialNumber=mibCmVersionSerialNumber, ssidBoundarySerialNumber=ssidBoundarySerialNumber, cvsPGSerialNumber=cvsPGSerialNumber, raidExMibDKUHWTable=raidExMibDKUHWTable, cvsFSSerialNumber=cvsFSSerialNumber, raidExMibLogicalDeviceEntry=raidExMibLogicalDeviceEntry, wwnPortID=wwnPortID, cvsCUInfSerialNumber=cvsCUInfSerialNumber, mibPortControlVersionMIBOID=mibPortControlVersionMIBOID, hihsmMonParamGatheredToDate=hihsmMonParamGatheredToDate, hihsmAutomaticMigrationParameterEntry=hihsmAutomaticMigrationParameterEntry, raidExMibDiskAdapter=raidExMibDiskAdapter, hitachi=hitachi, cacheDCRControlIndex=cacheDCRControlIndex, hihsmManVolMigSrcLDEV=hihsmManVolMigSrcLDEV, raid=raid, dkpClusterNumber=dkpClusterNumber, customizedVolumeControlStatus=customizedVolumeControlStatus, hihsmDRRUtilData=hihsmDRRUtilData, hihsmPlanLDEVDstFB4Number=hihsmPlanLDEVDstFB4Number, switchPortID=switchPortID, raidExMibSMConfigurationTable=raidExMibSMConfigurationTable, mibHihsmVersionSerialNumber=mibHihsmVersionSerialNumber, hihsmVolumeMigrationHistory=hihsmVolumeMigrationHistory, pgLDEVFB4Number=pgLDEVFB4Number, logicalDeviceLUPath=logicalDeviceLUPath, hihsmLDEVUtilLDEV=hihsmLDEVUtilLDEV, mibLunsLeafVersionTable=mibLunsLeafVersionTable, raidEventCommandFinished=raidEventCommandFinished, lunGroupWWNSecurityVL=lunGroupWWNSecurityVL, raidExMibDKPConfigurationEntry=raidExMibDKPConfigurationEntry, commandProgress=commandProgress, logicalDeviceHIHSMReserve=logicalDeviceHIHSMReserve, drrNumber=drrNumber, hihsmAutoParamJudgeMethod=hihsmAutoParamJudgeMethod, hihsmCSWCacheCacheClusterNumber=hihsmCSWCacheCacheClusterNumber, mibLdevLeafVersionEntry=mibLdevLeafVersionEntry, dkcHWFan=dkcHWFan, dkuHWPS=dkuHWPS, raidExMibCVSCUInfEntry=raidExMibCVSCUInfEntry, hihsmCHACSWCSWClusterNumber=hihsmCHACSWCSWClusterNumber, cvsDVPGNumber=cvsDVPGNumber, mibSmLeafVersionSerialNumber=mibSmLeafVersionSerialNumber, hihsmLDEVUtilData=hihsmLDEVUtilData, hihsmDKPUtilClusterNumber=hihsmDKPUtilClusterNumber, rTMonitorDataIOPSAve=rTMonitorDataIOPSAve, lunGroupControlStatus=lunGroupControlStatus, portSerialNumber=portSerialNumber, raidExMibParityGroupListEntry=raidExMibParityGroupListEntry, cacheDCRMode=cacheDCRMode, cacheDCRLBASize=cacheDCRLBASize, cacheDCRCU=cacheDCRCU, hihsmManVolMigControlStatus=hihsmManVolMigControlStatus, raidExMibCHAConfigurationTable=raidExMibCHAConfigurationTable, luSerialNumber=luSerialNumber, raidExMibDKCHWTable=raidExMibDKCHWTable, raidExMibSSIDBoundaryTable=raidExMibSSIDBoundaryTable, hihsmMonParamControlStatus=hihsmMonParamControlStatus, hihsmPlanLDEVDstPGNumber=hihsmPlanLDEVDstPGNumber, raidExMibSubsystemIDTable=raidExMibSubsystemIDTable, hihsmDKCUtilWritePending=hihsmDKCUtilWritePending, hihsmDKACSWDKANumber=hihsmDKACSWDKANumber, cvsPGDriveType=cvsPGDriveType, raidExMibAgentVersion=raidExMibAgentVersion, raidExMibLogicalDeviceTable=raidExMibLogicalDeviceTable, hihsmMonParamFunctionSwitch=hihsmMonParamFunctionSwitch, mibLdevLeafVersionTable=mibLdevLeafVersionTable, hihsmDKAtoSMUtilizationEntry=hihsmDKAtoSMUtilizationEntry, lunLUN=lunLUN, raidExMibCHPConfigurationEntry=raidExMibCHPConfigurationEntry, hihsmAutoParamMaxUtilization=hihsmAutoParamMaxUtilization, raidExMibCommandTable=raidExMibCommandTable, mibCswLeafVersionEntry=mibCswLeafVersionEntry, trapCommandSerialNumber=trapCommandSerialNumber, luPathPortID=luPathPortID, portID=portID, hihsmDKPUtilData=hihsmDKPUtilData, prioRTMonitorDataMBSMax=prioRTMonitorDataMBSMax, lunGroupNickname=lunGroupNickname, wwnWWN=wwnWWN, dkcRaidListIndexSerialNumber=dkcRaidListIndexSerialNumber, raidExMibCVSParityGroupTable=raidExMibCVSParityGroupTable, raidExMibVersionManagement=raidExMibVersionManagement, customizedVolumeLDEV=customizedVolumeLDEV, hihsmDKASMDKANumber=hihsmDKASMDKANumber, hihsmExpPGUtilData=hihsmExpPGUtilData, raidExMibDRRConfigurationEntry=raidExMibDRRConfigurationEntry, hihsmAutoHstCtrlControlStatus=hihsmAutoHstCtrlControlStatus, raidExMibVersion=raidExMibVersion, hihsmAutoParamMaxDuration=hihsmAutoParamMaxDuration, raidExMibRaidListTable=raidExMibRaidListTable, raidExMibLUInformationLUTable=raidExMibLUInformationLUTable, hihsmPlanStatusMigrationTime=hihsmPlanStatusMigrationTime, rTMonitorDataIOPSMax=rTMonitorDataIOPSMax, hihsmManVolMigDstCU=hihsmManVolMigDstCU, wwnGroupID=wwnGroupID, hihsmPlanLDEVDstLDEV=hihsmPlanLDEVDstLDEV, portControlSwitchOnOff=portControlSwitchOnOff, cvsDVLDEV=cvsDVLDEV, dkuRaidListIndexSerialNumber=dkuRaidListIndexSerialNumber, mibPgLeafVersionTable=mibPgLeafVersionTable, prioAllPortPrmStatus=prioAllPortPrmStatus, mibLuseVersionMIBVersion=mibLuseVersionMIBVersion, trapCommandKind=trapCommandKind, raidExMibCVSFreeSpaceEntry=raidExMibCVSFreeSpaceEntry, hihsmCalculationParameterTable=hihsmCalculationParameterTable, cvsFSCylinder=cvsFSCylinder, raidExMibLUPathEntry=raidExMibLUPathEntry, hihsmPlanStatusCheckTime=hihsmPlanStatusCheckTime, hihsmPlanLDEVSrcFB4Number=hihsmPlanLDEVSrcFB4Number, mibDcrVersionSerialNumber=mibDcrVersionSerialNumber, mibHihsmVersionMIBOID=mibHihsmVersionMIBOID, customizedVolumeType=customizedVolumeType, raidRoot=raidRoot, chpDisplayName=chpDisplayName, rTMonitorDataMBSAve=rTMonitorDataMBSAve, rTMonitorDataMBSMax=rTMonitorDataMBSMax, dkcHWEnvironment=dkcHWEnvironment, mibEnvVersionMIBOID=mibEnvVersionMIBOID, raidExMibPrioRTMonitorDataEntry=raidExMibPrioRTMonitorDataEntry, mibSmLeafVersionMIBOID=mibSmLeafVersionMIBOID, raidlistSerialNumber=raidlistSerialNumber, lunGroupWWNGroupSecurityVL=lunGroupWWNGroupSecurityVL, dkpDKANumber=dkpDKANumber, mibChaLeafVersionEntry=mibChaLeafVersionEntry, dkaNumber=dkaNumber, raidEventCommandTable=raidEventCommandTable, eventListIndexRecordNo=eventListIndexRecordNo, nPrioRTMonitorDataIOPSMin=nPrioRTMonitorDataIOPSMin, mibPortleafVersionEntry=mibPortleafVersionEntry, luEmuID=luEmuID, mibPortControlLeafVersionTable=mibPortControlLeafVersionTable, hihsmAutomaticMigrationPlanStatusTable=hihsmAutomaticMigrationPlanStatusTable, hihsmCalcParamToTime=hihsmCalcParamToTime, wwnGroupedWWNsVL=wwnGroupedWWNsVL, customizedVolumeFB4Number=customizedVolumeFB4Number, hihsmAutomaticMigrationPlan=hihsmAutomaticMigrationPlan, hihsmCHPUtilCHANumber=hihsmCHPUtilCHANumber, pgSerialNumber=pgSerialNumber, mibPortControlLeafVersionEntry=mibPortControlLeafVersionEntry, hihsmAutoHstCtrlSerialNumber=hihsmAutoHstCtrlSerialNumber, luDeviceCU=luDeviceCU, pgLDEVLDEV=pgLDEVLDEV, mibLuseLeafVersionEntry=mibLuseLeafVersionEntry, mibPgLeafVersionEntry=mibPgLeafVersionEntry, mibPortControlVersionSerialNumber=mibPortControlVersionSerialNumber, hihsmAutomaticMigrationPlanStatusEntry=hihsmAutomaticMigrationPlanStatusEntry, portDisplayName=portDisplayName, rTMonitorDataSetting=rTMonitorDataSetting, prioRTMonitorDataIOPSMin=prioRTMonitorDataIOPSMin, raidExMibCVSFreeSpaceTable=raidExMibCVSFreeSpaceTable, hihsmMonParamGatheredToTime=hihsmMonParamGatheredToTime, cvsFSSize=cvsFSSize, raidExMibPortParameterTable=raidExMibPortParameterTable, subsystemIDCU=subsystemIDCU, mibLuseLeafVersionTable=mibLuseLeafVersionTable, hihsmAutoParamUseToTime=hihsmAutoParamUseToTime, portControlSetUpSetting=portControlSetUpSetting, raidExMibLUNSWWNEntry=raidExMibLUNSWWNEntry, raidExMibLUNSSwitchTable=raidExMibLUNSSwitchTable, prioRTMonitorDataGatheredTime=prioRTMonitorDataGatheredTime, hihsmPlanLDEVDstCU=hihsmPlanLDEVDstCU, raidEventUserModerate=raidEventUserModerate, drrDisplayName=drrDisplayName, mibLuseVersionMIBOID=mibLuseVersionMIBOID, wwnGroupControlIndex=wwnGroupControlIndex, hihsmPGUtilPGNumber=hihsmPGUtilPGNumber, raidExMibRTMonitorDataEntry=raidExMibRTMonitorDataEntry, mibCswVersionMIBVersion=mibCswVersionMIBVersion, mibChaVersionSerialNumber=mibChaVersionSerialNumber, rTMonitorDataGatheredDate=rTMonitorDataGatheredDate, hihsmAutoParamIntervalDay=hihsmAutoParamIntervalDay, prioAllPortPrmPrioMBS=prioAllPortPrmPrioMBS, raidExMibCVSConfiguration=raidExMibCVSConfiguration, hihsmDRRUtilDKANumber=hihsmDRRUtilDKANumber, raidExMibPrioAllPortParameterTable=raidExMibPrioAllPortParameterTable, mibAllLeafVersionEntry=mibAllLeafVersionEntry, hihsmAutoParamControlStatus=hihsmAutoParamControlStatus, hihsmClassListControlStatus=hihsmClassListControlStatus, raidExMibDkcCount=raidExMibDkcCount, raidExMibCSWConfigurationEntry=raidExMibCSWConfigurationEntry, customizedVolumeEmulation=customizedVolumeEmulation, hihsmLDEVUtilPGNumber=hihsmLDEVUtilPGNumber, mibCmLeafVersionEntry=mibCmLeafVersionEntry, subsystemIDSSID=subsystemIDSSID, portControlStatus=portControlStatus, lunGroupPortID=lunGroupPortID, raidExMibDKAConfigurationTable=raidExMibDKAConfigurationTable, hihsmVolumeMigrationHistoryListTable=hihsmVolumeMigrationHistoryListTable, luPathLUN=luPathLUN, cacheDCREndLBA=cacheDCREndLBA, eventListREFCODE=eventListREFCODE, portFibreAddress=portFibreAddress, hihsmDKAtoCSWUtilizationEntry=hihsmDKAtoCSWUtilizationEntry, hihsmClassPGControlIndex=hihsmClassPGControlIndex, hihsmDRRUtilizationTable=hihsmDRRUtilizationTable, hihsmAutomaticMigrationClassPGTable=hihsmAutomaticMigrationClassPGTable, raidExMibPortControlParameter=raidExMibPortControlParameter, cvsDVControlIndex=cvsDVControlIndex, raidExMibCHAConfigurationEntry=raidExMibCHAConfigurationEntry, dkpDisplayName=dkpDisplayName, mibCmVersionMIBVersion=mibCmVersionMIBVersion, hihsmVolHstListSrcPGNumber=hihsmVolHstListSrcPGNumber, pgLDEVSerialNumber=pgLDEVSerialNumber, mibSsidLeafVersionTable=mibSsidLeafVersionTable, hihsmDKPUtilSerialNumber=hihsmDKPUtilSerialNumber, hihsmCHASMCHAClusterNumber=hihsmCHASMCHAClusterNumber, hihsmDKPUtilDKPNumber=hihsmDKPUtilDKPNumber, lunWWNSecurityVL=lunWWNSecurityVL, hihsmDRRUtilizationEntry=hihsmDRRUtilizationEntry, cvsDVControlCylinder=cvsDVControlCylinder, cvsFSPGNumber=cvsFSPGNumber, raidExMibCSW=raidExMibCSW, eventTrapNickname=eventTrapNickname, raidExMibPortParameterEntry=raidExMibPortParameterEntry, raidlistDKCProductName=raidlistDKCProductName, prioRTMonitorDataMBSMin=prioRTMonitorDataMBSMin, cvsDVSerialNumber=cvsDVSerialNumber, hihsmPlanLDEVSrcCU=hihsmPlanLDEVSrcCU, cacheConfSerialNumber=cacheConfSerialNumber, hihsmManVolMigSrcCU=hihsmManVolMigSrcCU, cswNumber=cswNumber, prioAllPortPrmThreshold=prioAllPortPrmThreshold, raidExMibCSWConfigurationTable=raidExMibCSWConfigurationTable, cacheDCRCylinderSize=cacheDCRCylinderSize, cvsDVEmulation=cvsDVEmulation, dkcHWSM=dkcHWSM, hihsmDKACSWDKAClusterNumber=hihsmDKACSWDKAClusterNumber, hihsmAutomaticMigrationHistory=hihsmAutomaticMigrationHistory, hihsmVolHstListControlIndex=hihsmVolHstListControlIndex, allPortPrmStatus=allPortPrmStatus, subsystemIDControlStatus=subsystemIDControlStatus, dkpSerialNumber=dkpSerialNumber, wwnID=wwnID, luPathDeviceLDEV=luPathDeviceLDEV, hihsmDKPUtilizationTable=hihsmDKPUtilizationTable, hihsmAutoParamDayOfMonth=hihsmAutoParamDayOfMonth, raidlistDKCMainVersion=raidlistDKCMainVersion, luSize=luSize, customizedVolumeUserSize=customizedVolumeUserSize, chaSerialNumber=chaSerialNumber, luDeviceLDEV=luDeviceLDEV, wwnControlStatus=wwnControlStatus, hihsmCHASMSMClusterNumber=hihsmCHASMSMClusterNumber, luSEStructSerialNumber=luSEStructSerialNumber, hihsmVolHstListDate=hihsmVolHstListDate, hihsmMonParamGatheredFromTime=hihsmMonParamGatheredFromTime, hihsmVolHstCtrlControlStatus=hihsmVolHstCtrlControlStatus)
mibBuilder.exportSymbols("HDS9900MIB", hihsmVolumeMigrationHistoryListEntry=hihsmVolumeMigrationHistoryListEntry, mibPathLeafVersionEntry=mibPathLeafVersionEntry, mibHihsmVersionMIBVersion=mibHihsmVersionMIBVersion, logicalDeviceSerialNumber=logicalDeviceSerialNumber, hihsmVolHstListDstLDEV=hihsmVolHstListDstLDEV, hihsmPlanLDEVSrcLDEV=hihsmPlanLDEVSrcLDEV, systemExMib=systemExMib, pgDisplayName=pgDisplayName, luPathSCSIID=luPathSCSIID, portKind=portKind, raidExMibAllPortParameterEntry=raidExMibAllPortParameterEntry, lunSerialNumber=lunSerialNumber, hihsmAutomaticMigrationPlanLDEVTable=hihsmAutomaticMigrationPlanLDEVTable, wwnControlIndex=wwnControlIndex, raidExMibLUPathTable=raidExMibLUPathTable, hihsmVolHstListDstFB4Number=hihsmVolHstListDstFB4Number, cvsDVControlStatus=cvsDVControlStatus, hihsmExpectationPGUtilizationTable=hihsmExpectationPGUtilizationTable, raidEventCommandEntry=raidEventCommandEntry, hihsmCalcParamSerialNumber=hihsmCalcParamSerialNumber, commandRefreshTarget2=commandRefreshTarget2, hihsmAutomaticMigrationClassListTable=hihsmAutomaticMigrationClassListTable, hihsmCHPUtilCHPNumber=hihsmCHPUtilCHPNumber, nPrioRTMonitorDataMBSMax=nPrioRTMonitorDataMBSMax, mibCvsLeafVersionEntry=mibCvsLeafVersionEntry, raidExMibPortControlConfiguration=raidExMibPortControlConfiguration, cacheDCRStartHead=cacheDCRStartHead, mibLuLeafVersion=mibLuLeafVersion, hihsmAutoHstListSerialNumber=hihsmAutoHstListSerialNumber, raidExMibLUNSLUNGroupEntry=raidExMibLUNSLUNGroupEntry, mibEnvLeafVersionEntry=mibEnvLeafVersionEntry, drrClusterNumber=drrClusterNumber, hihsmAutomaticMigration=hihsmAutomaticMigration, raidExMibTimeZoneDataEntry=raidExMibTimeZoneDataEntry, mibHihsmLeafVersionEntry=mibHihsmLeafVersionEntry, mibCmLeafVersionTable=mibCmLeafVersionTable, rTMonitorDataPortID=rTMonitorDataPortID, hihsmAutomaticMigrationPlanLDEVEntry=hihsmAutomaticMigrationPlanLDEVEntry, hihsmAutoHstListControlIndex=hihsmAutoHstListControlIndex, chaControlStatus=chaControlStatus, mibPathVersionSerialNumber=mibPathVersionSerialNumber, raidExMib=raidExMib, switchOnOff=switchOnOff, timeZoneID=timeZoneID, dkuHWEnvironment=dkuHWEnvironment, raidExMibRTMonitoringCntlEntry=raidExMibRTMonitoringCntlEntry, hihsmVolumeMigrationHistoryCtrlEntry=hihsmVolumeMigrationHistoryCtrlEntry, cacheDCRStartCylinder=cacheDCRStartCylinder, hihsmVolHstListDstCU=hihsmVolHstListDstCU, hihsmDKAtoCSWUtilizationTable=hihsmDKAtoCSWUtilizationTable, raidExMibCacheSizeTable=raidExMibCacheSizeTable, raidlistMibNickName=raidlistMibNickName, hihsmCalculatedData=hihsmCalculatedData, mibSsidVersionMIBVersion=mibSsidVersionMIBVersion, hihsmDKASMUtilData=hihsmDKASMUtilData, wwnGroupNickname=wwnGroupNickname, raidExMibLDev=raidExMibLDev, hihsmCHACSWCSWNumber=hihsmCHACSWCSWNumber, hihsmDKASMDKAClusterNumber=hihsmDKASMDKAClusterNumber, hihsmDKCUtilizationEntry=hihsmDKCUtilizationEntry, hihsmCSWCacheCacheNumber=hihsmCSWCacheCacheNumber, rTMonitoringCntlSerialNumber=rTMonitoringCntlSerialNumber, raidExMibLUSEStructureEntry=raidExMibLUSEStructureEntry, system=system, hihsmClassPGClassNumber=hihsmClassPGClassNumber, raidEventUserSerious=raidEventUserSerious, hihsmMonParamSerialNumber=hihsmMonParamSerialNumber, hihsmCalcParamToDate=hihsmCalcParamToDate, raidExMibDRRConfigurationTable=raidExMibDRRConfigurationTable, lunGroupSerialNumber=lunGroupSerialNumber, raidExMibLUNSLUNGroupTable=raidExMibLUNSLUNGroupTable, raidExMibCacheConfigurationEntry=raidExMibCacheConfigurationEntry, portNPrmnPrioIOPS=portNPrmnPrioIOPS, hihsmExpPGUtilSrcCU=hihsmExpPGUtilSrcCU, hihsmPGUtilizationEntry=hihsmPGUtilizationEntry, cvsCUInfFreeCUNum=cvsCUInfFreeCUNum, hihsmAutoParamDayOfWeek=hihsmAutoParamDayOfWeek, logicalDeviceSize=logicalDeviceSize, hihsmLDEVUtilFB4Number=hihsmLDEVUtilFB4Number, hihsmCSWtoCacheUtilizationEntry=hihsmCSWtoCacheUtilizationEntry, luPathControlStatus=luPathControlStatus, portPrmPrioMBS=portPrmPrioMBS, cacheDCREndCylinder=cacheDCREndCylinder, hihsmAutoParamHightestPoints=hihsmAutoParamHightestPoints, hihsmMonitoringParameterTable=hihsmMonitoringParameterTable, hihsmPlanLDEVSerialNumber=hihsmPlanLDEVSerialNumber, hihsmAutomaticMigrationClassPGEntry=hihsmAutomaticMigrationClassPGEntry, raidExMibLU=raidExMibLU, mibLunsVersionSerialNumber=mibLunsVersionSerialNumber, logicalDeviceRAIDLevel=logicalDeviceRAIDLevel, hihsmCSWCacheCSWNumber=hihsmCSWCacheCSWNumber, hihsmCHASMCHANumber=hihsmCHASMCHANumber, prioAllPortPrmSerialNumber=prioAllPortPrmSerialNumber, portFibreTopology=portFibreTopology, dkpNumber=dkpNumber, cacheSizeTotalCacheSize=cacheSizeTotalCacheSize, mibCvsLeafVersionMIBOID=mibCvsLeafVersionMIBOID, switchSerialNumber=switchSerialNumber, rTMonitorDataControlIndex=rTMonitorDataControlIndex, customizedVolumeSerialNumber=customizedVolumeSerialNumber, raidExMibCVSDeletedVolumeEntry=raidExMibCVSDeletedVolumeEntry, prioAllPortPrmPrioIOPS=prioAllPortPrmPrioIOPS, mibEnvLeafVersionTable=mibEnvLeafVersionTable, hihsmAutomaticMigrationHistoryCtrlEntry=hihsmAutomaticMigrationHistoryCtrlEntry, hihsmPlanStatusControlStatus=hihsmPlanStatusControlStatus, luPathDeviceCU=luPathDeviceCU, hihsmVolHstListSrcFB4Number=hihsmVolHstListSrcFB4Number, switchControlStatus=switchControlStatus, hihsmAutoParamUseFromTime=hihsmAutoParamUseFromTime, luSEStructDeviceLDEV=luSEStructDeviceLDEV, mibHihsmLeafVersionTable=mibHihsmLeafVersionTable, mibChaVersionMIBOID=mibChaVersionMIBOID, raidExMibDKCHWEntry=raidExMibDKCHWEntry, cvsPGFB4Number=cvsPGFB4Number, hihsmDRRUtilSerialNumber=hihsmDRRUtilSerialNumber, hihsmAutomaticMigrationHistoryListTable=hihsmAutomaticMigrationHistoryListTable, raidExMibAllPortParameterTable=raidExMibAllPortParameterTable, mibCswVersionSerialNumber=mibCswVersionSerialNumber, cvsFSControlIndex=cvsFSControlIndex, mibDcrVersionMIBOID=mibDcrVersionMIBOID, mibPortVersionSerialNumber=mibPortVersionSerialNumber, hihsmCHAtoSMUtilizationTable=hihsmCHAtoSMUtilizationTable, storage=storage, hihsmClassListMaxUtilization=hihsmClassListMaxUtilization, luSEStructDeviceCU=luSEStructDeviceCU, pgNumber=pgNumber, wwnGroupSerialNumber=wwnGroupSerialNumber, logicalDeviceControlStatus=logicalDeviceControlStatus, hihsmExpPGUtilSerialNumber=hihsmExpPGUtilSerialNumber, raidExMibCHPConfigurationTable=raidExMibCHPConfigurationTable, raidExMibPrioRTMonitorDataTable=raidExMibPrioRTMonitorDataTable, hihsmCSWCacheSerialNumber=hihsmCSWCacheSerialNumber, hihsmDKACSWCSWClusterNumber=hihsmDKACSWCSWClusterNumber, raidExMibPortEntry=raidExMibPortEntry, raidExMibPortControlSwitchEntry=raidExMibPortControlSwitchEntry, drrDKANumber=drrDKANumber, hihsmAutoParamSerialNumber=hihsmAutoParamSerialNumber, portControlSwitchStatus=portControlSwitchStatus, raidExMibParityGroup=raidExMibParityGroup, mibChaVersionMIBVersion=mibChaVersionMIBVersion, raidExMibLUNSWWNTable=raidExMibLUNSWWNTable, portControlSetUpSerialNumber=portControlSetUpSerialNumber, raidExMibDCRConfiguration=raidExMibDCRConfiguration, pgHIHSMFixed=pgHIHSMFixed, portPrmStatus=portPrmStatus, mibEnvVersionSerialNumber=mibEnvVersionSerialNumber, hihsmCHPUtilizationTable=hihsmCHPUtilizationTable, hihsmCHACSWSerialNumber=hihsmCHACSWSerialNumber, raidExMibParityGroupLDEVEntry=raidExMibParityGroupLDEVEntry, portControlSetUpDisplayName=portControlSetUpDisplayName, cacheDCRAllOfDevice=cacheDCRAllOfDevice, raidExMibTrapListTable=raidExMibTrapListTable, hihsmExpPGUtilDstFB4=hihsmExpPGUtilDstFB4, raidExMibNPrioRTMonitorDataTable=raidExMibNPrioRTMonitorDataTable, raidExMibPrioAllPortParameterEntry=raidExMibPrioAllPortParameterEntry, chaClusterNumber=chaClusterNumber, hihsmCHASMSerialNumber=hihsmCHASMSerialNumber, raidExMibRTMonitoringCntlTable=raidExMibRTMonitoringCntlTable, raidExMibLUNSWWNGroupTable=raidExMibLUNSWWNGroupTable, hihsmDRRUtilClusterNumber=hihsmDRRUtilClusterNumber, mibCvsLeafVersionTable=mibCvsLeafVersionTable, luSEStructTopDeviceCU=luSEStructTopDeviceCU, mibDcrLeafVersionTable=mibDcrLeafVersionTable, raidExMibLUNSLUNTable=raidExMibLUNSLUNTable, mibChaLeafVersionTable=mibChaLeafVersionTable, prioRTMonitorDataGatheredDate=prioRTMonitorDataGatheredDate, rTMonitorDataMBSMin=rTMonitorDataMBSMin, hihsmExpPGUtilControlStatus=hihsmExpPGUtilControlStatus, chaMode=chaMode, raidExMibTimeZoneDataTable=raidExMibTimeZoneDataTable, raidExMibCacheDCREntry=raidExMibCacheDCREntry, cvsDVCU=cvsDVCU, cvsDVFB4Number=cvsDVFB4Number, hihsmPlanStatusData=hihsmPlanStatusData, portPrmPrioIOPS=portPrmPrioIOPS, luSEStructControlStatus=luSEStructControlStatus, subsystemIDStartLDEV=subsystemIDStartLDEV, customizedVolumeUserCylinder=customizedVolumeUserCylinder, raidExMibDKAConfigurationEntry=raidExMibDKAConfigurationEntry, portPrmSerialNumber=portPrmSerialNumber, raidExMibName=raidExMibName, logicalDeviceCU=logicalDeviceCU, nPrioRTMonitorDataGatheredTime=nPrioRTMonitorDataGatheredTime, dkcHWCSW=dkcHWCSW, pgFB4Number=pgFB4Number, raidExMibTrapListEntry=raidExMibTrapListEntry, portWWN=portWWN, hihsmCalculationParameterEntry=hihsmCalculationParameterEntry, hihsmDKASMSerialNumber=hihsmDKASMSerialNumber, hihsmClassPGFB4Number=hihsmClassPGFB4Number, mibDcrVersionMIBVersion=mibDcrVersionMIBVersion, portPrmPortID=portPrmPortID, dkcHWProcessor=dkcHWProcessor, mibPathVersionMIBOID=mibPathVersionMIBOID, chpNumber=chpNumber, raidExMibDKPConfigurationTable=raidExMibDKPConfigurationTable, hihsmCalcParamControlStatus=hihsmCalcParamControlStatus, hihsmClassListSerialNumber=hihsmClassListSerialNumber, hihsmClassPGSerialNumber=hihsmClassPGSerialNumber, nPrioRTMonitorDataIOPSAve=nPrioRTMonitorDataIOPSAve, prioRTMonitorDataSerialNumber=prioRTMonitorDataSerialNumber, prioRTMonitorDataMBSAve=prioRTMonitorDataMBSAve, luCount=luCount, raidExMibLUNSLUNEntry=raidExMibLUNSLUNEntry, hihsmClassPGPGNumber=hihsmClassPGPGNumber, nPrioRTMonitorDataMBSAve=nPrioRTMonitorDataMBSAve, raidExMibCacheDCRTable=raidExMibCacheDCRTable, hihsmDKACSWSerialNumber=hihsmDKACSWSerialNumber, mibCmVersionMIBOID=mibCmVersionMIBOID, hihsmLDEVUtilCU=hihsmLDEVUtilCU, hihsmCHACSWCHAClusterNumber=hihsmCHACSWCHAClusterNumber, hihsmCSWCacheCSWClusterNumber=hihsmCSWCacheCSWClusterNumber, cacheSizeSerialNumber=cacheSizeSerialNumber, wwnGroupPortID=wwnGroupPortID, chpClusterNumber=chpClusterNumber, logicalDeviceSlotSize=logicalDeviceSlotSize, wwnUseNickname=wwnUseNickname, cvsPGDisplayName=cvsPGDisplayName, raidExMibLUInformationLUEntry=raidExMibLUInformationLUEntry, logicalDeviceLBA=logicalDeviceLBA, mibSmLeafVersionTable=mibSmLeafVersionTable, pgLDEVControlIndex=pgLDEVControlIndex, logicalDeviceEmulation=logicalDeviceEmulation, raidExMibRoot=raidExMibRoot, dkaDisplayName=dkaDisplayName, chaPackageType=chaPackageType, raidEventUserAcute=raidEventUserAcute, hihsmPGUtilizationTable=hihsmPGUtilizationTable, mibPortVersionMIBVersion=mibPortVersionMIBVersion, eventTrapSerialNumber=eventTrapSerialNumber, hihsmCHPUtilizationEntry=hihsmCHPUtilizationEntry, hihsmCSWtoCacheUtilizationTable=hihsmCSWtoCacheUtilizationTable, prioRTMonitorDataIOPSMax=prioRTMonitorDataIOPSMax, nPrioRTMonitorDataSerialNumber=nPrioRTMonitorDataSerialNumber, hihsmMonParamGatheredFromDate=hihsmMonParamGatheredFromDate, hihsmPGUtilSerialNumber=hihsmPGUtilSerialNumber, mibPgVersionSerialNumber=mibPgVersionSerialNumber, commandManagerName=commandManagerName, dkcHWCache=dkcHWCache, raidExMibPortControlSetUpEntry=raidExMibPortControlSetUpEntry, hihsmPlanStatusCheckDate=hihsmPlanStatusCheckDate, mibSsidVersionMIBOID=mibSsidVersionMIBOID, luPath=luPath, hihsmExpPGUtilSrcLDEV=hihsmExpPGUtilSrcLDEV, commandKind=commandKind, hihsmCHAtoCSWUtilizationEntry=hihsmCHAtoCSWUtilizationEntry, portPrmControlIndex=portPrmControlIndex, raidExMibLUSE=raidExMibLUSE, raidExMibHIHSM=raidExMibHIHSM, hihsmCalcParamFromDate=hihsmCalcParamFromDate, mibSsidLeafVersionEntry=mibSsidLeafVersionEntry, hihsmManVolMigSerialNumber=hihsmManVolMigSerialNumber, mibCvsLeafVersionMIBVersion=mibCvsLeafVersionMIBVersion, mibCswVersionMIBOID=mibCswVersionMIBOID)
mibBuilder.exportSymbols("HDS9900MIB", customizedVolumeControlCylinder=customizedVolumeControlCylinder, hihsmPlanStatusSerialNumber=hihsmPlanStatusSerialNumber, hihsmDKPUtilDKANumber=hihsmDKPUtilDKANumber, cvsDVCylinder=cvsDVCylinder, hihsmVolHstListDstPGNumber=hihsmVolHstListDstPGNumber, hihsmCHPUtilClusterNumber=hihsmCHPUtilClusterNumber, dkaClusterNumber=dkaClusterNumber, portPrmDisplayName=portPrmDisplayName, eventTrapPartsID=eventTrapPartsID, pgDriveType=pgDriveType, pgLDEVPGNumber=pgLDEVPGNumber, customizedVolumePGNumber=customizedVolumePGNumber, hihsmPlanLDEVSrcPGNumber=hihsmPlanLDEVSrcPGNumber, cacheSizeUseCacheSize=cacheSizeUseCacheSize, hihsmMonParamGatheringTime=hihsmMonParamGatheringTime, storageExMib=storageExMib, raidExMibParityGroupListTable=raidExMibParityGroupListTable, raidExMibParityGroupLDEVTable=raidExMibParityGroupLDEVTable, hihsmMonitoringParameterEntry=hihsmMonitoringParameterEntry, raidExMibCacheConfigurationTable=raidExMibCacheConfigurationTable, raidExMibRealTimeMonitoringInformation=raidExMibRealTimeMonitoringInformation, dkaSerialNumber=dkaSerialNumber, mibLdevVersionMIBOID=mibLdevVersionMIBOID, trapCommandManagerName=trapCommandManagerName, trapCommandStatus=trapCommandStatus, raidExMibRTMonitorDataTable=raidExMibRTMonitorDataTable, mibSsidVersionSerialNumber=mibSsidVersionSerialNumber, hihsmPGUtilFB4Number=hihsmPGUtilFB4Number, luCommandDev=luCommandDev, wwnGroupControlStatus=wwnGroupControlStatus, mibLunsVersionMIBOID=mibLunsVersionMIBOID, pgRAIDType=pgRAIDType, mibAllLeafVersionSerialNumber=mibAllLeafVersionSerialNumber, mibDkaVersionMIBVersion=mibDkaVersionMIBVersion, rTMonitorDataSerialNumber=rTMonitorDataSerialNumber, prioRTMonitorDataIOPSAve=prioRTMonitorDataIOPSAve, hihsmManualVolumeMigrationEntry=hihsmManualVolumeMigrationEntry, dkcHWPS=dkcHWPS, hihsmVolHstListAction=hihsmVolHstListAction, mibLuseVersionSerialNumber=mibLuseVersionSerialNumber, hihsmDKCUtilizationTable=hihsmDKCUtilizationTable, portControlSetUpStatus=portControlSetUpStatus, portControlSetUpControlIndex=portControlSetUpControlIndex, allPortPrmSerialNumber=allPortPrmSerialNumber, cvsPGFreeSize=cvsPGFreeSize, hihsmManualVolumeMigrationTable=hihsmManualVolumeMigrationTable, mibPortControlVersionMIBVersion=mibPortControlVersionMIBVersion, hihsmPlanStatusMigrationDate=hihsmPlanStatusMigrationDate, ssidBoundaryBoundary=ssidBoundaryBoundary, hihsmCHACSWCHANumber=hihsmCHACSWCHANumber, hihsmAutomaticMigrationClass=hihsmAutomaticMigrationClass, hihsmManualMigration=hihsmManualMigration, cvsPGFreeCylinder=cvsPGFreeCylinder, cacheConfCacheNumber=cacheConfCacheNumber, nPrioRTMonitorDataMBSMin=nPrioRTMonitorDataMBSMin, hihsmDKCUtilSerialNumber=hihsmDKCUtilSerialNumber, hihsmExpPGUtilDstPG=hihsmExpPGUtilDstPG, logicalDeviceLUExpand=logicalDeviceLUExpand, hihsmAutoHstListMessage=hihsmAutoHstListMessage, lunGroupID=lunGroupID, rTMonitorDataGatheredTime=rTMonitorDataGatheredTime, mibAllLeafVersionMIBVersionData=mibAllLeafVersionMIBVersionData, dkuHWFan=dkuHWFan, mibEnvVersionMIBVersion=mibEnvVersionMIBVersion, portControlSetUpPortID=portControlSetUpPortID, mibDkaVersionSerialNumber=mibDkaVersionSerialNumber, lunControlStatus=lunControlStatus, cacheDCRHeadSize=cacheDCRHeadSize, raidExMibPortTable=raidExMibPortTable, cswDisplayName=cswDisplayName, luPathSerialNumber=luPathSerialNumber, raidExMibDummy=raidExMibDummy, lunGroupControlIndex=lunGroupControlIndex, hihsmCHPUtilData=hihsmCHPUtilData, eventListIndexSerialNumber=eventListIndexSerialNumber, raidExMibCommandEntry=raidExMibCommandEntry, hihsmCalcParamDataType=hihsmCalcParamDataType, hihsmManVolMigDstLDEV=hihsmManVolMigDstLDEV, dkuHWDrive=dkuHWDrive, subsystemIDSerialNumber=subsystemIDSerialNumber, raidExMibSubsystemInfo=raidExMibSubsystemInfo, cvsPGPGNumber=cvsPGPGNumber, raidExMibSharedMemory=raidExMibSharedMemory, hihsmVolHstCtrlSerialNumber=hihsmVolHstCtrlSerialNumber, lunWWNGroupSecurityVL=lunWWNGroupSecurityVL, raidExMibSubsystemIDEntry=raidExMibSubsystemIDEntry, customizedVolumeCU=customizedVolumeCU, hihsmPlanLDEVControlIndex=hihsmPlanLDEVControlIndex, wwnNickname=wwnNickname, hihsmLDEVUtilizationEntry=hihsmLDEVUtilizationEntry, hihsmAutomaticMigrationHistoryCtrlTable=hihsmAutomaticMigrationHistoryCtrlTable, portNPrmnPrioMBS=portNPrmnPrioMBS, mibDkaVersionMIBOID=mibDkaVersionMIBOID, raidExMibSMConfigurationEntry=raidExMibSMConfigurationEntry, luControlStatus=luControlStatus, raidExMibLUSEStructureTable=raidExMibLUSEStructureTable, mibSmLeafVersionMIBVersion=mibSmLeafVersionMIBVersion, hihsmAutoParamFunctionSwitch=hihsmAutoParamFunctionSwitch, raidExMibCustomizedVolumeTable=raidExMibCustomizedVolumeTable, luSEStructOffset=luSEStructOffset, subsystemIDEndLDEV=subsystemIDEndLDEV, hihsmVolHstListSrcLDEV=hihsmVolHstListSrcLDEV, portControlSwitchSerialNumber=portControlSwitchSerialNumber, cvsPGRAIDType=cvsPGRAIDType, hihsmCalcParamFromTime=hihsmCalcParamFromTime, pgControlStatus=pgControlStatus, raidExMibSSIDBoundaryEntry=raidExMibSSIDBoundaryEntry, logicalDeviceCylinder=logicalDeviceCylinder, hihsmDKAtoSMUtilizationTable=hihsmDKAtoSMUtilizationTable, cacheDCRLDEV=cacheDCRLDEV, drrSerialNumber=drrSerialNumber, raidExMibCVSCUInfTable=raidExMibCVSCUInfTable, luSEStructTopDeviceLDEV=luSEStructTopDeviceLDEV, cvsPGControlStatus=cvsPGControlStatus, raidExMibEnvironmentInfo=raidExMibEnvironmentInfo, commandRefreshTarget=commandRefreshTarget, wwnSerialNumber=wwnSerialNumber, hihsmAutoParamMaxVolumes=hihsmAutoParamMaxVolumes, raidExMibDKUHWEntry=raidExMibDKUHWEntry, hihsmAutoParamPlanningDay=hihsmAutoParamPlanningDay, hihsmAutoParamExecutionTime=hihsmAutoParamExecutionTime, smDisplayName=smDisplayName, chaNumber=chaNumber, hihsmDKACSWUtilData=hihsmDKACSWUtilData, portPrmThreshold=portPrmThreshold, hihsmExpectationPGUtilizationEntry=hihsmExpectationPGUtilizationEntry, raidExMibLUNS=raidExMibLUNS, cswClusterNumber=cswClusterNumber, portPrmSetting=portPrmSetting, chpCHANumber=chpCHANumber, mibPgVersionMIBVersion=mibPgVersionMIBVersion, lunPortID=lunPortID, hihsmCHPUtilSerialNumber=hihsmCHPUtilSerialNumber, mibDkaLeafVersionEntry=mibDkaLeafVersionEntry, hihsmCHASMUtilData=hihsmCHASMUtilData, pgLDEVCU=pgLDEVCU, raidExMibPortControlSwitchTable=raidExMibPortControlSwitchTable, mibLunsLeafVersionEntry=mibLunsLeafVersionEntry, commandSerialNumber=commandSerialNumber, nPrioRTMonitorDataIOPSMax=nPrioRTMonitorDataIOPSMax, raidExMibLUConfiguration=raidExMibLUConfiguration, lunGroupedLUNsVL=lunGroupedLUNsVL, smSerialNumber=smSerialNumber, hihsmMigrationExceptation=hihsmMigrationExceptation, mibPathLeafVersionTable=mibPathLeafVersionTable, mibPgVersionMIBOID=mibPgVersionMIBOID, nPrioRTMonitorDataGatheredDate=nPrioRTMonitorDataGatheredDate, eventTrapREFCODE=eventTrapREFCODE, hihsmAutomaticMigrationParameterTable=hihsmAutomaticMigrationParameterTable, hihsmManVolMigProgress=hihsmManVolMigProgress, raidDummy=raidDummy, portHostMode=portHostMode, raidExMibLUNSSwitchEntry=raidExMibLUNSSwitchEntry, customizedVolumeControlSize=customizedVolumeControlSize, hihsmDRRUtilDRRNumber=hihsmDRRUtilDRRNumber, hihsmVolHstListSerialNumber=hihsmVolHstListSerialNumber, cacheConfDisplayName=cacheConfDisplayName, mibLdevVersionSerialNumber=mibLdevVersionSerialNumber, raidExMibLUNSWWNGroupEntry=raidExMibLUNSWWNGroupEntry, raidExMibCacheSizeEntry=raidExMibCacheSizeEntry, raidExMibRaidListEntry=raidExMibRaidListEntry, cvsDVSize=cvsDVSize, hihsmClassListClassNumber=hihsmClassListClassNumber, cacheDCRControlStatus=cacheDCRControlStatus, mibAllLeafVersionTable=mibAllLeafVersionTable, raidExMibCVSDeletedVolumeTable=raidExMibCVSDeletedVolumeTable, raidExMibChannelAdapter=raidExMibChannelAdapter, chaDisplayName=chaDisplayName, hihsmAutomaticMigrationClassListEntry=hihsmAutomaticMigrationClassListEntry, hihsmCHAtoSMUtilizationEntry=hihsmCHAtoSMUtilizationEntry, raidExMibPortControlSetUpTable=raidExMibPortControlSetUpTable, mibPathVersionMIBVersion=mibPathVersionMIBVersion, hihsmCalcParamCalcType=hihsmCalcParamCalcType, dkcHWBattery=dkcHWBattery, hihsmLDEVUtilSerialNumber=hihsmLDEVUtilSerialNumber, cacheDCRSerialNumber=cacheDCRSerialNumber, hihsmVolumeMigrationHistoryCtrlTable=hihsmVolumeMigrationHistoryCtrlTable, mibLdevVersionMIBVersion=mibLdevVersionMIBVersion, logicalDeviceLDEV=logicalDeviceLDEV, mibPortVersionMIBOID=mibPortVersionMIBOID, luPathControlIndex=luPathControlIndex, mibSmLeafVersionEntry=mibSmLeafVersionEntry, hihsmDKASMSMClusterNumber=hihsmDKASMSMClusterNumber, hihsmVolHstListTime=hihsmVolHstListTime, cacheDCREndHead=cacheDCREndHead, raidExMibCacheMemory=raidExMibCacheMemory, mibLunsVersionMIBVersion=mibLunsVersionMIBVersion, rTMonitoringCntlStatus=rTMonitoringCntlStatus, raidExMibNPrioRTMonitorDataEntry=raidExMibNPrioRTMonitorDataEntry, mibAllLeafVersionMIBVersion=mibAllLeafVersionMIBVersion, hihsmVolHstListSrcCU=hihsmVolHstListSrcCU, mibCvsLeafVersionSerialNumber=mibCvsLeafVersionSerialNumber, cacheSizeRemainCacheSize=cacheSizeRemainCacheSize, hihsmCHACSWUtilData=hihsmCHACSWUtilData, commandStatus=commandStatus, hihsmLDEVUtilizationTable=hihsmLDEVUtilizationTable, rTMonitorDataIOPSMin=rTMonitorDataIOPSMin, mibPortleafVersionTable=mibPortleafVersionTable, smClusterNumber=smClusterNumber, cvsDVControlSize=cvsDVControlSize, hihsmCSWCacheUtilData=hihsmCSWCacheUtilData, cswSerialNumber=cswSerialNumber, timeZoneSerialNumber=timeZoneSerialNumber, cacheConfClusterNumber=cacheConfClusterNumber, hihsmPGUtilData=hihsmPGUtilData, hihsmCHAtoCSWUtilizationTable=hihsmCHAtoCSWUtilizationTable, eventListNickname=eventListNickname, chpSerialNumber=chpSerialNumber, mibDcrLeafVersionEntry=mibDcrLeafVersionEntry, raidExMibCustomizedVolumeEntry=raidExMibCustomizedVolumeEntry, cacheDCRStartLBA=cacheDCRStartLBA, hihsmDKACSWCSWNumber=hihsmDKACSWCSWNumber, hihsmClassListDisplayName=hihsmClassListDisplayName, mibDkaLeafVersionTable=mibDkaLeafVersionTable, hihsmDKPUtilizationEntry=hihsmDKPUtilizationEntry)
