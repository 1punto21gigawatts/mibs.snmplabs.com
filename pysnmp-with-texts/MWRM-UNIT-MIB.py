#
# PySNMP MIB module MWRM-UNIT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MWRM-UNIT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:16:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Counter64, Bits, Integer32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, TimeTicks, iso, Unsigned32, IpAddress, ModuleIdentity, enterprises, Gauge32, NotificationType, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter64", "Bits", "Integer32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "TimeTicks", "iso", "Unsigned32", "IpAddress", "ModuleIdentity", "enterprises", "Gauge32", "NotificationType", "MibIdentifier")
RowStatus, DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "MacAddress", "TextualConvention")
class EnableDisable(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 3))
    namedValues = NamedValues(("enable", 2), ("disable", 3))

class EnableDisableSMI2(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("disable", 0), ("enable", 1))

class OffOn(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("off", 0), ("on", 1))

class MetricImperial(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("metric", 0), ("imperial", 1))

class AllowedNotAllowed(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("not-allowed", 0), ("allowed", 1))

class NoYes(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("no", 0), ("yes", 1))

class DownUp(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("down", 0), ("up", 1))

class SupportedNotsupported(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 3))
    namedValues = NamedValues(("supported", 2), ("not-supported", 3))

class ProgressStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("ready", 0), ("inProgress", 1), ("success", 2), ("failure", 3))

class Severity(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("indeterminate", 0), ("critical", 1), ("major", 2), ("minor", 3), ("warning", 4), ("cleared", 5))

class TrailIfType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 4))
    namedValues = NamedValues(("unknown", -1), ("line", 0), ("radio", 1), ("stm-1-oc-3", 2), ("sync", 4))

class PmTableType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("pm15mincurr", 1), ("pm15min", 2), ("pm24hrcurr", 3), ("pm24hr", 4))

class RateMbps(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))
    namedValues = NamedValues(("not-applicable", -1), ("n10", 0), ("n100", 1), ("n1000", 2))

class HalfFull(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))
    namedValues = NamedValues(("not-applicable", -1), ("half", 0), ("full", 1), ("auto", 2))

class BerLevel(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 3, 4))
    namedValues = NamedValues(("n1e-3", 2), ("n1e-4", 3), ("n1e-5", 4))

class SignalLevel(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8))
    namedValues = NamedValues(("n1e-6", 5), ("n1e-7", 6), ("n1e-8", 7), ("n1e-9", 8))

class Exponent(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))
    namedValues = NamedValues(("n1e-2", 1), ("n1e-3", 2), ("n1e-4", 3), ("n1e-5", 4), ("n1e-6", 5), ("n1e-7", 6), ("n1e-8", 7), ("n1e-9", 8), ("n1e-10", 9), ("n1e-11", 10), ("n1e-12", 11), ("n1e-13", 12), ("n1e-14", 13), ("n1e-15", 14), ("n1e-16", 15), ("n1e-17", 16), ("n1e-18", 17), ("n1e-0", 18))

class LoopbackType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("off", 0), ("towardsLine", 1), ("towardsRadio", 2))

class QueueName(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("first-queue", 0), ("second-queue", 1), ("third-queue", 2), ("fourth-queue", 3), ("none", 4))

class RadioId(Integer32):
    pass

class RfuId(Integer32):
    pass

class SwCommand(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("noOperation", 0), ("downloadUpgradeVersion", 1), ("upgrade", 2), ("rollback", 3), ("downgrade", 4), ("downloadDowngradeVersion", 5))

class TrailProtectedType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("primary", 1), ("secondary", 2))

class ClockSrc(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("local-clock", 0), ("system-clock-source", 1))

class SlotId(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("standalone", 0), ("slot1", 1), ("slot2", 2), ("slot3", 3), ("slot4", 4), ("slot5", 5), ("slot6", 6), ("slot7", 7), ("slot8", 8), ("slot9", 9), ("slot10", 10), ("slot11", 11), ("slot12", 12))

class Integrity(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("integrity", 0), ("nointegrity", 1))

class GreenYellow(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("green", 0), ("yellow", 1))

class InputSeverity(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("indeterminate", 0), ("critical", 1), ("major", 2), ("minor", 3), ("warning", 4))

class SwCommandTimer(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("noOperation", 0), ("downloadUpgradeVersion", 1), ("upgrade", 2), ("rollback", 3), ("downgrade", 4), ("downloadDowngradeVersion", 5), ("upgradeTimer", 6), ("rollbackTimer", 7), ("downgradeTimer", 8), ("abortTimedInstallation", 9))

class FileTransferStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("ready", 0), ("inTransfer", 1), ("failure", 2), ("success", 3))

class FileRestoreStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("ready", 0), ("restoring-configuration", 1), ("failure", 2), ("success", 3))

class RbacAccessLevel(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("normal", 1), ("advance", 2))

class InventoryCardType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 10, 11, 12, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56))
    namedValues = NamedValues(("cleared", 0), ("nexusSc", 10), ("nexusScLp", 11), ("nexusDc", 12), ("nexusQc", 13), ("tccR", 19), ("tccA", 20), ("tccB", 21), ("rmcA", 22), ("rmcB", 23), ("rmcNDc", 24), ("nativeTdm16xE1T1", 25), ("pwe3-16xE1T1", 26), ("tdm1xStm1", 27), ("tdm1xOc3", 28), ("eLicEth4x1GEA", 29), ("chassis1U2U", 30), ("capacityBooster", 31), ("pwe3-1xSTM1", 32), ("pdc48v2uSingleFeed", 33), ("pdc48v1uSingleFeed", 34), ("pdc48v1uDualFeed", 35), ("fan2U", 36), ("fan1U", 37), ("test-card", 38), ("pdc24v2uSingleFeed", 39), ("pdc24v1uSingleFeed", 40), ("pdc24v1uDualFeed", 41), ("unknownCard", 42), ("ricE", 43), ("trafficFpga", 44), ("essFpga", 45), ("tressFpga", 46), ("ip20g", 47), ("licXe4opt", 48), ("tccBmc", 49), ("rmcE", 50), ("licStm1oc3rst", 51), ("tccAmc", 52), ("ip20cEband", 53), ("tccA2", 54), ("tccA2mc", 55), ("tccB2", 56))

class FtpProtocolType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("ftp", 0), ("sftp", 1))

class CfgUnitInfoOper(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("invalid-operation", 0), ("create-pakcge", 1), ("export-pakcge", 2))

class CfgOper(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("invalid-operation", 0), ("backup", 1), ("restore", 2), ("delete", 3), ("import", 4), ("export", 5))

class CardOccupancy(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("empty", 1), ("equipped", 2), ("not-operational", 3))

class OperState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("down", 1), ("init", 2), ("loading", 3), ("loaded", 4), ("up", 5), ("up-with-alarms", 6))

class LicenseGeneric(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(100000, 100001, 100010, 100011, 100020, 100021, 100022, 100023, 100024, 100025))
    namedValues = NamedValues(("not-allowed", 100000), ("allowed", 100001), ("disable", 100010), ("enable", 100011), ("only-management", 100020), ("smart-pipe", 100021), ("enhanced-pipe", 100022), ("edge-cet", 100023), ("access-cet", 100024), ("aggregation-cet", 100025))

class RaduisAcceaaLevel(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("normal", 1), ("advanced", 2), ("root", 3))

class VmResetType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("no-reset", 0), ("main-board-warm-reset", 1), ("tcc-cold-reset", 2), ("main-board-cold-reset", 3), ("card-warm-reset", 4), ("card-cold-reset", 5), ("not-applicable-reset", 6))

class FTStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("ready", 0), ("file-in-transfer", 1), ("failure", 2), ("success", 3))

class CsrCertificateFTState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("no-operation", 0), ("upload", 1), ("download", 2))

class CsrFileFormat(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("pem", 1), ("der", 2))

microwave_radio = MibIdentifier((1, 3, 6, 1, 4, 1, 2281)).setLabel("microwave-radio")
genEquip = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10))
genEquipUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 1))
genEquipUnitInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1))
genEquipLastCfgTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipLastCfgTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipLastCfgTimeStamp.setDescription('This parameter represents the configuration change counter. On every conf. change this counter is increased by 1.')
genEquipRealTimeandDate = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRealTimeandDate.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRealTimeandDate.setDescription("This parameter specifies the real time and date Format 'YYYY-MM-DD,HH:MM:SS' (Hexadecimal). A date-time specification: field octets contents range ----- ------ -------- ----- 1 1-2 year 0..65536 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minutes 0..59 6 7 seconds 0..60 (use 60 for leap-second) 7 8 deci-seconds 0..9 For example, Tuesday May 26, 1992 at 1:30:15 PM EDT would be displayed as: 07 c8 05 1a 0d 1e 0f 00 (1992 -5 -26, 13:30:15 ) ")
genEquipPMGenTime = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipPMGenTime.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipPMGenTime.setDescription('This value indicates the generation time of the Performance Monitor file. The value is presented in time_t format.')
genEquipInvGenTime = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipInvGenTime.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipInvGenTime.setDescription('This value indicates the generation time of the Inventory information file. The inventory file holds the configuration information of the unit. The value is presented in time_t format.')
genEquipOperation = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noAction", 0), ("idcHwReset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipOperation.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipOperation.setDescription('Enables to perform HW reset to the indoor unit.')
genEquipMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMIBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMIBVersion.setDescription('This value indicates MIB version.')
genEquipUnitCLLI = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitCLLI.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitCLLI.setDescription('This value represents a general purpose CLLI-like text field. The CLLI field is attached to traps generated from this NE.')
genEquipUnitMeasurementSystem = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 8), MetricImperial()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitMeasurementSystem.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitMeasurementSystem.setDescription('This value represents the measurement system used by the system. (metric or imperal).')
genEquipUnitIduTemperature = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitIduTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitIduTemperature.setDescription('This value indicates the IDU temperature, according to the measurement system chosen. (genEquipUnitMeasurementSystem)')
genEquipUnitIduVoltageInput = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitIduVoltageInput.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitIduVoltageInput.setDescription('Voltages Input.')
genEquipUnitInfoTime = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 11))
genEquipUnitGMTHours = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-12, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitGMTHours.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitGMTHours.setDescription('This parameter represent the offset in hours from GMT.')
genEquipUnitGMTMins = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitGMTMins.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitGMTMins.setDescription('This parameter represents the offset in minutes from GMT.')
genEquipUnitDaylightSavingTimeStartMonth = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 11, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitDaylightSavingTimeStartMonth.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitDaylightSavingTimeStartMonth.setDescription('This parameter represents the start Month of the daylight saving time.')
genEquipUnitDaylightSavingTimeStartDay = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 11, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitDaylightSavingTimeStartDay.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitDaylightSavingTimeStartDay.setDescription('This parameter represents the start Day of the daylight saving time.')
genEquipUnitDaylightSavingTimeEndMonth = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 11, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitDaylightSavingTimeEndMonth.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitDaylightSavingTimeEndMonth.setDescription('This parameter represents the end month of the daylight saving time.')
genEquipUnitDaylightSavingTimeEndDay = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 11, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitDaylightSavingTimeEndDay.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitDaylightSavingTimeEndDay.setDescription('This parameter represents the end day of the daylight saving time.')
genEquipUnitDaylightSavingTimeOffset = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 11, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitDaylightSavingTimeOffset.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitDaylightSavingTimeOffset.setDescription("Daylight saving offset hours. for a value different then '0', at the starting date of the daylight saving time the time will jump forward in this value. at the end date of the daylight saving time, the time will jump backwards in this value.")
genEquipUnitInfoTimeServicesTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 11, 12), )
if mibBuilder.loadTexts: genEquipUnitInfoTimeServicesTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitInfoTimeServicesTable.setDescription('This table contains the time services properties.')
genEquipUnitInfoTimeServicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 11, 12, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipUnitInfoTimeServicesIndex"))
if mibBuilder.loadTexts: genEquipUnitInfoTimeServicesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitInfoTimeServicesEntry.setDescription('This table entry contains the time services properties.')
genEquipUnitInfoTimeServicesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 11, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitInfoTimeServicesIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitInfoTimeServicesIndex.setDescription('The index of the table.')
genEquipUnitInfoTimeServicesUtcHours = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 11, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-12, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitInfoTimeServicesUtcHours.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitInfoTimeServicesUtcHours.setDescription('The required hours offset relative to the UTC (Universal Time Coordinated).')
genEquipUnitInfoTimeServicesUtcMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 11, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitInfoTimeServicesUtcMinutes.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitInfoTimeServicesUtcMinutes.setDescription('The required minutes offset relative to the UTC (Universal Time Coordinated).')
genEquipUnitInfoTimeServicesDstStartMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 11, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitInfoTimeServicesDstStartMonth.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitInfoTimeServicesDstStartMonth.setDescription('The month when the DST (Daylight Saving Time) is required to start.')
genEquipUnitInfoTimeServicesDstStartDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 11, 12, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitInfoTimeServicesDstStartDay.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitInfoTimeServicesDstStartDay.setDescription('The day when the DST (Daylight Saving Time) is required to start.')
genEquipUnitInfoTimeServicesDstEndMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 11, 12, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitInfoTimeServicesDstEndMonth.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitInfoTimeServicesDstEndMonth.setDescription('The month when the DST (Daylight Saving Time) is required to end.')
genEquipUnitInfoTimeServicesDstEndDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 11, 12, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitInfoTimeServicesDstEndDay.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitInfoTimeServicesDstEndDay.setDescription('The day when the DST (Daylight Saving Time) is required to end.')
genEquipUnitInfoTimeServicesDstOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 11, 12, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitInfoTimeServicesDstOffset.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitInfoTimeServicesDstOffset.setDescription('The required offset for DST (Daylight Saving Time) in hours.')
genEquipUnitInfoTimeServicesUtcDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 11, 12, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitInfoTimeServicesUtcDateAndTime.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitInfoTimeServicesUtcDateAndTime.setDescription('UTC (Universal Time Coordinated) date and time.')
genEquipUnitInfoTimeServicesUtcCurrentDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 11, 12, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitInfoTimeServicesUtcCurrentDateAndTime.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitInfoTimeServicesUtcCurrentDateAndTime.setDescription('The calculated current local date &amp; time based on the local clock, UTC and DST (Daylight Saving Time) configurations.')
genEquipUnitIduPowerSupply1AlarmAdmin = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 12), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitIduPowerSupply1AlarmAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitIduPowerSupply1AlarmAdmin.setDescription('This parameter is relevant only for IDU with more than one power supply units. The user can choose to disable (ignore the alarm) of one of the power supply units.')
genEquipUnitIduPowerSupply2AlarmAdmin = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 13), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitIduPowerSupply2AlarmAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitIduPowerSupply2AlarmAdmin.setDescription('This parameter is relevant only for IDU with more than two power supply units. The user can choose to disable (ignore the alarm) of one of the power supply units.')
genEquipUnitInfoNG = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 14))
genEquipUnitName = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 14, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitName.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitName.setDescription('The name of the system.')
genEquipUnitDescription = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 14, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitDescription.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitDescription.setDescription('A ahort description of the system.')
genEquipUnitContactPerson = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 14, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitContactPerson.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitContactPerson.setDescription('Contact person.')
genEquipUnitLocation = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 14, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitLocation.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitLocation.setDescription('The location of the system.')
genEquipUnitLatitude = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 14, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitLatitude.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitLatitude.setDescription('The latitude of the system.')
genEquipUnitLongitude = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 14, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitLongitude.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitLongitude.setDescription('The longitude of system.')
genEquipUnitIpAddressType = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 14, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ipv4", 0), ("ipv6", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitIpAddressType.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitIpAddressType.setDescription('IP address Family.')
genEquipUnitInfoNGTdmInterfaceStandard = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 14, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ets1", 0), ("ansi", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitInfoNGTdmInterfaceStandard.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitInfoNGTdmInterfaceStandard.setDescription('The TDM interface standard: ETSI (Erupean) or ANSI (North American)')
genEquipUnitInfoNTP = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 11, 6))
genEquipUnitInfoNTPAdmin = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 11, 6, 1), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitInfoNTPAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitInfoNTPAdmin.setDescription('This parameter represents the NTP Admin state')
genEquipUnitInfoNTPServerIP = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 11, 6, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitInfoNTPServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitInfoNTPServerIP.setDescription('This parameter represents the IP address of the NTP Server')
genEquipUnitInfoNTPStatus = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 11, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitInfoNTPStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitInfoNTPStatus.setDescription('This parameter represents the NTP Service status')
genEquipUnitInfoNTPSync = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 11, 6, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitInfoNTPSync.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitInfoNTPSync.setDescription("This parameter returns the IP address of the NTP server, with which the system is currently synchronized. Returned strings: (i) - the IP address of the reference NTP server, according to IPv4/v6 format. (ii) - 'LOCAL' if synchronized on local clock. (iii) - 'N/A' if not synchronized. Valid only when admin is 'disabled'.")
genEquipUnitInfoNTPPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 11, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitInfoNTPPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitInfoNTPPollInterval.setDescription('This parameter represents the NTP polling interval in minutes')
genEquipUnitInfoNtpStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 11, 6, 6), )
if mibBuilder.loadTexts: genEquipUnitInfoNtpStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitInfoNtpStatusTable.setDescription('This table shows the status of the NTP (Network Time Protocol).')
genEquipUnitInfoNtpStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 11, 6, 6, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipUnitInfoNtpStatusIndex"))
if mibBuilder.loadTexts: genEquipUnitInfoNtpStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitInfoNtpStatusEntry.setDescription('Entry containing the data of the NTP status.')
genEquipUnitInfoNtpStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 11, 6, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitInfoNtpStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitInfoNtpStatusIndex.setDescription('Index of the table.')
genEquipUnitInfoNtpStatusPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 11, 6, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitInfoNtpStatusPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitInfoNtpStatusPollInterval.setDescription('Indicates the time interval in minutes in which the NTP client polls the server it is locked to.')
genEquipUnitInfoNtpStatusSyncServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 11, 6, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitInfoNtpStatusSyncServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitInfoNtpStatusSyncServerIP.setDescription('he IPv4 address of the NTP server that the client is currently locked on.')
genEquipUnitInfoNtpStatusLockState = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 11, 6, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("local", 1), ("locked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitInfoNtpStatusLockState.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitInfoNtpStatusLockState.setDescription('Indicates the NTP client lock status.')
genEquipUnitInfoNtpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 11, 6, 7), )
if mibBuilder.loadTexts: genEquipUnitInfoNtpConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitInfoNtpConfigTable.setDescription('This table allows the configuration of the NTP (Network Time Protocol).')
genEquipUnitInfoNtpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 11, 6, 7, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipUnitInfoNtpConfigIndex"))
if mibBuilder.loadTexts: genEquipUnitInfoNtpConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitInfoNtpConfigEntry.setDescription('Entry containing the data of the NTP configuration.')
genEquipUnitInfoNtpConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 11, 6, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitInfoNtpConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitInfoNtpConfigIndex.setDescription('Index of the table.')
genEquipUnitInfoNtpConfigAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 11, 6, 7, 1, 2), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitInfoNtpConfigAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitInfoNtpConfigAdmin.setDescription('The administrative state of the NTP (Network Time Protocol) feature.')
genEquipUnitInfoNtpConfigVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 11, 6, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ntpv3", 1), ("ntpv4", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitInfoNtpConfigVersion.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitInfoNtpConfigVersion.setDescription('The NTP (Network Time Protocol) version that is being used.')
genEquipUnitInfoNtpConfigServerIPaddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 11, 6, 7, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitInfoNtpConfigServerIPaddress1.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitInfoNtpConfigServerIPaddress1.setDescription('NTP server IPv4 address that is required in first priority.')
genEquipUnitInfoNtpConfigServerIPaddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 1, 11, 6, 7, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitInfoNtpConfigServerIPaddress2.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitInfoNtpConfigServerIPaddress2.setDescription('NTP server IPv4 address that is required in second priority.')
genEquipUnitInventory = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 1, 2))
genEquipUnitIDUSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitIDUSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitIDUSerialNumber.setDescription('IDU Serial number.')
genEquipUnitIDUPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitIDUPartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitIDUPartNumber.setDescription('IDU Part number.')
genEquipUnitInventoryNG = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 1, 2, 10))
genEquipInventoryTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 1, 2, 10, 1), )
if mibBuilder.loadTexts: genEquipInventoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipInventoryTable.setDescription('inventory common table.')
genEquipInventoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 1, 2, 10, 1, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipInventorySlotIndex"))
if mibBuilder.loadTexts: genEquipInventoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipInventoryEntry.setDescription('inventory common table Entry.')
genEquipInventorySlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 2, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipInventorySlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipInventorySlotIndex.setDescription('slot index.')
genEquipInventoryCardName = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 2, 10, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipInventoryCardName.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipInventoryCardName.setDescription('Card name.')
genEquipInventoryCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 2, 10, 1, 1, 3), InventoryCardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipInventoryCardType.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipInventoryCardType.setDescription('Card type.')
genEquipInventoryCardSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 2, 10, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipInventoryCardSubType.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipInventoryCardSubType.setDescription('Card sub type.')
genEquipInventoryPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 2, 10, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipInventoryPartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipInventoryPartNumber.setDescription('Part number.')
genEquipInventorySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 2, 10, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipInventorySerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipInventorySerialNumber.setDescription('Serial number.')
genEquipInventoryNumberWorkingDays = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 2, 10, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipInventoryNumberWorkingDays.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipInventoryNumberWorkingDays.setDescription('Number of working days.')
genEquipUnitLicenseInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 1, 3))
genEquipUnitLicenseType = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("normal", 1), ("demo", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitLicenseType.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitLicenseType.setDescription('The unit license type.')
genEquipUnitLicenseCode = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitLicenseCode.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitLicenseCode.setDescription('The user license code that determines the NE license rights.')
genEquipUnitACMLicense = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 3, 3), AllowedNotAllowed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitACMLicense.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitACMLicense.setDescription('The ACM rights for the NE on the current license')
genEquipUnitSwitchAppLicense = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 8))).clone(namedValues=NamedValues(("single-pipe", 0), ("switch", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitSwitchAppLicense.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitSwitchAppLicense.setDescription('The switch application rights for the NE on the current license. Switch is either managed-switch or metro switch.')
genEquipUnitCapacityLicense = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 510))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitCapacityLicense.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitCapacityLicense.setDescription('The radio capacity allowed for the NE on the current license')
genEquipUnitLicenseDemoAdmin = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 3, 6), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitLicenseDemoAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitLicenseDemoAdmin.setDescription('The Admin state of the demo mode.')
genEquipUnitLicenseDemoTimer = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitLicenseDemoTimer.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitLicenseDemoTimer.setDescription('The Demo timer in hours')
genEquipUnitLicenseSyncU = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 3, 8), AllowedNotAllowed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitLicenseSyncU.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitLicenseSyncU.setDescription('This parameter indicates whether the synchronization unit license is allowed. This license allows configuring synchronization sources for clock distribution.')
genEquipUnitLicenseNetworkResiliency = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 3, 9), AllowedNotAllowed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitLicenseNetworkResiliency.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitLicenseNetworkResiliency.setDescription('This parameter indicates whether the network resiliency license is allowed. This license allows configuring xSTP protocols and TDM path protection.')
genEquipUnitLicenseTDMCapacity = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 3, 10), AllowedNotAllowed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitLicenseTDMCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitLicenseTDMCapacity.setDescription('This parameter indicates the number of TDM trails per radio allowed by the current license, if allowed. When TDM capacity license is allowed all scripts are allowed in the radio.')
genEquipUnitLicenseTDMCapacityValue = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitLicenseTDMCapacityValue.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitLicenseTDMCapacityValue.setDescription('This parameter indicates the number of TDM trails per radio allowed by the current license, if relevant. The TDM capacity value is not relevant if the genEquipUnitLicenseTDMCapacity is not allowed.')
genEquipUnitLicensePerUsage = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 3, 12), AllowedNotAllowed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitLicensePerUsage.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitLicensePerUsage.setDescription('This parameter indicates whether the per-usage license is allowed. This license allows configuring all features and causes their use to be reported to NMS. If the usage license is allowed, all other licenses are not relevant, as all the licenses are open for configuration.')
genEquipUnitLicenseAsymScripts = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 3, 13), AllowedNotAllowed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitLicenseAsymScripts.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitLicenseAsymScripts.setDescription('This parameter indicates whether the asymmetrical scripts license is allowed. This license allows loading asymmetrical scripts.')
genEquipUnitLicenseDateCode = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 3, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitLicenseDateCode.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitLicenseDateCode.setDescription("This parameter indicates the generation date and time of the current installed license. Format is 'YYYY-MM-DD,HH:MM:SS' (Hexadecimal).")
genEquipUnitLicenseValidationNumber = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 3, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitLicenseValidationNumber.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitLicenseValidationNumber.setDescription('This parameter indicates the validation number of the current installed license. It can be used as a proof (for LMS) that the license key was installed in order to get a downgrade refund.')
genEquipUnitLicenseFeatureTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 1, 3, 16), )
if mibBuilder.loadTexts: genEquipUnitLicenseFeatureTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitLicenseFeatureTable.setDescription('This table shows for each feature what is its valid license and whether the license has been violated or not.')
genEquipUnitLicenseFeatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 1, 3, 16, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipUnitLicenseFeatureId"))
if mibBuilder.loadTexts: genEquipUnitLicenseFeatureEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitLicenseFeatureEntry.setDescription('This table entry shows for each feature what is its valid license and whether the license has been violated or not.')
genEquipUnitLicenseFeatureId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 3, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitLicenseFeatureId.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitLicenseFeatureId.setDescription('A unique number which indicates the Id of the feature')
genEquipUnitLicenseFeatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 3, 16, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitLicenseFeatureName.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitLicenseFeatureName.setDescription('The name of the feature.')
genEquipUnitLicenseFeatureDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 3, 16, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitLicenseFeatureDescription.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitLicenseFeatureDescription.setDescription('A short description of the feature.')
genEquipUnitLicenseFeatureIsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 3, 16, 1, 4), LicenseGeneric()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitLicenseFeatureIsUsed.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitLicenseFeatureIsUsed.setDescription('Indicates whether the licensed feature is actually in used or its quantity that currently is in use.')
genEquipUnitLicenseFeatureIsAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 3, 16, 1, 5), LicenseGeneric()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitLicenseFeatureIsAllowed.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitLicenseFeatureIsAllowed.setDescription('Indicates whether a licensed feature is allowed.')
genEquipUnitLicenseViolationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 3, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("violated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitLicenseViolationStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitLicenseViolationStatus.setDescription('Indicates whether the actual configuration violates the feature license.')
genEquipUnitLicenseCutThrough = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 3, 20), AllowedNotAllowed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitLicenseCutThrough.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitLicenseCutThrough.setDescription('This parameter indicates whether the cut-through license is allowed. This license allows using the cut-through frames in the TM.')
genEquipUnitLicenseTdmInterfaceStandard = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ets1", 0), ("ansi", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitLicenseTdmInterfaceStandard.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitLicenseTdmInterfaceStandard.setDescription('The TDM interface standard: ETSI (European) or ANSI (North American).')
genEquipUnitExternalAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 1, 4))
genEquipUnitAlarmInput = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 1, 4, 1))
genEquipUnitAlarmInputTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 1, 4, 1, 1), )
if mibBuilder.loadTexts: genEquipUnitAlarmInputTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitAlarmInputTable.setDescription('External input alarm table. Using the table to manage the admin state of the external input alarm (Enable or Disable it). Set a description and severity.')
genEquipUnitAlarmInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 1, 4, 1, 1, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipUnitAlarmInputCounter"))
if mibBuilder.loadTexts: genEquipUnitAlarmInputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitAlarmInputEntry.setDescription('External input alarm table. Using the table to manage the admin state of the external input alarm (Enable or Disable it). Set a description and severity.')
genEquipUnitAlarmInputCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitAlarmInputCounter.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitAlarmInputCounter.setDescription('External input alarm table index.')
genEquipUnitAlarmInputAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 4, 1, 1, 1, 2), EnableDisableSMI2()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitAlarmInputAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitAlarmInputAdmin.setDescription('The Admin state of the External input alarm table.')
genEquipUnitAlarmInputText = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 4, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitAlarmInputText.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitAlarmInputText.setDescription('External input alarm description.')
genEquipUnitAlarmInputSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 4, 1, 1, 1, 4), InputSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitAlarmInputSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitAlarmInputSeverity.setDescription('External input alarm severity.')
genEquipUnitAlarmInputState = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 4, 1, 1, 1, 5), OffOn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitAlarmInputState.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitAlarmInputState.setDescription('The state, raised or cleared, of the external alarm input.')
genEquipUnitAlarmOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 1, 4, 2))
genEquipUnitAlarmOutputTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 1, 4, 2, 1), )
if mibBuilder.loadTexts: genEquipUnitAlarmOutputTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitAlarmOutputTable.setDescription('External output alarm table. using the table to manage the admin state of the external input alarm , read the status and set an output group.')
genEquipUnitAlarmOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 1, 4, 2, 1, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipUnitAlarmOutputCounter"))
if mibBuilder.loadTexts: genEquipUnitAlarmOutputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitAlarmOutputEntry.setDescription('External output alarm table. using the table to manage the admin state of the external input alarm , read the status and set an output group.')
genEquipUnitAlarmOutputCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitAlarmOutputCounter.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitAlarmOutputCounter.setDescription('External output alarm table index.')
genEquipUnitAlarmOutputAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("test", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitAlarmOutputAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitAlarmOutputAdmin.setDescription("The Admin state of the External output alarm. When 'Enabled', the functionality will be: (i) If no alarms are raised, the N.O. (normally open) contact will be opened, while the N.C. (normally closed) contact will be connected to the COM contact. (ii) When an alarm is raised, or the system power is OFF, the N.O will be connected to the COM contact, while the N.C. contact will remain opened. When 'Test' option is selected, the dry contacts behave as an alarm is raised in the system, as described in case (ii) above.")
genEquipUnitAlarmOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 4, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("on-test", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitAlarmOutputStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitAlarmOutputStatus.setDescription('The current stauts of the External output alarm table.')
genEquipUnitAlarmOutputGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("communication", 1), ("quality-of-service", 2), ("processing", 3), ("equipment", 4), ("environmental", 5), ("all-groups", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitAlarmOutputGroup.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitAlarmOutputGroup.setDescription('The description of the group to which the external output alarm belongs.')
genEquipUnitShelf = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5))
genEquipUnitShelfInstallation = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standalone", 0), ("chassisModule", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitShelfInstallation.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfInstallation.setDescription('This value indicates the NE installation type (standalone or module/card within a chassis). ')
genEquipUnitShelfModuleRole = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("main", 0), ("extention", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitShelfModuleRole.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfModuleRole.setDescription('This value indicates the NE module role (main unit or extention).')
genEquipUnitShelfSlotLabel = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitShelfSlotLabel.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfSlotLabel.setDescription('Slot label is a user defined description for the module in the slot.')
genEquipUnitShelfArchivesOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 4), ProgressStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitShelfArchivesOperationStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfArchivesOperationStatus.setDescription('Shelf-wide configuration archives [backup/restore] operation status. Used also when creating archive for unit info. Relevant only for main units. - ready(0) - inProgress(1), - success(2), - failure(3)')
genEquipUnitShelfManagmentTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 5), )
if mibBuilder.loadTexts: genEquipUnitShelfManagmentTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfManagmentTable.setDescription('This table contains information about the IDUs that may be in the shelf (population, communication status, most severe alarm) and provides the ability to backup/restore SW for each IDU. Relevant only for main units.')
genEquipUnitShelfManagmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 5, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipUnitShelfManagmentSlot"))
if mibBuilder.loadTexts: genEquipUnitShelfManagmentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfManagmentEntry.setDescription('This table keeps the shelf information on all the modules in the shelf (population, status, most severe alarm) and provides the ability for backup/restore command or SW download. Relevant only for main units.')
genEquipUnitShelfManagmentSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 5, 1, 1), SlotId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitShelfManagmentSlot.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfManagmentSlot.setDescription('This value is the slot number used as an index for this table.')
genEquipUnitShelfManagmentSlotPopulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-present", 0), ("present", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitShelfManagmentSlotPopulation.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfManagmentSlotPopulation.setDescription('Slot population state, which indicates if the slot is occupied or not. Relevant only for main units.')
genEquipUnitShelfManagmentCommunicationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("communicationDown", 0), ("communicationUp", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitShelfManagmentCommunicationStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfManagmentCommunicationStatus.setDescription('This value indicates if the slot can be reached or not. Relevant only for main units.')
genEquipUnitShelfManagmentSlotMostSevereAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 5, 1, 4), Severity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitShelfManagmentSlotMostSevereAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfManagmentSlotMostSevereAlarm.setDescription('This value is the most severe alarm for the module on this slot. Relevant only for main unit.')
genEquipUnitShelfManagmentMngSwCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 5, 1, 5), SwCommand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitShelfManagmentMngSwCommand.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfManagmentMngSwCommand.setDescription('The command to be executed to manage SW versions. Relevant only for main units. Possible values are: - noOperation(0) - downloadUpgradeVersion(1) - upgrade(2) - rollback(3) - downgrade(4) - downloadDowngradeVersion(5)')
genEquipUnitShelfManagmentSlotReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 5, 1, 6), OffOn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitShelfManagmentSlotReset.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfManagmentSlotReset.setDescription('This parameter Allows resetting specific unit according to genEquipUnitShelfManagmentSlot table index.')
genEquipUnitShelfManagmentSlotIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 5, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitShelfManagmentSlotIp.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfManagmentSlotIp.setDescription('Slot SNMP Management IP address.')
genEquipUnitShelfReset = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 6), OffOn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitShelfReset.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfReset.setDescription('This parameter allows resetting of entire shelf.')
genEquipUnitshelfAllODUAdmin = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 7), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitshelfAllODUAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitshelfAllODUAdmin.setDescription('The unit is configured as all outdoor unit, enable or disable it.')
genEquipUnitShelfSlotConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 8), )
if mibBuilder.loadTexts: genEquipUnitShelfSlotConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfSlotConfigTable.setDescription('Slot configuration table.')
genEquipUnitShelfSlotConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 8, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipUnitShelfSlotConfigSlotID"))
if mibBuilder.loadTexts: genEquipUnitShelfSlotConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfSlotConfigEntry.setDescription('This table allows configuration of card population parameters.')
genEquipUnitShelfSlotConfigSlotID = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 8, 1, 1), SlotId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitShelfSlotConfigSlotID.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfSlotConfigSlotID.setDescription('This value is the slot number used as an index for this table.')
genEquipUnitShelfSlotConfigExpectedCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 8, 1, 2), InventoryCardType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitShelfSlotConfigExpectedCardType.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfSlotConfigExpectedCardType.setDescription('Expected card type in current slot.')
genEquipUnitShelfSlotConfigLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 8, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitShelfSlotConfigLabel.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfSlotConfigLabel.setDescription('Slot label.')
genEquipUnitShelfSlotConfigAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 8, 1, 4), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitShelfSlotConfigAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfSlotConfigAdmin.setDescription('Slot admin state.')
genEquipUnitShelfSlotConfigSlotReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 8, 1, 5), OffOn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitShelfSlotConfigSlotReset.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfSlotConfigSlotReset.setDescription('This parameter Allows resetting specific unit according to genEquipUnitShelfManagmentSlot table index.')
genEquipUnitShelfTccConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 9), )
if mibBuilder.loadTexts: genEquipUnitShelfTccConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfTccConfigTable.setDescription('TCC configuration table.')
genEquipUnitShelfTccConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 9, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipUnitShelfTccConfigSlotID"))
if mibBuilder.loadTexts: genEquipUnitShelfTccConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfTccConfigEntry.setDescription('This table allows configuration of TCC population parameters.')
genEquipUnitShelfTccConfigSlotID = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 9, 1, 1), SlotId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitShelfTccConfigSlotID.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfTccConfigSlotID.setDescription('This value is the TCC slot number used as an index for this table.')
genEquipUnitShelfTccConfigExpectedCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 9, 1, 2), InventoryCardType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitShelfTccConfigExpectedCardType.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfTccConfigExpectedCardType.setDescription('Expected card type in current TCC slot.')
genEquipUnitShelfTccConfigLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 9, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitShelfTccConfigLabel.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfTccConfigLabel.setDescription('TCC label.')
genEquipUnitShelfTccConfigAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 9, 1, 4), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitShelfTccConfigAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfTccConfigAdmin.setDescription('TCC admin state.')
genEquipUnitShelfTccConfigReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 9, 1, 5), OffOn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitShelfTccConfigReset.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfTccConfigReset.setDescription('This parameter Allows resetting specific unit according to genEquipUnitShelfManagmentSlot table index.')
genEquipUnitShelfSlotStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 10), )
if mibBuilder.loadTexts: genEquipUnitShelfSlotStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfSlotStatusTable.setDescription('This table contains information about the status of the cards currently inserted in the system.')
genEquipUnitShelfSlotStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 10, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipUnitShelfSlotStatusSlotID"))
if mibBuilder.loadTexts: genEquipUnitShelfSlotStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfSlotStatusEntry.setDescription('This table entry contains information about the status of the cards currently inserted in the system.')
genEquipUnitShelfSlotStatusSlotID = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 10, 1, 1), SlotId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitShelfSlotStatusSlotID.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfSlotStatusSlotID.setDescription('Slot where PW-LIC is inserted.')
genEquipUnitShelfSlotStatusOccupancy = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 10, 1, 2), CardOccupancy()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitShelfSlotStatusOccupancy.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfSlotStatusOccupancy.setDescription('Slot Occupancy.')
genEquipUnitShelfSlotStatusAllowedCardTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 10, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitShelfSlotStatusAllowedCardTypes.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfSlotStatusAllowedCardTypes.setDescription('shelf slot allowed card types.')
genEquipUnitShelfSlotStatusCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 10, 1, 4), InventoryCardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitShelfSlotStatusCardType.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfSlotStatusCardType.setDescription('Shelf Slot card type.')
genEquipUnitShelfSlotStatusOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 10, 1, 5), OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitShelfSlotStatusOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfSlotStatusOperationalState.setDescription('Operational State.')
genEquipUnitShelfSlotStatusCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 10, 1, 6), DownUp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitShelfSlotStatusCommunication.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfSlotStatusCommunication.setDescription('Slot Operational State.')
genEquipUnitShelfTccStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 11), )
if mibBuilder.loadTexts: genEquipUnitShelfTccStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfTccStatusTable.setDescription('This table contains information about the status of the TCC currently inserted in the system.')
genEquipUnitShelfTccStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 11, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipUnitShelfTccStatusSlotID"))
if mibBuilder.loadTexts: genEquipUnitShelfTccStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfTccStatusEntry.setDescription('This table entry contains information about the status of the TCC currently inserted in the system.')
genEquipUnitShelfTccStatusSlotID = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 11, 1, 1), SlotId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitShelfTccStatusSlotID.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfTccStatusSlotID.setDescription('Slot where PW-LIC is inserted.')
genEquipUnitShelfTccStatusOccupancy = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 11, 1, 2), CardOccupancy()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitShelfTccStatusOccupancy.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfTccStatusOccupancy.setDescription('Slot Occupancy.')
genEquipUnitShelfTccStatusAllowedCardTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 11, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitShelfTccStatusAllowedCardTypes.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfTccStatusAllowedCardTypes.setDescription('shelf slot allowed card types.')
genEquipUnitShelfTccStatusCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 11, 1, 4), InventoryCardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitShelfTccStatusCardType.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfTccStatusCardType.setDescription('Shelf Slot card type.')
genEquipUnitShelfTccStatusOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 11, 1, 5), OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitShelfTccStatusOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfTccStatusOperationalState.setDescription('Operational State.')
genEquipUnitShelfTccStatusCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 11, 1, 6), DownUp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitShelfTccStatusCommunication.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfTccStatusCommunication.setDescription('Slot Operational State.')
genEquipUnitShelfManagmentSeverityTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 12), )
if mibBuilder.loadTexts: genEquipUnitShelfManagmentSeverityTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfManagmentSeverityTable.setDescription('This table indicates the number of current raised alarms per slot.')
genEquipUnitShelfManagmentSeverityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 12, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipUnitShelfManagmentSeveritySlot"))
if mibBuilder.loadTexts: genEquipUnitShelfManagmentSeverityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfManagmentSeverityEntry.setDescription('This table entry indicates the number of current raised alarms per slot.')
genEquipUnitShelfManagmentSeveritySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitShelfManagmentSeveritySlot.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfManagmentSeveritySlot.setDescription('The slot ID number that identifies it.')
genEquipUnitShelfManagmentSeverityCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitShelfManagmentSeverityCritical.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfManagmentSeverityCritical.setDescription("The number of alarms with 'Critical' severity.")
genEquipUnitShelfManagmentSeverityMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitShelfManagmentSeverityMajor.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfManagmentSeverityMajor.setDescription("The number of alarms with 'Major' severity.")
genEquipUnitShelfManagmentSeverityMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitShelfManagmentSeverityMinor.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfManagmentSeverityMinor.setDescription("The number of alarms with 'Minor' severity.")
genEquipUnitShelfManagmentSeverityWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitShelfManagmentSeverityWarning.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfManagmentSeverityWarning.setDescription("The number of alarms with 'Warning' severity.")
genEquipUnitShelfManagmentSeverityIndeterminate = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitShelfManagmentSeverityIndeterminate.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfManagmentSeverityIndeterminate.setDescription("The number of alarms with 'Indeterminate' severity.")
genEquipUnitShelfPdcFanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 13), )
if mibBuilder.loadTexts: genEquipUnitShelfPdcFanStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfPdcFanStatusTable.setDescription('This table shows for fun card.')
genEquipUnitShelfPdcFanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 13, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipUnitShelfPdcFanStatusPdcFanId"))
if mibBuilder.loadTexts: genEquipUnitShelfPdcFanStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfPdcFanStatusEntry.setDescription('This table shows for fun card.')
genEquipUnitShelfPdcFanStatusPdcFanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitShelfPdcFanStatusPdcFanId.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfPdcFanStatusPdcFanId.setDescription('pdc-fan-id')
genEquipUnitShelfPdcFanStatusPdcFanExMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 13, 1, 2), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitShelfPdcFanStatusPdcFanExMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfPdcFanStatusPdcFanExMonitor.setDescription('pdc-fan-existent monitor.')
genEquipUnitShelfPdcFanStatusPdcFanOccupancy = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 13, 1, 3), CardOccupancy()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitShelfPdcFanStatusPdcFanOccupancy.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfPdcFanStatusPdcFanOccupancy.setDescription('card_occupancy.')
genEquipUnitShelfPdcFanStatusPdcFanCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 13, 1, 4), InventoryCardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitShelfPdcFanStatusPdcFanCardType.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfPdcFanStatusPdcFanCardType.setDescription('Indicates whether the licensed feature is actually in used or its quantity that currently is in use.')
genEquipUnitShelfAbcMuxTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 14), )
if mibBuilder.loadTexts: genEquipUnitShelfAbcMuxTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfAbcMuxTable.setDescription('This table allows enabling/disabling each ABC MUX group. ABC groups can be defined on top of these MUX.')
genEquipUnitShelfAbcMuxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 14, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipUnitShelfAbcMuxNumber"))
if mibBuilder.loadTexts: genEquipUnitShelfAbcMuxEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfAbcMuxEntry.setDescription('This table entry allows enabling/disabling each ABC MUX group. ABC groups can be defined on top of these MUX.')
genEquipUnitShelfAbcMuxNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipUnitShelfAbcMuxNumber.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfAbcMuxNumber.setDescription('Identifier for each of the possible MUXs which choose between using the ABC trunks or the port for multi-directional radios')
genEquipUnitShelfAbcMuxAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 14, 1, 2), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitShelfAbcMuxAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfAbcMuxAdmin.setDescription('Enables the MUX (for ABC) or disables it (for multi-directional radios).')
genEquipUnitShelfMultiplexTrafficSource = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitShelfMultiplexTrafficSource.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfMultiplexTrafficSource.setDescription('The parameter multiplex traffic between slot 1 and slot 12.')
genEquipUnitShelfMaskUnderVoltageAlarmFirstPowerFeed = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 24), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitShelfMaskUnderVoltageAlarmFirstPowerFeed.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfMaskUnderVoltageAlarmFirstPowerFeed.setDescription('Mask undervoltage alarm on 1st DC power feed.')
genEquipUnitShelfMaskUnderVoltageAlarmSecondPowerFeed = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 5, 25), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipUnitShelfMaskUnderVoltageAlarmSecondPowerFeed.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipUnitShelfMaskUnderVoltageAlarmSecondPowerFeed.setDescription('Mask undervoltage alarm on 2nd DC power feed')
genEquipProtection = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 1, 6))
genEquipProtectionAdmin = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("protection1Plus1Hsb", 2), ("protectionDisable", 3), ("protection2Plus2Hsb", 4), ("protection2Plus0Hsb", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipProtectionAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipProtectionAdmin.setDescription('The Admin mode of the protection. In case of protection2Plus2Hsb this parameter should be configured in the main and extension slots.')
genEquipProtectionMode = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("active", 0), ("standby", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipProtectionMode.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipProtectionMode.setDescription('In protection mode, the card can be either active or standby')
genEquipProtectionMateIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 6, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipProtectionMateIPAddr.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipProtectionMateIPAddr.setDescription('Same parameter as genEquipNetworkMateIp. In case of 1+1 protection it is the protected card (Mate) IP address. In case of 2+2 protection it is the IP address of the protected unit.')
genEquipProtectionMateMACAddr = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 6, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipProtectionMateMACAddr.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipProtectionMateMACAddr.setDescription('In case of 1+1 protection it is protected card (Mate) MAC address In case of 2+2 protection it is the IP address of the protected unit.')
genEquipProtectionRadioExcessiveBERSwitch = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 6, 5), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipProtectionRadioExcessiveBERSwitch.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipProtectionRadioExcessiveBERSwitch.setDescription('The Admin state of an Excessive BER threshold. When enabled, crossing the Excessive BER threshold will cause a protection switch.')
genEquipProtectionLockout = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 6, 6), OffOn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipProtectionLockout.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipProtectionLockout.setDescription('This parameter provides the ability to lock the mode of each card in the protection, meaning to force the fact that protection switch will not occur.')
genEquipProtectionForceSwitch = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 6, 7), OffOn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipProtectionForceSwitch.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipProtectionForceSwitch.setDescription('This parameter is a command that forces a protection switch regardless of the state of the standby card.')
genEquipProtectionManualSwitch = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 6, 8), OffOn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipProtectionManualSwitch.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipProtectionManualSwitch.setDescription('This parameter is a command that performs manaual protection switch.')
genEquipProtectionCopyToMateComand = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 6, 9), OffOn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipProtectionCopyToMateComand.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipProtectionCopyToMateComand.setDescription('Setting this parameter to On will copy configured parameters from the active to the standby unit.')
genEquipProtectionCopyToMateStatus = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 6, 10), ProgressStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipProtectionCopyToMateStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipProtectionCopyToMateStatus.setDescription('This parameter represents the status of the copy-to-mate command when protection is enabled. - ready(0) - inProgress(1), - success(2), - failure(3)')
genEquipProtectionMultiUnitLAGAdmin = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 6, 11), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipProtectionMultiUnitLAGAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipProtectionMultiUnitLAGAdmin.setDescription('This parameter enables the Multi Unit LAG feature. It can be activated only in Single Pipe configuration and only when protection is active (either 1+1 or 2+2).')
genEquipProtectionRevertiveAdmin = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 6, 12), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipProtectionRevertiveAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipProtectionRevertiveAdmin.setDescription('Enable/Disable revertive protection mode. In revertive protection mode one IDU will be defined as a Primary and the other will be Secondary. Revertive protection will always tend to make the Primary IDU active unless it has a hardware failure.')
genEquipProtectionRevertivePrimaryIDU = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 6, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("lower", 0), ("upper", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipProtectionRevertivePrimaryIDU.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipProtectionRevertivePrimaryIDU.setDescription('Decides whether upper or lower IDU will be primary. When placed in a shelf, the upper will be the upper slot in the shelf. When working in stand-alone mode, the IDU with the highest IP address will be considered as upper.')
genEquipProtectionRevertiveMinTimer = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 6, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipProtectionRevertiveMinTimer.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipProtectionRevertiveMinTimer.setDescription('Minimal revertive protection timer period.')
genEquipProtectionRevertiveMaxNumOfTries = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 6, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipProtectionRevertiveMaxNumOfTries.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipProtectionRevertiveMaxNumOfTries.setDescription('Maximal number of revertive protection tries. Used to prevent instability. Revertive protection will give up trying to switch to the primary standby IDU path after the maximal number of tries. Setting Zero value will enable revertive protection switch only if the last protection switch was due to a local equipment failure.')
genEquipProtectionRevertiveTimerMultiplier = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 6, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipProtectionRevertiveTimerMultiplier.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipProtectionRevertiveTimerMultiplier.setDescription('A factor that increases the revertive timer period after each try. Setting 1 value will leave the timer period constantly at its minimal value.')
genEquipProtectionAspRevertive = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 6, 17), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipProtectionAspRevertive.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipProtectionAspRevertive.setDescription('n Smart Pipe HSB mode , this parameter causes the Ethernet line port to be muted upon a complete failure of the radio signal (in both active and standby units)')
genEquipDiversity = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 1, 7))
genEquipDiversityType = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("space-diversity", 2), ("frequency-diversity", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipDiversityType.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipDiversityType.setDescription('this parameter sets the type of hitless diversity to be used. Notice that only if protection is enabled this has any effect.')
genEquipDiversityRevertiveMode = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("non-revertive", 1), ("revertive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipDiversityRevertiveMode.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipDiversityRevertiveMode.setDescription("this parameter sets whether hitless switches are revertive in the event that the primary radio channel doesn't have any errors.")
genEquipDiversityPrimaryRadio = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upper-radio", 1), ("lower-radio", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipDiversityPrimaryRadio.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipDiversityPrimaryRadio.setDescription('this parameter sets which IDU contains the primary radio channel to revert to.')
genEquipDiversityRevertiveTimer = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipDiversityRevertiveTimer.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipDiversityRevertiveTimer.setDescription('This parameter sets the amount of seconds that must pass without a failure in the primary radio before doing a revertive switch.')
genEquipDiversityForceActive = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("local-radio", 1), ("mate-radio", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipDiversityForceActive.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipDiversityForceActive.setDescription('This parameter allows forcing incoming traffic to be taken from either of the radios (or none) for testing purposes.')
genEquipDiversitySwitchCounter = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipDiversitySwitchCounter.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipDiversitySwitchCounter.setDescription('This parameter shows the number of hitless switches performed since last time counter was cleared.')
genEquipDiversitySwitchCounterClear = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 7, 7), OffOn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipDiversitySwitchCounterClear.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipDiversitySwitchCounterClear.setDescription('This parameter allows clearing of switch counter.')
genEquipDiversityReceiveRadio = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 1, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("lower-idu", 0), ("upper-idu", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipDiversityReceiveRadio.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipDiversityReceiveRadio.setDescription('This parameter shows from which radio the traffic is currently being taken.')
genEquipFault = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 3))
genEquipCurrentAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 3, 1))
genEquipCurrentAlarmLastChangeCounter = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipCurrentAlarmLastChangeCounter.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipCurrentAlarmLastChangeCounter.setDescription('This counter is initialized with a random number after resest, and incremented on each change in the CurrentAlarmTable')
genEquipCurrentAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 3, 1, 2), )
if mibBuilder.loadTexts: genEquipCurrentAlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipCurrentAlarmTable.setDescription('This table includes the current alarm (when a RAISED trap is sent, an alarm is added to the table, when a CLEAR trap is sent, the alarm is removed).')
genEquipCurrentAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 3, 1, 2, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipCurrentAlarmCounter"))
if mibBuilder.loadTexts: genEquipCurrentAlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipCurrentAlarmEntry.setDescription('Entry containing the info of current RAISED traps.')
genEquipCurrentAlarmCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipCurrentAlarmCounter.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipCurrentAlarmCounter.setDescription('A running counter of open alarms, incremented upon each new alarm.')
genEquipCurrentAlarmRaisedTimeT = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipCurrentAlarmRaisedTimeT.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipCurrentAlarmRaisedTimeT.setDescription('The rasied time of this alarm. Time in seconds since January 1, 1970 00:00 UTC.')
genEquipCurrentAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipCurrentAlarmId.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipCurrentAlarmId.setDescription('Alarm ID. List of alarm IDs is available in the MIB Ref. Guide.')
genEquipCurrentAlarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipCurrentAlarmName.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipCurrentAlarmName.setDescription("Alarm name (the parameter and entity in the CLI) for example 'radio/framer/radio-lof'")
genEquipCurrentAlarmInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipCurrentAlarmInstance.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipCurrentAlarmInstance.setDescription('In the case of alarms that may have several appereances (at interfaces, channels, VCs, etc.), this parameter indicates the instance of the alarm.')
genEquipCurrentAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 1, 2, 1, 6), Severity().clone('indeterminate')).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipCurrentAlarmSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipCurrentAlarmSeverity.setDescription('The current Alarm severity the values can be: - indeterminate(0) - critical(1) - major(2) - minor(3) - warning(4) - cleared(5)')
genEquipCurrentAlarmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipCurrentAlarmIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipCurrentAlarmIfIndex.setDescription('Interface Index where the alarm occurred, alarms that are not associated with specific interfaces will have the following value: For a non-interface alarm, the value is: 65001')
genEquipCurrentAlarmModule = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 1, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipCurrentAlarmModule.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipCurrentAlarmModule.setDescription("The module of the alarm. Possible values are 'IDU' or 'RFU'.")
genEquipCurrentAlarmDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 1, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipCurrentAlarmDesc.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipCurrentAlarmDesc.setDescription('The alarm description (same as the description in the sent trap).')
genEquipCurrentAlarmProbableCause = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 1, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipCurrentAlarmProbableCause.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipCurrentAlarmProbableCause.setDescription('The alarm probable cause.')
genEquipCurrentAlarmCorrectiveActions = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 1, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipCurrentAlarmCorrectiveActions.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipCurrentAlarmCorrectiveActions.setDescription('The alarm corrective actions.')
genEquipCurrentAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cleared", 0), ("raised", 1), ("event", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipCurrentAlarmState.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipCurrentAlarmState.setDescription('The state of the alarm (cleared or rasied).')
genEquipCurrentAlarmSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 1, 2, 1, 13), SlotId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipCurrentAlarmSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipCurrentAlarmSlotId.setDescription('The ID of the slot originating the alarm.')
genEquipCurrentAlarmAdditionalInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 1, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipCurrentAlarmAdditionalInfo.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipCurrentAlarmAdditionalInfo.setDescription('Additional information that may further qualify the source of the alarm.')
genEquipCurrentAlarmUserText = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 1, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipCurrentAlarmUserText.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipCurrentAlarmUserText.setDescription('An additional description of the event or fault, or any other information that user wants to attach to it.')
genEquipMostSevereAlarm = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 3, 1, 3), Severity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMostSevereAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMostSevereAlarm.setDescription('The severity of the most severe alarm in the system')
genEquipAlarmConfigDefault = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 3, 1, 4), OffOn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipAlarmConfigDefault.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipAlarmConfigDefault.setDescription('Allows to revert back to the default values of all alarm configurations')
genEquipAlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 3, 1, 5), )
if mibBuilder.loadTexts: genEquipAlarmConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipAlarmConfigTable.setDescription('This table allows system alarms configuration.')
genEquipAlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 3, 1, 5, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipAlarmConfigId"))
if mibBuilder.loadTexts: genEquipAlarmConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipAlarmConfigEntry.setDescription('This table entry allows system alarms configuration.')
genEquipAlarmConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipAlarmConfigId.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipAlarmConfigId.setDescription('he alarm unique Id number that identifies it.')
genEquipAlarmConfigSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 1, 5, 1, 2), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipAlarmConfigSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipAlarmConfigSeverity.setDescription('The perceived severity of the raised alarm.')
genEquipAlarmConfigDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 1, 5, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipAlarmConfigDescr.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipAlarmConfigDescr.setDescription('The description of the raised alarm.')
genEquipAlarmConfigAdditionalText = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 1, 5, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipAlarmConfigAdditionalText.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipAlarmConfigAdditionalText.setDescription('An additional description of the fault, or any other information that user wants to attach to it.')
genEquipAlarmServiceAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 1, 5, 1, 5), OffOn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipAlarmServiceAffect.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipAlarmServiceAffect.setDescription('Indicates whether the raised alarm affects a service.')
genEquipTrapCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 3, 2))
genEquipTrapCfgMgrTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 3, 2, 1), )
if mibBuilder.loadTexts: genEquipTrapCfgMgrTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipTrapCfgMgrTable.setDescription('This table indicates the Trap manager list.')
genEquipTrapCfgMgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 3, 2, 1, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipTrapCfgMgrId"))
if mibBuilder.loadTexts: genEquipTrapCfgMgrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipTrapCfgMgrEntry.setDescription('Entry containing the manager IP addresses and the trap filter options.')
genEquipTrapCfgMgrId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipTrapCfgMgrId.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipTrapCfgMgrId.setDescription('This value indicates an index of a specific manager')
genEquipTrapCfgMgrAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 2, 1, 1, 2), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipTrapCfgMgrAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipTrapCfgMgrAdmin.setDescription('This value indicates an administrative state of a specific manager. disable - will not send traps to this trap manager.')
genEquipTrapCfgMgrIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 2, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipTrapCfgMgrIP.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipTrapCfgMgrIP.setDescription("This value indicates the manager's IP address.")
genEquipTrapCfgMgrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(70, 65535)).clone(162)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipTrapCfgMgrPort.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipTrapCfgMgrPort.setDescription('The Port for sending the trap for each manager (possible values: 70-65535)')
genEquipTrapCfgMgrName = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipTrapCfgMgrName.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipTrapCfgMgrName.setDescription('The name of the manager configured to receive the traps')
genEquipTrapCfgMgrCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipTrapCfgMgrCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipTrapCfgMgrCommunity.setDescription('The manager trap community configured.')
genEquipTrapCfgMgrSeverityFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipTrapCfgMgrSeverityFilter.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipTrapCfgMgrSeverityFilter.setDescription("This is a bit mask value for masking traps according to its severity. There is a bit for each severity. If the relevant bit is on (1), the Agent will send traps with this severity. It won't send traps if the bit is off (0). The list of bits from LSB to MSB: Bit 1 (LSB) - indeterminate Bit 2 - critical Bit 3 - major Bit 4 - minor Bit 5 - warning Bit 6 - cleared ")
genEquipTrapCfgMgrStatusChangeFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 2, 1, 1, 8), OffOn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipTrapCfgMgrStatusChangeFilter.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipTrapCfgMgrStatusChangeFilter.setDescription('This value represents the mode in which the traps are sent: If the filter is set to ON - only traps that change the severity of the system are sent. If the filter is set to OFF - all traps (that are not screened by other filters) are sent.')
genEquipTrapCfgMgrCLLI = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipTrapCfgMgrCLLI.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipTrapCfgMgrCLLI.setDescription('Common Language Location Identifier (maximum length: 100 chars)')
genEquipTrapCfgMgrHeartbeatPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipTrapCfgMgrHeartbeatPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipTrapCfgMgrHeartbeatPeriod.setDescription("This item defines the interval (in minutes) between each heartbeat trap. A value of '0' disables this feature.")
genEquipTrapCfgMgrIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 2, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipTrapCfgMgrIPv6.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipTrapCfgMgrIPv6.setDescription('The IP-v6 address of the trap manage)')
genEquipTrapCfgMgrV3User = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 2, 1, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipTrapCfgMgrV3User.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipTrapCfgMgrV3User.setDescription('The manager trap V3 user name configured')
genEquipEventLog = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 3, 3))
genEquipEventLogTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 3, 3, 1), )
if mibBuilder.loadTexts: genEquipEventLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipEventLogTable.setDescription('This table includes the event log.')
genEquipEventLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 3, 3, 1, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipEventLogCounter"))
if mibBuilder.loadTexts: genEquipEventLogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipEventLogEntry.setDescription('Entry containing the info of the event log table.')
genEquipEventLogCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipEventLogCounter.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipEventLogCounter.setDescription('The event counter.')
genEquipEventLogRaisedTimeT = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipEventLogRaisedTimeT.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipEventLogRaisedTimeT.setDescription('The rasied time of this event. Time in seconds since January 1, 1970 00:00 UTC. (time_t format)')
genEquipEventLogSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 3, 1, 1, 3), Severity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipEventLogSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipEventLogSeverity.setDescription('The event severity, possible values are: - indeterminate(0), - critical(1) - major(2) - minor(3) - warning(4) - cleared(5)')
genEquipEventLogModule = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipEventLogModule.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipEventLogModule.setDescription("The module of the event. ('IDU' or 'RFU')")
genEquipEventLogDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 3, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipEventLogDesc.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipEventLogDesc.setDescription('The event description (same as the description in the sent trap).')
genEquipEventLogState = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cleared", 0), ("raised", 1), ("event", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipEventLogState.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipEventLogState.setDescription("The state of the event or alarm. In case of alarm, 'cleard' or 'raised'. In case of event, 'event'.")
genEquipEventLogProbableCause = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 3, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipEventLogProbableCause.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipEventLogProbableCause.setDescription('The probable cause that may be the reason for the event.')
genEquipEventLogCorrectiveActions = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 3, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipEventLogCorrectiveActions.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipEventLogCorrectiveActions.setDescription('Some possible suggested corrective actions in order to eliminate the raised alarm.')
genEquipEventLogAdditionalInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 3, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipEventLogAdditionalInfo.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipEventLogAdditionalInfo.setDescription('Additional information that may further qualify the source of the event.')
genEquipEventLogUserText = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 3, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipEventLogUserText.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipEventLogUserText.setDescription('An additional description of the event or fault, or any other information that user wants to attach to it.')
genEquipEventLogIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipEventLogIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipEventLogIfIndex.setDescription('If Index of the originated source.')
genEquipEventLogId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 3, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipEventLogId.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipEventLogId.setDescription('The Id of the event.')
genEquipEventLogClear = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 3, 3, 2), OffOn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipEventLogClear.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipEventLogClear.setDescription('The clear event log command. If enabled, will clear the event log.')
genEquipEventLogLastChangeCounter = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 3, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipEventLogLastChangeCounter.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipEventLogLastChangeCounter.setDescription('This counter is initialized with a random number after reset, and incremented on each change in the EventLogTable')
genEquipFaultErrno = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipFaultErrno.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipFaultErrno.setDescription('The application last error number. List of Errnos are located in the MIB Ref Guide.')
genEquipFaultErrDescr = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 3, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipFaultErrDescr.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipFaultErrDescr.setDescription('The application last error description. List of Errnos are located in the MIB Ref Guide.')
genEquipMng = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 4))
genEquipMngSw = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1))
genEquipMngSwServerUrl = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngSwServerUrl.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwServerUrl.setDescription('Remote SW Update Server URL where SW updates reside')
genEquipMngSwServerLogin = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngSwServerLogin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwServerLogin.setDescription('Remote server login')
genEquipMngSwServerPassword = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngSwServerPassword.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwServerPassword.setDescription('Remote server password')
genEquipMngSwProxyUrl = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwProxyUrl.setStatus('obsolete')
if mibBuilder.loadTexts: genEquipMngSwProxyUrl.setDescription('Proxy Server Url. This parameter is obsolete and should not be in used.')
genEquipMngSwProxyLogin = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwProxyLogin.setStatus('obsolete')
if mibBuilder.loadTexts: genEquipMngSwProxyLogin.setDescription('Proxy server login This parameter is obsolete and should not be in used.')
genEquipMngSwProxyPassword = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwProxyPassword.setStatus('obsolete')
if mibBuilder.loadTexts: genEquipMngSwProxyPassword.setDescription('Proxy server password This parameter is obsolete and should not be in used.')
genEquipMngSwDownloadStatus = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 7), ProgressStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwDownloadStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwDownloadStatus.setDescription('Download software status. Possible values are: - ready(0) - inProgress(1) - success(2) - failure(3)')
genEquipMngSwInstallStatus = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 8), ProgressStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwInstallStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwInstallStatus.setDescription('Install software status. Possible values are: - ready(0) - inProgress(1) - success(2) - failure(3)')
genEquipMngSwCommand = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 9), SwCommandTimer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngSwCommand.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwCommand.setDescription('The command that is executed to manage SW versions. Depending on the value given, a different operation will be carried out involving FTP and/or version installing. Notice that software will be installed in all slots in a shelf and reset will be automatically carried out at the end of the installation process. Possible values are: - noOperation(0) - downloadUpgradeVersion(1) - load a newer version from FTP site - upgrade(2) - upgrade to newer version which has already been loaded - rollback(3) - install a previously working version without downloading - downgrade(4) - downgrade to an older version which has alredy been loaded - downloadDowngradeVersion(5) - load an older version from FTP site - upgradeTimer(6) - Starts the timer defined in genEquipMngSwInstallationTimer and upon expiration upgrades to a newer version which has already been loaded. - rollbackTimer(7) - Starts the timer defined in genEquipMngSwInstallationTimer and upon expiration install a previously working version without downloading - downgradeTimer(7) - Starts the timer defined in genEquipMngSwInstallationTimer and upon expiration downgrades to an older which has already been loaded - abortTimedTnstallation(9) stops a counting timer; the installation process will not take place. Notice that it does not stop an installation process once started.')
genEquipMngSwInstalledIduVersion = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwInstalledIduVersion.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwInstalledIduVersion.setDescription('This value indicates the Package Version of the installed IDU SW')
genEquipMngSwInstalledRfuVersion = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwInstalledRfuVersion.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwInstalledRfuVersion.setDescription('This value indicates the Package version of the installed RFU SW.')
genEquipMngSwVersions = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 13))
genEquipMngSwIDUVersionsTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 13, 1), )
if mibBuilder.loadTexts: genEquipMngSwIDUVersionsTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwIDUVersionsTable.setDescription('This table contains all IDU running versions.')
genEquipMngSwIDUVersionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 13, 1, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipMngSwIDUVersionsCounter"))
if mibBuilder.loadTexts: genEquipMngSwIDUVersionsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwIDUVersionsEntry.setDescription('Entry containing the info of the IDU Versions table.')
genEquipMngSwIDUVersionsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwIDUVersionsCounter.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwIDUVersionsCounter.setDescription('This is the index of this table.')
genEquipMngSwIDUVersionsPackageName = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 13, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwIDUVersionsPackageName.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwIDUVersionsPackageName.setDescription('The package name')
genEquipMngSwIDUVersionsTargetDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 13, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwIDUVersionsTargetDevice.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwIDUVersionsTargetDevice.setDescription('The Target device within the NE (i.e. Modem, FPGA, IDU)')
genEquipMngSwIDUVersionsRunningVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 13, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwIDUVersionsRunningVersion.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwIDUVersionsRunningVersion.setDescription('The running version.')
genEquipMngSwIDUVersionsInstalledVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 13, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwIDUVersionsInstalledVersion.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwIDUVersionsInstalledVersion.setDescription("The installed version is similar to the running version, besides packages that are not currently running. Those packages will have in the running version 'N/A' while in the installed version there is a version number. For example, in equipment without daughter-board, some of the packages will be installed but not running.")
genEquipMngSwIDUVersionsUpgradePackage = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 13, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwIDUVersionsUpgradePackage.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwIDUVersionsUpgradePackage.setDescription('In case the user performs an upgrade, this version will be the running/installed version')
genEquipMngSwIDUVersionsDowngradePackage = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 13, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwIDUVersionsDowngradePackage.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwIDUVersionsDowngradePackage.setDescription('In case the user performs downgrade, this version will be the running/installed version.')
genEquipMngSwIDUVersionsResetType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 13, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noReset", 0), ("appWarmReset", 1), ("tccColdReset", 2), ("mainBoardColdReset", 3), ("mainBoardWarmReset", 4), ("applicationRestart", 5), ("cardReset", 6), ("notApplicable", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwIDUVersionsResetType.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwIDUVersionsResetType.setDescription('Minimum level of reset required to update the software in the relevant module.')
genEquipMngSwTimerTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 13, 2), )
if mibBuilder.loadTexts: genEquipMngSwTimerTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwTimerTable.setDescription('This table contains all IDU running versions.')
genEquipMngSwTimerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 13, 2, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipMngSwTimerSlotNumber"))
if mibBuilder.loadTexts: genEquipMngSwTimerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwTimerEntry.setDescription('Entry containing the info of the IDU Versions table.')
genEquipMngSwTimerSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwTimerSlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwTimerSlotNumber.setDescription('The slot ID of the unit for this timer; 0 is for stand-alone units.')
genEquipMngSwTimerInstallationTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngSwTimerInstallationTimer.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwTimerInstallationTimer.setDescription('The timer (in minutes) for software installation operations to this unit.')
genEquipMngSwTimerTimeToInstall = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwTimerTimeToInstall.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwTimerTimeToInstall.setDescription('The amount of time (in seconds) from now for the unit to perform software installation. Zero denotes that no operation has been requested.')
genEquipMngSwTimerTimerAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("proceed", 0), ("abort", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngSwTimerTimerAbort.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwTimerTimerAbort.setDescription('This parameter is used to stop the count-down to the software update action.')
genEquipMngSwFTPTimer = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 13, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngSwFTPTimer.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwFTPTimer.setDescription('Time (in seconds) until file transfer is failed.')
genEquipMngSwInstallationTimer = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngSwInstallationTimer.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwInstallationTimer.setDescription('The timer (in minutes) for timed software installation operations to this unit')
genEquipMngSwTimeToInstall = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwTimeToInstall.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwTimeToInstall.setDescription('The amount of time (in minutes) from now for the unit to perform software installation. Zero denotes that no operation has been requested')
genEquipMngSwUpgradeCommonRfuVersion = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwUpgradeCommonRfuVersion.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwUpgradeCommonRfuVersion.setDescription('This value indicates the Package version of the installed RFU SW.')
genEquipMngSwDowngradeCommonRfuVersion = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwDowngradeCommonRfuVersion.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwDowngradeCommonRfuVersion.setDescription('This value indicates the Package version of the installed RFU SW.')
genEquipMngSwFileTransferTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 18), )
if mibBuilder.loadTexts: genEquipMngSwFileTransferTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwFileTransferTable.setDescription('This table allows configuring the details of the external server where software versions should be located.')
genEquipMngSwFileTransferEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 18, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipMngSwFileTransferIndex"))
if mibBuilder.loadTexts: genEquipMngSwFileTransferEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwFileTransferEntry.setDescription('Entry containing the info of software management file transfer.')
genEquipMngSwFileTransferIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwFileTransferIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwFileTransferIndex.setDescription('The index of the table.')
genEquipMngSwFileTransferProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 18, 1, 2), FtpProtocolType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngSwFileTransferProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwFileTransferProtocol.setDescription('The protocol to use to transfer the files between the system and an external computer.')
genEquipMngSwFileTransferUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 18, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngSwFileTransferUserName.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwFileTransferUserName.setDescription('User name for access to the configuration files location.')
genEquipMngSwFileTransferPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 18, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngSwFileTransferPassword.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwFileTransferPassword.setDescription('Password for access to the software version files location.')
genEquipMngSwFileTransferAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 18, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngSwFileTransferAddress.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwFileTransferAddress.setDescription('IP address of the computer where software version files are to be taken from.')
genEquipMngSwFileTransferPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 18, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngSwFileTransferPath.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwFileTransferPath.setDescription('Location of the files in the external server.')
genEquipMngSwFileTransferIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 18, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngSwFileTransferIpv6Address.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwFileTransferIpv6Address.setDescription('IPv6 Server Address.')
genEquipSecurityTrafficCrypto = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 11, 10))
genEquipSecurityFipsAdmin = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 10, 1), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityFipsAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityFipsAdmin.setDescription('FIPS admin configuration parameter')
genEquipSecurityFipsStatus = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 10, 2), DownUp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityFipsStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityFipsStatus.setDescription('FIPS operational status.')
genEquipTrafficCryptoConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 11, 10, 10), )
if mibBuilder.loadTexts: genEquipTrafficCryptoConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipTrafficCryptoConfigTable.setDescription('Traffic Crypto configuration table.')
genEquipTrafficCryptoConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 11, 10, 10, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipTrafficCryptoConfigId"))
if mibBuilder.loadTexts: genEquipTrafficCryptoConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipTrafficCryptoConfigEntry.setDescription('Traffic Crypto configuration table entry')
genEquipTrafficCryptoConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 10, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipTrafficCryptoConfigId.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipTrafficCryptoConfigId.setDescription('Traffic crypto Configuration Intreface ID')
genEquipTrafficCryptoConfigConfigAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 10, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("aes-256", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipTrafficCryptoConfigConfigAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipTrafficCryptoConfigConfigAdmin.setDescription('Traffic Crypto Admin Mode.')
genEquipTrafficCryptoConfigMkey = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 10, 10, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipTrafficCryptoConfigMkey.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipTrafficCryptoConfigMkey.setDescription('Traffic Crypto Master Key.')
genEquipTrafficCryptoConfigBackupMkey = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 10, 10, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipTrafficCryptoConfigBackupMkey.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipTrafficCryptoConfigBackupMkey.setDescription('Traffic Crypto Backup Master Key')
genEquipTrafficCryptoConfigMkeyPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 10, 10, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipTrafficCryptoConfigMkeyPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipTrafficCryptoConfigMkeyPeriod.setDescription('Master Key Expire Configuration.')
genEquipTrafficCryptoConfigRandKeyGen = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 10, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("random-key-generate", 0), ("random-key-clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipTrafficCryptoConfigRandKeyGen.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipTrafficCryptoConfigRandKeyGen.setDescription('Random Key generation/clear indication.')
genEquipTrafficCryptoConfigSkeyPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 10, 10, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipTrafficCryptoConfigSkeyPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipTrafficCryptoConfigSkeyPeriod.setDescription('Session Key Update Time Configuration.')
genEquipTrafficCryptoStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 11, 10, 11), )
if mibBuilder.loadTexts: genEquipTrafficCryptoStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipTrafficCryptoStatusTable.setDescription('Traffic Crypto status table.')
genEquipTrafficCryptoStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 11, 10, 11, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipTrafficCryptoStatusId"))
if mibBuilder.loadTexts: genEquipTrafficCryptoStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipTrafficCryptoStatusEntry.setDescription('Traffic Crypto status table Entry')
genEquipTrafficCryptoStatusId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 10, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipTrafficCryptoStatusId.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipTrafficCryptoStatusId.setDescription('Traffic Crypto Status Intreface ID')
genEquipTrafficCryptoStatusValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 10, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-valid", 0), ("valid", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipTrafficCryptoStatusValid.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipTrafficCryptoStatusValid.setDescription('Crypto Interface Validation State.')
genEquipTrafficCryptoStatusMkeyTimeExpire = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 10, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipTrafficCryptoStatusMkeyTimeExpire.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipTrafficCryptoStatusMkeyTimeExpire.setDescription('Number of days Mkey to expire.')
genEquipMngSwFileTransferStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 19), )
if mibBuilder.loadTexts: genEquipMngSwFileTransferStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwFileTransferStatusTable.setDescription('This table shows the status of the current software version file transfer operation.')
genEquipMngSwFileTransferStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 19, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipMngSwFileTransferStatusIndex"))
if mibBuilder.loadTexts: genEquipMngSwFileTransferStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwFileTransferStatusEntry.setDescription('Entry containing the info of software management file transfer status.')
genEquipMngSwFileTransferStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 19, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwFileTransferStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwFileTransferStatusIndex.setDescription('The index of the table..')
genEquipMngSwFileTransferStatusResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ready", 0), ("downloadStarted", 1), ("verifyingDownloadFiles", 2), ("downloadInProgress", 3), ("downloadSuccess", 4), ("downloadFailure", 5), ("allComponentsExist", 6), ("versionIncompatibleWithSystem", 7), ("incompleteFileSet", 8), ("componentUnsupportedByHw", 9), ("corruptSwFiles", 10), ("missingDependencies", 11), ("downloadCancelled", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwFileTransferStatusResult.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwFileTransferStatusResult.setDescription('Status of the current file transfer operation.')
genEquipMngSwFileTransferPercentageDone = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 19, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwFileTransferPercentageDone.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwFileTransferPercentageDone.setDescription('An indication of the progress of the process of the current file transfer operation.')
genEquipMngSwFileTransferPercentageDoneStandBy = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 19, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwFileTransferPercentageDoneStandBy.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwFileTransferPercentageDoneStandBy.setDescription('An indication of the progress of the process of the current internal file transfer operation.')
genEquipMngSwFileTransferStatusResultStandBy = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 19, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ready", 0), ("download-started", 1), ("verifying-download-files", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwFileTransferStatusResultStandBy.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwFileTransferStatusResultStandBy.setDescription('Status of the current internal file transfer operation.')
genEquipMngSwInstallStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 20), )
if mibBuilder.loadTexts: genEquipMngSwInstallStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwInstallStatusTable.setDescription('This table shows the status of the current software version installation operation.')
genEquipMngSwInstallStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 20, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipMngSwInstallStatusIndex"))
if mibBuilder.loadTexts: genEquipMngSwInstallStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwInstallStatusEntry.setDescription('Entry containing the info of software installation status.')
genEquipMngSwInstallStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwInstallStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwInstallStatusIndex.setDescription('The index of the table..')
genEquipMngSwInstallStatusResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ready", 0), ("installationStarted", 1), ("verifyingInstallationFiles", 2), ("installationInProgress", 3), ("installationSuccess", 4), ("installationPartialSuccess", 5), ("installationFailure", 6), ("incompleteSwVersion", 7), ("installationCancelled", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwInstallStatusResult.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwInstallStatusResult.setDescription('Status of the current installation operation.')
genEquipMngSwInstallPercentageDone = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 20, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwInstallPercentageDone.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwInstallPercentageDone.setDescription('An indication of the progress of the process of the current installation operation.')
genEquipMngSwInstallStatusResultStandBy = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ready", 0), ("installationStarted", 1), ("verifyingInstallationFiles", 2), ("installationInProgress", 3), ("installationSuccess", 4), ("installationPartialSuccess", 5), ("installationFailure", 6), ("incompleteSwVersion", 7), ("installationCancelled", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwInstallStatusResultStandBy.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwInstallStatusResultStandBy.setDescription('Status of the current file transfer operation.')
genEquipMngSwInstallPercentageDoneStandBy = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 20, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwInstallPercentageDoneStandBy.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwInstallPercentageDoneStandBy.setDescription('An indication of the progress of the process of the current installation operation.')
genEquipMngSwOperationTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 21), )
if mibBuilder.loadTexts: genEquipMngSwOperationTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwOperationTable.setDescription('This table allows downloading and installing SW versions.')
genEquipMngSwOperationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 21, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipMngSwOperationIndex"))
if mibBuilder.loadTexts: genEquipMngSwOperationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwOperationEntry.setDescription('Entry containing the info of software management operation table.')
genEquipMngSwOperationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwOperationIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwOperationIndex.setDescription('The index of the table..')
genEquipMngSwOperationOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noAction", 0), ("download", 1), ("install", 2), ("updateBackup", 3), ("swapBootSection", 4), ("abortTimer", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngSwOperationOperation.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwOperationOperation.setDescription('The operation to be performed: download, install, update backup, swap boot section, abort installation timer.')
genEquipMngSwOperationTimedInstallation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 21, 1, 3), NoYes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngSwOperationTimedInstallation.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwOperationTimedInstallation.setDescription('Whether to perform the installation after a configurable timer expires.')
genEquipMngSwSlotRunningVersionTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 22), )
if mibBuilder.loadTexts: genEquipMngSwSlotRunningVersionTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwSlotRunningVersionTable.setDescription('This table shows the versions currently running in cards installed in the system.')
genEquipMngSwSlotRunningVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 22, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipMngSwSlotRunningVersionSlotId"))
if mibBuilder.loadTexts: genEquipMngSwSlotRunningVersionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwSlotRunningVersionEntry.setDescription('This table entry shows the versions currently running in cards installed in the system.')
genEquipMngSwSlotRunningVersionSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwSlotRunningVersionSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwSlotRunningVersionSlotId.setDescription('The index of the table..')
genEquipMngSwSlotRunningVersionCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 22, 1, 2), InventoryCardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwSlotRunningVersionCardType.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwSlotRunningVersionCardType.setDescription('Type of card inserted in slot.')
genEquipMngSwSlotRunningVersionComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 22, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwSlotRunningVersionComponent.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwSlotRunningVersionComponent.setDescription('Name of SW functional component.')
genEquipMngSwSlotRunningVersionActualVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 22, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwSlotRunningVersionActualVersion.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwSlotRunningVersionActualVersion.setDescription('Version of running SW.')
genEquipMngSwIDUVersionsStandByTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 23), )
if mibBuilder.loadTexts: genEquipMngSwIDUVersionsStandByTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwIDUVersionsStandByTable.setDescription('This table shows the software versions residing in the standby unit.')
genEquipMngSwIDUVersionsStandByEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 23, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipMngSwIDUVersionsStandByIndex"))
if mibBuilder.loadTexts: genEquipMngSwIDUVersionsStandByEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwIDUVersionsStandByEntry.setDescription('This table entry shows the software versions residing in the standby unit.')
genEquipMngSwIDUVersionsStandByIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 23, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwIDUVersionsStandByIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwIDUVersionsStandByIndex.setDescription('mate rpm index.')
genEquipMngSwIDUVersionsStandByPackageName = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 23, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwIDUVersionsStandByPackageName.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwIDUVersionsStandByPackageName.setDescription('Name of the module which the software package belongs to.')
genEquipMngSwIDUVersionsStandByRunningVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 23, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwIDUVersionsStandByRunningVersion.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwIDUVersionsStandByRunningVersion.setDescription('Version currently running.')
genEquipMngSwIDUVersionsStandByInstalledVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 23, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwIDUVersionsStandByInstalledVersion.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwIDUVersionsStandByInstalledVersion.setDescription('Currently installed version; upon the appropriate reset this will become the running version.')
genEquipMngSwIDUVersionsStandByTargetDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 23, 1, 5), InventoryCardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwIDUVersionsStandByTargetDevice.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwIDUVersionsStandByTargetDevice.setDescription('The HW board in which the SW module from the mate is running.')
genEquipMngSwIDUVersionsStandByDownloadedPackage = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 23, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwIDUVersionsStandByDownloadedPackage.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwIDUVersionsStandByDownloadedPackage.setDescription('Version that was downloaded from server upon installation, it will become the installed version.')
genEquipMngSwIDUVersionsStandByResetType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 23, 1, 7), VmResetType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngSwIDUVersionsStandByResetType.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwIDUVersionsStandByResetType.setDescription('Minimum level of reset required to update the software in the relevant module.')
genEquipMngSwWatchdogAdmin = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 1, 35), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngSwWatchdogAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngSwWatchdogAdmin.setDescription('Enables/Disables the watchdog timer for the application.')
genEquipMngCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2))
genEquipMngCfgBackupStatus = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 1), ProgressStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngCfgBackupStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgBackupStatus.setDescription('This parameter shows the current state of the configuration backup files creation in the IDU. Possible values are: - ready(0) - inProgress(1) - success(2) - failure(3)')
genEquipMngCfgRestoreStatus = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 2), ProgressStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngCfgRestoreStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgRestoreStatus.setDescription('This parameter shows the current state of configuration restoring from downloaded backup files. Possible values are: - ready(0) - inProgress(1) - success(2) - failure(3)')
genEquipMngCfgUploadStatus = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 3), ProgressStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngCfgUploadStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgUploadStatus.setDescription('This parameter shows the current state of configuration backup files transfer from IDU to external FTP site. Possible values are: - ready(0) - inProgress(1) - success(2) - failure(3)')
genEquipMngCfgDownloadStatus = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 4), ProgressStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngCfgDownloadStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgDownloadStatus.setDescription('This parameter shows the current state of configuration backup files transfer from external FTP site to IDU. Possible values are: - ready(0) - inProgress(1) - success(2) - failure(3)')
genEquipMngCfgCommand = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("no-operation", 0), ("backup", 1), ("restore", 2), ("upload", 3), ("download", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngCfgCommand.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgCommand.setDescription('The command to be executed to backup/restore or upload/download configuration. If there is more then 1 slot in the NE, it is done for all the shelf.')
genEquipMngCfgEthernetSwitchStoreConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 6), OffOn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngCfgEthernetSwitchStoreConfiguration.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgEthernetSwitchStoreConfiguration.setDescription('This parameter writes the current configuration in the database. This command should be called after any change to the following sections: - Bridge configuration - WaySide configuration - Protection configuration.')
genEquipMngCfgSetToDefaultKeepIp = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 7), OffOn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngCfgSetToDefaultKeepIp.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgSetToDefaultKeepIp.setDescription('Set to Default configuration without changing the network parameters such as IP address, and subnet mask.')
genEquipMngCfgCliScriptFileName = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngCfgCliScriptFileName.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgCliScriptFileName.setDescription('The CLI script file name to be downloaded to the NE.')
genEquipMngCfgGeneric = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 10))
genEquipMngCfgBackupProgress = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngCfgBackupProgress.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgBackupProgress.setDescription('An indication of the progress of the backup operation process.')
genEquipMngCfgTimeToInstallation = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngCfgTimeToInstallation.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgTimeToInstallation.setDescription('A counter indicating the time left until installation begins.')
genEquipMngCfgFileTransferTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 11), )
if mibBuilder.loadTexts: genEquipMngCfgFileTransferTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgFileTransferTable.setDescription('This table allows configuring the details of the external server where configuration should be located.')
genEquipMngCfgFileTransferEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 11, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipMngCfgFileTransferIndex"))
if mibBuilder.loadTexts: genEquipMngCfgFileTransferEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgFileTransferEntry.setDescription('This table entry allows configuring the details of the external server where configuration should be located.')
genEquipMngCfgFileTransferIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngCfgFileTransferIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgFileTransferIndex.setDescription('Index of the table.')
genEquipMngCfgFileTransferProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 11, 1, 2), FtpProtocolType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngCfgFileTransferProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgFileTransferProtocol.setDescription('The protocol to use to transfer the files between the system and an external computer.')
genEquipMngCfgFileTransferUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 11, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngCfgFileTransferUserName.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgFileTransferUserName.setDescription('User name for access to the configuration files location.')
genEquipMngCfgFileTransferPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 11, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngCfgFileTransferPassword.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgFileTransferPassword.setDescription('Password for access to the configuration files location.')
genEquipMngCfgFileTransferAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 11, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngCfgFileTransferAddress.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgFileTransferAddress.setDescription('IP address of the computer where configuration files are to be transferred to/from.')
genEquipMngCfgFileTransferPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 11, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngCfgFileTransferPath.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgFileTransferPath.setDescription('Location of the files in the external server.')
genEquipMngCfgFileTransferFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 11, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngCfgFileTransferFileName.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgFileTransferFileName.setDescription('Name of the file in server.')
genEquipMngCfgFileTransferIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 11, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngCfgFileTransferIpv6Address.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgFileTransferIpv6Address.setDescription("IPv6 Server's address where files will be transferred to/from.")
genEquipMngCfgFileTransferStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 12), )
if mibBuilder.loadTexts: genEquipMngCfgFileTransferStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgFileTransferStatusTable.setDescription('This table shows the status of the current configuration file transfer operation.')
genEquipMngCfgFileTransferStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 12, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipMngCfgFileTransferStatusIndex"))
if mibBuilder.loadTexts: genEquipMngCfgFileTransferStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgFileTransferStatusEntry.setDescription('This table entry shows the status of the current configuration file transfer operation.')
genEquipMngCfgFileTransferStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngCfgFileTransferStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgFileTransferStatusIndex.setDescription('Index of the table.')
genEquipMngCfgFileTransferStatusPercentageDone = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngCfgFileTransferStatusPercentageDone.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgFileTransferStatusPercentageDone.setDescription('An indication of the progress of the process of the current file transfer operation.')
genEquipMngCfgFileTransferStatusResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 12, 1, 3), FileTransferStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngCfgFileTransferStatusResult.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgFileTransferStatusResult.setDescription('Status of the current file transfer operation.')
genEquipMngCfgOperationTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 13), )
if mibBuilder.loadTexts: genEquipMngCfgOperationTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgOperationTable.setDescription('This table allows creating, restoring, transferring and deleting configuration files.')
genEquipMngCfgOperationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 13, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipMngCfgOperationIndex"))
if mibBuilder.loadTexts: genEquipMngCfgOperationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgOperationEntry.setDescription('This table entry allows creating, restoring, transferring and deleting configuration files.')
genEquipMngCfgOperationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngCfgOperationIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgOperationIndex.setDescription('Index of the table.')
genEquipMngCfgOperationOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 13, 1, 2), CfgOper()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngCfgOperationOperation.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgOperationOperation.setDescription('The operation to be performed: backup, restore, delete, import, export.')
genEquipMngCfgOperationFileNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngCfgOperationFileNumber.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgOperationFileNumber.setDescription('A number from 1 to 3 to identify different restoration files.')
genEquipMngCfgOperationTimedInstallation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 13, 1, 4), NoYes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngCfgOperationTimedInstallation.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgOperationTimedInstallation.setDescription('Whether to install immediately or following a countdown from a defined counter.')
genEquipMngCfgOperationTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 13, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngCfgOperationTimer.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgOperationTimer.setDescription('A timer which determines the time to installation.')
genEquipMngCfgOperationSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 13, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngCfgOperationSlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgOperationSlotNumber.setDescription('Slot number.')
genEquipMngCfgConfigurationFilesTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 14), )
if mibBuilder.loadTexts: genEquipMngCfgConfigurationFilesTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgConfigurationFilesTable.setDescription('This table shows the status of the current configuration management operation.')
genEquipMngCfgConfigurationFilesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 14, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipMngCfgConfigurationFilesIndex"))
if mibBuilder.loadTexts: genEquipMngCfgConfigurationFilesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgConfigurationFilesEntry.setDescription('This table entry shows the status of the current configuration file transfer operation.')
genEquipMngCfgConfigurationFilesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngCfgConfigurationFilesIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgConfigurationFilesIndex.setDescription('Index of the table.')
genEquipMngCfgConfigurationFilesFileNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngCfgConfigurationFilesFileNumber.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgConfigurationFilesFileNumber.setDescription('A number from 1 to 3 to identify different restoration files.')
genEquipMngCfgConfigurationFilesSystemType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 14, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngCfgConfigurationFilesSystemType.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgConfigurationFilesSystemType.setDescription('Type of product from which the backup file was created.')
genEquipMngCfgConfigurationFilesSWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 14, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngCfgConfigurationFilesSWVersion.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgConfigurationFilesSWVersion.setDescription('Software version of the system from which the backup file was created.')
genEquipMngCfgConfigurationFilesTimeDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 14, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngCfgConfigurationFilesTimeDate.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgConfigurationFilesTimeDate.setDescription('Time and date of creation of the file.')
genEquipMngCfgConfigurationFilesSystemIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 14, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngCfgConfigurationFilesSystemIP.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgConfigurationFilesSystemIP.setDescription('IP address of the unit from which the backup file was created.')
genEquipMngCfgConfigurationFilesCardsConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 14, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngCfgConfigurationFilesCardsConfigured.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgConfigurationFilesCardsConfigured.setDescription('Types of cards for which configuration values exist in the file; when restoring other card types will get default values.')
genEquipMngCfgConfigurationFilesSystemID = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 14, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngCfgConfigurationFilesSystemID.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgConfigurationFilesSystemID.setDescription('System ID of the unit from which the backup file was created.')
genEquipMngCfgFileRestoreStatus = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 20), FileRestoreStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngCfgFileRestoreStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgFileRestoreStatus.setDescription('Status of the operation of configuration restore from restore point.')
genEquipMngCfgFileTransferStatus = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ready", 0), ("download-started", 1), ("verifying-download-files", 2), ("download-in-progress", 3), ("download-success", 4), ("download-failure", 5), ("all-components-exist", 6), ("version-incompatible-with-system", 7), ("incomplete-file-set", 8), ("component-unsupported-by-hw", 9), ("corrupt-sw-files", 10), ("missing-dependencies", 11), ("download-cancelled", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngCfgFileTransferStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCfgFileTransferStatus.setDescription('Status of the operation of configuration restore from restore point.')
genEquipMngFileTransfer = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 4, 3))
genEquipMngFileTransferFileTypeOper = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("no-operation", 0), ("download-configuration", 1), ("download-certificate", 2), ("download-warning-banner", 3), ("download-cli-script", 4), ("upload-configuration", 5), ("upload-csr-file", 6), ("upload-unit-info", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngFileTransferFileTypeOper.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngFileTransferFileTypeOper.setDescription("Operation for the file type to be transferred between the IDU and the external server. The options with prefix 'download' are files to be transferred from the server to the IDU. The options with prefix 'upload' are files to be transferred from the IDU to the server. To download IDU certificate, the OIDs genEquipSecurityCfgSecurityFileName, genEquipSecurityCfgSecurityFileFormat and genEquipSecurityCfgSecurityFileType should be set prior the operation of download security file. To upload CSR file, the OID genEquipSecurityCfgSecurityFileName should be set prior the operation of upload CSR file. To download CLI string, the OID genEquipMngCfgCliScriptFileName should be set prior the operation of download cli-script. To download warning banner file, the OID genEquipSecurityCfgWarningBannerFName should be set prior the operation of download warning-banner.")
genEquipMngFileTransferDownloadConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 3, 2), ProgressStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngFileTransferDownloadConfigStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngFileTransferDownloadConfigStatus.setDescription('The operation status of download configuration, which is performed using genEquipMngFileTransferFileTypeOper')
genEquipMngFileTransferDownloadCertificateStatus = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 3, 3), ProgressStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngFileTransferDownloadCertificateStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngFileTransferDownloadCertificateStatus.setDescription('The operation status of download configuration, which is performed using genEquipMngFileTransferFileTypeOper')
genEquipMngFileTransferDownloadWarningBannerStatus = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 3, 4), ProgressStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngFileTransferDownloadWarningBannerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngFileTransferDownloadWarningBannerStatus.setDescription('The operation status of download warning banner, which is performed using genEquipMngFileTransferFileTypeOper')
genEquipMngFileTransferDownloadCliScriptStatus = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 3, 5), ProgressStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngFileTransferDownloadCliScriptStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngFileTransferDownloadCliScriptStatus.setDescription('TThe operation status of download cli script, which is performed using genEquipMngFileTransferFileTypeOper')
genEquipMngFileTransferUploadConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 3, 6), ProgressStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngFileTransferUploadConfigStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngFileTransferUploadConfigStatus.setDescription('The operation status of upload configuration, which is performed using genEquipMngFileTransferFileTypeOper')
genEquipMngFileTransferUploadCSRStatus = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 3, 7), ProgressStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngFileTransferUploadCSRStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngFileTransferUploadCSRStatus.setDescription('The operation status of upload CSR, which is performed using genEquipMngFileTransferFileTypeOper')
genEquipMngFileTransferUploadUnitInfoStatus = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 3, 8), ProgressStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngFileTransferUploadUnitInfoStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngFileTransferUploadUnitInfoStatus.setDescription('The operation status of upload unit info, which is performed using genEquipMngFileTransferFileTypeOper')
genEquipMngUnitInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 4, 4))
genEquipMngUnitInfoGeneric = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 4, 4, 1))
genEquipMngUnitInfoOperation = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 4, 1, 1), CfgUnitInfoOper()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngUnitInfoOperation.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngUnitInfoOperation.setDescription('Allows creating and exporting the unit information file.')
genEquipMngUnitInfoProgress = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngUnitInfoProgress.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngUnitInfoProgress.setDescription('Progress in percentage of the operation of the unit info file creation.')
genEquipMngUnitInfoStatus = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 4, 1, 3), ProgressStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngUnitInfoStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngUnitInfoStatus.setDescription('Status of the operation of the unit info file creation.')
genEquipMngCli = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 4, 5))
genEquipMngCliScriptOperation = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("no-operation", 0), ("import", 1), ("delete", 2), ("show", 3), ("execute", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngCliScriptOperation.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCliScriptOperation.setDescription('Allows importing, showing, deleting and executing CLI scripts.')
genEquipMngCliScriptOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 4, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ready", 0), ("executing", 1), ("failed", 2), ("success", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngCliScriptOperationStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngCliScriptOperationStatus.setDescription('Allows importing, showing, deleting and executing CLI scripts.')
genEquipMngUnitInfoFileTransferTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 4, 4, 2), )
if mibBuilder.loadTexts: genEquipMngUnitInfoFileTransferTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngUnitInfoFileTransferTable.setDescription('This table allows configuring the details of the external server which the unit info file will be expoted to.')
genEquipMngUnitInfoFileTransferEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 4, 4, 2, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipMngUnitInfoFileTransferIndex"))
if mibBuilder.loadTexts: genEquipMngUnitInfoFileTransferEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngUnitInfoFileTransferEntry.setDescription('This table entry allows configuring the details of the external server which the unit info file will be expoted to.')
genEquipMngUnitInfoFileTransferIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngUnitInfoFileTransferIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngUnitInfoFileTransferIndex.setDescription('Index of the table.')
genEquipMngUnitInfoFileTransferProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 4, 2, 1, 2), FtpProtocolType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngUnitInfoFileTransferProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngUnitInfoFileTransferProtocol.setDescription('The protocol to use to transfer the files between the system and an external computer.')
genEquipMngUnitInfoFileTransferUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 4, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngUnitInfoFileTransferUserName.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngUnitInfoFileTransferUserName.setDescription('User name for access to the files location.')
genEquipMngUnitInfoFileTransferPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 4, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngUnitInfoFileTransferPassword.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngUnitInfoFileTransferPassword.setDescription('Password for access to the files location.')
genEquipMngUnitInfoFileTransferAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 4, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngUnitInfoFileTransferAddress.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngUnitInfoFileTransferAddress.setDescription('IP address of the computer where the files are to be transferred to/from.')
genEquipMngUnitInfoFileTransferPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 4, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngUnitInfoFileTransferPath.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngUnitInfoFileTransferPath.setDescription('Desired location of the unit info file in external server.')
genEquipMngUnitInfoFileTransferFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 4, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngUnitInfoFileTransferFileName.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngUnitInfoFileTransferFileName.setDescription('Name of the file in server.')
genEquipMngUnitInfoFileTransferIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 4, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngUnitInfoFileTransferIpv6Address.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngUnitInfoFileTransferIpv6Address.setDescription("IPv6 Server's Address to which he file will be transferred.")
genEquipMngUnitInfoFileTransferStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 4, 4, 3), )
if mibBuilder.loadTexts: genEquipMngUnitInfoFileTransferStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngUnitInfoFileTransferStatusTable.setDescription('This table shows the status of the current configuration file transfer operation.')
genEquipMngUnitInfoFileTransferStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 4, 4, 3, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipMngUnitInfoFileTransferStatusIndex"))
if mibBuilder.loadTexts: genEquipMngUnitInfoFileTransferStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngUnitInfoFileTransferStatusEntry.setDescription('This table entry shows the status of the current configuration file transfer operation.')
genEquipMngUnitInfoFileTransferStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngUnitInfoFileTransferStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngUnitInfoFileTransferStatusIndex.setDescription('Index of the table.')
genEquipMngUnitInfoFileTransferStatusPercentageDone = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipMngUnitInfoFileTransferStatusPercentageDone.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngUnitInfoFileTransferStatusPercentageDone.setDescription('An indication of the progress of the process of the current file transfer operation.')
genEquipMngUnitInfoFileTransferStatusResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 4, 4, 3, 1, 3), ProgressStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipMngUnitInfoFileTransferStatusResult.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipMngUnitInfoFileTransferStatusResult.setDescription('Status of the current file transfer operation.')
genEquipDiagAndMaintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 10))
genEquipDiagAndMaintenanceRadioLoopbackTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipDiagAndMaintenanceRadioLoopbackTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipDiagAndMaintenanceRadioLoopbackTimeout.setDescription('Radio loopback timeout, in minutes. 0 means no timer.')
genEquipDiagAndMaintenanceLineLoopbackTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipDiagAndMaintenanceLineLoopbackTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipDiagAndMaintenanceLineLoopbackTimeout.setDescription('Line loopback timeout, in minutes. 0 means no timer.')
genEquipDiagAndMaintenanceSDHLoopbackTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 10, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipDiagAndMaintenanceSDHLoopbackTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipDiagAndMaintenanceSDHLoopbackTimeout.setDescription('STM-1/OC-3 line loopback timeout, in minutes. 0 means no timer.')
genEquipSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 11))
genEquipSecurityConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 11, 1))
genEquipSecurityCfgUploadPublicKeyStatus = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 1, 1), ProgressStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityCfgUploadPublicKeyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCfgUploadPublicKeyStatus.setDescription('The upload status of the Public key.')
genEquipSecurityCfgDownloadSecurityStatus = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 1, 2), ProgressStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityCfgDownloadSecurityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCfgDownloadSecurityStatus.setDescription('The download status of the digital certificate.')
genEquipSecurityCfgSecurityFileName = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityCfgSecurityFileName.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCfgSecurityFileName.setDescription('The certificate file name to be downloaded.')
genEquipSecurityCfgSecurityFileType = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("target-certificate", 0), ("target-ca-certificate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityCfgSecurityFileType.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCfgSecurityFileType.setDescription('The digital certificate file type.')
genEquipSecurityCfgSecurityFileFormat = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pem", 0), ("der", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityCfgSecurityFileFormat.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCfgSecurityFileFormat.setDescription('The certificate file format. .pem - (Privacy Enhanced Mail) Base64 encoded DER certificate, enclosed between -----BEGIN CERTIFICATE----- and -----END CERTIFICATE----- .der is a subset of Basic Encoding Rules (BER) providing for exactly one way to encode an ASN.1 value.')
genEquipSecurityCfgSecurityWebCertificateAdmin = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 1, 6), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityCfgSecurityWebCertificateAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCfgSecurityWebCertificateAdmin.setDescription('The admin state of the certificate.')
genEquipSecurityCfgWebProtocol = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("http", 1), ("https", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityCfgWebProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCfgWebProtocol.setDescription('Use unsecure http or secure https.')
genEquipSecurityCfgTelnetAdmin = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 1, 8), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityCfgTelnetAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCfgTelnetAdmin.setDescription('Enable or disable the Telnet server on the NE.')
genEquipSecurityCfgAutoLogOutPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityCfgAutoLogOutPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCfgAutoLogOutPeriod.setDescription('Auto logout period for CLI or web users, (1-60 seconds)')
genEquipSecurityXFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 11, 1, 10))
genEquipSecurityXFTPHostIP = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 1, 10, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityXFTPHostIP.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityXFTPHostIP.setDescription('The FTP/SFTP host IP address.')
genEquipSecurityXFTPHostPath = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 1, 10, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityXFTPHostPath.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityXFTPHostPath.setDescription('The FTP/SFTP host directory path.')
genEquipSecurityXFTPProtocol = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 1, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ftp", 0), ("sftp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityXFTPProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityXFTPProtocol.setDescription('Either FTP or SFTP to be used.')
genEquipSecurityXFTPUserName = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 1, 10, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityXFTPUserName.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityXFTPUserName.setDescription('FTP User name.')
genEquipSecurityXFTPPassword = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 1, 10, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityXFTPPassword.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityXFTPPassword.setDescription('FTP User password.')
genEquipSecurityCfgPassFirstLoginChange = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 1, 11), NoYes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityCfgPassFirstLoginChange.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCfgPassFirstLoginChange.setDescription("Define whether user's first login will be required to change it password or not")
genEquipSecurityCfgCSRCreation = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityCfgCSRCreation.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCfgCSRCreation.setDescription("This command create CSR file of the element. The file could be uploaded to external server by using the genEquipMngFileTransferFileTypeOper OID. The command syntax should be: <country_name> <state> <locality_name> <organization_name> <organization_unit_name> <common_name> <email_addr>. All the fields must be referred, for skipping on any field, use 'symbol instead'.")
genEquipSecurityCfgWarningBannerFName = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityCfgWarningBannerFName.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCfgWarningBannerFName.setDescription('The Warning Banner file name to be downloaded to the NE.')
genEquipSecurityConfigurationRadius = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 11, 1, 14))
genEquipSecurityConfigurationRadiusAdmin = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 1, 14, 1), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityConfigurationRadiusAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityConfigurationRadiusAdmin.setDescription('this parameter configures the admin state of the RADIUS protocol; when enabled, all users will be logged in via RADIUS server')
genEquipSecurityConfigurationRadiusServerIP = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 1, 14, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityConfigurationRadiusServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityConfigurationRadiusServerIP.setDescription('this parameter configures the IP address of the RADIUS server')
genEquipSecurityConfigurationRadiusSecret = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 1, 14, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityConfigurationRadiusSecret.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityConfigurationRadiusSecret.setDescription('this parameter configures the common secret between the agent and the RADIUS server')
genEquipSecurityConfigurationRadiusPort = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 1, 14, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityConfigurationRadiusPort.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityConfigurationRadiusPort.setDescription('this parameter configures the IP address of UDP port used for the RADIUS protocol')
genEquipSecurityConfigurationRadiusRetries = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 1, 14, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityConfigurationRadiusRetries.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityConfigurationRadiusRetries.setDescription('this parameter configures the number of times the agent will retry to communicate with the RADIUS server before declaring the server to be unreacheable')
genEquipSecurityConfigurationRadiusTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 1, 14, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityConfigurationRadiusTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityConfigurationRadiusTimeout.setDescription('this parameter configures the number of times the agent will retry to communicate with the RADIUS server before declaring the server to be unreacheable')
genEquipSecurityUsersAndGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 11, 2))
genEquipSecurityUsersTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 11, 2, 1), )
if mibBuilder.loadTexts: genEquipSecurityUsersTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityUsersTable.setDescription('User table.')
genEquipSecurityUsersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 11, 2, 1, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipSecurityUsersName"))
if mibBuilder.loadTexts: genEquipSecurityUsersEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityUsersEntry.setDescription('User table.')
genEquipSecurityUsersName = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 2, 1, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityUsersName.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityUsersName.setDescription('This value is the user name.')
genEquipSecurityUsersPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 2, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityUsersPasswd.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityUsersPasswd.setDescription("This value is the user's password. It is used only in the creation phase. To change the password, you need to use the genEquipSecurityUsersAndGroupsChangePasswd command")
genEquipSecurityUsersPriviledge = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("no-privilege-lvl", -1), ("viewer-user-lvl", 0), ("operator-user-lvl", 1), ("admin-user-lvl", 2), ("tech-user-lvl", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityUsersPriviledge.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityUsersPriviledge.setDescription('This value is the users privilege.')
genEquipSecurityUsersPasswdAging = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 90))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityUsersPasswdAging.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityUsersPasswdAging.setDescription("This value is the user's password aging time (in days). When response is 99999 the meaning is No Aging.")
genEquipSecurityUsersExprDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityUsersExprDate.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityUsersExprDate.setDescription("This value is the user's password expiration date. The value is presented in time_t format. When response is -1 the meaning is Never Expired.")
genEquipSecurityUsersLastLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityUsersLastLogin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityUsersLastLogin.setDescription('This value is the user last login date. Time in seconds since January 1, 1970 00:00 UTC.')
genEquipSecurityUsersRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 2, 1, 1, 30), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityUsersRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityUsersRowStatus.setDescription('This value is the status of the entry.')
genEquipSecurityUsersAndGroupsChangePasswd = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityUsersAndGroupsChangePasswd.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityUsersAndGroupsChangePasswd.setDescription("This command changes the user password at the command line. It takes all arguments as the command. It cannot be done through the table since it needs to provide the old password as well. The format is: '<username> <old-password> <new-password>' seperated with spaces.")
genEquipSecuritySNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 11, 3))
genEquipSecuritySNMPReadCommunity = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecuritySNMPReadCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecuritySNMPReadCommunity.setDescription('This is the SNMP Read community string')
genEquipSecuritySNMPWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecuritySNMPWriteCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecuritySNMPWriteCommunity.setDescription('This is the SNMP Write community string')
genEquipSecuritySNMPV3 = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 11, 3, 10))
genEquipSecuritySNMPV3AuthTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 11, 3, 10, 1), )
if mibBuilder.loadTexts: genEquipSecuritySNMPV3AuthTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecuritySNMPV3AuthTable.setDescription('Security General File Transfer Configuration Table.')
genEquipSecuritySNMPV3AuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 11, 3, 10, 1, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipSecuritySNMPV3AuthUserName"))
if mibBuilder.loadTexts: genEquipSecuritySNMPV3AuthEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecuritySNMPV3AuthEntry.setDescription('Security General File Transfer Configuration Table')
genEquipSecuritySNMPV3AuthUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 3, 10, 1, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecuritySNMPV3AuthUserName.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecuritySNMPV3AuthUserName.setDescription('This value is the V3 user name and the index of file v3 Authentication table.')
genEquipSecuritySNMPV3AuthPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 3, 10, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecuritySNMPV3AuthPassword.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecuritySNMPV3AuthPassword.setDescription('This value is file V3 user authentication password.')
genEquipSecuritySNMPV3AuthSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 3, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAuthNoPriv", 1), ("authNoPriv", 2), ("authPriv", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecuritySNMPV3AuthSecurityMode.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecuritySNMPV3AuthSecurityMode.setDescription("This is the user's security mode")
genEquipSecuritySNMPV3AuthEncryptionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 3, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("des", 2), ("aes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecuritySNMPV3AuthEncryptionMode.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecuritySNMPV3AuthEncryptionMode.setDescription('This is the V3 encryption mode.')
genEquipSecuritySNMPV3AuthAuthenticationAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 3, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("sha", 2), ("md5", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecuritySNMPV3AuthAuthenticationAlgorithm.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecuritySNMPV3AuthAuthenticationAlgorithm.setDescription('This is the V3 authentication algorithm.')
genEquipSecuritySNMPV3AuthAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 3, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readWrite", 1), ("readOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecuritySNMPV3AuthAccessMode.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecuritySNMPV3AuthAccessMode.setDescription('This is the V3 user access mode.')
genEquipSecuritySNMPV3AuthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 3, 10, 1, 1, 30), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecuritySNMPV3AuthRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecuritySNMPV3AuthRowStatus.setDescription('This is the row status.')
genEquipSecurityGen = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 11, 4))
genEquipSecurityGenFTConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 11, 4, 1), )
if mibBuilder.loadTexts: genEquipSecurityGenFTConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityGenFTConfigTable.setDescription('Security General File Transfer Configuration Table.')
genEquipSecurityGenFTConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 11, 4, 1, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipSecurityGenFTConfigIndex"))
if mibBuilder.loadTexts: genEquipSecurityGenFTConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityGenFTConfigEntry.setDescription('Security General File Transfer Configuration Table')
genEquipSecurityGenFTConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 4, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityGenFTConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityGenFTConfigIndex.setDescription('This value is the index of file transfer table.')
genEquipSecurityGenFTConfigProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ftp", 0), ("sftp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityGenFTConfigProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityGenFTConfigProtocol.setDescription('This value is file transfer protocol.')
genEquipSecurityGenFTConfigUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 4, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityGenFTConfigUsername.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityGenFTConfigUsername.setDescription("This value is the user's name")
genEquipSecurityGenFTConfigPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 4, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityGenFTConfigPassword.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityGenFTConfigPassword.setDescription('This value is the users password.')
genEquipSecurityGenFTConfigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 4, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityGenFTConfigAddress.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityGenFTConfigAddress.setDescription('This value is the server IP.')
genEquipSecurityGenFTConfigFilePath = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 4, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityGenFTConfigFilePath.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityGenFTConfigFilePath.setDescription('This value is file path.')
genEquipSecurityGenFTConfigFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 4, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityGenFTConfigFileName.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityGenFTConfigFileName.setDescription('This value is the file name.')
genEquipSecurityGenFTConfigIpV6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 4, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityGenFTConfigIpV6Address.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityGenFTConfigIpV6Address.setDescription('IP address v6 of the server, where the file are to be transferred to/from.')
genEquipSecurityGenFTStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 11, 4, 2), )
if mibBuilder.loadTexts: genEquipSecurityGenFTStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityGenFTStatusTable.setDescription('Security General File Transfer Status Table.')
genEquipSecurityGenFTStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 11, 4, 2, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipSecurityGenFTStatusIndex"))
if mibBuilder.loadTexts: genEquipSecurityGenFTStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityGenFTStatusEntry.setDescription('Security General File Transfer Status Table.')
genEquipSecurityGenFTStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 4, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityGenFTStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityGenFTStatusIndex.setDescription('This value is the index of file transfer status table.')
genEquipSecurityGenFTStatusStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 4, 2, 1, 2), FTStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityGenFTStatusStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityGenFTStatusStatus.setDescription('File transfer operation status.')
genEquipSecurityGenFTStatusProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityGenFTStatusProgress.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityGenFTStatusProgress.setDescription('Process prcentage')
genEquipSecurityGenFTOperations = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("upload-security-log", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityGenFTOperations.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityGenFTOperations.setDescription('File transfer operations')
genEquipSecurityGenImportExportAdmin = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 4, 12), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityGenImportExportAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityGenImportExportAdmin.setDescription('Admin for import or export security settings')
genEquipSecurityAccessControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 11, 5))
genEquipSecurityAccessControlProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 11, 5, 1), )
if mibBuilder.loadTexts: genEquipSecurityAccessControlProfileTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlProfileTable.setDescription('Security Access Control Profile Table.')
genEquipSecurityAccessControlProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 11, 5, 1, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipSecurityAccessControlProfileName"))
if mibBuilder.loadTexts: genEquipSecurityAccessControlProfileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlProfileEntry.setDescription('Security Access Control Profile Table Entry')
genEquipSecurityAccessControlProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 5, 1, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityAccessControlProfileName.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlProfileName.setDescription('User profile name.')
genEquipSecurityAccessControlProfileChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityAccessControlProfileChannel.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlProfileChannel.setDescription('Permitted access channels.')
genEquipSecurityAccessControlProfileUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityAccessControlProfileUsed.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlProfileUsed.setDescription('Indicate whether the profile in used')
genEquipSecurityAccessControlProfileSecurityWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 5, 1, 1, 4), RbacAccessLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityAccessControlProfileSecurityWrite.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlProfileSecurityWrite.setDescription('Security functional write access level.')
genEquipSecurityAccessControlProfileSecurityRead = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 5, 1, 1, 5), RbacAccessLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityAccessControlProfileSecurityRead.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlProfileSecurityRead.setDescription('Security functional read access level.')
genEquipSecurityAccessControlProfileMngWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 5, 1, 1, 6), RbacAccessLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityAccessControlProfileMngWrite.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlProfileMngWrite.setDescription('Management functional write access level.')
genEquipSecurityAccessControlProfileMngRead = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 5, 1, 1, 7), RbacAccessLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityAccessControlProfileMngRead.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlProfileMngRead.setDescription('Management functional read access level.')
genEquipSecurityAccessControlProfileRadioWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 5, 1, 1, 8), RbacAccessLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityAccessControlProfileRadioWrite.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlProfileRadioWrite.setDescription('Radio functional write access level.')
genEquipSecurityAccessControlProfileRadioRead = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 5, 1, 1, 9), RbacAccessLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityAccessControlProfileRadioRead.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlProfileRadioRead.setDescription('Radio functional read access level.')
genEquipSecurityAccessControlProfileTDMWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 5, 1, 1, 10), RbacAccessLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityAccessControlProfileTDMWrite.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlProfileTDMWrite.setDescription('TDM functional write access level.')
genEquipSecurityAccessControlProfileTDMRead = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 5, 1, 1, 11), RbacAccessLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityAccessControlProfileTDMRead.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlProfileTDMRead.setDescription('TDM functional read access level.')
genEquipSecurityAccessControlProfileEthWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 5, 1, 1, 12), RbacAccessLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityAccessControlProfileEthWrite.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlProfileEthWrite.setDescription('Ether functional write access level.')
genEquipSecurityAccessControlProfileEthRead = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 5, 1, 1, 13), RbacAccessLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityAccessControlProfileEthRead.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlProfileEthRead.setDescription('Ether functional read access level.')
genEquipSecurityAccessControlProfileSyncWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 5, 1, 1, 14), RbacAccessLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityAccessControlProfileSyncWrite.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlProfileSyncWrite.setDescription('Sync functional write access level.')
genEquipSecurityAccessControlProfileSyncRead = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 5, 1, 1, 15), RbacAccessLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityAccessControlProfileSyncRead.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlProfileSyncRead.setDescription('Sync functional read access level.')
genEquipSecurityAccessControlProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 5, 1, 1, 30), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityAccessControlProfileRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlProfileRowStatus.setDescription('Row Status for Profile table.')
genEquipSecurityAccessControlUserTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 11, 5, 2), )
if mibBuilder.loadTexts: genEquipSecurityAccessControlUserTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlUserTable.setDescription('Security Access Control User Table.')
genEquipSecurityAccessControlUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 11, 5, 2, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipSecurityAccessControlUserName"))
if mibBuilder.loadTexts: genEquipSecurityAccessControlUserEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlUserEntry.setDescription('Security Access Control User Table Entry')
genEquipSecurityAccessControlUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 5, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityAccessControlUserName.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlUserName.setDescription('User name.')
genEquipSecurityAccessControlUserProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 5, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityAccessControlUserProfile.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlUserProfile.setDescription("User's profile name.")
genEquipSecurityAccessControlUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 5, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityAccessControlUserPassword.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlUserPassword.setDescription("User's password")
genEquipSecurityAccessControlUserExpired = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 5, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityAccessControlUserExpired.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlUserExpired.setDescription('expired date of user account.')
genEquipSecurityAccessControlUserBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 5, 2, 1, 5), NoYes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityAccessControlUserBlock.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlUserBlock.setDescription('Block user account.')
genEquipSecurityAccessControlUserLastLogout = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 5, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityAccessControlUserLastLogout.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlUserLastLogout.setDescription('Current login indication.')
genEquipSecurityAccessControlUserLoggedIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 5, 2, 1, 7), NoYes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityAccessControlUserLoggedIn.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlUserLoggedIn.setDescription('Current login indication.')
genEquipSecurityAccessControlUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 5, 2, 1, 30), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityAccessControlUserRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlUserRowStatus.setDescription('Row Status for users table.')
genEquipSecurityAccessControlPassEnforceStrength = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 5, 11), NoYes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityAccessControlPassEnforceStrength.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlPassEnforceStrength.setDescription('Enforce strength password.')
genEquipSecurityAccessControlPassFirstLoginChange = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 5, 12), NoYes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityAccessControlPassFirstLoginChange.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlPassFirstLoginChange.setDescription('Password change for first login.')
genEquipSecurityAccessControlPassAging = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 5, 13), NoYes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityAccessControlPassAging.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlPassAging.setDescription('Password aging.')
genEquipSecurityAccessControlFailureLoginAttempt = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 5, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityAccessControlFailureLoginAttempt.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlFailureLoginAttempt.setDescription('Failure login threshold blocking user account.')
genEquipSecurityAccessControlBlockFailureLoginPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 5, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityAccessControlBlockFailureLoginPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlBlockFailureLoginPeriod.setDescription('Blocking period due to failure login.')
genEquipSecurityAccessControlBlockunusedAccount = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 5, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 90))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityAccessControlBlockunusedAccount.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlBlockunusedAccount.setDescription('Period time for block unused account.')
genEquipSecurityAccessControlBlockRootRemote = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 5, 17), NoYes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityAccessControlBlockRootRemote.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlBlockRootRemote.setDescription('Root remote access.')
genEquipSecurityProtocolsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 11, 6))
genEquipSecurityProtocolsControlAutoSessionTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityProtocolsControlAutoSessionTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityProtocolsControlAutoSessionTimeOut.setDescription('Logout session after incativity timeout.')
genEquipSecurityProtocolsControlSNMPAdmin = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 6, 2), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityProtocolsControlSNMPAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityProtocolsControlSNMPAdmin.setDescription('SNMP Admin.')
genEquipSecurityProtocolsControlSNMPOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 6, 3), DownUp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityProtocolsControlSNMPOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityProtocolsControlSNMPOperStatus.setDescription('SNMP Operational Status.')
genEquipSecurityProtocolsControlSNMPTrapVersion = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2", 2), ("v3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityProtocolsControlSNMPTrapVersion.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityProtocolsControlSNMPTrapVersion.setDescription('SNMP Trap version.')
genEquipSecurityProtocolsControlSNMPMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 6, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityProtocolsControlSNMPMIBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityProtocolsControlSNMPMIBVersion.setDescription('SNMP MIB version.')
genEquipSecurityProtocolsControlSNMPV1V2Blocked = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 6, 6), NoYes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityProtocolsControlSNMPV1V2Blocked.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityProtocolsControlSNMPV1V2Blocked.setDescription('SNMP V1V2 is blocked.')
genEquipSecurityProtocolsControlHTTPAdmin = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 6, 7), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityProtocolsControlHTTPAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityProtocolsControlHTTPAdmin.setDescription('HTTP Admin.')
genEquipSecurityMonitorAndLogs = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 11, 7))
genEquipSecurityConfigLogUploadConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 11, 7, 1), )
if mibBuilder.loadTexts: genEquipSecurityConfigLogUploadConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityConfigLogUploadConfigTable.setDescription('Config Log Upload Configuration.')
genEquipSecurityConfigLogUploadConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 11, 7, 1, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipSecurityConfigLogUploadConfigIndex"))
if mibBuilder.loadTexts: genEquipSecurityConfigLogUploadConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityConfigLogUploadConfigEntry.setDescription('Config Log Upload Configuration Table Entry')
genEquipSecurityConfigLogUploadConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityConfigLogUploadConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityConfigLogUploadConfigIndex.setDescription('Config Log Upload Configuration index. has Fixed value of 1')
genEquipSecurityConfigLogUploadConfigProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 7, 1, 1, 2), FtpProtocolType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityConfigLogUploadConfigProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityConfigLogUploadConfigProtocol.setDescription('Config Log Upload Configuration Protocol.')
genEquipSecurityConfigLogUploadConfigUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 7, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityConfigLogUploadConfigUsername.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityConfigLogUploadConfigUsername.setDescription('Config Log Upload Username')
genEquipSecurityConfigLogUploadConfigPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 7, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityConfigLogUploadConfigPassword.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityConfigLogUploadConfigPassword.setDescription('Config Log Upload Configuration Password.')
genEquipSecurityConfigLogUploadConfigIpaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 7, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityConfigLogUploadConfigIpaddress.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityConfigLogUploadConfigIpaddress.setDescription('Config Log Upload Configuration ip address (Ipv4).')
genEquipSecurityConfigLogUploadConfigPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 7, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityConfigLogUploadConfigPath.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityConfigLogUploadConfigPath.setDescription('Config Log Upload Configuration Path.')
genEquipSecurityConfigLogUploadConfigFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 7, 1, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityConfigLogUploadConfigFilename.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityConfigLogUploadConfigFilename.setDescription('Config Log Upload Configuration Filename.')
genEquipSecurityConfigLogUploadConfigIpV6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 7, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityConfigLogUploadConfigIpV6Address.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityConfigLogUploadConfigIpV6Address.setDescription('Config Log Upload Configuration ip address (Ipv6).')
genEquipSecurityConfigLogUploadStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 11, 7, 2), )
if mibBuilder.loadTexts: genEquipSecurityConfigLogUploadStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityConfigLogUploadStatusTable.setDescription('Config Log Upload Status.')
genEquipSecurityConfigLogUploadStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 11, 7, 2, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipSecurityConfigLogUploadStatusIndex"))
if mibBuilder.loadTexts: genEquipSecurityConfigLogUploadStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityConfigLogUploadStatusEntry.setDescription('Config Log Upload Status Table Entry')
genEquipSecurityConfigLogUploadStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityConfigLogUploadStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityConfigLogUploadStatusIndex.setDescription('Config Log Upload Status index. has Fixed value of 1')
genEquipSecurityConfigLogUploadStatusStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 7, 2, 1, 2), FileTransferStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityConfigLogUploadStatusStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityConfigLogUploadStatusStatus.setDescription('Config Log Upload Configuration Protocol.')
genEquipSecurityConfigLogUploadStatusPrcntg = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityConfigLogUploadStatusPrcntg.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityConfigLogUploadStatusPrcntg.setDescription('Progress status in percentage.')
genEquipSecurityConfigLogUpload = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 7, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("upload-security-log", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityConfigLogUpload.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityConfigLogUpload.setDescription('Configuration Log Upload.')
genEquipSecurityRadiusServer = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 11, 8))
genEquipSecurityRadiusServerConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 11, 8, 1), )
if mibBuilder.loadTexts: genEquipSecurityRadiusServerConfigurationTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityRadiusServerConfigurationTable.setDescription('Radius configuration table.')
genEquipSecurityRadiusServerConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 11, 8, 1, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipSecurityAccessControlRadiusServerId"))
if mibBuilder.loadTexts: genEquipSecurityRadiusServerConfigurationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityRadiusServerConfigurationEntry.setDescription('Radius configuration table Entry')
genEquipSecurityAccessControlRadiusServerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusServerId.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusServerId.setDescription('Server id: 1 - primary, 2-secondary')
genEquipSecurityAccessControlRadiusServerIpV4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 8, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusServerIpV4Address.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusServerIpV4Address.setDescription('The IP address of the RADIUS Server.')
genEquipSecurityAccessControlRadiusServerIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 8, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusServerIpv6Address.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusServerIpv6Address.setDescription('The IP address of the RADIUS Server')
genEquipSecurityAccessControlRadiusServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 8, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusServerPort.setDescription('The port ID of the RADIUS protocol in the RADIUS Server.')
genEquipSecurityAccessControlRadiusServerRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 8, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusServerRetries.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusServerRetries.setDescription('The number of times the agent will retry to communicate with the selected RADIUS server before declaring the server to be not reachable.')
genEquipSecurityAccessControlRadiusServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 8, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusServerTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusServerTimeout.setDescription('The timeout that the agent will wait in each communication with the selected RADIUS server before retrying if no response is received.')
genEquipSecurityAccessControlRadiusServerSharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 8, 1, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusServerSharedSecret.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusServerSharedSecret.setDescription('The shared secret of the Radius Server.')
genEquipSecurityAccessControlRadiusServerConnectivityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 8, 1, 1, 8), EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusServerConnectivityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusServerConnectivityStatus.setDescription('The connectivity status of the RADIUS server in the last login tried.')
genEquipSecurityAccessControlRadiusUsersTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 11, 8, 2), )
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusUsersTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusUsersTable.setDescription('Radius privilege table.')
genEquipSecurityAccessControlRadiusUsersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 11, 8, 2, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipSecurityAccessControlRadiusUsersId"))
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusUsersEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusUsersEntry.setDescription('Radius privilege table Entry')
genEquipSecurityAccessControlRadiusUsersId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 8, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusUsersId.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusUsersId.setDescription('User ID')
genEquipSecurityAccessControlRadiusUserInstances = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusUserInstances.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusUserInstances.setDescription('A number of the same connected users.')
genEquipSecurityAccessControlRadiusUsersAccessChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusUsersAccessChannels.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusUsersAccessChannels.setDescription('A bits stands for each access channel: serial-0, telnet-1, ssh-2, web-3')
genEquipSecurityAccessControlRadiusUsersEthReadLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 8, 2, 1, 4), RaduisAcceaaLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusUsersEthReadLevel.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusUsersEthReadLevel.setDescription('The RADIUS permitted access for Ethernet Read Level functional group.')
genEquipSecurityAccessControlRadiusUsersEthWriteLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 8, 2, 1, 5), RaduisAcceaaLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusUsersEthWriteLevel.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusUsersEthWriteLevel.setDescription('The RADIUS permitted access for Ethernet Write Level functional group.')
genEquipSecurityAccessControlRadiusUsersMngReadLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 8, 2, 1, 6), RaduisAcceaaLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusUsersMngReadLevel.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusUsersMngReadLevel.setDescription('The RADIUS permitted access for MNG Read Level functional group.')
genEquipSecurityAccessControlRadiusUsersMngWriteLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 8, 2, 1, 7), RaduisAcceaaLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusUsersMngWriteLevel.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusUsersMngWriteLevel.setDescription('The RADIUS permitted access for MNG Write Level functional group.')
genEquipSecurityAccessControlRadiusUsersRadioReadLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 8, 2, 1, 8), RaduisAcceaaLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusUsersRadioReadLevel.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusUsersRadioReadLevel.setDescription('The RADIUS permitted access for Radio Read Level functional group.')
genEquipSecurityAccessControlRadiusUsersRadioWriteLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 8, 2, 1, 9), RaduisAcceaaLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusUsersRadioWriteLevel.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusUsersRadioWriteLevel.setDescription('The RADIUS permitted access for Radio Write Level functional group.')
genEquipSecurityAccessControlRadiusUsersSecurityReadLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 8, 2, 1, 10), RaduisAcceaaLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusUsersSecurityReadLevel.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusUsersSecurityReadLevel.setDescription('The RADIUS permitted access for Security Read Level functional group.')
genEquipSecurityAccessControlRadiusUsersSecurityWriteLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 8, 2, 1, 11), RaduisAcceaaLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusUsersSecurityWriteLevel.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusUsersSecurityWriteLevel.setDescription('The RADIUS permitted access for Security Write Level functional group.')
genEquipSecurityAccessControlRadiusUsersSyncReadLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 8, 2, 1, 12), RaduisAcceaaLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusUsersSyncReadLevel.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusUsersSyncReadLevel.setDescription('The RADIUS permitted access for Sync Read Level functional group.')
genEquipSecurityAccessControlRadiusUsersSyncWriteLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 8, 2, 1, 13), RaduisAcceaaLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusUsersSyncWriteLevel.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusUsersSyncWriteLevel.setDescription('The RADIUS permitted access for Sync Write Level functional group.')
genEquipSecurityAccessControlRadiusUsersTdmReadLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 8, 2, 1, 14), RaduisAcceaaLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusUsersTdmReadLevel.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusUsersTdmReadLevel.setDescription('The RADIUS permitted access for TDM Read Level functional group.')
genEquipSecurityAccessControlRadiusUsersTdmWriteLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 8, 2, 1, 15), RaduisAcceaaLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusUsersTdmWriteLevel.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityAccessControlRadiusUsersTdmWriteLevel.setDescription('The RADIUS permitted access for TDM Write Level functional group.')
genEquipSecurityRadiusAdmin = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 8, 10), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityRadiusAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityRadiusAdmin.setDescription('Control working withRadius Server.')
genEquipSecurityCertificate = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 11, 9))
genEquipSecurityCsrCertificateFileTransferSet = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 9, 1), CsrCertificateFTState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityCsrCertificateFileTransferSet.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCsrCertificateFileTransferSet.setDescription('CSR generate and Upload.')
genEquipSecurityCsrStatus = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 9, 2), FTStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityCsrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCsrStatus.setDescription('Status of last geneate and upload.')
genEquipSecurityCsrCertificateGenerateAndUploadPercentage = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityCsrCertificateGenerateAndUploadPercentage.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCsrCertificateGenerateAndUploadPercentage.setDescription('Percentage of last generate CSR and upload.')
genEquipSecurityCertificateInstallSet = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 9, 4), OffOn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityCertificateInstallSet.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCertificateInstallSet.setDescription('Certificate Install.')
genEquipSecurityCertificateDownloadStatus = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 9, 5), FTStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityCertificateDownloadStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCertificateDownloadStatus.setDescription('tatus of last certificate download.')
genEquipSecurityCertificateDownloadPercentage = MibScalar((1, 3, 6, 1, 4, 1, 2281, 10, 11, 9, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityCertificateDownloadPercentage.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCertificateDownloadPercentage.setDescription('Percentage of certificate download operation.')
genEquipSecurityCsrAttributesTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 11, 9, 10), )
if mibBuilder.loadTexts: genEquipSecurityCsrAttributesTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCsrAttributesTable.setDescription('CSR Attributes Table.')
genEquipSecurityCsrAttributesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 11, 9, 10, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipSecurityCsrAttributesIndex"))
if mibBuilder.loadTexts: genEquipSecurityCsrAttributesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCsrAttributesEntry.setDescription('CSR Attributes Table Entry')
genEquipSecurityCsrAttributesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 9, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityCsrAttributesIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCsrAttributesIndex.setDescription('Index to table, constant 1')
genEquipSecurityCsrAttributesCountry = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 9, 10, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityCsrAttributesCountry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCsrAttributesCountry.setDescription('The two-letter ISO abbreviation for your country (ISO3166-1) (example US).')
genEquipSecurityCsrAttributesLocality = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 9, 10, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityCsrAttributesLocality.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCsrAttributesLocality.setDescription('The city where your organization is legally located')
genEquipSecurityCsrAttributesState = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 9, 10, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityCsrAttributesState.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCsrAttributesState.setDescription('The state or province where your organization is legally located. Can not be abbreviated.')
genEquipSecurityCsrAttributesOrganization = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 9, 10, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityCsrAttributesOrganization.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCsrAttributesOrganization.setDescription('The exact legal name of your organization. Do not abbreviate your organization name.')
genEquipSecurityCsrAttributesOu = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 9, 10, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityCsrAttributesOu.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCsrAttributesOu.setDescription('Section of the organization. Example: Marketing.')
genEquipSecurityCsrAttributesCommonName = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 9, 10, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityCsrAttributesCommonName.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCsrAttributesCommonName.setDescription('The fully qualified domain name for your web server. This must be an exact match.')
genEquipSecurityCsrAttributesEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 9, 10, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityCsrAttributesEmail.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCsrAttributesEmail.setDescription('An email address used to contact your organization.')
genEquipSecurityCsrAttributesFileFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 9, 10, 1, 9), CsrFileFormat()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityCsrAttributesFileFormat.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCsrAttributesFileFormat.setDescription('CSR file format. PEM or DER.')
genEquipSecurityCsrUploadConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 11, 9, 11), )
if mibBuilder.loadTexts: genEquipSecurityCsrUploadConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCsrUploadConfigTable.setDescription('CSR (Certificate Request) Upload Configuration Table.')
genEquipSecurityCsrUploadConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 11, 9, 11, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipSecurityCsrUploadConfigIndex"))
if mibBuilder.loadTexts: genEquipSecurityCsrUploadConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCsrUploadConfigEntry.setDescription('CSR (Certificate Request) Upload Configuration Table Entry')
genEquipSecurityCsrUploadConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 9, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityCsrUploadConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCsrUploadConfigIndex.setDescription('CSR upload Configuration index. has Fixed value of 1')
genEquipSecurityCsrUploadConfigIpv4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 9, 11, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityCsrUploadConfigIpv4Address.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCsrUploadConfigIpv4Address.setDescription('IPv4 address of the server, where the file are to be transferred to/from.')
genEquipSecurityCsrUploadConfigIpV6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 9, 11, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityCsrUploadConfigIpV6Address.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCsrUploadConfigIpV6Address.setDescription('IPv6 address of the server, where the file are to be transferred to/from')
genEquipSecurityCsrUploadConfigTableUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 9, 11, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityCsrUploadConfigTableUsername.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCsrUploadConfigTableUsername.setDescription('User name for accesssing files in the server (User credentials to access server).')
genEquipSecurityCsrUploadConfigPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 9, 11, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityCsrUploadConfigPassword.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCsrUploadConfigPassword.setDescription('Password (User credentials to access server).')
genEquipSecurityCsrUploadConfigPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 9, 11, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityCsrUploadConfigPath.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCsrUploadConfigPath.setDescription('Location of file in the server (folder).')
genEquipSecurityCsrUploadConfigFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 9, 11, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityCsrUploadConfigFilename.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCsrUploadConfigFilename.setDescription('Filename in the server, where the file are to be transferred to/from.')
genEquipSecurityCertificateDownloadConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 11, 9, 12), )
if mibBuilder.loadTexts: genEquipSecurityCertificateDownloadConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCertificateDownloadConfigTable.setDescription('CSR (Certificate Request) Download Configuration Table.')
genEquipSecurityCertificateDownloadConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 11, 9, 12, 1), ).setIndexNames((0, "MWRM-UNIT-MIB", "genEquipSecurityCertificateDownloadConfigIndex"))
if mibBuilder.loadTexts: genEquipSecurityCertificateDownloadConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCertificateDownloadConfigEntry.setDescription('CSR (Certificate Request) Download Configuration Table Entry')
genEquipSecurityCertificateDownloadConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 9, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityCertificateDownloadConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCertificateDownloadConfigIndex.setDescription('Certificate download configuration index. has Fixed value of 1')
genEquipSecurityCertificateDownloadConfigIpv4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 9, 12, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityCertificateDownloadConfigIpv4Address.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCertificateDownloadConfigIpv4Address.setDescription('IPv4 address of the server, where the file are to be transferred to/from.')
genEquipSecurityCertificateDownloadConfigIpV6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 9, 12, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityCertificateDownloadConfigIpV6Address.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCertificateDownloadConfigIpV6Address.setDescription('IPv6 address of the server, where the file are to be transferred to/from')
genEquipSecurityCertificateDownloadConfigUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 9, 12, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityCertificateDownloadConfigUsername.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCertificateDownloadConfigUsername.setDescription('User name for accesssing files in the server (User credentials to access server).')
genEquipSecurityCertificateDownloadConfigPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 9, 12, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityCertificateDownloadConfigPassword.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCertificateDownloadConfigPassword.setDescription('Password (User credentials to access server).')
genEquipSecurityCertificateDownloadConfigPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 9, 12, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipSecurityCertificateDownloadConfigPath.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCertificateDownloadConfigPath.setDescription('Location of file in the server (folder).')
genEquipSecurityCertificateDownloadConfigFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 11, 9, 12, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipSecurityCertificateDownloadConfigFilename.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipSecurityCertificateDownloadConfigFilename.setDescription('Filename in the server, where the file are to be transferred to/from.')
mibBuilder.exportSymbols("MWRM-UNIT-MIB", genEquipSecurityGenFTStatusIndex=genEquipSecurityGenFTStatusIndex, genEquipUnitShelfAbcMuxAdmin=genEquipUnitShelfAbcMuxAdmin, genEquipUnitIDUPartNumber=genEquipUnitIDUPartNumber, genEquipMngFileTransferUploadUnitInfoStatus=genEquipMngFileTransferUploadUnitInfoStatus, DownUp=DownUp, genEquipUnitShelfTccStatusOperationalState=genEquipUnitShelfTccStatusOperationalState, genEquipCurrentAlarmCorrectiveActions=genEquipCurrentAlarmCorrectiveActions, TrailProtectedType=TrailProtectedType, OperState=OperState, genEquipUnitLicenseDateCode=genEquipUnitLicenseDateCode, genEquipSecurityFipsAdmin=genEquipSecurityFipsAdmin, genEquipMngFileTransfer=genEquipMngFileTransfer, FileRestoreStatus=FileRestoreStatus, genEquipMngSwIDUVersionsTable=genEquipMngSwIDUVersionsTable, genEquipTrapCfgMgrStatusChangeFilter=genEquipTrapCfgMgrStatusChangeFilter, genEquipMngCfgFileTransferIpv6Address=genEquipMngCfgFileTransferIpv6Address, genEquipSecurityCfgWarningBannerFName=genEquipSecurityCfgWarningBannerFName, genEquipUnitInfoNTPAdmin=genEquipUnitInfoNTPAdmin, genEquipUnitShelfSlotStatusSlotID=genEquipUnitShelfSlotStatusSlotID, genEquipUnitShelfTccConfigExpectedCardType=genEquipUnitShelfTccConfigExpectedCardType, genEquipUnitAlarmOutputStatus=genEquipUnitAlarmOutputStatus, genEquipMngSwFileTransferStatusEntry=genEquipMngSwFileTransferStatusEntry, genEquipMngCfgFileTransferUserName=genEquipMngCfgFileTransferUserName, genEquipMostSevereAlarm=genEquipMostSevereAlarm, RaduisAcceaaLevel=RaduisAcceaaLevel, genEquipTrapCfgMgrAdmin=genEquipTrapCfgMgrAdmin, genEquipSecuritySNMPV3AuthAuthenticationAlgorithm=genEquipSecuritySNMPV3AuthAuthenticationAlgorithm, genEquipSecurityCsrUploadConfigTableUsername=genEquipSecurityCsrUploadConfigTableUsername, genEquipMngCfgCommand=genEquipMngCfgCommand, genEquipMngUnitInfoFileTransferAddress=genEquipMngUnitInfoFileTransferAddress, genEquipSecurityConfigLogUploadStatusEntry=genEquipSecurityConfigLogUploadStatusEntry, genEquipUnitLicenseViolationStatus=genEquipUnitLicenseViolationStatus, genEquipSecuritySNMPV3AuthEncryptionMode=genEquipSecuritySNMPV3AuthEncryptionMode, genEquipUnitShelfManagmentSeverityMajor=genEquipUnitShelfManagmentSeverityMajor, genEquipSecurityCertificateDownloadConfigTable=genEquipSecurityCertificateDownloadConfigTable, genEquipSecurityAccessControlProfileName=genEquipSecurityAccessControlProfileName, genEquipEventLogCounter=genEquipEventLogCounter, genEquipMngCfgFileTransferTable=genEquipMngCfgFileTransferTable, genEquipUnitInventoryNG=genEquipUnitInventoryNG, genEquipUnitShelfManagmentSeverityCritical=genEquipUnitShelfManagmentSeverityCritical, genEquipSecurityCsrAttributesOu=genEquipSecurityCsrAttributesOu, genEquipMngSwSlotRunningVersionEntry=genEquipMngSwSlotRunningVersionEntry, genEquipSecurityConfigLogUploadConfigIpV6Address=genEquipSecurityConfigLogUploadConfigIpV6Address, genEquipUnitShelfTccStatusAllowedCardTypes=genEquipUnitShelfTccStatusAllowedCardTypes, genEquipDiagAndMaintenanceSDHLoopbackTimeout=genEquipDiagAndMaintenanceSDHLoopbackTimeout, genEquipUnitIduVoltageInput=genEquipUnitIduVoltageInput, genEquipSecurityConfigLogUpload=genEquipSecurityConfigLogUpload, genEquipDiversity=genEquipDiversity, genEquipUnitInfoNtpConfigVersion=genEquipUnitInfoNtpConfigVersion, genEquipUnitInfoTimeServicesIndex=genEquipUnitInfoTimeServicesIndex, genEquipEventLogSeverity=genEquipEventLogSeverity, genEquipMngCliScriptOperation=genEquipMngCliScriptOperation, genEquipSecurityConfigLogUploadConfigTable=genEquipSecurityConfigLogUploadConfigTable, genEquipUnitShelf=genEquipUnitShelf, genEquipMngUnitInfoFileTransferStatusResult=genEquipMngUnitInfoFileTransferStatusResult, genEquipUnitIDUSerialNumber=genEquipUnitIDUSerialNumber, genEquipSecurityGenFTConfigProtocol=genEquipSecurityGenFTConfigProtocol, genEquipUnitInfoTimeServicesUtcHours=genEquipUnitInfoTimeServicesUtcHours, genEquipSecurityAccessControlProfileSyncWrite=genEquipSecurityAccessControlProfileSyncWrite, genEquipCurrentAlarmSlotId=genEquipCurrentAlarmSlotId, genEquipDiversityRevertiveTimer=genEquipDiversityRevertiveTimer, genEquipSecurityAccessControlRadiusUsersTdmWriteLevel=genEquipSecurityAccessControlRadiusUsersTdmWriteLevel, genEquipMngCfgFileTransferPath=genEquipMngCfgFileTransferPath, genEquipUnitShelfTccStatusOccupancy=genEquipUnitShelfTccStatusOccupancy, genEquipMngFileTransferDownloadWarningBannerStatus=genEquipMngFileTransferDownloadWarningBannerStatus, genEquipUnitInfoNtpStatusEntry=genEquipUnitInfoNtpStatusEntry, genEquipEventLogEntry=genEquipEventLogEntry, genEquipUnitShelfManagmentSlotIp=genEquipUnitShelfManagmentSlotIp, genEquipSecurityConfigLogUploadConfigIndex=genEquipSecurityConfigLogUploadConfigIndex, genEquipSecurityRadiusServerConfigurationEntry=genEquipSecurityRadiusServerConfigurationEntry, genEquipUnitLicenseInfo=genEquipUnitLicenseInfo, genEquipMngUnitInfoFileTransferIndex=genEquipMngUnitInfoFileTransferIndex, genEquipSecurityAccessControlRadiusUsersRadioReadLevel=genEquipSecurityAccessControlRadiusUsersRadioReadLevel, genEquipMngSwDownloadStatus=genEquipMngSwDownloadStatus, genEquipSecurityCfgSecurityFileName=genEquipSecurityCfgSecurityFileName, genEquipMngSwTimerInstallationTimer=genEquipMngSwTimerInstallationTimer, genEquipUnitAlarmInputText=genEquipUnitAlarmInputText, genEquipSecurityGenFTConfigEntry=genEquipSecurityGenFTConfigEntry, genEquipSecurityAccessControlUserTable=genEquipSecurityAccessControlUserTable, genEquipSecurityAccessControlRadiusUsersEntry=genEquipSecurityAccessControlRadiusUsersEntry, genEquipSecurityGenFTStatusTable=genEquipSecurityGenFTStatusTable, genEquipUnitInfoTimeServicesDstOffset=genEquipUnitInfoTimeServicesDstOffset, genEquipMngSwUpgradeCommonRfuVersion=genEquipMngSwUpgradeCommonRfuVersion, genEquipProtectionRadioExcessiveBERSwitch=genEquipProtectionRadioExcessiveBERSwitch, genEquipSecurityCsrAttributesIndex=genEquipSecurityCsrAttributesIndex, genEquipInvGenTime=genEquipInvGenTime, genEquipUnitAlarmOutputGroup=genEquipUnitAlarmOutputGroup, genEquipTrapCfgMgrSeverityFilter=genEquipTrapCfgMgrSeverityFilter, genEquipUnitShelfManagmentMngSwCommand=genEquipUnitShelfManagmentMngSwCommand, genEquipUnitShelfManagmentCommunicationStatus=genEquipUnitShelfManagmentCommunicationStatus, genEquipSecuritySNMPReadCommunity=genEquipSecuritySNMPReadCommunity, genEquipTrapCfgMgrIP=genEquipTrapCfgMgrIP, genEquipMngSwTimerTimeToInstall=genEquipMngSwTimerTimeToInstall, genEquipSecurityAccessControlRadiusUsersMngReadLevel=genEquipSecurityAccessControlRadiusUsersMngReadLevel, genEquipSecuritySNMPV3AuthAccessMode=genEquipSecuritySNMPV3AuthAccessMode, genEquipSecurityAccessControlRadiusUsersAccessChannels=genEquipSecurityAccessControlRadiusUsersAccessChannels, genEquipUnitShelfTccStatusCardType=genEquipUnitShelfTccStatusCardType, genEquipMngCfgConfigurationFilesSystemID=genEquipMngCfgConfigurationFilesSystemID, genEquipUnitLicenseDemoAdmin=genEquipUnitLicenseDemoAdmin, genEquipCurrentAlarmDesc=genEquipCurrentAlarmDesc, genEquipSecurityAccessControlRadiusServerId=genEquipSecurityAccessControlRadiusServerId, genEquipSecurityCsrStatus=genEquipSecurityCsrStatus, genEquipSecuritySNMPWriteCommunity=genEquipSecuritySNMPWriteCommunity, genEquipProtectionRevertiveMinTimer=genEquipProtectionRevertiveMinTimer, genEquipMngUnitInfoFileTransferStatusIndex=genEquipMngUnitInfoFileTransferStatusIndex, genEquipUnitIduPowerSupply2AlarmAdmin=genEquipUnitIduPowerSupply2AlarmAdmin, genEquipSecurityAccessControlUserExpired=genEquipSecurityAccessControlUserExpired, genEquipSecurityAccessControlPassFirstLoginChange=genEquipSecurityAccessControlPassFirstLoginChange, genEquipSecurityXFTPUserName=genEquipSecurityXFTPUserName, genEquipSecurityConfigurationRadiusAdmin=genEquipSecurityConfigurationRadiusAdmin, genEquipSecurityUsersPasswdAging=genEquipSecurityUsersPasswdAging, genEquipFaultErrno=genEquipFaultErrno, CfgUnitInfoOper=CfgUnitInfoOper, genEquipUnitShelfPdcFanStatusPdcFanExMonitor=genEquipUnitShelfPdcFanStatusPdcFanExMonitor, genEquipMngCfgConfigurationFilesSWVersion=genEquipMngCfgConfigurationFilesSWVersion, genEquipMngCfgFileTransferStatusTable=genEquipMngCfgFileTransferStatusTable, genEquipMngSwSlotRunningVersionCardType=genEquipMngSwSlotRunningVersionCardType, genEquipSecurityGenFTConfigPassword=genEquipSecurityGenFTConfigPassword, genEquipSecurityCsrAttributesFileFormat=genEquipSecurityCsrAttributesFileFormat, genEquipUnitShelfTccStatusCommunication=genEquipUnitShelfTccStatusCommunication, genEquipSecurityAccessControlRadiusServerRetries=genEquipSecurityAccessControlRadiusServerRetries, genEquipSecurityRadiusServer=genEquipSecurityRadiusServer, genEquipUnitShelfPdcFanStatusPdcFanOccupancy=genEquipUnitShelfPdcFanStatusPdcFanOccupancy, genEquipUnitLongitude=genEquipUnitLongitude, genEquipCurrentAlarmUserText=genEquipCurrentAlarmUserText, genEquipMngSwIDUVersionsStandByResetType=genEquipMngSwIDUVersionsStandByResetType, genEquipUnitInfoTime=genEquipUnitInfoTime, genEquipSecurityProtocolsControl=genEquipSecurityProtocolsControl, genEquipEventLogLastChangeCounter=genEquipEventLogLastChangeCounter, genEquipMngSwIDUVersionsStandByRunningVersion=genEquipMngSwIDUVersionsStandByRunningVersion, genEquipSecurityCfgCSRCreation=genEquipSecurityCfgCSRCreation, genEquipSecurityConfigLogUploadConfigFilename=genEquipSecurityConfigLogUploadConfigFilename, genEquipInventoryCardName=genEquipInventoryCardName, genEquipProtectionManualSwitch=genEquipProtectionManualSwitch, genEquipUnitShelfManagmentSeverityWarning=genEquipUnitShelfManagmentSeverityWarning, genEquipAlarmConfigId=genEquipAlarmConfigId, genEquipMngCfgOperationTimer=genEquipMngCfgOperationTimer, genEquipSecurityAccessControlProfileRadioRead=genEquipSecurityAccessControlProfileRadioRead, genEquipSecurityProtocolsControlSNMPMIBVersion=genEquipSecurityProtocolsControlSNMPMIBVersion, genEquipSecurityAccessControlRadiusServerPort=genEquipSecurityAccessControlRadiusServerPort, genEquipSecurityGen=genEquipSecurityGen, genEquipTrapCfgMgrId=genEquipTrapCfgMgrId, genEquipMngSwIDUVersionsStandByTable=genEquipMngSwIDUVersionsStandByTable, genEquipUnitInfoTimeServicesDstStartMonth=genEquipUnitInfoTimeServicesDstStartMonth, genEquipSecurityCsrUploadConfigIndex=genEquipSecurityCsrUploadConfigIndex, genEquipSecurityGenFTConfigUsername=genEquipSecurityGenFTConfigUsername, genEquipMngUnitInfoOperation=genEquipMngUnitInfoOperation, genEquipUnitLicenseFeatureIsUsed=genEquipUnitLicenseFeatureIsUsed, genEquipSecurityAccessControlProfileEthWrite=genEquipSecurityAccessControlProfileEthWrite, genEquipSecurityAccessControlProfileEthRead=genEquipSecurityAccessControlProfileEthRead, genEquipUnitShelfManagmentSeveritySlot=genEquipUnitShelfManagmentSeveritySlot, genEquipMngCfgConfigurationFilesCardsConfigured=genEquipMngCfgConfigurationFilesCardsConfigured, genEquipUnitContactPerson=genEquipUnitContactPerson, genEquipUnitLicenseTdmInterfaceStandard=genEquipUnitLicenseTdmInterfaceStandard, genEquipTrapCfgMgrTable=genEquipTrapCfgMgrTable, genEquipSecurityAccessControlRadiusUsersEthReadLevel=genEquipSecurityAccessControlRadiusUsersEthReadLevel, genEquipSecurityCsrUploadConfigIpv4Address=genEquipSecurityCsrUploadConfigIpv4Address, genEquipSecurityGenFTOperations=genEquipSecurityGenFTOperations, genEquipProtectionMode=genEquipProtectionMode, genEquipUnitLatitude=genEquipUnitLatitude, SwCommand=SwCommand, MetricImperial=MetricImperial, genEquipMngSwInstallStatusResultStandBy=genEquipMngSwInstallStatusResultStandBy, genEquipSecurityGenFTConfigFileName=genEquipSecurityGenFTConfigFileName, genEquipUnitInfoTimeServicesDstEndDay=genEquipUnitInfoTimeServicesDstEndDay, genEquipSecurityCfgTelnetAdmin=genEquipSecurityCfgTelnetAdmin, genEquipUnitLicenseValidationNumber=genEquipUnitLicenseValidationNumber, genEquipSecurityMonitorAndLogs=genEquipSecurityMonitorAndLogs, genEquipSecurityAccessControlProfileTDMWrite=genEquipSecurityAccessControlProfileTDMWrite, EnableDisableSMI2=EnableDisableSMI2, genEquipMngSwTimeToInstall=genEquipMngSwTimeToInstall, genEquipMngSwInstallStatusIndex=genEquipMngSwInstallStatusIndex, genEquipSecurityAccessControlUserLoggedIn=genEquipSecurityAccessControlUserLoggedIn, genEquipAlarmServiceAffect=genEquipAlarmServiceAffect, genEquipAlarmConfigAdditionalText=genEquipAlarmConfigAdditionalText, genEquipMngCfgFileTransferStatusEntry=genEquipMngCfgFileTransferStatusEntry, genEquipSecuritySNMPV3AuthRowStatus=genEquipSecuritySNMPV3AuthRowStatus, genEquipMngSwDowngradeCommonRfuVersion=genEquipMngSwDowngradeCommonRfuVersion, genEquipUnitSwitchAppLicense=genEquipUnitSwitchAppLicense, genEquipSecurityConfigLogUploadConfigProtocol=genEquipSecurityConfigLogUploadConfigProtocol, genEquipTrapCfgMgrPort=genEquipTrapCfgMgrPort, genEquipSecurityProtocolsControlHTTPAdmin=genEquipSecurityProtocolsControlHTTPAdmin, genEquipUnitInfoNtpConfigIndex=genEquipUnitInfoNtpConfigIndex, genEquipUnitShelfSlotStatusOccupancy=genEquipUnitShelfSlotStatusOccupancy, genEquipUnitShelfSlotLabel=genEquipUnitShelfSlotLabel, genEquipUnitInfoTimeServicesUtcCurrentDateAndTime=genEquipUnitInfoTimeServicesUtcCurrentDateAndTime, genEquipDiversityPrimaryRadio=genEquipDiversityPrimaryRadio, genEquipSecurityCfgAutoLogOutPeriod=genEquipSecurityCfgAutoLogOutPeriod, genEquipUnitShelfManagmentSeverityTable=genEquipUnitShelfManagmentSeverityTable, genEquipMngSwOperationEntry=genEquipMngSwOperationEntry, genEquipUnitShelfReset=genEquipUnitShelfReset, genEquipSecurityGenFTStatusProgress=genEquipSecurityGenFTStatusProgress, genEquipProtectionAdmin=genEquipProtectionAdmin, genEquipMngSwIDUVersionsUpgradePackage=genEquipMngSwIDUVersionsUpgradePackage, genEquipSecurityConfigLogUploadConfigPassword=genEquipSecurityConfigLogUploadConfigPassword, genEquipUnitShelfTccConfigEntry=genEquipUnitShelfTccConfigEntry, genEquipSecurityCertificateDownloadConfigIpv4Address=genEquipSecurityCertificateDownloadConfigIpv4Address, genEquipMngSwFTPTimer=genEquipMngSwFTPTimer, genEquipAlarmConfigDefault=genEquipAlarmConfigDefault, genEquipUnitShelfTccConfigAdmin=genEquipUnitShelfTccConfigAdmin, genEquipSecurityCsrUploadConfigTable=genEquipSecurityCsrUploadConfigTable, genEquipUnitInfoNTPPollInterval=genEquipUnitInfoNTPPollInterval, genEquipUnitAlarmInput=genEquipUnitAlarmInput, genEquipUnitInfoNtpStatusPollInterval=genEquipUnitInfoNtpStatusPollInterval, genEquipCurrentAlarmEntry=genEquipCurrentAlarmEntry, genEquipSecurityRadiusServerConfigurationTable=genEquipSecurityRadiusServerConfigurationTable, genEquipMngUnitInfoFileTransferIpv6Address=genEquipMngUnitInfoFileTransferIpv6Address, genEquipSecurityCsrUploadConfigIpV6Address=genEquipSecurityCsrUploadConfigIpV6Address, genEquipMngCfgSetToDefaultKeepIp=genEquipMngCfgSetToDefaultKeepIp, genEquipMngCfgFileTransferStatusIndex=genEquipMngCfgFileTransferStatusIndex, genEquipSecurityXFTP=genEquipSecurityXFTP, genEquipMngSwTimerTimerAbort=genEquipMngSwTimerTimerAbort, genEquipUnitAlarmOutputEntry=genEquipUnitAlarmOutputEntry, genEquipSecurityCsrAttributesTable=genEquipSecurityCsrAttributesTable, genEquipSecurityCsrCertificateFileTransferSet=genEquipSecurityCsrCertificateFileTransferSet, genEquipMngSwIDUVersionsResetType=genEquipMngSwIDUVersionsResetType, genEquipSecurityRadiusAdmin=genEquipSecurityRadiusAdmin, genEquipInventorySerialNumber=genEquipInventorySerialNumber, genEquipUnitShelfMultiplexTrafficSource=genEquipUnitShelfMultiplexTrafficSource, genEquipPMGenTime=genEquipPMGenTime, genEquipEventLog=genEquipEventLog, genEquipSecurityAccessControlProfileTDMRead=genEquipSecurityAccessControlProfileTDMRead, genEquipUnitInventory=genEquipUnitInventory, genEquipDiversityForceActive=genEquipDiversityForceActive, TrailIfType=TrailIfType, genEquipMngSwInstallPercentageDoneStandBy=genEquipMngSwInstallPercentageDoneStandBy, genEquipInventorySlotIndex=genEquipInventorySlotIndex, FtpProtocolType=FtpProtocolType, genEquipSecurityAccessControlProfileRowStatus=genEquipSecurityAccessControlProfileRowStatus, genEquipMngUnitInfoFileTransferStatusEntry=genEquipMngUnitInfoFileTransferStatusEntry, genEquipEventLogUserText=genEquipEventLogUserText, genEquipMngUnitInfoProgress=genEquipMngUnitInfoProgress, genEquipSecurityAccessControlUserProfile=genEquipSecurityAccessControlUserProfile, genEquipSecurityAccessControlProfileTable=genEquipSecurityAccessControlProfileTable, genEquipProtectionRevertiveMaxNumOfTries=genEquipProtectionRevertiveMaxNumOfTries, genEquipTrapCfgMgrEntry=genEquipTrapCfgMgrEntry, genEquipMngSwSlotRunningVersionSlotId=genEquipMngSwSlotRunningVersionSlotId, genEquipUnitInfoNTPSync=genEquipUnitInfoNTPSync, genEquipSecurityUsersRowStatus=genEquipSecurityUsersRowStatus, genEquipUnitInfoNtpConfigServerIPaddress1=genEquipUnitInfoNtpConfigServerIPaddress1, GreenYellow=GreenYellow, Severity=Severity, genEquipMngSwFileTransferStatusTable=genEquipMngSwFileTransferStatusTable, genEquipSecurityXFTPPassword=genEquipSecurityXFTPPassword, genEquipUnitShelfSlotStatusCommunication=genEquipUnitShelfSlotStatusCommunication, SignalLevel=SignalLevel, genEquipUnitShelfSlotConfigExpectedCardType=genEquipUnitShelfSlotConfigExpectedCardType, genEquipMngCfgConfigurationFilesSystemIP=genEquipMngCfgConfigurationFilesSystemIP, genEquipSecurity=genEquipSecurity, genEquipUnitLicenseFeatureEntry=genEquipUnitLicenseFeatureEntry, genEquipSecurityConfiguration=genEquipSecurityConfiguration, genEquipSecurityGenFTConfigAddress=genEquipSecurityGenFTConfigAddress, genEquipSecurityCertificateInstallSet=genEquipSecurityCertificateInstallSet, genEquipMngSwFileTransferEntry=genEquipMngSwFileTransferEntry)
mibBuilder.exportSymbols("MWRM-UNIT-MIB", genEquipMngSwIDUVersionsInstalledVersion=genEquipMngSwIDUVersionsInstalledVersion, genEquipMngSwIDUVersionsCounter=genEquipMngSwIDUVersionsCounter, BerLevel=BerLevel, genEquipTrafficCryptoConfigId=genEquipTrafficCryptoConfigId, genEquipSecurityAccessControlRadiusServerSharedSecret=genEquipSecurityAccessControlRadiusServerSharedSecret, genEquipDiagAndMaintenanceLineLoopbackTimeout=genEquipDiagAndMaintenanceLineLoopbackTimeout, genEquipProtectionAspRevertive=genEquipProtectionAspRevertive, genEquipSecurityConfigLogUploadStatusIndex=genEquipSecurityConfigLogUploadStatusIndex, genEquipCurrentAlarmInstance=genEquipCurrentAlarmInstance, CfgOper=CfgOper, genEquipSecurityUsersLastLogin=genEquipSecurityUsersLastLogin, genEquipMngCfgFileTransferProtocol=genEquipMngCfgFileTransferProtocol, genEquipMngCfgFileTransferStatus=genEquipMngCfgFileTransferStatus, genEquipSecurityConfigurationRadiusRetries=genEquipSecurityConfigurationRadiusRetries, genEquipUnitShelfSlotStatusOperationalState=genEquipUnitShelfSlotStatusOperationalState, genEquipSecurityCsrUploadConfigEntry=genEquipSecurityCsrUploadConfigEntry, genEquipMngSwFileTransferUserName=genEquipMngSwFileTransferUserName, genEquipTrafficCryptoConfigBackupMkey=genEquipTrafficCryptoConfigBackupMkey, genEquipMngSwFileTransferPassword=genEquipMngSwFileTransferPassword, genEquipSecurityCfgSecurityWebCertificateAdmin=genEquipSecurityCfgSecurityWebCertificateAdmin, CardOccupancy=CardOccupancy, genEquipUnitDaylightSavingTimeEndMonth=genEquipUnitDaylightSavingTimeEndMonth, NoYes=NoYes, Exponent=Exponent, genEquipSecurityAccessControlRadiusServerConnectivityStatus=genEquipSecurityAccessControlRadiusServerConnectivityStatus, genEquipUnitLicenseTDMCapacity=genEquipUnitLicenseTDMCapacity, genEquipSecurityConfigLogUploadStatusPrcntg=genEquipSecurityConfigLogUploadStatusPrcntg, genEquipCurrentAlarmTable=genEquipCurrentAlarmTable, genEquipMngSwSlotRunningVersionTable=genEquipMngSwSlotRunningVersionTable, genEquipSecurityAccessControlBlockFailureLoginPeriod=genEquipSecurityAccessControlBlockFailureLoginPeriod, EnableDisable=EnableDisable, genEquipSecurityAccessControlRadiusUsersTdmReadLevel=genEquipSecurityAccessControlRadiusUsersTdmReadLevel, genEquipUnitLicenseFeatureIsAllowed=genEquipUnitLicenseFeatureIsAllowed, genEquipUnitShelfSlotConfigSlotID=genEquipUnitShelfSlotConfigSlotID, SlotId=SlotId, genEquipUnitShelfTccConfigTable=genEquipUnitShelfTccConfigTable, genEquipTrapCfgMgrCommunity=genEquipTrapCfgMgrCommunity, genEquipUnitIpAddressType=genEquipUnitIpAddressType, genEquipInventoryEntry=genEquipInventoryEntry, genEquipSecurityAccessControlProfileMngWrite=genEquipSecurityAccessControlProfileMngWrite, genEquipEventLogAdditionalInfo=genEquipEventLogAdditionalInfo, genEquipTrafficCryptoStatusTable=genEquipTrafficCryptoStatusTable, genEquipProtectionMateIPAddr=genEquipProtectionMateIPAddr, genEquipSecurityCertificateDownloadConfigPassword=genEquipSecurityCertificateDownloadConfigPassword, genEquipMngSwFileTransferStatusResult=genEquipMngSwFileTransferStatusResult, genEquipUnitCapacityLicense=genEquipUnitCapacityLicense, genEquipSecurityCertificateDownloadPercentage=genEquipSecurityCertificateDownloadPercentage, genEquipSecurityCertificateDownloadConfigPath=genEquipSecurityCertificateDownloadConfigPath, genEquipMngCfgRestoreStatus=genEquipMngCfgRestoreStatus, genEquipSecuritySNMPV3AuthSecurityMode=genEquipSecuritySNMPV3AuthSecurityMode, genEquipMngSwFileTransferPath=genEquipMngSwFileTransferPath, genEquipSecurityConfigurationRadiusSecret=genEquipSecurityConfigurationRadiusSecret, genEquipSecurityAccessControlRadiusUsersId=genEquipSecurityAccessControlRadiusUsersId, InventoryCardType=InventoryCardType, genEquipUnitInfoNtpStatusSyncServerIP=genEquipUnitInfoNtpStatusSyncServerIP, genEquipEventLogCorrectiveActions=genEquipEventLogCorrectiveActions, genEquipProtectionLockout=genEquipProtectionLockout, genEquipMngSwOperationTable=genEquipMngSwOperationTable, genEquipMngSwFileTransferIndex=genEquipMngSwFileTransferIndex, genEquipProtectionRevertivePrimaryIDU=genEquipProtectionRevertivePrimaryIDU, genEquipUnitShelfManagmentTable=genEquipUnitShelfManagmentTable, genEquipProtection=genEquipProtection, genEquipUnitAlarmInputTable=genEquipUnitAlarmInputTable, genEquipSecurityAccessControlProfileSecurityRead=genEquipSecurityAccessControlProfileSecurityRead, genEquipOperation=genEquipOperation, genEquipTrafficCryptoConfigRandKeyGen=genEquipTrafficCryptoConfigRandKeyGen, genEquipUnitAlarmInputCounter=genEquipUnitAlarmInputCounter, CsrCertificateFTState=CsrCertificateFTState, genEquipMngUnitInfoFileTransferProtocol=genEquipMngUnitInfoFileTransferProtocol, genEquipMngSwInstallStatusResult=genEquipMngSwInstallStatusResult, genEquipUnitShelfMaskUnderVoltageAlarmFirstPowerFeed=genEquipUnitShelfMaskUnderVoltageAlarmFirstPowerFeed, genEquipUnitInfoNGTdmInterfaceStandard=genEquipUnitInfoNGTdmInterfaceStandard, genEquipMngCfgConfigurationFilesFileNumber=genEquipMngCfgConfigurationFilesFileNumber, genEquipProtectionCopyToMateStatus=genEquipProtectionCopyToMateStatus, genEquipSecurityAccessControlProfileEntry=genEquipSecurityAccessControlProfileEntry, genEquipUnitShelfSlotConfigSlotReset=genEquipUnitShelfSlotConfigSlotReset, genEquipUnitShelfInstallation=genEquipUnitShelfInstallation, genEquipSecurityAccessControlRadiusServerTimeout=genEquipSecurityAccessControlRadiusServerTimeout, genEquipUnitIduPowerSupply1AlarmAdmin=genEquipUnitIduPowerSupply1AlarmAdmin, genEquipUnitShelfManagmentSlot=genEquipUnitShelfManagmentSlot, genEquipSecurityUsersAndGroups=genEquipSecurityUsersAndGroups, genEquipCurrentAlarm=genEquipCurrentAlarm, RadioId=RadioId, genEquipMngCfgOperationEntry=genEquipMngCfgOperationEntry, PmTableType=PmTableType, genEquipUnitExternalAlarms=genEquipUnitExternalAlarms, genEquipTrapCfg=genEquipTrapCfg, genEquipMngCfgGeneric=genEquipMngCfgGeneric, genEquipUnitInfoNG=genEquipUnitInfoNG, genEquipMngCfgDownloadStatus=genEquipMngCfgDownloadStatus, genEquipSecurityCsrAttributesEmail=genEquipSecurityCsrAttributesEmail, FTStatus=FTStatus, genEquipSecurityFipsStatus=genEquipSecurityFipsStatus, genEquipTrafficCryptoConfigConfigAdmin=genEquipTrafficCryptoConfigConfigAdmin, genEquipEventLogTable=genEquipEventLogTable, genEquipMngSwServerPassword=genEquipMngSwServerPassword, genEquipMngUnitInfoFileTransferTable=genEquipMngUnitInfoFileTransferTable, genEquipUnitAlarmOutputTable=genEquipUnitAlarmOutputTable, genEquipUnitInfoNTPServerIP=genEquipUnitInfoNTPServerIP, genEquipSecurityAccessControlRadiusUserInstances=genEquipSecurityAccessControlRadiusUserInstances, genEquipUnitShelfTccConfigSlotID=genEquipUnitShelfTccConfigSlotID, genEquipMngCfgConfigurationFilesEntry=genEquipMngCfgConfigurationFilesEntry, genEquipMngSwInstallStatus=genEquipMngSwInstallStatus, genEquipUnitGMTMins=genEquipUnitGMTMins, genEquipTrapCfgMgrName=genEquipTrapCfgMgrName, genEquipUnitShelfManagmentSlotPopulation=genEquipUnitShelfManagmentSlotPopulation, genEquipMngCfgOperationFileNumber=genEquipMngCfgOperationFileNumber, HalfFull=HalfFull, genEquipMngCfgConfigurationFilesTable=genEquipMngCfgConfigurationFilesTable, genEquipUnitInfoNtpStatusLockState=genEquipUnitInfoNtpStatusLockState, ProgressStatus=ProgressStatus, genEquipSecurityCertificate=genEquipSecurityCertificate, genEquipSecurityCfgWebProtocol=genEquipSecurityCfgWebProtocol, genEquipMngFileTransferFileTypeOper=genEquipMngFileTransferFileTypeOper, genEquipMngUnitInfoFileTransferStatusTable=genEquipMngUnitInfoFileTransferStatusTable, genEquipSecurityConfigLogUploadConfigEntry=genEquipSecurityConfigLogUploadConfigEntry, genEquipSecurityUsersAndGroupsChangePasswd=genEquipSecurityUsersAndGroupsChangePasswd, genEquipMngCfgTimeToInstallation=genEquipMngCfgTimeToInstallation, genEquipSecurityUsersPasswd=genEquipSecurityUsersPasswd, genEquipMngSwSlotRunningVersionActualVersion=genEquipMngSwSlotRunningVersionActualVersion, genEquipTrafficCryptoConfigTable=genEquipTrafficCryptoConfigTable, genEquipMngSwIDUVersionsStandByPackageName=genEquipMngSwIDUVersionsStandByPackageName, genEquipUnitLicenseFeatureId=genEquipUnitLicenseFeatureId, CsrFileFormat=CsrFileFormat, genEquipMngSwCommand=genEquipMngSwCommand, genEquipSecurityAccessControlRadiusServerIpV4Address=genEquipSecurityAccessControlRadiusServerIpV4Address, genEquipEventLogProbableCause=genEquipEventLogProbableCause, genEquipMngCfg=genEquipMngCfg, genEquipMngSwServerLogin=genEquipMngSwServerLogin, genEquipMngFileTransferDownloadCliScriptStatus=genEquipMngFileTransferDownloadCliScriptStatus, genEquipUnitShelfMaskUnderVoltageAlarmSecondPowerFeed=genEquipUnitShelfMaskUnderVoltageAlarmSecondPowerFeed, genEquipMngSw=genEquipMngSw, genEquipInventoryCardType=genEquipInventoryCardType, genEquipUnitShelfAbcMuxEntry=genEquipUnitShelfAbcMuxEntry, genEquipSecurityAccessControlUserEntry=genEquipSecurityAccessControlUserEntry, genEquipSecurityAccessControlRadiusServerIpv6Address=genEquipSecurityAccessControlRadiusServerIpv6Address, genEquipSecurityCertificateDownloadStatus=genEquipSecurityCertificateDownloadStatus, genEquipUnitDaylightSavingTimeOffset=genEquipUnitDaylightSavingTimeOffset, genEquipUnitInfoNtpConfigAdmin=genEquipUnitInfoNtpConfigAdmin, genEquipSecurityProtocolsControlSNMPV1V2Blocked=genEquipSecurityProtocolsControlSNMPV1V2Blocked, genEquipUnitLicenseAsymScripts=genEquipUnitLicenseAsymScripts, genEquipMngUnitInfoGeneric=genEquipMngUnitInfoGeneric, genEquipMngUnitInfoFileTransferFileName=genEquipMngUnitInfoFileTransferFileName, genEquipSecurityCsrUploadConfigPassword=genEquipSecurityCsrUploadConfigPassword, genEquipSecurityAccessControl=genEquipSecurityAccessControl, genEquipAlarmConfigDescr=genEquipAlarmConfigDescr, genEquipSecurityGenFTConfigIndex=genEquipSecurityGenFTConfigIndex, genEquipDiversityType=genEquipDiversityType, genEquipDiagAndMaintenance=genEquipDiagAndMaintenance, genEquipDiagAndMaintenanceRadioLoopbackTimeout=genEquipDiagAndMaintenanceRadioLoopbackTimeout, genEquipUnitInfoNtpConfigEntry=genEquipUnitInfoNtpConfigEntry, genEquipSecurityProtocolsControlSNMPOperStatus=genEquipSecurityProtocolsControlSNMPOperStatus, genEquipMngSwFileTransferIpv6Address=genEquipMngSwFileTransferIpv6Address, genEquipSecuritySNMP=genEquipSecuritySNMP, genEquipMngSwTimerTable=genEquipMngSwTimerTable, genEquipUnitInfoTimeServicesUtcMinutes=genEquipUnitInfoTimeServicesUtcMinutes, genEquipUnitAlarmOutputAdmin=genEquipUnitAlarmOutputAdmin, genEquipMngFileTransferUploadCSRStatus=genEquipMngFileTransferUploadCSRStatus, genEquipMngUnitInfoFileTransferEntry=genEquipMngUnitInfoFileTransferEntry, genEquipUnitInfoTimeServicesTable=genEquipUnitInfoTimeServicesTable, genEquipMngCfgOperationTimedInstallation=genEquipMngCfgOperationTimedInstallation, genEquipUnitLicenseCutThrough=genEquipUnitLicenseCutThrough, genEquipUnitLicenseSyncU=genEquipUnitLicenseSyncU, genEquipCurrentAlarmModule=genEquipCurrentAlarmModule, genEquipMIBVersion=genEquipMIBVersion, genEquipSecurityCsrUploadConfigFilename=genEquipSecurityCsrUploadConfigFilename, genEquipUnitACMLicense=genEquipUnitACMLicense, genEquipUnitAlarmInputState=genEquipUnitAlarmInputState, genEquipUnitShelfSlotConfigEntry=genEquipUnitShelfSlotConfigEntry, genEquipCurrentAlarmName=genEquipCurrentAlarmName, genEquipSecurityGenFTStatusEntry=genEquipSecurityGenFTStatusEntry, genEquipSecurityAccessControlUserRowStatus=genEquipSecurityAccessControlUserRowStatus, genEquipCurrentAlarmId=genEquipCurrentAlarmId, genEquipUnitInfo=genEquipUnitInfo, genEquipFaultErrDescr=genEquipFaultErrDescr, genEquipMngCfgOperationIndex=genEquipMngCfgOperationIndex, genEquipProtectionMultiUnitLAGAdmin=genEquipProtectionMultiUnitLAGAdmin, genEquipSecurityCfgSecurityFileType=genEquipSecurityCfgSecurityFileType, genEquipSecurityAccessControlFailureLoginAttempt=genEquipSecurityAccessControlFailureLoginAttempt, genEquipUnit=genEquipUnit, genEquipSecurityAccessControlUserLastLogout=genEquipSecurityAccessControlUserLastLogout, LicenseGeneric=LicenseGeneric, genEquipUnitLicenseType=genEquipUnitLicenseType, genEquipUnitShelfManagmentSeverityMinor=genEquipUnitShelfManagmentSeverityMinor, genEquipCurrentAlarmLastChangeCounter=genEquipCurrentAlarmLastChangeCounter, genEquipMngSwInstalledRfuVersion=genEquipMngSwInstalledRfuVersion, genEquipLastCfgTimeStamp=genEquipLastCfgTimeStamp, genEquipSecurityProtocolsControlSNMPTrapVersion=genEquipSecurityProtocolsControlSNMPTrapVersion, genEquipSecurityAccessControlRadiusUsersSyncReadLevel=genEquipSecurityAccessControlRadiusUsersSyncReadLevel, RbacAccessLevel=RbacAccessLevel, genEquipMngSwFileTransferPercentageDoneStandBy=genEquipMngSwFileTransferPercentageDoneStandBy, genEquipSecurityAccessControlRadiusUsersMngWriteLevel=genEquipSecurityAccessControlRadiusUsersMngWriteLevel, genEquipMngCfgFileTransferIndex=genEquipMngCfgFileTransferIndex, genEquipUnitLicenseCode=genEquipUnitLicenseCode, genEquipUnitLicensePerUsage=genEquipUnitLicensePerUsage, genEquipUnitInfoNtpConfigTable=genEquipUnitInfoNtpConfigTable, genEquipUnitShelfSlotConfigAdmin=genEquipUnitShelfSlotConfigAdmin, genEquipMngCfgUploadStatus=genEquipMngCfgUploadStatus, SupportedNotsupported=SupportedNotsupported, genEquipMngSwOperationOperation=genEquipMngSwOperationOperation, genEquipTrafficCryptoConfigEntry=genEquipTrafficCryptoConfigEntry, genEquipMngSwFileTransferStatusIndex=genEquipMngSwFileTransferStatusIndex, genEquipSecurityAccessControlBlockRootRemote=genEquipSecurityAccessControlBlockRootRemote, genEquipUnitDescription=genEquipUnitDescription, genEquipUnitShelfSlotStatusAllowedCardTypes=genEquipUnitShelfSlotStatusAllowedCardTypes, genEquipSecurityAccessControlRadiusUsersSecurityReadLevel=genEquipSecurityAccessControlRadiusUsersSecurityReadLevel, genEquipMngSwProxyUrl=genEquipMngSwProxyUrl, genEquipUnitLicenseFeatureDescription=genEquipUnitLicenseFeatureDescription, genEquipUnitAlarmInputSeverity=genEquipUnitAlarmInputSeverity, genEquipTrafficCryptoStatusEntry=genEquipTrafficCryptoStatusEntry, genEquipMngSwFileTransferStatusResultStandBy=genEquipMngSwFileTransferStatusResultStandBy, genEquipSecurityCfgPassFirstLoginChange=genEquipSecurityCfgPassFirstLoginChange, genEquipSecurityConfigurationRadiusServerIP=genEquipSecurityConfigurationRadiusServerIP, genEquipMngUnitInfoStatus=genEquipMngUnitInfoStatus, genEquipSecurityAccessControlRadiusUsersRadioWriteLevel=genEquipSecurityAccessControlRadiusUsersRadioWriteLevel, genEquipMngCfgFileTransferPassword=genEquipMngCfgFileTransferPassword, genEquipMngSwWatchdogAdmin=genEquipMngSwWatchdogAdmin, genEquipUnitShelfManagmentSeverityIndeterminate=genEquipUnitShelfManagmentSeverityIndeterminate, genEquipProtectionRevertiveAdmin=genEquipProtectionRevertiveAdmin, genEquipUnitInfoNtpStatusIndex=genEquipUnitInfoNtpStatusIndex, genEquipSecuritySNMPV3=genEquipSecuritySNMPV3, genEquipEventLogId=genEquipEventLogId, genEquipUnitshelfAllODUAdmin=genEquipUnitshelfAllODUAdmin, genEquipCurrentAlarmSeverity=genEquipCurrentAlarmSeverity, genEquipTrafficCryptoConfigMkey=genEquipTrafficCryptoConfigMkey, genEquipUnitShelfTccStatusSlotID=genEquipUnitShelfTccStatusSlotID, genEquipMngSwIDUVersionsDowngradePackage=genEquipMngSwIDUVersionsDowngradePackage, genEquipUnitShelfArchivesOperationStatus=genEquipUnitShelfArchivesOperationStatus, genEquipSecurityAccessControlBlockunusedAccount=genEquipSecurityAccessControlBlockunusedAccount, genEquipCurrentAlarmProbableCause=genEquipCurrentAlarmProbableCause, genEquipUnitInfoNtpStatusTable=genEquipUnitInfoNtpStatusTable, genEquipSecuritySNMPV3AuthUserName=genEquipSecuritySNMPV3AuthUserName, genEquipSecurityAccessControlRadiusUsersTable=genEquipSecurityAccessControlRadiusUsersTable, genEquipTrafficCryptoStatusId=genEquipTrafficCryptoStatusId, genEquipMngSwTimerSlotNumber=genEquipMngSwTimerSlotNumber, genEquipProtectionRevertiveTimerMultiplier=genEquipProtectionRevertiveTimerMultiplier, genEquipMngSwProxyLogin=genEquipMngSwProxyLogin, genEquipMngCfgConfigurationFilesSystemType=genEquipMngCfgConfigurationFilesSystemType, genEquipTrapCfgMgrCLLI=genEquipTrapCfgMgrCLLI, genEquipUnitShelfSlotStatusEntry=genEquipUnitShelfSlotStatusEntry, genEquipUnitShelfSlotConfigTable=genEquipUnitShelfSlotConfigTable, genEquipMngSwFileTransferPercentageDone=genEquipMngSwFileTransferPercentageDone, genEquipProtectionForceSwitch=genEquipProtectionForceSwitch, genEquipUnitLicenseTDMCapacityValue=genEquipUnitLicenseTDMCapacityValue, genEquipSecurityAccessControlPassEnforceStrength=genEquipSecurityAccessControlPassEnforceStrength, genEquipEventLogModule=genEquipEventLogModule, genEquipSecurityUsersEntry=genEquipSecurityUsersEntry, genEquipMngSwTimerEntry=genEquipMngSwTimerEntry, genEquipSecurityCsrAttributesEntry=genEquipSecurityCsrAttributesEntry, genEquipTrafficCryptoConfigSkeyPeriod=genEquipTrafficCryptoConfigSkeyPeriod, genEquipUnitInfoTimeServicesDstStartDay=genEquipUnitInfoTimeServicesDstStartDay, genEquipMngCfgOperationOperation=genEquipMngCfgOperationOperation, microwave_radio=microwave_radio, genEquipUnitShelfManagmentSlotReset=genEquipUnitShelfManagmentSlotReset)
mibBuilder.exportSymbols("MWRM-UNIT-MIB", genEquipSecurityConfigLogUploadConfigUsername=genEquipSecurityConfigLogUploadConfigUsername, genEquipMngCfgEthernetSwitchStoreConfiguration=genEquipMngCfgEthernetSwitchStoreConfiguration, genEquipSecurityAccessControlUserPassword=genEquipSecurityAccessControlUserPassword, genEquipUnitShelfManagmentSeverityEntry=genEquipUnitShelfManagmentSeverityEntry, genEquipUnitInfoTimeServicesUtcDateAndTime=genEquipUnitInfoTimeServicesUtcDateAndTime, genEquipSecurityAccessControlRadiusUsersSyncWriteLevel=genEquipSecurityAccessControlRadiusUsersSyncWriteLevel, genEquipUnitIduTemperature=genEquipUnitIduTemperature, genEquipUnitShelfAbcMuxTable=genEquipUnitShelfAbcMuxTable, genEquipMngSwIDUVersionsRunningVersion=genEquipMngSwIDUVersionsRunningVersion, genEquipEventLogRaisedTimeT=genEquipEventLogRaisedTimeT, genEquipMngSwIDUVersionsPackageName=genEquipMngSwIDUVersionsPackageName, Integrity=Integrity, genEquipSecurityGenFTConfigFilePath=genEquipSecurityGenFTConfigFilePath, genEquipCurrentAlarmAdditionalInfo=genEquipCurrentAlarmAdditionalInfo, genEquipMngSwFileTransferTable=genEquipMngSwFileTransferTable, genEquipSecurityUsersPriviledge=genEquipSecurityUsersPriviledge, genEquipProtectionMateMACAddr=genEquipProtectionMateMACAddr, genEquipSecurityXFTPHostPath=genEquipSecurityXFTPHostPath, genEquipInventoryTable=genEquipInventoryTable, genEquipMng=genEquipMng, genEquipUnitShelfManagmentSlotMostSevereAlarm=genEquipUnitShelfManagmentSlotMostSevereAlarm, genEquipUnitInfoNtpConfigServerIPaddress2=genEquipUnitInfoNtpConfigServerIPaddress2, genEquipUnitDaylightSavingTimeStartMonth=genEquipUnitDaylightSavingTimeStartMonth, genEquipMngSwIDUVersionsStandByEntry=genEquipMngSwIDUVersionsStandByEntry, genEquipFault=genEquipFault, genEquipMngSwInstallPercentageDone=genEquipMngSwInstallPercentageDone, genEquipUnitShelfPdcFanStatusTable=genEquipUnitShelfPdcFanStatusTable, genEquipSecurityAccessControlUserBlock=genEquipSecurityAccessControlUserBlock, genEquipMngCfgFileRestoreStatus=genEquipMngCfgFileRestoreStatus, genEquipUnitDaylightSavingTimeStartDay=genEquipUnitDaylightSavingTimeStartDay, genEquipUnitShelfTccConfigLabel=genEquipUnitShelfTccConfigLabel, genEquipSecurityCfgSecurityFileFormat=genEquipSecurityCfgSecurityFileFormat, genEquipUnitAlarmInputAdmin=genEquipUnitAlarmInputAdmin, genEquipSecuritySNMPV3AuthPassword=genEquipSecuritySNMPV3AuthPassword, genEquipMngSwSlotRunningVersionComponent=genEquipMngSwSlotRunningVersionComponent, genEquipMngUnitInfoFileTransferPassword=genEquipMngUnitInfoFileTransferPassword, genEquipMngSwIDUVersionsStandByDownloadedPackage=genEquipMngSwIDUVersionsStandByDownloadedPackage, genEquipInventoryPartNumber=genEquipInventoryPartNumber, genEquipMngCfgFileTransferStatusPercentageDone=genEquipMngCfgFileTransferStatusPercentageDone, genEquipSecurityGenFTStatusStatus=genEquipSecurityGenFTStatusStatus, genEquipSecurityCsrAttributesOrganization=genEquipSecurityCsrAttributesOrganization, genEquipUnitShelfModuleRole=genEquipUnitShelfModuleRole, genEquipSecurityCsrAttributesLocality=genEquipSecurityCsrAttributesLocality, AllowedNotAllowed=AllowedNotAllowed, genEquipUnitInfoNTP=genEquipUnitInfoNTP, genEquipSecurityAccessControlProfileMngRead=genEquipSecurityAccessControlProfileMngRead, genEquipAlarmConfigTable=genEquipAlarmConfigTable, genEquipCurrentAlarmState=genEquipCurrentAlarmState, genEquipMngCfgOperationTable=genEquipMngCfgOperationTable, genEquipMngCfgConfigurationFilesTimeDate=genEquipMngCfgConfigurationFilesTimeDate, genEquipSecurityAccessControlProfileRadioWrite=genEquipSecurityAccessControlProfileRadioWrite, LoopbackType=LoopbackType, genEquipMngSwVersions=genEquipMngSwVersions, genEquipMngFileTransferDownloadCertificateStatus=genEquipMngFileTransferDownloadCertificateStatus, genEquipMngCfgFileTransferEntry=genEquipMngCfgFileTransferEntry, genEquipSecurityAccessControlPassAging=genEquipSecurityAccessControlPassAging, genEquipDiversityReceiveRadio=genEquipDiversityReceiveRadio, genEquipUnitName=genEquipUnitName, genEquipMngCfgOperationSlotNumber=genEquipMngCfgOperationSlotNumber, genEquipAlarmConfigSeverity=genEquipAlarmConfigSeverity, genEquipUnitLicenseFeatureName=genEquipUnitLicenseFeatureName, genEquipUnitAlarmOutputCounter=genEquipUnitAlarmOutputCounter, genEquipEventLogClear=genEquipEventLogClear, genEquipSecurityAccessControlRadiusUsersEthWriteLevel=genEquipSecurityAccessControlRadiusUsersEthWriteLevel, FileTransferStatus=FileTransferStatus, genEquipSecuritySNMPV3AuthEntry=genEquipSecuritySNMPV3AuthEntry, genEquipSecurityCsrCertificateGenerateAndUploadPercentage=genEquipSecurityCsrCertificateGenerateAndUploadPercentage, genEquipSecurityAccessControlProfileChannel=genEquipSecurityAccessControlProfileChannel, genEquipSecurityAccessControlProfileSyncRead=genEquipSecurityAccessControlProfileSyncRead, genEquipSecurityCsrAttributesCommonName=genEquipSecurityCsrAttributesCommonName, genEquipUnitAlarmOutput=genEquipUnitAlarmOutput, genEquipUnitShelfTccStatusTable=genEquipUnitShelfTccStatusTable, genEquipUnitDaylightSavingTimeEndDay=genEquipUnitDaylightSavingTimeEndDay, genEquipMngSwOperationTimedInstallation=genEquipMngSwOperationTimedInstallation, genEquipUnitShelfPdcFanStatusPdcFanId=genEquipUnitShelfPdcFanStatusPdcFanId, genEquipMngSwInstallStatusEntry=genEquipMngSwInstallStatusEntry, genEquipSecurityAccessControlProfileUsed=genEquipSecurityAccessControlProfileUsed, genEquipSecuritySNMPV3AuthTable=genEquipSecuritySNMPV3AuthTable, genEquipSecurityCertificateDownloadConfigIndex=genEquipSecurityCertificateDownloadConfigIndex, genEquipUnitShelfTccConfigReset=genEquipUnitShelfTccConfigReset, RfuId=RfuId, genEquipSecurityCertificateDownloadConfigIpV6Address=genEquipSecurityCertificateDownloadConfigIpV6Address, genEquipUnitMeasurementSystem=genEquipUnitMeasurementSystem, InputSeverity=InputSeverity, genEquipProtectionCopyToMateComand=genEquipProtectionCopyToMateComand, genEquipMngSwIDUVersionsStandByInstalledVersion=genEquipMngSwIDUVersionsStandByInstalledVersion, genEquipMngCfgFileTransferAddress=genEquipMngCfgFileTransferAddress, genEquipMngSwInstalledIduVersion=genEquipMngSwInstalledIduVersion, genEquipMngCfgConfigurationFilesIndex=genEquipMngCfgConfigurationFilesIndex, genEquipMngCfgCliScriptFileName=genEquipMngCfgCliScriptFileName, genEquipTrapCfgMgrV3User=genEquipTrapCfgMgrV3User, genEquipUnitLicenseFeatureTable=genEquipUnitLicenseFeatureTable, genEquipSecurityConfigLogUploadStatusStatus=genEquipSecurityConfigLogUploadStatusStatus, genEquipInventoryCardSubType=genEquipInventoryCardSubType, genEquipAlarmConfigEntry=genEquipAlarmConfigEntry, genEquipSecurityConfigLogUploadStatusTable=genEquipSecurityConfigLogUploadStatusTable, genEquipMngCfgBackupStatus=genEquipMngCfgBackupStatus, genEquipMngCfgBackupProgress=genEquipMngCfgBackupProgress, genEquipUnitShelfTccStatusEntry=genEquipUnitShelfTccStatusEntry, genEquipSecurityAccessControlRadiusUsersSecurityWriteLevel=genEquipSecurityAccessControlRadiusUsersSecurityWriteLevel, genEquipMngUnitInfoFileTransferStatusPercentageDone=genEquipMngUnitInfoFileTransferStatusPercentageDone, genEquipSecurityGenFTConfigIpV6Address=genEquipSecurityGenFTConfigIpV6Address, genEquipMngSwIDUVersionsStandByIndex=genEquipMngSwIDUVersionsStandByIndex, genEquipMngCli=genEquipMngCli, genEquipUnitShelfSlotStatusCardType=genEquipUnitShelfSlotStatusCardType, genEquipMngCfgFileTransferStatusResult=genEquipMngCfgFileTransferStatusResult, genEquipSecurityCertificateDownloadConfigFilename=genEquipSecurityCertificateDownloadConfigFilename, genEquipSecurityTrafficCrypto=genEquipSecurityTrafficCrypto, genEquipSecurityConfigLogUploadConfigPath=genEquipSecurityConfigLogUploadConfigPath, QueueName=QueueName, genEquipCurrentAlarmCounter=genEquipCurrentAlarmCounter, genEquipSecurityCsrAttributesState=genEquipSecurityCsrAttributesState, genEquipUnitLocation=genEquipUnitLocation, genEquipRealTimeandDate=genEquipRealTimeandDate, genEquipUnitLicenseDemoTimer=genEquipUnitLicenseDemoTimer, genEquipSecurityConfigurationRadiusPort=genEquipSecurityConfigurationRadiusPort, genEquipTrapCfgMgrHeartbeatPeriod=genEquipTrapCfgMgrHeartbeatPeriod, genEquipSecurityGenFTConfigTable=genEquipSecurityGenFTConfigTable, genEquipMngSwOperationIndex=genEquipMngSwOperationIndex, genEquipMngSwServerUrl=genEquipMngSwServerUrl, OffOn=OffOn, genEquipMngCliScriptOperationStatus=genEquipMngCliScriptOperationStatus, genEquipUnitLicenseNetworkResiliency=genEquipUnitLicenseNetworkResiliency, SwCommandTimer=SwCommandTimer, genEquipTrafficCryptoConfigMkeyPeriod=genEquipTrafficCryptoConfigMkeyPeriod, genEquipSecurityAccessControlProfileSecurityWrite=genEquipSecurityAccessControlProfileSecurityWrite, genEquipMngFileTransferDownloadConfigStatus=genEquipMngFileTransferDownloadConfigStatus, genEquipUnitShelfPdcFanStatusPdcFanCardType=genEquipUnitShelfPdcFanStatusPdcFanCardType, genEquipUnitInfoTimeServicesEntry=genEquipUnitInfoTimeServicesEntry, genEquipEventLogDesc=genEquipEventLogDesc, genEquipUnitShelfSlotStatusTable=genEquipUnitShelfSlotStatusTable, genEquipMngSwInstallationTimer=genEquipMngSwInstallationTimer, genEquipUnitShelfSlotConfigLabel=genEquipUnitShelfSlotConfigLabel, genEquipSecurityConfigurationRadiusTimeout=genEquipSecurityConfigurationRadiusTimeout, genEquipMngCfgFileTransferFileName=genEquipMngCfgFileTransferFileName, genEquipUnitCLLI=genEquipUnitCLLI, ClockSrc=ClockSrc, genEquipInventoryNumberWorkingDays=genEquipInventoryNumberWorkingDays, genEquipSecurityConfigLogUploadConfigIpaddress=genEquipSecurityConfigLogUploadConfigIpaddress, genEquipSecurityCsrAttributesCountry=genEquipSecurityCsrAttributesCountry, genEquipSecurityGenImportExportAdmin=genEquipSecurityGenImportExportAdmin, genEquipMngSwFileTransferProtocol=genEquipMngSwFileTransferProtocol, genEquipMngSwIDUVersionsStandByTargetDevice=genEquipMngSwIDUVersionsStandByTargetDevice, genEquipMngUnitInfo=genEquipMngUnitInfo, genEquipCurrentAlarmRaisedTimeT=genEquipCurrentAlarmRaisedTimeT, genEquipMngUnitInfoFileTransferPath=genEquipMngUnitInfoFileTransferPath, genEquipMngUnitInfoFileTransferUserName=genEquipMngUnitInfoFileTransferUserName, genEquipMngSwProxyPassword=genEquipMngSwProxyPassword, genEquipMngSwFileTransferAddress=genEquipMngSwFileTransferAddress, genEquipSecurityUsersExprDate=genEquipSecurityUsersExprDate, genEquipDiversitySwitchCounter=genEquipDiversitySwitchCounter, genEquipTrapCfgMgrIPv6=genEquipTrapCfgMgrIPv6, genEquipSecurityCsrUploadConfigPath=genEquipSecurityCsrUploadConfigPath, genEquipUnitShelfManagmentEntry=genEquipUnitShelfManagmentEntry, genEquipSecurityConfigurationRadius=genEquipSecurityConfigurationRadius, genEquipUnitInfoTimeServicesDstEndMonth=genEquipUnitInfoTimeServicesDstEndMonth, genEquipSecurityXFTPProtocol=genEquipSecurityXFTPProtocol, genEquipDiversitySwitchCounterClear=genEquipDiversitySwitchCounterClear, RateMbps=RateMbps, genEquipMngSwIDUVersionsEntry=genEquipMngSwIDUVersionsEntry, genEquipUnitInfoNTPStatus=genEquipUnitInfoNTPStatus, genEquipMngSwIDUVersionsTargetDevice=genEquipMngSwIDUVersionsTargetDevice, genEquipSecurityCfgDownloadSecurityStatus=genEquipSecurityCfgDownloadSecurityStatus, genEquipSecurityXFTPHostIP=genEquipSecurityXFTPHostIP, genEquipUnitShelfPdcFanStatusEntry=genEquipUnitShelfPdcFanStatusEntry, genEquipUnitShelfAbcMuxNumber=genEquipUnitShelfAbcMuxNumber, genEquipCurrentAlarmIfIndex=genEquipCurrentAlarmIfIndex, genEquipTrafficCryptoStatusMkeyTimeExpire=genEquipTrafficCryptoStatusMkeyTimeExpire, genEquipMngSwInstallStatusTable=genEquipMngSwInstallStatusTable, genEquipSecurityUsersName=genEquipSecurityUsersName, genEquipSecurityProtocolsControlSNMPAdmin=genEquipSecurityProtocolsControlSNMPAdmin, genEquipSecurityCertificateDownloadConfigUsername=genEquipSecurityCertificateDownloadConfigUsername, genEquipEventLogIfIndex=genEquipEventLogIfIndex, genEquipTrafficCryptoStatusValid=genEquipTrafficCryptoStatusValid, genEquipSecurityCfgUploadPublicKeyStatus=genEquipSecurityCfgUploadPublicKeyStatus, genEquipSecurityCertificateDownloadConfigEntry=genEquipSecurityCertificateDownloadConfigEntry, genEquipDiversityRevertiveMode=genEquipDiversityRevertiveMode, genEquipMngFileTransferUploadConfigStatus=genEquipMngFileTransferUploadConfigStatus, genEquipEventLogState=genEquipEventLogState, VmResetType=VmResetType, genEquip=genEquip, genEquipSecurityAccessControlUserName=genEquipSecurityAccessControlUserName, genEquipSecurityUsersTable=genEquipSecurityUsersTable, genEquipUnitAlarmInputEntry=genEquipUnitAlarmInputEntry, genEquipUnitGMTHours=genEquipUnitGMTHours, genEquipSecurityProtocolsControlAutoSessionTimeOut=genEquipSecurityProtocolsControlAutoSessionTimeOut)
