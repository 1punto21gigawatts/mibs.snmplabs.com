#
# PySNMP MIB module CABH-CAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CABH-CAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:43:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
clabProjCableHome, = mibBuilder.importSymbols("CLAB-DEF-MIB", "clabProjCableHome")
InetAddressType, InetAddress, InetPortNumber = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress", "InetPortNumber")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter64, Unsigned32, Integer32, IpAddress, Bits, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ModuleIdentity, iso, TimeTicks, ObjectIdentity, NotificationType, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Unsigned32", "Integer32", "IpAddress", "Bits", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ModuleIdentity", "iso", "TimeTicks", "ObjectIdentity", "NotificationType", "MibIdentifier")
RowStatus, PhysAddress, TextualConvention, TruthValue, DateAndTime, DisplayString, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "PhysAddress", "TextualConvention", "TruthValue", "DateAndTime", "DisplayString", "TimeStamp")
cabhCapMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3))
cabhCapMib.setRevisions(('2005-02-11 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cabhCapMib.setRevisionsDescriptions(('Initial revision, published as part of CableHome Specification.',))
if mibBuilder.loadTexts: cabhCapMib.setLastUpdated('200502110000Z')
if mibBuilder.loadTexts: cabhCapMib.setOrganization('CableLabs Broadband Access Department')
if mibBuilder.loadTexts: cabhCapMib.setContactInfo('Kevin Luehrs Postal: Cable Television Laboratories, Inc. 858 Coal Creek Circle Louisville, Colorado 80027 U.S.A. Phone: +1 303-661-9100 Fax: +1 303-661-9199 E-mail: k.luehrs@cablelabs.com; mibs@cablelabs.com')
if mibBuilder.loadTexts: cabhCapMib.setDescription('This MIB module supplies the basic management objects for the CableHome Addressing Portal (CAP) portion of the PS.')
cabhCapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 1))
cabhCapBase = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 1, 1))
cabhCapMap = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 1, 2))
cabhCapTcpTimeWait = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 1, 1, 1), Unsigned32().clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhCapTcpTimeWait.setReference('CableHome 1.1 Specification, Packet Handling & Address Translation section.')
if mibBuilder.loadTexts: cabhCapTcpTimeWait.setStatus('current')
if mibBuilder.loadTexts: cabhCapTcpTimeWait.setDescription('This object is the maximum inactivity time to wait before assuming TCP session is terminated. It has no relation to the TCP session TIME_WAIT state referred to in [RFC793].')
cabhCapUdpTimeWait = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 1, 1, 2), Unsigned32().clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhCapUdpTimeWait.setReference('CableHome 1.1 Specification, Packet Handling & Address Translation section.')
if mibBuilder.loadTexts: cabhCapUdpTimeWait.setStatus('current')
if mibBuilder.loadTexts: cabhCapUdpTimeWait.setDescription('The inactivity time to wait before destroying CAP mappings for UDP.')
cabhCapIcmpTimeWait = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 1, 1, 3), Unsigned32().clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhCapIcmpTimeWait.setReference('CableHome 1.1 Specification, Packet Handling & Address Translation section.')
if mibBuilder.loadTexts: cabhCapIcmpTimeWait.setStatus('current')
if mibBuilder.loadTexts: cabhCapIcmpTimeWait.setDescription('The inactivity time to wait before destroying CAP mappings for ICMP.')
cabhCapPrimaryMode = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("napt", 1), ("nat", 2), ("passthrough", 3))).clone('napt')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhCapPrimaryMode.setReference('CableHome 1.1 Specification, Packet Handling & Address Translation section.')
if mibBuilder.loadTexts: cabhCapPrimaryMode.setStatus('current')
if mibBuilder.loadTexts: cabhCapPrimaryMode.setDescription('The Primary Packet-handling Mode of the Portal Services logical element (PS) of a CableHome compliant residential gateway device. This object configures operation of the PS packet handling functions. When the value of this object is napt(1), the PS is required to support the Network Address and Port Translation (NAPT) process in accordance with the NAPT requirements defined in IETF RFC 3022. When operating in NAPT Primary Packet Handling Mode, the PS supports the translation of multiple LAN-Trans IP addresses and their TCP/UDP ports into a single WAN-Data IP address and its TCP/UDP ports. When the value of this object is nat(2), the PS is required to support the Network Address Translation (NAT) process in accordance with the NAT equirements defined in IETF RFC 3022. When operating in NAT Primary Packet Handling Mode, the PS supports the translation of multiple LAN-Trans IP addresses into the same number of unique WAN-Data IP addresses. When the value of this object is passthrough(3), the PS is required to act as a transparent bridge in accordance with IEEE 802.1D. When operating in Passthrough Primary Packet Handling Mode, the PS does not translate network addresses, and bridges all traffic between its LAN and WAN interfaces. The PS MUST delete dynamically-created row entries from the cabhCapMappingTable, i.e. those with cabhCapMappingMethod = dynamic(2), when the value of cabhCapPrimaryMode changes. The PS MUST NOT delete statically-created row entries from the cabhCapMappingTable where cabhCapMappingMethod = static(1), when the value of cabhCapPrimaryMode changes.')
cabhCapSetToFactory = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhCapSetToFactory.setReference('CableHome 1.1 Specification, Packet Handling & Address Translation section.')
if mibBuilder.loadTexts: cabhCapSetToFactory.setStatus('current')
if mibBuilder.loadTexts: cabhCapSetToFactory.setDescription('Reading this object always returns false(2). When the cabhCapSetToFactory object is set to true(1), the PS must take the following actions: 1. Clear all entries in the cabhCapMappingTable and cabhCapPassthroughTable. 2. Reset the following objects to their factory default values: cabhCapTcpTimeWait, cabhCapUdpTimeWait, cabhCapIcmpTimeWait, cabhCapPrimaryMode')
cabhCapLastSetToFactory = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 1, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhCapLastSetToFactory.setStatus('current')
if mibBuilder.loadTexts: cabhCapLastSetToFactory.setDescription('The value of sysUpTime when cabhCapSetToFactory was last set to true. Zero if never reset.')
cabhCapUpnpPortForwardingEnable = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 1, 1, 7), TruthValue().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhCapUpnpPortForwardingEnable.setReference('CableHome 1.1 Specification, Packet Handling & Address Translation section.')
if mibBuilder.loadTexts: cabhCapUpnpPortForwardingEnable.setStatus('current')
if mibBuilder.loadTexts: cabhCapUpnpPortForwardingEnable.setDescription('This MIB is effective only when the PS is performing NAPT. If this MIB object is set to false(2), the PS MUST disable the UPnP WANIpConnection Service in the CableHome PS. If this MIB object is set to true(1), the PS MUST enable the WANIpConnection service in the PS. When the primary packet handling mode of the PS is C-NAT (2) or Passthrough(3), setting this MIB to true(1) MUST return InconsistentValue error.')
cabhCapUpnpTimeWait = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 1, 1, 8), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhCapUpnpTimeWait.setReference('CableHome 1.1 Specification, Packet Handling & Address Translation section.')
if mibBuilder.loadTexts: cabhCapUpnpTimeWait.setStatus('current')
if mibBuilder.loadTexts: cabhCapUpnpTimeWait.setDescription('The inactivity time to wait before destroying CAP mappings created by UPnP control points. The value of 0 indicates inactivity time wait of infinity, i.e. a UPnP entry doesnt get destroyed based on inactivity period.')
cabhCapMappingTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 1, 2, 1), )
if mibBuilder.loadTexts: cabhCapMappingTable.setReference('CableHome 1.1 Specification, Packet Handling & Address Translation section.')
if mibBuilder.loadTexts: cabhCapMappingTable.setStatus('current')
if mibBuilder.loadTexts: cabhCapMappingTable.setDescription("This table contains IP address mappings between private network addresses, or network addresses and port numbers/ICMP Identifiers, assigned to devices on the subscriber's home LAN, and network addresses, or network addresses and port numbers/ICMP Identifiers on the WAN, presumed to be on a separate subnetwork than the private IP addresses. The CAP Mapping Table is used by the CableHome Address Portal (CAP) function of the PS to make packet forwarding decisions.")
cabhCapMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 1, 2, 1, 1), ).setIndexNames((0, "CABH-CAP-MIB", "cabhCapMappingIndex"))
if mibBuilder.loadTexts: cabhCapMappingEntry.setStatus('current')
if mibBuilder.loadTexts: cabhCapMappingEntry.setDescription('List of the private IP (LAN) address - to - cable operator assigned IP (WAN) address mappings stored in the PS and used by the PS to make packet forwarding decisions.')
cabhCapMappingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cabhCapMappingIndex.setStatus('current')
if mibBuilder.loadTexts: cabhCapMappingIndex.setDescription('The Index into the CAP Mapping Table.')
cabhCapMappingWanAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 1, 2, 1, 1, 2), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhCapMappingWanAddrType.setStatus('current')
if mibBuilder.loadTexts: cabhCapMappingWanAddrType.setDescription('The IP address type assigned on the WAN side.')
cabhCapMappingWanAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 1, 2, 1, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhCapMappingWanAddr.setStatus('current')
if mibBuilder.loadTexts: cabhCapMappingWanAddr.setDescription("The IP address assigned by the cable operator's address (DHCP) server, and comprising the WAN-side IP address of the CAP Mapping tuple. This object is populated either dynamically by LAN-to-WAN outbound traffic or statically by the cable operator.")
cabhCapMappingWanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 1, 2, 1, 1, 4), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhCapMappingWanPort.setStatus('current')
if mibBuilder.loadTexts: cabhCapMappingWanPort.setDescription('The TCP/UDP port number or ICMP Identifier on the WAN side. A port number/Identifier of 0 indicates either a NAT or a DMZ mapping. A non-zero port number/Identifier indicates a NAPT mapping. If the value of cabhCapMappingNumPorts MIB object is non-zero this MIB represents a starting TCP/UDP port number on the WAN side for which a mapping entry is created.')
cabhCapMappingLanAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 1, 2, 1, 1, 5), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhCapMappingLanAddrType.setStatus('current')
if mibBuilder.loadTexts: cabhCapMappingLanAddrType.setDescription('The IP address type assigned on the LAN side.')
cabhCapMappingLanAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 1, 2, 1, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhCapMappingLanAddr.setStatus('current')
if mibBuilder.loadTexts: cabhCapMappingLanAddr.setDescription('The IP address of the LAN-Trans IP Device. This object is populated either dynamically as a result of LAN-to-WAN outbound traffic or statically by the cable operator.')
cabhCapMappingLanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 1, 2, 1, 1, 7), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhCapMappingLanPort.setStatus('current')
if mibBuilder.loadTexts: cabhCapMappingLanPort.setDescription('The TCP/UDP port number or ICMP Identifier on the LAN side. A port number/Identifier of 0 indicates either a DMZ mapping or a NAT mapping. A non-zero port number/Identifier indicates a NAPT mapping. If the value of cabhCapMappingNumPorts MIB object is non-zero then this MIB represents a starting TCP/UDP port number on the LAN side for which a mapping entry is created.')
cabhCapMappingMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2), ("upnp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhCapMappingMethod.setStatus('current')
if mibBuilder.loadTexts: cabhCapMappingMethod.setDescription('Indicates how this mapping was created. Static means that it was provisioned, and dynamic means that it was handled by the PS itself. upnp (3) means that the CAP mapping entry was created by some UPnP compliant application.')
cabhCapMappingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("other", 1), ("icmp", 2), ("udp", 3), ("tcp", 4), ("all", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhCapMappingProtocol.setStatus('current')
if mibBuilder.loadTexts: cabhCapMappingProtocol.setDescription('The protocol for this mapping entry. The value of other(1) represents a protocol other than ICMP, TCP, and UDP. Thus, when the value other(1) is specified for the cabhCapMappingProtocol value of a CAP Mapping Table entry, TCP, UDP or ICMP packets MUST NOT be forwarded even if the WAN and LAN IP address and port tuple of the packet matches with mapping entry. The value of all(255) represents all protocol types. Thus, when the cabhCapMappingProtocol value all(255) is specified for an entry in the CAP Mapping Table, traffic of all protocol types MUST be forwarded accordingly f the WAN and LAN IP address and port tuple in the packet matches the mapping entry.')
cabhCapMappingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 1, 2, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhCapMappingRowStatus.setStatus('current')
if mibBuilder.loadTexts: cabhCapMappingRowStatus.setDescription("The RowStatus interlock for the creation and deletion of a cabhCapMappingTable entry. Changing the value of the IP address or port number columns of the CAP Mapping Table may have an effect on active traffic, so the PS will prevent modification of this table's columns and return an inconsistentValue error when cabhCapMappingRowStatus object is active(1). The PS must not allow RowStatus to be set to notInService(2) by a manager. A newly created row cannot be set to active(1) until the corresponding instances of cabhCapMappingWanAddr, cabhCapMappingLanAddr, and cabhCapMappingProtocol have been set. If the manager attempts to populate a row entry in the table with a non-unique value for the combination of cabhCapMappingWanAddr and range of WAN port(s) (identified by cabhCapMappingWanPort to cabhCapMappingWanPort + cabhCapMappingNumPorts 1), or a non-unique value for the combination of cabhCapMappingLanAddr and range of LAN port(s) (identified by cabhCapMappingLanPort to cabhCapMappingLanPort + cabhCapMappingNumPorts - 1), the PS MUST prevent the creation of this row and return an inconsistentValue error. This prevents creation of entries with overlapping port ranges in the CAP table. If the manager attempts to populate a row entry with a zero value for cabhCapMappingWanPort and a non-zero value for cabhCapMappingLanPort or a row entry with a zero value for cabhCapMappingLanPort and a non-zero value for cabhCapMappingWanPort, the PS MUST prevent the creation of this row and return an inconsistentValue error. This prevents creation of invalid NAT or NAPT entries. If the manager attempts to populate a row entry with non-zero values for both cabhCapMappingWanPort and cabhCapMappingLanPort, but a zero value for cabhCapMappingNumPorts, the PS MUST prevent the creation of this row and return an inconsistentValue error. This prevents creation of NAPT entries. When Primary Packet-handling Mode is NAPT (cabhCapPrimaryMode is napt(1)), provisioned rows can be set to active(1) regardless of whether the value to which cabhCapMappingWanPort, cabhCapMappingLanPort, and cabhCapMappingNumPorts have been set is zero or nonzero. When Primary Packet-handling Mode is NAT (cabhCapPrimaryMode is nat(2)), a newly created row can not be set to active(1) if a non-zero value have been set for cabhCapMappingWanPort, cabhCapMappingLanPort and cabhCapMappingNumPorts. In NAPT Primary Packet-handling mode, a row entry with zero values for cabhCapMappingWanPort, cabhCapMappingLanPort, and cabhCapMappingNumPorts objects represents a DMZ entry.")
cabhCapMappingNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 1, 2, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhCapMappingNumPorts.setStatus('current')
if mibBuilder.loadTexts: cabhCapMappingNumPorts.setDescription('This object represents number of ports available for port translation on both LAN and WAN side. When both cabhCapMappingWanPort and cabhCapMappingLanPort are set to zero, the PS MUST ignore this MIB object, and such a row entry represents either a DMZ entry (when primary packet handling mode is NAPT) or a NAT entry (when primary packet handling mode is NAT). When a row entry is created with non-zero values for cabhCapMappingWanPort, cabhCapMappingLanPort, and cabhCapMappingNumPorts the PS MUST translate range of ports on the WAN side (identified by cabhCapMappingWanPort to cabhCapMappingWanPort + cabhCapMappingNumPorts-1) to range of ports on the LAN side (identified by cabhCapMappingLanPort to cabhCapMappingLanPort + cabhCapMappingNumPorts-1). The PS MUST ignore this MIB for a CAP mapping entry with the value of cabhCapMappingProtocol equal to icmp(2).')
cabhCapMappingRowDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 1, 2, 1, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhCapMappingRowDescr.setStatus('current')
if mibBuilder.loadTexts: cabhCapMappingRowDescr.setDescription('A string value that can be used to describe the purpose or attributes of the CAP Mapping entry.')
cabhCapMappingCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 1, 2, 1, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhCapMappingCreateTime.setStatus('current')
if mibBuilder.loadTexts: cabhCapMappingCreateTime.setDescription('For dynamic(2) and upnp(3) CAP mapping entries the PS MUST set this MIB with date and time when the entry is created. The PS MUST set the value of this MIB to zero valued 11-byte string for static CAP mapping entries. This MIB object MUST NOT persist across the PS reboot.')
cabhCapMappingLastUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 1, 2, 1, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhCapMappingLastUpdateTime.setStatus('current')
if mibBuilder.loadTexts: cabhCapMappingLastUpdateTime.setDescription('The PS MUST set the value of this MIB to zero valued 11 byte string for static CAP mapping entries. For dynamic(2) CAP Mapping entries, the PS MUST set the value of this MIB to the value of cabhCapMappingCreateTime For upnp(3) CAP mapping entries the PS MUST set this MIB with date and time when the entry is last updated. When the upnp(3)entry is first created the PS MUST set this MIB with the value of cabhCapMappingCreateTime MIB. This MIB object MUST NOT persist across the PS reboot.')
cabhCapMappingDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhCapMappingDuration.setStatus('current')
if mibBuilder.loadTexts: cabhCapMappingDuration.setDescription('When a value greater than zero is assigned to this object, the PS MUST remove the CAP entry after the time duration, represented by this object, elapses starting from cabhCapMappingLastUpdateTime. When a value of 0 is assigned to this object, the PS MUST retain the CAP mapping entry until reboot or reset. The PS MUST retain a CAP mapping entry with cabhCapMappingDuration MIB set to 0 and cabhCapMappingMethod set to static(1) across the reboots. The PS MUST NOT retain a CAP mapping entry with cabhCapMappingDuration MIB set to 0 and cabhCapMappingMethod set to upnp(3) across the reboots. When a value of 1 is assigned for this MIB the PS MUST ignore this MIB and MUST remove the CAP mapping entries based on TCP, UDP and ICMP inactivity time-wait depending upon their protocol type. When the cabhCapMappingMethod object is static(1), the default value for this object is 0. When the cabhCapMappingMethod object is dynamic(2), the PS MUST set the value of this object to 1. When the cabhCapMappingMethod object is upnp(3), the default value for this object is -1.')
cabhCapMappingRemoteHostAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 1, 2, 1, 1, 16), InetAddressType().clone('ipv4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhCapMappingRemoteHostAddrType.setStatus('current')
if mibBuilder.loadTexts: cabhCapMappingRemoteHostAddrType.setDescription('The IP address type for a remote host on the WAN side.')
cabhCapMappingRemoteHostAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 1, 2, 1, 1, 17), InetAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhCapMappingRemoteHostAddr.setStatus('current')
if mibBuilder.loadTexts: cabhCapMappingRemoteHostAddr.setDescription('The IP address of the remote host for a CAP mapping entry. The packet traversing through the PS is either originated from or is destined to this remote host. The value of all zeros for this MIB object indicates any IP address for a remote host.')
cabhCapMappingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 1, 2, 1, 1, 18), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhCapMappingEnable.setStatus('current')
if mibBuilder.loadTexts: cabhCapMappingEnable.setDescription('This MIB allows the PS to enable or disable a particular CAP mapping entry. When this MIB is set to true(1) for a CAP mapping entry, the PS MUST correctly route the traffic that matches this entry. When this MIB is set to false(2) for a CAP mapping entry, the PS MUST NOT route the traffic that matches this entry.')
cabhCapPassthroughTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 1, 2, 2), )
if mibBuilder.loadTexts: cabhCapPassthroughTable.setReference('CableHome 1.1 Specification, Packet Handling & Address Translation section.')
if mibBuilder.loadTexts: cabhCapPassthroughTable.setStatus('current')
if mibBuilder.loadTexts: cabhCapPassthroughTable.setDescription('This table contains hardware addresses of LAN IP Devices for which the PS will bridge traffic at OSI Layer 2.')
cabhCapPassthroughEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 1, 2, 2, 1), ).setIndexNames((0, "CABH-CAP-MIB", "cabhCapPassthroughIndex"))
if mibBuilder.loadTexts: cabhCapPassthroughEntry.setStatus('current')
if mibBuilder.loadTexts: cabhCapPassthroughEntry.setDescription('List of hardware addresses of LAN IP Devices for which the PS will bridge traffic at OSI Layer 2.')
cabhCapPassthroughIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cabhCapPassthroughIndex.setStatus('current')
if mibBuilder.loadTexts: cabhCapPassthroughIndex.setDescription('The index into the CAP Passthrough Table.')
cabhCapPassthroughMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 1, 2, 2, 1, 2), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhCapPassthroughMacAddr.setStatus('current')
if mibBuilder.loadTexts: cabhCapPassthroughMacAddr.setDescription('Hardware address of the LAN IP Device for which the PS MUST bridge traffic at OSI Layer 2.')
cabhCapPassthroughRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 1, 2, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhCapPassthroughRowStatus.setStatus('current')
if mibBuilder.loadTexts: cabhCapPassthroughRowStatus.setDescription('The RowStatus interlock for the creation and deletion of a cabhCapPassthroughTable entry. Any writable object in each row can be modified at any time while the row is active(1).')
cabhCapNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 2, 0))
cabhCapConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 3))
cabhCapCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 3, 1))
cabhCapGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 3, 2))
cabhCapBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 3, 1, 1)).setObjects(("CABH-CAP-MIB", "cabhCapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cabhCapBasicCompliance = cabhCapBasicCompliance.setStatus('current')
if mibBuilder.loadTexts: cabhCapBasicCompliance.setDescription('The compliance statement for devices that implement the CableHome Portal Services functionality.')
cabhCapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 4, 3, 3, 2, 1)).setObjects(("CABH-CAP-MIB", "cabhCapTcpTimeWait"), ("CABH-CAP-MIB", "cabhCapUdpTimeWait"), ("CABH-CAP-MIB", "cabhCapIcmpTimeWait"), ("CABH-CAP-MIB", "cabhCapPrimaryMode"), ("CABH-CAP-MIB", "cabhCapSetToFactory"), ("CABH-CAP-MIB", "cabhCapLastSetToFactory"), ("CABH-CAP-MIB", "cabhCapMappingWanAddrType"), ("CABH-CAP-MIB", "cabhCapMappingWanAddr"), ("CABH-CAP-MIB", "cabhCapMappingWanPort"), ("CABH-CAP-MIB", "cabhCapMappingLanAddrType"), ("CABH-CAP-MIB", "cabhCapMappingLanAddr"), ("CABH-CAP-MIB", "cabhCapMappingLanPort"), ("CABH-CAP-MIB", "cabhCapMappingMethod"), ("CABH-CAP-MIB", "cabhCapMappingProtocol"), ("CABH-CAP-MIB", "cabhCapMappingRowStatus"), ("CABH-CAP-MIB", "cabhCapPassthroughMacAddr"), ("CABH-CAP-MIB", "cabhCapPassthroughRowStatus"), ("CABH-CAP-MIB", "cabhCapMappingNumPorts"), ("CABH-CAP-MIB", "cabhCapMappingRowDescr"), ("CABH-CAP-MIB", "cabhCapMappingCreateTime"), ("CABH-CAP-MIB", "cabhCapMappingLastUpdateTime"), ("CABH-CAP-MIB", "cabhCapMappingDuration"), ("CABH-CAP-MIB", "cabhCapUpnpPortForwardingEnable"), ("CABH-CAP-MIB", "cabhCapUpnpTimeWait"), ("CABH-CAP-MIB", "cabhCapMappingRemoteHostAddrType"), ("CABH-CAP-MIB", "cabhCapMappingRemoteHostAddr"), ("CABH-CAP-MIB", "cabhCapMappingEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cabhCapGroup = cabhCapGroup.setStatus('current')
if mibBuilder.loadTexts: cabhCapGroup.setDescription('Group of objects for CableHome CAP MIB.')
mibBuilder.exportSymbols("CABH-CAP-MIB", cabhCapMappingLanAddr=cabhCapMappingLanAddr, cabhCapIcmpTimeWait=cabhCapIcmpTimeWait, cabhCapNotification=cabhCapNotification, cabhCapTcpTimeWait=cabhCapTcpTimeWait, cabhCapPassthroughTable=cabhCapPassthroughTable, cabhCapPassthroughMacAddr=cabhCapPassthroughMacAddr, cabhCapMappingRemoteHostAddr=cabhCapMappingRemoteHostAddr, cabhCapMappingMethod=cabhCapMappingMethod, cabhCapPassthroughIndex=cabhCapPassthroughIndex, cabhCapUdpTimeWait=cabhCapUdpTimeWait, cabhCapMib=cabhCapMib, cabhCapMappingProtocol=cabhCapMappingProtocol, cabhCapPassthroughEntry=cabhCapPassthroughEntry, cabhCapMappingRowDescr=cabhCapMappingRowDescr, cabhCapMappingEntry=cabhCapMappingEntry, cabhCapMappingLastUpdateTime=cabhCapMappingLastUpdateTime, cabhCapMappingLanPort=cabhCapMappingLanPort, cabhCapPrimaryMode=cabhCapPrimaryMode, PYSNMP_MODULE_ID=cabhCapMib, cabhCapMappingCreateTime=cabhCapMappingCreateTime, cabhCapMappingWanAddr=cabhCapMappingWanAddr, cabhCapMappingDuration=cabhCapMappingDuration, cabhCapMappingLanAddrType=cabhCapMappingLanAddrType, cabhCapUpnpTimeWait=cabhCapUpnpTimeWait, cabhCapBase=cabhCapBase, cabhCapMappingRemoteHostAddrType=cabhCapMappingRemoteHostAddrType, cabhCapBasicCompliance=cabhCapBasicCompliance, cabhCapMap=cabhCapMap, cabhCapSetToFactory=cabhCapSetToFactory, cabhCapGroups=cabhCapGroups, cabhCapCompliances=cabhCapCompliances, cabhCapLastSetToFactory=cabhCapLastSetToFactory, cabhCapMappingWanPort=cabhCapMappingWanPort, cabhCapConformance=cabhCapConformance, cabhCapMappingNumPorts=cabhCapMappingNumPorts, cabhCapPassthroughRowStatus=cabhCapPassthroughRowStatus, cabhCapMappingTable=cabhCapMappingTable, cabhCapUpnpPortForwardingEnable=cabhCapUpnpPortForwardingEnable, cabhCapObjects=cabhCapObjects, cabhCapMappingIndex=cabhCapMappingIndex, cabhCapGroup=cabhCapGroup, cabhCapMappingRowStatus=cabhCapMappingRowStatus, cabhCapMappingWanAddrType=cabhCapMappingWanAddrType, cabhCapMappingEnable=cabhCapMappingEnable)
