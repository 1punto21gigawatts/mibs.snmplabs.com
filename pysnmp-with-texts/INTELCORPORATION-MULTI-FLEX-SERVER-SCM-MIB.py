#
# PySNMP MIB module INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:55:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
chassis, = mibBuilder.importSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-MIB", "chassis")
regModule, groups = mibBuilder.importSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-REG", "regModule", "groups")
IdromBinary16, Power, Index, PowerLedStates, INT32withException, Presence, FaultLedStates = mibBuilder.importSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-TC", "IdromBinary16", "Power", "Index", "PowerLedStates", "INT32withException", "Presence", "FaultLedStates")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, MibIdentifier, iso, TimeTicks, NotificationType, Bits, Unsigned32, Gauge32, Counter32, Counter64, Integer32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "MibIdentifier", "iso", "TimeTicks", "NotificationType", "Bits", "Unsigned32", "Gauge32", "Counter32", "Counter64", "Integer32", "IpAddress")
TextualConvention, PhysAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "PhysAddress", "DisplayString")
multiFlexServerScmMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 1, 1, 14))
multiFlexServerScmMibModule.setRevisions(('2007-09-29 00:00', '2007-08-16 13:00', '2007-08-10 15:30', '2007-08-06 13:00', '2007-07-16 13:30', '2007-06-18 13:30', '2007-06-07 20:30', '2007-06-07 13:30', '2007-05-23 11:00', '2007-05-17 11:30', '2007-04-18 19:05', '2007-04-09 10:30', '2007-03-12 18:00', '2007-03-10 18:30', '2007-03-06 10:30', '2007-02-22 17:00', '2007-01-15 17:00', '2007-01-05 10:20', '2006-12-28 15:30', '2006-12-08 13:30', '2006-12-05 10:30', '2006-12-04 16:00', '2006-11-28 15:30', '2006-11-07 07:01', '2006-10-02 06:29',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: multiFlexServerScmMibModule.setRevisionsDescriptions(('OEM added support to Battery table, added columns scmBatteryCellType & scmBatteryHoldTime', 'Corrected a few entries that were marked as read-write when they should have been read-only Reordered Revision to reverse chronological as some browsers choke, cleaned up some other simple nit-picky errors', 'Removed scmBootLoaderVersion as it is no longer being reported via the SCM (for version 2 of the SCM software).', 'Removed Presence LED (mistook dirty cache LED for presence LED)', 'Added Power, Presence and Fault LED support', 'Finalized the Version information for the MIB based on information available/used by the rest of the system (e.g., the GUI/fwupdate) Dropped scmBmcFirmwareVersion, scmDriverVersion, scmSoftwareVersion, & scmBIOSVersion.', 'Added the IdromBinary16 to represent the asset tag, part number, and serial number fields within the IDROM fields.', 'Corrected maximum/nominal IDROM parameters and comments', 'Moved Presence to column 1 to be consistent across all tables.', 'Added/reworked IDROM data to the scmBatteryTable. To be consistent, IDROM data is placed first, thus renumbered.', 'Moved the trees and chassis nodes around to accomodate the unique power supply characteristics. Added the missing numOfPwrUnknowns & pwrSupplyUnknownPresenceMask', 'Added scmBcmFirmwareVersion to be consistent with rest of the subsystems. Renamed *Rev to *Version to be consistent in naming convention of other subsystems', 'scmTable data now complies with IDROM (DID/DSD) information. Renumbered / reorganized accordingly', "Renamed MIB from *-CTL-* to *-SCM-* All 'Manufac' references have been changed to 'Manufacture' All 'Controller' references have been changed to 'Scm' All 'Ctl' references have been changed to 'Scm' All 'Logical' references have been changed to 'Virtual' All 'Array' references have been changed to 'Pool' All 'Disk' references have been changed to 'Drive' All 'Phy' references have been changed to 'Physical' All 'Drv' references have been changed to 'Drive' (or 'Drives' as appropriate) ", "Changed Mask representation from an Opaque to a DisplayString at the request of the architects such that it now is an ASCII representation of bit string reflecting the presence with the left most 'bit' being bit 1 and max* bits being represented.", 'Renamed MIB file and updated internal relevance to formal product name Multi-Flex Server', 'Corrected descriptions of ctlNumOfPhyDrvWithPFA, ctlNumOfPhyDrvRebuilding, & ctlNumOfPhyDrvMissing', 'Added ctlBatteryPresence to Battery table to help identify whether a battery exists or not.', 'Corrected ctlStatsTable INDEX to AUGMENTS.', 'Associated Battery table with Controller table. Thus, Battery table is now indexed by ctlIndex and the columns have been renumbered accordingly.', 'Renamed all of the *Transfered to *Transferred', 'Updated several object types to reflect changes in the OEM objects. Added ctlBIOSRev to ctlTable.', 'Updated several object types to reflect changes in the OEM objects. ctlBatteryCycleCount Unsigned32 -> Integer32 ctlBatteryRemainCapacity Unsigned32 -> Integer32 ctlBatteryVoltage Unsigned32 -> Integer32 ctlBatteryCurrent Unsigned32 -> Integer32 ctlSCSIProtocol DisplayString -> INTEGER Removed ctlStatsIndex from ctlStatsTable (reindexed with ctlIndex and renumbered objects accordingly). OEM changed the controller information, updated ctlTable accordingly. Removed ctlVoltage, ctlPartnerStatus, ctlMasterMode, ctlActiveMode, ctlPartnerActiveMode objects. Added ctlDriverRev, ctlReadinessStatus, & ctlRole objects. Removed scsiTargetTable and scsiChannelTable. Renumbered ctlStatsTable to { controllers 2 } to be closer associated with ctlTable and ctlBatteryTable to { controllers 3 } to accomodate the deletion of the aforementioned tables. Cleaned up some illegal character usage to make it SMIv2 compliant.', "Consolodated use of Presence datatype and changed 'chassis' to 'chassis'", "Partitioned off and created as it's own module",))
if mibBuilder.loadTexts: multiFlexServerScmMibModule.setLastUpdated('200709290000Z')
if mibBuilder.loadTexts: multiFlexServerScmMibModule.setOrganization('Intel Corporation')
if mibBuilder.loadTexts: multiFlexServerScmMibModule.setContactInfo('Brian Kurle Intel Corporation JF5-2-C3 Tel: 503-712-5032 E-Mail: brianx.j.kurle@intel.com')
if mibBuilder.loadTexts: multiFlexServerScmMibModule.setDescription('Controller Module of the Multi-Flex Server')
maxScms = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxScms.setStatus('current')
if mibBuilder.loadTexts: maxScms.setDescription('Maximum number of Storage Controllers possible in this chassis.')
numOfScms = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfScms.setStatus('current')
if mibBuilder.loadTexts: numOfScms.setDescription('The number of Storage Controllers in the system.')
scmPresenceMask = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPresenceMask.setStatus('current')
if mibBuilder.loadTexts: scmPresenceMask.setDescription("ASCII representation of bit string reflecting the presence of the blades with the left most 'bit' being bit 1 and maxScms bits being represented. Thus, '10' would express that SCM 1 (of two SCMs) are present")
scms = ObjectIdentity((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204))
if mibBuilder.loadTexts: scms.setStatus('current')
if mibBuilder.loadTexts: scms.setDescription('Container for Storage Controller Module specific information as well as all components logically contained within.')
scmTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1), )
if mibBuilder.loadTexts: scmTable.setStatus('current')
if mibBuilder.loadTexts: scmTable.setDescription('Each row describes a SCM in the chassis that is supplying environmental data or supporting management via the SNMP agent. There may be only one row in this table, but there must be at least one row.')
scmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1), ).setIndexNames((0, "INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmIndex"))
if mibBuilder.loadTexts: scmEntry.setStatus('current')
if mibBuilder.loadTexts: scmEntry.setDescription('Parameters for the Storage Controller Table')
scmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmIndex.setStatus('current')
if mibBuilder.loadTexts: scmIndex.setDescription('Slot to identify a particular SCM.')
scmPresence = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 2), Presence()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPresence.setStatus('current')
if mibBuilder.loadTexts: scmPresence.setDescription('Whether a particular SCM is present.')
scmVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmVendor.setStatus('current')
if mibBuilder.loadTexts: scmVendor.setDescription('Device manufacturer')
scmMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmMfgDate.setStatus('current')
if mibBuilder.loadTexts: scmMfgDate.setDescription('Manufacture date/time')
scmDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmDeviceName.setStatus('current')
if mibBuilder.loadTexts: scmDeviceName.setDescription('Device Name')
scmPart = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 6), IdromBinary16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPart.setStatus('current')
if mibBuilder.loadTexts: scmPart.setDescription('Device Part Number')
scmSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 7), IdromBinary16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmSerialNo.setStatus('current')
if mibBuilder.loadTexts: scmSerialNo.setDescription('Device Serial Number')
scmMaximumPower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 8), Power()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmMaximumPower.setStatus('current')
if mibBuilder.loadTexts: scmMaximumPower.setDescription('Static maximum power generation / consumption (in watts): <0 - Negative numbers indicate device consumes power (in watts) >0 - Positive numbers indicate device generates power (in watts) 0 - Device is passive (does not not consume or generate power) -1 - Maximum power generation/consumption not known or specified')
scmNominalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 9), Power()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNominalPower.setStatus('current')
if mibBuilder.loadTexts: scmNominalPower.setDescription('Static Nominal power generation / consumption (in watts): <0 - Negative numbers indicate device consumes power (in watts) >0 - Positive numbers indicate device generates power (in watts) 0 - Device is passive (does not not consume or generate power) -1 - Nominal power generation/consumption not known or specified')
scmAssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 10), IdromBinary16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmAssetTag.setStatus('current')
if mibBuilder.loadTexts: scmAssetTag.setDescription('Asset Tag # of device')
scmManagementMac = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 11), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmManagementMac.setStatus('current')
if mibBuilder.loadTexts: scmManagementMac.setDescription('MAC Address of switch management Ethernet port')
scmWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmWWN.setStatus('current')
if mibBuilder.loadTexts: scmWWN.setDescription('World-wide-name of this SCM.')
scmSCSIProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-32, -16, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", -32), ("unknown", -16), ("other", 1), ("scsi2", 2), ("scsi3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmSCSIProtocol.setStatus('current')
if mibBuilder.loadTexts: scmSCSIProtocol.setDescription('The SCSI Protocol Supported by the SCM.')
scmPowerLed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 14), PowerLedStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPowerLed.setStatus('current')
if mibBuilder.loadTexts: scmPowerLed.setDescription('State of the Power LED on the SCM')
scmFaultLed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 15), FaultLedStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmFaultLed.setStatus('current')
if mibBuilder.loadTexts: scmFaultLed.setDescription('State of the Fault LED on the SCM')
scmFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: scmFirmwareVersion.setDescription('The Firmware Version of the SCM.')
scmOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmOpStatus.setStatus('current')
if mibBuilder.loadTexts: scmOpStatus.setDescription('The Operational Status of the SCM.')
scmRole = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-32, -16, -1, 1, 0))).clone(namedValues=NamedValues(("notApplicable", -32), ("unknown", -16), ("unavailable", -1), ("primary", 1), ("secondary", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmRole.setStatus('current')
if mibBuilder.loadTexts: scmRole.setDescription('The role of the storage controller in the device instance. For the products that do not support High Availability, this attribute shall be always reported as primary.')
scmReadinessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmReadinessStatus.setStatus('current')
if mibBuilder.loadTexts: scmReadinessStatus.setDescription("The readiness of the storage controller in the instance. For the products that do not support High Availability, this attribute shall be always reported as 'Active'")
scmNumOfPoolsPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 20), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNumOfPoolsPresent.setStatus('current')
if mibBuilder.loadTexts: scmNumOfPoolsPresent.setDescription('The Number of Storage Pools present in the SCM.')
scmNumOfPhysicalDrivesPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 21), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNumOfPhysicalDrivesPresent.setStatus('current')
if mibBuilder.loadTexts: scmNumOfPhysicalDrivesPresent.setDescription('The Number of Physical Drives present in the SCM.')
scmNumOfPhysicalDrivesOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 22), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNumOfPhysicalDrivesOnline.setStatus('current')
if mibBuilder.loadTexts: scmNumOfPhysicalDrivesOnline.setDescription('The Number of Physical Drives online in the SCM.')
scmNumOfPhysicalDrivesOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 23), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNumOfPhysicalDrivesOffline.setStatus('current')
if mibBuilder.loadTexts: scmNumOfPhysicalDrivesOffline.setDescription('The Number of Physical Drives offline in the SCM.')
scmNumOfPhysicalDrivesWithPFA = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 24), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNumOfPhysicalDrivesWithPFA.setStatus('current')
if mibBuilder.loadTexts: scmNumOfPhysicalDrivesWithPFA.setDescription('The Number of Physical Drives with PFA in the SCM.')
scmNumOfPhysicalDrivesRebuilding = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 25), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNumOfPhysicalDrivesRebuilding.setStatus('current')
if mibBuilder.loadTexts: scmNumOfPhysicalDrivesRebuilding.setDescription('The number of Physical Drives rebuilding in the storage controller.')
scmNumOfPhysicalDrivesMissing = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 26), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNumOfPhysicalDrivesMissing.setStatus('current')
if mibBuilder.loadTexts: scmNumOfPhysicalDrivesMissing.setDescription('The number of missing Physical Drives (from existing configured storage pools) in the SCM.')
scmNumOfPhysicalDrivesUnconfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 27), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNumOfPhysicalDrivesUnconfigured.setStatus('current')
if mibBuilder.loadTexts: scmNumOfPhysicalDrivesUnconfigured.setDescription('The number of unconfigured Physical Drives in the SCM.')
scmNumOfVirtualDrivesPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 28), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNumOfVirtualDrivesPresent.setStatus('current')
if mibBuilder.loadTexts: scmNumOfVirtualDrivesPresent.setDescription('The Number of Virtual Drives present in the SCM.')
scmNumOfVirtualDrivesOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 29), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNumOfVirtualDrivesOnline.setStatus('current')
if mibBuilder.loadTexts: scmNumOfVirtualDrivesOnline.setDescription('The Number of Virtual Drives online in the SCM.')
scmNumOfVirtualDrivesOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 30), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNumOfVirtualDrivesOffline.setStatus('current')
if mibBuilder.loadTexts: scmNumOfVirtualDrivesOffline.setDescription('The Number of Virtual Drives offline in the SCM.')
scmNumOfVirtualDrivesCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 31), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNumOfVirtualDrivesCritical.setStatus('current')
if mibBuilder.loadTexts: scmNumOfVirtualDrivesCritical.setDescription('The Number of Virtual Drives critical in the SCM.')
scmNumOfGlobalSparesPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 32), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNumOfGlobalSparesPresent.setStatus('current')
if mibBuilder.loadTexts: scmNumOfGlobalSparesPresent.setDescription('The Number of Global Spares present in the SCM.')
scmNumOfDedicatedSparesPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 33), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNumOfDedicatedSparesPresent.setStatus('current')
if mibBuilder.loadTexts: scmNumOfDedicatedSparesPresent.setDescription('The Number of Dedicated Spares present in the SCM.')
scmNumOfRevertibleGlobalSparesPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 34), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNumOfRevertibleGlobalSparesPresent.setStatus('current')
if mibBuilder.loadTexts: scmNumOfRevertibleGlobalSparesPresent.setDescription('The Number of Revertive Global Spares present in the SCM.')
scmNumOfRevertibleGlobalSparesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 35), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNumOfRevertibleGlobalSparesUsed.setStatus('current')
if mibBuilder.loadTexts: scmNumOfRevertibleGlobalSparesUsed.setDescription('The Number of Revertive Global Spares used in the SCM.')
scmNumOfRevertibleDedicatedSparesPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 36), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNumOfRevertibleDedicatedSparesPresent.setStatus('current')
if mibBuilder.loadTexts: scmNumOfRevertibleDedicatedSparesPresent.setDescription('The Number of Revertive Dedicated Spares present in the SCM.')
scmNumOfRevertibleDedicatedSparesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 37), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNumOfRevertibleDedicatedSparesUsed.setStatus('current')
if mibBuilder.loadTexts: scmNumOfRevertibleDedicatedSparesUsed.setDescription('The Number of Revertive Dedicated Spares used in the SCM.')
scmNumOfBGAs = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 38), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNumOfBGAs.setStatus('current')
if mibBuilder.loadTexts: scmNumOfBGAs.setDescription('The Number of Background Activities cocurrently running on the SCM.')
scmPowerOnHours = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 39), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPowerOnHours.setStatus('current')
if mibBuilder.loadTexts: scmPowerOnHours.setDescription('The number of hours since last power on of the SCM.')
scmDirtyCachePercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 40), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmDirtyCachePercentage.setStatus('current')
if mibBuilder.loadTexts: scmDirtyCachePercentage.setDescription('It Indicates percentage of the dirty cache on the SCM')
scmCacheUsagePercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 41), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmCacheUsagePercentage.setStatus('current')
if mibBuilder.loadTexts: scmCacheUsagePercentage.setDescription('It Indicates percentage of the used cache on the SCM')
scmStatsTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 2), )
if mibBuilder.loadTexts: scmStatsTable.setStatus('current')
if mibBuilder.loadTexts: scmStatsTable.setDescription('A table of SCM Statistics.')
scmStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 2, 1), )
scmEntry.registerAugmentions(("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmStatsEntry"))
scmStatsEntry.setIndexNames(*scmEntry.getIndexNames())
if mibBuilder.loadTexts: scmStatsEntry.setStatus('current')
if mibBuilder.loadTexts: scmStatsEntry.setDescription('The statistics of a SCM since its last reset or statistics rest.')
scmStatsDataTransferred = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmStatsDataTransferred.setStatus('current')
if mibBuilder.loadTexts: scmStatsDataTransferred.setDescription('The total number of bytes of data transferred to and from the SCM.')
scmStatsReadDataTransferred = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmStatsReadDataTransferred.setStatus('current')
if mibBuilder.loadTexts: scmStatsReadDataTransferred.setDescription('The total number of bytes of data transferred from the SCM.')
scmStatsWriteDataTransferred = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmStatsWriteDataTransferred.setStatus('current')
if mibBuilder.loadTexts: scmStatsWriteDataTransferred.setDescription('The total number of bytes of data transferred to the SCM.')
scmStatsNumOfErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmStatsNumOfErrors.setStatus('current')
if mibBuilder.loadTexts: scmStatsNumOfErrors.setDescription('The total number of errors.')
scmStatsNumOfNonRWErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmStatsNumOfNonRWErrors.setStatus('current')
if mibBuilder.loadTexts: scmStatsNumOfNonRWErrors.setDescription('The total number of non-RW errors.')
scmStatsNumOfReadErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmStatsNumOfReadErrors.setStatus('current')
if mibBuilder.loadTexts: scmStatsNumOfReadErrors.setDescription('The total number of Read errors.')
scmStatsNumOfWriteErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmStatsNumOfWriteErrors.setStatus('current')
if mibBuilder.loadTexts: scmStatsNumOfWriteErrors.setDescription('The total number of Write errors.')
scmStatsNumOfIORequests = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmStatsNumOfIORequests.setStatus('current')
if mibBuilder.loadTexts: scmStatsNumOfIORequests.setDescription('The total number of IO requests.')
scmStatsNumOfNonRWRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmStatsNumOfNonRWRequests.setStatus('current')
if mibBuilder.loadTexts: scmStatsNumOfNonRWRequests.setDescription('The total number of non-RW requests.')
scmStatsNumOfReadRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmStatsNumOfReadRequests.setStatus('current')
if mibBuilder.loadTexts: scmStatsNumOfReadRequests.setDescription('The total number of read requests.')
scmStatsNumOfWriteRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmStatsNumOfWriteRequests.setStatus('current')
if mibBuilder.loadTexts: scmStatsNumOfWriteRequests.setDescription('The total number of write requests.')
scmStatsStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmStatsStartTime.setStatus('current')
if mibBuilder.loadTexts: scmStatsStartTime.setDescription('The time when the statistics date starts to accumulate since last statistics reset.')
scmStatsCollectionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmStatsCollectionTime.setStatus('current')
if mibBuilder.loadTexts: scmStatsCollectionTime.setDescription('The time when the statistics data was collected or updated last time.')
scmBatteryTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3), )
if mibBuilder.loadTexts: scmBatteryTable.setStatus('current')
if mibBuilder.loadTexts: scmBatteryTable.setDescription('The Battery table contains general information on Battery on each SCM.')
scmBatteryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1), )
scmEntry.registerAugmentions(("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryEntry"))
scmBatteryEntry.setIndexNames(*scmEntry.getIndexNames())
if mibBuilder.loadTexts: scmBatteryEntry.setStatus('current')
if mibBuilder.loadTexts: scmBatteryEntry.setDescription('A Battery entry containing objects for a particular Battery on each SCM.')
scmBatteryPresence = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 1), Presence()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatteryPresence.setStatus('current')
if mibBuilder.loadTexts: scmBatteryPresence.setDescription('Whether a particular battery is present.')
scmBatteryVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatteryVendor.setStatus('current')
if mibBuilder.loadTexts: scmBatteryVendor.setDescription('Device manufacturer')
scmBatteryMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatteryMfgDate.setStatus('current')
if mibBuilder.loadTexts: scmBatteryMfgDate.setDescription('Manufacture date/time')
scmBatteryDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatteryDeviceName.setStatus('current')
if mibBuilder.loadTexts: scmBatteryDeviceName.setDescription('Device Name of this battery.')
scmBatteryPart = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 5), IdromBinary16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatteryPart.setStatus('current')
if mibBuilder.loadTexts: scmBatteryPart.setDescription('Device Part Number')
scmBatterySerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 6), IdromBinary16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatterySerialNo.setStatus('current')
if mibBuilder.loadTexts: scmBatterySerialNo.setDescription('Device Serial Number')
scmBatteryMaximumPower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 7), Power()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatteryMaximumPower.setStatus('current')
if mibBuilder.loadTexts: scmBatteryMaximumPower.setDescription('Static maximum power generation / consumption (in watts): <0 - Negative numbers indicate device consumes power (in watts) >0 - Positive numbers indicate device generates power (in watts) 0 - Device is passive (does not not consume or generate power) -1 - Nominal power generation/consumption not known or specified')
scmBatteryNominalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 8), Power()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatteryNominalPower.setStatus('current')
if mibBuilder.loadTexts: scmBatteryNominalPower.setDescription('Static Nominal power generation / consumption (in watts): <0 - Negative numbers indicate device consumes power (in watts) >0 - Positive numbers indicate device generates power (in watts) 0 - Device is passive (does not not consume or generate power) -1 - Nominal power generation/consumption not known or specified')
scmBatteryAssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 9), IdromBinary16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatteryAssetTag.setStatus('current')
if mibBuilder.loadTexts: scmBatteryAssetTag.setDescription('Asset Tag # of device')
scmBatteryDeviceChemistry = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatteryDeviceChemistry.setStatus('current')
if mibBuilder.loadTexts: scmBatteryDeviceChemistry.setDescription('Device Chemistry of this battery.')
scmBatteryTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 11), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatteryTemperature.setStatus('current')
if mibBuilder.loadTexts: scmBatteryTemperature.setDescription('Temperature of this battery in celsius.')
scmBatteryTempChargeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 12), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatteryTempChargeThreshold.setStatus('current')
if mibBuilder.loadTexts: scmBatteryTempChargeThreshold.setDescription('Temperature in celsius threshold for charging of this battery.')
scmBatteryTempDisChargeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 13), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatteryTempDisChargeThreshold.setStatus('current')
if mibBuilder.loadTexts: scmBatteryTempDisChargeThreshold.setDescription('Temperature in celsius threshold for discharging of this battery.')
scmBatteryCycleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 14), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatteryCycleCount.setStatus('current')
if mibBuilder.loadTexts: scmBatteryCycleCount.setDescription('Cycle Count of this battery.')
scmBatteryRemainCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 15), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatteryRemainCapacity.setStatus('current')
if mibBuilder.loadTexts: scmBatteryRemainCapacity.setDescription('Remaining capacity in percentage of this battery.')
scmBatteryVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 16), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatteryVoltage.setStatus('current')
if mibBuilder.loadTexts: scmBatteryVoltage.setDescription('Voltage in mV of this battery.')
scmBatteryCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 17), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatteryCurrent.setStatus('current')
if mibBuilder.loadTexts: scmBatteryCurrent.setDescription('Current in mA of this battery.')
scmBatteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatteryStatus.setStatus('current')
if mibBuilder.loadTexts: scmBatteryStatus.setDescription('Status of this battery.')
scmBatteryCellType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-32, -16, 2, 4))).clone(namedValues=NamedValues(("notApplicable", -32), ("unknown", -16), ("twoCell", 2), ("fourCell", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatteryCellType.setStatus('current')
if mibBuilder.loadTexts: scmBatteryCellType.setDescription('The type of the battery cell.')
scmBatteryHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 20), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatteryHoldTime.setStatus('current')
if mibBuilder.loadTexts: scmBatteryHoldTime.setDescription('The hold time of battery in hour.')
ctlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 2, 2, 14)).setObjects(("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "maxScms"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "numOfScms"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmPresenceMask"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmIndex"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmPresence"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmVendor"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmMfgDate"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmDeviceName"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmPart"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmSerialNo"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmMaximumPower"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNominalPower"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmAssetTag"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmManagementMac"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmWWN"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmSCSIProtocol"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmPowerLed"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmFaultLed"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmFirmwareVersion"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmOpStatus"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmRole"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmReadinessStatus"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNumOfPoolsPresent"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNumOfPhysicalDrivesPresent"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNumOfPhysicalDrivesOnline"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNumOfPhysicalDrivesOffline"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNumOfPhysicalDrivesWithPFA"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNumOfPhysicalDrivesRebuilding"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNumOfPhysicalDrivesMissing"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNumOfPhysicalDrivesUnconfigured"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNumOfVirtualDrivesPresent"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNumOfVirtualDrivesOnline"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNumOfVirtualDrivesOffline"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNumOfVirtualDrivesCritical"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNumOfGlobalSparesPresent"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNumOfDedicatedSparesPresent"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNumOfRevertibleGlobalSparesPresent"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNumOfRevertibleGlobalSparesUsed"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNumOfRevertibleDedicatedSparesPresent"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNumOfRevertibleDedicatedSparesUsed"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNumOfBGAs"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmPowerOnHours"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmDirtyCachePercentage"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmCacheUsagePercentage"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmStatsDataTransferred"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmStatsReadDataTransferred"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmStatsWriteDataTransferred"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmStatsNumOfErrors"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmStatsNumOfNonRWErrors"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmStatsNumOfReadErrors"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmStatsNumOfWriteErrors"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmStatsNumOfIORequests"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmStatsNumOfNonRWRequests"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmStatsNumOfReadRequests"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmStatsNumOfWriteRequests"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmStatsStartTime"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmStatsCollectionTime"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryPresence"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryVendor"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryMfgDate"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryDeviceName"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryPart"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatterySerialNo"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryMaximumPower"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryNominalPower"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryAssetTag"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryDeviceChemistry"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryTemperature"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryTempChargeThreshold"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryTempDisChargeThreshold"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryCycleCount"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryRemainCapacity"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryVoltage"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryCurrent"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryStatus"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryCellType"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryHoldTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctlGroup = ctlGroup.setStatus('current')
if mibBuilder.loadTexts: ctlGroup.setDescription('Description.')
mibBuilder.exportSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", scmBatteryTempChargeThreshold=scmBatteryTempChargeThreshold, scmBatteryHoldTime=scmBatteryHoldTime, multiFlexServerScmMibModule=multiFlexServerScmMibModule, scmNumOfPhysicalDrivesMissing=scmNumOfPhysicalDrivesMissing, scmNumOfPhysicalDrivesRebuilding=scmNumOfPhysicalDrivesRebuilding, scmBatteryAssetTag=scmBatteryAssetTag, scmNumOfBGAs=scmNumOfBGAs, scmManagementMac=scmManagementMac, scmStatsNumOfErrors=scmStatsNumOfErrors, scmBatterySerialNo=scmBatterySerialNo, scmNumOfPhysicalDrivesWithPFA=scmNumOfPhysicalDrivesWithPFA, scmPresence=scmPresence, scmBatteryTempDisChargeThreshold=scmBatteryTempDisChargeThreshold, scmPowerLed=scmPowerLed, scmRole=scmRole, scmNumOfDedicatedSparesPresent=scmNumOfDedicatedSparesPresent, scmStatsCollectionTime=scmStatsCollectionTime, scmBatteryVoltage=scmBatteryVoltage, scmNumOfRevertibleDedicatedSparesUsed=scmNumOfRevertibleDedicatedSparesUsed, scmMaximumPower=scmMaximumPower, scmNumOfPoolsPresent=scmNumOfPoolsPresent, scmNumOfVirtualDrivesOnline=scmNumOfVirtualDrivesOnline, scmBatteryTemperature=scmBatteryTemperature, scmBatteryPresence=scmBatteryPresence, scmDirtyCachePercentage=scmDirtyCachePercentage, scmNumOfPhysicalDrivesPresent=scmNumOfPhysicalDrivesPresent, scmStatsDataTransferred=scmStatsDataTransferred, scmStatsNumOfReadRequests=scmStatsNumOfReadRequests, scmNumOfPhysicalDrivesOnline=scmNumOfPhysicalDrivesOnline, scmWWN=scmWWN, scmSerialNo=scmSerialNo, scmBatteryEntry=scmBatteryEntry, scmBatteryMfgDate=scmBatteryMfgDate, scms=scms, scmStatsNumOfWriteErrors=scmStatsNumOfWriteErrors, scmStatsStartTime=scmStatsStartTime, scmNumOfRevertibleGlobalSparesUsed=scmNumOfRevertibleGlobalSparesUsed, ctlGroup=ctlGroup, scmEntry=scmEntry, scmBatteryDeviceChemistry=scmBatteryDeviceChemistry, scmNumOfRevertibleDedicatedSparesPresent=scmNumOfRevertibleDedicatedSparesPresent, scmBatteryCycleCount=scmBatteryCycleCount, scmTable=scmTable, scmNumOfGlobalSparesPresent=scmNumOfGlobalSparesPresent, scmStatsNumOfNonRWRequests=scmStatsNumOfNonRWRequests, scmFirmwareVersion=scmFirmwareVersion, scmMfgDate=scmMfgDate, scmStatsReadDataTransferred=scmStatsReadDataTransferred, scmStatsNumOfIORequests=scmStatsNumOfIORequests, PYSNMP_MODULE_ID=multiFlexServerScmMibModule, scmPresenceMask=scmPresenceMask, scmNominalPower=scmNominalPower, scmSCSIProtocol=scmSCSIProtocol, scmCacheUsagePercentage=scmCacheUsagePercentage, scmBatteryNominalPower=scmBatteryNominalPower, scmBatteryMaximumPower=scmBatteryMaximumPower, scmNumOfVirtualDrivesOffline=scmNumOfVirtualDrivesOffline, scmBatteryCellType=scmBatteryCellType, scmNumOfVirtualDrivesPresent=scmNumOfVirtualDrivesPresent, scmOpStatus=scmOpStatus, scmStatsNumOfNonRWErrors=scmStatsNumOfNonRWErrors, scmBatteryRemainCapacity=scmBatteryRemainCapacity, scmFaultLed=scmFaultLed, scmNumOfVirtualDrivesCritical=scmNumOfVirtualDrivesCritical, scmAssetTag=scmAssetTag, maxScms=maxScms, scmStatsNumOfReadErrors=scmStatsNumOfReadErrors, scmBatteryStatus=scmBatteryStatus, scmDeviceName=scmDeviceName, scmStatsNumOfWriteRequests=scmStatsNumOfWriteRequests, scmNumOfPhysicalDrivesOffline=scmNumOfPhysicalDrivesOffline, scmStatsTable=scmStatsTable, scmBatteryTable=scmBatteryTable, scmBatteryDeviceName=scmBatteryDeviceName, scmReadinessStatus=scmReadinessStatus, scmStatsEntry=scmStatsEntry, scmBatteryVendor=scmBatteryVendor, scmIndex=scmIndex, scmBatteryCurrent=scmBatteryCurrent, scmPowerOnHours=scmPowerOnHours, scmBatteryPart=scmBatteryPart, scmStatsWriteDataTransferred=scmStatsWriteDataTransferred, numOfScms=numOfScms, scmNumOfRevertibleGlobalSparesPresent=scmNumOfRevertibleGlobalSparesPresent, scmNumOfPhysicalDrivesUnconfigured=scmNumOfPhysicalDrivesUnconfigured, scmPart=scmPart, scmVendor=scmVendor)
