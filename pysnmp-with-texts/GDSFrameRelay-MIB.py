#
# PySNMP MIB module GDSFrameRelay-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GDSFrameRelay-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:19:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, ObjectIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, NotificationType, Bits, Integer32, iso, IpAddress, Counter64, enterprises, ModuleIdentity, MibIdentifier, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "ObjectIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "NotificationType", "Bits", "Integer32", "iso", "IpAddress", "Counter64", "enterprises", "ModuleIdentity", "MibIdentifier", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
gds = MibIdentifier((1, 3, 6, 1, 4, 1, 1955))
seriesfr = MibIdentifier((1, 3, 6, 1, 4, 1, 1955, 5))
is_GDS_frame_relay_device5 = MibIdentifier((1, 3, 6, 1, 4, 1, 1955, 5, 5)).setLabel("is-GDS-frame-relay-device5")
unit = MibIdentifier((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1))
frame_relay = MibIdentifier((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2)).setLabel("frame-relay")
configure = MibIdentifier((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3))
uVersion_Strings = MibIdentifier((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 1)).setLabel("uVersion-Strings")
uMain_HW_Version = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("uMain-HW-Version").setMaxAccess("readonly")
if mibBuilder.loadTexts: uMain_HW_Version.setStatus('mandatory')
if mibBuilder.loadTexts: uMain_HW_Version.setDescription('The frame relay encryptor mainboard HW version.')
uComm_HW_Version = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("uComm-HW-Version").setMaxAccess("readonly")
if mibBuilder.loadTexts: uComm_HW_Version.setStatus('mandatory')
if mibBuilder.loadTexts: uComm_HW_Version.setDescription('The frame relay encryptor commsboard HW version.')
uMain_SW_Version = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("uMain-SW-Version").setMaxAccess("readonly")
if mibBuilder.loadTexts: uMain_SW_Version.setStatus('mandatory')
if mibBuilder.loadTexts: uMain_SW_Version.setDescription('The frame relay encryptor mainboard SW version. Every effort will be made by GDS to make the MIB backwards compatible to the frame relay encryptor software. In case of doubt or queries please quote the following release number. Enterprise MIB Version Release V1.8p ')
uComm_SW_Version = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("uComm-SW-Version").setMaxAccess("readonly")
if mibBuilder.loadTexts: uComm_SW_Version.setStatus('mandatory')
if mibBuilder.loadTexts: uComm_SW_Version.setDescription('The frame relay encryptor comms board SW version.')
uAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uAlgorithm.setStatus('mandatory')
if mibBuilder.loadTexts: uAlgorithm.setDescription('The frame relay encryptor encryption algorithm DES or GDS.')
uAccess_Table = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("uAccess-Table").setMaxAccess("readonly")
if mibBuilder.loadTexts: uAccess_Table.setStatus('mandatory')
if mibBuilder.loadTexts: uAccess_Table.setDescription('The frame relay encryptor access control table version.')
uConfigured = MibIdentifier((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 2))
uOwn_SID = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setLabel("uOwn-SID").setMaxAccess("readonly")
if mibBuilder.loadTexts: uOwn_SID.setStatus('mandatory')
if mibBuilder.loadTexts: uOwn_SID.setDescription('The Station Identity of this frame relay encryptor .')
uDynamic = MibIdentifier((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 3))
uCurrent_Date = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setLabel("uCurrent-Date").setMaxAccess("readwrite")
if mibBuilder.loadTexts: uCurrent_Date.setStatus('mandatory')
if mibBuilder.loadTexts: uCurrent_Date.setDescription('The uCurrentTime indicates the current date of the frame relay encryptor . Date is in the format dd/mm/yy.')
uCurrent_Time = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setLabel("uCurrent-Time").setMaxAccess("readwrite")
if mibBuilder.loadTexts: uCurrent_Time.setStatus('mandatory')
if mibBuilder.loadTexts: uCurrent_Time.setDescription('The uCurrentTime indicates the current time of the frame relay encryptor . Time is in the format hh:mm.')
uDevice_State = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("normal", 1), ("test-empty", 2), ("test-loaded", 3), ("failure", 4), ("fail-cipher-chip", 5), ("fail-lock-open", 6), ("fail-lock-open-and-cipher-chip", 7)))).setLabel("uDevice-State").setMaxAccess("readonly")
if mibBuilder.loadTexts: uDevice_State.setStatus('mandatory')
if mibBuilder.loadTexts: uDevice_State.setDescription('The current state of the frame relay encryptor . There are two test states: test-empty with no security parameters loaded test-loaded which is entered with live parameters from the live state ')
uComms_State = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("booting", 1), ("encrypting", 2), ("not-encrypting", 3), ("failure", 4)))).setLabel("uComms-State").setMaxAccess("readonly")
if mibBuilder.loadTexts: uComms_State.setStatus('mandatory')
if mibBuilder.loadTexts: uComms_State.setDescription('The current state of the frame relay encryptor comms board.')
uNMS_State = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("read-only", 2), ("read-write", 3)))).setLabel("uNMS-State").setMaxAccess("readonly")
if mibBuilder.loadTexts: uNMS_State.setStatus('mandatory')
if mibBuilder.loadTexts: uNMS_State.setDescription('The current state of the SNMP agent for NMS requests. Only in the writeenabled state are Sets allowed.')
uSM_State = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("removed", 2), ("failure", 3)))).setLabel("uSM-State").setMaxAccess("readonly")
if mibBuilder.loadTexts: uSM_State.setStatus('mandatory')
if mibBuilder.loadTexts: uSM_State.setDescription('The current state of the Right SM module. This should be checked after parameter updates in the configure group or the MIBII system group.')
uReady_Alarm_Led = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 9, 11))).clone(namedValues=NamedValues(("red-test-mode", 1), ("green-normal", 2), ("yellow-self-testing", 3), ("flashing-red-alarm", 9), ("flashing-yellow-user-logged-in", 11)))).setLabel("uReady-Alarm-Led").setMaxAccess("readonly")
if mibBuilder.loadTexts: uReady_Alarm_Led.setStatus('mandatory')
if mibBuilder.loadTexts: uReady_Alarm_Led.setDescription('The state of the front panel LED red: GRETACODER is in Test Mode green: GRETACODER is in Normal Mode yellow: GRETACODER is performing a self test blinking-red: GRETACODER is in Failure state blinking-yellow: GRETACODER MMI user is logged-in')
uBackground = MibIdentifier((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 4))
uRAG_tests = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 4, 1), Counter32()).setLabel("uRAG-tests").setMaxAccess("readonly")
if mibBuilder.loadTexts: uRAG_tests.setStatus('mandatory')
if mibBuilder.loadTexts: uRAG_tests.setDescription('The total number of Random Number Generator tests made A test is made once per minute.')
uRAG_fails = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 4, 2), Counter32()).setLabel("uRAG-fails").setMaxAccess("readonly")
if mibBuilder.loadTexts: uRAG_fails.setStatus('mandatory')
if mibBuilder.loadTexts: uRAG_fails.setDescription('The total number of Random Number Generator failures recorded')
uRAG_threshold = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 4, 3), Counter32()).setLabel("uRAG-threshold").setMaxAccess("readwrite")
if mibBuilder.loadTexts: uRAG_threshold.setStatus('mandatory')
if mibBuilder.loadTexts: uRAG_threshold.setDescription('The number of failures that should trigger a Trap. Changing this value also clears the tests and fails counters')
reset_FR_statistic_counters = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("reset-FR-statistic-counters").setMaxAccess("readwrite")
if mibBuilder.loadTexts: reset_FR_statistic_counters.setStatus('mandatory')
if mibBuilder.loadTexts: reset_FR_statistic_counters.setDescription('This command clears all the frame relay statistical counters for both ports.')
fR_Traffic_Table = MibTable((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 2), ).setLabel("fR-Traffic-Table")
if mibBuilder.loadTexts: fR_Traffic_Table.setStatus('mandatory')
if mibBuilder.loadTexts: fR_Traffic_Table.setDescription('The Statistics Table for the frame relay encryptor .')
fR_Traffic_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 2, 1), ).setLabel("fR-Traffic-Entry").setIndexNames((0, "GDSFrameRelay-MIB", "frPort-Index"))
if mibBuilder.loadTexts: fR_Traffic_Entry.setStatus('mandatory')
if mibBuilder.loadTexts: fR_Traffic_Entry.setDescription('')
frPort_Index = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 2, 1, 1), Integer32()).setLabel("frPort-Index").setMaxAccess("readonly")
if mibBuilder.loadTexts: frPort_Index.setStatus('mandatory')
if mibBuilder.loadTexts: frPort_Index.setDescription('Port Number Index. The ifIndex Value of the corresponding ifEntry from rfc1213.')
frPort_Type = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("plain-port", 1), ("cipher-port", 2)))).setLabel("frPort-Type").setMaxAccess("readonly")
if mibBuilder.loadTexts: frPort_Type.setStatus('mandatory')
if mibBuilder.loadTexts: frPort_Type.setDescription('Plain is on the local side, cipher the network')
frGood_Frames = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 2, 1, 3), Counter32()).setLabel("frGood-Frames").setMaxAccess("readonly")
if mibBuilder.loadTexts: frGood_Frames.setStatus('mandatory')
if mibBuilder.loadTexts: frGood_Frames.setDescription('The total number of frames received by the frame relay encryptor on a port.')
frBad_Frames = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 2, 1, 4), Counter32()).setLabel("frBad-Frames").setMaxAccess("readonly")
if mibBuilder.loadTexts: frBad_Frames.setStatus('mandatory')
if mibBuilder.loadTexts: frBad_Frames.setDescription('The number of bad frames received by the frame relay encryptor on a port. These are classified further in frRxErrTable.')
frInactive_DLCI = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 2, 1, 5), Counter32()).setLabel("frInactive-DLCI").setMaxAccess("readonly")
if mibBuilder.loadTexts: frInactive_DLCI.setStatus('mandatory')
if mibBuilder.loadTexts: frInactive_DLCI.setDescription('The number of illegal or unknown DLCIs received by the frame relay encryptor on a port.')
frReceived_FECN = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 2, 1, 6), Counter32()).setLabel("frReceived-FECN").setMaxAccess("readonly")
if mibBuilder.loadTexts: frReceived_FECN.setStatus('mandatory')
if mibBuilder.loadTexts: frReceived_FECN.setDescription('The number of frames with a forward congestion notification received by the frame relay encryptor on a port.')
frReceived_BECN = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 2, 1, 7), Counter32()).setLabel("frReceived-BECN").setMaxAccess("readonly")
if mibBuilder.loadTexts: frReceived_BECN.setStatus('mandatory')
if mibBuilder.loadTexts: frReceived_BECN.setDescription('The number of frames with a backward congestion notification received by the frame relay encryptor on a port.')
frSent_Frames = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 2, 1, 8), Counter32()).setLabel("frSent-Frames").setMaxAccess("readonly")
if mibBuilder.loadTexts: frSent_Frames.setStatus('mandatory')
if mibBuilder.loadTexts: frSent_Frames.setDescription('The total number of frames transmitted by the frame relay encryptor on a port.')
frDropped_Frames = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 2, 1, 9), Counter32()).setLabel("frDropped-Frames").setMaxAccess("readonly")
if mibBuilder.loadTexts: frDropped_Frames.setStatus('mandatory')
if mibBuilder.loadTexts: frDropped_Frames.setDescription('The total number of TX frames dropped by the frame relay encryptor on a port.')
fR_RX_Err_Table = MibTable((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 3), ).setLabel("fR-RX-Err-Table")
if mibBuilder.loadTexts: fR_RX_Err_Table.setStatus('mandatory')
if mibBuilder.loadTexts: fR_RX_Err_Table.setDescription('The receive error information for a frame relay encryptor frame relay port.')
fR_RX_Err_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 3, 1), ).setLabel("fR-RX-Err-Entry").setIndexNames((0, "GDSFrameRelay-MIB", "frRxErrIndex"))
if mibBuilder.loadTexts: fR_RX_Err_Entry.setStatus('mandatory')
if mibBuilder.loadTexts: fR_RX_Err_Entry.setDescription('')
frRxErrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frRxErrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frRxErrIndex.setDescription(' Port Number Index. The ifIndex Value of the corresponding ifEntry from rfc1213.')
frRxErrShort_Frames = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 3, 1, 2), Counter32()).setLabel("frRxErrShort-Frames").setMaxAccess("readonly")
if mibBuilder.loadTexts: frRxErrShort_Frames.setStatus('mandatory')
if mibBuilder.loadTexts: frRxErrShort_Frames.setDescription(' The number of short frames received.')
frRxErrAborted_Frames = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 3, 1, 3), Counter32()).setLabel("frRxErrAborted-Frames").setMaxAccess("readonly")
if mibBuilder.loadTexts: frRxErrAborted_Frames.setStatus('mandatory')
if mibBuilder.loadTexts: frRxErrAborted_Frames.setDescription(' The number of aborted frames received.')
frRxErrResidual_Bits = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 3, 1, 4), Counter32()).setLabel("frRxErrResidual-Bits").setMaxAccess("readonly")
if mibBuilder.loadTexts: frRxErrResidual_Bits.setStatus('mandatory')
if mibBuilder.loadTexts: frRxErrResidual_Bits.setDescription(' The number of residual bit frames received.')
frRxErrOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frRxErrOverruns.setStatus('mandatory')
if mibBuilder.loadTexts: frRxErrOverruns.setDescription(' The number of overruns received.')
frRxErrCRC_Errors = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 3, 1, 6), Counter32()).setLabel("frRxErrCRC-Errors").setMaxAccess("readonly")
if mibBuilder.loadTexts: frRxErrCRC_Errors.setStatus('mandatory')
if mibBuilder.loadTexts: frRxErrCRC_Errors.setDescription(' The number of CRC errors received.')
pi_FR_Layer1 = MibIdentifier((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 1)).setLabel("pi-FR-Layer1")
piFRInterface_Installed = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("is-RS422", 1), ("is-V35", 2), ("is-T1", 3), ("is-E1", 4), ("is-X21", 5), ("is-undefined", 6)))).setLabel("piFRInterface-Installed").setMaxAccess("readonly")
if mibBuilder.loadTexts: piFRInterface_Installed.setStatus('mandatory')
if mibBuilder.loadTexts: piFRInterface_Installed.setDescription(' The type of Frame Relay Physical interface. The following parameters are required for: - RS422/V35/X21 clock source - G703 E1 impedance, framemode, timeslots - T1 T1 frame mode, timeslots.')
piFRTX_Clock_Source = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("is-DCE", 1), ("is-DTE", 2)))).setLabel("piFRTX-Clock-Source").setMaxAccess("readwrite")
if mibBuilder.loadTexts: piFRTX_Clock_Source.setStatus('mandatory')
if mibBuilder.loadTexts: piFRTX_Clock_Source.setDescription(' Required if the physical type is: RS422 V.35 X.21')
piFRE1_Plain_Port_Impedance = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("is-75-OHMS-BNC", 1), ("is-120-OHMS-D-SUB", 2)))).setLabel("piFRE1-Plain-Port-Impedance").setMaxAccess("readwrite")
if mibBuilder.loadTexts: piFRE1_Plain_Port_Impedance.setStatus('mandatory')
if mibBuilder.loadTexts: piFRE1_Plain_Port_Impedance.setDescription(' ')
piFRE1_Cipher_Port_Impedance = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("is-75-OHMS-BNC", 1), ("is-120-OHMS-D-SUB", 2)))).setLabel("piFRE1-Cipher-Port-Impedance").setMaxAccess("readwrite")
if mibBuilder.loadTexts: piFRE1_Cipher_Port_Impedance.setStatus('mandatory')
if mibBuilder.loadTexts: piFRE1_Cipher_Port_Impedance.setDescription(' ')
piFRE1_Framing_Mode = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("is-unframed", 1), ("is-G704", 2)))).setLabel("piFRE1-Framing-Mode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: piFRE1_Framing_Mode.setStatus('mandatory')
if mibBuilder.loadTexts: piFRE1_Framing_Mode.setDescription(' ')
piFRE1_Time_Slot_Options = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("all-slots-except-TS0", 1), ("all-slots-except-TS0-and-TS16", 2)))).setLabel("piFRE1-Time-Slot-Options").setMaxAccess("readwrite")
if mibBuilder.loadTexts: piFRE1_Time_Slot_Options.setStatus('mandatory')
if mibBuilder.loadTexts: piFRE1_Time_Slot_Options.setDescription(' Required if the physical type is G703 (E1) E1 time slot options available: Bit values shown in piFRE1-Time-Slots all slots, except TS0 0xff, 0xff, 0xff, 0xfe all slots, except TS0,TS16 0xff, 0xfe, 0xff, 0xfe')
piFRE1_Time_Slots = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setLabel("piFRE1-Time-Slots").setMaxAccess("readonly")
if mibBuilder.loadTexts: piFRE1_Time_Slots.setStatus('mandatory')
if mibBuilder.loadTexts: piFRE1_Time_Slots.setDescription(' An Octet bit string. Each bit defines an E1 time slot: 0= not used for frame relay 1= used for frame relay')
piFRT1_Plain_Port_Pulse = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("is-CSU", 1), ("is-CSU-T1C1", 2), ("is-DSX-1-0-40m", 3), ("is-DSX-1-40-80m", 4), ("is-DSX-1-80-120m", 5), ("is-DSX-1-120-160m", 6), ("is-DSX-1-160-200m", 7)))).setLabel("piFRT1-Plain-Port-Pulse").setMaxAccess("readwrite")
if mibBuilder.loadTexts: piFRT1_Plain_Port_Pulse.setStatus('mandatory')
if mibBuilder.loadTexts: piFRT1_Plain_Port_Pulse.setDescription(' ')
piFRT1_Cipher_Port_Pulse = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("is-CSU", 1), ("is-CSU-T1C1", 2), ("is-DSX-1-0-40m", 3), ("is-DSX-1-40-80m", 4), ("is-DSX-1-80-120m", 5), ("is-DSX-1-120-160m", 6), ("is-DSX-1-160-200m", 7)))).setLabel("piFRT1-Cipher-Port-Pulse").setMaxAccess("readwrite")
if mibBuilder.loadTexts: piFRT1_Cipher_Port_Pulse.setStatus('mandatory')
if mibBuilder.loadTexts: piFRT1_Cipher_Port_Pulse.setDescription(' ')
piFRT1_Framing_Mode = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("is-unframed", 1), ("is-ESF", 3), ("is-D4", 4)))).setLabel("piFRT1-Framing-Mode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: piFRT1_Framing_Mode.setStatus('mandatory')
if mibBuilder.loadTexts: piFRT1_Framing_Mode.setDescription(' ')
piFRT1_Time_Slot_Options = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("all-slots", 1)))).setLabel("piFRT1-Time-Slot-Options").setMaxAccess("readwrite")
if mibBuilder.loadTexts: piFRT1_Time_Slot_Options.setStatus('mandatory')
if mibBuilder.loadTexts: piFRT1_Time_Slot_Options.setDescription(' Required if the physical type is T1 T1 time slot options available: Bit values shown in piFRT1TimeSlots all slots 0xff, 0xff, 0xff')
piFRT1_Time_Slots = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setLabel("piFRT1-Time-Slots").setMaxAccess("readonly")
if mibBuilder.loadTexts: piFRT1_Time_Slots.setStatus('mandatory')
if mibBuilder.loadTexts: piFRT1_Time_Slots.setDescription(' An Octet bit string. Each bit defines a T1 time slot: 0= not used for frame relay 1= used for frame relay')
pi_FR_Layer2 = MibIdentifier((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 2)).setLabel("pi-FR-Layer2")
pi_FR_Logical_Interface_Type = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uni", 1), ("nni", 2)))).setLabel("pi-FR-Logical-Interface-Type").setMaxAccess("readonly")
if mibBuilder.loadTexts: pi_FR_Logical_Interface_Type.setStatus('mandatory')
if mibBuilder.loadTexts: pi_FR_Logical_Interface_Type.setDescription(' The type of Frame Relay logical interface. UNI = User to Network Interface NNI = Network to Network Interface')
pi_FR_Max_RX_Frame = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 512, 1024, 1600, 2048, 4096))).clone(namedValues=NamedValues(("size-256-bytes", 256), ("size-512-bytes", 512), ("size-1024-bytes", 1024), ("size-1600-bytes", 1600), ("size-2048-bytes", 2048), ("size-4096-bytes", 4096)))).setLabel("pi-FR-Max-RX-Frame").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pi_FR_Max_RX_Frame.setStatus('mandatory')
if mibBuilder.loadTexts: pi_FR_Max_RX_Frame.setDescription(' Maximum frame length in octets incoming')
pi_FR_Max_TX_Frame = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 512, 1024, 1600, 2048, 4096))).clone(namedValues=NamedValues(("size-256-bytes", 256), ("size-512-bytes", 512), ("size-1024-bytes", 1024), ("size-1600-bytes", 1600), ("size-2048-bytes", 2048), ("size-4096-bytes", 4096)))).setLabel("pi-FR-Max-TX-Frame").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pi_FR_Max_TX_Frame.setStatus('mandatory')
if mibBuilder.loadTexts: pi_FR_Max_TX_Frame.setDescription(' Maximum frame length in octets outgoing')
pi_FR_LMI_support = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("standard-LMI", 2), ("is-ANSI-T1-617", 3), ("is-ITU-T-Q933", 4)))).setLabel("pi-FR-LMI-support").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pi_FR_LMI_support.setStatus('mandatory')
if mibBuilder.loadTexts: pi_FR_LMI_support.setDescription(' LMI version')
pi_FR_DLC_Ranges_Table = MibTable((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 3), ).setLabel("pi-FR-DLC-Ranges-Table")
if mibBuilder.loadTexts: pi_FR_DLC_Ranges_Table.setStatus('mandatory')
if mibBuilder.loadTexts: pi_FR_DLC_Ranges_Table.setDescription('The Table of Active DLCIs.')
pi_FR_DLC_Ranges_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 3, 1), ).setLabel("pi-FR-DLC-Ranges-Entry").setIndexNames((0, "GDSFrameRelay-MIB", "piFRDLcRangeBand"))
if mibBuilder.loadTexts: pi_FR_DLC_Ranges_Entry.setStatus('mandatory')
if mibBuilder.loadTexts: pi_FR_DLC_Ranges_Entry.setDescription('')
piFRDLcRangeBand = MibTableColumn((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: piFRDLcRangeBand.setStatus('mandatory')
if mibBuilder.loadTexts: piFRDLcRangeBand.setDescription(' The index number of this DLCI circuit band.')
piFRDLcRangeUse = MibTableColumn((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("pvc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: piFRDLcRangeUse.setStatus('mandatory')
if mibBuilder.loadTexts: piFRDLcRangeUse.setDescription(' The Type of use to be applied to the range defined in piFRDLcRangeStart and piFRDLcRangeEnd')
piFRDLcRangeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("bidirectional", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: piFRDLcRangeMode.setStatus('mandatory')
if mibBuilder.loadTexts: piFRDLcRangeMode.setDescription(' For future use')
piFRDLcRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: piFRDLcRangeStart.setStatus('mandatory')
if mibBuilder.loadTexts: piFRDLcRangeStart.setDescription(' The first DLCI in this band')
piFRDLcRangeEnd_set_to_activate_changes = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setLabel("piFRDLcRangeEnd-set-to-activate-changes").setMaxAccess("readwrite")
if mibBuilder.loadTexts: piFRDLcRangeEnd_set_to_activate_changes.setStatus('mandatory')
if mibBuilder.loadTexts: piFRDLcRangeEnd_set_to_activate_changes.setDescription(' The last DLCI in this band Setting this parameter activates the changes')
piRemotePorts = MibIdentifier((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 5))
pi_Remote_Port1 = MibIdentifier((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 5, 1)).setLabel("pi-Remote-Port1")
pi_Remote_Port1IP_Address = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 5, 1, 1), IpAddress()).setLabel("pi-Remote-Port1IP-Address").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pi_Remote_Port1IP_Address.setStatus('mandatory')
if mibBuilder.loadTexts: pi_Remote_Port1IP_Address.setDescription('The IP address for 1, the Ethernet line ')
pi_Remote_Port1Subnet_mask = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 5, 1, 2), IpAddress()).setLabel("pi-Remote-Port1Subnet-mask").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pi_Remote_Port1Subnet_mask.setStatus('mandatory')
if mibBuilder.loadTexts: pi_Remote_Port1Subnet_mask.setDescription('The subnet mask associated with the IP address of the 1 Ethernet line. The value of the mask is an IP address with all the network bits set to 1 and all the host bits set to 0.')
pi_Remote_Port1Gateway_Address = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 5, 1, 3), IpAddress()).setLabel("pi-Remote-Port1Gateway-Address").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pi_Remote_Port1Gateway_Address.setStatus('mandatory')
if mibBuilder.loadTexts: pi_Remote_Port1Gateway_Address.setDescription('The Gateway IP address for 1. The gateway is on the same network as the port, so the network bits must be identical to the port Ipaddress')
piRemotePort2 = MibIdentifier((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 5, 2))
pi_Remote_Port3 = MibIdentifier((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 5, 3)).setLabel("pi-Remote-Port3")
pi_Remote_Port3IP_Address = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 5, 3, 1), IpAddress()).setLabel("pi-Remote-Port3IP-Address").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pi_Remote_Port3IP_Address.setStatus('mandatory')
if mibBuilder.loadTexts: pi_Remote_Port3IP_Address.setDescription('The IP address for 1, the serial line ')
pi_Remote_Port3Subnet_mask = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 5, 3, 2), IpAddress()).setLabel("pi-Remote-Port3Subnet-mask").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pi_Remote_Port3Subnet_mask.setStatus('mandatory')
if mibBuilder.loadTexts: pi_Remote_Port3Subnet_mask.setDescription('The subnet mask associated with the IP address of the 3 serial line. The value of the mask is an IP address with all the network bits set to 1 and all the host bits set to 0.')
pi_Remote_Port3Gateway_Address = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 5, 3, 3), IpAddress()).setLabel("pi-Remote-Port3Gateway-Address").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pi_Remote_Port3Gateway_Address.setStatus('mandatory')
if mibBuilder.loadTexts: pi_Remote_Port3Gateway_Address.setDescription('The Gateway IP address for 3. The gateway is on the same network as the port, so the network bits must be identical to the port Ipaddress')
pi_Remote_Port3Data_link_protocol = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 5, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(28))).clone(namedValues=NamedValues(("slip", 28)))).setLabel("pi-Remote-Port3Data-link-protocol").setMaxAccess("readonly")
if mibBuilder.loadTexts: pi_Remote_Port3Data_link_protocol.setStatus('mandatory')
if mibBuilder.loadTexts: pi_Remote_Port3Data_link_protocol.setDescription('The type of Data link protocol. Currently only slip is supported')
pi_Remote_Port3Baudrate = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 5, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("baud-2400", 1), ("baud-4800", 2), ("baud-9600", 3), ("baud-19200", 4), ("baud-38400", 5)))).setLabel("pi-Remote-Port3Baudrate").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pi_Remote_Port3Baudrate.setStatus('mandatory')
if mibBuilder.loadTexts: pi_Remote_Port3Baudrate.setDescription('The Baud rate for async port 3. The other physical parameters are fixed as follows: Character Length: 8 bits Parity: none Stopbits: 1')
piApplication = MibIdentifier((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 6))
pi_App_DLC_Cipher_Table = MibTable((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 6, 1), ).setLabel("pi-App-DLC-Cipher-Table")
if mibBuilder.loadTexts: pi_App_DLC_Cipher_Table.setStatus('mandatory')
if mibBuilder.loadTexts: pi_App_DLC_Cipher_Table.setDescription('The table of encrypted DLCIs port.')
pi_App_DLC_Cipher_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 6, 1, 1), ).setLabel("pi-App-DLC-Cipher-Entry").setIndexNames((0, "GDSFrameRelay-MIB", "piAppDLcCipherBand"))
if mibBuilder.loadTexts: pi_App_DLC_Cipher_Entry.setStatus('mandatory')
if mibBuilder.loadTexts: pi_App_DLC_Cipher_Entry.setDescription('')
piAppDLcCipherBand = MibTableColumn((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: piAppDLcCipherBand.setStatus('mandatory')
if mibBuilder.loadTexts: piAppDLcCipherBand.setDescription(' The index number of this DLCI circuit band.')
piAppDLcCipherUse = MibTableColumn((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("plain", 1), ("cipher", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: piAppDLcCipherUse.setStatus('mandatory')
if mibBuilder.loadTexts: piAppDLcCipherUse.setDescription(' The Type of use (plain or cipher) to be applied to the range defined in piAppDLcCipherStart and piAppDLcCipherEnd.')
piAppDLcCipherStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: piAppDLcCipherStart.setStatus('mandatory')
if mibBuilder.loadTexts: piAppDLcCipherStart.setDescription(' The first DLCI in this band')
piAppDLcCipherEnd_set_to_activate_changes = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setLabel("piAppDLcCipherEnd-set-to-activate-changes").setMaxAccess("readwrite")
if mibBuilder.loadTexts: piAppDLcCipherEnd_set_to_activate_changes.setStatus('mandatory')
if mibBuilder.loadTexts: piAppDLcCipherEnd_set_to_activate_changes.setDescription(' The last DLCI in this band Setting this parameter activates the changes')
mibBuilder.exportSymbols("GDSFrameRelay-MIB", piFRDLcRangeBand=piFRDLcRangeBand, uDynamic=uDynamic, frReceived_BECN=frReceived_BECN, uAlgorithm=uAlgorithm, frGood_Frames=frGood_Frames, uReady_Alarm_Led=uReady_Alarm_Led, piFRE1_Cipher_Port_Impedance=piFRE1_Cipher_Port_Impedance, pi_FR_Max_RX_Frame=pi_FR_Max_RX_Frame, uBackground=uBackground, pi_App_DLC_Cipher_Table=pi_App_DLC_Cipher_Table, pi_FR_Logical_Interface_Type=pi_FR_Logical_Interface_Type, uDevice_State=uDevice_State, fR_RX_Err_Table=fR_RX_Err_Table, uConfigured=uConfigured, frRxErrAborted_Frames=frRxErrAborted_Frames, uComm_SW_Version=uComm_SW_Version, frRxErrResidual_Bits=frRxErrResidual_Bits, pi_FR_Layer1=pi_FR_Layer1, uRAG_threshold=uRAG_threshold, pi_Remote_Port3Data_link_protocol=pi_Remote_Port3Data_link_protocol, piFRDLcRangeStart=piFRDLcRangeStart, piAppDLcCipherUse=piAppDLcCipherUse, piFRDLcRangeUse=piFRDLcRangeUse, piFRE1_Framing_Mode=piFRE1_Framing_Mode, pi_FR_DLC_Ranges_Entry=pi_FR_DLC_Ranges_Entry, piRemotePorts=piRemotePorts, pi_FR_Layer2=pi_FR_Layer2, uRAG_fails=uRAG_fails, uRAG_tests=uRAG_tests, piFRT1_Framing_Mode=piFRT1_Framing_Mode, piFRTX_Clock_Source=piFRTX_Clock_Source, pi_Remote_Port3Subnet_mask=pi_Remote_Port3Subnet_mask, piFRT1_Time_Slot_Options=piFRT1_Time_Slot_Options, frSent_Frames=frSent_Frames, fR_Traffic_Entry=fR_Traffic_Entry, piFRT1_Time_Slots=piFRT1_Time_Slots, pi_FR_Max_TX_Frame=pi_FR_Max_TX_Frame, piFRE1_Plain_Port_Impedance=piFRE1_Plain_Port_Impedance, frPort_Type=frPort_Type, piFRT1_Plain_Port_Pulse=piFRT1_Plain_Port_Pulse, pi_Remote_Port1IP_Address=pi_Remote_Port1IP_Address, uSM_State=uSM_State, piFRDLcRangeMode=piFRDLcRangeMode, piApplication=piApplication, frRxErrOverruns=frRxErrOverruns, frRxErrCRC_Errors=frRxErrCRC_Errors, uCurrent_Time=uCurrent_Time, frDropped_Frames=frDropped_Frames, fR_Traffic_Table=fR_Traffic_Table, pi_Remote_Port1Subnet_mask=pi_Remote_Port1Subnet_mask, piFRE1_Time_Slot_Options=piFRE1_Time_Slot_Options, uVersion_Strings=uVersion_Strings, uAccess_Table=uAccess_Table, uComm_HW_Version=uComm_HW_Version, frRxErrShort_Frames=frRxErrShort_Frames, unit=unit, configure=configure, frBad_Frames=frBad_Frames, frInactive_DLCI=frInactive_DLCI, seriesfr=seriesfr, frame_relay=frame_relay, uComms_State=uComms_State, uNMS_State=uNMS_State, piFRT1_Cipher_Port_Pulse=piFRT1_Cipher_Port_Pulse, uMain_SW_Version=uMain_SW_Version, piAppDLcCipherBand=piAppDLcCipherBand, piAppDLcCipherEnd_set_to_activate_changes=piAppDLcCipherEnd_set_to_activate_changes, uCurrent_Date=uCurrent_Date, pi_Remote_Port3IP_Address=pi_Remote_Port3IP_Address, pi_FR_DLC_Ranges_Table=pi_FR_DLC_Ranges_Table, reset_FR_statistic_counters=reset_FR_statistic_counters, is_GDS_frame_relay_device5=is_GDS_frame_relay_device5, frPort_Index=frPort_Index, pi_Remote_Port3=pi_Remote_Port3, frReceived_FECN=frReceived_FECN, pi_Remote_Port1Gateway_Address=pi_Remote_Port1Gateway_Address, piFRDLcRangeEnd_set_to_activate_changes=piFRDLcRangeEnd_set_to_activate_changes, frRxErrIndex=frRxErrIndex, pi_Remote_Port1=pi_Remote_Port1, gds=gds, fR_RX_Err_Entry=fR_RX_Err_Entry, pi_Remote_Port3Gateway_Address=pi_Remote_Port3Gateway_Address, uMain_HW_Version=uMain_HW_Version, pi_App_DLC_Cipher_Entry=pi_App_DLC_Cipher_Entry, uOwn_SID=uOwn_SID, pi_Remote_Port3Baudrate=pi_Remote_Port3Baudrate, piFRInterface_Installed=piFRInterface_Installed, piAppDLcCipherStart=piAppDLcCipherStart, piRemotePort2=piRemotePort2, piFRE1_Time_Slots=piFRE1_Time_Slots, pi_FR_LMI_support=pi_FR_LMI_support)
