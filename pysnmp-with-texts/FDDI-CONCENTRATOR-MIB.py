#
# PySNMP MIB module FDDI-CONCENTRATOR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FDDI-CONCENTRATOR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:13:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, ObjectIdentity, iso, Gauge32, IpAddress, NotificationType, Unsigned32, Counter64, enterprises, MibIdentifier, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, TimeTicks, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "ObjectIdentity", "iso", "Gauge32", "IpAddress", "NotificationType", "Unsigned32", "Counter64", "enterprises", "MibIdentifier", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "TimeTicks", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
fibronics = MibIdentifier((1, 3, 6, 1, 4, 1, 22))
fddiConcentrator = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 70))
concentratorPORT = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 70, 1))
concentratorPROCESSOR = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 70, 2))
concentratorMEMORY = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 70, 3))
concentratorSERIALPORT = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 70, 4))
concentratorVERSIONS = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 70, 5))
concentratorPOWER = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 70, 6))
concentratorTRAPS = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 70, 7))
concentratorIDENTIFIER = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 70, 8))
concentratorTRAFFIC = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 70, 9))
concentratorPORTTable = MibTable((1, 3, 6, 1, 4, 1, 22, 70, 1, 1), )
if mibBuilder.loadTexts: concentratorPORTTable.setStatus('mandatory')
if mibBuilder.loadTexts: concentratorPORTTable.setDescription('A list of PORT entries. The number of entries is given by the value of the snmpFddiPORTNumber (see standard fddi.')
concentratorPORTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 70, 1, 1, 1), ).setIndexNames((0, "FDDI-CONCENTRATOR-MIB", "concentratorPORTSMTIndex"), (0, "FDDI-CONCENTRATOR-MIB", "concentratorPORTIndex"))
if mibBuilder.loadTexts: concentratorPORTEntry.setStatus('mandatory')
if mibBuilder.loadTexts: concentratorPORTEntry.setDescription('A PORT entry containing information common to a given PORT.')
concentratorPORTSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 70, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorPORTSMTIndex.setStatus('mandatory')
if mibBuilder.loadTexts: concentratorPORTSMTIndex.setDescription('The value of the SMT index associated with this PORT.')
concentratorPORTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 70, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorPORTIndex.setStatus('mandatory')
if mibBuilder.loadTexts: concentratorPORTIndex.setDescription("A unique value for each PORT within a given SMT. Its value ranges between 1 and the sum of the values of concentratorSMTNonMasterCt { concentratorSMTEntry 6 } and concentratorSMTMasterCt { concentratorSMTEntry 7 } on the given SMT. The value for each PORT must remain constant at least from one re-initialization of the entity's network management system to the next re-initialization.")
concentratorPORTType = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 70, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("fiber", 2), ("utp", 3), ("stp", 4), ("ibm", 5), ("plastic", 6), ("baseT", 7), ("mono", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorPORTType.setStatus('mandatory')
if mibBuilder.loadTexts: concentratorPORTType.setDescription('This value specifies the type of selected port')
concentratorPORTStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 70, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2), ("undefind", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorPORTStatus.setStatus('mandatory')
if mibBuilder.loadTexts: concentratorPORTStatus.setDescription('This value specifies the status of the selected port')
concentratorPROCESSORType = MibScalar((1, 3, 6, 1, 4, 1, 22, 70, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unkown", 1), ("p88", 2), ("p86", 3), ("p186", 4), ("p286", 5), ("p386", 6), ("p486", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorPROCESSORType.setStatus('mandatory')
if mibBuilder.loadTexts: concentratorPROCESSORType.setDescription('This value specifies the type of processor')
concentratorPROCESSORFrequency = MibScalar((1, 3, 6, 1, 4, 1, 22, 70, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorPROCESSORFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: concentratorPROCESSORFrequency.setDescription('This value specifies the frequency of the microprocessor (in MHz)')
concentratorSystemMEMORYAvailable = MibScalar((1, 3, 6, 1, 4, 1, 22, 70, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorSystemMEMORYAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: concentratorSystemMEMORYAvailable.setDescription('This value specifies the amount of memory in kB')
concentratorSystemMEMORYFree = MibScalar((1, 3, 6, 1, 4, 1, 22, 70, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorSystemMEMORYFree.setStatus('mandatory')
if mibBuilder.loadTexts: concentratorSystemMEMORYFree.setDescription('This value specifies the available amount of free memory in kB')
concentratorBufferMEMORYAvailable = MibScalar((1, 3, 6, 1, 4, 1, 22, 70, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorBufferMEMORYAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: concentratorBufferMEMORYAvailable.setDescription('This value specifies the amount of memory in kB')
concentratorMEMORYFlashEPROM = MibScalar((1, 3, 6, 1, 4, 1, 22, 70, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notpresent", 1), ("present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorMEMORYFlashEPROM.setStatus('mandatory')
if mibBuilder.loadTexts: concentratorMEMORYFlashEPROM.setDescription('This value specifies whether the flash EPROM is present or not')
concentratorSERIALPORTBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 22, 70, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: concentratorSERIALPORTBaudRate.setStatus('mandatory')
if mibBuilder.loadTexts: concentratorSERIALPORTBaudRate.setDescription('This value specifies the actual baud rate')
concentratorSERIALPORTParity = MibScalar((1, 3, 6, 1, 4, 1, 22, 70, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorSERIALPORTParity.setStatus('mandatory')
if mibBuilder.loadTexts: concentratorSERIALPORTParity.setDescription('This value specifies the type of parity ')
concentratorSERIALPORTStopBits = MibScalar((1, 3, 6, 1, 4, 1, 22, 70, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorSERIALPORTStopBits.setStatus('mandatory')
if mibBuilder.loadTexts: concentratorSERIALPORTStopBits.setDescription('This value specifies the number of stop bits ')
concentratorVERSIONSBoardSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 22, 70, 5, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorVERSIONSBoardSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: concentratorVERSIONSBoardSerialNumber.setDescription('This value specifies the serial number of the board')
concentratorVERSIONSNMP = MibScalar((1, 3, 6, 1, 4, 1, 22, 70, 5, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorVERSIONSNMP.setStatus('mandatory')
if mibBuilder.loadTexts: concentratorVERSIONSNMP.setDescription('This value specifies the actual SNMP version')
concentratorVERSIONBIOS = MibScalar((1, 3, 6, 1, 4, 1, 22, 70, 5, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorVERSIONBIOS.setStatus('mandatory')
if mibBuilder.loadTexts: concentratorVERSIONBIOS.setDescription('This value specifies the actual BIOS version')
concentratorVERSIONSMT = MibScalar((1, 3, 6, 1, 4, 1, 22, 70, 5, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorVERSIONSMT.setStatus('mandatory')
if mibBuilder.loadTexts: concentratorVERSIONSMT.setDescription('This value specifies the actual SMT version')
concentratorVERSIONMAC = MibScalar((1, 3, 6, 1, 4, 1, 22, 70, 5, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorVERSIONMAC.setStatus('mandatory')
if mibBuilder.loadTexts: concentratorVERSIONMAC.setDescription('This value specifies the actual MAC version')
concentratorVERSIONHRDWR = MibScalar((1, 3, 6, 1, 4, 1, 22, 70, 5, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorVERSIONHRDWR.setStatus('mandatory')
if mibBuilder.loadTexts: concentratorVERSIONHRDWR.setDescription('This value specifies the actual version of the hardware')
concentratorVERSIONSlotsNumber = MibScalar((1, 3, 6, 1, 4, 1, 22, 70, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorVERSIONSlotsNumber.setStatus('mandatory')
if mibBuilder.loadTexts: concentratorVERSIONSlotsNumber.setDescription('The number of slots in the concentrator.')
concentratorVERSIONSlotsTable = MibTable((1, 3, 6, 1, 4, 1, 22, 70, 5, 8), )
if mibBuilder.loadTexts: concentratorVERSIONSlotsTable.setStatus('mandatory')
if mibBuilder.loadTexts: concentratorVERSIONSlotsTable.setDescription('A list of slot entries. The number of entries is given by the value of the concentratorVERSIONSlotsNumber.')
concentratorVERSIONSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 70, 5, 8, 1), ).setIndexNames((0, "FDDI-CONCENTRATOR-MIB", "concentratorVERSIONSlotIndex"))
if mibBuilder.loadTexts: concentratorVERSIONSlotEntry.setStatus('mandatory')
if mibBuilder.loadTexts: concentratorVERSIONSlotEntry.setDescription('An entry containing information common to a given SLOT number.')
concentratorVERSIONSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 70, 5, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorVERSIONSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: concentratorVERSIONSlotIndex.setDescription('The value of the index associated with this particulary slot.')
concentratorVERSIONSlotSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 70, 5, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorVERSIONSlotSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: concentratorVERSIONSlotSerialNumber.setDescription('The serial number of this slot.')
concentratorVERSIONSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 70, 5, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorVERSIONSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: concentratorVERSIONSlotId.setDescription('The identification number of this slot.')
concentratorVERSIONSlotHrdwrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 70, 5, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorVERSIONSlotHrdwrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: concentratorVERSIONSlotHrdwrStatus.setDescription('The value specifies the hardware state of the slot.')
concentratorVERSIONSlotRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 70, 5, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorVERSIONSlotRevision.setStatus('mandatory')
if mibBuilder.loadTexts: concentratorVERSIONSlotRevision.setDescription('Revision.')
concentratorPOWERFirstSupplyState = MibScalar((1, 3, 6, 1, 4, 1, 22, 70, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("failure", 2), ("notpresent", 3), ("reserved", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorPOWERFirstSupplyState.setStatus('mandatory')
if mibBuilder.loadTexts: concentratorPOWERFirstSupplyState.setDescription('This value specifies the state of the first power supply')
concentratorPOWERSecondSupplyState = MibScalar((1, 3, 6, 1, 4, 1, 22, 70, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("failure", 2), ("notpresent", 3), ("reserved", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorPOWERSecondSupplyState.setStatus('mandatory')
if mibBuilder.loadTexts: concentratorPOWERSecondSupplyState.setDescription('This value specifies the state of the second power supply')
concentratorPOWERFirstFANState = MibScalar((1, 3, 6, 1, 4, 1, 22, 70, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("failure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorPOWERFirstFANState.setStatus('mandatory')
if mibBuilder.loadTexts: concentratorPOWERFirstFANState.setDescription('This value specifies the state of the first fan')
concentratorPOWERSecondFANState = MibScalar((1, 3, 6, 1, 4, 1, 22, 70, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("failure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorPOWERSecondFANState.setStatus('mandatory')
if mibBuilder.loadTexts: concentratorPOWERSecondFANState.setDescription('This value specifies the state of the second power supply')
concentratorPOWERTemperature = MibScalar((1, 3, 6, 1, 4, 1, 22, 70, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorPOWERTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: concentratorPOWERTemperature.setDescription("This value specifies the concentrator's temperature (in degrees Celsius)")
concentratorPOWERBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 22, 70, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("failure", 2), ("notpresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorPOWERBatteryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: concentratorPOWERBatteryStatus.setDescription('This value specifies the state of the battery')
concentratorMgrAddress = MibScalar((1, 3, 6, 1, 4, 1, 22, 70, 7, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: concentratorMgrAddress.setStatus('mandatory')
if mibBuilder.loadTexts: concentratorMgrAddress.setDescription(" By means of this variable an SNMP manager can put or remove its own address into or out of the internal array of the manager's addresses to where the agent sends traps.An SNMP manager can set itself by SET SNMP operation with its own IP address. An SNMP manager can remove itself by SET SNMP operation with the 0.0.0.0 IP address. Operation GET or GET-NEXT returns the manager's address if the manager is in the internall array or 0.0.0.0 IP address wheneverthe manager is not in the internal array. Agent returns the following error codes : If a manager tries to set an address IP address different from that of its own address or a manager tries to set 0.0.0.0 IP address when a manager is not present in the internal buffer, the agent returns value BAD VALUE. If a manager tries to set address its own IP address again (when the manager is already in the internal array), the agent returns the value GENERALL ERROR. If this array is already full ,then GENERALL ERROR value is returned.")
concentratorTRAFFICSMTTransmits = MibScalar((1, 3, 6, 1, 4, 1, 22, 70, 9, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorTRAFFICSMTTransmits.setStatus('mandatory')
if mibBuilder.loadTexts: concentratorTRAFFICSMTTransmits.setDescription('This value specifies transmitted SMT frames')
concentratorTRAFFICSMTReceivs = MibScalar((1, 3, 6, 1, 4, 1, 22, 70, 9, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorTRAFFICSMTReceivs.setStatus('mandatory')
if mibBuilder.loadTexts: concentratorTRAFFICSMTReceivs.setDescription('This value specifies the recieved SMT frames')
concentratorTRAFFICRS232Activity = MibScalar((1, 3, 6, 1, 4, 1, 22, 70, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("nonactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorTRAFFICRS232Activity.setStatus('mandatory')
if mibBuilder.loadTexts: concentratorTRAFFICRS232Activity.setDescription('This value specifies whether the RS 232 is currently active')
mibBuilder.exportSymbols("FDDI-CONCENTRATOR-MIB", concentratorPORTSMTIndex=concentratorPORTSMTIndex, concentratorVERSIONSBoardSerialNumber=concentratorVERSIONSBoardSerialNumber, concentratorTRAFFICSMTReceivs=concentratorTRAFFICSMTReceivs, concentratorTRAPS=concentratorTRAPS, concentratorBufferMEMORYAvailable=concentratorBufferMEMORYAvailable, concentratorPOWERFirstFANState=concentratorPOWERFirstFANState, concentratorVERSIONMAC=concentratorVERSIONMAC, concentratorVERSIONSlotsTable=concentratorVERSIONSlotsTable, concentratorVERSIONS=concentratorVERSIONS, concentratorMEMORY=concentratorMEMORY, concentratorPORTType=concentratorPORTType, concentratorPORT=concentratorPORT, concentratorVERSIONSlotEntry=concentratorVERSIONSlotEntry, concentratorPORTTable=concentratorPORTTable, concentratorSERIALPORTStopBits=concentratorSERIALPORTStopBits, concentratorPROCESSOR=concentratorPROCESSOR, concentratorSERIALPORTParity=concentratorSERIALPORTParity, concentratorVERSIONSNMP=concentratorVERSIONSNMP, concentratorSystemMEMORYFree=concentratorSystemMEMORYFree, concentratorPROCESSORFrequency=concentratorPROCESSORFrequency, fibronics=fibronics, concentratorMEMORYFlashEPROM=concentratorMEMORYFlashEPROM, concentratorVERSIONSlotIndex=concentratorVERSIONSlotIndex, concentratorVERSIONSlotSerialNumber=concentratorVERSIONSlotSerialNumber, concentratorVERSIONSlotHrdwrStatus=concentratorVERSIONSlotHrdwrStatus, concentratorVERSIONSMT=concentratorVERSIONSMT, concentratorVERSIONSlotsNumber=concentratorVERSIONSlotsNumber, concentratorVERSIONHRDWR=concentratorVERSIONHRDWR, concentratorVERSIONBIOS=concentratorVERSIONBIOS, concentratorVERSIONSlotRevision=concentratorVERSIONSlotRevision, concentratorSystemMEMORYAvailable=concentratorSystemMEMORYAvailable, concentratorPORTEntry=concentratorPORTEntry, concentratorPORTIndex=concentratorPORTIndex, concentratorIDENTIFIER=concentratorIDENTIFIER, fddiConcentrator=fddiConcentrator, concentratorVERSIONSlotId=concentratorVERSIONSlotId, concentratorPOWERTemperature=concentratorPOWERTemperature, concentratorTRAFFICSMTTransmits=concentratorTRAFFICSMTTransmits, concentratorPOWERSecondSupplyState=concentratorPOWERSecondSupplyState, concentratorMgrAddress=concentratorMgrAddress, concentratorTRAFFIC=concentratorTRAFFIC, concentratorPOWERBatteryStatus=concentratorPOWERBatteryStatus, concentratorPOWER=concentratorPOWER, concentratorTRAFFICRS232Activity=concentratorTRAFFICRS232Activity, concentratorPOWERSecondFANState=concentratorPOWERSecondFANState, concentratorPROCESSORType=concentratorPROCESSORType, concentratorPORTStatus=concentratorPORTStatus, concentratorSERIALPORTBaudRate=concentratorSERIALPORTBaudRate, concentratorPOWERFirstSupplyState=concentratorPOWERFirstSupplyState, concentratorSERIALPORT=concentratorSERIALPORT)
