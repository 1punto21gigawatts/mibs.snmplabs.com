#
# PySNMP MIB module HUAWEI-WLAN-DEVICE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-WLAN-DEVICE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:49:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
hwWlan, = mibBuilder.importSymbols("HUAWEI-WLAN-MIB", "hwWlan")
hwStaReSendBytes, hwStaVlan, hwStaWirelessStatTxRate, hwStaRecvErrorFrames, hwStaRssi, hwStaReSendFrames, hwWlanServiceStaSnrUs, hwStaWirelessStatTxPkts, hwWlanServiceStaOnlineTime, hwStaWirelessStatRxBytes, hwStaWirelessStatRxPkts, hwWlanServiceStaEssName, hwStaNoise, hwStaSendDropFrames, hwWlanServiceStaRadioId, hwStaSendErrorFrames, hwWlanServiceStaSsid, hwStaIp, hwStaAccessChannel, hwWlanServiceStaRxPowerUs, hwWlanServiceStaApId, hwStaRecvDropFrames, hwStaWirelessStatTxBytes, hwStaWirelessStatRxRate, hwStaUsername, hwWlanServiceStaMac = mibBuilder.importSymbols("HUAWEI-WLAN-SERVICE-MIB", "hwStaReSendBytes", "hwStaVlan", "hwStaWirelessStatTxRate", "hwStaRecvErrorFrames", "hwStaRssi", "hwStaReSendFrames", "hwWlanServiceStaSnrUs", "hwStaWirelessStatTxPkts", "hwWlanServiceStaOnlineTime", "hwStaWirelessStatRxBytes", "hwStaWirelessStatRxPkts", "hwWlanServiceStaEssName", "hwStaNoise", "hwStaSendDropFrames", "hwWlanServiceStaRadioId", "hwStaSendErrorFrames", "hwWlanServiceStaSsid", "hwStaIp", "hwStaAccessChannel", "hwWlanServiceStaRxPowerUs", "hwWlanServiceStaApId", "hwStaRecvDropFrames", "hwStaWirelessStatTxBytes", "hwStaWirelessStatRxRate", "hwStaUsername", "hwWlanServiceStaMac")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter32, Unsigned32, Counter64, Gauge32, ObjectIdentity, Bits, ModuleIdentity, NotificationType, iso, MibIdentifier, Integer32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Unsigned32", "Counter64", "Gauge32", "ObjectIdentity", "Bits", "ModuleIdentity", "NotificationType", "iso", "MibIdentifier", "Integer32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
MacAddress, RowStatus, TextualConvention, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "RowStatus", "TextualConvention", "DisplayString", "DateAndTime")
hwWlanDevice = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2))
hwWlanDevice.setRevisions(('2015-06-18 20:10', '2015-01-20 20:10', '2014-12-16 10:10', '2014-11-20 09:10', '2014-09-01 09:45', '2014-07-03 15:51', '2014-06-16 15:31', '2014-06-04 11:51', '2014-04-24 20:18', '2014-03-21 16:28', '2013-12-04 09:56', '2013-10-26 10:56', '2013-09-02 00:00', '2010-11-04 00:00', '2010-09-10 00:00', '2010-08-13 00:00', '2010-07-07 00:00', '2010-05-25 10:01',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwWlanDevice.setRevisionsDescriptions(('Modify the range of hwApProfileMaxUserNum.', 'Huawei AP device management mib.', 'Modify the range of hwApHighTemperatureThreshold and hwApLowTemperatureThreshold .', 'Modify the description of hwApForwardMode and add node hwApLocalAssocResSwitch.', 'Modify the nodes of hwWlanDeviceNotify and hwApRegionEntry.', 'Modify the name of hwEthportUpRate and hwEthportDownRate.The new name is hwApEthportUpRate and hwApEthportDownRate.', 'Modify the name of hwEthportUpRate and hwEthportDownRate.The new name is hwApEthportUpRate and hwApEthportDownRate.', 'Modify the name of hwEthportUpRate and hwEthportDownRate.The new name is hwApEthportUpRate and hwApEthportDownRate.', 'Add wids attack detection quiet-time parameter', 'Add object hwAcObjects', 'Add node hwApLedSwitch', 'Add calibrate parameter', 'Add calibrate parameter', 'V1.05, Add the ap-blacklist table for the supporting management of ap-blacklist, Add hwUnAuthorizedApRecordNumber and hwUnAuthorizedApRecordAdmin for supporting management of unauthorized-ap record, Modify the Max access read-only of hwApIpAddress to read-write, Delete the enum value wlan80211abgn(7) of the hwApTypeRadioType leaf.', 'V1.04, Add a leaf hwRadioMaxVAPNum in hwApTypeRadioTable', 'V1.03, Add an enum value unknown(-1) in hwApForwardMode leaf of hwApTable, Add an enum value unknown(-1) in hwApRegionForwardMode leaf of hwApRegionTable, Add an operation type replaceAp(6) in hwApAdminOper of hwApTable.', 'V1.01, Add hwApAntennaMode in hwApTable for the supporting configuration of ap antenna mode.', 'V1.00, Initial version',))
if mibBuilder.loadTexts: hwWlanDevice.setLastUpdated('201506182010Z')
if mibBuilder.loadTexts: hwWlanDevice.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwWlanDevice.setContactInfo("Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com ")
if mibBuilder.loadTexts: hwWlanDevice.setDescription('Huawei AP device management mib.')
hwWlanDeviceNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1))
hwWlanDeviceNotify = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1))
hwApFaultNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 1)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApUsedType"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApUsedRegionIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApSysName"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApFaultTimes"))
if mibBuilder.loadTexts: hwApFaultNotify.setStatus('current')
if mibBuilder.loadTexts: hwApFaultNotify.setDescription('This notification occurs when AP become fault because of AP off line,reset or shutdown etc. hwApIndex: AP ID, hwApUsedType: AP type, hwApUsedRegionIndex: AP region ID, hwApSysName:AP name. ')
hwApNormalNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 2)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApUsedType"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApUsedRegionIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApSysName"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"))
if mibBuilder.loadTexts: hwApNormalNotify.setStatus('current')
if mibBuilder.loadTexts: hwApNormalNotify.setDescription('This notification occurs when AP become normal. hwApIndex: AP ID, hwApUsedType: AP type, hwApUsedRegionIndex: AP region ID, hwApSysName:AP name. ')
hwApTypeNotMatchNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 3)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApUsedRegionIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApSysName"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApUsedType"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApActualType"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"))
if mibBuilder.loadTexts: hwApTypeNotMatchNotify.setStatus('current')
if mibBuilder.loadTexts: hwApTypeNotMatchNotify.setDescription("This notification occurs when AP's actual type is not match the configured one. hwApIndex: AP ID, hwApUsedRegionIndex: AP region ID, hwApSysName:AP name, hwApUsedType: AP type, hwApActualType: AP actual type. ")
hwApPingResultNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 4)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApUsedType"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApUsedRegionIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApSysName"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApPingResultSuccessCount"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApPingResultFailureCount"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApPingResultAverageResponseTime"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApPingResultMinimumResponseTime"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApPingResultMaximumResponseTime"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"))
if mibBuilder.loadTexts: hwApPingResultNotify.setStatus('current')
if mibBuilder.loadTexts: hwApPingResultNotify.setDescription('This notification occurs when AP has accomplished a ping and will report the result to user. hwApIndex: AP ID, hwApUsedType: AP type, hwApUsedRegionIndex: AP region ID, hwApSysName:AP name, hwApPingResultSuccessCount:the successful times of the recent AP ping, hwApPingResultFailureCount: the failed times of recent AP ping, hwApPingResultAverageResponseTime: the average response time of recent AP ping. hwApPingResultMinimumResponseTime: the minimum response time of recent AP ping. hwApPingResultMaximumResponseTime: the maximum response time of recent AP ping. ')
hwApColdstartNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 5)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApUsedType"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApUsedRegionIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApSysName"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"))
if mibBuilder.loadTexts: hwApColdstartNotify.setStatus('current')
if mibBuilder.loadTexts: hwApColdstartNotify.setDescription('This notification occurs when AP cold starting. hwApIndex: AP ID, hwApUsedType: AP type, hwApUsedRegionIndex: AP region ID, hwApSysName:AP name. ')
hwApConfigCommitNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 8)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"))
if mibBuilder.loadTexts: hwApConfigCommitNotify.setStatus('current')
if mibBuilder.loadTexts: hwApConfigCommitNotify.setDescription("This notification occurs when commit AP's configuration successfully. hwApIndex: AP ID. ")
hwApAddOffLineNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 9)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApSysName"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApType"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApSn"))
if mibBuilder.loadTexts: hwApAddOffLineNotify.setStatus('current')
if mibBuilder.loadTexts: hwApAddOffLineNotify.setDescription('This notification occurs when add an AP off line. hwApIndex: AP ID, hwApSysName:AP name, hwApUsedType: AP type, hwApUsedRegionIndex: AP region ID, hwApMac:AP MAC address, hwApSn:AP SN number. ')
hwApConfirmNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 10)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApSysName"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApUsedType"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApSn"))
if mibBuilder.loadTexts: hwApConfirmNotify.setStatus('current')
if mibBuilder.loadTexts: hwApConfirmNotify.setDescription('This notification occurs when confirm an AP successfully. hwApIndex: AP ID, hwApSysName:AP name, hwApUsedType: AP type, hwApUsedRegionIndex: AP region ID, hwApMac:AP MAC address, hwApSn:AP SN number. ')
hwUnAuthorizedApRecordExistNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 11)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwUnAuthorizedApRecordNumber"))
if mibBuilder.loadTexts: hwUnAuthorizedApRecordExistNotify.setStatus('current')
if mibBuilder.loadTexts: hwUnAuthorizedApRecordExistNotify.setDescription('Description.')
hwUnAuthorizedApRecordClearNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 12))
if mibBuilder.loadTexts: hwUnAuthorizedApRecordClearNotify.setStatus('current')
if mibBuilder.loadTexts: hwUnAuthorizedApRecordClearNotify.setDescription('Description.')
hwApCpuOverloadNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 13)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApCpuOccupancyRate"))
if mibBuilder.loadTexts: hwApCpuOverloadNotify.setStatus('current')
if mibBuilder.loadTexts: hwApCpuOverloadNotify.setDescription('Description.')
hwApCpuOverloadRestoreNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 14)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApCpuOccupancyRate"))
if mibBuilder.loadTexts: hwApCpuOverloadRestoreNotify.setStatus('current')
if mibBuilder.loadTexts: hwApCpuOverloadRestoreNotify.setDescription('Description.')
hwApMemoryOverloadNOtify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 15)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMemoryOccupancyRate"))
if mibBuilder.loadTexts: hwApMemoryOverloadNOtify.setStatus('current')
if mibBuilder.loadTexts: hwApMemoryOverloadNOtify.setDescription('Description.')
hwApMemoryOverloadRestoreNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 16)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMemoryOccupancyRate"))
if mibBuilder.loadTexts: hwApMemoryOverloadRestoreNotify.setStatus('current')
if mibBuilder.loadTexts: hwApMemoryOverloadRestoreNotify.setDescription('Description.')
hwAPStaFullNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 17)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwStaAuthFailCause"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApPermitStaNum"))
if mibBuilder.loadTexts: hwAPStaFullNotify.setStatus('current')
if mibBuilder.loadTexts: hwAPStaFullNotify.setDescription('Description.')
hwAPStaFullRecoverNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 18)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwStaAuthFailCause"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApPermitStaNum"))
if mibBuilder.loadTexts: hwAPStaFullRecoverNotify.setStatus('current')
if mibBuilder.loadTexts: hwAPStaFullRecoverNotify.setDescription('Description.')
hwAcDevicesSwitchNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 19)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApSn"), ("HUAWEI-WLAN-DEVICE-MIB", "hwAcSystemSwitchType"))
if mibBuilder.loadTexts: hwAcDevicesSwitchNotify.setStatus('current')
if mibBuilder.loadTexts: hwAcDevicesSwitchNotify.setDescription('Description.')
hwApTimeSynFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 20)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"))
if mibBuilder.loadTexts: hwApTimeSynFailNotify.setStatus('current')
if mibBuilder.loadTexts: hwApTimeSynFailNotify.setDescription('Description.')
hwDyingGaspTrapNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 21)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"))
if mibBuilder.loadTexts: hwDyingGaspTrapNotify.setStatus('current')
if mibBuilder.loadTexts: hwDyingGaspTrapNotify.setDescription('Description.')
hwApFaultNotifyFat = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 22)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApUsedType"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApSysName"))
if mibBuilder.loadTexts: hwApFaultNotifyFat.setStatus('current')
if mibBuilder.loadTexts: hwApFaultNotifyFat.setDescription('Description.')
hwApNormalNotifyFat = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 23)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApUsedType"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApSysName"))
if mibBuilder.loadTexts: hwApNormalNotifyFat.setStatus('current')
if mibBuilder.loadTexts: hwApNormalNotifyFat.setDescription('Description.')
hwApTemperatureTooLowNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 24)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApNotifyOrRestoreTemperature"))
if mibBuilder.loadTexts: hwApTemperatureTooLowNotify.setStatus('current')
if mibBuilder.loadTexts: hwApTemperatureTooLowNotify.setDescription('Description.')
hwApTemperatureTooLowRestoreNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 25)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApNotifyOrRestoreTemperature"))
if mibBuilder.loadTexts: hwApTemperatureTooLowRestoreNotify.setStatus('current')
if mibBuilder.loadTexts: hwApTemperatureTooLowRestoreNotify.setDescription('Description.')
hwApTemperatureTooHighNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 26)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApNotifyOrRestoreTemperature"))
if mibBuilder.loadTexts: hwApTemperatureTooHighNotify.setStatus('current')
if mibBuilder.loadTexts: hwApTemperatureTooHighNotify.setDescription('Description.')
hwApTemperatureTooHighRestoreNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 27)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApNotifyOrRestoreTemperature"))
if mibBuilder.loadTexts: hwApTemperatureTooHighRestoreNotify.setStatus('current')
if mibBuilder.loadTexts: hwApTemperatureTooHighRestoreNotify.setDescription('Description.')
hwRadioDownNotifyFat = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 29)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApRadioNotifyPara"))
if mibBuilder.loadTexts: hwRadioDownNotifyFat.setStatus('current')
if mibBuilder.loadTexts: hwRadioDownNotifyFat.setDescription('Description.')
hwRadioDownRecovNotifyFat = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 30)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApRadioNotifyPara"))
if mibBuilder.loadTexts: hwRadioDownRecovNotifyFat.setStatus('current')
if mibBuilder.loadTexts: hwRadioDownRecovNotifyFat.setDescription('Description.')
hwApOpticalRxPowerTooHighNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 31)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalRxPower"))
if mibBuilder.loadTexts: hwApOpticalRxPowerTooHighNotify.setStatus('current')
if mibBuilder.loadTexts: hwApOpticalRxPowerTooHighNotify.setDescription('Description.')
hwApOpticalRxPowerTooHighRestoreNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 32)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalRxPower"))
if mibBuilder.loadTexts: hwApOpticalRxPowerTooHighRestoreNotify.setStatus('current')
if mibBuilder.loadTexts: hwApOpticalRxPowerTooHighRestoreNotify.setDescription('Description.')
hwApOpticalRxPowerTooLowNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 33)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalRxPower"))
if mibBuilder.loadTexts: hwApOpticalRxPowerTooLowNotify.setStatus('current')
if mibBuilder.loadTexts: hwApOpticalRxPowerTooLowNotify.setDescription('Description.')
hwApOpticalRxPowerTooLowRestoreNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 34)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalRxPower"))
if mibBuilder.loadTexts: hwApOpticalRxPowerTooLowRestoreNotify.setStatus('current')
if mibBuilder.loadTexts: hwApOpticalRxPowerTooLowRestoreNotify.setDescription('Description.')
hwApOpticalTemperatureTooHighNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 35)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalTemperature"))
if mibBuilder.loadTexts: hwApOpticalTemperatureTooHighNotify.setStatus('current')
if mibBuilder.loadTexts: hwApOpticalTemperatureTooHighNotify.setDescription('Description.')
hwApOpticalTemperatureTooHighRestoreNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 36)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalTemperature"))
if mibBuilder.loadTexts: hwApOpticalTemperatureTooHighRestoreNotify.setStatus('current')
if mibBuilder.loadTexts: hwApOpticalTemperatureTooHighRestoreNotify.setDescription('Description.')
hwApOpticalTemperatureTooLowNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 37)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalTemperature"))
if mibBuilder.loadTexts: hwApOpticalTemperatureTooLowNotify.setStatus('current')
if mibBuilder.loadTexts: hwApOpticalTemperatureTooLowNotify.setDescription('Description.')
hwApOpticalTemperatureTooLowRestoreNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 38)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalTemperature"))
if mibBuilder.loadTexts: hwApOpticalTemperatureTooLowRestoreNotify.setStatus('current')
if mibBuilder.loadTexts: hwApOpticalTemperatureTooLowRestoreNotify.setDescription('Description.')
hwApNotSupportCountryCodeNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 39)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApCfgCountryCode"))
if mibBuilder.loadTexts: hwApNotSupportCountryCodeNotify.setStatus('current')
if mibBuilder.loadTexts: hwApNotSupportCountryCodeNotify.setDescription('Description.')
hwApReceivedInvalidArpNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 40)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApNotifyRadioId"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApNotifyWlanId"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApArpAttackSrcMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApArpAttackDstMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApArpAttackSrcIP"))
if mibBuilder.loadTexts: hwApReceivedInvalidArpNotify.setStatus('current')
if mibBuilder.loadTexts: hwApReceivedInvalidArpNotify.setDescription('Description.')
hwApArpExceedThresholdNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 41)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApNotifyRadioId"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApNotifyWlanId"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApArpActualRate"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApArpCfgRateThreshold"))
if mibBuilder.loadTexts: hwApArpExceedThresholdNotify.setStatus('current')
if mibBuilder.loadTexts: hwApArpExceedThresholdNotify.setDescription('Description.')
hwApColdBootNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 42)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApType"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApSysName"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwOccurTime"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApBootNotifyName"))
if mibBuilder.loadTexts: hwApColdBootNotify.setStatus('current')
if mibBuilder.loadTexts: hwApColdBootNotify.setDescription('Description.')
hwApColdBootRestoreNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 43)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApType"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApSysName"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwOccurTime"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApBootNotifyName"))
if mibBuilder.loadTexts: hwApColdBootRestoreNotify.setStatus('current')
if mibBuilder.loadTexts: hwApColdBootRestoreNotify.setDescription('Description.')
hwApHotBootNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 44)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApType"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApSysName"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwOccurTime"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApBootNotifyName"))
if mibBuilder.loadTexts: hwApHotBootNotify.setStatus('current')
if mibBuilder.loadTexts: hwApHotBootNotify.setDescription('Description.')
hwApHotBootRestoreNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 45)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApType"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApSysName"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwOccurTime"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApBootNotifyName"))
if mibBuilder.loadTexts: hwApHotBootRestoreNotify.setStatus('current')
if mibBuilder.loadTexts: hwApHotBootRestoreNotify.setDescription('Description.')
hwStationOnlineNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 46)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-SERVICE-MIB", "hwWlanServiceStaRadioId"), ("HUAWEI-WLAN-SERVICE-MIB", "hwWlanServiceStaMac"), ("HUAWEI-WLAN-SERVICE-MIB", "hwStaAccessChannel"), ("HUAWEI-WLAN-SERVICE-MIB", "hwStaRssi"), ("HUAWEI-WLAN-DEVICE-MIB", "hwOccurTime"))
if mibBuilder.loadTexts: hwStationOnlineNotify.setStatus('current')
if mibBuilder.loadTexts: hwStationOnlineNotify.setDescription('Description.')
hwStationOfflineNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 47)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-SERVICE-MIB", "hwWlanServiceStaRadioId"), ("HUAWEI-WLAN-SERVICE-MIB", "hwWlanServiceStaMac"), ("HUAWEI-WLAN-SERVICE-MIB", "hwStaAccessChannel"), ("HUAWEI-WLAN-SERVICE-MIB", "hwStaRssi"), ("HUAWEI-WLAN-DEVICE-MIB", "hwOccurTime"))
if mibBuilder.loadTexts: hwStationOfflineNotify.setStatus('current')
if mibBuilder.loadTexts: hwStationOfflineNotify.setDescription('Description.')
hwStationSignalStrengthLowThanThresholdNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 48)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-SERVICE-MIB", "hwWlanServiceStaRadioId"), ("HUAWEI-WLAN-SERVICE-MIB", "hwWlanServiceStaMac"), ("HUAWEI-WLAN-SERVICE-MIB", "hwStaRssi"), ("HUAWEI-WLAN-DEVICE-MIB", "hwSignalStrengthThreshold"))
if mibBuilder.loadTexts: hwStationSignalStrengthLowThanThresholdNotify.setStatus('current')
if mibBuilder.loadTexts: hwStationSignalStrengthLowThanThresholdNotify.setDescription('Description.')
hwAPBroadcastStormDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 49))
if mibBuilder.loadTexts: hwAPBroadcastStormDownNotify.setStatus('current')
if mibBuilder.loadTexts: hwAPBroadcastStormDownNotify.setDescription('Description.')
hwAPBroadcastStormDownRestoreNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 50))
if mibBuilder.loadTexts: hwAPBroadcastStormDownRestoreNotify.setStatus('current')
if mibBuilder.loadTexts: hwAPBroadcastStormDownRestoreNotify.setDescription('Description.')
hwAPBroadcastStormUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 51))
if mibBuilder.loadTexts: hwAPBroadcastStormUpNotify.setStatus('current')
if mibBuilder.loadTexts: hwAPBroadcastStormUpNotify.setDescription('Description.')
hwAPBroadcastStormUpRestoreNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 52))
if mibBuilder.loadTexts: hwAPBroadcastStormUpRestoreNotify.setStatus('current')
if mibBuilder.loadTexts: hwAPBroadcastStormUpRestoreNotify.setDescription('Description.')
hwApBroadcastRestrainDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 53))
if mibBuilder.loadTexts: hwApBroadcastRestrainDownNotify.setStatus('current')
if mibBuilder.loadTexts: hwApBroadcastRestrainDownNotify.setDescription('Description.')
hwApBroadcastRestrainDownRestoreNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 54))
if mibBuilder.loadTexts: hwApBroadcastRestrainDownRestoreNotify.setStatus('current')
if mibBuilder.loadTexts: hwApBroadcastRestrainDownRestoreNotify.setDescription('Description.')
hwApBroadcastRestrainUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 55))
if mibBuilder.loadTexts: hwApBroadcastRestrainUpNotify.setStatus('current')
if mibBuilder.loadTexts: hwApBroadcastRestrainUpNotify.setDescription('Description.')
hwApBroadcastRestrainUpRestoreNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 56))
if mibBuilder.loadTexts: hwApBroadcastRestrainUpRestoreNotify.setStatus('current')
if mibBuilder.loadTexts: hwApBroadcastRestrainUpRestoreNotify.setDescription('Description.')
hwApCRCTooHighNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 57)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwCrcErrActual"), ("HUAWEI-WLAN-DEVICE-MIB", "hwCrcPortType"), ("HUAWEI-WLAN-DEVICE-MIB", "hwCrcPortID"))
if mibBuilder.loadTexts: hwApCRCTooHighNotify.setStatus('current')
if mibBuilder.loadTexts: hwApCRCTooHighNotify.setDescription('Description.')
hwApCRCTooHighRestoreNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 58)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwCrcErrActual"), ("HUAWEI-WLAN-DEVICE-MIB", "hwCrcPortType"), ("HUAWEI-WLAN-DEVICE-MIB", "hwCrcPortID"))
if mibBuilder.loadTexts: hwApCRCTooHighRestoreNotify.setStatus('current')
if mibBuilder.loadTexts: hwApCRCTooHighRestoreNotify.setDescription('Description.')
hwApConflictApNameNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 59)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApSysName"), ("HUAWEI-WLAN-DEVICE-MIB", "hwOccurTime"))
if mibBuilder.loadTexts: hwApConflictApNameNotify.setStatus('current')
if mibBuilder.loadTexts: hwApConflictApNameNotify.setDescription('Description.')
hwApLicenseNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 60)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApLicenseInfo"))
if mibBuilder.loadTexts: hwApLicenseNotify.setStatus('current')
if mibBuilder.loadTexts: hwApLicenseNotify.setDescription('Description.')
hwApFmeaIICFaultNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 61)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"))
if mibBuilder.loadTexts: hwApFmeaIICFaultNotify.setStatus('current')
if mibBuilder.loadTexts: hwApFmeaIICFaultNotify.setDescription('AP IIC channel fault.')
hwApFmeaIICFaultRestoreNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 62)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"))
if mibBuilder.loadTexts: hwApFmeaIICFaultRestoreNotify.setStatus('current')
if mibBuilder.loadTexts: hwApFmeaIICFaultRestoreNotify.setDescription('AP IIC channel fault clear.')
hwApFmeaPHYFaultNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 63)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"))
if mibBuilder.loadTexts: hwApFmeaPHYFaultNotify.setStatus('current')
if mibBuilder.loadTexts: hwApFmeaPHYFaultNotify.setDescription('AP PHY CMOS fault.')
hwApFmeaPHYFaultRestoreNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 64)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"))
if mibBuilder.loadTexts: hwApFmeaPHYFaultRestoreNotify.setStatus('current')
if mibBuilder.loadTexts: hwApFmeaPHYFaultRestoreNotify.setDescription('AP PHY CMOS fault clear.')
hwApFmeaFaultNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 65)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApFaultID"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApIfIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApFaultInfo"))
if mibBuilder.loadTexts: hwApFmeaFaultNotify.setStatus('current')
if mibBuilder.loadTexts: hwApFmeaFaultNotify.setDescription('AP FMEA fault.')
hwApFmeaFaultRestoreNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 66)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApFaultID"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApIfIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApFaultInfo"))
if mibBuilder.loadTexts: hwApFmeaFaultRestoreNotify.setStatus('current')
if mibBuilder.loadTexts: hwApFmeaFaultRestoreNotify.setDescription('AP FMEA fault clear.')
hwApOpticalInsertNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 67)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApIfIndex"))
if mibBuilder.loadTexts: hwApOpticalInsertNotify.setStatus('current')
if mibBuilder.loadTexts: hwApOpticalInsertNotify.setDescription('AP optical insert.')
hwApOpticalRemoveNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 68)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApIfIndex"))
if mibBuilder.loadTexts: hwApOpticalRemoveNotify.setStatus('current')
if mibBuilder.loadTexts: hwApOpticalRemoveNotify.setDescription('AP optical remove.')
hwApReceivedInvalidArpNewNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 69)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApNotifyRadioId"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApNotifyWlanId"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApArpAttackDropNum"))
if mibBuilder.loadTexts: hwApReceivedInvalidArpNewNotify.setStatus('current')
if mibBuilder.loadTexts: hwApReceivedInvalidArpNewNotify.setDescription('Description.')
hwApVersionMismatchNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 1, 70)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApActualType"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApSoftwareVersion"))
if mibBuilder.loadTexts: hwApVersionMismatchNotify.setStatus('current')
if mibBuilder.loadTexts: hwApVersionMismatchNotify.setDescription('Description.')
hwWlanDeviceNotifyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 2))
hwApActualType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 2, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApActualType.setStatus('current')
if mibBuilder.loadTexts: hwApActualType.setDescription("The actual type of AP. This node is used for describe the actual type of an AP tying to get online, which type can't be matched by AC.")
hwApCpuOccupancyRate = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApCpuOccupancyRate.setStatus('current')
if mibBuilder.loadTexts: hwApCpuOccupancyRate.setDescription('Description.')
hwApMemoryOccupancyRate = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApMemoryOccupancyRate.setStatus('current')
if mibBuilder.loadTexts: hwApMemoryOccupancyRate.setDescription('Description.')
hwApPermitStaNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApPermitStaNum.setStatus('current')
if mibBuilder.loadTexts: hwApPermitStaNum.setDescription('Description.')
hwStaAuthFailCause = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStaAuthFailCause.setStatus('current')
if mibBuilder.loadTexts: hwStaAuthFailCause.setDescription('Description.')
hwAcSystemSwitchType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAcSystemSwitchType.setStatus('current')
if mibBuilder.loadTexts: hwAcSystemSwitchType.setDescription('Description.')
hwApRadioNotifyPara = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApRadioNotifyPara.setStatus('current')
if mibBuilder.loadTexts: hwApRadioNotifyPara.setDescription('Description.')
hwApOpticalRxPower = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApOpticalRxPower.setStatus('current')
if mibBuilder.loadTexts: hwApOpticalRxPower.setDescription('Description.')
hwApOpticalTemperature = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApOpticalTemperature.setStatus('current')
if mibBuilder.loadTexts: hwApOpticalTemperature.setDescription('Description.')
hwApCfgCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 2, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApCfgCountryCode.setStatus('current')
if mibBuilder.loadTexts: hwApCfgCountryCode.setDescription('Description.')
hwApArpAttackSrcMac = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 2, 12), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApArpAttackSrcMac.setStatus('current')
if mibBuilder.loadTexts: hwApArpAttackSrcMac.setDescription('Description.')
hwApArpAttackDstMac = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 2, 13), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApArpAttackDstMac.setStatus('current')
if mibBuilder.loadTexts: hwApArpAttackDstMac.setDescription('Description.')
hwApArpAttackSrcIP = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 2, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApArpAttackSrcIP.setStatus('current')
if mibBuilder.loadTexts: hwApArpAttackSrcIP.setDescription('Description.')
hwApArpCfgRateThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApArpCfgRateThreshold.setStatus('current')
if mibBuilder.loadTexts: hwApArpCfgRateThreshold.setDescription('Description.')
hwApArpActualRate = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApArpActualRate.setStatus('current')
if mibBuilder.loadTexts: hwApArpActualRate.setDescription('Description.')
hwApNotifyRadioId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApNotifyRadioId.setStatus('current')
if mibBuilder.loadTexts: hwApNotifyRadioId.setDescription('Description.')
hwApNotifyOrRestoreTemperature = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApNotifyOrRestoreTemperature.setStatus('current')
if mibBuilder.loadTexts: hwApNotifyOrRestoreTemperature.setDescription('Description.')
hwOccurTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 2, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOccurTime.setStatus('current')
if mibBuilder.loadTexts: hwOccurTime.setDescription('Description.')
hwApBootNotifyName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 2, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApBootNotifyName.setStatus('current')
if mibBuilder.loadTexts: hwApBootNotifyName.setDescription('Description.')
hwApFaultTimes = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 2, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApFaultTimes.setStatus('current')
if mibBuilder.loadTexts: hwApFaultTimes.setDescription('Description.')
hwSignalStrengthThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 2, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSignalStrengthThreshold.setStatus('current')
if mibBuilder.loadTexts: hwSignalStrengthThreshold.setDescription('Description.')
hwStaBroadcastFlux = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 2, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwStaBroadcastFlux.setStatus('current')
if mibBuilder.loadTexts: hwStaBroadcastFlux.setDescription('Description.')
hwBroadcastWarnThresholdDown = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 2, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBroadcastWarnThresholdDown.setStatus('current')
if mibBuilder.loadTexts: hwBroadcastWarnThresholdDown.setDescription('Description.')
hwBroadcastWarnThresholdUp = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 2, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBroadcastWarnThresholdUp.setStatus('current')
if mibBuilder.loadTexts: hwBroadcastWarnThresholdUp.setDescription('Description.')
hwBroadcastRestrainThresholdDown = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 2, 26), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBroadcastRestrainThresholdDown.setStatus('current')
if mibBuilder.loadTexts: hwBroadcastRestrainThresholdDown.setDescription('Description.')
hwBroadcastRestrainThresholdUp = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 2, 27), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBroadcastRestrainThresholdUp.setStatus('current')
if mibBuilder.loadTexts: hwBroadcastRestrainThresholdUp.setDescription('Description.')
hwApBroadcastFlux = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 2, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApBroadcastFlux.setStatus('current')
if mibBuilder.loadTexts: hwApBroadcastFlux.setDescription('Description.')
hwCrcErrActual = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 2, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCrcErrActual.setStatus('current')
if mibBuilder.loadTexts: hwCrcErrActual.setDescription('Description.')
hwCrcThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 2, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCrcThreshold.setStatus('current')
if mibBuilder.loadTexts: hwCrcThreshold.setDescription('Description.')
hwApNotifyWlanId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 2, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApNotifyWlanId.setStatus('current')
if mibBuilder.loadTexts: hwApNotifyWlanId.setDescription('Description.')
hwApLicenseInfo = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 2, 32), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLicenseInfo.setStatus('current')
if mibBuilder.loadTexts: hwApLicenseInfo.setDescription('Description.')
hwCrcPortType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 2, 33), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCrcPortType.setStatus('current')
if mibBuilder.loadTexts: hwCrcPortType.setDescription('Description.')
hwCrcPortID = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 2, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCrcPortID.setStatus('current')
if mibBuilder.loadTexts: hwCrcPortID.setDescription('Description.')
hwApArpAttackDropNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 2, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApArpAttackDropNum.setStatus('current')
if mibBuilder.loadTexts: hwApArpAttackDropNum.setDescription('Description.')
hwApFaultID = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 2, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("phy", 1), ("cpld", 2), ("lm75", 3), ("sfp", 4), ("wifi", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApFaultID.setStatus('current')
if mibBuilder.loadTexts: hwApFaultID.setDescription('AP hardware fault index.')
hwApIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 2, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwApIfIndex.setDescription('AP hardware IfIndex.')
hwApFaultInfo = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 1, 2, 38), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApFaultInfo.setStatus('current')
if mibBuilder.loadTexts: hwApFaultInfo.setDescription('AP hardware fault description.')
hwApTypeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 2))
hwApTypeTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 2, 1), )
if mibBuilder.loadTexts: hwApTypeTable.setStatus('current')
if mibBuilder.loadTexts: hwApTypeTable.setDescription("Huawei AP type table. The index of this table is hwApType. AP type is a string used to represent a kind of AP. AP type table include following attribute such as AP's type name, maximum station number, maximum SSID number, radio number and type, lineate port number and type etc. ")
hwApTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 2, 1, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApType"))
if mibBuilder.loadTexts: hwApTypeEntry.setStatus('current')
if mibBuilder.loadTexts: hwApTypeEntry.setDescription("Huawei AP type table entry.The index of this entry is hwApType. AP type is a string used to represent a kind of AP. AP type table include following attribute such as AP's type name, maximum statio nnumber, maximum SSID number, radio number and type, lineate port number and type etc. ")
hwApType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 2, 1, 1, 1), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwApType.setStatus('current')
if mibBuilder.loadTexts: hwApType.setDescription('AP type is the identification of a kind of AP. ')
hwApTypeDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 2, 1, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApTypeDesc.setStatus('current')
if mibBuilder.loadTexts: hwApTypeDesc.setDescription('Description of AP type. The maximum string length is 63. ')
hwApTypeLineatePortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApTypeLineatePortNum.setStatus('current')
if mibBuilder.loadTexts: hwApTypeLineatePortNum.setDescription('The lineate port number of AP.When add an AP type, its default lineateport number is 8.')
hwApTypeRadioNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApTypeRadioNum.setStatus('current')
if mibBuilder.loadTexts: hwApTypeRadioNum.setDescription('The number of radios on the AP.When add an AP type, its default radios number is 4.')
hwApTypeMaxStaNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApTypeMaxStaNum.setStatus('current')
if mibBuilder.loadTexts: hwApTypeMaxStaNum.setDescription('The maximum of station of AP.When add an AP type, its default access station number is 128.')
hwApTypeMaxSsidNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 2, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApTypeMaxSsidNum.setStatus('current')
if mibBuilder.loadTexts: hwApTypeMaxSsidNum.setDescription('The maximum of ssid of AP.When add an AP type, its default max- imum SSID number is 32.')
hwApTypeAntennaGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 2, 1, 1, 7), Integer32()).setUnits('dBi').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApTypeAntennaGain.setStatus('current')
if mibBuilder.loadTexts: hwApTypeAntennaGain.setDescription('The antenna gain of AP. Unit: dBi. Its default antenna gain is 0.')
hwApTypeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 2, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApTypeRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwApTypeRowStatus.setDescription('Row status: mainly to support AP type addition and deletion.')
hwApTypeReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 2, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApTypeReset.setStatus('current')
if mibBuilder.loadTexts: hwApTypeReset.setDescription('Description.')
hwApTypeRadioTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 2, 3), )
if mibBuilder.loadTexts: hwApTypeRadioTable.setStatus('current')
if mibBuilder.loadTexts: hwApTypeRadioTable.setDescription('Huawei AP type radio table. Each AP type has several radios, gene- rally 1 to 4 radios. The index of this table is hwApType in table hwApTypeTable and hwApTypeRadioIndex. It describes the following attributes of a radio inAP type, radio type, maximal spatial streams, maximal antenna number.')
hwApTypeRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 2, 3, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApType"), (0, "HUAWEI-WLAN-DEVICE-MIB", "hwApTypeRadioIndex"))
if mibBuilder.loadTexts: hwApTypeRadioEntry.setStatus('current')
if mibBuilder.loadTexts: hwApTypeRadioEntry.setDescription('Huawei AP type radio table entry.Each AP type has several radios, gene- rally 1 to 4 radios. The index of this entry is hwApType in table hwApTypeTable and hwApTypeRadioIndex. It describes the following attributes of a radio inAP type, radio type, maximal spatial streams, maximal antenna number.')
hwApTypeRadioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 2, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: hwApTypeRadioIndex.setStatus('current')
if mibBuilder.loadTexts: hwApTypeRadioIndex.setDescription('Index of radio in an AP type.')
hwApTypeRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("wlan80211a", 1), ("wlan80211b", 2), ("wlan80211g", 3), ("wlan80211bg", 4), ("wlan80211an", 5), ("wlan80211bgn", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApTypeRadioType.setStatus('current')
if mibBuilder.loadTexts: hwApTypeRadioType.setDescription('The type of radio of AP type. When add an AP type ,the default radio type is wlan80211a(1). ')
hwRadioMaxSpatialStreamsNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 2, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioMaxSpatialStreamsNum.setStatus('current')
if mibBuilder.loadTexts: hwRadioMaxSpatialStreamsNum.setDescription('Maximum spatial streams number of a radio in an AP type.When add an AP type ,its defautl value is 1 .')
hwRadioMaxAntennasNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 2, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioMaxAntennasNum.setStatus('current')
if mibBuilder.loadTexts: hwRadioMaxAntennasNum.setDescription('Maximum antennas number of a radioin an AP type,defautl is 1 for no-80211n type radio, 0(Smart-Antennas-Array) for 80211n type radio.')
hwRadioMaxVAPNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 2, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioMaxVAPNum.setStatus('current')
if mibBuilder.loadTexts: hwRadioMaxVAPNum.setDescription('Maximum VAP number of a radioin an AP type.')
hwApTypeRadioAntennaGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApTypeRadioAntennaGain.setStatus('current')
if mibBuilder.loadTexts: hwApTypeRadioAntennaGain.setDescription('Description.')
hwApTypeLineatePortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 2, 4), )
if mibBuilder.loadTexts: hwApTypeLineatePortInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwApTypeLineatePortInfoTable.setDescription('Huawei AP type lineate port table.Each AP type may have several line- ate port.The index of this table is AP type in table hwApTypeTable and lineate port ID of AP type. The table describes the lineate port type of all AP type.')
hwApTypeLineatePortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 2, 4, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApType"), (0, "HUAWEI-WLAN-DEVICE-MIB", "hwApTypeLineatePortIndex"))
if mibBuilder.loadTexts: hwApTypeLineatePortInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwApTypeLineatePortInfoEntry.setDescription('Huawei AP type lineate port table entry.Each AP type may have several lineate port.The index of this table is AP type in table hwApTypeTable and lineate port ID of AP type. The table describes the lineate port type of all AP type.')
hwApTypeLineatePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 2, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: hwApTypeLineatePortIndex.setStatus('current')
if mibBuilder.loadTexts: hwApTypeLineatePortIndex.setDescription('Index of lineate port in an AP type.')
hwApTypeLineatePortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("fe", 1), ("ge", 2), ("gpon", 3), ("epon", 4), ("adsl2plus", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApTypeLineatePortType.setStatus('current')
if mibBuilder.loadTexts: hwApTypeLineatePortType.setDescription('The type of lineate port of AP type.When add a new AP type, its default lineate port type is fe(1). ')
hwApTypeLineatePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 2, 4, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApTypeLineatePortName.setStatus('current')
if mibBuilder.loadTexts: hwApTypeLineatePortName.setDescription('Description.')
hwApProfileObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3))
hwApProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 1), )
if mibBuilder.loadTexts: hwApProfileTable.setStatus('current')
if mibBuilder.loadTexts: hwApProfileTable.setDescription("Huawei AP profile table. The index of this tabel is AP profile name. AP profile is aggregate of a group of configuration. Such as, MTU of AP's Ethernet, DoS defend switch, working mode of AP, AP log backup server configuration, etc. ")
hwApProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 1, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApProfileName"))
if mibBuilder.loadTexts: hwApProfileEntry.setStatus('current')
if mibBuilder.loadTexts: hwApProfileEntry.setDescription("Huawei AP profile table entry.The index of this tabel is AP profile name. AP profile is aggregate of a group of configuration. Such as, MTU of AP's Ethernet, DoS defend switch, working mode of AP, AP log backup server configuration, etc.")
hwApProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 1, 1, 1), OctetString())
if mibBuilder.loadTexts: hwApProfileName.setStatus('current')
if mibBuilder.loadTexts: hwApProfileName.setDescription("Ap profile name identifies an AP profile, which include a set of AP's configuration.")
hwApEthPortMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 1, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApEthPortMtu.setStatus('current')
if mibBuilder.loadTexts: hwApEthPortMtu.setDescription('The maximal packet size of AP Ethernet.')
hwApDosDefend = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApDosDefend.setStatus('current')
if mibBuilder.loadTexts: hwApDosDefend.setDescription('Not support. ')
hwApWorkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bridge", 1), ("routing", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApWorkMode.setStatus('current')
if mibBuilder.loadTexts: hwApWorkMode.setDescription('Not support. ')
hwApLogBackupServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 1, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApLogBackupServerIp.setStatus('current')
if mibBuilder.loadTexts: hwApLogBackupServerIp.setDescription("Ip address of AP's syslog backup server.")
hwApLogBackupMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("autoBackup", 1), ("manualBackup", 2), ("disable", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApLogBackupMode.setStatus('current')
if mibBuilder.loadTexts: hwApLogBackupMode.setDescription('Not support. ')
hwApProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwApProfileRowStatus.setDescription('Row status: mainly to support AP profile addition and deletion.')
hwApSampleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApSampleTime.setStatus('current')
if mibBuilder.loadTexts: hwApSampleTime.setDescription('Description.')
hwApStatisticsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApStatisticsInterval.setStatus('current')
if mibBuilder.loadTexts: hwApStatisticsInterval.setDescription('Description.')
hwApEapStartMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("broadcast", 1), ("multicast", 2), ("unicast", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApEapStartMode.setStatus('current')
if mibBuilder.loadTexts: hwApEapStartMode.setDescription('Description.')
hwApEapStartUnicastMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 1, 1, 11), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApEapStartUnicastMac.setStatus('current')
if mibBuilder.loadTexts: hwApEapStartUnicastMac.setDescription('Description.')
hwApEapStartTransform = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("specific", 1), ("all", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApEapStartTransform.setStatus('current')
if mibBuilder.loadTexts: hwApEapStartTransform.setDescription('Description.')
hwApEapResponseMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("broadcast", 1), ("multicast", 2), ("unicastSpecific", 3), ("unicastLearning", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApEapResponseMode.setStatus('current')
if mibBuilder.loadTexts: hwApEapResponseMode.setDescription('Description.')
hwApEapResponseUnicastMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 1, 1, 14), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApEapResponseUnicastMac.setStatus('current')
if mibBuilder.loadTexts: hwApEapResponseUnicastMac.setDescription('Description.')
hwApEapResponseTransform = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("specific", 1), ("all", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApEapResponseTransform.setStatus('current')
if mibBuilder.loadTexts: hwApEapResponseTransform.setDescription('Description.')
hwApOfflineManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApOfflineManagement.setStatus('current')
if mibBuilder.loadTexts: hwApOfflineManagement.setDescription('Description.')
hwApAlarmRestrictionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApAlarmRestrictionMode.setStatus('current')
if mibBuilder.loadTexts: hwApAlarmRestrictionMode.setDescription('Description.')
hwApAlarmRestrictionPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApAlarmRestrictionPeriod.setStatus('current')
if mibBuilder.loadTexts: hwApAlarmRestrictionPeriod.setDescription('Description.')
hwAp4WayHandshakeRoamPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ac", 1), ("ap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAp4WayHandshakeRoamPolicy.setStatus('current')
if mibBuilder.loadTexts: hwAp4WayHandshakeRoamPolicy.setDescription('Not support.')
hwApLogRecordLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emergency", 1), ("alert", 2), ("critical", 3), ("error", 4), ("warning", 5), ("notice", 6), ("info", 7), ("debug", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLogRecordLevel.setStatus('current')
if mibBuilder.loadTexts: hwApLogRecordLevel.setDescription('Description.')
hwApLogBackupPeriodTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLogBackupPeriodTime.setStatus('current')
if mibBuilder.loadTexts: hwApLogBackupPeriodTime.setDescription('Not support.')
hwApLogRecordFtpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("ftp", 2), ("sftp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLogRecordFtpMode.setStatus('current')
if mibBuilder.loadTexts: hwApLogRecordFtpMode.setDescription('Not support.')
hwApLogServerUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 1, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLogServerUsername.setStatus('current')
if mibBuilder.loadTexts: hwApLogServerUsername.setDescription('Not support.')
hwApLogServerUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 1, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLogServerUserPassword.setStatus('current')
if mibBuilder.loadTexts: hwApLogServerUserPassword.setDescription('Not support.')
hwApLogServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 1, 1, 25), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLogServerIp.setStatus('current')
if mibBuilder.loadTexts: hwApLogServerIp.setDescription('Not support.')
hwApProfileTelnetSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApProfileTelnetSwitch.setStatus('current')
if mibBuilder.loadTexts: hwApProfileTelnetSwitch.setDescription('Description.')
hwApSshSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApSshSwitch.setStatus('current')
if mibBuilder.loadTexts: hwApSshSwitch.setDescription('Description.')
hwApProfileDhcpTrustPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApProfileDhcpTrustPort.setStatus('current')
if mibBuilder.loadTexts: hwApProfileDhcpTrustPort.setDescription('Description.')
hwApProfileConsoleSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApProfileConsoleSwitch.setStatus('current')
if mibBuilder.loadTexts: hwApProfileConsoleSwitch.setDescription('Description.')
hwApProfileMaxUserNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApProfileMaxUserNum.setStatus('current')
if mibBuilder.loadTexts: hwApProfileMaxUserNum.setDescription('Description.')
hwApProfileNdTrustPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApProfileNdTrustPort.setStatus('current')
if mibBuilder.loadTexts: hwApProfileNdTrustPort.setDescription('Description.')
hwApLogBackupServerIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 1, 1, 32), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLogBackupServerIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: hwApLogBackupServerIpv6Addr.setDescription('Description.')
hwApLedSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLedSwitch.setStatus('current')
if mibBuilder.loadTexts: hwApLedSwitch.setDescription('Description.')
hwApLocalAssocResSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLocalAssocResSwitch.setStatus('current')
if mibBuilder.loadTexts: hwApLocalAssocResSwitch.setDescription('Description.')
hwApProfileDefault = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApProfileDefault.setStatus('current')
if mibBuilder.loadTexts: hwApProfileDefault.setDescription('The default profile name. When an AP connect to ac without addition, it will be added automatically, and use the default profile.')
hwApProfileBatchInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 3))
hwApProfileBatchStart = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApProfileBatchStart.setStatus('current')
if mibBuilder.loadTexts: hwApProfileBatchStart.setDescription('The initiatory AP profile number in batch operation. This node must be set in company with the node hwApProfileBatchNumber. ')
hwApProfileBatchNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApProfileBatchNumber.setStatus('current')
if mibBuilder.loadTexts: hwApProfileBatchNumber.setDescription('The AP profile number in batch operation. This node must be set in company with the node hwApProfileBatchStart. ')
hwApProfileBatchReturnNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApProfileBatchReturnNumber.setStatus('current')
if mibBuilder.loadTexts: hwApProfileBatchReturnNumber.setDescription('The actual AP profile number in batch operation. ')
hwApProfileBatchNameList = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 3, 3, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApProfileBatchNameList.setStatus('current')
if mibBuilder.loadTexts: hwApProfileBatchNameList.setDescription("The actual AP profile name list in batch operation. Two adjacent profile name is divided by '?'. ")
hwApAuthListObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 4))
hwApMacWhitelistTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 4, 1), )
if mibBuilder.loadTexts: hwApMacWhitelistTable.setStatus('current')
if mibBuilder.loadTexts: hwApMacWhitelistTable.setDescription("Huawei AP mac address whitelist table. The Index of this table is mac address.AP mac address is used to authenticate the AP's validity.")
hwApMacWhitelistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 4, 1, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApMacWhitelistMacAddr"))
if mibBuilder.loadTexts: hwApMacWhitelistEntry.setStatus('current')
if mibBuilder.loadTexts: hwApMacWhitelistEntry.setDescription("Huawei AP mac address whitelist table entry. The Index of this table is mac address.AP mac address is used to authenticate the AP's validity.")
hwApMacWhitelistMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 4, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: hwApMacWhitelistMacAddr.setStatus('current')
if mibBuilder.loadTexts: hwApMacWhitelistMacAddr.setDescription('Ap mac address.')
hwApMacWhitelistRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 4, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApMacWhitelistRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwApMacWhitelistRowStatus.setDescription('Row status: mainly to support AP mac whitelist addition and deletion.')
hwApSnWhitelistTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 4, 2), )
if mibBuilder.loadTexts: hwApSnWhitelistTable.setStatus('current')
if mibBuilder.loadTexts: hwApSnWhitelistTable.setDescription("Huawei AP sn whitelist table. The index of this table is AP sn. AP sn is used to authenticate the AP's validity.")
hwApSnWhitelistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 4, 2, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApSnWhitelistSn"))
if mibBuilder.loadTexts: hwApSnWhitelistEntry.setStatus('current')
if mibBuilder.loadTexts: hwApSnWhitelistEntry.setDescription("Huawei AP sn whitelist table entry.The index of this table is AP sn. AP sn is used to authenticate the AP's validity.")
hwApSnWhitelistSn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 4, 2, 1, 1), OctetString())
if mibBuilder.loadTexts: hwApSnWhitelistSn.setStatus('current')
if mibBuilder.loadTexts: hwApSnWhitelistSn.setDescription('Ap sn is a string for identifing an AP.')
hwApSnWhitelistRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 4, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApSnWhitelistRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwApSnWhitelistRowStatus.setDescription('Row status: mainly to support AP sn whitelist addition and deletion.')
hwApAuthMode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("macAuth", 1), ("snAuth", 2), ("noAuth", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApAuthMode.setStatus('current')
if mibBuilder.loadTexts: hwApAuthMode.setDescription('Ap authentication mode. macAuth - AP is authenticated by mac-address. snAuth - AP is authenticated by sn. noAuth - no authentication. If select this mode, all AP will connect to the ac without authentication.')
hwApMacWhitelistBatchQueryInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 4, 4))
hwApMacWhitelistBatchQueryStartNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 4, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApMacWhitelistBatchQueryStartNumber.setStatus('current')
if mibBuilder.loadTexts: hwApMacWhitelistBatchQueryStartNumber.setDescription('The start valid number of AP mac whitelist when get AP mac whitelist in batch. Begin with 0, must less than the specification of whitelist.')
hwApMacWhitelistBatchQueryNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 4, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApMacWhitelistBatchQueryNumber.setStatus('current')
if mibBuilder.loadTexts: hwApMacWhitelistBatchQueryNumber.setDescription('The query number of AP mac whitelist when query AP mac whitelist in batch. The query number must less than or equal the specification of mac whitelist.')
hwApMacWhitelistBatchQueryList = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 4, 4, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApMacWhitelistBatchQueryList.setStatus('current')
if mibBuilder.loadTexts: hwApMacWhitelistBatchQueryList.setDescription('The returned AP mac whitelist list when query AP mac whitelist in batch. The mac is storaged in the list one by one,and no separator. For example, if the start number is 10, and the query number is 50, then the host will find 50 valid mac whitelists from the 11th valid mac whitelist.(Assume there are 100 mac whitelists in host.) And each time the SNMP agent can get 128 mac whitelist at most.')
hwApMacWhitelistBatchQueryReturnNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 4, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApMacWhitelistBatchQueryReturnNumber.setStatus('current')
if mibBuilder.loadTexts: hwApMacWhitelistBatchQueryReturnNumber.setDescription('The actual mac number of returned AP mac whitelist list when query AP mac whitelist in batch. ')
hwApSnWhitelistBatchQueryInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 4, 5))
hwApSnWhitelistBatchQueryStartNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 4, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApSnWhitelistBatchQueryStartNumber.setStatus('current')
if mibBuilder.loadTexts: hwApSnWhitelistBatchQueryStartNumber.setDescription('The start valid number of AP sn whitelist when get AP sn whitelist in batch. Begin with 0, must less than the specification of white- list.')
hwApSnWhitelistBatchQueryNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 4, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApSnWhitelistBatchQueryNumber.setStatus('current')
if mibBuilder.loadTexts: hwApSnWhitelistBatchQueryNumber.setDescription('The query number of AP sn whitelist when query AP sn whitelist in batch. The query number must less than or equal the specification of whitelist.')
hwApSnWhitelistBatchQueryList = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 4, 5, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8192))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApSnWhitelistBatchQueryList.setStatus('current')
if mibBuilder.loadTexts: hwApSnWhitelistBatchQueryList.setDescription("The returned AP sn whitelist list when query AP sn whitelist in batch. Two adjacent sn whitelist in the list are divided by '?'. For example, if the start number is 10, and the query number is 50, then the host will find 50 valid sn whitelists from the 11th valid sn whitelist.(Assume there are 100 sn whitelists in host.) And each time the SNMP agent can get 128 sn whitelist at most.")
hwApSnWhitelistBatchQueryReturnNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 4, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApSnWhitelistBatchQueryReturnNumber.setStatus('current')
if mibBuilder.loadTexts: hwApSnWhitelistBatchQueryReturnNumber.setDescription('The actual number of returned AP sn whitelist list when query AP sn whitelist in batch.')
hwApMacBlacklistTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 4, 6), )
if mibBuilder.loadTexts: hwApMacBlacklistTable.setStatus('current')
if mibBuilder.loadTexts: hwApMacBlacklistTable.setDescription("Huawei AP mac address blacklist table. The Index of this table is mac address.AP mac address is used to authenticate the AP's validity.")
hwApMacBlacklistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 4, 6, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApMacBlacklistMacAddr"))
if mibBuilder.loadTexts: hwApMacBlacklistEntry.setStatus('current')
if mibBuilder.loadTexts: hwApMacBlacklistEntry.setDescription("Huawei AP mac address blacklist table entry. The Index of this table is mac address.AP mac address is used to authenticate the AP's validity.")
hwApMacBlacklistMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 4, 6, 1, 1), MacAddress())
if mibBuilder.loadTexts: hwApMacBlacklistMacAddr.setStatus('current')
if mibBuilder.loadTexts: hwApMacBlacklistMacAddr.setDescription('Ap mac address.')
hwApMacBlacklistRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 4, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApMacBlacklistRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwApMacBlacklistRowStatus.setDescription('Row status: mainly to support AP mac blacklist addition and deletion.')
hwApSnBlacklistTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 4, 7), )
if mibBuilder.loadTexts: hwApSnBlacklistTable.setStatus('current')
if mibBuilder.loadTexts: hwApSnBlacklistTable.setDescription("Huawei AP sn blacklist table. The index of this table is AP sn. AP sn is used to authenticate the AP's validity.")
hwApSnBlacklistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 4, 7, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApSnBlacklistSn"))
if mibBuilder.loadTexts: hwApSnBlacklistEntry.setStatus('current')
if mibBuilder.loadTexts: hwApSnBlacklistEntry.setDescription("Huawei AP sn blacklist table entry.The index of this table is AP sn. AP sn is used to authenticate the AP's validity.")
hwApSnBlacklistSn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 4, 7, 1, 1), OctetString())
if mibBuilder.loadTexts: hwApSnBlacklistSn.setStatus('current')
if mibBuilder.loadTexts: hwApSnBlacklistSn.setDescription('Ap sn is a string for identifing an AP.')
hwApSnBlacklistRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 4, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApSnBlacklistRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwApSnBlacklistRowStatus.setDescription('Row status: mainly to support AP sn blacklist addition and deletion.')
hwApRegionObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 5))
hwApRegionTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 5, 1), )
if mibBuilder.loadTexts: hwApRegionTable.setStatus('current')
if mibBuilder.loadTexts: hwApRegionTable.setDescription('Huawei AP region table. The index of this table is AP region ID. AP region is an aggregate of a lot of APs with the same position. Such as, all the APs in a building can be compartmentalized into one same region.')
hwApRegionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 5, 1, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApRegionIndex"))
if mibBuilder.loadTexts: hwApRegionEntry.setStatus('current')
if mibBuilder.loadTexts: hwApRegionEntry.setDescription('Huawei AP region table entry.The index of this table is AP region ID. AP region is an aggregate of a lot of APs with the same position. Such as, all the APs in a building can be compartmentalized into one same region.')
hwApRegionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 5, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hwApRegionIndex.setStatus('current')
if mibBuilder.loadTexts: hwApRegionIndex.setDescription('Ap region index.')
hwApRegionName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 5, 1, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApRegionName.setStatus('current')
if mibBuilder.loadTexts: hwApRegionName.setDescription('The description of the AP region.')
hwApRegionDeployMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("discreteDeploy", 1), ("normalDeploy", 2), ("denselyDeploy", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApRegionDeployMode.setStatus('current')
if mibBuilder.loadTexts: hwApRegionDeployMode.setDescription("The AP's deploy mode in an AP region. discreteDeploy - all the APs in the region is deployed discretely. There is no disturbance between APs. Every AP works at the maximum power. normalDeploy - APs in the region is deployed sparsely. Ap works at 50% of the maximum power at least. discreteDeploy - APs in the region is deployed densely. Ap works at 25% of the maximum power at least.")
hwApRegionApNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApRegionApNumber.setStatus('current')
if mibBuilder.loadTexts: hwApRegionApNumber.setDescription('Ap number in AP region.')
hwApRegionApIndexMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 5, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApRegionApIndexMask.setStatus('current')
if mibBuilder.loadTexts: hwApRegionApIndexMask.setDescription("All APs's index mask in an AP region. Every bit is used to describe an AP is in this region or not. 0 means AP is not in this region, and 1 means AP is in this region.The value of this node is hexadecimal integer block. Each Byte describes 8 APs are in this region or not. For example, the first Byte describes AP 0~7 is in this region or not, and the second Byte describes AP 8~15 is in this region or not. Such as, if only AP 0,4,5,6,7,9 is in this region, the binary number is 11110001 and 00000010,the hexadecimal number is 0xF1 and 0x2, so the first Byte of this node is 0xF1,and the second Byte is 0x2.")
hwApRegionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 5, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApRegionRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwApRegionRowStatus.setDescription('Row status: mainly to support AP region addition and deletion.')
hwApRegionForwardMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, -1))).clone(namedValues=NamedValues(("directForward", 1), ("tunnel", 2), ("unknown", -1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApRegionForwardMode.setStatus('current')
if mibBuilder.loadTexts: hwApRegionForwardMode.setDescription('The Ap region based forward mode.')
hwApRegionCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 5, 1, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApRegionCountryCode.setStatus('current')
if mibBuilder.loadTexts: hwApRegionCountryCode.setDescription('Description.')
hwApRegionScanChannel2G = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 5, 1, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApRegionScanChannel2G.setStatus('current')
if mibBuilder.loadTexts: hwApRegionScanChannel2G.setDescription('Description.')
hwApRegionScanChannel5G = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 5, 1, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApRegionScanChannel5G.setStatus('current')
if mibBuilder.loadTexts: hwApRegionScanChannel5G.setDescription('Description.')
hwApRegionCalibrateChannel2G = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 5, 1, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApRegionCalibrateChannel2G.setStatus('current')
if mibBuilder.loadTexts: hwApRegionCalibrateChannel2G.setDescription('Description.')
hwApRegionCalibrateChannel5G = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 5, 1, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApRegionCalibrateChannel5G.setStatus('current')
if mibBuilder.loadTexts: hwApRegionCalibrateChannel5G.setDescription('Description.')
hwApRegionCalibrate5gBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 0))).clone(namedValues=NamedValues(("ht20", 1), ("ht40", 2), ("ht80", 3), ("unknown", 0))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApRegionCalibrate5gBandWidth.setStatus('current')
if mibBuilder.loadTexts: hwApRegionCalibrate5gBandWidth.setDescription('Ap region calibrate 5G band width.')
hwApRegionGlobalInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 5, 2))
hwApRegionDefault = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 5, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApRegionDefault.setStatus('current')
if mibBuilder.loadTexts: hwApRegionDefault.setDescription('The default region index. When an AP connect to ac without addition, it will be added automatically, and join the default region.')
hwApRegionAllExistRegionIndexMask = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 5, 2, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApRegionAllExistRegionIndexMask.setStatus('current')
if mibBuilder.loadTexts: hwApRegionAllExistRegionIndexMask.setDescription("All the existent regions' index mask. Every bit is used to describe the region is existent or not. 0 means region is not existent, and 1 means region is existent. The value of this node is hexadecimal integer block. Each Byte describes 8 APs are existent or not. For example, the first Byte describes AP 0~7 is existent or not, and the second Byte describes AP 8~15 is existent or not. Such as, if only AP 0,4,5,6,7,9 is existent, the binary number is 11110001 and 00000010,the hexadecimal number is 0xF1 and 0x2, so the first Byte of this node is 0xF1,and the second Byte is 0x2.")
hwApRegionBatchInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 5, 2, 3))
hwApRegionBatchStart = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 5, 2, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApRegionBatchStart.setStatus('current')
if mibBuilder.loadTexts: hwApRegionBatchStart.setDescription('The initiatory AP region number in batch operation. This node must be set in company with the node hwApRegionBatchNumber. ')
hwApRegionBatchNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 5, 2, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApRegionBatchNumber.setStatus('current')
if mibBuilder.loadTexts: hwApRegionBatchNumber.setDescription('The AP region number in batch operation. This node must be set in company with the node hwApRegionBatchStart. ')
hwApRegionBatchReturnNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 5, 2, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApRegionBatchReturnNumber.setStatus('current')
if mibBuilder.loadTexts: hwApRegionBatchReturnNumber.setDescription('The actual AP region number in batch operation. ')
hwApRegionBatchNameList = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 5, 2, 3, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApRegionBatchNameList.setStatus('current')
if mibBuilder.loadTexts: hwApRegionBatchNameList.setDescription("The actual AP region names in batch operation. Each profile name is divided by '?'. ")
hwApRegionBatchDeployMode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 5, 2, 3, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApRegionBatchDeployMode.setStatus('current')
if mibBuilder.loadTexts: hwApRegionBatchDeployMode.setDescription("The deploy mode of AP regions in batch operation. The value of this node is hexadecimal integer block.Each region's deploy mode occupies a Byte. For example, if the first operated region's deploy mode is 15, and the sencond operated region's deploy mode is 14, so the first Byte of this node is 0xF,and the second Byte is 0xE.")
hwApRegionMerge = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 5, 3))
hwApSrcRegionIndex = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 5, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApSrcRegionIndex.setStatus('current')
if mibBuilder.loadTexts: hwApSrcRegionIndex.setDescription('The source region index in a merge operation. When a merge operation has been done, all the APs in the source region will join the desti- nation region,and the source region will become a empty region.')
hwApDestRegionIndex = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 5, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApDestRegionIndex.setStatus('current')
if mibBuilder.loadTexts: hwApDestRegionIndex.setDescription('The destination region index in a merge operation.')
hwApObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6))
hwApTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1), )
if mibBuilder.loadTexts: hwApTable.setStatus('current')
if mibBuilder.loadTexts: hwApTable.setDescription("Huawei AP table. The index of this table is AP ID. The AP table des- cribes detailed information of all APs,including the AP's type, the run state of the AP, the software of the AP, the hardware version No., etc. When add an AP, AP type must be filled in. If current Ap authentication mode is MAC or SN, the MAC or SN of AP must be filled in. If current Ap authentication mode is noauth, one of the MAC or SN of AP must be filled in.")
hwApEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"))
if mibBuilder.loadTexts: hwApEntry.setStatus('current')
if mibBuilder.loadTexts: hwApEntry.setDescription("Huawei AP table entry. The index of this table is AP ID. The AP table describes detailed information of all APs,including the AP's type, the run state of the AP, the software of the AP, the hardware version No.,etc. When add an AP, AP type must be filled in. If current Ap authentication mode is MAC or SN, the MAC or SN of AP must be filled in. If current Ap authentication mode is noauth, one of the MAC or SN of AP must be filled in.")
hwApIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwApIndex.setStatus('current')
if mibBuilder.loadTexts: hwApIndex.setDescription('Ap index, is used to identify AP uniquely.')
hwApUsedType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApUsedType.setStatus('current')
if mibBuilder.loadTexts: hwApUsedType.setDescription('Ap type. For more details, please refer to hwApTypeTable.')
hwApUsedProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 3), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApUsedProfileName.setStatus('current')
if mibBuilder.loadTexts: hwApUsedProfileName.setDescription('Ap profile name. For more details, please refer to hwApProfileTable.')
hwApUsedRegionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApUsedRegionIndex.setStatus('current')
if mibBuilder.loadTexts: hwApUsedRegionIndex.setDescription('Ap region index. For more details, please refer to hwApRegionTable.')
hwApMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 5), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApMac.setStatus('current')
if mibBuilder.loadTexts: hwApMac.setDescription("Ap's mac address.")
hwApSn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 6), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApSn.setStatus('current')
if mibBuilder.loadTexts: hwApSn.setDescription("Ap's sn.")
hwApSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 7), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApSysName.setStatus('current')
if mibBuilder.loadTexts: hwApSysName.setDescription('Name of AP.')
hwApRunState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("idle", 1), ("autofind", 2), ("typeNotMatch", 3), ("fault", 4), ("config", 5), ("configFailed", 6), ("download", 7), ("normal", 8), ("committing", 9), ("commitFailed", 10), ("standby", 11), ("vermismatch", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApRunState.setStatus('current')
if mibBuilder.loadTexts: hwApRunState.setDescription('The run state of AP.')
hwApSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: hwApSoftwareVersion.setDescription('The software version of AP.')
hwApHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: hwApHardwareVersion.setDescription('The hardware version of AP.')
hwApCpuType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApCpuType.setStatus('current')
if mibBuilder.loadTexts: hwApCpuType.setDescription('Cpu type of AP.')
hwApCpufrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 12), Integer32()).setUnits('MHZ').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApCpufrequency.setStatus('current')
if mibBuilder.loadTexts: hwApCpufrequency.setDescription('Cpu frequency of AP. Unit: MHZ.')
hwApMemoryType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApMemoryType.setStatus('current')
if mibBuilder.loadTexts: hwApMemoryType.setDescription('Memory type of AP.')
hwApDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApDomain.setStatus('current')
if mibBuilder.loadTexts: hwApDomain.setDescription('The domain of AP.')
hwApIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApIpAddress.setStatus('current')
if mibBuilder.loadTexts: hwApIpAddress.setDescription('The ip address of AP.')
hwApIpNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApIpNetMask.setStatus('current')
if mibBuilder.loadTexts: hwApIpNetMask.setDescription('The ip net mask of AP.')
hwApGatewayIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApGatewayIp.setStatus('current')
if mibBuilder.loadTexts: hwApGatewayIp.setDescription("The gateway's ip address of AP.")
hwApMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 18), Integer32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApMemorySize.setStatus('current')
if mibBuilder.loadTexts: hwApMemorySize.setDescription('The memory size of AP. Unit: MB')
hwApFlashSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 19), Integer32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApFlashSize.setStatus('current')
if mibBuilder.loadTexts: hwApFlashSize.setDescription('The flash size of AP. Unit: MB')
hwApRunTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApRunTime.setStatus('current')
if mibBuilder.loadTexts: hwApRunTime.setDescription('The working time since AP is started.')
hwApUpEthPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("speed10", 1), ("speed100", 2), ("speed1000", 3), ("speed10000", 4)))).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApUpEthPortSpeed.setStatus('current')
if mibBuilder.loadTexts: hwApUpEthPortSpeed.setDescription('The up ethernet port speed of AP. Unit: Mbps speed10 - 10Mbps, speed100 - 100Mbps, speed1000 - 1000Mbps, speed10000 - 10000Mbps')
hwApUpEthPortSpeedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("forced", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApUpEthPortSpeedMode.setStatus('current')
if mibBuilder.loadTexts: hwApUpEthPortSpeedMode.setDescription('The up ethernet port speed mode of AP. ')
hwApUpEthPortDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half", 1), ("full", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApUpEthPortDuplex.setStatus('current')
if mibBuilder.loadTexts: hwApUpEthPortDuplex.setDescription("The duplex type of the AP's up ethernet port. half(1) - half duplex, full(2) - full duplex. ")
hwApUpEthPortDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("forced", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApUpEthPortDuplexMode.setStatus('current')
if mibBuilder.loadTexts: hwApUpEthPortDuplexMode.setDescription("The duplex mode of the AP's up ethernet port")
hwApAdminOper = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 6))).clone(namedValues=NamedValues(("reset", 1), ("confirm", 2), ("manufacturerConfig", 3), ("replaceAp", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApAdminOper.setStatus('current')
if mibBuilder.loadTexts: hwApAdminOper.setDescription('Ap administration operation. reset - reset the AP. confirm - when an AP which is not in the white list connects to ac, it will rest on join state. User can confirm it to make it to use. manufacturerConfig - reset AP to the manufacturing default config- uration')
hwApRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 26), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApRowstatus.setStatus('current')
if mibBuilder.loadTexts: hwApRowstatus.setDescription('Row status: mainly to support AP addition and deletion.')
hwApPerformanceStatCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fiveMinutes", 1), ("tenMinutes", 2), ("fifteenMinutes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApPerformanceStatCycle.setStatus('current')
if mibBuilder.loadTexts: hwApPerformanceStatCycle.setDescription("AP's performance Stat Cycle.")
hwApDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 28), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApDNS.setStatus('current')
if mibBuilder.loadTexts: hwApDNS.setDescription('AP DNS server address.')
hwApRunningMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("fat", 2), ("fit", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApRunningMode.setStatus('current')
if mibBuilder.loadTexts: hwApRunningMode.setDescription('Running mode of AP. auto - If AP connects an AC, it will run in fit mode, or it will run in fat mode. fat - Force AP to run in fat mode. fit - Force AP to run in fit mode.')
hwApForwardMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, -1))).clone(namedValues=NamedValues(("directForward", 1), ("tunnel", 2), ("unknown", -1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApForwardMode.setStatus('current')
if mibBuilder.loadTexts: hwApForwardMode.setDescription('Set AP based forward mode. directForward(1) - direct forward mode, station data is direct forward. tunnel(2) - CAPWAP tunnel forward mode, station data is forward through the CAPWAP tunnel to ensure the security. ')
hwApAntennaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("autoMode", 1), ("leftMode", 2), ("rightMode", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApAntennaMode.setStatus('current')
if mibBuilder.loadTexts: hwApAntennaMode.setDescription('Ap antenna mode, used to select antenna mode,default is auto mode.')
hwApCpuThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 32), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApCpuThreshold.setStatus('current')
if mibBuilder.loadTexts: hwApCpuThreshold.setDescription('Description.')
hwApMemThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 33), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApMemThreshold.setStatus('current')
if mibBuilder.loadTexts: hwApMemThreshold.setDescription('Description.')
hwApNEnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 34), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApNEnumber.setStatus('current')
if mibBuilder.loadTexts: hwApNEnumber.setDescription('Description.')
hwApOnlineTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApOnlineTime.setStatus('current')
if mibBuilder.loadTexts: hwApOnlineTime.setDescription('Description.')
hwApSysSoftwareDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 36), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApSysSoftwareDesc.setStatus('current')
if mibBuilder.loadTexts: hwApSysSoftwareDesc.setDescription('Description.')
hwApSysHardtwareDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 37), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApSysHardtwareDesc.setStatus('current')
if mibBuilder.loadTexts: hwApSysHardtwareDesc.setDescription('Description.')
hwApSysManufacture = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 38), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApSysManufacture.setStatus('current')
if mibBuilder.loadTexts: hwApSysManufacture.setDescription('Description.')
hwApSysSoftwareName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 39), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApSysSoftwareName.setStatus('current')
if mibBuilder.loadTexts: hwApSysSoftwareName.setDescription('Description.')
hwApSysSoftwareVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 40), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApSysSoftwareVendor.setStatus('current')
if mibBuilder.loadTexts: hwApSysSoftwareVendor.setDescription('Description.')
hwApManagementVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApManagementVlanID.setStatus('current')
if mibBuilder.loadTexts: hwApManagementVlanID.setDescription('Description.')
hwApUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 42), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApUsername.setStatus('current')
if mibBuilder.loadTexts: hwApUsername.setDescription('Description.')
hwApPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 43), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApPassword.setStatus('current')
if mibBuilder.loadTexts: hwApPassword.setDescription('Description.')
hwApAcIP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 44), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApAcIP1.setStatus('current')
if mibBuilder.loadTexts: hwApAcIP1.setDescription('Description.')
hwApAcIP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 45), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApAcIP2.setStatus('current')
if mibBuilder.loadTexts: hwApAcIP2.setDescription('Description.')
hwApAcIP3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 46), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApAcIP3.setStatus('current')
if mibBuilder.loadTexts: hwApAcIP3.setDescription('Description.')
hwApAcIP4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 47), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApAcIP4.setStatus('current')
if mibBuilder.loadTexts: hwApAcIP4.setDescription('Description.')
hwApIpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dchp", 1), ("pppoe", 2), ("static", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApIpMode.setStatus('current')
if mibBuilder.loadTexts: hwApIpMode.setDescription('Description.')
hwApLldpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApLldpEnable.setStatus('current')
if mibBuilder.loadTexts: hwApLldpEnable.setDescription('Description.')
hwApLldpManageAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApLldpManageAddr.setStatus('current')
if mibBuilder.loadTexts: hwApLldpManageAddr.setDescription('Description.')
hwApLldpPortDes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApLldpPortDes.setStatus('current')
if mibBuilder.loadTexts: hwApLldpPortDes.setDescription('Description.')
hwApLldpSysCab = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApLldpSysCab.setStatus('current')
if mibBuilder.loadTexts: hwApLldpSysCab.setDescription('Description.')
hwApLldpSysDes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApLldpSysDes.setStatus('current')
if mibBuilder.loadTexts: hwApLldpSysDes.setDescription('Description.')
hwApLldpSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApLldpSysName.setStatus('current')
if mibBuilder.loadTexts: hwApLldpSysName.setDescription('Description.')
hwApLldpDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApLldpDelay.setStatus('current')
if mibBuilder.loadTexts: hwApLldpDelay.setDescription('Description.')
hwApLldpHoldMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApLldpHoldMultiplier.setStatus('current')
if mibBuilder.loadTexts: hwApLldpHoldMultiplier.setDescription('Description.')
hwApLldpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 32768)).clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApLldpInterval.setStatus('current')
if mibBuilder.loadTexts: hwApLldpInterval.setDescription('Description.')
hwApLldpRestartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApLldpRestartDelay.setStatus('current')
if mibBuilder.loadTexts: hwApLldpRestartDelay.setDescription('Description.')
hwApLldpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("txrx", 1), ("rx", 2), ("tx", 3))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApLldpAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hwApLldpAdminStatus.setDescription('Description.')
hwApLldpReportInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 3600)).clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApLldpReportInterval.setStatus('current')
if mibBuilder.loadTexts: hwApLldpReportInterval.setDescription('Description.')
hwApBomCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 61), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApBomCode.setStatus('current')
if mibBuilder.loadTexts: hwApBomCode.setDescription('Description.')
hwApSaveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 62), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApSaveMode.setStatus('obsolete')
if mibBuilder.loadTexts: hwApSaveMode.setDescription('Description.')
hwApProtectAcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 63), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApProtectAcPriority.setStatus('current')
if mibBuilder.loadTexts: hwApProtectAcPriority.setDescription('Description.')
hwApProtectAcIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 64), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApProtectAcIP.setStatus('current')
if mibBuilder.loadTexts: hwApProtectAcIP.setDescription('Description.')
hwApOpticalHighRxPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApOpticalHighRxPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: hwApOpticalHighRxPowerThreshold.setDescription('range from 1000 to 65535')
hwApOpticalLowRxPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApOpticalLowRxPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: hwApOpticalLowRxPowerThreshold.setDescription('range from 1 to 250')
hwApOpticalHighTemperatureThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(70, 125))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApOpticalHighTemperatureThreshold.setStatus('current')
if mibBuilder.loadTexts: hwApOpticalHighTemperatureThreshold.setDescription('range from 70 to 125')
hwApOpticalLowTemperatureThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, -5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApOpticalLowTemperatureThreshold.setStatus('current')
if mibBuilder.loadTexts: hwApOpticalLowTemperatureThreshold.setDescription('range from -40 to -5')
hwApKeepService = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("allowaccess", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApKeepService.setStatus('current')
if mibBuilder.loadTexts: hwApKeepService.setDescription('Description.')
hwApPriorityAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApPriorityAccessMode.setStatus('current')
if mibBuilder.loadTexts: hwApPriorityAccessMode.setDescription('Description.')
hwApLineateportMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("root", 1), ("endpoint", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLineateportMode.setStatus('current')
if mibBuilder.loadTexts: hwApLineateportMode.setDescription('Description.')
hwApLineateportVlanTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 72), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLineateportVlanTagged.setStatus('current')
if mibBuilder.loadTexts: hwApLineateportVlanTagged.setDescription('Description.')
hwApLineateportVlanUntagged = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 73), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLineateportVlanUntagged.setStatus('current')
if mibBuilder.loadTexts: hwApLineateportVlanUntagged.setDescription('Description.')
hwApLineateportPvidVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLineateportPvidVlan.setStatus('current')
if mibBuilder.loadTexts: hwApLineateportPvidVlan.setDescription('Description.')
hwApLineateportUserIsolate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLineateportUserIsolate.setStatus('current')
if mibBuilder.loadTexts: hwApLineateportUserIsolate.setDescription('Description.')
hwApLineateportStpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLineateportStpEnable.setStatus('current')
if mibBuilder.loadTexts: hwApLineateportStpEnable.setDescription('Description.')
hwApHighTemperatureThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 110))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApHighTemperatureThreshold.setStatus('current')
if mibBuilder.loadTexts: hwApHighTemperatureThreshold.setDescription('Description.')
hwApLowTemperatureThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-70, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLowTemperatureThreshold.setStatus('current')
if mibBuilder.loadTexts: hwApLowTemperatureThreshold.setDescription('Description.')
hwApReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 79), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApReset.setStatus('current')
if mibBuilder.loadTexts: hwApReset.setDescription('Description.')
hwApStaticIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 80), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApStaticIpAddress.setStatus('current')
if mibBuilder.loadTexts: hwApStaticIpAddress.setDescription('Description.')
hwApStaticNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 81), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApStaticNetMask.setStatus('current')
if mibBuilder.loadTexts: hwApStaticNetMask.setDescription('Description.')
hwApStaticGatewayIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 82), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApStaticGatewayIp.setStatus('current')
if mibBuilder.loadTexts: hwApStaticGatewayIp.setDescription('Description.')
hwApAttackFloodInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 83), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApAttackFloodInterval.setStatus('current')
if mibBuilder.loadTexts: hwApAttackFloodInterval.setDescription('Description.')
hwApAttackFloodTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 84), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApAttackFloodTimes.setStatus('current')
if mibBuilder.loadTexts: hwApAttackFloodTimes.setDescription('Description.')
hwApDynamicBlacklistEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 85), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApDynamicBlacklistEnable.setStatus('current')
if mibBuilder.loadTexts: hwApDynamicBlacklistEnable.setDescription('Description.')
hwApDynamicBlacklistAgingInt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 86), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApDynamicBlacklistAgingInt.setStatus('current')
if mibBuilder.loadTexts: hwApDynamicBlacklistAgingInt.setDescription('Description.')
hwApAttackPskInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 87), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApAttackPskInterval.setStatus('current')
if mibBuilder.loadTexts: hwApAttackPskInterval.setDescription('Description.')
hwApAttackPskTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 88), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApAttackPskTimes.setStatus('current')
if mibBuilder.loadTexts: hwApAttackPskTimes.setDescription('Description.')
hwApAccessBalanceGap = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApAccessBalanceGap.setStatus('current')
if mibBuilder.loadTexts: hwApAccessBalanceGap.setDescription('Description.')
hwApIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 90), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApIpv6Address.setStatus('current')
if mibBuilder.loadTexts: hwApIpv6Address.setDescription('Description.')
hwApIpv6NetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 91), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApIpv6NetMask.setStatus('current')
if mibBuilder.loadTexts: hwApIpv6NetMask.setDescription('Description.')
hwApGatewayIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 92), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApGatewayIpv6.setStatus('current')
if mibBuilder.loadTexts: hwApGatewayIpv6.setDescription('Description.')
hwApIpv6DNS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 93), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApIpv6DNS.setStatus('current')
if mibBuilder.loadTexts: hwApIpv6DNS.setDescription('Description.')
hwApProtectAcIPv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 94), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApProtectAcIPv6Addr.setStatus('current')
if mibBuilder.loadTexts: hwApProtectAcIPv6Addr.setDescription('Description.')
hwApLineatePortCfgMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 95), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLineatePortCfgMtu.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortCfgMtu.setDescription('Description.')
hwApLineatePortMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 96), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLineatePortMacAddress.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortMacAddress.setDescription('Description.')
hwApAccessBalanceSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApAccessBalanceSwitch.setStatus('current')
if mibBuilder.loadTexts: hwApAccessBalanceSwitch.setDescription('Description.')
hwApNatIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 98), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApNatIpAddress.setStatus('current')
if mibBuilder.loadTexts: hwApNatIpAddress.setDescription('Description.')
hwApAttackFloodQuietTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 99), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 36000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApAttackFloodQuietTime.setStatus('current')
if mibBuilder.loadTexts: hwApAttackFloodQuietTime.setDescription('Flood attack quiet time. Range from 60s to 36000s')
hwApAttackPskQuietTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 36000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApAttackPskQuietTime.setStatus('current')
if mibBuilder.loadTexts: hwApAttackPskQuietTime.setDescription('Psk attack quiet time. Range from 60s to 36000s')
hwApAttackWeakivQuietTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 36000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApAttackWeakivQuietTime.setStatus('current')
if mibBuilder.loadTexts: hwApAttackWeakivQuietTime.setDescription('Weak-iv attack quiet time. Range from 60s to 36000s')
hwApAttackSpoofQuietTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 102), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 36000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApAttackSpoofQuietTime.setStatus('current')
if mibBuilder.loadTexts: hwApAttackSpoofQuietTime.setDescription('Spoof attack quiet time. Range from 60s to 36000s')
hwApBootCountTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 103), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApBootCountTotal.setStatus('current')
if mibBuilder.loadTexts: hwApBootCountTotal.setDescription('Description.')
hwApBootCountPowerOff = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 104), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApBootCountPowerOff.setStatus('current')
if mibBuilder.loadTexts: hwApBootCountPowerOff.setDescription('Description.')
hwApBootCountRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 1, 1, 105), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwApBootCountRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwApBootCountRowStatus.setDescription('Description.')
hwApLineatePortTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 2), )
if mibBuilder.loadTexts: hwApLineatePortTable.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortTable.setDescription('Huawei AP lineate port table. The Index of this table is AP ID and lineate port ID.')
hwApLineatePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 2, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), (0, "HUAWEI-WLAN-DEVICE-MIB", "hwApLineatePortIndex"))
if mibBuilder.loadTexts: hwApLineatePortEntry.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortEntry.setDescription('Huawei AP lineate port table entry. The Index of this table is AP ID and lineate port ID.')
hwApLineatePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hwApLineatePortIndex.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortIndex.setDescription('Lineate port index on an AP.')
hwApLineatePortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("fe", 1), ("ge", 2), ("gpon", 3), ("epon", 4), ("adsl2plus", 5), ("trunk", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLineatePortType.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortType.setDescription('Lineate port type.')
hwApLineatePortDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 2, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLineatePortDesc.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortDesc.setDescription('Lineate port description.')
hwApLineatePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, -1))).clone(namedValues=NamedValues(("down", 1), ("up", 2), ("unknown", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLineatePortState.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortState.setDescription('Lineate port state.')
hwApLineatePortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 2, 1, 5), Integer32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLineatePortSpeed.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortSpeed.setDescription('Lineate port rate. Unit: Mbps')
hwApMultiLineatePortDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, -1))).clone(namedValues=NamedValues(("half", 1), ("full", 2), ("unknown", -1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApMultiLineatePortDuplex.setStatus('current')
if mibBuilder.loadTexts: hwApMultiLineatePortDuplex.setDescription('Description.')
hwApMultiLineatePortNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, -1))).clone(namedValues=NamedValues(("auto", 1), ("forced", 2), ("unknown", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApMultiLineatePortNegotiation.setStatus('current')
if mibBuilder.loadTexts: hwApMultiLineatePortNegotiation.setDescription('Description.')
hwApMultiLineatePortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("root", 1), ("endpoint", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApMultiLineatePortMode.setStatus('current')
if mibBuilder.loadTexts: hwApMultiLineatePortMode.setDescription('Description.')
hwApMultiLineatePortUserIsolate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApMultiLineatePortUserIsolate.setStatus('current')
if mibBuilder.loadTexts: hwApMultiLineatePortUserIsolate.setDescription('Description.')
hwApMultiLineatePortStpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApMultiLineatePortStpEnable.setStatus('current')
if mibBuilder.loadTexts: hwApMultiLineatePortStpEnable.setDescription('Description.')
hwApMultiLineatePortVlanTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApMultiLineatePortVlanTagged.setStatus('current')
if mibBuilder.loadTexts: hwApMultiLineatePortVlanTagged.setDescription('Description.')
hwApMultiLineatePortVlanUntagged = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApMultiLineatePortVlanUntagged.setStatus('current')
if mibBuilder.loadTexts: hwApMultiLineatePortVlanUntagged.setDescription('Description.')
hwApMultiLineatePortPvidVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApMultiLineatePortPvidVlan.setStatus('current')
if mibBuilder.loadTexts: hwApMultiLineatePortPvidVlan.setDescription('Description.')
hwApMultiLineatePortCRCErrorHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApMultiLineatePortCRCErrorHighThreshold.setStatus('current')
if mibBuilder.loadTexts: hwApMultiLineatePortCRCErrorHighThreshold.setDescription('Description.')
hwApMultiLineatePortCRCErrorLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApMultiLineatePortCRCErrorLowThreshold.setStatus('current')
if mibBuilder.loadTexts: hwApMultiLineatePortCRCErrorLowThreshold.setDescription('Description.')
hwApMultiLineatePortCRCErrorSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, -1))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("unknown", -1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApMultiLineatePortCRCErrorSwitch.setStatus('current')
if mibBuilder.loadTexts: hwApMultiLineatePortCRCErrorSwitch.setDescription('Description.')
hwApLineatePortAclNumInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 2, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLineatePortAclNumInbound.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortAclNumInbound.setDescription('Description.')
hwApLineatePortAclNumOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLineatePortAclNumOutbound.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortAclNumOutbound.setDescription('Description.')
hwApLineatePortAclNameInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 2, 1, 19), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLineatePortAclNameInbound.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortAclNameInbound.setDescription('Description.')
hwApLineatePortAclNameOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 2, 1, 20), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLineatePortAclNameOutbound.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortAclNameOutbound.setDescription('Description.')
hwApLineatePortAclSwitchInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLineatePortAclSwitchInbound.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortAclSwitchInbound.setDescription('Description.')
hwApLineatePortAclSwitchOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLineatePortAclSwitchOutbound.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortAclSwitchOutbound.setDescription('Description.')
hwApLineatePortAclNumInboundIPV6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 2, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLineatePortAclNumInboundIPV6.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortAclNumInboundIPV6.setDescription('Description.')
hwApLineatePortAclNumOutboundIPV6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 2, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLineatePortAclNumOutboundIPV6.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortAclNumOutboundIPV6.setDescription('Description.')
hwApLineatePortAclNameInboundIPV6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 2, 1, 25), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLineatePortAclNameInboundIPV6.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortAclNameInboundIPV6.setDescription('Description.')
hwApLineatePortAclNameOutboundIPV6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 2, 1, 26), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLineatePortAclNameOutboundIPV6.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortAclNameOutboundIPV6.setDescription('Description.')
hwApLineatePortAclSwitchInboundIPV6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLineatePortAclSwitchInboundIPV6.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortAclSwitchInboundIPV6.setDescription('Description.')
hwApLineatePortAclSwitchOutboundIPV6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLineatePortAclSwitchOutboundIPV6.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortAclSwitchOutboundIPV6.setDescription('Description.')
hwApMultiLineatePortIsAddInTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, -1))).clone(namedValues=NamedValues(("exit", 1), ("add", 2), ("unknow", -1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApMultiLineatePortIsAddInTrunk.setStatus('current')
if mibBuilder.loadTexts: hwApMultiLineatePortIsAddInTrunk.setDescription('Lineate port is add in trunk. when the value is 1,means not in trunk. when the value is 2,means add in trunk.')
hwApMultiLineatePortAddedOrExitTrunkID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApMultiLineatePortAddedOrExitTrunkID.setStatus('current')
if mibBuilder.loadTexts: hwApMultiLineatePortAddedOrExitTrunkID.setDescription('Description.')
hwApGlobalInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 3))
hwApAllExistApIndexMask = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 3, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApAllExistApIndexMask.setStatus('current')
if mibBuilder.loadTexts: hwApAllExistApIndexMask.setDescription("All the existent APs' index mask. Every bit is used to describe the AP is existent or not.0 means AP is not existent, and 1 means AP is existent.The value of this node is hexadecimal integer block.Each Byte describes 8 APs are existent or not. For example, the first Byte describes AP 0~7 is existent or not, and the second Byte describes AP 8~15 is existent or not. Such as, if only AP 0,4,5,6,7,9 is existent, the binary number is 11110001 and 00000010,the hexadecimal number is 0xF1 and 0x2, so the first Byte of this node is 0xF1,and the second Byte is 0x2.")
hwUnAuthorizedApRecordNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUnAuthorizedApRecordNumber.setStatus('current')
if mibBuilder.loadTexts: hwUnAuthorizedApRecordNumber.setDescription('The number of unauthorized AP records.')
hwUnAuthorizedApRecordAdmin = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUnAuthorizedApRecordAdmin.setStatus('current')
if mibBuilder.loadTexts: hwUnAuthorizedApRecordAdmin.setDescription('Unauthorized AP records administration operation. clear: Clear all the records. ')
hwApResetAllOnlineFailRecord = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, -1))).clone(namedValues=NamedValues(("reset", 1), ("unknown", -1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApResetAllOnlineFailRecord.setStatus('current')
if mibBuilder.loadTexts: hwApResetAllOnlineFailRecord.setDescription('Reset all ap online-fail records.')
hwApResetAllOfflineRecord = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApResetAllOfflineRecord.setStatus('current')
if mibBuilder.loadTexts: hwApResetAllOfflineRecord.setDescription('Reset all ap offline records.')
hwApResetAllBootCountRecord = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApResetAllBootCountRecord.setStatus('current')
if mibBuilder.loadTexts: hwApResetAllBootCountRecord.setDescription('Reset all ap boot count records.')
hwApBatchInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 4))
hwApBatchIndexStart = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApBatchIndexStart.setStatus('current')
if mibBuilder.loadTexts: hwApBatchIndexStart.setDescription('The initiatory AP number in batch operation. This node must be set in company with the node hwApBatchIndexNumber. ')
hwApBatchIndexNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApBatchIndexNumber.setStatus('current')
if mibBuilder.loadTexts: hwApBatchIndexNumber.setDescription('The AP number in batch operation. This node must be set in company with the node hwApBatchIndexStart. ')
hwApBatchIndexReturnNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApBatchIndexReturnNumber.setStatus('current')
if mibBuilder.loadTexts: hwApBatchIndexReturnNumber.setDescription('The actual AP number in batch operation. ')
hwApBatchState = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 4, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApBatchState.setStatus('current')
if mibBuilder.loadTexts: hwApBatchState.setDescription("The state of APs in batch operation. The value of this node is hexadecimal integer block.Each AP's state occupies a Bytes. For example, if the first operated AP's state is 15,and the sencond operated AP's state is 14, so the first Byte of this node is 0xF, and the second Byte is 0xE.")
hwApBatchNameList = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 4, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApBatchNameList.setStatus('current')
if mibBuilder.loadTexts: hwApBatchNameList.setDescription("The actual AP names in batch operation. Each AP name is divided by '?'. ")
hwApPing = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 5))
hwApPingIndex = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApPingIndex.setStatus('current')
if mibBuilder.loadTexts: hwApPingIndex.setDescription("AP's index in AP ping operation.")
hwApPingAddress = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 5, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApPingAddress.setStatus('current')
if mibBuilder.loadTexts: hwApPingAddress.setDescription('The destination host ip address or domain name.')
hwApPingCount = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApPingCount.setStatus('current')
if mibBuilder.loadTexts: hwApPingCount.setDescription('Number of ping echo requests to send.')
hwApPingPacketSize = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 5, 4), Integer32()).setUnits('Bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApPingPacketSize.setStatus('current')
if mibBuilder.loadTexts: hwApPingPacketSize.setDescription('Send packet size. Unit: Bytes')
hwApPingWaitTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 5, 5), Integer32()).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApPingWaitTime.setStatus('current')
if mibBuilder.loadTexts: hwApPingWaitTime.setDescription('The waiting time between two packets. Unit: ms')
hwApPingTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 5, 6), Integer32()).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApPingTimeOut.setStatus('current')
if mibBuilder.loadTexts: hwApPingTimeOut.setDescription('Timeout in milliseconds to wait for each reply. Unit: ms')
hwApPingResultSuccessCount = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApPingResultSuccessCount.setStatus('current')
if mibBuilder.loadTexts: hwApPingResultSuccessCount.setDescription('Success count in the recent ping operation.')
hwApPingResultFailureCount = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApPingResultFailureCount.setStatus('current')
if mibBuilder.loadTexts: hwApPingResultFailureCount.setDescription('Failure count in the recent ping operation.')
hwApPingResultAverageResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 5, 9), Integer32()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApPingResultAverageResponseTime.setStatus('current')
if mibBuilder.loadTexts: hwApPingResultAverageResponseTime.setDescription('Average response time in the recent ping operation.')
hwApPingResultMinimumResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 5, 10), Integer32()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApPingResultMinimumResponseTime.setStatus('current')
if mibBuilder.loadTexts: hwApPingResultMinimumResponseTime.setDescription('Minimum response time in the recent ping operation.')
hwApPingResultMaximumResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 5, 11), Integer32()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApPingResultMaximumResponseTime.setStatus('current')
if mibBuilder.loadTexts: hwApPingResultMaximumResponseTime.setDescription('Maximum response time in the recent ping operation.')
hwApPingApMac = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 5, 12), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApPingApMac.setStatus('current')
if mibBuilder.loadTexts: hwApPingApMac.setDescription('Description.')
hwApPingResultFlag = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 5, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApPingResultFlag.setStatus('current')
if mibBuilder.loadTexts: hwApPingResultFlag.setDescription('Description.')
hwApPerformanceStatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6), )
if mibBuilder.loadTexts: hwApPerformanceStatTable.setStatus('current')
if mibBuilder.loadTexts: hwApPerformanceStatTable.setDescription('Huawei AP performance statistic table. The index of this table is hwApIndex in table hwApTable.')
hwApPerformanceStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"))
if mibBuilder.loadTexts: hwApPerformanceStatEntry.setStatus('current')
if mibBuilder.loadTexts: hwApPerformanceStatEntry.setDescription('Huawei AP performance statistic table entry.The index of this table is hwApIndex in table hwApTable.')
hwApMemoryUseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 1), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApMemoryUseRate.setStatus('current')
if mibBuilder.loadTexts: hwApMemoryUseRate.setDescription("The use rate of AP's memory. Unit: %")
hwApCpuUseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 2), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApCpuUseRate.setStatus('current')
if mibBuilder.loadTexts: hwApCpuUseRate.setDescription("The use rate of AP's cpu. Unit: %")
hwApFlashFreeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 3), Integer32()).setUnits('kb').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApFlashFreeSize.setStatus('current')
if mibBuilder.loadTexts: hwApFlashFreeSize.setDescription("The free size of AP's flash. Unit: kb")
hwApTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 4), Integer32()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApTemperature.setStatus('current')
if mibBuilder.loadTexts: hwApTemperature.setDescription('The temperature of AP. Unit: C')
hwApOnlineUserNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApOnlineUserNum.setStatus('current')
if mibBuilder.loadTexts: hwApOnlineUserNum.setDescription('The online user number of AP.')
hwApUpPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 6), Integer32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApUpPortSpeed.setStatus('current')
if mibBuilder.loadTexts: hwApUpPortSpeed.setDescription("AP up port's speed. Unit: Mbps.")
hwApUpPortRecvFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApUpPortRecvFrames.setStatus('current')
if mibBuilder.loadTexts: hwApUpPortRecvFrames.setDescription('AP up port received frames.')
hwApUpPortRecvRightFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApUpPortRecvRightFrames.setStatus('current')
if mibBuilder.loadTexts: hwApUpPortRecvRightFrames.setDescription('AP up port received correct frames.')
hwApUpPortRecvErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApUpPortRecvErrorFrames.setStatus('current')
if mibBuilder.loadTexts: hwApUpPortRecvErrorFrames.setDescription('AP up port received wrong frames.')
hwApUpPortSendFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApUpPortSendFrames.setStatus('current')
if mibBuilder.loadTexts: hwApUpPortSendFrames.setDescription('AP up port side sent frames.')
hwApUpPortRecvBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApUpPortRecvBytes.setStatus('current')
if mibBuilder.loadTexts: hwApUpPortRecvBytes.setDescription('AP up port received Bytes.')
hwApUpPortSendBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApUpPortSendBytes.setStatus('current')
if mibBuilder.loadTexts: hwApUpPortSendBytes.setDescription('AP up port sent Bytes.')
hwAPUpPortPER = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 13), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAPUpPortPER.setStatus('current')
if mibBuilder.loadTexts: hwAPUpPortPER.setDescription("The PER of AP's Up-Port.Unit: % ")
hwAPWirelessUpPortTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAPWirelessUpPortTraffic.setStatus('current')
if mibBuilder.loadTexts: hwAPWirelessUpPortTraffic.setDescription("The traffic of AP's Wireless-Up-Port.")
hwAPUpPortTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAPUpPortTraffic.setStatus('current')
if mibBuilder.loadTexts: hwAPUpPortTraffic.setDescription("The traffic of AP's Up-Port.")
hwApAirportSendDropFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApAirportSendDropFrames.setStatus('current')
if mibBuilder.loadTexts: hwApAirportSendDropFrames.setDescription('Description.')
hwApEthportRecvDropFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApEthportRecvDropFrames.setStatus('current')
if mibBuilder.loadTexts: hwApEthportRecvDropFrames.setDescription('Description.')
hwApAirportUpTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApAirportUpTraffic.setStatus('current')
if mibBuilder.loadTexts: hwApAirportUpTraffic.setDescription('Description.')
hwApAirportDwTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApAirportDwTraffic.setStatus('current')
if mibBuilder.loadTexts: hwApAirportDwTraffic.setDescription('Description.')
hwApEthportDwTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApEthportDwTraffic.setStatus('current')
if mibBuilder.loadTexts: hwApEthportDwTraffic.setDescription('Description.')
hwApEthportUpTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApEthportUpTraffic.setStatus('current')
if mibBuilder.loadTexts: hwApEthportUpTraffic.setDescription('Description.')
hwApAirportRecvDropPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApAirportRecvDropPacket.setStatus('current')
if mibBuilder.loadTexts: hwApAirportRecvDropPacket.setDescription('Description.')
hwApAirportRecvErrorPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApAirportRecvErrorPacket.setStatus('current')
if mibBuilder.loadTexts: hwApAirportRecvErrorPacket.setDescription('Description.')
hwApEthportRecvUnicastPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApEthportRecvUnicastPacket.setStatus('current')
if mibBuilder.loadTexts: hwApEthportRecvUnicastPacket.setDescription('Description.')
hwApEthportRecvNonUnicastPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApEthportRecvNonUnicastPacket.setStatus('current')
if mibBuilder.loadTexts: hwApEthportRecvNonUnicastPacket.setDescription('Description.')
hwApEthportSendUnicastPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApEthportSendUnicastPacket.setStatus('current')
if mibBuilder.loadTexts: hwApEthportSendUnicastPacket.setDescription('Description.')
hwApEthportSendNonUnicastPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApEthportSendNonUnicastPacket.setStatus('current')
if mibBuilder.loadTexts: hwApEthportSendNonUnicastPacket.setDescription('Description.')
hwApAvgRCPUUseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApAvgRCPUUseRate.setStatus('current')
if mibBuilder.loadTexts: hwApAvgRCPUUseRate.setDescription('Description.')
hwApAvgRMemoryUseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApAvgRMemoryUseRate.setStatus('current')
if mibBuilder.loadTexts: hwApAvgRMemoryUseRate.setDescription('Description.')
hwEthportSendDropFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEthportSendDropFrames.setStatus('current')
if mibBuilder.loadTexts: hwEthportSendDropFrames.setDescription('Description.')
hwEthportSendErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEthportSendErrorFrames.setStatus('current')
if mibBuilder.loadTexts: hwEthportSendErrorFrames.setDescription('Description.')
hwEthportUpDwnTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEthportUpDwnTimes.setStatus('current')
if mibBuilder.loadTexts: hwEthportUpDwnTimes.setDescription('Description.')
hwApAirportRecvUnicastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApAirportRecvUnicastFrames.setStatus('current')
if mibBuilder.loadTexts: hwApAirportRecvUnicastFrames.setDescription('Description.')
hwApEthportRecvUnknownFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApEthportRecvUnknownFrames.setStatus('current')
if mibBuilder.loadTexts: hwApEthportRecvUnknownFrames.setDescription('Description.')
hwApEthportUpRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApEthportUpRate.setStatus('current')
if mibBuilder.loadTexts: hwApEthportUpRate.setDescription('Description.')
hwApEthportDownRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApEthportDownRate.setStatus('current')
if mibBuilder.loadTexts: hwApEthportDownRate.setDescription('Description.')
hwApUpPortRecvFrames64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApUpPortRecvFrames64Bits.setStatus('current')
if mibBuilder.loadTexts: hwApUpPortRecvFrames64Bits.setDescription('Description.')
hwApUpPortRecvRightFrames64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApUpPortRecvRightFrames64Bits.setStatus('current')
if mibBuilder.loadTexts: hwApUpPortRecvRightFrames64Bits.setDescription('Description.')
hwApUpPortRecvErrorFrames64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApUpPortRecvErrorFrames64Bits.setStatus('current')
if mibBuilder.loadTexts: hwApUpPortRecvErrorFrames64Bits.setDescription('Description.')
hwApUpPortSendFrames64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApUpPortSendFrames64Bits.setStatus('current')
if mibBuilder.loadTexts: hwApUpPortSendFrames64Bits.setDescription('Description.')
hwApUpPortRecvBytes64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApUpPortRecvBytes64Bits.setStatus('current')
if mibBuilder.loadTexts: hwApUpPortRecvBytes64Bits.setDescription('Description.')
hwApUpPortSendBytes64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApUpPortSendBytes64Bits.setStatus('current')
if mibBuilder.loadTexts: hwApUpPortSendBytes64Bits.setDescription('Description.')
hwAPWirelessUpPortTraffic64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAPWirelessUpPortTraffic64Bits.setStatus('current')
if mibBuilder.loadTexts: hwAPWirelessUpPortTraffic64Bits.setDescription('Description.')
hwAPUpPortTraffic64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAPUpPortTraffic64Bits.setStatus('current')
if mibBuilder.loadTexts: hwAPUpPortTraffic64Bits.setDescription('Description.')
hwApAirportSendDropFrames64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApAirportSendDropFrames64Bits.setStatus('current')
if mibBuilder.loadTexts: hwApAirportSendDropFrames64Bits.setDescription('Description.')
hwApEthportRecvDropFrames64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApEthportRecvDropFrames64Bits.setStatus('current')
if mibBuilder.loadTexts: hwApEthportRecvDropFrames64Bits.setDescription('Description.')
hwApAirportRecvDropPacket64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApAirportRecvDropPacket64Bits.setStatus('current')
if mibBuilder.loadTexts: hwApAirportRecvDropPacket64Bits.setDescription('Description.')
hwApAirportRecvErrorPacket64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApAirportRecvErrorPacket64Bits.setStatus('current')
if mibBuilder.loadTexts: hwApAirportRecvErrorPacket64Bits.setDescription('Description.')
hwApEthportRecvUnicastPacket64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApEthportRecvUnicastPacket64Bits.setStatus('current')
if mibBuilder.loadTexts: hwApEthportRecvUnicastPacket64Bits.setDescription('Description.')
hwApEthportRecvNonUnicastPacket64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApEthportRecvNonUnicastPacket64Bits.setStatus('current')
if mibBuilder.loadTexts: hwApEthportRecvNonUnicastPacket64Bits.setDescription('Description.')
hwApEthportSendUnicastPacket64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApEthportSendUnicastPacket64Bits.setStatus('current')
if mibBuilder.loadTexts: hwApEthportSendUnicastPacket64Bits.setDescription('Description.')
hwApEthportSendNonUnicastPacket64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 6, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApEthportSendNonUnicastPacket64Bits.setStatus('current')
if mibBuilder.loadTexts: hwApEthportSendNonUnicastPacket64Bits.setDescription('Description.')
hwApUnauthorizedApRecordTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 7), )
if mibBuilder.loadTexts: hwApUnauthorizedApRecordTable.setStatus('current')
if mibBuilder.loadTexts: hwApUnauthorizedApRecordTable.setDescription("Huawei unauthorized AP record table. The index of this table is unauthorized AP record ID. Unauthorized AP mean that AP's MAC address or SN is not in white list,and user doesn't confirm it in time.")
hwApUnauthorizedApRecordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 7, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApUnauthorizedApRecordIndex"))
if mibBuilder.loadTexts: hwApUnauthorizedApRecordEntry.setStatus('current')
if mibBuilder.loadTexts: hwApUnauthorizedApRecordEntry.setDescription("Huawei unauthorized AP record table entry. The index of this table is unauthorized AP record ID. Unauthorized AP mean that AP's MAC address or SN is not in white list,and user doesn't confirm it in time.")
hwApUnauthorizedApRecordIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: hwApUnauthorizedApRecordIndex.setStatus('current')
if mibBuilder.loadTexts: hwApUnauthorizedApRecordIndex.setDescription('Unauthorized AP record Index.')
hwApUnauthorizedApType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 7, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApUnauthorizedApType.setStatus('current')
if mibBuilder.loadTexts: hwApUnauthorizedApType.setDescription("Unauthorized AP's type.")
hwApUnauthorizedApMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 7, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApUnauthorizedApMacAddress.setStatus('current')
if mibBuilder.loadTexts: hwApUnauthorizedApMacAddress.setDescription("Unauthorized AP's MAC address.")
hwApUnauthorizedApSn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 7, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApUnauthorizedApSn.setStatus('current')
if mibBuilder.loadTexts: hwApUnauthorizedApSn.setDescription("Unauthorized AP's SN.")
hwApUnauthorizedApIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 7, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApUnauthorizedApIpAddress.setStatus('current')
if mibBuilder.loadTexts: hwApUnauthorizedApIpAddress.setDescription("Unauthorized AP's ip address.")
hwApUnauthorizedApRecordTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 7, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApUnauthorizedApRecordTime.setStatus('current')
if mibBuilder.loadTexts: hwApUnauthorizedApRecordTime.setDescription("Record's time.")
hwApParaStatisticTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 8), )
if mibBuilder.loadTexts: hwApParaStatisticTable.setStatus('current')
if mibBuilder.loadTexts: hwApParaStatisticTable.setDescription('Description.')
hwApParaStatisticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 8, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApMac"))
if mibBuilder.loadTexts: hwApParaStatisticEntry.setStatus('current')
if mibBuilder.loadTexts: hwApParaStatisticEntry.setDescription('Description.')
hwApStaAveSignalStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApStaAveSignalStrength.setStatus('current')
if mibBuilder.loadTexts: hwApStaAveSignalStrength.setDescription('Description.')
hwMacApTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9), )
if mibBuilder.loadTexts: hwMacApTable.setStatus('current')
if mibBuilder.loadTexts: hwMacApTable.setDescription('Description.')
hwMacApEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwMacApMac"))
if mibBuilder.loadTexts: hwMacApEntry.setStatus('current')
if mibBuilder.loadTexts: hwMacApEntry.setDescription('Description.')
hwMacApMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 1), MacAddress())
if mibBuilder.loadTexts: hwMacApMac.setStatus('current')
if mibBuilder.loadTexts: hwMacApMac.setDescription('Description.')
hwMacApIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApIndex.setStatus('current')
if mibBuilder.loadTexts: hwMacApIndex.setDescription('Description.')
hwMacApUsedType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 3), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacApUsedType.setStatus('current')
if mibBuilder.loadTexts: hwMacApUsedType.setDescription('Description.')
hwMacApUsedProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacApUsedProfileName.setStatus('current')
if mibBuilder.loadTexts: hwMacApUsedProfileName.setDescription('Description.')
hwMacApUsedRegionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacApUsedRegionIndex.setStatus('current')
if mibBuilder.loadTexts: hwMacApUsedRegionIndex.setDescription('Description.')
hwMacApSn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 6), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacApSn.setStatus('current')
if mibBuilder.loadTexts: hwMacApSn.setDescription('Description.')
hwMacApSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 7), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacApSysName.setStatus('current')
if mibBuilder.loadTexts: hwMacApSysName.setDescription('Description.')
hwMacApRunState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("idle", 1), ("autofind", 2), ("typeNotMatch", 3), ("fault", 4), ("config", 5), ("configFailed", 6), ("download", 7), ("normal", 8), ("committing", 9), ("commitFailed", 10), ("standby", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApRunState.setStatus('current')
if mibBuilder.loadTexts: hwMacApRunState.setDescription('Description.')
hwMacApSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: hwMacApSoftwareVersion.setDescription('Description.')
hwMacApHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: hwMacApHardwareVersion.setDescription('Description.')
hwMacApCpuType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApCpuType.setStatus('current')
if mibBuilder.loadTexts: hwMacApCpuType.setDescription('Description.')
hwMacApCpufrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApCpufrequency.setStatus('current')
if mibBuilder.loadTexts: hwMacApCpufrequency.setDescription('Description.')
hwMacApMemoryType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApMemoryType.setStatus('current')
if mibBuilder.loadTexts: hwMacApMemoryType.setDescription('Description.')
hwMacApDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApDomain.setStatus('current')
if mibBuilder.loadTexts: hwMacApDomain.setDescription('Description.')
hwMacApIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApIpAddress.setStatus('current')
if mibBuilder.loadTexts: hwMacApIpAddress.setDescription('Description.')
hwMacApIpNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApIpNetMask.setStatus('current')
if mibBuilder.loadTexts: hwMacApIpNetMask.setDescription('Description.')
hwMacApGatewayIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApGatewayIp.setStatus('current')
if mibBuilder.loadTexts: hwMacApGatewayIp.setDescription('Description.')
hwMacApMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApMemorySize.setStatus('current')
if mibBuilder.loadTexts: hwMacApMemorySize.setDescription('Description.')
hwMacApFlashSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApFlashSize.setStatus('current')
if mibBuilder.loadTexts: hwMacApFlashSize.setDescription('Description.')
hwMacApRunTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApRunTime.setStatus('current')
if mibBuilder.loadTexts: hwMacApRunTime.setDescription('Description.')
hwMacApUpEthPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("speed10", 1), ("speed100", 2), ("speed1000", 3), ("speed10000", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApUpEthPortSpeed.setStatus('current')
if mibBuilder.loadTexts: hwMacApUpEthPortSpeed.setDescription('Description.')
hwMacApUpEthPortSpeedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("forced", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApUpEthPortSpeedMode.setStatus('current')
if mibBuilder.loadTexts: hwMacApUpEthPortSpeedMode.setDescription('Description.')
hwMacApUpEthPortDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half", 1), ("full", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApUpEthPortDuplex.setStatus('current')
if mibBuilder.loadTexts: hwMacApUpEthPortDuplex.setDescription('Description.')
hwMacApUpEthPortDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("forced", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApUpEthPortDuplexMode.setStatus('current')
if mibBuilder.loadTexts: hwMacApUpEthPortDuplexMode.setDescription('Description.')
hwMacApAdminOper = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 6))).clone(namedValues=NamedValues(("reset", 1), ("confirm", 2), ("manufacturerConfig", 3), ("replaceAp", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacApAdminOper.setStatus('current')
if mibBuilder.loadTexts: hwMacApAdminOper.setDescription('Description.')
hwMacApRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 26), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacApRowstatus.setStatus('current')
if mibBuilder.loadTexts: hwMacApRowstatus.setDescription('Description.')
hwMacApPerformanceStatCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fiveMinutes", 1), ("tenMinutes", 2), ("fifteenMinutes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApPerformanceStatCycle.setStatus('current')
if mibBuilder.loadTexts: hwMacApPerformanceStatCycle.setDescription('Description.')
hwMacApDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 28), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApDNS.setStatus('current')
if mibBuilder.loadTexts: hwMacApDNS.setDescription('Description.')
hwMacApRunningMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("fat", 2), ("fit", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApRunningMode.setStatus('current')
if mibBuilder.loadTexts: hwMacApRunningMode.setDescription('Description.')
hwMacApForwardMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, -1))).clone(namedValues=NamedValues(("directForward", 1), ("tunnel", 2), ("unknown", -1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApForwardMode.setStatus('current')
if mibBuilder.loadTexts: hwMacApForwardMode.setDescription('Description.')
hwMacApAntennaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("autoMode", 1), ("leftMode", 2), ("rightMode", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApAntennaMode.setStatus('current')
if mibBuilder.loadTexts: hwMacApAntennaMode.setDescription('Description.')
hwMacApCpuThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 32), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacApCpuThreshold.setStatus('current')
if mibBuilder.loadTexts: hwMacApCpuThreshold.setDescription('Description.')
hwMacApMemThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 33), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacApMemThreshold.setStatus('current')
if mibBuilder.loadTexts: hwMacApMemThreshold.setDescription('Description.')
hwMacApNEnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 34), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApNEnumber.setStatus('current')
if mibBuilder.loadTexts: hwMacApNEnumber.setDescription('Description.')
hwMacApOnlineTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApOnlineTime.setStatus('current')
if mibBuilder.loadTexts: hwMacApOnlineTime.setDescription('Description.')
hwMacApSysSoftwareDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 36), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApSysSoftwareDesc.setStatus('current')
if mibBuilder.loadTexts: hwMacApSysSoftwareDesc.setDescription('Description.')
hwMacApSysHardtwareDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 37), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApSysHardtwareDesc.setStatus('current')
if mibBuilder.loadTexts: hwMacApSysHardtwareDesc.setDescription('Description.')
hwMacApSysManufacture = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 38), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApSysManufacture.setStatus('current')
if mibBuilder.loadTexts: hwMacApSysManufacture.setDescription('Description.')
hwMacApSysSoftwareName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 39), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApSysSoftwareName.setStatus('current')
if mibBuilder.loadTexts: hwMacApSysSoftwareName.setDescription('Description.')
hwMacApSysSoftwareVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 40), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApSysSoftwareVendor.setStatus('current')
if mibBuilder.loadTexts: hwMacApSysSoftwareVendor.setDescription('Description.')
hwMacApManagementVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApManagementVlanID.setStatus('current')
if mibBuilder.loadTexts: hwMacApManagementVlanID.setDescription('Description.')
hwMacApUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 42), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApUsername.setStatus('current')
if mibBuilder.loadTexts: hwMacApUsername.setDescription('Description.')
hwMacApPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 43), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApPassword.setStatus('current')
if mibBuilder.loadTexts: hwMacApPassword.setDescription('Description.')
hwMacApAcIP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 44), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApAcIP1.setStatus('current')
if mibBuilder.loadTexts: hwMacApAcIP1.setDescription('Description.')
hwMacApAcIP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 45), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApAcIP2.setStatus('current')
if mibBuilder.loadTexts: hwMacApAcIP2.setDescription('Description.')
hwMacApAcIP3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 46), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApAcIP3.setStatus('current')
if mibBuilder.loadTexts: hwMacApAcIP3.setDescription('Description.')
hwMacApAcIP4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 47), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApAcIP4.setStatus('current')
if mibBuilder.loadTexts: hwMacApAcIP4.setDescription('Description.')
hwMacApIpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dhcp", 1), ("pppoe", 2), ("static", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApIpMode.setStatus('current')
if mibBuilder.loadTexts: hwMacApIpMode.setDescription('Description.')
hwMacApLldpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacApLldpEnable.setStatus('current')
if mibBuilder.loadTexts: hwMacApLldpEnable.setDescription('Description.')
hwMacApLldpManageAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacApLldpManageAddr.setStatus('current')
if mibBuilder.loadTexts: hwMacApLldpManageAddr.setDescription('Description.')
hwMacApLldpPortDes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacApLldpPortDes.setStatus('current')
if mibBuilder.loadTexts: hwMacApLldpPortDes.setDescription('Description.')
hwMacApLldpSysCab = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacApLldpSysCab.setStatus('current')
if mibBuilder.loadTexts: hwMacApLldpSysCab.setDescription('Description.')
hwMacApLldpSysDes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacApLldpSysDes.setStatus('current')
if mibBuilder.loadTexts: hwMacApLldpSysDes.setDescription('Description.')
hwMacApLldpSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacApLldpSysName.setStatus('current')
if mibBuilder.loadTexts: hwMacApLldpSysName.setDescription('Description.')
hwMacApLldpDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacApLldpDelay.setStatus('current')
if mibBuilder.loadTexts: hwMacApLldpDelay.setDescription('Description.')
hwMacApLldpHoldMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacApLldpHoldMultiplier.setStatus('current')
if mibBuilder.loadTexts: hwMacApLldpHoldMultiplier.setDescription('Description.')
hwMacApLldpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 32768)).clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacApLldpInterval.setStatus('current')
if mibBuilder.loadTexts: hwMacApLldpInterval.setDescription('Description.')
hwMacApLldpRestartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacApLldpRestartDelay.setStatus('current')
if mibBuilder.loadTexts: hwMacApLldpRestartDelay.setDescription('Description.')
hwMacApLldpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("txrx", 1), ("rx", 2), ("tx", 3))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacApLldpAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hwMacApLldpAdminStatus.setDescription('Description.')
hwMacApLldpReportInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 3600)).clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacApLldpReportInterval.setStatus('current')
if mibBuilder.loadTexts: hwMacApLldpReportInterval.setDescription('Description.')
hwMacApBomCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 61), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApBomCode.setStatus('current')
if mibBuilder.loadTexts: hwMacApBomCode.setDescription('Description.')
hwMacApSaveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 62), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacApSaveMode.setStatus('obsolete')
if mibBuilder.loadTexts: hwMacApSaveMode.setDescription('Description.')
hwMacApProtectAcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 63), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacApProtectAcPriority.setStatus('current')
if mibBuilder.loadTexts: hwMacApProtectAcPriority.setDescription('Description.')
hwMacApProtectAcIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 64), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacApProtectAcIP.setStatus('current')
if mibBuilder.loadTexts: hwMacApProtectAcIP.setDescription('Description.')
hwMacApOpticalHighRxPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacApOpticalHighRxPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: hwMacApOpticalHighRxPowerThreshold.setDescription('range from 1000 to 65535')
hwMacApOpticalLowRxPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacApOpticalLowRxPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: hwMacApOpticalLowRxPowerThreshold.setDescription('range from 1 to 25')
hwMacApOpticalHighTemperatureThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(70, 125))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacApOpticalHighTemperatureThreshold.setStatus('current')
if mibBuilder.loadTexts: hwMacApOpticalHighTemperatureThreshold.setDescription('range from 70 to 125')
hwMacApOpticalLowTemperatureThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, -5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacApOpticalLowTemperatureThreshold.setStatus('current')
if mibBuilder.loadTexts: hwMacApOpticalLowTemperatureThreshold.setDescription('range from -40 to -5')
hwMacApKeepService = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacApKeepService.setStatus('current')
if mibBuilder.loadTexts: hwMacApKeepService.setDescription('Description.')
hwMacApPriorityAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApPriorityAccessMode.setStatus('current')
if mibBuilder.loadTexts: hwMacApPriorityAccessMode.setDescription('Description.')
hwMacApLineateportMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("root", 1), ("endpoint", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApLineateportMode.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineateportMode.setDescription('Description.')
hwMacApLineateportVlanTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 72), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApLineateportVlanTagged.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineateportVlanTagged.setDescription('Description.')
hwMacApLineateportVlanUntagged = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 73), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApLineateportVlanUntagged.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineateportVlanUntagged.setDescription('Description.')
hwMacApLineateportPvidVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApLineateportPvidVlan.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineateportPvidVlan.setDescription('Description.')
hwMacApLineateportUserIsolate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApLineateportUserIsolate.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineateportUserIsolate.setDescription('Description.')
hwMacApLineateportStpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApLineateportStpEnable.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineateportStpEnable.setDescription('Description.')
hwMacApHighTemperatureThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 70))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApHighTemperatureThreshold.setStatus('current')
if mibBuilder.loadTexts: hwMacApHighTemperatureThreshold.setDescription('Description.')
hwMacApLowTemperatureThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApLowTemperatureThreshold.setStatus('current')
if mibBuilder.loadTexts: hwMacApLowTemperatureThreshold.setDescription('Description.')
hwMacApReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 79), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApReset.setStatus('current')
if mibBuilder.loadTexts: hwMacApReset.setDescription('Description.')
hwMacApStaticIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 80), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacApStaticIpAddress.setStatus('current')
if mibBuilder.loadTexts: hwMacApStaticIpAddress.setDescription('Description.')
hwMacApStaticNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 81), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacApStaticNetMask.setStatus('current')
if mibBuilder.loadTexts: hwMacApStaticNetMask.setDescription('Description.')
hwMacApStaticGatewayIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 82), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacApStaticGatewayIp.setStatus('current')
if mibBuilder.loadTexts: hwMacApStaticGatewayIp.setDescription('Description.')
hwMacApAttackFloodInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 83), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacApAttackFloodInterval.setStatus('current')
if mibBuilder.loadTexts: hwMacApAttackFloodInterval.setDescription('Description.')
hwMACApAttackFloodTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 84), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMACApAttackFloodTimes.setStatus('current')
if mibBuilder.loadTexts: hwMACApAttackFloodTimes.setDescription('Description.')
hwMACApDynamicBlacklistEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 85), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMACApDynamicBlacklistEnable.setStatus('current')
if mibBuilder.loadTexts: hwMACApDynamicBlacklistEnable.setDescription('Description.')
hwMACApDynamicBlacklistAgingInt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 86), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMACApDynamicBlacklistAgingInt.setStatus('current')
if mibBuilder.loadTexts: hwMACApDynamicBlacklistAgingInt.setDescription('Description.')
hwMACApAttackPskInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 87), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMACApAttackPskInterval.setStatus('current')
if mibBuilder.loadTexts: hwMACApAttackPskInterval.setDescription('Description.')
hwMACApAttackPskTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 88), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMACApAttackPskTimes.setStatus('current')
if mibBuilder.loadTexts: hwMACApAttackPskTimes.setDescription('Description.')
hwMACApAccessBalanceGap = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMACApAccessBalanceGap.setStatus('current')
if mibBuilder.loadTexts: hwMACApAccessBalanceGap.setDescription('Description.')
hwMACApIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 90), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMACApIpv6Address.setStatus('current')
if mibBuilder.loadTexts: hwMACApIpv6Address.setDescription('Description.')
hwMACApIpv6NetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 91), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMACApIpv6NetMask.setStatus('current')
if mibBuilder.loadTexts: hwMACApIpv6NetMask.setDescription('Description.')
hwMACApGatewayIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 92), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMACApGatewayIpv6.setStatus('current')
if mibBuilder.loadTexts: hwMACApGatewayIpv6.setDescription('Description.')
hwMACApIpv6DNS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 93), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMACApIpv6DNS.setStatus('current')
if mibBuilder.loadTexts: hwMACApIpv6DNS.setDescription('Description.')
hwMACApProtectAcIPv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 94), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMACApProtectAcIPv6Addr.setStatus('current')
if mibBuilder.loadTexts: hwMACApProtectAcIPv6Addr.setDescription('Description.')
hwMACApLineatePortCfgMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 95), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMACApLineatePortCfgMtu.setStatus('current')
if mibBuilder.loadTexts: hwMACApLineatePortCfgMtu.setDescription('Description.')
hwMACApLineatePortMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 96), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMACApLineatePortMacAddress.setStatus('current')
if mibBuilder.loadTexts: hwMACApLineatePortMacAddress.setDescription('Description.')
hwMACApAccessBalanceSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMACApAccessBalanceSwitch.setStatus('current')
if mibBuilder.loadTexts: hwMACApAccessBalanceSwitch.setDescription('Description.')
hwMACApNatIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 98), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMACApNatIpAddress.setStatus('current')
if mibBuilder.loadTexts: hwMACApNatIpAddress.setDescription('Description.')
hwMACApAttackFloodQuietTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 99), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 36000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMACApAttackFloodQuietTime.setStatus('current')
if mibBuilder.loadTexts: hwMACApAttackFloodQuietTime.setDescription('Flood attack quiet time. Range from 60s to 36000s')
hwMACApAttackPskQuietTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 36000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMACApAttackPskQuietTime.setStatus('current')
if mibBuilder.loadTexts: hwMACApAttackPskQuietTime.setDescription('Psk attack quiet time. Range from 60s to 36000s')
hwMACApAttackWeakivQuietTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 36000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMACApAttackWeakivQuietTime.setStatus('current')
if mibBuilder.loadTexts: hwMACApAttackWeakivQuietTime.setDescription('Weak-iv attack quiet time. Range from 60s to 36000s')
hwMACApAttackSpoofQuietTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 102), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 36000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMACApAttackSpoofQuietTime.setStatus('current')
if mibBuilder.loadTexts: hwMACApAttackSpoofQuietTime.setDescription('Spoof attack quiet time. Range from 60s to 36000s')
hwMACApBootCountTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 103), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMACApBootCountTotal.setStatus('current')
if mibBuilder.loadTexts: hwMACApBootCountTotal.setDescription('Description.')
hwMACApBootCountPowerOff = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 104), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMACApBootCountPowerOff.setStatus('current')
if mibBuilder.loadTexts: hwMACApBootCountPowerOff.setDescription('Description.')
hwMACApBootCountRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 9, 1, 105), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMACApBootCountRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMACApBootCountRowStatus.setDescription('Description.')
hwMacApLineatePortTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 10), )
if mibBuilder.loadTexts: hwMacApLineatePortTable.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortTable.setDescription('Description.')
hwMacApLineatePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 10, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), (0, "HUAWEI-WLAN-DEVICE-MIB", "hwMacApLineatePortIndex"))
if mibBuilder.loadTexts: hwMacApLineatePortEntry.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortEntry.setDescription('Description.')
hwMacApLineatePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: hwMacApLineatePortIndex.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortIndex.setDescription('Description.')
hwMacApLineatePortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("fe", 1), ("ge", 2), ("gpon", 3), ("epon", 4), ("adsl2plus", 5), ("trunk", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLineatePortType.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortType.setDescription('Description.')
hwMacApLineatePortDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 10, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApLineatePortDesc.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortDesc.setDescription('Description.')
hwMacApLineatePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, -1))).clone(namedValues=NamedValues(("down", 1), ("up", 2), ("unknown", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLineatePortState.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortState.setDescription('Description.')
hwMacApLineatePortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLineatePortSpeed.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortSpeed.setDescription('Description.')
hwMacApMultiLineatePortDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, -1))).clone(namedValues=NamedValues(("half", 1), ("full", 2), ("unknown", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApMultiLineatePortDuplex.setStatus('current')
if mibBuilder.loadTexts: hwMacApMultiLineatePortDuplex.setDescription('Description.')
hwMacApMultiLineatePortNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, -1))).clone(namedValues=NamedValues(("auto", 1), ("forced", 2), ("unknown", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApMultiLineatePortNegotiation.setStatus('current')
if mibBuilder.loadTexts: hwMacApMultiLineatePortNegotiation.setDescription('Description.')
hwMacApMultiLineatePortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("root", 1), ("endpoint", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApMultiLineatePortMode.setStatus('current')
if mibBuilder.loadTexts: hwMacApMultiLineatePortMode.setDescription('Description.')
hwMacApMultiLineatePortUserIsolate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApMultiLineatePortUserIsolate.setStatus('current')
if mibBuilder.loadTexts: hwMacApMultiLineatePortUserIsolate.setDescription('Description.')
hwMacApMultiLineatePortStpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApMultiLineatePortStpEnable.setStatus('current')
if mibBuilder.loadTexts: hwMacApMultiLineatePortStpEnable.setDescription('Description.')
hwMacApMultiLineatePortVlanTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 10, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApMultiLineatePortVlanTagged.setStatus('current')
if mibBuilder.loadTexts: hwMacApMultiLineatePortVlanTagged.setDescription('Description.')
hwMacApMultiLineatePortVlanUntagged = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 10, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApMultiLineatePortVlanUntagged.setStatus('current')
if mibBuilder.loadTexts: hwMacApMultiLineatePortVlanUntagged.setDescription('Description.')
hwMacApMultiLineatePortPvidVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 10, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApMultiLineatePortPvidVlan.setStatus('current')
if mibBuilder.loadTexts: hwMacApMultiLineatePortPvidVlan.setDescription('Description.')
hwMacApMultiLineatePortCRCErrorHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 10, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApMultiLineatePortCRCErrorHighThreshold.setStatus('current')
if mibBuilder.loadTexts: hwMacApMultiLineatePortCRCErrorHighThreshold.setDescription('Description.')
hwMacApMultiLineatePortCRCErrorLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 10, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApMultiLineatePortCRCErrorLowThreshold.setStatus('current')
if mibBuilder.loadTexts: hwMacApMultiLineatePortCRCErrorLowThreshold.setDescription('Description.')
hwMacApMultiLineatePortCRCErrorSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 10, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, -1))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("unknown", -1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApMultiLineatePortCRCErrorSwitch.setStatus('current')
if mibBuilder.loadTexts: hwMacApMultiLineatePortCRCErrorSwitch.setDescription('Description.')
hwMacApLineatePortAclNumInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 10, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApLineatePortAclNumInbound.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortAclNumInbound.setDescription('Description.')
hwMacApLineatePortAclNumOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 10, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApLineatePortAclNumOutbound.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortAclNumOutbound.setDescription('Description.')
hwMacApLineatePortAclNameInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 10, 1, 19), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApLineatePortAclNameInbound.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortAclNameInbound.setDescription('Description.')
hwMacApLineatePortAclNameOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 10, 1, 20), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApLineatePortAclNameOutbound.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortAclNameOutbound.setDescription('Description.')
hwMacApLineatePortAclSwitchInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApLineatePortAclSwitchInbound.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortAclSwitchInbound.setDescription('Description.')
hwMacApLineatePortAclSwitchOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 10, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApLineatePortAclSwitchOutbound.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortAclSwitchOutbound.setDescription('Description.')
hwMacApLineatePortAclNumInboundIPV6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 10, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApLineatePortAclNumInboundIPV6.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortAclNumInboundIPV6.setDescription('Description.')
hwMacApLineatePortAclNumOutboundIPV6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 10, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApLineatePortAclNumOutboundIPV6.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortAclNumOutboundIPV6.setDescription('Description.')
hwMacApLineatePortAclNameInboundIPV6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 10, 1, 25), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApLineatePortAclNameInboundIPV6.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortAclNameInboundIPV6.setDescription('Description.')
hwMacApLineatePortAclNameOutboundIPV6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 10, 1, 26), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApLineatePortAclNameOutboundIPV6.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortAclNameOutboundIPV6.setDescription('Description.')
hwMacApLineatePortAclSwitchInboundIPV6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 10, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApLineatePortAclSwitchInboundIPV6.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortAclSwitchInboundIPV6.setDescription('Description.')
hwMacApLineatePortAclSwitchOutboundIPV6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 10, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApLineatePortAclSwitchOutboundIPV6.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortAclSwitchOutboundIPV6.setDescription('Description.')
hwMacApMultiLineatePortIsAddInTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 10, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, -1))).clone(namedValues=NamedValues(("exit", 1), ("add", 2), ("unknown", -1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApMultiLineatePortIsAddInTrunk.setStatus('current')
if mibBuilder.loadTexts: hwMacApMultiLineatePortIsAddInTrunk.setDescription('Description.')
hwMacApMultiLineatePortAddedOrExitTrunkID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 10, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApMultiLineatePortAddedOrExitTrunkID.setStatus('current')
if mibBuilder.loadTexts: hwMacApMultiLineatePortAddedOrExitTrunkID.setDescription('Description.')
hwMacApPerformanceStatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11), )
if mibBuilder.loadTexts: hwMacApPerformanceStatTable.setStatus('current')
if mibBuilder.loadTexts: hwMacApPerformanceStatTable.setDescription('Description.')
hwMacApPerformanceStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApMac"))
if mibBuilder.loadTexts: hwMacApPerformanceStatEntry.setStatus('current')
if mibBuilder.loadTexts: hwMacApPerformanceStatEntry.setDescription('Description.')
hwMacApMemoryUseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApMemoryUseRate.setStatus('current')
if mibBuilder.loadTexts: hwMacApMemoryUseRate.setDescription('Description.')
hwMacApCpuUseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApCpuUseRate.setStatus('current')
if mibBuilder.loadTexts: hwMacApCpuUseRate.setDescription('Description.')
hwMacApFlashFreeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApFlashFreeSize.setStatus('current')
if mibBuilder.loadTexts: hwMacApFlashFreeSize.setDescription('Description.')
hwMacApTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApTemperature.setStatus('current')
if mibBuilder.loadTexts: hwMacApTemperature.setDescription('Description.')
hwMacApOnlineUserNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApOnlineUserNum.setStatus('current')
if mibBuilder.loadTexts: hwMacApOnlineUserNum.setDescription('Description.')
hwMacApUpPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApUpPortSpeed.setStatus('current')
if mibBuilder.loadTexts: hwMacApUpPortSpeed.setDescription('Description.')
hwMacApUpPortRecvFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApUpPortRecvFrames.setStatus('current')
if mibBuilder.loadTexts: hwMacApUpPortRecvFrames.setDescription('Description.')
hwMacApUpPortRecvRightFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApUpPortRecvRightFrames.setStatus('current')
if mibBuilder.loadTexts: hwMacApUpPortRecvRightFrames.setDescription('Description.')
hwMacApUpPortRecvErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApUpPortRecvErrorFrames.setStatus('current')
if mibBuilder.loadTexts: hwMacApUpPortRecvErrorFrames.setDescription('Description.')
hwMacApUpPortSendFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApUpPortSendFrames.setStatus('current')
if mibBuilder.loadTexts: hwMacApUpPortSendFrames.setDescription('Description.')
hwMacApUpPortRecvBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApUpPortRecvBytes.setStatus('current')
if mibBuilder.loadTexts: hwMacApUpPortRecvBytes.setDescription('Description.')
hwMacApUpPortSendBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApUpPortSendBytes.setStatus('current')
if mibBuilder.loadTexts: hwMacApUpPortSendBytes.setDescription('Description.')
hwMacAPUpPortPER = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacAPUpPortPER.setStatus('current')
if mibBuilder.loadTexts: hwMacAPUpPortPER.setDescription('Description.')
hwMacAPWirelessUpPortTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacAPWirelessUpPortTraffic.setStatus('current')
if mibBuilder.loadTexts: hwMacAPWirelessUpPortTraffic.setDescription('Description.')
hwMacAPUpPortTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacAPUpPortTraffic.setStatus('current')
if mibBuilder.loadTexts: hwMacAPUpPortTraffic.setDescription('Description.')
hwMacApAirportSendDropFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApAirportSendDropFrames.setStatus('current')
if mibBuilder.loadTexts: hwMacApAirportSendDropFrames.setDescription('Description.')
hwMacApEthportRecvDropFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApEthportRecvDropFrames.setStatus('current')
if mibBuilder.loadTexts: hwMacApEthportRecvDropFrames.setDescription('Description.')
hwMacApAirportUpTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApAirportUpTraffic.setStatus('current')
if mibBuilder.loadTexts: hwMacApAirportUpTraffic.setDescription('Description.')
hwMacApAirportDwTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApAirportDwTraffic.setStatus('current')
if mibBuilder.loadTexts: hwMacApAirportDwTraffic.setDescription('Description.')
hwMacApEthportDwTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApEthportDwTraffic.setStatus('current')
if mibBuilder.loadTexts: hwMacApEthportDwTraffic.setDescription('Description.')
hwMacApEthportUpTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApEthportUpTraffic.setStatus('current')
if mibBuilder.loadTexts: hwMacApEthportUpTraffic.setDescription('Description.')
hwMacApAirportRecvDropPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApAirportRecvDropPacket.setStatus('current')
if mibBuilder.loadTexts: hwMacApAirportRecvDropPacket.setDescription('Description.')
hwMacApAirportRecvErrorPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApAirportRecvErrorPacket.setStatus('current')
if mibBuilder.loadTexts: hwMacApAirportRecvErrorPacket.setDescription('Description.')
hwMacApEthportRecvUnicastPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApEthportRecvUnicastPacket.setStatus('current')
if mibBuilder.loadTexts: hwMacApEthportRecvUnicastPacket.setDescription('Description.')
hwMacApEthportRecvNonUnicastPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApEthportRecvNonUnicastPacket.setStatus('current')
if mibBuilder.loadTexts: hwMacApEthportRecvNonUnicastPacket.setDescription('Description.')
hwMacApEthportSendUnicastPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApEthportSendUnicastPacket.setStatus('current')
if mibBuilder.loadTexts: hwMacApEthportSendUnicastPacket.setDescription('Description.')
hwMacApEthportSendNonUnicastPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApEthportSendNonUnicastPacket.setStatus('current')
if mibBuilder.loadTexts: hwMacApEthportSendNonUnicastPacket.setDescription('Description.')
hwMacApAvgRCPUUseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApAvgRCPUUseRate.setStatus('current')
if mibBuilder.loadTexts: hwMacApAvgRCPUUseRate.setDescription('Description.')
hwMacApAvgRMemoryUseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApAvgRMemoryUseRate.setStatus('current')
if mibBuilder.loadTexts: hwMacApAvgRMemoryUseRate.setDescription('Description.')
hwMacEthportSendDropFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacEthportSendDropFrames.setStatus('current')
if mibBuilder.loadTexts: hwMacEthportSendDropFrames.setDescription('Description.')
hwMacEthportSendErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacEthportSendErrorFrames.setStatus('current')
if mibBuilder.loadTexts: hwMacEthportSendErrorFrames.setDescription('Description.')
hwMacEthportUpDwnTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacEthportUpDwnTimes.setStatus('current')
if mibBuilder.loadTexts: hwMacEthportUpDwnTimes.setDescription('Description.')
hwMacApAirportRecvUnicastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApAirportRecvUnicastFrames.setStatus('current')
if mibBuilder.loadTexts: hwMacApAirportRecvUnicastFrames.setDescription('Description.')
hwMacApEthportRecvUnknownFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApEthportRecvUnknownFrames.setStatus('current')
if mibBuilder.loadTexts: hwMacApEthportRecvUnknownFrames.setDescription('Description.')
hwMacEthportUpRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacEthportUpRate.setStatus('current')
if mibBuilder.loadTexts: hwMacEthportUpRate.setDescription('Description.')
hwMacEthportDownRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacEthportDownRate.setStatus('current')
if mibBuilder.loadTexts: hwMacEthportDownRate.setDescription('Description.')
hwMacApUpPortRecvFrames64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApUpPortRecvFrames64Bits.setStatus('current')
if mibBuilder.loadTexts: hwMacApUpPortRecvFrames64Bits.setDescription('Description.')
hwMacApUpPortRecvRightFrames64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApUpPortRecvRightFrames64Bits.setStatus('current')
if mibBuilder.loadTexts: hwMacApUpPortRecvRightFrames64Bits.setDescription('Description.')
hwMacApUpPortRecvErrorFrames64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApUpPortRecvErrorFrames64Bits.setStatus('current')
if mibBuilder.loadTexts: hwMacApUpPortRecvErrorFrames64Bits.setDescription('Description.')
hwMacApUpPortSendFrames64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApUpPortSendFrames64Bits.setStatus('current')
if mibBuilder.loadTexts: hwMacApUpPortSendFrames64Bits.setDescription('Description.')
hwMacApUpPortRecvBytes64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApUpPortRecvBytes64Bits.setStatus('current')
if mibBuilder.loadTexts: hwMacApUpPortRecvBytes64Bits.setDescription('Description.')
hwMacApUpPortSendBytes64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApUpPortSendBytes64Bits.setStatus('current')
if mibBuilder.loadTexts: hwMacApUpPortSendBytes64Bits.setDescription('Description.')
hwMacAPWirelessUpPortTraffic64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacAPWirelessUpPortTraffic64Bits.setStatus('current')
if mibBuilder.loadTexts: hwMacAPWirelessUpPortTraffic64Bits.setDescription('Description.')
hwMacAPUpPortTraffic64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacAPUpPortTraffic64Bits.setStatus('current')
if mibBuilder.loadTexts: hwMacAPUpPortTraffic64Bits.setDescription('Description.')
hwMacApAirportSendDropFrames64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApAirportSendDropFrames64Bits.setStatus('current')
if mibBuilder.loadTexts: hwMacApAirportSendDropFrames64Bits.setDescription('Description.')
hwMacApEthportRecvDropFrames64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApEthportRecvDropFrames64Bits.setStatus('current')
if mibBuilder.loadTexts: hwMacApEthportRecvDropFrames64Bits.setDescription('Description.')
hwMacApAirportRecvDropPacket64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApAirportRecvDropPacket64Bits.setStatus('current')
if mibBuilder.loadTexts: hwMacApAirportRecvDropPacket64Bits.setDescription('Description.')
hwMacApAirportRecvErrorPacket64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApAirportRecvErrorPacket64Bits.setStatus('current')
if mibBuilder.loadTexts: hwMacApAirportRecvErrorPacket64Bits.setDescription('Description.')
hwMacApEthportRecvUnicastPacket64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApEthportRecvUnicastPacket64Bits.setStatus('current')
if mibBuilder.loadTexts: hwMacApEthportRecvUnicastPacket64Bits.setDescription('Description.')
hwMacApEthportRecvNonUnicastPacket64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApEthportRecvNonUnicastPacket64Bits.setStatus('current')
if mibBuilder.loadTexts: hwMacApEthportRecvNonUnicastPacket64Bits.setDescription('Description.')
hwMacApEthportSendUnicastPacket64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApEthportSendUnicastPacket64Bits.setStatus('current')
if mibBuilder.loadTexts: hwMacApEthportSendUnicastPacket64Bits.setDescription('Description.')
hwMacApEthportSendNonUnicastPacket64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 11, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApEthportSendNonUnicastPacket64Bits.setStatus('current')
if mibBuilder.loadTexts: hwMacApEthportSendNonUnicastPacket64Bits.setDescription('Description.')
hwApLineportInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 12), )
if mibBuilder.loadTexts: hwApLineportInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwApLineportInfoTable.setDescription('Description.')
hwApLineportInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 12, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), (0, "HUAWEI-WLAN-DEVICE-MIB", "hwApLineportIndex"))
if mibBuilder.loadTexts: hwApLineportInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwApLineportInfoEntry.setDescription('Description.')
hwApLineportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: hwApLineportIndex.setStatus('current')
if mibBuilder.loadTexts: hwApLineportIndex.setDescription('Description.')
hwApLineportDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 12, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLineportDesc.setStatus('current')
if mibBuilder.loadTexts: hwApLineportDesc.setDescription('Description.')
hwApLineportType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 12, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLineportType.setStatus('current')
if mibBuilder.loadTexts: hwApLineportType.setDescription('Description.')
hwApLineportMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLineportMtu.setStatus('current')
if mibBuilder.loadTexts: hwApLineportMtu.setDescription('Description.')
hwApLineportSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLineportSpeed.setStatus('current')
if mibBuilder.loadTexts: hwApLineportSpeed.setDescription('Description.')
hwApLineportMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 12, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLineportMac.setStatus('current')
if mibBuilder.loadTexts: hwApLineportMac.setDescription('Description.')
hwApLineportAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("adminUp", 1), ("down", 2), ("adminDown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLineportAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hwApLineportAdminStatus.setDescription('Description.')
hwApLineportNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 12, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLineportNum.setStatus('current')
if mibBuilder.loadTexts: hwApLineportNum.setDescription('Description.')
hwMacApLineportInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 13), )
if mibBuilder.loadTexts: hwMacApLineportInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineportInfoTable.setDescription('Description.')
hwMacApLineportInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 13, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwMacApMac"), (0, "HUAWEI-WLAN-DEVICE-MIB", "hwMacApLineportIndex"))
if mibBuilder.loadTexts: hwMacApLineportInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineportInfoEntry.setDescription('Description.')
hwMacApLineportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: hwMacApLineportIndex.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineportIndex.setDescription('Description.')
hwMacApLineportDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 13, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLineportDesc.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineportDesc.setDescription('Description.')
hwMacApLineportType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 13, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLineportType.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineportType.setDescription('Description.')
hwMacApLineportMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLineportMtu.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineportMtu.setDescription('Description.')
hwMacApLineportSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLineportSpeed.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineportSpeed.setDescription('Description.')
hwMacApLineportMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 13, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLineportMac.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineportMac.setDescription('Description.')
hwMacApLineportAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("adminUp", 1), ("down1", 2), ("adminDown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApLineportAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineportAdminStatus.setDescription('Description.')
hwMacApLineportNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 13, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLineportNum.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineportNum.setDescription('Description.')
hwApLldpTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 14), )
if mibBuilder.loadTexts: hwApLldpTable.setStatus('current')
if mibBuilder.loadTexts: hwApLldpTable.setDescription('Description.')
hwApLldpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 14, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), (0, "HUAWEI-WLAN-DEVICE-MIB", "hwApLldpRemLocalPortNum"), (0, "HUAWEI-WLAN-DEVICE-MIB", "hwApLldpRemIndex"))
if mibBuilder.loadTexts: hwApLldpEntry.setStatus('current')
if mibBuilder.loadTexts: hwApLldpEntry.setDescription('Description.')
hwApLldpRemLocalPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 14, 1, 1), Integer32())
if mibBuilder.loadTexts: hwApLldpRemLocalPortNum.setStatus('current')
if mibBuilder.loadTexts: hwApLldpRemLocalPortNum.setDescription('Description.')
hwApLldpRemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 14, 1, 2), Integer32())
if mibBuilder.loadTexts: hwApLldpRemIndex.setStatus('current')
if mibBuilder.loadTexts: hwApLldpRemIndex.setDescription('Description.')
hwApLldpRemChassisIdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLldpRemChassisIdSubtype.setStatus('current')
if mibBuilder.loadTexts: hwApLldpRemChassisIdSubtype.setDescription('Description.')
hwApLldpRemChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 14, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLldpRemChassisId.setStatus('current')
if mibBuilder.loadTexts: hwApLldpRemChassisId.setDescription('Description.')
hwApLldpRemPortIdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 14, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLldpRemPortIdSubtype.setStatus('current')
if mibBuilder.loadTexts: hwApLldpRemPortIdSubtype.setDescription('Description.')
hwApLldpRemPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 14, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLldpRemPortId.setStatus('current')
if mibBuilder.loadTexts: hwApLldpRemPortId.setDescription('Description.')
hwApLldpRemPortDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 14, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLldpRemPortDesc.setStatus('current')
if mibBuilder.loadTexts: hwApLldpRemPortDesc.setDescription('Description.')
hwApLldpRemSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 14, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLldpRemSysName.setStatus('current')
if mibBuilder.loadTexts: hwApLldpRemSysName.setDescription('Description.')
hwApLldpRemSysDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 14, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLldpRemSysDesc.setStatus('current')
if mibBuilder.loadTexts: hwApLldpRemSysDesc.setDescription('Description.')
hwApLldpRemSysCapSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 14, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLldpRemSysCapSupported.setStatus('current')
if mibBuilder.loadTexts: hwApLldpRemSysCapSupported.setDescription('Description.')
hwApLldpRemSysCapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 14, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLldpRemSysCapEnabled.setStatus('current')
if mibBuilder.loadTexts: hwApLldpRemSysCapEnabled.setDescription('Description.')
hwMacApLldpTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 15), )
if mibBuilder.loadTexts: hwMacApLldpTable.setStatus('current')
if mibBuilder.loadTexts: hwMacApLldpTable.setDescription('Description.')
hwMacApLldpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 15, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwMacApMac"), (0, "HUAWEI-WLAN-DEVICE-MIB", "hwMacApLldpRemLocalPortNum"), (0, "HUAWEI-WLAN-DEVICE-MIB", "hwMacApLldpRemIndex"))
if mibBuilder.loadTexts: hwMacApLldpEntry.setStatus('current')
if mibBuilder.loadTexts: hwMacApLldpEntry.setDescription('Description.')
hwMacApLldpRemLocalPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 15, 1, 1), Integer32())
if mibBuilder.loadTexts: hwMacApLldpRemLocalPortNum.setStatus('current')
if mibBuilder.loadTexts: hwMacApLldpRemLocalPortNum.setDescription('Description.')
hwMacApLldpRemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 15, 1, 2), Integer32())
if mibBuilder.loadTexts: hwMacApLldpRemIndex.setStatus('current')
if mibBuilder.loadTexts: hwMacApLldpRemIndex.setDescription('Description.')
hwMacApLldpRemChassisIdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 15, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLldpRemChassisIdSubtype.setStatus('current')
if mibBuilder.loadTexts: hwMacApLldpRemChassisIdSubtype.setDescription('Description.')
hwMacApLldpRemChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 15, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLldpRemChassisId.setStatus('current')
if mibBuilder.loadTexts: hwMacApLldpRemChassisId.setDescription('Description.')
hwMacApLldpRemPortIdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 15, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLldpRemPortIdSubtype.setStatus('current')
if mibBuilder.loadTexts: hwMacApLldpRemPortIdSubtype.setDescription('Description.')
hwMacApLldpRemPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 15, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLldpRemPortId.setStatus('current')
if mibBuilder.loadTexts: hwMacApLldpRemPortId.setDescription('Description.')
hwMacApLldpRemPortDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 15, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLldpRemPortDesc.setStatus('current')
if mibBuilder.loadTexts: hwMacApLldpRemPortDesc.setDescription('Description.')
hwMacApLldpRemSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 15, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLldpRemSysName.setStatus('current')
if mibBuilder.loadTexts: hwMacApLldpRemSysName.setDescription('Description.')
hwMacApLldpRemSysDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 15, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLldpRemSysDesc.setStatus('current')
if mibBuilder.loadTexts: hwMacApLldpRemSysDesc.setDescription('Description.')
hwMacApLldpRemSysCapSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 15, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLldpRemSysCapSupported.setStatus('current')
if mibBuilder.loadTexts: hwMacApLldpRemSysCapSupported.setDescription('Description.')
hwMacApLldpRemSysCapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 15, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLldpRemSysCapEnabled.setStatus('current')
if mibBuilder.loadTexts: hwMacApLldpRemSysCapEnabled.setDescription('Description.')
hwAplldpRemManAddrTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 16), )
if mibBuilder.loadTexts: hwAplldpRemManAddrTable.setStatus('current')
if mibBuilder.loadTexts: hwAplldpRemManAddrTable.setDescription('Description.')
hwAplldpRemManAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 16, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), (0, "HUAWEI-WLAN-DEVICE-MIB", "hwApLldpRemLocalPortNum"), (0, "HUAWEI-WLAN-DEVICE-MIB", "hwApLldpRemIndex"), (0, "HUAWEI-WLAN-DEVICE-MIB", "hwApLldpRemManAddrSubtype"), (0, "HUAWEI-WLAN-DEVICE-MIB", "hwApLldpRemManAddr"))
if mibBuilder.loadTexts: hwAplldpRemManAddrEntry.setStatus('current')
if mibBuilder.loadTexts: hwAplldpRemManAddrEntry.setDescription('Description.')
hwApLldpRemManAddrSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 16, 1, 1), Integer32())
if mibBuilder.loadTexts: hwApLldpRemManAddrSubtype.setStatus('current')
if mibBuilder.loadTexts: hwApLldpRemManAddrSubtype.setDescription('Description.')
hwApLldpRemManAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 16, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: hwApLldpRemManAddr.setStatus('current')
if mibBuilder.loadTexts: hwApLldpRemManAddr.setDescription('Description.')
hwApLldpRemManAddrIfSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLldpRemManAddrIfSubtype.setStatus('current')
if mibBuilder.loadTexts: hwApLldpRemManAddrIfSubtype.setDescription('Description.')
hwApLldpRemManAddrIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 16, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLldpRemManAddrIfId.setStatus('current')
if mibBuilder.loadTexts: hwApLldpRemManAddrIfId.setDescription('Description.')
hwApLldpRemManAddrOID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 16, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLldpRemManAddrOID.setStatus('current')
if mibBuilder.loadTexts: hwApLldpRemManAddrOID.setDescription('Description.')
hwMacAplldpRemManAddrTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 17), )
if mibBuilder.loadTexts: hwMacAplldpRemManAddrTable.setStatus('current')
if mibBuilder.loadTexts: hwMacAplldpRemManAddrTable.setDescription('Description.')
hwMacAplldpRemManAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 17, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwMacApMac"), (0, "HUAWEI-WLAN-DEVICE-MIB", "hwMacApLldpRemLocalPortNum"), (0, "HUAWEI-WLAN-DEVICE-MIB", "hwMacApLldpRemIndex"), (0, "HUAWEI-WLAN-DEVICE-MIB", "hwMACApLldpRemManAddrSubtype"), (0, "HUAWEI-WLAN-DEVICE-MIB", "hwMACApLldpRemManAddr"))
if mibBuilder.loadTexts: hwMacAplldpRemManAddrEntry.setStatus('current')
if mibBuilder.loadTexts: hwMacAplldpRemManAddrEntry.setDescription('Description.')
hwMACApLldpRemManAddrSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 17, 1, 1), Integer32())
if mibBuilder.loadTexts: hwMACApLldpRemManAddrSubtype.setStatus('current')
if mibBuilder.loadTexts: hwMACApLldpRemManAddrSubtype.setDescription('Description.')
hwMACApLldpRemManAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 17, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: hwMACApLldpRemManAddr.setStatus('current')
if mibBuilder.loadTexts: hwMACApLldpRemManAddr.setDescription('Description.')
hwMACApLldpRemManAddrIfSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 17, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMACApLldpRemManAddrIfSubtype.setStatus('current')
if mibBuilder.loadTexts: hwMACApLldpRemManAddrIfSubtype.setDescription('Description.')
hwMACApLldpRemManAddrIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 17, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMACApLldpRemManAddrIfId.setStatus('current')
if mibBuilder.loadTexts: hwMACApLldpRemManAddrIfId.setDescription('Description.')
hwMACApLldpRemManAddrOID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 17, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMACApLldpRemManAddrOID.setStatus('current')
if mibBuilder.loadTexts: hwMACApLldpRemManAddrOID.setDescription('Description.')
hwApOpticalInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 18), )
if mibBuilder.loadTexts: hwApOpticalInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwApOpticalInfoTable.setDescription('Description.')
hwApOpticalInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 18, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"))
if mibBuilder.loadTexts: hwApOpticalInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwApOpticalInfoEntry.setDescription('Description.')
hwApOpticalNominalBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApOpticalNominalBitRate.setStatus('current')
if mibBuilder.loadTexts: hwApOpticalNominalBitRate.setDescription('Description.')
hwApOpticalLinkLen9X125km = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApOpticalLinkLen9X125km.setStatus('current')
if mibBuilder.loadTexts: hwApOpticalLinkLen9X125km.setDescription('Description.')
hwApOpticalLinkLen50X125X100m = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 18, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApOpticalLinkLen50X125X100m.setStatus('current')
if mibBuilder.loadTexts: hwApOpticalLinkLen50X125X100m.setDescription('Description.')
hwApOpticalLinkLen62p5X125X10m = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 18, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApOpticalLinkLen62p5X125X10m.setStatus('current')
if mibBuilder.loadTexts: hwApOpticalLinkLen62p5X125X10m.setDescription('Description.')
hwApOpticalLinkLenCopper = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 18, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApOpticalLinkLenCopper.setStatus('current')
if mibBuilder.loadTexts: hwApOpticalLinkLenCopper.setDescription('Description.')
hwApOpticalSfpConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 18, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApOpticalSfpConnector.setStatus('current')
if mibBuilder.loadTexts: hwApOpticalSfpConnector.setDescription('Description.')
hwApOpticalDdmVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 18, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApOpticalDdmVoltage.setStatus('current')
if mibBuilder.loadTexts: hwApOpticalDdmVoltage.setDescription('Description.')
hwApOpticalDdmTxBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 18, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApOpticalDdmTxBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: hwApOpticalDdmTxBiasCurrent.setDescription('Description.')
hwApOpticalDdmTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 18, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApOpticalDdmTxPower.setStatus('current')
if mibBuilder.loadTexts: hwApOpticalDdmTxPower.setDescription('Description.')
hwApOpticalDdmRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 18, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApOpticalDdmRxPower.setStatus('current')
if mibBuilder.loadTexts: hwApOpticalDdmRxPower.setDescription('Description.')
hwApOpticalDdmTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 18, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApOpticalDdmTemperature.setStatus('current')
if mibBuilder.loadTexts: hwApOpticalDdmTemperature.setDescription('Description.')
hwApOpticalVdndorOui = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 18, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApOpticalVdndorOui.setStatus('current')
if mibBuilder.loadTexts: hwApOpticalVdndorOui.setDescription('Description.')
hwApOpticalVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 18, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApOpticalVendorName.setStatus('current')
if mibBuilder.loadTexts: hwApOpticalVendorName.setDescription('Description.')
hwApOpticalVendorPn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 18, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApOpticalVendorPn.setStatus('current')
if mibBuilder.loadTexts: hwApOpticalVendorPn.setDescription('Description.')
hwApOpticalVendorRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 18, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApOpticalVendorRev.setStatus('current')
if mibBuilder.loadTexts: hwApOpticalVendorRev.setDescription('Description.')
hwApOpticalVendorSn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 18, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApOpticalVendorSn.setStatus('current')
if mibBuilder.loadTexts: hwApOpticalVendorSn.setDescription('Description.')
hwMacApOpticalInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 19), )
if mibBuilder.loadTexts: hwMacApOpticalInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwMacApOpticalInfoTable.setDescription('Description.')
hwMacApOpticalInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 19, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwMacApMac"))
if mibBuilder.loadTexts: hwMacApOpticalInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwMacApOpticalInfoEntry.setDescription('Description.')
hwMacApOpticalNominalBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 19, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApOpticalNominalBitRate.setStatus('current')
if mibBuilder.loadTexts: hwMacApOpticalNominalBitRate.setDescription('Description.')
hwMacApOpticalLinkLen9X125km = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 19, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApOpticalLinkLen9X125km.setStatus('current')
if mibBuilder.loadTexts: hwMacApOpticalLinkLen9X125km.setDescription('Description.')
hwMacApOpticalLinkLen50X125X100m = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 19, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApOpticalLinkLen50X125X100m.setStatus('current')
if mibBuilder.loadTexts: hwMacApOpticalLinkLen50X125X100m.setDescription('Description.')
hwMacApOpticalLinkLen62p5X125X10m = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 19, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApOpticalLinkLen62p5X125X10m.setStatus('current')
if mibBuilder.loadTexts: hwMacApOpticalLinkLen62p5X125X10m.setDescription('Description.')
hwMacApOpticalLinkLenCopper = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 19, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApOpticalLinkLenCopper.setStatus('current')
if mibBuilder.loadTexts: hwMacApOpticalLinkLenCopper.setDescription('Description.')
hwMacApOpticalSfpConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 19, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApOpticalSfpConnector.setStatus('current')
if mibBuilder.loadTexts: hwMacApOpticalSfpConnector.setDescription('Description.')
hwMacApOpticalDdmVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 19, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApOpticalDdmVoltage.setStatus('current')
if mibBuilder.loadTexts: hwMacApOpticalDdmVoltage.setDescription('Description.')
hwMacApOpticalDdmTxBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 19, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApOpticalDdmTxBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: hwMacApOpticalDdmTxBiasCurrent.setDescription('Description.')
hwMacApOpticalDdmTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 19, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApOpticalDdmTxPower.setStatus('current')
if mibBuilder.loadTexts: hwMacApOpticalDdmTxPower.setDescription('Description.')
hwMacApOpticalDdmRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 19, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApOpticalDdmRxPower.setStatus('current')
if mibBuilder.loadTexts: hwMacApOpticalDdmRxPower.setDescription('Description.')
hwMacApOpticalDdmTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 19, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApOpticalDdmTemperature.setStatus('current')
if mibBuilder.loadTexts: hwMacApOpticalDdmTemperature.setDescription('Description.')
hwMacApOpticalVdndorOui = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 19, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApOpticalVdndorOui.setStatus('current')
if mibBuilder.loadTexts: hwMacApOpticalVdndorOui.setDescription('Description.')
hwMacApOpticalVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 19, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApOpticalVendorName.setStatus('current')
if mibBuilder.loadTexts: hwMacApOpticalVendorName.setDescription('Description.')
hwMacApOpticalVendorPn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 19, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApOpticalVendorPn.setStatus('current')
if mibBuilder.loadTexts: hwMacApOpticalVendorPn.setDescription('Description.')
hwMacApOpticalVendorRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 19, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApOpticalVendorRev.setStatus('current')
if mibBuilder.loadTexts: hwMacApOpticalVendorRev.setDescription('Description.')
hwMacApOpticalVendorSn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 19, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApOpticalVendorSn.setStatus('current')
if mibBuilder.loadTexts: hwMacApOpticalVendorSn.setDescription('Description.')
hwApSysnameTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 20), )
if mibBuilder.loadTexts: hwApSysnameTable.setStatus('current')
if mibBuilder.loadTexts: hwApSysnameTable.setDescription('Description.')
hwApSysnameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 20, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApSysName"))
if mibBuilder.loadTexts: hwApSysnameEntry.setStatus('current')
if mibBuilder.loadTexts: hwApSysnameEntry.setDescription('Description.')
hwApSysnameApId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApSysnameApId.setStatus('current')
if mibBuilder.loadTexts: hwApSysnameApId.setDescription('Description.')
hwApSysnameApMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 20, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApSysnameApMac.setStatus('current')
if mibBuilder.loadTexts: hwApSysnameApMac.setDescription('Description.')
hwApPhysicalAttrTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 21), )
if mibBuilder.loadTexts: hwApPhysicalAttrTable.setStatus('current')
if mibBuilder.loadTexts: hwApPhysicalAttrTable.setDescription('Description.')
hwApPhysicalAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 21, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"))
if mibBuilder.loadTexts: hwApPhysicalAttrEntry.setStatus('current')
if mibBuilder.loadTexts: hwApPhysicalAttrEntry.setDescription('Description.')
hwApElectronicLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 21, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1025))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApElectronicLabel.setStatus('current')
if mibBuilder.loadTexts: hwApElectronicLabel.setDescription('Description.')
hwMacApPhysicalAttrTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 22), )
if mibBuilder.loadTexts: hwMacApPhysicalAttrTable.setStatus('current')
if mibBuilder.loadTexts: hwMacApPhysicalAttrTable.setDescription('Description.')
hwMacApPhysicalAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 22, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwMacApMac"))
if mibBuilder.loadTexts: hwMacApPhysicalAttrEntry.setStatus('current')
if mibBuilder.loadTexts: hwMacApPhysicalAttrEntry.setDescription('Description.')
hwMacApElectronicLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 22, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1025))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApElectronicLabel.setStatus('current')
if mibBuilder.loadTexts: hwMacApElectronicLabel.setDescription('Description.')
hwApLineportStatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 23), )
if mibBuilder.loadTexts: hwApLineportStatTable.setStatus('current')
if mibBuilder.loadTexts: hwApLineportStatTable.setDescription('Description.')
hwApLineportStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 23, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), (0, "HUAWEI-WLAN-DEVICE-MIB", "hwApLineatePortIndex"))
if mibBuilder.loadTexts: hwApLineportStatEntry.setStatus('current')
if mibBuilder.loadTexts: hwApLineportStatEntry.setDescription('Description.')
hwApLinePortStatClear = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 23, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLinePortStatClear.setStatus('current')
if mibBuilder.loadTexts: hwApLinePortStatClear.setDescription('Description.')
hwApLinePortUpDwnTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 23, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLinePortUpDwnTimes.setStatus('current')
if mibBuilder.loadTexts: hwApLinePortUpDwnTimes.setDescription('Description.')
hwApLinePortInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 23, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLinePortInPkts.setStatus('current')
if mibBuilder.loadTexts: hwApLinePortInPkts.setDescription('Description.')
hwApLinePortInUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 23, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLinePortInUnicastPkts.setStatus('current')
if mibBuilder.loadTexts: hwApLinePortInUnicastPkts.setDescription('Description.')
hwApLinePortInNonUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 23, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLinePortInNonUnicastPkts.setStatus('current')
if mibBuilder.loadTexts: hwApLinePortInNonUnicastPkts.setDescription('Description.')
hwApLinePortInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 23, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLinePortInBytes.setStatus('current')
if mibBuilder.loadTexts: hwApLinePortInBytes.setDescription('Description.')
hwApLinePortInErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 23, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLinePortInErrorPkts.setStatus('current')
if mibBuilder.loadTexts: hwApLinePortInErrorPkts.setDescription('Description.')
hwApLinePortInDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 23, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLinePortInDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: hwApLinePortInDiscardPkts.setDescription('Description.')
hwApLinePortOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 23, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLinePortOutPkts.setStatus('current')
if mibBuilder.loadTexts: hwApLinePortOutPkts.setDescription('Description.')
hwApLinePortOutUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 23, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLinePortOutUnicastPkts.setStatus('current')
if mibBuilder.loadTexts: hwApLinePortOutUnicastPkts.setDescription('Description.')
hwApLinePortOutNonUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 23, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLinePortOutNonUnicastPkts.setStatus('current')
if mibBuilder.loadTexts: hwApLinePortOutNonUnicastPkts.setDescription('Description.')
hwApLinePortOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 23, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLinePortOutBytes.setStatus('current')
if mibBuilder.loadTexts: hwApLinePortOutBytes.setDescription('Description.')
hwApLinePortOutErrorsPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 23, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLinePortOutErrorsPkts.setStatus('current')
if mibBuilder.loadTexts: hwApLinePortOutErrorsPkts.setDescription('Description.')
hwApLinePortOutDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 23, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLinePortOutDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: hwApLinePortOutDiscardPkts.setDescription('Description.')
hwMacApLineportStatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 24), )
if mibBuilder.loadTexts: hwMacApLineportStatTable.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineportStatTable.setDescription('Description.')
hwMacApLineportStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 24, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwMacApMac"), (0, "HUAWEI-WLAN-DEVICE-MIB", "hwMacApLineatePortIndex"))
if mibBuilder.loadTexts: hwMacApLineportStatEntry.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineportStatEntry.setDescription('Description.')
hwMacApLinePortStatClear = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 24, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApLinePortStatClear.setStatus('current')
if mibBuilder.loadTexts: hwMacApLinePortStatClear.setDescription('Description.')
hwMacApLinePortUpDwnTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 24, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLinePortUpDwnTimes.setStatus('current')
if mibBuilder.loadTexts: hwMacApLinePortUpDwnTimes.setDescription('Description.')
hwMacApLinePortInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 24, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLinePortInPkts.setStatus('current')
if mibBuilder.loadTexts: hwMacApLinePortInPkts.setDescription('Description.')
hwMacApLinePortInUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 24, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLinePortInUnicastPkts.setStatus('current')
if mibBuilder.loadTexts: hwMacApLinePortInUnicastPkts.setDescription('Description.')
hwMacApLinePortInNonUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 24, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLinePortInNonUnicastPkts.setStatus('current')
if mibBuilder.loadTexts: hwMacApLinePortInNonUnicastPkts.setDescription('Description.')
hwMacApLinePortInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 24, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLinePortInBytes.setStatus('current')
if mibBuilder.loadTexts: hwMacApLinePortInBytes.setDescription('Description.')
hwMacApLinePortInErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 24, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLinePortInErrorPkts.setStatus('current')
if mibBuilder.loadTexts: hwMacApLinePortInErrorPkts.setDescription('Description.')
hwMacApLinePortInDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 24, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLinePortInDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: hwMacApLinePortInDiscardPkts.setDescription('Description.')
hwMacApLinePortOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 24, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLinePortOutPkts.setStatus('current')
if mibBuilder.loadTexts: hwMacApLinePortOutPkts.setDescription('Description.')
hwMacApLinePortOutUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 24, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLinePortOutUnicastPkts.setStatus('current')
if mibBuilder.loadTexts: hwMacApLinePortOutUnicastPkts.setDescription('Description.')
hwMacApLinePortOutNonUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 24, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLinePortOutNonUnicastPkts.setStatus('current')
if mibBuilder.loadTexts: hwMacApLinePortOutNonUnicastPkts.setDescription('Description.')
hwMacApLinePortOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 24, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLinePortOutBytes.setStatus('current')
if mibBuilder.loadTexts: hwMacApLinePortOutBytes.setDescription('Description.')
hwMacApLinePortOutErrorsPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 24, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLinePortOutErrorsPkts.setStatus('current')
if mibBuilder.loadTexts: hwMacApLinePortOutErrorsPkts.setDescription('Description.')
hwMacApLinePortOutDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 24, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLinePortOutDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: hwMacApLinePortOutDiscardPkts.setDescription('Description.')
hwApLineatePortLldpCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 25), )
if mibBuilder.loadTexts: hwApLineatePortLldpCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortLldpCfgTable.setDescription('Description.')
hwApLineatePortLldpCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 25, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), (0, "HUAWEI-WLAN-DEVICE-MIB", "hwApLldpRemLocalPortNum"), (0, "HUAWEI-WLAN-DEVICE-MIB", "hwApLineatePortLldpIndex"))
if mibBuilder.loadTexts: hwApLineatePortLldpCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortLldpCfgEntry.setDescription('Description.')
hwApLineatePortLldpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 25, 1, 1), Integer32())
if mibBuilder.loadTexts: hwApLineatePortLldpIndex.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortLldpIndex.setDescription('Description.')
hwApLineatePortLldpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 25, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLineatePortLldpEnable.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortLldpEnable.setDescription('Description.')
hwApLineatePortLldpManageAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 25, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLineatePortLldpManageAddr.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortLldpManageAddr.setDescription('Description.')
hwApLineatePortLldpPortDes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 25, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLineatePortLldpPortDes.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortLldpPortDes.setDescription('Description.')
hwApLineatePortLldpSysCab = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 25, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLineatePortLldpSysCab.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortLldpSysCab.setDescription('Description.')
hwApLineatePortLldpSysDes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 25, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLineatePortLldpSysDes.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortLldpSysDes.setDescription('Description.')
hwApLineatePortLldpSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 25, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLineatePortLldpSysName.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortLldpSysName.setDescription('Description.')
hwApLineatePortLldpDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 25, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLineatePortLldpDelay.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortLldpDelay.setDescription('Description.')
hwApLineatePortLldpHoldMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 25, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLineatePortLldpHoldMultiplier.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortLldpHoldMultiplier.setDescription('Description.')
hwApLineatePortLldpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 25, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLineatePortLldpInterval.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortLldpInterval.setDescription('Description.')
hwApLineatePortLldpRestartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 25, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLineatePortLldpRestartDelay.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortLldpRestartDelay.setDescription('Description.')
hwApLineatePortLldpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 25, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLineatePortLldpAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortLldpAdminStatus.setDescription('Description.')
hwApLineatePortLldpReportInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 25, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApLineatePortLldpReportInterval.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortLldpReportInterval.setDescription('Description.')
hwMacApLineatePortLldpCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 26), )
if mibBuilder.loadTexts: hwMacApLineatePortLldpCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortLldpCfgTable.setDescription('Description.')
hwMacApLineatePortLldpCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 26, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwMacApLineatePortLldpIndex"), (0, "HUAWEI-WLAN-DEVICE-MIB", "hwMacApMac"))
if mibBuilder.loadTexts: hwMacApLineatePortLldpCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortLldpCfgEntry.setDescription('Description.')
hwMacApLineatePortLldpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 26, 1, 1), Integer32())
if mibBuilder.loadTexts: hwMacApLineatePortLldpIndex.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortLldpIndex.setDescription('Description.')
hwMacApLineatePortLldpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 26, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApLineatePortLldpEnable.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortLldpEnable.setDescription('Description.')
hwMacApLineatePortLldpManageAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 26, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApLineatePortLldpManageAddr.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortLldpManageAddr.setDescription('Description.')
hwMacApLineatePortLldpPortDes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 26, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApLineatePortLldpPortDes.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortLldpPortDes.setDescription('Description.')
hwMacApLineatePortLldpSysCab = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 26, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApLineatePortLldpSysCab.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortLldpSysCab.setDescription('Description.')
hwMacApLineatePortLldpSysDes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 26, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApLineatePortLldpSysDes.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortLldpSysDes.setDescription('Description.')
hwMacApLineatePortLldpSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 26, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApLineatePortLldpSysName.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortLldpSysName.setDescription('Description.')
hwMacApLineatePortLldpDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 26, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApLineatePortLldpDelay.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortLldpDelay.setDescription('Description.')
hwMacApLineatePortLldpHoldMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 26, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApLineatePortLldpHoldMultiplier.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortLldpHoldMultiplier.setDescription('Description.')
hwMacApLineatePortLldpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 26, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApLineatePortLldpInterval.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortLldpInterval.setDescription('Description.')
hwMacApLineatePortLldpRestartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 26, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApLineatePortLldpRestartDelay.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortLldpRestartDelay.setDescription('Description.')
hwMacApLineatePortLldpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 26, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApLineatePortLldpAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortLldpAdminStatus.setDescription('Description.')
hwMacApLineatePortLldpReportInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 26, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApLineatePortLldpReportInterval.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortLldpReportInterval.setDescription('Description.')
hwApLineatePortLldpTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 27), )
if mibBuilder.loadTexts: hwApLineatePortLldpTable.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortLldpTable.setDescription('Description.')
hwApLineatePortLldpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 27, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), (0, "HUAWEI-WLAN-DEVICE-MIB", "hwApLineatePortLldpRemLocalPortNum"), (0, "HUAWEI-WLAN-DEVICE-MIB", "hwApLineatePortLldpRemIndex"))
if mibBuilder.loadTexts: hwApLineatePortLldpEntry.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortLldpEntry.setDescription('Description.')
hwApLineatePortLldpRemLocalPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 27, 1, 1), Integer32())
if mibBuilder.loadTexts: hwApLineatePortLldpRemLocalPortNum.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortLldpRemLocalPortNum.setDescription('Description.')
hwApLineatePortLldpRemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 27, 1, 2), Integer32())
if mibBuilder.loadTexts: hwApLineatePortLldpRemIndex.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortLldpRemIndex.setDescription('Description.')
hwApLineatePortLldpRemChassisIdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 27, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLineatePortLldpRemChassisIdSubtype.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortLldpRemChassisIdSubtype.setDescription('Description.')
hwApLineatePortLldpRemChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 27, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLineatePortLldpRemChassisId.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortLldpRemChassisId.setDescription('Description.')
hwApLineatePortLldpRemPortIdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 27, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLineatePortLldpRemPortIdSubtype.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortLldpRemPortIdSubtype.setDescription('Description.')
hwApLineatePortLldpRemPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 27, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLineatePortLldpRemPortId.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortLldpRemPortId.setDescription('Description.')
hwApLineatePortLldpRemPortDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 27, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLineatePortLldpRemPortDesc.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortLldpRemPortDesc.setDescription('Description.')
hwApLineatePortLldpRemSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 27, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLineatePortLldpRemSysName.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortLldpRemSysName.setDescription('Description.')
hwApLineatePortLldpRemSysDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 27, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLineatePortLldpRemSysDesc.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortLldpRemSysDesc.setDescription('Description.')
hwApLineatePortLldpRemSysCapSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 27, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLineatePortLldpRemSysCapSupported.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortLldpRemSysCapSupported.setDescription('Description.')
hwApLineatePortLldpRemSysCapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 27, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLineatePortLldpRemSysCapEnabled.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortLldpRemSysCapEnabled.setDescription('Description.')
hwMacApLineatePortLldpTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 28), )
if mibBuilder.loadTexts: hwMacApLineatePortLldpTable.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortLldpTable.setDescription('Description.')
hwMacApLineatePortLldpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 28, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwMacApMac"), (0, "HUAWEI-WLAN-DEVICE-MIB", "hwMacApLineatePortLldpRemLocalPortNum"), (0, "HUAWEI-WLAN-DEVICE-MIB", "hwMacApLineatePortLldpRemIndex"))
if mibBuilder.loadTexts: hwMacApLineatePortLldpEntry.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortLldpEntry.setDescription('Description.')
hwMacApLineatePortLldpRemLocalPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 28, 1, 1), Integer32())
if mibBuilder.loadTexts: hwMacApLineatePortLldpRemLocalPortNum.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortLldpRemLocalPortNum.setDescription('Description.')
hwMacApLineatePortLldpRemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 28, 1, 2), Integer32())
if mibBuilder.loadTexts: hwMacApLineatePortLldpRemIndex.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortLldpRemIndex.setDescription('Description.')
hwMacApLineatePortLldpRemChassisIdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 28, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLineatePortLldpRemChassisIdSubtype.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortLldpRemChassisIdSubtype.setDescription('Description.')
hwMacApLineatePortLldpRemChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 28, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLineatePortLldpRemChassisId.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortLldpRemChassisId.setDescription('Description.')
hwMacApLineatePortLldpRemPortIdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 28, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLineatePortLldpRemPortIdSubtype.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortLldpRemPortIdSubtype.setDescription('Description.')
hwMacApLineatePortLldpRemPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 28, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLineatePortLldpRemPortId.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortLldpRemPortId.setDescription('Description.')
hwMacApLineatePortLldpRemPortDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 28, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLineatePortLldpRemPortDesc.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortLldpRemPortDesc.setDescription('Description.')
hwMacApLineatePortLldpRemSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 28, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLineatePortLldpRemSysName.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortLldpRemSysName.setDescription('Description.')
hwMacApLineatePortLldpRemSysDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 28, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLineatePortLldpRemSysDesc.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortLldpRemSysDesc.setDescription('Description.')
hwMacApLineatePortLldpRemSysCapSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 28, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLineatePortLldpRemSysCapSupported.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortLldpRemSysCapSupported.setDescription('Description.')
hwMacApLineatePortLldpRemSysCapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 28, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApLineatePortLldpRemSysCapEnabled.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortLldpRemSysCapEnabled.setDescription('Description.')
hwApLineatePortLldpRemManAddrTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 29), )
if mibBuilder.loadTexts: hwApLineatePortLldpRemManAddrTable.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortLldpRemManAddrTable.setDescription('Description.')
hwApLineatePortLldpRemManAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 29, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), (0, "HUAWEI-WLAN-DEVICE-MIB", "hwApLineatePortLldpRemLocalPortNum"), (0, "HUAWEI-WLAN-DEVICE-MIB", "hwApLineatePortLldpRemIndex"), (0, "HUAWEI-WLAN-DEVICE-MIB", "hwApLineatePortLldpRemManAddrSubtype"), (0, "HUAWEI-WLAN-DEVICE-MIB", "hwApLineatePortLldpRemManAddr"))
if mibBuilder.loadTexts: hwApLineatePortLldpRemManAddrEntry.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortLldpRemManAddrEntry.setDescription('Description.')
hwApLineatePortLldpRemManAddrSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 29, 1, 1), Integer32())
if mibBuilder.loadTexts: hwApLineatePortLldpRemManAddrSubtype.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortLldpRemManAddrSubtype.setDescription('Description.')
hwApLineatePortLldpRemManAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 29, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: hwApLineatePortLldpRemManAddr.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortLldpRemManAddr.setDescription('Description.')
hwApLineatePortLldpRemManAddrIfSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 29, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLineatePortLldpRemManAddrIfSubtype.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortLldpRemManAddrIfSubtype.setDescription('Description.')
hwApLineatePortLldpRemManAddrIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 29, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLineatePortLldpRemManAddrIfId.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortLldpRemManAddrIfId.setDescription('Description.')
hwApLineatePortLldpRemManAddrOID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 29, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApLineatePortLldpRemManAddrOID.setStatus('current')
if mibBuilder.loadTexts: hwApLineatePortLldpRemManAddrOID.setDescription('Description.')
hwMacApLineatePortLldpRemManAddrTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 30), )
if mibBuilder.loadTexts: hwMacApLineatePortLldpRemManAddrTable.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortLldpRemManAddrTable.setDescription('Description.')
hwMacApLineatePortLldpRemManAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 30, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwMacApMac"), (0, "HUAWEI-WLAN-DEVICE-MIB", "hwMacApLineatePortLldpRemLocalPortNum"), (0, "HUAWEI-WLAN-DEVICE-MIB", "hwMacApLineatePortLldpRemIndex"), (0, "HUAWEI-WLAN-DEVICE-MIB", "hwMACApLineatePortLldpRemManAddrSubtype"), (0, "HUAWEI-WLAN-DEVICE-MIB", "hwMACApLineatePortLldpRemManAddr"))
if mibBuilder.loadTexts: hwMacApLineatePortLldpRemManAddrEntry.setStatus('current')
if mibBuilder.loadTexts: hwMacApLineatePortLldpRemManAddrEntry.setDescription('Description.')
hwMACApLineatePortLldpRemManAddrSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 30, 1, 1), Integer32())
if mibBuilder.loadTexts: hwMACApLineatePortLldpRemManAddrSubtype.setStatus('current')
if mibBuilder.loadTexts: hwMACApLineatePortLldpRemManAddrSubtype.setDescription('Description.')
hwMACApLineatePortLldpRemManAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 30, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: hwMACApLineatePortLldpRemManAddr.setStatus('current')
if mibBuilder.loadTexts: hwMACApLineatePortLldpRemManAddr.setDescription('Description.')
hwMACApLineatePortLldpRemManAddrIfSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 30, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMACApLineatePortLldpRemManAddrIfSubtype.setStatus('current')
if mibBuilder.loadTexts: hwMACApLineatePortLldpRemManAddrIfSubtype.setDescription('Description.')
hwMACApLineatePortLldpRemManAddrIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 30, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMACApLineatePortLldpRemManAddrIfId.setStatus('current')
if mibBuilder.loadTexts: hwMACApLineatePortLldpRemManAddrIfId.setDescription('Description.')
hwMACApLineatePortLldpRemManAddrOID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 30, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMACApLineatePortLldpRemManAddrOID.setStatus('current')
if mibBuilder.loadTexts: hwMACApLineatePortLldpRemManAddrOID.setDescription('Description.')
hwApOnlineFailTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 31), )
if mibBuilder.loadTexts: hwApOnlineFailTable.setStatus('current')
if mibBuilder.loadTexts: hwApOnlineFailTable.setDescription('Description.')
hwApOnlineFailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 31, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApOnlineFailMac"))
if mibBuilder.loadTexts: hwApOnlineFailEntry.setStatus('current')
if mibBuilder.loadTexts: hwApOnlineFailEntry.setDescription('Description.')
hwApOnlineFailMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 31, 1, 1), MacAddress())
if mibBuilder.loadTexts: hwApOnlineFailMac.setStatus('current')
if mibBuilder.loadTexts: hwApOnlineFailMac.setDescription('The mac of AP.')
hwMacApOnlineFailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 31, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApOnlineFailTime.setStatus('current')
if mibBuilder.loadTexts: hwMacApOnlineFailTime.setDescription('The last time of ap online fail.')
hwMacApOnlineFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 31, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApOnlineFailReason.setStatus('current')
if mibBuilder.loadTexts: hwMacApOnlineFailReason.setDescription('The last reason of ap online fail.')
hwMacApOnlineFailRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 31, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacApOnlineFailRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMacApOnlineFailRowStatus.setDescription('Delete a record.')
hwApOfflineTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 32), )
if mibBuilder.loadTexts: hwApOfflineTable.setStatus('current')
if mibBuilder.loadTexts: hwApOfflineTable.setDescription('Description.')
hwApOfflineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 32, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApOfflineMac"))
if mibBuilder.loadTexts: hwApOfflineEntry.setStatus('current')
if mibBuilder.loadTexts: hwApOfflineEntry.setDescription('Description.')
hwApOfflineMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 32, 1, 1), MacAddress())
if mibBuilder.loadTexts: hwApOfflineMac.setStatus('current')
if mibBuilder.loadTexts: hwApOfflineMac.setDescription('The mac of AP.')
hwMacApOfflineTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 32, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApOfflineTime.setStatus('current')
if mibBuilder.loadTexts: hwMacApOfflineTime.setDescription('The last time of ap offline.')
hwMacApOfflineReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 32, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacApOfflineReason.setStatus('current')
if mibBuilder.loadTexts: hwMacApOfflineReason.setDescription('The last reason of ap offline.')
hwMacApOfflineRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 6, 32, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacApOfflineRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMacApOfflineRowStatus.setDescription('Delete a record.')
hwAcObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 7))
hwAcTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 7, 1), )
if mibBuilder.loadTexts: hwAcTable.setStatus('current')
if mibBuilder.loadTexts: hwAcTable.setDescription('Description.')
hwAcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 7, 1, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwMemAcIndex"))
if mibBuilder.loadTexts: hwAcEntry.setStatus('current')
if mibBuilder.loadTexts: hwAcEntry.setDescription('Description.')
hwMemAcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 7, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hwMemAcIndex.setStatus('current')
if mibBuilder.loadTexts: hwMemAcIndex.setDescription('Description.')
hwAcIpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAcIpVersion.setStatus('current')
if mibBuilder.loadTexts: hwAcIpVersion.setDescription('Description.')
hwAcIPv4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 7, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAcIPv4Address.setStatus('current')
if mibBuilder.loadTexts: hwAcIPv4Address.setDescription('Description.')
hwAcIPv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 7, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAcIPv6Address.setStatus('current')
if mibBuilder.loadTexts: hwAcIPv6Address.setDescription('Description.')
hwAcState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("fault", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAcState.setStatus('current')
if mibBuilder.loadTexts: hwAcState.setDescription('Description.')
hwAcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 7, 1, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAcRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwAcRowStatus.setDescription('Description.')
hwMobilityGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 7, 2), )
if mibBuilder.loadTexts: hwMobilityGroupTable.setStatus('current')
if mibBuilder.loadTexts: hwMobilityGroupTable.setDescription('Description.')
hwMobilityGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 7, 2, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwMobilityGroupName"))
if mibBuilder.loadTexts: hwMobilityGroupEntry.setStatus('current')
if mibBuilder.loadTexts: hwMobilityGroupEntry.setDescription('Description.')
hwMobilityGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 7, 2, 1, 1), OctetString())
if mibBuilder.loadTexts: hwMobilityGroupName.setStatus('current')
if mibBuilder.loadTexts: hwMobilityGroupName.setDescription('Description.')
hwMobilityGroupMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 7, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMobilityGroupMemberList.setStatus('current')
if mibBuilder.loadTexts: hwMobilityGroupMemberList.setDescription('Description.')
hwMobilityGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 7, 2, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMobilityGroupStatus.setStatus('current')
if mibBuilder.loadTexts: hwMobilityGroupStatus.setDescription('Description.')
hwMobilityGroupMemberOpcode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("del", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMobilityGroupMemberOpcode.setStatus('current')
if mibBuilder.loadTexts: hwMobilityGroupMemberOpcode.setDescription('Description.')
hwMobilityGroupMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMobilityGroupMemberIndex.setStatus('current')
if mibBuilder.loadTexts: hwMobilityGroupMemberIndex.setDescription('Description.')
hwWlanDeviceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 8))
hwWlanDeviceConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 9))
hwWlanDeviceCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 9, 1))
hwWlanDeviceCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 9, 1, 1)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwWlanDeviceNotifyGroup"), ("HUAWEI-WLAN-DEVICE-MIB", "hwWlanDeviceNotifyObjectsGroup"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApTypeGroup"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApProfileGroup"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApAuthListGroup"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApRegionGroup"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApGroup"), ("HUAWEI-WLAN-DEVICE-MIB", "hwAcGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwWlanDeviceCompliance = hwWlanDeviceCompliance.setStatus('current')
if mibBuilder.loadTexts: hwWlanDeviceCompliance.setDescription('Description.')
hwWlanDeviceObjectGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 9, 2))
hwWlanDeviceNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 9, 2, 1)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApFaultNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApNormalNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApTypeNotMatchNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApPingResultNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApColdstartNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApConfigCommitNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApAddOffLineNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApConfirmNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwUnAuthorizedApRecordExistNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwUnAuthorizedApRecordClearNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApCpuOverloadNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApCpuOverloadRestoreNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMemoryOverloadNOtify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMemoryOverloadRestoreNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwAPStaFullNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwAPStaFullRecoverNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwAcDevicesSwitchNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApTimeSynFailNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwDyingGaspTrapNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApFaultNotifyFat"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApNormalNotifyFat"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApTemperatureTooLowNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApTemperatureTooLowRestoreNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApTemperatureTooHighNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApTemperatureTooHighRestoreNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwRadioDownNotifyFat"), ("HUAWEI-WLAN-DEVICE-MIB", "hwRadioDownRecovNotifyFat"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalRxPowerTooHighNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalRxPowerTooHighRestoreNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalRxPowerTooLowNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalRxPowerTooLowRestoreNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalTemperatureTooHighNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalTemperatureTooHighRestoreNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalTemperatureTooLowNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalTemperatureTooLowRestoreNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApNotSupportCountryCodeNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApReceivedInvalidArpNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApArpExceedThresholdNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApColdBootNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApColdBootRestoreNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApHotBootNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApHotBootRestoreNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwStationOnlineNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwStationOfflineNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwStationSignalStrengthLowThanThresholdNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwAPBroadcastStormDownNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwAPBroadcastStormDownRestoreNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwAPBroadcastStormUpNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwAPBroadcastStormUpRestoreNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApBroadcastRestrainDownNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApBroadcastRestrainDownRestoreNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApBroadcastRestrainUpNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApBroadcastRestrainUpRestoreNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApCRCTooHighNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApCRCTooHighRestoreNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApConflictApNameNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLicenseNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApFmeaIICFaultNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApFmeaIICFaultRestoreNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApFmeaPHYFaultNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApFmeaPHYFaultRestoreNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApFmeaFaultNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApFmeaFaultRestoreNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalInsertNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalRemoveNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApReceivedInvalidArpNewNotify"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApVersionMismatchNotify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwWlanDeviceNotifyGroup = hwWlanDeviceNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: hwWlanDeviceNotifyGroup.setDescription('Description.')
hwWlanDeviceNotifyObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 9, 2, 2)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApActualType"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApCpuOccupancyRate"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMemoryOccupancyRate"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApPermitStaNum"), ("HUAWEI-WLAN-DEVICE-MIB", "hwStaAuthFailCause"), ("HUAWEI-WLAN-DEVICE-MIB", "hwAcSystemSwitchType"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApRadioNotifyPara"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalRxPower"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalTemperature"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApCfgCountryCode"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApArpAttackSrcMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApArpAttackDstMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApArpAttackSrcIP"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApArpCfgRateThreshold"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApArpActualRate"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApNotifyRadioId"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApNotifyOrRestoreTemperature"), ("HUAWEI-WLAN-DEVICE-MIB", "hwOccurTime"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApBootNotifyName"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApFaultTimes"), ("HUAWEI-WLAN-DEVICE-MIB", "hwSignalStrengthThreshold"), ("HUAWEI-WLAN-DEVICE-MIB", "hwStaBroadcastFlux"), ("HUAWEI-WLAN-DEVICE-MIB", "hwBroadcastWarnThresholdDown"), ("HUAWEI-WLAN-DEVICE-MIB", "hwBroadcastWarnThresholdUp"), ("HUAWEI-WLAN-DEVICE-MIB", "hwBroadcastRestrainThresholdDown"), ("HUAWEI-WLAN-DEVICE-MIB", "hwBroadcastRestrainThresholdUp"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApBroadcastFlux"), ("HUAWEI-WLAN-DEVICE-MIB", "hwCrcErrActual"), ("HUAWEI-WLAN-DEVICE-MIB", "hwCrcThreshold"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApNotifyWlanId"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLicenseInfo"), ("HUAWEI-WLAN-DEVICE-MIB", "hwCrcPortType"), ("HUAWEI-WLAN-DEVICE-MIB", "hwCrcPortID"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApArpAttackDropNum"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApFaultID"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApIfIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApFaultInfo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwWlanDeviceNotifyObjectsGroup = hwWlanDeviceNotifyObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: hwWlanDeviceNotifyObjectsGroup.setDescription('Description.')
hwApTypeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 9, 2, 3)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApTypeDesc"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApTypeLineatePortNum"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApTypeRadioNum"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApTypeMaxStaNum"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApTypeMaxSsidNum"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApTypeAntennaGain"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApTypeRowStatus"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApTypeReset"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApTypeLineatePortType"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApTypeRadioType"), ("HUAWEI-WLAN-DEVICE-MIB", "hwRadioMaxSpatialStreamsNum"), ("HUAWEI-WLAN-DEVICE-MIB", "hwRadioMaxAntennasNum"), ("HUAWEI-WLAN-DEVICE-MIB", "hwRadioMaxVAPNum"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApTypeRadioAntennaGain"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLocalAssocResSwitch"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwApTypeGroup = hwApTypeGroup.setStatus('current')
if mibBuilder.loadTexts: hwApTypeGroup.setDescription('Description.')
hwApProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 9, 2, 4)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApEthPortMtu"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApDosDefend"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApWorkMode"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLogBackupServerIp"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLogBackupMode"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApProfileRowStatus"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApSampleTime"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApStatisticsInterval"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApEapStartMode"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApEapStartUnicastMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApEapStartTransform"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApEapResponseMode"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApEapResponseUnicastMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApEapResponseTransform"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOfflineManagement"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApAlarmRestrictionMode"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApAlarmRestrictionPeriod"), ("HUAWEI-WLAN-DEVICE-MIB", "hwAp4WayHandshakeRoamPolicy"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLogRecordLevel"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLogBackupPeriodTime"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLogRecordFtpMode"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLogServerUsername"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLogServerUserPassword"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLogServerIp"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApProfileTelnetSwitch"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApSshSwitch"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApProfileDhcpTrustPort"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApProfileConsoleSwitch"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApProfileMaxUserNum"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApProfileNdTrustPort"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLedSwitch"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApProfileDefault"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApProfileBatchStart"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApProfileBatchNumber"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApProfileBatchReturnNumber"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApProfileBatchNameList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwApProfileGroup = hwApProfileGroup.setStatus('current')
if mibBuilder.loadTexts: hwApProfileGroup.setDescription('Description.')
hwApAuthListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 9, 2, 5)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApMacWhitelistRowStatus"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApSnWhitelistRowStatus"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApAuthMode"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMacWhitelistBatchQueryStartNumber"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMacWhitelistBatchQueryNumber"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMacWhitelistBatchQueryList"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMacWhitelistBatchQueryReturnNumber"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApSnWhitelistBatchQueryStartNumber"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApSnWhitelistBatchQueryNumber"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApSnWhitelistBatchQueryList"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApSnWhitelistBatchQueryReturnNumber"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMacBlacklistRowStatus"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApSnBlacklistRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwApAuthListGroup = hwApAuthListGroup.setStatus('current')
if mibBuilder.loadTexts: hwApAuthListGroup.setDescription('Description.')
hwApRegionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 9, 2, 6)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApRegionName"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApRegionDeployMode"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApRegionApNumber"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApRegionApIndexMask"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApRegionRowStatus"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApRegionForwardMode"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApRegionCountryCode"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApRegionDefault"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApRegionAllExistRegionIndexMask"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApRegionBatchStart"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApRegionBatchNumber"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApRegionBatchReturnNumber"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApRegionBatchNameList"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApRegionBatchDeployMode"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApSrcRegionIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApDestRegionIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApRegionScanChannel2G"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApRegionScanChannel5G"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApRegionCalibrateChannel2G"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApRegionCalibrateChannel5G"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApRegionCalibrate5gBandWidth"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwApRegionGroup = hwApRegionGroup.setStatus('current')
if mibBuilder.loadTexts: hwApRegionGroup.setDescription('Description.')
hwApGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 9, 2, 7))
for _hwApGroup_obj in [[("HUAWEI-WLAN-DEVICE-MIB", "hwApUsedType"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApUsedProfileName"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApUsedRegionIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApSn"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApSysName"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApRunState"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApSoftwareVersion"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApHardwareVersion"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApCpuType"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApCpufrequency"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMemoryType"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApDomain"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApIpAddress"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApIpNetMask"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApGatewayIp"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMemorySize"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApFlashSize"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApRunTime"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApUpEthPortSpeed"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApUpEthPortSpeedMode"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApUpEthPortDuplex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApUpEthPortDuplexMode"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApAdminOper"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApRowstatus"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApPerformanceStatCycle"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApDNS"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApRunningMode"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApForwardMode"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApAntennaMode"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApCpuThreshold"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMemThreshold"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApNEnumber"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOnlineTime"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApSysSoftwareDesc"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApSysHardtwareDesc"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApSysManufacture"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApSysSoftwareName"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApSysSoftwareVendor"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApManagementVlanID"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApUsername"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApPassword"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApAcIP1"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApAcIP2"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApAcIP3"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApAcIP4"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApIpMode"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLldpEnable"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLldpManageAddr"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLldpPortDes"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLldpSysCab"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLldpSysDes"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLldpSysName"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLldpDelay"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLldpHoldMultiplier"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLldpInterval"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLldpRestartDelay"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLldpAdminStatus"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLldpReportInterval"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApBomCode"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApProtectAcPriority"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApProtectAcIP"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalHighRxPowerThreshold"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalLowRxPowerThreshold"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalHighTemperatureThreshold"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalLowTemperatureThreshold"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApKeepService"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApPriorityAccessMode"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLineateportMode"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLineateportVlanTagged"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLineateportVlanUntagged"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLineateportPvidVlan"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLineateportUserIsolate"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLineateportStpEnable"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApHighTemperatureThreshold"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLowTemperatureThreshold"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApReset"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApStaticIpAddress"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApStaticNetMask"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApStaticGatewayIp"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApAttackFloodInterval"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApAttackFloodTimes"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApDynamicBlacklistEnable"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApDynamicBlacklistAgingInt"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApAttackPskInterval"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApAttackPskTimes"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApAccessBalanceGap"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApIpv6Address"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApIpv6NetMask"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApGatewayIpv6"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApIpv6DNS"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApProtectAcIPv6Addr"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLineatePortCfgMtu"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLineatePortMacAddress"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApAccessBalanceSwitch"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApNatIpAddress"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApAttackFloodQuietTime"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApAttackPskQuietTime"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApAttackWeakivQuietTime"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApAttackSpoofQuietTime"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApBootCountTotal"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApBootCountPowerOff"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApBootCountRowStatus"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLineatePortType"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLineatePortDesc"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLineatePortState"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLineatePortSpeed"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMultiLineatePortDuplex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMultiLineatePortNegotiation"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMultiLineatePortMode"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMultiLineatePortUserIsolate"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMultiLineatePortStpEnable"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMultiLineatePortVlanTagged"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMultiLineatePortVlanUntagged"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMultiLineatePortPvidVlan"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMultiLineatePortCRCErrorHighThreshold"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMultiLineatePortCRCErrorLowThreshold"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMultiLineatePortCRCErrorSwitch"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLineatePortAclNumInbound"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLineatePortAclNumOutbound"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLineatePortAclNameInbound"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLineatePortAclNameOutbound"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLineatePortAclSwitchInbound"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLineatePortAclSwitchOutbound"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLineatePortAclNumInboundIPV6"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLineatePortAclNumOutboundIPV6"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLineatePortAclNameInboundIPV6"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLineatePortAclNameOutboundIPV6"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLineatePortAclSwitchInboundIPV6"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLineatePortAclSwitchOutboundIPV6"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMultiLineatePortIsAddInTrunk"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMultiLineatePortAddedOrExitTrunkID"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApAllExistApIndexMask"), ("HUAWEI-WLAN-DEVICE-MIB", "hwUnAuthorizedApRecordNumber"), ("HUAWEI-WLAN-DEVICE-MIB", "hwUnAuthorizedApRecordAdmin"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApBatchIndexStart"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApBatchIndexNumber"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApBatchIndexReturnNumber"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApBatchState"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApBatchNameList"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApPingIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApPingAddress"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApPingCount"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApPingPacketSize"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApPingWaitTime"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApPingTimeOut"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApPingResultSuccessCount"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApPingResultFailureCount"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApPingResultAverageResponseTime"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApPingResultMinimumResponseTime"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApPingResultMaximumResponseTime"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApPingApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApPingResultFlag"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMemoryUseRate"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApCpuUseRate"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApFlashFreeSize"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApTemperature"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOnlineUserNum"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApUpPortSpeed"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApUpPortRecvFrames"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApUpPortRecvRightFrames"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApUpPortRecvErrorFrames"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApUpPortSendFrames"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApUpPortRecvBytes"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApUpPortSendBytes"), ("HUAWEI-WLAN-DEVICE-MIB", "hwAPUpPortPER"), ("HUAWEI-WLAN-DEVICE-MIB", "hwAPWirelessUpPortTraffic"), ("HUAWEI-WLAN-DEVICE-MIB", "hwAPUpPortTraffic"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApAirportSendDropFrames"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApEthportRecvDropFrames"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApAirportUpTraffic"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApAirportDwTraffic"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApEthportDwTraffic"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApEthportUpTraffic"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApAirportRecvDropPacket"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApAirportRecvErrorPacket"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApEthportRecvUnicastPacket"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApEthportRecvNonUnicastPacket"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApEthportSendUnicastPacket"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApEthportSendNonUnicastPacket"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApAvgRCPUUseRate"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApAvgRMemoryUseRate"), ("HUAWEI-WLAN-DEVICE-MIB", "hwEthportSendDropFrames"), ("HUAWEI-WLAN-DEVICE-MIB", "hwEthportSendErrorFrames"), ("HUAWEI-WLAN-DEVICE-MIB", "hwEthportUpDwnTimes"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApAirportRecvUnicastFrames"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApEthportRecvUnknownFrames"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApEthportUpRate"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApEthportDownRate"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApUnauthorizedApType"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApUnauthorizedApMacAddress"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApUnauthorizedApSn"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApUnauthorizedApIpAddress"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApUnauthorizedApRecordTime"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApStaAveSignalStrength"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApUsedType"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApUsedProfileName"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApUsedRegionIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApSn"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApSysName"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApRunState"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApSoftwareVersion"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApHardwareVersion"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApCpuType"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApCpufrequency"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApMemoryType"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApDomain"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApIpAddress"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApIpNetMask"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApGatewayIp"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApMemorySize"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApFlashSize"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApRunTime"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApUpEthPortSpeed"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApUpEthPortSpeedMode"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApUpEthPortDuplex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApUpEthPortDuplexMode"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApAdminOper"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApRowstatus"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApPerformanceStatCycle"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApDNS"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApRunningMode"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApForwardMode"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApAntennaMode"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApCpuThreshold"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApMemThreshold"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApNEnumber"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApOnlineTime"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApSysSoftwareDesc"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApSysHardtwareDesc"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApSysManufacture"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApSysSoftwareName"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApSysSoftwareVendor"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApManagementVlanID"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApUsername"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApPassword"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApAcIP1"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApAcIP2"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApAcIP3"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApAcIP4"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApIpMode"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLldpEnable"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLldpManageAddr"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLldpPortDes"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLldpSysCab"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLldpSysDes"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLldpSysName"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLldpDelay"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLldpHoldMultiplier"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLldpInterval"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLldpRestartDelay"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLldpAdminStatus"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLldpReportInterval"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApBomCode")], [("HUAWEI-WLAN-DEVICE-MIB", "hwMacApProtectAcPriority"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApProtectAcIP"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApOpticalHighRxPowerThreshold"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApOpticalLowRxPowerThreshold"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApOpticalHighTemperatureThreshold"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApOpticalLowTemperatureThreshold"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApKeepService"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApPriorityAccessMode"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLineateportMode"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLineateportVlanTagged"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLineateportVlanUntagged"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLineateportPvidVlan"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLineateportUserIsolate"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLineateportStpEnable"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApHighTemperatureThreshold"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLowTemperatureThreshold"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApReset"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApStaticIpAddress"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApStaticNetMask"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApStaticGatewayIp"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApAttackFloodInterval"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMACApAttackFloodTimes"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMACApDynamicBlacklistEnable"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMACApDynamicBlacklistAgingInt"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMACApAttackPskInterval"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMACApAttackPskTimes"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMACApAccessBalanceGap"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMACApIpv6Address"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMACApIpv6NetMask"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMACApGatewayIpv6"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMACApIpv6DNS"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMACApProtectAcIPv6Addr"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMACApLineatePortCfgMtu"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMACApLineatePortMacAddress"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMACApAccessBalanceSwitch"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMACApNatIpAddress"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMACApAttackFloodQuietTime"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMACApAttackPskQuietTime"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMACApAttackWeakivQuietTime"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMACApAttackSpoofQuietTime"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMACApBootCountTotal"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMACApBootCountPowerOff"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMACApBootCountRowStatus"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLineatePortType"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLineatePortDesc"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLineatePortState"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLineatePortSpeed"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApMultiLineatePortDuplex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApMultiLineatePortNegotiation"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApMultiLineatePortMode"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApMultiLineatePortUserIsolate"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApMultiLineatePortStpEnable"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApMultiLineatePortVlanTagged"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApMultiLineatePortVlanUntagged"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApMultiLineatePortPvidVlan"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApMultiLineatePortCRCErrorHighThreshold"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApMultiLineatePortCRCErrorLowThreshold"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApMultiLineatePortCRCErrorSwitch"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLineatePortAclNumInbound"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLineatePortAclNumOutbound"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLineatePortAclNameInbound"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLineatePortAclNameOutbound"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLineatePortAclSwitchInbound"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLineatePortAclSwitchOutbound"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLineatePortAclNumInboundIPV6"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLineatePortAclNumOutboundIPV6"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLineatePortAclNameInboundIPV6"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLineatePortAclNameOutboundIPV6"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLineatePortAclSwitchInboundIPV6"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLineatePortAclSwitchOutboundIPV6"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApMultiLineatePortIsAddInTrunk"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApMultiLineatePortAddedOrExitTrunkID"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApMemoryUseRate"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApCpuUseRate"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApFlashFreeSize"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApTemperature"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApOnlineUserNum"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApUpPortSpeed"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApUpPortRecvFrames"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApUpPortRecvRightFrames"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApUpPortRecvErrorFrames"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApUpPortSendFrames"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApUpPortRecvBytes"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApUpPortSendBytes"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacAPUpPortPER"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacAPWirelessUpPortTraffic"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacAPUpPortTraffic"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApAirportSendDropFrames"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApEthportRecvDropFrames"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApAirportUpTraffic"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApAirportDwTraffic"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApEthportDwTraffic"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApEthportUpTraffic"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApAirportRecvDropPacket"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApAirportRecvErrorPacket"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApEthportRecvUnicastPacket"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApEthportRecvNonUnicastPacket"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApEthportSendUnicastPacket"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApEthportSendNonUnicastPacket"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApAvgRCPUUseRate"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApAvgRMemoryUseRate"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacEthportSendDropFrames"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacEthportSendErrorFrames"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacEthportUpDwnTimes"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApAirportRecvUnicastFrames"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApEthportRecvUnknownFrames"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacEthportUpRate"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacEthportDownRate"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLineportDesc"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLineportType"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLineportMtu"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLineportSpeed"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLineportMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLineportAdminStatus"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLineportNum"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLineportDesc"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLineportType"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLineportMtu"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLineportSpeed"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLineportMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLineportAdminStatus"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLineportNum"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLldpRemChassisIdSubtype"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLldpRemChassisId"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLldpRemPortIdSubtype"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLldpRemPortId"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLldpRemPortDesc"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLldpRemSysName"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLldpRemSysDesc"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLldpRemSysCapSupported"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLldpRemSysCapEnabled"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLldpRemChassisIdSubtype"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLldpRemChassisId"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLldpRemPortIdSubtype"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLldpRemPortId"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLldpRemPortDesc"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLldpRemSysName"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLldpRemSysDesc"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLldpRemSysCapSupported"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApLldpRemSysCapEnabled"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLldpRemManAddrIfSubtype"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLldpRemManAddrIfId"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApLldpRemManAddrOID"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMACApLldpRemManAddrIfSubtype"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMACApLldpRemManAddrIfId"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMACApLldpRemManAddrOID"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalNominalBitRate"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalLinkLen9X125km"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalLinkLen50X125X100m"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalLinkLen62p5X125X10m"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalLinkLenCopper"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalSfpConnector"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalDdmVoltage"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalDdmTxBiasCurrent"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalDdmTxPower"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalDdmRxPower"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalDdmTemperature"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalVdndorOui"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalVendorName"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalVendorPn"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalVendorRev"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApOpticalVendorSn"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApOpticalNominalBitRate"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApOpticalLinkLen9X125km"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApOpticalLinkLen50X125X100m"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApOpticalLinkLen62p5X125X10m"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApOpticalLinkLenCopper"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApOpticalSfpConnector"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApOpticalDdmVoltage"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApOpticalDdmTxBiasCurrent"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApOpticalDdmTxPower"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApOpticalDdmRxPower"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApOpticalDdmTemperature"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApOpticalVdndorOui"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApOpticalVendorName"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApOpticalVendorPn"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApOpticalVendorRev"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApOpticalVendorSn"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApSysnameApId"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApSysnameApMac"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApElectronicLabel"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMacApElectronicLabel")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        hwApGroup = hwApGroup.setObjects(*_hwApGroup_obj)
    else:
        hwApGroup = hwApGroup.setObjects(*_hwApGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwApGroup = hwApGroup.setStatus('current')
if mibBuilder.loadTexts: hwApGroup.setDescription('Description.')
hwAcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 2, 9, 2, 8)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwAcIpVersion"), ("HUAWEI-WLAN-DEVICE-MIB", "hwAcIPv4Address"), ("HUAWEI-WLAN-DEVICE-MIB", "hwAcIPv6Address"), ("HUAWEI-WLAN-DEVICE-MIB", "hwAcState"), ("HUAWEI-WLAN-DEVICE-MIB", "hwAcRowStatus"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMobilityGroupMemberList"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMobilityGroupStatus"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMobilityGroupMemberOpcode"), ("HUAWEI-WLAN-DEVICE-MIB", "hwMobilityGroupMemberIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAcGroup = hwAcGroup.setStatus('current')
if mibBuilder.loadTexts: hwAcGroup.setDescription('Description.')
mibBuilder.exportSymbols("HUAWEI-WLAN-DEVICE-MIB", hwApRowstatus=hwApRowstatus, hwApConfigCommitNotify=hwApConfigCommitNotify, hwMacApHighTemperatureThreshold=hwMacApHighTemperatureThreshold, hwApLineportMtu=hwApLineportMtu, hwMacApStaticGatewayIp=hwMacApStaticGatewayIp, hwApRegionBatchReturnNumber=hwApRegionBatchReturnNumber, hwMacApLineatePortLldpPortDes=hwMacApLineatePortLldpPortDes, hwApSysHardtwareDesc=hwApSysHardtwareDesc, hwApEthportRecvUnknownFrames=hwApEthportRecvUnknownFrames, hwMacApAirportDwTraffic=hwMacApAirportDwTraffic, hwApUpPortRecvBytes64Bits=hwApUpPortRecvBytes64Bits, hwMacApLldpTable=hwMacApLldpTable, hwApLldpRemSysName=hwApLldpRemSysName, hwMacApAirportUpTraffic=hwMacApAirportUpTraffic, hwApProfileBatchReturnNumber=hwApProfileBatchReturnNumber, hwMACApAttackPskQuietTime=hwMACApAttackPskQuietTime, hwMacApUpPortRecvFrames=hwMacApUpPortRecvFrames, hwApSnBlacklistSn=hwApSnBlacklistSn, hwApUsername=hwApUsername, hwApLineateportVlanUntagged=hwApLineateportVlanUntagged, hwApUnauthorizedApSn=hwApUnauthorizedApSn, hwApProfileRowStatus=hwApProfileRowStatus, hwMacApLineportMtu=hwMacApLineportMtu, hwMacAplldpRemManAddrTable=hwMacAplldpRemManAddrTable, hwApLinePortInNonUnicastPkts=hwApLinePortInNonUnicastPkts, hwMacAPWirelessUpPortTraffic=hwMacAPWirelessUpPortTraffic, hwApLineportAdminStatus=hwApLineportAdminStatus, hwApLinePortInDiscardPkts=hwApLinePortInDiscardPkts, hwMacApLineatePortAclSwitchInboundIPV6=hwMacApLineatePortAclSwitchInboundIPV6, hwApConfirmNotify=hwApConfirmNotify, hwMacApRunTime=hwMacApRunTime, hwMacApMultiLineatePortCRCErrorHighThreshold=hwMacApMultiLineatePortCRCErrorHighThreshold, hwApFmeaPHYFaultNotify=hwApFmeaPHYFaultNotify, hwApEntry=hwApEntry, hwApFaultInfo=hwApFaultInfo, hwMacApLldpManageAddr=hwMacApLldpManageAddr, hwApLedSwitch=hwApLedSwitch, hwMACApLineatePortCfgMtu=hwMACApLineatePortCfgMtu, hwStationOnlineNotify=hwStationOnlineNotify, hwMacApLineportAdminStatus=hwMacApLineportAdminStatus, hwApRegionBatchNumber=hwApRegionBatchNumber, hwApIpMode=hwApIpMode, hwApAirportUpTraffic=hwApAirportUpTraffic, hwApLineportStatTable=hwApLineportStatTable, hwApSysnameTable=hwApSysnameTable, hwApAuthMode=hwApAuthMode, hwMACApGatewayIpv6=hwMACApGatewayIpv6, hwMacApLinePortInUnicastPkts=hwMacApLinePortInUnicastPkts, hwApBatchState=hwApBatchState, hwApLineportSpeed=hwApLineportSpeed, hwMacApOpticalDdmTxBiasCurrent=hwMacApOpticalDdmTxBiasCurrent, hwApFmeaFaultNotify=hwApFmeaFaultNotify, hwMACApAccessBalanceSwitch=hwMACApAccessBalanceSwitch, hwApRegionBatchStart=hwApRegionBatchStart, hwMacApLineatePortLldpRemSysDesc=hwMacApLineatePortLldpRemSysDesc, hwMacApMemorySize=hwMacApMemorySize, hwMacApEthportDwTraffic=hwMacApEthportDwTraffic, hwApOpticalLowTemperatureThreshold=hwApOpticalLowTemperatureThreshold, hwMacApTable=hwMacApTable, hwMacApLineateportStpEnable=hwMacApLineateportStpEnable, hwApArpAttackSrcIP=hwApArpAttackSrcIP, hwMacApFlashFreeSize=hwMacApFlashFreeSize, hwApGatewayIp=hwApGatewayIp, hwMacEthportSendErrorFrames=hwMacEthportSendErrorFrames, hwApEthportSendNonUnicastPacket64Bits=hwApEthportSendNonUnicastPacket64Bits, hwApLineatePortLldpRemSysDesc=hwApLineatePortLldpRemSysDesc, hwMacApSysSoftwareVendor=hwMacApSysSoftwareVendor, hwMacApEthportSendUnicastPacket=hwMacApEthportSendUnicastPacket, hwAPBroadcastStormUpNotify=hwAPBroadcastStormUpNotify, hwApUnauthorizedApRecordTable=hwApUnauthorizedApRecordTable, hwMacApSysHardtwareDesc=hwMacApSysHardtwareDesc, hwApBroadcastRestrainDownNotify=hwApBroadcastRestrainDownNotify, hwMacApOpticalNominalBitRate=hwMacApOpticalNominalBitRate, hwApMemThreshold=hwApMemThreshold, hwApMultiLineatePortUserIsolate=hwApMultiLineatePortUserIsolate, hwMacApLineatePortLldpSysName=hwMacApLineatePortLldpSysName, hwApTypeGroup=hwApTypeGroup, hwApTypeRadioType=hwApTypeRadioType, hwApSysSoftwareName=hwApSysSoftwareName, hwMacApLineatePortLldpSysCab=hwMacApLineatePortLldpSysCab, hwMACApLineatePortLldpRemManAddrSubtype=hwMACApLineatePortLldpRemManAddrSubtype, hwApProfileGroup=hwApProfileGroup, hwApActualType=hwApActualType, hwApMultiLineatePortStpEnable=hwApMultiLineatePortStpEnable, hwMacApPerformanceStatEntry=hwMacApPerformanceStatEntry, hwApRunTime=hwApRunTime, hwApOfflineManagement=hwApOfflineManagement, hwApLineportMac=hwApLineportMac, hwCrcErrActual=hwCrcErrActual, hwApSysName=hwApSysName, hwMacApGatewayIp=hwMacApGatewayIp, hwApUpPortSpeed=hwApUpPortSpeed, hwMACApAttackWeakivQuietTime=hwMACApAttackWeakivQuietTime, hwApBatchIndexNumber=hwApBatchIndexNumber, hwApPhysicalAttrEntry=hwApPhysicalAttrEntry, hwMacApMultiLineatePortVlanUntagged=hwMacApMultiLineatePortVlanUntagged, hwWlanDeviceNotify=hwWlanDeviceNotify, hwMacApIpMode=hwMacApIpMode, hwMacApLinePortOutUnicastPkts=hwMacApLinePortOutUnicastPkts, hwApSnWhitelistBatchQueryNumber=hwApSnWhitelistBatchQueryNumber, hwMacApEthportSendNonUnicastPacket=hwMacApEthportSendNonUnicastPacket, hwMacApLldpRemPortDesc=hwMacApLldpRemPortDesc, hwApOpticalSfpConnector=hwApOpticalSfpConnector, hwApTypeRowStatus=hwApTypeRowStatus, hwApCpuOverloadNotify=hwApCpuOverloadNotify, hwApTemperatureTooHighNotify=hwApTemperatureTooHighNotify, hwApSnBlacklistTable=hwApSnBlacklistTable, hwApUpEthPortDuplex=hwApUpEthPortDuplex, hwApUpEthPortDuplexMode=hwApUpEthPortDuplexMode, hwApMacWhitelistBatchQueryInfo=hwApMacWhitelistBatchQueryInfo, hwApCpuThreshold=hwApCpuThreshold, hwApAttackFloodQuietTime=hwApAttackFloodQuietTime, hwApDestRegionIndex=hwApDestRegionIndex, hwMacApLldpEntry=hwMacApLldpEntry, hwApOpticalDdmTemperature=hwApOpticalDdmTemperature, hwMACApAccessBalanceGap=hwMACApAccessBalanceGap, hwApOfflineMac=hwApOfflineMac, hwAPStaFullRecoverNotify=hwAPStaFullRecoverNotify, hwMacApStaticNetMask=hwMacApStaticNetMask, hwApLineateportUserIsolate=hwApLineateportUserIsolate, hwApAuthListGroup=hwApAuthListGroup, hwApEapStartUnicastMac=hwApEapStartUnicastMac, hwApLldpHoldMultiplier=hwApLldpHoldMultiplier, hwApAvgRCPUUseRate=hwApAvgRCPUUseRate, hwApEthportRecvNonUnicastPacket64Bits=hwApEthportRecvNonUnicastPacket64Bits, hwApRegionDefault=hwApRegionDefault, hwMacApUpPortSendFrames64Bits=hwMacApUpPortSendFrames64Bits, hwMACApIpv6DNS=hwMACApIpv6DNS, hwApBroadcastRestrainUpRestoreNotify=hwApBroadcastRestrainUpRestoreNotify, hwMacApLldpRemSysCapSupported=hwMacApLldpRemSysCapSupported, hwMacApOpticalInfoTable=hwMacApOpticalInfoTable, hwApLinePortStatClear=hwApLinePortStatClear, hwApPingTimeOut=hwApPingTimeOut, hwApFaultNotifyFat=hwApFaultNotifyFat, hwApUsedRegionIndex=hwApUsedRegionIndex, hwMacApUsedRegionIndex=hwMacApUsedRegionIndex, hwApLldpEnable=hwApLldpEnable, hwMacApUpEthPortDuplex=hwMacApUpEthPortDuplex, hwMacApMultiLineatePortIsAddInTrunk=hwMacApMultiLineatePortIsAddInTrunk, hwMacApLineatePortLldpRemPortDesc=hwMacApLineatePortLldpRemPortDesc, hwApAlarmRestrictionPeriod=hwApAlarmRestrictionPeriod, hwApStaAveSignalStrength=hwApStaAveSignalStrength, hwApAcIP1=hwApAcIP1, hwApArpActualRate=hwApArpActualRate, hwApUpPortSendBytes=hwApUpPortSendBytes, hwMACApDynamicBlacklistEnable=hwMACApDynamicBlacklistEnable, hwMacApLldpAdminStatus=hwMacApLldpAdminStatus, hwApLineatePortLldpHoldMultiplier=hwApLineatePortLldpHoldMultiplier, hwApOpticalVendorPn=hwApOpticalVendorPn, hwMacApLldpRemSysName=hwMacApLldpRemSysName, hwApLldpRemManAddr=hwApLldpRemManAddr, hwMacApLineatePortAclNameOutboundIPV6=hwMacApLineatePortAclNameOutboundIPV6, hwUnAuthorizedApRecordClearNotify=hwUnAuthorizedApRecordClearNotify, hwMacApMultiLineatePortPvidVlan=hwMacApMultiLineatePortPvidVlan, hwApPingApMac=hwApPingApMac, hwApPriorityAccessMode=hwApPriorityAccessMode, hwAcEntry=hwAcEntry, hwApObjects=hwApObjects, hwApOpticalRxPowerTooHighRestoreNotify=hwApOpticalRxPowerTooHighRestoreNotify, hwApElectronicLabel=hwApElectronicLabel, hwApLicenseNotify=hwApLicenseNotify, hwApLldpSysName=hwApLldpSysName, hwMacApLldpPortDes=hwMacApLldpPortDes, hwApUnauthorizedApRecordIndex=hwApUnauthorizedApRecordIndex, hwMacApIpNetMask=hwMacApIpNetMask, hwAcSystemSwitchType=hwAcSystemSwitchType, hwMacApLineatePortLldpEnable=hwMacApLineatePortLldpEnable, hwApOpticalTemperatureTooHighRestoreNotify=hwApOpticalTemperatureTooHighRestoreNotify, hwBroadcastRestrainThresholdUp=hwBroadcastRestrainThresholdUp, hwMobilityGroupStatus=hwMobilityGroupStatus, hwWlanDeviceObjects=hwWlanDeviceObjects, hwApRegionApNumber=hwApRegionApNumber, hwMacApMultiLineatePortAddedOrExitTrunkID=hwMacApMultiLineatePortAddedOrExitTrunkID, hwApLldpRemManAddrSubtype=hwApLldpRemManAddrSubtype, hwApEthportRecvUnicastPacket64Bits=hwApEthportRecvUnicastPacket64Bits, hwMacApStaticIpAddress=hwMacApStaticIpAddress, hwStationSignalStrengthLowThanThresholdNotify=hwStationSignalStrengthLowThanThresholdNotify, hwApMultiLineatePortMode=hwApMultiLineatePortMode, hwMacApLineatePortLldpRemChassisIdSubtype=hwMacApLineatePortLldpRemChassisIdSubtype, hwMacApLinePortOutNonUnicastPkts=hwMacApLinePortOutNonUnicastPkts, hwApRegionName=hwApRegionName, hwMacApLldpRemIndex=hwMacApLldpRemIndex, hwApLinePortUpDwnTimes=hwApLinePortUpDwnTimes, hwMacApLineatePortLldpEntry=hwMacApLineatePortLldpEntry, hwMacApOpticalDdmTemperature=hwMacApOpticalDdmTemperature, hwApLineatePortLldpCfgEntry=hwApLineatePortLldpCfgEntry, hwMacApLineatePortLldpRestartDelay=hwMacApLineatePortLldpRestartDelay, hwMacApRunState=hwMacApRunState, hwApFaultNotify=hwApFaultNotify, hwApArpAttackDropNum=hwApArpAttackDropNum, hwApLineateportVlanTagged=hwApLineateportVlanTagged, hwApLineatePortLldpRemSysCapSupported=hwApLineatePortLldpRemSysCapSupported, hwApMemoryOverloadRestoreNotify=hwApMemoryOverloadRestoreNotify, hwApLineatePortAclSwitchInboundIPV6=hwApLineatePortAclSwitchInboundIPV6, hwMacAPUpPortTraffic64Bits=hwMacAPUpPortTraffic64Bits, hwApOpticalRxPowerTooHighNotify=hwApOpticalRxPowerTooHighNotify, hwApAttackFloodTimes=hwApAttackFloodTimes, hwMacApProtectAcIP=hwMacApProtectAcIP, hwMacApUpPortRecvRightFrames=hwMacApUpPortRecvRightFrames, hwMacApLineportInfoEntry=hwMacApLineportInfoEntry, hwApLldpRemSysCapEnabled=hwApLldpRemSysCapEnabled, hwApRegionCalibrateChannel2G=hwApRegionCalibrateChannel2G, hwAp4WayHandshakeRoamPolicy=hwAp4WayHandshakeRoamPolicy, hwAplldpRemManAddrEntry=hwAplldpRemManAddrEntry, hwMacApLineatePortAclSwitchOutboundIPV6=hwMacApLineatePortAclSwitchOutboundIPV6, hwMACApIpv6NetMask=hwMACApIpv6NetMask, hwMacApLldpRestartDelay=hwMacApLldpRestartDelay, hwMacApFlashSize=hwMacApFlashSize, hwApStatisticsInterval=hwApStatisticsInterval, hwMacApLineatePortLldpAdminStatus=hwMacApLineatePortLldpAdminStatus, hwMacApAntennaMode=hwMacApAntennaMode, hwApPermitStaNum=hwApPermitStaNum, hwMacApLldpRemSysCapEnabled=hwMacApLldpRemSysCapEnabled, hwApLinePortInPkts=hwApLinePortInPkts, hwApLineatePortLldpTable=hwApLineatePortLldpTable, hwApLinePortInErrorPkts=hwApLinePortInErrorPkts, hwWlanDeviceNotifications=hwWlanDeviceNotifications, hwApEthportDwTraffic=hwApEthportDwTraffic, hwAPBroadcastStormDownRestoreNotify=hwAPBroadcastStormDownRestoreNotify, hwMacApMemoryType=hwMacApMemoryType, hwMacEthportUpRate=hwMacEthportUpRate, hwApProfileDefault=hwApProfileDefault, hwMacApAcIP3=hwMacApAcIP3, hwMacApOpticalSfpConnector=hwMacApOpticalSfpConnector, hwMACApLldpRemManAddrIfSubtype=hwMACApLldpRemManAddrIfSubtype, hwMacApUpPortSendFrames=hwMacApUpPortSendFrames, hwMacApAirportSendDropFrames=hwMacApAirportSendDropFrames, hwApPhysicalAttrTable=hwApPhysicalAttrTable, hwMACApLldpRemManAddrIfId=hwMACApLldpRemManAddrIfId, hwApMultiLineatePortPvidVlan=hwApMultiLineatePortPvidVlan, hwApRegionCountryCode=hwApRegionCountryCode, hwApRegionGlobalInfo=hwApRegionGlobalInfo, hwApLineatePortLldpRemLocalPortNum=hwApLineatePortLldpRemLocalPortNum, hwMacApAdminOper=hwMacApAdminOper, hwApLogRecordFtpMode=hwApLogRecordFtpMode, hwMacApOnlineUserNum=hwMacApOnlineUserNum, hwMacApAcIP1=hwMacApAcIP1, hwApLineatePortAclSwitchOutboundIPV6=hwApLineatePortAclSwitchOutboundIPV6, hwApLineatePortAclSwitchInbound=hwApLineatePortAclSwitchInbound, hwApFmeaPHYFaultRestoreNotify=hwApFmeaPHYFaultRestoreNotify, hwApRegionBatchNameList=hwApRegionBatchNameList, hwMacApOpticalVendorRev=hwMacApOpticalVendorRev, hwApBootCountTotal=hwApBootCountTotal, hwApLogRecordLevel=hwApLogRecordLevel, hwApPingIndex=hwApPingIndex, hwApProfileName=hwApProfileName, hwApLineatePortEntry=hwApLineatePortEntry, hwApUpPortRecvErrorFrames=hwApUpPortRecvErrorFrames, hwApHighTemperatureThreshold=hwApHighTemperatureThreshold, hwApLineatePortSpeed=hwApLineatePortSpeed, hwMacApLinePortInPkts=hwMacApLinePortInPkts, hwWlanDeviceNotifyObjects=hwWlanDeviceNotifyObjects, hwApParaStatisticEntry=hwApParaStatisticEntry, hwApProfileTable=hwApProfileTable)
mibBuilder.exportSymbols("HUAWEI-WLAN-DEVICE-MIB", hwApTemperatureTooLowRestoreNotify=hwApTemperatureTooLowRestoreNotify, hwApLldpRemSysCapSupported=hwApLldpRemSysCapSupported, hwMacApMultiLineatePortDuplex=hwMacApMultiLineatePortDuplex, hwApLldpReportInterval=hwApLldpReportInterval, hwApPingResultNotify=hwApPingResultNotify, hwApOpticalInsertNotify=hwApOpticalInsertNotify, hwMacApLineatePortLldpRemSysCapSupported=hwMacApLineatePortLldpRemSysCapSupported, hwApLinePortOutUnicastPkts=hwApLinePortOutUnicastPkts, hwApOpticalRxPowerTooLowRestoreNotify=hwApOpticalRxPowerTooLowRestoreNotify, hwApEapResponseTransform=hwApEapResponseTransform, hwApAcIP4=hwApAcIP4, hwApArpExceedThresholdNotify=hwApArpExceedThresholdNotify, hwMobilityGroupMemberOpcode=hwMobilityGroupMemberOpcode, hwWlanDeviceCompliance=hwWlanDeviceCompliance, hwApMacWhitelistBatchQueryNumber=hwApMacWhitelistBatchQueryNumber, PYSNMP_MODULE_ID=hwWlanDevice, hwMacApPassword=hwMacApPassword, hwApNEnumber=hwApNEnumber, hwApLineatePortState=hwApLineatePortState, hwApAirportDwTraffic=hwApAirportDwTraffic, hwApUpPortRecvErrorFrames64Bits=hwApUpPortRecvErrorFrames64Bits, hwMacApLinePortInNonUnicastPkts=hwMacApLinePortInNonUnicastPkts, hwMacApLineatePortState=hwMacApLineatePortState, hwApAttackWeakivQuietTime=hwApAttackWeakivQuietTime, hwApProfileBatchNumber=hwApProfileBatchNumber, hwAcGroup=hwAcGroup, hwMacApUpPortSendBytes=hwMacApUpPortSendBytes, hwApRegionDeployMode=hwApRegionDeployMode, hwMacApLldpRemChassisId=hwMacApLldpRemChassisId, hwMacApLineatePortLldpRemManAddrEntry=hwMacApLineatePortLldpRemManAddrEntry, hwAcObjects=hwAcObjects, hwApIpv6DNS=hwApIpv6DNS, hwApAntennaMode=hwApAntennaMode, hwMacApAvgRMemoryUseRate=hwMacApAvgRMemoryUseRate, hwMacApLldpRemChassisIdSubtype=hwMacApLldpRemChassisIdSubtype, hwApLineatePortLldpRemManAddr=hwApLineatePortLldpRemManAddr, hwAcIPv4Address=hwAcIPv4Address, hwApEthportSendUnicastPacket=hwApEthportSendUnicastPacket, hwMacApLldpHoldMultiplier=hwMacApLldpHoldMultiplier, hwApType=hwApType, hwApLldpRemManAddrIfSubtype=hwApLldpRemManAddrIfSubtype, hwApLldpRemManAddrIfId=hwApLldpRemManAddrIfId, hwMacApLinePortInErrorPkts=hwMacApLinePortInErrorPkts, hwApLineatePortLldpRestartDelay=hwApLineatePortLldpRestartDelay, hwApMemoryType=hwApMemoryType, hwApLldpSysDes=hwApLldpSysDes, hwMacApLineatePortType=hwMacApLineatePortType, hwMacApEthportRecvNonUnicastPacket=hwMacApEthportRecvNonUnicastPacket, hwMacApLineportIndex=hwMacApLineportIndex, hwMacApOfflineReason=hwMacApOfflineReason, hwApMultiLineatePortCRCErrorHighThreshold=hwApMultiLineatePortCRCErrorHighThreshold, hwApEthportRecvDropFrames=hwApEthportRecvDropFrames, hwApOpticalInfoEntry=hwApOpticalInfoEntry, hwEthportUpDwnTimes=hwEthportUpDwnTimes, hwMacApMultiLineatePortUserIsolate=hwMacApMultiLineatePortUserIsolate, hwApTypeRadioEntry=hwApTypeRadioEntry, hwApTypeLineatePortNum=hwApTypeLineatePortNum, hwMacApLineatePortLldpInterval=hwMacApLineatePortLldpInterval, hwMacApEntry=hwMacApEntry, hwSignalStrengthThreshold=hwSignalStrengthThreshold, hwStaBroadcastFlux=hwStaBroadcastFlux, hwApSrcRegionIndex=hwApSrcRegionIndex, hwApResetAllBootCountRecord=hwApResetAllBootCountRecord, hwApUnauthorizedApRecordTime=hwApUnauthorizedApRecordTime, hwMACApLineatePortLldpRemManAddrOID=hwMACApLineatePortLldpRemManAddrOID, hwApMultiLineatePortIsAddInTrunk=hwApMultiLineatePortIsAddInTrunk, hwApPingResultFailureCount=hwApPingResultFailureCount, hwApTypeLineatePortName=hwApTypeLineatePortName, hwApDynamicBlacklistEnable=hwApDynamicBlacklistEnable, hwApLineatePortLldpRemManAddrSubtype=hwApLineatePortLldpRemManAddrSubtype, hwApSnWhitelistBatchQueryList=hwApSnWhitelistBatchQueryList, hwApLineatePortLldpRemPortIdSubtype=hwApLineatePortLldpRemPortIdSubtype, hwMacApLineatePortAclNameInbound=hwMacApLineatePortAclNameInbound, hwApLineportStatEntry=hwApLineportStatEntry, hwApOpticalTemperature=hwApOpticalTemperature, hwMacApEthportSendNonUnicastPacket64Bits=hwMacApEthportSendNonUnicastPacket64Bits, hwApCRCTooHighRestoreNotify=hwApCRCTooHighRestoreNotify, hwApPerformanceStatTable=hwApPerformanceStatTable, hwApAcIP2=hwApAcIP2, hwMacApUpEthPortDuplexMode=hwMacApUpEthPortDuplexMode, hwMacApLineatePortLldpTable=hwMacApLineatePortLldpTable, hwApPassword=hwApPassword, hwMacApLinePortStatClear=hwMacApLinePortStatClear, hwApLldpRemPortDesc=hwApLldpRemPortDesc, hwApAcIP3=hwApAcIP3, hwApMultiLineatePortAddedOrExitTrunkID=hwApMultiLineatePortAddedOrExitTrunkID, hwApSnWhitelistTable=hwApSnWhitelistTable, hwAPWirelessUpPortTraffic64Bits=hwAPWirelessUpPortTraffic64Bits, hwApEthPortMtu=hwApEthPortMtu, hwMacApRowstatus=hwMacApRowstatus, hwApOpticalDdmVoltage=hwApOpticalDdmVoltage, hwApRegionObjects=hwApRegionObjects, hwApEthportUpTraffic=hwApEthportUpTraffic, hwApPingWaitTime=hwApPingWaitTime, hwApUpPortRecvFrames64Bits=hwApUpPortRecvFrames64Bits, hwMacApLineatePortAclNumOutbound=hwMacApLineatePortAclNumOutbound, hwApTypeMaxSsidNum=hwApTypeMaxSsidNum, hwApLineatePortAclNameOutbound=hwApLineatePortAclNameOutbound, hwApTemperatureTooHighRestoreNotify=hwApTemperatureTooHighRestoreNotify, hwApOpticalInfoTable=hwApOpticalInfoTable, hwApEapResponseUnicastMac=hwApEapResponseUnicastMac, hwMacApLineportDesc=hwMacApLineportDesc, hwApLineportIndex=hwApLineportIndex, hwApReceivedInvalidArpNotify=hwApReceivedInvalidArpNotify, hwApTypeDesc=hwApTypeDesc, hwMacApLineateportPvidVlan=hwMacApLineateportPvidVlan, hwMACApIpv6Address=hwMACApIpv6Address, hwApAvgRMemoryUseRate=hwApAvgRMemoryUseRate, hwMemAcIndex=hwMemAcIndex, hwOccurTime=hwOccurTime, hwApLineatePortLldpRemManAddrIfId=hwApLineatePortLldpRemManAddrIfId, hwApLineatePortLldpRemSysName=hwApLineatePortLldpRemSysName, hwApCpuOccupancyRate=hwApCpuOccupancyRate, hwMacApLineatePortLldpRemSysName=hwMacApLineatePortLldpRemSysName, hwApTypeRadioAntennaGain=hwApTypeRadioAntennaGain, hwMacApUpEthPortSpeedMode=hwMacApUpEthPortSpeedMode, hwMacApOnlineFailReason=hwMacApOnlineFailReason, hwApMultiLineatePortCRCErrorLowThreshold=hwApMultiLineatePortCRCErrorLowThreshold, hwMacApLineatePortTable=hwMacApLineatePortTable, hwMacApOpticalVendorPn=hwMacApOpticalVendorPn, hwMacApAirportRecvErrorPacket=hwMacApAirportRecvErrorPacket, hwApProfileBatchInfo=hwApProfileBatchInfo, hwApFmeaFaultRestoreNotify=hwApFmeaFaultRestoreNotify, hwApLicenseInfo=hwApLicenseInfo, hwApSnBlacklistEntry=hwApSnBlacklistEntry, hwApSysManufacture=hwApSysManufacture, hwApProtectAcIP=hwApProtectAcIP, hwApUpEthPortSpeed=hwApUpEthPortSpeed, hwApBootCountPowerOff=hwApBootCountPowerOff, hwApLldpRemChassisId=hwApLldpRemChassisId, hwApLineatePortLldpRemPortDesc=hwApLineatePortLldpRemPortDesc, hwApSnWhitelistBatchQueryInfo=hwApSnWhitelistBatchQueryInfo, hwAPStaFullNotify=hwAPStaFullNotify, hwApDomain=hwApDomain, hwMacApEthportRecvDropFrames64Bits=hwMacApEthportRecvDropFrames64Bits, hwApProfileConsoleSwitch=hwApProfileConsoleSwitch, hwApBomCode=hwApBomCode, hwApOpticalLinkLenCopper=hwApOpticalLinkLenCopper, hwApTable=hwApTable, hwDyingGaspTrapNotify=hwDyingGaspTrapNotify, hwMacApOfflineTime=hwMacApOfflineTime, hwApOpticalNominalBitRate=hwApOpticalNominalBitRate, hwApParaStatisticTable=hwApParaStatisticTable, hwMacApOnlineTime=hwMacApOnlineTime, hwMacApSysManufacture=hwMacApSysManufacture, hwApLineportInfoEntry=hwApLineportInfoEntry, hwMacApLineportStatEntry=hwMacApLineportStatEntry, hwApLineatePortAclNumOutbound=hwApLineatePortAclNumOutbound, hwApSnWhitelistEntry=hwApSnWhitelistEntry, hwApLldpRestartDelay=hwApLldpRestartDelay, hwApSaveMode=hwApSaveMode, hwMacApOpticalHighTemperatureThreshold=hwMacApOpticalHighTemperatureThreshold, hwApAttackSpoofQuietTime=hwApAttackSpoofQuietTime, hwMacApManagementVlanID=hwMacApManagementVlanID, hwMACApNatIpAddress=hwMACApNatIpAddress, hwApLineatePortLldpRemChassisId=hwApLineatePortLldpRemChassisId, hwApAddOffLineNotify=hwApAddOffLineNotify, hwMobilityGroupMemberList=hwMobilityGroupMemberList, hwApMacBlacklistRowStatus=hwApMacBlacklistRowStatus, hwApAirportRecvDropPacket=hwApAirportRecvDropPacket, hwApHardwareVersion=hwApHardwareVersion, hwMACApLldpRemManAddrOID=hwMACApLldpRemManAddrOID, hwApUnauthorizedApType=hwApUnauthorizedApType, hwMacApLineatePortLldpRemIndex=hwMacApLineatePortLldpRemIndex, hwApProfileBatchNameList=hwApProfileBatchNameList, hwApLogBackupPeriodTime=hwApLogBackupPeriodTime, hwApTemperatureTooLowNotify=hwApTemperatureTooLowNotify, hwRadioMaxSpatialStreamsNum=hwRadioMaxSpatialStreamsNum, hwMobilityGroupMemberIndex=hwMobilityGroupMemberIndex, hwApTypeReset=hwApTypeReset, hwMacApLineatePortAclSwitchInbound=hwMacApLineatePortAclSwitchInbound, hwMacApUpEthPortSpeed=hwMacApUpEthPortSpeed, hwApLogServerUserPassword=hwApLogServerUserPassword, hwApUpPortRecvBytes=hwApUpPortRecvBytes, hwBroadcastWarnThresholdUp=hwBroadcastWarnThresholdUp, hwRadioMaxVAPNum=hwRadioMaxVAPNum, hwApLineateportStpEnable=hwApLineateportStpEnable, hwApMultiLineatePortNegotiation=hwApMultiLineatePortNegotiation, hwAPBroadcastStormDownNotify=hwAPBroadcastStormDownNotify, hwApLineatePortLldpRemManAddrIfSubtype=hwApLineatePortLldpRemManAddrIfSubtype, hwMacApDNS=hwMacApDNS, hwMacApSn=hwMacApSn, hwMACApDynamicBlacklistAgingInt=hwMACApDynamicBlacklistAgingInt, hwApFaultTimes=hwApFaultTimes, hwApRegionBatchInfo=hwApRegionBatchInfo, hwMacApMultiLineatePortVlanTagged=hwMacApMultiLineatePortVlanTagged, hwApLineatePortLldpReportInterval=hwApLineatePortLldpReportInterval, hwApOpticalTemperatureTooLowNotify=hwApOpticalTemperatureTooLowNotify, hwMacApEthportRecvUnknownFrames=hwMacApEthportRecvUnknownFrames, hwAcIPv6Address=hwAcIPv6Address, hwMACApAttackFloodTimes=hwMACApAttackFloodTimes, hwApSn=hwApSn, hwAcDevicesSwitchNotify=hwAcDevicesSwitchNotify, hwMacApLineatePortLldpCfgTable=hwMacApLineatePortLldpCfgTable, hwApLineatePortLldpRemManAddrOID=hwApLineatePortLldpRemManAddrOID, hwMacApForwardMode=hwMacApForwardMode, hwApStaticIpAddress=hwApStaticIpAddress, hwApPingResultMinimumResponseTime=hwApPingResultMinimumResponseTime, hwMacApPhysicalAttrTable=hwMacApPhysicalAttrTable, hwMacApMac=hwMacApMac, hwMacApIndex=hwMacApIndex, hwMacApLineatePortDesc=hwMacApLineatePortDesc, hwMacApCpuThreshold=hwMacApCpuThreshold, hwMacApUpPortRecvFrames64Bits=hwMacApUpPortRecvFrames64Bits, hwApRegionScanChannel5G=hwApRegionScanChannel5G, hwApOnlineTime=hwApOnlineTime, hwApMacWhitelistMacAddr=hwApMacWhitelistMacAddr, hwMacApLineportSpeed=hwMacApLineportSpeed, hwApLogServerIp=hwApLogServerIp, hwApManagementVlanID=hwApManagementVlanID, hwMacApMemoryUseRate=hwMacApMemoryUseRate, hwWlanDeviceConformance=hwWlanDeviceConformance, hwApLineatePortLldpInterval=hwApLineatePortLldpInterval, hwApReceivedInvalidArpNewNotify=hwApReceivedInvalidArpNewNotify, hwApDynamicBlacklistAgingInt=hwApDynamicBlacklistAgingInt, hwMobilityGroupName=hwMobilityGroupName, hwApSysnameEntry=hwApSysnameEntry, hwApLowTemperatureThreshold=hwApLowTemperatureThreshold, hwAcRowStatus=hwAcRowStatus, hwApLineatePortAclNumInbound=hwApLineatePortAclNumInbound, hwMacApLldpSysCab=hwMacApLldpSysCab, hwMacApLineatePortAclNameInboundIPV6=hwMacApLineatePortAclNameInboundIPV6, hwMacApLldpEnable=hwMacApLldpEnable, hwMacApEthportUpTraffic=hwMacApEthportUpTraffic, hwApTypeRadioIndex=hwApTypeRadioIndex, hwMACApLineatePortLldpRemManAddrIfId=hwMACApLineatePortLldpRemManAddrIfId, hwWlanDevice=hwWlanDevice, hwMacApAirportRecvDropPacket=hwMacApAirportRecvDropPacket, hwApOpticalVdndorOui=hwApOpticalVdndorOui, hwApLineatePortLldpEnable=hwApLineatePortLldpEnable, hwApPingAddress=hwApPingAddress, hwApEapStartTransform=hwApEapStartTransform, hwMacApMultiLineatePortMode=hwMacApMultiLineatePortMode, hwApLldpInterval=hwApLldpInterval, hwApAttackFloodInterval=hwApAttackFloodInterval, hwApSnWhitelistSn=hwApSnWhitelistSn, hwApMacWhitelistEntry=hwApMacWhitelistEntry, hwApAirportRecvDropPacket64Bits=hwApAirportRecvDropPacket64Bits, hwMacApPerformanceStatTable=hwMacApPerformanceStatTable, hwApSampleTime=hwApSampleTime, hwApTemperature=hwApTemperature, hwApRegionRowStatus=hwApRegionRowStatus, hwMacApCpuType=hwMacApCpuType, hwApLineateportPvidVlan=hwApLineateportPvidVlan, hwApMemoryOccupancyRate=hwApMemoryOccupancyRate, hwApArpAttackDstMac=hwApArpAttackDstMac, hwMacApOpticalLinkLen62p5X125X10m=hwMacApOpticalLinkLen62p5X125X10m, hwApLineatePortLldpDelay=hwApLineatePortLldpDelay, hwApTypeRadioNum=hwApTypeRadioNum, hwApLldpPortDes=hwApLldpPortDes, hwCrcPortID=hwCrcPortID, hwMacApLinePortUpDwnTimes=hwMacApLinePortUpDwnTimes, hwMacApUsedType=hwMacApUsedType, hwApOpticalDdmTxPower=hwApOpticalDdmTxPower)
mibBuilder.exportSymbols("HUAWEI-WLAN-DEVICE-MIB", hwApLocalAssocResSwitch=hwApLocalAssocResSwitch, hwApMultiLineatePortVlanUntagged=hwApMultiLineatePortVlanUntagged, hwMacApLldpSysName=hwMacApLldpSysName, hwMacApLineatePortLldpRemPortIdSubtype=hwMacApLineatePortLldpRemPortIdSubtype, hwApLineatePortDesc=hwApLineatePortDesc, hwApCRCTooHighNotify=hwApCRCTooHighNotify, hwMacApSysSoftwareDesc=hwMacApSysSoftwareDesc, hwApOnlineFailTable=hwApOnlineFailTable, hwApOpticalLinkLen62p5X125X10m=hwApOpticalLinkLen62p5X125X10m, hwMacApLldpReportInterval=hwMacApLldpReportInterval, hwMacApLineatePortAclSwitchOutbound=hwMacApLineatePortAclSwitchOutbound, hwMacApAirportRecvUnicastFrames=hwMacApAirportRecvUnicastFrames, hwMacApOfflineRowStatus=hwMacApOfflineRowStatus, hwMacApEthportRecvNonUnicastPacket64Bits=hwMacApEthportRecvNonUnicastPacket64Bits, hwApRegionGroup=hwApRegionGroup, hwMacApLinePortOutDiscardPkts=hwMacApLinePortOutDiscardPkts, hwMacApLineatePortAclNumInboundIPV6=hwMacApLineatePortAclNumInboundIPV6, hwMACApProtectAcIPv6Addr=hwMACApProtectAcIPv6Addr, hwMACApAttackFloodQuietTime=hwMACApAttackFloodQuietTime, hwApOpticalLinkLen50X125X100m=hwApOpticalLinkLen50X125X100m, hwApSysSoftwareVendor=hwApSysSoftwareVendor, hwApDosDefend=hwApDosDefend, hwApPingResultAverageResponseTime=hwApPingResultAverageResponseTime, hwMACApLineatePortMacAddress=hwMACApLineatePortMacAddress, hwMacApUpPortRecvRightFrames64Bits=hwMacApUpPortRecvRightFrames64Bits, hwMacApAvgRCPUUseRate=hwMacApAvgRCPUUseRate, hwMacApLineportType=hwMacApLineportType, hwApFlashFreeSize=hwApFlashFreeSize, hwApTypeTable=hwApTypeTable, hwApLinePortOutNonUnicastPkts=hwApLinePortOutNonUnicastPkts, hwMacApLineatePortLldpManageAddr=hwMacApLineatePortLldpManageAddr, hwApLineatePortAclNumOutboundIPV6=hwApLineatePortAclNumOutboundIPV6, hwMacApOpticalLinkLen9X125km=hwMacApOpticalLinkLen9X125km, hwApOpticalVendorRev=hwApOpticalVendorRev, hwApLineatePortLldpEntry=hwApLineatePortLldpEntry, hwMacApLineatePortLldpRemManAddrTable=hwMacApLineatePortLldpRemManAddrTable, hwApMultiLineatePortCRCErrorSwitch=hwApMultiLineatePortCRCErrorSwitch, hwApEthportRecvUnicastPacket=hwApEthportRecvUnicastPacket, hwApBatchNameList=hwApBatchNameList, hwApEthportRecvNonUnicastPacket=hwApEthportRecvNonUnicastPacket, hwMacApMultiLineatePortStpEnable=hwMacApMultiLineatePortStpEnable, hwMacApOpticalVendorName=hwMacApOpticalVendorName, hwMACApBootCountRowStatus=hwMACApBootCountRowStatus, hwApProfileDhcpTrustPort=hwApProfileDhcpTrustPort, hwMacApOpticalVendorSn=hwMacApOpticalVendorSn, hwApIpv6Address=hwApIpv6Address, hwApGatewayIpv6=hwApGatewayIpv6, hwMacApPerformanceStatCycle=hwMacApPerformanceStatCycle, hwMacApLineatePortIndex=hwMacApLineatePortIndex, hwApLinePortOutErrorsPkts=hwApLinePortOutErrorsPkts, hwApRadioNotifyPara=hwApRadioNotifyPara, hwMacApOpticalDdmVoltage=hwMacApOpticalDdmVoltage, hwApUpPortSendBytes64Bits=hwApUpPortSendBytes64Bits, hwApLogServerUsername=hwApLogServerUsername, hwAPBroadcastStormUpRestoreNotify=hwAPBroadcastStormUpRestoreNotify, hwEthportSendErrorFrames=hwEthportSendErrorFrames, hwApSysnameApMac=hwApSysnameApMac, hwApLogBackupServerIp=hwApLogBackupServerIp, hwMACApLldpRemManAddrSubtype=hwMACApLldpRemManAddrSubtype, hwApProfileMaxUserNum=hwApProfileMaxUserNum, hwAPUpPortTraffic=hwAPUpPortTraffic, hwMacApDomain=hwMacApDomain, hwMacApOpticalDdmTxPower=hwMacApOpticalDdmTxPower, hwApNormalNotifyFat=hwApNormalNotifyFat, hwMacApUsername=hwMacApUsername, hwMacApLinePortInBytes=hwMacApLinePortInBytes, hwApRegionForwardMode=hwApRegionForwardMode, hwApProfileNdTrustPort=hwApProfileNdTrustPort, hwMacApAcIP2=hwMacApAcIP2, hwApLineatePortAclNameInbound=hwApLineatePortAclNameInbound, hwApPingPacketSize=hwApPingPacketSize, hwApSysSoftwareDesc=hwApSysSoftwareDesc, hwApLinePortOutBytes=hwApLinePortOutBytes, hwApNotifyRadioId=hwApNotifyRadioId, hwApOpticalHighRxPowerThreshold=hwApOpticalHighRxPowerThreshold, hwMacApUpPortRecvErrorFrames64Bits=hwMacApUpPortRecvErrorFrames64Bits, hwApIpNetMask=hwApIpNetMask, hwApLineatePortIndex=hwApLineatePortIndex, hwMacApTemperature=hwMacApTemperature, hwMacApLineatePortLldpRemChassisId=hwMacApLineatePortLldpRemChassisId, hwMacApHardwareVersion=hwMacApHardwareVersion, hwApAirportRecvErrorPacket64Bits=hwApAirportRecvErrorPacket64Bits, hwMacApLinePortOutBytes=hwMacApLinePortOutBytes, hwMacApLineportStatTable=hwMacApLineportStatTable, hwApTypeRadioTable=hwApTypeRadioTable, hwUnAuthorizedApRecordAdmin=hwUnAuthorizedApRecordAdmin, hwMobilityGroupTable=hwMobilityGroupTable, hwApSnWhitelistRowStatus=hwApSnWhitelistRowStatus, hwMacApLineateportMode=hwMacApLineateportMode, hwMacApMultiLineatePortCRCErrorSwitch=hwMacApMultiLineatePortCRCErrorSwitch, hwMacApLineatePortLldpCfgEntry=hwMacApLineatePortLldpCfgEntry, hwCrcThreshold=hwCrcThreshold, hwApLldpRemLocalPortNum=hwApLldpRemLocalPortNum, hwMacApLldpRemSysDesc=hwMacApLldpRemSysDesc, hwMacApLineatePortLldpIndex=hwMacApLineatePortLldpIndex, hwMacApLineateportVlanTagged=hwMacApLineateportVlanTagged, hwMacApCpuUseRate=hwMacApCpuUseRate, hwApGroup=hwApGroup, hwApTypeAntennaGain=hwApTypeAntennaGain, hwApBatchInfo=hwApBatchInfo, hwApMemorySize=hwApMemorySize, hwApRunState=hwApRunState, hwMacApLinePortOutErrorsPkts=hwMacApLinePortOutErrorsPkts, hwApAirportSendDropFrames64Bits=hwApAirportSendDropFrames64Bits, hwMacApLineatePortAclNumInbound=hwMacApLineatePortAclNumInbound, hwApOnlineFailEntry=hwApOnlineFailEntry, hwApAdminOper=hwApAdminOper, hwApReset=hwApReset, hwApLldpRemIndex=hwApLldpRemIndex, hwApColdstartNotify=hwApColdstartNotify, hwApTypeLineatePortInfoTable=hwApTypeLineatePortInfoTable, hwApUsedProfileName=hwApUsedProfileName, hwApPerformanceStatEntry=hwApPerformanceStatEntry, hwApEthportSendUnicastPacket64Bits=hwApEthportSendUnicastPacket64Bits, hwUnAuthorizedApRecordNumber=hwUnAuthorizedApRecordNumber, hwApLineatePortAclNumInboundIPV6=hwApLineatePortAclNumInboundIPV6, hwApCpuUseRate=hwApCpuUseRate, hwApUsedType=hwApUsedType, hwApBatchIndexStart=hwApBatchIndexStart, hwApRegionScanChannel2G=hwApRegionScanChannel2G, hwApKeepService=hwApKeepService, hwMacApAttackFloodInterval=hwMacApAttackFloodInterval, hwMacApLinePortOutPkts=hwMacApLinePortOutPkts, hwMacApOpticalInfoEntry=hwMacApOpticalInfoEntry, hwApMultiLineatePortVlanTagged=hwApMultiLineatePortVlanTagged, hwApEapResponseMode=hwApEapResponseMode, hwApAttackPskTimes=hwApAttackPskTimes, hwApResetAllOfflineRecord=hwApResetAllOfflineRecord, hwApUpPortSendFrames=hwApUpPortSendFrames, hwApUnauthorizedApIpAddress=hwApUnauthorizedApIpAddress, hwApCfgCountryCode=hwApCfgCountryCode, hwEthportSendDropFrames=hwEthportSendDropFrames, hwApSysnameApId=hwApSysnameApId, hwApLogBackupMode=hwApLogBackupMode, hwMacApLineatePortLldpDelay=hwMacApLineatePortLldpDelay, hwApBatchIndexReturnNumber=hwApBatchIndexReturnNumber, hwWlanDeviceCompliances=hwWlanDeviceCompliances, hwApAirportRecvUnicastFrames=hwApAirportRecvUnicastFrames, hwApLineatePortLldpSysDes=hwApLineatePortLldpSysDes, hwApLineatePortLldpSysCab=hwApLineatePortLldpSysCab, hwMacApLldpDelay=hwMacApLldpDelay, hwMacApLineatePortLldpRemPortId=hwMacApLineatePortLldpRemPortId, hwMacApUsedProfileName=hwMacApUsedProfileName, hwMacApLldpRemPortIdSubtype=hwMacApLldpRemPortIdSubtype, hwMacEthportDownRate=hwMacEthportDownRate, hwApTypeObjects=hwApTypeObjects, hwApUpEthPortSpeedMode=hwApUpEthPortSpeedMode, hwMacApLineatePortLldpSysDes=hwMacApLineatePortLldpSysDes, hwMacEthportSendDropFrames=hwMacEthportSendDropFrames, hwApLinePortInUnicastPkts=hwApLinePortInUnicastPkts, hwApNotSupportCountryCodeNotify=hwApNotSupportCountryCodeNotify, hwApIpAddress=hwApIpAddress, hwApLineportType=hwApLineportType, hwMacApLineateportVlanUntagged=hwMacApLineateportVlanUntagged, hwApFlashSize=hwApFlashSize, hwMacApLineatePortEntry=hwMacApLineatePortEntry, hwMACApAttackSpoofQuietTime=hwMACApAttackSpoofQuietTime, hwMacApLowTemperatureThreshold=hwMacApLowTemperatureThreshold, hwMacApLineportNum=hwMacApLineportNum, hwApUpPortRecvRightFrames=hwApUpPortRecvRightFrames, hwStaAuthFailCause=hwStaAuthFailCause, hwMacApNEnumber=hwMacApNEnumber, hwApProfileBatchStart=hwApProfileBatchStart, hwApTypeEntry=hwApTypeEntry, hwMacApUpPortSendBytes64Bits=hwMacApUpPortSendBytes64Bits, hwApRegionIndex=hwApRegionIndex, hwMacApSaveMode=hwMacApSaveMode, hwApOpticalDdmRxPower=hwApOpticalDdmRxPower, hwApForwardMode=hwApForwardMode, hwMacApUpPortRecvErrorFrames=hwMacApUpPortRecvErrorFrames, hwApTypeLineatePortIndex=hwApTypeLineatePortIndex, hwApBootCountRowStatus=hwApBootCountRowStatus, hwApLinePortOutDiscardPkts=hwApLinePortOutDiscardPkts, hwRadioDownRecovNotifyFat=hwRadioDownRecovNotifyFat, hwApHotBootRestoreNotify=hwApHotBootRestoreNotify, hwApMemoryOverloadNOtify=hwApMemoryOverloadNOtify, hwMacApRunningMode=hwMacApRunningMode, hwApOpticalRemoveNotify=hwApOpticalRemoveNotify, hwApArpAttackSrcMac=hwApArpAttackSrcMac, hwApRegionCalibrateChannel5G=hwApRegionCalibrateChannel5G, hwApOpticalLowRxPowerThreshold=hwApOpticalLowRxPowerThreshold, hwMacApPriorityAccessMode=hwMacApPriorityAccessMode, hwApOpticalVendorName=hwApOpticalVendorName, hwApFaultID=hwApFaultID, hwWlanDeviceNotifyGroup=hwWlanDeviceNotifyGroup, hwApFmeaIICFaultRestoreNotify=hwApFmeaIICFaultRestoreNotify, hwApOpticalTemperatureTooHighNotify=hwApOpticalTemperatureTooHighNotify, hwApLldpAdminStatus=hwApLldpAdminStatus, hwApMemoryUseRate=hwApMemoryUseRate, hwApLineatePortLldpRemSysCapEnabled=hwApLineatePortLldpRemSysCapEnabled, hwApHotBootNotify=hwApHotBootNotify, hwApOpticalRxPower=hwApOpticalRxPower, hwMacApAirportRecvDropPacket64Bits=hwMacApAirportRecvDropPacket64Bits, hwApMacWhitelistBatchQueryReturnNumber=hwApMacWhitelistBatchQueryReturnNumber, hwApAttackPskQuietTime=hwApAttackPskQuietTime, hwApLldpRemSysDesc=hwApLldpRemSysDesc, hwMacAPWirelessUpPortTraffic64Bits=hwMacAPWirelessUpPortTraffic64Bits, hwApLldpTable=hwApLldpTable, hwMacApLineatePortLldpRemSysCapEnabled=hwMacApLineatePortLldpRemSysCapEnabled, hwApCpufrequency=hwApCpufrequency, hwApLldpManageAddr=hwApLldpManageAddr, hwApMac=hwApMac, hwRadioDownNotifyFat=hwRadioDownNotifyFat, hwApMacWhitelistRowStatus=hwApMacWhitelistRowStatus, hwApOpticalDdmTxBiasCurrent=hwApOpticalDdmTxBiasCurrent, hwMacAplldpRemManAddrEntry=hwMacAplldpRemManAddrEntry, hwApRegionBatchDeployMode=hwApRegionBatchDeployMode, hwMacApKeepService=hwMacApKeepService, hwApMacWhitelistTable=hwApMacWhitelistTable, hwApLineatePortLldpRemManAddrTable=hwApLineatePortLldpRemManAddrTable, hwApPingResultSuccessCount=hwApPingResultSuccessCount, hwApLldpRemManAddrOID=hwApLldpRemManAddrOID, hwMacApUpPortSpeed=hwMacApUpPortSpeed, hwApProtectAcIPv6Addr=hwApProtectAcIPv6Addr, hwApEthportUpRate=hwApEthportUpRate, hwApLineatePortLldpRemPortId=hwApLineatePortLldpRemPortId, hwApBroadcastRestrainDownRestoreNotify=hwApBroadcastRestrainDownRestoreNotify, hwApMacBlacklistMacAddr=hwApMacBlacklistMacAddr, hwMobilityGroupEntry=hwMobilityGroupEntry, hwApPing=hwApPing, hwAPWirelessUpPortTraffic=hwAPWirelessUpPortTraffic, hwApLldpSysCab=hwApLldpSysCab, hwApLineportInfoTable=hwApLineportInfoTable, hwApRunningMode=hwApRunningMode, hwApMacBlacklistTable=hwApMacBlacklistTable, hwApLineatePortLldpPortDes=hwApLineatePortLldpPortDes, hwMacApOpticalHighRxPowerThreshold=hwMacApOpticalHighRxPowerThreshold, hwMacApAirportRecvErrorPacket64Bits=hwMacApAirportRecvErrorPacket64Bits, hwUnAuthorizedApRecordExistNotify=hwUnAuthorizedApRecordExistNotify, hwMACApAttackPskInterval=hwMACApAttackPskInterval, hwAplldpRemManAddrTable=hwAplldpRemManAddrTable, hwMacApLldpRemLocalPortNum=hwMacApLldpRemLocalPortNum, hwApSshSwitch=hwApSshSwitch, hwApIpv6NetMask=hwApIpv6NetMask, hwApOfflineEntry=hwApOfflineEntry, hwApPingResultFlag=hwApPingResultFlag, hwApLldpRemPortIdSubtype=hwApLldpRemPortIdSubtype, hwMACApBootCountPowerOff=hwMACApBootCountPowerOff, hwApRegionEntry=hwApRegionEntry, hwMacApLineateportUserIsolate=hwMacApLineateportUserIsolate, hwApColdBootNotify=hwApColdBootNotify, hwApLineatePortLldpManageAddr=hwApLineatePortLldpManageAddr, hwApProtectAcPriority=hwApProtectAcPriority, hwMacApCpufrequency=hwMacApCpufrequency, hwApTypeLineatePortType=hwApTypeLineatePortType, hwMacApLinePortInDiscardPkts=hwMacApLinePortInDiscardPkts, hwApOpticalLinkLen9X125km=hwApOpticalLinkLen9X125km, hwApLineateportMode=hwApLineateportMode, hwApLineatePortLldpCfgTable=hwApLineatePortLldpCfgTable, hwMACApAttackPskTimes=hwMACApAttackPskTimes, hwApLineatePortLldpAdminStatus=hwApLineatePortLldpAdminStatus, hwApEthportSendNonUnicastPacket=hwApEthportSendNonUnicastPacket, hwApAccessBalanceSwitch=hwApAccessBalanceSwitch, hwApLldpEntry=hwApLldpEntry)
mibBuilder.exportSymbols("HUAWEI-WLAN-DEVICE-MIB", hwApLldpRemPortId=hwApLldpRemPortId, hwApLineportDesc=hwApLineportDesc, hwMacApLineatePortSpeed=hwMacApLineatePortSpeed, hwApTimeSynFailNotify=hwApTimeSynFailNotify, hwApRegionApIndexMask=hwApRegionApIndexMask, hwMacEthportUpDwnTimes=hwMacEthportUpDwnTimes, hwApLineatePortMacAddress=hwApLineatePortMacAddress, hwMacApPhysicalAttrEntry=hwMacApPhysicalAttrEntry, hwApIfIndex=hwApIfIndex, hwMacApOnlineFailTime=hwMacApOnlineFailTime, hwApPingCount=hwApPingCount, hwMacAPUpPortTraffic=hwMacAPUpPortTraffic, hwApLineatePortAclNameInboundIPV6=hwApLineatePortAclNameInboundIPV6, hwApAuthListObjects=hwApAuthListObjects, hwApLineatePortTable=hwApLineatePortTable, hwMACApLldpRemManAddr=hwMACApLldpRemManAddr, hwApOnlineUserNum=hwApOnlineUserNum, hwApOpticalTemperatureTooLowRestoreNotify=hwApOpticalTemperatureTooLowRestoreNotify, hwApRegionCalibrate5gBandWidth=hwApRegionCalibrate5gBandWidth, hwApProfileEntry=hwApProfileEntry, hwApMacWhitelistBatchQueryStartNumber=hwApMacWhitelistBatchQueryStartNumber, hwMacApMultiLineatePortNegotiation=hwMacApMultiLineatePortNegotiation, hwApAlarmRestrictionMode=hwApAlarmRestrictionMode, hwAPUpPortPER=hwAPUpPortPER, hwApCpuOverloadRestoreNotify=hwApCpuOverloadRestoreNotify, hwApNotifyOrRestoreTemperature=hwApNotifyOrRestoreTemperature, hwMacApLldpInterval=hwMacApLldpInterval, hwApOpticalRxPowerTooLowNotify=hwApOpticalRxPowerTooLowNotify, hwApAccessBalanceGap=hwApAccessBalanceGap, hwApSoftwareVersion=hwApSoftwareVersion, hwMacApOpticalLinkLenCopper=hwMacApOpticalLinkLenCopper, hwApFmeaIICFaultNotify=hwApFmeaIICFaultNotify, hwApUnauthorizedApRecordEntry=hwApUnauthorizedApRecordEntry, hwApArpCfgRateThreshold=hwApArpCfgRateThreshold, hwMacApEthportRecvUnicastPacket=hwMacApEthportRecvUnicastPacket, hwApNormalNotify=hwApNormalNotify, hwApMacBlacklistEntry=hwApMacBlacklistEntry, hwApStaticGatewayIp=hwApStaticGatewayIp, hwApLineatePortAclNameOutboundIPV6=hwApLineatePortAclNameOutboundIPV6, hwMacApLldpSysDes=hwMacApLldpSysDes, hwApEthportRecvDropFrames64Bits=hwApEthportRecvDropFrames64Bits, hwApNotifyWlanId=hwApNotifyWlanId, hwApBroadcastRestrainUpNotify=hwApBroadcastRestrainUpNotify, hwMacApOpticalLinkLen50X125X100m=hwMacApOpticalLinkLen50X125X100m, hwApUpPortSendFrames64Bits=hwApUpPortSendFrames64Bits, hwMacApOnlineFailRowStatus=hwMacApOnlineFailRowStatus, hwAcState=hwAcState, hwApConflictApNameNotify=hwApConflictApNameNotify, hwApMacWhitelistBatchQueryList=hwApMacWhitelistBatchQueryList, hwApPingResultMaximumResponseTime=hwApPingResultMaximumResponseTime, hwWlanDeviceNotifyObjectsGroup=hwWlanDeviceNotifyObjectsGroup, hwMACApLineatePortLldpRemManAddrIfSubtype=hwMACApLineatePortLldpRemManAddrIfSubtype, hwMacApOpticalLowRxPowerThreshold=hwMacApOpticalLowRxPowerThreshold, hwMacApLineatePortLldpHoldMultiplier=hwMacApLineatePortLldpHoldMultiplier, hwMacApOpticalDdmRxPower=hwMacApOpticalDdmRxPower, hwApAirportSendDropFrames=hwApAirportSendDropFrames, hwApAttackPskInterval=hwApAttackPskInterval, hwApTypeMaxStaNum=hwApTypeMaxStaNum, hwApBootNotifyName=hwApBootNotifyName, hwApLineatePortLldpSysName=hwApLineatePortLldpSysName, hwMacApElectronicLabel=hwMacApElectronicLabel, hwApVersionMismatchNotify=hwApVersionMismatchNotify, hwMacApReset=hwMacApReset, hwApLineatePortType=hwApLineatePortType, hwApResetAllOnlineFailRecord=hwApResetAllOnlineFailRecord, hwMacApLineatePortLldpRemLocalPortNum=hwMacApLineatePortLldpRemLocalPortNum, hwApPerformanceStatCycle=hwApPerformanceStatCycle, hwApLineportNum=hwApLineportNum, hwApLinePortOutPkts=hwApLinePortOutPkts, hwMacApLineatePortAclNameOutbound=hwMacApLineatePortAclNameOutbound, hwApLinePortInBytes=hwApLinePortInBytes, hwApEthportDownRate=hwApEthportDownRate, hwApCpuType=hwApCpuType, hwMacApAirportSendDropFrames64Bits=hwMacApAirportSendDropFrames64Bits, hwApTypeLineatePortInfoEntry=hwApTypeLineatePortInfoEntry, hwApWorkMode=hwApWorkMode, hwApSnBlacklistRowStatus=hwApSnBlacklistRowStatus, hwApOpticalVendorSn=hwApOpticalVendorSn, hwBroadcastRestrainThresholdDown=hwBroadcastRestrainThresholdDown, hwApLineatePortLldpIndex=hwApLineatePortLldpIndex, hwApOfflineTable=hwApOfflineTable, hwMacApMemThreshold=hwMacApMemThreshold, hwCrcPortType=hwCrcPortType, hwMacApLineatePortAclNumOutboundIPV6=hwMacApLineatePortAclNumOutboundIPV6, hwAcIpVersion=hwAcIpVersion, hwMacApUpPortRecvBytes=hwMacApUpPortRecvBytes, hwApOnlineFailMac=hwApOnlineFailMac, hwMacApEthportRecvUnicastPacket64Bits=hwMacApEthportRecvUnicastPacket64Bits, hwWlanDeviceObjectGroups=hwWlanDeviceObjectGroups, hwApRegionMerge=hwApRegionMerge, hwMacApMultiLineatePortCRCErrorLowThreshold=hwMacApMultiLineatePortCRCErrorLowThreshold, hwApStaticNetMask=hwApStaticNetMask, hwApBroadcastFlux=hwApBroadcastFlux, hwApLldpRemChassisIdSubtype=hwApLldpRemChassisIdSubtype, hwMACApLineatePortLldpRemManAddr=hwMACApLineatePortLldpRemManAddr, hwAPUpPortTraffic64Bits=hwAPUpPortTraffic64Bits, hwMacApLineportMac=hwMacApLineportMac, hwStationOfflineNotify=hwStationOfflineNotify, hwApAirportRecvErrorPacket=hwApAirportRecvErrorPacket, hwApLldpDelay=hwApLldpDelay, hwApUpPortRecvFrames=hwApUpPortRecvFrames, hwApTypeNotMatchNotify=hwApTypeNotMatchNotify, hwMacApLldpRemPortId=hwMacApLldpRemPortId, hwApUnauthorizedApMacAddress=hwApUnauthorizedApMacAddress, hwRadioMaxAntennasNum=hwRadioMaxAntennasNum, hwApLogBackupServerIpv6Addr=hwApLogBackupServerIpv6Addr, hwApSnWhitelistBatchQueryReturnNumber=hwApSnWhitelistBatchQueryReturnNumber, hwApProfileTelnetSwitch=hwApProfileTelnetSwitch, hwApUpPortRecvRightFrames64Bits=hwApUpPortRecvRightFrames64Bits, hwApGlobalInfo=hwApGlobalInfo, hwApRegionTable=hwApRegionTable, hwAcTable=hwAcTable, hwMacApEthportSendUnicastPacket64Bits=hwMacApEthportSendUnicastPacket64Bits, hwApLineatePortAclSwitchOutbound=hwApLineatePortAclSwitchOutbound, hwApIndex=hwApIndex, hwApLineatePortLldpRemManAddrEntry=hwApLineatePortLldpRemManAddrEntry, hwBroadcastWarnThresholdDown=hwBroadcastWarnThresholdDown, hwMacApSysName=hwMacApSysName, hwApNatIpAddress=hwApNatIpAddress, hwApOpticalHighTemperatureThreshold=hwApOpticalHighTemperatureThreshold, hwApRegionAllExistRegionIndexMask=hwApRegionAllExistRegionIndexMask, hwApLineatePortLldpRemIndex=hwApLineatePortLldpRemIndex, hwApAllExistApIndexMask=hwApAllExistApIndexMask, hwMACApBootCountTotal=hwMACApBootCountTotal, hwMacApBomCode=hwMacApBomCode, hwApMultiLineatePortDuplex=hwApMultiLineatePortDuplex, hwApDNS=hwApDNS, hwMacApEthportRecvDropFrames=hwMacApEthportRecvDropFrames, hwMacApSysSoftwareName=hwMacApSysSoftwareName, hwMacApOpticalVdndorOui=hwMacApOpticalVdndorOui, hwApLineatePortCfgMtu=hwApLineatePortCfgMtu, hwApLineatePortLldpRemChassisIdSubtype=hwApLineatePortLldpRemChassisIdSubtype, hwApEapStartMode=hwApEapStartMode, hwMacApIpAddress=hwMacApIpAddress, hwMacApSoftwareVersion=hwMacApSoftwareVersion, hwMacApAcIP4=hwMacApAcIP4, hwMacApOpticalLowTemperatureThreshold=hwMacApOpticalLowTemperatureThreshold, hwMacApLineportInfoTable=hwMacApLineportInfoTable, hwApSnWhitelistBatchQueryStartNumber=hwApSnWhitelistBatchQueryStartNumber, hwMacApUpPortRecvBytes64Bits=hwMacApUpPortRecvBytes64Bits, hwApColdBootRestoreNotify=hwApColdBootRestoreNotify, hwMacAPUpPortPER=hwMacAPUpPortPER, hwMacApLineatePortLldpReportInterval=hwMacApLineatePortLldpReportInterval, hwMacApProtectAcPriority=hwMacApProtectAcPriority, hwApProfileObjects=hwApProfileObjects)
