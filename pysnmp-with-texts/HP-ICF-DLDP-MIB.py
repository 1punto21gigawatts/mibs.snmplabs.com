#
# PySNMP MIB module HP-ICF-DLDP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-DLDP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:33:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter64, Integer32, ObjectIdentity, Counter32, ModuleIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Unsigned32, MibIdentifier, TimeTicks, NotificationType, IpAddress, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Integer32", "ObjectIdentity", "Counter32", "ModuleIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Unsigned32", "MibIdentifier", "TimeTicks", "NotificationType", "IpAddress", "Gauge32")
TextualConvention, DisplayString, TruthValue, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue", "MacAddress")
hpicfDldpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108))
hpicfDldpMIB.setRevisions(('2014-03-07 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfDldpMIB.setRevisionsDescriptions(('Initial revision.',))
if mibBuilder.loadTexts: hpicfDldpMIB.setLastUpdated('201403070000Z')
if mibBuilder.loadTexts: hpicfDldpMIB.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfDldpMIB.setContactInfo('Hewlett-Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfDldpMIB.setDescription('This MIB module describes objects to configure the Device Link Detection (DLDP) feature.')
hpicfDldpNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 0))
hpicfDldpConfigurationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 1))
hpicfDldpStatisticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 2))
hpicfDldpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 3))
hpicfDldpScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 1, 1))
hpicfDldpScalarStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 2, 1))
hpicfDldpGlobalEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDldpGlobalEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfDldpGlobalEnable.setDescription('This object provides the status of Device Link Detection Protocol on the device. A value of TRUE enables the DLDP feature on the device. A value of FALSE disables the DLDP feature on the device.')
hpicfDldpInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDldpInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfDldpInterval.setDescription('This object provides the interval(seconds) at which the DLDP packets are advertised.')
hpicfDldpAuthMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("none", 2), ("simple", 3), ("md5", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDldpAuthMode.setStatus('current')
if mibBuilder.loadTexts: hpicfDldpAuthMode.setDescription('This object provides the authentication mechanism used in DLDP. A value of unknown(1) indicates that the authentication mode cannot be determined. This value cannot be set. A value of none(2) indicates that no authentication mode is selected for DLDP. A value of simple(3) indicates that a clear text password is used for authentication. A value of md5(4) indicates that MD5 encrypted password is used for authentication.')
hpicfDldpAuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDldpAuthPassword.setStatus('current')
if mibBuilder.loadTexts: hpicfDldpAuthPassword.setDescription('This object is used to set the authentication password. To delete a password, set the object to a zero-length octet string.')
hpicfDldpAuthPasswordEncrypted = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDldpAuthPasswordEncrypted.setStatus('current')
if mibBuilder.loadTexts: hpicfDldpAuthPasswordEncrypted.setDescription("This object provides an encrypted form of the DLDP authentication password. For SET requests, the encrypted value must be obtained from a compatible HP Networking device or generated using the 'encrypt-credentials' CLI command. This object can only be read or written when hpSwitchAuthenticationEncryptCredentialsMethod is set to a value other than 'none'.")
hpicfDldpUniShutdown = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("auto", 2), ("manual", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDldpUniShutdown.setStatus('current')
if mibBuilder.loadTexts: hpicfDldpUniShutdown.setDescription('This object determines the shutdown mode for a port when a unidirectional link is detected. A value of unknown(1) indicates that the shutdown mode cannot be determined. This value cannot be set. A value of auto (2) indicates that the port will be shut down automatically by DLDP after the detection of unidirectional link on that port. A value of manual(3) indicates that the port must be shut down manually after the detection of unidirectional link on that port. When this mode is selected, DLDP generates log and trap messages to prompt the user to shut down the unidirectional port manually.')
hpicfDldpDelayDownInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDldpDelayDownInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfDldpDelayDownInterval.setDescription('This object provides the DelayDown timer for DLDP in seconds. When the status of a DLDP enabled port changes to down, DLDP starts the DelayDown timer. When the DelayDown timer expires, the device removes the corresponding neighbor information from the database. Some devices may only allow a more restricted range of values 1..5. The default value is 1 second.')
hpicfDldpPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 1, 2), )
if mibBuilder.loadTexts: hpicfDldpPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: hpicfDldpPortConfigTable.setDescription('This table contains all ports that support DLDP.')
hpicfDldpPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpicfDldpPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfDldpPortConfigEntry.setDescription('This entry describes a port that supports DLDP.')
hpicfDldpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 1, 2, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDldpPortEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfDldpPortEnable.setDescription('This object provides the status of DLDP on ports. A value of TRUE indicates that DLDP is enabled on the port. A value of FALSE indicates that DLDP is disabled on the port.')
hpicfDldpPortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 1, 3), )
if mibBuilder.loadTexts: hpicfDldpPortStatusTable.setStatus('current')
if mibBuilder.loadTexts: hpicfDldpPortStatusTable.setDescription('This table provides the information about all the DLDP enabled ports.')
hpicfDldpPortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpicfDldpPortStatusEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfDldpPortStatusEntry.setDescription('An entry in the table that provides the information about a single DLDP enabled port.')
hpicfDldpPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("initial", 2), ("inactive", 3), ("unidirectional", 4), ("bidirectional", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDldpPortOperStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfDldpPortOperStatus.setDescription('This object provides the operating status of DLDP on ports. A value of unknown (1) indicates that the operating status of DLDP cannot be determined. A value of initial (2) indicates that DLDP is enabled on port but disabled globally. A value of inactive (3) indicates that DLDP is enabled but the physical status of the port is down. A value of unidirectional (4) indicates that a unidirectional link is detected on the port. A value of bidirectional (5) indicates that a bidirectional link is detected on the port.')
hpicfDldpPortLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("down", 2), ("up", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDldpPortLinkStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfDldpPortLinkStatus.setDescription('This object provides the link status of DLDP enabled ports. A value of unknown (1) indicates that the status of the link cannot be determined. A value of down (2) indicates that the status of the link is down. A value of up (3) indicates that the status of the link is up.')
hpicfDldpPortStatTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 1, 4), )
if mibBuilder.loadTexts: hpicfDldpPortStatTable.setStatus('current')
if mibBuilder.loadTexts: hpicfDldpPortStatTable.setDescription('This table provides the statistics of DLDP ports.')
hpicfDldpPortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpicfDldpPortStatEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfDldpPortStatEntry.setDescription('An entry in the table that provides the statistics of a single DLDP port.')
hpicfDldpRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 1, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDldpRxPackets.setStatus('current')
if mibBuilder.loadTexts: hpicfDldpRxPackets.setDescription('This object provides number of DLDP packets received on the port.')
hpicfDldpTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 1, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDldpTxPackets.setStatus('current')
if mibBuilder.loadTexts: hpicfDldpTxPackets.setDescription('This object provides number of DLDP packets sent on the port.')
hpicfDldpRxValidPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 1, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDldpRxValidPackets.setStatus('current')
if mibBuilder.loadTexts: hpicfDldpRxValidPackets.setDescription('This object provides number of valid DLDP packets received on the port.')
hpicfDldpRxInvalidPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 1, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDldpRxInvalidPackets.setStatus('current')
if mibBuilder.loadTexts: hpicfDldpRxInvalidPackets.setDescription('This object provides number of invalid DLDP packets received on the port.')
hpicfDldpAuthFailedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 1, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDldpAuthFailedPackets.setStatus('current')
if mibBuilder.loadTexts: hpicfDldpAuthFailedPackets.setDescription('This object provides number of DLDP authentication failed packets received on the port.')
hpicfDldpStatClear = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 1, 4, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDldpStatClear.setStatus('current')
if mibBuilder.loadTexts: hpicfDldpStatClear.setDescription('This object clears DLDP statistics when set to TRUE. A GET request for this object always returns FALSE.')
hpicfDldpNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 1, 5), )
if mibBuilder.loadTexts: hpicfDldpNeighborTable.setStatus('current')
if mibBuilder.loadTexts: hpicfDldpNeighborTable.setDescription('This table provides the information about the devices connected on the DLDP enabled ports.')
hpicfDldpNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HP-ICF-DLDP-MIB", "hpicfDldpNeighborPortId"))
if mibBuilder.loadTexts: hpicfDldpNeighborEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfDldpNeighborEntry.setDescription('An entry in the table that provides the information about each neighbor device connected on a DLDP enabled port.')
hpicfDldpNeighborPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hpicfDldpNeighborPortId.setStatus('current')
if mibBuilder.loadTexts: hpicfDldpNeighborPortId.setDescription('This object provides the neighbor ID.')
hpicfDldpNeighborBridgeMac = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 1, 5, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDldpNeighborBridgeMac.setStatus('current')
if mibBuilder.loadTexts: hpicfDldpNeighborBridgeMac.setDescription('This object provides the bridge MAC address of a neighbor.')
hpicfDldpNeighborPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDldpNeighborPortIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfDldpNeighborPortIndex.setDescription('This object provides the port index of a neighbor.')
hpicfDldpNeighborStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("unconfirmed", 2), ("confirmed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDldpNeighborStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfDldpNeighborStatus.setDescription('This object provides the status of a neighbor. A value of unknown(1) indicates that the status of the neighbor cannot be determined. A value of unconfirmed(2) indicates that the neighbor is connected on a unidirectional link. A value of confirmed(3) indicates that the neighbor is connected on a bidirectional link.')
hpicfDldpNeighborAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 1, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDldpNeighborAgingTime.setStatus('current')
if mibBuilder.loadTexts: hpicfDldpNeighborAgingTime.setDescription('This object provides the aging time of a neighbor. This object returns a value of zero if the neighbor status is unconfirmed or unknown.')
hpicfDldpTrapUniLink = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 0, 1)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpicfDldpTrapUniLink.setStatus('current')
if mibBuilder.loadTexts: hpicfDldpTrapUniLink.setDescription('This trap is generated when DLDP detects a unidirectional link.')
hpicfDldpTrapBidLink = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 0, 2)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpicfDldpTrapBidLink.setStatus('current')
if mibBuilder.loadTexts: hpicfDldpTrapBidLink.setDescription('This trap is generated when DLDP detects a bidirectional link.')
hpicfDldpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 3, 1))
hpicfDldpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 3, 2))
hpicfDldpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 3, 1, 1)).setObjects(("HP-ICF-DLDP-MIB", "hpicfDldpScalarsGroup"), ("HP-ICF-DLDP-MIB", "hpicfDldpPortGroup"), ("HP-ICF-DLDP-MIB", "hpicfDldpNeighborGroup"), ("HP-ICF-DLDP-MIB", "hpicfDldpStatsGroup"), ("HP-ICF-DLDP-MIB", "hpicfDldpNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDldpCompliance = hpicfDldpCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfDldpCompliance.setDescription('The compliance statement for the Dldp MIB.')
hpicfDldpScalarsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 3, 2, 1)).setObjects(("HP-ICF-DLDP-MIB", "hpicfDldpGlobalEnable"), ("HP-ICF-DLDP-MIB", "hpicfDldpInterval"), ("HP-ICF-DLDP-MIB", "hpicfDldpAuthMode"), ("HP-ICF-DLDP-MIB", "hpicfDldpAuthPassword"), ("HP-ICF-DLDP-MIB", "hpicfDldpAuthPasswordEncrypted"), ("HP-ICF-DLDP-MIB", "hpicfDldpUniShutdown"), ("HP-ICF-DLDP-MIB", "hpicfDldpDelayDownInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDldpScalarsGroup = hpicfDldpScalarsGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDldpScalarsGroup.setDescription('The collection of scalr objects providing information about DLDP.')
hpicfDldpPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 3, 2, 2)).setObjects(("HP-ICF-DLDP-MIB", "hpicfDldpPortEnable"), ("HP-ICF-DLDP-MIB", "hpicfDldpPortOperStatus"), ("HP-ICF-DLDP-MIB", "hpicfDldpPortLinkStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDldpPortGroup = hpicfDldpPortGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDldpPortGroup.setDescription('The collection of port objects providing information about DLDP.')
hpicfDldpNeighborGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 3, 2, 3)).setObjects(("HP-ICF-DLDP-MIB", "hpicfDldpNeighborBridgeMac"), ("HP-ICF-DLDP-MIB", "hpicfDldpNeighborPortIndex"), ("HP-ICF-DLDP-MIB", "hpicfDldpNeighborStatus"), ("HP-ICF-DLDP-MIB", "hpicfDldpNeighborAgingTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDldpNeighborGroup = hpicfDldpNeighborGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDldpNeighborGroup.setDescription('The collection of neighbor objects providing information about DLDP.')
hpicfDldpStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 3, 2, 4)).setObjects(("HP-ICF-DLDP-MIB", "hpicfDldpRxPackets"), ("HP-ICF-DLDP-MIB", "hpicfDldpTxPackets"), ("HP-ICF-DLDP-MIB", "hpicfDldpRxValidPackets"), ("HP-ICF-DLDP-MIB", "hpicfDldpRxInvalidPackets"), ("HP-ICF-DLDP-MIB", "hpicfDldpAuthFailedPackets"), ("HP-ICF-DLDP-MIB", "hpicfDldpStatClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDldpStatsGroup = hpicfDldpStatsGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDldpStatsGroup.setDescription('The collection of statistic objects providing information about DLDP.')
hpicfDldpNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 108, 3, 2, 5)).setObjects(("HP-ICF-DLDP-MIB", "hpicfDldpTrapUniLink"), ("HP-ICF-DLDP-MIB", "hpicfDldpTrapBidLink"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDldpNotificationGroup = hpicfDldpNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDldpNotificationGroup.setDescription('A collection of trap objects providing information about DLDP.')
mibBuilder.exportSymbols("HP-ICF-DLDP-MIB", hpicfDldpNeighborTable=hpicfDldpNeighborTable, hpicfDldpNeighborStatus=hpicfDldpNeighborStatus, hpicfDldpNeighborGroup=hpicfDldpNeighborGroup, hpicfDldpAuthMode=hpicfDldpAuthMode, hpicfDldpPortOperStatus=hpicfDldpPortOperStatus, hpicfDldpRxValidPackets=hpicfDldpRxValidPackets, hpicfDldpRxInvalidPackets=hpicfDldpRxInvalidPackets, hpicfDldpStatClear=hpicfDldpStatClear, hpicfDldpPortStatusEntry=hpicfDldpPortStatusEntry, hpicfDldpCompliances=hpicfDldpCompliances, hpicfDldpNotificationGroup=hpicfDldpNotificationGroup, hpicfDldpPortStatusTable=hpicfDldpPortStatusTable, hpicfDldpNeighborAgingTime=hpicfDldpNeighborAgingTime, hpicfDldpPortConfigTable=hpicfDldpPortConfigTable, hpicfDldpStatisticsObjects=hpicfDldpStatisticsObjects, hpicfDldpPortLinkStatus=hpicfDldpPortLinkStatus, hpicfDldpConformance=hpicfDldpConformance, hpicfDldpPortGroup=hpicfDldpPortGroup, hpicfDldpScalarsGroup=hpicfDldpScalarsGroup, hpicfDldpStatsGroup=hpicfDldpStatsGroup, PYSNMP_MODULE_ID=hpicfDldpMIB, hpicfDldpScalars=hpicfDldpScalars, hpicfDldpDelayDownInterval=hpicfDldpDelayDownInterval, hpicfDldpRxPackets=hpicfDldpRxPackets, hpicfDldpNeighborEntry=hpicfDldpNeighborEntry, hpicfDldpCompliance=hpicfDldpCompliance, hpicfDldpAuthPassword=hpicfDldpAuthPassword, hpicfDldpNeighborPortId=hpicfDldpNeighborPortId, hpicfDldpMIB=hpicfDldpMIB, hpicfDldpNeighborPortIndex=hpicfDldpNeighborPortIndex, hpicfDldpScalarStats=hpicfDldpScalarStats, hpicfDldpTrapUniLink=hpicfDldpTrapUniLink, hpicfDldpTxPackets=hpicfDldpTxPackets, hpicfDldpAuthFailedPackets=hpicfDldpAuthFailedPackets, hpicfDldpPortStatEntry=hpicfDldpPortStatEntry, hpicfDldpNeighborBridgeMac=hpicfDldpNeighborBridgeMac, hpicfDldpTrapBidLink=hpicfDldpTrapBidLink, hpicfDldpNotifications=hpicfDldpNotifications, hpicfDldpGroups=hpicfDldpGroups, hpicfDldpAuthPasswordEncrypted=hpicfDldpAuthPasswordEncrypted, hpicfDldpPortEnable=hpicfDldpPortEnable, hpicfDldpUniShutdown=hpicfDldpUniShutdown, hpicfDldpGlobalEnable=hpicfDldpGlobalEnable, hpicfDldpPortStatTable=hpicfDldpPortStatTable, hpicfDldpPortConfigEntry=hpicfDldpPortConfigEntry, hpicfDldpConfigurationObjects=hpicfDldpConfigurationObjects, hpicfDldpInterval=hpicfDldpInterval)
