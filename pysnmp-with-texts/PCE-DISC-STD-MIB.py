#
# PySNMP MIB module PCE-DISC-STD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PCE-DISC-STD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:37:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
AddressFamilyNumbers, = mibBuilder.importSymbols("IANA-ADDRESS-FAMILY-NUMBERS-MIB", "AddressFamilyNumbers")
IANAipRouteProtocol, = mibBuilder.importSymbols("IANA-RTPROTO-MIB", "IANAipRouteProtocol")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Bits, Gauge32, Integer32, NotificationType, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, experimental, Counter64, MibIdentifier, ModuleIdentity, iso, Counter32, ObjectIdentity, Unsigned32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Gauge32", "Integer32", "NotificationType", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "experimental", "Counter64", "MibIdentifier", "ModuleIdentity", "iso", "Counter32", "ObjectIdentity", "Unsigned32", "TimeTicks")
TimeStamp, DisplayString, RowStatus, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "DisplayString", "RowStatus", "TruthValue", "TextualConvention")
pceDiscStdMIB = ModuleIdentity((1, 3, 6, 1, 3, 10000))
if mibBuilder.loadTexts: pceDiscStdMIB.setLastUpdated('200610150000Z')
if mibBuilder.loadTexts: pceDiscStdMIB.setOrganization('Path Computation Element (PCE) Working Group')
if mibBuilder.loadTexts: pceDiscStdMIB.setContactInfo(' Stephan Emile France Telecom DR&D Email: emile.stephan@orange-ft.com Email comments directly to the PCE WG Mailing List at pce@ietf.org WG-URL: http://www.ietf.org/html.charters/pce-charter.html ')
if mibBuilder.loadTexts: pceDiscStdMIB.setDescription('This MIB module defines a collection of objects for managing Path Computation Elements (PCEs) Discovery.')
class PceRoutingDomainID(TextualConvention, OctetString):
    description = ''
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 20)

pceDiscNotifications = MibIdentifier((1, 3, 6, 1, 3, 10000, 0))
pceDiscMIBObjects = MibIdentifier((1, 3, 6, 1, 3, 10000, 1))
pceDiscoveryObjects = MibIdentifier((1, 3, 6, 1, 3, 10000, 1, 1))
pceDiscoveryAdminStatus = MibScalar((1, 3, 6, 1, 3, 10000, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pceDiscoveryAdminStatus.setStatus('current')
if mibBuilder.loadTexts: pceDiscoveryAdminStatus.setDescription('Setting this object to disabled(2) disables the discovery of PCEs. Once disabled, The discovery must be explicitly enabled to restore discovery of PCEs. Setting this object to enabled(1) enables the discovery of PCEs.')
pceDiscoveryKnowPCEs = MibScalar((1, 3, 6, 1, 3, 10000, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pceDiscoveryKnowPCEs.setStatus('current')
if mibBuilder.loadTexts: pceDiscoveryKnowPCEs.setDescription('The number of PCEs the PCC is potentially in relation with. This includes PCE manually declared and active PCEs')
pceDiscoveryActivePCEs = MibScalar((1, 3, 6, 1, 3, 10000, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pceDiscoveryActivePCEs.setStatus('current')
if mibBuilder.loadTexts: pceDiscoveryActivePCEs.setDescription('The number of active PCEs. The detection of the activity a a PCE depends on the nature discovery mechanism. PCE discovered using PCED information received: The relation between the PCC and a PCE is active while the PCE discovery protocol maintains a communication between the PCC and this PCE. PCE Manually declared: The relation between the PCC and a PCE is active and the discovery mechanism is implementation specific; ')
pceDiscoveryTable = MibTable((1, 3, 6, 1, 3, 10000, 1, 1, 4), )
if mibBuilder.loadTexts: pceDiscoveryTable.setStatus('current')
if mibBuilder.loadTexts: pceDiscoveryTable.setDescription('Information describing the PCEs discovered.')
pceDiscoveryEntry = MibTableRow((1, 3, 6, 1, 3, 10000, 1, 1, 4, 1), ).setIndexNames((0, "PCE-DISC-STD-MIB", "pceDiscoveryIndex"))
if mibBuilder.loadTexts: pceDiscoveryEntry.setStatus('current')
if mibBuilder.loadTexts: pceDiscoveryEntry.setDescription('Information describing general information of each PCE discovered.')
pceDiscoveryIndex = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: pceDiscoveryIndex.setStatus('current')
if mibBuilder.loadTexts: pceDiscoveryIndex.setDescription('This object identifies locally the PCE for which this entry contains information.')
pceDiscoveryMechanism = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 1, 4, 1, 2), IANAipRouteProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pceDiscoveryMechanism.setStatus('current')
if mibBuilder.loadTexts: pceDiscoveryMechanism.setDescription('This object identifies the type of discovery mechanism used to discover the PCE. The discovery mechanisms covered by PCE WG at the time of the specification are : other (1), --not specified local (2), -- local interface isIs (9), -- Dual IS-IS ospf (13), -- Open Shortest Path First bgp (14), -- Border Gateway Protocol It does not preclude the usage of another routing protocol numbered by this IANAipRouteProtocol ')
pceDiscoveryIPv4Address = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 1, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pceDiscoveryIPv4Address.setStatus('current')
if mibBuilder.loadTexts: pceDiscoveryIPv4Address.setDescription('This object is the IP address to be used to reach the PCE. It corresponds to the PCED PCE-ADDRESS. . A value of 0.0.0.0 indicates the absence of this address.')
pceDiscoveryIPv6Address = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 1, 4, 1, 4), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pceDiscoveryIPv6Address.setStatus('current')
if mibBuilder.loadTexts: pceDiscoveryIPv6Address.setDescription('This object is the IPv6 address to be used to reach the PCE. It corresponds to the PCED PCE-ADDRESS. A value of ::0 indicates the absence of this address.')
pceDiscoveryTime = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 1, 4, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pceDiscoveryTime.setStatus('current')
if mibBuilder.loadTexts: pceDiscoveryTime.setDescription('The value of sysUpTime at the time this entry was created. local entry: the value of sysUpTime at the time the PCC restarted.')
pceDiscoveryLastUpdated = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 1, 4, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pceDiscoveryLastUpdated.setStatus('current')
if mibBuilder.loadTexts: pceDiscoveryLastUpdated.setDescription('The value of sysUpTime at the time this entry was last updated. Static entry: if the entry values keep unchanged since the re- initialization of the PCC then this object contains a zero value.')
pceDiscoveryCongestion = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 1, 4, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pceDiscoveryCongestion.setStatus('current')
if mibBuilder.loadTexts: pceDiscoveryCongestion.setDescription('This object indicates whether a PCE experiences a processing congestion state or not. ')
pceDiscoveryCongestionDuration = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 1, 4, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pceDiscoveryCongestionDuration.setStatus('current')
if mibBuilder.loadTexts: pceDiscoveryCongestionDuration.setDescription("This object specifies, in seconds, the congestion duration. When the value of pceDiscoveryCongestion is 'false' then this objet MUST be to '0'")
pceDiscCapabilityObjects = MibIdentifier((1, 3, 6, 1, 3, 10000, 1, 2))
pceDiscCapPathScopeTable = MibTable((1, 3, 6, 1, 3, 10000, 1, 2, 1), )
if mibBuilder.loadTexts: pceDiscCapPathScopeTable.setStatus('current')
if mibBuilder.loadTexts: pceDiscCapPathScopeTable.setDescription('Information describing the capacity of the PCEs discovered.')
pceDiscCapPathScopeEntry = MibTableRow((1, 3, 6, 1, 3, 10000, 1, 2, 1, 1), ).setIndexNames((0, "PCE-DISC-STD-MIB", "pceDiscoveryIndex"))
if mibBuilder.loadTexts: pceDiscCapPathScopeEntry.setStatus('current')
if mibBuilder.loadTexts: pceDiscCapPathScopeEntry.setDescription('Information describing the capacity of each PCE discovered.')
pceDiscCapPathScopeIntraArea = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 2, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pceDiscCapPathScopeIntraArea.setStatus('current')
if mibBuilder.loadTexts: pceDiscCapPathScopeIntraArea.setDescription("Indicates whether the PCE supports the L option of the PATH- SCOPE sub TLV: The value is 'true' if the PCE can compute intra-area path.")
pceDiscCapPathScopeInterArea = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 2, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pceDiscCapPathScopeInterArea.setStatus('current')
if mibBuilder.loadTexts: pceDiscCapPathScopeInterArea.setDescription("Indicates whether the PCE supports the R option of the PATH- SCOPE sub TLV: The value is 'true' if the PCE can act as PCE for inter-area TE LSPs computation.")
pceDiscCapPathScopeDefInterArea = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 2, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pceDiscCapPathScopeDefInterArea.setStatus('current')
if mibBuilder.loadTexts: pceDiscCapPathScopeDefInterArea.setDescription("Indicates whether the PCE supports the Rd option of the PATH- SCOPE sub TLV: The value is 'true' if the PCE can act as a default PCE for inter-area TE LSPs computation.")
pceDiscCapPathScopeInterAS = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 2, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pceDiscCapPathScopeInterAS.setStatus('current')
if mibBuilder.loadTexts: pceDiscCapPathScopeInterAS.setDescription("Indicates whether the PCE supports the S option of the PATH- SCOPE sub TLV: The value is 'true' if the PCE can act as PCE for inter-AS TE LSPs computation.")
pceDiscCapPathScopeDefInterAS = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 2, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pceDiscCapPathScopeDefInterAS.setStatus('current')
if mibBuilder.loadTexts: pceDiscCapPathScopeDefInterAS.setDescription("Indicates whether the PCE supports the Sd option of the PATH- SCOPE sub TLV: The value is 'true' if the PCE can act as a default PCE for inter-AS TE LSPs computation.")
pceDiscCapPathScopeInterLayer = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 2, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pceDiscCapPathScopeInterLayer.setStatus('current')
if mibBuilder.loadTexts: pceDiscCapPathScopeInterLayer.setDescription("Indicates whether the PCE supports the Y option of the PATH- SCOPE sub TLV: The value is 'true' if the PCE can compute or take part into the computation of paths across layers.")
pceDiscCapPathScopePrefIntraArea = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pceDiscCapPathScopePrefIntraArea.setStatus('current')
if mibBuilder.loadTexts: pceDiscCapPathScopePrefIntraArea.setDescription("Indicates the level of preference of the option of computation 'L' compared to other computation options: A value of 7 reflects the highest preference. When the value of PceDiscCapCompIntraArea is 'false' then this objet MUST be to '0'.")
pceDiscCapPathScopePrefInterArea = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pceDiscCapPathScopePrefInterArea.setStatus('current')
if mibBuilder.loadTexts: pceDiscCapPathScopePrefInterArea.setDescription("Indicates the level of preference of the option of computation 'R' compared to other computation options: A value of 7 reflects the highest preference. When the value of PceDiscCapCompInterArea is 'false' then this objet MUST be to '0'.")
pceDiscCapPathScopePrefInterAS = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pceDiscCapPathScopePrefInterAS.setStatus('current')
if mibBuilder.loadTexts: pceDiscCapPathScopePrefInterAS.setDescription("Indicates the level of preference of the option of computation 'S' compared to other computation options: A value of 7 reflects the highest preference. When the value of PceDiscCapCompInterAS is 'false' then this objet MUST be to '0'.")
pceDiscCapPathScopePrefIntLayer = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pceDiscCapPathScopePrefIntLayer.setStatus('current')
if mibBuilder.loadTexts: pceDiscCapPathScopePrefIntLayer.setDescription("Indicates the level of preference of the option of computation 'Y' compared to other computation options: A value of 7 reflects the highest preference. When the value of PceDiscCapCompInterLayer is 'false' then this objet MUST be to '0'.")
pceDiscCapDomainTable = MibTable((1, 3, 6, 1, 3, 10000, 1, 2, 2), )
if mibBuilder.loadTexts: pceDiscCapDomainTable.setStatus('current')
if mibBuilder.loadTexts: pceDiscCapDomainTable.setDescription('Information describing the set of domains where the PCE has topology visibility and can compute paths.')
pceDiscCapDomainEntry = MibTableRow((1, 3, 6, 1, 3, 10000, 1, 2, 2, 1), ).setIndexNames((0, "PCE-DISC-STD-MIB", "pceDiscoveryIndex"), (0, "PCE-DISC-STD-MIB", "pceDiscCapDomainIndex"))
if mibBuilder.loadTexts: pceDiscCapDomainEntry.setStatus('current')
if mibBuilder.loadTexts: pceDiscCapDomainEntry.setDescription('Information describing the domains of each PCE discovered.')
pceDiscCapDomainIndex = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: pceDiscCapDomainIndex.setStatus('current')
if mibBuilder.loadTexts: pceDiscCapDomainIndex.setDescription('This object identifies locally a domain for which the PCE identified by pceDiscoveryIndex has topology visibility and can compute paths.')
pceDiscCapDomainIDType = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 2, 2, 1, 2), AddressFamilyNumbers()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pceDiscCapDomainIDType.setStatus('current')
if mibBuilder.loadTexts: pceDiscCapDomainIDType.setDescription('This object identifies the type of the domainID of a PCE- DOMAIN SUB TLV. Acceptable types are : ipV4(1) and ipV6(2) for an OSPF area ID; nsap(3) for and ISIS area ID; asNumber(18) for an BGP AS number')
pceDiscCapDomainID = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 2, 2, 1, 3), PceRoutingDomainID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pceDiscCapDomainID.setStatus('current')
if mibBuilder.loadTexts: pceDiscCapDomainID.setDescription('The ID (area,AS) of the routing domain for which this entry contains information.')
pceDiscCapDestDomainTable = MibTable((1, 3, 6, 1, 3, 10000, 1, 2, 3), )
if mibBuilder.loadTexts: pceDiscCapDestDomainTable.setStatus('current')
if mibBuilder.loadTexts: pceDiscCapDestDomainTable.setDescription('Information describing the set of destination domains toward which a PCE can compute path.')
pceDiscCapDestDomainEntry = MibTableRow((1, 3, 6, 1, 3, 10000, 1, 2, 3, 1), ).setIndexNames((0, "PCE-DISC-STD-MIB", "pceDiscoveryIndex"), (0, "PCE-DISC-STD-MIB", "pceDiscCapDestDomainIndex"))
if mibBuilder.loadTexts: pceDiscCapDestDomainEntry.setStatus('current')
if mibBuilder.loadTexts: pceDiscCapDestDomainEntry.setDescription('Information describing the destination domains of each PCE.')
pceDiscCapDestDomainIndex = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: pceDiscCapDestDomainIndex.setStatus('current')
if mibBuilder.loadTexts: pceDiscCapDestDomainIndex.setDescription('This object identifies locally a destination domain toward which a PCE identified by pceDiscoveryIndex can compute path.')
pceDiscCapDestDomainIDType = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 2, 3, 1, 2), AddressFamilyNumbers()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pceDiscCapDestDomainIDType.setStatus('current')
if mibBuilder.loadTexts: pceDiscCapDestDomainIDType.setDescription('This object identifies the type of the routing domain. Acceptable types are : ipV4(1) and ipV6(2) for an OSPF area ID; nsap(3) for and ISIS area ID; asNumber(18) for an BGP AS number')
pceDiscCapDestDomainID = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 2, 3, 1, 3), PceRoutingDomainID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pceDiscCapDestDomainID.setStatus('current')
if mibBuilder.loadTexts: pceDiscCapDestDomainID.setDescription('The ID (area,AS) of the routing domain for which this entry contains information.')
pceDiscComputationOptionsObjects = MibIdentifier((1, 3, 6, 1, 3, 10000, 1, 3))
pceDiscComputationOptionsTable = MibTable((1, 3, 6, 1, 3, 10000, 1, 3, 1), )
if mibBuilder.loadTexts: pceDiscComputationOptionsTable.setStatus('current')
if mibBuilder.loadTexts: pceDiscComputationOptionsTable.setDescription('Information describing options supported by each PCE.')
pceDiscComputationOptionsEntry = MibTableRow((1, 3, 6, 1, 3, 10000, 1, 3, 1, 1), ).setIndexNames((0, "PCE-DISC-STD-MIB", "pceDiscoveryIndex"))
if mibBuilder.loadTexts: pceDiscComputationOptionsEntry.setStatus('current')
if mibBuilder.loadTexts: pceDiscComputationOptionsEntry.setDescription('Information describing the activity of the discovery mechanism of a PCE discovered. ')
pceDiscCompOptionsRpriority = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pceDiscCompOptionsRpriority.setStatus('current')
if mibBuilder.loadTexts: pceDiscCompOptionsRpriority.setDescription('The PCE identified by pceDiscoveryIndex supports for Request prioritization if the value of this object is supported(1).')
pceDiscCompOptionsMmessages = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pceDiscCompOptionsMmessages.setStatus('current')
if mibBuilder.loadTexts: pceDiscCompOptionsMmessages.setDescription(' If the value of this object is supported(1), then the PCE identified by pceDiscoveryIndex supports for multiple messages within the same request message.')
pceDiscActivityObjects = MibIdentifier((1, 3, 6, 1, 3, 10000, 1, 4))
pceDiscActivityTable = MibTable((1, 3, 6, 1, 3, 10000, 1, 4, 1), )
if mibBuilder.loadTexts: pceDiscActivityTable.setStatus('current')
if mibBuilder.loadTexts: pceDiscActivityTable.setDescription('Information describing for each PCE the activity of the discovery mechanism.')
pceDiscActivityEntry = MibTableRow((1, 3, 6, 1, 3, 10000, 1, 4, 1, 1), ).setIndexNames((0, "PCE-DISC-STD-MIB", "pceDiscoveryIndex"))
if mibBuilder.loadTexts: pceDiscActivityEntry.setStatus('current')
if mibBuilder.loadTexts: pceDiscActivityEntry.setDescription('Information describing the activity of the discovery mechanism of a PCE discovered. ')
pceDiscActivityTlvsRecv = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: pceDiscActivityTlvsRecv.setStatus('current')
if mibBuilder.loadTexts: pceDiscActivityTlvsRecv.setDescription('This object counts the number of TLV received since the discovery of the PCE.')
pceDiscActivityErroredTlvsRecv = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: pceDiscActivityErroredTlvsRecv.setStatus('current')
if mibBuilder.loadTexts: pceDiscActivityErroredTlvsRecv.setDescription('This object counts the number of Errored TVL received since the discovery of the PCE.')
pceDiscConformance = MibIdentifier((1, 3, 6, 1, 3, 10000, 2))
pceDiscGroups = MibIdentifier((1, 3, 6, 1, 3, 10000, 2, 1))
pceDiscCompliances = MibIdentifier((1, 3, 6, 1, 3, 10000, 2, 2))
pceDiscGeneralPceInformation = ModuleCompliance((1, 3, 6, 1, 3, 10000, 2, 2, 1)).setObjects()

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pceDiscGeneralPceInformation = pceDiscGeneralPceInformation.setStatus('current')
if mibBuilder.loadTexts: pceDiscGeneralPceInformation.setDescription('The compliance statement for SNMP entities that implement only general information monitoring as proposed in the 2nd S. of the section 6.1 of [RFC4674].')
pceDiscDetailledPceInformation = ModuleCompliance((1, 3, 6, 1, 3, 10000, 2, 2, 2)).setObjects()

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pceDiscDetailledPceInformation = pceDiscDetailledPceInformation.setStatus('current')
if mibBuilder.loadTexts: pceDiscDetailledPceInformation.setDescription('The compliance statement for SNMP entities that implement detailled monitoring as proposed in the 3rd S. of the section 6.1 of [RFC4674].')
mibBuilder.exportSymbols("PCE-DISC-STD-MIB", pceDiscConformance=pceDiscConformance, pceDiscCapPathScopeInterLayer=pceDiscCapPathScopeInterLayer, pceDiscCapPathScopePrefInterAS=pceDiscCapPathScopePrefInterAS, pceDiscComputationOptionsEntry=pceDiscComputationOptionsEntry, pceDiscoveryIPv4Address=pceDiscoveryIPv4Address, pceDiscMIBObjects=pceDiscMIBObjects, pceDiscCapabilityObjects=pceDiscCapabilityObjects, pceDiscCompOptionsMmessages=pceDiscCompOptionsMmessages, pceDiscCapPathScopeInterAS=pceDiscCapPathScopeInterAS, pceDiscCapPathScopePrefIntLayer=pceDiscCapPathScopePrefIntLayer, pceDiscCapDomainID=pceDiscCapDomainID, pceDiscCapDestDomainIndex=pceDiscCapDestDomainIndex, pceDiscCapPathScopeTable=pceDiscCapPathScopeTable, pceDiscCapPathScopeDefInterAS=pceDiscCapPathScopeDefInterAS, pceDiscActivityObjects=pceDiscActivityObjects, pceDiscoveryMechanism=pceDiscoveryMechanism, pceDiscNotifications=pceDiscNotifications, pceDiscStdMIB=pceDiscStdMIB, pceDiscoveryActivePCEs=pceDiscoveryActivePCEs, pceDiscoveryCongestionDuration=pceDiscoveryCongestionDuration, pceDiscCapDomainTable=pceDiscCapDomainTable, pceDiscCapDestDomainID=pceDiscCapDestDomainID, pceDiscCapPathScopePrefIntraArea=pceDiscCapPathScopePrefIntraArea, PYSNMP_MODULE_ID=pceDiscStdMIB, pceDiscCapDomainEntry=pceDiscCapDomainEntry, pceDiscCapDomainIDType=pceDiscCapDomainIDType, pceDiscCapDomainIndex=pceDiscCapDomainIndex, pceDiscActivityTable=pceDiscActivityTable, pceDiscoveryTime=pceDiscoveryTime, pceDiscDetailledPceInformation=pceDiscDetailledPceInformation, pceDiscoveryObjects=pceDiscoveryObjects, pceDiscCompOptionsRpriority=pceDiscCompOptionsRpriority, pceDiscoveryEntry=pceDiscoveryEntry, pceDiscCapPathScopeInterArea=pceDiscCapPathScopeInterArea, pceDiscCapPathScopeIntraArea=pceDiscCapPathScopeIntraArea, pceDiscGeneralPceInformation=pceDiscGeneralPceInformation, pceDiscCapDestDomainIDType=pceDiscCapDestDomainIDType, pceDiscoveryCongestion=pceDiscoveryCongestion, pceDiscCompliances=pceDiscCompliances, pceDiscComputationOptionsTable=pceDiscComputationOptionsTable, pceDiscCapDestDomainEntry=pceDiscCapDestDomainEntry, pceDiscCapPathScopeDefInterArea=pceDiscCapPathScopeDefInterArea, pceDiscoveryTable=pceDiscoveryTable, pceDiscComputationOptionsObjects=pceDiscComputationOptionsObjects, pceDiscoveryKnowPCEs=pceDiscoveryKnowPCEs, pceDiscoveryIndex=pceDiscoveryIndex, pceDiscActivityTlvsRecv=pceDiscActivityTlvsRecv, pceDiscoveryAdminStatus=pceDiscoveryAdminStatus, pceDiscActivityEntry=pceDiscActivityEntry, pceDiscCapDestDomainTable=pceDiscCapDestDomainTable, PceRoutingDomainID=PceRoutingDomainID, pceDiscGroups=pceDiscGroups, pceDiscoveryLastUpdated=pceDiscoveryLastUpdated, pceDiscActivityErroredTlvsRecv=pceDiscActivityErroredTlvsRecv, pceDiscCapPathScopePrefInterArea=pceDiscCapPathScopePrefInterArea, pceDiscCapPathScopeEntry=pceDiscCapPathScopeEntry, pceDiscoveryIPv6Address=pceDiscoveryIPv6Address)
