#
# PySNMP MIB module CISCO-SCSI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SCSI-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:57:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
IpAddress, iso, Counter32, Counter64, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, NotificationType, MibIdentifier, Gauge32, TimeTicks, ObjectIdentity, Unsigned32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "iso", "Counter32", "Counter64", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "NotificationType", "MibIdentifier", "Gauge32", "TimeTicks", "ObjectIdentity", "Unsigned32", "ModuleIdentity")
RowPointer, RowStatus, AutonomousType, TimeStamp, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowPointer", "RowStatus", "AutonomousType", "TimeStamp", "DisplayString", "TextualConvention", "TruthValue")
ciscoScsiMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 95))
ciscoScsiMIB.setRevisions(('2002-12-31 00:00', '2002-11-08 00:00', '2002-10-05 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoScsiMIB.setRevisionsDescriptions(('Changed the SYNTAX of TruthValue object in the module compliance section so that it compiles with all MIB compilers.', 'Changed the SYNTAX of RowStatus objects in the module compliance section so that it compiles with all MIB compilers.', 'Initial version of this MIB.',))
if mibBuilder.loadTexts: ciscoScsiMIB.setLastUpdated('200212310000Z')
if mibBuilder.loadTexts: ciscoScsiMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoScsiMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 -NETS E-mail: cs-san@cisco.com')
if mibBuilder.loadTexts: ciscoScsiMIB.setDescription('The Cisco version of the SCSI MIB draft draft-ietf-ips-scsi-mib-03.txt from the IETF.')
ciscoScsiObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 95, 1))
ciscoScsiNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 95, 2))
ciscoScsiConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 95, 3))
ciscoScsiTransportTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 1))
ciscoScsiGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 2))
ciscoScsiInitiator = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3))
ciscoScsiRemoteTarget = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 4))
ciscoScsiTarget = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 4))
ciscoScsiRemoteInitiators = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 4, 3))
ciscoScsiLogicalUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 5))
ciscoScsiTranportOther = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 1, 1))
ciscoScsiTranportSPI = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 1, 2))
ciscoScsiTransportFCP = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 1, 3))
ciscoScsiTransportSRP = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 1, 4))
ciscoScsiTransportISCSI = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 1, 5))
ciscoScsiTransportSBP = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 1, 6))
ciscoScsiNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 95, 2, 0))
class ScsiLUNOrZero(TextualConvention, OctetString):
    description = 'This Textual Convention represents either a SCSI Logical Unit Number (LUN) or a zero-length string. Objects defined with this syntax must specify the meaning of the zero-length string. The format of a LUN is: - a zero-length octet string or - a string of two octets if the underlying transport protocol is SBP-3 or SPI-4 using data group transfers or - a string of eight octets for all other cases.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(2, 2), ValueSizeConstraint(8, 8), )
class ScsiIndexValue(TextualConvention, Unsigned32):
    description = 'A number greater than zero for administrative indices in a table.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class ScsiPortIndexValueOrZero(TextualConvention, Unsigned32):
    description = 'This textual convention is an extension of the ScsiIndexValue convention. The latter defines a greater than zero value used to identify an index. This extension permits the additional value of zero and is applicable only to indices of SCSI port. The value zero is object-specific and must therefore be defined as part of the description of any object, which uses this syntax. Examples of the usage of zero might include situations where index was unknown, or when none or all indices need to be referenced.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

class ScsiIndexValueOrZero(TextualConvention, Unsigned32):
    description = 'This textual convention is an extension of the ScsiIndexValue convention. The latter defines a greater than zero value used to identify an index. This extension permits the additional value of zero. The value zero is object-specific and must therefore be defined as part of the description of any object, which uses this syntax. Examples of the usage of zero might include situations where index was unknown, or when none or all indices need to be referenced.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

class ScsiIdentifier(TextualConvention, OctetString):
    description = 'Denotes a generic SCSI device or port identifier. The format depends on the transport used: - SPI: only bits:0-3 for a port identifier (LSB is 0 and MSB is 3) - SPI: identifier of a device is a null-length octet string. - FCP: 3 bytes for a port identifier - FCP: identifier of a device is a null-length octet string. - SRP: 16 bytes identifier for a port. - SRP: identifier of a device is a null-length octet string. - iSCSI: 256 bytes for a device identifier. - iSCSI: 258 bytes for a target port. - iSCSI: 262 bytes for an initiator port. - SBP: identifier of a device is a null-length octet string. - SBP: 2 bytes for an initiator port identifier. - SBP: 11 bytes for a target port identifier. '
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 1), ValueSizeConstraint(2, 2), ValueSizeConstraint(3, 3), ValueSizeConstraint(11, 11), ValueSizeConstraint(16, 16), ValueSizeConstraint(256, 256), ValueSizeConstraint(258, 258), ValueSizeConstraint(262, 262), )
class ScsiName(TextualConvention, OctetString):
    description = 'Denotes a generic SCSI device or port name. The format depends on the transport used: - SPI: name of a device or a port is a null-length octet string. - FCP: 8 bytes for a port name. - FCP: name of a device is a null-length octet string. - SRP: 16 bytes name for a port. - SRP: name of a device is a null-length octet string. - iSCSI: 256 bytes for a device name. - iSCSI: 258 bytes for a target port. - iSCSI: 262 bytes for an initiator port. - SBP: name of a device is a null-length octet string. - SBP: 8 bytes for an initiator port name. - SBP: 11 bytes for a target port name. '
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(8, 8), ValueSizeConstraint(11, 11), ValueSizeConstraint(16, 16), ValueSizeConstraint(256, 256), ValueSizeConstraint(258, 258), ValueSizeConstraint(262, 262), )
class ScsiNameIdOrZero(TextualConvention, OctetString):
    description = 'This Textual Convention represents either the SCSI name of a logical unit or a zero-length string. Objects defined with this syntax must specify the meaning of the zero-length string. The format of the name of a LU is: - a zero-length octet string or - a string of eight octets.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(8, 8), )
class ScsiDeviceOrPort(TextualConvention, Integer32):
    description = 'This type allows to decide if some configuration is applicable to a port or to a device.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("device", 1), ("port", 2), ("other", 3))

class ScsiIdCodeSet(TextualConvention, Unsigned32):
    reference = ' ANSI - SCSI Primary Commands - 2 (SPC-2), Revision 20, 18 July 2001 Chapter 8: section 8.4.4, page 210 Vital Product Data Parameters [16]'
    description = "This Textual Convention specifies the code set in use with this identifier. The format is the same as contained in the identifier's Identification Descriptor within the Logical Unit's Device Identification Page."
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 15)

class ScsiIdAssociation(TextualConvention, Unsigned32):
    reference = ' ANSI - SCSI Primary Commands - 2 (SPC-2), Revision 20, 18 July 2001 - Chapter 8: section 8.4.4, page 210 Vital Product Data Parameters [16]'
    description = "This Textual Convention specifies what the identifier is associated with (e.g, with the addressed physical/logical device or with a particular port). The format is the same as contained in the identifier's Identification Descriptor within the Logical Unit's Device Identification Page."
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 3)

class ScsiIdType(TextualConvention, Unsigned32):
    reference = ' ANSI - SCSI Primary Commands - 2 (SPC-2), Revision 20, Chapter 8: section 8.4.4, page 210 Vital Product Data Parameters [16]'
    description = "This Textual Convention specifies the type of the identifier. The format is the same as contained in the identifier's Identification Descriptor within the Logical Unit's Device Identification Page."
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 15)

class ScsiIdValue(TextualConvention, OctetString):
    reference = ' ANSI - SCSI Primary Commands - 2 (SPC-2), Revision 20, 18 July 2001 - Chapter 8: section 8.4.4, page 210 Vital Product Data Parameters [16]'
    description = "This Textual Convention represents an identifier. The objects of type ScsiIdCodeSet, ScsIdAssociation, ScsiIdType, define together the format. The format is the same as contained in the identifier's Identification Descriptor within the Logical Unit's Device Identification Page."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class HrSWInstalledIndexOrZero(TextualConvention, Integer32):
    reference = 'hrSWInstalledTable is defined in the Host Resources MIB, RFC 2790.'
    description = "The index value for a software module's row in the Host Resources MIB's hrSWInstalledTable. A zero value indicates that no row in the hrSWInstalledTable is applicable."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

ciscoScsiInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 2, 1), )
if mibBuilder.loadTexts: ciscoScsiInstanceTable.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiInstanceTable.setDescription('A list of SCSI instances present on the system. The SCSI Instance is the top-level entity, to which everything else belongs. An SNMP agent could represent more than one instance if it represents either a stack of devices, or virtual partitions of a larger device, or a host running multiple SCSI implementations from different vendors.')
ciscoScsiInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-SCSI-MIB", "ciscoScsiInstIndex"))
if mibBuilder.loadTexts: ciscoScsiInstanceEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiInstanceEntry.setDescription('An entry (row) containing management information applicable to a particular SCSI instance.')
ciscoScsiInstIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 2, 1, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: ciscoScsiInstIndex.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiInstIndex.setDescription('An arbitrary integer used to uniquely identify a particular SCSI instance.')
ciscoScsiInstAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 2, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoScsiInstAlias.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiInstAlias.setDescription('An administrative string, configured by the administrator to the usage of the administrator. Can be a zero-length string.')
ciscoScsiInstSoftwareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 2, 1, 1, 3), HrSWInstalledIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiInstSoftwareIndex.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiInstSoftwareIndex.setDescription('The index in the hrSWInstalledTable of RFC 2790 corresponding to this software entity. It is equal to zero if there is no reference in the hrSWInstalledTable.')
ciscoScsiInstVendorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 2, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiInstVendorVersion.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiInstVendorVersion.setDescription('A text string set by the manufacturer describing the version of this instance. The format of this string is determined solely by the manufacturer, and is for informational purposes only. It is unrelated to the SCSI specification version numbers.')
ciscoScsiInstNotifEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 2, 1, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoScsiInstNotifEnable.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiInstNotifEnable.setDescription('This object allows to enable/disable sending notifications.')
ciscoScsiDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 2, 2), )
if mibBuilder.loadTexts: ciscoScsiDeviceTable.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiDeviceTable.setDescription('A list of SCSI Devices present on the system.')
ciscoScsiDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-SCSI-MIB", "ciscoScsiInstIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiDeviceIndex"))
if mibBuilder.loadTexts: ciscoScsiDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiDeviceEntry.setDescription('An entry (row) containing management information applicable to a particular SCSI Device included in this SCSI manageable instance.')
ciscoScsiDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 2, 2, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: ciscoScsiDeviceIndex.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiDeviceIndex.setDescription('An arbitrary integer used to uniquely identify a particular device.')
ciscoScsiDeviceAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 2, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoScsiDeviceAlias.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiDeviceAlias.setDescription('An admistrative name for this device. May be empty.')
ciscoScsiDeviceRole = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 2, 2, 1, 3), Bits().clone(namedValues=NamedValues(("target", 0), ("initiator", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiDeviceRole.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiDeviceRole.setDescription('Is this device acting as an initiator, or as a target or as both.')
ciscoScsiDevicePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiDevicePortNumber.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiDevicePortNumber.setDescription('The number of ports contained in this device.')
ciscoScsiDeviceResets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiDeviceResets.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiDeviceResets.setDescription('This object represents the number of times that this device has reset.')
ciscoScsiPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 2, 3), )
if mibBuilder.loadTexts: ciscoScsiPortTable.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiPortTable.setDescription('A list of SCSI Ports for each SCSI device in each instance.')
ciscoScsiPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-SCSI-MIB", "ciscoScsiInstIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiDeviceIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiPortIndex"))
if mibBuilder.loadTexts: ciscoScsiPortEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiPortEntry.setDescription('An entry (row) containing management information applicable to a particular SCSI port of a particular SCSI device in a particular SCSI instance.')
ciscoScsiPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 2, 3, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: ciscoScsiPortIndex.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiPortIndex.setDescription('An arbitrary integer used to uniquely identify a particular port.')
ciscoScsiPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 2, 3, 1, 2), Bits().clone(namedValues=NamedValues(("target", 0), ("initiator", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiPortRole.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiPortRole.setDescription('This object indicated whther this port is acting as an initiator, or as a target or as both.')
ciscoScsiPortTrnsptPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 2, 3, 1, 3), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiPortTrnsptPtr.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiPortTrnsptPtr.setDescription('This object is the index of the corresponding transport definition in the ciscoScsiTrnsptTable')
ciscoScsiPortBusyStatuses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiPortBusyStatuses.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiPortBusyStatuses.setDescription('This object represents the number of port busy status sent or received by this port. Note: Initiator ports only receive busy status and target ports only send busy status.')
ciscoScsiTrnsptTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 2, 5), )
if mibBuilder.loadTexts: ciscoScsiTrnsptTable.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiTrnsptTable.setDescription('This table contains a list of transports in use with each SCSI device.')
ciscoScsiTrnsptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 2, 5, 1), ).setIndexNames((0, "CISCO-SCSI-MIB", "ciscoScsiInstIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiDeviceIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiTrnsptIndex"))
if mibBuilder.loadTexts: ciscoScsiTrnsptEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiTrnsptEntry.setDescription('An entry (row) containing parameters applicable to a transport used by a particular initiator device of a particular SCSI manageable instance.')
ciscoScsiTrnsptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 2, 5, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: ciscoScsiTrnsptIndex.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiTrnsptIndex.setDescription('An administrative integer used to uniquely identify a particular transport.')
ciscoScsiTrnsptType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 2, 5, 1, 2), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiTrnsptType.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiTrnsptType.setDescription('The type of transport for this particular transport.')
ciscoScsiTrnsptPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 2, 5, 1, 3), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiTrnsptPointer.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiTrnsptPointer.setDescription("A pointer to a conceptual row in a 'transport' MIB allowing a manager to get useful information for the transport described by this entry. For example, if the transport of this device is iSCSI, this object will point to the iSCSI Instance of the iSCSI MIB. If there is no MIB for this transport, this object has the value 0.0.")
ciscoScsiTrnsptDevName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 2, 5, 1, 4), ScsiName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiTrnsptDevName.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiTrnsptDevName.setDescription('The name of this device in one of the format(s) appropriate for this type of transport.')
ciscoScsiIntrDevTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 1), )
if mibBuilder.loadTexts: ciscoScsiIntrDevTable.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiIntrDevTable.setDescription('This table contains information for each local initiator device.')
ciscoScsiIntrDevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-SCSI-MIB", "ciscoScsiInstIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiDeviceIndex"))
if mibBuilder.loadTexts: ciscoScsiIntrDevEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiIntrDevEntry.setDescription('An entry (row) containing information applicable to an initiator device.')
ciscoScsiIntrDevAccMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("autoEnable", 2), ("manualEnable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoScsiIntrDevAccMode.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiIntrDevAccMode.setDescription('This object controls whether a discovered target is immediately authorized or not: - autoEnable(2) means that when an initiator discovers a target, it can use it immediately, - manualEnable(3) means that the initiator must wait for an operator to set ciscoScsiIntrDscTgtDiscovered = true before it is authorized.')
ciscoScsiIntrDevOutResets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiIntrDevOutResets.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiIntrDevOutResets.setDescription("Number of resets sent by this initiator device since the local agent's last re-initialization.")
ciscoScsiIntrPrtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 3), )
if mibBuilder.loadTexts: ciscoScsiIntrPrtTable.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiIntrPrtTable.setDescription('This table contains all the initiator ports of each SCSI Initiator or Target/Initiator device.')
ciscoScsiIntrPrtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 3, 1), ).setIndexNames((0, "CISCO-SCSI-MIB", "ciscoScsiInstIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiDeviceIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiPortIndex"))
if mibBuilder.loadTexts: ciscoScsiIntrPrtEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiIntrPrtEntry.setDescription('An entry (row) containing information applicable to the particular initiator port. ')
ciscoScsiIntrPrtName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 3, 1, 1), ScsiName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiIntrPrtName.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiIntrPrtName.setDescription('The name of the port assigned for use by the SCSI protocol. The format will depend of the type of transport this port is using.')
ciscoScsiIntrPrtIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 3, 1, 2), ScsiIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiIntrPrtIdentifier.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiIntrPrtIdentifier.setDescription('The identifier of the port in one of the format(s) appropriate for the type of transport in use.')
ciscoScsiIntrPrtOutCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 3, 1, 3), Counter32()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiIntrPrtOutCommands.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiIntrPrtOutCommands.setDescription('This object represents the number of commands sent by this initiator.')
ciscoScsiIntrPrtWrMegaBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 3, 1, 4), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiIntrPrtWrMegaBytes.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiIntrPrtWrMegaBytes.setDescription('This object represents the amount of data in Megabytes sent by this initiator.')
ciscoScsiIntrPrtReadMegaBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 3, 1, 5), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiIntrPrtReadMegaBytes.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiIntrPrtReadMegaBytes.setDescription('This object represents the amount of data in Megabytes received by this initiator.')
ciscoScsiIntrPrtHSOutCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 3, 1, 6), Counter64()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiIntrPrtHSOutCommands.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiIntrPrtHSOutCommands.setDescription('This object represents the number of commands sent by this initiator device. This object provides support for systems which can quickly generate lots of commands because they run at high speed.')
ciscoScsiDscTgtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 4, 1), )
if mibBuilder.loadTexts: ciscoScsiDscTgtTable.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiDscTgtTable.setDescription('This table includes all the remote (not in the local system) target ports that are authorized to attach to each local initiator port of this SCSI instance.')
ciscoScsiDscTgtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 4, 1, 1), ).setIndexNames((0, "CISCO-SCSI-MIB", "ciscoScsiInstIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiDeviceIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiDscTgtIntrPortIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiDscTgtIndex"))
if mibBuilder.loadTexts: ciscoScsiDscTgtEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiDscTgtEntry.setDescription('An entry (row)represents a remote target port or device authorized to attach the local initiator device corresponding to the ciscoScsiDeviceIndex or the local initiator port ciscoScsiPortIndexOrZero. ')
ciscoScsiDscTgtIntrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 4, 1, 1, 1), ScsiPortIndexValueOrZero())
if mibBuilder.loadTexts: ciscoScsiDscTgtIntrPortIndex.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiDscTgtIntrPortIndex.setDescription('This object is: - the index of the local scsi initiator port, - or zero, if this entry refers to the local device and therefore refers to all the local initiator ports.')
ciscoScsiDscTgtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 4, 1, 1, 2), ScsiIndexValue())
if mibBuilder.loadTexts: ciscoScsiDscTgtIndex.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiDscTgtIndex.setDescription('This object is an administrative integer used to uniquely identify a particular authorized target. (Authorized to attach to this initiator device or port.)')
ciscoScsiDscTgtDevOrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 4, 1, 1, 3), ScsiDeviceOrPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoScsiDscTgtDevOrPort.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiDscTgtDevOrPort.setDescription('This object specifies if this entry refers to a remote target port or remote target device.')
ciscoScsiDscTgtName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 4, 1, 1, 4), ScsiName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoScsiDscTgtName.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiDscTgtName.setDescription('The name of this authorized/discovered target device or port.')
ciscoScsiDscTgtConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 4, 1, 1, 5), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoScsiDscTgtConfigured.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiDscTgtConfigured.setDescription('This object means: true(1): this entry has been configured by an administrator false(2): this entry has been added from other source. An administrator can switch this value from false to true.')
ciscoScsiDscTgtDiscovered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 4, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiDscTgtDiscovered.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiDscTgtDiscovered.setDescription('This object means: true(1): this entry has been discovered by the SCSI instance. false(2): this entry has been added from other source. This entry is read-only because an administrator cannot change it. Note that it is an implementation issue to decide how long to retain a row with configured=false, as and when the target is no longer visible/accessible to the local initiator.')
ciscoScsiDscTgtInCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 4, 1, 1, 7), Counter32()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiDscTgtInCommands.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiDscTgtInCommands.setDescription('This object represents the number of commands received by this target port or device.')
ciscoScsiDscTgtWrMegaBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 4, 1, 1, 8), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiDscTgtWrMegaBytes.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiDscTgtWrMegaBytes.setDescription('This object represents the amount of data in Megabytes written by this target port or device.')
ciscoScsiDscTgtReadMegaBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 4, 1, 1, 9), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiDscTgtReadMegaBytes.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiDscTgtReadMegaBytes.setDescription('This object represents the amount of data in Megabytes read by this target port or device.')
ciscoScsiDscTgtHSInCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 4, 1, 1, 10), Counter64()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiDscTgtHSInCommands.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiDscTgtHSInCommands.setDescription('This object represents the number of commands received by this target port or device. This object provides support for systems which can quickly generate lots of commands because they run at high speed.')
ciscoScsiDscTgtLastCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 4, 1, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiDscTgtLastCreation.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiDscTgtLastCreation.setDescription('This object represents the value of sysUpTime when this row was created.')
ciscoScsiDscTgtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 4, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoScsiDscTgtRowStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiDscTgtRowStatus.setDescription('This object allows to configure dynamically a new entry in this table via SNMP or eventually delete it. An administrator is not allowed to delete an entry where the object ciscoScsiIntrDscTgtDiscovered is equal to true.')
ciscoScsiDscLunTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 4, 2), )
if mibBuilder.loadTexts: ciscoScsiDscLunTable.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiDscLunTable.setDescription('This table includes all the remote (not in the local system) LUNS discovered via each local initiator port of each SCSI instance.')
ciscoScsiDscLunEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 4, 2, 1), ).setIndexNames((0, "CISCO-SCSI-MIB", "ciscoScsiInstIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiDeviceIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiDscTgtIntrPortIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiDscTgtIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiDscLunIndex"))
if mibBuilder.loadTexts: ciscoScsiDscLunEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiDscLunEntry.setDescription('An entry (row) represents a LUN discovered by the local initiator device or by the local initiator port.')
ciscoScsiDscLunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 4, 2, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: ciscoScsiDscLunIndex.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiDscLunIndex.setDescription('This object is an administrative integer used to uniquely identify a particular LUN discovered by a particular scsi initiator port or device. This index will point to an entry for this LUN in the ciscoScsiDscLunIdTable.')
ciscoScsiDscLunLun = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 4, 2, 1, 2), ScsiLUNOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiDscLunLun.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiDscLunLun.setDescription('This object is the actual value of the LUN of the discovered logical unit.')
ciscoScsiDscLunIdTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 4, 3), )
if mibBuilder.loadTexts: ciscoScsiDscLunIdTable.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiDscLunIdTable.setDescription('This table includes all the remote (not in the local system) LU Identifier discovered via each local initiator port or device of this SCSI instance.')
ciscoScsiDscLunIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 4, 3, 1), ).setIndexNames((0, "CISCO-SCSI-MIB", "ciscoScsiInstIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiDeviceIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiDscTgtIntrPortIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiDscTgtIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiDscLunIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiDscLunIdIndex"))
if mibBuilder.loadTexts: ciscoScsiDscLunIdEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiDscLunIdEntry.setDescription('An entry (row) represents a LU Identifier discovered by each SCSI initiator device or port.')
ciscoScsiDscLunIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 4, 3, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: ciscoScsiDscLunIdIndex.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiDscLunIdIndex.setDescription('This object is an administrative integer used to uniquely identify a particular LUN Identifier discovered by each scsi initiator device or port.')
ciscoScsiDscLunIdCodeSet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 4, 3, 1, 2), ScsiIdCodeSet()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiDscLunIdCodeSet.setReference(' ANSI - SCSI Primary Commands - 2 (SPC-2),Revision 20, Chapter 8: section 8.4.4, page 210 Vital Product Data Parameters [16] ')
if mibBuilder.loadTexts: ciscoScsiDscLunIdCodeSet.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiDscLunIdCodeSet.setDescription('This object determines the code set in use for this identifier as specified by the ANSI-SCSI Primary Commands -2 document; the code set can be binary or ascii.')
ciscoScsiDscLunIdAssociation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 4, 3, 1, 3), ScsiIdAssociation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiDscLunIdAssociation.setReference(' ANSI - SCSI Primary Commands - 2 (SPC-2), Revision 20, Chapter 8: section 8.4.4, page 210 Vital Product Data Parameters [16]')
if mibBuilder.loadTexts: ciscoScsiDscLunIdAssociation.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiDscLunIdAssociation.setDescription('This value means that the identifier is associated with the addressed physical or logical device or that the identifier is associated with the port that received the request.')
ciscoScsiDscLunIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 4, 3, 1, 4), ScsiIdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiDscLunIdType.setReference(' ANSI - SCSI Primary Commands - 2 (SPC-2), Revision 20, Chapter 8: section 8.4.4, page 210 Vital Product Data Parameters [16] ')
if mibBuilder.loadTexts: ciscoScsiDscLunIdType.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiDscLunIdType.setDescription('This object defines the type of LU Identifier used for this identifier and indicates the format of scsiLUIdValue.')
ciscoScsiDscLunIdValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 4, 3, 1, 5), ScsiIdValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiDscLunIdValue.setReference(' ANSI - SCSI Primary Commands - 2 (SPC-2), Chapter 8: section 8.4.4, page 210 Vital Product Data Parameters [16]')
if mibBuilder.loadTexts: ciscoScsiDscLunIdValue.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiDscLunIdValue.setDescription('The actual value of this identifier. The format is defined by the objects ciscoScsiIntrDscLunIdCodeSet, ciscoScsiIntrDscLunIdAssoc, ciscoScsiIntrDscLunIdType.')
ciscoScsiAttTgtPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 4, 6), )
if mibBuilder.loadTexts: ciscoScsiAttTgtPortTable.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiAttTgtPortTable.setDescription('This table includes all the remote (not in the local system) target ports that are currently attached to each local initiator port of this SCSI instance.')
ciscoScsiAttTgtPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 4, 6, 1), ).setIndexNames((0, "CISCO-SCSI-MIB", "ciscoScsiInstIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiDeviceIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiPortIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiAttTgtPortIndex"))
if mibBuilder.loadTexts: ciscoScsiAttTgtPortEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiAttTgtPortEntry.setDescription('An entry (row) represents a remote target port currently attached to the local initiator port corresponding to the ciscoScsiPortIndex.')
ciscoScsiAttTgtPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 4, 6, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: ciscoScsiAttTgtPortIndex.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiAttTgtPortIndex.setDescription('An administrative integer used to uniquely identify a particular currently attached target.')
ciscoScsiAttTgtPortDscTgtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 4, 6, 1, 2), ScsiIndexValueOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiAttTgtPortDscTgtIdx.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiAttTgtPortDscTgtIdx.setDescription('The corresponding index in the ciscoScsiIntrDiscTgtTable for this current attached target port or zero if this attached target port is not in the table.')
ciscoScsiAttTgtPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 4, 6, 1, 3), ScsiName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiAttTgtPortName.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiAttTgtPortName.setDescription('The name of the remote target port attached to this initiator port.')
ciscoScsiAttTgtPortIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 3, 4, 6, 1, 4), ScsiIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiAttTgtPortIdentifier.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiAttTgtPortIdentifier.setDescription('The identifier of the remote target port attached to this local initiator port.')
ciscoScsiTgtDevTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 4, 1), )
if mibBuilder.loadTexts: ciscoScsiTgtDevTable.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiTgtDevTable.setDescription('This table contains information about each local target device.')
ciscoScsiTgtDevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-SCSI-MIB", "ciscoScsiInstIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiDeviceIndex"))
if mibBuilder.loadTexts: ciscoScsiTgtDevEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiTgtDevEntry.setDescription('An entry (row) containing information applicable to a particular local target device. ')
ciscoScsiTgtDevNumberOfLUs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 4, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiTgtDevNumberOfLUs.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiTgtDevNumberOfLUs.setDescription('This object is the number of Logical Units accessible via this local target device.')
ciscoScsiTgtDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("available", 2), ("broken", 3), ("readying", 4), ("abnormal", 5), ("nonAddrFailure", 6), ("nonAddrFailReadying", 7), ("nonAddrFailAbnormal", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiTgtDeviceStatus.setReference('SCSI Controller Commands-2 (SCC-2) standard NCITS.318-1998 6.3.1.8 REPORT STATES service action')
if mibBuilder.loadTexts: ciscoScsiTgtDeviceStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiTgtDeviceStatus.setDescription('This object represents the status of this SCSI device, summarizing the state of both the addressable devices (i.e., the logical units) and the non-addressable devices within this SCSI device: - unknown(1): This value is used when the status cannot be determined - available(2): All addressable and non-addressable devices within the SCSI device are fully operational (i.e., no logical units have an abnormal status). - broken(3): The SCSI device is not operational and cannot be made operational without external intervention. - readying(4): One or more logical units within the SCSI device are being initialized and access to the SCSI device is temporarily limited (i.e., one or more of the logical unit have a readying status). - abnormal(5): One or more addressable devices within the SCSI device are indicating a status other than available; nevertheless, the SCSI device is operational (i.e., one or more of the logical units have an abnormal status). - nonAddrFailure(6): One or more non-addressable devices within the SCSI device have failed; nevertheless, the SCSI device is operational (i.e., no logical units have an abnormal or readying status). - nonAddrFailReadying(7): One or more non-addressable devices within the SCSI device have failed; nevertheless,one or more logical units within the SCSI device are being initialized and access to the SCSI device is temporarily limited. - nonAddrFailAbnormal(8): One or more non-addressable devices within the SCSI device have failed and one or more addressable devices within the SCSI device are indicating a status other than available however the SCSI device is operational.')
ciscoScsiTgtDevNonAccLUs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 4, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiTgtDevNonAccLUs.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiTgtDevNonAccLUs.setDescription('This object is the number of Logical Units existing but not currently accessible via this local target device.')
ciscoScsiTgtPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 4, 2), )
if mibBuilder.loadTexts: ciscoScsiTgtPortTable.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiTgtPortTable.setDescription('This table includes all the local target ports of all the local target devices.')
ciscoScsiTgtPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 4, 2, 1), ).setIndexNames((0, "CISCO-SCSI-MIB", "ciscoScsiInstIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiDeviceIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiPortIndex"))
if mibBuilder.loadTexts: ciscoScsiTgtPortEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiTgtPortEntry.setDescription('An entry (row) containing information applicable to a particular local target port of a particular local target device. ')
ciscoScsiTgtPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 4, 2, 1, 1), ScsiName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiTgtPortName.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiTgtPortName.setDescription('The name of the port assigned for use in the SCSI protocol.')
ciscoScsiTgtPortIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 4, 2, 1, 2), ScsiIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiTgtPortIdentifier.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiTgtPortIdentifier.setDescription('The identifier of the port in one of the format(s) appropriate for the type of transport.')
ciscoScsiTgtPortInCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 4, 2, 1, 3), Counter32()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiTgtPortInCommands.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiTgtPortInCommands.setDescription('This object represents the number of commands received by this target port.')
ciscoScsiTgtPortWrMegaBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 4, 2, 1, 4), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiTgtPortWrMegaBytes.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiTgtPortWrMegaBytes.setDescription('This object represents the amount of data written in Megabytes by this target port.')
ciscoScsiTgtPortReadMegaBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 4, 2, 1, 5), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiTgtPortReadMegaBytes.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiTgtPortReadMegaBytes.setDescription('This object represents the amount of data read in Megabytes by this target port.')
ciscoScsiTgtPortHSInCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 4, 2, 1, 6), Counter64()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiTgtPortHSInCommands.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiTgtPortHSInCommands.setDescription('This object represents the number of commands received. This object provides support for systems that can quickly generate lots of commands because they run at high speed.')
ciscoScsiAuthorizedIntrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 4, 3, 1), )
if mibBuilder.loadTexts: ciscoScsiAuthorizedIntrTable.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiAuthorizedIntrTable.setDescription('This table includes all the authorized initiator devices or ports that may attach a target device or port of the local SCSI entity and that may interest an administrator, like statistics.')
ciscoScsiAuthorizedIntrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 4, 3, 1, 1), ).setIndexNames((0, "CISCO-SCSI-MIB", "ciscoScsiInstIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiDeviceIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiAuthIntrTgtPortIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiAuthIntrIndex"))
if mibBuilder.loadTexts: ciscoScsiAuthorizedIntrEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiAuthorizedIntrEntry.setDescription('An entry (row) represents a remote initiator port that may attach the local target port.')
ciscoScsiAuthIntrTgtPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 4, 3, 1, 1, 1), ScsiPortIndexValueOrZero())
if mibBuilder.loadTexts: ciscoScsiAuthIntrTgtPortIndex.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiAuthIntrTgtPortIndex.setDescription('This object is: - the index of the local scsi target port, - or zero, if this entry refers to a local target device.')
ciscoScsiAuthIntrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 4, 3, 1, 1, 2), ScsiIndexValue())
if mibBuilder.loadTexts: ciscoScsiAuthIntrIndex.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiAuthIntrIndex.setDescription('This object is an administrative integer used to uniquely identify a particular authorized initiator. (Authorized to attach to this target device or port.)')
ciscoScsiAuthIntrDevOrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 4, 3, 1, 1, 3), ScsiDeviceOrPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoScsiAuthIntrDevOrPort.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiAuthIntrDevOrPort.setDescription('This object specifies if this entry refers to a remote initiator port or a device.')
ciscoScsiAuthIntrName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 4, 3, 1, 1, 4), ScsiName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoScsiAuthIntrName.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiAuthIntrName.setDescription('The name of the remote initiator device or port authorized to attach this local target device or port.')
ciscoScsiAuthIntrLunMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 4, 3, 1, 1, 5), ScsiIndexValueOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoScsiAuthIntrLunMapIndex.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiAuthIntrLunMapIndex.setDescription('This object identifies the set of entries in the ciscoScsiLunMapTable for which ciscoScsiLunMapIndex has the same value as the value of this object. The identified set of entries constitute the LUN map to be used for accessing logical units when the remote initiator corresponding to this entry is attached to any local target corresponding to this entry. Note that this object has a value of zero if this entry should use the default LUN map.')
ciscoScsiAuthIntrAttachedTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 4, 3, 1, 1, 6), Counter32()).setUnits('Times').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiAuthIntrAttachedTimes.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiAuthIntrAttachedTimes.setDescription('This object indicates the number of times that this remote initiator has transitioned from unattached to attached to this local target device or port.')
ciscoScsiAuthIntrOutCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 4, 3, 1, 1, 7), Counter32()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiAuthIntrOutCommands.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiAuthIntrOutCommands.setDescription('This object indicates the number of commands that the remote initiator corresponding to this entry has sent to the local target device or port corresponding to this entry.')
ciscoScsiAuthIntrReadMegaBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 4, 3, 1, 1, 8), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiAuthIntrReadMegaBytes.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiAuthIntrReadMegaBytes.setDescription('This object indicates the amount of data in Megabytes that the remote initiator corresponding to this entry has read from the local target device or port corresponding to this entry.')
ciscoScsiAuthIntrWrMegaBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 4, 3, 1, 1, 9), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiAuthIntrWrMegaBytes.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiAuthIntrWrMegaBytes.setDescription('This object indicates the amount of data in Megabytes that the remote initiator corresponding to this entry has written from the local target device or port corresponding to this entry.')
ciscoScsiAuthIntrHSOutCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 4, 3, 1, 1, 10), Counter64()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiAuthIntrHSOutCommands.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiAuthIntrHSOutCommands.setDescription('This object represents the number of commands sent by the remote initiator corresponding to this entry to the local target device or port corresponding to this entry. This object provides support for systems which can quickly generate lots of commands because they run at high speed.')
ciscoScsiAuthIntrLastCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 4, 3, 1, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiAuthIntrLastCreation.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiAuthIntrLastCreation.setDescription('This object indicates the value of sysUpTime when this row was last created.')
ciscoScsiAuthIntrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 4, 3, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoScsiAuthIntrRowStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiAuthIntrRowStatus.setDescription('This object allows an administrator to create or delete this entry.')
ciscoScsiAttIntrPrtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 4, 3, 2), )
if mibBuilder.loadTexts: ciscoScsiAttIntrPrtTable.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiAttIntrPrtTable.setDescription('This table includes all the remote initiator ports that are currently attached to each local target port of this local entity.')
ciscoScsiAttIntrPrtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 4, 3, 2, 1), ).setIndexNames((0, "CISCO-SCSI-MIB", "ciscoScsiInstIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiDeviceIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiPortIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiAttIntrPrtIdx"))
if mibBuilder.loadTexts: ciscoScsiAttIntrPrtEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiAttIntrPrtEntry.setDescription('An entry (row) represents a remote initiator currently attached to a particular local target port of a particular target device of a particular SCSI entity.')
ciscoScsiAttIntrPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 4, 3, 2, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: ciscoScsiAttIntrPrtIdx.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiAttIntrPrtIdx.setDescription('An administrative integer used to uniquely identify a particular attached remote initiator port.')
ciscoScsiAttIntrPrtAuthIntrIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 4, 3, 2, 1, 2), ScsiIndexValueOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiAttIntrPrtAuthIntrIdx.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiAttIntrPrtAuthIntrIdx.setDescription('This object is the corresponding index in the ciscoScsiAuthorizedIntrTable for this current attached remote initiator or zero if this remote attached initiator is not configured in that table.')
ciscoScsiAttIntrPrtName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 4, 3, 2, 1, 3), ScsiName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiAttIntrPrtName.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiAttIntrPrtName.setDescription('The name of the remote initiator attached to this local target port.')
ciscoScsiAttIntrPrtId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 4, 3, 2, 1, 4), ScsiIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiAttIntrPrtId.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiAttIntrPrtId.setDescription('The identifier of the remote initiator attached to this local target port.')
ciscoScsiLuTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 5, 1), )
if mibBuilder.loadTexts: ciscoScsiLuTable.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiLuTable.setDescription('This table includes all the logical units exposed by a local target device.')
ciscoScsiLuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-SCSI-MIB", "ciscoScsiInstIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiDeviceIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiLuIndex"))
if mibBuilder.loadTexts: ciscoScsiLuEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiLuEntry.setDescription('An entry (row) contains information applicable to a particular logical unit of a particular local target device. ')
ciscoScsiLuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 5, 1, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: ciscoScsiLuIndex.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiLuIndex.setDescription('An administrative integer used to uniquely identify a particular logical unit.')
ciscoScsiLuDefaultLun = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 5, 1, 1, 2), ScsiLUNOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiLuDefaultLun.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiLuDefaultLun.setDescription('The default Logical Unit Number (LUN) for this logical unit; it is the LUN that will appear to an initiator that was not configured to see another LUN. Note that this object will have a zero-length string if this Logical Unit does not have a default LUN.')
ciscoScsiLuWwnName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 5, 1, 1, 3), ScsiNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiLuWwnName.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiLuWwnName.setDescription('The World-Wide Name of this LU.')
ciscoScsiLuVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 5, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiLuVendorId.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiLuVendorId.setDescription('A string identifying the vendor of this LU according to the value in SCSI device page.')
ciscoScsiLuProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 5, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiLuProductId.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiLuProductId.setDescription('A string identifying the product for this LU according to the value in SCSI device page.')
ciscoScsiLuRevisionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 5, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiLuRevisionId.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiLuRevisionId.setDescription('A string defining the product revision of this LU according to the value in SCSI device page.')
ciscoScsiLuPeripheralType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 5, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiLuPeripheralType.setReference(' ANSI - SCSI Primary Commands - 2 (SPC-2), T10 Project 1236- D, Revision 20, 18 July 2001 [16]')
if mibBuilder.loadTexts: ciscoScsiLuPeripheralType.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiLuPeripheralType.setDescription('This object is the value returned to SCSI query VPD page 83. It can be: direct-access device, sequential-access device, printer, communication device and so on. The values that can be returned here are defined in SCSI Primary Commands -2 .')
ciscoScsiLuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("available", 2), ("notAvailable", 3), ("broken", 4), ("readying", 5), ("abnormal", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiLuStatus.setReference(' SCSI Controller Commands-2 (SCC-2) standard NCITS.318-1998 6.3.1.8 REPORT STATES service action')
if mibBuilder.loadTexts: ciscoScsiLuStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiLuStatus.setDescription('The status of this logical unit: - unknown(1): The status of this logical unit cannot be determined. - available(2): The logical unit is fully operational (i.e., accepts media access SCSI commands and has no state information to report). - notAvailable(3): The logical unit is capable of being supported but not available (i.e., no logical unit is currently present or the logical unit is present but not configured for use). - broken(4): The logical unit has failed and cannot respond to SCSI commands. - readying(5): The logical unit is being initialized and access is temporarily limited. - abnormal(6): The logical unit has state information available that indicates it is operating with limits. The ciscoScsiLuState indicates what those limits are.')
ciscoScsiLuState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 5, 1, 1, 9), Bits().clone(namedValues=NamedValues(("dataLost", 0), ("dynamicReconfigurationInProgress", 1), ("exposed", 2), ("fractionallyExposed", 3), ("partiallyExposed", 4), ("protectedRebuild", 5), ("protectionDisabled", 6), ("rebuild", 7), ("recalculate", 8), ("spareInUse", 9), ("verifyInProgress", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiLuState.setReference(' SCSI Controller Commands-2 (SCC-2) standard NCITS.318-1998 6.3.1.8 REPORT STATES service action')
if mibBuilder.loadTexts: ciscoScsiLuState.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiLuState.setDescription('According the bit position: 0 Data lost: Within the logical unit data has been lost. 1 Dynamic reconfiguration in progress: The logical unit is being reconfigured. In this state all data is still protected. 2 Exposed: Within the logical unit data is not protected. In this state all data is still valid, however, loss of data/data-availability is unavoidable in the event of a failure. 3 Fractionally exposed: Within the logical unit part of the data is not protected. In this state all data is still valid, however, a failure may cause a loss of data or a loss of data availability. 4 Partially exposed: Within the logical unit one or more underlying storage devices have failed. In this state all data is still protected. 5 Protected rebuild: The logical unit is in the process of a rebuild operation. In this state all data is protected. 6 Protection disabled: Within the logical unit the data protection method has been disabled. In this state all data is still valid, however, however, loss of data/data-availability is unavoidable in the event of a failure. 7 Rebuild: The data protection method is in the process of rebuilding data. In this state data is not protected. 8 Recalculate: The logical unit is in the process of a recalculate operation. 9 Spare in use: Within the logical unit a storage device in full or part being used to store data. In this state all data is still protected. 10 Verify in progress: Within the logical unit data is being verified.')
ciscoScsiLuInCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 5, 1, 1, 10), Counter32()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiLuInCommands.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiLuInCommands.setDescription(' This object represents the number of commands received by this logical unit.')
ciscoScsiLuReadMegaBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 5, 1, 1, 11), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiLuReadMegaBytes.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiLuReadMegaBytes.setDescription(' This object represents the amount of data in Megabytes read from this logical unit.')
ciscoScsiLuWrittenMegaBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 5, 1, 1, 12), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiLuWrittenMegaBytes.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiLuWrittenMegaBytes.setDescription(' This object represents the amount of data in Megabytes written by this logical unit.')
ciscoScsiLuInResets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 5, 1, 1, 13), Counter32()).setUnits('resets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiLuInResets.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiLuInResets.setDescription(' This object represents the number of resets received by this logical unit.')
ciscoScsiLuOutQueueFullStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiLuOutQueueFullStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiLuOutQueueFullStatus.setDescription(' This object represents the number of queue full statuses received by this logical unit.')
ciscoScsiLuHSInCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 5, 1, 1, 15), Counter64()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiLuHSInCommands.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiLuHSInCommands.setDescription(' This object represents the number of commands received by this logical unit. This object provides support for systems that can quickly generate lots of commands because they run at high speed.')
ciscoScsiLuIdTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 5, 2), )
if mibBuilder.loadTexts: ciscoScsiLuIdTable.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiLuIdTable.setDescription('A table of identifiers for all logical units exposed by local targets device.')
ciscoScsiLuIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 5, 2, 1), ).setIndexNames((0, "CISCO-SCSI-MIB", "ciscoScsiInstIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiDeviceIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiLuIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiLuIdIndex"))
if mibBuilder.loadTexts: ciscoScsiLuIdEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiLuIdEntry.setDescription('An entry (row) containing information applicable to a particular identifier for a particular logical unit. ')
ciscoScsiLuIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 5, 2, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: ciscoScsiLuIdIndex.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiLuIdIndex.setDescription(' This object represents an arbitrary integer used to uniquely identify a particular LU Identifier within a particular logical unit within a particular SCSI target device within a particular SCSI instance.')
ciscoScsiLuIdCodeSet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 5, 2, 1, 2), ScsiIdCodeSet()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiLuIdCodeSet.setReference(' ANSI - SCSI Primary Commands - 2 ((SPC-2), Revision 20, Chapter 8: section 8.4.4, page 210 Vital Product Data Parameters [16]')
if mibBuilder.loadTexts: ciscoScsiLuIdCodeSet.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiLuIdCodeSet.setDescription("This object specifies the code set in use with this identifier. The value is represented in the same format as is contained in the identifier's Identification Descriptor within the Logical Unit's Device Identification Page.")
ciscoScsiLuIdAssociation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 5, 2, 1, 3), ScsiIdAssociation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiLuIdAssociation.setReference(' ANSI - SCSI Primary Commands - 2 (SPC-2), Revision 20, Chapter 8: section 8.4.4, page 210 Vital Product Data Parameters [16]')
if mibBuilder.loadTexts: ciscoScsiLuIdAssociation.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiLuIdAssociation.setDescription("This object specifies what the identifier is associated with (e.g, with the addressed physical/logical device or with a particular port). The value is represented in the same format as is contained in the identifier's Identification Descriptor within the Logical Unit's Device Identification Page.")
ciscoScsiLuIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 5, 2, 1, 4), ScsiIdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiLuIdType.setReference(' ANSI - SCSI Primary Commands - 2 (SPC-2), Revision 20, Chapter 8: section 8.4.4, page 210 Vital Product Data Parameters [16]')
if mibBuilder.loadTexts: ciscoScsiLuIdType.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiLuIdType.setDescription("This object specifies the type of the identifier. The value is represented in the same format as is contained in the identifier's Identification Descriptor within the Logical Unit's Device Identification Page.")
ciscoScsiLuIdValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 5, 2, 1, 5), ScsiIdValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiLuIdValue.setReference(' ANSI - SCSI Primary Commands - 2 (SPC-2), Chapter 8: section 8.4.4, page 210 Vital Product Data Parameters [16]')
if mibBuilder.loadTexts: ciscoScsiLuIdValue.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiLuIdValue.setDescription(" This object represents the actual value of this identifier. The format is defined by the objects ciscoScsiLuIdCodeSet, ciscoScsiLuIdAssociation, ciscoScsiLuIdType. The value is represented in the same format as is contained in the identifier's Identification Descriptor within the Logical Unit's Device Identification Page.")
ciscoScsiLunMapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 5, 3), )
if mibBuilder.loadTexts: ciscoScsiLunMapTable.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiLunMapTable.setDescription('This table includes LUNs additional to the default one. A logical unit may have a different Logical Unit Number for different initiators. This table provides a mapping between a logical unit and a logical unit number.')
ciscoScsiLunMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 5, 3, 1), ).setIndexNames((0, "CISCO-SCSI-MIB", "ciscoScsiInstIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiDeviceIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiLunMapIndex"), (0, "CISCO-SCSI-MIB", "ciscoScsiLunMapLun"))
if mibBuilder.loadTexts: ciscoScsiLunMapEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiLunMapEntry.setDescription('An entry containing information about the mapping of a particular Logical Unit to a particular LUN. The set of entries which all have the same values of ciscoScsiInstIndex, ciscoScsiDeviceIndex and ciscoScsiLunMapIndex constitute a LUN Map.')
ciscoScsiLunMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 5, 3, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: ciscoScsiLunMapIndex.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiLunMapIndex.setDescription('An administrative integer used to uniquely identify a particular LunMap.')
ciscoScsiLunMapLun = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 5, 3, 1, 2), ScsiLUNOrZero())
if mibBuilder.loadTexts: ciscoScsiLunMapLun.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiLunMapLun.setDescription('This object specifies the Logical Unit Number, to which a logical unit is mapped by this row.')
ciscoScsiLunMapLuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 5, 3, 1, 3), ScsiIndexValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoScsiLunMapLuIndex.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiLunMapLuIndex.setDescription('This object identifies the logical unit for which the value of ciscoScsiLuIndex is the same as the value of this object. The identified logical unit is the one mapped to a LUN by this row.')
ciscoScsiLunMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 95, 1, 5, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoScsiLunMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiLunMapRowStatus.setDescription('This object allows an administrator to create and delete this entry.')
ciscoScsiTgtDevStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 95, 2, 0, 1)).setObjects(("CISCO-SCSI-MIB", "ciscoScsiTgtDeviceStatus"))
if mibBuilder.loadTexts: ciscoScsiTgtDevStatusChanged.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiTgtDevStatusChanged.setDescription(" A notification will be generated for each occurrence of the abnormal status (e.g., if the SCSI target device's current status is abnormal) providing that the SCSI instance's value of ciscoScsiInstNotifEnable is enabled. An SNMP agent implementing the SCSI MIB should not send more than three SCSI identical notifications in any 10-second period.")
ciscoScsiLuStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 95, 2, 0, 2)).setObjects(("CISCO-SCSI-MIB", "ciscoScsiLuStatus"))
if mibBuilder.loadTexts: ciscoScsiLuStatusChanged.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiLuStatusChanged.setDescription(" A notification will be generated each time that ciscoScsiLuStatus will change providing that the SCSI instance's value of ciscoScsiInstScsiNotificationsEnable is enabled. An SNMP agent implementing the SCSI MIB should not send more than three SCSI identical notifications in any 10-second period.")
ciscoScsiCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 95, 3, 1))
ciscoScsiGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 95, 3, 2))
ciscoScsiCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 95, 3, 1, 1)).setObjects(("CISCO-SCSI-MIB", "ciscoScsiDeviceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoScsiCompliance = ciscoScsiCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiCompliance.setDescription('Describes the requirements for compliance to this SCSI MIB. If an implementation can be both a target and an initiator, all groups are mandatory.')
ciscoScsiDeviceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 95, 3, 2, 1)).setObjects(("CISCO-SCSI-MIB", "ciscoScsiInstAlias"), ("CISCO-SCSI-MIB", "ciscoScsiInstSoftwareIndex"), ("CISCO-SCSI-MIB", "ciscoScsiInstVendorVersion"), ("CISCO-SCSI-MIB", "ciscoScsiInstNotifEnable"), ("CISCO-SCSI-MIB", "ciscoScsiDeviceAlias"), ("CISCO-SCSI-MIB", "ciscoScsiDeviceRole"), ("CISCO-SCSI-MIB", "ciscoScsiDevicePortNumber"), ("CISCO-SCSI-MIB", "ciscoScsiPortRole"), ("CISCO-SCSI-MIB", "ciscoScsiPortTrnsptPtr"), ("CISCO-SCSI-MIB", "ciscoScsiTrnsptType"), ("CISCO-SCSI-MIB", "ciscoScsiTrnsptPointer"), ("CISCO-SCSI-MIB", "ciscoScsiTrnsptDevName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoScsiDeviceGroup = ciscoScsiDeviceGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiDeviceGroup.setDescription('A collection of objects providing information about SCSI instances, devices and ports.')
ciscoScsiInitiatorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 95, 3, 2, 2)).setObjects(("CISCO-SCSI-MIB", "ciscoScsiIntrDevAccMode"), ("CISCO-SCSI-MIB", "ciscoScsiIntrPrtName"), ("CISCO-SCSI-MIB", "ciscoScsiIntrPrtIdentifier"), ("CISCO-SCSI-MIB", "ciscoScsiAttTgtPortDscTgtIdx"), ("CISCO-SCSI-MIB", "ciscoScsiAttTgtPortName"), ("CISCO-SCSI-MIB", "ciscoScsiAttTgtPortIdentifier"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoScsiInitiatorGroup = ciscoScsiInitiatorGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiInitiatorGroup.setDescription('This group is relevant for an initiator device and port.')
ciscoScsiDiscoveryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 95, 3, 2, 3)).setObjects(("CISCO-SCSI-MIB", "ciscoScsiDscTgtDevOrPort"), ("CISCO-SCSI-MIB", "ciscoScsiDscTgtName"), ("CISCO-SCSI-MIB", "ciscoScsiDscTgtConfigured"), ("CISCO-SCSI-MIB", "ciscoScsiDscTgtDiscovered"), ("CISCO-SCSI-MIB", "ciscoScsiDscTgtRowStatus"), ("CISCO-SCSI-MIB", "ciscoScsiDscTgtLastCreation"), ("CISCO-SCSI-MIB", "ciscoScsiDscLunLun"), ("CISCO-SCSI-MIB", "ciscoScsiDscLunIdCodeSet"), ("CISCO-SCSI-MIB", "ciscoScsiDscLunIdAssociation"), ("CISCO-SCSI-MIB", "ciscoScsiDscLunIdType"), ("CISCO-SCSI-MIB", "ciscoScsiDscLunIdValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoScsiDiscoveryGroup = ciscoScsiDiscoveryGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiDiscoveryGroup.setDescription('This group is relevant for the discovered targets by an initiator port.')
ciscoScsiTargetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 95, 3, 2, 4)).setObjects(("CISCO-SCSI-MIB", "ciscoScsiTgtDevNumberOfLUs"), ("CISCO-SCSI-MIB", "ciscoScsiTgtDeviceStatus"), ("CISCO-SCSI-MIB", "ciscoScsiTgtDevNonAccLUs"), ("CISCO-SCSI-MIB", "ciscoScsiTgtPortName"), ("CISCO-SCSI-MIB", "ciscoScsiTgtPortIdentifier"), ("CISCO-SCSI-MIB", "ciscoScsiAttIntrPrtAuthIntrIdx"), ("CISCO-SCSI-MIB", "ciscoScsiAttIntrPrtName"), ("CISCO-SCSI-MIB", "ciscoScsiAttIntrPrtId"), ("CISCO-SCSI-MIB", "ciscoScsiLuDefaultLun"), ("CISCO-SCSI-MIB", "ciscoScsiLuWwnName"), ("CISCO-SCSI-MIB", "ciscoScsiLuVendorId"), ("CISCO-SCSI-MIB", "ciscoScsiLuProductId"), ("CISCO-SCSI-MIB", "ciscoScsiLuRevisionId"), ("CISCO-SCSI-MIB", "ciscoScsiLuPeripheralType"), ("CISCO-SCSI-MIB", "ciscoScsiLuStatus"), ("CISCO-SCSI-MIB", "ciscoScsiLuState"), ("CISCO-SCSI-MIB", "ciscoScsiLuIdCodeSet"), ("CISCO-SCSI-MIB", "ciscoScsiLuIdAssociation"), ("CISCO-SCSI-MIB", "ciscoScsiLuIdType"), ("CISCO-SCSI-MIB", "ciscoScsiLuIdValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoScsiTargetGroup = ciscoScsiTargetGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiTargetGroup.setDescription('This group is relevant for a target device and port.')
ciscoScsiLunMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 95, 3, 2, 5)).setObjects(("CISCO-SCSI-MIB", "ciscoScsiLunMapLuIndex"), ("CISCO-SCSI-MIB", "ciscoScsiLunMapRowStatus"), ("CISCO-SCSI-MIB", "ciscoScsiAuthIntrDevOrPort"), ("CISCO-SCSI-MIB", "ciscoScsiAuthIntrName"), ("CISCO-SCSI-MIB", "ciscoScsiAuthIntrLunMapIndex"), ("CISCO-SCSI-MIB", "ciscoScsiAuthIntrLastCreation"), ("CISCO-SCSI-MIB", "ciscoScsiAuthIntrRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoScsiLunMapGroup = ciscoScsiLunMapGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiLunMapGroup.setDescription('This group is a collection of attributes regarding the mapping between logical unit number, logical unit and target device.')
ciscoScsiTargetStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 95, 3, 2, 6)).setObjects(("CISCO-SCSI-MIB", "ciscoScsiTgtPortInCommands"), ("CISCO-SCSI-MIB", "ciscoScsiTgtPortWrMegaBytes"), ("CISCO-SCSI-MIB", "ciscoScsiTgtPortReadMegaBytes"), ("CISCO-SCSI-MIB", "ciscoScsiLuInCommands"), ("CISCO-SCSI-MIB", "ciscoScsiLuReadMegaBytes"), ("CISCO-SCSI-MIB", "ciscoScsiLuWrittenMegaBytes"), ("CISCO-SCSI-MIB", "ciscoScsiLuInResets"), ("CISCO-SCSI-MIB", "ciscoScsiLuOutQueueFullStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoScsiTargetStatsGroup = ciscoScsiTargetStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiTargetStatsGroup.setDescription('This group is a collection of statistics for all implementations of the SCSI MIB that contain targets.')
ciscoScsiTargetHSStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 95, 3, 2, 7)).setObjects(("CISCO-SCSI-MIB", "ciscoScsiTgtPortHSInCommands"), ("CISCO-SCSI-MIB", "ciscoScsiLuHSInCommands"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoScsiTargetHSStatsGroup = ciscoScsiTargetHSStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiTargetHSStatsGroup.setDescription('This group is a collection of high speed statistics for all implementations of the SCSI MIB that contain targets.')
ciscoScsiLunMapStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 95, 3, 2, 8)).setObjects(("CISCO-SCSI-MIB", "ciscoScsiAuthIntrAttachedTimes"), ("CISCO-SCSI-MIB", "ciscoScsiAuthIntrOutCommands"), ("CISCO-SCSI-MIB", "ciscoScsiAuthIntrReadMegaBytes"), ("CISCO-SCSI-MIB", "ciscoScsiAuthIntrWrMegaBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoScsiLunMapStatsGroup = ciscoScsiLunMapStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiLunMapStatsGroup.setDescription('This group is a collection of statistics regarding initiators authorized to attach local logical unit and target device.')
ciscoScsiLunMapHSStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 95, 3, 2, 9)).setObjects(("CISCO-SCSI-MIB", "ciscoScsiAuthIntrHSOutCommands"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoScsiLunMapHSStatsGroup = ciscoScsiLunMapHSStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiLunMapHSStatsGroup.setDescription('This group is a collection of high speed statistics regarding initiators authorized to attach local logical unit and target device.')
ciscoScsiInitiatorStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 95, 3, 2, 10)).setObjects(("CISCO-SCSI-MIB", "ciscoScsiIntrDevOutResets"), ("CISCO-SCSI-MIB", "ciscoScsiIntrPrtOutCommands"), ("CISCO-SCSI-MIB", "ciscoScsiIntrPrtWrMegaBytes"), ("CISCO-SCSI-MIB", "ciscoScsiIntrPrtReadMegaBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoScsiInitiatorStatsGroup = ciscoScsiInitiatorStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiInitiatorStatsGroup.setDescription('This group is a collection of statistics for all implementations of the SCSI MIB that contain initiators.')
ciscoScsiInitiatorHSStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 95, 3, 2, 11)).setObjects(("CISCO-SCSI-MIB", "ciscoScsiIntrPrtHSOutCommands"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoScsiInitiatorHSStatsGroup = ciscoScsiInitiatorHSStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiInitiatorHSStatsGroup.setDescription('This group is a collection of high speed statistics for all implementations of the SCSI MIB that contain initiators.')
ciscoScsiDiscoveryStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 95, 3, 2, 12)).setObjects(("CISCO-SCSI-MIB", "ciscoScsiDscTgtInCommands"), ("CISCO-SCSI-MIB", "ciscoScsiDscTgtReadMegaBytes"), ("CISCO-SCSI-MIB", "ciscoScsiDscTgtWrMegaBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoScsiDiscoveryStatsGroup = ciscoScsiDiscoveryStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiDiscoveryStatsGroup.setDescription('This group is a collection of statistics for all implementations of the SCSI MIB that contain discovered initiators.')
ciscoScsiDiscoveryHSStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 95, 3, 2, 13)).setObjects(("CISCO-SCSI-MIB", "ciscoScsiDscTgtHSInCommands"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoScsiDiscoveryHSStatsGroup = ciscoScsiDiscoveryHSStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiDiscoveryHSStatsGroup.setDescription('This group is a collection of high speed statistics for all implementations of the SCSI MIB that contain discovered initiators.')
ciscoScsiDeviceStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 95, 3, 2, 14)).setObjects(("CISCO-SCSI-MIB", "ciscoScsiDeviceResets"), ("CISCO-SCSI-MIB", "ciscoScsiPortBusyStatuses"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoScsiDeviceStatGroup = ciscoScsiDeviceStatGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiDeviceStatGroup.setDescription('A collection of statistics regarding about SCSI devices and ports.')
ciscoScsiNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 10, 95, 3, 2, 15)).setObjects(("CISCO-SCSI-MIB", "ciscoScsiTgtDevStatusChanged"), ("CISCO-SCSI-MIB", "ciscoScsiLuStatusChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoScsiNotifGroup = ciscoScsiNotifGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiNotifGroup.setDescription('This group is a collection of notifications.')
mibBuilder.exportSymbols("CISCO-SCSI-MIB", ciscoScsiDscLunIdType=ciscoScsiDscLunIdType, ciscoScsiAuthIntrHSOutCommands=ciscoScsiAuthIntrHSOutCommands, ciscoScsiDscLunIdTable=ciscoScsiDscLunIdTable, ciscoScsiAttTgtPortTable=ciscoScsiAttTgtPortTable, ciscoScsiLunMapLuIndex=ciscoScsiLunMapLuIndex, ciscoScsiDscTgtDiscovered=ciscoScsiDscTgtDiscovered, ciscoScsiDscLunIdIndex=ciscoScsiDscLunIdIndex, ciscoScsiTargetStatsGroup=ciscoScsiTargetStatsGroup, ciscoScsiAuthIntrIndex=ciscoScsiAuthIntrIndex, ciscoScsiDeviceStatGroup=ciscoScsiDeviceStatGroup, PYSNMP_MODULE_ID=ciscoScsiMIB, ciscoScsiDeviceEntry=ciscoScsiDeviceEntry, ciscoScsiInstSoftwareIndex=ciscoScsiInstSoftwareIndex, ciscoScsiObjects=ciscoScsiObjects, ciscoScsiLuOutQueueFullStatus=ciscoScsiLuOutQueueFullStatus, ciscoScsiIntrPrtTable=ciscoScsiIntrPrtTable, ciscoScsiLuWwnName=ciscoScsiLuWwnName, ciscoScsiNotification=ciscoScsiNotification, ciscoScsiConformance=ciscoScsiConformance, ciscoScsiTgtPortTable=ciscoScsiTgtPortTable, ciscoScsiLunMapRowStatus=ciscoScsiLunMapRowStatus, ciscoScsiLuVendorId=ciscoScsiLuVendorId, ciscoScsiPortRole=ciscoScsiPortRole, ciscoScsiGroups=ciscoScsiGroups, ciscoScsiDscTgtRowStatus=ciscoScsiDscTgtRowStatus, ciscoScsiTgtDevEntry=ciscoScsiTgtDevEntry, ciscoScsiTgtPortInCommands=ciscoScsiTgtPortInCommands, ciscoScsiAuthIntrLunMapIndex=ciscoScsiAuthIntrLunMapIndex, ciscoScsiAuthIntrTgtPortIndex=ciscoScsiAuthIntrTgtPortIndex, HrSWInstalledIndexOrZero=HrSWInstalledIndexOrZero, ciscoScsiAuthIntrDevOrPort=ciscoScsiAuthIntrDevOrPort, ciscoScsiAttIntrPrtAuthIntrIdx=ciscoScsiAttIntrPrtAuthIntrIdx, ciscoScsiTgtDevStatusChanged=ciscoScsiTgtDevStatusChanged, ciscoScsiInstIndex=ciscoScsiInstIndex, ciscoScsiAttTgtPortDscTgtIdx=ciscoScsiAttTgtPortDscTgtIdx, ciscoScsiLuState=ciscoScsiLuState, ScsiName=ScsiName, ciscoScsiDscLunTable=ciscoScsiDscLunTable, ciscoScsiLunMapLun=ciscoScsiLunMapLun, ciscoScsiAttTgtPortIndex=ciscoScsiAttTgtPortIndex, ciscoScsiInstAlias=ciscoScsiInstAlias, ciscoScsiLuIdEntry=ciscoScsiLuIdEntry, ciscoScsiTgtDevTable=ciscoScsiTgtDevTable, ScsiPortIndexValueOrZero=ScsiPortIndexValueOrZero, ciscoScsiCompliances=ciscoScsiCompliances, ciscoScsiLogicalUnit=ciscoScsiLogicalUnit, ScsiDeviceOrPort=ScsiDeviceOrPort, ciscoScsiTranportSPI=ciscoScsiTranportSPI, ScsiIdValue=ScsiIdValue, ciscoScsiTgtPortWrMegaBytes=ciscoScsiTgtPortWrMegaBytes, ciscoScsiLuIdIndex=ciscoScsiLuIdIndex, ciscoScsiTrnsptType=ciscoScsiTrnsptType, ciscoScsiDeviceRole=ciscoScsiDeviceRole, ciscoScsiAuthIntrAttachedTimes=ciscoScsiAuthIntrAttachedTimes, ciscoScsiTgtDevNonAccLUs=ciscoScsiTgtDevNonAccLUs, ciscoScsiLuDefaultLun=ciscoScsiLuDefaultLun, ciscoScsiLuInCommands=ciscoScsiLuInCommands, ciscoScsiDscTgtName=ciscoScsiDscTgtName, ciscoScsiLuIndex=ciscoScsiLuIndex, ScsiIndexValue=ScsiIndexValue, ciscoScsiDscTgtDevOrPort=ciscoScsiDscTgtDevOrPort, ciscoScsiDscLunIdValue=ciscoScsiDscLunIdValue, ScsiIdAssociation=ScsiIdAssociation, ciscoScsiTrnsptDevName=ciscoScsiTrnsptDevName, ciscoScsiLuIdCodeSet=ciscoScsiLuIdCodeSet, ciscoScsiLuIdTable=ciscoScsiLuIdTable, ciscoScsiTgtPortReadMegaBytes=ciscoScsiTgtPortReadMegaBytes, ciscoScsiPortBusyStatuses=ciscoScsiPortBusyStatuses, ciscoScsiIntrPrtIdentifier=ciscoScsiIntrPrtIdentifier, ciscoScsiLunMapHSStatsGroup=ciscoScsiLunMapHSStatsGroup, ciscoScsiTransportISCSI=ciscoScsiTransportISCSI, ciscoScsiAuthIntrOutCommands=ciscoScsiAuthIntrOutCommands, ciscoScsiDeviceAlias=ciscoScsiDeviceAlias, ciscoScsiAttTgtPortEntry=ciscoScsiAttTgtPortEntry, ciscoScsiInitiatorHSStatsGroup=ciscoScsiInitiatorHSStatsGroup, ciscoScsiIntrPrtName=ciscoScsiIntrPrtName, ciscoScsiLuEntry=ciscoScsiLuEntry, ciscoScsiDiscoveryStatsGroup=ciscoScsiDiscoveryStatsGroup, ciscoScsiAttIntrPrtName=ciscoScsiAttIntrPrtName, ciscoScsiDeviceResets=ciscoScsiDeviceResets, ciscoScsiDeviceTable=ciscoScsiDeviceTable, ciscoScsiAttTgtPortName=ciscoScsiAttTgtPortName, ciscoScsiDeviceGroup=ciscoScsiDeviceGroup, ciscoScsiDscLunIdEntry=ciscoScsiDscLunIdEntry, ScsiIdCodeSet=ScsiIdCodeSet, ciscoScsiIntrPrtOutCommands=ciscoScsiIntrPrtOutCommands, ScsiIdType=ScsiIdType, ciscoScsiLuInResets=ciscoScsiLuInResets, ciscoScsiAuthIntrLastCreation=ciscoScsiAuthIntrLastCreation, ciscoScsiTrnsptTable=ciscoScsiTrnsptTable, ciscoScsiDscLunIndex=ciscoScsiDscLunIndex, ciscoScsiDiscoveryHSStatsGroup=ciscoScsiDiscoveryHSStatsGroup, ciscoScsiDscTgtIntrPortIndex=ciscoScsiDscTgtIntrPortIndex, ciscoScsiLuIdType=ciscoScsiLuIdType, ciscoScsiIntrDevEntry=ciscoScsiIntrDevEntry, ciscoScsiInitiatorStatsGroup=ciscoScsiInitiatorStatsGroup, ciscoScsiDscTgtInCommands=ciscoScsiDscTgtInCommands, ciscoScsiIntrDevOutResets=ciscoScsiIntrDevOutResets, ciscoScsiIntrDevAccMode=ciscoScsiIntrDevAccMode, ciscoScsiNotifGroup=ciscoScsiNotifGroup, ciscoScsiIntrPrtEntry=ciscoScsiIntrPrtEntry, ciscoScsiLuWrittenMegaBytes=ciscoScsiLuWrittenMegaBytes, ciscoScsiTargetGroup=ciscoScsiTargetGroup, ciscoScsiAttTgtPortIdentifier=ciscoScsiAttTgtPortIdentifier, ciscoScsiDscTgtConfigured=ciscoScsiDscTgtConfigured, ciscoScsiLunMapTable=ciscoScsiLunMapTable, ciscoScsiTrnsptEntry=ciscoScsiTrnsptEntry, ciscoScsiIntrDevTable=ciscoScsiIntrDevTable, ciscoScsiInitiator=ciscoScsiInitiator, ciscoScsiInstanceTable=ciscoScsiInstanceTable, ciscoScsiDevicePortNumber=ciscoScsiDevicePortNumber, ciscoScsiIntrPrtHSOutCommands=ciscoScsiIntrPrtHSOutCommands, ciscoScsiPortTable=ciscoScsiPortTable, ciscoScsiAuthorizedIntrTable=ciscoScsiAuthorizedIntrTable, ciscoScsiAuthIntrRowStatus=ciscoScsiAuthIntrRowStatus, ciscoScsiTranportOther=ciscoScsiTranportOther, ciscoScsiMIB=ciscoScsiMIB, ciscoScsiLuTable=ciscoScsiLuTable, ciscoScsiTransportTypes=ciscoScsiTransportTypes, ciscoScsiDscTgtLastCreation=ciscoScsiDscTgtLastCreation, ciscoScsiDscTgtWrMegaBytes=ciscoScsiDscTgtWrMegaBytes, ciscoScsiDscTgtTable=ciscoScsiDscTgtTable, ciscoScsiAuthorizedIntrEntry=ciscoScsiAuthorizedIntrEntry, ciscoScsiLuHSInCommands=ciscoScsiLuHSInCommands, ciscoScsiLuIdValue=ciscoScsiLuIdValue, ciscoScsiRemoteTarget=ciscoScsiRemoteTarget, ciscoScsiLunMapEntry=ciscoScsiLunMapEntry, ciscoScsiPortEntry=ciscoScsiPortEntry, ciscoScsiTgtDevNumberOfLUs=ciscoScsiTgtDevNumberOfLUs, ciscoScsiLuPeripheralType=ciscoScsiLuPeripheralType, ciscoScsiDscLunIdAssociation=ciscoScsiDscLunIdAssociation, ciscoScsiDeviceIndex=ciscoScsiDeviceIndex, ciscoScsiDscTgtHSInCommands=ciscoScsiDscTgtHSInCommands, ciscoScsiLuProductId=ciscoScsiLuProductId, ScsiIdentifier=ScsiIdentifier, ciscoScsiInstanceEntry=ciscoScsiInstanceEntry, ciscoScsiTgtPortName=ciscoScsiTgtPortName, ciscoScsiAttIntrPrtTable=ciscoScsiAttIntrPrtTable, ciscoScsiAttIntrPrtId=ciscoScsiAttIntrPrtId, ScsiNameIdOrZero=ScsiNameIdOrZero, ciscoScsiTargetHSStatsGroup=ciscoScsiTargetHSStatsGroup, ciscoScsiRemoteInitiators=ciscoScsiRemoteInitiators, ciscoScsiLuReadMegaBytes=ciscoScsiLuReadMegaBytes, ciscoScsiLunMapGroup=ciscoScsiLunMapGroup, ciscoScsiTransportFCP=ciscoScsiTransportFCP, ciscoScsiPortIndex=ciscoScsiPortIndex, ciscoScsiLunMapStatsGroup=ciscoScsiLunMapStatsGroup, ciscoScsiLuRevisionId=ciscoScsiLuRevisionId, ScsiLUNOrZero=ScsiLUNOrZero, ciscoScsiLuStatusChanged=ciscoScsiLuStatusChanged, ciscoScsiTrnsptIndex=ciscoScsiTrnsptIndex, ciscoScsiTgtDeviceStatus=ciscoScsiTgtDeviceStatus, ciscoScsiInitiatorGroup=ciscoScsiInitiatorGroup, ciscoScsiTrnsptPointer=ciscoScsiTrnsptPointer, ciscoScsiIntrPrtReadMegaBytes=ciscoScsiIntrPrtReadMegaBytes, ciscoScsiLuIdAssociation=ciscoScsiLuIdAssociation, ciscoScsiDscTgtIndex=ciscoScsiDscTgtIndex, ciscoScsiDscTgtReadMegaBytes=ciscoScsiDscTgtReadMegaBytes, ciscoScsiAttIntrPrtEntry=ciscoScsiAttIntrPrtEntry, ciscoScsiLuStatus=ciscoScsiLuStatus, ciscoScsiTgtPortEntry=ciscoScsiTgtPortEntry, ciscoScsiInstNotifEnable=ciscoScsiInstNotifEnable, ciscoScsiLunMapIndex=ciscoScsiLunMapIndex, ciscoScsiDscLunEntry=ciscoScsiDscLunEntry, ciscoScsiDscTgtEntry=ciscoScsiDscTgtEntry, ciscoScsiAuthIntrWrMegaBytes=ciscoScsiAuthIntrWrMegaBytes, ciscoScsiAuthIntrName=ciscoScsiAuthIntrName, ciscoScsiTransportSBP=ciscoScsiTransportSBP, ciscoScsiGeneral=ciscoScsiGeneral, ScsiIndexValueOrZero=ScsiIndexValueOrZero, ciscoScsiCompliance=ciscoScsiCompliance, ciscoScsiPortTrnsptPtr=ciscoScsiPortTrnsptPtr, ciscoScsiTarget=ciscoScsiTarget, ciscoScsiIntrPrtWrMegaBytes=ciscoScsiIntrPrtWrMegaBytes, ciscoScsiAttIntrPrtIdx=ciscoScsiAttIntrPrtIdx, ciscoScsiInstVendorVersion=ciscoScsiInstVendorVersion, ciscoScsiDscLunIdCodeSet=ciscoScsiDscLunIdCodeSet, ciscoScsiTgtPortIdentifier=ciscoScsiTgtPortIdentifier, ciscoScsiAuthIntrReadMegaBytes=ciscoScsiAuthIntrReadMegaBytes, ciscoScsiNotifications=ciscoScsiNotifications, ciscoScsiTransportSRP=ciscoScsiTransportSRP, ciscoScsiDiscoveryGroup=ciscoScsiDiscoveryGroup, ciscoScsiTgtPortHSInCommands=ciscoScsiTgtPortHSInCommands, ciscoScsiDscLunLun=ciscoScsiDscLunLun)
