#
# PySNMP MIB module TPLINK-AAA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TPLINK-AAA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:24:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, Bits, Unsigned32, TimeTicks, Counter32, NotificationType, ObjectIdentity, MibIdentifier, Counter64, Integer32, ModuleIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Bits", "Unsigned32", "TimeTicks", "Counter32", "NotificationType", "ObjectIdentity", "MibIdentifier", "Counter64", "Integer32", "ModuleIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
tplinkMgmt, = mibBuilder.importSymbols("TPLINK-MIB", "tplinkMgmt")
TPRowStatus, = mibBuilder.importSymbols("TPLINK-TC-MIB", "TPRowStatus")
tplinkAaaMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11863, 6, 82))
tplinkAaaMIB.setRevisions(('2015-06-11 14:30',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: tplinkAaaMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: tplinkAaaMIB.setLastUpdated('201506111430Z')
if mibBuilder.loadTexts: tplinkAaaMIB.setOrganization('TPLINK')
if mibBuilder.loadTexts: tplinkAaaMIB.setContactInfo('www.tplink.com.cn')
if mibBuilder.loadTexts: tplinkAaaMIB.setDescription('Private MIB for aaa configuration.')
aaaGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 82, 1))
swAaaGlobalEnable = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 82, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAaaGlobalEnable.setStatus('current')
if mibBuilder.loadTexts: swAaaGlobalEnable.setDescription('0. disable 1. enable Enable/Disable the AAA function.')
aaaApplicationList = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 82, 1, 2))
aaaApplicationListTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 82, 1, 2, 1), )
if mibBuilder.loadTexts: aaaApplicationListTable.setStatus('current')
if mibBuilder.loadTexts: aaaApplicationListTable.setDescription('Display the authentication method list the module use.')
aaaApplicationListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 82, 1, 2, 1, 1), ).setIndexNames((0, "TPLINK-AAA-MIB", "moduleId"))
if mibBuilder.loadTexts: aaaApplicationListEntry.setStatus('current')
if mibBuilder.loadTexts: aaaApplicationListEntry.setDescription('An entry contains of the information of methodlist the module use.')
moduleId = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 82, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleId.setStatus('current')
if mibBuilder.loadTexts: moduleId.setDescription('Display the id of module.')
moduleName = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 82, 1, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleName.setStatus('current')
if mibBuilder.loadTexts: moduleName.setDescription('Display the name of module.')
loginList = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 82, 1, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loginList.setStatus('current')
if mibBuilder.loadTexts: loginList.setDescription('Display the login method list that the module use.')
enableList = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 82, 1, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableList.setStatus('current')
if mibBuilder.loadTexts: enableList.setDescription('Display the enable method list that the module use.')
aaaAuthenticationListConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 82, 2))
authenticationLoginMethodListTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 82, 2, 1), )
if mibBuilder.loadTexts: authenticationLoginMethodListTable.setStatus('current')
if mibBuilder.loadTexts: authenticationLoginMethodListTable.setDescription('Display the authentication login method list.')
authenticationLoginMethodListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 82, 2, 1, 1), ).setIndexNames((0, "TPLINK-AAA-MIB", "authenLoginListName"))
if mibBuilder.loadTexts: authenticationLoginMethodListEntry.setStatus('current')
if mibBuilder.loadTexts: authenticationLoginMethodListEntry.setDescription('An entry contains of the information of method list.')
authenLoginListName = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 82, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: authenLoginListName.setStatus('current')
if mibBuilder.loadTexts: authenLoginListName.setDescription('The name of method list.')
authenLoginPri1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 82, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authenLoginPri1.setStatus('current')
if mibBuilder.loadTexts: authenLoginPri1.setDescription('The priority 1 method.')
authenLoginPri2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 82, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authenLoginPri2.setStatus('current')
if mibBuilder.loadTexts: authenLoginPri2.setDescription('The priority 2 method.')
authenLoginPri3 = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 82, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authenLoginPri3.setStatus('current')
if mibBuilder.loadTexts: authenLoginPri3.setDescription('The priority 3 method.')
authenLoginPri4 = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 82, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authenLoginPri4.setStatus('current')
if mibBuilder.loadTexts: authenLoginPri4.setDescription('The priority 4 method.')
authenLoginStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 82, 2, 1, 1, 6), TPRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: authenLoginStatus.setStatus('current')
if mibBuilder.loadTexts: authenLoginStatus.setDescription('the following two values are states: these values may be read or written active(1), notInService(2), the following value is a state: this value may be read, but not written notReady(3), the following three values are actions: these values may be written, but are never read createAndGo(4), createAndWait(5), destroy(6)')
authenticationEnableMethodListTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 82, 2, 2), )
if mibBuilder.loadTexts: authenticationEnableMethodListTable.setStatus('current')
if mibBuilder.loadTexts: authenticationEnableMethodListTable.setDescription('Display the authentication enable method list..')
authenticationEnableMethodListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 82, 2, 2, 1), ).setIndexNames((0, "TPLINK-AAA-MIB", "authenEnableListName"))
if mibBuilder.loadTexts: authenticationEnableMethodListEntry.setStatus('current')
if mibBuilder.loadTexts: authenticationEnableMethodListEntry.setDescription('An entry contains of the information of method list.')
authenEnableListName = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 82, 2, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: authenEnableListName.setStatus('current')
if mibBuilder.loadTexts: authenEnableListName.setDescription('The name of method list.')
authenEnablePri1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 82, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authenEnablePri1.setStatus('current')
if mibBuilder.loadTexts: authenEnablePri1.setDescription('The priority 1 method.')
authenEnablePri2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 82, 2, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authenEnablePri2.setStatus('current')
if mibBuilder.loadTexts: authenEnablePri2.setDescription('The priority 2 method.')
authenEnablePri3 = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 82, 2, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authenEnablePri3.setStatus('current')
if mibBuilder.loadTexts: authenEnablePri3.setDescription('The priority 3 method.')
authenEnablePri4 = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 82, 2, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authenEnablePri4.setStatus('current')
if mibBuilder.loadTexts: authenEnablePri4.setDescription('The priority 4 method.')
authenEnableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 82, 2, 2, 1, 6), TPRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: authenEnableStatus.setStatus('current')
if mibBuilder.loadTexts: authenEnableStatus.setDescription('the following two values are states: these values may be read or written active(1), notInService(2), the following value is a state: this value may be read, but not written notReady(3), the following three values are actions: these values may be written, but are never read createAndGo(4), createAndWait(5), destroy(6)')
aaaDot1xListConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 82, 3))
authenticationDot1xMethodListTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 82, 3, 1), )
if mibBuilder.loadTexts: authenticationDot1xMethodListTable.setStatus('current')
if mibBuilder.loadTexts: authenticationDot1xMethodListTable.setDescription('Display the authentication dot1x method list.')
authenticationDot1xMethodListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 82, 3, 1, 1), ).setIndexNames((0, "TPLINK-AAA-MIB", "authenDot1xListName"))
if mibBuilder.loadTexts: authenticationDot1xMethodListEntry.setStatus('current')
if mibBuilder.loadTexts: authenticationDot1xMethodListEntry.setDescription('An entry contains of the information of method list.')
authenDot1xListName = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 82, 3, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: authenDot1xListName.setStatus('current')
if mibBuilder.loadTexts: authenDot1xListName.setDescription('The name of method list.')
authenDot1xPri1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 82, 3, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authenDot1xPri1.setStatus('current')
if mibBuilder.loadTexts: authenDot1xPri1.setDescription('The priority 1 method.')
authenDot1xStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 82, 3, 1, 1, 3), TPRowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authenDot1xStatus.setStatus('current')
if mibBuilder.loadTexts: authenDot1xStatus.setDescription('the following two values are states: these values may be read or written active(1), notInService(2), the following value is a state: this value may be read, but not written notReady(3), the following three values are actions: these values may be written, but are never read createAndGo(4), createAndWait(5), destroy(6)')
accountingDot1xMethodListTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 82, 3, 2), )
if mibBuilder.loadTexts: accountingDot1xMethodListTable.setStatus('current')
if mibBuilder.loadTexts: accountingDot1xMethodListTable.setDescription('Display the accounting dot1x method list.')
accountingDot1xMethodListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 82, 3, 2, 1), ).setIndexNames((0, "TPLINK-AAA-MIB", "acctDot1xListName"))
if mibBuilder.loadTexts: accountingDot1xMethodListEntry.setStatus('current')
if mibBuilder.loadTexts: accountingDot1xMethodListEntry.setDescription('An entry contains of the information of method list.')
acctDot1xListName = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 82, 3, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acctDot1xListName.setStatus('current')
if mibBuilder.loadTexts: acctDot1xListName.setDescription('The name of method list.')
acctDot1xPri1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 82, 3, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acctDot1xPri1.setStatus('current')
if mibBuilder.loadTexts: acctDot1xPri1.setDescription('The priority 1 method.')
acctDot1xStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 82, 3, 2, 1, 3), TPRowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acctDot1xStatus.setStatus('current')
if mibBuilder.loadTexts: acctDot1xStatus.setDescription('the following two values are states: these values may be read or written active(1), notInService(2), the following value is a state: this value may be read, but not written notReady(3), the following three values are actions: these values may be written, but are never read createAndGo(4), createAndWait(5), destroy(6)')
radiusDeamonTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 82, 4), )
if mibBuilder.loadTexts: radiusDeamonTable.setStatus('current')
if mibBuilder.loadTexts: radiusDeamonTable.setDescription('RADIUS DEAMON is a server used to authenticate the user,which is getting access to the NAS(Network Access Server).')
radiusDeamonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 82, 4, 1), ).setIndexNames((0, "TPLINK-AAA-MIB", "radiusDeamonServerIp"))
if mibBuilder.loadTexts: radiusDeamonEntry.setStatus('current')
if mibBuilder.loadTexts: radiusDeamonEntry.setDescription('An entry contains of the information of a radius deamon.')
radiusDeamonServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 82, 4, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusDeamonServerIp.setStatus('current')
if mibBuilder.loadTexts: radiusDeamonServerIp.setDescription('Enter the IP address of the RADIUS server.')
radiusDeamonTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 82, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusDeamonTimeout.setStatus('current')
if mibBuilder.loadTexts: radiusDeamonTimeout.setDescription('Enter the number of seconds the switch waits for a reply (1-9).')
radiusDeamonRetransimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 82, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusDeamonRetransimit.setStatus('current')
if mibBuilder.loadTexts: radiusDeamonRetransimit.setDescription('Enter the number of times the switch will resend an authentication request to the RADIUS server (1-3).')
radiusDeamonKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 82, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusDeamonKey.setStatus('current')
if mibBuilder.loadTexts: radiusDeamonKey.setDescription('Enter the encryption key used to authenticate logon access.')
radiusDeamonAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 82, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusDeamonAuthPort.setStatus('current')
if mibBuilder.loadTexts: radiusDeamonAuthPort.setDescription('Enter the radius server port used for sending authentication packets (1-65535).')
radiusDeamonAcctPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 82, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusDeamonAcctPort.setStatus('current')
if mibBuilder.loadTexts: radiusDeamonAcctPort.setDescription('Enter the radius server port used for sending authentication packets (1-65535).')
radiusDeamonStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 82, 4, 1, 7), TPRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusDeamonStatus.setStatus('current')
if mibBuilder.loadTexts: radiusDeamonStatus.setDescription('the following two values are states: these values may be read or written active(1), notInService(2), the following value is a state: this value may be read, but not written notReady(3), the following three values are actions: these values may be written, but are never read createAndGo(4), createAndWait(5), destroy(6)')
tacacsDeamonTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 82, 5), )
if mibBuilder.loadTexts: tacacsDeamonTable.setStatus('current')
if mibBuilder.loadTexts: tacacsDeamonTable.setDescription('TACACS(Terminal Access Controller Access Control System) DEAMON is a server used to authenticate the user,which is getting access to the NAS(Network Access Server).')
tacacsDeamonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 82, 5, 1), ).setIndexNames((0, "TPLINK-AAA-MIB", "tacacsDeamonServerIp"))
if mibBuilder.loadTexts: tacacsDeamonEntry.setStatus('current')
if mibBuilder.loadTexts: tacacsDeamonEntry.setDescription('An entry contains of the information of a tacacs deamon.')
tacacsDeamonServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 82, 5, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tacacsDeamonServerIp.setStatus('current')
if mibBuilder.loadTexts: tacacsDeamonServerIp.setDescription('Enter the IP address of the TACACS+ server.')
tacacsDeamonTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 82, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tacacsDeamonTimeout.setStatus('current')
if mibBuilder.loadTexts: tacacsDeamonTimeout.setDescription('Enter the number of seconds the switch waits for a reply (1-10).')
tacacsDeamonKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 82, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tacacsDeamonKey.setStatus('current')
if mibBuilder.loadTexts: tacacsDeamonKey.setDescription('Enter the encryption key used to authenticate logon access.')
tacacsDeamonPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 82, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tacacsDeamonPort.setStatus('current')
if mibBuilder.loadTexts: tacacsDeamonPort.setDescription('Enter the tacacs+ server port used for sending authentication packets (1-65535).')
tacacsDeamonStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 82, 5, 1, 5), TPRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tacacsDeamonStatus.setStatus('current')
if mibBuilder.loadTexts: tacacsDeamonStatus.setDescription('the following two values are states: these values may be read or written active(1), notInService(2), the following value is a state: this value may be read, but not written notReady(3), the following three values are actions: these values may be written, but are never read createAndGo(4), createAndWait(5), destroy(6)')
mibBuilder.exportSymbols("TPLINK-AAA-MIB", aaaApplicationListTable=aaaApplicationListTable, authenLoginPri3=authenLoginPri3, accountingDot1xMethodListEntry=accountingDot1xMethodListEntry, authenEnablePri3=authenEnablePri3, authenLoginPri2=authenLoginPri2, authenEnableListName=authenEnableListName, radiusDeamonTable=radiusDeamonTable, aaaApplicationList=aaaApplicationList, radiusDeamonTimeout=radiusDeamonTimeout, authenLoginListName=authenLoginListName, radiusDeamonKey=radiusDeamonKey, tacacsDeamonTimeout=tacacsDeamonTimeout, enableList=enableList, authenLoginPri1=authenLoginPri1, PYSNMP_MODULE_ID=tplinkAaaMIB, tacacsDeamonPort=tacacsDeamonPort, authenEnablePri4=authenEnablePri4, authenticationDot1xMethodListTable=authenticationDot1xMethodListTable, authenDot1xStatus=authenDot1xStatus, radiusDeamonRetransimit=radiusDeamonRetransimit, tacacsDeamonTable=tacacsDeamonTable, acctDot1xListName=acctDot1xListName, radiusDeamonAuthPort=radiusDeamonAuthPort, authenLoginStatus=authenLoginStatus, tplinkAaaMIB=tplinkAaaMIB, tacacsDeamonServerIp=tacacsDeamonServerIp, authenticationEnableMethodListTable=authenticationEnableMethodListTable, swAaaGlobalEnable=swAaaGlobalEnable, moduleName=moduleName, authenEnablePri1=authenEnablePri1, authenticationDot1xMethodListEntry=authenticationDot1xMethodListEntry, authenDot1xPri1=authenDot1xPri1, moduleId=moduleId, aaaGlobalConfig=aaaGlobalConfig, authenticationLoginMethodListEntry=authenticationLoginMethodListEntry, radiusDeamonAcctPort=radiusDeamonAcctPort, tacacsDeamonEntry=tacacsDeamonEntry, accountingDot1xMethodListTable=accountingDot1xMethodListTable, acctDot1xStatus=acctDot1xStatus, tacacsDeamonStatus=tacacsDeamonStatus, authenEnablePri2=authenEnablePri2, authenticationLoginMethodListTable=authenticationLoginMethodListTable, aaaAuthenticationListConfig=aaaAuthenticationListConfig, authenLoginPri4=authenLoginPri4, aaaDot1xListConfig=aaaDot1xListConfig, acctDot1xPri1=acctDot1xPri1, radiusDeamonStatus=radiusDeamonStatus, loginList=loginList, authenEnableStatus=authenEnableStatus, authenticationEnableMethodListEntry=authenticationEnableMethodListEntry, radiusDeamonEntry=radiusDeamonEntry, aaaApplicationListEntry=aaaApplicationListEntry, radiusDeamonServerIp=radiusDeamonServerIp, tacacsDeamonKey=tacacsDeamonKey, authenDot1xListName=authenDot1xListName)
