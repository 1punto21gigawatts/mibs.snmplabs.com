#
# PySNMP MIB module LEFTHAND-NETWORKS-NUS-COMMON-STORAGE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LEFTHAND-NETWORKS-NUS-COMMON-STORAGE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:06:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
lhnModules, = mibBuilder.importSymbols("LEFTHAND-NETWORKS-GLOBAL-REG", "lhnModules")
lhnNusCommonStorage, = mibBuilder.importSymbols("LEFTHAND-NETWORKS-NUS-COMMON-MIB", "lhnNusCommonStorage")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, MibIdentifier, IpAddress, TimeTicks, Counter32, Integer32, ObjectIdentity, Gauge32, Counter64, NotificationType, Bits, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibIdentifier", "IpAddress", "TimeTicks", "Counter32", "Integer32", "ObjectIdentity", "Gauge32", "Counter64", "NotificationType", "Bits", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
RowStatus, DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TruthValue", "TextualConvention")
lhnNusCommonStorageModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 9804, 1, 1, 8))
if mibBuilder.loadTexts: lhnNusCommonStorageModule.setLastUpdated('0106010000Z')
if mibBuilder.loadTexts: lhnNusCommonStorageModule.setOrganization('LeftHand Networks, Inc.')
if mibBuilder.loadTexts: lhnNusCommonStorageModule.setContactInfo(' Author: Jose Faria LeftHand Networks postal: 1688 Conestoga St. Boulder, CO 80301 USA email: jfaria@lefthandnetworks.com phone: +1 303 449-4100 ')
if mibBuilder.loadTexts: lhnNusCommonStorageModule.setDescription('Storage items for NSM Devices')
storageDeviceCount = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageDeviceCount.setStatus('current')
if mibBuilder.loadTexts: storageDeviceCount.setDescription('number of storage devices')
storageDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 2), )
if mibBuilder.loadTexts: storageDeviceTable.setStatus('current')
if mibBuilder.loadTexts: storageDeviceTable.setDescription('table of storage devices')
storageDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 2, 1), ).setIndexNames((0, "LEFTHAND-NETWORKS-NUS-COMMON-STORAGE-MIB", "storageDeviceIndex"))
if mibBuilder.loadTexts: storageDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: storageDeviceEntry.setDescription('A row of raid parameters for the NUS.')
storageDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageDeviceIndex.setStatus('current')
if mibBuilder.loadTexts: storageDeviceIndex.setDescription('storage device index')
storageDeviceModel = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageDeviceModel.setStatus('current')
if mibBuilder.loadTexts: storageDeviceModel.setDescription('storage device model')
storageDeviceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageDeviceClass.setStatus('current')
if mibBuilder.loadTexts: storageDeviceClass.setDescription('storage device class')
storageDeviceCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 2, 1, 4), Counter64()).setUnits('Blocks (512 bytes)').setMaxAccess("readonly")
if mibBuilder.loadTexts: storageDeviceCapacity.setStatus('current')
if mibBuilder.loadTexts: storageDeviceCapacity.setDescription('storage device capacity in blocks')
storageDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageDeviceStatus.setStatus('current')
if mibBuilder.loadTexts: storageDeviceStatus.setDescription('storage device status')
storageDeviceChain = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageDeviceChain.setStatus('current')
if mibBuilder.loadTexts: storageDeviceChain.setDescription('storage device chain')
storageDeviceSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageDeviceSerialNo.setStatus('current')
if mibBuilder.loadTexts: storageDeviceSerialNo.setDescription('storage device serial number')
storageDeviceBayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 2, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageDeviceBayStatus.setStatus('current')
if mibBuilder.loadTexts: storageDeviceBayStatus.setDescription('storage device bay status')
storageDeviceTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageDeviceTemperature.setStatus('current')
if mibBuilder.loadTexts: storageDeviceTemperature.setDescription('storage device temperature')
storageRaidCount = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageRaidCount.setStatus('current')
if mibBuilder.loadTexts: storageRaidCount.setDescription('number of raid devices')
storageRaidTable = MibTable((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 4), )
if mibBuilder.loadTexts: storageRaidTable.setStatus('current')
if mibBuilder.loadTexts: storageRaidTable.setDescription('table of raids')
storageRaidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 4, 1), ).setIndexNames((0, "LEFTHAND-NETWORKS-NUS-COMMON-STORAGE-MIB", "storageRaidIndex"))
if mibBuilder.loadTexts: storageRaidEntry.setStatus('current')
if mibBuilder.loadTexts: storageRaidEntry.setDescription('A row of raid parameters for the NUS.')
storageRaidIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageRaidIndex.setStatus('current')
if mibBuilder.loadTexts: storageRaidIndex.setDescription('raid storage device index')
storageRaidDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageRaidDeviceName.setStatus('current')
if mibBuilder.loadTexts: storageRaidDeviceName.setDescription('raid storage device name')
storageRaidLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageRaidLevel.setStatus('current')
if mibBuilder.loadTexts: storageRaidLevel.setDescription('raid storage device RAID level')
storageRaidDiskCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageRaidDiskCount.setStatus('current')
if mibBuilder.loadTexts: storageRaidDiskCount.setDescription('raid storage device disk number')
storageRaidSpareDiskCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageRaidSpareDiskCount.setStatus('current')
if mibBuilder.loadTexts: storageRaidSpareDiskCount.setDescription('raid storage device number of spare disks')
storageRaidSuperBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 4, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageRaidSuperBlock.setStatus('current')
if mibBuilder.loadTexts: storageRaidSuperBlock.setDescription('raid storage device spare super block status (true or false)')
storageRaidChunkSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 4, 1, 7), Integer32()).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: storageRaidChunkSize.setStatus('current')
if mibBuilder.loadTexts: storageRaidChunkSize.setDescription('raid storage device chunk size')
storageRaidDisks = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 4, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageRaidDisks.setStatus('current')
if mibBuilder.loadTexts: storageRaidDisks.setDescription('raid storage device disk list')
storageRaidConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noRaid", 1), ("stripe", 2), ("mirror", 3), ("mirrorAndStripe", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: storageRaidConfiguration.setStatus('current')
if mibBuilder.loadTexts: storageRaidConfiguration.setDescription('raid storage configuration')
storageRaidStatus = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("rebuilding", 2), ("degraded", 3), ("notRebuilding", 4), ("off", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageRaidStatus.setStatus('current')
if mibBuilder.loadTexts: storageRaidStatus.setDescription('status of raid subsystem')
storageRaidMinimumSpeed = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 8), Integer32()).setUnits('Kbytes / sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: storageRaidMinimumSpeed.setStatus('current')
if mibBuilder.loadTexts: storageRaidMinimumSpeed.setDescription('raid minimum speed')
storageRaidMaximumSpeed = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 9), Integer32()).setUnits('Kbytes / sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: storageRaidMaximumSpeed.setStatus('current')
if mibBuilder.loadTexts: storageRaidMaximumSpeed.setDescription('raid maximum speed')
mibBuilder.exportSymbols("LEFTHAND-NETWORKS-NUS-COMMON-STORAGE-MIB", storageRaidEntry=storageRaidEntry, storageRaidStatus=storageRaidStatus, storageRaidDisks=storageRaidDisks, storageDeviceTable=storageDeviceTable, lhnNusCommonStorageModule=lhnNusCommonStorageModule, storageRaidSpareDiskCount=storageRaidSpareDiskCount, storageRaidDiskCount=storageRaidDiskCount, storageRaidSuperBlock=storageRaidSuperBlock, storageRaidDeviceName=storageRaidDeviceName, storageDeviceCapacity=storageDeviceCapacity, storageDeviceEntry=storageDeviceEntry, storageRaidLevel=storageRaidLevel, storageDeviceCount=storageDeviceCount, storageDeviceSerialNo=storageDeviceSerialNo, storageRaidChunkSize=storageRaidChunkSize, storageRaidCount=storageRaidCount, storageRaidTable=storageRaidTable, storageRaidIndex=storageRaidIndex, PYSNMP_MODULE_ID=lhnNusCommonStorageModule, storageDeviceStatus=storageDeviceStatus, storageRaidConfiguration=storageRaidConfiguration, storageDeviceModel=storageDeviceModel, storageRaidMaximumSpeed=storageRaidMaximumSpeed, storageDeviceBayStatus=storageDeviceBayStatus, storageDeviceIndex=storageDeviceIndex, storageDeviceTemperature=storageDeviceTemperature, storageDeviceClass=storageDeviceClass, storageDeviceChain=storageDeviceChain, storageRaidMinimumSpeed=storageRaidMinimumSpeed)
