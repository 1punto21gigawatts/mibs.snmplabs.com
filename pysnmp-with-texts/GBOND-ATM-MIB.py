#
# PySNMP MIB module GBOND-ATM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GBOND-ATM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:18:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
gBondMIB, = mibBuilder.importSymbols("GBOND-MIB", "gBondMIB")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, TimeTicks, Unsigned32, ObjectIdentity, Gauge32, Counter32, Integer32, Counter64, MibIdentifier, Bits, iso, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "TimeTicks", "Unsigned32", "ObjectIdentity", "Gauge32", "Counter32", "Integer32", "Counter64", "MibIdentifier", "Bits", "iso", "NotificationType")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
gBondAtmMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 211, 1))
gBondAtmMIB.setRevisions(('2007-05-14 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: gBondAtmMIB.setRevisionsDescriptions(('Initial version, published as RFC XXXX.',))
if mibBuilder.loadTexts: gBondAtmMIB.setLastUpdated('200705140000Z')
if mibBuilder.loadTexts: gBondAtmMIB.setOrganization('IETF ADSL MIB Working Group')
if mibBuilder.loadTexts: gBondAtmMIB.setContactInfo('WG charter: http://www.ietf.org/html.charters/adslmib-charter.html Mailing Lists: General Discussion: adslmib@ietf.org To Subscribe: adslmib-request@ietf.org In Body: subscribe your_email_address Chair: Menachem Dodge Postal: ECI Telecom, Ltd. 30 Hasivim St., Petach-Tikva 49517 Israel Phone: +972-3-926-8421 EMail: menachem.dodge@ecitele.com Editor: Edward Beili Postal: Actelis Networks, Inc. 25 Bazel St., P.O.B. 10173 Petach-Tikva 10173 Israel Phone: +972-3-924-3491 EMail: edward.beili@actelis.com Editor: Narendranath Nair Postal: Wipro Technologies Keonics Electronics City Bangalore 560 100 India Phone: +91-99-00-12-96-29 EMail: narendranath.nair@wipro.com')
if mibBuilder.loadTexts: gBondAtmMIB.setDescription("The objects in this MIB module are used to manage the multi-pair bonded xDSL Interfaces using ATM inverse multiplexing, defined in ITU-T recommendation G.998.1 (G.Bond/ATM). This MIB module MUST be used in conjunction with GBOND-MIB module, common to all G.Bond technologies. The following references are used throughout this MIB module: [WT-159] refers to: DSL Forum Technical Report: 'Management Framework for xDSL Bonding', January 2007. Naming Conventions: BCE - Bonding Channel Entity CO - Central Office CPE - Customer Premises Equipment GBS - Generic Bonding Sublayer SNR - Signal to Noise Ratio Copyright (C) The Internet Society (2007). This version of this MIB module is part of RFC XXXX; see the RFC itself for full legal notices.")
gBondAtmObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 211, 1, 1))
gBondAtmConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 211, 1, 2))
gBondAtmPort = MibIdentifier((1, 3, 6, 1, 2, 1, 211, 1, 1, 1))
gBondAtmPortConfTable = MibTable((1, 3, 6, 1, 2, 1, 211, 1, 1, 1, 1), )
if mibBuilder.loadTexts: gBondAtmPortConfTable.setStatus('current')
if mibBuilder.loadTexts: gBondAtmPortConfTable.setDescription('Table for Configuration of G.Bond ATM ports. Entries in this table MUST be maintained in a persistent manner')
gBondAtmPortConfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 211, 1, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gBondAtmPortConfEntry.setStatus('current')
if mibBuilder.loadTexts: gBondAtmPortConfEntry.setDescription('An entry in the G.Bond ATM Port Configuration table. Each entry represents an G.Bond ATM port indexed by the ifIndex. Additional configuration parameters are available via the gBondPortConfEntry of GBOND-MIB. Note that an G.Bond ATM port runs on top of a single or multiple BCE port(s), which are also indexed by ifIndex.')
gBondAtmUpMaxDataRate = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1000000), ValueRangeConstraint(9999999, 9999999), ))).setUnits('Kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: gBondAtmUpMaxDataRate.setReference('[G.998.1] Sec. 11.4.1 - (4)')
if mibBuilder.loadTexts: gBondAtmUpMaxDataRate.setStatus('current')
if mibBuilder.loadTexts: gBondAtmUpMaxDataRate.setDescription("The maximum net upstream data rate a bonding group is allowed to achieve to carry an ATM stream.If set to '9999999', this parameter is ignored.")
gBondAtmDownMaxDataRate = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1000000), ValueRangeConstraint(9999999, 9999999), ))).setUnits('Kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: gBondAtmDownMaxDataRate.setReference('[G.998.1] Sec. 11.4.1 - (4)')
if mibBuilder.loadTexts: gBondAtmDownMaxDataRate.setStatus('current')
if mibBuilder.loadTexts: gBondAtmDownMaxDataRate.setDescription("The maximum net downstream data rate a bonding group is allowed to achieve to carry an ATM stream.If set to '9999999', this parameter is ignored.")
gBondAtmUpDiffDelayTolerence = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8176))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: gBondAtmUpDiffDelayTolerence.setReference('[G.998.1] Sec. 11.4.1 - (6)')
if mibBuilder.loadTexts: gBondAtmUpDiffDelayTolerence.setStatus('current')
if mibBuilder.loadTexts: gBondAtmUpDiffDelayTolerence.setDescription('The maximum upstream differential delay among member links in a bonding group.')
gBondAtmDownDiffDelayTolerence = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8176))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: gBondAtmDownDiffDelayTolerence.setReference('[G.998.1] Sec. 11.4.1 - (6)')
if mibBuilder.loadTexts: gBondAtmDownDiffDelayTolerence.setStatus('current')
if mibBuilder.loadTexts: gBondAtmDownDiffDelayTolerence.setDescription('The maximum downstream differential delay among member links in a bonding group.')
gBondAtmPortStatusTable = MibTable((1, 3, 6, 1, 2, 1, 211, 1, 1, 1, 2), )
if mibBuilder.loadTexts: gBondAtmPortStatusTable.setStatus('current')
if mibBuilder.loadTexts: gBondAtmPortStatusTable.setDescription('This table provides overall status information of G.Bond ATM ports, complementing the generic status information from the ifTable of IF-MIB and gBondFltStatus of GBOND-MIB. Additional status information about connected BCEs is available from the relevant line MIBs This table contains live data from the equipment. As such, it is NOT persistent.')
gBondAtmPortStatusEntry = MibTableRow((1, 3, 6, 1, 2, 1, 211, 1, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gBondAtmPortStatusEntry.setStatus('current')
if mibBuilder.loadTexts: gBondAtmPortStatusEntry.setDescription('An entry in the G.Bond ATM port Status table. Each entry represents a G.Bond ATM port indexed by the ifIndex. Note that an G.Bond GBS port runs on top of a single or multiple BCE port(s), which are also indexed by ifIndex.')
gBondAtmShowTime = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 1, 2, 1, 1), TimeTicks()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondAtmShowTime.setReference('[G.998.1] Sec. 11.4.2 - (3)')
if mibBuilder.loadTexts: gBondAtmShowTime.setStatus('current')
if mibBuilder.loadTexts: gBondAtmShowTime.setDescription('The accumulated time when a bonding group is in normal operation.')
gBondAtmUpRxCellLossCount = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondAtmUpRxCellLossCount.setReference('[G.998.1] Sec. 11.4.2 - (4)')
if mibBuilder.loadTexts: gBondAtmUpRxCellLossCount.setStatus('current')
if mibBuilder.loadTexts: gBondAtmUpRxCellLossCount.setDescription('The total number of cells that are lost at aggregation output in the upstream direction from a bonding group for the accumulation interval.')
gBondAtmDownRxCellLossCount = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondAtmDownRxCellLossCount.setReference('[G.998.1] Sec. 11.4.2 - (4)')
if mibBuilder.loadTexts: gBondAtmDownRxCellLossCount.setStatus('current')
if mibBuilder.loadTexts: gBondAtmDownRxCellLossCount.setDescription('The total number of cells that are lost at aggregation output in the downstream direction from a bonding group for the accumulation interval.')
gBondAtmGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 211, 1, 2, 1))
gBondAtmCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 211, 1, 2, 2))
gBondAtmBasicGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 211, 1, 2, 1, 1)).setObjects(("GBOND-ATM-MIB", "gBondAtmUpMaxDataRate"), ("GBOND-ATM-MIB", "gBondAtmDownMaxDataRate"), ("GBOND-ATM-MIB", "gBondAtmUpDiffDelayTolerence"), ("GBOND-ATM-MIB", "gBondAtmDownDiffDelayTolerence"), ("GBOND-ATM-MIB", "gBondAtmShowTime"), ("GBOND-ATM-MIB", "gBondAtmUpRxCellLossCount"), ("GBOND-ATM-MIB", "gBondAtmDownRxCellLossCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gBondAtmBasicGroup = gBondAtmBasicGroup.setStatus('current')
if mibBuilder.loadTexts: gBondAtmBasicGroup.setDescription('A collection of objects representing management information for G.Bond ATM ports.')
gBondAtmCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 211, 1, 2, 2, 1)).setObjects(("GBOND-ATM-MIB", "gBondAtmBasicGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gBondAtmCompliance = gBondAtmCompliance.setStatus('current')
if mibBuilder.loadTexts: gBondAtmCompliance.setDescription('The compliance statement for G.Bond ATM interfaces. Compliance with the following external compliance statements is REQUIRED: MIB Module Compliance Statement ---------- -------------------- IF-MIB ifCompliance3 GBOND-MIB gBondCompliance')
mibBuilder.exportSymbols("GBOND-ATM-MIB", gBondAtmObjects=gBondAtmObjects, gBondAtmPort=gBondAtmPort, gBondAtmMIB=gBondAtmMIB, PYSNMP_MODULE_ID=gBondAtmMIB, gBondAtmDownRxCellLossCount=gBondAtmDownRxCellLossCount, gBondAtmConformance=gBondAtmConformance, gBondAtmPortStatusTable=gBondAtmPortStatusTable, gBondAtmUpRxCellLossCount=gBondAtmUpRxCellLossCount, gBondAtmDownDiffDelayTolerence=gBondAtmDownDiffDelayTolerence, gBondAtmPortStatusEntry=gBondAtmPortStatusEntry, gBondAtmCompliance=gBondAtmCompliance, gBondAtmDownMaxDataRate=gBondAtmDownMaxDataRate, gBondAtmGroups=gBondAtmGroups, gBondAtmShowTime=gBondAtmShowTime, gBondAtmCompliances=gBondAtmCompliances, gBondAtmPortConfEntry=gBondAtmPortConfEntry, gBondAtmPortConfTable=gBondAtmPortConfTable, gBondAtmBasicGroup=gBondAtmBasicGroup, gBondAtmUpDiffDelayTolerence=gBondAtmUpDiffDelayTolerence, gBondAtmUpMaxDataRate=gBondAtmUpMaxDataRate)
