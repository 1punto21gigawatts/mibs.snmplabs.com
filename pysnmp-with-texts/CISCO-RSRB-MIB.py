#
# PySNMP MIB module CISCO-RSRB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-RSRB-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:11:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
IpAddress, Bits, TimeTicks, Counter64, Counter32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ModuleIdentity, MibIdentifier, Integer32, iso, ObjectIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Bits", "TimeTicks", "Counter64", "Counter32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ModuleIdentity", "MibIdentifier", "Integer32", "iso", "ObjectIdentity", "NotificationType")
TruthValue, TextualConvention, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "MacAddress", "DisplayString")
ciscoRsrbMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 29))
ciscoRsrbMIB.setRevisions(('1995-08-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoRsrbMIB.setRevisionsDescriptions(('Specify a correct (non-negative) range for several index objects.',))
if mibBuilder.loadTexts: ciscoRsrbMIB.setLastUpdated('9508210000Z')
if mibBuilder.loadTexts: ciscoRsrbMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoRsrbMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoRsrbMIB.setDescription("This is the MIB module for objects used to manage RSRB. Overview of remote source-route bridging (RSRB) management and MIB MIB description The RSRB MIB will include the following managed entities: 1) Virtual Rings 2) Remote Peers 3) Associated Token Rings The goal of this MIB to to allow a management stations to display the attributes of the local-remote RSRB peer relationship. The following example configuration will show how the RSRB MIB can be used to manage RSRB. == Token Ring == CISCO A == IP Network/ == CISCO B == Token Ring Virtual Ring Both CISCO A and CISCO B are RSRB peers, having the same virtual ring number. In this example information will be gatherered from CISCO A (the local peer), and CISCO B is considered to be CISCO A's remote peer. The first table is the virtual ring table. There is one entry for each RSRB virtual ring the router is defined on. The fields included in this table include * the virtual ring number, or index * the IP address used by the router * the maximum outbound queue size for each RSRB remote peer In this example the table has a single entry since CISCO A only belongs to one RSRB virtual ring. The next table is for each remote peer in the virtual ring. There can be multiple RSRB remote peers. The remote peer information includes: * an internally generated (not configured) index into the table * the type of data encapsulation with the remote peer * identification of how to get to the remote peer; either an IP address or an interface index, depending upon the encapsulation type * the state of the remote peer * various statistics (bytes and packets sent and received, explorers generated, outbound queue size, and packets dropped * whether local acknowledgment is used with the remote peer * the RSRB version of the peer In this example there would be just one remote peer table entry, for CISCO B. The last table is for the real local and remote token rings associated with the RSRB virtual ring, that this router has either had configured or learned about dynamically. The ring information includes: * the token ring number (index) * the bridge number connecting the real ring to the virtual ring * the ring entry type * the local or remote routers mac address on the interface to the ring * the local router's interface index, or the remote router's IP address, depending on if this is a local or remote ring * number of packets forwarded by the local router onto this ring In this example CISCO A would have two ring entries: one for the local ring it is connected to, and one for the ring CISCO B is a part of. A management application can construct a virtual ring view either by collecting MIB information from all routers and grouping those in the same virtual ring together, or beginning with a particular router or routers, and collecting MIB information about other peer routers. ")
rsrbObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 29, 1))
rsrbVirtualRings = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 1))
rsrbRemotePeers = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 2))
rsrbPhysicalRings = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 3))
rsrbVirtRingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 1, 1), )
if mibBuilder.loadTexts: rsrbVirtRingTable.setStatus('current')
if mibBuilder.loadTexts: rsrbVirtRingTable.setDescription('Table of virtual rings in the router.')
rsrbVirtRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-RSRB-MIB", "rsrbVirtRingIndex"))
if mibBuilder.loadTexts: rsrbVirtRingEntry.setStatus('current')
if mibBuilder.loadTexts: rsrbVirtRingEntry.setDescription('Configuration values for a virtual ring. ')
rsrbVirtRingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: rsrbVirtRingIndex.setStatus('current')
if mibBuilder.loadTexts: rsrbVirtRingIndex.setDescription('The configured number of the virtual ring in which this peer is participating.')
rsrbVirtRingIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 1, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsrbVirtRingIPAddr.setStatus('current')
if mibBuilder.loadTexts: rsrbVirtRingIPAddr.setDescription('The IP address configured for this RSRB local peer.')
rsrbVirtRingMaxTcpQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsrbVirtRingMaxTcpQSize.setStatus('current')
if mibBuilder.loadTexts: rsrbVirtRingMaxTcpQSize.setDescription('The maximum number of packets that can be held in any single outbound TCP queue to a remote peer before packets are discarded. This value indicates the configured or default value.')
rsrbRemotePeerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 2, 1), )
if mibBuilder.loadTexts: rsrbRemotePeerTable.setStatus('current')
if mibBuilder.loadTexts: rsrbRemotePeerTable.setDescription('Table of RSRB remote peers for a virtual ring.')
rsrbRemotePeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-RSRB-MIB", "rsrbVirtRingIndex"), (0, "CISCO-RSRB-MIB", "rsrbRemotePeerIndex"))
if mibBuilder.loadTexts: rsrbRemotePeerEntry.setStatus('current')
if mibBuilder.loadTexts: rsrbRemotePeerEntry.setDescription('Configuration and status information of a remote RSRB peer. ')
rsrbRemotePeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: rsrbRemotePeerIndex.setStatus('current')
if mibBuilder.loadTexts: rsrbRemotePeerIndex.setDescription('An arbitrary index that uniquely identifies a remote peer within a virtual ring.')
rsrbRemotePeerEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("tcp", 1), ("serial", 2), ("lan", 3), ("fst", 4), ("frameRelay", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsrbRemotePeerEncapsulation.setStatus('current')
if mibBuilder.loadTexts: rsrbRemotePeerEncapsulation.setDescription('How traffic is encapsulated for RSRB: tcp = IP datagrams over a TCP connection serial = point-to-point (serial) direct encapsulation lan = direct encapsulation over a LAN fst = IP datagrams over a Fast Sequenced Transport connection frameRelay = direct encapsulation over frame relay')
rsrbRemotePeerIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 2, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsrbRemotePeerIPAddr.setStatus('current')
if mibBuilder.loadTexts: rsrbRemotePeerIPAddr.setDescription('The IP address used by the RSRB remote peer. This field is meaningful only for TCP and FST encapsulation. For other encapsulation types 0.0.0.0 is returned.')
rsrbRemotePeerLocalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 2, 1, 1, 4), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsrbRemotePeerLocalIfIndex.setStatus('current')
if mibBuilder.loadTexts: rsrbRemotePeerLocalIfIndex.setDescription('Local interface index value to the RSRB remote peer. Same value as used for accessing the Interface MIB for the same interface. This field is meaningful only for serial, LAN and frame relay encapsulation. For other encapsulation types 0 is returned.')
rsrbRemotePeerState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("dead", 1), ("closed", 2), ("opening", 3), ("openWaitXport", 4), ("waitRemoteRsp", 5), ("remoteResponded", 6), ("remoteOpened", 7), ("draining", 8), ("connected", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsrbRemotePeerState.setStatus('current')
if mibBuilder.loadTexts: rsrbRemotePeerState.setDescription('Current state of the RSRB session with the remote peer.')
rsrbRemotePeerPacketsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsrbRemotePeerPacketsRx.setStatus('current')
if mibBuilder.loadTexts: rsrbRemotePeerPacketsRx.setDescription('Number of packets received from remote peer.')
rsrbRemotePeerPacketsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsrbRemotePeerPacketsTx.setStatus('current')
if mibBuilder.loadTexts: rsrbRemotePeerPacketsTx.setDescription('Number of packets transmitted to remote peer.')
rsrbRemotePeerBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsrbRemotePeerBytesRx.setStatus('current')
if mibBuilder.loadTexts: rsrbRemotePeerBytesRx.setDescription('Number of bytes received from remote peer.')
rsrbRemotePeerBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsrbRemotePeerBytesTx.setStatus('current')
if mibBuilder.loadTexts: rsrbRemotePeerBytesTx.setDescription('Number of bytes transmitted to remote peer.')
rsrbRemotePeerExplorersRx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsrbRemotePeerExplorersRx.setStatus('current')
if mibBuilder.loadTexts: rsrbRemotePeerExplorersRx.setDescription('Number of explorer packets received from the remote peer.')
rsrbRemotePeerTcpQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 2, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsrbRemotePeerTcpQueue.setStatus('current')
if mibBuilder.loadTexts: rsrbRemotePeerTcpQueue.setDescription('Number of packets being held by the local router in the TCP output queue to the remote peer.')
rsrbRemotePeerDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsrbRemotePeerDrops.setStatus('current')
if mibBuilder.loadTexts: rsrbRemotePeerDrops.setDescription('Number of received packets discarded by the local router. The reasons for packets being dropped include, but are not limited to, problems with the configuration, queue overflow, and protocol errors.')
rsrbRemotePeerLocalAck = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 2, 1, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsrbRemotePeerLocalAck.setStatus('current')
if mibBuilder.loadTexts: rsrbRemotePeerLocalAck.setDescription('Indicates if local acknowledgment is used for the sessions going to the remote peer. TRUE -> local acknowledgment is used FALSE -> local acknowledgment is not used')
rsrbRemotePeerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsrbRemotePeerVersion.setStatus('current')
if mibBuilder.loadTexts: rsrbRemotePeerVersion.setDescription('The version of RSRB used between local and remote peer. Generally peers can communicate if they are within one version of each other. The value returned is the lower version of the two peers.')
rsrbRingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 3, 1), )
if mibBuilder.loadTexts: rsrbRingTable.setStatus('current')
if mibBuilder.loadTexts: rsrbRingTable.setDescription('Table of local and remote rings associated with a virtual ring.')
rsrbRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-RSRB-MIB", "rsrbVirtRingIndex"), (0, "CISCO-RSRB-MIB", "rsrbRingIndex"))
if mibBuilder.loadTexts: rsrbRingEntry.setStatus('current')
if mibBuilder.loadTexts: rsrbRingEntry.setDescription('A ring described by a unique ring number within the bridged token ring network, and the virtual ring which it is associated with.')
rsrbRingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: rsrbRingIndex.setStatus('current')
if mibBuilder.loadTexts: rsrbRingIndex.setDescription('The configured ring number that uniquely identifies this network segment or ring within the bridged token ring network.')
rsrbRingBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsrbRingBridge.setStatus('current')
if mibBuilder.loadTexts: rsrbRingBridge.setDescription("The configured number of the bridge that connects this entry's ring to the virtual ring.")
rsrbRingLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 3, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsrbRingLocal.setStatus('current')
if mibBuilder.loadTexts: rsrbRingLocal.setDescription('Indicates if the entry represents a local or remote ring. TRUE indicates a local ring. FALSE indicates a remote ring.')
rsrbRingType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2), ("sdllc", 3), ("qllc", 4), ("virtual", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsrbRingType.setStatus('current')
if mibBuilder.loadTexts: rsrbRingType.setDescription('The ring type.')
rsrbRingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 3, 1, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsrbRingMacAddr.setStatus('current')
if mibBuilder.loadTexts: rsrbRingMacAddr.setDescription("The mac address of either the local router's interface to the ring for local ring entries, or the remote peer's interface to the ring for remote ring entries. Not valid for entry types remote SDLLC and QLLC; for these type '00 00 00 00 00 00' will be returned.")
rsrbRingLocalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 3, 1, 1, 6), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsrbRingLocalIfIndex.setStatus('current')
if mibBuilder.loadTexts: rsrbRingLocalIfIndex.setDescription('For local ring entries, the local interface into the ring. This is the same value as used for accessing the Interface MIB for the same interface. Not meaningful for remote ring entries; for these types 0 will be returned.')
rsrbRingRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 3, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsrbRingRemoteIpAddress.setStatus('current')
if mibBuilder.loadTexts: rsrbRingRemoteIpAddress.setDescription('For remote ring entries, the IP address of the remote RSRB peer. Not meaningful for local ring entries, and so 0.0.0.0 will be returned.')
rsrbRingNbrPacketsFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsrbRingNbrPacketsFwd.setStatus('current')
if mibBuilder.loadTexts: rsrbRingNbrPacketsFwd.setDescription('The number of packets forwarded by the local router onto this ring.')
rsrbNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 29, 2))
rsrbNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 29, 2, 0))
rsrbPeerStateChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 29, 2, 0, 1)).setObjects(("CISCO-RSRB-MIB", "rsrbRemotePeerState"))
if mibBuilder.loadTexts: rsrbPeerStateChangeNotification.setStatus('current')
if mibBuilder.loadTexts: rsrbPeerStateChangeNotification.setDescription('This trap indicates that the state of an RSRB remote peer has transitioned to active (psConnected) or inactive (psDead or psClosed).')
rsrbMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 29, 3))
rsrbMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 29, 3, 1))
rsrbMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 29, 3, 2))
rsrbMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 29, 3, 1, 1)).setObjects(("CISCO-RSRB-MIB", "rsrbVirtRingGroup"), ("CISCO-RSRB-MIB", "rsrbRemotePeerGroup"), ("CISCO-RSRB-MIB", "rsrbRingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsrbMibCompliance = rsrbMibCompliance.setStatus('current')
if mibBuilder.loadTexts: rsrbMibCompliance.setDescription('The compliance statement for rsrb.')
rsrbVirtRingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 29, 3, 2, 1)).setObjects(("CISCO-RSRB-MIB", "rsrbVirtRingIPAddr"), ("CISCO-RSRB-MIB", "rsrbVirtRingMaxTcpQSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsrbVirtRingGroup = rsrbVirtRingGroup.setStatus('current')
if mibBuilder.loadTexts: rsrbVirtRingGroup.setDescription('A collection of objects providing configuration capability.')
rsrbRemotePeerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 29, 3, 2, 2)).setObjects(("CISCO-RSRB-MIB", "rsrbRemotePeerEncapsulation"), ("CISCO-RSRB-MIB", "rsrbRemotePeerIPAddr"), ("CISCO-RSRB-MIB", "rsrbRemotePeerLocalIfIndex"), ("CISCO-RSRB-MIB", "rsrbRemotePeerState"), ("CISCO-RSRB-MIB", "rsrbRemotePeerPacketsRx"), ("CISCO-RSRB-MIB", "rsrbRemotePeerPacketsTx"), ("CISCO-RSRB-MIB", "rsrbRemotePeerBytesRx"), ("CISCO-RSRB-MIB", "rsrbRemotePeerBytesTx"), ("CISCO-RSRB-MIB", "rsrbRemotePeerExplorersRx"), ("CISCO-RSRB-MIB", "rsrbRemotePeerTcpQueue"), ("CISCO-RSRB-MIB", "rsrbRemotePeerDrops"), ("CISCO-RSRB-MIB", "rsrbRemotePeerLocalAck"), ("CISCO-RSRB-MIB", "rsrbRemotePeerVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsrbRemotePeerGroup = rsrbRemotePeerGroup.setStatus('current')
if mibBuilder.loadTexts: rsrbRemotePeerGroup.setDescription('A collection of objects providing operational control capability.')
rsrbRingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 29, 3, 2, 3)).setObjects(("CISCO-RSRB-MIB", "rsrbRingBridge"), ("CISCO-RSRB-MIB", "rsrbRingLocal"), ("CISCO-RSRB-MIB", "rsrbRingType"), ("CISCO-RSRB-MIB", "rsrbRingMacAddr"), ("CISCO-RSRB-MIB", "rsrbRingLocalIfIndex"), ("CISCO-RSRB-MIB", "rsrbRingRemoteIpAddress"), ("CISCO-RSRB-MIB", "rsrbRingNbrPacketsFwd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsrbRingGroup = rsrbRingGroup.setStatus('current')
if mibBuilder.loadTexts: rsrbRingGroup.setDescription('A collection of objects providing operational control capability.')
mibBuilder.exportSymbols("CISCO-RSRB-MIB", rsrbRemotePeerEncapsulation=rsrbRemotePeerEncapsulation, rsrbMibCompliance=rsrbMibCompliance, rsrbRingIndex=rsrbRingIndex, rsrbRingLocal=rsrbRingLocal, rsrbRingGroup=rsrbRingGroup, rsrbRemotePeerVersion=rsrbRemotePeerVersion, rsrbRemotePeerLocalIfIndex=rsrbRemotePeerLocalIfIndex, rsrbRemotePeerDrops=rsrbRemotePeerDrops, rsrbMibConformance=rsrbMibConformance, rsrbRemotePeerTcpQueue=rsrbRemotePeerTcpQueue, rsrbRingNbrPacketsFwd=rsrbRingNbrPacketsFwd, rsrbObjects=rsrbObjects, rsrbRemotePeerState=rsrbRemotePeerState, rsrbRingBridge=rsrbRingBridge, rsrbRingType=rsrbRingType, rsrbMibGroups=rsrbMibGroups, rsrbRemotePeerGroup=rsrbRemotePeerGroup, rsrbRemotePeerIPAddr=rsrbRemotePeerIPAddr, rsrbNotificationPrefix=rsrbNotificationPrefix, rsrbRemotePeerExplorersRx=rsrbRemotePeerExplorersRx, rsrbRemotePeerPacketsRx=rsrbRemotePeerPacketsRx, rsrbRemotePeerBytesRx=rsrbRemotePeerBytesRx, rsrbVirtRingGroup=rsrbVirtRingGroup, rsrbRemotePeerLocalAck=rsrbRemotePeerLocalAck, PYSNMP_MODULE_ID=ciscoRsrbMIB, rsrbRingTable=rsrbRingTable, rsrbRingLocalIfIndex=rsrbRingLocalIfIndex, rsrbRemotePeers=rsrbRemotePeers, rsrbPeerStateChangeNotification=rsrbPeerStateChangeNotification, rsrbRingMacAddr=rsrbRingMacAddr, rsrbRemotePeerIndex=rsrbRemotePeerIndex, rsrbRingRemoteIpAddress=rsrbRingRemoteIpAddress, rsrbRingEntry=rsrbRingEntry, rsrbRemotePeerPacketsTx=rsrbRemotePeerPacketsTx, rsrbMibCompliances=rsrbMibCompliances, rsrbPhysicalRings=rsrbPhysicalRings, rsrbRemotePeerTable=rsrbRemotePeerTable, rsrbVirtRingIndex=rsrbVirtRingIndex, rsrbVirtRingIPAddr=rsrbVirtRingIPAddr, rsrbVirtRingMaxTcpQSize=rsrbVirtRingMaxTcpQSize, rsrbRemotePeerEntry=rsrbRemotePeerEntry, rsrbVirtualRings=rsrbVirtualRings, ciscoRsrbMIB=ciscoRsrbMIB, rsrbRemotePeerBytesTx=rsrbRemotePeerBytesTx, rsrbNotifications=rsrbNotifications, rsrbVirtRingTable=rsrbVirtRingTable, rsrbVirtRingEntry=rsrbVirtRingEntry)
