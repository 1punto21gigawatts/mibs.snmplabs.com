#
# PySNMP MIB module DGS-3420-28PC-L3MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DGS-3420-28PC-L3MGMT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:43:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
AreaID, Status, HelloRange, Metric, PositiveInteger, DesignatedRouterPriority, TOSType, UpToMaxAge, RouterID = mibBuilder.importSymbols("OSPF-MIB", "AreaID", "Status", "HelloRange", "Metric", "PositiveInteger", "DesignatedRouterPriority", "TOSType", "UpToMaxAge", "RouterID")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter64, NotificationType, Bits, Counter32, IpAddress, MibIdentifier, ModuleIdentity, Unsigned32, Integer32, iso, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter64", "NotificationType", "Bits", "Counter32", "IpAddress", "MibIdentifier", "ModuleIdentity", "Unsigned32", "Integer32", "iso", "TimeTicks")
MacAddress, RowStatus, DisplayString, TimeStamp, TruthValue, PhysAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "RowStatus", "DisplayString", "TimeStamp", "TruthValue", "PhysAddress", "TextualConvention")
dlink_Dgs3420Proj_Dgs3420_28PC, = mibBuilder.importSymbols("SWDGS3420PRIMGMT-MIB", "dlink-Dgs3420Proj-Dgs3420-28PC")
swL3MgmtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3))
if mibBuilder.loadTexts: swL3MgmtMIB.setLastUpdated('1606140000Z')
if mibBuilder.loadTexts: swL3MgmtMIB.setOrganization(' ')
if mibBuilder.loadTexts: swL3MgmtMIB.setContactInfo(' ')
if mibBuilder.loadTexts: swL3MgmtMIB.setDescription('The Structure of Layer 3 Network Management Information for the proprietary enterprise.')
class NodeAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class NetAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

swL3DevMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 1))
swL3IpMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2))
swL3RelayMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 3))
swL3IpMcastMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 6))
swL3OspfLsdbMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 13))
swL3VrrpOperMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 14))
swL3IpCtrlMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1))
swL3IpFdbMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 2))
swL3RelayDnsMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 3, 3))
swL3OspfECMPMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 15))
swL3RIPTimerMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 17))
swL3OspfDefInfoOrigMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 18))
class VrId(TextualConvention, Integer32):
    description = 'A number which, along with an interface index (ifIndex), serves to uniquely identify a virtual router on a given VRRP router. A set of one or more associated addresses is assigned to a VRID.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 255)

swL3DevCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 1, 1))
swL3DevCtrlRIPState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3DevCtrlRIPState.setStatus('current')
if mibBuilder.loadTexts: swL3DevCtrlRIPState.setDescription('This object indicates if the Routing Information Protocol (RIP) version 2 function is enabled or disabled.')
swL3DevCtrlOSPFState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3DevCtrlOSPFState.setStatus('current')
if mibBuilder.loadTexts: swL3DevCtrlOSPFState.setDescription('This object indicates OSPF protocol is enabled or disabled.')
swL3DevCtrlDVMRPState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3DevCtrlDVMRPState.setStatus('current')
if mibBuilder.loadTexts: swL3DevCtrlDVMRPState.setDescription('This object indicates if the DVMRP protocol is enabled or disabled.')
swL3DevCtrlVRRPState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3DevCtrlVRRPState.setStatus('current')
if mibBuilder.loadTexts: swL3DevCtrlVRRPState.setDescription('This object indicates VRRP protocol is enabled or disabled.')
swL3DevCtrlVrrpPingState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3DevCtrlVrrpPingState.setStatus('current')
if mibBuilder.loadTexts: swL3DevCtrlVrrpPingState.setDescription('This object indicates VRRP protocol Ping is enabled or disabled.')
swL3IpCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 3), )
if mibBuilder.loadTexts: swL3IpCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlTable.setDescription('This table contain IP interface information.')
swL3IpCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 3, 1), ).setIndexNames((0, "DGS-3420-28PC-L3MGMT-MIB", "swL3IpCtrlInterfaceName"))
if mibBuilder.loadTexts: swL3IpCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlEntry.setDescription('A list of information about a specific IP interface.')
swL3IpCtrlInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpCtrlInterfaceName.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlInterfaceName.setDescription('This object indicates the name of the IP interface.')
swL3IpCtrlIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpCtrlIfIndex.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlIfIndex.setDescription('This object uniquely identifies the IP interface number in the swL3IpCtrlTable.')
swL3IpCtrlIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlIpAddr.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlIpAddr.setDescription('The IP address of the interface. This object only can take the value of the unicast IP address.')
swL3IpCtrlIpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlIpSubnetMask.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlIpSubnetMask.setDescription('The IP net mask for this interface.')
swL3IpCtrlVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlVlanName.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlVlanName.setDescription("This object indicates the IP control entry's VLAN name. The VLAN name in each entry must be unique in the IP Control Table.")
swL3IpCtrlProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlProxyArp.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlProxyArp.setDescription('This object indicates enable/disable of the proxy ARP function for IPv4.')
swL3IpCtrlSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 3, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlSecondary.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlSecondary.setDescription('When this is true(1), the IP address is the secondary IP. When false(2), the IP address is the primary IP.')
swL3IpCtrlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("bootp", 3), ("dhcp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlMode.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlMode.setDescription('This object indicates the IP operation mode. other(1) - This entry is currently in use but the conditions under which it will remain are determined by each of the following values. bootp(3) - The IP address will be set automatically from a BOOTP server. dhcp(4) - The IP address will be set automatically from a DHCP server.')
swL3IpCtrlAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlAdminState.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlAdminState.setDescription('The state of the IP interface.')
swL3IpCtrlIpv4AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlIpv4AdminState.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlIpv4AdminState.setDescription('The IPv4 admin state of the IP interface. The default state is determined by project. This state will only be effective when the swL3IpCtrlAdminState is enabled.')
swL3IpCtrlIpv6AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlIpv6AdminState.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlIpv6AdminState.setDescription('The IPv6 admin state of the IP interface. The default state is determined by project. This state will only be effective when the swL3IpCtrlAdminState is enabled.')
swL3IpCtrlIpv6LinkLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 3, 1, 14), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpCtrlIpv6LinkLocalAddress.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlIpv6LinkLocalAddress.setDescription('The IPv6 link local address for this interface.')
swL3IpCtrlIpv6LinkLocalPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpCtrlIpv6LinkLocalPrefixLen.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlIpv6LinkLocalPrefixLen.setDescription('The IPv6 prefix length for this IPv6 link local address.')
swL3IpCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 3, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpCtrlState.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlState.setDescription('This variable displays the status of the entry. The status is used for creating, modifying, and deleting instances of the objects in this table.')
swL3IpCtrlIpv6LinkLocalAutoState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlIpv6LinkLocalAutoState.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlIpv6LinkLocalAutoState.setDescription('The state of the IPv6 link local auto.')
swL3IpCtrlLocalProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlLocalProxyArp.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlLocalProxyArp.setDescription('This object indicates enable/disable of the local proxy ARP function for IPv4.')
swL3IpCtrlIpMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 3, 1, 19), Integer32().clone(1500)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpCtrlIpMtu.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlIpMtu.setDescription('The MTU is the largest size of the IP datagram which may be transferred using a specific data link connection. The MTU value is a design parameter of a LAN and is a mutually agreed value (i.e. both ends of a link agree to use the same specific value) for most WAN links. The MTU range is based on the chip of the current device. The suggested minimum value is 1500 bytes. The suggested maximum value is the size of the jumbo frame minus 36. The suggested default setting is 1500 bytes.')
swL3IpCtrlDhcpv6ClientState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlDhcpv6ClientState.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlDhcpv6ClientState.setDescription('The state of the Dhcpv6 Client.')
swL3IpCtrlIpDirectedBroadcastState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlIpDirectedBroadcastState.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlIpDirectedBroadcastState.setDescription('The state of the IP Directed Broadcast.')
swL3IpCtrlIpDhcpOption12State = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlIpDhcpOption12State.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlIpDhcpOption12State.setDescription('Enable or disable insertion of option 12 in the DHCPDISCOVER and DHCPREQUEST message.')
swL3IpCtrlIpDhcpOption12HostName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 3, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlIpDhcpOption12HostName.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlIpDhcpOption12HostName.setDescription('Specify the host name to be inserted in the DHCPDISCOVER and DHCPREQUEST message. The specified host name must start with a letter, end with a letter or digit, and have only letters, digits, and hyphen as interior characters; the maximal length is 63. By default, the host name is empty. When set an empty host name, means to clear the host name setting and use the default value to encode option 12.')
swL3IpCtrlDhcpv6ClientPDState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlDhcpv6ClientPDState.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlDhcpv6ClientPDState.setDescription('The state of the Dhcpv6 Client PD.')
swL3IpCtrlDhcpv6ClientPDPrefixName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 3, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlDhcpv6ClientPDPrefixName.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlDhcpv6ClientPDPrefixName.setDescription("This object indicates the name for the DHCPv6 Client PD. If the swL3IpCtrlDhcpv6ClientPDState is disabled, this object will be clear and can't write.")
swL3IpCtrlDhcpv6ClientPDPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 3, 1, 26), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpCtrlDhcpv6ClientPDPrefix.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlDhcpv6ClientPDPrefix.setDescription('The IPv6 prefix obtained form delegation router.')
swL3IpCtrlDhcpv6ClientPDPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 3, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpCtrlDhcpv6ClientPDPrefixLen.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlDhcpv6ClientPDPrefixLen.setDescription('The IPv6 prefix length for the prefix obtained from delegation router.')
swL3IpCtrlIpv6AutoConfigState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlIpv6AutoConfigState.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlIpv6AutoConfigState.setDescription('The state of IPv6 stateless adddress autoconfig.')
swL3IpCtrlIpv6AutoConfigDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 3, 1, 29), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlIpv6AutoConfigDefault.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlIpv6AutoConfigDefault.setDescription('When this is true(1), a default route will be installed into ipv6 routing table. When false(2), no default route will be installed.')
swL3IpCtrlDhcpv6ClientRapidCommit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 3, 1, 30), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlDhcpv6ClientRapidCommit.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlDhcpv6ClientRapidCommit.setDescription('When this is true(1), Allows the two-message exchange method for address assignment.')
swL3IpCtrlDhcpv6ClientPdRapidCommit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 3, 1, 31), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlDhcpv6ClientPdRapidCommit.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlDhcpv6ClientPdRapidCommit.setDescription('When this is true(1), Allows the two-message exchange method for prefix assignment.')
swL3Ipv6CtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 4), )
if mibBuilder.loadTexts: swL3Ipv6CtrlTable.setStatus('current')
if mibBuilder.loadTexts: swL3Ipv6CtrlTable.setDescription('This table contains IPv6 information of an IP interface.')
swL3Ipv6CtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 4, 1), ).setIndexNames((0, "DGS-3420-28PC-L3MGMT-MIB", "swL3Ipv6CtrlInterfaceName"))
if mibBuilder.loadTexts: swL3Ipv6CtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swL3Ipv6CtrlEntry.setDescription('A list of IPv6 information about a specific IP interface.')
swL3Ipv6CtrlInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3Ipv6CtrlInterfaceName.setStatus('current')
if mibBuilder.loadTexts: swL3Ipv6CtrlInterfaceName.setDescription('This object indicates the name of the IP interface.')
swL3Ipv6CtrlMaxReassmblySize = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3Ipv6CtrlMaxReassmblySize.setStatus('current')
if mibBuilder.loadTexts: swL3Ipv6CtrlMaxReassmblySize.setDescription('Maximum Reassembly Size of the IP interface.')
swL3Ipv6CtrlNsRetransTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6CtrlNsRetransTimer.setStatus('current')
if mibBuilder.loadTexts: swL3Ipv6CtrlNsRetransTimer.setDescription("Neighbor solicitation's retransmit timer. The unit is set in milliseconds.")
swL3Ipv6CtrlRaState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6CtrlRaState.setStatus('current')
if mibBuilder.loadTexts: swL3Ipv6CtrlRaState.setDescription('Neighbor solicited state.')
swL3Ipv6CtrlRaMinRtrAdvInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 1350))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6CtrlRaMinRtrAdvInterval.setStatus('current')
if mibBuilder.loadTexts: swL3Ipv6CtrlRaMinRtrAdvInterval.setDescription('The minimum time allowed between sending unsolicited multicast Router Advertisements from the interface. The unit is set in seconds. It must be no less than 3 seconds and no greater than .75 * MaxRtrAdvInterval. Default value: 0.33 * MaxRtrAdvInterval')
swL3Ipv6CtrlRaMaxRtrAdvInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 1800)).clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6CtrlRaMaxRtrAdvInterval.setStatus('current')
if mibBuilder.loadTexts: swL3Ipv6CtrlRaMaxRtrAdvInterval.setDescription('The maximum time allowed between sending unsolicited multicast Router Advertisements from the interface. The unit is set in seconds.')
swL3Ipv6CtrlRaLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6CtrlRaLifeTime.setStatus('current')
if mibBuilder.loadTexts: swL3Ipv6CtrlRaLifeTime.setDescription('Indicates the lifetime of the router as the default router.')
swL3Ipv6CtrlRaReachableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6CtrlRaReachableTime.setStatus('current')
if mibBuilder.loadTexts: swL3Ipv6CtrlRaReachableTime.setDescription('Indicates the amount of time that a node can consider a neighboring node reachable after receiving a reachability confirmation.')
swL3Ipv6CtrlRaRetransTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 4, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6CtrlRaRetransTime.setStatus('current')
if mibBuilder.loadTexts: swL3Ipv6CtrlRaRetransTime.setDescription('Indicates the amount of time between retransmissions of neighbor solicited messages. The unit is set in millisecond.')
swL3Ipv6CtrlRaHopLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6CtrlRaHopLimit.setStatus('current')
if mibBuilder.loadTexts: swL3Ipv6CtrlRaHopLimit.setDescription('Indicates the default value of the hop limit field in the IPv6 header for packets sent by hosts that receive this RA message.')
swL3Ipv6CtrlRaManagedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6CtrlRaManagedFlag.setStatus('current')
if mibBuilder.loadTexts: swL3Ipv6CtrlRaManagedFlag.setDescription('When enabled, it indicates that hosts receiving this RA must use a stateful address configuration protocol to obtain an address in the addition to the addresses derived from the stateless address configuration.')
swL3Ipv6CtrlRaOtherConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6CtrlRaOtherConfigFlag.setStatus('current')
if mibBuilder.loadTexts: swL3Ipv6CtrlRaOtherConfigFlag.setDescription('When enabled, it indicates that hosts receiving this RA must use a stateful address configuration protocol to obtain an on-link address configuration information.')
swL3Ipv6CtrlDadRetransNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6CtrlDadRetransNum.setStatus('current')
if mibBuilder.loadTexts: swL3Ipv6CtrlDadRetransNum.setDescription('Indicates the value of duplicate address detection attempt number')
swL3Ipv6CtrlOptimisticDadState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6CtrlOptimisticDadState.setStatus('current')
if mibBuilder.loadTexts: swL3Ipv6CtrlOptimisticDadState.setDescription('Indicates the status of optimistic dad.')
swL3Ipv6AddressCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 5), )
if mibBuilder.loadTexts: swL3Ipv6AddressCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swL3Ipv6AddressCtrlTable.setDescription('This table contains IPv6 address information for each IP interface.')
swL3Ipv6AddressCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 5, 1), ).setIndexNames((0, "DGS-3420-28PC-L3MGMT-MIB", "swL3Ipv6AddressCtrlInterfaceName"), (0, "DGS-3420-28PC-L3MGMT-MIB", "swL3Ipv6Address"), (0, "DGS-3420-28PC-L3MGMT-MIB", "swL3Ipv6AddressCtrlPrefixLen"))
if mibBuilder.loadTexts: swL3Ipv6AddressCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swL3Ipv6AddressCtrlEntry.setDescription('A list of information about a specific IPv6 address.')
swL3Ipv6AddressCtrlInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3Ipv6AddressCtrlInterfaceName.setStatus('current')
if mibBuilder.loadTexts: swL3Ipv6AddressCtrlInterfaceName.setDescription('This object indicates the name of the IP interface. ')
swL3Ipv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 5, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3Ipv6Address.setStatus('current')
if mibBuilder.loadTexts: swL3Ipv6Address.setDescription('Specify the IPv6 address.')
swL3Ipv6AddressCtrlPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3Ipv6AddressCtrlPrefixLen.setStatus('current')
if mibBuilder.loadTexts: swL3Ipv6AddressCtrlPrefixLen.setDescription('Indicates the prefix length of this IPv6 address.')
swL3Ipv6AddressCtrlPreferredLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 5, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967294))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6AddressCtrlPreferredLifeTime.setStatus('current')
if mibBuilder.loadTexts: swL3Ipv6AddressCtrlPreferredLifeTime.setDescription('Indicates the number of seconds that an address, based on the specified prefix, using the stateless address configuration, remains in preferred state. For an infinite valid lifetime, the value can be set to 0xffffffff.')
swL3Ipv6AddressCtrlValidLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 5, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967294))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6AddressCtrlValidLifeTime.setStatus('current')
if mibBuilder.loadTexts: swL3Ipv6AddressCtrlValidLifeTime.setDescription('Indicates the number of seconds that an address, based on the specified prefix, using the stateless address configuration, remains valid. For an infinite valid lifetime, the value can be set to 0xffffffff.')
swL3Ipv6AddressCtrlOnLinkFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6AddressCtrlOnLinkFlag.setStatus('current')
if mibBuilder.loadTexts: swL3Ipv6AddressCtrlOnLinkFlag.setDescription('When enabled, the address implied by the specified prefix is available on the link where the RA message is received.')
swL3Ipv6AddressCtrlAutonomousFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6AddressCtrlAutonomousFlag.setStatus('current')
if mibBuilder.loadTexts: swL3Ipv6AddressCtrlAutonomousFlag.setDescription('When enabled, the specified prefix will be used to create an autonomous address configuration.')
swL3Ipv6AddressCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 5, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3Ipv6AddressCtrlState.setStatus('current')
if mibBuilder.loadTexts: swL3Ipv6AddressCtrlState.setDescription('This variable displays the status of the entry. The status is used for creating, modifying, and deleting instances of the objects in this table.')
swL3Ipv6AddressCtrlAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("dhcpv6", 2), ("stateless", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3Ipv6AddressCtrlAddressType.setStatus('current')
if mibBuilder.loadTexts: swL3Ipv6AddressCtrlAddressType.setDescription('This object indicates the type of the IPv6 address. manual(1): the IPv6 address is configured by user. dhcpv6(2): the IPv6 address is assigned by DHCPv6 server. stateless(3): the IPv6 address is assigned by router advertisement.')
swL3Ipv6DHCPv6CPDAddrCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 6), )
if mibBuilder.loadTexts: swL3Ipv6DHCPv6CPDAddrCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swL3Ipv6DHCPv6CPDAddrCtrlTable.setDescription('This table contain the information of the IPv6 address which based on DHCPv6 client PD.')
swL3Ipv6DHCPv6CPDAddrCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 6, 1), ).setIndexNames((0, "DGS-3420-28PC-L3MGMT-MIB", "swL3Ipv6DHCPv6CPDAddrCtrlInterfaceName"), (0, "DGS-3420-28PC-L3MGMT-MIB", "swL3Ipv6DHCPv6CPDAddrCtrlPrefixName"), (0, "DGS-3420-28PC-L3MGMT-MIB", "swL3Ipv6DHCPv6CPDAddrCtrlIPv6addr"), (0, "DGS-3420-28PC-L3MGMT-MIB", "swL3Ipv6DHCPv6CPDAddrCtrlPrefixLen"))
if mibBuilder.loadTexts: swL3Ipv6DHCPv6CPDAddrCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swL3Ipv6DHCPv6CPDAddrCtrlEntry.setDescription('A list of information about a specific DHCPv6 Client PD IPv6 address.')
swL3Ipv6DHCPv6CPDAddrCtrlInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3Ipv6DHCPv6CPDAddrCtrlInterfaceName.setStatus('current')
if mibBuilder.loadTexts: swL3Ipv6DHCPv6CPDAddrCtrlInterfaceName.setDescription('This object indicates the name of the IP interface. ')
swL3Ipv6DHCPv6CPDAddrCtrlPrefixName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3Ipv6DHCPv6CPDAddrCtrlPrefixName.setStatus('current')
if mibBuilder.loadTexts: swL3Ipv6DHCPv6CPDAddrCtrlPrefixName.setDescription('This object indicates the name of the prefix based on which the IPv6 address will be generate. ')
swL3Ipv6DHCPv6CPDAddrCtrlIPv6addr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 6, 1, 3), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3Ipv6DHCPv6CPDAddrCtrlIPv6addr.setStatus('current')
if mibBuilder.loadTexts: swL3Ipv6DHCPv6CPDAddrCtrlIPv6addr.setDescription('Specify the suffix of the IPv6 address.')
swL3Ipv6DHCPv6CPDAddrCtrlPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3Ipv6DHCPv6CPDAddrCtrlPrefixLen.setStatus('current')
if mibBuilder.loadTexts: swL3Ipv6DHCPv6CPDAddrCtrlPrefixLen.setDescription('Indicates the prefix length of this IPv6 address.')
swL3Ipv6DHCPv6CPDAddrCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3Ipv6DHCPv6CPDAddrCtrlState.setStatus('current')
if mibBuilder.loadTexts: swL3Ipv6DHCPv6CPDAddrCtrlState.setDescription('This variable displays the status of the entry. The status is used for creating and deleting instances of the objects in this table.')
swL3IpCtrlAllIpIfState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlAllIpIfState.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlAllIpIfState.setDescription('This object indicates all interface function state of the device. (except the loopback interface)')
swL3LoopBackIpCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 8), )
if mibBuilder.loadTexts: swL3LoopBackIpCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swL3LoopBackIpCtrlTable.setDescription('This table contains loopback IP interface information.')
swL3LoopBackIpCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 8, 1), ).setIndexNames((0, "DGS-3420-28PC-L3MGMT-MIB", "swL3LoopBackIpCtrlInterfaceName"))
if mibBuilder.loadTexts: swL3LoopBackIpCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swL3LoopBackIpCtrlEntry.setDescription('A list of information about a specific loopback IP interface.')
swL3LoopBackIpCtrlInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 8, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3LoopBackIpCtrlInterfaceName.setStatus('current')
if mibBuilder.loadTexts: swL3LoopBackIpCtrlInterfaceName.setDescription('This object indicates the name of the loopback IP interface.')
swL3LoopBackIpCtrlIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3LoopBackIpCtrlIfIndex.setStatus('current')
if mibBuilder.loadTexts: swL3LoopBackIpCtrlIfIndex.setDescription('This object uniquely identifies the loopback IP interface number in the swL3LoopBackIpCtrlTable.')
swL3LoopBackIpCtrlIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 8, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3LoopBackIpCtrlIpAddr.setStatus('current')
if mibBuilder.loadTexts: swL3LoopBackIpCtrlIpAddr.setDescription('The IP address of the loopback interface. This object only can take the value of the unicast IP address.')
swL3LoopBackIpCtrlIpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 8, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3LoopBackIpCtrlIpSubnetMask.setStatus('current')
if mibBuilder.loadTexts: swL3LoopBackIpCtrlIpSubnetMask.setDescription('The IP net mask for this loopback interface.')
swL3LoopBackIpCtrlAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3LoopBackIpCtrlAdminState.setStatus('current')
if mibBuilder.loadTexts: swL3LoopBackIpCtrlAdminState.setDescription('The state of the loopback IP interface.')
swL3LoopBackIpCtrlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 8, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3LoopBackIpCtrlRowStatus.setStatus('current')
if mibBuilder.loadTexts: swL3LoopBackIpCtrlRowStatus.setDescription('This variable displays the status of the entry. The status is used for creating, modifying, and deleting instances of the objects in this table.')
swL3LoopBackIpv6CtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 9), )
if mibBuilder.loadTexts: swL3LoopBackIpv6CtrlTable.setStatus('current')
if mibBuilder.loadTexts: swL3LoopBackIpv6CtrlTable.setDescription('This table contains loopback IPv6 interface information.')
swL3LoopBackIpv6CtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 9, 1), ).setIndexNames((0, "DGS-3420-28PC-L3MGMT-MIB", "swL3LoopBackIpv6CtrlInterfaceName"), (0, "DGS-3420-28PC-L3MGMT-MIB", "swL3LoopBackIpv6CtrlIpv6Address"), (0, "DGS-3420-28PC-L3MGMT-MIB", "swL3LoopBackIpv6CtrlIpv6PrefixLen"))
if mibBuilder.loadTexts: swL3LoopBackIpv6CtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swL3LoopBackIpv6CtrlEntry.setDescription('A list of information about a specific loopback IPv6 interface.')
swL3LoopBackIpv6CtrlInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 9, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12)))
if mibBuilder.loadTexts: swL3LoopBackIpv6CtrlInterfaceName.setStatus('current')
if mibBuilder.loadTexts: swL3LoopBackIpv6CtrlInterfaceName.setDescription('This object indicates the name of the loopback IP interface.')
swL3LoopBackIpv6CtrlIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 9, 1, 2), Ipv6Address())
if mibBuilder.loadTexts: swL3LoopBackIpv6CtrlIpv6Address.setStatus('current')
if mibBuilder.loadTexts: swL3LoopBackIpv6CtrlIpv6Address.setDescription('The IPv6 address of the loopback interface. This object only can take the value of the unicast IPv6 address.')
swL3LoopBackIpv6CtrlIpv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 9, 1, 3), Integer32())
if mibBuilder.loadTexts: swL3LoopBackIpv6CtrlIpv6PrefixLen.setStatus('current')
if mibBuilder.loadTexts: swL3LoopBackIpv6CtrlIpv6PrefixLen.setDescription('The IPv6 prefix for this loopback interface.')
swL3LoopBackIpv6CtrlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 1, 9, 1, 99), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3LoopBackIpv6CtrlRowStatus.setStatus('current')
if mibBuilder.loadTexts: swL3LoopBackIpv6CtrlRowStatus.setDescription('This variable displays the status of the entry. The status is used for creating, modifying, and deleting instances of the objects in this table.')
swL3IpFdbInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 2, 1), )
if mibBuilder.loadTexts: swL3IpFdbInfoTable.setStatus('current')
if mibBuilder.loadTexts: swL3IpFdbInfoTable.setDescription('A table that contains forwarding and/or filtering information. This information is used by the switch in determining how to propagate the received IP packets.')
swL3IpFdbInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 2, 1, 1), ).setIndexNames((0, "DGS-3420-28PC-L3MGMT-MIB", "swL3IpFdbInfoIpAddr"))
if mibBuilder.loadTexts: swL3IpFdbInfoEntry.setStatus('current')
if mibBuilder.loadTexts: swL3IpFdbInfoEntry.setDescription('Information about a specific IP address for which the bridge has some forwarding and/or filtering information.')
swL3IpFdbInfoIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 2, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpFdbInfoIpAddr.setStatus('current')
if mibBuilder.loadTexts: swL3IpFdbInfoIpAddr.setDescription('A IP address for which switch has forwarding and/or filtering information.')
swL3IpFdbInfoIpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpFdbInfoIpSubnetMask.setStatus('current')
if mibBuilder.loadTexts: swL3IpFdbInfoIpSubnetMask.setDescription('A IP net mask for this interface for which the switch has forwarding and/or filtering information.')
swL3IpFdbInfoPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpFdbInfoPort.setStatus('current')
if mibBuilder.loadTexts: swL3IpFdbInfoPort.setDescription("Either the value '0', or the port number of the port on which packets having an IP address equal to the value of the corresponding instance of swL3IpFdbInfoIpAddr has been seen. A value of '0' indicates that the port number has not been learned but that switch does have some forwarding/filtering information about this address.")
swL3IpFdbInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("static", 2), ("dynamic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpFdbInfoType.setStatus('current')
if mibBuilder.loadTexts: swL3IpFdbInfoType.setDescription('The status of this entry.')
swL3IpArpAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpArpAgingTime.setStatus('current')
if mibBuilder.loadTexts: swL3IpArpAgingTime.setDescription('The timeout period in minutes for aging out dynamically learned arp information.')
swL3IpStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 5), )
if mibBuilder.loadTexts: swL3IpStaticRouteTable.setStatus('current')
if mibBuilder.loadTexts: swL3IpStaticRouteTable.setDescription("This entity's IP static Routing table.")
swL3IpStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 5, 1), ).setIndexNames((0, "DGS-3420-28PC-L3MGMT-MIB", "swL3IpStaticRouteDest"), (0, "DGS-3420-28PC-L3MGMT-MIB", "swL3IpStaticRouteMask"), (0, "DGS-3420-28PC-L3MGMT-MIB", "swL3IpStaticRouteNextHop"))
if mibBuilder.loadTexts: swL3IpStaticRouteEntry.setStatus('current')
if mibBuilder.loadTexts: swL3IpStaticRouteEntry.setDescription("A particular route to a particular destination, under a particular policy. Once an entry is built,it shouldn't be modified.That is,it just supports create and delete actions.")
swL3IpStaticRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpStaticRouteDest.setStatus('current')
if mibBuilder.loadTexts: swL3IpStaticRouteDest.setDescription('The destination IP address of this route. This object may not take a Multicast (Class D) address value. Any assignment (implicit or otherwise) of an instance of this object to a value x must be rejected if the bitwise logical-AND of x with the value of the corresponding instance of the swL3IpStaticRouteMask object is not equal to x.')
swL3IpStaticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpStaticRouteMask.setStatus('current')
if mibBuilder.loadTexts: swL3IpStaticRouteMask.setDescription('Indicate the mask to be logical-AND with the destination address before being compared to the value in the swL3IpStaticRouteDest field. For those systems that do not support arbitrary subnet masks, an agent constructs the value of the swL3IpStaticRouteMask by reference to the IP Address Class. Any assignment (implicit or otherwise) of an instance of this object to a value x must be rejected if the bitwise logical-AND of x with the value of the corresponding instance of the swL3IpStaticRouteDest object is not equal to swL3IpStaticRouteDest.')
swL3IpStaticRouteBkupState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("backup", 2), ("none", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpStaticRouteBkupState.setStatus('current')
if mibBuilder.loadTexts: swL3IpStaticRouteBkupState.setDescription('The routing state for this route.The value SHOULD be primary(1), backup(2) or none(3).')
swL3IpStaticRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 5, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpStaticRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: swL3IpStaticRouteNextHop.setDescription('Specifies the IP address for the next hop router. An IP address of 255.255.255.255 denotes a Null interface as the next hop.')
swL3IpStaticRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpStaticRouteMetric.setStatus('current')
if mibBuilder.loadTexts: swL3IpStaticRouteMetric.setDescription('Specifies the routing metric for this route. If this metric is not used, its value will be displayed as -1.')
swL3IpStaticRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("valid", 3), ("active", 4), ("inActive", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpStaticRouteStatus.setStatus('current')
if mibBuilder.loadTexts: swL3IpStaticRouteStatus.setDescription('This object indicates the status of this entry. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. invalid(2) - writing this value to the object, and then the corresponding entry will be removed from the table. valid(3) - this entry resides in the table. active(4) - the nextHop of this entry exists in the ARP table. inActive(5) - the next hop of this entry does not exist in the ARP table.')
swL3IpStaticRouteWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpStaticRouteWeight.setStatus('current')
if mibBuilder.loadTexts: swL3IpStaticRouteWeight.setDescription('Specifies the weight value. Used for the weighted multipath.')
swL3IpStaticRouteInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 5, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpStaticRouteInterfaceName.setStatus('current')
if mibBuilder.loadTexts: swL3IpStaticRouteInterfaceName.setDescription('Specifies the name of the IP interface.')
swL3IpMcastStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 6, 1), )
if mibBuilder.loadTexts: swL3IpMcastStaticRouteTable.setStatus('current')
if mibBuilder.loadTexts: swL3IpMcastStaticRouteTable.setDescription('IP multicast static routing allows you to have multicast paths diverge from the unicast paths. ')
swL3IpMcastStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 6, 1, 1), ).setIndexNames((0, "DGS-3420-28PC-L3MGMT-MIB", "swL3IpMcastStaticRouteIpmrouteAddr"), (0, "DGS-3420-28PC-L3MGMT-MIB", "swL3IpMcastStaticRouteIpmrouteMask"))
if mibBuilder.loadTexts: swL3IpMcastStaticRouteEntry.setStatus('current')
if mibBuilder.loadTexts: swL3IpMcastStaticRouteEntry.setDescription('A list of information about IP multicast static routes.')
swL3IpMcastStaticRouteIpmrouteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 6, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: swL3IpMcastStaticRouteIpmrouteAddr.setStatus('current')
if mibBuilder.loadTexts: swL3IpMcastStaticRouteIpmrouteAddr.setDescription('If the source IP address of the received IP multicast packet matches this Ipmrouteaddress, the RPF network is used to do an RPF check.')
swL3IpMcastStaticRouteIpmrouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 6, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: swL3IpMcastStaticRouteIpmrouteMask.setStatus('current')
if mibBuilder.loadTexts: swL3IpMcastStaticRouteIpmrouteMask.setDescription('This specifies an IP net Mask for this interface.')
swL3IpMcastStaticRouteRpfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 6, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpMcastStaticRouteRpfAddr.setStatus('current')
if mibBuilder.loadTexts: swL3IpMcastStaticRouteRpfAddr.setDescription('If the source IP address of the received IP multicast packet matches the Ipmrouteaddress, the Rpfaddress will be used to check whether the packet received is from a legal interface. If it is set to null, it means that if the source IP address in the received IP multicast packet matches the Ipmrouteaddress, the RPF check will fail.')
swL3IpMcastStaticRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 6, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpMcastStaticRouteRowStatus.setStatus('current')
if mibBuilder.loadTexts: swL3IpMcastStaticRouteRowStatus.setDescription('This object indicates the status of this entry.')
swL3IpStaticRouteTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 7), )
if mibBuilder.loadTexts: swL3IpStaticRouteTunnelTable.setStatus('current')
if mibBuilder.loadTexts: swL3IpStaticRouteTunnelTable.setDescription("This entity's IPv4 static Routing tunnel table.")
swL3IpStaticRouteTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 7, 1), ).setIndexNames((0, "DGS-3420-28PC-L3MGMT-MIB", "swL3IpStaticRouteDest"), (0, "DGS-3420-28PC-L3MGMT-MIB", "swL3IpStaticRouteMask"), (0, "DGS-3420-28PC-L3MGMT-MIB", "swL3IpStaticRouteTunnelInterfaceName"))
if mibBuilder.loadTexts: swL3IpStaticRouteTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: swL3IpStaticRouteTunnelEntry.setDescription('A particular route to a particular destination, under a particular policy. Once an entry is built, it cannot be modified. That is, it just supports create and delete actions.')
swL3IpStaticRouteTunnelInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpStaticRouteTunnelInterfaceName.setStatus('current')
if mibBuilder.loadTexts: swL3IpStaticRouteTunnelInterfaceName.setDescription('This object indicates the name of the IP tunnel interface.')
swL3IpStaticRouteTunnelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 2, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpStaticRouteTunnelRowStatus.setStatus('current')
if mibBuilder.loadTexts: swL3IpStaticRouteTunnelRowStatus.setDescription('This object indicates the status of this entry.')
swL3RelayDnsState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayDnsState.setStatus('current')
if mibBuilder.loadTexts: swL3RelayDnsState.setDescription('This object indicates if the DNS Relay function is enabled or disabled.')
swL3RelayDnsPrimaryServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 3, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayDnsPrimaryServer.setStatus('current')
if mibBuilder.loadTexts: swL3RelayDnsPrimaryServer.setDescription('This object indicates the address of the primary DNS server.')
swL3RelayDnsSecondaryServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 3, 3, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayDnsSecondaryServer.setStatus('current')
if mibBuilder.loadTexts: swL3RelayDnsSecondaryServer.setDescription('This object indicates the address of the secondary DNS server.')
swL3RelayDnsCacheState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 3, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayDnsCacheState.setStatus('current')
if mibBuilder.loadTexts: swL3RelayDnsCacheState.setDescription('This object indicates DNS Relay cache is enabled or disabled.')
swL3RelayDnsStaticTableState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 3, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayDnsStaticTableState.setStatus('current')
if mibBuilder.loadTexts: swL3RelayDnsStaticTableState.setDescription('This object indicates DNS Relay static table is enabled or disabled.')
swL3RelayDnsCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 3, 3, 6), )
if mibBuilder.loadTexts: swL3RelayDnsCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swL3RelayDnsCtrlTable.setDescription('This table displays the current DNS relay static table.')
swL3RelayDnsCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 3, 3, 6, 1), ).setIndexNames((0, "DGS-3420-28PC-L3MGMT-MIB", "swL3RelayDnsCtrlDomainName"), (0, "DGS-3420-28PC-L3MGMT-MIB", "swL3RelayDnsCtrlIpAddr"))
if mibBuilder.loadTexts: swL3RelayDnsCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swL3RelayDnsCtrlEntry.setDescription('A list of information display the current DNS relay static table.')
swL3RelayDnsCtrlDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 3, 3, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3RelayDnsCtrlDomainName.setStatus('current')
if mibBuilder.loadTexts: swL3RelayDnsCtrlDomainName.setDescription('The domain name of the entry.')
swL3RelayDnsCtrlIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 3, 3, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3RelayDnsCtrlIpAddr.setStatus('current')
if mibBuilder.loadTexts: swL3RelayDnsCtrlIpAddr.setDescription('The IP address of the entry.')
swL3RelayDnsCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 3, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("valid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayDnsCtrlState.setStatus('current')
if mibBuilder.loadTexts: swL3RelayDnsCtrlState.setDescription('This object indicates the status of this entry. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. invalid(2) - writing this value to the object, and then the corresponding entry will be removed from the table. valid(3) - this entry is reside in the table.')
swL3Md5Table = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 4), )
if mibBuilder.loadTexts: swL3Md5Table.setStatus('current')
if mibBuilder.loadTexts: swL3Md5Table.setDescription('This table displays the current MD5 key table.')
swL3Md5Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 4, 1), ).setIndexNames((0, "DGS-3420-28PC-L3MGMT-MIB", "swL3Md5KeyId"))
if mibBuilder.loadTexts: swL3Md5Entry.setStatus('current')
if mibBuilder.loadTexts: swL3Md5Entry.setDescription('A list of information displays the current MD5 key table.')
swL3Md5KeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3Md5KeyId.setStatus('current')
if mibBuilder.loadTexts: swL3Md5KeyId.setDescription('The MD5 key ID.')
swL3Md5Key = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3Md5Key.setStatus('current')
if mibBuilder.loadTexts: swL3Md5Key.setDescription('An MD5 password of up to 16 bytes.')
swL3Md5RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3Md5RowStatus.setStatus('current')
if mibBuilder.loadTexts: swL3Md5RowStatus.setDescription('This object indicates the status of this entry.')
swL3RouteRedistriTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 5), )
if mibBuilder.loadTexts: swL3RouteRedistriTable.setStatus('current')
if mibBuilder.loadTexts: swL3RouteRedistriTable.setDescription("Route redistribution allows routers on the network that are running different routing protocols to exchange routing information. This is accomplished by comparing the routes stored in the varios routers' routing tables and assigning appropriate metrics. This information is then exchanged among the various routers according to the individual routers current routing protocol.")
swL3RouteRedistriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 5, 1), ).setIndexNames((0, "DGS-3420-28PC-L3MGMT-MIB", "swL3RouteRedistriSrcProtocol"), (0, "DGS-3420-28PC-L3MGMT-MIB", "swL3RouteRedistriDstProtocol"))
if mibBuilder.loadTexts: swL3RouteRedistriEntry.setStatus('current')
if mibBuilder.loadTexts: swL3RouteRedistriEntry.setDescription('A list of information displaying the route redistribution table.')
swL3RouteRedistriSrcProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("rip", 2), ("ospf", 3), ("static", 4), ("local", 5), ("bgp", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3RouteRedistriSrcProtocol.setStatus('current')
if mibBuilder.loadTexts: swL3RouteRedistriSrcProtocol.setDescription('Allows the selection of the protocol of the source device.')
swL3RouteRedistriDstProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 6))).clone(namedValues=NamedValues(("other", 1), ("rip", 2), ("ospf", 3), ("bgp", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3RouteRedistriDstProtocol.setStatus('current')
if mibBuilder.loadTexts: swL3RouteRedistriDstProtocol.setDescription('Allows the selection of the protocol of the destination device.')
swL3RouteRedistriType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("all", 2), ("type-1", 3), ("type-2", 4), ("internal", 5), ("external", 6), ("inter-E1", 7), ("inter-E2", 8), ("extType1", 9), ("extType2", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3RouteRedistriType.setStatus('current')
if mibBuilder.loadTexts: swL3RouteRedistriType.setDescription('Allows the selection of one of the methods for calculating the metric value.')
swL3RouteRedistriMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 5, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3RouteRedistriMetric.setStatus('current')
if mibBuilder.loadTexts: swL3RouteRedistriMetric.setDescription("Allows the entry of an OSPF interface cost. This is analogous to a Hop Count in the RIP routing protocol. The value '0' indicates default value.")
swL3RouteRedistriRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3RouteRedistriRowStatus.setStatus('current')
if mibBuilder.loadTexts: swL3RouteRedistriRowStatus.setDescription('This object indicates the status of this entry.')
swL3RouteRedistriRouteMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3RouteRedistriRouteMapName.setStatus('current')
if mibBuilder.loadTexts: swL3RouteRedistriRouteMapName.setDescription('This Object just works when the destination protocol is BGP and indicate the route-map working when redistribute the route to BGP.')
swL3OspfHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 6), )
if mibBuilder.loadTexts: swL3OspfHostTable.setStatus('current')
if mibBuilder.loadTexts: swL3OspfHostTable.setDescription('The list of Hosts, and their metrics, that the router will advertise as host routes.')
swL3OspfHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 6, 1), ).setIndexNames((0, "DGS-3420-28PC-L3MGMT-MIB", "swL3OspfHostIpAddress"), (0, "DGS-3420-28PC-L3MGMT-MIB", "swL3OspfHostTOS"))
if mibBuilder.loadTexts: swL3OspfHostEntry.setStatus('current')
if mibBuilder.loadTexts: swL3OspfHostEntry.setDescription('A metric to be advertised, for a given type of service, when a given host is reachable.')
swL3OspfHostIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfHostIpAddress.setStatus('current')
if mibBuilder.loadTexts: swL3OspfHostIpAddress.setDescription('The IP Address of the Host.')
swL3OspfHostTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 6, 1, 2), TOSType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfHostTOS.setStatus('current')
if mibBuilder.loadTexts: swL3OspfHostTOS.setDescription('The Type of Service of the route being configured.')
swL3OspfHostMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 6, 1, 3), Metric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3OspfHostMetric.setStatus('current')
if mibBuilder.loadTexts: swL3OspfHostMetric.setDescription('The Metric to be advertised.')
swL3OspfHostAreaID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 6, 1, 4), AreaID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3OspfHostAreaID.setStatus('current')
if mibBuilder.loadTexts: swL3OspfHostAreaID.setDescription('The Area the Host Entry is to be found within. By default, the area that a subsuming OSPF interface is in, or 0.0.0.0')
swL3OspfHostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3OspfHostStatus.setStatus('current')
if mibBuilder.loadTexts: swL3OspfHostStatus.setDescription("This variable displays the status of the entry. Setting it to 'invalid' has the effect of rendering it inoperative. The internal effect (row removal) is implementation dependent.")
swL3ospfVirtIfTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 7), )
if mibBuilder.loadTexts: swL3ospfVirtIfTable.setReference('OSPF Version 2, Appendix C.4 Virtual link parameters')
if mibBuilder.loadTexts: swL3ospfVirtIfTable.setStatus('current')
if mibBuilder.loadTexts: swL3ospfVirtIfTable.setDescription("Information about this router's virtual inter- faces.")
swL3ospfVirtIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 7, 1), ).setIndexNames((0, "DGS-3420-28PC-L3MGMT-MIB", "swL3ospfVirtIfAreaId"), (0, "DGS-3420-28PC-L3MGMT-MIB", "swL3ospfVirtIfNeighbor"))
if mibBuilder.loadTexts: swL3ospfVirtIfEntry.setStatus('current')
if mibBuilder.loadTexts: swL3ospfVirtIfEntry.setDescription('Information about a single Virtual Interface.')
swL3ospfVirtIfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 7, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfVirtIfAreaId.setStatus('current')
if mibBuilder.loadTexts: swL3ospfVirtIfAreaId.setDescription('The Transit Area that the Virtual Link traverses. By definition, this is not 0.0.0.0')
swL3ospfVirtIfNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 7, 1, 2), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfVirtIfNeighbor.setStatus('current')
if mibBuilder.loadTexts: swL3ospfVirtIfNeighbor.setDescription('The Router ID of the Virtual Neighbor.')
swL3ospfVirtIfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 7, 1, 3), UpToMaxAge().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfVirtIfTransitDelay.setStatus('current')
if mibBuilder.loadTexts: swL3ospfVirtIfTransitDelay.setDescription('The estimated number of seconds it takes to transmit a link- state update packet over this interface.')
swL3ospfVirtIfRetransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 7, 1, 4), UpToMaxAge().clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfVirtIfRetransInterval.setStatus('current')
if mibBuilder.loadTexts: swL3ospfVirtIfRetransInterval.setDescription('The number of seconds between link-state ad- vertisement retransmissions, for adjacencies belonging to this interface. This value is also used when retransmitting database descrip- tion and link-state request packets. This value should be well over the expected round- trip time.')
swL3ospfVirtIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 7, 1, 5), HelloRange().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfVirtIfHelloInterval.setStatus('current')
if mibBuilder.loadTexts: swL3ospfVirtIfHelloInterval.setDescription('The length of time, in seconds, between the Hello packets that the router sends on the in- terface. This value must be the same for the virtual neighbor.')
swL3ospfVirtIfRtrDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(60)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfVirtIfRtrDeadInterval.setStatus('current')
if mibBuilder.loadTexts: swL3ospfVirtIfRtrDeadInterval.setDescription("The number of seconds that a router's Hello packets have not been seen before it's neigh- bors declare the router down. This should be some multiple of the Hello interval. This value must be the same for the virtual neigh- bor.")
swL3ospfVirtIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("down", 1), ("pointToPoint", 4))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfVirtIfState.setStatus('current')
if mibBuilder.loadTexts: swL3ospfVirtIfState.setDescription('OSPF virtual interface states.')
swL3ospfVirtIfEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfVirtIfEvents.setStatus('current')
if mibBuilder.loadTexts: swL3ospfVirtIfEvents.setDescription('The number of state changes or error events on this Virtual Link')
swL3ospfVirtIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfVirtIfAuthType.setReference('OSPF Version 2, Appendix E Authentication')
if mibBuilder.loadTexts: swL3ospfVirtIfAuthType.setStatus('current')
if mibBuilder.loadTexts: swL3ospfVirtIfAuthType.setDescription('The authentication type specified for a virtu- al interface. Additional authentication types may be assigned locally.')
swL3ospfVirtIfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 7, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)).clone(hexValue="0000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfVirtIfAuthKey.setReference('OSPF Version 2, Section 9 The Interface Data Structure')
if mibBuilder.loadTexts: swL3ospfVirtIfAuthKey.setStatus('current')
if mibBuilder.loadTexts: swL3ospfVirtIfAuthKey.setDescription('If Authentication Type is simplePassword, the device will left adjust and zero fill to 8 oc- tets. Note that unauthenticated interfaces need no authentication key, and simple password authen- tication cannot use a key of more than 8 oc- tets. Larger keys are useful only with authen- tication mechanisms not specified in this docu- ment.')
swL3ospfVirtIfAuthKeyID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 7, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfVirtIfAuthKeyID.setStatus('current')
if mibBuilder.loadTexts: swL3ospfVirtIfAuthKeyID.setDescription('The MD5 key ID.')
swL3ospfVirtIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 7, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfVirtIfStatus.setStatus('current')
if mibBuilder.loadTexts: swL3ospfVirtIfStatus.setDescription("This variable displays the status of the en- try. Setting it to 'invalid' has the effect of rendering it inoperative. The internal effect (row removal) is implementation dependent.")
swL3ospfIfTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 8), )
if mibBuilder.loadTexts: swL3ospfIfTable.setReference('OSPF Version 2, Appendix C.3 Router interface parameters')
if mibBuilder.loadTexts: swL3ospfIfTable.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfTable.setDescription('The OSPF Interface Table describes the inter- faces from the viewpoint of OSPF.')
swL3ospfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 8, 1), ).setIndexNames((0, "DGS-3420-28PC-L3MGMT-MIB", "swL3ospfIfIpAddress"), (0, "DGS-3420-28PC-L3MGMT-MIB", "swL3ospfAddressLessIf"))
if mibBuilder.loadTexts: swL3ospfIfEntry.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfEntry.setDescription('The OSPF Interface Entry describes one inter- face from the viewpoint of OSPF.')
swL3ospfIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 8, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfIfIpAddress.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfIpAddress.setDescription('The IP address of this OSPF interface.')
swL3ospfAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfAddressLessIf.setStatus('current')
if mibBuilder.loadTexts: swL3ospfAddressLessIf.setDescription('For the purpose of easing the instancing of addressed and addressless interfaces; This variable takes the value 0 on interfaces with IP Addresses, and the corresponding value of ifIndex for interfaces having no IP Address.')
swL3ospfIfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 8, 1, 3), AreaID().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3ospfIfAreaId.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfAreaId.setDescription('A 32-bit integer uniquely identifying the area to which the interface connects. Area ID 0.0.0.0 is used for the OSPF backbone.')
swL3ospfIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("broadcast", 1), ("nbma", 2), ("pointToPoint", 3), ("pointToMultipoint", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3ospfIfType.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfType.setDescription("The OSPF interface type. By way of a default, this field may be intuited from the corresponding value of ifType. Broad- cast LANs, such as Ethernet and IEEE 802.5, take the value 'broadcast', X.25 and similar technologies take the value 'nbma', and links that are definitively point to point take the value 'pointToPoint'.")
swL3ospfIfAdminStat = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 8, 1, 5), Status().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3ospfIfAdminStat.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfAdminStat.setDescription("The OSPF interface's administrative status. The value formed on the interface, and the in- terface will be advertised as an internal route to some area. The value 'disabled' denotes that the interface is external to OSPF.")
swL3ospfIfRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 8, 1, 6), DesignatedRouterPriority().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3ospfIfRtrPriority.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfRtrPriority.setDescription('The priority of this interface. Used in multi-access networks, this field is used in the designated router election algorithm. The value 0 signifies that the router is not eligi- ble to become the designated router on this particular network. In the event of a tie in this value, routers will use their Router ID as a tie breaker.')
swL3ospfIfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 8, 1, 7), UpToMaxAge().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfIfTransitDelay.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfTransitDelay.setDescription('The estimated number of seconds it takes to transmit a link state update packet over this interface.')
swL3ospfIfRetransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 8, 1, 8), UpToMaxAge().clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfIfRetransInterval.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfRetransInterval.setDescription('The number of seconds between link-state ad- vertisement retransmissions, for adjacencies belonging to this interface. This value is also used when retransmitting database descrip- tion and link-state request packets.')
swL3ospfIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 8, 1, 9), HelloRange().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3ospfIfHelloInterval.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfHelloInterval.setDescription('The length of time, in seconds, between the Hello packets that the router sends on the in- terface. This value must be the same for all routers attached to a common network.')
swL3ospfIfRtrDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 8, 1, 10), PositiveInteger().clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3ospfIfRtrDeadInterval.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfRtrDeadInterval.setDescription("The number of seconds that a router's Hello packets have not been seen before it's neigh- bors declare the router down. This should be some multiple of the Hello interval. This value must be the same for all routers attached to a common network.")
swL3ospfIfPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 8, 1, 11), PositiveInteger().clone(120)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfIfPollInterval.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfPollInterval.setDescription('The larger time interval, in seconds, between the Hello packets sent to an inactive non- broadcast multi- access neighbor.')
swL3ospfIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("down", 1), ("loopback", 2), ("waiting", 3), ("pointToPoint", 4), ("designatedRouter", 5), ("backupDesignatedRouter", 6), ("otherDesignatedRouter", 7))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfIfState.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfState.setDescription('The OSPF Interface State.')
swL3ospfIfDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 8, 1, 13), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfIfDesignatedRouter.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfDesignatedRouter.setDescription('The IP Address of the Designated Router.')
swL3ospfIfBackupDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 8, 1, 14), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfIfBackupDesignatedRouter.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfBackupDesignatedRouter.setDescription('The IP Address of the Backup Designated Router.')
swL3ospfIfEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 8, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfIfEvents.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfEvents.setDescription('The number of times this OSPF interface has changed its state, or an error has occurred.')
swL3ospfIfMulticastForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 8, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("blocked", 1), ("multicast", 2), ("unicast", 3))).clone('blocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfIfMulticastForwarding.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfMulticastForwarding.setDescription('The way multicasts should forwarded on this interface; not forwarded, forwarded as data link multicasts, or forwarded as data link uni- casts. Data link multicasting is not meaning- ful on point to point and NBMA interfaces, and setting ospfMulticastForwarding to 0 effective- ly disables all multicast forwarding.')
swL3ospfIfDemand = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 8, 1, 17), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfIfDemand.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfDemand.setDescription('Indicates whether Demand OSPF procedures (hel- lo supression to FULL neighbors and setting the DoNotAge flag on proogated LSAs) should be per- formed on this interface.')
swL3ospfIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 8, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3ospfIfAuthType.setReference('OSPF Version 2, Appendix E Authentication')
if mibBuilder.loadTexts: swL3ospfIfAuthType.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfAuthType.setDescription('The authentication type specified for an in- terface. Additional authentication types may be assigned locally.')
swL3ospfIfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 8, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)).clone(hexValue="0000000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3ospfIfAuthKey.setReference('OSPF Version 2, Section 9 The Interface Data Structure')
if mibBuilder.loadTexts: swL3ospfIfAuthKey.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfAuthKey.setDescription("The Authentication Key. If the Area's Author- ization Type is simplePassword, and the key length is shorter than 8 octets, the agent will left adjust and zero fill to 8 octets. Note that unauthenticated interfaces need no authentication key, and simple password authen- tication cannot use a key of more than 8 oc- tets. Larger keys are useful only with authen- tication mechanisms not specified in this docu- ment. When read, ospfIfAuthKey always returns an Oc- tet String of length zero.")
swL3ospfIfAuthKeyID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 8, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3ospfIfAuthKeyID.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfAuthKeyID.setDescription('The MD5 key ID.')
swL3ospfIfPassiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 8, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3ospfIfPassiveMode.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfPassiveMode.setDescription('Assign the designated entry to be a passive interface.')
swL3ospfIfMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 8, 1, 23), Metric()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3ospfIfMetric.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfMetric.setDescription('The Metric to be advertised.')
swL3ospfIfDistributeListInType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 8, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("access-list", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3ospfIfDistributeListInType.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfDistributeListInType.setDescription('The type of route filter for distribute list in.')
swL3ospfIfDistributeListInName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 8, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3ospfIfDistributeListInName.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfDistributeListInName.setDescription('The name of route filter for distribute list in.')
swL3RoutePreference = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 9))
swL3RoutePreferenceRIP = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RoutePreferenceRIP.setStatus('current')
if mibBuilder.loadTexts: swL3RoutePreferenceRIP.setDescription('Used to configure the route preference of RIP.')
swL3RoutePreferenceOSPFIntra = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RoutePreferenceOSPFIntra.setStatus('current')
if mibBuilder.loadTexts: swL3RoutePreferenceOSPFIntra.setDescription('Used to configure the route preference of OSPF Intra.')
swL3RoutePreferenceStatic = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RoutePreferenceStatic.setStatus('current')
if mibBuilder.loadTexts: swL3RoutePreferenceStatic.setDescription('Used to configure the route preference of Static.')
swL3RoutePreferenceLocal = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3RoutePreferenceLocal.setStatus('current')
if mibBuilder.loadTexts: swL3RoutePreferenceLocal.setDescription('Used to read the route preference of Local.')
swL3RoutePreferenceOSPFInter = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 9, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RoutePreferenceOSPFInter.setStatus('current')
if mibBuilder.loadTexts: swL3RoutePreferenceOSPFInter.setDescription('Used to configure the route preference of OSPF Inter.')
swL3RoutePreferenceOSPFExtT1 = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RoutePreferenceOSPFExtT1.setStatus('current')
if mibBuilder.loadTexts: swL3RoutePreferenceOSPFExtT1.setDescription('Used to configure the route preference of OSPFExtT1.')
swL3RoutePreferenceOSPFExtT2 = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 9, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RoutePreferenceOSPFExtT2.setStatus('current')
if mibBuilder.loadTexts: swL3RoutePreferenceOSPFExtT2.setDescription('Used to configure the route preference of OSPF ExtT2.')
swL3RoutePreferenceDefault = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 9, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RoutePreferenceDefault.setStatus('current')
if mibBuilder.loadTexts: swL3RoutePreferenceDefault.setDescription('Used to configure the route preference of Default route.')
swL3ospfAreaTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 10), )
if mibBuilder.loadTexts: swL3ospfAreaTable.setReference('OSPF Version 2, Section 6 The Area Data Struc- ture')
if mibBuilder.loadTexts: swL3ospfAreaTable.setStatus('current')
if mibBuilder.loadTexts: swL3ospfAreaTable.setDescription("Information describing the configured parame- ters and cumulative statistics of the router's attached areas.")
swL3ospfAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 10, 1), ).setIndexNames((0, "DGS-3420-28PC-L3MGMT-MIB", "swL3ospfAreaId"))
if mibBuilder.loadTexts: swL3ospfAreaEntry.setStatus('current')
if mibBuilder.loadTexts: swL3ospfAreaEntry.setDescription("Information describing the configured parame- ters and cumulative statistics of one of the router's attached areas.")
swL3ospfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 10, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfAreaId.setStatus('current')
if mibBuilder.loadTexts: swL3ospfAreaId.setDescription('A 32-bit integer uniquely identifying an area. Area ID 0.0.0.0 is used for the OSPF backbone.')
swL3ospfAreaType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("stub", 2), ("nssa", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfAreaType.setStatus('obsolete')
if mibBuilder.loadTexts: swL3ospfAreaType.setDescription('The type specified for an area.')
swL3ospfAreaSummaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfAreaSummaryState.setStatus('current')
if mibBuilder.loadTexts: swL3ospfAreaSummaryState.setDescription('Whether the summary LSA is effective for this area.')
swL3ospfAreaMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3ospfAreaMetric.setStatus('current')
if mibBuilder.loadTexts: swL3ospfAreaMetric.setDescription('Enter the metric (1 - 65535; 0 for auto cost) of this area.')
swL3ospfAreaTranslateState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfAreaTranslateState.setStatus('current')
if mibBuilder.loadTexts: swL3ospfAreaTranslateState.setDescription('.')
swL3ospfAreaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 10, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfAreaStatus.setStatus('current')
if mibBuilder.loadTexts: swL3ospfAreaStatus.setDescription("This variable displays the status of the en- try. Setting it to 'invalid' has the effect of rendering it inoperative. The internal effect (row removal) is implementation dependent.")
swL3dvmrpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 12), )
if mibBuilder.loadTexts: swL3dvmrpInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: swL3dvmrpInterfaceTable.setDescription("The (conceptual) table listing the router's multicast- capable interfaces.")
swL3dvmrpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 12, 1), ).setIndexNames((0, "DGS-3420-28PC-L3MGMT-MIB", "swL3dvmrpInterfaceIfIndex"))
if mibBuilder.loadTexts: swL3dvmrpInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: swL3dvmrpInterfaceEntry.setDescription('An entry (conceptual row) in the dvmrpInterfaceTable. This row augments ipMRouteInterfaceEntry in the IP Multicast MIB, where the threshold object resides.')
swL3dvmrpInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 12, 1, 1), Integer32())
if mibBuilder.loadTexts: swL3dvmrpInterfaceIfIndex.setStatus('current')
if mibBuilder.loadTexts: swL3dvmrpInterfaceIfIndex.setDescription('The ifIndex value of the interface for which DVMRP is enabled.')
swL3dvmrpInterfaceLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 12, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3dvmrpInterfaceLocalAddress.setStatus('current')
if mibBuilder.loadTexts: swL3dvmrpInterfaceLocalAddress.setDescription('The IP address this system will use as a source address on this interface. On unnumbered interfaces, it must be the same value as dvmrpInterfaceLocalAddress for some interface on the system.')
swL3dvmrpInterfaceMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3dvmrpInterfaceMetric.setStatus('current')
if mibBuilder.loadTexts: swL3dvmrpInterfaceMetric.setDescription('The distance metric for this interface which is used to calculate distance vectors.')
swL3dvmrpInterfaceProbe = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3dvmrpInterfaceProbe.setStatus('current')
if mibBuilder.loadTexts: swL3dvmrpInterfaceProbe.setDescription('Probe distribution interval.')
swL3dvmrpInterfaceNbrTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 12, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(35)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3dvmrpInterfaceNbrTimeout.setStatus('current')
if mibBuilder.loadTexts: swL3dvmrpInterfaceNbrTimeout.setDescription('Used to set the timer before neighbors are timed out.')
swL3dvmrpInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 12, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3dvmrpInterfaceStatus.setStatus('current')
if mibBuilder.loadTexts: swL3dvmrpInterfaceStatus.setDescription('The status of this entry. Creating the entry enables DVMRP on the virtual interface; destroying the entry or setting it to notInService disables DVMRP on the virtual interface.')
swL3dvmrpInterfaceRcvBadPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 12, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3dvmrpInterfaceRcvBadPkts.setStatus('current')
if mibBuilder.loadTexts: swL3dvmrpInterfaceRcvBadPkts.setDescription('The number of DVMRP packets received on the interface by the DVMRP process which were subsequently discarded as invalid (e.g. invalid packet format, or a route report from an unknown neighbor).')
swL3dvmrpInterfaceRcvBadRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3dvmrpInterfaceRcvBadRoutes.setStatus('current')
if mibBuilder.loadTexts: swL3dvmrpInterfaceRcvBadRoutes.setDescription('The number of routes, in valid DVMRP packets, which were ignored because the entry was invalid.')
swL3OspfInternalLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 13, 1), )
if mibBuilder.loadTexts: swL3OspfInternalLsdbTable.setReference('OSPF Version 2, Section 12 Link State Adver- tisements')
if mibBuilder.loadTexts: swL3OspfInternalLsdbTable.setStatus('current')
if mibBuilder.loadTexts: swL3OspfInternalLsdbTable.setDescription("The OSPF Process's Link State Database.")
swL3OspfInternalLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 13, 1, 1), ).setIndexNames((0, "DGS-3420-28PC-L3MGMT-MIB", "swL3OspfInternalLsdbAreaId"), (0, "DGS-3420-28PC-L3MGMT-MIB", "swL3OspfInternalLsdbType"), (0, "DGS-3420-28PC-L3MGMT-MIB", "swL3OspfInternalLsdbLsid"), (0, "DGS-3420-28PC-L3MGMT-MIB", "swL3OspfInternalLsdbRouterId"))
if mibBuilder.loadTexts: swL3OspfInternalLsdbEntry.setStatus('current')
if mibBuilder.loadTexts: swL3OspfInternalLsdbEntry.setDescription('A single Link State Advertisement.')
swL3OspfInternalLsdbAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 13, 1, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfInternalLsdbAreaId.setStatus('current')
if mibBuilder.loadTexts: swL3OspfInternalLsdbAreaId.setDescription('The 32 bit identifier of the Area from which the LSA was received.')
swL3OspfInternalLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("routerLink", 1), ("networkLink", 2), ("summaryLink", 3), ("asSummaryLink", 4), ("asExternalLink", 5), ("multicastLink", 6), ("nssaExternalLink", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfInternalLsdbType.setStatus('current')
if mibBuilder.loadTexts: swL3OspfInternalLsdbType.setDescription('The type of the link state advertisement. Each link state type has a separate advertise- ment format.')
swL3OspfInternalLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 13, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfInternalLsdbLsid.setStatus('current')
if mibBuilder.loadTexts: swL3OspfInternalLsdbLsid.setDescription('The Link State ID is an LS Type Specific field containing either a Router ID or an IP Address; it identifies the piece of the routing domain that is being described by the advertisement.')
swL3OspfInternalLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 13, 1, 1, 4), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfInternalLsdbRouterId.setStatus('current')
if mibBuilder.loadTexts: swL3OspfInternalLsdbRouterId.setDescription('The 32 bit number that uniquely identifies the originating router in the Autonomous System.')
swL3OspfInternalLsdbMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfInternalLsdbMetric.setStatus('current')
if mibBuilder.loadTexts: swL3OspfInternalLsdbMetric.setDescription('Enter the metric (1 - 65535; 0 for auto cost) of this area.')
swL3OspfInternalLsdbSequenceNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 13, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfInternalLsdbSequenceNo.setStatus('current')
if mibBuilder.loadTexts: swL3OspfInternalLsdbSequenceNo.setDescription('The sequence number field is a signed 32-bit integer. It is used to detect old and dupli- cate link state advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number the more recent the advertisement.')
swL3OspfInternalLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 13, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfInternalLsdbAge.setStatus('current')
if mibBuilder.loadTexts: swL3OspfInternalLsdbAge.setDescription('This field is the age of the link state adver- tisement in seconds.')
swL3OspfInternalLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 13, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfInternalLsdbChecksum.setStatus('current')
if mibBuilder.loadTexts: swL3OspfInternalLsdbChecksum.setDescription("This field is the checksum of the complete contents of the advertisement, excepting the age field. The age field is excepted so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connec- tionless datagrams; it is commonly referred to as the Fletcher checksum.")
swL3OspfExternalLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 13, 2), )
if mibBuilder.loadTexts: swL3OspfExternalLsdbTable.setStatus('current')
if mibBuilder.loadTexts: swL3OspfExternalLsdbTable.setDescription("The OSPF Process's Links State Database.")
swL3OspfExternalLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 13, 2, 1), ).setIndexNames((0, "DGS-3420-28PC-L3MGMT-MIB", "swL3OspfExternalLsdbType"), (0, "DGS-3420-28PC-L3MGMT-MIB", "swL3OspfExternalLsdbLsid"), (0, "DGS-3420-28PC-L3MGMT-MIB", "swL3OspfExternalLsdbRouterId"))
if mibBuilder.loadTexts: swL3OspfExternalLsdbEntry.setStatus('current')
if mibBuilder.loadTexts: swL3OspfExternalLsdbEntry.setDescription('A single Link State Advertisement.')
swL3OspfExternalLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 7))).clone(namedValues=NamedValues(("asExternalLink", 5), ("nssaExternalLink", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfExternalLsdbType.setStatus('current')
if mibBuilder.loadTexts: swL3OspfExternalLsdbType.setDescription('The type of the link state advertisement. Each link state type has a separate advertise- ment format.')
swL3OspfExternalLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 13, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfExternalLsdbLsid.setStatus('current')
if mibBuilder.loadTexts: swL3OspfExternalLsdbLsid.setDescription('The Link State ID is an LS Type Specific field containing either a Router ID or an IP Address; it identifies the piece of the routing domain that is being described by the advertisement.')
swL3OspfExternalLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 13, 2, 1, 3), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfExternalLsdbRouterId.setStatus('current')
if mibBuilder.loadTexts: swL3OspfExternalLsdbRouterId.setDescription('The 32 bit number that uniquely identifies the originating router in the Autonomous System.')
swL3OspfExternalLsdbMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfExternalLsdbMetric.setStatus('current')
if mibBuilder.loadTexts: swL3OspfExternalLsdbMetric.setDescription('Enter the metric (1 - 65535; 0 for auto cost) of this area.')
swL3OspfExternalLsdbMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 13, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unrecognized", 0), ("type-1", 1), ("type-2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfExternalLsdbMetricType.setStatus('current')
if mibBuilder.loadTexts: swL3OspfExternalLsdbMetricType.setDescription('Enter the metric type of this area.')
swL3OspfExternalLsdbSequenceNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 13, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfExternalLsdbSequenceNo.setStatus('current')
if mibBuilder.loadTexts: swL3OspfExternalLsdbSequenceNo.setDescription('The sequence number field is a signed 32-bit integer. It is used to detect old and dupli- cate link state advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number the more recent the advertisement.')
swL3OspfExternalLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 13, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfExternalLsdbAge.setStatus('current')
if mibBuilder.loadTexts: swL3OspfExternalLsdbAge.setDescription('This field is the age of the link state adver- tisement in seconds.')
swL3OspfExternalLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 13, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfExternalLsdbChecksum.setStatus('current')
if mibBuilder.loadTexts: swL3OspfExternalLsdbChecksum.setDescription("This field is the checksum of the complete contents of the advertisement, except the age field. The age field is the exception so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connec- tionless datagrams; it is commonly referred to as the Fletcher checksum.")
swL3OspfExternalLsdbForwardingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 13, 2, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfExternalLsdbForwardingAddress.setStatus('current')
if mibBuilder.loadTexts: swL3OspfExternalLsdbForwardingAddress.setDescription('This field is the forwarding address.')
swL3OspfExternalLsdbRouteTag = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 13, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfExternalLsdbRouteTag.setStatus('current')
if mibBuilder.loadTexts: swL3OspfExternalLsdbRouteTag.setDescription('This field is the route tag.')
swL3VrrpOperTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 14, 1), )
if mibBuilder.loadTexts: swL3VrrpOperTable.setStatus('current')
if mibBuilder.loadTexts: swL3VrrpOperTable.setDescription("Operations table for a VRRP router which consists of a sequence (i.e., one or more conceptual rows) of 'swL3vrrpOperEntry' items.")
swL3VrrpOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 14, 1, 1), ).setIndexNames((0, "DGS-3420-28PC-L3MGMT-MIB", "swL3VrrpOperIfIndex"), (0, "DGS-3420-28PC-L3MGMT-MIB", "swL3VrrpOperVrId"))
if mibBuilder.loadTexts: swL3VrrpOperEntry.setStatus('current')
if mibBuilder.loadTexts: swL3VrrpOperEntry.setDescription("An entry in the vrrpOperTable containing the operational characteristics of a virtual router. On a VRRP router, a given virtual router is identified by a combination of the IF index and VRID. Rows in the table cannot be modified unless the value of `swL3VrrpOperAdminState' is `disabled' and the `swL3VrrpOperState' has transitioned to `initialize'.")
swL3VrrpOperIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3VrrpOperIfIndex.setStatus('current')
if mibBuilder.loadTexts: swL3VrrpOperIfIndex.setDescription('The ifIndex value of the interface for which VRRP is enabled.')
swL3VrrpOperVrId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 14, 1, 1, 2), VrId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3VrrpOperVrId.setStatus('current')
if mibBuilder.loadTexts: swL3VrrpOperVrId.setDescription('This object contains the Virtual Router Identifier (VRID).')
swL3VrrpOperVirtualMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 14, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3VrrpOperVirtualMacAddr.setStatus('current')
if mibBuilder.loadTexts: swL3VrrpOperVirtualMacAddr.setDescription("The virtual MAC address of the virtual router. Although this object can be derived from the 'swL3VrrpOperVrId' object, it is defined so that it is easily obtainable by a management application and can be included in VRRP-related SNMP traps.")
swL3VrrpOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("initialize", 1), ("backup", 2), ("master", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3VrrpOperState.setStatus('current')
if mibBuilder.loadTexts: swL3VrrpOperState.setDescription("The current state of the virtual router. This object has three defined values: - `initialize', which indicates that all the virtual router is waiting for a startup event. - `backup', which indicates the virtual router is monitoring the availability of the master router. - `master', which indicates that the virtual router is forwarding packets for IP addresses that are associated with this router. Setting the `swL3VrrpOperAdminState' object (below) initiates transitions in the value of this object.")
swL3VrrpOperAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 14, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3VrrpOperAdminState.setStatus('current')
if mibBuilder.loadTexts: swL3VrrpOperAdminState.setDescription("This object will enable/disable the virtual router function. Setting the value to `up', will transition the state of the virtual router from `initialize' to `backup' or `master', depending on the value of `swL3VrrpOperPriority'. Setting the value to `down', will transition the router from `master' or `backup' to `initialize'. State transitions may not be immediate; they sometimes depend on other factors, such as the interface (IF) state. The `swL3VrrpOperAdminState' object must be set to `down' prior to modifying the other read-create objects in the conceptual row. The value of the `swL3VrrpOperRowStatus' object (below) must be `active', signifying that the conceptual row is valid (i.e., the objects are correctly set), in order for this object to be set to `up'.")
swL3VrrpOperPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 14, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3VrrpOperPriority.setStatus('current')
if mibBuilder.loadTexts: swL3VrrpOperPriority.setDescription("This object specifies the priority to be used for the virtual router master election process. Higher values imply higher priority. A priority of '0', although not settable, is sent by the master router to indicate that this router has ceased to participate in VRRP and a backup virtual router should transition to become a new master. A priority of 255 is used for the router that owns the associated IP address(es).")
swL3VrrpOperMasterIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 14, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3VrrpOperMasterIpAddr.setStatus('current')
if mibBuilder.loadTexts: swL3VrrpOperMasterIpAddr.setDescription("The master router's real (primary) IP address. This is the IP address listed as the source in VRRP advertisement last received by this virtual router.")
swL3VrrpOperCriticalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 14, 1, 1, 8), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3VrrpOperCriticalIpAddr.setStatus('current')
if mibBuilder.loadTexts: swL3VrrpOperCriticalIpAddr.setDescription("In the case where there is more than one IP address for a given `ifIndex', this object is used to specify the IP address that will become the `swL3VrrpOperMasterIpAddr', should the virtual router transition from backup to master. If this object is set to 0.0.0.0, the IP address which is numerically lowest will be selected.")
swL3VrrpOperCheckCriticalIpState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 14, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("other", 0), ("disabled", 1), ("enabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3VrrpOperCheckCriticalIpState.setStatus('current')
if mibBuilder.loadTexts: swL3VrrpOperCheckCriticalIpState.setDescription('Critical IP state.')
swL3VrrpOperAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 14, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAuthentication", 1), ("simpleTextPassword", 2), ("ipAuthenticationHeader", 3))).clone('noAuthentication')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3VrrpOperAuthType.setStatus('current')
if mibBuilder.loadTexts: swL3VrrpOperAuthType.setDescription('Authentication type used for VRRP protocol exchanges between virtual routers. This value of this object is the same for a given ifIndex. New enumerations to this list can only be added via a new RFC on the standards track.')
swL3VrrpOperAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 14, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3VrrpOperAuthKey.setStatus('current')
if mibBuilder.loadTexts: swL3VrrpOperAuthKey.setDescription("The Authentication Key. This object is set according to the value of the 'swL3VrrpOperAuthType' object ('simpleTextPassword' or 'ipAuthenticationHeader'). If the length of the value is less than 16 octets, the agent will left adjust and zero fill to 16 octets. The value of this object is the same for a given ifIndex. When read, swL3VrrpOperAuthKey always returns an Octet String of length zero.")
swL3VrrpOperAdvertisementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 14, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3VrrpOperAdvertisementInterval.setStatus('current')
if mibBuilder.loadTexts: swL3VrrpOperAdvertisementInterval.setDescription('The time interval, in seconds, between sending advertisement messages. Only the master router sends VRRP advertisements.')
swL3VrrpOperPreemptMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 14, 1, 1, 13), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3VrrpOperPreemptMode.setStatus('current')
if mibBuilder.loadTexts: swL3VrrpOperPreemptMode.setDescription('Controls whether a higher priority virtual router will preempt a lower priority master.')
swL3VrrpOperVirtualRouterUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 14, 1, 1, 14), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3VrrpOperVirtualRouterUpTime.setStatus('current')
if mibBuilder.loadTexts: swL3VrrpOperVirtualRouterUpTime.setDescription("This is the value of the `sysUpTime' object when this virtual router (i.e., the `swL3VrrpOperState') transitioned out of `initialized'.")
swL3VrrpOperVirtualIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 14, 1, 1, 15), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3VrrpOperVirtualIpAddr.setStatus('current')
if mibBuilder.loadTexts: swL3VrrpOperVirtualIpAddr.setDescription('The assigned IP addresses that a virtual router is responsible for backing up.')
swL3VrrpOperRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 14, 1, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3VrrpOperRowStatus.setStatus('current')
if mibBuilder.loadTexts: swL3VrrpOperRowStatus.setDescription("The row status variable, used in accordance to installation and removal conventions for conceptual rows. The rowstatus of a currently active row in the vrrpOperTable is constrained by the operational state of the corresponding virtual router. When `vrrpOperRowStatus' is set to active(1), no other objects in the conceptual row, with the exception of `swL3VrrpOperAdminState', can be modified. Prior to setting the `swL3VrrpOperRowStatus' object from `active' to a different value, the `swL3VrrpOperAdminState' object must be set to `down' and the `vrrpOperState' object be transitioned to `initialize'. To create a row in this table, a manager sets this object to either createAndGo(4) or createAndWait(5). Until instances of all corresponding columns are appropriately configured, the value of the corresponding instance of the `vrrpOperRowStatus' column will be read as notReady(3). In particular, a newly created row cannot be made active(1) until (minimally) the corresponding instance of `swL3VrrpOperVrId' has been set and there is at least one active row in the `swL3VrrpAssoIpAddrTable' defining an associated IP address for the virtual router.")
swL3OspfECMPIpDestination = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3OspfECMPIpDestination.setStatus('current')
if mibBuilder.loadTexts: swL3OspfECMPIpDestination.setDescription("If set to 'enabled (1)', the ECMP algorithm will include the destination IP.")
swL3OspfECMPIpSource = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3OspfECMPIpSource.setStatus('current')
if mibBuilder.loadTexts: swL3OspfECMPIpSource.setDescription("If set to 'enabled (1)', the ECMP algorithm will include the lower 5 bits of the source IP. This attribution is mutually exclusive with crc_low and crc_high. If set to 'enabled (1)', crc_low and crc_high will be excluded.")
swL3OspfECMPCrcLow = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 15, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3OspfECMPCrcLow.setStatus('current')
if mibBuilder.loadTexts: swL3OspfECMPCrcLow.setDescription("If set to 'enabled (1)', the ECMP algorithm will include the lower 5 bits of the CRC. This attribution is mutually exclusive with crc_high and ip_source. If set to 'enabled (1)', crc_high and ip_source will be excluded.")
swL3OspfECMPCrcHigh = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 15, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3OspfECMPCrcHigh.setStatus('current')
if mibBuilder.loadTexts: swL3OspfECMPCrcHigh.setDescription("If set to 'enabled (1)', the ECMP algorithm will include the upper 5 bits of the CRC. This attribution is mutually exclusive with ip_source and crc_low. If set to 'enabled (1)', crc_low and ip_source will be excluded.")
swL3OspfECMPTCPorUDPport = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 15, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3OspfECMPTCPorUDPport.setStatus('current')
if mibBuilder.loadTexts: swL3OspfECMPTCPorUDPport.setDescription("If set to 'enabled (1)', the ECMP algorithm will include the TCP or UDP port.")
swL3OspfECMPState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 15, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3OspfECMPState.setStatus('current')
if mibBuilder.loadTexts: swL3OspfECMPState.setDescription('This object indicates the state of the OSPF ECMP function.')
swL3RIPUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 17, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 65535)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RIPUpdateTime.setStatus('current')
if mibBuilder.loadTexts: swL3RIPUpdateTime.setDescription('This object specifies the RIP update timer.')
swL3RIPTimeOutTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 17, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 65535)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RIPTimeOutTime.setStatus('current')
if mibBuilder.loadTexts: swL3RIPTimeOutTime.setDescription('This object specifies the RIP time out timer.')
swL3RIPGarbageCollectionTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 17, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 65535)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RIPGarbageCollectionTime.setStatus('current')
if mibBuilder.loadTexts: swL3RIPGarbageCollectionTime.setDescription('This object specifies the RIP garbage collection timer.')
swL3OspfDefInfoOriginate = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("always", 1), ("default", 2), ("none", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3OspfDefInfoOriginate.setStatus('current')
if mibBuilder.loadTexts: swL3OspfDefInfoOriginate.setDescription('This object indicates if OSPF default external route is originated.')
swL3OspfDefInfoOrigMetricType = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 18, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("type-1", 1), ("type-2", 2))).clone('type-2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3OspfDefInfoOrigMetricType.setStatus('current')
if mibBuilder.loadTexts: swL3OspfDefInfoOrigMetricType.setDescription('This object indicates the metric type of default external route originated by OSPF.')
swL3OspfDefInfoOrigMetric = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 18, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3OspfDefInfoOrigMetric.setStatus('current')
if mibBuilder.loadTexts: swL3OspfDefInfoOrigMetric.setDescription('This object indicates the metric of default external route originated by OSPF.')
swL3RIPInboundRouteFilterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 19), )
if mibBuilder.loadTexts: swL3RIPInboundRouteFilterTable.setStatus('current')
if mibBuilder.loadTexts: swL3RIPInboundRouteFilterTable.setDescription('The list of inbound route filter on RIP interfaces.')
swL3RIPInboundRouteFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 19, 1), ).setIndexNames((0, "DGS-3420-28PC-L3MGMT-MIB", "swL3RIPInboundRouteFilterIfIpAddress"))
if mibBuilder.loadTexts: swL3RIPInboundRouteFilterEntry.setStatus('current')
if mibBuilder.loadTexts: swL3RIPInboundRouteFilterEntry.setDescription('The information of inbound route filter on RIP interfaces.')
swL3RIPInboundRouteFilterIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 19, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3RIPInboundRouteFilterIfIpAddress.setStatus('current')
if mibBuilder.loadTexts: swL3RIPInboundRouteFilterIfIpAddress.setDescription('The IP Address of the RIP interface.')
swL3RIPInboundRouteFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("access-list", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RIPInboundRouteFilterType.setStatus('current')
if mibBuilder.loadTexts: swL3RIPInboundRouteFilterType.setDescription('The type of inbound route filter for the RIP interface.')
swL3RIPInboundRouteFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 19, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RIPInboundRouteFilterName.setStatus('current')
if mibBuilder.loadTexts: swL3RIPInboundRouteFilterName.setDescription('The name of inbound route filter for the RIP interface.')
swL3Route6RedistriTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 20), )
if mibBuilder.loadTexts: swL3Route6RedistriTable.setStatus('current')
if mibBuilder.loadTexts: swL3Route6RedistriTable.setDescription("IPv6 Route redistribution allows routers on the network that are running different routing protocols to exchange routing information. This is accomplished by comparing the routes stored in the varios routers' routing tables and assigning appropriate metrics. This information is then exchanged among the various routers according to the individual routers current routing protocol.")
swL3Route6RedistriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 20, 1), ).setIndexNames((0, "DGS-3420-28PC-L3MGMT-MIB", "swL3Route6RedistriSrcProtocol"), (0, "DGS-3420-28PC-L3MGMT-MIB", "swL3Route6RedistriDstProtocol"))
if mibBuilder.loadTexts: swL3Route6RedistriEntry.setStatus('current')
if mibBuilder.loadTexts: swL3Route6RedistriEntry.setDescription('A list of information displaying the IPv6 route redistribution table.')
swL3Route6RedistriSrcProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("local", 1), ("static", 2), ("ripng", 3), ("ospfv3", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3Route6RedistriSrcProtocol.setStatus('current')
if mibBuilder.loadTexts: swL3Route6RedistriSrcProtocol.setDescription('Allows the selection of the protocol of the source device.')
swL3Route6RedistriDstProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ripng", 1), ("ospfv3", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3Route6RedistriDstProtocol.setStatus('current')
if mibBuilder.loadTexts: swL3Route6RedistriDstProtocol.setDescription('Allows the selection of the protocol of the destination device.')
swL3Route6RedistriType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("type-1", 1), ("type-2", 2), ("all", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3Route6RedistriType.setStatus('current')
if mibBuilder.loadTexts: swL3Route6RedistriType.setDescription('Allows the selection of one of the methods for calculating the metric value.')
swL3Route6RedistriMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 20, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3Route6RedistriMetric.setStatus('current')
if mibBuilder.loadTexts: swL3Route6RedistriMetric.setDescription("Allows the entry of an OSPFv3 interface cost. This is analogous to a Hop Count in the RIPng routing protocol. The value '0' indicates default value.")
swL3Route6RedistriRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 119, 3, 3, 20, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3Route6RedistriRowStatus.setStatus('current')
if mibBuilder.loadTexts: swL3Route6RedistriRowStatus.setDescription('This object indicates the status of this entry.')
mibBuilder.exportSymbols("DGS-3420-28PC-L3MGMT-MIB", swL3IpStaticRouteTable=swL3IpStaticRouteTable, swL3Ipv6AddressCtrlAutonomousFlag=swL3Ipv6AddressCtrlAutonomousFlag, swL3IpFdbInfoTable=swL3IpFdbInfoTable, swL3IpFdbInfoType=swL3IpFdbInfoType, swL3RoutePreferenceRIP=swL3RoutePreferenceRIP, swL3VrrpOperVirtualMacAddr=swL3VrrpOperVirtualMacAddr, swL3IpCtrlIpDhcpOption12HostName=swL3IpCtrlIpDhcpOption12HostName, swL3Ipv6CtrlRaState=swL3Ipv6CtrlRaState, swL3RelayDnsStaticTableState=swL3RelayDnsStaticTableState, swL3RelayDnsCtrlDomainName=swL3RelayDnsCtrlDomainName, swL3RIPTimerMgmt=swL3RIPTimerMgmt, swL3ospfIfHelloInterval=swL3ospfIfHelloInterval, swL3ospfVirtIfAuthKeyID=swL3ospfVirtIfAuthKeyID, swL3Ipv6Address=swL3Ipv6Address, swL3RoutePreferenceOSPFExtT1=swL3RoutePreferenceOSPFExtT1, swL3OspfExternalLsdbMetric=swL3OspfExternalLsdbMetric, swL3Ipv6DHCPv6CPDAddrCtrlEntry=swL3Ipv6DHCPv6CPDAddrCtrlEntry, swL3RelayDnsPrimaryServer=swL3RelayDnsPrimaryServer, swL3VrrpOperEntry=swL3VrrpOperEntry, swL3ospfVirtIfHelloInterval=swL3ospfVirtIfHelloInterval, swL3RelayDnsMgmt=swL3RelayDnsMgmt, swL3IpCtrlIpMtu=swL3IpCtrlIpMtu, swL3Route6RedistriEntry=swL3Route6RedistriEntry, swL3LoopBackIpv6CtrlEntry=swL3LoopBackIpv6CtrlEntry, swL3IpStaticRouteDest=swL3IpStaticRouteDest, swL3OspfInternalLsdbLsid=swL3OspfInternalLsdbLsid, swL3OspfHostStatus=swL3OspfHostStatus, swL3IpFdbInfoEntry=swL3IpFdbInfoEntry, swL3Ipv6AddressCtrlPrefixLen=swL3Ipv6AddressCtrlPrefixLen, swL3IpCtrlIpAddr=swL3IpCtrlIpAddr, swL3Route6RedistriTable=swL3Route6RedistriTable, swL3IpCtrlDhcpv6ClientPDPrefixLen=swL3IpCtrlDhcpv6ClientPDPrefixLen, swL3Ipv6DHCPv6CPDAddrCtrlInterfaceName=swL3Ipv6DHCPv6CPDAddrCtrlInterfaceName, swL3IpFdbInfoPort=swL3IpFdbInfoPort, swL3IpStaticRouteNextHop=swL3IpStaticRouteNextHop, swL3OspfInternalLsdbRouterId=swL3OspfInternalLsdbRouterId, swL3LoopBackIpCtrlIpAddr=swL3LoopBackIpCtrlIpAddr, swL3VrrpOperPreemptMode=swL3VrrpOperPreemptMode, swL3ospfIfPollInterval=swL3ospfIfPollInterval, swL3ospfIfDistributeListInType=swL3ospfIfDistributeListInType, swL3ospfVirtIfEvents=swL3ospfVirtIfEvents, swL3IpMgmt=swL3IpMgmt, swL3OspfInternalLsdbEntry=swL3OspfInternalLsdbEntry, swL3Ipv6DHCPv6CPDAddrCtrlIPv6addr=swL3Ipv6DHCPv6CPDAddrCtrlIPv6addr, swL3ospfIfDistributeListInName=swL3ospfIfDistributeListInName, swL3IpCtrlEntry=swL3IpCtrlEntry, swL3OspfExternalLsdbLsid=swL3OspfExternalLsdbLsid, swL3Ipv6CtrlRaReachableTime=swL3Ipv6CtrlRaReachableTime, swL3IpCtrlIfIndex=swL3IpCtrlIfIndex, swL3IpMcastStaticRouteIpmrouteMask=swL3IpMcastStaticRouteIpmrouteMask, swL3OspfExternalLsdbType=swL3OspfExternalLsdbType, swL3Ipv6AddressCtrlAddressType=swL3Ipv6AddressCtrlAddressType, swL3RelayMgmt=swL3RelayMgmt, swL3VrrpOperRowStatus=swL3VrrpOperRowStatus, swL3Ipv6CtrlRaMinRtrAdvInterval=swL3Ipv6CtrlRaMinRtrAdvInterval, swL3RoutePreferenceOSPFIntra=swL3RoutePreferenceOSPFIntra, swL3ospfIfAuthType=swL3ospfIfAuthType, swL3VrrpOperMasterIpAddr=swL3VrrpOperMasterIpAddr, swL3ospfIfDemand=swL3ospfIfDemand, swL3IpCtrlIpDirectedBroadcastState=swL3IpCtrlIpDirectedBroadcastState, swL3Ipv6AddressCtrlState=swL3Ipv6AddressCtrlState, swL3IpMcastStaticRouteTable=swL3IpMcastStaticRouteTable, swL3dvmrpInterfaceEntry=swL3dvmrpInterfaceEntry, swL3RIPInboundRouteFilterTable=swL3RIPInboundRouteFilterTable, swL3RIPInboundRouteFilterIfIpAddress=swL3RIPInboundRouteFilterIfIpAddress, swL3OspfDefInfoOrigMetricType=swL3OspfDefInfoOrigMetricType, swL3OspfDefInfoOrigMgmt=swL3OspfDefInfoOrigMgmt, swL3IpCtrlIpv6AutoConfigDefault=swL3IpCtrlIpv6AutoConfigDefault, swL3LoopBackIpv6CtrlRowStatus=swL3LoopBackIpv6CtrlRowStatus, swL3ospfIfType=swL3ospfIfType, swL3Ipv6CtrlRaRetransTime=swL3Ipv6CtrlRaRetransTime, swL3IpCtrlIpv4AdminState=swL3IpCtrlIpv4AdminState, NodeAddress=NodeAddress, swL3ospfAreaSummaryState=swL3ospfAreaSummaryState, swL3Route6RedistriRowStatus=swL3Route6RedistriRowStatus, swL3IpCtrlDhcpv6ClientRapidCommit=swL3IpCtrlDhcpv6ClientRapidCommit, swL3OspfECMPCrcLow=swL3OspfECMPCrcLow, swL3Ipv6AddressCtrlValidLifeTime=swL3Ipv6AddressCtrlValidLifeTime, swL3IpCtrlIpSubnetMask=swL3IpCtrlIpSubnetMask, swL3Ipv6CtrlRaManagedFlag=swL3Ipv6CtrlRaManagedFlag, swL3ospfIfState=swL3ospfIfState, swL3VrrpOperAuthType=swL3VrrpOperAuthType, swL3OspfECMPCrcHigh=swL3OspfECMPCrcHigh, swL3RouteRedistriRowStatus=swL3RouteRedistriRowStatus, swL3ospfAreaTable=swL3ospfAreaTable, swL3ospfIfRtrDeadInterval=swL3ospfIfRtrDeadInterval, swL3DevMgmt=swL3DevMgmt, swL3ospfIfTable=swL3ospfIfTable, swL3VrrpOperAdvertisementInterval=swL3VrrpOperAdvertisementInterval, swL3ospfVirtIfAuthType=swL3ospfVirtIfAuthType, swL3IpCtrlProxyArp=swL3IpCtrlProxyArp, swL3Ipv6CtrlDadRetransNum=swL3Ipv6CtrlDadRetransNum, swL3Ipv6DHCPv6CPDAddrCtrlPrefixName=swL3Ipv6DHCPv6CPDAddrCtrlPrefixName, swL3IpStaticRouteWeight=swL3IpStaticRouteWeight, swL3RelayDnsCtrlEntry=swL3RelayDnsCtrlEntry, swL3ospfVirtIfAuthKey=swL3ospfVirtIfAuthKey, swL3IpMcastStaticRouteRpfAddr=swL3IpMcastStaticRouteRpfAddr, swL3RIPGarbageCollectionTime=swL3RIPGarbageCollectionTime, swL3ospfVirtIfTable=swL3ospfVirtIfTable, swL3IpStaticRouteEntry=swL3IpStaticRouteEntry, swL3OspfExternalLsdbMetricType=swL3OspfExternalLsdbMetricType, swL3IpCtrlIpv6LinkLocalPrefixLen=swL3IpCtrlIpv6LinkLocalPrefixLen, swL3OspfInternalLsdbTable=swL3OspfInternalLsdbTable, swL3RIPInboundRouteFilterType=swL3RIPInboundRouteFilterType, swL3ospfIfAuthKey=swL3ospfIfAuthKey, swL3dvmrpInterfaceProbe=swL3dvmrpInterfaceProbe, swL3RouteRedistriTable=swL3RouteRedistriTable, swL3dvmrpInterfaceTable=swL3dvmrpInterfaceTable, swL3OspfHostMetric=swL3OspfHostMetric, swL3LoopBackIpCtrlEntry=swL3LoopBackIpCtrlEntry, swL3dvmrpInterfaceMetric=swL3dvmrpInterfaceMetric, swL3Ipv6DHCPv6CPDAddrCtrlState=swL3Ipv6DHCPv6CPDAddrCtrlState, swL3IpCtrlDhcpv6ClientPDState=swL3IpCtrlDhcpv6ClientPDState, swL3IpMcastStaticRouteRowStatus=swL3IpMcastStaticRouteRowStatus, swL3Route6RedistriSrcProtocol=swL3Route6RedistriSrcProtocol, swL3DevCtrlDVMRPState=swL3DevCtrlDVMRPState, swL3ospfIfPassiveMode=swL3ospfIfPassiveMode, swL3IpFdbMgmt=swL3IpFdbMgmt, swL3OspfHostEntry=swL3OspfHostEntry, swL3LoopBackIpCtrlIpSubnetMask=swL3LoopBackIpCtrlIpSubnetMask, swL3ospfVirtIfTransitDelay=swL3ospfVirtIfTransitDelay, swL3IpCtrlAdminState=swL3IpCtrlAdminState, swL3dvmrpInterfaceIfIndex=swL3dvmrpInterfaceIfIndex, swL3LoopBackIpv6CtrlIpv6Address=swL3LoopBackIpv6CtrlIpv6Address, swL3RIPInboundRouteFilterName=swL3RIPInboundRouteFilterName, swL3OspfInternalLsdbAge=swL3OspfInternalLsdbAge, swL3RouteRedistriRouteMapName=swL3RouteRedistriRouteMapName, swL3ospfIfDesignatedRouter=swL3ospfIfDesignatedRouter, swL3ospfIfBackupDesignatedRouter=swL3ospfIfBackupDesignatedRouter, swL3OspfExternalLsdbTable=swL3OspfExternalLsdbTable, swL3OspfECMPState=swL3OspfECMPState, swL3RoutePreferenceLocal=swL3RoutePreferenceLocal, swL3MgmtMIB=swL3MgmtMIB, swL3OspfExternalLsdbForwardingAddress=swL3OspfExternalLsdbForwardingAddress, swL3ospfVirtIfStatus=swL3ospfVirtIfStatus, swL3OspfDefInfoOrigMetric=swL3OspfDefInfoOrigMetric, swL3IpCtrlMode=swL3IpCtrlMode, swL3DevCtrl=swL3DevCtrl, swL3ospfVirtIfRtrDeadInterval=swL3ospfVirtIfRtrDeadInterval, swL3IpStaticRouteTunnelRowStatus=swL3IpStaticRouteTunnelRowStatus, swL3OspfExternalLsdbEntry=swL3OspfExternalLsdbEntry, swL3ospfAddressLessIf=swL3ospfAddressLessIf, swL3OspfECMPTCPorUDPport=swL3OspfECMPTCPorUDPport, swL3RelayDnsSecondaryServer=swL3RelayDnsSecondaryServer, swL3IpStaticRouteBkupState=swL3IpStaticRouteBkupState, swL3dvmrpInterfaceRcvBadPkts=swL3dvmrpInterfaceRcvBadPkts, swL3RelayDnsCacheState=swL3RelayDnsCacheState, swL3RIPTimeOutTime=swL3RIPTimeOutTime, swL3ospfIfRetransInterval=swL3ospfIfRetransInterval, swL3IpStaticRouteStatus=swL3IpStaticRouteStatus, swL3ospfAreaStatus=swL3ospfAreaStatus, swL3OspfExternalLsdbRouteTag=swL3OspfExternalLsdbRouteTag, swL3ospfIfIpAddress=swL3ospfIfIpAddress, swL3Ipv6CtrlMaxReassmblySize=swL3Ipv6CtrlMaxReassmblySize, swL3Ipv6CtrlInterfaceName=swL3Ipv6CtrlInterfaceName, swL3LoopBackIpv6CtrlTable=swL3LoopBackIpv6CtrlTable, swL3LoopBackIpCtrlIfIndex=swL3LoopBackIpCtrlIfIndex, swL3ospfVirtIfRetransInterval=swL3ospfVirtIfRetransInterval, swL3IpCtrlMgmt=swL3IpCtrlMgmt, swL3OspfInternalLsdbMetric=swL3OspfInternalLsdbMetric, swL3ospfIfTransitDelay=swL3ospfIfTransitDelay, swL3OspfHostTOS=swL3OspfHostTOS, swL3DevCtrlRIPState=swL3DevCtrlRIPState, swL3IpMcastMgmt=swL3IpMcastMgmt, swL3ospfAreaTranslateState=swL3ospfAreaTranslateState, swL3IpCtrlDhcpv6ClientPdRapidCommit=swL3IpCtrlDhcpv6ClientPdRapidCommit, swL3ospfIfRtrPriority=swL3ospfIfRtrPriority, swL3RouteRedistriEntry=swL3RouteRedistriEntry, swL3IpCtrlIpv6LinkLocalAddress=swL3IpCtrlIpv6LinkLocalAddress, swL3OspfECMPMgmt=swL3OspfECMPMgmt, swL3IpCtrlDhcpv6ClientPDPrefix=swL3IpCtrlDhcpv6ClientPDPrefix, swL3IpStaticRouteMask=swL3IpStaticRouteMask, swL3Md5Table=swL3Md5Table, swL3Md5KeyId=swL3Md5KeyId, swL3RouteRedistriType=swL3RouteRedistriType, swL3dvmrpInterfaceNbrTimeout=swL3dvmrpInterfaceNbrTimeout, VrId=VrId, swL3RelayDnsState=swL3RelayDnsState, swL3IpCtrlTable=swL3IpCtrlTable, swL3Ipv6CtrlRaHopLimit=swL3Ipv6CtrlRaHopLimit, swL3ospfIfEvents=swL3ospfIfEvents, swL3Route6RedistriType=swL3Route6RedistriType, swL3OspfExternalLsdbChecksum=swL3OspfExternalLsdbChecksum, swL3Route6RedistriMetric=swL3Route6RedistriMetric, swL3VrrpOperTable=swL3VrrpOperTable, swL3Ipv6AddressCtrlPreferredLifeTime=swL3Ipv6AddressCtrlPreferredLifeTime, swL3IpCtrlVlanName=swL3IpCtrlVlanName, swL3IpFdbInfoIpSubnetMask=swL3IpFdbInfoIpSubnetMask, swL3OspfInternalLsdbAreaId=swL3OspfInternalLsdbAreaId, swL3VrrpOperMgmt=swL3VrrpOperMgmt, swL3OspfHostTable=swL3OspfHostTable, swL3IpCtrlIpv6LinkLocalAutoState=swL3IpCtrlIpv6LinkLocalAutoState, swL3Ipv6DHCPv6CPDAddrCtrlPrefixLen=swL3Ipv6DHCPv6CPDAddrCtrlPrefixLen, swL3ospfIfAreaId=swL3ospfIfAreaId, swL3IpCtrlIpv6AutoConfigState=swL3IpCtrlIpv6AutoConfigState, swL3RouteRedistriSrcProtocol=swL3RouteRedistriSrcProtocol, swL3LoopBackIpCtrlAdminState=swL3LoopBackIpCtrlAdminState, swL3dvmrpInterfaceLocalAddress=swL3dvmrpInterfaceLocalAddress, swL3RelayDnsCtrlIpAddr=swL3RelayDnsCtrlIpAddr, swL3RelayDnsCtrlTable=swL3RelayDnsCtrlTable, swL3ospfVirtIfEntry=swL3ospfVirtIfEntry, NetAddress=NetAddress, swL3OspfLsdbMgmt=swL3OspfLsdbMgmt, swL3VrrpOperAuthKey=swL3VrrpOperAuthKey, swL3LoopBackIpCtrlInterfaceName=swL3LoopBackIpCtrlInterfaceName, swL3RelayDnsCtrlState=swL3RelayDnsCtrlState, swL3IpStaticRouteTunnelEntry=swL3IpStaticRouteTunnelEntry, swL3Ipv6AddressCtrlTable=swL3Ipv6AddressCtrlTable, swL3ospfIfEntry=swL3ospfIfEntry, swL3VrrpOperVirtualRouterUpTime=swL3VrrpOperVirtualRouterUpTime, swL3Route6RedistriDstProtocol=swL3Route6RedistriDstProtocol, swL3VrrpOperPriority=swL3VrrpOperPriority, swL3IpCtrlDhcpv6ClientPDPrefixName=swL3IpCtrlDhcpv6ClientPDPrefixName, swL3VrrpOperIfIndex=swL3VrrpOperIfIndex, swL3IpCtrlIpDhcpOption12State=swL3IpCtrlIpDhcpOption12State, swL3ospfVirtIfNeighbor=swL3ospfVirtIfNeighbor, swL3OspfExternalLsdbRouterId=swL3OspfExternalLsdbRouterId, swL3Ipv6CtrlEntry=swL3Ipv6CtrlEntry, swL3LoopBackIpv6CtrlInterfaceName=swL3LoopBackIpv6CtrlInterfaceName, swL3ospfIfMetric=swL3ospfIfMetric, swL3OspfDefInfoOriginate=swL3OspfDefInfoOriginate, swL3IpCtrlAllIpIfState=swL3IpCtrlAllIpIfState, swL3RouteRedistriMetric=swL3RouteRedistriMetric, swL3VrrpOperCheckCriticalIpState=swL3VrrpOperCheckCriticalIpState, swL3OspfECMPIpDestination=swL3OspfECMPIpDestination, swL3Md5Key=swL3Md5Key, swL3RoutePreferenceStatic=swL3RoutePreferenceStatic, swL3Ipv6CtrlRaLifeTime=swL3Ipv6CtrlRaLifeTime, swL3Ipv6CtrlNsRetransTimer=swL3Ipv6CtrlNsRetransTimer, swL3IpCtrlState=swL3IpCtrlState, swL3IpArpAgingTime=swL3IpArpAgingTime, swL3IpCtrlLocalProxyArp=swL3IpCtrlLocalProxyArp, swL3ospfAreaEntry=swL3ospfAreaEntry, swL3DevCtrlVrrpPingState=swL3DevCtrlVrrpPingState, swL3dvmrpInterfaceRcvBadRoutes=swL3dvmrpInterfaceRcvBadRoutes, swL3Ipv6CtrlRaOtherConfigFlag=swL3Ipv6CtrlRaOtherConfigFlag, swL3VrrpOperVrId=swL3VrrpOperVrId, swL3ospfVirtIfState=swL3ospfVirtIfState, swL3ospfIfAuthKeyID=swL3ospfIfAuthKeyID, swL3OspfInternalLsdbChecksum=swL3OspfInternalLsdbChecksum, swL3Ipv6AddressCtrlOnLinkFlag=swL3Ipv6AddressCtrlOnLinkFlag, swL3IpMcastStaticRouteEntry=swL3IpMcastStaticRouteEntry, swL3DevCtrlOSPFState=swL3DevCtrlOSPFState, swL3IpCtrlIpv6AdminState=swL3IpCtrlIpv6AdminState, swL3IpCtrlDhcpv6ClientState=swL3IpCtrlDhcpv6ClientState, swL3IpStaticRouteInterfaceName=swL3IpStaticRouteInterfaceName, swL3VrrpOperAdminState=swL3VrrpOperAdminState, swL3ospfVirtIfAreaId=swL3ospfVirtIfAreaId, swL3Ipv6CtrlRaMaxRtrAdvInterval=swL3Ipv6CtrlRaMaxRtrAdvInterval, swL3Ipv6AddressCtrlEntry=swL3Ipv6AddressCtrlEntry, swL3DevCtrlVRRPState=swL3DevCtrlVRRPState, swL3IpCtrlInterfaceName=swL3IpCtrlInterfaceName, swL3RouteRedistriDstProtocol=swL3RouteRedistriDstProtocol, swL3OspfHostAreaID=swL3OspfHostAreaID)
mibBuilder.exportSymbols("DGS-3420-28PC-L3MGMT-MIB", swL3LoopBackIpv6CtrlIpv6PrefixLen=swL3LoopBackIpv6CtrlIpv6PrefixLen, PYSNMP_MODULE_ID=swL3MgmtMIB, swL3LoopBackIpCtrlTable=swL3LoopBackIpCtrlTable, swL3RoutePreference=swL3RoutePreference, swL3RoutePreferenceDefault=swL3RoutePreferenceDefault, swL3Ipv6DHCPv6CPDAddrCtrlTable=swL3Ipv6DHCPv6CPDAddrCtrlTable, swL3dvmrpInterfaceStatus=swL3dvmrpInterfaceStatus, swL3VrrpOperState=swL3VrrpOperState, swL3RIPInboundRouteFilterEntry=swL3RIPInboundRouteFilterEntry, swL3Ipv6CtrlTable=swL3Ipv6CtrlTable, swL3VrrpOperVirtualIpAddr=swL3VrrpOperVirtualIpAddr, swL3OspfExternalLsdbSequenceNo=swL3OspfExternalLsdbSequenceNo, swL3OspfInternalLsdbSequenceNo=swL3OspfInternalLsdbSequenceNo, swL3IpMcastStaticRouteIpmrouteAddr=swL3IpMcastStaticRouteIpmrouteAddr, swL3RoutePreferenceOSPFInter=swL3RoutePreferenceOSPFInter, swL3ospfAreaMetric=swL3ospfAreaMetric, swL3OspfExternalLsdbAge=swL3OspfExternalLsdbAge, swL3Md5Entry=swL3Md5Entry, swL3ospfAreaType=swL3ospfAreaType, swL3ospfIfMulticastForwarding=swL3ospfIfMulticastForwarding, swL3RIPUpdateTime=swL3RIPUpdateTime, swL3OspfHostIpAddress=swL3OspfHostIpAddress, swL3OspfECMPIpSource=swL3OspfECMPIpSource, swL3ospfAreaId=swL3ospfAreaId, swL3IpStaticRouteTunnelInterfaceName=swL3IpStaticRouteTunnelInterfaceName, swL3LoopBackIpCtrlRowStatus=swL3LoopBackIpCtrlRowStatus, swL3IpStaticRouteMetric=swL3IpStaticRouteMetric, swL3ospfIfAdminStat=swL3ospfIfAdminStat, swL3RoutePreferenceOSPFExtT2=swL3RoutePreferenceOSPFExtT2, swL3Ipv6CtrlOptimisticDadState=swL3Ipv6CtrlOptimisticDadState, swL3IpFdbInfoIpAddr=swL3IpFdbInfoIpAddr, swL3IpStaticRouteTunnelTable=swL3IpStaticRouteTunnelTable, swL3Ipv6AddressCtrlInterfaceName=swL3Ipv6AddressCtrlInterfaceName, swL3OspfInternalLsdbType=swL3OspfInternalLsdbType, swL3VrrpOperCriticalIpAddr=swL3VrrpOperCriticalIpAddr, swL3IpCtrlSecondary=swL3IpCtrlSecondary, swL3Md5RowStatus=swL3Md5RowStatus)
