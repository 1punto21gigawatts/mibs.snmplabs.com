#
# PySNMP MIB module NETI-VAS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETI-VAS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:19:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
InetPortNumber, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, MibIdentifier, Integer32, Bits, IpAddress, iso, ModuleIdentity, TimeTicks, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Unsigned32, enterprises, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibIdentifier", "Integer32", "Bits", "IpAddress", "iso", "ModuleIdentity", "TimeTicks", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Unsigned32", "enterprises", "Counter64")
TruthValue, RowPointer, DateAndTime, RowStatus, DisplayString, TextualConvention, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowPointer", "DateAndTime", "RowStatus", "DisplayString", "TextualConvention", "TimeStamp")
netiVasMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2928, 2, 5))
netiVasMIB.setRevisions(('2015-04-20 07:00', '2015-04-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: netiVasMIB.setRevisionsDescriptions(('This revision is not compatible with the previous revision. - Revised the use of IP addresses and their types. - Updated descriptions. Based on NID4613 A26.', 'First public version, based on NID4613 A26.',))
if mibBuilder.loadTexts: netiVasMIB.setLastUpdated('201504200700Z')
if mibBuilder.loadTexts: netiVasMIB.setOrganization('Net Insight AB')
if mibBuilder.loadTexts: netiVasMIB.setContactInfo('Net Insight AB Box 42093 SE-126 14 Stockholm Sweden Tel +46-8-685 0400 info@netinsight.se')
if mibBuilder.loadTexts: netiVasMIB.setDescription('This document is work in progress, and it is likely to change. Reference: NID4613. MIB for Video Appliance Services. The MIB describes objects for setting up and monitoring of reliable video transports over an IP network. It also contains configuration objects for encoders and decoders. The MIB contains conceptual tables that describes the different objects: The table vasIfTable contains physical video ports, such as ASI or SDI ports. The table vasEncPipeTable contains video encoder pipelines. A video encoder pipeline can encode the video (e.g. from SDI to MPEG-4) to a stream, and process the audio, video and meta-data. The table vasDecPipeTable contains video decoder pipelines. A video decoder pipeline can decode a stream (from e.g. MPEG-4 to SDI) and process the audio, video and data in the stream. The table vasUdpSnkTable contains objects that receives an UDP video stream on an IP interface and provides it as an input to another source object. The table vasUdpSrcTable contains objects that takes a video stream from a sink object and transmits it as a UDP stream from an IP interface. This object is the complement to an object in the vasUdpSnkTable. The table vasPulSrcTable contains the source objects of a pull transport, i.e. a transport of a stream that is initiated at the sink side, where the stream is pulled from the source (sender) to the sink (receiver) at the sink. The table vasMpuSrcTable contains the source objects of pull transports, where multiple transports to different destinations may be setup from the same source. The table vasPulSnkTable contains the sink part of a pull transport, i.e. a transport of a stream that is initiated at the sink side, where the stream is pulled from the source (sender) to the sink (receiver) at the sink. The table vasPusSrcTable contains the source part of a push transport, i.e. a transport that is initiated from the source side, and is pushed from the source (sender) to the sink (receiver) at the source. The table vasPusSnkTable contains the sink part of a push transport, i.e. a transport that is initiated from the source side, and is pushed from the source (sender) to the sink (receiver) at the source. The MIB also contains tables for statistics.')
netinsight = MibIdentifier((1, 3, 6, 1, 4, 1, 2928))
netiGeneric = MibIdentifier((1, 3, 6, 1, 4, 1, 2928, 2))
class VasConnectionStatus(TextualConvention, Integer32):
    description = 'The connection state of the video transport. offline(0). The transport is disabled. connecting(1). The transport is in the process of being established. reconnecting(2). The transport has been established, but has then failed. Attempting to re-establish the connection. connected(3). The transport is connected and operational. unknown(9). The state is unknown.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 9))
    namedValues = NamedValues(("offline", 0), ("connecting", 1), ("reconnecting", 2), ("connected", 3), ("unknown", 9))

class VasCipher(TextualConvention, Integer32):
    description = 'The cipher: none(0). Encryption is not used. aes128(1). AES-128, encrypted using Advanced Encryption Standard with 128-bit key length. aes192(1). AES-192, encrypted using Advanced Encryption Standard with 192-bit key length. aes256(1). AES-256, encrypted using Advanced Encryption Standard with 256-bit key length.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("aes128", 1), ("aes192", 2), ("aes256", 3))

class VasResetStatistics(TextualConvention, Integer32):
    description = 'reset(0). Reset all statistics.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0))
    namedValues = NamedValues(("reset", 0))

class VasVideoFormat(TextualConvention, Integer32):
    description = 'Video format.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))
    namedValues = NamedValues(("unknown", 0), ("fmt525i59", 1), ("fmt625i50", 2), ("fmt720p23", 3), ("fmt720p24", 4), ("fmt720p25", 5), ("fmt720p29", 6), ("fmt720p30", 7), ("fmt720p50", 8), ("fmt720p59", 9), ("fmt720p60", 10), ("fmt1080p23", 11), ("fmt1080p24", 12), ("fmt1080p25", 13), ("fmt1080p29", 14), ("fmt1080p30", 15), ("fmt1080p50", 16), ("fmt1080p59", 17), ("fmt1080p60", 18), ("fmt1080i50", 19), ("fmt1080i59", 20), ("fmt1080i60", 21))

vasInterfaceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2928, 2, 5, 1))
vasEncoderPipeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2))
vasDecoderPipeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2928, 2, 5, 3))
vasTransportsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4))
vasStatisticsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5))
vasIfTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 5, 1, 1), )
if mibBuilder.loadTexts: vasIfTable.setStatus('current')
if mibBuilder.loadTexts: vasIfTable.setDescription('Table conceptual table contains video interfaces; physical video ports, such as ASI and SDI ports.')
vasIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 5, 1, 1, 1), ).setIndexNames((0, "NETI-VAS-MIB", "vasIfIndex"))
if mibBuilder.loadTexts: vasIfEntry.setStatus('current')
if mibBuilder.loadTexts: vasIfEntry.setDescription('An entry in the conceptual table represents one video interface.')
vasIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vasIfIndex.setStatus('current')
if mibBuilder.loadTexts: vasIfIndex.setDescription('An index that uniquely identifies the interface in the table. The index is maintained across reboots of the node. The index is generally a small number.')
vasIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 1, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasIfName.setStatus('current')
if mibBuilder.loadTexts: vasIfName.setDescription('A textual name of the interface. The name is unique within the node. The first part of the name is a string representing the type of interface, the second part of the name contains the device number followed by the port number within the device, separated by a semi-colon.')
vasIfPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 1, 1, 1, 3), SnmpAdminString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vasIfPurpose.setStatus('current')
if mibBuilder.loadTexts: vasIfPurpose.setDescription('A text that can describe the purpose of the interface. This is for administrative use.')
vasIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vasIfAdminStatus.setStatus('current')
if mibBuilder.loadTexts: vasIfAdminStatus.setDescription('The administrative state of the interface. The value controls the desired state of the interface. up(1). The interface shall be enabled. down(2). The interface shall be disabled.')
vasIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasIfOperStatus.setStatus('current')
if mibBuilder.loadTexts: vasIfOperStatus.setDescription('The operational state of the interface. The value normally follow the state of the administrative state. up(1). The interface is up and operational. down(2). The interface is not operational, either because its administrative state is down, or because of an error. If it is down because of an error, an alarm should be raised and the vasIfFailure should describe the fault.')
vasIfFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 1, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasIfFailure.setStatus('current')
if mibBuilder.loadTexts: vasIfFailure.setDescription('A text describing the configuration or error status of the interface. The text is the empty string if the configuration is correct and no error is present, otherwise it contains a message describing the error.')
vasIfLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 1, 1, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasIfLastChanged.setStatus('current')
if mibBuilder.loadTexts: vasIfLastChanged.setDescription('The value of sysUpTime when status or configuration of the objects was last changed.')
vasIfResetStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 1, 1, 1, 8), VasResetStatistics()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vasIfResetStatistics.setStatus('current')
if mibBuilder.loadTexts: vasIfResetStatistics.setDescription('Resets all statistics counters for the interface. (Not yet implemented).')
vasIfInputFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 1, 1, 1, 9), RowPointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vasIfInputFrom.setStatus('current')
if mibBuilder.loadTexts: vasIfInputFrom.setDescription("If the interface is an output interface, as set on vasIfPortMode, then this is a reference to the object that shall deliver the video stream to the interface. Which type of object that is a valid input depends on the type of interface. If the interface is an input interface, as set on the vasIfPortMode, then the value is always `.0.0'.")
vasIfPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("asiInput", 1), ("asiOutput", 2), ("sdiInput", 3), ("sdiOutput", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vasIfPortMode.setStatus('current')
if mibBuilder.loadTexts: vasIfPortMode.setDescription('Specifies how the interface shall operate. When the port is set as an input, then a video stream received on the physical port is distributed to the objects having this port as their input. When the port is set as an output, then a video stream received from the object referenced in vasIfInputFrom is transmitted on the physical port. asiInput(1). The port shall operate as an ASI input. asiOutput(2). The port shall operate as an ASI output. sdiInput(3). The port shall operate as an SDI input. sdiOutput(4). The port shall operate as an SDI output.')
vasIfActiveFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 1, 1, 1, 11), VasVideoFormat()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasIfActiveFormat.setStatus('current')
if mibBuilder.loadTexts: vasIfActiveFormat.setDescription('The video source format.')
vasEncPipeTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2, 1), )
if mibBuilder.loadTexts: vasEncPipeTable.setStatus('current')
if mibBuilder.loadTexts: vasEncPipeTable.setDescription('The conceptual table contains objects that represent video encoder pipelines. A video encoder pipeline can encode the video (e.g. from SDI to MPEG-4) to a stream, and process the audio, video and meta-data.')
vasEncPipeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2, 1, 1), ).setIndexNames((0, "NETI-VAS-MIB", "vasEncPipeIndex"))
if mibBuilder.loadTexts: vasEncPipeEntry.setStatus('current')
if mibBuilder.loadTexts: vasEncPipeEntry.setDescription('An entry in the conceptual table represents one encoder pipeline.')
vasEncPipeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vasEncPipeIndex.setStatus('current')
if mibBuilder.loadTexts: vasEncPipeIndex.setDescription('An index that uniquely identifies the encoder pipeline in the table.')
vasEncPipeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasEncPipeRowStatus.setStatus('current')
if mibBuilder.loadTexts: vasEncPipeRowStatus.setDescription('See SNMPv2-TC. Use vasEncPipeAdminStatus to activate and de-activate an encoder pipeline. The following values are supported: active(1). The object always reads active. createAndGo(4). A new conceptual row is created representing a new encoder pipeline. To activate the encoder pipeline, set the administrative state to up(1) after all columnar objects have been set. destroy(6). The encoder pipeline is deleted. It can be deleted regardless of its operational state.')
vasEncPipeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasEncPipeName.setStatus('current')
if mibBuilder.loadTexts: vasEncPipeName.setDescription('A textual name of the encoder pipeline. The name is automatically assigned by the system. The last part of the name is the index in this table.')
vasEncPipePurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2, 1, 1, 4), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasEncPipePurpose.setStatus('current')
if mibBuilder.loadTexts: vasEncPipePurpose.setDescription('A text that can describe the purpose of the encoder pipeline. This is for administrative use.')
vasEncPipeAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasEncPipeAdminStatus.setStatus('current')
if mibBuilder.loadTexts: vasEncPipeAdminStatus.setDescription('The administrative state of the encoder pipeline. up(1). The encoder pipeline shall be enabled and allocates the necessary resources. down(2). The encoder pipeline shall be disabled and will not allocate any resources.')
vasEncPipeOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasEncPipeOperStatus.setStatus('current')
if mibBuilder.loadTexts: vasEncPipeOperStatus.setDescription('The operational state of the encoder pipe. The value normally follow the state of the administrative state. up(1). The encoder pipe is up and operational. down(2). The encoder pipe is not operational, either because its administrative state is down, or because of an error. If it is down because of an error, an alarm should be raised and the vasEncPipeFailure should describe the fault.')
vasEncPipeFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2, 1, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasEncPipeFailure.setStatus('current')
if mibBuilder.loadTexts: vasEncPipeFailure.setDescription('A text describing the configuration or error status of the encoder pipeline. The text is the empty string if the configuration is correct and no error is present, otherwise it contains a message describing the error.')
vasEncPipeLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2, 1, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasEncPipeLastChanged.setStatus('current')
if mibBuilder.loadTexts: vasEncPipeLastChanged.setDescription('The value of sysUpTime when status or configuration of the objects was last changed.')
vasEncPipeResetStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2, 1, 1, 9), VasResetStatistics()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vasEncPipeResetStatistics.setStatus('current')
if mibBuilder.loadTexts: vasEncPipeResetStatistics.setDescription('Resets all statistics counters for the encoder pipe. (Not yet implemented).')
vasEncPipeStatsTr101 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasEncPipeStatsTr101.setStatus('current')
if mibBuilder.loadTexts: vasEncPipeStatsTr101.setDescription('Index for an entry in ETSI TR 101 290 statistics table for this object. (The table is not yet defined).')
vasEncPipeEnableTr101 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasEncPipeEnableTr101.setStatus('current')
if mibBuilder.loadTexts: vasEncPipeEnableTr101.setDescription('Enables or disables the ETSI TR 101 290 statistics collection.')
vasEncPipeInputFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2, 1, 1, 12), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasEncPipeInputFrom.setStatus('current')
if mibBuilder.loadTexts: vasEncPipeInputFrom.setDescription("A reference to the object that shall supply the video stream to the encoder pipe. This could be a physical input port in the vasIfTable, or a stream from e.g. a decoder pipe in the vasDecPipeTable. The value `.0.0' is used when no input is specified.")
vasEncPipeCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2, 1, 1, 13), VasCipher().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasEncPipeCipher.setStatus('current')
if mibBuilder.loadTexts: vasEncPipeCipher.setDescription('A cipher to be used when encrypting the transport stream generated by the encoder pipeline.')
vasEncPipeEncryptKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2, 1, 1, 14), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasEncPipeEncryptKey.setStatus('current')
if mibBuilder.loadTexts: vasEncPipeEncryptKey.setDescription('The key to be used when encrypting the transport stream generated by the encoder pipeline. The key shall be provided as a text with hexadecimal digits presented as lower case characters.')
vasEncPipeProcessedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasEncPipeProcessedFrames.setStatus('current')
if mibBuilder.loadTexts: vasEncPipeProcessedFrames.setDescription('Running counter of number of encoded frames.')
vasEncPipeCurrentTsBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasEncPipeCurrentTsBitrate.setStatus('current')
if mibBuilder.loadTexts: vasEncPipeCurrentTsBitrate.setDescription('Current transport stream bitrate in kbps.')
vasEncPipeVideoBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2, 1, 1, 17), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasEncPipeVideoBitrate.setStatus('current')
if mibBuilder.loadTexts: vasEncPipeVideoBitrate.setDescription('Target video bitrate after encoding in kbps.')
vasDecPipeTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 5, 3, 1), )
if mibBuilder.loadTexts: vasDecPipeTable.setStatus('current')
if mibBuilder.loadTexts: vasDecPipeTable.setDescription('The conceptual table contains objects that represent video decoder pipelines. A video decoder pipeline can decode a stream (from e.g. MPEG-4 to SDI) and process the audio, video and data in the stream.')
vasDecPipeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 5, 3, 1, 1), ).setIndexNames((0, "NETI-VAS-MIB", "vasDecPipeIndex"))
if mibBuilder.loadTexts: vasDecPipeEntry.setStatus('current')
if mibBuilder.loadTexts: vasDecPipeEntry.setDescription('An entry in the conceptual table represents one decoder pipeline.')
vasDecPipeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vasDecPipeIndex.setStatus('current')
if mibBuilder.loadTexts: vasDecPipeIndex.setDescription('An index that uniquely identifies the decoder pipeline in the table.')
vasDecPipeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 3, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasDecPipeRowStatus.setStatus('current')
if mibBuilder.loadTexts: vasDecPipeRowStatus.setDescription('See SNMPv2-TC. Use vasDecPipeAdminStatus to activate and de-activate a decoder pipeline. The following values are supported: active(1). The object always reads active. createAndGo(4). A new conceptual row is created representing a new decoder pipeline. To activate the decoder pipeline, set the administrative state to up(1) after all columnar objects have been set. destroy(6). The decoder pipeline is deleted. It can be deleted regardless of its operational state.')
vasDecPipeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 3, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasDecPipeName.setStatus('current')
if mibBuilder.loadTexts: vasDecPipeName.setDescription('A textual name of the decoder pipeline. The name is automatically assigned by the system. The last part of the name is the index in this table.')
vasDecPipePurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 3, 1, 1, 4), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasDecPipePurpose.setStatus('current')
if mibBuilder.loadTexts: vasDecPipePurpose.setDescription('A text that can describe the purpose of the decoder pipeline. This is for administrative use.')
vasDecPipeAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasDecPipeAdminStatus.setStatus('current')
if mibBuilder.loadTexts: vasDecPipeAdminStatus.setDescription('The administrative state of the decoder pipeline. up(1). The decoder pipeline shall be enabled and will allocate the necessary resources. down(2). The decoder pipeline shall be disabled and will not allocate any resources.')
vasDecPipeOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasDecPipeOperStatus.setStatus('current')
if mibBuilder.loadTexts: vasDecPipeOperStatus.setDescription('The operational state of the decoder pipe. The value normally follow the state of the administrative state. up(1). The decoder pipe is up and operational. down(2). The decoder pipe is not operational, either because its administrative state is down, or because of an error. If it is down because of an error, an alarm should be raised and the vasDecPipeFailure should describe the fault.')
vasDecPipeFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 3, 1, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasDecPipeFailure.setStatus('current')
if mibBuilder.loadTexts: vasDecPipeFailure.setDescription('A text describing the configuration or error status of the decoder pipeline. The text is the empty string if the configuration is correct and no error is present, otherwise it contains a message describing the error.')
vasDecPipeLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 3, 1, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasDecPipeLastChanged.setStatus('current')
if mibBuilder.loadTexts: vasDecPipeLastChanged.setDescription('The value of sysUpTime when status or configuration of the objects was last changed.')
vasDecPipeResetStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 3, 1, 1, 9), VasResetStatistics()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vasDecPipeResetStatistics.setStatus('current')
if mibBuilder.loadTexts: vasDecPipeResetStatistics.setDescription('Resets all statistics counters for the decoder pipe. (Not yet implemented).')
vasDecPipeInputFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 3, 1, 1, 10), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasDecPipeInputFrom.setStatus('current')
if mibBuilder.loadTexts: vasDecPipeInputFrom.setDescription("A reference to the object that shall supply the encoded video stream to the decoder pipe. This could be e.g. a pull or push transport sink in the vasPulSnkTable or vasPusSnkTable, or an encoder pipe in the vasEncPipeTable. The value `.0.0' is used when no input is specified.")
vasDecPipeCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 3, 1, 1, 11), VasCipher().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasDecPipeCipher.setStatus('current')
if mibBuilder.loadTexts: vasDecPipeCipher.setDescription('A cipher to be used when decrypting the transport stream.')
vasDecPipeDecryptKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 3, 1, 1, 12), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasDecPipeDecryptKey.setStatus('current')
if mibBuilder.loadTexts: vasDecPipeDecryptKey.setDescription('The key to be used when decrypting the transport stream. The key shall be provided as a text with hexadecimal digits presented as lower case characters.')
vasDecPipeProcessedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasDecPipeProcessedFrames.setStatus('current')
if mibBuilder.loadTexts: vasDecPipeProcessedFrames.setDescription('Running counter of number of decoded frames.')
vasDecPipeCurrentTsBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 3, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasDecPipeCurrentTsBitrate.setStatus('current')
if mibBuilder.loadTexts: vasDecPipeCurrentTsBitrate.setDescription('Current transport stream bitrate in kbps.')
vasDecPipeVideoBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 3, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasDecPipeVideoBitrate.setStatus('current')
if mibBuilder.loadTexts: vasDecPipeVideoBitrate.setDescription('Video bitrate after decoding in kbps.')
vasStreamPort = MibScalar((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 1), InetPortNumber().clone(2088)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vasStreamPort.setStatus('current')
if mibBuilder.loadTexts: vasStreamPort.setDescription('The UDP port number that is used when listening at stream connections requests.')
vasUdpSrcTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2), )
if mibBuilder.loadTexts: vasUdpSrcTable.setStatus('current')
if mibBuilder.loadTexts: vasUdpSrcTable.setDescription('The conceptual table contains objects that takes a video stream from a sink object and transmits it as a UDP stream from an IP interface. This object is the complement to an object in the vasUdpSnkTable.')
vasUdpSrcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1), ).setIndexNames((0, "NETI-VAS-MIB", "vasUdpSrcIndex"))
if mibBuilder.loadTexts: vasUdpSrcEntry.setStatus('current')
if mibBuilder.loadTexts: vasUdpSrcEntry.setDescription('An entry in the conceptual table represents one UDP source.')
vasUdpSrcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vasUdpSrcIndex.setStatus('current')
if mibBuilder.loadTexts: vasUdpSrcIndex.setDescription('An index that uniquely identifies the UDP source in the table.')
vasUdpSrcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSrcRowStatus.setStatus('current')
if mibBuilder.loadTexts: vasUdpSrcRowStatus.setDescription('See SNMPv2-TC. Use vasUdpSrcAdminStatus to activate and de-activate a UDP source. The following values are supported: active(1). The object always reads active. createAndGo(4). A new conceptual row is created representing a new UDP source. To activate the UDP source, set the administrative state to up(1) after all columnar objects have been set. destroy(6). The UDP source is deleted. It can be deleted regardless of its operational state.')
vasUdpSrcName = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasUdpSrcName.setStatus('current')
if mibBuilder.loadTexts: vasUdpSrcName.setDescription('A textual name of the UDP source. The name is automatically assigned by the system. The last part of the name is the index in this table.')
vasUdpSrcPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 4), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSrcPurpose.setStatus('current')
if mibBuilder.loadTexts: vasUdpSrcPurpose.setDescription('A text that can describe the purpose of the UDP source. This is for administrative use.')
vasUdpSrcAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSrcAdminStatus.setStatus('current')
if mibBuilder.loadTexts: vasUdpSrcAdminStatus.setDescription('The administrative state of the UDP source. up(1). The UDP source shall be enabled and allocates the necessary resources. down(2). The UDP source shall be disabled and will not allocate any resources.')
vasUdpSrcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasUdpSrcOperStatus.setStatus('current')
if mibBuilder.loadTexts: vasUdpSrcOperStatus.setDescription('The operational state of the UDP source. The value normally follow the state of the administrative state. up(1). The UDP source is up and operational. down(2). The UDP source is not operational, either because its administrative state is down, or because of an error. If it is down because of an error, an alarm should be raised and the vasUdpSrcFailure should describe the fault.')
vasUdpSrcFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasUdpSrcFailure.setStatus('current')
if mibBuilder.loadTexts: vasUdpSrcFailure.setDescription('A string describing the configuration or error status of the object. The string is the empty string if the configuration is correct and no error is present, otherwise it contains a message describing the error.')
vasUdpSrcLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasUdpSrcLastChanged.setStatus('current')
if mibBuilder.loadTexts: vasUdpSrcLastChanged.setDescription('The value of sysUpTime when status or configuration of the objects was last changed.')
vasUdpSrcConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 9), VasConnectionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasUdpSrcConnectionStatus.setStatus('current')
if mibBuilder.loadTexts: vasUdpSrcConnectionStatus.setDescription('The status of the stream transport connection.')
vasUdpSrcResetStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 10), VasResetStatistics()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vasUdpSrcResetStatistics.setStatus('current')
if mibBuilder.loadTexts: vasUdpSrcResetStatistics.setDescription('Resets all statistics counters for the object. (Not yet implemented).')
vasUdpSrcStatsUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasUdpSrcStatsUdp.setStatus('current')
if mibBuilder.loadTexts: vasUdpSrcStatsUdp.setDescription('Index for an entry in statistics table vasUdpStatisticsTable for this object.')
vasUdpSrcInputFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 12), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSrcInputFrom.setStatus('current')
if mibBuilder.loadTexts: vasUdpSrcInputFrom.setDescription("A reference to the object that shall supply the video stream to the UDP source. This could be e.g. a pull or push sink in the vasPulSnkTable or vasPusSnkTable, or a UDP sink in the vasUdpSnkTable. The value `.0.0' is used when no input is specified.")
vasUdpSrcRemoteHostType = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 13), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSrcRemoteHostType.setStatus('current')
if mibBuilder.loadTexts: vasUdpSrcRemoteHostType.setDescription("Describes how vasUdpSrcRemoteHostAddress shall be interpreted. Supported values are `unknown', `ipv4' and `dns'.")
vasUdpSrcRemoteHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 14), InetAddress().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSrcRemoteHostAddress.setStatus('current')
if mibBuilder.loadTexts: vasUdpSrcRemoteHostAddress.setDescription('The IP address or DNS hostname of the remote source that shall provide the UDP stream.')
vasUdpSrcRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 15), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSrcRemotePort.setStatus('current')
if mibBuilder.loadTexts: vasUdpSrcRemotePort.setDescription('The port number at the remote source that shall provide the UDP stream.')
vasUdpSrcLocalIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 16), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSrcLocalIfType.setStatus('current')
if mibBuilder.loadTexts: vasUdpSrcLocalIfType.setDescription("Describes how the vasUdpSrcLocalIfAddress shall be interpreted. Supported value is `ipv4'.")
vasUdpSrcLocalIfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 17), InetAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSrcLocalIfAddress.setStatus('current')
if mibBuilder.loadTexts: vasUdpSrcLocalIfAddress.setDescription('The IP address of a local interface (NIC) that shall be used as input for the video stream. If any interface can be used, set the IPv4 address 0.0.0.0.')
vasUdpSrcLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 18), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSrcLocalPort.setStatus('current')
if mibBuilder.loadTexts: vasUdpSrcLocalPort.setDescription('The local UPD port number. Use 0 for any port.')
vasUdpSrcCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 19), VasCipher().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSrcCipher.setStatus('current')
if mibBuilder.loadTexts: vasUdpSrcCipher.setDescription('The cipher to use for encrypting the UDP video stream.')
vasUdpSrcDecryptKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 20), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSrcDecryptKey.setStatus('current')
if mibBuilder.loadTexts: vasUdpSrcDecryptKey.setDescription('The key to be used when encrypting the UDP video stream. The key shall be provided as a text with hexadecimal digits presented as lower case characters.')
vasUdpSrcTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSrcTtl.setStatus('current')
if mibBuilder.loadTexts: vasUdpSrcTtl.setDescription('TTL, the Time to Live (hop limit) for the UDP/IP datagram.')
vasUdpSrcDontFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 22), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSrcDontFragment.setStatus('current')
if mibBuilder.loadTexts: vasUdpSrcDontFragment.setDescription("The Don't Fragment (DF) flag on the IP packet. When set, then if fragmentation would be required to route a packet, the packet is dropped instead.")
vasUdpSnkTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3), )
if mibBuilder.loadTexts: vasUdpSnkTable.setStatus('current')
if mibBuilder.loadTexts: vasUdpSnkTable.setDescription('The conceptual table contains objects that receives a UDP video stream on an IP interface and provides it as an input to another source object.')
vasUdpSnkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1), ).setIndexNames((0, "NETI-VAS-MIB", "vasUdpSnkIndex"))
if mibBuilder.loadTexts: vasUdpSnkEntry.setStatus('current')
if mibBuilder.loadTexts: vasUdpSnkEntry.setDescription('An entry in the conceptual table represents one UDP sink.')
vasUdpSnkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vasUdpSnkIndex.setStatus('current')
if mibBuilder.loadTexts: vasUdpSnkIndex.setDescription('An index that uniquely identifies the UDP sink in the table.')
vasUdpSnkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSnkRowStatus.setStatus('current')
if mibBuilder.loadTexts: vasUdpSnkRowStatus.setDescription('See SNMPv2-TC. Use vasUdpSnkAdminStatus to activate and de-activate a UDP source. The following values are supported: active(1). The object always reads active. createAndGo(4). A new conceptual row is created representing a new UDP sink. To activate the UDP sink, set the administrative state to up(1) after all columnar objects have been set. destroy(6). The UDP sink is deleted. It can be deleted regardless of its operational state.')
vasUdpSnkName = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasUdpSnkName.setStatus('current')
if mibBuilder.loadTexts: vasUdpSnkName.setDescription('A textual name of the UDP sink. The name is automatically assigned by the system. The last part of the name is the index in this table.')
vasUdpSnkPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 4), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSnkPurpose.setStatus('current')
if mibBuilder.loadTexts: vasUdpSnkPurpose.setDescription('A text that can describe the purpose of the UDP sink. This is for administrative use.')
vasUdpSnkAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSnkAdminStatus.setStatus('current')
if mibBuilder.loadTexts: vasUdpSnkAdminStatus.setDescription('The administrative state of the UDP sink. up(1). The UDP sink shall be enabled and allocates the necessary resources. down(2). The UDP sink shall be disabled and will not allocate any resources.')
vasUdpSnkOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasUdpSnkOperStatus.setStatus('current')
if mibBuilder.loadTexts: vasUdpSnkOperStatus.setDescription('The operational state of the UDP sink. The value normally follow the state of the administrative state. up(1). The UDP sink is up and operational. down(2). The UDP sink is not operational, either because its administrative state is down, or because of an error. If it is down because of an error, an alarm should be raised and the vasUdpSnkFailure should describe the fault.')
vasUdpSnkFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasUdpSnkFailure.setStatus('current')
if mibBuilder.loadTexts: vasUdpSnkFailure.setDescription('A string describing the configuration or error status of the object. The string is the empty string if the configuration is correct and no error is present, otherwise it contains a message describing the error.')
vasUdpSnkLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasUdpSnkLastChanged.setStatus('current')
if mibBuilder.loadTexts: vasUdpSnkLastChanged.setDescription('The value of sysUpTime when status or configuration of the objects was last changed.')
vasUdpSnkConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 9), VasConnectionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasUdpSnkConnectionStatus.setStatus('current')
if mibBuilder.loadTexts: vasUdpSnkConnectionStatus.setDescription('The status of the stream transport connection.')
vasUdpSnkResetStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 10), VasResetStatistics()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSnkResetStatistics.setStatus('current')
if mibBuilder.loadTexts: vasUdpSnkResetStatistics.setDescription('Resets all statistics counters for the object. (Not yet implemented).')
vasUdpSnkStatsUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasUdpSnkStatsUdp.setStatus('current')
if mibBuilder.loadTexts: vasUdpSnkStatsUdp.setDescription('Index for an entry in statistics table vasUdpStatisticsTable for this object.')
vasUdpSnkStatsTr101 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasUdpSnkStatsTr101.setStatus('current')
if mibBuilder.loadTexts: vasUdpSnkStatsTr101.setDescription('Index for an entry in ETSI TR 101 290 statistics table for this object. (The table is not yet defined).')
vasUdpSnkEnableTr101 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSnkEnableTr101.setStatus('current')
if mibBuilder.loadTexts: vasUdpSnkEnableTr101.setDescription('Enables or disables ETSI TR 101 290 statistics collection.')
vasUdpSnkRemoteInetType = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 14), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasUdpSnkRemoteInetType.setStatus('current')
if mibBuilder.loadTexts: vasUdpSnkRemoteInetType.setDescription('Describes the format of vasUdpSnkRemoteInetAddress.')
vasUdpSnkRemoteInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 15), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasUdpSnkRemoteInetAddress.setStatus('current')
if mibBuilder.loadTexts: vasUdpSnkRemoteInetAddress.setDescription("The IP address of the remote host from where the UDP stream is being received. The value is empty and vasUdpSnkRemoteInetType is `unknown' when a stream is not received.")
vasUdpSnkLocalIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 16), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSnkLocalIfType.setStatus('current')
if mibBuilder.loadTexts: vasUdpSnkLocalIfType.setDescription("Describes how the vasUdpSnkLocalIfAddress shall be interpreted. Supported value is `ipv4'.")
vasUdpSnkLocalIfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 17), InetAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSnkLocalIfAddress.setStatus('current')
if mibBuilder.loadTexts: vasUdpSnkLocalIfAddress.setDescription('The IP address of a local interface (NIC) that shall be used as input for the video stream. If any interface can be used, set the IPv4 address 0.0.0.0.')
vasUdpSnkLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 18), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSnkLocalPort.setStatus('current')
if mibBuilder.loadTexts: vasUdpSnkLocalPort.setDescription('The local UDP port that shall be used for input.')
vasUdpSnkCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 19), VasCipher().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSnkCipher.setStatus('current')
if mibBuilder.loadTexts: vasUdpSnkCipher.setDescription('The cipher that shall be used for decrypting the received UDP video stream.')
vasUdpSnkEncryptKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 20), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSnkEncryptKey.setStatus('current')
if mibBuilder.loadTexts: vasUdpSnkEncryptKey.setDescription('The key to be used when decrypting the UDP video stream. The key shall be provided as a text with hexadecimal digits presented as lower case characters.')
vasUdpSnkMcastIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 21), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSnkMcastIpType.setStatus('current')
if mibBuilder.loadTexts: vasUdpSnkMcastIpType.setDescription("The format of vasUdpSnkMcastIp and vasUdpSnkSsmSourceIp. Supported values are `unknown' and `ipv4'.")
vasUdpSnkMcastIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 22), InetAddress().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSnkMcastIp.setStatus('current')
if mibBuilder.loadTexts: vasUdpSnkMcastIp.setDescription("The multicast IP address if joining a multicast UDP stream. Set empty and vasUdpSnkMcastIpType to `unknown' if not multicast.")
vasUdpSnkSsmSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 23), InetAddress().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSnkSsmSourceIp.setStatus('current')
if mibBuilder.loadTexts: vasUdpSnkSsmSourceIp.setDescription("The source address if source-specific multicast (SSM) shall be used. Set to empty and vasUdpSnkMcastIpType to `unknown' if multicast shall not be used, or all-zero (0.0.0.0) if multicast but where SSM shall not be used.")
vasUdpSnkCompress = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 24), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSnkCompress.setStatus('current')
if mibBuilder.loadTexts: vasUdpSnkCompress.setDescription('Removes null-packets in an MPEG transport stream.')
vasPulSrcTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 4), )
if mibBuilder.loadTexts: vasPulSrcTable.setStatus('current')
if mibBuilder.loadTexts: vasPulSrcTable.setDescription('The conceptual table contains objects that represent the source (sender) in a pull transport, i.e. a transport of a stream that is initiated from the sink side, where the stream is pulled from the source to the sink at the sink.')
vasPulSrcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 4, 1), ).setIndexNames((0, "NETI-VAS-MIB", "vasPulSrcIndex"))
if mibBuilder.loadTexts: vasPulSrcEntry.setStatus('current')
if mibBuilder.loadTexts: vasPulSrcEntry.setDescription('An entry in the conceptual table represents one pull source object.')
vasPulSrcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vasPulSrcIndex.setStatus('current')
if mibBuilder.loadTexts: vasPulSrcIndex.setDescription('An index that uniquely identifies the pull source in the table.')
vasPulSrcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSrcRowStatus.setStatus('current')
if mibBuilder.loadTexts: vasPulSrcRowStatus.setDescription('See SNMPv2-TC. Use vasPulSrcAdminStatus to activate and de-activate a Pull source. The following values are supported: active(1). The object always reads active. createAndGo(4). A new conceptual row is created representing a new Pull source. To activate the Pull source, set the administrative state to up(1) after all columnar objects have been set. destroy(6). The Pull source is deleted. It can be deleted regardless of its operational state.')
vasPulSrcName = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 4, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPulSrcName.setStatus('current')
if mibBuilder.loadTexts: vasPulSrcName.setDescription('A textual name of the Pull source. The name is automatically assigned by the system. The last part of the name is the index in this table.')
vasPulSrcPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 4, 1, 4), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSrcPurpose.setStatus('current')
if mibBuilder.loadTexts: vasPulSrcPurpose.setDescription('A text that can describe the purpose of the Pull source. This is for administrative use.')
vasPulSrcAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSrcAdminStatus.setStatus('current')
if mibBuilder.loadTexts: vasPulSrcAdminStatus.setDescription('The administrative state of the Pull source. The value controls the desired state of the Pull source. up(1). The Pull source shall be enabled. down(2). The Pull source shall be disabled.')
vasPulSrcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("dormant", 3), ("partial", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPulSrcOperStatus.setStatus('current')
if mibBuilder.loadTexts: vasPulSrcOperStatus.setDescription('The operational state of the Pull source. The value normally follow the state of the administrative state. up(1). The Pull source is up and operational. down(2). The Pull source is not operational, either because its administrative state is down, or because of an error. If it is down because of an error, an alarm should be raised and the vasPulSrcFailure should describe the fault.')
vasPulSrcFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 4, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPulSrcFailure.setStatus('current')
if mibBuilder.loadTexts: vasPulSrcFailure.setDescription('A string describing the configuration or error status of the object. The string is the empty string if the configuration is correct and no error is present, otherwise it contains a message describing the error.')
vasPulSrcLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 4, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPulSrcLastChanged.setStatus('current')
if mibBuilder.loadTexts: vasPulSrcLastChanged.setDescription('The value of sysUpTime when status or configuration of the objects was last changed.')
vasPulSrcConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 4, 1, 9), VasConnectionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPulSrcConnectionStatus.setStatus('current')
if mibBuilder.loadTexts: vasPulSrcConnectionStatus.setDescription('The status of the stream transport connection.')
vasPulSrcResetStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 4, 1, 10), VasResetStatistics()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vasPulSrcResetStatistics.setStatus('current')
if mibBuilder.loadTexts: vasPulSrcResetStatistics.setDescription('Resets all statistics counters for the object. (Not yet implemented).')
vasPulSrcStatsTrsp = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPulSrcStatsTrsp.setStatus('current')
if mibBuilder.loadTexts: vasPulSrcStatsTrsp.setDescription('Index for an entry in statistics vasTrspStatisticsTable table for this object.')
vasPulSrcRemoteInetType = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 4, 1, 12), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPulSrcRemoteInetType.setStatus('current')
if mibBuilder.loadTexts: vasPulSrcRemoteInetType.setDescription('Format of vasPulSrcRemoteInetAddress.')
vasPulSrcRemoteInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 4, 1, 13), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPulSrcRemoteInetAddress.setStatus('current')
if mibBuilder.loadTexts: vasPulSrcRemoteInetAddress.setDescription("The IP address of the remote host to where the transport stream is being sent. The value is empty and vasPulSrcRemoteInetType is `unknown' when a stream is not sent.")
vasPulSrcStreamId = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 4, 1, 14), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSrcStreamId.setStatus('current')
if mibBuilder.loadTexts: vasPulSrcStreamId.setDescription('Assigns the stream ID to a transport stream. The stream ID is a string that identifies the transport stream in all nodes where the stream exists. This must be unique within a node for any given transport stream.')
vasPulSrcInputFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 4, 1, 15), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSrcInputFrom.setStatus('current')
if mibBuilder.loadTexts: vasPulSrcInputFrom.setDescription("A reference to the object that shall supply the video stream to the pull source. This could be e.g. an encoder pipeline in the vasEncPipeTable or a UDP sink in the vasUdpSnkTable. The value `.0.0' is used when no input is specified.")
vasPulSrcRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 4, 1, 16), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSrcRemoteId.setStatus('current')
if mibBuilder.loadTexts: vasPulSrcRemoteId.setDescription("The remote ID is the assigned to the remote host where the transport stream is received. This is used for compatibility with nodes that does not implement this MIB. A node that implements this MIB is assigned the default value `nimbrava'.")
vasPulSrcPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 4, 1, 17), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSrcPassword.setStatus('current')
if mibBuilder.loadTexts: vasPulSrcPassword.setDescription('A password used for the transport stream. The vasPulSnkPassword on the sink at the remote host must match.')
vasMpuSrcTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 5), )
if mibBuilder.loadTexts: vasMpuSrcTable.setStatus('current')
if mibBuilder.loadTexts: vasMpuSrcTable.setDescription('The conceptual table contains objects that represent the source (sender) of pull transports, where multiple transports to different destinations may be setup from the same source.')
vasMpuSrcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 5, 1), ).setIndexNames((0, "NETI-VAS-MIB", "vasMpuSrcIndex"))
if mibBuilder.loadTexts: vasMpuSrcEntry.setStatus('current')
if mibBuilder.loadTexts: vasMpuSrcEntry.setDescription('An entry in the conceptual table represents one multiple pull source object.')
vasMpuSrcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vasMpuSrcIndex.setStatus('current')
if mibBuilder.loadTexts: vasMpuSrcIndex.setDescription('An index that uniquely identifies the multiple pull source in the table.')
vasMpuSrcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasMpuSrcRowStatus.setStatus('current')
if mibBuilder.loadTexts: vasMpuSrcRowStatus.setDescription('See SNMPv2-TC. Use vasMpuSrcAdminStatus to activate and de-activate an Multiple pull source. The following values are supported: active(1). The object always reads active. createAndGo(4). A new conceptual row is created representing a new Multiple pull source. To activate the encoder pipeline, set the administrative state to up(1) after all columnar objects have been set. destroy(6). The Multiple pull source is deleted. It can be deleted regardless of its operational state.')
vasMpuSrcName = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 5, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasMpuSrcName.setStatus('current')
if mibBuilder.loadTexts: vasMpuSrcName.setDescription('A textual name of the Multiple pull source. The name is automatically assigned by the system. The last part of the name is the index in this table.')
vasMpuSrcPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 5, 1, 4), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasMpuSrcPurpose.setStatus('current')
if mibBuilder.loadTexts: vasMpuSrcPurpose.setDescription('A text that can describe the purpose of the Multiple pull source. This is for administrative use.')
vasMpuSrcAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasMpuSrcAdminStatus.setStatus('current')
if mibBuilder.loadTexts: vasMpuSrcAdminStatus.setDescription('The administrative state of the Multiple pull source. The value controls the desired state of the Multiple pull source. up(1). The Multiple pull source shall be enabled. down(2). The Multiple pull source shall be disabled.')
vasMpuSrcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("dormant", 3), ("partial", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasMpuSrcOperStatus.setStatus('current')
if mibBuilder.loadTexts: vasMpuSrcOperStatus.setDescription('The operational state of the Multiple Pull source. The value normally follow the state of the administrative state. up(1). The Multiple pull source is up and operational. down(2). The Multiple pull source is not operational, either because its administrative state is down, or because of an error. If it is down because of an error, an alarm should be raised and the vasMpuSrcFailure should describe the fault.')
vasMpuSrcFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 5, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasMpuSrcFailure.setStatus('current')
if mibBuilder.loadTexts: vasMpuSrcFailure.setDescription('A string describing the configuration or error status of the object. The string is the empty string if the configuration is correct and no error is present, otherwise it contains a message describing the error.')
vasMpuSrcLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 5, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasMpuSrcLastChanged.setStatus('current')
if mibBuilder.loadTexts: vasMpuSrcLastChanged.setDescription('The value of sysUpTime when status or configuration of the objects was last changed.')
vasMpuSrcStreamId = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 5, 1, 12), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasMpuSrcStreamId.setStatus('current')
if mibBuilder.loadTexts: vasMpuSrcStreamId.setDescription('Assigns the stream ID to a transport stream. The stream ID is a string that identifies the transport stream in all nodes where the stream exists. This must be unique within a node for any given transport stream.')
vasMpuSrcInputFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 5, 1, 13), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasMpuSrcInputFrom.setStatus('current')
if mibBuilder.loadTexts: vasMpuSrcInputFrom.setDescription("A reference to the object that shall supply the video stream to the multiple pull source. This could be e.g. an encoder pipeline on the vasEncPipeTable or a UDP sink in the vasUdpSnkTable. The value `.0.0' is used when no input is specified.")
vasPulSnkTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6), )
if mibBuilder.loadTexts: vasPulSnkTable.setStatus('current')
if mibBuilder.loadTexts: vasPulSnkTable.setDescription('The conceptual table contains objects that represent the sink (receiver) of a pull transport, i.e. a transport of a stream that is initiated at the sink side, where the stream is pulled from the source to the sink at the sink.')
vasPulSnkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1), ).setIndexNames((0, "NETI-VAS-MIB", "vasPulSnkIndex"))
if mibBuilder.loadTexts: vasPulSnkEntry.setStatus('current')
if mibBuilder.loadTexts: vasPulSnkEntry.setDescription('An entry in the conceptual table represents one pull sink object.')
vasPulSnkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vasPulSnkIndex.setStatus('current')
if mibBuilder.loadTexts: vasPulSnkIndex.setDescription('An index that uniquely identifies the pull sink in the table.')
vasPulSnkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSnkRowStatus.setStatus('current')
if mibBuilder.loadTexts: vasPulSnkRowStatus.setDescription('See SNMPv2-TC. Use vasPulSnkAdminStatus to activate and de-activate a Pull sink. The following values are supported: active(1). The object always reads active. createAndGo(4). A new conceptual row is created representing a new Pull sink. To activate the Pull sink, set the administrative state to up(1) after all columnar objects have been set. destroy(6). The Pull sink is deleted. It can be deleted regardless of its operational state.')
vasPulSnkName = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPulSnkName.setStatus('current')
if mibBuilder.loadTexts: vasPulSnkName.setDescription('A textual name of the Pull sink. The name is automatically assigned by the system. The last part of the name is the index in this table.')
vasPulSnkPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 4), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSnkPurpose.setStatus('current')
if mibBuilder.loadTexts: vasPulSnkPurpose.setDescription('A text that can describe the purpose of the Pull sink. This is for administrative use.')
vasPulSnkAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSnkAdminStatus.setStatus('current')
if mibBuilder.loadTexts: vasPulSnkAdminStatus.setDescription('The administrative state of the Pull sink. The value controls the desired state of the Pull sink. up(1). The Pull sink shall be enabled. down(2). The Pull sink shall be disabled.')
vasPulSnkOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPulSnkOperStatus.setStatus('current')
if mibBuilder.loadTexts: vasPulSnkOperStatus.setDescription('The operational state of the Pull sink. The value normally follow the state of the administrative state. up(1). The Pull sink is up and operational. down(2). The Pull sink is not operational, either because its administrative state is down, or because of an error. If it is down because of an error, an alarm should be raised and the vasPulSnkFailure should describe the fault.')
vasPulSnkFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPulSnkFailure.setStatus('current')
if mibBuilder.loadTexts: vasPulSnkFailure.setDescription('A string describing the configuration or error status of the object. The string is the empty string if the configuration is correct and no error is present, otherwise it contains a message describing the error.')
vasPulSnkLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPulSnkLastChanged.setStatus('current')
if mibBuilder.loadTexts: vasPulSnkLastChanged.setDescription('The value of sysUpTime when status or configuration of the objects was last changed.')
vasPulSnkConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 9), VasConnectionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPulSnkConnectionStatus.setStatus('current')
if mibBuilder.loadTexts: vasPulSnkConnectionStatus.setDescription('The status of the stream transport connection.')
vasPulSnkResetStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 10), VasResetStatistics()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vasPulSnkResetStatistics.setStatus('current')
if mibBuilder.loadTexts: vasPulSnkResetStatistics.setDescription('Resets all statistics counters for the object. (Not yet implemented).')
vasPulSnkStatsTrsp = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPulSnkStatsTrsp.setStatus('current')
if mibBuilder.loadTexts: vasPulSnkStatsTrsp.setDescription('Index for an entry in statistics vasTrspStatisticsTable table for this object.')
vasPulSnkStatsTr101 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPulSnkStatsTr101.setStatus('current')
if mibBuilder.loadTexts: vasPulSnkStatsTr101.setDescription('Index for an entry in ETSI TR 101 290 statistics table for this object. (The table is not yet defined).')
vasPulSnkEnableTr101 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSnkEnableTr101.setStatus('current')
if mibBuilder.loadTexts: vasPulSnkEnableTr101.setDescription('Enables or disables ETSI TR 101 290 statistics collection.')
vasPulSnkRemoteInetType = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 14), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPulSnkRemoteInetType.setStatus('current')
if mibBuilder.loadTexts: vasPulSnkRemoteInetType.setDescription('Format of vasPulSrcRemoteInetAddress.')
vasPulSnkRemoteInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 15), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPulSnkRemoteInetAddress.setStatus('current')
if mibBuilder.loadTexts: vasPulSnkRemoteInetAddress.setDescription("The IP address of the remote host from where the transport stream is received. The value is empty and vasPulSnkRemoteInetType is `unknown' when a stream is not received.")
vasPulSnkStreamId = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 16), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSnkStreamId.setStatus('current')
if mibBuilder.loadTexts: vasPulSnkStreamId.setDescription('Specifies the stream ID of the stream on the remote host that shall be received. The stream ID is a string that identifies the transport stream in all nodes where the stream exists. This must be unique within a node for any given transport stream.')
vasPulSnkPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 17), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSnkPassword.setStatus('current')
if mibBuilder.loadTexts: vasPulSnkPassword.setDescription('The password to use for the received transport stream. The password must match the vasPulSrcPassword set on the source at the remote host.')
vasPulSnkRemoteHostType = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 18), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSnkRemoteHostType.setStatus('current')
if mibBuilder.loadTexts: vasPulSnkRemoteHostType.setDescription("Format of vasPulSnkRemoteHostAddress. Supported values are `unknown', `ipv4', and `dns'.")
vasPulSnkRemoteHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 19), InetAddress().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSnkRemoteHostAddress.setStatus('current')
if mibBuilder.loadTexts: vasPulSnkRemoteHostAddress.setDescription('The IP address or DNS hostname of the remote host from where the transport stream shall be pulled. This address is the first host that will be attempted when a transport stream is to be established.')
vasPulSnkRemoteHostType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 20), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSnkRemoteHostType2.setStatus('current')
if mibBuilder.loadTexts: vasPulSnkRemoteHostType2.setDescription("Format of vasPulSnkRemoteHostAddress2. Supported values are `unknown', `ipv4', and `dns'.")
vasPulSnkRemoteHostAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 21), InetAddress().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSnkRemoteHostAddress2.setStatus('current')
if mibBuilder.loadTexts: vasPulSnkRemoteHostAddress2.setDescription("The second IP address or DNS hostname of the remote host from where the transport stream shall be pulled. When using two addresses, then the transport is setup with two alternative sources. This is a second host that will be attempted if connection to the first host fails when a transport stream is to be established. If a second host shall not be used, then the value shall be empty and the vasPulSnkRemoteHostType shall be `unknown'.")
vasPulSnkRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 22), InetPortNumber().clone(2088)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSnkRemotePort.setStatus('current')
if mibBuilder.loadTexts: vasPulSnkRemotePort.setDescription('The UDP port on the remote host that the remote host is listening for connection attempts. See vaStreamPort.')
vasPulSnkRetransmitBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30000)).clone(500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSnkRetransmitBuffer.setStatus('current')
if mibBuilder.loadTexts: vasPulSnkRetransmitBuffer.setDescription('The size of the retransmission buffer in milliseconds (ms). The retransmission buffer setting adds bandwidth on the sender side to compensate for packet loss. The setting will affect the allowed maximum bitrate.')
vasPulSnkFecMaxOverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSnkFecMaxOverhead.setStatus('current')
if mibBuilder.loadTexts: vasPulSnkFecMaxOverhead.setDescription('The Forward Error Correction (FEC) overhead in percent (%) of the original stream bit rate. FEC increases the streams tolerance of burst errors and corrects for single errors, as long as they are not clustered, but at the cost of increased latency and is therefore not always desirable.')
vasPulSnkFecOptimize = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 25), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSnkFecOptimize.setStatus('current')
if mibBuilder.loadTexts: vasPulSnkFecOptimize.setDescription('Whether to automatically optimize Forward Error Correction (FEC). Optimization will favor the video stream and visually important frames, I and IDR-frames, over others, such as audio. Thereby lowering latency.')
vasPulSnkFecLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 26), Unsigned32().clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSnkFecLatency.setStatus('current')
if mibBuilder.loadTexts: vasPulSnkFecLatency.setDescription('Forward Error Correction (FEC) block size in milliseconds (ms).')
vasPusSrcTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7), )
if mibBuilder.loadTexts: vasPusSrcTable.setStatus('current')
if mibBuilder.loadTexts: vasPusSrcTable.setDescription('The conceptual table contains objects that represent the source (sender) of a push transport, i.e. a transport that is initiated from the source side, and is pushed from the source to the sink at the source.')
vasPusSrcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1), ).setIndexNames((0, "NETI-VAS-MIB", "vasPusSrcIndex"))
if mibBuilder.loadTexts: vasPusSrcEntry.setStatus('current')
if mibBuilder.loadTexts: vasPusSrcEntry.setDescription('An entry in the conceptual table represents one push source object.')
vasPusSrcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vasPusSrcIndex.setStatus('current')
if mibBuilder.loadTexts: vasPusSrcIndex.setDescription('An index that uniquely identifies the push source in the table.')
vasPusSrcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSrcRowStatus.setStatus('current')
if mibBuilder.loadTexts: vasPusSrcRowStatus.setDescription('See SNMPv2-TC. Use vasPusSrcAdminStatus to activate and de-activate an Push source. The following values are supported: active(1). The object always reads active. createAndGo(4). A new conceptual row is created representing a new Push source. To activate the Push source, set the administrative state to up(1) after all columnar objects have been set. destroy(6). The Push source is deleted. It can be deleted regardless of its operational state.')
vasPusSrcName = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPusSrcName.setStatus('current')
if mibBuilder.loadTexts: vasPusSrcName.setDescription('A textual name of the Push source. The name is automatically assigned by the system. The last part of the name is the index in this table.')
vasPusSrcPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 4), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSrcPurpose.setStatus('current')
if mibBuilder.loadTexts: vasPusSrcPurpose.setDescription('A text that can describe the purpose of the Push source. This is for administrative use.')
vasPusSrcAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSrcAdminStatus.setStatus('current')
if mibBuilder.loadTexts: vasPusSrcAdminStatus.setDescription('The administrative state of the Push source. The value controls the desired state of the Push source. up(1). The Push source shall be enabled. down(2). The Push source shall be disabled.')
vasPusSrcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPusSrcOperStatus.setStatus('current')
if mibBuilder.loadTexts: vasPusSrcOperStatus.setDescription('The operational state of the Push source. The value normally follow the state of the administrative state. up(1). The Push source is up and operational. down(2). The Push source is not operational, either because its administrative state is down, or because of an error. If it is down because of an error, an alarm should be raised and the vasPusSrcFailure should describe the fault.')
vasPusSrcFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPusSrcFailure.setStatus('current')
if mibBuilder.loadTexts: vasPusSrcFailure.setDescription('A string describing the configuration or error status of the object. The string is the empty string if the configuration is correct and no error is present, otherwise it contains a message describing the error.')
vasPusSrcLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPusSrcLastChanged.setStatus('current')
if mibBuilder.loadTexts: vasPusSrcLastChanged.setDescription('The value of sysUpTime when status or configuration of the objects was last changed.')
vasPusSrcConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 9), VasConnectionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPusSrcConnectionStatus.setStatus('current')
if mibBuilder.loadTexts: vasPusSrcConnectionStatus.setDescription('The status of the stream transport connection.')
vasPusSrcResetStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 10), VasResetStatistics()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vasPusSrcResetStatistics.setStatus('current')
if mibBuilder.loadTexts: vasPusSrcResetStatistics.setDescription('Resets all statistics counters for the object. (Not yet implemented).')
vasPusSrcStatsTrsp = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPusSrcStatsTrsp.setStatus('current')
if mibBuilder.loadTexts: vasPusSrcStatsTrsp.setDescription('Index for an entry in statistics vasTrspStatisticsTable table for this object.')
vasPusSrcRemoteInetType = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 12), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPusSrcRemoteInetType.setStatus('current')
if mibBuilder.loadTexts: vasPusSrcRemoteInetType.setDescription('Format of vasPusSrcRemoteInetAddress.')
vasPusSrcRemoteInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 13), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPusSrcRemoteInetAddress.setStatus('current')
if mibBuilder.loadTexts: vasPusSrcRemoteInetAddress.setDescription("The IP address of the remote host to where the transport stream is being sent. The value is empty and vasPusSrcRemoteInetType is `unknown' when a stream is not sent.")
vasPusSrcStreamId = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 14), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSrcStreamId.setStatus('current')
if mibBuilder.loadTexts: vasPusSrcStreamId.setDescription('Assigns the stream ID to a transport stream. The stream ID is a string that identifies the transport stream in all nodes where the stream exists. This must be unique within a node for any given transport stream.')
vasPusSrcInputFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 15), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSrcInputFrom.setStatus('current')
if mibBuilder.loadTexts: vasPusSrcInputFrom.setDescription("A reference to the object that shall supply the encoded video stream to the push source. This could be e.g. encoder pipeline in the vasEncPipeTable or a UDP sink in the vasUdpSnkTable. The value `.0.0' is used when no input is specified.")
vasPusSrcPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 16), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSrcPassword.setStatus('current')
if mibBuilder.loadTexts: vasPusSrcPassword.setDescription('A password used for the transport stream. The vasPusSnkPassword on the sink at the remote host must match.')
vasPusSrcRemoteHostType = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 17), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSrcRemoteHostType.setStatus('current')
if mibBuilder.loadTexts: vasPusSrcRemoteHostType.setDescription("Format of vasPusSrcRemoteHostAddress. Supported values are `unknown', `ipv4' and `dns'.")
vasPusSrcRemoteHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 18), InetAddress().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSrcRemoteHostAddress.setStatus('current')
if mibBuilder.loadTexts: vasPusSrcRemoteHostAddress.setDescription('The IP address or DNS hostname of the remote host to where the transport stream shall be pushed. This address is the first host that will be attempted when a transport stream is to be established.')
vasPusSrcRemoteHostType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 19), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSrcRemoteHostType2.setStatus('current')
if mibBuilder.loadTexts: vasPusSrcRemoteHostType2.setDescription("Format of vasPusSrcRemoteHostAddress2. Supported values are `unknown', `ipv4' and `dns'.")
vasPusSrcRemoteHostAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 20), InetAddress().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSrcRemoteHostAddress2.setStatus('current')
if mibBuilder.loadTexts: vasPusSrcRemoteHostAddress2.setDescription("The second IP address or DNS hostname of the remote host to where the transport stream shall be pushed. This is a second host that will be attempted if connection to the first host fails when a transport stream is to be established. When using two addresses, the transport is setup to two alternative destinations. If a second host shall not be used, then the the value shall be empty and the vasPusSrcRemoteType2 shall be `unknown'.")
vasPusSrcRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 21), InetPortNumber().clone(2088)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSrcRemotePort.setStatus('current')
if mibBuilder.loadTexts: vasPusSrcRemotePort.setDescription('The UDP port number on the remote host that the remote host is listening for connection attempts. See vaStreamPort.')
vasPusSrcLocalIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 22), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSrcLocalIfType.setStatus('current')
if mibBuilder.loadTexts: vasPusSrcLocalIfType.setDescription("Describes how the vasPusSrcLocalIfAddress shall be interpreted. Supported value is `ipv4'.")
vasPusSrcLocalIfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 23), InetAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSrcLocalIfAddress.setStatus('current')
if mibBuilder.loadTexts: vasPusSrcLocalIfAddress.setDescription('The IP address of a local interface (NIC) that shall be used as output for the video stream. If any interface can be used, set the IPv4 address 0.0.0.0.')
vasPusSrcRetransmitBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30000)).clone(500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSrcRetransmitBuffer.setStatus('current')
if mibBuilder.loadTexts: vasPusSrcRetransmitBuffer.setDescription('The size of the retransmission buffer in milliseconds (ms). The retransmission buffer setting adds bandwidth on the sender side to compensate for packet loss. The setting will affect the allowed maximum bitrate.')
vasPusSrcFecMaxOverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSrcFecMaxOverhead.setStatus('current')
if mibBuilder.loadTexts: vasPusSrcFecMaxOverhead.setDescription('The Forward Error Correction (FEC) overhead in percent (%) of the original stream bit rate. FEC increases the streams tolerance of burst errors and corrects for single errors, as long as they are not clustered, but at the cost of increased latency and is therefore not always desirable.')
vasPusSrcFecOptimize = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 26), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSrcFecOptimize.setStatus('current')
if mibBuilder.loadTexts: vasPusSrcFecOptimize.setDescription('Whether to automatically optimize Forward Error Correction (FEC). Optimization will favor the video stream and visually important frames, I and IDR-frames, over others, such as audio. Thereby lowering latency.')
vasPusSrcFecLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 27), Unsigned32().clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSrcFecLatency.setStatus('current')
if mibBuilder.loadTexts: vasPusSrcFecLatency.setDescription('Forward Error Correction (FEC) block size in milliseconds (ms).')
vasPusSnkTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 8), )
if mibBuilder.loadTexts: vasPusSnkTable.setStatus('current')
if mibBuilder.loadTexts: vasPusSnkTable.setDescription('The conceptual table contains objects that represent the sink (receiver) of a push transport, i.e. a transport that is initiated from the source side, and is pushed from the source to the sink at the source.')
vasPusSnkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 8, 1), ).setIndexNames((0, "NETI-VAS-MIB", "vasPusSnkIndex"))
if mibBuilder.loadTexts: vasPusSnkEntry.setStatus('current')
if mibBuilder.loadTexts: vasPusSnkEntry.setDescription('An entry in the conceptual table represents one push sink object.')
vasPusSnkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 8, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vasPusSnkIndex.setStatus('current')
if mibBuilder.loadTexts: vasPusSnkIndex.setDescription('An index that uniquely identifies the push sink in the table.')
vasPusSnkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 8, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSnkRowStatus.setStatus('current')
if mibBuilder.loadTexts: vasPusSnkRowStatus.setDescription('See SNMPv2-TC. Use vasPusSnkAdminStatus to activate and de-activate an Push sink. The following values are supported: active(1). The object always reads active. createAndGo(4). A new conceptual row is created representing a new Push sink. To activate the Push sink, set the administrative state to up(1) after all columnar objects have been set. destroy(6). The Push sink is deleted. It can be deleted regardless of its operational state.')
vasPusSnkName = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 8, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPusSnkName.setStatus('current')
if mibBuilder.loadTexts: vasPusSnkName.setDescription('A textual name of the Push sink. The name is automatically assigned by the system. The last part of the name is the index in this table.')
vasPusSnkPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 8, 1, 4), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSnkPurpose.setStatus('current')
if mibBuilder.loadTexts: vasPusSnkPurpose.setDescription('A text that can describe the purpose of the Push sink. This is for administrative use.')
vasPusSnkAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSnkAdminStatus.setStatus('current')
if mibBuilder.loadTexts: vasPusSnkAdminStatus.setDescription('The administrative state of the Push sink. The value controls the desired state of the Push sink. up(1). The Push sink shall be enabled. down(2). The Push sink shall be disabled.')
vasPusSnkOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPusSnkOperStatus.setStatus('current')
if mibBuilder.loadTexts: vasPusSnkOperStatus.setDescription('The operational state of the Push sink. The value normally follow the state of the administrative state. up(1). The Push sink is up and operational. down(2). The Push sink is not operational, either because its administrative state is down, or because of an error. If it is down because of an error, an alarm should be raised and the vasPusSnkFailure should describe the fault.')
vasPusSnkFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 8, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPusSnkFailure.setStatus('current')
if mibBuilder.loadTexts: vasPusSnkFailure.setDescription('A string describing the configuration or error status of the object. The string is the empty string if the configuration is correct and no error is present, otherwise it contains a message describing the error.')
vasPusSnkLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 8, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPusSnkLastChanged.setStatus('current')
if mibBuilder.loadTexts: vasPusSnkLastChanged.setDescription('The value of sysUpTime when status or configuration of the objects was last changed.')
vasPusSnkConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 8, 1, 9), VasConnectionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPusSnkConnectionStatus.setStatus('current')
if mibBuilder.loadTexts: vasPusSnkConnectionStatus.setDescription('The status of the stream transport connection.')
vasPusSnkResetStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 8, 1, 10), VasResetStatistics()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vasPusSnkResetStatistics.setStatus('current')
if mibBuilder.loadTexts: vasPusSnkResetStatistics.setDescription('Resets all statistics counters for the object. (Not yet implemented).')
vasPusSnkStatsTrsp = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 8, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPusSnkStatsTrsp.setStatus('current')
if mibBuilder.loadTexts: vasPusSnkStatsTrsp.setDescription('Index for an entry in statistics vasTrspStatisticsTable table for this object.')
vasPusSnkStatsTr101 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 8, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPusSnkStatsTr101.setStatus('current')
if mibBuilder.loadTexts: vasPusSnkStatsTr101.setDescription('Index for an entry in ETSI TR 101 290 statistics table for this object. (The table is not yet defined).')
vasPusSnkEnableTr101 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 8, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSnkEnableTr101.setStatus('current')
if mibBuilder.loadTexts: vasPusSnkEnableTr101.setDescription('Enables or disables ETSI TR 101 290 statistics collection.')
vasPusSnkRemoteInetType = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 8, 1, 14), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPusSnkRemoteInetType.setStatus('current')
if mibBuilder.loadTexts: vasPusSnkRemoteInetType.setDescription('Format of vasPusSnkRemoteInetAddress.')
vasPusSnkRemoteInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 8, 1, 15), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPusSnkRemoteInetAddress.setStatus('current')
if mibBuilder.loadTexts: vasPusSnkRemoteInetAddress.setDescription("The IP address of the remote host from where the transport stream is received. The value is empty and the vasPusSnkRemoteInetType is `unknown' when a stream is not received.")
vasPusSnkStreamId = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 8, 1, 16), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSnkStreamId.setStatus('current')
if mibBuilder.loadTexts: vasPusSnkStreamId.setDescription('Specifies the stream ID of the stream on the remote host that shall be received. The stream ID is a string that identifies the transport stream in all nodes where the stream exists. This must be unique within a node for any given transport stream.')
vasPusSnkPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 8, 1, 17), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSnkPassword.setStatus('current')
if mibBuilder.loadTexts: vasPusSnkPassword.setDescription('The password to use for the received transport stream. The password must match the vasPusSrcPassword set on the source at the remote host.')
vasUdpStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 1), )
if mibBuilder.loadTexts: vasUdpStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: vasUdpStatisticsTable.setDescription('The conceptual table contains perforamance data and counters for UDP video streams.')
vasUdpStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 1, 1), ).setIndexNames((0, "NETI-VAS-MIB", "vasUdpStsIndex"))
if mibBuilder.loadTexts: vasUdpStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: vasUdpStatisticsEntry.setDescription('An entry in the conceptual table represents statistical data for one UDP object.')
vasUdpStsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vasUdpStsIndex.setStatus('current')
if mibBuilder.loadTexts: vasUdpStsIndex.setDescription('Index in the table.')
vasUdpStsOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 1, 1, 2), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasUdpStsOwner.setStatus('current')
if mibBuilder.loadTexts: vasUdpStsOwner.setDescription('Reference to the object that allocated and uses this conceptual row.')
vasUdpStsBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasUdpStsBitrate.setStatus('current')
if mibBuilder.loadTexts: vasUdpStsBitrate.setDescription('Bitrate in bps.')
vasTrspStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2), )
if mibBuilder.loadTexts: vasTrspStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: vasTrspStatisticsTable.setDescription('The conceptual table contains perforamance data and counters for transport streams.')
vasTrspStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1), ).setIndexNames((0, "NETI-VAS-MIB", "vasTrspIndex"))
if mibBuilder.loadTexts: vasTrspStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: vasTrspStatisticsEntry.setDescription('An entry in the conceptual table represents statistical data for one transport stream.')
vasTrspIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vasTrspIndex.setStatus('current')
if mibBuilder.loadTexts: vasTrspIndex.setDescription('Index in table.')
vasTrspOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 2), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspOwner.setStatus('current')
if mibBuilder.loadTexts: vasTrspOwner.setDescription('Reference to the object that allocated and uses this conceptual row.')
vasTrspLastConnectionChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspLastConnectionChange.setStatus('current')
if mibBuilder.loadTexts: vasTrspLastConnectionChange.setDescription('Last connection status change time.')
vasTrspConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspConnects.setStatus('current')
if mibBuilder.loadTexts: vasTrspConnects.setDescription("Number of times that the connection state has changed to `connected'.")
vasTrspDisconnects = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspDisconnects.setStatus('current')
if mibBuilder.loadTexts: vasTrspDisconnects.setDescription("Number of times that the connection state has changed to `disconnected'.")
vasTrspNetRecvBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspNetRecvBitrate.setStatus('current')
if mibBuilder.loadTexts: vasTrspNetRecvBitrate.setDescription('Receive bitrate in kbps.')
vasTrspNetRecvBurstLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspNetRecvBurstLoss.setStatus('current')
if mibBuilder.loadTexts: vasTrspNetRecvBurstLoss.setDescription('Maximum number of packets that have been lost in a single burst error.')
vasTrspNetRecvOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspNetRecvOctets.setStatus('current')
if mibBuilder.loadTexts: vasTrspNetRecvOctets.setDescription('The number of received octets.')
vasTrspNetRecvLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspNetRecvLatency.setStatus('current')
if mibBuilder.loadTexts: vasTrspNetRecvLatency.setDescription('Latency used for error correction, in milliseconds (ms).')
vasTrspNetRecvDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspNetRecvDropped.setStatus('current')
if mibBuilder.loadTexts: vasTrspNetRecvDropped.setDescription('Number of packets dropped by the network.')
vasTrspNetRecvJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspNetRecvJitter.setStatus('current')
if mibBuilder.loadTexts: vasTrspNetRecvJitter.setDescription('Input jitter in milliseconds (ms).')
vasTrspNetRecvJitterRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspNetRecvJitterRatio.setStatus('current')
if mibBuilder.loadTexts: vasTrspNetRecvJitterRatio.setDescription('Jitter ratio, for rate controlled streams.')
vasTrspNetRecvOutOfOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspNetRecvOutOfOrder.setStatus('current')
if mibBuilder.loadTexts: vasTrspNetRecvOutOfOrder.setDescription('Number of packets received out of order.')
vasTrspNetRecvOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspNetRecvOverflows.setStatus('current')
if mibBuilder.loadTexts: vasTrspNetRecvOverflows.setDescription('Number of input jitter buffer overflows.')
vasTrspNetRecvPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspNetRecvPackets.setStatus('current')
if mibBuilder.loadTexts: vasTrspNetRecvPackets.setDescription('Total number of received packets.')
vasTrspNetRecvPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspNetRecvPacketRate.setStatus('current')
if mibBuilder.loadTexts: vasTrspNetRecvPacketRate.setDescription('Received packets per second.')
vasTrspNetRecvPacketLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspNetRecvPacketLoss.setStatus('current')
if mibBuilder.loadTexts: vasTrspNetRecvPacketLoss.setDescription('Packet loss in millipercent (1/100,000)')
vasTrspArqRecvAlmostDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspArqRecvAlmostDropped.setStatus('current')
if mibBuilder.loadTexts: vasTrspArqRecvAlmostDropped.setDescription('Number of packets that required more than half latency to recover.')
vasTrspArqRecvBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspArqRecvBitrate.setStatus('current')
if mibBuilder.loadTexts: vasTrspArqRecvBitrate.setDescription('Bitrate of received retransmissions in kbps.')
vasTrspArqRecvDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspArqRecvDropped.setStatus('current')
if mibBuilder.loadTexts: vasTrspArqRecvDropped.setDescription('Number of packets not recovered by either retransmissions or Forward Error Correction (FEC).')
vasTrspArqRecvDuplicates = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspArqRecvDuplicates.setStatus('current')
if mibBuilder.loadTexts: vasTrspArqRecvDuplicates.setDescription('Number of duplicated retransmission packets.')
vasTrspArqRecvOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspArqRecvOverflows.setStatus('current')
if mibBuilder.loadTexts: vasTrspArqRecvOverflows.setDescription('Number of packets dropped because of retransmission buffer overflow.')
vasTrspArqRecvPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspArqRecvPackets.setStatus('current')
if mibBuilder.loadTexts: vasTrspArqRecvPackets.setDescription('Number of packets received by retransmission.')
vasTrspArqRecvRecovered = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspArqRecvRecovered.setStatus('current')
if mibBuilder.loadTexts: vasTrspArqRecvRecovered.setDescription('Number of packets recovered by retransmission.')
vasTrspArqRecvRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspArqRecvRequests.setStatus('current')
if mibBuilder.loadTexts: vasTrspArqRecvRequests.setDescription('Number of sent retransmission requests.')
vasTrspNetSendBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspNetSendBitrate.setStatus('current')
if mibBuilder.loadTexts: vasTrspNetSendBitrate.setDescription('The send bitrate in kbps.')
vasTrspNetSendOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspNetSendOctets.setStatus('current')
if mibBuilder.loadTexts: vasTrspNetSendOctets.setDescription('The number of sent octets.')
vasTrspNetSendLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspNetSendLimit.setStatus('current')
if mibBuilder.loadTexts: vasTrspNetSendLimit.setDescription('The current sending limit in packets per second.')
vasTrspNetSendPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspNetSendPackets.setStatus('current')
if mibBuilder.loadTexts: vasTrspNetSendPackets.setDescription('Total number of sent packets.')
vasTrspNetSendRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspNetSendRtt.setStatus('current')
if mibBuilder.loadTexts: vasTrspNetSendRtt.setDescription('The return-trip time, RTT, in milliseconds (ms).')
vasTrspNetSendErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspNetSendErrors.setStatus('current')
if mibBuilder.loadTexts: vasTrspNetSendErrors.setDescription('The number of packets failed to be sent.')
vasTrspArqSendBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspArqSendBitrate.setStatus('current')
if mibBuilder.loadTexts: vasTrspArqSendBitrate.setDescription('Bitrate of send retransmissions in kbps.')
vasTrspArqSendIgnored = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspArqSendIgnored.setStatus('current')
if mibBuilder.loadTexts: vasTrspArqSendIgnored.setDescription('Number of ignored too frequent retransmission requests.')
vasTrspArqSendMissed = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspArqSendMissed.setStatus('current')
if mibBuilder.loadTexts: vasTrspArqSendMissed.setDescription('Number of ignored too late retransmission requests.')
vasTrspArqSendPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspArqSendPacketRate.setStatus('current')
if mibBuilder.loadTexts: vasTrspArqSendPacketRate.setDescription('Retransmitted send packets per second.')
vasTrspArqSendPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspArqSendPackets.setStatus('current')
if mibBuilder.loadTexts: vasTrspArqSendPackets.setDescription('Number of packets sent by retransmission.')
vasTrspFecRecvBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspFecRecvBitrate.setStatus('current')
if mibBuilder.loadTexts: vasTrspFecRecvBitrate.setDescription('The Forward Error Correction (FEC) receive overhead bitrate in kbps.')
vasTrspFecRecvPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspFecRecvPacketRate.setStatus('current')
if mibBuilder.loadTexts: vasTrspFecRecvPacketRate.setDescription('The Forward Error Correction (FEC) receive packet rate in packets per second.')
vasTrspFecRecvPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspFecRecvPackets.setStatus('current')
if mibBuilder.loadTexts: vasTrspFecRecvPackets.setDescription('The number of received Forward Error Correction (FEC) packets')
vasTrspFecRecvRecovered = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspFecRecvRecovered.setStatus('current')
if mibBuilder.loadTexts: vasTrspFecRecvRecovered.setDescription('The number of packets recovered by Forward Error Correction (FEC).')
vasTrspFecSendBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspFecSendBitrate.setStatus('current')
if mibBuilder.loadTexts: vasTrspFecSendBitrate.setDescription('The Forward Error Correction (FEC) send bitrate in kbps.')
vasTrspFecSendPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 42), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspFecSendPacketRate.setStatus('current')
if mibBuilder.loadTexts: vasTrspFecSendPacketRate.setDescription('The Forward Error Correction (FEC) receive packet rate in packets per second.')
vasTrspFecSendPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspFecSendPackets.setStatus('current')
if mibBuilder.loadTexts: vasTrspFecSendPackets.setDescription('The number of sent Forward Error Correction (FEC) packets.')
mibBuilder.exportSymbols("NETI-VAS-MIB", vasDecPipeDecryptKey=vasDecPipeDecryptKey, vasUdpStsIndex=vasUdpStsIndex, vasUdpStsBitrate=vasUdpStsBitrate, vasUdpSnkRemoteInetType=vasUdpSnkRemoteInetType, vasPusSrcPurpose=vasPusSrcPurpose, vasIfOperStatus=vasIfOperStatus, vasUdpSnkEntry=vasUdpSnkEntry, vasPulSnkRetransmitBuffer=vasPulSnkRetransmitBuffer, vasTrspStatisticsTable=vasTrspStatisticsTable, vasTrspNetRecvJitter=vasTrspNetRecvJitter, vasPulSnkName=vasPulSnkName, vasPulSrcStatsTrsp=vasPulSrcStatsTrsp, vasUdpSrcStatsUdp=vasUdpSrcStatsUdp, vasPusSnkRemoteInetAddress=vasPusSnkRemoteInetAddress, vasUdpSnkAdminStatus=vasUdpSnkAdminStatus, vasPusSnkTable=vasPusSnkTable, vasTrspNetRecvOutOfOrder=vasTrspNetRecvOutOfOrder, vasUdpSnkCipher=vasUdpSnkCipher, vasEncPipeStatsTr101=vasEncPipeStatsTr101, vasTrspArqSendPacketRate=vasTrspArqSendPacketRate, vasUdpSrcTtl=vasUdpSrcTtl, vasPulSnkAdminStatus=vasPulSnkAdminStatus, vasUdpSnkConnectionStatus=vasUdpSnkConnectionStatus, vasUdpSrcOperStatus=vasUdpSrcOperStatus, vasPulSnkLastChanged=vasPulSnkLastChanged, vasIfTable=vasIfTable, vasEncPipeLastChanged=vasEncPipeLastChanged, vasUdpStatisticsTable=vasUdpStatisticsTable, vasUdpSnkIndex=vasUdpSnkIndex, vasPulSrcLastChanged=vasPulSrcLastChanged, vasPusSrcTable=vasPusSrcTable, vasUdpStatisticsEntry=vasUdpStatisticsEntry, vasUdpSrcLocalIfAddress=vasUdpSrcLocalIfAddress, vasPulSrcOperStatus=vasPulSrcOperStatus, vasTrspNetRecvOverflows=vasTrspNetRecvOverflows, vasPulSnkOperStatus=vasPulSnkOperStatus, vasTrspNetRecvPackets=vasTrspNetRecvPackets, vasUdpSnkResetStatistics=vasUdpSnkResetStatistics, vasPusSrcRemoteHostAddress2=vasPusSrcRemoteHostAddress2, vasUdpSnkFailure=vasUdpSnkFailure, vasPulSnkFecLatency=vasPulSnkFecLatency, vasPulSnkRemoteHostType2=vasPulSnkRemoteHostType2, vasTrspFecRecvPacketRate=vasTrspFecRecvPacketRate, vasMpuSrcFailure=vasMpuSrcFailure, vasDecPipeEntry=vasDecPipeEntry, vasPulSnkFecMaxOverhead=vasPulSnkFecMaxOverhead, vasPulSnkStatsTr101=vasPulSnkStatsTr101, vasDecPipeRowStatus=vasDecPipeRowStatus, vasTrspNetSendErrors=vasTrspNetSendErrors, vasTrspFecSendPacketRate=vasTrspFecSendPacketRate, vasTrspFecRecvBitrate=vasTrspFecRecvBitrate, vasUdpSrcDontFragment=vasUdpSrcDontFragment, vasTrspNetRecvOctets=vasTrspNetRecvOctets, vasEncPipeProcessedFrames=vasEncPipeProcessedFrames, vasPusSrcFecLatency=vasPusSrcFecLatency, vasDecPipeCurrentTsBitrate=vasDecPipeCurrentTsBitrate, vasIfInputFrom=vasIfInputFrom, vasIfLastChanged=vasIfLastChanged, vasIfName=vasIfName, vasEncPipePurpose=vasEncPipePurpose, vasPulSrcStreamId=vasPulSrcStreamId, vasPulSnkPurpose=vasPulSnkPurpose, vasTrspArqRecvRequests=vasTrspArqRecvRequests, vasUdpSrcLocalPort=vasUdpSrcLocalPort, vasPusSrcAdminStatus=vasPusSrcAdminStatus, vasPusSnkOperStatus=vasPusSnkOperStatus, vasUdpSrcPurpose=vasUdpSrcPurpose, vasMpuSrcOperStatus=vasMpuSrcOperStatus, vasPulSnkRemoteHostAddress=vasPulSnkRemoteHostAddress, vasStreamPort=vasStreamPort, vasPusSnkStreamId=vasPusSnkStreamId, vasDecPipeProcessedFrames=vasDecPipeProcessedFrames, vasPusSnkRowStatus=vasPusSnkRowStatus, vasEncPipeAdminStatus=vasEncPipeAdminStatus, vasPusSnkLastChanged=vasPusSnkLastChanged, vasMpuSrcStreamId=vasMpuSrcStreamId, vasPulSrcResetStatistics=vasPulSrcResetStatistics, vasMpuSrcRowStatus=vasMpuSrcRowStatus, vasMpuSrcIndex=vasMpuSrcIndex, vasMpuSrcInputFrom=vasMpuSrcInputFrom, vasPusSrcRemoteInetType=vasPusSrcRemoteInetType, vasTrspNetRecvPacketLoss=vasTrspNetRecvPacketLoss, vasTrspArqSendMissed=vasTrspArqSendMissed, vasEncPipeCurrentTsBitrate=vasEncPipeCurrentTsBitrate, vasUdpSrcFailure=vasUdpSrcFailure, vasPusSnkName=vasPusSnkName, vasTrspNetRecvJitterRatio=vasTrspNetRecvJitterRatio, vasPusSrcOperStatus=vasPusSrcOperStatus, vasInterfaceGroup=vasInterfaceGroup, vasTrspArqSendBitrate=vasTrspArqSendBitrate, vasEncPipeCipher=vasEncPipeCipher, vasPusSnkPassword=vasPusSnkPassword, vasUdpSnkEnableTr101=vasUdpSnkEnableTr101, vasTrspArqRecvAlmostDropped=vasTrspArqRecvAlmostDropped, vasDecPipeLastChanged=vasDecPipeLastChanged, vasIfEntry=vasIfEntry, vasPulSnkTable=vasPulSnkTable, vasUdpSrcAdminStatus=vasUdpSrcAdminStatus, vasPulSnkIndex=vasPulSnkIndex, vasPulSnkPassword=vasPulSnkPassword, vasPusSnkResetStatistics=vasPusSnkResetStatistics, vasPulSnkRowStatus=vasPulSnkRowStatus, vasUdpSnkPurpose=vasUdpSnkPurpose, vasPusSnkStatsTrsp=vasPusSnkStatsTrsp, vasTrspArqSendPackets=vasTrspArqSendPackets, vasDecPipeName=vasDecPipeName, vasPulSrcPassword=vasPulSrcPassword, vasPusSrcInputFrom=vasPusSrcInputFrom, vasPusSnkEnableTr101=vasPusSnkEnableTr101, vasPulSrcRowStatus=vasPulSrcRowStatus, vasPusSnkEntry=vasPusSnkEntry, vasDecPipeVideoBitrate=vasDecPipeVideoBitrate, vasTrspFecRecvPackets=vasTrspFecRecvPackets, vasTrspLastConnectionChange=vasTrspLastConnectionChange, vasTrspNetSendPackets=vasTrspNetSendPackets, vasTrspFecSendBitrate=vasTrspFecSendBitrate, vasPulSnkRemoteHostAddress2=vasPulSnkRemoteHostAddress2, vasIfIndex=vasIfIndex, vasPusSrcPassword=vasPusSrcPassword, vasPulSrcIndex=vasPulSrcIndex, vasEncPipeEncryptKey=vasEncPipeEncryptKey, vasMpuSrcLastChanged=vasMpuSrcLastChanged, vasTrspConnects=vasTrspConnects, vasEncPipeFailure=vasEncPipeFailure, vasUdpSnkLastChanged=vasUdpSnkLastChanged, vasUdpSnkName=vasUdpSnkName, vasPulSnkEntry=vasPulSnkEntry, PYSNMP_MODULE_ID=netiVasMIB, vasPulSrcPurpose=vasPulSrcPurpose, vasUdpSrcResetStatistics=vasUdpSrcResetStatistics, vasPusSrcName=vasPusSrcName, vasPusSrcRemoteHostAddress=vasPusSrcRemoteHostAddress, vasTrspStatisticsEntry=vasTrspStatisticsEntry, vasTrspNetSendOctets=vasTrspNetSendOctets, vasUdpSrcEntry=vasUdpSrcEntry, vasTrspArqRecvRecovered=vasTrspArqRecvRecovered, vasPulSnkFecOptimize=vasPulSnkFecOptimize, vasTrspArqRecvBitrate=vasTrspArqRecvBitrate, VasConnectionStatus=VasConnectionStatus, vasUdpSnkTable=vasUdpSnkTable, vasUdpSnkMcastIpType=vasUdpSnkMcastIpType, vasIfPurpose=vasIfPurpose, netinsight=netinsight, vasUdpSrcInputFrom=vasUdpSrcInputFrom, vasPusSrcRemoteInetAddress=vasPusSrcRemoteInetAddress, vasDecPipeResetStatistics=vasDecPipeResetStatistics, vasDecPipeTable=vasDecPipeTable, vasStatisticsGroup=vasStatisticsGroup, vasEncoderPipeGroup=vasEncoderPipeGroup, vasUdpSrcDecryptKey=vasUdpSrcDecryptKey, vasPulSrcFailure=vasPulSrcFailure, vasPulSrcRemoteInetAddress=vasPulSrcRemoteInetAddress, vasPusSrcRemoteHostType=vasPusSrcRemoteHostType, vasTrspOwner=vasTrspOwner, vasUdpSrcConnectionStatus=vasUdpSrcConnectionStatus, vasPusSrcStatsTrsp=vasPusSrcStatsTrsp, vasPusSrcLocalIfAddress=vasPusSrcLocalIfAddress, vasPulSnkRemotePort=vasPulSnkRemotePort, VasResetStatistics=VasResetStatistics, vasTransportsGroup=vasTransportsGroup, vasEncPipeEntry=vasEncPipeEntry, vasDecoderPipeGroup=vasDecoderPipeGroup, vasUdpSnkStatsUdp=vasUdpSnkStatsUdp, vasUdpSnkSsmSourceIp=vasUdpSnkSsmSourceIp, vasUdpStsOwner=vasUdpStsOwner, vasEncPipeEnableTr101=vasEncPipeEnableTr101, vasTrspFecRecvRecovered=vasTrspFecRecvRecovered, vasPulSnkConnectionStatus=vasPulSnkConnectionStatus, vasIfAdminStatus=vasIfAdminStatus, vasUdpSrcLastChanged=vasUdpSrcLastChanged, vasPusSnkAdminStatus=vasPusSnkAdminStatus, vasUdpSnkLocalIfType=vasUdpSnkLocalIfType, vasMpuSrcAdminStatus=vasMpuSrcAdminStatus, vasIfFailure=vasIfFailure, vasMpuSrcPurpose=vasMpuSrcPurpose, vasUdpSrcRemoteHostAddress=vasUdpSrcRemoteHostAddress, vasTrspNetSendBitrate=vasTrspNetSendBitrate, vasUdpSrcRowStatus=vasUdpSrcRowStatus, vasUdpSrcCipher=vasUdpSrcCipher, vasMpuSrcName=vasMpuSrcName, vasUdpSnkRowStatus=vasUdpSnkRowStatus, vasPusSrcRowStatus=vasPusSrcRowStatus, vasPusSrcLastChanged=vasPusSrcLastChanged, vasPusSrcConnectionStatus=vasPusSrcConnectionStatus, vasTrspDisconnects=vasTrspDisconnects, vasUdpSnkLocalPort=vasUdpSnkLocalPort, vasMpuSrcEntry=vasMpuSrcEntry, vasPulSnkRemoteHostType=vasPulSnkRemoteHostType, netiGeneric=netiGeneric, vasMpuSrcTable=vasMpuSrcTable, vasTrspNetRecvLatency=vasTrspNetRecvLatency, vasPulSrcName=vasPulSrcName, vasIfResetStatistics=vasIfResetStatistics, vasIfActiveFormat=vasIfActiveFormat, vasPusSrcFailure=vasPusSrcFailure, vasTrspArqRecvOverflows=vasTrspArqRecvOverflows, vasUdpSrcName=vasUdpSrcName, vasPusSrcEntry=vasPusSrcEntry, vasPusSrcRemotePort=vasPusSrcRemotePort, vasPusSnkRemoteInetType=vasPusSnkRemoteInetType, vasEncPipeResetStatistics=vasEncPipeResetStatistics, vasTrspNetRecvDropped=vasTrspNetRecvDropped, vasEncPipeTable=vasEncPipeTable, vasEncPipeRowStatus=vasEncPipeRowStatus, netiVasMIB=netiVasMIB, vasPusSrcFecOptimize=vasPusSrcFecOptimize, vasUdpSrcIndex=vasUdpSrcIndex, vasPulSrcAdminStatus=vasPulSrcAdminStatus, vasPulSrcInputFrom=vasPulSrcInputFrom, vasPusSrcFecMaxOverhead=vasPusSrcFecMaxOverhead, vasUdpSnkLocalIfAddress=vasUdpSnkLocalIfAddress, vasPusSrcRemoteHostType2=vasPusSrcRemoteHostType2, vasPulSnkRemoteInetAddress=vasPulSnkRemoteInetAddress, vasTrspNetSendRtt=vasTrspNetSendRtt, vasTrspNetRecvPacketRate=vasTrspNetRecvPacketRate, vasPulSrcEntry=vasPulSrcEntry, vasIfPortMode=vasIfPortMode, vasEncPipeIndex=vasEncPipeIndex, vasDecPipePurpose=vasDecPipePurpose, vasPusSrcRetransmitBuffer=vasPusSrcRetransmitBuffer, vasPusSnkStatsTr101=vasPusSnkStatsTr101, vasPulSrcRemoteInetType=vasPulSrcRemoteInetType, vasTrspArqRecvPackets=vasTrspArqRecvPackets, vasDecPipeCipher=vasDecPipeCipher, vasUdpSnkMcastIp=vasUdpSnkMcastIp, vasUdpSnkRemoteInetAddress=vasUdpSnkRemoteInetAddress, vasPulSnkFailure=vasPulSnkFailure, vasDecPipeOperStatus=vasDecPipeOperStatus, vasPulSnkRemoteInetType=vasPulSnkRemoteInetType, vasEncPipeOperStatus=vasEncPipeOperStatus, vasPulSnkStreamId=vasPulSnkStreamId, vasTrspFecSendPackets=vasTrspFecSendPackets, vasUdpSnkEncryptKey=vasUdpSnkEncryptKey, vasTrspNetRecvBitrate=vasTrspNetRecvBitrate, vasEncPipeVideoBitrate=vasEncPipeVideoBitrate, vasTrspArqSendIgnored=vasTrspArqSendIgnored, vasPulSrcTable=vasPulSrcTable, vasUdpSrcTable=vasUdpSrcTable, vasTrspArqRecvDropped=vasTrspArqRecvDropped, vasDecPipeAdminStatus=vasDecPipeAdminStatus, vasTrspArqRecvDuplicates=vasTrspArqRecvDuplicates, vasDecPipeIndex=vasDecPipeIndex, vasEncPipeName=vasEncPipeName, vasPusSrcStreamId=vasPusSrcStreamId, vasPulSrcRemoteId=vasPulSrcRemoteId, vasTrspNetRecvBurstLoss=vasTrspNetRecvBurstLoss, vasDecPipeInputFrom=vasDecPipeInputFrom, vasUdpSnkStatsTr101=vasUdpSnkStatsTr101, vasPusSrcIndex=vasPusSrcIndex, vasEncPipeInputFrom=vasEncPipeInputFrom, vasDecPipeFailure=vasDecPipeFailure, vasPusSnkConnectionStatus=vasPusSnkConnectionStatus, vasPusSrcLocalIfType=vasPusSrcLocalIfType, vasPusSnkPurpose=vasPusSnkPurpose)
mibBuilder.exportSymbols("NETI-VAS-MIB", vasTrspIndex=vasTrspIndex, vasPusSnkIndex=vasPusSnkIndex, vasPulSrcConnectionStatus=vasPulSrcConnectionStatus, VasCipher=VasCipher, vasPulSnkEnableTr101=vasPulSnkEnableTr101, vasUdpSrcLocalIfType=vasUdpSrcLocalIfType, VasVideoFormat=VasVideoFormat, vasPulSnkResetStatistics=vasPulSnkResetStatistics, vasUdpSnkCompress=vasUdpSnkCompress, vasUdpSrcRemotePort=vasUdpSrcRemotePort, vasUdpSrcRemoteHostType=vasUdpSrcRemoteHostType, vasUdpSnkOperStatus=vasUdpSnkOperStatus, vasTrspNetSendLimit=vasTrspNetSendLimit, vasPusSnkFailure=vasPusSnkFailure, vasPulSnkStatsTrsp=vasPulSnkStatsTrsp, vasPusSrcResetStatistics=vasPusSrcResetStatistics)
