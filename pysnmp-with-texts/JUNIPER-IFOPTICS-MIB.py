#
# PySNMP MIB module JUNIPER-IFOPTICS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-IFOPTICS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:59:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ifDescr, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifDescr", "ifIndex")
jnxOpticsNotifications, jnxOpticsMibRoot = mibBuilder.importSymbols("JUNIPER-SMI", "jnxOpticsNotifications", "jnxOpticsMibRoot")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Counter64, ObjectIdentity, iso, MibIdentifier, NotificationType, Bits, Counter32, IpAddress, ModuleIdentity, Integer32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter64", "ObjectIdentity", "iso", "MibIdentifier", "NotificationType", "Bits", "Counter32", "IpAddress", "ModuleIdentity", "Integer32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32")
DateAndTime, TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TextualConvention", "TruthValue", "DisplayString")
jnxIfOpticsMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1))
jnxIfOpticsMib.setRevisions(('2012-01-26 00:00', '2012-01-26 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxIfOpticsMib.setRevisionsDescriptions(('Added Optics Config, Alarms and PM data.', 'Initial revision.',))
if mibBuilder.loadTexts: jnxIfOpticsMib.setLastUpdated('201201261414Z')
if mibBuilder.loadTexts: jnxIfOpticsMib.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxIfOpticsMib.setContactInfo(' Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxIfOpticsMib.setDescription('This MIB module defines objects used for managing the Optics interface for Juniper products.')
class JnxOpticsLocation(TextualConvention, Integer32):
    description = ' Near End or Far End '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("jnxNearEnd", 1), ("jnxFarEnd", 2))

class JnxOpticsDirection(TextualConvention, Integer32):
    description = ' Indicates the direction as Rx/Tx or bi-directional.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("jnxTxDir", 1), ("jnxRxDir", 2), ("jnxBiDir", 3))

class JnxOpticsSeverity(TextualConvention, Integer32):
    description = ' Severity of the Notification'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("jnxCritical", 1), ("jnxMajor", 2), ("jnxMinor", 3), ("jnxInfo", 4))

class JnxOpticsServiceStateAction(TextualConvention, Integer32):
    description = " Notification's action on the service state"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("jnxNotSupported", 0), ("jnxNonServiceAffecting", 1), ("jnxServiceAffecting", 2))

class JnxOpticsChannelSpacing(TextualConvention, Integer32):
    description = 'Channel spacing 1 - 100 Ghz 2 - 50 GHz 3 - 25 GHz 4 - 12.5 GHz 5 - 6.25 Ghz '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("spacing100Ghz", 1), ("spacing50Ghz", 2), ("spacing25Ghz", 3), ("spacing12point5Ghz", 4), ("spacing6point5Ghz", 5))

class JnxOpticsNotificationId(TextualConvention, Integer32):
    description = 'Optic alarm types'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43))
    namedValues = NamedValues(("jnxOpticsLOS", 1), ("jnxOpticsWavelenthLockErr", 2), ("jnxOpticsPowerHighAlarm", 3), ("jnxOpticsPowerLowAlarm", 4), ("jnxOpticsBiasCurrentHighAlarm", 5), ("jnxOpticsBiasCurrentLowAlarm", 6), ("jnxOpticsTemperatureHighAlarm", 7), ("jnxOpticsTemperaturelowAlarm", 8), ("jnxOpticsTxPLLLockAlarm", 9), ("jnxOpticsRxPLLLockAlarm", 10), ("jnxOpticsAvgPowerAlarm", 11), ("jnxOpticsRxLossAvgPowerAlarm", 12), ("jnxOpticsLossofACPowerAlarm", 13), ("jnxOpticsTxPowerHighThreshAlert", 14), ("jnxOpticsTxPowerLowThreshAlert", 15), ("jnxOpticsRxPowerHighThreshAlert", 16), ("jnxOpticsRxPowerLowThreshAlert", 17), ("jnxOpticsModuleTempHighThreshAlert", 18), ("jnxOpticsModuleTempLowThreshAlert", 19), ("jnxOptics24HourTxPowerHighThreshAlert", 20), ("jnxOptics24HourTxPowerLowThreshAlert", 21), ("jnxOptics24HourRxPowerHighThreshAlert", 22), ("jnxOptics24HourRxPowerLowThreshAlert", 23), ("jnxOptics24HourModuleTempHighThreshAlert", 24), ("jnxOptics24HourModuleTempLowThreshAlert", 25), ("jnxOpticsRxPowerHighAlarm", 26), ("jnxOpticsRxPowerLowAlarm", 27), ("jnxOpticsTxPowerHighWarning", 28), ("jnxOpticsTxPowerLowWarning", 29), ("jnxOpticsRxPowerHighWarning", 30), ("jnxOpticsRxPowerLowWarning", 31), ("jnxOpticsModuleTempHighWarning", 32), ("jnxOpticsModuleTempLowWarning", 33), ("jnxOpticsRxCarrierFreqHigh", 34), ("jnxOpticsRxCarrierFreqLow", 35), ("jnxOpticsChromaticDispHighWarning", 36), ("jnxOpticsChromaticDispLowWarning", 37), ("jnxOpticsQLowWarning", 38), ("jnxOpticsOSNRLowWarning", 39), ("jnxOpticsCarrierFreqHighAlert", 40), ("jnxOpticsCarrierFreqLowAlert", 41), ("jnxOptics24HourCarrierFreqHighAlert", 42), ("jnxOptics24HourCarrierFreqLowAlert", 43))

jnxOptics = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1))
jnxOpticsPerformanceMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2))
jnxOpticsAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 3))
jnxOpticsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1), )
if mibBuilder.loadTexts: jnxOpticsConfigTable.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsConfigTable.setDescription('Information about the optics config Table. ')
jnxOpticsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1), ).setIndexNames((0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsConfigContainerIndex"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsConfigL1Index"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsConfigL2Index"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsConfigL3Index"))
if mibBuilder.loadTexts: jnxOpticsConfigEntry.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsConfigEntry.setDescription('A conceptual row that contains information about the optics config Table.')
jnxOpticsConfigContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxOpticsConfigContainerIndex.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsConfigContainerIndex.setDescription('The associated jnxContentsContainerIndex - eg shelf..')
jnxOpticsConfigL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxOpticsConfigL1Index.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsConfigL1Index.setDescription('The level one index associated with this subject ... eg fpc slot.')
jnxOpticsConfigL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxOpticsConfigL2Index.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsConfigL2Index.setDescription('The level two index associated with this subject .. eg pic slot.')
jnxOpticsConfigL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxOpticsConfigL3Index.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsConfigL3Index.setDescription('The level three index associated with this subject.. eg port.')
jnxOpticsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOpticsType.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsType.setDescription(' 0 - none 1 - SFP 2 - XFP 3 - SFP+ 4 - XFP+ 5 - CFP 6 - CFP+ 7 - Non pluggable ')
jnxLaserEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxLaserEnable.setStatus('current')
if mibBuilder.loadTexts: jnxLaserEnable.setDescription(' 0 - laser off 1 - laser on ')
jnxWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 7), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxWavelength.setStatus('current')
if mibBuilder.loadTexts: jnxWavelength.setDescription('The transmit wavelength of the laser.')
jnxSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 8), JnxOpticsChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSpacing.setStatus('current')
if mibBuilder.loadTexts: jnxSpacing.setDescription('A minimum nominal difference in frequency (GHz) between two adjacent channels.')
jnxModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxModulation.setStatus('current')
if mibBuilder.loadTexts: jnxModulation.setDescription('Modulation Unknown - (1), NonPSK - (2), ODB - (3), DPSK - (4), QPSK - (5), DQPSK - (6), DPQPSK - (7), 16QAM - (8), 64QAM - (9), 256QAM - (10) ')
jnxTxOpticalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 10), Integer32()).setUnits('0.01 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxTxOpticalPower.setStatus('current')
if mibBuilder.loadTexts: jnxTxOpticalPower.setDescription('Transmit optical power.')
jnxRxOpticalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 11), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRxOpticalPower.setStatus('current')
if mibBuilder.loadTexts: jnxRxOpticalPower.setDescription('Receive optical power.')
jnxModuleTempHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 12), Integer32()).setUnits('Celsius (0.01 degrees C)').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxModuleTempHighThresh.setStatus('current')
if mibBuilder.loadTexts: jnxModuleTempHighThresh.setDescription('High module temerature in degree fahrenheit for a 15 minute period above which a Threshold Crossing Alert (TCA) should be sent. Only one TCA will be sent per period .')
jnxModuleTempLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 13), Integer32()).setUnits('Celsius (0.01 degrees C)').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxModuleTempLowThresh.setStatus('current')
if mibBuilder.loadTexts: jnxModuleTempLowThresh.setDescription('Low module temerature in degree fahrenheit for a 15 minute period above which a Threshold Crossing Alert (TCA) should be sent. Only one TCA will be sent per period .')
jnxTxPowerHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 14), Integer32()).setUnits('0.01 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxTxPowerHighThresh.setStatus('current')
if mibBuilder.loadTexts: jnxTxPowerHighThresh.setDescription('Tx power for a 15 minute period above which a Threshold Crossing Alert (TCA) should be sent. Only one TCA will be sent per period .')
jnxTxPowerLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 15), Integer32()).setUnits('0.01 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxTxPowerLowThresh.setStatus('current')
if mibBuilder.loadTexts: jnxTxPowerLowThresh.setDescription('Tx Power for a 15 minute period below which a Threshold Crossing Alert (TCA) should be sent. Only one TCA will be sent per period .')
jnxRxPowerHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 16), Integer32()).setUnits('0.01 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxRxPowerHighThresh.setStatus('current')
if mibBuilder.loadTexts: jnxRxPowerHighThresh.setDescription('Rx power for a 15 minute period above which a Threshold Crossing Alert (TCA) should be sent. Only one TCA will be sent per period .')
jnxRxPowerLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 17), Integer32()).setUnits('0.01 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxRxPowerLowThresh.setStatus('current')
if mibBuilder.loadTexts: jnxRxPowerLowThresh.setDescription('Rx Power for a 15 minute period below which a Threshold Crossing Alert (TCA) should be sent. Only one TCA will be sent per period .')
jnx24HourModuleTempHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 18), Integer32()).setUnits('Celsius (0.01 degrees C)').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnx24HourModuleTempHighThresh.setStatus('current')
if mibBuilder.loadTexts: jnx24HourModuleTempHighThresh.setDescription('High module temerature in degree fahrenheit for a 24 hour period above which a Threshold Crossing Alert (TCA) should be sent. Only one TCA will be sent per period .')
jnx24HourModuleTempLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 19), Integer32()).setUnits('Celsius (0.01 degrees C)').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnx24HourModuleTempLowThresh.setStatus('current')
if mibBuilder.loadTexts: jnx24HourModuleTempLowThresh.setDescription('Low module temerature in degree fahrenheit for a 24 hour period above which a Threshold Crossing Alert (TCA) should be sent. Only one TCA will be sent per period .')
jnx24HourTxPowerHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 20), Integer32()).setUnits('0.01 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnx24HourTxPowerHighThresh.setStatus('current')
if mibBuilder.loadTexts: jnx24HourTxPowerHighThresh.setDescription('Tx power for a 24 hour period above which a Threshold Crossing Alert (TCA) should be sent. Only one TCA will be sent per period .')
jnx24HourTxPowerLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 21), Integer32()).setUnits('0.01 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnx24HourTxPowerLowThresh.setStatus('current')
if mibBuilder.loadTexts: jnx24HourTxPowerLowThresh.setDescription('Tx for a 24 hour period Power below which a Threshold Crossing Alert (TCA) should be sent. Only one TCA will be sent per period .')
jnx24HourRxPowerHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 22), Integer32()).setUnits('0.01 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnx24HourRxPowerHighThresh.setStatus('current')
if mibBuilder.loadTexts: jnx24HourRxPowerHighThresh.setDescription('Rx power for a 24 hour period above which a Threshold Crossing Alert (TCA) should be sent. Only one TCA will be sent per period .')
jnx24HourRxPowerLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 23), Integer32()).setUnits('0.01 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnx24HourRxPowerLowThresh.setStatus('current')
if mibBuilder.loadTexts: jnx24HourRxPowerLowThresh.setDescription('Rx Power for a 24 hour period below which a Threshold Crossing Alert (TCA) should be sent. Only one TCA will be sent per period .')
jnxRxLosPowerWarningThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 24), Integer32()).setUnits('0.01 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxRxLosPowerWarningThresh.setStatus('current')
if mibBuilder.loadTexts: jnxRxLosPowerWarningThresh.setDescription('Rx Power warning threshold for seeting the optical LOS warning. ')
jnxRxLosPowerAlarmThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 25), Integer32()).setUnits('0.01 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxRxLosPowerAlarmThresh.setStatus('current')
if mibBuilder.loadTexts: jnxRxLosPowerAlarmThresh.setDescription('Rx Power alarm threshold for seeting the optical LOS warning. ')
jnxOpticsCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 26), Bits().clone(namedValues=NamedValues(("opticalLos", 1), ("wavelenthLockErr", 2), ("powerHighAlarm", 3), ("powerLowAlarm", 4), ("biasCurrentHighAlarm", 5), ("biasCurrentLowAlarm", 6), ("temperatureHighAlarm", 7), ("temperaturelowAlarm", 8), ("txPLLLockAlarm", 9), ("rxPLLLockAlarm", 10), ("avgPowerAlarm", 11), ("rxLossAvgPowerAlarm", 12), ("lossofACPowerAlarm", 13), ("txPowerHighThreshAlert", 14), ("txPowerLowThreshAlert", 15), ("rxPowerHighThreshAlert", 16), ("rxPowerLowThreshAlert", 17), ("moduleTempHighThreshAlert", 18), ("moduleTempLowThreshAlert", 19), ("txPowerHigh24HourThreshAlert", 20), ("txPowerLow24HourThreshAlert", 21), ("rxPowerHigh24HourThreshAlert", 22), ("rxPowerLow24HourThreshAlert", 23), ("moduleTempHigh24HourThreshAlert", 24), ("moduleTempLow24HourThreshAlert", 25), ("powerRxHighAlarm", 26), ("powerRxLowAlarm", 27), ("powerTxHighWarning", 28), ("powerTxLowWarning", 29), ("powerRxHighWarning", 30), ("powerRxLowWarning", 31), ("temperatureHighWarning", 32), ("temperaturelowWarning", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOpticsCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsCurrentStatus.setDescription(' ')
jnxTxPowerHighEnableTCA = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 27), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxTxPowerHighEnableTCA.setStatus('current')
if mibBuilder.loadTexts: jnxTxPowerHighEnableTCA.setDescription(' Enable/Disable for the Tx Power High TCA.')
jnxTxPowerLowEnableTCA = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 28), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxTxPowerLowEnableTCA.setStatus('current')
if mibBuilder.loadTexts: jnxTxPowerLowEnableTCA.setDescription(' Enable/Disable for the Tx Power Low TCA.')
jnxRxPowerHighEnableTCA = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 29), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxRxPowerHighEnableTCA.setStatus('current')
if mibBuilder.loadTexts: jnxRxPowerHighEnableTCA.setDescription(' Enable/Disable for the Rx Power High TCA.')
jnxRxPowerLowEnableTCA = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 30), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxRxPowerLowEnableTCA.setStatus('current')
if mibBuilder.loadTexts: jnxRxPowerLowEnableTCA.setDescription(' Enable/Disable for the Rx Power Low TCA.')
jnxModuleTempHighEnableTCA = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 31), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxModuleTempHighEnableTCA.setStatus('current')
if mibBuilder.loadTexts: jnxModuleTempHighEnableTCA.setDescription(' Enable/Disable for the Module Temp High TCA.')
jnxModuleTempLowEnableTCA = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 32), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxModuleTempLowEnableTCA.setStatus('current')
if mibBuilder.loadTexts: jnxModuleTempLowEnableTCA.setDescription(' Enable/Disable for the Module Temp Low TCA.')
jnxCarFreqOffsetHighEnableTCA = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 33), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxCarFreqOffsetHighEnableTCA.setStatus('current')
if mibBuilder.loadTexts: jnxCarFreqOffsetHighEnableTCA.setDescription(' Enable/Disable for the Carrier Frequency Offset High TCA.')
jnxCarFreqOffsetLowEnableTCA = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 34), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxCarFreqOffsetLowEnableTCA.setStatus('current')
if mibBuilder.loadTexts: jnxCarFreqOffsetLowEnableTCA.setDescription(" Enable/Disable for the CarrierFreqOffetLow TCA's.")
jnxCarFreqOffsetHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 35), Integer32()).setUnits('MHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxCarFreqOffsetHighThresh.setStatus('current')
if mibBuilder.loadTexts: jnxCarFreqOffsetHighThresh.setDescription('Carrier frequency offset for a 15 minute period above which a Threshold Crossing Alert (TCA) should be sent. Only one TCA will be sent per period .')
jnx24HourCarFreqOffsetHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 36), Integer32()).setUnits('MHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnx24HourCarFreqOffsetHighThresh.setStatus('current')
if mibBuilder.loadTexts: jnx24HourCarFreqOffsetHighThresh.setDescription('Carrier frequency offset for a 24 Hour period above which a Threshold Crossing Alert (TCA) should be sent. Only one TCA will be sent per period .')
jnxCarFreqOffsetLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 37), Integer32()).setUnits('MHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxCarFreqOffsetLowThresh.setStatus('current')
if mibBuilder.loadTexts: jnxCarFreqOffsetLowThresh.setDescription('Carrier frequency offset for a 15 minute period Low which a Threshold Crossing Alert (TCA) should be sent. Only one TCA will be sent per period .')
jnx24HourCarFreqOffsetLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 1, 1, 38), Integer32()).setUnits('MHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnx24HourCarFreqOffsetLowThresh.setStatus('current')
if mibBuilder.loadTexts: jnx24HourCarFreqOffsetLowThresh.setDescription('Carrier frequency offset for a 24 Hour period Low which a Threshold Crossing Alert (TCA) should be sent. Only one TCA will be sent per period .')
jnxOpticsTraceToneCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 2), )
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgTable.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgTable.setDescription('Information about the optics tests.')
jnxOpticsTraceToneCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 2, 1), ).setIndexNames((0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsTraceToneCfgContainerIndex"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsTraceToneCfgL1Index"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsTraceToneCfgL2Index"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsTraceToneCfgL3Index"))
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgEntry.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgEntry.setDescription("Information about the optics FRU's.")
jnxOpticsTraceToneCfgContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgContainerIndex.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgContainerIndex.setDescription('The associated jnxContentsContainerIndex - eg shelf..')
jnxOpticsTraceToneCfgL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgL1Index.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgL1Index.setDescription('The level one index associated with this subject ... eg fpc slot.')
jnxOpticsTraceToneCfgL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgL2Index.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgL2Index.setDescription('The level two index associated with this subject .. eg pic slot.')
jnxOpticsTraceToneCfgL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgL3Index.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgL3Index.setDescription('The level three index associated with this subject.. eg port.')
jnxOpticsTraceToneCfgTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 2, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgTxEnable.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgTxEnable.setDescription('This will enable/disable the transmit Trace tone feature.')
jnxOpticsTraceToneCfgRxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 2, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgRxEnable.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgRxEnable.setDescription('This will enable/disable the receive Trace tone feature.')
jnxOpticsTraceToneCfgDestId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 2, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgDestId.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgDestId.setDescription('This is the destination Id of the link ID/ the chassis and the blade. The transmit messages will also have the src id which is this chassis id and this port info.')
jnxOpticsTraceToneCfgTxMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 2, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgTxMsg.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgTxMsg.setDescription('This will be the transmit data in the tracetone message.')
jnxOpticsTraceToneCfgRxMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 2, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgRxMsg.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsTraceToneCfgRxMsg.setDescription('This will be the receive data in the trace tone message.')
jnxOpticsNotificationTrigDefaultHoldtimeUp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsNotificationTrigDefaultHoldtimeUp.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsNotificationTrigDefaultHoldtimeUp.setDescription(' This object will indicate the time (ms) for the defect to persist before it is declared an alarm. ')
jnxOpticsNotificationTrigDefaultHoldtimeDown = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsNotificationTrigDefaultHoldtimeDown.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsNotificationTrigDefaultHoldtimeDown.setDescription(' This object will indicate the time (ms) for the defect to absent before the alarm is cleared. ')
jnxOpticsNotificationTrigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 5), )
if mibBuilder.loadTexts: jnxOpticsNotificationTrigTable.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsNotificationTrigTable.setDescription('Information about the otn Alarm/Alart/Info trigger table. ')
jnxOpticsNotificationTrigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 5, 1), ).setIndexNames((0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationTrigContainerIndex"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationTrigL1Index"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationTrigL2Index"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationTrigL3Index"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationTrigAlmId"))
if mibBuilder.loadTexts: jnxOpticsNotificationTrigEntry.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsNotificationTrigEntry.setDescription('A conceptual row that contains information about the Otn Alarm Trigger Table. ')
jnxOpticsNotificationTrigContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxOpticsNotificationTrigContainerIndex.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsNotificationTrigContainerIndex.setDescription('The associated jnxContentsContainerIndex - eg shelf.')
jnxOpticsNotificationTrigL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxOpticsNotificationTrigL1Index.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsNotificationTrigL1Index.setDescription('The level one index associated with this subject ... eg fpc slot.')
jnxOpticsNotificationTrigL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxOpticsNotificationTrigL2Index.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsNotificationTrigL2Index.setDescription('The level two index associated with this subject .. eg pic slot.')
jnxOpticsNotificationTrigL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxOpticsNotificationTrigL3Index.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsNotificationTrigL3Index.setDescription('The level three index associated with this subject.. eg port. ')
jnxOpticsNotificationTrigAlmId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 5, 1, 5), JnxOpticsNotificationId())
if mibBuilder.loadTexts: jnxOpticsNotificationTrigAlmId.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsNotificationTrigAlmId.setDescription(' This will be the type of Alarm as defined by JnxOpticsNotificationId ')
jnxOpticsNotificationTrigSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 5, 1, 6), JnxOpticsSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsNotificationTrigSeverity.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsNotificationTrigSeverity.setDescription(' This will be the Severity of the Notification. ')
jnxOpticsNotificationTrigIgnore = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 5, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsNotificationTrigIgnore.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsNotificationTrigIgnore.setDescription(' This object will ignore the alarm when set. ')
jnxOpticsNotificationTrigHoldtimeUp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsNotificationTrigHoldtimeUp.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsNotificationTrigHoldtimeUp.setDescription(' This object will indicate the time (ms) for the defect to persist before it is declared an alarm. ')
jnxOpticsNotificationTrigHoldtimeDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsNotificationTrigHoldtimeDown.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsNotificationTrigHoldtimeDown.setDescription(' This object will indicate the time (ms) the defect is absent before the alarm is cleared. ')
jnxOpticsTrigServiceStateAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 5, 1, 10), JnxOpticsServiceStateAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOpticsTrigServiceStateAction.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsTrigServiceStateAction.setDescription(' This will indicate whether this alarm is service affecting or not . ')
jnxOpticsPMCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1), )
if mibBuilder.loadTexts: jnxOpticsPMCurrentTable.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsPMCurrentTable.setDescription('A table of current PM entries.')
jnxOpticsPMCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxOpticsPMCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsPMCurrentEntry.setDescription('A conceptual row that contains information about the PM Current Table.')
jnxPMCurChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 1), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurChromaticDispersion.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurChromaticDispersion.setDescription('Residual Chromatic Dispersion measured at Rx Transceiver port')
jnxPMCurDiffGroupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 2), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurDiffGroupDelay.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurDiffGroupDelay.setDescription('Differential group delay ')
jnxPMCurPolarizationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 3), Integer32()).setUnits('rad/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurPolarizationState.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurPolarizationState.setDescription(' Polarization state ')
jnxPMCurPolarDepLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 4), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurPolarDepLoss.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurPolarDepLoss.setDescription('The polarisation dependent loss (PDL) is the difference (in dB) between the maximum and minimum values of the channel insertion loss (or gain) of the black-link from point SS to RS due to a variation of the state of polarization (SOP) over all SOPs')
jnxPMCurQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 5), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurQ.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurQ.setDescription("'Q' factor estimated at Rx Transceiver port ")
jnxPMCurSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 6), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurSNR.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurSNR.setDescription('SNR - signal to noise ratio')
jnxPMCurTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 7), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurTxOutputPower.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurTxOutputPower.setDescription('TxOutputPower - transmit output power ')
jnxPMCurRxInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 8), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurRxInputPower.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurRxInputPower.setDescription('RxInputPower - receive output power')
jnxPMCurMinChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 9), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMinChromaticDispersion.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurMinChromaticDispersion.setDescription('Min Residual Chromatic Dispersion measured at Rx Transceiver port')
jnxPMCurMaxChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 10), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMaxChromaticDispersion.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurMaxChromaticDispersion.setDescription('Max Residual Chromatic Dispersion measured at Rx Transceiver port')
jnxPMCurAvgChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 11), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurAvgChromaticDispersion.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurAvgChromaticDispersion.setDescription('Average Residual Chromatic Dispersion measured at Rx Transceiver port')
jnxPMCurMinDiffGroupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 12), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMinDiffGroupDelay.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurMinDiffGroupDelay.setDescription('Min Differential group delay ')
jnxPMCurMaxDiffGroupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 13), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMaxDiffGroupDelay.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurMaxDiffGroupDelay.setDescription('Max Differential group delay ')
jnxPMCurAvgDiffGroupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 14), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurAvgDiffGroupDelay.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurAvgDiffGroupDelay.setDescription('Average Differential group delay ')
jnxPMCurMinPolarState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 15), Integer32()).setUnits('rad/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMinPolarState.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurMinPolarState.setDescription('Min Polarization state ')
jnxPMCurMaxPolarState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 16), Integer32()).setUnits('rad/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMaxPolarState.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurMaxPolarState.setDescription('Max Polarization state ')
jnxPMCurAvgPolarState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 17), Integer32()).setUnits('rad/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurAvgPolarState.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurAvgPolarState.setDescription('Avg Polarization state ')
jnxPMCurMinPolarDepLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 18), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMinPolarDepLoss.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurMinPolarDepLoss.setDescription('Min - The polarisation dependent loss (PDL)')
jnxPMCurMaxPolarDepLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 19), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMaxPolarDepLoss.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurMaxPolarDepLoss.setDescription('Max - The polarisation dependent loss (PDL)')
jnxPMCurAvgPolarDepLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 20), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurAvgPolarDepLoss.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurAvgPolarDepLoss.setDescription('Avg - The polarisation dependent loss (PDL)')
jnxPMCurMinQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 21), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMinQ.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurMinQ.setDescription("Min 'Q' factor estimated at Rx Transceiver port ")
jnxPMCurMaxQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 22), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMaxQ.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurMaxQ.setDescription("Max 'Q' factor estimated at Rx Transceiver port ")
jnxPMCurAvgQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 23), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurAvgQ.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurAvgQ.setDescription("Avg 'Q' factor estimated at Rx Transceiver port ")
jnxPMCurMinSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 24), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMinSNR.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurMinSNR.setDescription('Min SNR - signal to noise ratio')
jnxPMCurMaxSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 25), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMaxSNR.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurMaxSNR.setDescription('Max SNR - signal to noise ratio')
jnxPMCurAvgSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 26), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurAvgSNR.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurAvgSNR.setDescription('Avg SNR - signal to noise ratio')
jnxPMCurMinTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 27), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMinTxOutputPower.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurMinTxOutputPower.setDescription('Min TxOutputPower - transmit output power ')
jnxPMCurMaxTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 28), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMaxTxOutputPower.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurMaxTxOutputPower.setDescription('Max TxOutputPower - transmit output power ')
jnxPMCurAvgTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 29), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurAvgTxOutputPower.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurAvgTxOutputPower.setDescription('Avg TxOutputPower - transmit output power ')
jnxPMCurMinRxInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 30), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMinRxInputPower.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurMinRxInputPower.setDescription('Min RxInputPower - receive output power')
jnxPMCurMaxRxInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 31), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMaxRxInputPower.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurMaxRxInputPower.setDescription('Max RxInputPower - receive output power')
jnxPMCurAvgRxInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 32), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurAvgRxInputPower.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurAvgRxInputPower.setDescription('Avg RxInputPower - receive output power')
jnxPMCurSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 33), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurSuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurSuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
jnxPMCurSuspectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurSuspectReason.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurSuspectReason.setDescription('If SuspectedFlag is true, the reson for the PM data being suspect. 0 - not applicable 1 - unknown 2 - new object 3 - interface disabled 4 - clock shift detected 5 - cleared by user 6 - interval too short secs < 890 7 - interval too long secs > 910 8 - near end unavailable 9 - far end unavailable 10 - partial data 11 - missing intervals due to restarts ')
jnxPMCurTxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 35), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurTxLaserBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurTxLaserBiasCurrent.setDescription('Trasmit LaserBiasCurrent measured at Transceiver port')
jnxPMCurMinTxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 36), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMinTxLaserBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurMinTxLaserBiasCurrent.setDescription('Minimum trasmit LaserBiasCurrent measured at Transceiver port')
jnxPMCurMaxTxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 37), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMaxTxLaserBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurMaxTxLaserBiasCurrent.setDescription('Maximum trasmit LaserBiasCurrent measured at Transceiver port')
jnxPMCurAvgTxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 38), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurAvgTxLaserBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurAvgTxLaserBiasCurrent.setDescription('Average LaserBiasCurrent measured at Transceiver port')
jnxPMCurTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 39), Integer32()).setUnits('.1 Celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurTemperature.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurTemperature.setDescription('Temperature measured at Transceiver port')
jnxPMCurMinTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 40), Integer32()).setUnits('.1 Celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMinTemperature.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurMinTemperature.setDescription('Minimum Temperature measured at Transceiver port')
jnxPMCurMaxTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 41), Integer32()).setUnits('.1 Celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMaxTemperature.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurMaxTemperature.setDescription('Maximum Temperature measure at Transceiver port')
jnxPMCurAvgTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 42), Integer32()).setUnits('.1 Celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurAvgTemperature.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurAvgTemperature.setDescription('Average Temperature measure at Transceiver port')
jnxPMCurCarFreqOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 43), Integer32()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurCarFreqOffset.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurCarFreqOffset.setDescription('Carrier frequency offset measured at Transceiver port')
jnxPMCurMinCarFreqOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 44), Integer32()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMinCarFreqOffset.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurMinCarFreqOffset.setDescription('Minimum Carrier frequency offset measured at Transceiver port')
jnxPMCurMaxCarFreqOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 45), Integer32()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMaxCarFreqOffset.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurMaxCarFreqOffset.setDescription('Maximum Carrier frequency offset measured at Transceiver port')
jnxPMCurAvgCarFreqOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 46), Integer32()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurAvgCarFreqOffset.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurAvgCarFreqOffset.setDescription('Average Carrier frequency offset measured at Transceiver port')
jnxPMCurRxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 47), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurRxLaserBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurRxLaserBiasCurrent.setDescription('Received LaserBiasCurrent measured at Transceiver port')
jnxPMCurMinRxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 48), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMinRxLaserBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurMinRxLaserBiasCurrent.setDescription('Received Minimum LaserBiasCurrent measured at Transceiver port')
jnxPMCurMaxRxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 49), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurMaxRxLaserBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurMaxRxLaserBiasCurrent.setDescription('Received Maximum LaserBiasCurrent measured at Transceiver port')
jnxPMCurAvgRxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 1, 1, 50), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMCurAvgRxLaserBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: jnxPMCurAvgRxLaserBiasCurrent.setDescription('Received Average LaserBiasCurrent measured at Transceiver port')
jnxOpticsPMIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2), )
if mibBuilder.loadTexts: jnxOpticsPMIntervalTable.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsPMIntervalTable.setDescription('A table of current PM entries.')
jnxOpticsPMIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsPMIntervalNumber"))
if mibBuilder.loadTexts: jnxOpticsPMIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsPMIntervalEntry.setDescription('A conceptual row that contains information about the PM Interval Table.')
jnxOpticsPMIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: jnxOpticsPMIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsPMIntervalNumber.setDescription('This is the 15 mintute interavl number.')
jnxPMIntMinChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 2), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMinChromaticDispersion.setStatus('current')
if mibBuilder.loadTexts: jnxPMIntMinChromaticDispersion.setDescription('Residual Chromatic Dispersion measured at Rx Transceiver port - min in the 15 minute interval')
jnxPMIntMaxChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 3), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMaxChromaticDispersion.setStatus('current')
if mibBuilder.loadTexts: jnxPMIntMaxChromaticDispersion.setDescription('Residual Chromatic Dispersion measured at Rx Transceiver port - max in the 15 minute interval')
jnxPMIntAvgChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 4), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntAvgChromaticDispersion.setStatus('current')
if mibBuilder.loadTexts: jnxPMIntAvgChromaticDispersion.setDescription('Residual Chromatic Dispersion measured at Rx Transceiver port - average in the 15 minute interval')
jnxPMIntMinDiffGroupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 5), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMinDiffGroupDelay.setStatus('current')
if mibBuilder.loadTexts: jnxPMIntMinDiffGroupDelay.setDescription('Differential group delay measured at Rx Transceiver port -- min in the 15 minute interval')
jnxPMIntMaxDiffGroupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 6), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMaxDiffGroupDelay.setStatus('current')
if mibBuilder.loadTexts: jnxPMIntMaxDiffGroupDelay.setDescription('Differential group delay measured at Rx Transceiver port -- max in the 15 minute interval')
jnxPMIntAvgDiffGroupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 7), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntAvgDiffGroupDelay.setStatus('current')
if mibBuilder.loadTexts: jnxPMIntAvgDiffGroupDelay.setDescription('Differential group delay measured at Rx Transceiver port -- average in the 15 minute interval')
jnxPMIntMinPolarState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 8), Integer32()).setUnits('rad/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMinPolarState.setStatus('current')
if mibBuilder.loadTexts: jnxPMIntMinPolarState.setDescription('Polarization state -- min in the 15 minute interval')
jnxPMIntMaxPolarState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 9), Integer32()).setUnits('rad/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMaxPolarState.setStatus('current')
if mibBuilder.loadTexts: jnxPMIntMaxPolarState.setDescription('Polarization state -- max in the 15 minute interval')
jnxPMIntAvgPolarState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 10), Integer32()).setUnits('rad/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntAvgPolarState.setStatus('current')
if mibBuilder.loadTexts: jnxPMIntAvgPolarState.setDescription('Polarization state -- average in the 15 minute interval')
jnxPMIntMinPolarDependentLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 11), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMinPolarDependentLoss.setStatus('current')
if mibBuilder.loadTexts: jnxPMIntMinPolarDependentLoss.setDescription('Polarization Dependent Loss -- min in the 15 minute interval')
jnxPMIntMaxPolarDependentLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 12), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMaxPolarDependentLoss.setStatus('current')
if mibBuilder.loadTexts: jnxPMIntMaxPolarDependentLoss.setDescription('Polarization Dependent Loss -- max in the 15 minute interval')
jnxPMIntAvgPolarDependentLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 13), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntAvgPolarDependentLoss.setStatus('current')
if mibBuilder.loadTexts: jnxPMIntAvgPolarDependentLoss.setDescription('Polarization Dependent Loss -- average in the 15 minute interval')
jnxPMIntMinQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 14), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMinQ.setStatus('current')
if mibBuilder.loadTexts: jnxPMIntMinQ.setDescription('Q -- min in the 15 minute interval')
jnxPMIntMaxQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 15), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMaxQ.setStatus('current')
if mibBuilder.loadTexts: jnxPMIntMaxQ.setDescription('Q -- max in the 15 minute interval')
jnxPMIntAvgQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 16), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntAvgQ.setStatus('current')
if mibBuilder.loadTexts: jnxPMIntAvgQ.setDescription('Q -- Avg in the 15 minute interval')
jnxPMIntMinSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 17), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMinSNR.setStatus('current')
if mibBuilder.loadTexts: jnxPMIntMinSNR.setDescription('SNR -- min in the 15 minute interval')
jnxPMIntMaxSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 18), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMaxSNR.setStatus('current')
if mibBuilder.loadTexts: jnxPMIntMaxSNR.setDescription('SNR -- max in the 15 minute interval')
jnxPMIntAvgSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 19), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntAvgSNR.setStatus('current')
if mibBuilder.loadTexts: jnxPMIntAvgSNR.setDescription('SNR -- avg in the 15 minute interval')
jnxPMIntMinTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 20), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMinTxOutputPower.setStatus('current')
if mibBuilder.loadTexts: jnxPMIntMinTxOutputPower.setDescription('TxOutputPower -- min in the 15 minute interval')
jnxPMIntMaxTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 21), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMaxTxOutputPower.setStatus('current')
if mibBuilder.loadTexts: jnxPMIntMaxTxOutputPower.setDescription('TxOutputPower -- max in the 15 minute interval')
jnxPMIntAvgTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 22), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntAvgTxOutputPower.setStatus('current')
if mibBuilder.loadTexts: jnxPMIntAvgTxOutputPower.setDescription('TxOutputPower -- average in the 15 minute interval')
jnxPMIntMinRxInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 23), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMinRxInputPower.setStatus('current')
if mibBuilder.loadTexts: jnxPMIntMinRxInputPower.setDescription('RxInputPower -- min in the 15 minute interval')
jnxPMIntMaxRxInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 24), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMaxRxInputPower.setStatus('current')
if mibBuilder.loadTexts: jnxPMIntMaxRxInputPower.setDescription('RxInputPower -- max in the 15 minute interval')
jnxPMIntAvgRxInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 25), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntAvgRxInputPower.setStatus('current')
if mibBuilder.loadTexts: jnxPMIntAvgRxInputPower.setDescription('RxInputPower -- average in the 15 minute interval')
jnxPMIntTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 26), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntTimeStamp.setStatus('current')
if mibBuilder.loadTexts: jnxPMIntTimeStamp.setDescription('Time stamp PM interval')
jnxPMIntSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntSuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: jnxPMIntSuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
jnxPMIntSuspectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntSuspectReason.setStatus('current')
if mibBuilder.loadTexts: jnxPMIntSuspectReason.setDescription('If SuspectedFlag is true, the reson for the PM data being suspect. 0 - not applicable 1 - unknown 2 - new object 3 - interface disabled 4 - clock shift detected 5 - cleared by user 6 - interval too short secs < 890 7 - interval too long secs > 910 8 - near end unavailable 9 - far end unavailable 10 - partial data 11 - missing intervals due to restarts ')
jnxPMIntMinTxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 29), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMinTxLaserBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: jnxPMIntMinTxLaserBiasCurrent.setDescription('Transmit Minimum LaserBiasCurrent measured at Transceiver port')
jnxPMIntMaxTxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 30), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMaxTxLaserBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: jnxPMIntMaxTxLaserBiasCurrent.setDescription('Transmit Maximum LaserBiasCurrent measured at Transceiver port')
jnxPMIntAvgTxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 31), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntAvgTxLaserBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: jnxPMIntAvgTxLaserBiasCurrent.setDescription('Transmit Average LaserBiasCurrent measured at Transceiver port')
jnxPMIntMinTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 32), Integer32()).setUnits('.1 Celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMinTemperature.setStatus('current')
if mibBuilder.loadTexts: jnxPMIntMinTemperature.setDescription('Minimum Temperature measured at Transceiver port')
jnxPMIntMaxTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 33), Integer32()).setUnits('.1 Celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMaxTemperature.setStatus('current')
if mibBuilder.loadTexts: jnxPMIntMaxTemperature.setDescription('Maximum Temperature measure at Transceiver port')
jnxPMIntAvgTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 34), Integer32()).setUnits('.1 Celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntAvgTemperature.setStatus('current')
if mibBuilder.loadTexts: jnxPMIntAvgTemperature.setDescription('Average Temperature measure at Transceiver port')
jnxPMIntMinCarFreqOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 35), Integer32()).setUnits('Mhz').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMinCarFreqOffset.setStatus('current')
if mibBuilder.loadTexts: jnxPMIntMinCarFreqOffset.setDescription('Minimum Carrier frequency offset measured at Transceiver port')
jnxPMIntMaxCarFreqOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 36), Integer32()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMaxCarFreqOffset.setStatus('current')
if mibBuilder.loadTexts: jnxPMIntMaxCarFreqOffset.setDescription('Maximum Carrier frequency offset measured at Transceiver port')
jnxPMIntAvgCarFreqOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 37), Integer32()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntAvgCarFreqOffset.setStatus('current')
if mibBuilder.loadTexts: jnxPMIntAvgCarFreqOffset.setDescription('Average Carrier frequency offset measured at Transceiver port')
jnxPMIntMinRxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 38), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMinRxLaserBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: jnxPMIntMinRxLaserBiasCurrent.setDescription('Receive Minimum LaserBiasCurrent measured at Transceiver port')
jnxPMIntMaxRxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 39), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntMaxRxLaserBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: jnxPMIntMaxRxLaserBiasCurrent.setDescription('Receive Maximum LaserBiasCurrent measured at Transceiver port')
jnxPMIntAvgRxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 2, 1, 40), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMIntAvgRxLaserBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: jnxPMIntAvgRxLaserBiasCurrent.setDescription('Receive Average LaserBiasCurrent measured at Transceiver port')
jnxOpticsPMDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3), )
if mibBuilder.loadTexts: jnxOpticsPMDayTable.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsPMDayTable.setDescription('A table of current PM Day entries.')
jnxOpticsPMDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsPMDayIndex"))
if mibBuilder.loadTexts: jnxOpticsPMDayEntry.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsPMDayEntry.setDescription('A conceptual row that contains information about the PM Day Table')
jnxOpticsPMDayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: jnxOpticsPMDayIndex.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsPMDayIndex.setDescription('This is 1 - cur day/ 2 - prev day ')
jnxPMDayMinChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 2), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMinChromaticDispersion.setStatus('current')
if mibBuilder.loadTexts: jnxPMDayMinChromaticDispersion.setDescription('Residual Chromatic Dispersion measured at Rx Transceiver port - min in the day')
jnxPMDayMaxChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 3), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMaxChromaticDispersion.setStatus('current')
if mibBuilder.loadTexts: jnxPMDayMaxChromaticDispersion.setDescription('Residual Chromatic Dispersion measured at Rx Transceiver port - max in the day')
jnxPMDayAvgChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 4), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayAvgChromaticDispersion.setStatus('current')
if mibBuilder.loadTexts: jnxPMDayAvgChromaticDispersion.setDescription('Residual Chromatic Dispersion measured at Rx Transceiver port - average in the day')
jnxPMDayMinDiffGroupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 5), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMinDiffGroupDelay.setStatus('current')
if mibBuilder.loadTexts: jnxPMDayMinDiffGroupDelay.setDescription('Differential Group Delay measured at Rx Transceiver port -- min in the day')
jnxPMDayMaxDiffGroupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 6), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMaxDiffGroupDelay.setStatus('current')
if mibBuilder.loadTexts: jnxPMDayMaxDiffGroupDelay.setDescription('Differential Group Delay measured at Rx Transceiver port -- max in the day')
jnxPMDayAvgDiffGroupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 7), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayAvgDiffGroupDelay.setStatus('current')
if mibBuilder.loadTexts: jnxPMDayAvgDiffGroupDelay.setDescription('Differential Group Delay measured at Rx Transceiver port -- average in the day')
jnxPMDayMinPolarState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 8), Integer32()).setUnits('rad/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMinPolarState.setStatus('current')
if mibBuilder.loadTexts: jnxPMDayMinPolarState.setDescription('Polarization state -- min in the day')
jnxPMDayMaxPolarState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 9), Integer32()).setUnits('rad/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMaxPolarState.setStatus('current')
if mibBuilder.loadTexts: jnxPMDayMaxPolarState.setDescription('Polarization state -- max in the day')
jnxPMDayAvgPolarState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 10), Integer32()).setUnits('rad/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayAvgPolarState.setStatus('current')
if mibBuilder.loadTexts: jnxPMDayAvgPolarState.setDescription('Polarization state -- average in the day')
jnxPMDayMinPolarDependentLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 11), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMinPolarDependentLoss.setStatus('current')
if mibBuilder.loadTexts: jnxPMDayMinPolarDependentLoss.setDescription('Polarization Dependent Loss -- min in the day')
jnxPMDayMaxPolarDependentLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 12), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMaxPolarDependentLoss.setStatus('current')
if mibBuilder.loadTexts: jnxPMDayMaxPolarDependentLoss.setDescription('Polarization Dependent Loss -- max in the day')
jnxPMDayAvgPolarDependentLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 13), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayAvgPolarDependentLoss.setStatus('current')
if mibBuilder.loadTexts: jnxPMDayAvgPolarDependentLoss.setDescription('Polarization Dependent Loss -- average in the day interval')
jnxPMDayMinQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 14), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMinQ.setStatus('current')
if mibBuilder.loadTexts: jnxPMDayMinQ.setDescription('Q -- min in the day')
jnxPMDayMaxQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 15), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMaxQ.setStatus('current')
if mibBuilder.loadTexts: jnxPMDayMaxQ.setDescription('Q -- max in the day')
jnxPMDayAvgQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 16), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayAvgQ.setStatus('current')
if mibBuilder.loadTexts: jnxPMDayAvgQ.setDescription('Q -- Avg in the day')
jnxPMDayMinSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 17), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMinSNR.setStatus('current')
if mibBuilder.loadTexts: jnxPMDayMinSNR.setDescription('SNR -- min in the day')
jnxPMDayMaxSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 18), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMaxSNR.setStatus('current')
if mibBuilder.loadTexts: jnxPMDayMaxSNR.setDescription('SNR -- max in the day')
jnxPMDayAvgSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 19), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayAvgSNR.setStatus('current')
if mibBuilder.loadTexts: jnxPMDayAvgSNR.setDescription('SNR -- avg in the day')
jnxPMDayMinTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 20), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMinTxOutputPower.setStatus('current')
if mibBuilder.loadTexts: jnxPMDayMinTxOutputPower.setDescription('TxOutputPower -- min in the day')
jnxPMDayMaxTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 21), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMaxTxOutputPower.setStatus('current')
if mibBuilder.loadTexts: jnxPMDayMaxTxOutputPower.setDescription('TxOutputPower -- max in the day.')
jnxPMDayAvgTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 22), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayAvgTxOutputPower.setStatus('current')
if mibBuilder.loadTexts: jnxPMDayAvgTxOutputPower.setDescription('TxOutputPower -- average in the day.')
jnxPMDayMinRxInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 23), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMinRxInputPower.setStatus('current')
if mibBuilder.loadTexts: jnxPMDayMinRxInputPower.setDescription('RxInputPower -- min in the day.')
jnxPMDayMaxRxInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 24), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMaxRxInputPower.setStatus('current')
if mibBuilder.loadTexts: jnxPMDayMaxRxInputPower.setDescription('RxInputPower -- max in the day.')
jnxPMDayAvgRxInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 25), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayAvgRxInputPower.setStatus('current')
if mibBuilder.loadTexts: jnxPMDayAvgRxInputPower.setDescription('RxInputPower -- average in the day.')
jnxPMDayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 26), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: jnxPMDayTimeStamp.setDescription('Time for the Day.')
jnxPMDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDaySuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: jnxPMDaySuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
jnxPMDaySuspectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDaySuspectReason.setStatus('current')
if mibBuilder.loadTexts: jnxPMDaySuspectReason.setDescription('If SuspectedFlag is true, the reson for the PM data being suspect. 0 - not applicable 1 - unknown 2 - new object 3 - interface disabled 4 - clock shift detected 5 - cleared by user 6 - partial data 7 - one or more intervals are invaild ')
jnxPMDayMinTxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 29), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMinTxLaserBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: jnxPMDayMinTxLaserBiasCurrent.setDescription('Transmit LaserBiasCurrent measured at Transceiver port')
jnxPMDayMaxTxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 30), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMaxTxLaserBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: jnxPMDayMaxTxLaserBiasCurrent.setDescription('Transmit Minimum LaserBiasCurrent measured at Transceiver port')
jnxPMDayAvgTxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 31), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayAvgTxLaserBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: jnxPMDayAvgTxLaserBiasCurrent.setDescription('Transmit Maximum LaserBiasCurrent measured at Transceiver port')
jnxPMDayMinTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 32), Integer32()).setUnits('.1 Celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMinTemperature.setStatus('current')
if mibBuilder.loadTexts: jnxPMDayMinTemperature.setDescription('Minimum Temperature measured at Transceiver port')
jnxPMDayMaxTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 33), Integer32()).setUnits('.1 Celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMaxTemperature.setStatus('current')
if mibBuilder.loadTexts: jnxPMDayMaxTemperature.setDescription('Maximum Temperature measure at Transceiver port')
jnxPMDayAvgTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 34), Integer32()).setUnits('.1 Celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayAvgTemperature.setStatus('current')
if mibBuilder.loadTexts: jnxPMDayAvgTemperature.setDescription('Average Temperature measure at Transceiver port')
jnxPMDayMinCarFreqOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 35), Integer32()).setUnits('Mhz').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMinCarFreqOffset.setStatus('current')
if mibBuilder.loadTexts: jnxPMDayMinCarFreqOffset.setDescription('Minimum Carrier frequency offset measured at Transceiver port')
jnxPMDayMaxCarFreqOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 36), Integer32()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMaxCarFreqOffset.setStatus('current')
if mibBuilder.loadTexts: jnxPMDayMaxCarFreqOffset.setDescription('Maximum Carrier frequency offset measured at Transceiver port')
jnxPMDayAvgCarFreqOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 37), Integer32()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayAvgCarFreqOffset.setStatus('current')
if mibBuilder.loadTexts: jnxPMDayAvgCarFreqOffset.setDescription('Average Carrier frequency offset measured at Transceiver port')
jnxPMDayMinRxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 38), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMinRxLaserBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: jnxPMDayMinRxLaserBiasCurrent.setDescription('Receive LaserBiasCurrent measured at Transceiver port')
jnxPMDayMaxRxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 39), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayMaxRxLaserBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: jnxPMDayMaxRxLaserBiasCurrent.setDescription('Receive Minimum LaserBiasCurrent measured at Transceiver port')
jnxPMDayAvgRxLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 2, 3, 1, 40), Integer32()).setUnits('.1 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMDayAvgRxLaserBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: jnxPMDayAvgRxLaserBiasCurrent.setDescription('Receive Maximum LaserBiasCurrent measured at Transceiver port')
jnxOpticsNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 3, 1), )
if mibBuilder.loadTexts: jnxOpticsNotificationTable.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsNotificationTable.setDescription('A table of Notification entries.')
jnxOpticsNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationLocation"), (0, "JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationDirection"))
if mibBuilder.loadTexts: jnxOpticsNotificationEntry.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsNotificationEntry.setDescription('A conceptual entry in the Notification table.')
jnxOpticsNotificationLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 3, 1, 1, 1), JnxOpticsLocation()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxOpticsNotificationLocation.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsNotificationLocation.setDescription('The object identifies indicates if this entry was for Near end/Far end.')
jnxOpticsNotificationDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 3, 1, 1, 2), JnxOpticsDirection()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxOpticsNotificationDirection.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsNotificationDirection.setDescription('The object identifies indicates if this entry was for for the Tx/Rx or both.')
jnxOpticsLastNotificationId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 3, 1, 1, 3), JnxOpticsNotificationId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxOpticsLastNotificationId.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsLastNotificationId.setDescription('The object identifies the OTN alarm that most recently was set or cleared.')
jnxOpticsNotificationSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 3, 1, 1, 4), JnxOpticsSeverity()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxOpticsNotificationSeverity.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsNotificationSeverity.setDescription('The object identifies the severity of the last alarm/alert that most recently was set or cleared.')
jnxOpticsNotificationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 3, 1, 1, 5), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxOpticsNotificationDate.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsNotificationDate.setDescription('This specifies the date and time when this alarm occurred.')
jnxOpticsClearAllPMs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsClearAllPMs.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsClearAllPMs.setDescription(' To clear all optics Performance monitoring counters on all interfaces. ')
jnxOpticsClearIfPMsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 7), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxOpticsClearIfPMsTable.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsClearIfPMsTable.setDescription(' To clear optics Performance monitoring counters on this interfaces ')
jnxOpticsClearIfPMsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxOpticsClearIfPMsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsClearIfPMsEntry.setDescription('A conceptual row that s used to clear the Optics PM Table.')
jnxOpticsClearCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 7, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsClearCurrent.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsClearCurrent.setDescription(" 1- to clear all the Current Optics PM's for this interface ")
jnxOpticsClearInterfaceInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 7, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsClearInterfaceInterval.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsClearInterfaceInterval.setDescription(" 1- to clear all the Optics PM's intervals(1-96) for this interface ")
jnxOpticsClearInterfaceDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 7, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsClearInterfaceDay.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsClearInterfaceDay.setDescription(" 1 - to clear all the Current Day and Previous Day Optics PM's for this interface ")
jnxOpticsClearInterfaceAll = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 71, 1, 1, 7, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOpticsClearInterfaceAll.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsClearInterfaceAll.setDescription(" 1 - to clear all the Optics PM's for this interface ")
jnxOpticsNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 22, 0))
jnxOpticsNotificationSet = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 22, 0, 1)).setObjects(("JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationLocation"), ("JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationDirection"), ("IF-MIB", "ifDescr"), ("JUNIPER-IFOPTICS-MIB", "jnxOpticsLastNotificationId"), ("JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationSeverity"), ("JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationDate"))
if mibBuilder.loadTexts: jnxOpticsNotificationSet.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsNotificationSet.setDescription('Notification of a recently set optics alarm.')
jnxOpticsNotificationCleared = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 22, 0, 2)).setObjects(("JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationLocation"), ("JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationDirection"), ("IF-MIB", "ifDescr"), ("JUNIPER-IFOPTICS-MIB", "jnxOpticsLastNotificationId"), ("JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationSeverity"), ("JUNIPER-IFOPTICS-MIB", "jnxOpticsNotificationDate"))
if mibBuilder.loadTexts: jnxOpticsNotificationCleared.setStatus('current')
if mibBuilder.loadTexts: jnxOpticsNotificationCleared.setDescription('Notification of a recently cleared optics alarm.')
mibBuilder.exportSymbols("JUNIPER-IFOPTICS-MIB", jnxRxPowerLowEnableTCA=jnxRxPowerLowEnableTCA, jnxPMIntMinQ=jnxPMIntMinQ, jnxOpticsPMDayTable=jnxOpticsPMDayTable, jnxPMDayAvgCarFreqOffset=jnxPMDayAvgCarFreqOffset, jnx24HourModuleTempHighThresh=jnx24HourModuleTempHighThresh, jnxPMIntAvgDiffGroupDelay=jnxPMIntAvgDiffGroupDelay, jnxOpticsNotificationDate=jnxOpticsNotificationDate, jnxPMIntSuspectedFlag=jnxPMIntSuspectedFlag, jnxPMDayMinPolarDependentLoss=jnxPMDayMinPolarDependentLoss, jnxOpticsNotificationTrigHoldtimeUp=jnxOpticsNotificationTrigHoldtimeUp, jnxPMCurAvgTemperature=jnxPMCurAvgTemperature, jnxPMCurDiffGroupDelay=jnxPMCurDiffGroupDelay, jnxOpticsPMCurrentTable=jnxOpticsPMCurrentTable, jnxPMCurMinRxLaserBiasCurrent=jnxPMCurMinRxLaserBiasCurrent, jnxOpticsTraceToneCfgDestId=jnxOpticsTraceToneCfgDestId, jnx24HourRxPowerHighThresh=jnx24HourRxPowerHighThresh, jnxModuleTempHighEnableTCA=jnxModuleTempHighEnableTCA, jnxPMCurPolarDepLoss=jnxPMCurPolarDepLoss, jnxOpticsTraceToneCfgL1Index=jnxOpticsTraceToneCfgL1Index, jnxModulation=jnxModulation, jnxPMCurMaxQ=jnxPMCurMaxQ, jnxPMCurMinChromaticDispersion=jnxPMCurMinChromaticDispersion, jnxPMIntMaxTxOutputPower=jnxPMIntMaxTxOutputPower, jnxPMCurAvgDiffGroupDelay=jnxPMCurAvgDiffGroupDelay, jnxOpticsConfigEntry=jnxOpticsConfigEntry, jnxOpticsNotificationEntry=jnxOpticsNotificationEntry, jnxOpticsTraceToneCfgL3Index=jnxOpticsTraceToneCfgL3Index, jnxPMDayMaxCarFreqOffset=jnxPMDayMaxCarFreqOffset, jnxPMDayMinDiffGroupDelay=jnxPMDayMinDiffGroupDelay, jnxRxPowerLowThresh=jnxRxPowerLowThresh, jnxPMDayAvgChromaticDispersion=jnxPMDayAvgChromaticDispersion, jnxPMDayMaxTxLaserBiasCurrent=jnxPMDayMaxTxLaserBiasCurrent, JnxOpticsNotificationId=JnxOpticsNotificationId, jnxPMCurSuspectedFlag=jnxPMCurSuspectedFlag, jnxPMDayTimeStamp=jnxPMDayTimeStamp, jnxOpticsClearCurrent=jnxOpticsClearCurrent, jnxPMCurMaxCarFreqOffset=jnxPMCurMaxCarFreqOffset, jnxPMIntMaxQ=jnxPMIntMaxQ, jnxOpticsNotificationTrigTable=jnxOpticsNotificationTrigTable, jnxPMCurAvgTxLaserBiasCurrent=jnxPMCurAvgTxLaserBiasCurrent, jnxPMCurTxOutputPower=jnxPMCurTxOutputPower, jnxPMIntMaxCarFreqOffset=jnxPMIntMaxCarFreqOffset, jnxPMIntMinPolarDependentLoss=jnxPMIntMinPolarDependentLoss, jnxCarFreqOffsetLowEnableTCA=jnxCarFreqOffsetLowEnableTCA, jnxOpticsNotificationTrigSeverity=jnxOpticsNotificationTrigSeverity, jnxOpticsType=jnxOpticsType, jnxOpticsNotificationPrefix=jnxOpticsNotificationPrefix, jnxModuleTempHighThresh=jnxModuleTempHighThresh, jnxPMIntAvgRxLaserBiasCurrent=jnxPMIntAvgRxLaserBiasCurrent, jnxOpticsNotificationTrigHoldtimeDown=jnxOpticsNotificationTrigHoldtimeDown, jnxModuleTempLowEnableTCA=jnxModuleTempLowEnableTCA, jnxPMDayMaxChromaticDispersion=jnxPMDayMaxChromaticDispersion, jnxIfOpticsMib=jnxIfOpticsMib, jnxPMCurAvgSNR=jnxPMCurAvgSNR, jnxPMCurMinTxOutputPower=jnxPMCurMinTxOutputPower, jnxPMCurMaxChromaticDispersion=jnxPMCurMaxChromaticDispersion, jnxPMDayMaxTemperature=jnxPMDayMaxTemperature, jnxPMCurMaxRxInputPower=jnxPMCurMaxRxInputPower, jnxPMDayMaxTxOutputPower=jnxPMDayMaxTxOutputPower, jnxPMDayAvgRxInputPower=jnxPMDayAvgRxInputPower, jnxOpticsConfigContainerIndex=jnxOpticsConfigContainerIndex, jnxPMIntAvgTxLaserBiasCurrent=jnxPMIntAvgTxLaserBiasCurrent, jnxRxLosPowerWarningThresh=jnxRxLosPowerWarningThresh, jnxPMDayAvgRxLaserBiasCurrent=jnxPMDayAvgRxLaserBiasCurrent, JnxOpticsSeverity=JnxOpticsSeverity, jnxModuleTempLowThresh=jnxModuleTempLowThresh, jnxOpticsNotificationTrigL3Index=jnxOpticsNotificationTrigL3Index, jnxPMIntTimeStamp=jnxPMIntTimeStamp, jnxPMCurCarFreqOffset=jnxPMCurCarFreqOffset, jnxPMCurAvgRxInputPower=jnxPMCurAvgRxInputPower, jnxPMDayMinRxLaserBiasCurrent=jnxPMDayMinRxLaserBiasCurrent, JnxOpticsDirection=JnxOpticsDirection, jnxPMDayMinTxOutputPower=jnxPMDayMinTxOutputPower, jnxSpacing=jnxSpacing, jnxPMCurTxLaserBiasCurrent=jnxPMCurTxLaserBiasCurrent, jnxLaserEnable=jnxLaserEnable, jnxPMIntAvgQ=jnxPMIntAvgQ, jnxPMCurSNR=jnxPMCurSNR, jnxPMIntMaxChromaticDispersion=jnxPMIntMaxChromaticDispersion, jnxOpticsTraceToneCfgTable=jnxOpticsTraceToneCfgTable, jnxOpticsNotificationCleared=jnxOpticsNotificationCleared, jnxOpticsTraceToneCfgL2Index=jnxOpticsTraceToneCfgL2Index, jnxPMCurMaxRxLaserBiasCurrent=jnxPMCurMaxRxLaserBiasCurrent, jnxPMCurMinTemperature=jnxPMCurMinTemperature, jnxOpticsPerformanceMonitoring=jnxOpticsPerformanceMonitoring, jnxPMDaySuspectedFlag=jnxPMDaySuspectedFlag, jnxPMIntMinRxInputPower=jnxPMIntMinRxInputPower, jnxOpticsNotificationTrigL2Index=jnxOpticsNotificationTrigL2Index, jnxOpticsNotificationDirection=jnxOpticsNotificationDirection, jnxPMDayMinPolarState=jnxPMDayMinPolarState, jnxPMCurSuspectReason=jnxPMCurSuspectReason, jnxPMIntAvgChromaticDispersion=jnxPMIntAvgChromaticDispersion, jnxPMIntAvgTxOutputPower=jnxPMIntAvgTxOutputPower, jnxPMIntAvgCarFreqOffset=jnxPMIntAvgCarFreqOffset, jnxRxOpticalPower=jnxRxOpticalPower, jnxPMCurAvgQ=jnxPMCurAvgQ, jnxOpticsTraceToneCfgTxEnable=jnxOpticsTraceToneCfgTxEnable, jnxPMIntMinTxLaserBiasCurrent=jnxPMIntMinTxLaserBiasCurrent, jnxOpticsNotificationSeverity=jnxOpticsNotificationSeverity, jnxPMIntMaxRxLaserBiasCurrent=jnxPMIntMaxRxLaserBiasCurrent, jnxPMDayMaxSNR=jnxPMDayMaxSNR, jnxOpticsClearIfPMsTable=jnxOpticsClearIfPMsTable, jnxOpticsTraceToneCfgEntry=jnxOpticsTraceToneCfgEntry, jnxPMCurRxInputPower=jnxPMCurRxInputPower, jnxOpticsClearAllPMs=jnxOpticsClearAllPMs, jnxOpticsTraceToneCfgTxMsg=jnxOpticsTraceToneCfgTxMsg, jnxPMCurAvgChromaticDispersion=jnxPMCurAvgChromaticDispersion, jnxPMIntMaxTemperature=jnxPMIntMaxTemperature, jnxPMIntMinSNR=jnxPMIntMinSNR, JnxOpticsLocation=JnxOpticsLocation, jnxPMIntAvgTemperature=jnxPMIntAvgTemperature, jnxPMDayMaxQ=jnxPMDayMaxQ, jnxPMCurMaxPolarState=jnxPMCurMaxPolarState, jnxOpticsPMIntervalTable=jnxOpticsPMIntervalTable, jnxPMCurTemperature=jnxPMCurTemperature, jnxPMIntMaxSNR=jnxPMIntMaxSNR, jnxPMCurAvgTxOutputPower=jnxPMCurAvgTxOutputPower, jnxPMIntSuspectReason=jnxPMIntSuspectReason, jnxOpticsCurrentStatus=jnxOpticsCurrentStatus, jnxRxPowerHighEnableTCA=jnxRxPowerHighEnableTCA, jnxOpticsNotificationTrigIgnore=jnxOpticsNotificationTrigIgnore, jnx24HourTxPowerHighThresh=jnx24HourTxPowerHighThresh, jnxOpticsTrigServiceStateAction=jnxOpticsTrigServiceStateAction, JnxOpticsChannelSpacing=JnxOpticsChannelSpacing, jnxPMDayMinRxInputPower=jnxPMDayMinRxInputPower, jnxPMDayAvgTxOutputPower=jnxPMDayAvgTxOutputPower, jnxPMDayAvgQ=jnxPMDayAvgQ, jnxPMDayMaxRxLaserBiasCurrent=jnxPMDayMaxRxLaserBiasCurrent, jnxPMIntMaxDiffGroupDelay=jnxPMIntMaxDiffGroupDelay, jnxOpticsNotificationLocation=jnxOpticsNotificationLocation, jnxOpticsClearInterfaceInterval=jnxOpticsClearInterfaceInterval, jnxOpticsTraceToneCfgRxMsg=jnxOpticsTraceToneCfgRxMsg, jnxPMIntAvgPolarDependentLoss=jnxPMIntAvgPolarDependentLoss, jnxOpticsClearInterfaceDay=jnxOpticsClearInterfaceDay, PYSNMP_MODULE_ID=jnxIfOpticsMib, jnxPMDayAvgSNR=jnxPMDayAvgSNR, jnxOpticsLastNotificationId=jnxOpticsLastNotificationId, jnxOpticsConfigTable=jnxOpticsConfigTable, jnxPMDayMinTxLaserBiasCurrent=jnxPMDayMinTxLaserBiasCurrent, jnxPMCurAvgRxLaserBiasCurrent=jnxPMCurAvgRxLaserBiasCurrent, jnxPMCurMinTxLaserBiasCurrent=jnxPMCurMinTxLaserBiasCurrent, jnxOpticsNotificationTrigDefaultHoldtimeDown=jnxOpticsNotificationTrigDefaultHoldtimeDown, jnxPMIntAvgPolarState=jnxPMIntAvgPolarState, jnxOpticsPMDayIndex=jnxOpticsPMDayIndex, jnxPMDaySuspectReason=jnxPMDaySuspectReason, jnxPMCurMaxTxOutputPower=jnxPMCurMaxTxOutputPower, jnxCarFreqOffsetHighEnableTCA=jnxCarFreqOffsetHighEnableTCA, jnxPMCurMinPolarState=jnxPMCurMinPolarState, jnx24HourTxPowerLowThresh=jnx24HourTxPowerLowThresh, jnxPMDayMaxPolarState=jnxPMDayMaxPolarState, jnxPMIntMinRxLaserBiasCurrent=jnxPMIntMinRxLaserBiasCurrent, jnxPMDayMinTemperature=jnxPMDayMinTemperature, jnxPMDayMinSNR=jnxPMDayMinSNR, jnxPMIntMinTxOutputPower=jnxPMIntMinTxOutputPower, jnxOpticsNotificationTrigEntry=jnxOpticsNotificationTrigEntry, jnxPMDayMinCarFreqOffset=jnxPMDayMinCarFreqOffset, jnxPMDayAvgPolarState=jnxPMDayAvgPolarState, jnxPMDayMinQ=jnxPMDayMinQ, jnxPMCurAvgPolarState=jnxPMCurAvgPolarState, jnxPMIntMaxRxInputPower=jnxPMIntMaxRxInputPower, jnxOpticsConfigL2Index=jnxOpticsConfigL2Index, jnxTxPowerLowEnableTCA=jnxTxPowerLowEnableTCA, jnxPMCurAvgPolarDepLoss=jnxPMCurAvgPolarDepLoss, jnxPMDayAvgDiffGroupDelay=jnxPMDayAvgDiffGroupDelay, jnxOpticsNotificationTrigContainerIndex=jnxOpticsNotificationTrigContainerIndex, jnx24HourCarFreqOffsetHighThresh=jnx24HourCarFreqOffsetHighThresh, jnxPMCurQ=jnxPMCurQ, jnxPMDayAvgTemperature=jnxPMDayAvgTemperature, jnxWavelength=jnxWavelength, jnxCarFreqOffsetHighThresh=jnxCarFreqOffsetHighThresh, jnxTxPowerHighEnableTCA=jnxTxPowerHighEnableTCA, jnxCarFreqOffsetLowThresh=jnxCarFreqOffsetLowThresh, jnxOpticsNotificationTrigDefaultHoldtimeUp=jnxOpticsNotificationTrigDefaultHoldtimeUp, jnxPMIntMaxTxLaserBiasCurrent=jnxPMIntMaxTxLaserBiasCurrent, jnxPMIntMinDiffGroupDelay=jnxPMIntMinDiffGroupDelay, jnxOpticsNotificationSet=jnxOpticsNotificationSet, jnxOpticsAlarm=jnxOpticsAlarm, jnxPMCurMaxTemperature=jnxPMCurMaxTemperature, jnxOpticsNotificationTrigL1Index=jnxOpticsNotificationTrigL1Index, jnxPMCurMaxDiffGroupDelay=jnxPMCurMaxDiffGroupDelay, jnxPMIntMinChromaticDispersion=jnxPMIntMinChromaticDispersion, jnxPMDayMaxDiffGroupDelay=jnxPMDayMaxDiffGroupDelay, jnxRxPowerHighThresh=jnxRxPowerHighThresh, jnxPMIntAvgSNR=jnxPMIntAvgSNR, jnxPMCurChromaticDispersion=jnxPMCurChromaticDispersion, jnxOpticsNotificationTable=jnxOpticsNotificationTable, jnxPMIntMaxPolarState=jnxPMIntMaxPolarState, jnxPMCurMinDiffGroupDelay=jnxPMCurMinDiffGroupDelay, jnxPMDayAvgPolarDependentLoss=jnxPMDayAvgPolarDependentLoss, jnxOpticsPMCurrentEntry=jnxOpticsPMCurrentEntry, jnxPMCurPolarizationState=jnxPMCurPolarizationState, jnxOpticsTraceToneCfgRxEnable=jnxOpticsTraceToneCfgRxEnable, jnxOpticsPMIntervalNumber=jnxOpticsPMIntervalNumber, jnxPMDayMaxPolarDependentLoss=jnxPMDayMaxPolarDependentLoss, jnxPMIntMinTemperature=jnxPMIntMinTemperature, jnxOpticsNotificationTrigAlmId=jnxOpticsNotificationTrigAlmId, jnx24HourModuleTempLowThresh=jnx24HourModuleTempLowThresh, jnx24HourRxPowerLowThresh=jnx24HourRxPowerLowThresh, JnxOpticsServiceStateAction=JnxOpticsServiceStateAction, jnxPMDayAvgTxLaserBiasCurrent=jnxPMDayAvgTxLaserBiasCurrent, jnxPMCurMinCarFreqOffset=jnxPMCurMinCarFreqOffset, jnxOpticsConfigL3Index=jnxOpticsConfigL3Index, jnxPMDayMaxRxInputPower=jnxPMDayMaxRxInputPower, jnxPMCurMinSNR=jnxPMCurMinSNR, jnxOpticsTraceToneCfgContainerIndex=jnxOpticsTraceToneCfgContainerIndex, jnxOpticsPMDayEntry=jnxOpticsPMDayEntry, jnxTxOpticalPower=jnxTxOpticalPower, jnxPMCurRxLaserBiasCurrent=jnxPMCurRxLaserBiasCurrent, jnx24HourCarFreqOffsetLowThresh=jnx24HourCarFreqOffsetLowThresh, jnxOpticsConfigL1Index=jnxOpticsConfigL1Index, jnxOpticsPMIntervalEntry=jnxOpticsPMIntervalEntry, jnxPMCurMaxTxLaserBiasCurrent=jnxPMCurMaxTxLaserBiasCurrent, jnxOpticsClearInterfaceAll=jnxOpticsClearInterfaceAll, jnxTxPowerHighThresh=jnxTxPowerHighThresh, jnxPMCurMinRxInputPower=jnxPMCurMinRxInputPower, jnxPMIntMaxPolarDependentLoss=jnxPMIntMaxPolarDependentLoss, jnxTxPowerLowThresh=jnxTxPowerLowThresh, jnxPMCurMinQ=jnxPMCurMinQ, jnxPMCurAvgCarFreqOffset=jnxPMCurAvgCarFreqOffset, jnxPMCurMinPolarDepLoss=jnxPMCurMinPolarDepLoss, jnxRxLosPowerAlarmThresh=jnxRxLosPowerAlarmThresh, jnxPMDayMinChromaticDispersion=jnxPMDayMinChromaticDispersion, jnxPMIntAvgRxInputPower=jnxPMIntAvgRxInputPower, jnxPMCurMaxSNR=jnxPMCurMaxSNR, jnxPMCurMaxPolarDepLoss=jnxPMCurMaxPolarDepLoss, jnxOptics=jnxOptics, jnxOpticsClearIfPMsEntry=jnxOpticsClearIfPMsEntry, jnxPMIntMinPolarState=jnxPMIntMinPolarState, jnxPMIntMinCarFreqOffset=jnxPMIntMinCarFreqOffset)
