#
# PySNMP MIB module RLE-FALCON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RLE-FALCON-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:57:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
PositiveInteger, TruthValue = mibBuilder.importSymbols("RFC1253-MIB", "PositiveInteger", "TruthValue")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Integer32, Gauge32, iso, NotificationType, IpAddress, NotificationType, MibIdentifier, Bits, TimeTicks, ObjectIdentity, Counter64, Unsigned32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Integer32", "Gauge32", "iso", "NotificationType", "IpAddress", "NotificationType", "MibIdentifier", "Bits", "TimeTicks", "ObjectIdentity", "Counter64", "Unsigned32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
rle = MibIdentifier((1, 3, 6, 1, 4, 1, 3184))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1))
falcon = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1, 1))
falconMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1))
falconIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 1))
falconIdentManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: falconIdentManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: falconIdentManufacturer.setDescription('The Monitor Control Unit manufacturer.')
falconIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: falconIdentModel.setStatus('mandatory')
if mibBuilder.loadTexts: falconIdentModel.setDescription('The Monitor Control Unit Model designation.')
falconIdentSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: falconIdentSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: falconIdentSoftwareVersion.setDescription('The falcon SNMP Agent software version.')
falconIdentSpecific = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: falconIdentSpecific.setStatus('mandatory')
if mibBuilder.loadTexts: falconIdentSpecific.setDescription('A reference to MIB definitions specific to the particular Monitor Unit being managed. This object is used to locate the product-specific MIB for this device. If this information is not present, its value should be the OBJECT IDENTIFIER { 0 0 }, which is a syntactically valid object identifier, and any conformant implementation of ASN.1 and BER must be able to generate and recognize this value.')
falconSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2))
falconClock = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconClock.setStatus('mandatory')
if mibBuilder.loadTexts: falconClock.setDescription('The falcon internal clock settings. Displayed as MM/DD/YY HH:MM:SS')
falconDoorAlarmBypass = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconDoorAlarmBypass.setStatus('mandatory')
if mibBuilder.loadTexts: falconDoorAlarmBypass.setDescription('The falcon door alarm bypass switch. This allows the alarm to be bypassed upon valid keypad access. Zero disables this, or use 1 thru 8 for the corresponding falcon input.')
falconKeypad = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3))
falconKeypadCode1 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadCode1.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadCode1.setDescription('The falcon keypad access code for user #1. This can be up to six numberic characters.')
falconKeypadName1 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadName1.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadName1.setDescription('The falcon keypad access name for user #1. This can be up to 20 characters.')
falconKeypadCode2 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadCode2.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadCode2.setDescription('The falcon keypad access code for user #2. This can be up to six numberic characters.')
falconKeypadName2 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadName2.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadName2.setDescription('The falcon keypad access name for user #2. This can be up to 20 characters.')
falconKeypadCode3 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadCode3.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadCode3.setDescription('The falcon keypad access code for user #3. This can be up to six numberic characters.')
falconKeypadName3 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadName3.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadName3.setDescription('The falcon keypad access name for user #3. This can be up to 20 characters.')
falconKeypadCode4 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadCode4.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadCode4.setDescription('The falcon keypad access code for user #4. This can be up to six numberic characters.')
falconKeypadName4 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadName4.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadName4.setDescription('The falcon keypad access name for user #4. This can be up to 20 characters.')
falconKeypadCode5 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadCode5.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadCode5.setDescription('The falcon keypad access code for user #5. This can be up to six numberic characters.')
falconKeypadName5 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadName5.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadName5.setDescription('The falcon keypad access name for user #5. This can be up to 20 characters.')
falconKeypadCode6 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadCode6.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadCode6.setDescription('The falcon keypad access code for user #6. This can be up to six numberic characters.')
falconKeypadName6 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadName6.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadName6.setDescription('The falcon keypad access name for user #6. This can be up to 20 characters.')
falconKeypadCode7 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadCode7.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadCode7.setDescription('The falcon keypad access code for user #7. This can be up to six numberic characters.')
falconKeypadName7 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadName7.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadName7.setDescription('The falcon keypad access name for user #7. This can be up to 20 characters.')
falconKeypadCode8 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadCode8.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadCode8.setDescription('The falcon keypad access code for user #8. This can be up to six numberic characters.')
falconKeypadName8 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadName8.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadName8.setDescription('The falcon keypad access name for user #8. This can be up to 20 characters.')
falconKeypadCode9 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadCode9.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadCode9.setDescription('The falcon keypad access code for user #9. This can be up to six numberic characters.')
falconKeypadName9 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadName9.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadName9.setDescription('The falcon keypad access name for user #9. This can be up to 20 characters.')
falconKeypadCode10 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadCode10.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadCode10.setDescription('The falcon keypad access code for user #10. This can be up to six numberic characters.')
falconKeypadName10 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadName10.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadName10.setDescription('The falcon keypad access name for user #10. This can be up to 20 characters.')
falconKeypadCode11 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadCode11.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadCode11.setDescription('The falcon keypad access code for user #11. This can be up to six numberic characters.')
falconKeypadName11 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadName11.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadName11.setDescription('The falcon keypad access name for user #11. This can be up to 20 characters.')
falconKeypadCode12 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadCode12.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadCode12.setDescription('The falcon keypad access code for user #12. This can be up to six numberic characters.')
falconKeypadName12 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadName12.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadName12.setDescription('The falcon keypad access name for user #12. This can be up to 20 characters.')
falconKeypadCode13 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadCode13.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadCode13.setDescription('The falcon keypad access code for user #13. This can be up to six numberic characters.')
falconKeypadName13 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadName13.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadName13.setDescription('The falcon keypad access name for user #13. This can be up to 20 characters.')
falconKeypadCode14 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadCode14.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadCode14.setDescription('The falcon keypad access code for user #14. This can be up to six numberic characters.')
falconKeypadName14 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadName14.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadName14.setDescription('The falcon keypad access name for user #14. This can be up to 20 characters.')
falconKeypadCode15 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 29), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadCode15.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadCode15.setDescription('The falcon keypad access code for user #15. This can be up to six numberic characters.')
falconKeypadName15 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 30), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadName15.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadName15.setDescription('The falcon keypad access name for user #15. This can be up to 20 characters.')
falconKeypadCode16 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 31), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadCode16.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadCode16.setDescription('The falcon keypad access code for user #16. This can be up to six numberic characters.')
falconKeypadName16 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 32), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadName16.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadName16.setDescription('The falcon keypad access name for user #16. This can be up to 20 characters.')
falconKeypadCode17 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 33), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadCode17.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadCode17.setDescription('The falcon keypad access code for user #17. This can be up to six numberic characters.')
falconKeypadName17 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 34), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadName17.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadName17.setDescription('The falcon keypad access name for user #17. This can be up to 20 characters.')
falconKeypadCode18 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 35), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadCode18.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadCode18.setDescription('The falcon keypad access code for user #18. This can be up to six numberic characters.')
falconKeypadName18 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 36), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadName18.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadName18.setDescription('The falcon keypad access name for user #18. This can be up to 20 characters.')
falconKeypadCode19 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 37), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadCode19.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadCode19.setDescription('The falcon keypad access code for user #19. This can be up to six numberic characters.')
falconKeypadName19 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 38), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadName19.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadName19.setDescription('The falcon keypad access name for user #19. This can be up to 20 characters.')
falconKeypadCode20 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 39), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadCode20.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadCode20.setDescription('The falcon keypad access code for user #20. This can be up to six numberic characters.')
falconKeypadName20 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 3, 40), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconKeypadName20.setStatus('mandatory')
if mibBuilder.loadTexts: falconKeypadName20.setDescription('The falcon keypad access name for user #20. This can be up to 20 characters.')
falconInputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: falconInputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: falconInputVoltage.setDescription('The falcon input voltage (DC Power).')
falconOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notInstalled", 0), ("installed", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconOnBattery.setStatus('mandatory')
if mibBuilder.loadTexts: falconOnBattery.setDescription('The state of use of the On Battery Alarm. When the State is set to installed(1), the On Battery and Low Battery alarms are enabled. This variable is stored in non-volatile memory.')
falconLowBatteryThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconLowBatteryThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: falconLowBatteryThreshold.setDescription('The low voltage trip point for the low battery alarm. When the input voltage goes below this voltage, the Low Battery alarm is set. This variable is stored in non-volatile memory.')
falconAnalogAverage = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconAnalogAverage.setStatus('mandatory')
if mibBuilder.loadTexts: falconAnalogAverage.setDescription('This is the analog averaging duration in seconds. The analog input readings are averaged for this time period before updating. This value must be set to 1,2,3,4,5,6,10,15,20,30 or 60 seconds. This variable is stored in non-volatile memory.')
falconInputs = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3))
falconInput1 = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 1))
falconInput1State = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notinstalled", 1), ("analog-4to20-installed", 2), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput1State.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput1State.setDescription('The state of use of Input Number 1. When a sensor is connected to Input 1 set State to installed(2) to indicate that the value of falconReading1 is valid. When no sensor is connected to Input 1 set State to notInstalled(1) to indicate that the value of falconReading1 may not be valid. This variable is stored in non-volatile memory.')
falconInput1Reading = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: falconInput1Reading.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput1Reading.setDescription('The reading for sensor 1. If the input is digital, the reading will be 1 (active) or 0 (inactive)')
falconInput1Gain = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput1Gain.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput1Gain.setDescription('A correction gain associated with the sensor variable. The value of gain is multiplied by the value from Input Sensor Number 1 to obtain the value of the Input1 variable. The gain variable is stored in non-volatile memory.')
falconInput1Offset = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput1Offset.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput1Offset.setDescription('A correction Offset associated with the sensor variable. The value of Offset is added to the value from Input Sensor Number 1 to obtain the value of the Input1 variable. The Offset variable is stored in non-volatile memory.')
falconInput1Label = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput1Label.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput1Label.setDescription('A user-defined text string associated with Input Number 1. The text string is stored in non-volatile memory.')
falconInput1UOM = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput1UOM.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput1UOM.setDescription('A user-defined text string associated with Input Number 1. The text string is stored in non-volatile memory.')
falconInput1HighLimit2 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput1HighLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput1HighLimit2.setDescription('When input 1 reaches or exceeds this value a trap will be generated signifying a high alarm condition at sensor 1. The HighLimit2 variable is stored in non-volatile memory.')
falconInput1HighLimit = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput1HighLimit.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput1HighLimit.setDescription('When input 1 reaches or exceeds this value a trap will be generated signifying a high alarm condition at sensor 1. The HighLimit variable is stored in non-volatile memory.')
falconInput1LowLimit = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput1LowLimit.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput1LowLimit.setDescription('When input 1 reaches or goes below this value a trap will be generated signifying a low alarm condition at sensor 1. The LowLimit variable is stored in non-volatile memory.')
falconInput1LowLimit2 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput1LowLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput1LowLimit2.setDescription('When input 1 reaches or goes below this value a trap will be generated signifying a low alarm condition at sensor 1. The LowLimit variable is stored in non-volatile memory.')
falconInput1RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput1RlyControl.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput1RlyControl.setDescription('The control of the output relays. This is a binary setting with each bit representing an alarm state. To set K1 on a high alarm, set the 1st bit (1). To set K2 on a high alarm, set the 2nd bit (2). To set K1 on a low alarm, set the 3rd bit (4). To set K2 on a low alarm, set the 4th bit (8). To set K1 on a digital alarm, set the 1st bit (1). To set K2 on a digital alarm, set the 2nd bit (2). For no action. set this value to 0. The range of this setting is 0..15. This variable is stored in non-volatile memory.')
falconInput1Delay = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput1Delay.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput1Delay.setDescription('The number of seconds an alarm for this input must be present before annunication. The range of this setting is 0..600. This variable is stored in non-volatile memory.')
falconInput1Hysteresis = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput1Hysteresis.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput1Hysteresis.setDescription('The value of alarm hysteresis for this input. The input reading must decrease or increase by this value before the alarm will clear. This variable is stored in non-volatile memory.')
falconInput2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 2))
falconInput2State = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notinstalled", 1), ("analog-4to20-installed", 2), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput2State.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput2State.setDescription('The state of use of Input Number 2. When a sensor is connected to Input 2 set State to installed(2) to indicate that the value of falconReading2 is valid. When no sensor is connected to Input 2 set State to notInstalled(1) to indicate that the value of falconReading2 may not be valid. This variable is stored in non-volatile memory.')
falconInput2Reading = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: falconInput2Reading.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput2Reading.setDescription('The reading for sensor 2. If the input is digital, the reading will be 1 (active) or 0 (inactive)')
falconInput2Gain = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput2Gain.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput2Gain.setDescription('A correction gain associated with the sensor variable. The value of gain is multiplied by the value from Input Sensor Number 2 to obtain the value of the Input2 variable. The gain variable is stored in non-volatile memory.')
falconInput2Offset = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput2Offset.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput2Offset.setDescription('A correction Offset associated with the sensor variable. The value of Offset is added to the value from Input Sensor Number 2 to obtain the value of the Input2 variable. The Offset variable is stored in non-volatile memory.')
falconInput2Label = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput2Label.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput2Label.setDescription('A user-defined text string associated with Input Number 2. The text string is stored in non-volatile memory.')
falconInput2UOM = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 2, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput2UOM.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput2UOM.setDescription('A user-defined text string associated with Input Number 2. The text string is stored in non-volatile memory.')
falconInput2HighLimit2 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput2HighLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput2HighLimit2.setDescription('When input 2 reaches or exceeds this value a trap will be generated signifying a high alarm condition at sensor 2. The HighLimit variable is stored in non-volatile memory.')
falconInput2HighLimit = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput2HighLimit.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput2HighLimit.setDescription('When input 2 reaches or exceeds this value a trap will be generated signifying a high alarm condition at sensor 2. The HighLimit variable is stored in non-volatile memory.')
falconInput2LowLimit = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput2LowLimit.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput2LowLimit.setDescription('When input 2 reaches or goes below this value a trap will be generated signifying a low alarm condition at sensor 2. The LowLimit variable is stored in non-volatile memory.')
falconInput2LowLimit2 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput2LowLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput2LowLimit2.setDescription('When input 2 reaches or goes below this value a trap will be generated signifying a low alarm condition at sensor 2. The LowLimit variable is stored in non-volatile memory.')
falconInput2RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput2RlyControl.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput2RlyControl.setDescription('The control of the output relays. This is a binary setting with each bit representing an alarm state. To set K1 on a high alarm, set the 1st bit (1). To set K2 on a high alarm, set the 2nd bit (2). To set K1 on a low alarm, set the 3rd bit (4). To set K2 on a low alarm, set the 4th bit (8). To set K1 on a digital alarm, set the 1st bit (1). To set K2 on a digital alarm, set the 2nd bit (2). For no action. set this value to 0. The range of this setting is 0..15. This variable is stored in non-volatile memory.')
falconInput2Delay = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput2Delay.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput2Delay.setDescription('The number of seconds an alarm for this input must be present before annunication. The range of this setting is 0..600. This variable is stored in non-volatile memory.')
falconInput2Hysteresis = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput2Hysteresis.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput2Hysteresis.setDescription('The value of alarm hysteresis for this input. The input reading must decrease or increase by this value before the alarm will clear. This variable is stored in non-volatile memory.')
falconInput3 = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 3))
falconInput3State = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("analog-4to20-installed", 2), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput3State.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput3State.setDescription('The state of use of Input Number 3. When a sensor is connected to Input 3 set State to installed(2) to indicate that the value of falconReading3 is valid. When no sensor is connected to Input 3 set State to notInstalled(1) to indicate that the value of falconReading3 may not be valid. This variable is stored in non-volatile memory.')
falconInput3Reading = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: falconInput3Reading.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput3Reading.setDescription('The reading for sensor 3. If the input is digital, the reading will be 1 (active) or 0 (inactive)')
falconInput3Gain = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput3Gain.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput3Gain.setDescription('A correction gain associated with the sensor variable. The value of gain is multiplied by the value from Input Sensor Number 3 to obtain the value of the Input3 variable. The gain variable is stored in non-volatile memory.')
falconInput3Offset = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput3Offset.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput3Offset.setDescription('A correction Offset associated with the sensor variable. The value of Offset is added to the value from Input Sensor Number 3 to obtain the value of the Input3 variable. The Offset variable is stored in non-volatile memory.')
falconInput3Label = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 3, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput3Label.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput3Label.setDescription('A user-defined text string associated with Input Number 3. The text string is stored in non-volatile memory.')
falconInput3UOM = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 3, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput3UOM.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput3UOM.setDescription('A user-defined text string associated with Input Number 3. The text string is stored in non-volatile memory.')
falconInput3HighLimit2 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput3HighLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput3HighLimit2.setDescription('When input 3 reaches or exceeds this value a trap will be generated signifying a high alarm condition at sensor 3. The HighLimit variable is stored in non-volatile memory.')
falconInput3HighLimit = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput3HighLimit.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput3HighLimit.setDescription('When input 3 reaches or exceeds this value a trap will be generated signifying a high alarm condition at sensor 3. The HighLimit variable is stored in non-volatile memory.')
falconInput3LowLimit = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput3LowLimit.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput3LowLimit.setDescription('When input 3 reaches or goes below this value a trap will be generated signifying a low alarm condition at sensor 3. The LowLimit variable is stored in non-volatile memory.')
falconInput3LowLimit2 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput3LowLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput3LowLimit2.setDescription('When input 3 reaches or goes below this value a trap will be generated signifying a low alarm condition at sensor 3. The LowLimit variable is stored in non-volatile memory.')
falconInput3RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 3, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput3RlyControl.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput3RlyControl.setDescription('The control of the output relays. This is a binary setting with each bit representing an alarm state. To set K1 on a high alarm, set the 1st bit (1). To set K2 on a high alarm, set the 2nd bit (2). To set K1 on a low alarm, set the 3rd bit (4). To set K2 on a low alarm, set the 4th bit (8). To set K1 on a digital alarm, set the 1st bit (1). To set K2 on a digital alarm, set the 2nd bit (2). For no action. set this value to 0. The range of this setting is 0..15. This variable is stored in non-volatile memory.')
falconInput3Delay = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 3, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput3Delay.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput3Delay.setDescription('The number of seconds an alarm for this input must be present before annunication. The range of this setting is 0..600. This variable is stored in non-volatile memory.')
falconInput3Hysteresis = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 3, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput3Hysteresis.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput3Hysteresis.setDescription('The value of alarm hysteresis for this input. The input reading must decrease or increase by this value before the alarm will clear. This variable is stored in non-volatile memory.')
falconInput4 = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 4))
falconInput4State = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("analog-4to20-installed", 2), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput4State.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput4State.setDescription('The state of use of Input Number 4. When a sensor is connected to Input 4 set State to installed(2) to indicate that the value of falconReading4 is valid. When no sensor is connected to Input 4 set State to notInstalled(1) to indicate that the value of falconReading4 may not be valid. This variable is stored in non-volatile memory.')
falconInput4Reading = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: falconInput4Reading.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput4Reading.setDescription('The reading for sensor 4. If the input is digital, the reading will be 1 (active) or 0 (inactive)')
falconInput4Gain = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput4Gain.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput4Gain.setDescription('A correction gain associated with the sensor variable. The value of gain is multiplied by the value from Input Sensor Number 4 to obtain the value of the Input4 variable. The gain variable is stored in non-volatile memory.')
falconInput4Offset = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput4Offset.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput4Offset.setDescription('A correction Offset associated with the sensor variable. The value of Offset is added to the value from Input Sensor Number 4 to obtain the value of the Input4 variable. The Offset variable is stored in non-volatile memory.')
falconInput4Label = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 4, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput4Label.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput4Label.setDescription('A user-defined text string associated with Input Number 4. The text string is stored in non-volatile memory.')
falconInput4UOM = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 4, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput4UOM.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput4UOM.setDescription('A user-defined text string associated with Input Number 4. The text string is stored in non-volatile memory.')
falconInput4HighLimit2 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput4HighLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput4HighLimit2.setDescription('When input 4 reaches or exceeds this value a trap will be generated signifying a high alarm condition at sensor 4. The HighLimit variable is stored in non-volatile memory.')
falconInput4HighLimit = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput4HighLimit.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput4HighLimit.setDescription('When input 4 reaches or exceeds this value a trap will be generated signifying a high alarm condition at sensor 4. The HighLimit variable is stored in non-volatile memory.')
falconInput4LowLimit = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput4LowLimit.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput4LowLimit.setDescription('When input 4 reaches or goes below this value a trap will be generated signifying a low alarm condition at sensor 4. The LowLimit variable is stored in non-volatile memory.')
falconInput4LowLimit2 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput4LowLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput4LowLimit2.setDescription('When input 4 reaches or goes below this value a trap will be generated signifying a low alarm condition at sensor 4. The LowLimit variable is stored in non-volatile memory.')
falconInput4RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput4RlyControl.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput4RlyControl.setDescription('The control of the output relays. This is a binary setting with each bit representing an alarm state. To set K1 on a high alarm, set the 1st bit (1). To set K2 on a high alarm, set the 2nd bit (2). To set K1 on a low alarm, set the 3rd bit (4). To set K2 on a low alarm, set the 4th bit (8). To set K1 on a digital alarm, set the 1st bit (1). To set K2 on a digital alarm, set the 2nd bit (2). For no action. set this value to 0. The range of this setting is 0..15. This variable is stored in non-volatile memory.')
falconInput4Delay = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput4Delay.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput4Delay.setDescription('The number of seconds an alarm for this input must be present before annunication. The range of this setting is 0..600. This variable is stored in non-volatile memory.')
falconInput4Hysteresis = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 4, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput4Hysteresis.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput4Hysteresis.setDescription('The value of alarm hysteresis for this input. The input reading must decrease or increase by this value before the alarm will clear. This variable is stored in non-volatile memory.')
falconInput5 = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 5))
falconInput5State = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("analog-4to20-installed", 2), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput5State.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput5State.setDescription('The state of use of Input Number 5. When a sensor is connected to Input 5 set State to installed(2) to indicate that the value of falconReading4 is valid. When no sensor is connected to Input 5 set State to notInstalled(1) to indicate that the value of falconReading5 may not be valid. This variable is stored in non-volatile memory.')
falconInput5Reading = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: falconInput5Reading.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput5Reading.setDescription('The reading for sensor 5. If the input is digital, the reading will be 1 (active) or 0 (inactive)')
falconInput5Gain = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput5Gain.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput5Gain.setDescription('A correction gain associated with the sensor variable. The value of gain is multiplied by the value from Input Sensor Number 5 to obtain the value of the Input5 variable. The gain variable is stored in non-volatile memory.')
falconInput5Offset = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput5Offset.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput5Offset.setDescription('A correction Offset associated with the sensor variable. The value of Offset is added to the value from Input Sensor Number 5 to obtain the value of the Input5 variable. The Offset variable is stored in non-volatile memory.')
falconInput5Label = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 5, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput5Label.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput5Label.setDescription('A user-defined text string associated with Input Number 5. The text string is stored in non-volatile memory.')
falconInput5UOM = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 5, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput5UOM.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput5UOM.setDescription('A user-defined text string associated with Input Number 5. The text string is stored in non-volatile memory.')
falconInput5HighLimit2 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput5HighLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput5HighLimit2.setDescription('When input 5 reaches or exceeds this value a trap will be generated signifying a high alarm condition at sensor 5. The HighLimit variable is stored in non-volatile memory.')
falconInput5HighLimit = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput5HighLimit.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput5HighLimit.setDescription('When input 5 reaches or exceeds this value a trap will be generated signifying a high alarm condition at sensor 5. The HighLimit variable is stored in non-volatile memory.')
falconInput5LowLimit = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 5, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput5LowLimit.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput5LowLimit.setDescription('When input 5 reaches or goes below this value a trap will be generated signifying a low alarm condition at sensor 5. The LowLimit variable is stored in non-volatile memory.')
falconInput5LowLimit2 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 5, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput5LowLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput5LowLimit2.setDescription('When input 5 reaches or goes below this value a trap will be generated signifying a low alarm condition at sensor 5. The LowLimit variable is stored in non-volatile memory.')
falconInput5RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 5, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput5RlyControl.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput5RlyControl.setDescription('The control of the output relays. This is a binary setting with each bit representing an alarm state. To set K1 on a high alarm, set the 1st bit (1). To set K2 on a high alarm, set the 2nd bit (2). To set K1 on a low alarm, set the 3rd bit (4). To set K2 on a low alarm, set the 4th bit (8). To set K1 on a digital alarm, set the 1st bit (1). To set K2 on a digital alarm, set the 2nd bit (2). For no action. set this value to 0. The range of this setting is 0..15. This variable is stored in non-volatile memory.')
falconInput5Delay = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 5, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput5Delay.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput5Delay.setDescription('The number of seconds an alarm for this input must be present before annunication. The range of this setting is 0..600. This variable is stored in non-volatile memory.')
falconInput5Hysteresis = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 5, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput5Hysteresis.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput5Hysteresis.setDescription('The value of alarm hysteresis for this input. The input reading must decrease or increase by this value before the alarm will clear. This variable is stored in non-volatile memory.')
falconInput6 = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 6))
falconInput6State = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("analog-4to20-installed", 2), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput6State.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput6State.setDescription('The state of use of Input Number 6. When a sensor is connected to Input 6 set State to installed(2) to indicate that the value of falconReading6 is valid. When no sensor is connected to Input 6 set State to notInstalled(1) to indicate that the value of falconReading6 may not be valid. This variable is stored in non-volatile memory.')
falconInput6Reading = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: falconInput6Reading.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput6Reading.setDescription('The reading for sensor 6. If the input is digital, the reading will be 1 (active) or 0 (inactive)')
falconInput6Gain = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput6Gain.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput6Gain.setDescription('A correction gain associated with the sensor variable. The value of gain is multiplied by the value from Input Sensor Number 6 to obtain the value of the Input6 variable. The gain variable is stored in non-volatile memory.')
falconInput6Offset = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput6Offset.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput6Offset.setDescription('A correction Offset associated with the sensor variable. The value of Offset is added to the value from Input Sensor Number 6 to obtain the value of the Input6 variable. The Offset variable is stored in non-volatile memory.')
falconInput6Label = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 6, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput6Label.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput6Label.setDescription('A user-defined text string associated with Input Number 6. The text string is stored in non-volatile memory.')
falconInput6UOM = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 6, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput6UOM.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput6UOM.setDescription('A user-defined text string associated with Input Number 6. The text string is stored in non-volatile memory.')
falconInput6HighLimit2 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput6HighLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput6HighLimit2.setDescription('When input 6 reaches or exceeds this value a trap will be generated signifying a high alarm condition at sensor 6. The HighLimit variable is stored in non-volatile memory.')
falconInput6HighLimit = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 6, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput6HighLimit.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput6HighLimit.setDescription('When input 6 reaches or exceeds this value a trap will be generated signifying a high alarm condition at sensor 6. The HighLimit variable is stored in non-volatile memory.')
falconInput6LowLimit = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 6, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput6LowLimit.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput6LowLimit.setDescription('When input 6 reaches or goes below this value a trap will be generated signifying a low alarm condition at sensor 6. The LowLimit variable is stored in non-volatile memory.')
falconInput6LowLimit2 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 6, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput6LowLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput6LowLimit2.setDescription('When input 6 reaches or goes below this value a trap will be generated signifying a low alarm condition at sensor 6. The LowLimit variable is stored in non-volatile memory.')
falconInput6RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 6, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput6RlyControl.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput6RlyControl.setDescription('The control of the output relays. This is a binary setting with each bit representing an alarm state. To set K1 on a high alarm, set the 1st bit (1). To set K2 on a high alarm, set the 2nd bit (2). To set K1 on a low alarm, set the 3rd bit (4). To set K2 on a low alarm, set the 4th bit (8). To set K1 on a digital alarm, set the 1st bit (1). To set K2 on a digital alarm, set the 2nd bit (2). For no action. set this value to 0. The range of this setting is 0..15. This variable is stored in non-volatile memory.')
falconInput6Delay = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 6, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput6Delay.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput6Delay.setDescription('The number of seconds an alarm for this input must be present before annunication. The range of this setting is 0..600. This variable is stored in non-volatile memory.')
falconInput6Hysteresis = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 6, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput6Hysteresis.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput6Hysteresis.setDescription('The value of alarm hysteresis for this input. The input reading must decrease or increase by this value before the alarm will clear. This variable is stored in non-volatile memory.')
falconInput7 = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 7))
falconInput7State = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("analog-4to20-installed", 2), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput7State.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput7State.setDescription('The state of use of Input Number 7. When a sensor is connected to Input 7 set State to installed(2) to indicate that the value of falconReading4 is valid. When no sensor is connected to Input 7 set State to notInstalled(1) to indicate that the value of falconReading7 may not be valid. This variable is stored in non-volatile memory.')
falconInput7Reading = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: falconInput7Reading.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput7Reading.setDescription('The reading for sensor 7. If the input is digital, the reading will be 1 (active) or 0 (inactive)')
falconInput7Gain = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput7Gain.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput7Gain.setDescription('A correction gain associated with the sensor variable. The value of gain is multiplied by the value from Input Sensor Number 7 to obtain the value of the Input7 variable. The gain variable is stored in non-volatile memory.')
falconInput7Offset = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput7Offset.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput7Offset.setDescription('A correction Offset associated with the sensor variable. The value of Offset is added to the value from Input Sensor Number 7 to obtain the value of the Input7 variable. The Offset variable is stored in non-volatile memory.')
falconInput7Label = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 7, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput7Label.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput7Label.setDescription('A user-defined text string associated with Input Number 7. The text string is stored in non-volatile memory.')
falconInput7UOM = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 7, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput7UOM.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput7UOM.setDescription('A user-defined text string associated with Input Number 7. The text string is stored in non-volatile memory.')
falconInput7HighLimit2 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 7, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput7HighLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput7HighLimit2.setDescription('When input 7 reaches or exceeds this value a trap will be generated signifying a high alarm condition at sensor 7. The HighLimit variable is stored in non-volatile memory.')
falconInput7HighLimit = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 7, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput7HighLimit.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput7HighLimit.setDescription('When input 7 reaches or exceeds this value a trap will be generated signifying a high alarm condition at sensor 7. The HighLimit variable is stored in non-volatile memory.')
falconInput7LowLimit = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 7, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput7LowLimit.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput7LowLimit.setDescription('When input 7 reaches or goes below this value a trap will be generated signifying a low alarm condition at sensor 7. The LowLimit variable is stored in non-volatile memory.')
falconInput7LowLimit2 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 7, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput7LowLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput7LowLimit2.setDescription('When input 7 reaches or goes below this value a trap will be generated signifying a low alarm condition at sensor 7. The LowLimit variable is stored in non-volatile memory.')
falconInput7RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 7, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput7RlyControl.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput7RlyControl.setDescription('The control of the output relays. This is a binary setting with each bit representing an alarm state. To set K1 on a high alarm, set the 1st bit (1). To set K2 on a high alarm, set the 2nd bit (2). To set K1 on a low alarm, set the 3rd bit (4). To set K2 on a low alarm, set the 4th bit (8). To set K1 on a digital alarm, set the 1st bit (1). To set K2 on a digital alarm, set the 2nd bit (2). For no action. set this value to 0. The range of this setting is 0..15. This variable is stored in non-volatile memory.')
falconInput7Delay = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 7, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput7Delay.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput7Delay.setDescription('The number of seconds an alarm for this input must be present before annunication. The range of this setting is 0..600. This variable is stored in non-volatile memory.')
falconInput7Hysteresis = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 7, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput7Hysteresis.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput7Hysteresis.setDescription('The value of alarm hysteresis for this input. The input reading must decrease or increase by this value before the alarm will clear. This variable is stored in non-volatile memory.')
falconInput8 = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 8))
falconInput8State = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("analog-4to20-installed", 2), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput8State.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput8State.setDescription('The state of use of Input Number 8. When a sensor is connected to Input 8 set State to installed(2) to indicate that the value of falconReading8 is valid. When no sensor is connected to Input 8 set State to notInstalled(1) to indicate that the value of falconReading8 may not be valid. This variable is stored in non-volatile memory.')
falconInput8Reading = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: falconInput8Reading.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput8Reading.setDescription('The reading for sensor 8. If the input is digital, the reading will be 1 (active) or 0 (inactive)')
falconInput8Gain = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput8Gain.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput8Gain.setDescription('A correction gain associated with the sensor variable. The value of gain is multiplied by the value from Input Sensor Number 8 to obtain the value of the Input8 variable. The gain variable is stored in non-volatile memory.')
falconInput8Offset = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput8Offset.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput8Offset.setDescription('A correction Offset associated with the sensor variable. The value of Offset is added to the value from Input Sensor Number 8 to obtain the value of the Input8 variable. The Offset variable is stored in non-volatile memory.')
falconInput8Label = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 8, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput8Label.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput8Label.setDescription('A user-defined text string associated with Input Number 8. The text string is stored in non-volatile memory.')
falconInput8UOM = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 8, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput8UOM.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput8UOM.setDescription('A user-defined text string associated with Input Number 8. The text string is stored in non-volatile memory.')
falconInput8HighLimit2 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 8, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput8HighLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput8HighLimit2.setDescription('When input 8 reaches or exceeds this value a trap will be generated signifying a high alarm condition at sensor 8. The HighLimit variable is stored in non-volatile memory.')
falconInput8HighLimit = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 8, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput8HighLimit.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput8HighLimit.setDescription('When input 8 reaches or exceeds this value a trap will be generated signifying a high alarm condition at sensor 8. The HighLimit variable is stored in non-volatile memory.')
falconInput8LowLimit = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 8, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput8LowLimit.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput8LowLimit.setDescription('When input 8 reaches or goes below this value a trap will be generated signifying a low alarm condition at sensor 8. The LowLimit variable is stored in non-volatile memory.')
falconInput8LowLimit2 = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 8, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput8LowLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput8LowLimit2.setDescription('When input 8 reaches or goes below this value a trap will be generated signifying a low alarm condition at sensor 8. The LowLimit variable is stored in non-volatile memory.')
falconInput8RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 8, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput8RlyControl.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput8RlyControl.setDescription('The control of the output relays. This is a binary setting with each bit representing an alarm state. To set K1 on a high alarm, set the 1st bit (1). To set K2 on a high alarm, set the 2nd bit (2). To set K1 on a low alarm, set the 3rd bit (4). To set K2 on a low alarm, set the 4th bit (8). To set K1 on a digital alarm, set the 1st bit (1). To set K2 on a digital alarm, set the 2nd bit (2). For no action. set this value to 0. The range of this setting is 0..15. This variable is stored in non-volatile memory.')
falconInput8Delay = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 8, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput8Delay.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput8Delay.setDescription('The number of seconds an alarm for this input must be present before annunication. The range of this setting is 0..600. This variable is stored in non-volatile memory.')
falconInput8Hysteresis = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 8, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput8Hysteresis.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput8Hysteresis.setDescription('The value of alarm hysteresis for this input. The input reading must decrease or increase by this value before the alarm will clear. This variable is stored in non-volatile memory.')
falconInput9 = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 25))
falconInput9State = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput9State.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput9State.setDescription('The state of use of Input Number 9. This variable is stored in non-volatile memory.')
falconInput9Reading = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 25, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: falconInput9Reading.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput9Reading.setDescription('The reading for input 9. The reading will be 1 (active) or 0 (inactive)')
falconInput9Label = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 25, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput9Label.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput9Label.setDescription('A user-defined text string associated with Input Number 9. The text string is stored in non-volatile memory.')
falconInput9RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 25, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput9RlyControl.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput9RlyControl.setDescription('The control of the output relays. This is a binary setting with each bit representing an alarm state. To set K1 on a high alarm, set the 1st bit (1). To set K2 on a high alarm, set the 2nd bit (2). To set K1 on a low alarm, set the 3rd bit (4). To set K2 on a low alarm, set the 4th bit (8). To set K1 on a digital alarm, set the 1st bit (1). To set K2 on a digital alarm, set the 2nd bit (2). For no action. set this value to 0. The range of this setting is 0..15. This variable is stored in non-volatile memory.')
falconInput9Delay = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 25, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput9Delay.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput9Delay.setDescription('The number of seconds an alarm for this input must be present before annunication. The range of this setting is 0..600. This variable is stored in non-volatile memory.')
falconInput10 = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 26))
falconInput10State = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 26, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput10State.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput10State.setDescription('The state of use of Input Number 10. This variable is stored in non-volatile memory.')
falconInput10Reading = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 26, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: falconInput10Reading.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput10Reading.setDescription('The reading for input 10. The reading will be 1 (active) or 0 (inactive)')
falconInput10Label = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 26, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput10Label.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput10Label.setDescription('A user-defined text string associated with Input Number 10. The text string is stored in non-volatile memory.')
falconInput10RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 26, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput10RlyControl.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput10RlyControl.setDescription('The control of the output relays. This is a binary setting with each bit representing an alarm state. To set K1 on a high alarm, set the 1st bit (1). To set K2 on a high alarm, set the 2nd bit (2). To set K1 on a low alarm, set the 3rd bit (4). To set K2 on a low alarm, set the 4th bit (8). To set K1 on a digital alarm, set the 1st bit (1). To set K2 on a digital alarm, set the 2nd bit (2). For no action. set this value to 0. The range of this setting is 0..15. This variable is stored in non-volatile memory.')
falconInput10Delay = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 26, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput10Delay.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput10Delay.setDescription('The number of seconds an alarm for this input must be present before annunication. The range of this setting is 0..600. This variable is stored in non-volatile memory.')
falconInput11 = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 27))
falconInput11State = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 27, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput11State.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput11State.setDescription('The state of use of Input Number 11. This variable is stored in non-volatile memory.')
falconInput11Reading = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 27, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: falconInput11Reading.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput11Reading.setDescription('The reading for input 11. The reading will be 1 (active) or 0 (inactive)')
falconInput11Label = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 27, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput11Label.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput11Label.setDescription('A user-defined text string associated with Input Number 11. The text string is stored in non-volatile memory.')
falconInput11RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 27, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput11RlyControl.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput11RlyControl.setDescription('The control of the output relays. This is a binary setting with each bit representing an alarm state. To set K1 on a high alarm, set the 1st bit (1). To set K2 on a high alarm, set the 2nd bit (2). To set K1 on a low alarm, set the 3rd bit (4). To set K2 on a low alarm, set the 4th bit (8). To set K1 on a digital alarm, set the 1st bit (1). To set K2 on a digital alarm, set the 2nd bit (2). For no action. set this value to 0. The range of this setting is 0..15. This variable is stored in non-volatile memory.')
falconInput11Delay = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 27, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput11Delay.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput11Delay.setDescription('The number of seconds an alarm for this input must be present before annunication. The range of this setting is 0..600. This variable is stored in non-volatile memory.')
falconInput12 = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 28))
falconInput12State = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 28, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput12State.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput12State.setDescription('The state of use of Input Number 12. This variable is stored in non-volatile memory.')
falconInput12Reading = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 28, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: falconInput12Reading.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput12Reading.setDescription('The reading for input 12. The reading will be 1 (active) or 0 (inactive)')
falconInput12Label = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 28, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput12Label.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput12Label.setDescription('A user-defined text string associated with Input Number 12. The text string is stored in non-volatile memory.')
falconInput12RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 28, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput12RlyControl.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput12RlyControl.setDescription('The control of the output relays. This is a binary setting with each bit representing an alarm state. To set K1 on a high alarm, set the 1st bit (1). To set K2 on a high alarm, set the 2nd bit (2). To set K1 on a low alarm, set the 3rd bit (4). To set K2 on a low alarm, set the 4th bit (8). To set K1 on a digital alarm, set the 1st bit (1). To set K2 on a digital alarm, set the 2nd bit (2). For no action. set this value to 0. The range of this setting is 0..15. This variable is stored in non-volatile memory.')
falconInput12Delay = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 28, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput12Delay.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput12Delay.setDescription('The number of seconds an alarm for this input must be present before annunication. The range of this setting is 0..600. This variable is stored in non-volatile memory.')
falconInput13 = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 29))
falconInput13State = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 29, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput13State.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput13State.setDescription('The state of use of Input Number 13. This variable is stored in non-volatile memory.')
falconInput13Reading = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 29, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: falconInput13Reading.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput13Reading.setDescription('The reading for input 13. The reading will be 1 (active) or 0 (inactive)')
falconInput13Label = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 29, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput13Label.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput13Label.setDescription('A user-defined text string associated with Input Number 13. The text string is stored in non-volatile memory.')
falconInput13RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 29, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput13RlyControl.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput13RlyControl.setDescription('The control of the output relays. This is a binary setting with each bit representing an alarm state. To set K1 on a high alarm, set the 1st bit (1). To set K2 on a high alarm, set the 2nd bit (2). To set K1 on a low alarm, set the 3rd bit (4). To set K2 on a low alarm, set the 4th bit (8). To set K1 on a digital alarm, set the 1st bit (1). To set K2 on a digital alarm, set the 2nd bit (2). For no action. set this value to 0. The range of this setting is 0..15. This variable is stored in non-volatile memory.')
falconInput13Delay = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 29, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput13Delay.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput13Delay.setDescription('The number of seconds an alarm for this input must be present before annunication. The range of this setting is 0..600. This variable is stored in non-volatile memory.')
falconInput14 = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 30))
falconInput14State = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 30, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput14State.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput14State.setDescription('The state of use of Input Number 14. This variable is stored in non-volatile memory.')
falconInput14Reading = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 30, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: falconInput14Reading.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput14Reading.setDescription('The reading for input 14. The reading will be 1 (active) or 0 (inactive)')
falconInput14Label = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 30, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput14Label.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput14Label.setDescription('A user-defined text string associated with Input Number 14. The text string is stored in non-volatile memory.')
falconInput14RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 30, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput14RlyControl.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput14RlyControl.setDescription('The control of the output relays. This is a binary setting with each bit representing an alarm state. To set K1 on a high alarm, set the 1st bit (1). To set K2 on a high alarm, set the 2nd bit (2). To set K1 on a low alarm, set the 3rd bit (4). To set K2 on a low alarm, set the 4th bit (8). To set K1 on a digital alarm, set the 1st bit (1). To set K2 on a digital alarm, set the 2nd bit (2). For no action. set this value to 0. The range of this setting is 0..15. This variable is stored in non-volatile memory.')
falconInput14Delay = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 30, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput14Delay.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput14Delay.setDescription('The number of seconds an alarm for this input must be present before annunication. The range of this setting is 0..600. This variable is stored in non-volatile memory.')
falconInput15 = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 31))
falconInput15State = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 31, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput15State.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput15State.setDescription('The state of use of Input Number 15. This variable is stored in non-volatile memory.')
falconInput15Reading = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 31, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: falconInput15Reading.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput15Reading.setDescription('The reading for input 15. The reading will be 1 (active) or 0 (inactive)')
falconInput15Label = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 31, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput15Label.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput15Label.setDescription('A user-defined text string associated with Input Number 15. The text string is stored in non-volatile memory.')
falconInput15RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 31, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput15RlyControl.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput15RlyControl.setDescription('The control of the output relays. This is a binary setting with each bit representing an alarm state. To set K1 on a high alarm, set the 1st bit (1). To set K2 on a high alarm, set the 2nd bit (2). To set K1 on a low alarm, set the 3rd bit (4). To set K2 on a low alarm, set the 4th bit (8). To set K1 on a digital alarm, set the 1st bit (1). To set K2 on a digital alarm, set the 2nd bit (2). For no action. set this value to 0. The range of this setting is 0..15. This variable is stored in non-volatile memory.')
falconInput15Delay = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 31, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput15Delay.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput15Delay.setDescription('The number of seconds an alarm for this input must be present before annunication. The range of this setting is 0..600. This variable is stored in non-volatile memory.')
falconInput16 = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 32))
falconInput16State = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 32, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput16State.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput16State.setDescription('The state of use of Input Number 16. This variable is stored in non-volatile memory.')
falconInput16Reading = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 32, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: falconInput16Reading.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput16Reading.setDescription('The reading for input 16. The reading will be 1 (active) or 0 (inactive)')
falconInput16Label = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 32, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput16Label.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput16Label.setDescription('A user-defined text string associated with Input Number 16. The text string is stored in non-volatile memory.')
falconInput16RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 32, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput16RlyControl.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput16RlyControl.setDescription('The control of the output relays. This is a binary setting with each bit representing an alarm state. To set K1 on a high alarm, set the 1st bit (1). To set K2 on a high alarm, set the 2nd bit (2). To set K1 on a low alarm, set the 3rd bit (4). To set K2 on a low alarm, set the 4th bit (8). To set K1 on a digital alarm, set the 1st bit (1). To set K2 on a digital alarm, set the 2nd bit (2). For no action. set this value to 0. The range of this setting is 0..15. This variable is stored in non-volatile memory.')
falconInput16Delay = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 32, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput16Delay.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput16Delay.setDescription('The number of seconds an alarm for this input must be present before annunication. The range of this setting is 0..600. This variable is stored in non-volatile memory.')
falconInput17 = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 33))
falconInput17State = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 33, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput17State.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput17State.setDescription('The state of use of Input Number 17. This variable is stored in non-volatile memory.')
falconInput17Reading = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 33, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: falconInput17Reading.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput17Reading.setDescription('The reading for input 17. The reading will be 1 (active) or 0 (inactive)')
falconInput17Label = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 33, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput17Label.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput17Label.setDescription('A user-defined text string associated with Input Number 17. The text string is stored in non-volatile memory.')
falconInput17RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 33, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput17RlyControl.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput17RlyControl.setDescription('The control of the output relays. This is a binary setting with each bit representing an alarm state. To set K1 on a high alarm, set the 1st bit (1). To set K2 on a high alarm, set the 2nd bit (2). To set K1 on a low alarm, set the 3rd bit (4). To set K2 on a low alarm, set the 4th bit (8). To set K1 on a digital alarm, set the 1st bit (1). To set K2 on a digital alarm, set the 2nd bit (2). For no action. set this value to 0. The range of this setting is 0..15. This variable is stored in non-volatile memory.')
falconInput17Delay = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 33, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput17Delay.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput17Delay.setDescription('The number of seconds an alarm for this input must be present before annunication. The range of this setting is 0..600. This variable is stored in non-volatile memory.')
falconInput18 = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 34))
falconInput18State = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 34, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput18State.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput18State.setDescription('The state of use of Input Number 18. This variable is stored in non-volatile memory.')
falconInput18Reading = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 34, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: falconInput18Reading.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput18Reading.setDescription('The reading for input 18. The reading will be 1 (active) or 0 (inactive)')
falconInput18Label = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 34, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput18Label.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput18Label.setDescription('A user-defined text string associated with Input Number 18. The text string is stored in non-volatile memory.')
falconInput18RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 34, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput18RlyControl.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput18RlyControl.setDescription('The control of the output relays. This is a binary setting with each bit representing an alarm state. To set K1 on a high alarm, set the 1st bit (1). To set K2 on a high alarm, set the 2nd bit (2). To set K1 on a low alarm, set the 3rd bit (4). To set K2 on a low alarm, set the 4th bit (8). To set K1 on a digital alarm, set the 1st bit (1). To set K2 on a digital alarm, set the 2nd bit (2). For no action. set this value to 0. The range of this setting is 0..15. This variable is stored in non-volatile memory.')
falconInput18Delay = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 34, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput18Delay.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput18Delay.setDescription('The number of seconds an alarm for this input must be present before annunication. The range of this setting is 0..600. This variable is stored in non-volatile memory.')
falconInput19 = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 35))
falconInput19State = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 35, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput19State.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput19State.setDescription('The state of use of Input Number 19. This variable is stored in non-volatile memory.')
falconInput19Reading = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 35, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: falconInput19Reading.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput19Reading.setDescription('The reading for input 19. The reading will be 1 (active) or 0 (inactive)')
falconInput19Label = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 35, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput19Label.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput19Label.setDescription('A user-defined text string associated with Input Number 19. The text string is stored in non-volatile memory.')
falconInput19RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 35, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput19RlyControl.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput19RlyControl.setDescription('The control of the output relays. This is a binary setting with each bit representing an alarm state. To set K1 on a high alarm, set the 1st bit (1). To set K2 on a high alarm, set the 2nd bit (2). To set K1 on a low alarm, set the 3rd bit (4). To set K2 on a low alarm, set the 4th bit (8). To set K1 on a digital alarm, set the 1st bit (1). To set K2 on a digital alarm, set the 2nd bit (2). For no action. set this value to 0. The range of this setting is 0..15. This variable is stored in non-volatile memory.')
falconInput19Delay = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 35, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput19Delay.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput19Delay.setDescription('The number of seconds an alarm for this input must be present before annunication. The range of this setting is 0..600. This variable is stored in non-volatile memory.')
falconInput20 = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 36))
falconInput20State = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 36, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput20State.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput20State.setDescription('The state of use of Input Number 20. This variable is stored in non-volatile memory.')
falconInput20Reading = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 36, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: falconInput20Reading.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput20Reading.setDescription('The reading for input 20. The reading will be 1 (active) or 0 (inactive)')
falconInput20Label = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 36, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput20Label.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput20Label.setDescription('A user-defined text string associated with Input Number 20. The text string is stored in non-volatile memory.')
falconInput20RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 36, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput20RlyControl.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput20RlyControl.setDescription('The control of the output relays. This is a binary setting with each bit representing an alarm state. To set K1 on a high alarm, set the 1st bit (1). To set K2 on a high alarm, set the 2nd bit (2). To set K1 on a low alarm, set the 3rd bit (4). To set K2 on a low alarm, set the 4th bit (8). To set K1 on a digital alarm, set the 1st bit (1). To set K2 on a digital alarm, set the 2nd bit (2). For no action. set this value to 0. The range of this setting is 0..15. This variable is stored in non-volatile memory.')
falconInput20Delay = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 3, 36, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconInput20Delay.setStatus('mandatory')
if mibBuilder.loadTexts: falconInput20Delay.setDescription('The number of seconds an alarm for this input must be present before annunication. The range of this setting is 0..600. This variable is stored in non-volatile memory.')
falconOutputs = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 4))
falconRelay1 = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 4, 1))
falconRelay1State = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normallyoff", 1), ("normallyon", 2), ("forceon", 3), ("forceoff", 4), ("keypadcontrolled", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconRelay1State.setStatus('mandatory')
if mibBuilder.loadTexts: falconRelay1State.setDescription('The state of use of Relay Number 1. The relay can be set for normally open or closed. The relay can be forced to an on or off condition, or controlled by the keypad. This variable is stored in non-volatile memory.')
falconRelay1Status = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normaloff", 1), ("normalon", 2), ("forcedon", 3), ("forcedoff", 4), ("keycodeactive", 5), ("alarmedactive", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: falconRelay1Status.setStatus('mandatory')
if mibBuilder.loadTexts: falconRelay1Status.setDescription('The current status for relay 1.')
falconRelay1Label = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconRelay1Label.setStatus('mandatory')
if mibBuilder.loadTexts: falconRelay1Label.setDescription('A user-defined text string associated with Relay Number 1. The text string is stored in non-volatile memory.')
falconRelay1Time = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconRelay1Time.setStatus('mandatory')
if mibBuilder.loadTexts: falconRelay1Time.setDescription('The number of seconds the relay will be activated. Set this to -1 for indefinitely.')
falconRelay2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 4, 2))
falconRelay2State = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normallyoff", 1), ("normallyon", 2), ("forceon", 3), ("forceoff", 4), ("keypascontrolled", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconRelay2State.setStatus('mandatory')
if mibBuilder.loadTexts: falconRelay2State.setDescription('The state of use of Relay Number 2. The relay can be set for normally open or closed. The relay can be forced to an on or off condition, or controlled by the keypad. This variable is stored in non-volatile memory.')
falconRelay2Status = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normaloff", 1), ("normalon", 2), ("forcedon", 3), ("forcedoff", 4), ("keycodeactive", 5), ("alarmedactive", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: falconRelay2Status.setStatus('mandatory')
if mibBuilder.loadTexts: falconRelay2Status.setDescription('The current status for relay 2.')
falconRelay2Label = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 4, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconRelay2Label.setStatus('mandatory')
if mibBuilder.loadTexts: falconRelay2Label.setDescription('A user-defined text string associated with Relay Number 2. The text string is stored in non-volatile memory.')
falconRelay2Time = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 4, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconRelay2Time.setStatus('mandatory')
if mibBuilder.loadTexts: falconRelay2Time.setDescription('The number of seconds the relay will be activated. Set this to -1 for indefinitely.')
falconRelay3 = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 4, 3))
falconRelay3State = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normallyoff", 1), ("normallyon", 2), ("forceon", 3), ("forceoff", 4), ("keypascontrolled", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconRelay3State.setStatus('mandatory')
if mibBuilder.loadTexts: falconRelay3State.setDescription('The state of use of Relay Number 3. The relay can be set for normally open or closed. The relay can be forced to an on or off condition, or controlled by the keypad. This variable is stored in non-volatile memory.')
falconRelay3Status = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 4, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normaloff", 1), ("normalon", 2), ("forcedon", 3), ("forcedoff", 4), ("keycodeactive", 5), ("alarmedactive", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: falconRelay3Status.setStatus('mandatory')
if mibBuilder.loadTexts: falconRelay3Status.setDescription('The current status for relay 3.')
falconRelay3Label = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 4, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconRelay3Label.setStatus('mandatory')
if mibBuilder.loadTexts: falconRelay3Label.setDescription('A user-defined text string associated with Relay Number 3. The text string is stored in non-volatile memory.')
falconRelay3Time = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 4, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconRelay3Time.setStatus('mandatory')
if mibBuilder.loadTexts: falconRelay3Time.setDescription('The number of seconds the relay will be activated. Set this to -1 for indefinitely.')
falconRelay4 = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 4, 4))
falconRelay4State = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 4, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normallyoff", 1), ("normallyon", 2), ("forceon", 3), ("forceoff", 4), ("keypascontrolled", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconRelay4State.setStatus('mandatory')
if mibBuilder.loadTexts: falconRelay4State.setDescription('The state of use of Relay Number 4. The relay can be set for normally open or closed. The relay can be forced to an on or off condition, or controlled by the keypad. This variable is stored in non-volatile memory.')
falconRelay4Status = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 4, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normaloff", 1), ("normalon", 2), ("forcedon", 3), ("forcedoff", 4), ("keycodeactive", 5), ("alarmedactive", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: falconRelay4Status.setStatus('mandatory')
if mibBuilder.loadTexts: falconRelay4Status.setDescription('The current status for relay 4.')
falconRelay4Label = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 4, 4, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconRelay4Label.setStatus('mandatory')
if mibBuilder.loadTexts: falconRelay4Label.setDescription('A user-defined text string associated with Relay Number 4. The text string is stored in non-volatile memory.')
falconRelay4Time = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 4, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconRelay4Time.setStatus('mandatory')
if mibBuilder.loadTexts: falconRelay4Time.setDescription('The number of seconds the relay will be activated. Set this to -1 for indefinitely.')
falconRelay5 = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 4, 5))
falconRelay5State = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 4, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normallyoff", 1), ("normallyon", 2), ("forceon", 3), ("forceoff", 4), ("keypascontrolled", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconRelay5State.setStatus('mandatory')
if mibBuilder.loadTexts: falconRelay5State.setDescription('The state of use of Relay Number 5. The relay can be set for normally open or closed. The relay can be forced to an on or off condition, or controlled by the keypad. This variable is stored in non-volatile memory.')
falconRelay5Status = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 4, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normaloff", 1), ("normalon", 2), ("forcedon", 3), ("forcedoff", 4), ("keycodeactive", 5), ("alarmedactive", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: falconRelay5Status.setStatus('mandatory')
if mibBuilder.loadTexts: falconRelay5Status.setDescription('The current status for relay 5.')
falconRelay5Label = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 4, 5, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconRelay5Label.setStatus('mandatory')
if mibBuilder.loadTexts: falconRelay5Label.setDescription('A user-defined text string associated with Relay Number 5. The text string is stored in non-volatile memory.')
falconRelay5Time = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 4, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconRelay5Time.setStatus('mandatory')
if mibBuilder.loadTexts: falconRelay5Time.setDescription('The number of seconds the relay will be activated. Set this to -1 for indefinitely.')
falconRelay6 = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 4, 6))
falconRelay6State = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 4, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normallyoff", 1), ("normallyon", 2), ("forceon", 3), ("forceoff", 4), ("keypascontrolled", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconRelay6State.setStatus('mandatory')
if mibBuilder.loadTexts: falconRelay6State.setDescription('The state of use of Relay Number 6. The relay can be set for normally open or closed. The relay can be forced to an on or off condition, or controlled by the keypad. This variable is stored in non-volatile memory.')
falconRelay6Status = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 4, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normaloff", 1), ("normalon", 2), ("forcedon", 3), ("forcedoff", 4), ("keycodeactive", 5), ("alarmedactive", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: falconRelay6Status.setStatus('mandatory')
if mibBuilder.loadTexts: falconRelay6Status.setDescription('The current status for relay 6.')
falconRelay6Label = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 4, 6, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconRelay6Label.setStatus('mandatory')
if mibBuilder.loadTexts: falconRelay6Label.setDescription('A user-defined text string associated with Relay Number 6. The text string is stored in non-volatile memory.')
falconRelay6Time = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 4, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconRelay6Time.setStatus('mandatory')
if mibBuilder.loadTexts: falconRelay6Time.setDescription('The number of seconds the relay will be activated. Set this to -1 for indefinitely.')
falconAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5))
falconAlarmsPresent = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: falconAlarmsPresent.setStatus('current')
if mibBuilder.loadTexts: falconAlarmsPresent.setDescription('The present number of active alarm conditions.')
falconAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 2), )
if mibBuilder.loadTexts: falconAlarmTable.setStatus('current')
if mibBuilder.loadTexts: falconAlarmTable.setDescription('A list of alarm table entries. The table contains zero, one, or many rows at any moment, depending upon the number of alarm conditions in effect. The table is initially empty at agent startup. The agent creates a row in the table each time a condition is detected and deletes that row when that condition no longer pertains. The agent creates the first row with falconAlarmId equal to 1, and increments the value of falconAlarmId each time a new row is created, wrapping to the first free value greater than or equal to 1 when the maximum value of falconAlarmId would otherwise be exceeded. Consequently, after multiple operations, the table may become sparse, e.g., containing entries for rows 95, 100, 101, and 203 and the entries should not be assumed to be in chronological order because falconAlarmId might have wrapped. Alarms are named by an AutonomousType (OBJECT IDENTIFIER), falconAlarmDescr, to allow a single table to reflect well known alarms plus alarms defined by a particular implementation, i.e., as documented in the private enterprise MIB definition for the device. No two rows will have the same value of falconAlarmDescr, since alarms define conditions. In order to meet this requirement, care should be taken in the definition of alarm conditions to insure that a system cannot enter the same condition multiple times simultaneously. The number of rows in the table at any given time is reflected by the value of falconAlarmsPresent.')
falconAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 2, 1), ).setIndexNames((0, "RLE-FALCON-MIB", "falconAlarmId"))
if mibBuilder.loadTexts: falconAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: falconAlarmEntry.setDescription('An entry containing information applicable to a particular alarm.')
falconAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 2, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: falconAlarmId.setStatus('current')
if mibBuilder.loadTexts: falconAlarmId.setDescription('A unique identifier for an alarm condition. This value must remain constant.')
falconAlarmDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: falconAlarmDescr.setStatus('current')
if mibBuilder.loadTexts: falconAlarmDescr.setDescription('A reference to an alarm description object. The object referenced should not be accessible, but rather be used to provide a unique description of the alarm condition.')
falconWellKnownAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3))
falconInput1HighAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 1))
if mibBuilder.loadTexts: falconInput1HighAlarm.setStatus('current')
if mibBuilder.loadTexts: falconInput1HighAlarm.setDescription('The reading for sensor 1 has reached the high limit value.')
falconInput1LowAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 2))
if mibBuilder.loadTexts: falconInput1LowAlarm.setStatus('current')
if mibBuilder.loadTexts: falconInput1LowAlarm.setDescription('The reading for sensor 1 has reached the low limit value.')
falconInput1High2Alarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 3))
if mibBuilder.loadTexts: falconInput1High2Alarm.setStatus('current')
if mibBuilder.loadTexts: falconInput1High2Alarm.setDescription('The reading for sensor 1 has reached the high limit value.')
falconInput1Low2Alarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 4))
if mibBuilder.loadTexts: falconInput1Low2Alarm.setStatus('current')
if mibBuilder.loadTexts: falconInput1Low2Alarm.setDescription('The reading for sensor 1 has reached the low limit value.')
falconInput2HighAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 5))
if mibBuilder.loadTexts: falconInput2HighAlarm.setStatus('current')
if mibBuilder.loadTexts: falconInput2HighAlarm.setDescription('The reading for sensor 2 has reached the high limit value.')
falconInput2LowAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 6))
if mibBuilder.loadTexts: falconInput2LowAlarm.setStatus('current')
if mibBuilder.loadTexts: falconInput2LowAlarm.setDescription('The reading for sensor 2 has reached the low limit value.')
falconInput2High2Alarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 7))
if mibBuilder.loadTexts: falconInput2High2Alarm.setStatus('current')
if mibBuilder.loadTexts: falconInput2High2Alarm.setDescription('The reading for sensor 2 has reached the high limit value.')
falconInput2Low2Alarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 8))
if mibBuilder.loadTexts: falconInput2Low2Alarm.setStatus('current')
if mibBuilder.loadTexts: falconInput2Low2Alarm.setDescription('The reading for sensor 2 has reached the low limit value.')
falconInput3HighAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 9))
if mibBuilder.loadTexts: falconInput3HighAlarm.setStatus('current')
if mibBuilder.loadTexts: falconInput3HighAlarm.setDescription('The reading for sensor 3 has reached the high limit value.')
falconInput3LowAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 10))
if mibBuilder.loadTexts: falconInput3LowAlarm.setStatus('current')
if mibBuilder.loadTexts: falconInput3LowAlarm.setDescription('The reading for sensor 3 has reached the low limit value.')
falconInput3High2Alarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 11))
if mibBuilder.loadTexts: falconInput3High2Alarm.setStatus('current')
if mibBuilder.loadTexts: falconInput3High2Alarm.setDescription('The reading for sensor 3 has reached the high limit value.')
falconInput3Low2Alarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 12))
if mibBuilder.loadTexts: falconInput3Low2Alarm.setStatus('current')
if mibBuilder.loadTexts: falconInput3Low2Alarm.setDescription('The reading for sensor 3 has reached the low limit value.')
falconInput4HighAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 13))
if mibBuilder.loadTexts: falconInput4HighAlarm.setStatus('current')
if mibBuilder.loadTexts: falconInput4HighAlarm.setDescription('The reading for sensor 4 has reached the high limit value.')
falconInput4LowAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 14))
if mibBuilder.loadTexts: falconInput4LowAlarm.setStatus('current')
if mibBuilder.loadTexts: falconInput4LowAlarm.setDescription('The reading for sensor 4 has reached the low limit value.')
falconInput4High2Alarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 15))
if mibBuilder.loadTexts: falconInput4High2Alarm.setStatus('current')
if mibBuilder.loadTexts: falconInput4High2Alarm.setDescription('The reading for sensor 4 has reached the high limit value.')
falconInput4Low2Alarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 16))
if mibBuilder.loadTexts: falconInput4Low2Alarm.setStatus('current')
if mibBuilder.loadTexts: falconInput4Low2Alarm.setDescription('The reading for sensor 4 has reached the low limit value.')
falconInput5HighAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 17))
if mibBuilder.loadTexts: falconInput5HighAlarm.setStatus('current')
if mibBuilder.loadTexts: falconInput5HighAlarm.setDescription('The reading for sensor 5 has reached the high limit value.')
falconInput5LowAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 18))
if mibBuilder.loadTexts: falconInput5LowAlarm.setStatus('current')
if mibBuilder.loadTexts: falconInput5LowAlarm.setDescription('The reading for sensor 5 has reached the low limit value.')
falconInput5High2Alarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 19))
if mibBuilder.loadTexts: falconInput5High2Alarm.setStatus('current')
if mibBuilder.loadTexts: falconInput5High2Alarm.setDescription('The reading for sensor 5 has reached the high limit value.')
falconInput5Low2Alarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 20))
if mibBuilder.loadTexts: falconInput5Low2Alarm.setStatus('current')
if mibBuilder.loadTexts: falconInput5Low2Alarm.setDescription('The reading for sensor 5 has reached the low limit value.')
falconInput6HighAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 21))
if mibBuilder.loadTexts: falconInput6HighAlarm.setStatus('current')
if mibBuilder.loadTexts: falconInput6HighAlarm.setDescription('The reading for sensor 6 has reached the high limit value.')
falconInput6LowAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 22))
if mibBuilder.loadTexts: falconInput6LowAlarm.setStatus('current')
if mibBuilder.loadTexts: falconInput6LowAlarm.setDescription('The reading for sensor 6 has reached the low limit value.')
falconInput6High2Alarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 23))
if mibBuilder.loadTexts: falconInput6High2Alarm.setStatus('current')
if mibBuilder.loadTexts: falconInput6High2Alarm.setDescription('The reading for sensor 6 has reached the high limit value.')
falconInput6Low2Alarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 24))
if mibBuilder.loadTexts: falconInput6Low2Alarm.setStatus('current')
if mibBuilder.loadTexts: falconInput6Low2Alarm.setDescription('The reading for sensor 6 has reached the low limit value.')
falconInput7HighAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 25))
if mibBuilder.loadTexts: falconInput7HighAlarm.setStatus('current')
if mibBuilder.loadTexts: falconInput7HighAlarm.setDescription('The reading for sensor 7 has reached the high limit value.')
falconInput7LowAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 26))
if mibBuilder.loadTexts: falconInput7LowAlarm.setStatus('current')
if mibBuilder.loadTexts: falconInput7LowAlarm.setDescription('The reading for sensor 7 has reached the low limit value.')
falconInput7High2Alarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 27))
if mibBuilder.loadTexts: falconInput7High2Alarm.setStatus('current')
if mibBuilder.loadTexts: falconInput7High2Alarm.setDescription('The reading for sensor 7 has reached the high limit value.')
falconInput7Low2Alarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 28))
if mibBuilder.loadTexts: falconInput7Low2Alarm.setStatus('current')
if mibBuilder.loadTexts: falconInput7Low2Alarm.setDescription('The reading for sensor 7 has reached the low limit value.')
falconInput8HighAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 29))
if mibBuilder.loadTexts: falconInput8HighAlarm.setStatus('current')
if mibBuilder.loadTexts: falconInput8HighAlarm.setDescription('The reading for sensor 8 has reached the high limit value.')
falconInput8LowAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 30))
if mibBuilder.loadTexts: falconInput8LowAlarm.setStatus('current')
if mibBuilder.loadTexts: falconInput8LowAlarm.setDescription('The reading for sensor 8 has reached the low limit value.')
falconInput8High2Alarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 31))
if mibBuilder.loadTexts: falconInput8High2Alarm.setStatus('current')
if mibBuilder.loadTexts: falconInput8High2Alarm.setDescription('The reading for sensor 8 has reached the high limit value.')
falconInput8Low2Alarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 32))
if mibBuilder.loadTexts: falconInput8Low2Alarm.setStatus('current')
if mibBuilder.loadTexts: falconInput8Low2Alarm.setDescription('The reading for sensor 8 has reached the low limit value.')
falconInput1DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 81))
if mibBuilder.loadTexts: falconInput1DigAlarm.setStatus('current')
if mibBuilder.loadTexts: falconInput1DigAlarm.setDescription('The digital input 1 has been activated.')
falconInput2DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 82))
if mibBuilder.loadTexts: falconInput2DigAlarm.setStatus('current')
if mibBuilder.loadTexts: falconInput2DigAlarm.setDescription('The digital input 2 has been activated.')
falconInput3DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 83))
if mibBuilder.loadTexts: falconInput3DigAlarm.setStatus('current')
if mibBuilder.loadTexts: falconInput3DigAlarm.setDescription('The digital input 3 has been activated.')
falconInput4DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 84))
if mibBuilder.loadTexts: falconInput4DigAlarm.setStatus('current')
if mibBuilder.loadTexts: falconInput4DigAlarm.setDescription('The digital input 4 has been activated.')
falconInput5DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 85))
if mibBuilder.loadTexts: falconInput5DigAlarm.setStatus('current')
if mibBuilder.loadTexts: falconInput5DigAlarm.setDescription('The digital input 5 has been activated.')
falconInput6DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 86))
if mibBuilder.loadTexts: falconInput6DigAlarm.setStatus('current')
if mibBuilder.loadTexts: falconInput6DigAlarm.setDescription('The digital input 6 has been activated.')
falconInput7DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 87))
if mibBuilder.loadTexts: falconInput7DigAlarm.setStatus('current')
if mibBuilder.loadTexts: falconInput7DigAlarm.setDescription('The digital input 7 has been activated.')
falconInput8DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 88))
if mibBuilder.loadTexts: falconInput8DigAlarm.setStatus('current')
if mibBuilder.loadTexts: falconInput8DigAlarm.setDescription('The digital input 8 has been activated.')
falconInput9DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 89))
if mibBuilder.loadTexts: falconInput9DigAlarm.setStatus('current')
if mibBuilder.loadTexts: falconInput9DigAlarm.setDescription('The digital input 9 has been activated.')
falconInput10DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 90))
if mibBuilder.loadTexts: falconInput10DigAlarm.setStatus('current')
if mibBuilder.loadTexts: falconInput10DigAlarm.setDescription('The digital input 10 has been activated.')
falconInput11DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 91))
if mibBuilder.loadTexts: falconInput11DigAlarm.setStatus('current')
if mibBuilder.loadTexts: falconInput11DigAlarm.setDescription('The digital input 11 has been activated.')
falconInput12DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 92))
if mibBuilder.loadTexts: falconInput12DigAlarm.setStatus('current')
if mibBuilder.loadTexts: falconInput12DigAlarm.setDescription('The digital input 12 has been activated.')
falconInput13DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 93))
if mibBuilder.loadTexts: falconInput13DigAlarm.setStatus('current')
if mibBuilder.loadTexts: falconInput13DigAlarm.setDescription('The digital input 13 has been activated.')
falconInput14DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 94))
if mibBuilder.loadTexts: falconInput14DigAlarm.setStatus('current')
if mibBuilder.loadTexts: falconInput14DigAlarm.setDescription('The digital input 14 has been activated.')
falconInput15DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 95))
if mibBuilder.loadTexts: falconInput15DigAlarm.setStatus('current')
if mibBuilder.loadTexts: falconInput15DigAlarm.setDescription('The digital input 15 has been activated.')
falconInput16DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 96))
if mibBuilder.loadTexts: falconInput16DigAlarm.setStatus('current')
if mibBuilder.loadTexts: falconInput16DigAlarm.setDescription('The digital input 16 has been activated.')
falconInput17DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 97))
if mibBuilder.loadTexts: falconInput17DigAlarm.setStatus('current')
if mibBuilder.loadTexts: falconInput17DigAlarm.setDescription('The digital input 17 has been activated.')
falconInput18DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 98))
if mibBuilder.loadTexts: falconInput18DigAlarm.setStatus('current')
if mibBuilder.loadTexts: falconInput18DigAlarm.setDescription('The digital input 18 has been activated.')
falconInput19DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 99))
if mibBuilder.loadTexts: falconInput19DigAlarm.setStatus('current')
if mibBuilder.loadTexts: falconInput19DigAlarm.setDescription('The digital input 19 has been activated.')
falconInput20DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 100))
if mibBuilder.loadTexts: falconInput20DigAlarm.setStatus('current')
if mibBuilder.loadTexts: falconInput20DigAlarm.setDescription('The digital input 20 has been activated.')
falconOnBatteryAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 102))
if mibBuilder.loadTexts: falconOnBatteryAlarm.setStatus('current')
if mibBuilder.loadTexts: falconOnBatteryAlarm.setDescription('The On Battery input has been activated.')
falconLowBatteryAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 5, 3, 103))
if mibBuilder.loadTexts: falconLowBatteryAlarm.setStatus('current')
if mibBuilder.loadTexts: falconLowBatteryAlarm.setDescription('The Faclon has detected a low battery condition.')
falconTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 6))
falconAlarmEntryAdded = NotificationType((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 6) + (0,1))
if mibBuilder.loadTexts: falconAlarmEntryAdded.setDescription('An AlarmEntryAdded Trap signifies that the a sensor reading has reached a high or low limit value.')
falconAlarmEntryRemoved = NotificationType((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 6) + (0,2))
if mibBuilder.loadTexts: falconAlarmEntryRemoved.setDescription('An AlarmEntryAdded Trap signifies that the a sensor reading has gone below the high limit value or above the low limit value.')
falconAccessGranted = NotificationType((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 6) + (0,3))
if mibBuilder.loadTexts: falconAccessGranted.setDescription('An falconAccessGranted Trap signifies that a valid key code sequence was processed by the falcon.')
falconAccessDenied = NotificationType((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 6) + (0,4))
if mibBuilder.loadTexts: falconAccessDenied.setDescription('An falconAccessedDenied Trap signifies that an invalid key code sequence was processed by the falcon.')
falconAlarmHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 7))
falconAlarmHistoryEntries = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 7, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: falconAlarmHistoryEntries.setStatus('current')
if mibBuilder.loadTexts: falconAlarmHistoryEntries.setDescription('The present number of entries in the alarm history.')
falconAlarmHistoryClear = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearbuffer", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconAlarmHistoryClear.setStatus('mandatory')
if mibBuilder.loadTexts: falconAlarmHistoryClear.setDescription('Setting this value to ClearBuffer(1) will clear the alarm history buffer. ')
falconAlarmHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 7, 3), )
if mibBuilder.loadTexts: falconAlarmHistoryTable.setStatus('current')
if mibBuilder.loadTexts: falconAlarmHistoryTable.setDescription('A list of alarm history table entries stored in the in the non-volatile memory. The table contains zero, one, or many rows at any moment, depending upon the number of alarm conditions in effect. The falcon creates a row in the table each time a new alarm is detected. The falcon creates the first row with falconAlarmHistoryId equal to 1, and increments the value of falconAlarmHistoryId each time a new row is created, up to a maximum of 100. After 100 entries are created, the falcon will overwrite the earliest entry with the latest alarm. The number of rows in the table at any given time is reflected by the value of falconAlarmHistoryEntries.')
falconAlarmHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 7, 3, 1), ).setIndexNames((0, "RLE-FALCON-MIB", "falconAlarmHistoryId"))
if mibBuilder.loadTexts: falconAlarmHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: falconAlarmHistoryEntry.setDescription('An entry containing information applicable to a particular alarm history entry.')
falconAlarmHistoryId = MibTableColumn((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 7, 3, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: falconAlarmHistoryId.setStatus('current')
if mibBuilder.loadTexts: falconAlarmHistoryId.setDescription('A unique identifier for an alarm condition. This value must remain constant.')
falconAlarmHistoryText = MibTableColumn((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 7, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: falconAlarmHistoryText.setStatus('current')
if mibBuilder.loadTexts: falconAlarmHistoryText.setDescription('A text desciption of the alarm history entry. Each of the strings will have the following format, AHxxx-id-type-timestamp label xxx = number entry in the table id = Alarm ID type = HIGH, LOW, ALM or RTN timestamp = MM/DD/YY HH:MM:SS Label = The label associated with the input channel These alarms are stored in non-volatile memory.')
falconTrapSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 8))
falconPersistantTraps = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconPersistantTraps.setStatus('mandatory')
if mibBuilder.loadTexts: falconPersistantTraps.setDescription('The number of minutes between persistant traps. Set this to 0 to turn off persistant traps. This value is stored in non-volatile memory.')
falconAlarmAcknowledge = MibScalar((1, 3, 6, 1, 4, 1, 3184, 1, 1, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("acknowledgeAlarms", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: falconAlarmAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: falconAlarmAcknowledge.setDescription('Setting this value to AcknowledgeAlarms(1) will stop the falcon from sending persistant traps and dial out sequences.')
falcon8124 = MibIdentifier((1, 3, 6, 1, 4, 1, 3184, 1, 1, 3))
mibBuilder.exportSymbols("RLE-FALCON-MIB", falconInput3=falconInput3, falconInput19Delay=falconInput19Delay, falconInput19DigAlarm=falconInput19DigAlarm, falconInput14Delay=falconInput14Delay, falconRelay6Label=falconRelay6Label, falconInput2State=falconInput2State, falconSystem=falconSystem, falconInput3LowLimit2=falconInput3LowLimit2, falconInput4LowLimit=falconInput4LowLimit, falconInput6Label=falconInput6Label, falconInput8HighLimit2=falconInput8HighLimit2, falconRelay6=falconRelay6, falconRelay1Label=falconRelay1Label, falconKeypadName10=falconKeypadName10, falconAlarmHistoryId=falconAlarmHistoryId, falconInput10DigAlarm=falconInput10DigAlarm, falconInput11Reading=falconInput11Reading, falconInput4Delay=falconInput4Delay, falconAlarmHistoryEntry=falconAlarmHistoryEntry, falconInput3Label=falconInput3Label, falconInput19=falconInput19, falconRelay6Time=falconRelay6Time, falconInput7HighLimit2=falconInput7HighLimit2, falconInput7RlyControl=falconInput7RlyControl, falconInput6Offset=falconInput6Offset, falconInput8Hysteresis=falconInput8Hysteresis, falconInput3Hysteresis=falconInput3Hysteresis, falconInput1Delay=falconInput1Delay, falconInput4=falconInput4, falconInput5LowLimit2=falconInput5LowLimit2, falconInput2HighAlarm=falconInput2HighAlarm, falconInput1HighLimit2=falconInput1HighLimit2, falconInput4Offset=falconInput4Offset, falconRelay1Status=falconRelay1Status, falconInput14State=falconInput14State, falconLowBatteryThreshold=falconLowBatteryThreshold, falconInput1HighLimit=falconInput1HighLimit, falconInput5State=falconInput5State, falconInput2Gain=falconInput2Gain, falconInput16Label=falconInput16Label, falconInput7Hysteresis=falconInput7Hysteresis, falconAlarmTable=falconAlarmTable, falconInput4RlyControl=falconInput4RlyControl, falconKeypadCode12=falconKeypadCode12, falconInput3HighAlarm=falconInput3HighAlarm, falconInput16State=falconInput16State, falconInput19RlyControl=falconInput19RlyControl, falconInput20DigAlarm=falconInput20DigAlarm, falconKeypadName2=falconKeypadName2, falconInput10Reading=falconInput10Reading, falconWellKnownAlarms=falconWellKnownAlarms, falconInput12Reading=falconInput12Reading, falconInput8Gain=falconInput8Gain, falconInput18Label=falconInput18Label, falconKeypadCode4=falconKeypadCode4, falconInput15Reading=falconInput15Reading, falconInput14Reading=falconInput14Reading, falconKeypadCode8=falconKeypadCode8, falconInput20=falconInput20, falconInput19Label=falconInput19Label, falconInput4Label=falconInput4Label, falconInput5RlyControl=falconInput5RlyControl, falconInput9Label=falconInput9Label, falconInput18RlyControl=falconInput18RlyControl, falconInput15State=falconInput15State, falconInput14DigAlarm=falconInput14DigAlarm, falconInput7Reading=falconInput7Reading, falconKeypadCode13=falconKeypadCode13, falconRelay2=falconRelay2, falconInput6Delay=falconInput6Delay, falconAlarmEntryRemoved=falconAlarmEntryRemoved, falconInput5High2Alarm=falconInput5High2Alarm, falconInput7DigAlarm=falconInput7DigAlarm, falconAlarmHistoryTable=falconAlarmHistoryTable, falconRelay4Time=falconRelay4Time, falconInput8LowAlarm=falconInput8LowAlarm, falconMIB=falconMIB, falconRelay3Time=falconRelay3Time, falconInput2Low2Alarm=falconInput2Low2Alarm, falconInput11Delay=falconInput11Delay, falconInput18Delay=falconInput18Delay, falconAlarmHistoryText=falconAlarmHistoryText, falconInput8State=falconInput8State, falconInput15Label=falconInput15Label, falconInput6DigAlarm=falconInput6DigAlarm, falconInput7State=falconInput7State, falconTraps=falconTraps, falconInput14Label=falconInput14Label, falconInput12RlyControl=falconInput12RlyControl, falconKeypadName3=falconKeypadName3, falconInput7UOM=falconInput7UOM, falconInput13=falconInput13, falconInput11RlyControl=falconInput11RlyControl, falconRelay4Status=falconRelay4Status, falconInput11State=falconInput11State, falconInput1RlyControl=falconInput1RlyControl, falconKeypadCode10=falconKeypadCode10, falconKeypadCode11=falconKeypadCode11, falconInput4HighLimit2=falconInput4HighLimit2, falconInput3Low2Alarm=falconInput3Low2Alarm, falconKeypadName15=falconKeypadName15, falconInput3Offset=falconInput3Offset, falconInput5DigAlarm=falconInput5DigAlarm, falcon8124=falcon8124, falconInput9RlyControl=falconInput9RlyControl, falconInput1LowLimit2=falconInput1LowLimit2, falconKeypadName11=falconKeypadName11, falconInput3HighLimit2=falconInput3HighLimit2, falconInput8Label=falconInput8Label, falconInput16DigAlarm=falconInput16DigAlarm, falconInput1=falconInput1, falconInput3HighLimit=falconInput3HighLimit, falconInput8High2Alarm=falconInput8High2Alarm, falconClock=falconClock, falconLowBatteryAlarm=falconLowBatteryAlarm, falconInput12Delay=falconInput12Delay, falconInput7=falconInput7, falconPersistantTraps=falconPersistantTraps, falconRelay4State=falconRelay4State, falconInput3State=falconInput3State, falconIdentModel=falconIdentModel, falconInput6=falconInput6, falconInput4HighLimit=falconInput4HighLimit, falconInput6HighAlarm=falconInput6HighAlarm, falconInput10RlyControl=falconInput10RlyControl, falconInput20Label=falconInput20Label, falconInputVoltage=falconInputVoltage, falconIdent=falconIdent, falconInput7LowAlarm=falconInput7LowAlarm, falconRelay3Label=falconRelay3Label, falconInput2LowLimit2=falconInput2LowLimit2, falconInput4UOM=falconInput4UOM, falconInput13State=falconInput13State, falconInput4State=falconInput4State, falconRelay2Status=falconRelay2Status, falconInput20RlyControl=falconInput20RlyControl, falconInput11=falconInput11, falconKeypadName12=falconKeypadName12, falconInput6Hysteresis=falconInput6Hysteresis, falconInput10Label=falconInput10Label, falconInput3LowAlarm=falconInput3LowAlarm, falconInput2UOM=falconInput2UOM, falconInput9Reading=falconInput9Reading, falconRelay3=falconRelay3, falconAnalogAverage=falconAnalogAverage, falconInput12DigAlarm=falconInput12DigAlarm, falconInput3DigAlarm=falconInput3DigAlarm, falconKeypadCode15=falconKeypadCode15, falconDoorAlarmBypass=falconDoorAlarmBypass, falconKeypadName20=falconKeypadName20, falconInput8DigAlarm=falconInput8DigAlarm, falconRelay5Time=falconRelay5Time, falconKeypad=falconKeypad, falconInput3Gain=falconInput3Gain, falconInput8RlyControl=falconInput8RlyControl, falconKeypadCode19=falconKeypadCode19, falconInput16RlyControl=falconInput16RlyControl, falconAlarmDescr=falconAlarmDescr, falconKeypadName19=falconKeypadName19, rle=rle, falconInput6HighLimit2=falconInput6HighLimit2, falconInput5=falconInput5, falconKeypadName8=falconKeypadName8, falconInput1Offset=falconInput1Offset, falconInput2DigAlarm=falconInput2DigAlarm, falconAlarmHistoryClear=falconAlarmHistoryClear, falconInput5LowAlarm=falconInput5LowAlarm, falconKeypadCode3=falconKeypadCode3, falconInputs=falconInputs, falconInput14RlyControl=falconInput14RlyControl, falconInput6Low2Alarm=falconInput6Low2Alarm, falconInput8Delay=falconInput8Delay, falconInput7LowLimit=falconInput7LowLimit, falconAlarmEntry=falconAlarmEntry, falconInput3UOM=falconInput3UOM, falconInput8UOM=falconInput8UOM, falconKeypadName7=falconKeypadName7, falconInput5Hysteresis=falconInput5Hysteresis, falconInput5HighAlarm=falconInput5HighAlarm, falconRelay2Time=falconRelay2Time, falconKeypadCode14=falconKeypadCode14, falconInput15Delay=falconInput15Delay, falconKeypadName6=falconKeypadName6, falconInput5LowLimit=falconInput5LowLimit, falconRelay5State=falconRelay5State, falconKeypadName16=falconKeypadName16, falconInput2=falconInput2, falconInput5Low2Alarm=falconInput5Low2Alarm, falconInput1Low2Alarm=falconInput1Low2Alarm, falconInput18Reading=falconInput18Reading, falconRelay1=falconRelay1, falconInput10=falconInput10, falconInput6Gain=falconInput6Gain, falconInput3Reading=falconInput3Reading, falconInput5Gain=falconInput5Gain, falconInput13DigAlarm=falconInput13DigAlarm, falconInput3LowLimit=falconInput3LowLimit, falcon=falcon, falconInput4DigAlarm=falconInput4DigAlarm, falconInput8Offset=falconInput8Offset, falconInput16Reading=falconInput16Reading, falconInput8Reading=falconInput8Reading, falconKeypadCode20=falconKeypadCode20, falconInput9Delay=falconInput9Delay, falconInput13Label=falconInput13Label, falconOnBattery=falconOnBattery, falconInput15RlyControl=falconInput15RlyControl, falconKeypadCode17=falconKeypadCode17, falconRelay4Label=falconRelay4Label, falconInput2Hysteresis=falconInput2Hysteresis, falconInput6LowLimit2=falconInput6LowLimit2, falconKeypadCode1=falconKeypadCode1, falconInput9=falconInput9, falconInput2Offset=falconInput2Offset, falconInput2Delay=falconInput2Delay, falconInput4Gain=falconInput4Gain, falconInput4Hysteresis=falconInput4Hysteresis, falconKeypadCode6=falconKeypadCode6, falconAlarmsPresent=falconAlarmsPresent, falconInput20State=falconInput20State, falconInput1Gain=falconInput1Gain, falconInput5Label=falconInput5Label, falconKeypadName1=falconKeypadName1, falconAlarmHistory=falconAlarmHistory, falconInput6Reading=falconInput6Reading, falconInput1Reading=falconInput1Reading, falconInput6LowLimit=falconInput6LowLimit, falconIdentSoftwareVersion=falconIdentSoftwareVersion, falconAlarms=falconAlarms, falconInput8Low2Alarm=falconInput8Low2Alarm, falconInput1Label=falconInput1Label, falconInput13Delay=falconInput13Delay, falconInput10Delay=falconInput10Delay, falconInput14=falconInput14, falconInput5Offset=falconInput5Offset, falconInput18State=falconInput18State, falconRelay5Label=falconRelay5Label, falconInput17DigAlarm=falconInput17DigAlarm, falconAlarmAcknowledge=falconAlarmAcknowledge, falconInput11Label=falconInput11Label, falconInput1LowAlarm=falconInput1LowAlarm, falconTrapSettings=falconTrapSettings, falconInput5Reading=falconInput5Reading, falconAlarmId=falconAlarmId, falconInput15DigAlarm=falconInput15DigAlarm, falconKeypadName4=falconKeypadName4, falconRelay1State=falconRelay1State, falconInput2High2Alarm=falconInput2High2Alarm, falconRelay4=falconRelay4, falconInput2RlyControl=falconInput2RlyControl, falconInput19State=falconInput19State, falconInput6HighLimit=falconInput6HighLimit, falconRelay5Status=falconRelay5Status, falconInput5Delay=falconInput5Delay)
mibBuilder.exportSymbols("RLE-FALCON-MIB", falconIdentManufacturer=falconIdentManufacturer, falconInput2LowAlarm=falconInput2LowAlarm, falconOutputs=falconOutputs, falconInput17Delay=falconInput17Delay, falconInput1High2Alarm=falconInput1High2Alarm, falconRelay6Status=falconRelay6Status, falconInput2Reading=falconInput2Reading, falconInput6State=falconInput6State, falconInput5UOM=falconInput5UOM, falconInput17Reading=falconInput17Reading, falconInput3RlyControl=falconInput3RlyControl, falconKeypadName13=falconKeypadName13, falconKeypadCode9=falconKeypadCode9, falconKeypadName17=falconKeypadName17, falconInput18=falconInput18, falconKeypadName18=falconKeypadName18, falconInput4Reading=falconInput4Reading, falconInput3Delay=falconInput3Delay, falconInput17State=falconInput17State, falconInput3High2Alarm=falconInput3High2Alarm, falconInput12=falconInput12, falconInput5HighLimit2=falconInput5HighLimit2, falconInput4LowLimit2=falconInput4LowLimit2, falconInput6RlyControl=falconInput6RlyControl, falconInput18DigAlarm=falconInput18DigAlarm, falconInput16=falconInput16, falconInput13Reading=falconInput13Reading, falconInput7HighLimit=falconInput7HighLimit, falconInput1State=falconInput1State, falconInput15=falconInput15, falconInput7Label=falconInput7Label, falconInput17RlyControl=falconInput17RlyControl, falconOnBatteryAlarm=falconOnBatteryAlarm, falconKeypadName9=falconKeypadName9, falconInput19Reading=falconInput19Reading, falconInput13RlyControl=falconInput13RlyControl, falconInput2LowLimit=falconInput2LowLimit, falconInput4HighAlarm=falconInput4HighAlarm, falconInput2HighLimit=falconInput2HighLimit, falconInput2Label=falconInput2Label, falconInput2HighLimit2=falconInput2HighLimit2, falconInput6LowAlarm=falconInput6LowAlarm, falconAccessGranted=falconAccessGranted, falconKeypadCode2=falconKeypadCode2, products=products, falconInput7LowLimit2=falconInput7LowLimit2, falconInput7Low2Alarm=falconInput7Low2Alarm, falconAlarmEntryAdded=falconAlarmEntryAdded, falconInput17Label=falconInput17Label, falconInput9State=falconInput9State, falconInput8LowLimit=falconInput8LowLimit, falconKeypadName14=falconKeypadName14, falconAccessDenied=falconAccessDenied, falconInput5HighLimit=falconInput5HighLimit, falconInput6High2Alarm=falconInput6High2Alarm, falconInput8HighAlarm=falconInput8HighAlarm, falconIdentSpecific=falconIdentSpecific, falconInput8=falconInput8, falconInput7HighAlarm=falconInput7HighAlarm, falconRelay6State=falconRelay6State, falconKeypadCode18=falconKeypadCode18, falconInput1Hysteresis=falconInput1Hysteresis, falconRelay3State=falconRelay3State, falconInput1UOM=falconInput1UOM, falconInput16Delay=falconInput16Delay, falconInput12State=falconInput12State, falconInput4Low2Alarm=falconInput4Low2Alarm, falconInput1LowLimit=falconInput1LowLimit, falconInput7Offset=falconInput7Offset, falconInput1HighAlarm=falconInput1HighAlarm, falconKeypadName5=falconKeypadName5, falconRelay2Label=falconRelay2Label, falconInput4LowAlarm=falconInput4LowAlarm, falconRelay1Time=falconRelay1Time, falconInput12Label=falconInput12Label, falconInput9DigAlarm=falconInput9DigAlarm, falconInput17=falconInput17, falconInput4High2Alarm=falconInput4High2Alarm, falconInput1DigAlarm=falconInput1DigAlarm, falconKeypadCode7=falconKeypadCode7, falconAlarmHistoryEntries=falconAlarmHistoryEntries, falconInput20Delay=falconInput20Delay, falconInput8LowLimit2=falconInput8LowLimit2, falconInput7Delay=falconInput7Delay, falconInput10State=falconInput10State, falconInput20Reading=falconInput20Reading, falconRelay2State=falconRelay2State, falconInput8HighLimit=falconInput8HighLimit, falconRelay3Status=falconRelay3Status, falconKeypadCode16=falconKeypadCode16, falconInput7Gain=falconInput7Gain, falconKeypadCode5=falconKeypadCode5, falconInput11DigAlarm=falconInput11DigAlarm, falconInput6UOM=falconInput6UOM, falconRelay5=falconRelay5, falconInput7High2Alarm=falconInput7High2Alarm)
