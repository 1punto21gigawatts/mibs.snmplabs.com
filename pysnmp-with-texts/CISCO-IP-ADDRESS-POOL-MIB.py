#
# PySNMP MIB module CISCO-IP-ADDRESS-POOL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IP-ADDRESS-POOL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:01:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
IpAddressPoolNameOrNull, IpAddrPoolInstanceIdentifierOrZero, IpAddrPoolInstanceIdentifier, IpAddressPoolThresholdUnits, IpAddressPoolGroupName, IpAddressPoolGroupNameOrNull = mibBuilder.importSymbols("CISCO-IP-ADDRESS-POOL-TC-MIB", "IpAddressPoolNameOrNull", "IpAddrPoolInstanceIdentifierOrZero", "IpAddrPoolInstanceIdentifier", "IpAddressPoolThresholdUnits", "IpAddressPoolGroupName", "IpAddressPoolGroupNameOrNull")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetAddress, InetAddressType, InetAddressPrefixLength = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetAddressPrefixLength")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, TimeTicks, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter64, Bits, ModuleIdentity, NotificationType, iso, Integer32, Counter32, IpAddress, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "TimeTicks", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter64", "Bits", "ModuleIdentity", "NotificationType", "iso", "Integer32", "Counter32", "IpAddress", "Gauge32")
TextualConvention, RowStatus, StorageType, DisplayString, RowPointer, TruthValue, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "StorageType", "DisplayString", "RowPointer", "TruthValue", "TimeStamp")
ciscoIpAddressPoolMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 748))
ciscoIpAddressPoolMIB.setRevisions(('2010-02-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoIpAddressPoolMIB.setRevisionsDescriptions(('The initial version of the MIB module.',))
if mibBuilder.loadTexts: ciscoIpAddressPoolMIB.setLastUpdated('201006070000Z')
if mibBuilder.loadTexts: ciscoIpAddressPoolMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoIpAddressPoolMIB.setContactInfo('Cisco Systems, Inc. Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 Telephone: +1 800 553-NETS Email: cs-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoIpAddressPoolMIB.setDescription("This MIB modules defines objects that describe common aspects of IP address pools. IP Address Pool Manager ======================= The IP address pool manager consists of the software that maintains IP address pools and supports the following capabilities: - Create an IP address pool group. - Destroy an IP address pool group. - Create an IP address pool and add it to an IP address pool group. - Remove an IP address pool from an IP address pool group and destroy it. - Create a range of IP addresses and add it to an IP address pool. - Remove a range of IP addresses from an IP address pool and destroy it. - Allocate an IP address from an IP address pool. - Return a previously allocated IP address to the IP address pool that it was allocated from. - Create a set of IP prefixes and adding it to an IP address pool. - Remove a set of IP prefixes from an IP address pool and destroy it. - Allocate an IP prefix from an IP address pool. - Return a previously allocated IP prefix to the IP address pool that it was allocated from. IP Address Pool =============== An IP address pool consists of a collection of IP addresses from which a client (e.g., PPP or DHCP) can allocate an IP address for the purpose of assigning it to a remote peer. This collection consists of a one or more range of IP addresses. Observe that human interfaces allow a user to specify ranges of IP addresses using a variety of means to simplify the process. For example, a human interface may simply allow a user to specify a subnet. No matter what abstraction a human interface employs, the end result is always one or more range of IP addresses. Thus, this MIB module abstracts an IP address pool as one or more range of IP addresses. This places the burden on any application employing other abstractions to transform to the abstraction defined by this MIB module. Alternatively, an IP address pool can also consist of a collection of IP prefixes from which a client can allocate an IP prefix for the purpose of assigning it to a remote peer. This collection consists of one or more set of IP prefixes. Observe that the term 'IP prefix' here can refer to an IPv4 subnet or an IPv6 prefix. IP Address Pool Group ===================== An IP address pool group contains the IP address pools belonging to the same administrative domain. Examples of administrative domains include a Virtual Route Forwarding (VRF) instance and a Virtual Private Network (VPN). Observe that the IP addresses contained by the IP address pools in two distinct IP address pool groups may overlap. IP Address Pool Threshold Monitoring ==================================== An IP address pool manager maintains a number of gauges for the purpose of monitoring the number of allocated IP addresses. We refer to these gauges as 'in-use gauges'. Each in-use gauge has a corresponding state that can have one of two values: 1) Off The IP address pool manager monitors the number of allocated addresses or prefixes. If this value is greater than or equal to the configured rising threshold and the previous value was less than the same rising threshold, then the IP address manager transitions the state to 'On'. 2) On The IP address pool manager monitors the number of allocated addresses or prefixes. If the value is less than or equal to the configured falling threshold and the previous value was greater than the same falling threshold, then the IP address manager transitions the state to 'Off'. Observe that while the values of the configured rising and falling thresholds may be the same, this may result in undesirable behavior (i.e., the IP address pool manager may generate more threshold crossing notifications than desirable). The IP address pool manager only generates threshold crossing notifications when it transitions the corresponding state of an in-use gauge and the value of ciapSystemNotifyEnable is 'true'. The IP address pool manager may maintain in-use gauges for the following: - A range of IP addresses comprising an IP address pool - A set of IP prefixes comprising an IP address pool - An IP address pool - An IP address pool group Observe that the IP address pool manager must initialize the state of each in-use gauge to 'Off' for threshold monitoring to operate in the prescribed manner.")
ciscoIpAddressPoolMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 748, 0))
ciscoIpAddressPoolMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 748, 1))
ciscoIpAddressPoolMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 748, 2))
ciapGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 1))
ciapPools = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2))
ciapPoolGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 3))
ciapAllocatedAddresses = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 4))
ciapNotifyData = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 5))
ciapGlobalNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciapGlobalNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: ciapGlobalNotifyEnable.setDescription('This object specifies whether the IP address pool manager generates notifications defined by this MIB module.')
ciapGlobalThresholdUnits = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 1, 2), IpAddressPoolThresholdUnits().clone('absolute')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciapGlobalThresholdUnits.setStatus('current')
if mibBuilder.loadTexts: ciapGlobalThresholdUnits.setDescription('This object specifies the units for ciapGlobalThresholdRising and ciapGlobalThresholdLow.')
ciapGlobalThresholdRising = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciapGlobalThresholdRising.setStatus('current')
if mibBuilder.loadTexts: ciapGlobalThresholdRising.setDescription('This object specifies the default rising threshold for in-use gauges maintained by the IP address pool manager. This value must be greater than or equal to the value of ciapSystemThresholdFalling. For more detail, see the description of IP address pool threshold monitoring provided by the descriptive text associated with the MODULE-IDENTITY statement.')
ciapGlobalThresholdFalling = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciapGlobalThresholdFalling.setStatus('current')
if mibBuilder.loadTexts: ciapGlobalThresholdFalling.setDescription('This object specifies the default falling threshold for in-use gauges maintained by the IP address pool manager. This value must be less than or equal to the value of ciapSystemThresholdRising. For more detail, see the description of IP address pool threshold monitoring provided by the descriptive text associated with the MODULE-IDENTITY statement.')
ciapPoolIdNext = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 1), IpAddrPoolInstanceIdentifierOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciapPoolIdNext.setStatus('current')
if mibBuilder.loadTexts: ciapPoolIdNext.setDescription("This object indicates the next available identifier for the creation of a new row in the ciapPoolTable. If no available identifier exists, then this object has the value '0'.")
ciapPoolTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 2), )
if mibBuilder.loadTexts: ciapPoolTable.setStatus('current')
if mibBuilder.loadTexts: ciapPoolTable.setDescription('This table lists the IP address pools maintained by the IP address pool manager.')
ciapPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-IP-ADDRESS-POOL-MIB", "ciapPoolId"))
if mibBuilder.loadTexts: ciapPoolEntry.setStatus('current')
if mibBuilder.loadTexts: ciapPoolEntry.setDescription("An entry describes an single IP address pool. A peer SNMP entity may create an IP address pool by setting an instance of ciapPoolStatus to 'createAndWait' or 'createAndGo'. Observe that an implementation that does not support these options must specify these limitations in an agent capabilities statement. Other management entities (e.g., the local console) may perform actions resulting in the creation of an IP address pool. In these cases, the IP address pool manager must automatically create a row in the ciapPoolTable. A peer SNMP entity may destroy an IP address pool by setting the corresponding instance of ciapPoolStatus to 'destroy'. Observe that an implementation that does not support this option must specify this limitation in an agent capabilities statement. Other management entities may perform actions resulting in the destruction of an IP address pool. In these cases, the IP address pool manager must automatically destroy the corresponding row in the ciapPoolTable.")
ciapPoolId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 2, 1, 1), IpAddrPoolInstanceIdentifier())
if mibBuilder.loadTexts: ciapPoolId.setStatus('current')
if mibBuilder.loadTexts: ciapPoolId.setDescription('This object uniquely identifies the IP address pool.')
ciapPoolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciapPoolStatus.setStatus('current')
if mibBuilder.loadTexts: ciapPoolStatus.setDescription("This object specifies the status of this IP address pool. The following columns must be valid before activating this IP address pool: - ciapPoolStorage - ciapPoolName - ciapPoolType - ciapPoolContainedIn - ciapPoolThresholdUnits - ciapPoolThresholdRising - ciapPoolThresholdFalling However, these objects specify valid default values. Thus, it is possible to use create-and-go row creation semantics without setting additional columns. An implementation must allow an EMS/NMS to modify any column when this IP address pool is 'active', including corresponding columns in tables that have a one-to-one or sparse dependent relationship on the ciapPoolTable. An implementation must document any variation in a corresponding agent capabilities statement.")
ciapPoolStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 2, 1, 3), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciapPoolStorage.setStatus('current')
if mibBuilder.loadTexts: ciapPoolStorage.setDescription('This object specifies the memory realization of this IP address pool.')
ciapPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 2, 1, 4), IpAddressPoolNameOrNull()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciapPoolName.setStatus('current')
if mibBuilder.loadTexts: ciapPoolName.setDescription("This object indicates the name assigned to this IP address pool. This name must uniquely identify an IP address pool in the context of the IP address pool manager. Observe that an implementation may reserve names for special IP address pools. For example, an IP address may reserve the name 'default' to denote the default IP address pool. An implementation should document reserved names in a corresponding agent capabilities statement.")
ciapPoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("shared", 2), ("local", 3), ("dhcp", 4))).clone('shared')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciapPoolType.setStatus('current')
if mibBuilder.loadTexts: ciapPoolType.setDescription("This object specifies the how the system uses this IP address pool: 'other' The implementation of the MIB module does not recognize this IP address pool's type. 'shared' The system uses this IP address pool regardless of the entity (e.g., IPCP, IPsec, DHCP) allocating IP addresses from this IP address pool. Sometimes we use the term 'untyped pool' to refer to an IP address pool used in this manner. 'local' The system restricts the use this IP address pool to assign IP addresses to peers when establishing a connection (e.g., PPP and IPsec) to the system. 'dhcp' The system restricts the use of this IP address pool to a DHCP server.")
ciapPoolContainedIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 2, 1, 6), IpAddressPoolGroupNameOrNull()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciapPoolContainedIn.setStatus('current')
if mibBuilder.loadTexts: ciapPoolContainedIn.setDescription("This object specifies the name of the IP address pool group to which this IP address pool belongs. If the value of this column is the null string, then the pool does not belong to any IP address pool group. Observe that an implementation may reserve names for special IP address pool groups. For example, an IP address may reserve the name 'default' to denote the default Virtual Route Forwarding (VRF) instance. An implementation should document reserved names in a corresponding agent capabilities statement.")
ciapPoolThresholdUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 2, 1, 7), IpAddressPoolThresholdUnits()).setUnits('IP addresses').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciapPoolThresholdUnits.setStatus('current')
if mibBuilder.loadTexts: ciapPoolThresholdUnits.setDescription('This object specifies the units for the corresponding instances of ciapPoolThresholdRising and ciapPoolThresholdFalling. The value of ciapGlobalThresholdUnits.0 specifies the default value for newly created instances of this object.')
ciapPoolThresholdRising = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciapPoolThresholdRising.setStatus('current')
if mibBuilder.loadTexts: ciapPoolThresholdRising.setDescription("This object specifies the rising threshold for the in-use gauge corresponding to this IP address pool, which must have a value greater than or equal to the corresponding instance of ciapPoolThresholdFalling. If this value is '0' and the corresponding instance of ciapPoolThresholdFalling is '0', then the IP address pool manager does not monitor this IP address pool for threshold crossing events. The value of ciapGlobalThresholdRising.0 specifies the default value for newly created instances of this object. For more detail, see the description of IP address pool threshold monitoring provided by the descriptive text associated with the MODULE-IDENTITY statement.")
ciapPoolThresholdFalling = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciapPoolThresholdFalling.setStatus('current')
if mibBuilder.loadTexts: ciapPoolThresholdFalling.setDescription("This object specifies the falling threshold for the in-use gauge corresponding to this IP address pool, which must have a value less than or equal to the corresponding instance of ciapPoolThresholdRising. If this value is '0' and the corresponding instance of ciapPoolThresholdRising is '0', then the IP address pool manager does not monitor this IP address pool for threshold crossing events. The value of ciapGlobalThresholdFalling.0 specifies the default value for newly created instances of this object. For more detail, see the description of IP address pool threshold monitoring provided by the descriptive text associated with the MODULE-IDENTITY statement.")
ciapPoolAddressesInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 2, 1, 10), Gauge32()).setUnits('IP addresses/prefixes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciapPoolAddressesInUse.setStatus('current')
if mibBuilder.loadTexts: ciapPoolAddressesInUse.setDescription('This object indicates the number of IP addresses or prefixes allocated from this IP address pool.')
ciapPoolAddressesFree = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 2, 1, 11), Gauge32()).setUnits('IP addresses/prefixes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciapPoolAddressesFree.setStatus('current')
if mibBuilder.loadTexts: ciapPoolAddressesFree.setDescription('This object indicates the number of available IP addresses or prefixes in this IP address pool.')
ciapPoolTableChanged = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciapPoolTableChanged.setStatus('current')
if mibBuilder.loadTexts: ciapPoolTableChanged.setDescription('This object indicates the value of sysUpTime the last time one of the following changes occurred to the ciapPoolTable: - A row was created and added to the ciapPoolTable. - A row was removed from the ciapPoolTable and destroyed. - An instance of an object in the row was modified, including objects contained by the ciapPoolTable and tables that have a one-to-one or sparse dependent relationship on the ciapPoolTable.')
ciapRangeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 4), )
if mibBuilder.loadTexts: ciapRangeTable.setStatus('current')
if mibBuilder.loadTexts: ciapRangeTable.setDescription('This table lists the ranges of IP addresses contained by each IP address pool maintained by the IP address pool manager.')
ciapRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 4, 1), ).setIndexNames((0, "CISCO-IP-ADDRESS-POOL-MIB", "ciapPoolId"), (0, "CISCO-IP-ADDRESS-POOL-MIB", "ciapRangeAddressType"), (0, "CISCO-IP-ADDRESS-POOL-MIB", "ciapRangeAddressLower"))
if mibBuilder.loadTexts: ciapRangeEntry.setStatus('current')
if mibBuilder.loadTexts: ciapRangeEntry.setDescription("An entry describes a single range of IP addresses contained by an IP address pool. A peer SNMP entity may create a range of IP addresses by setting an instance of ciapRangeStatus to 'createAndWait' or 'createAndGo'. Observe that an implementation that does not support these options must specify these limitations in an agent capabilities statement. Other management entities (e.g., the local console) may perform actions resulting in the creation of a range of IP addresses. In these cases, the IP address pool manager must automatically create a row in the ciapRangeTable. A peer SNMP entity may destroy a range of IP addresses by setting the corresponding instance of ciapRangeStatus to 'destroy'. Observe that an implementation that does not support this option must specify this limitation in an agent capabilities statement. Other management entities may perform actions resulting in the destruction of a range of IP addresses. In these cases, the IP address pool manager must automatically destroy the corresponding row in the ciapRangeTable.")
ciapRangeAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 4, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ciapRangeAddressType.setStatus('current')
if mibBuilder.loadTexts: ciapRangeAddressType.setDescription('This object indicates the type of IP address denoted by the ciapRangeAddressLower and ciapRangeAddressUpper.')
ciapRangeAddressLower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 4, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(4, 16)))
if mibBuilder.loadTexts: ciapRangeAddressLower.setStatus('current')
if mibBuilder.loadTexts: ciapRangeAddressLower.setDescription('This object indicates the first IP address in this range of IP addresses.')
ciapRangeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciapRangeStatus.setStatus('current')
if mibBuilder.loadTexts: ciapRangeStatus.setDescription("This object specifies the status of this range of IP addresses. The following columns must be valid before activating this range of IP addresses: - ciapRangeStorage - ciapRangeAddressUpper - ciapRangeCacheSize - ciapRangeRecycleDelay - ciapRangePriority - ciapRangeThresholdUnits - ciapRangeThresholdRising - ciapRangeThresholdFalling An implementation must allow an EMS/NMS to modify any column when this range of IP addresses is 'active', including corresponding columns in tables that have a one-to-one or sparse dependent relationship on the ciapRangeTable. An implementation must document any variation in a corresponding agent capabilities statement.")
ciapRangeStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 4, 1, 4), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciapRangeStorage.setStatus('current')
if mibBuilder.loadTexts: ciapRangeStorage.setDescription('This object specifies the memory realization of this range of IP addresses.')
ciapRangeAddressUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 4, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciapRangeAddressUpper.setStatus('current')
if mibBuilder.loadTexts: ciapRangeAddressUpper.setDescription('This object specifies the last IP address in this range of IP addresses. This value must denote an IP address greater than or equal to the IP address indicated by the corresponding instance of ciapRangeAddressLower.')
ciapRangeCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 4, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('IP addresses').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciapRangeCacheSize.setStatus('current')
if mibBuilder.loadTexts: ciapRangeCacheSize.setDescription('This object specifies the size of the address cache associated with this range of IP addresses. The address cache provides a list of IP addresses most recently returned to this range of IP addresses. The IP address pool manager always allocates IP addresses from the address cache first. If an implementation does not support address caching, then it must report a value of zero for this object and it must not allow write access to this object.')
ciapRangeRecycleDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 4, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciapRangeRecycleDelay.setStatus('current')
if mibBuilder.loadTexts: ciapRangeRecycleDelay.setDescription('This object specifies the time the IP address pool manager holds an IP address after its return before making it available for reallocation. Observe that the IP addresses held by the IP address pool manager are considered in use until actually returned to the pool. If an implementation does not support delayed recycling of IP addresses, then it must always report a value of zero for this object and it must not allow write access to this object.')
ciapRangePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 4, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciapRangePriority.setStatus('current')
if mibBuilder.loadTexts: ciapRangePriority.setDescription("This object specifies the relative priority assigned to this range of IP addresses. The IP address pool manager allocates IP addresses from ranges of IP addresses based on a range's assigned priority, where higher values specify higher priority.")
ciapRangeThresholdUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 4, 1, 9), IpAddressPoolThresholdUnits()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciapRangeThresholdUnits.setStatus('current')
if mibBuilder.loadTexts: ciapRangeThresholdUnits.setDescription('This object specifies the units for the corresponding instances of ciapRangeThresholdRising and ciapRangeThresholdFalling. The value of ciapGlobalThresholdUnits.0 specifies the default value for newly created instances of this object.')
ciapRangeThresholdRising = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 4, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciapRangeThresholdRising.setStatus('current')
if mibBuilder.loadTexts: ciapRangeThresholdRising.setDescription("This object specifies the rising threshold for the in-use gauge corresponding to this range of IP addresses, which must have a value greater than or equal to the corresponding instance of ciapRangeThresholdFalling. If this value is '0' and the corresponding instance of ciapRangeThresholdFalling is '0', then the IP address pool manager does not monitor this range of IP addresses for threshold crossing events. The value of ciapGlobalThresholdRising.0 specifies the default value for newly created instances of this object. For more detail, see the description of IP address pool threshold monitoring provided by the descriptive text associated with the MODULE-IDENTITY statement.")
ciapRangeThresholdFalling = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 4, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciapRangeThresholdFalling.setStatus('current')
if mibBuilder.loadTexts: ciapRangeThresholdFalling.setDescription("This object specifies the falling threshold for the in-use gauge corresponding to this range of IP addresses, which must have a value less than or equal to the corresponding instance of ciapRangeThresholdRising. If this value is '0' and the corresponding instance of ciapRangeThresholdRising is '0', then the IP address pool manager does not monitor this range of IP addresses for threshold crossing events. The value of ciapGlobalThresholdFalling.0 specifies the default value for newly created instances of this object. For more detail, see the description of IP address pool threshold monitoring provided by the descriptive text associated with the MODULE-IDENTITY statement.")
ciapRangeAddressesInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 4, 1, 12), Gauge32()).setUnits('IP addresses').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciapRangeAddressesInUse.setStatus('current')
if mibBuilder.loadTexts: ciapRangeAddressesInUse.setDescription('This object indicates the number of IP addresses allocated from this range of IP addresses.')
ciapRangeAddressesFree = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 4, 1, 13), Gauge32()).setUnits('IP addresses').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciapRangeAddressesFree.setStatus('current')
if mibBuilder.loadTexts: ciapRangeAddressesFree.setDescription('This object indicates the number of available IP addresses in this range of IP addresses.')
ciapRangeTableChanged = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciapRangeTableChanged.setStatus('current')
if mibBuilder.loadTexts: ciapRangeTableChanged.setDescription('This object indicates the value of sysUpTime the last time one of the following changes occurred to the ciapRangeTable: - A row was created and added to the ciapRangeTable. - A row was removed from the ciapRangeTable and destroyed. - An instance of an object in the row was modified, including objects contained by the ciapRangeTable and tables that have a one-to-one or sparse dependent relationship on the ciapRangeTable.')
ciapPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 6), )
if mibBuilder.loadTexts: ciapPrefixTable.setStatus('current')
if mibBuilder.loadTexts: ciapPrefixTable.setDescription('This table lists the IP prefixes contained by each IP address pool maintained by the IP address pool manager.')
ciapPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 6, 1), ).setIndexNames((0, "CISCO-IP-ADDRESS-POOL-MIB", "ciapPoolId"), (0, "CISCO-IP-ADDRESS-POOL-MIB", "ciapPrefixType"), (0, "CISCO-IP-ADDRESS-POOL-MIB", "ciapPrefixAddress"), (0, "CISCO-IP-ADDRESS-POOL-MIB", "ciapPrefixAddressMask"))
if mibBuilder.loadTexts: ciapPrefixEntry.setStatus('current')
if mibBuilder.loadTexts: ciapPrefixEntry.setDescription("An entry describes a single set of IP prefixes contained by an IP address pool. In this context, an IP prefix also describes a IPv4 subnet. A peer SNMP entity may create a set of IP prefixes by setting an instance of ciapPrefixStatus to 'createAndWait' or 'createAndGo'. Observe that an implementation that does not support these options must specify these limitations in an agent capabilities statement. Other management entities (e.g., the local console) may perform actions resulting in the creation of a set of IP prefixes. In these cases, the IP address pool manager must automatically create a row in the ciapPrefixTable. A peer SNMP enitty may destroy a set of IP prefixes by setting the corresponding instance of ciapPrefixStatus to 'destroy'. Observe that an implementation that does not support this option must specify this limitation in an agent capabilities statement. Other management entities may perform action resulting in the destruction of a set of IP prefixes. In these cases, the IP address pool manager must automatically destroy the corresponding row in the ciapPrefixTable.")
ciapPrefixType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 6, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ciapPrefixType.setStatus('current')
if mibBuilder.loadTexts: ciapPrefixType.setDescription('This object indicates the type of IP address denoted by ciapPrefixAddress and ciapPrefixMask.')
ciapPrefixAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 6, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(4, 16)))
if mibBuilder.loadTexts: ciapPrefixAddress.setStatus('current')
if mibBuilder.loadTexts: ciapPrefixAddress.setDescription("This object indicates the first IP prefix in this set of IP prefixes when bitwise AND'ed with the corresponding instance of ciapPrefixAddressMask.")
ciapPrefixAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 6, 1, 3), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(4, 16)))
if mibBuilder.loadTexts: ciapPrefixAddressMask.setStatus('current')
if mibBuilder.loadTexts: ciapPrefixAddressMask.setDescription("This object indicates a mask which when bitwise AND'ed with the corresponding instance of ciapPrefixAddress yields the first IP prefix in this set of IP prefixes.")
ciapPrefixStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciapPrefixStatus.setStatus('current')
if mibBuilder.loadTexts: ciapPrefixStatus.setDescription("This object specifies the status of this set of IP prefixes. The following columns must be valid before activating this range of IP addresses: - ciapPrefixStorage - ciapPrefixAssignedLength - ciapPrefixCacheSize - ciapPrefixRecycleDelay - ciapPrefixPriority - ciapPrefixThresholdUnits - ciapPrefixThresholdRising - ciapPrefixThresholdFalling An implementation must allow an EMS/NMS to modify any column when this set of IP prefixes is 'active', including corresponding columns in tables that have a one-to-one or sparse dependent relationship on the ciapPrefixTable. An implementation must document any variation in a corresponding agent capabilities statement.")
ciapPrefixStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 6, 1, 5), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciapPrefixStorage.setStatus('current')
if mibBuilder.loadTexts: ciapPrefixStorage.setDescription('This object specifies the memory realization of this set of IP prefixes.')
ciapPrefixAssignedLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 6, 1, 6), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciapPrefixAssignedLength.setStatus('current')
if mibBuilder.loadTexts: ciapPrefixAssignedLength.setDescription('This object specifies the length of the IP prefix assigned from this set of IP prefixes. The value of this column must be greater than or equal to the length of the first IP prefix in this set of IP prefixes.')
ciapPrefixCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 6, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('IP prefixes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciapPrefixCacheSize.setStatus('current')
if mibBuilder.loadTexts: ciapPrefixCacheSize.setDescription('This object specifies the size of the IP prefix cache associated with this set of IP prefixes. The IP prefix cache provides a list of IP prefixes most recently returned to this range of IP prefixes. The IP address pool manager always allocates IP prefixes from the IP prefix cache first. If an implementation does not support address caching, then it must report a value of zero for this object and it must not allow write access to this object.')
ciapPrefixRecycleDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 6, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciapPrefixRecycleDelay.setStatus('current')
if mibBuilder.loadTexts: ciapPrefixRecycleDelay.setDescription('This object specifies the time the IP address pool manager holds an IP prefix after its return before making it available for reallocation. Observe that the IP prefixes held by the IP address pool manager are considered in use until actually returned to the pool. If an implementation does not support delayed recycling of IP prefixes, then it must always report a value of zero for this object and it must not allow write access to this object.')
ciapPrefixPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 6, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciapPrefixPriority.setStatus('current')
if mibBuilder.loadTexts: ciapPrefixPriority.setDescription("This object specifies the relative priority assigned to this set of IP prefixes. The IP address pool manager allocates IP prefixes from sets of IP prefixes based on a set's assigned priority, where higher values specify higher priority.")
ciapPrefixThresholdUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 6, 1, 10), IpAddressPoolThresholdUnits()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciapPrefixThresholdUnits.setStatus('current')
if mibBuilder.loadTexts: ciapPrefixThresholdUnits.setDescription('This object specifies the units for the corresponding instances of ciapPrefixThresholdRising and ciapPrefixThresholdFalling. The value of ciapGlobalThresholdUnits.0 specifies the default value for newly created instances of this object.')
ciapPrefixThresholdRising = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 6, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciapPrefixThresholdRising.setStatus('current')
if mibBuilder.loadTexts: ciapPrefixThresholdRising.setDescription("This object specifies the rising threshold for the in-use gauge corresponding to this set of IP prefixes, which must have a value greater than or equal to the value of ciapPrefixThresholdFalling. If this value is '0' and the corresponding instance of ciapPrefixThresholdFalling is '0', then the IP address pool manager does not monitor this set of IP prefixes for threshold crossing events. The value of ciapGlobalThresholdRising.0 specifies the default value for newly created instances of this object. For more detail, see the description of IP address pool threshold monitoring provided by the descriptive text associated with the MODULE-IDENTITY statement.")
ciapPrefixThresholdFalling = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 6, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciapPrefixThresholdFalling.setStatus('current')
if mibBuilder.loadTexts: ciapPrefixThresholdFalling.setDescription("This object specifies the falling threshold for the in-use gauge corresponding to this set of IP prefixes, which must have a value less than or equal to the corresponding instance of ciapPrefixThresholdRising. If this value is '0' and the corresponding instance of ciapPrefixThresholdRising is '0', then the IP address pool manager does not monitor this set of IP prefixes for threshold crossing events. The value of ciapGlobalThresholdFalling.0 specifies the default value for newly created instances of this object. For more detail, see the description of IP address pool threshold monitoring provided by the descriptive text associated with the MODULE-IDENTITY statement.")
ciapPrefixPrefixesInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 6, 1, 13), Gauge32()).setUnits('IP prefixes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciapPrefixPrefixesInUse.setStatus('current')
if mibBuilder.loadTexts: ciapPrefixPrefixesInUse.setDescription('This object indicates the number of IP prefixes allocated from this set of IP prefixes.')
ciapPrefixPrefixesFree = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 6, 1, 14), Gauge32()).setUnits('IP prefixes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciapPrefixPrefixesFree.setStatus('current')
if mibBuilder.loadTexts: ciapPrefixPrefixesFree.setDescription('This object indicates the number of available IP prefixes in this set of IP prefixes.')
ciapPrefixTableChanged = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 2, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciapPrefixTableChanged.setStatus('current')
if mibBuilder.loadTexts: ciapPrefixTableChanged.setDescription('This object indicates the value of sysUpTime the last time one of the following changes occurred to the ciapPrefixTable: - A row was created and added to the ciapPrefixTable. - A row was removed from the ciapPrefixTable and destroyed. - An instance of an object in the row was modified, including objects contained by the ciapPrefixTable and tables that have a one-to-one or sparse dependent relationship on the ciapPrefixTable.')
ciapPoolGroupIdNext = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 3, 1), IpAddrPoolInstanceIdentifierOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciapPoolGroupIdNext.setStatus('current')
if mibBuilder.loadTexts: ciapPoolGroupIdNext.setDescription("This object indicates the next available identifier for the creation of a new row in the ciapPoolGroupTable. If no available identifier exists, then this object has the value '0'.")
ciapPoolGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 3, 2), )
if mibBuilder.loadTexts: ciapPoolGroupTable.setStatus('current')
if mibBuilder.loadTexts: ciapPoolGroupTable.setDescription('This table lists the IP address pool groups maintained by the IP address pool manager.')
ciapPoolGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-IP-ADDRESS-POOL-MIB", "ciapPoolGroupId"))
if mibBuilder.loadTexts: ciapPoolGroupEntry.setStatus('current')
if mibBuilder.loadTexts: ciapPoolGroupEntry.setDescription('An entry describes an IP address pool group. The IP address pool manager creates an IP address pool group and inserts it into the ciapPoolGroupTable when an entity sets the value of an instance of ciapPoolContainedIn to a value that no other IP address pool belongs to. Likewise, the IP address pool manager removes an IP address pool group from the ciapPoolGroupTable and destroys it when no IP address pools belong to it.')
ciapPoolGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 3, 2, 1, 1), IpAddrPoolInstanceIdentifier())
if mibBuilder.loadTexts: ciapPoolGroupId.setStatus('current')
if mibBuilder.loadTexts: ciapPoolGroupId.setDescription('This object uniquely identifies the IP address pool group.')
ciapPoolGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 3, 2, 1, 2), IpAddressPoolGroupName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciapPoolGroupName.setStatus('current')
if mibBuilder.loadTexts: ciapPoolGroupName.setDescription('This object indicates the name assigned to the IP address pool group.')
ciapPoolGroupThresholdUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 3, 2, 1, 3), IpAddressPoolThresholdUnits()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciapPoolGroupThresholdUnits.setStatus('current')
if mibBuilder.loadTexts: ciapPoolGroupThresholdUnits.setDescription('This object specifies the units for the corresponding instances of ciapPoolGroupThresholdRising and ciapPoolGroupThresholdFalling. The value of ciapGlobalThresholdUnits.0 specifies the default value for newly created instances of this object.')
ciapPoolGroupThresholdRising = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 3, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciapPoolGroupThresholdRising.setStatus('current')
if mibBuilder.loadTexts: ciapPoolGroupThresholdRising.setDescription("This object specifies the rising threshold for the in-use gauge corresponding to this IP address pool group, which must have a value greater than or equal to the corresponding instance of ciapPoolGroupThresholdFalling. If this value is '0' and the corresponding instance of ciapPoolGroupThresholdRising is '0', then the IP address pool manager does not monitor this IP address pool group for threshold crossing events. The value of ciapGlobalThresholdRising.0 specifies the default value for newly created instances of this object. For more detail, see the description of IP address pool threshold monitoring provided by the descriptive text associated with the MODULE-IDENTITY statement.")
ciapPoolGroupThresholdFalling = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 3, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciapPoolGroupThresholdFalling.setStatus('current')
if mibBuilder.loadTexts: ciapPoolGroupThresholdFalling.setDescription("This object specifies the falling threshold for the in-use gauge corresponding to this IP address pool group, which must have a value less than or equal to the corresponding instance of ciapPoolGroupThresholdRising. If this value is '0' and the corresponding instance of ciapPoolGroupThresholdFalling is '0', then the IP address pool manager does not monitor this IP address pool group for threshold crossing events. The value of ciapGlobalThresholdFalling.0 specifies the default value for newly created instances of this object. For more detail, see the description of IP address pool threshold monitoring provided by the descriptive text associated with the MODULE-IDENTITY statement.")
ciapPoolGroupAddressesInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 3, 2, 1, 6), Gauge32()).setUnits('IP addresses/prefixes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciapPoolGroupAddressesInUse.setStatus('current')
if mibBuilder.loadTexts: ciapPoolGroupAddressesInUse.setDescription('This object indicates the total number of IP addresses or prefixes allocated from IP address pools in this IP address pool group.')
ciapPoolGroupAddressesFree = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 3, 2, 1, 7), Gauge32()).setUnits('IP addresses/prefixes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciapPoolGroupAddressesFree.setStatus('current')
if mibBuilder.loadTexts: ciapPoolGroupAddressesFree.setDescription('This object indicates the total number of available IP addresses or prefixes in the IP address pools in this IP address pool group.')
ciapPoolGroupContainsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 3, 3), )
if mibBuilder.loadTexts: ciapPoolGroupContainsTable.setStatus('current')
if mibBuilder.loadTexts: ciapPoolGroupContainsTable.setDescription('This table lists the IP address pools contained by each IP address pool group maintained by the IP address pool manager.')
ciapPoolGroupContainsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 3, 3, 1), ).setIndexNames((0, "CISCO-IP-ADDRESS-POOL-MIB", "ciapPoolGroupId"), (0, "CISCO-IP-ADDRESS-POOL-MIB", "ciapPoolGroupContainsId"))
if mibBuilder.loadTexts: ciapPoolGroupContainsEntry.setStatus('current')
if mibBuilder.loadTexts: ciapPoolGroupContainsEntry.setDescription('An entry identifies a single IP address pool contained by an IP address pool group. The IP address pool manager creates a row in the ciapPoolGroupContainsTable upon creation of a row in the ciapPoolTable. Likewise, the IP address pool manager destroys a row in the ciapPoolGroupContainsTable upon the destruction of a row in the ciapPoolTable.')
ciapPoolGroupContainsId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 3, 3, 1, 1), IpAddrPoolInstanceIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciapPoolGroupContainsId.setStatus('current')
if mibBuilder.loadTexts: ciapPoolGroupContainsId.setDescription('This object indicates the IP address pool contained by the corresponding IP address pool group.')
ciapAllocatedAddressTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 4, 1), )
if mibBuilder.loadTexts: ciapAllocatedAddressTable.setStatus('current')
if mibBuilder.loadTexts: ciapAllocatedAddressTable.setDescription('This table lists of the IP addresses, IPv4 subnets, and IPv6 prefixes allocated from the IP address pools maintained by the IP address pool manager.')
ciapAllocatedAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-IP-ADDRESS-POOL-MIB", "ciapPoolId"), (0, "CISCO-IP-ADDRESS-POOL-MIB", "ciapAllocatedAddressType"), (0, "CISCO-IP-ADDRESS-POOL-MIB", "ciapAllocatedAddress"))
if mibBuilder.loadTexts: ciapAllocatedAddressEntry.setStatus('current')
if mibBuilder.loadTexts: ciapAllocatedAddressEntry.setDescription('An entry describes a single IP address, IPv4 subnet, or IPv6 prefix allocated from an IP address pool maintained by the IP address pool manager. The IP address pool manager creates a row in the ciapAllocatedAddressTable when it successfully allocates an IP address, IPv4 subnet, or IPv6 prefix from an IP address pool. Likewise, the IP address pool manager destroys a row in the ciapAllocatedAddressTable when it returns an IP address, IPv4 subnet, or IPv6 prefix to the IP address pool that it was previously allocated from.')
ciapAllocatedAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 4, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ciapAllocatedAddressType.setStatus('current')
if mibBuilder.loadTexts: ciapAllocatedAddressType.setDescription('This object indicates the type of IP address for the corresponding instance of ciapAllocatedAddress.')
ciapAllocatedAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 4, 1, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(4, 16)))
if mibBuilder.loadTexts: ciapAllocatedAddress.setStatus('current')
if mibBuilder.loadTexts: ciapAllocatedAddress.setDescription('This object indicates the IP address, IPv4 subnet, or IPv6 prefix allocated from the corresponding IP address pool.')
ciapAllocatedAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 4, 1, 1, 3), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(4, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciapAllocatedAddressMask.setStatus('current')
if mibBuilder.loadTexts: ciapAllocatedAddressMask.setDescription("This object indicates a mask for the corresponding instance of ciapAllocatedAddress. If the value of this column is all 1's, then the corresponding instance of ciapAllocatedAddress denotes an IP address. If the value of this column is not all 1's and the corresponding instance of ciapAllocatedAddressType is 'ipv4', then the corresponding instance of ciapAllocatedAddress denotes an IPv4 subnet when logically ANDed with the value of this column. If the value of this column is not all 1's and the corresponding instance of ciapAllocatedAddressType is 'ipv6', then the corresponding instance of ciapAllocatedAddress denotes an IPv6 prefix when logically ANDed with the value of this column.")
ciapNotifyResource = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 5, 1), RowPointer()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ciapNotifyResource.setStatus('current')
if mibBuilder.loadTexts: ciapNotifyResource.setDescription('This object indicates the resource for which the in-use gauge crosses a threshold the last time the system generated a ciapEventThresholdRising or ciapEventThresholdFalling notification. More specifically, this object indicates a row pointer corresponding to the resource, which may be one a row in one of the following tables: - ciapPoolGroupTable to indicate the in-use gauge associated with an IP address pool group has crossed a threshold. - ciapPoolTable to indicate the in-use gauge associated with an IP address pool has crossed a threshold. - ciapRangeTable to indicate the in-use gauge associated with a range of IP addresses has crossed a threshold. - ciapNetworkTable to indicate the in-use gauge associated with a set of IP networks (which includes IPv4 subnets and IPv6 prefixes) has crossed a threshold.')
ciapNotifyThresholdUnits = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 5, 2), IpAddressPoolThresholdUnits()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ciapNotifyThresholdUnits.setStatus('current')
if mibBuilder.loadTexts: ciapNotifyThresholdUnits.setDescription('This object indicates the units for: 1) ciapNotifyThresholdRising the last time the system generated a ciapEventThresholdRising notification, or 2) ciapNotifyThresholdFalling the last time the system generated a ciapEventThresholdFalling notification.')
ciapNotifyThresholdRising = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 5, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ciapNotifyThresholdRising.setStatus('current')
if mibBuilder.loadTexts: ciapNotifyThresholdRising.setDescription('This object indicates the rising threshold an in-use gauge crossed the last time the system generated a ciapEventThresholdRising notification.')
ciapNotifyThresholdFalling = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 5, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ciapNotifyThresholdFalling.setStatus('current')
if mibBuilder.loadTexts: ciapNotifyThresholdFalling.setDescription('This object indicates the falling threshold an in-use gauge cross the last time the system generated a ciapEventThresholdFalling notification.')
ciapNotifyInUse = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 5, 5), Gauge32()).setUnits('IP addresses/prefixes').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ciapNotifyInUse.setStatus('current')
if mibBuilder.loadTexts: ciapNotifyInUse.setDescription('This object indicates the value of the in-use gauge that crossed a threshold the last time the system generated a ciapEventThresholdRising or ciapEventThresholdFalling notification.')
ciapNotifyFree = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 748, 1, 5, 6), Gauge32()).setUnits('IP addresses/prefixes').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ciapNotifyFree.setStatus('current')
if mibBuilder.loadTexts: ciapNotifyFree.setDescription('This object indicates the value of the corresponding free gauge the last time the system generated a ciapThresholdRising or ciapThresholdFalling notification.')
ciapEventThresholdRising = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 748, 0, 1)).setObjects(("CISCO-IP-ADDRESS-POOL-MIB", "ciapNotifyResource"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapNotifyThresholdUnits"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapNotifyThresholdRising"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapNotifyInUse"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapNotifyFree"))
if mibBuilder.loadTexts: ciapEventThresholdRising.setStatus('current')
if mibBuilder.loadTexts: ciapEventThresholdRising.setDescription("The system generates this notification when the IP address pool manager transitions the state of the in-use gauge associated with a resource from 'Off' to 'On'. For more detail, see the description of IP address pool threshold monitoring provided by the descriptive text associated with the MODULE-IDENTITY statement.")
ciapEventThresholdFalling = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 748, 0, 2)).setObjects(("CISCO-IP-ADDRESS-POOL-MIB", "ciapNotifyResource"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapNotifyThresholdUnits"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapNotifyThresholdFalling"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapNotifyInUse"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapNotifyFree"))
if mibBuilder.loadTexts: ciapEventThresholdFalling.setStatus('current')
if mibBuilder.loadTexts: ciapEventThresholdFalling.setDescription("The system generates this notification when the IP address pool manager transitions the state of the in-use gauge associated with a resource from 'On' to 'Off'. For more detail, see the description of IP address pool threshold monitoring provided by the descriptive text associated with the MODULE-IDENTITY statement.")
ciscoIpAddressPoolMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 748, 2, 1))
ciscoIpAddressPoolMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 748, 2, 2))
ciscoIpAddressPoolCompliance01 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 748, 2, 1, 1)).setObjects(("CISCO-IP-ADDRESS-POOL-MIB", "ciapGlobalGroup"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapPoolGroup"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapRangeGroup"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapPoolGroupGroup"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapNotifDataGroup"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapNotifsGroup"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapPrefixGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpAddressPoolCompliance01 = ciscoIpAddressPoolCompliance01.setStatus('current')
if mibBuilder.loadTexts: ciscoIpAddressPoolCompliance01.setDescription('This compliance statement specifies the minimal requirements an implementation must meet in order to claim full compliance with the definition of the CISCO-IP-ADDRESS-POOL-MIB.')
ciapGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 748, 2, 2, 1)).setObjects(("CISCO-IP-ADDRESS-POOL-MIB", "ciapGlobalNotifyEnable"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapGlobalThresholdUnits"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapGlobalThresholdRising"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapGlobalThresholdFalling"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciapGlobalGroup = ciapGlobalGroup.setStatus('current')
if mibBuilder.loadTexts: ciapGlobalGroup.setDescription('This group contains objects describing data that applies to the IP address pool manager as a whole.')
ciapPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 748, 2, 2, 2)).setObjects(("CISCO-IP-ADDRESS-POOL-MIB", "ciapPoolIdNext"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapPoolName"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapPoolStatus"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapPoolStorage"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapPoolType"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapPoolContainedIn"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapPoolThresholdUnits"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapPoolThresholdRising"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapPoolThresholdFalling"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapPoolAddressesInUse"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapPoolAddressesFree"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapPoolTableChanged"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapAllocatedAddressMask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciapPoolGroup = ciapPoolGroup.setStatus('current')
if mibBuilder.loadTexts: ciapPoolGroup.setDescription('This group contains objects describing IP address pools.')
ciapRangeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 748, 2, 2, 3)).setObjects(("CISCO-IP-ADDRESS-POOL-MIB", "ciapRangeStatus"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapRangeStorage"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapRangeAddressUpper"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapRangeCacheSize"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapRangeRecycleDelay"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapRangePriority"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapRangeThresholdUnits"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapRangeThresholdRising"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapRangeThresholdFalling"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapRangeAddressesInUse"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapRangeAddressesFree"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapRangeTableChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciapRangeGroup = ciapRangeGroup.setStatus('current')
if mibBuilder.loadTexts: ciapRangeGroup.setDescription('This group contains objects describing IP addresses comprising an IP address pool.')
ciapPrefixGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 748, 2, 2, 4)).setObjects(("CISCO-IP-ADDRESS-POOL-MIB", "ciapPrefixStatus"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapPrefixStorage"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapPrefixAssignedLength"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapPrefixCacheSize"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapPrefixRecycleDelay"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapPrefixPriority"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapPrefixThresholdUnits"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapPrefixThresholdRising"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapPrefixThresholdFalling"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapPrefixPrefixesInUse"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapPrefixPrefixesFree"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapPrefixTableChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciapPrefixGroup = ciapPrefixGroup.setStatus('current')
if mibBuilder.loadTexts: ciapPrefixGroup.setDescription('This group contains objects describing IP prefixes comprising an IP address pool.')
ciapPoolGroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 748, 2, 2, 5)).setObjects(("CISCO-IP-ADDRESS-POOL-MIB", "ciapPoolGroupIdNext"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapPoolGroupName"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapPoolGroupThresholdUnits"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapPoolGroupThresholdRising"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapPoolGroupThresholdFalling"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapPoolGroupAddressesInUse"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapPoolGroupAddressesFree"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapPoolGroupContainsId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciapPoolGroupGroup = ciapPoolGroupGroup.setStatus('current')
if mibBuilder.loadTexts: ciapPoolGroupGroup.setDescription('This group contains objects describing IP address pool groups.')
ciapNotifDataGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 748, 2, 2, 6)).setObjects(("CISCO-IP-ADDRESS-POOL-MIB", "ciapNotifyResource"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapNotifyThresholdUnits"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapNotifyThresholdRising"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapNotifyThresholdFalling"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapNotifyInUse"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapNotifyFree"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciapNotifDataGroup = ciapNotifDataGroup.setStatus('current')
if mibBuilder.loadTexts: ciapNotifDataGroup.setDescription('This group contains objects describing data conveyed by notifications defined by this MIB module.')
ciapNotifsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 748, 2, 2, 7)).setObjects(("CISCO-IP-ADDRESS-POOL-MIB", "ciapEventThresholdRising"), ("CISCO-IP-ADDRESS-POOL-MIB", "ciapEventThresholdFalling"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciapNotifsGroup = ciapNotifsGroup.setStatus('current')
if mibBuilder.loadTexts: ciapNotifsGroup.setDescription('This group contains notifications used to indicate threshold crossing events relating to ranges of IP addresses.')
mibBuilder.exportSymbols("CISCO-IP-ADDRESS-POOL-MIB", ciscoIpAddressPoolMIBConform=ciscoIpAddressPoolMIBConform, ciapPrefixThresholdUnits=ciapPrefixThresholdUnits, ciapPrefixTable=ciapPrefixTable, ciapPrefixAddress=ciapPrefixAddress, ciapPoolGroupTable=ciapPoolGroupTable, ciapPoolStatus=ciapPoolStatus, ciapRangeAddressesInUse=ciapRangeAddressesInUse, ciapGlobalGroup=ciapGlobalGroup, ciapNotifyInUse=ciapNotifyInUse, ciapRangeThresholdUnits=ciapRangeThresholdUnits, ciapPoolTable=ciapPoolTable, ciapRangeRecycleDelay=ciapRangeRecycleDelay, ciapPoolGroupId=ciapPoolGroupId, ciapRangeAddressLower=ciapRangeAddressLower, ciapPoolGroupGroup=ciapPoolGroupGroup, ciapPoolGroups=ciapPoolGroups, ciapAllocatedAddress=ciapAllocatedAddress, ciapPoolAddressesFree=ciapPoolAddressesFree, ciapPrefixPrefixesFree=ciapPrefixPrefixesFree, ciapPoolThresholdFalling=ciapPoolThresholdFalling, ciscoIpAddressPoolMIB=ciscoIpAddressPoolMIB, ciapAllocatedAddressMask=ciapAllocatedAddressMask, ciapRangeCacheSize=ciapRangeCacheSize, ciapPoolGroupName=ciapPoolGroupName, ciapPoolTableChanged=ciapPoolTableChanged, ciapRangeTableChanged=ciapRangeTableChanged, ciapPrefixPrefixesInUse=ciapPrefixPrefixesInUse, ciapNotifyThresholdFalling=ciapNotifyThresholdFalling, ciscoIpAddressPoolMIBNotifs=ciscoIpAddressPoolMIBNotifs, ciapEventThresholdRising=ciapEventThresholdRising, ciapNotifyFree=ciapNotifyFree, ciapRangeTable=ciapRangeTable, ciapPoolId=ciapPoolId, ciscoIpAddressPoolMIBGroups=ciscoIpAddressPoolMIBGroups, ciapPrefixStatus=ciapPrefixStatus, ciapPoolGroupContainsTable=ciapPoolGroupContainsTable, ciapPrefixGroup=ciapPrefixGroup, ciapPoolGroup=ciapPoolGroup, ciapAllocatedAddressTable=ciapAllocatedAddressTable, ciapAllocatedAddressType=ciapAllocatedAddressType, ciapGlobalNotifyEnable=ciapGlobalNotifyEnable, ciapPrefixRecycleDelay=ciapPrefixRecycleDelay, ciapPrefixAssignedLength=ciapPrefixAssignedLength, ciapPools=ciapPools, ciapPoolEntry=ciapPoolEntry, ciapPrefixStorage=ciapPrefixStorage, ciapPoolIdNext=ciapPoolIdNext, ciapPoolGroupContainsId=ciapPoolGroupContainsId, ciapPrefixAddressMask=ciapPrefixAddressMask, ciapNotifDataGroup=ciapNotifDataGroup, ciapPoolContainedIn=ciapPoolContainedIn, ciapPrefixThresholdFalling=ciapPrefixThresholdFalling, ciapRangeAddressesFree=ciapRangeAddressesFree, ciapPoolGroupAddressesFree=ciapPoolGroupAddressesFree, ciscoIpAddressPoolMIBObjects=ciscoIpAddressPoolMIBObjects, ciapPrefixEntry=ciapPrefixEntry, ciapPrefixType=ciapPrefixType, ciapPoolGroupEntry=ciapPoolGroupEntry, ciscoIpAddressPoolCompliance01=ciscoIpAddressPoolCompliance01, ciapPrefixPriority=ciapPrefixPriority, ciapEventThresholdFalling=ciapEventThresholdFalling, ciapPoolThresholdUnits=ciapPoolThresholdUnits, ciapPrefixTableChanged=ciapPrefixTableChanged, ciapRangeStorage=ciapRangeStorage, ciapPoolStorage=ciapPoolStorage, ciapGlobalThresholdFalling=ciapGlobalThresholdFalling, ciapRangeAddressType=ciapRangeAddressType, ciapRangeStatus=ciapRangeStatus, ciapPoolAddressesInUse=ciapPoolAddressesInUse, ciapPrefixThresholdRising=ciapPrefixThresholdRising, ciapPoolGroupAddressesInUse=ciapPoolGroupAddressesInUse, ciapPoolName=ciapPoolName, ciapRangeThresholdRising=ciapRangeThresholdRising, ciapPoolGroupContainsEntry=ciapPoolGroupContainsEntry, ciapRangeThresholdFalling=ciapRangeThresholdFalling, ciapRangePriority=ciapRangePriority, ciapNotifyThresholdRising=ciapNotifyThresholdRising, ciapPoolGroupThresholdUnits=ciapPoolGroupThresholdUnits, ciapNotifyData=ciapNotifyData, ciapPoolType=ciapPoolType, ciapPoolThresholdRising=ciapPoolThresholdRising, ciapAllocatedAddressEntry=ciapAllocatedAddressEntry, ciapGlobalThresholdUnits=ciapGlobalThresholdUnits, ciapNotifsGroup=ciapNotifsGroup, ciapRangeGroup=ciapRangeGroup, ciapNotifyResource=ciapNotifyResource, ciapGlobalThresholdRising=ciapGlobalThresholdRising, ciapPrefixCacheSize=ciapPrefixCacheSize, ciapPoolGroupIdNext=ciapPoolGroupIdNext, ciapNotifyThresholdUnits=ciapNotifyThresholdUnits, ciscoIpAddressPoolMIBCompliances=ciscoIpAddressPoolMIBCompliances, ciapAllocatedAddresses=ciapAllocatedAddresses, ciapPoolGroupThresholdFalling=ciapPoolGroupThresholdFalling, PYSNMP_MODULE_ID=ciscoIpAddressPoolMIB, ciapPoolGroupThresholdRising=ciapPoolGroupThresholdRising, ciapRangeAddressUpper=ciapRangeAddressUpper, ciapRangeEntry=ciapRangeEntry, ciapGlobal=ciapGlobal)
