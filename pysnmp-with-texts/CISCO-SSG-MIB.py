#
# PySNMP MIB module CISCO-SSG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SSG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:12:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoPort, = mibBuilder.importSymbols("CISCO-TC", "CiscoPort")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ModuleIdentity, Unsigned32, TimeTicks, iso, ObjectIdentity, NotificationType, IpAddress, Integer32, Bits, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ModuleIdentity", "Unsigned32", "TimeTicks", "iso", "ObjectIdentity", "NotificationType", "IpAddress", "Integer32", "Bits", "Gauge32")
DisplayString, DateAndTime, TimeInterval, RowStatus, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "TimeInterval", "RowStatus", "TextualConvention", "TruthValue")
ciscoSsgMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 260))
ciscoSsgMIB.setRevisions(('2005-12-22 00:00', '2003-10-17 00:00', '2002-03-25 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoSsgMIB.setRevisionsDescriptions(('Imported Unsigned32 from SNMPv2-SMI instead of CISCO-TC.', 'Added new objects for Transparent Auto-Logon feature.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoSsgMIB.setLastUpdated('200512220000Z')
if mibBuilder.loadTexts: ciscoSsgMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoSsgMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-ssg@cisco.com')
if mibBuilder.loadTexts: ciscoSsgMIB.setDescription('The MIB Module manages Service Selection Gateway(SSG) devices. Service Selection Gateway(SSG) is a switching solution for service providers who offer intranet,extranet, and Internet connections to subscribers using broadband access technology such as digital subscriber lines, cable modems, or wireless to allow simultaneous access to network services. Acronyms and terms: SSD Service Selection Dashboard SESM Subscriber Edge Service Manager GGSN Gateway GPRS Support Node APN Access Point Name')
ciscoSsgMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 260, 1))
cssgCfgObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 1))
cssgStatsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 2))
cssgService = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 3))
cssgExcludedAPN = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 4))
cssgExcludedDomain = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 5))
cssgTcpRedirect = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 6))
cssgServiceIfBinds = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 7))
cssgRadiusClients = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 8))
cssgPortMap = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 9))
cssgTal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 10))
cssgCfgSsgEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssgCfgSsgEnabled.setStatus('current')
if mibBuilder.loadTexts: cssgCfgSsgEnabled.setDescription('An indication of whether SSG Service is enabled.')
cssgCfgAutoDomainMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("basic", 2), ("extended", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssgCfgAutoDomainMode.setStatus('current')
if mibBuilder.loadTexts: cssgCfgAutoDomainMode.setDescription('An indication of whether Auto-Domain feature is enabled. This feature allows a user to be automatically connected to a service based on the APN or structured username.')
cssgCfgLocalForwardingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssgCfgLocalForwardingEnabled.setStatus('current')
if mibBuilder.loadTexts: cssgCfgLocalForwardingEnabled.setDescription('An indication of whether Local Forwarding is enabled. This feature enables SSG to forward packets locally between connected subscribers.')
cssgCfgAutoLogOffMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("icmp", 2), ("arp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssgCfgAutoLogOffMode.setStatus('current')
if mibBuilder.loadTexts: cssgCfgAutoLogOffMode.setDescription('An indication of whether Auto Logoff feature is enabled. This feature enables SSG to initiate logoff if connectivity to a host is lost. Connectivity to a host is checked using ARP or ICMP ping mechanisms.')
cssgCfgRadiusProxyEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssgCfgRadiusProxyEnabled.setStatus('current')
if mibBuilder.loadTexts: cssgCfgRadiusProxyEnabled.setDescription('An indication of whether Radius-Proxy feature is enabled. This feature allows SSG to act as a generic Radius Proxy for non-SSD clients such as GGSN.')
cssgCfgTcpRedirectEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssgCfgTcpRedirectEnabled.setStatus('current')
if mibBuilder.loadTexts: cssgCfgTcpRedirectEnabled.setDescription('An indication of whether TCP redirect is enabled. This feature redirects certain TCP packets to captive portals.')
cssgCfgAutoDomainNatEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssgCfgAutoDomainNatEnabled.setStatus('current')
if mibBuilder.loadTexts: cssgCfgAutoDomainNatEnabled.setDescription('An indication of whether NAT(Network Address Translation) is enabled for autodomain users. This feature determines whether the subscriber gets the autodomain service assigned IP Address.')
cssgCfgPortBundleHostKeyEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssgCfgPortBundleHostKeyEnabled.setStatus('current')
if mibBuilder.loadTexts: cssgCfgPortBundleHostKeyEnabled.setDescription('An indication of whether PortBundle-Host Key feature is enabled. This feature enables SESM to identify subscribers based on the PortBundle(combination of IP Address, and a range of ports) assigned by the SSG.')
cssgCfgTransPassThroughEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssgCfgTransPassThroughEnabled.setStatus('current')
if mibBuilder.loadTexts: cssgCfgTransPassThroughEnabled.setDescription('An indication of whether Transparent pass through feature is enabled. This feature allows an unauthenticated subscriber traffic to be routed through SSG in either direction.')
cssgCfgAutoLogOffInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 1, 10), TimeInterval()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssgCfgAutoLogOffInterval.setStatus('current')
if mibBuilder.loadTexts: cssgCfgAutoLogOffInterval.setDescription('The time-interval at which connectivity to a host is checked. If the host is not reachable, SSG logs off the host if auto-logff feature is enabled.')
cssgCfgAutoLogOffIcmpRetries = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssgCfgAutoLogOffIcmpRetries.setStatus('current')
if mibBuilder.loadTexts: cssgCfgAutoLogOffIcmpRetries.setDescription('The number of ICMP ping retries SSG does to check connectivity to a host.')
cssgCfgMaxServicesPerUser = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssgCfgMaxServicesPerUser.setStatus('current')
if mibBuilder.loadTexts: cssgCfgMaxServicesPerUser.setDescription('The maximum number of services allowed per user.')
cssgCfgAccountingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssgCfgAccountingEnabled.setStatus('current')
if mibBuilder.loadTexts: cssgCfgAccountingEnabled.setDescription('An indication of whether Acccounting is enabled in SSG. If enabled, SSG generates Accounting Records and sends to AAA Server.')
cssgCfgDefaultNetworkType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 1, 14), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssgCfgDefaultNetworkType.setStatus('current')
if mibBuilder.loadTexts: cssgCfgDefaultNetworkType.setDescription('A value that represents the type of the IP Address stored in the object cssgCfgDefaultNetwork.')
cssgCfgDefaultNetwork = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 1, 15), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssgCfgDefaultNetwork.setStatus('current')
if mibBuilder.loadTexts: cssgCfgDefaultNetwork.setDescription('The IP Address or subnet that users will be able to access without authentication. This is the address where the Cisco SSD/SESM resides.')
cssgCfgRadiusAuthenPort = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 1, 16), CiscoPort()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssgCfgRadiusAuthenPort.setStatus('current')
if mibBuilder.loadTexts: cssgCfgRadiusAuthenPort.setDescription('The port on which SSG receives access request packets from Radius clients.')
cssgCfgRadiusAccountingPort = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 1, 17), CiscoPort()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssgCfgRadiusAccountingPort.setStatus('current')
if mibBuilder.loadTexts: cssgCfgRadiusAccountingPort.setDescription('The port on which SSG receives accounting packets from Radius clients.')
cssgCfgRadiusFwdAcctPktsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssgCfgRadiusFwdAcctPktsEnabled.setStatus('current')
if mibBuilder.loadTexts: cssgCfgRadiusFwdAcctPktsEnabled.setDescription('An indication of whether SSG forwards Accounting Packets received from Radius Clients to AAA Server.')
cssgCfgAccountingInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(60, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssgCfgAccountingInterval.setStatus('current')
if mibBuilder.loadTexts: cssgCfgAccountingInterval.setDescription('The interval at which Accounting records are sent to AAA Server.')
cssgCfgTCPRedirGrpForUnAuthUsers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssgCfgTCPRedirGrpForUnAuthUsers.setStatus('current')
if mibBuilder.loadTexts: cssgCfgTCPRedirGrpForUnAuthUsers.setDescription('The TCP Redirect Group to which Unauthenticated users are directed.')
cssgCfgTCPRedirGrpForUnAuthServ = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 1, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssgCfgTCPRedirGrpForUnAuthServ.setStatus('current')
if mibBuilder.loadTexts: cssgCfgTCPRedirGrpForUnAuthServ.setDescription('The TCP Redirect Group to which unauthorized service access users are directed.')
cssgCfgTcpRedirGrpForSMTP = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssgCfgTcpRedirGrpForSMTP.setStatus('current')
if mibBuilder.loadTexts: cssgCfgTcpRedirGrpForSMTP.setDescription('TCP Redirect Group to which SMTP traffic is redirected.')
cssgCfgTcpRedirGrpForInitialCapt = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 1, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssgCfgTcpRedirGrpForInitialCapt.setStatus('current')
if mibBuilder.loadTexts: cssgCfgTcpRedirGrpForInitialCapt.setDescription('The TCP Redirect Group for initial captivation.')
cssgCfgTcpRedirGrpForAdvCapt = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssgCfgTcpRedirGrpForAdvCapt.setStatus('current')
if mibBuilder.loadTexts: cssgCfgTcpRedirGrpForAdvCapt.setDescription('The TCP Redirect Group for advertising captivation.')
cssgCfgRadiusClntRbtNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 1, 25), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssgCfgRadiusClntRbtNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: cssgCfgRadiusClntRbtNotifEnabled.setDescription('An indication of whether SSG generates notification if a Radius Client reboots.')
cssgCfgAAAServerDownNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 1, 26), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssgCfgAAAServerDownNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: cssgCfgAAAServerDownNotifEnabled.setDescription('An indication of whether SSG generates notification if connectivity to AAA is lost or if it goes down.')
cssgCfgTalEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 1, 27), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssgCfgTalEnabled.setStatus('current')
if mibBuilder.loadTexts: cssgCfgTalEnabled.setDescription('An indication of whether Transparent Auto Logon feature is enabled on SSG.')
cssgStatsLoginAttempts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssgStatsLoginAttempts.setStatus('current')
if mibBuilder.loadTexts: cssgStatsLoginAttempts.setDescription('The number of login attempts onto SSG.')
cssgStatsLoginsSuccessful = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssgStatsLoginsSuccessful.setStatus('current')
if mibBuilder.loadTexts: cssgStatsLoginsSuccessful.setDescription('The number of successful logins onto SSG.')
cssgStatsActiveSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssgStatsActiveSessions.setStatus('current')
if mibBuilder.loadTexts: cssgStatsActiveSessions.setDescription('The current number of active connections on SSG.')
cssgStatsActiveHosts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 2, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssgStatsActiveHosts.setStatus('current')
if mibBuilder.loadTexts: cssgStatsActiveHosts.setDescription('The current number of active Hosts on SSG.')
cssgStatsActiveServices = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 2, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssgStatsActiveServices.setStatus('current')
if mibBuilder.loadTexts: cssgStatsActiveServices.setDescription('The current number of active services on SSG.')
cssgStatsPODs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssgStatsPODs.setStatus('current')
if mibBuilder.loadTexts: cssgStatsPODs.setDescription('The number of Packets of Death sent to Radius Client.')
cssgServiceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 3, 1), )
if mibBuilder.loadTexts: cssgServiceTable.setStatus('current')
if mibBuilder.loadTexts: cssgServiceTable.setDescription('A list of SSG Services which subscribers have logged onto. A Service entry in this table is transient data and gets removed when the last subscriber using this Service logs off.')
cssgServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-SSG-MIB", "cssgServiceName"))
if mibBuilder.loadTexts: cssgServiceEntry.setStatus('current')
if mibBuilder.loadTexts: cssgServiceEntry.setDescription('Detailed information concerning a Service.')
cssgServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: cssgServiceName.setStatus('current')
if mibBuilder.loadTexts: cssgServiceName.setDescription('The name of the service profile.')
cssgServiceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("concurrent", 2), ("sequential", 3))).clone('concurrent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssgServiceMode.setStatus('current')
if mibBuilder.loadTexts: cssgServiceMode.setDescription('An optional attribute which defines whether the user is able to log in to a service while simultaneously connected to other services (concurrent) or cannot access any other services while using this service (sequential). The default is concurrent.')
cssgServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("passthrough", 2), ("tunnel", 3), ("proxy", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssgServiceType.setStatus('current')
if mibBuilder.loadTexts: cssgServiceType.setDescription('This attribute indicates the type of service. pass-through - Indicates that the user authentication is not done during logon to this service. This is the default. tunnel - Indicates that this is a L2TP tunneled service. proxy - Indicates that the SSG performs user authentication during logon to this service.')
cssgServiceIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 3, 1, 1, 4), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cssgServiceIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: cssgServiceIdleTimeout.setDescription('The idle timeout of a session in seconds. A value of 0 indicates that there is no timeout.')
cssgServiceSessionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 3, 1, 1, 5), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cssgServiceSessionTimeout.setStatus('current')
if mibBuilder.loadTexts: cssgServiceSessionTimeout.setDescription('The maximum length of a session in seconds. A value of 0 indicates that there is no timeout.')
cssgServiceActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 3, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssgServiceActiveSessions.setStatus('current')
if mibBuilder.loadTexts: cssgServiceActiveSessions.setDescription('The active number of connections to this service.')
cssgServiceDNSPrimaryIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 3, 1, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssgServiceDNSPrimaryIpType.setStatus('current')
if mibBuilder.loadTexts: cssgServiceDNSPrimaryIpType.setDescription('The IP address type of Primary DNS Server for this service.')
cssgServiceDNSPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 3, 1, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssgServiceDNSPrimary.setStatus('current')
if mibBuilder.loadTexts: cssgServiceDNSPrimary.setDescription('The primary DNS server for this service.')
cssgServiceDNSSecondaryIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 3, 1, 1, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssgServiceDNSSecondaryIpType.setStatus('current')
if mibBuilder.loadTexts: cssgServiceDNSSecondaryIpType.setDescription('The IP Address type of Secondary DNS Server for this service.')
cssgServiceDNSSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 3, 1, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssgServiceDNSSecondary.setStatus('current')
if mibBuilder.loadTexts: cssgServiceDNSSecondary.setDescription('The Secondary DNS Server for this service.')
cssgServiceUpstreamQOSEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 3, 1, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssgServiceUpstreamQOSEnabled.setReference('The rate-limit features of Committed Access Rate(CAR).')
if mibBuilder.loadTexts: cssgServiceUpstreamQOSEnabled.setStatus('current')
if mibBuilder.loadTexts: cssgServiceUpstreamQOSEnabled.setDescription('An indication of whether upstream policing is enabled for this service.')
cssgServiceDownStreamQOSEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 3, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssgServiceDownStreamQOSEnabled.setReference('The rate-limit features of Committed Access Rate(CAR).')
if mibBuilder.loadTexts: cssgServiceDownStreamQOSEnabled.setStatus('current')
if mibBuilder.loadTexts: cssgServiceDownStreamQOSEnabled.setDescription('An indication of whether downstream policing is enabled for this service.')
cssgServiceOpenGarden = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 3, 1, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssgServiceOpenGarden.setStatus('current')
if mibBuilder.loadTexts: cssgServiceOpenGarden.setDescription('An indication of whether this is a Open Garden service. An Open Garden Service is a service that can be accessed without authentication.')
cssgServicePrepaid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 3, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssgServicePrepaid.setStatus('current')
if mibBuilder.loadTexts: cssgServicePrepaid.setDescription('An indication of whether this service is a prepaid service.')
cssgServiceRouteTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 3, 2), )
if mibBuilder.loadTexts: cssgServiceRouteTable.setStatus('current')
if mibBuilder.loadTexts: cssgServiceRouteTable.setDescription('A list of route entries that belong to a particular service.')
cssgServiceRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-SSG-MIB", "cssgServiceName"), (0, "CISCO-SSG-MIB", "cssgServiceRouteType"), (0, "CISCO-SSG-MIB", "cssgServiceRouteAddr"), (0, "CISCO-SSG-MIB", "cssgServiceRouteMaskType"), (0, "CISCO-SSG-MIB", "cssgServiceRouteMask"))
if mibBuilder.loadTexts: cssgServiceRouteEntry.setStatus('current')
if mibBuilder.loadTexts: cssgServiceRouteEntry.setDescription('An entry in Services Route Table.')
cssgServiceRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 3, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cssgServiceRouteType.setStatus('current')
if mibBuilder.loadTexts: cssgServiceRouteType.setDescription('A value that represents the type of the address stored in cssgServiceServRouteAddr.')
cssgServiceRouteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 3, 2, 1, 2), InetAddress())
if mibBuilder.loadTexts: cssgServiceRouteAddr.setStatus('current')
if mibBuilder.loadTexts: cssgServiceRouteAddr.setDescription('The IP Address of the networks available to the user of this service.')
cssgServiceRouteMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 3, 2, 1, 3), InetAddressType())
if mibBuilder.loadTexts: cssgServiceRouteMaskType.setStatus('current')
if mibBuilder.loadTexts: cssgServiceRouteMaskType.setDescription('A value that represents the type of the address stored in cssgServiceServRouteMask.')
cssgServiceRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 3, 2, 1, 4), InetAddress())
if mibBuilder.loadTexts: cssgServiceRouteMask.setStatus('current')
if mibBuilder.loadTexts: cssgServiceRouteMask.setDescription('Indicate the mask to be ANDed with the destination address before being compared to the value in cssgServiceRouteAddr.')
cssgServiceRoutePermission = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssgServiceRoutePermission.setStatus('current')
if mibBuilder.loadTexts: cssgServiceRoutePermission.setDescription('Indicates the action on packets, when the destination address matches with the cssgServiceRouteAddr.')
cssgExcludedAPNTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 4, 1), )
if mibBuilder.loadTexts: cssgExcludedAPNTable.setStatus('current')
if mibBuilder.loadTexts: cssgExcludedAPNTable.setDescription('A list of APNs excluded from using auto-main feature of SSG.')
cssgExcludedAPNEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-SSG-MIB", "cssgExcludedAPNName"))
if mibBuilder.loadTexts: cssgExcludedAPNEntry.setStatus('current')
if mibBuilder.loadTexts: cssgExcludedAPNEntry.setDescription('Information concerning an APN.')
cssgExcludedAPNName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 4, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: cssgExcludedAPNName.setStatus('current')
if mibBuilder.loadTexts: cssgExcludedAPNName.setDescription('The name of the excluded APN.')
cssgExcludedAPNRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 4, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cssgExcludedAPNRowStatus.setStatus('current')
if mibBuilder.loadTexts: cssgExcludedAPNRowStatus.setDescription("The status of this table entry. This object can also be used to create or delete conceptual row in this table. To create a row, set this object to 'createAndGo'. There are no mandatory objects in a create request. To delete a row, set this object to 'destroy'.")
cssgExcludedDomainTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 5, 1), )
if mibBuilder.loadTexts: cssgExcludedDomainTable.setStatus('current')
if mibBuilder.loadTexts: cssgExcludedDomainTable.setDescription('A list of Domain names excluded from using auto-domain feature of SSG.')
cssgExcludedDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-SSG-MIB", "cssgExcludedDomainName"))
if mibBuilder.loadTexts: cssgExcludedDomainEntry.setStatus('current')
if mibBuilder.loadTexts: cssgExcludedDomainEntry.setDescription('Information concerning an excluded Domain.')
cssgExcludedDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 5, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: cssgExcludedDomainName.setStatus('current')
if mibBuilder.loadTexts: cssgExcludedDomainName.setDescription('The name of the excluded Domain.')
cssgExcludedDomainRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 5, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cssgExcludedDomainRowStatus.setStatus('current')
if mibBuilder.loadTexts: cssgExcludedDomainRowStatus.setDescription("The status of this table entry. This object can also be used to create or delete conceptual row in this table. To create a row, set this object to 'createAndGo'. There are no mandatory objects in a create request. To delete a row, set this object to 'destroy'.")
cssgServiceIfBindTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 7, 1), )
if mibBuilder.loadTexts: cssgServiceIfBindTable.setStatus('current')
if mibBuilder.loadTexts: cssgServiceIfBindTable.setDescription('In SSG, a Service can be configured to use a particular interface/ip address. This table is a list of services and the interface to which they are bound.')
cssgServiceIfBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 7, 1, 1), ).setIndexNames((0, "CISCO-SSG-MIB", "cssgServiceName"))
if mibBuilder.loadTexts: cssgServiceIfBindEntry.setStatus('current')
if mibBuilder.loadTexts: cssgServiceIfBindEntry.setDescription('A Interface-Service Bind entry.')
cssgServiceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 7, 1, 1, 1), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cssgServiceIfIndex.setStatus('current')
if mibBuilder.loadTexts: cssgServiceIfIndex.setDescription('The interface index to which the Service is bound.')
cssgServiceIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 7, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cssgServiceIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: cssgServiceIfRowStatus.setDescription("The status of this table entry. This object can also be used to create or delete conceptual row in this table. To create a row, set this object to 'createAndGo'. cssgServiceIfIndex is a mandatory object for a create request. To delete a row, set this object to 'destroy'.")
cssgTcpRedirectGrpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 6, 1), )
if mibBuilder.loadTexts: cssgTcpRedirectGrpTable.setStatus('current')
if mibBuilder.loadTexts: cssgTcpRedirectGrpTable.setDescription('A list of TCP Redirect group. A TCP Redirect group is a list of one more servers that make up a captive portal group.')
cssgTcpRedirectGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 6, 1, 1), ).setIndexNames((0, "CISCO-SSG-MIB", "cssgTcpRedirectGrpName"), (0, "CISCO-SSG-MIB", "cssgTcpRedirectGrpServerAddrType"), (0, "CISCO-SSG-MIB", "cssgTcpRedirectGrpServerAddr"), (0, "CISCO-SSG-MIB", "cssgTcpRedirectGrpServerPort"))
if mibBuilder.loadTexts: cssgTcpRedirectGrpEntry.setStatus('current')
if mibBuilder.loadTexts: cssgTcpRedirectGrpEntry.setDescription('Detailed information concerning a TCP Redirect group.')
cssgTcpRedirectGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 6, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: cssgTcpRedirectGrpName.setStatus('current')
if mibBuilder.loadTexts: cssgTcpRedirectGrpName.setDescription('The name of the redirect-group.')
cssgTcpRedirectGrpServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 6, 1, 1, 2), InetAddressType())
if mibBuilder.loadTexts: cssgTcpRedirectGrpServerAddrType.setStatus('current')
if mibBuilder.loadTexts: cssgTcpRedirectGrpServerAddrType.setDescription('A value that represents the typeof the address stored in cssgTcpRedirectGrpServerAddr object.')
cssgTcpRedirectGrpServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 6, 1, 1, 3), InetAddress())
if mibBuilder.loadTexts: cssgTcpRedirectGrpServerAddr.setStatus('current')
if mibBuilder.loadTexts: cssgTcpRedirectGrpServerAddr.setDescription('The IP address of the server in the server-group.')
cssgTcpRedirectGrpServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 6, 1, 1, 4), CiscoPort())
if mibBuilder.loadTexts: cssgTcpRedirectGrpServerPort.setStatus('current')
if mibBuilder.loadTexts: cssgTcpRedirectGrpServerPort.setDescription('The port of the server to which TCP traffic to be redirected.')
cssgTcpRedirectGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 6, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cssgTcpRedirectGrpRowStatus.setStatus('current')
if mibBuilder.loadTexts: cssgTcpRedirectGrpRowStatus.setDescription("The status of this table entry. This object can also be used to create or delete conceptual row in this table. To create a row, set this object to 'createAndGo'. There are no mandatory objects in a create request. To delete a row, set this object to 'destroy'.")
cssgNetworkGrpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 6, 2), )
if mibBuilder.loadTexts: cssgNetworkGrpTable.setStatus('current')
if mibBuilder.loadTexts: cssgNetworkGrpTable.setDescription('A list of network groups. When a network-group, a list of networks, associated with a TCP Redirect group, subscribers attempting to connect to these networks will be redirected to the TCP redirect group.')
cssgNetworkGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 6, 2, 1), ).setIndexNames((0, "CISCO-SSG-MIB", "cssgNetworkGrpName"), (0, "CISCO-SSG-MIB", "cssgNetworkGrpNetIpType"), (0, "CISCO-SSG-MIB", "cssgNetworkGrpNetIpAddr"), (0, "CISCO-SSG-MIB", "cssgNetworkGrpNetMaskType"), (0, "CISCO-SSG-MIB", "cssgNetworkGrpNetMask"))
if mibBuilder.loadTexts: cssgNetworkGrpEntry.setStatus('current')
if mibBuilder.loadTexts: cssgNetworkGrpEntry.setDescription('Detailed information concerning a network group entry.')
cssgNetworkGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 6, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: cssgNetworkGrpName.setStatus('current')
if mibBuilder.loadTexts: cssgNetworkGrpName.setDescription('The name of the network group. A network group, which is a group of networks, is associated with a Server group for traffic redirection i.e., packets to the networks in the network group will be directed to the servers in the server group.')
cssgNetworkGrpNetIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 6, 2, 1, 2), InetAddressType())
if mibBuilder.loadTexts: cssgNetworkGrpNetIpType.setStatus('current')
if mibBuilder.loadTexts: cssgNetworkGrpNetIpType.setDescription('A value that represents the type of the IP Address in the object cssgNetworkGrpNetIpAddr.')
cssgNetworkGrpNetIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 6, 2, 1, 3), InetAddress())
if mibBuilder.loadTexts: cssgNetworkGrpNetIpAddr.setStatus('current')
if mibBuilder.loadTexts: cssgNetworkGrpNetIpAddr.setDescription('The IP address of a network in this network group.')
cssgNetworkGrpNetMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 6, 2, 1, 4), InetAddressType())
if mibBuilder.loadTexts: cssgNetworkGrpNetMaskType.setStatus('current')
if mibBuilder.loadTexts: cssgNetworkGrpNetMaskType.setDescription('A value that represents the type of the address stored in cssgNetworkGrpNetMask.')
cssgNetworkGrpNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 6, 2, 1, 5), InetAddress())
if mibBuilder.loadTexts: cssgNetworkGrpNetMask.setStatus('current')
if mibBuilder.loadTexts: cssgNetworkGrpNetMask.setDescription('Indicate the mask to be ANDed with the destination address before being compared to the value in cssgNetworkGrpNetIpAddr.')
cssgNetworkGrpNetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 6, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cssgNetworkGrpNetRowStatus.setStatus('current')
if mibBuilder.loadTexts: cssgNetworkGrpNetRowStatus.setDescription("The status of this table entry. This object can also be used to create or delete conceptual row in this table. To create a row, set this object to 'createAndGo'. There are no mandatory objects in a create request. To delete a row, set this object to 'destroy'.")
cssgPortGrpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 6, 3), )
if mibBuilder.loadTexts: cssgPortGrpTable.setStatus('current')
if mibBuilder.loadTexts: cssgPortGrpTable.setDescription('A list of port groups.')
cssgPortGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 6, 3, 1), ).setIndexNames((0, "CISCO-SSG-MIB", "cssgPortGrpName"), (0, "CISCO-SSG-MIB", "cssgPortGrpPortNo"))
if mibBuilder.loadTexts: cssgPortGrpEntry.setStatus('current')
if mibBuilder.loadTexts: cssgPortGrpEntry.setDescription('A Port group entry.')
cssgPortGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 6, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: cssgPortGrpName.setStatus('current')
if mibBuilder.loadTexts: cssgPortGrpName.setDescription('The name of the port group. The port group defines a list of ports traffic to whom can be redirected to a TCP Redirect group.')
cssgPortGrpPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 6, 3, 1, 2), CiscoPort())
if mibBuilder.loadTexts: cssgPortGrpPortNo.setStatus('current')
if mibBuilder.loadTexts: cssgPortGrpPortNo.setDescription('A port in the port group.')
cssgPortGrpPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 6, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cssgPortGrpPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: cssgPortGrpPortRowStatus.setDescription("The status of this table entry. This object can also be used to create or delete conceptual row in this table. To create a row, set this object to 'createAndGo'. To delete a row, set this object to 'destroy'.")
cssgTcpRedirNetworkGrpMapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 6, 4), )
if mibBuilder.loadTexts: cssgTcpRedirNetworkGrpMapTable.setStatus('current')
if mibBuilder.loadTexts: cssgTcpRedirNetworkGrpMapTable.setDescription('A list of Network and Server Group associations.')
cssgTcpRedirNetworkGrpMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 6, 4, 1), ).setIndexNames((0, "CISCO-SSG-MIB", "cssgTcpRedirectGrpName"))
if mibBuilder.loadTexts: cssgTcpRedirNetworkGrpMapEntry.setStatus('current')
if mibBuilder.loadTexts: cssgTcpRedirNetworkGrpMapEntry.setDescription('Detailed information concerning a Server and Network group association.')
cssgTcpRedirNetworkMapGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 6, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cssgTcpRedirNetworkMapGrpName.setStatus('current')
if mibBuilder.loadTexts: cssgTcpRedirNetworkMapGrpName.setDescription('A network group name. A network group is a set of network groups that can be associated with TCP Redirect for traffic redirection.')
cssgTcpRedirNetworkGrpMapRowStat = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 6, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cssgTcpRedirNetworkGrpMapRowStat.setStatus('current')
if mibBuilder.loadTexts: cssgTcpRedirNetworkGrpMapRowStat.setDescription("The status of this table entry. This object can also be used to create or delete conceptual row in this table. To create a row, set this object to 'createAndGo'. There are no mandatory objects in a create request. To delete a row, set this object to 'destroy'.")
cssgTcpRedirPortGrpMapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 6, 5), )
if mibBuilder.loadTexts: cssgTcpRedirPortGrpMapTable.setStatus('current')
if mibBuilder.loadTexts: cssgTcpRedirPortGrpMapTable.setDescription('A list of Server and Port Group associations.')
cssgTcpRedirPortGrpMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 6, 5, 1), ).setIndexNames((0, "CISCO-SSG-MIB", "cssgTcpRedirectGrpName"))
if mibBuilder.loadTexts: cssgTcpRedirPortGrpMapEntry.setStatus('current')
if mibBuilder.loadTexts: cssgTcpRedirPortGrpMapEntry.setDescription('An instance of Server and Port group association.')
cssgTcpRedirPortMapGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 6, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cssgTcpRedirPortMapGrpName.setStatus('current')
if mibBuilder.loadTexts: cssgTcpRedirPortMapGrpName.setDescription('The name of the Port Group. A Port Group is a set of ports that can be associated with a TCP Redirect Group for traffic redirection.')
cssgTcpRedirPortGrpMapRowStat = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 6, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cssgTcpRedirPortGrpMapRowStat.setStatus('current')
if mibBuilder.loadTexts: cssgTcpRedirPortGrpMapRowStat.setDescription("The status of this table entry. This object can also be used to create or delete conceptual row in this table. To create a row, set this object to 'createAndGo'. There are no mandatory objects in a create request. To delete a row, set this object to 'destroy'.")
cssgTcpRedirPortNoMapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 6, 6), )
if mibBuilder.loadTexts: cssgTcpRedirPortNoMapTable.setStatus('current')
if mibBuilder.loadTexts: cssgTcpRedirPortNoMapTable.setDescription('A list of Ports nos and the corresponding Server group which they are associated with.')
cssgTcpRedirPortNoMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 6, 6, 1), ).setIndexNames((0, "CISCO-SSG-MIB", "cssgTcpRedirectGrpName"))
if mibBuilder.loadTexts: cssgTcpRedirPortNoMapEntry.setStatus('current')
if mibBuilder.loadTexts: cssgTcpRedirPortNoMapEntry.setDescription('An instance of a Server group and Port association.')
cssgTcpRedirPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 6, 6, 1, 1), CiscoPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cssgTcpRedirPortNo.setStatus('current')
if mibBuilder.loadTexts: cssgTcpRedirPortNo.setDescription('The Port No associated with the Service Group name.')
cssgTcpRedirPortNoMapRowStat = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 6, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cssgTcpRedirPortNoMapRowStat.setStatus('current')
if mibBuilder.loadTexts: cssgTcpRedirPortNoMapRowStat.setDescription("The status of this table entry. This object can also be used to create or delete conceptual row in this table. To create a row, set this object to 'createAndGo'. cssgTcpRedirPortNo is a mandatory object for a create request. To delete a row, set this object to 'destroy'.")
cssgRadiusClientTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 8, 1), )
if mibBuilder.loadTexts: cssgRadiusClientTable.setStatus('current')
if mibBuilder.loadTexts: cssgRadiusClientTable.setDescription('A list of non-SSD clients to which SSG act as Radius proxy.')
cssgRadiusClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 8, 1, 1), ).setIndexNames((0, "CISCO-SSG-MIB", "cssgRadiusClientAddrType"), (0, "CISCO-SSG-MIB", "cssgRadiusClientAddr"))
if mibBuilder.loadTexts: cssgRadiusClientEntry.setStatus('current')
if mibBuilder.loadTexts: cssgRadiusClientEntry.setDescription('Detailed information concerning a Radius client entry.')
cssgRadiusClientAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 8, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cssgRadiusClientAddrType.setStatus('current')
if mibBuilder.loadTexts: cssgRadiusClientAddrType.setDescription('The type of the address stored in cssgRadiusClientAddr.')
cssgRadiusClientAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 8, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: cssgRadiusClientAddr.setStatus('current')
if mibBuilder.loadTexts: cssgRadiusClientAddr.setDescription('The network layer address of the Radius client to which SSG acts as Radius Proxy.')
cssgRadiusClientRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 8, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cssgRadiusClientRowStatus.setStatus('current')
if mibBuilder.loadTexts: cssgRadiusClientRowStatus.setDescription("The status of this table entry. This object can also be used to create or delete conceptual row in this table. To create a row, set this object to 'createAndGo'. There are no mandatory objects in a create request. To delete a row, set this object to 'destroy'.")
cssgPortMapLength = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 9, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssgPortMapLength.setStatus('current')
if mibBuilder.loadTexts: cssgPortMapLength.setDescription('The length of the port-bundle i.e, no of ports in a bundle.')
cssgPortMapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 9, 2), )
if mibBuilder.loadTexts: cssgPortMapTable.setStatus('current')
if mibBuilder.loadTexts: cssgPortMapTable.setDescription('The list of TCP Port-maps.')
cssgPortMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 9, 2, 1), ).setIndexNames((0, "CISCO-SSG-MIB", "cssgPortMapSourceIpType"), (0, "CISCO-SSG-MIB", "cssgPortMapSourceIp"))
if mibBuilder.loadTexts: cssgPortMapEntry.setStatus('current')
if mibBuilder.loadTexts: cssgPortMapEntry.setDescription('An entry in the cssgPortMapTable.')
cssgPortMapSourceIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 9, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cssgPortMapSourceIpType.setStatus('current')
if mibBuilder.loadTexts: cssgPortMapSourceIpType.setDescription('A value that represents the type of the IP address stored in cssgPortMapSourceIP object.')
cssgPortMapSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 9, 2, 1, 2), InetAddress())
if mibBuilder.loadTexts: cssgPortMapSourceIp.setStatus('current')
if mibBuilder.loadTexts: cssgPortMapSourceIp.setDescription('Specifies SSG source IP addresses to be used while NATting packets from downstream traffic i.e., traffic from Subscriber to SSG.')
cssgPortMapPortRangeFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 9, 2, 1, 3), CiscoPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cssgPortMapPortRangeFrom.setStatus('current')
if mibBuilder.loadTexts: cssgPortMapPortRangeFrom.setDescription('The lower limit of the range ports in the Port Map.')
cssgPortMapPortRangeTo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 9, 2, 1, 4), CiscoPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cssgPortMapPortRangeTo.setStatus('current')
if mibBuilder.loadTexts: cssgPortMapPortRangeTo.setDescription('The upper limit of the range ports in the Port Map.')
cssgPortMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 9, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cssgPortMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: cssgPortMapRowStatus.setDescription("The status of this table entry. This object can also be used to create or delete conceptual row in this table. To create a row, set this object to 'createAndGo'. cssgPortMapPortRangeFrom and cssgPortMapPortRangeTo are mandatory objects in a create request. To delete a row, set this object to 'destroy'.")
cssgTalWaitingForAuthUsers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 10, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssgTalWaitingForAuthUsers.setStatus('current')
if mibBuilder.loadTexts: cssgTalWaitingForAuthUsers.setDescription('The number of currently existing users waiting for authorization.')
cssgTalUnidentifiedUsers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 10, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssgTalUnidentifiedUsers.setStatus('current')
if mibBuilder.loadTexts: cssgTalUnidentifiedUsers.setDescription('The number of currently existing unidentified users. These are users for which there was no response received from AAA and hence it is not clear if they are valid users.')
cssgTalSuspectUsers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 10, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssgTalSuspectUsers.setStatus('current')
if mibBuilder.loadTexts: cssgTalSuspectUsers.setDescription('The number of currently existing Suspect Users.')
cssgTalPassthroughUsers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 10, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssgTalPassthroughUsers.setStatus('current')
if mibBuilder.loadTexts: cssgTalPassthroughUsers.setDescription('The number of currently existing transparent pass-through users.')
cssgTalMaxAuthRate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 10, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssgTalMaxAuthRate.setStatus('current')
if mibBuilder.loadTexts: cssgTalMaxAuthRate.setDescription('Maximum rate of authorization requests per second. At a given time, the maximum rate of authorization requests will overwrite the previous value.')
cssgTalMaxAuthRateTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 10, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssgTalMaxAuthRateTimestamp.setStatus('current')
if mibBuilder.loadTexts: cssgTalMaxAuthRateTimestamp.setDescription('This is the local time on the SSG when the Maximum rate of authorization requests per second, indicated by cssgTalMaxAuthRate, was recorded.')
cssgTalMinAuthRate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 10, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssgTalMinAuthRate.setStatus('current')
if mibBuilder.loadTexts: cssgTalMinAuthRate.setDescription('Minimum rate of authorization requests per second. At a given time, the minimum rate of authorization requests will overwrite the previous value.')
cssgTalMinAuthRateTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 10, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssgTalMinAuthRateTimestamp.setStatus('current')
if mibBuilder.loadTexts: cssgTalMinAuthRateTimestamp.setDescription('This is the local time on the SSG when the Minimum rate of authorization requests per second, indicated by cssgTalMinAuthRate, was recorded.')
cssgTalCurrentAuthRate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 10, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssgTalCurrentAuthRate.setStatus('current')
if mibBuilder.loadTexts: cssgTalCurrentAuthRate.setDescription('The last recorded rate of authorization requests per second, on SSG.')
cssgTalCurrentAuthRateTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 10, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssgTalCurrentAuthRateTimestamp.setStatus('current')
if mibBuilder.loadTexts: cssgTalCurrentAuthRateTimestamp.setDescription('This is the local time on the SSG when cssgTalCurrentAuthRate, was recorded.')
cssgTalResetAuthRates = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 10, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unknown", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssgTalResetAuthRates.setStatus('current')
if mibBuilder.loadTexts: cssgTalResetAuthRates.setDescription("Setting this variable to 'reset' indicates that the Minimum and Maximum rates of authorization would be reset to the last recorded rate of authorization requests per second. Setting it to 'unknown' will not result in any changes. An snmp-get on this value will always return 'unknown'.")
cssgTalMaxPendingAuthReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 10, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssgTalMaxPendingAuthReqs.setStatus('current')
if mibBuilder.loadTexts: cssgTalMaxPendingAuthReqs.setDescription('The maximum number of outstanding TAL authorization requests allowed on SSG. If the number of authorization requests goes beyond this value, SSG does a SYS log message and any packets received that would result in SSG sending a new radius request will be dropped at the CEF path itself. When this value is set, it will be applicable from that point onwards. If the number of existing requests exceeds the new values, these requests will not be discarded.')
cssgTalMaxAuthReqsRate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 10, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssgTalMaxAuthReqsRate.setStatus('current')
if mibBuilder.loadTexts: cssgTalMaxAuthReqsRate.setDescription('The maximum number of authorization requests per second allowed on SSG. If this value is set, SSG throttles the authorization requests sent per second as per this value.')
cssgTalDropPakDuringAuthorization = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 10, 14), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssgTalDropPakDuringAuthorization.setStatus('current')
if mibBuilder.loadTexts: cssgTalDropPakDuringAuthorization.setDescription("The value 'true' indicates that any packets that are received from the user during user authorization would be dropped. The value 'false' indicates that the packets will not be dropped.")
cssgTalUnidentifiedUserAllowTraff = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 10, 15), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssgTalUnidentifiedUserAllowTraff.setStatus('current')
if mibBuilder.loadTexts: cssgTalUnidentifiedUserAllowTraff.setDescription("The value 'true' indicates that traffic from/to unidentified users would be allowed. A value of 'false' indicates that traffic from/to unidentified users will not be allowed.")
cssgTalMaxSuspectUsers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 10, 16), Unsigned32().clone(5000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssgTalMaxSuspectUsers.setStatus('current')
if mibBuilder.loadTexts: cssgTalMaxSuspectUsers.setDescription('The maximum number of suspect users allowed.')
cssgTalSuspectUserTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 10, 17), Unsigned32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssgTalSuspectUserTimeout.setStatus('current')
if mibBuilder.loadTexts: cssgTalSuspectUserTimeout.setDescription('The timeout value for a suspect user in minutes. If a packet is received for a suspect user, then packets from/to this user will be dropped/tcp-redirected, until a value of cssgTalSuspectUserTimeout is reached. After this timeout, any new traffic received by SSG from the suspect user will trigger the TAL procedure all over again.')
cssgTalUnidentifiedUserTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 10, 18), Unsigned32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssgTalUnidentifiedUserTimeout.setStatus('current')
if mibBuilder.loadTexts: cssgTalUnidentifiedUserTimeout.setDescription('The timeout value for an unidentified user in minutes. After this time expiry, authorization will be done again when a packet is received from this user.')
cssgTalUserInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 10, 19), )
if mibBuilder.loadTexts: cssgTalUserInfoTable.setStatus('current')
if mibBuilder.loadTexts: cssgTalUserInfoTable.setDescription('A list of all the transparent users, along with their user-state.')
cssgTalUserInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 10, 19, 1), ).setIndexNames((0, "CISCO-SSG-MIB", "cssgTalUserIPAddressType"), (0, "CISCO-SSG-MIB", "cssgTalUserIPAddress"))
if mibBuilder.loadTexts: cssgTalUserInfoEntry.setStatus('current')
if mibBuilder.loadTexts: cssgTalUserInfoEntry.setDescription('A conceptual row in the TAL user info table.')
cssgTalUserIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 10, 19, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cssgTalUserIPAddressType.setStatus('current')
if mibBuilder.loadTexts: cssgTalUserIPAddressType.setDescription('This is the IP address type of a particular transparent user and is used as index (together with cssgTalUserIPAddress) to identify a unique entry in the Tal User Info table.')
cssgTalUserIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 10, 19, 1, 2), InetAddress())
if mibBuilder.loadTexts: cssgTalUserIPAddress.setStatus('current')
if mibBuilder.loadTexts: cssgTalUserIPAddress.setDescription('IP Address of the transparent user.')
cssgTalUserState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 260, 1, 10, 19, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("authorizing", 2), ("unidentified", 3), ("suspect", 4), ("passthrough", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssgTalUserState.setStatus('current')
if mibBuilder.loadTexts: cssgTalUserState.setDescription('The state of the transparent user.')
ciscoSsgMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 260, 0))
ciscoSsgRadiusClientReboot = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 260, 0, 1))
if mibBuilder.loadTexts: ciscoSsgRadiusClientReboot.setStatus('current')
if mibBuilder.loadTexts: ciscoSsgRadiusClientReboot.setDescription('The notification is sent when the connectivity to GGSN is lost.')
ciscoSsgRadiusAAAServerDown = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 260, 0, 2))
if mibBuilder.loadTexts: ciscoSsgRadiusAAAServerDown.setStatus('current')
if mibBuilder.loadTexts: ciscoSsgRadiusAAAServerDown.setDescription('The notification is sent when the connectivity to AAA is lost or when AAA Server is down.')
ciscoSsgMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 260, 3))
ciscoSsgMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 260, 3, 1))
ciscoSsgMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 260, 3, 2))
ciscoSsgMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 260, 3, 1, 1)).setObjects(("CISCO-SSG-MIB", "ciscoSsgCfgGroup"), ("CISCO-SSG-MIB", "ciscoSsgStatsGroup"), ("CISCO-SSG-MIB", "ciscoSsgServicesGroup"), ("CISCO-SSG-MIB", "ciscoSsgExclusionsGroup"), ("CISCO-SSG-MIB", "ciscoSsgTcpRedirectGroup"), ("CISCO-SSG-MIB", "ciscoSsgServiceInterfaceGroup"), ("CISCO-SSG-MIB", "ciscoSsgRadiusClientsGroup"), ("CISCO-SSG-MIB", "ciscoSsgPortMapGroup"), ("CISCO-SSG-MIB", "ciscoSsgNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSsgMIBCompliance = ciscoSsgMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSsgMIBCompliance.setDescription('The compliance statement for entities which implement CISCO-SSG-MIB.')
ciscoSsgMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 260, 3, 1, 2)).setObjects(("CISCO-SSG-MIB", "ciscoSsgCfgGroupRev1"), ("CISCO-SSG-MIB", "ciscoSsgStatsGroup"), ("CISCO-SSG-MIB", "ciscoSsgServicesGroup"), ("CISCO-SSG-MIB", "ciscoSsgExclusionsGroup"), ("CISCO-SSG-MIB", "ciscoSsgTcpRedirectGroup"), ("CISCO-SSG-MIB", "ciscoSsgServiceInterfaceGroup"), ("CISCO-SSG-MIB", "ciscoSsgRadiusClientsGroup"), ("CISCO-SSG-MIB", "ciscoSsgPortMapGroup"), ("CISCO-SSG-MIB", "ciscoSsgNotificationGroup"), ("CISCO-SSG-MIB", "ciscoSsgTalUserInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSsgMIBComplianceRev1 = ciscoSsgMIBComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoSsgMIBComplianceRev1.setDescription('The compliance statement for entities which implement CISCO-SSG-MIB.')
ciscoSsgCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 260, 3, 2, 1)).setObjects(("CISCO-SSG-MIB", "cssgCfgSsgEnabled"), ("CISCO-SSG-MIB", "cssgCfgAutoDomainMode"), ("CISCO-SSG-MIB", "cssgCfgLocalForwardingEnabled"), ("CISCO-SSG-MIB", "cssgCfgAutoLogOffMode"), ("CISCO-SSG-MIB", "cssgCfgRadiusProxyEnabled"), ("CISCO-SSG-MIB", "cssgCfgTcpRedirectEnabled"), ("CISCO-SSG-MIB", "cssgCfgAutoDomainNatEnabled"), ("CISCO-SSG-MIB", "cssgCfgPortBundleHostKeyEnabled"), ("CISCO-SSG-MIB", "cssgCfgTransPassThroughEnabled"), ("CISCO-SSG-MIB", "cssgCfgAutoLogOffInterval"), ("CISCO-SSG-MIB", "cssgCfgAutoLogOffIcmpRetries"), ("CISCO-SSG-MIB", "cssgCfgMaxServicesPerUser"), ("CISCO-SSG-MIB", "cssgCfgAccountingEnabled"), ("CISCO-SSG-MIB", "cssgCfgDefaultNetworkType"), ("CISCO-SSG-MIB", "cssgCfgDefaultNetwork"), ("CISCO-SSG-MIB", "cssgCfgRadiusAuthenPort"), ("CISCO-SSG-MIB", "cssgCfgRadiusAccountingPort"), ("CISCO-SSG-MIB", "cssgCfgRadiusFwdAcctPktsEnabled"), ("CISCO-SSG-MIB", "cssgCfgAccountingInterval"), ("CISCO-SSG-MIB", "cssgCfgTCPRedirGrpForUnAuthUsers"), ("CISCO-SSG-MIB", "cssgCfgTCPRedirGrpForUnAuthServ"), ("CISCO-SSG-MIB", "cssgCfgTcpRedirGrpForSMTP"), ("CISCO-SSG-MIB", "cssgCfgTcpRedirGrpForInitialCapt"), ("CISCO-SSG-MIB", "cssgCfgTcpRedirGrpForAdvCapt"), ("CISCO-SSG-MIB", "cssgCfgRadiusClntRbtNotifEnabled"), ("CISCO-SSG-MIB", "cssgCfgAAAServerDownNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSsgCfgGroup = ciscoSsgCfgGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSsgCfgGroup.setDescription('A collection of configurable parameters in SSG MIB.')
ciscoSsgStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 260, 3, 2, 2)).setObjects(("CISCO-SSG-MIB", "cssgStatsLoginAttempts"), ("CISCO-SSG-MIB", "cssgStatsLoginsSuccessful"), ("CISCO-SSG-MIB", "cssgStatsActiveSessions"), ("CISCO-SSG-MIB", "cssgStatsActiveHosts"), ("CISCO-SSG-MIB", "cssgStatsActiveServices"), ("CISCO-SSG-MIB", "cssgStatsPODs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSsgStatsGroup = ciscoSsgStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSsgStatsGroup.setDescription('A collection of statistics objects for SSG MIB.')
ciscoSsgServicesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 260, 3, 2, 3)).setObjects(("CISCO-SSG-MIB", "cssgServiceMode"), ("CISCO-SSG-MIB", "cssgServiceType"), ("CISCO-SSG-MIB", "cssgServiceIdleTimeout"), ("CISCO-SSG-MIB", "cssgServiceSessionTimeout"), ("CISCO-SSG-MIB", "cssgServiceActiveSessions"), ("CISCO-SSG-MIB", "cssgServiceDNSPrimaryIpType"), ("CISCO-SSG-MIB", "cssgServiceDNSPrimary"), ("CISCO-SSG-MIB", "cssgServiceDNSSecondaryIpType"), ("CISCO-SSG-MIB", "cssgServiceDNSSecondary"), ("CISCO-SSG-MIB", "cssgServiceUpstreamQOSEnabled"), ("CISCO-SSG-MIB", "cssgServiceDownStreamQOSEnabled"), ("CISCO-SSG-MIB", "cssgServiceOpenGarden"), ("CISCO-SSG-MIB", "cssgServicePrepaid"), ("CISCO-SSG-MIB", "cssgServiceRoutePermission"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSsgServicesGroup = ciscoSsgServicesGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSsgServicesGroup.setDescription('A collection of objects pertaining to Services.')
ciscoSsgExclusionsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 260, 3, 2, 4)).setObjects(("CISCO-SSG-MIB", "cssgExcludedAPNRowStatus"), ("CISCO-SSG-MIB", "cssgExcludedDomainRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSsgExclusionsGroup = ciscoSsgExclusionsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSsgExclusionsGroup.setDescription('A collection of objects pertaining to excluded APN/Domain.')
ciscoSsgTcpRedirectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 260, 3, 2, 5)).setObjects(("CISCO-SSG-MIB", "cssgTcpRedirectGrpRowStatus"), ("CISCO-SSG-MIB", "cssgNetworkGrpNetRowStatus"), ("CISCO-SSG-MIB", "cssgPortGrpPortRowStatus"), ("CISCO-SSG-MIB", "cssgTcpRedirNetworkMapGrpName"), ("CISCO-SSG-MIB", "cssgTcpRedirNetworkGrpMapRowStat"), ("CISCO-SSG-MIB", "cssgTcpRedirPortMapGrpName"), ("CISCO-SSG-MIB", "cssgTcpRedirPortGrpMapRowStat"), ("CISCO-SSG-MIB", "cssgTcpRedirPortNo"), ("CISCO-SSG-MIB", "cssgTcpRedirPortNoMapRowStat"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSsgTcpRedirectGroup = ciscoSsgTcpRedirectGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSsgTcpRedirectGroup.setDescription('A collection of objects pertaining to TCP Redirect.')
ciscoSsgServiceInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 260, 3, 2, 6)).setObjects(("CISCO-SSG-MIB", "cssgServiceIfIndex"), ("CISCO-SSG-MIB", "cssgServiceIfRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSsgServiceInterfaceGroup = ciscoSsgServiceInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSsgServiceInterfaceGroup.setDescription('A collection of objects pertaining to Service-Interface bind.')
ciscoSsgRadiusClientsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 260, 3, 2, 7)).setObjects(("CISCO-SSG-MIB", "cssgRadiusClientRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSsgRadiusClientsGroup = ciscoSsgRadiusClientsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSsgRadiusClientsGroup.setDescription('A collection of objects pertaining to Radius Client.')
ciscoSsgPortMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 260, 3, 2, 8)).setObjects(("CISCO-SSG-MIB", "cssgPortMapLength"), ("CISCO-SSG-MIB", "cssgPortMapPortRangeFrom"), ("CISCO-SSG-MIB", "cssgPortMapPortRangeTo"), ("CISCO-SSG-MIB", "cssgPortMapRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSsgPortMapGroup = ciscoSsgPortMapGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSsgPortMapGroup.setDescription('A collection of objects pertaining to Port Map Group.')
ciscoSsgNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 260, 3, 2, 9)).setObjects(("CISCO-SSG-MIB", "ciscoSsgRadiusClientReboot"), ("CISCO-SSG-MIB", "ciscoSsgRadiusAAAServerDown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSsgNotificationGroup = ciscoSsgNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSsgNotificationGroup.setDescription('A collection of notifications generated by SSG.')
ciscoSsgCfgGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 260, 3, 2, 10)).setObjects(("CISCO-SSG-MIB", "cssgCfgSsgEnabled"), ("CISCO-SSG-MIB", "cssgCfgAutoDomainMode"), ("CISCO-SSG-MIB", "cssgCfgLocalForwardingEnabled"), ("CISCO-SSG-MIB", "cssgCfgAutoLogOffMode"), ("CISCO-SSG-MIB", "cssgCfgRadiusProxyEnabled"), ("CISCO-SSG-MIB", "cssgCfgTcpRedirectEnabled"), ("CISCO-SSG-MIB", "cssgCfgAutoDomainNatEnabled"), ("CISCO-SSG-MIB", "cssgCfgPortBundleHostKeyEnabled"), ("CISCO-SSG-MIB", "cssgCfgTransPassThroughEnabled"), ("CISCO-SSG-MIB", "cssgCfgAutoLogOffInterval"), ("CISCO-SSG-MIB", "cssgCfgAutoLogOffIcmpRetries"), ("CISCO-SSG-MIB", "cssgCfgMaxServicesPerUser"), ("CISCO-SSG-MIB", "cssgCfgAccountingEnabled"), ("CISCO-SSG-MIB", "cssgCfgDefaultNetworkType"), ("CISCO-SSG-MIB", "cssgCfgDefaultNetwork"), ("CISCO-SSG-MIB", "cssgCfgRadiusAuthenPort"), ("CISCO-SSG-MIB", "cssgCfgRadiusAccountingPort"), ("CISCO-SSG-MIB", "cssgCfgRadiusFwdAcctPktsEnabled"), ("CISCO-SSG-MIB", "cssgCfgAccountingInterval"), ("CISCO-SSG-MIB", "cssgCfgTCPRedirGrpForUnAuthUsers"), ("CISCO-SSG-MIB", "cssgCfgTCPRedirGrpForUnAuthServ"), ("CISCO-SSG-MIB", "cssgCfgTcpRedirGrpForSMTP"), ("CISCO-SSG-MIB", "cssgCfgTcpRedirGrpForInitialCapt"), ("CISCO-SSG-MIB", "cssgCfgTcpRedirGrpForAdvCapt"), ("CISCO-SSG-MIB", "cssgCfgRadiusClntRbtNotifEnabled"), ("CISCO-SSG-MIB", "cssgCfgAAAServerDownNotifEnabled"), ("CISCO-SSG-MIB", "cssgCfgTalEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSsgCfgGroupRev1 = ciscoSsgCfgGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoSsgCfgGroupRev1.setDescription('A collection of configurable parameters in SSG MIB.')
ciscoSsgTalUserInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 260, 3, 2, 11)).setObjects(("CISCO-SSG-MIB", "cssgTalWaitingForAuthUsers"), ("CISCO-SSG-MIB", "cssgTalUnidentifiedUsers"), ("CISCO-SSG-MIB", "cssgTalSuspectUsers"), ("CISCO-SSG-MIB", "cssgTalPassthroughUsers"), ("CISCO-SSG-MIB", "cssgTalMaxAuthRate"), ("CISCO-SSG-MIB", "cssgTalMaxAuthRateTimestamp"), ("CISCO-SSG-MIB", "cssgTalMinAuthRate"), ("CISCO-SSG-MIB", "cssgTalMinAuthRateTimestamp"), ("CISCO-SSG-MIB", "cssgTalCurrentAuthRate"), ("CISCO-SSG-MIB", "cssgTalCurrentAuthRateTimestamp"), ("CISCO-SSG-MIB", "cssgTalResetAuthRates"), ("CISCO-SSG-MIB", "cssgTalMaxPendingAuthReqs"), ("CISCO-SSG-MIB", "cssgTalMaxAuthReqsRate"), ("CISCO-SSG-MIB", "cssgTalDropPakDuringAuthorization"), ("CISCO-SSG-MIB", "cssgTalUnidentifiedUserAllowTraff"), ("CISCO-SSG-MIB", "cssgTalMaxSuspectUsers"), ("CISCO-SSG-MIB", "cssgTalSuspectUserTimeout"), ("CISCO-SSG-MIB", "cssgTalUnidentifiedUserTimeout"), ("CISCO-SSG-MIB", "cssgTalUserState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSsgTalUserInfoGroup = ciscoSsgTalUserInfoGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSsgTalUserInfoGroup.setDescription('A collection of objects pertaining to Transparent Auto-Logon Group.')
mibBuilder.exportSymbols("CISCO-SSG-MIB", cssgServiceIfBindTable=cssgServiceIfBindTable, cssgExcludedDomainName=cssgExcludedDomainName, cssgServiceDNSSecondaryIpType=cssgServiceDNSSecondaryIpType, cssgPortMapPortRangeTo=cssgPortMapPortRangeTo, cssgServiceSessionTimeout=cssgServiceSessionTimeout, cssgTcpRedirPortGrpMapEntry=cssgTcpRedirPortGrpMapEntry, ciscoSsgServicesGroup=ciscoSsgServicesGroup, cssgServiceIfRowStatus=cssgServiceIfRowStatus, cssgNetworkGrpNetRowStatus=cssgNetworkGrpNetRowStatus, cssgPortMapLength=cssgPortMapLength, cssgServiceOpenGarden=cssgServiceOpenGarden, cssgCfgAutoDomainNatEnabled=cssgCfgAutoDomainNatEnabled, cssgTalMaxAuthRate=cssgTalMaxAuthRate, cssgTcpRedirectGrpEntry=cssgTcpRedirectGrpEntry, cssgExcludedAPNName=cssgExcludedAPNName, cssgTalMaxSuspectUsers=cssgTalMaxSuspectUsers, cssgPortMapRowStatus=cssgPortMapRowStatus, cssgTcpRedirectGrpServerPort=cssgTcpRedirectGrpServerPort, cssgCfgTcpRedirGrpForInitialCapt=cssgCfgTcpRedirGrpForInitialCapt, cssgServiceDNSPrimaryIpType=cssgServiceDNSPrimaryIpType, cssgTcpRedirPortGrpMapRowStat=cssgTcpRedirPortGrpMapRowStat, cssgServiceRouteType=cssgServiceRouteType, ciscoSsgMIBCompliances=ciscoSsgMIBCompliances, ciscoSsgMIB=ciscoSsgMIB, ciscoSsgRadiusClientReboot=ciscoSsgRadiusClientReboot, cssgPortMapPortRangeFrom=cssgPortMapPortRangeFrom, cssgServiceRouteMaskType=cssgServiceRouteMaskType, cssgCfgRadiusFwdAcctPktsEnabled=cssgCfgRadiusFwdAcctPktsEnabled, cssgRadiusClientEntry=cssgRadiusClientEntry, cssgCfgObjects=cssgCfgObjects, cssgServiceRoutePermission=cssgServiceRoutePermission, cssgTalUnidentifiedUserTimeout=cssgTalUnidentifiedUserTimeout, cssgCfgAutoLogOffMode=cssgCfgAutoLogOffMode, cssgNetworkGrpNetIpAddr=cssgNetworkGrpNetIpAddr, cssgCfgDefaultNetworkType=cssgCfgDefaultNetworkType, cssgServiceEntry=cssgServiceEntry, ciscoSsgServiceInterfaceGroup=ciscoSsgServiceInterfaceGroup, cssgTalWaitingForAuthUsers=cssgTalWaitingForAuthUsers, cssgStatsLoginsSuccessful=cssgStatsLoginsSuccessful, cssgServiceType=cssgServiceType, cssgTalResetAuthRates=cssgTalResetAuthRates, cssgCfgTcpRedirectEnabled=cssgCfgTcpRedirectEnabled, cssgPortMapEntry=cssgPortMapEntry, cssgServiceIfIndex=cssgServiceIfIndex, ciscoSsgRadiusAAAServerDown=ciscoSsgRadiusAAAServerDown, cssgServiceName=cssgServiceName, cssgPortMap=cssgPortMap, cssgCfgLocalForwardingEnabled=cssgCfgLocalForwardingEnabled, cssgCfgTCPRedirGrpForUnAuthUsers=cssgCfgTCPRedirGrpForUnAuthUsers, cssgTalDropPakDuringAuthorization=cssgTalDropPakDuringAuthorization, cssgTcpRedirPortNoMapRowStat=cssgTcpRedirPortNoMapRowStat, cssgCfgDefaultNetwork=cssgCfgDefaultNetwork, cssgServiceUpstreamQOSEnabled=cssgServiceUpstreamQOSEnabled, cssgNetworkGrpTable=cssgNetworkGrpTable, cssgTalCurrentAuthRateTimestamp=cssgTalCurrentAuthRateTimestamp, ciscoSsgRadiusClientsGroup=ciscoSsgRadiusClientsGroup, cssgPortMapSourceIp=cssgPortMapSourceIp, cssgCfgRadiusClntRbtNotifEnabled=cssgCfgRadiusClntRbtNotifEnabled, cssgService=cssgService, cssgNetworkGrpNetIpType=cssgNetworkGrpNetIpType, cssgCfgRadiusAuthenPort=cssgCfgRadiusAuthenPort, cssgCfgAutoLogOffInterval=cssgCfgAutoLogOffInterval, cssgPortGrpName=cssgPortGrpName, cssgServiceMode=cssgServiceMode, cssgServiceIfBindEntry=cssgServiceIfBindEntry, cssgCfgSsgEnabled=cssgCfgSsgEnabled, ciscoSsgMIBConformance=ciscoSsgMIBConformance, cssgTcpRedirPortGrpMapTable=cssgTcpRedirPortGrpMapTable, cssgServiceRouteEntry=cssgServiceRouteEntry, cssgCfgRadiusAccountingPort=cssgCfgRadiusAccountingPort, cssgTalSuspectUserTimeout=cssgTalSuspectUserTimeout, cssgCfgTransPassThroughEnabled=cssgCfgTransPassThroughEnabled, ciscoSsgMIBObjects=ciscoSsgMIBObjects, cssgTalPassthroughUsers=cssgTalPassthroughUsers, ciscoSsgMIBCompliance=ciscoSsgMIBCompliance, cssgRadiusClientAddr=cssgRadiusClientAddr, ciscoSsgMIBGroups=ciscoSsgMIBGroups, ciscoSsgTcpRedirectGroup=ciscoSsgTcpRedirectGroup, cssgTcpRedirPortNoMapTable=cssgTcpRedirPortNoMapTable, cssgTcpRedirNetworkGrpMapEntry=cssgTcpRedirNetworkGrpMapEntry, cssgExcludedDomainTable=cssgExcludedDomainTable, ciscoSsgStatsGroup=ciscoSsgStatsGroup, PYSNMP_MODULE_ID=ciscoSsgMIB, cssgTcpRedirectGrpName=cssgTcpRedirectGrpName, cssgStatsPODs=cssgStatsPODs, cssgCfgAutoLogOffIcmpRetries=cssgCfgAutoLogOffIcmpRetries, cssgTcpRedirNetworkGrpMapTable=cssgTcpRedirNetworkGrpMapTable, cssgServiceRouteTable=cssgServiceRouteTable, cssgRadiusClientTable=cssgRadiusClientTable, cssgTalMaxAuthRateTimestamp=cssgTalMaxAuthRateTimestamp, cssgExcludedAPN=cssgExcludedAPN, cssgNetworkGrpName=cssgNetworkGrpName, cssgNetworkGrpEntry=cssgNetworkGrpEntry, ciscoSsgExclusionsGroup=ciscoSsgExclusionsGroup, cssgExcludedAPNRowStatus=cssgExcludedAPNRowStatus, cssgCfgTcpRedirGrpForSMTP=cssgCfgTcpRedirGrpForSMTP, cssgPortGrpEntry=cssgPortGrpEntry, cssgCfgAccountingInterval=cssgCfgAccountingInterval, cssgTcpRedirectGrpRowStatus=cssgTcpRedirectGrpRowStatus, cssgStatsObjects=cssgStatsObjects, cssgStatsActiveServices=cssgStatsActiveServices, cssgPortMapTable=cssgPortMapTable, cssgCfgMaxServicesPerUser=cssgCfgMaxServicesPerUser, cssgTcpRedirectGrpServerAddrType=cssgTcpRedirectGrpServerAddrType, cssgExcludedAPNEntry=cssgExcludedAPNEntry, cssgTcpRedirect=cssgTcpRedirect, cssgPortGrpTable=cssgPortGrpTable, cssgCfgRadiusProxyEnabled=cssgCfgRadiusProxyEnabled, cssgRadiusClientRowStatus=cssgRadiusClientRowStatus, cssgPortGrpPortRowStatus=cssgPortGrpPortRowStatus, cssgTcpRedirPortNo=cssgTcpRedirPortNo, cssgTalMinAuthRateTimestamp=cssgTalMinAuthRateTimestamp, cssgStatsActiveHosts=cssgStatsActiveHosts, cssgServiceTable=cssgServiceTable, cssgServiceDNSPrimary=cssgServiceDNSPrimary, cssgTalUnidentifiedUserAllowTraff=cssgTalUnidentifiedUserAllowTraff, cssgServicePrepaid=cssgServicePrepaid, cssgExcludedDomainRowStatus=cssgExcludedDomainRowStatus, cssgTalMaxAuthReqsRate=cssgTalMaxAuthReqsRate, cssgCfgTcpRedirGrpForAdvCapt=cssgCfgTcpRedirGrpForAdvCapt, cssgCfgAAAServerDownNotifEnabled=cssgCfgAAAServerDownNotifEnabled, cssgServiceRouteMask=cssgServiceRouteMask, cssgCfgPortBundleHostKeyEnabled=cssgCfgPortBundleHostKeyEnabled, cssgStatsActiveSessions=cssgStatsActiveSessions, cssgCfgTalEnabled=cssgCfgTalEnabled, cssgPortGrpPortNo=cssgPortGrpPortNo, cssgServiceDNSSecondary=cssgServiceDNSSecondary, ciscoSsgCfgGroupRev1=ciscoSsgCfgGroupRev1, cssgTalCurrentAuthRate=cssgTalCurrentAuthRate, cssgTcpRedirectGrpServerAddr=cssgTcpRedirectGrpServerAddr, cssgStatsLoginAttempts=cssgStatsLoginAttempts, cssgPortMapSourceIpType=cssgPortMapSourceIpType, cssgServiceDownStreamQOSEnabled=cssgServiceDownStreamQOSEnabled, cssgTcpRedirPortNoMapEntry=cssgTcpRedirPortNoMapEntry, ciscoSsgMIBNotifications=ciscoSsgMIBNotifications, ciscoSsgMIBComplianceRev1=ciscoSsgMIBComplianceRev1, cssgServiceActiveSessions=cssgServiceActiveSessions, cssgServiceRouteAddr=cssgServiceRouteAddr, cssgExcludedDomainEntry=cssgExcludedDomainEntry, cssgTcpRedirNetworkGrpMapRowStat=cssgTcpRedirNetworkGrpMapRowStat, cssgCfgAutoDomainMode=cssgCfgAutoDomainMode, cssgTalSuspectUsers=cssgTalSuspectUsers, cssgTalUserInfoTable=cssgTalUserInfoTable, cssgExcludedDomain=cssgExcludedDomain, cssgTcpRedirectGrpTable=cssgTcpRedirectGrpTable, cssgCfgTCPRedirGrpForUnAuthServ=cssgCfgTCPRedirGrpForUnAuthServ, cssgNetworkGrpNetMask=cssgNetworkGrpNetMask, cssgTalUserIPAddressType=cssgTalUserIPAddressType, cssgNetworkGrpNetMaskType=cssgNetworkGrpNetMaskType, cssgTal=cssgTal, cssgRadiusClientAddrType=cssgRadiusClientAddrType, cssgTalUserState=cssgTalUserState, cssgTcpRedirPortMapGrpName=cssgTcpRedirPortMapGrpName, cssgTalUserIPAddress=cssgTalUserIPAddress, cssgTalMinAuthRate=cssgTalMinAuthRate, ciscoSsgNotificationGroup=ciscoSsgNotificationGroup, cssgRadiusClients=cssgRadiusClients, ciscoSsgCfgGroup=ciscoSsgCfgGroup, cssgExcludedAPNTable=cssgExcludedAPNTable, ciscoSsgPortMapGroup=ciscoSsgPortMapGroup, ciscoSsgTalUserInfoGroup=ciscoSsgTalUserInfoGroup, cssgTcpRedirNetworkMapGrpName=cssgTcpRedirNetworkMapGrpName, cssgServiceIdleTimeout=cssgServiceIdleTimeout, cssgTalMaxPendingAuthReqs=cssgTalMaxPendingAuthReqs, cssgCfgAccountingEnabled=cssgCfgAccountingEnabled, cssgTalUnidentifiedUsers=cssgTalUnidentifiedUsers, cssgTalUserInfoEntry=cssgTalUserInfoEntry, cssgServiceIfBinds=cssgServiceIfBinds)
