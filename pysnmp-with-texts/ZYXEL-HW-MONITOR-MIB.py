#
# PySNMP MIB module ZYXEL-HW-MONITOR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-HW-MONITOR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:50:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, TimeTicks, Counter64, Gauge32, iso, ModuleIdentity, Unsigned32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ObjectIdentity, NotificationType, Integer32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "TimeTicks", "Counter64", "Gauge32", "iso", "ModuleIdentity", "Unsigned32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ObjectIdentity", "NotificationType", "Integer32", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
esMgmt, = mibBuilder.importSymbols("ZYXEL-ES-SMI", "esMgmt")
zyxelHwMonitor = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26))
if mibBuilder.loadTexts: zyxelHwMonitor.setLastUpdated('201207010000Z')
if mibBuilder.loadTexts: zyxelHwMonitor.setOrganization('Enterprise Solution ZyXEL')
if mibBuilder.loadTexts: zyxelHwMonitor.setContactInfo('')
if mibBuilder.loadTexts: zyxelHwMonitor.setDescription('The subtree for hardware monitor')
zyxelHwMonitorStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1))
zyxelHwMonitorNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 2))
zyxelHwMonitorFanRpmTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 1), )
if mibBuilder.loadTexts: zyxelHwMonitorFanRpmTable.setStatus('current')
if mibBuilder.loadTexts: zyxelHwMonitorFanRpmTable.setDescription('The table contains HW monitor fan information.')
zyxelHwMonitorFanRpmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 1, 1), ).setIndexNames((0, "ZYXEL-HW-MONITOR-MIB", "zyHwMonitorFanRpmIndex"))
if mibBuilder.loadTexts: zyxelHwMonitorFanRpmEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelHwMonitorFanRpmEntry.setDescription('An entry contains HW monitor fan information.')
zyHwMonitorFanRpmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: zyHwMonitorFanRpmIndex.setStatus('current')
if mibBuilder.loadTexts: zyHwMonitorFanRpmIndex.setDescription('Index of fan.')
zyHwMonitorFanRpmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorFanRpmDescription.setStatus('current')
if mibBuilder.loadTexts: zyHwMonitorFanRpmDescription.setDescription('Fan Description')
zyHwMonitorFanRpmCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorFanRpmCurrentValue.setStatus('current')
if mibBuilder.loadTexts: zyHwMonitorFanRpmCurrentValue.setDescription('Current speed in Revolutions Per Minute (RPM) on the fan.')
zyHwMonitorFanRpmMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorFanRpmMaxValue.setStatus('current')
if mibBuilder.loadTexts: zyHwMonitorFanRpmMaxValue.setDescription('Maximum speed measured in Revolutions Per Minute (RPM) on the fan.')
zyHwMonitorFanRpmMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorFanRpmMinValue.setStatus('current')
if mibBuilder.loadTexts: zyHwMonitorFanRpmMinValue.setDescription('Minimum speed measured in Revolutions Per Minute (RPM) on the fan.')
zyHwMonitorFanRpmLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorFanRpmLowThreshold.setStatus('current')
if mibBuilder.loadTexts: zyHwMonitorFanRpmLowThreshold.setDescription('The minimum speed at which a normal fan should work.')
zyHwMonitorFanRpmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorFanRpmStatus.setStatus('current')
if mibBuilder.loadTexts: zyHwMonitorFanRpmStatus.setDescription("'Normal' indicates that this fan is functioning above the minimum speed. 'Error' indicates that this fan is functioning below the minimum speed.")
zyxelHwMonitorTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 2), )
if mibBuilder.loadTexts: zyxelHwMonitorTemperatureTable.setStatus('current')
if mibBuilder.loadTexts: zyxelHwMonitorTemperatureTable.setDescription('The table contains HW monitor temperature information.')
zyxelHwMonitorTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 2, 1), ).setIndexNames((0, "ZYXEL-HW-MONITOR-MIB", "zyHwMonitorTemperatureIndex"))
if mibBuilder.loadTexts: zyxelHwMonitorTemperatureEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelHwMonitorTemperatureEntry.setDescription('An entry contains HW temperature information.')
zyHwMonitorTemperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: zyHwMonitorTemperatureIndex.setStatus('current')
if mibBuilder.loadTexts: zyHwMonitorTemperatureIndex.setDescription('Index of temperature unit.')
zyHwMonitorTemperatureDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorTemperatureDescription.setStatus('current')
if mibBuilder.loadTexts: zyHwMonitorTemperatureDescription.setDescription('Temperature Description')
zyHwMonitorTemperatureCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorTemperatureCurrentValue.setStatus('current')
if mibBuilder.loadTexts: zyHwMonitorTemperatureCurrentValue.setDescription('The current temperature measured at this sensor.')
zyHwMonitorTemperatureMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorTemperatureMaxValue.setStatus('current')
if mibBuilder.loadTexts: zyHwMonitorTemperatureMaxValue.setDescription('The maximum temperature measured at this sensor.')
zyHwMonitorTemperatureMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorTemperatureMinValue.setStatus('current')
if mibBuilder.loadTexts: zyHwMonitorTemperatureMinValue.setDescription('The minimum temperature measured at this sensor.')
zyHwMonitorTemperatureHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorTemperatureHighThreshold.setStatus('current')
if mibBuilder.loadTexts: zyHwMonitorTemperatureHighThreshold.setDescription('The upper temperature limit at this sensor.')
zyHwMonitorTemperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorTemperatureStatus.setStatus('current')
if mibBuilder.loadTexts: zyHwMonitorTemperatureStatus.setDescription("'Normal' indicates temperatures below the threshold and 'Error' for those above.")
zyxelHwMonitorVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 3), )
if mibBuilder.loadTexts: zyxelHwMonitorVoltageTable.setStatus('current')
if mibBuilder.loadTexts: zyxelHwMonitorVoltageTable.setDescription('The table contains HW monitor voltage information.')
zyxelHwMonitorVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 3, 1), ).setIndexNames((0, "ZYXEL-HW-MONITOR-MIB", "zyHwMonitorVoltageIndex"))
if mibBuilder.loadTexts: zyxelHwMonitorVoltageEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelHwMonitorVoltageEntry.setDescription('An entry contains HW voltage information.')
zyHwMonitorVoltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: zyHwMonitorVoltageIndex.setStatus('current')
if mibBuilder.loadTexts: zyHwMonitorVoltageIndex.setDescription('Index of voltage.')
zyHwMonitorVoltageDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorVoltageDescription.setStatus('current')
if mibBuilder.loadTexts: zyHwMonitorVoltageDescription.setDescription('Voltage Description')
zyHwMonitorVoltageCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorVoltageCurrentValue.setStatus('current')
if mibBuilder.loadTexts: zyHwMonitorVoltageCurrentValue.setDescription('The current voltage reading.')
zyHwMonitorVoltageMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorVoltageMaxValue.setStatus('current')
if mibBuilder.loadTexts: zyHwMonitorVoltageMaxValue.setDescription('The maximum voltage measured at this point.')
zyHwMonitorVoltageMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorVoltageMinValue.setStatus('current')
if mibBuilder.loadTexts: zyHwMonitorVoltageMinValue.setDescription('The minimum voltage measured at this point.')
zyHwMonitorVoltageNominalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorVoltageNominalValue.setStatus('current')
if mibBuilder.loadTexts: zyHwMonitorVoltageNominalValue.setDescription('The normal voltage at which the switch work.')
zyHwMonitorVoltageLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorVoltageLowThreshold.setStatus('current')
if mibBuilder.loadTexts: zyHwMonitorVoltageLowThreshold.setDescription('The minimum voltage at which the switch should work.')
zyHwMonitorVoltageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorVoltageStatus.setStatus('current')
if mibBuilder.loadTexts: zyHwMonitorVoltageStatus.setDescription("'Normal' indicates that the voltage is within an acceptable operating range at this point; otherwise 'Error' is displayed.")
zyxelHwMonitorPowerSource = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 4))
zyHwMonitorPowerSourceMode = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorPowerSourceMode.setStatus('current')
if mibBuilder.loadTexts: zyHwMonitorPowerSourceMode.setDescription('The current power source reading (AC prefer, load-sharing).')
zyxelHwMonitorPowerSourceTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 4, 2), )
if mibBuilder.loadTexts: zyxelHwMonitorPowerSourceTable.setStatus('current')
if mibBuilder.loadTexts: zyxelHwMonitorPowerSourceTable.setDescription('The table contains HW monitor power source information.')
zyxelHwMonitorPowerSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 4, 2, 1), ).setIndexNames((0, "ZYXEL-HW-MONITOR-MIB", "zyHwMonitorPowerSourceIndex"))
if mibBuilder.loadTexts: zyxelHwMonitorPowerSourceEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelHwMonitorPowerSourceEntry.setDescription('An entry contains HW power source information.')
zyHwMonitorPowerSourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 4, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: zyHwMonitorPowerSourceIndex.setStatus('current')
if mibBuilder.loadTexts: zyHwMonitorPowerSourceIndex.setDescription('Index of power source.')
zyHwMonitorPowerSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorPowerSourceType.setStatus('current')
if mibBuilder.loadTexts: zyHwMonitorPowerSourceType.setDescription('The current power source type (AC/DC).')
zyHwMonitorPowerSourceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorPowerSourceStatus.setStatus('current')
if mibBuilder.loadTexts: zyHwMonitorPowerSourceStatus.setDescription('The current power source status (absent/present/on).')
zyHwMonitorFanSpeedOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 2, 1)).setObjects(("ZYXEL-HW-MONITOR-MIB", "zyHwMonitorFanRpmIndex"), ("ZYXEL-HW-MONITOR-MIB", "zyHwMonitorFanRpmDescription"))
if mibBuilder.loadTexts: zyHwMonitorFanSpeedOutOfRange.setStatus('current')
if mibBuilder.loadTexts: zyHwMonitorFanSpeedOutOfRange.setDescription('Fan speed is out of the normal operation range.')
zyHwMonitorTemperatureOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 2, 2)).setObjects(("ZYXEL-HW-MONITOR-MIB", "zyHwMonitorTemperatureIndex"), ("ZYXEL-HW-MONITOR-MIB", "zyHwMonitorTemperatureDescription"))
if mibBuilder.loadTexts: zyHwMonitorTemperatureOutOfRange.setStatus('current')
if mibBuilder.loadTexts: zyHwMonitorTemperatureOutOfRange.setDescription('Temperature is out of the normal operation range.')
zyHwMonitorPowerSupplyVoltageOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 2, 3)).setObjects(("ZYXEL-HW-MONITOR-MIB", "zyHwMonitorVoltageIndex"), ("ZYXEL-HW-MONITOR-MIB", "zyHwMonitorVoltageDescription"))
if mibBuilder.loadTexts: zyHwMonitorPowerSupplyVoltageOutOfRange.setStatus('current')
if mibBuilder.loadTexts: zyHwMonitorPowerSupplyVoltageOutOfRange.setDescription('Power supply voltage is out of the normal operation range.')
zyHwMonitorBackupPowerSupplyInUse = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 2, 4))
if mibBuilder.loadTexts: zyHwMonitorBackupPowerSupplyInUse.setStatus('current')
if mibBuilder.loadTexts: zyHwMonitorBackupPowerSupplyInUse.setDescription('Backup power in use is fault.')
zyHwMonitorDyingGasp = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 2, 5))
if mibBuilder.loadTexts: zyHwMonitorDyingGasp.setStatus('current')
if mibBuilder.loadTexts: zyHwMonitorDyingGasp.setDescription('Unexpected power down or low power is detected.')
zyHwMonitorFanAirFlowInconsistency = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 2, 6))
if mibBuilder.loadTexts: zyHwMonitorFanAirFlowInconsistency.setStatus('current')
if mibBuilder.loadTexts: zyHwMonitorFanAirFlowInconsistency.setDescription('FAN airflows are inconsistent.')
zyHwMonitorFanSpeedOutOfRangeRecovered = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 2, 7)).setObjects(("ZYXEL-HW-MONITOR-MIB", "zyHwMonitorFanRpmIndex"), ("ZYXEL-HW-MONITOR-MIB", "zyHwMonitorFanRpmDescription"))
if mibBuilder.loadTexts: zyHwMonitorFanSpeedOutOfRangeRecovered.setStatus('current')
if mibBuilder.loadTexts: zyHwMonitorFanSpeedOutOfRangeRecovered.setDescription('Fan speed is recovered from out of the normal operation range.')
zyHwMonitorTemperatureOutOfRangeRecovered = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 2, 8)).setObjects(("ZYXEL-HW-MONITOR-MIB", "zyHwMonitorTemperatureIndex"), ("ZYXEL-HW-MONITOR-MIB", "zyHwMonitorTemperatureDescription"))
if mibBuilder.loadTexts: zyHwMonitorTemperatureOutOfRangeRecovered.setStatus('current')
if mibBuilder.loadTexts: zyHwMonitorTemperatureOutOfRangeRecovered.setDescription('Temperature is recovered from out of the normal operation range.')
zyHwMonitorPowerSupplyVoltageOutOfRangeRecovered = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 2, 9)).setObjects(("ZYXEL-HW-MONITOR-MIB", "zyHwMonitorVoltageIndex"), ("ZYXEL-HW-MONITOR-MIB", "zyHwMonitorVoltageDescription"))
if mibBuilder.loadTexts: zyHwMonitorPowerSupplyVoltageOutOfRangeRecovered.setStatus('current')
if mibBuilder.loadTexts: zyHwMonitorPowerSupplyVoltageOutOfRangeRecovered.setDescription('Power supply voltage is recovered from out of the normal operation range.')
mibBuilder.exportSymbols("ZYXEL-HW-MONITOR-MIB", zyHwMonitorTemperatureDescription=zyHwMonitorTemperatureDescription, zyxelHwMonitorNotifications=zyxelHwMonitorNotifications, zyHwMonitorTemperatureHighThreshold=zyHwMonitorTemperatureHighThreshold, zyxelHwMonitorPowerSource=zyxelHwMonitorPowerSource, zyHwMonitorDyingGasp=zyHwMonitorDyingGasp, zyHwMonitorFanAirFlowInconsistency=zyHwMonitorFanAirFlowInconsistency, zyxelHwMonitorVoltageTable=zyxelHwMonitorVoltageTable, PYSNMP_MODULE_ID=zyxelHwMonitor, zyHwMonitorVoltageDescription=zyHwMonitorVoltageDescription, zyHwMonitorTemperatureStatus=zyHwMonitorTemperatureStatus, zyHwMonitorTemperatureOutOfRange=zyHwMonitorTemperatureOutOfRange, zyxelHwMonitorFanRpmTable=zyxelHwMonitorFanRpmTable, zyHwMonitorFanRpmMaxValue=zyHwMonitorFanRpmMaxValue, zyHwMonitorPowerSupplyVoltageOutOfRangeRecovered=zyHwMonitorPowerSupplyVoltageOutOfRangeRecovered, zyHwMonitorTemperatureOutOfRangeRecovered=zyHwMonitorTemperatureOutOfRangeRecovered, zyHwMonitorTemperatureIndex=zyHwMonitorTemperatureIndex, zyHwMonitorFanRpmMinValue=zyHwMonitorFanRpmMinValue, zyHwMonitorVoltageLowThreshold=zyHwMonitorVoltageLowThreshold, zyHwMonitorPowerSupplyVoltageOutOfRange=zyHwMonitorPowerSupplyVoltageOutOfRange, zyxelHwMonitorVoltageEntry=zyxelHwMonitorVoltageEntry, zyxelHwMonitorPowerSourceTable=zyxelHwMonitorPowerSourceTable, zyHwMonitorTemperatureMinValue=zyHwMonitorTemperatureMinValue, zyHwMonitorVoltageIndex=zyHwMonitorVoltageIndex, zyHwMonitorVoltageNominalValue=zyHwMonitorVoltageNominalValue, zyHwMonitorFanRpmIndex=zyHwMonitorFanRpmIndex, zyHwMonitorVoltageStatus=zyHwMonitorVoltageStatus, zyHwMonitorPowerSourceIndex=zyHwMonitorPowerSourceIndex, zyHwMonitorTemperatureCurrentValue=zyHwMonitorTemperatureCurrentValue, zyHwMonitorFanRpmLowThreshold=zyHwMonitorFanRpmLowThreshold, zyxelHwMonitorTemperatureEntry=zyxelHwMonitorTemperatureEntry, zyHwMonitorFanRpmCurrentValue=zyHwMonitorFanRpmCurrentValue, zyHwMonitorVoltageMaxValue=zyHwMonitorVoltageMaxValue, zyHwMonitorBackupPowerSupplyInUse=zyHwMonitorBackupPowerSupplyInUse, zyxelHwMonitorStatus=zyxelHwMonitorStatus, zyHwMonitorFanSpeedOutOfRange=zyHwMonitorFanSpeedOutOfRange, zyHwMonitorPowerSourceStatus=zyHwMonitorPowerSourceStatus, zyxelHwMonitor=zyxelHwMonitor, zyHwMonitorPowerSourceType=zyHwMonitorPowerSourceType, zyxelHwMonitorFanRpmEntry=zyxelHwMonitorFanRpmEntry, zyHwMonitorTemperatureMaxValue=zyHwMonitorTemperatureMaxValue, zyxelHwMonitorTemperatureTable=zyxelHwMonitorTemperatureTable, zyHwMonitorFanSpeedOutOfRangeRecovered=zyHwMonitorFanSpeedOutOfRangeRecovered, zyHwMonitorVoltageMinValue=zyHwMonitorVoltageMinValue, zyHwMonitorFanRpmDescription=zyHwMonitorFanRpmDescription, zyHwMonitorFanRpmStatus=zyHwMonitorFanRpmStatus, zyxelHwMonitorPowerSourceEntry=zyxelHwMonitorPowerSourceEntry, zyHwMonitorPowerSourceMode=zyHwMonitorPowerSourceMode, zyHwMonitorVoltageCurrentValue=zyHwMonitorVoltageCurrentValue)
