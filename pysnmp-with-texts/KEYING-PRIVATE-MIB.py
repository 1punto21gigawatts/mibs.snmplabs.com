#
# PySNMP MIB module KEYING-PRIVATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/KEYING-PRIVATE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:04:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
switch, = mibBuilder.importSymbols("QUANTA-SWITCH-MIB", "switch")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Counter64, Bits, Counter32, Integer32, TimeTicks, ModuleIdentity, MibIdentifier, iso, Unsigned32, Gauge32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter64", "Bits", "Counter32", "Integer32", "TimeTicks", "ModuleIdentity", "MibIdentifier", "iso", "Unsigned32", "Gauge32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity")
DisplayString, TextualConvention, RowStatus, RowPointer = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus", "RowPointer")
keyingPrivate = ModuleIdentity((1, 3, 6, 1, 4, 1, 7244, 2, 24))
if mibBuilder.loadTexts: keyingPrivate.setLastUpdated('201108310000Z')
if mibBuilder.loadTexts: keyingPrivate.setOrganization('QCI')
if mibBuilder.loadTexts: keyingPrivate.setContactInfo(' Customer Support Postal: Quanta Computer Inc. 4, Wen Ming 1 St., Kuei Shan Hsiang, Tao Yuan Shien, Taiwan, R.O.C. Tel: +886 3 328 0050 E-Mail: strong.chen@quantatw.com')
if mibBuilder.loadTexts: keyingPrivate.setDescription('The QUANTA Private MIB for Keying Utility')
agentFeatureKeyingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 24, 1))
agentFeatureKeyingEnableKey = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 24, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFeatureKeyingEnableKey.setStatus('current')
if mibBuilder.loadTexts: agentFeatureKeyingEnableKey.setDescription('Hexadecimal Key-string entered to enable an advance functionality.')
agentFeatureKeyingDisableKey = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 24, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFeatureKeyingDisableKey.setStatus('current')
if mibBuilder.loadTexts: agentFeatureKeyingDisableKey.setDescription('Hexadecimal Key-string entered to disable an advance functionality.')
agentFeatureKeyingTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 24, 1, 3), )
if mibBuilder.loadTexts: agentFeatureKeyingTable.setStatus('current')
if mibBuilder.loadTexts: agentFeatureKeyingTable.setDescription('A table for license key and associated functionality. ')
agentFeatureKeyingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 24, 1, 3, 1), ).setIndexNames((0, "KEYING-PRIVATE-MIB", "agentFeatureKeyingIndex"))
if mibBuilder.loadTexts: agentFeatureKeyingEntry.setStatus('current')
if mibBuilder.loadTexts: agentFeatureKeyingEntry.setDescription('Represents entry for key table')
agentFeatureKeyingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 24, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentFeatureKeyingIndex.setStatus('current')
if mibBuilder.loadTexts: agentFeatureKeyingIndex.setDescription('A value corresponding to a keyable feature.When this table is walked, only values associated with keyable features are returned.This value must be equivalent to valid value of agentFeatureKeyingIndex.')
agentFeatureKeyingName = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 24, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFeatureKeyingName.setStatus('current')
if mibBuilder.loadTexts: agentFeatureKeyingName.setDescription('The abbreviated name of this component.This is also equivalent to agentFeatureKeyingName')
agentFeatureKeyingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 24, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFeatureKeyingStatus.setStatus('current')
if mibBuilder.loadTexts: agentFeatureKeyingStatus.setDescription('Returns a value of (1) if the feature is enabled for management, (2) if disabled.')
mibBuilder.exportSymbols("KEYING-PRIVATE-MIB", agentFeatureKeyingName=agentFeatureKeyingName, agentFeatureKeyingDisableKey=agentFeatureKeyingDisableKey, agentFeatureKeyingTable=agentFeatureKeyingTable, agentFeatureKeyingStatus=agentFeatureKeyingStatus, agentFeatureKeyingEnableKey=agentFeatureKeyingEnableKey, agentFeatureKeyingGroup=agentFeatureKeyingGroup, agentFeatureKeyingEntry=agentFeatureKeyingEntry, keyingPrivate=keyingPrivate, PYSNMP_MODULE_ID=keyingPrivate, agentFeatureKeyingIndex=agentFeatureKeyingIndex)
