#
# PySNMP MIB module SRED-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SRED-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:10:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
dlink_common_mgmt, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "dlink-common-mgmt")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, MibIdentifier, Integer32, iso, ModuleIdentity, Counter64, NotificationType, Gauge32, Unsigned32, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibIdentifier", "Integer32", "iso", "ModuleIdentity", "Counter64", "NotificationType", "Gauge32", "Unsigned32", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
swSredMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 12, 51))
if mibBuilder.loadTexts: swSredMIB.setLastUpdated('0902160000Z')
if mibBuilder.loadTexts: swSredMIB.setOrganization('D-Link Corp.')
if mibBuilder.loadTexts: swSredMIB.setContactInfo('http://support.dlink.com')
if mibBuilder.loadTexts: swSredMIB.setDescription('The structure of Simple RED Information for the proprietary enterprise.')
swSredCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 51, 1))
swSredInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 51, 2))
swSredMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 51, 3))
swSredGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 51, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSredGlobalState.setStatus('current')
if mibBuilder.loadTexts: swSredGlobalState.setDescription('This object enables\\disables the Simple RED state of the device.')
swSredDropCounterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 51, 2, 1), )
if mibBuilder.loadTexts: swSredDropCounterTable.setStatus('current')
if mibBuilder.loadTexts: swSredDropCounterTable.setDescription('A table that contains SRED drop packet counter information for each port.')
swSredDropCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 51, 2, 1, 1), ).setIndexNames((0, "SRED-MIB", "swSredPortIndex"))
if mibBuilder.loadTexts: swSredDropCounterEntry.setStatus('current')
if mibBuilder.loadTexts: swSredDropCounterEntry.setDescription('A list that contains SRED drop packet counter information per port.')
swSredPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 51, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSredPortIndex.setStatus('current')
if mibBuilder.loadTexts: swSredPortIndex.setDescription('This object indicates the port number.')
swSredLowDropCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 51, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSredLowDropCounter.setStatus('current')
if mibBuilder.loadTexts: swSredLowDropCounter.setDescription('This object indicates the drop count at low threshold.')
swSredHighDropCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 51, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSredHighDropCounter.setStatus('current')
if mibBuilder.loadTexts: swSredHighDropCounter.setDescription('This object indicates the drop count at high threshold.')
swSredCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 51, 3, 1), )
if mibBuilder.loadTexts: swSredCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swSredCtrlTable.setDescription('A table that contains the SRED setting for each port.')
swSredCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 51, 3, 1, 1), ).setIndexNames((0, "SRED-MIB", "swSredCtrlPortIndex"), (0, "SRED-MIB", "swSredCtrlClassIndex"))
if mibBuilder.loadTexts: swSredCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swSredCtrlEntry.setDescription('A list that contains SRED setting per port.')
swSredCtrlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 51, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSredCtrlPortIndex.setStatus('current')
if mibBuilder.loadTexts: swSredCtrlPortIndex.setDescription('This object indicates the port number.')
swSredCtrlClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 51, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSredCtrlClassIndex.setStatus('current')
if mibBuilder.loadTexts: swSredCtrlClassIndex.setDescription('This object indicates the hardware CoS queues the config sred command will apply to.')
swSredCtrlThresholdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 51, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSredCtrlThresholdLow.setStatus('current')
if mibBuilder.loadTexts: swSredCtrlThresholdLow.setDescription('This object indicates the low threshold that specifies the percentage of space utilized.')
swSredCtrlThresholdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 51, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSredCtrlThresholdHigh.setStatus('current')
if mibBuilder.loadTexts: swSredCtrlThresholdHigh.setDescription('This object indicates the high threshold that specifies the percentage of queue space utilized.')
swSredCtrlDropRateLow = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 51, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSredCtrlDropRateLow.setStatus('current')
if mibBuilder.loadTexts: swSredCtrlDropRateLow.setDescription('This object indicates the probabilistic drop rate if above the low threshold.')
swSredCtrlDropRateHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 51, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSredCtrlDropRateHigh.setStatus('current')
if mibBuilder.loadTexts: swSredCtrlDropRateHigh.setDescription('This object indicates the probabilistic drop rate if above the high threshold.')
swSredCtrlDropGreenState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 51, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSredCtrlDropGreenState.setStatus('current')
if mibBuilder.loadTexts: swSredCtrlDropGreenState.setDescription('This object indicates the drop green state. Setting this state to be disabled means probabilistic drop red colored packets if the queue depth is above the low threshold, and probabilistic drop yellow colored packets if the queue depth is above the high threshold. Setting this state to be enabled means probabilistic drop yellow and red colored packets if the queue depth is above the low threshold, and probabilistic drop green colored packets if the queue depth is above the high threshold.')
sw8021pColorMapCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 51, 3, 2), )
if mibBuilder.loadTexts: sw8021pColorMapCtrlTable.setStatus('obsolete')
if mibBuilder.loadTexts: sw8021pColorMapCtrlTable.setDescription('A table that contains information about priority map to packet color on each port.')
sw8021pColorMapCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 51, 3, 2, 1), ).setIndexNames((0, "SRED-MIB", "sw8021pColorMapCtrlPortIndex"), (0, "SRED-MIB", "sw8021pColorMapCtrlPriorityIndex"))
if mibBuilder.loadTexts: sw8021pColorMapCtrlEntry.setStatus('obsolete')
if mibBuilder.loadTexts: sw8021pColorMapCtrlEntry.setDescription('A list that contains priority map to packet color on per port.')
sw8021pColorMapCtrlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 51, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw8021pColorMapCtrlPortIndex.setStatus('obsolete')
if mibBuilder.loadTexts: sw8021pColorMapCtrlPortIndex.setDescription('This object indicates the port number.')
sw8021pColorMapCtrlPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 51, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw8021pColorMapCtrlPriorityIndex.setStatus('obsolete')
if mibBuilder.loadTexts: sw8021pColorMapCtrlPriorityIndex.setDescription('This object indicates the source priority of incoming packets.')
sw8021pColorMapCtrlColor = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 51, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("green", 1), ("red", 2), ("yellow", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw8021pColorMapCtrlColor.setStatus('obsolete')
if mibBuilder.loadTexts: sw8021pColorMapCtrlColor.setDescription('This object indicates the source priority of incoming packets.')
swDscpTrustPortCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 51, 3, 3), )
if mibBuilder.loadTexts: swDscpTrustPortCtrlTable.setStatus('obsolete')
if mibBuilder.loadTexts: swDscpTrustPortCtrlTable.setDescription('A table that contains information about the DSCP trust portlist.')
swDscpTrustPortCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 51, 3, 3, 1), ).setIndexNames((0, "SRED-MIB", "swDscpTrustPortCtrlPortIndex"))
if mibBuilder.loadTexts: swDscpTrustPortCtrlEntry.setStatus('obsolete')
if mibBuilder.loadTexts: swDscpTrustPortCtrlEntry.setDescription('A list that contains the DSCP trusted state per port.')
swDscpTrustPortCtrlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 51, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDscpTrustPortCtrlPortIndex.setStatus('obsolete')
if mibBuilder.loadTexts: swDscpTrustPortCtrlPortIndex.setDescription('This object indicates the port number.')
swDscpTrustPortCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 51, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDscpTrustPortCtrlState.setStatus('obsolete')
if mibBuilder.loadTexts: swDscpTrustPortCtrlState.setDescription('This object is used to enable/disable the DSCP trusted state on a selected port.')
swDscpMapCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 51, 3, 4), )
if mibBuilder.loadTexts: swDscpMapCtrlTable.setStatus('obsolete')
if mibBuilder.loadTexts: swDscpMapCtrlTable.setDescription('A table that contains information about DSCP map to priority and packet color on each port.')
swDscpMapCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 51, 3, 4, 1), ).setIndexNames((0, "SRED-MIB", "swDscpMapCtrlPortIndex"), (0, "SRED-MIB", "swDscpMapCtrlDscpIndex"))
if mibBuilder.loadTexts: swDscpMapCtrlEntry.setStatus('obsolete')
if mibBuilder.loadTexts: swDscpMapCtrlEntry.setDescription('A list that contains DSCP map information for each port.')
swDscpMapCtrlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 51, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDscpMapCtrlPortIndex.setStatus('obsolete')
if mibBuilder.loadTexts: swDscpMapCtrlPortIndex.setDescription('This object indicates the port number.')
swDscpMapCtrlDscpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 51, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDscpMapCtrlDscpIndex.setStatus('obsolete')
if mibBuilder.loadTexts: swDscpMapCtrlDscpIndex.setDescription('This object indicates the source DSCP incoming packet.')
swDscpMapCtrl8021pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 51, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDscpMapCtrl8021pPriority.setStatus('obsolete')
if mibBuilder.loadTexts: swDscpMapCtrl8021pPriority.setDescription('This object indicates the 802.1p priority on each port. Default value is: DSCP Priority 0-7 0 8-15 1 16-23 2 24-31 3 32-39 4 40-47 5 48-55 6 56-63 7 ')
swDscpMapCtrlNewDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 51, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDscpMapCtrlNewDscp.setStatus('obsolete')
if mibBuilder.loadTexts: swDscpMapCtrlNewDscp.setDescription('This object indicates the new DSCP map on each port.')
swDscpMapCtrlColor = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 51, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("green", 1), ("red", 2), ("yellow", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDscpMapCtrlColor.setStatus('obsolete')
if mibBuilder.loadTexts: swDscpMapCtrlColor.setDescription('This object maps the color for packets on each port.')
mibBuilder.exportSymbols("SRED-MIB", swDscpMapCtrlPortIndex=swDscpMapCtrlPortIndex, sw8021pColorMapCtrlTable=sw8021pColorMapCtrlTable, swDscpTrustPortCtrlEntry=swDscpTrustPortCtrlEntry, swSredCtrlDropRateHigh=swSredCtrlDropRateHigh, swSredCtrlTable=swSredCtrlTable, swSredCtrlDropGreenState=swSredCtrlDropGreenState, swSredMgmt=swSredMgmt, swDscpMapCtrlEntry=swDscpMapCtrlEntry, swDscpMapCtrlColor=swDscpMapCtrlColor, swSredDropCounterTable=swSredDropCounterTable, swSredGlobalState=swSredGlobalState, swSredCtrlThresholdHigh=swSredCtrlThresholdHigh, swDscpMapCtrlNewDscp=swDscpMapCtrlNewDscp, swSredCtrlThresholdLow=swSredCtrlThresholdLow, swDscpMapCtrlDscpIndex=swDscpMapCtrlDscpIndex, swDscpTrustPortCtrlTable=swDscpTrustPortCtrlTable, swSredCtrlClassIndex=swSredCtrlClassIndex, swSredCtrlPortIndex=swSredCtrlPortIndex, sw8021pColorMapCtrlEntry=sw8021pColorMapCtrlEntry, swSredPortIndex=swSredPortIndex, PYSNMP_MODULE_ID=swSredMIB, swSredCtrl=swSredCtrl, swSredLowDropCounter=swSredLowDropCounter, swSredHighDropCounter=swSredHighDropCounter, swSredMIB=swSredMIB, swDscpMapCtrl8021pPriority=swDscpMapCtrl8021pPriority, sw8021pColorMapCtrlPortIndex=sw8021pColorMapCtrlPortIndex, swSredInfo=swSredInfo, sw8021pColorMapCtrlPriorityIndex=sw8021pColorMapCtrlPriorityIndex, swSredCtrlEntry=swSredCtrlEntry, sw8021pColorMapCtrlColor=sw8021pColorMapCtrlColor, swDscpMapCtrlTable=swDscpMapCtrlTable, swDscpTrustPortCtrlState=swDscpTrustPortCtrlState, swSredDropCounterEntry=swSredDropCounterEntry, swSredCtrlDropRateLow=swSredCtrlDropRateLow, swDscpTrustPortCtrlPortIndex=swDscpTrustPortCtrlPortIndex)
