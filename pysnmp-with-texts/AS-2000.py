#
# PySNMP MIB module AS-2000 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AS-2000
# Produced by pysmi-0.3.4 at Wed May  1 11:25:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, ObjectIdentity, Gauge32, Counter64, Counter32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, NotificationType, TimeTicks, IpAddress, iso, Bits, enterprises, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "ObjectIdentity", "Gauge32", "Counter64", "Counter32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "NotificationType", "TimeTicks", "IpAddress", "iso", "Bits", "enterprises", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DisplayString(OctetString):
    pass

class PhysAddress(OctetString):
    pass

lucent = MibIdentifier((1, 3, 6, 1, 4, 1, 1751))
mibs = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2))
orinoco = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4))
as2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1))
orinocoProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 4))
as2000Product = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 4, 4))
orinocoInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3))
orinocoSNMPSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 4))
orinocoPPPSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5))
orinocoAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6))
radius = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7))
orinocoShimECPSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 8))
orinocoDiagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 10))
orinocoIAPP = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11))
orinocoIPX = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 12))
orinocoLinkTest = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13))
accessServerTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15))
orinocoPHY = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 2))
orinocoDriver = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 4))
pliSystemName = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pliSystemName.setStatus('mandatory')
if mibBuilder.loadTexts: pliSystemName.setDescription('The sysName of the Access Server. This may be used for diagnostic purposes. This name will be the same as the sysName of the system group of MIB II')
psWlanIfTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 2, 2), )
if mibBuilder.loadTexts: psWlanIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: psWlanIfTable.setDescription('The table contains the information about the wavelan interfaces present in the Access Server.')
psWlanIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 2, 2, 1), ).setIndexNames((0, "AS-2000", "pliWlanIfIndex"))
if mibBuilder.loadTexts: psWlanIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: psWlanIfEntry.setDescription('The entry in the wavelan interfac table. Described next.')
pliWlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pliWlanIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pliWlanIfIndex.setDescription("A unique value for each interface. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
pliWlanIfNetworkName = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pliWlanIfNetworkName.setStatus('mandatory')
if mibBuilder.loadTexts: pliWlanIfNetworkName.setDescription('The network name of this wavelan interface')
pliWlanIfMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 2, 2, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pliWlanIfMACAddress.setStatus('mandatory')
if mibBuilder.loadTexts: pliWlanIfMACAddress.setDescription('The MAC address of the wavelan card present in this interface.')
pliWlanIfMediumReservation = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2347))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pliWlanIfMediumReservation.setStatus('mandatory')
if mibBuilder.loadTexts: pliWlanIfMediumReservation.setDescription('The medium reservation value. The range is 0 - 2347. Default is 2347 - means disabled. Medium reservation specifies the number of octets in a message above which a RTS/CTS handshake is performed.')
pliWlanIfTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 2, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pliWlanIfTransmitRate.setStatus('mandatory')
if mibBuilder.loadTexts: pliWlanIfTransmitRate.setDescription('The transmit rate of this interface.')
pliWlanIfOperatingFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pliWlanIfOperatingFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: pliWlanIfOperatingFrequency.setDescription('The RF channel that the Access Server is working on.')
pliWlanIfAPDensity = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pliWlanIfAPDensity.setStatus('mandatory')
if mibBuilder.loadTexts: pliWlanIfAPDensity.setDescription('The AP density in the region.')
pliWlanIfClosedSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 2, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pliWlanIfClosedSystem.setStatus('mandatory')
if mibBuilder.loadTexts: pliWlanIfClosedSystem.setDescription("This flag identifies whether the Access Server will accept associate requests in this interface, from AS-Clients having a network name of 'ANY'. The Access Server should always be a closed station and such requests should always be rejected. This flag is provided for diagnostic purposes.")
pliWlanIfAllowedTransmitRates = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pliWlanIfAllowedTransmitRates.setStatus('mandatory')
if mibBuilder.loadTexts: pliWlanIfAllowedTransmitRates.setDescription('This variables reflects the transmit rates that the wavelan card supports')
pliWlanIfRegulatoryDomainList = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 2, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pliWlanIfRegulatoryDomainList.setStatus('mandatory')
if mibBuilder.loadTexts: pliWlanIfRegulatoryDomainList.setDescription('This variables reflects the regulatory domain the wavelan card belongs to.')
pliWlanIfAllowedOperatingFrequencies = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pliWlanIfAllowedOperatingFrequencies.setStatus('mandatory')
if mibBuilder.loadTexts: pliWlanIfAllowedOperatingFrequencies.setDescription('This variables reflects the RF channels that the wavelan card supports.')
pliWlanIfCapabilityOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pliWlanIfCapabilityOptions.setStatus('mandatory')
if mibBuilder.loadTexts: pliWlanIfCapabilityOptions.setDescription('The capabilities of the card. Indicates the support of features like WEP.')
pliWlanIfProfileCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pliWlanIfProfileCode.setStatus('mandatory')
if mibBuilder.loadTexts: pliWlanIfProfileCode.setDescription('The varible conprises of a vendor indication (Lucent or an OEM customer) and a capability indication (eg. bronze or gold).')
pliDriverName = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pliDriverName.setStatus('mandatory')
if mibBuilder.loadTexts: pliDriverName.setDescription('The driver name.')
pliDriverVersion = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 4, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pliDriverVersion.setStatus('mandatory')
if mibBuilder.loadTexts: pliDriverVersion.setDescription("The driver's version number. This is a text string including the major and minor release number, and, optionally, the patch level: 'mm.nn.pp', where mm = major release number nn = point release number pp = optional patch number.")
psSNMPReadPassword = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 4, 1), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: psSNMPReadPassword.setStatus('mandatory')
if mibBuilder.loadTexts: psSNMPReadPassword.setDescription('The password for reading object values from the agent.')
psSNMPReadWritePassword = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 4, 2), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: psSNMPReadWritePassword.setStatus('mandatory')
if mibBuilder.loadTexts: psSNMPReadWritePassword.setDescription('The password for reading and modifying object values from the agent.')
psSNMPTrapHostIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 4, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSNMPTrapHostIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: psSNMPTrapHostIPAddress.setDescription('The IP address of the host to which traps should be sent.')
psSNMPTrapHostPassword = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 4, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSNMPTrapHostPassword.setStatus('mandatory')
if mibBuilder.loadTexts: psSNMPTrapHostPassword.setDescription('The password sent with the trap to enable the management station to ignore unsolicited traps.')
psSNMPManagerCount = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSNMPManagerCount.setStatus('mandatory')
if mibBuilder.loadTexts: psSNMPManagerCount.setDescription('The number of management stations that have been authorised to manage this Access Server.')
psSNMPAccessTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 4, 6), )
if mibBuilder.loadTexts: psSNMPAccessTable.setStatus('mandatory')
if mibBuilder.loadTexts: psSNMPAccessTable.setDescription('The table containing the information about the managers authorised to manage this Access Server.')
psSNMPAccessTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 4, 6, 1), ).setIndexNames((0, "AS-2000", "psSNMPManagerIndex"))
if mibBuilder.loadTexts: psSNMPAccessTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: psSNMPAccessTableEntry.setDescription('The entry in the SNMP access table. Described next.')
managerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 4, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: managerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: managerIndex.setDescription('Management station identification number. Is the index for the table.')
managerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 4, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managerIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: managerIPAddress.setDescription('IP address of the management station.')
managerSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 4, 6, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managerSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: managerSubnetMask.setDescription('The IP subnet mask. Used to grant access to a complete subnet.')
managerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: managerStatus.setDescription('Whether the manager is enabled or disabled. Used to delete the unwanted entries.')
psSNMPInBadManagers = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSNMPInBadManagers.setStatus('mandatory')
if mibBuilder.loadTexts: psSNMPInBadManagers.setDescription('The no of attempts to manage this Access Server by unauthorised managers.')
psTestSNMPReadWritePassword = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 4, 8), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: psTestSNMPReadWritePassword.setStatus('mandatory')
if mibBuilder.loadTexts: psTestSNMPReadWritePassword.setDescription('The password for reading and modifying object values from the agent can be verified by setting this.')
psPPPIPAddressAssignmentType = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPPPIPAddressAssignmentType.setStatus('mandatory')
if mibBuilder.loadTexts: psPPPIPAddressAssignmentType.setDescription('This identifies whether the IP addresses assigned to the AS-Clients are obtained through APM (address pool manager), through DHCP or through the RADIUS server.')
psPPPNoOfMACIPMappingEntries = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPPPNoOfMACIPMappingEntries.setStatus('mandatory')
if mibBuilder.loadTexts: psPPPNoOfMACIPMappingEntries.setDescription('The number of static mapping entries.')
psPPPMACIPMappingTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 3), )
if mibBuilder.loadTexts: psPPPMACIPMappingTable.setStatus('mandatory')
if mibBuilder.loadTexts: psPPPMACIPMappingTable.setDescription('This table contains the static mapping of MAC addresses to IP addresses.')
psPPPMACIPMappingTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 3, 1), ).setIndexNames((0, "AS-2000", "psPPPMACIPTableIndex"))
if mibBuilder.loadTexts: psPPPMACIPMappingTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: psPPPMACIPMappingTableEntry.setDescription('The entry of the asPPPMACIPMappingTable Described below.')
mACIPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mACIPIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mACIPIndex.setDescription(' This is the index for the mappping table.')
mACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 3, 1, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mACAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mACAddress.setDescription('This is the MAC address.')
iPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: iPAddress.setDescription('The IP address corresponding to the MAC address.')
comment = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comment.setStatus('mandatory')
if mibBuilder.loadTexts: comment.setDescription("The comment for this entry, maybe the PC's owner.")
entryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: entryStatus.setDescription('Whether the entry is enabled or disabled. Used to delete the unwanted entries.')
psPPPKeepAliveInterval = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPPPKeepAliveInterval.setStatus('mandatory')
if mibBuilder.loadTexts: psPPPKeepAliveInterval.setDescription('The keep alive interval to be notified to the PPP layer.')
psPPPNoOfKeepAliveTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPPPNoOfKeepAliveTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: psPPPNoOfKeepAliveTimeouts.setDescription('The maximum number of timeouts before the session is torn down.')
psPPPPrimaryDNSIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPPPPrimaryDNSIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: psPPPPrimaryDNSIPAddress.setDescription('The IP address of the primary DNS server in the network.')
psPPPSecondaryDNSIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPPPSecondaryDNSIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: psPPPSecondaryDNSIPAddress.setDescription('The IP address of the secondary DNS server in the network.')
psPPPMaxNoOfUsers = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPPPMaxNoOfUsers.setStatus('mandatory')
if mibBuilder.loadTexts: psPPPMaxNoOfUsers.setDescription('The maximum no of clients permitted to connect to this Access Server.')
psPPPCHAPStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPPPCHAPStatus.setStatus('mandatory')
if mibBuilder.loadTexts: psPPPCHAPStatus.setDescription('This variable indicates the status of CHAP in the Access Server.')
psPPPCHAPPriority = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPPPCHAPPriority.setStatus('mandatory')
if mibBuilder.loadTexts: psPPPCHAPPriority.setDescription('This variable indicates the priority of CHAP among all authentictaion protocols enabled on the Access Server.')
psPPPPAPStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPPPPAPStatus.setStatus('mandatory')
if mibBuilder.loadTexts: psPPPPAPStatus.setDescription('This variable indicates the status of PAP in the Access Server.')
psPPPPAPPriority = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPPPPAPPriority.setStatus('mandatory')
if mibBuilder.loadTexts: psPPPPAPPriority.setDescription('This variable indicates the priority of PAP among all authentictaion protocols enabled on the Access Server.')
psPPPPrimaryNBNSIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPPPPrimaryNBNSIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: psPPPPrimaryNBNSIPAddress.setDescription('The IP address of the Primary NBNS server in the network.')
psPPPSecondaryNBNSIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPPPSecondaryNBNSIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: psPPPSecondaryNBNSIPAddress.setDescription('The IP address of the Secondary NBNS server in the network.')
psPPPIPRangeTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 15), )
if mibBuilder.loadTexts: psPPPIPRangeTable.setStatus('mandatory')
if mibBuilder.loadTexts: psPPPIPRangeTable.setDescription('This table contains the static mapping of MAC addresses to IP addresses.')
psPPPIPRangeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 15, 1), ).setIndexNames((0, "AS-2000", "psPPPIPRangeTableIndex"))
if mibBuilder.loadTexts: psPPPIPRangeTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: psPPPIPRangeTableEntry.setDescription('The entry of the psPPPIPRangeTable. Described below.')
pPPIPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pPPIPIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pPPIPIndex.setDescription(' This is the index for the IP range table.')
startIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 15, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: startIPAddress.setDescription('This is the staring IP address of this range.')
endIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 15, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: endIPAddress.setDescription('This is the ending IP address of this range.')
width = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 15, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: width.setStatus('mandatory')
if mibBuilder.loadTexts: width.setDescription('This is the withd of the range (no of addresses).')
status = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("enable", 1), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: status.setStatus('mandatory')
if mibBuilder.loadTexts: status.setDescription('The status of the entry, whether to be used or not used. Setting this to delete will remove this entry.')
iPComment = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 15, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPComment.setStatus('mandatory')
if mibBuilder.loadTexts: iPComment.setDescription('The comment for this entry may be the PC owner.')
psPPPSessionIdleTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 36000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPPPSessionIdleTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: psPPPSessionIdleTimeOut.setDescription('The varible indicates the Session Idle time out.')
psVersion = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psVersion.setStatus('mandatory')
if mibBuilder.loadTexts: psVersion.setDescription("The version of the Access Server software currently execuing. Would be text string including the major and minor release number, and, optionally, the patch level: 'mm.nn.pp', where mm = major release number nn = point release number pp = optional patch number.")
psIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: psIPAddress.setDescription('The IP address to be assigned to the Access Server (to change from factory fitted IP address).')
psSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: psSubnetMask.setDescription('The subnet mask of the Access Server.')
psDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDefaultGateway.setStatus('mandatory')
if mibBuilder.loadTexts: psDefaultGateway.setDescription('The default gateway for the Access Server.')
psIPAddressType = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psIPAddressType.setStatus('mandatory')
if mibBuilder.loadTexts: psIPAddressType.setDescription('This can be DHCP/BOOTP(dynamic) or assigned by User via CLI or AS Manager(static). The IP address of the Access Server will be assigned based on this.')
psAdministrativeState = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAdministrativeState.setStatus('mandatory')
if mibBuilder.loadTexts: psAdministrativeState.setDescription('The administrative state of the substation, can be Up or Down.')
psTFTPIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psTFTPIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: psTFTPIPAddress.setDescription('The IP address of the TFTP server.')
psTFTPFilename = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psTFTPFilename.setStatus('mandatory')
if mibBuilder.loadTexts: psTFTPFilename.setDescription('The filename of the image in the TFTP server.')
psTFTPOperation = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 9), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: psTFTPOperation.setStatus('mandatory')
if mibBuilder.loadTexts: psTFTPOperation.setDescription('The operation to be done, can be upload or download.')
psReboot = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psReboot.setStatus('mandatory')
if mibBuilder.loadTexts: psReboot.setDescription('This variable must be set to reboot the Access Server. The value is the number of seconds to wait to do a reboot.')
psSecondsToAdminDown = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSecondsToAdminDown.setStatus('mandatory')
if mibBuilder.loadTexts: psSecondsToAdminDown.setDescription('The count of seconds to go before the administrative state of the Access Server is made down.')
psContactEmail = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psContactEmail.setStatus('mandatory')
if mibBuilder.loadTexts: psContactEmail.setDescription('The textual identification of the contact person for this managed node, together with information on how to contact this person.')
psBSPBootloaderVersion = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psBSPBootloaderVersion.setStatus('mandatory')
if mibBuilder.loadTexts: psBSPBootloaderVersion.setDescription('This object represents the BSP/Bootloader version that is currently stored in the access server device..')
psTelnetSesssions = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psTelnetSesssions.setStatus('mandatory')
if mibBuilder.loadTexts: psTelnetSesssions.setDescription('This object is used to enable or disable telnet access and to specify the number of active telnet sessions. When this object is set to 0, telnet access is disabled. When this object is set to something greater than 0, then it specifies the maximum number of active telnet sessions.')
psTelnetPassword = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 15), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: psTelnetPassword.setStatus('mandatory')
if mibBuilder.loadTexts: psTelnetPassword.setDescription('Password to access Access Server from Telenet.')
psTelnetPort = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psTelnetPort.setStatus('mandatory')
if mibBuilder.loadTexts: psTelnetPort.setDescription('The TCP/IP port for Access Server Telenet daemon.')
psTelnetTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psTelnetTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: psTelnetTimeout.setDescription('Telnet inactivity timeout in minutes. The default value is 15 minutes')
psTelnetLoginTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psTelnetLoginTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: psTelnetLoginTimeout.setDescription('Telnet login timeout in seconds. The default value is 30 seconds')
psSerialBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSerialBaudRate.setStatus('mandatory')
if mibBuilder.loadTexts: psSerialBaudRate.setDescription('Serial interface baud rate. The default value is 9600')
psSerialDataBits = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSerialDataBits.setStatus('mandatory')
if mibBuilder.loadTexts: psSerialDataBits.setDescription('Serial interface data bits. The default value is 8')
psSerialParity = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSerialParity.setStatus('mandatory')
if mibBuilder.loadTexts: psSerialParity.setDescription('Serial interface Parity check. The default value is None')
psSerialStopBits = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSerialStopBits.setStatus('mandatory')
if mibBuilder.loadTexts: psSerialStopBits.setDescription('Serial interface stop bits. The default value is 1')
psSerialFlowControl = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSerialFlowControl.setStatus('mandatory')
if mibBuilder.loadTexts: psSerialFlowControl.setDescription('Serial interface Flow control. The default value is None')
psTFTPFileType = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psTFTPFileType.setStatus('mandatory')
if mibBuilder.loadTexts: psTFTPFileType.setDescription('The type of the file to be uploaded or downloaded to/from the access server. The AllConfigFiles options shall upload or download all the configuration files supported.')
psDeviceSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDeviceSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: psDeviceSerialNumber.setDescription('This parameter identifies the serial number of the system.')
psBroadcastMessage = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psBroadcastMessage.setStatus('mandatory')
if mibBuilder.loadTexts: psBroadcastMessage.setDescription('This parameter allows to set customized messages to be sent to all connected clients.')
psPOSTVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPOSTVersionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: psPOSTVersionNumber.setDescription('This parameter identifies the POST version number of the system.')
psHardwareVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psHardwareVersionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: psHardwareVersionNumber.setDescription('This parameter identifies the Hardware version number of the system.')
radiusClientMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2))
radiusClientMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1))
radiusClient = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1))
radiusClientInvalidServerAddresses = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusClientInvalidServerAddresses.setStatus('mandatory')
if mibBuilder.loadTexts: radiusClientInvalidServerAddresses.setDescription('The total number of RADIUS Access-Response messages received from unknown addresses since client start-up')
radiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2), )
if mibBuilder.loadTexts: radiusServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: radiusServerTable.setDescription('The (conceptual) table listing the RADIUS servers with which the client shares a secret.')
radiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1), ).setIndexNames((0, "AS-2000", "radiusServerIndex"))
if mibBuilder.loadTexts: radiusServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: radiusServerEntry.setDescription('An entry (conceptual row) representing a RADIUS server with which the client shares a secret.')
radiusServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusServerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: radiusServerIndex.setDescription('The RADIUS server with whom the client interacts.')
radiusServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusServerType.setStatus('mandatory')
if mibBuilder.loadTexts: radiusServerType.setDescription('The RADIUS server type (Authentication or Accounting or Both). For creating a server entry Server Type should be set')
radiusServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: radiusServerAddress.setDescription('The IP address of the RADIUS server referred to in this table entry.')
radiusServerDestPortAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerDestPortAuth.setStatus('mandatory')
if mibBuilder.loadTexts: radiusServerDestPortAuth.setDescription(' The Authentication port of the RADIUS Server.')
radiusServerDestPortAcct = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerDestPortAcct.setStatus('mandatory')
if mibBuilder.loadTexts: radiusServerDestPortAcct.setDescription('The Accounting port of the RADIUS Server.')
radiusClientAccessRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusClientAccessRequests.setStatus('mandatory')
if mibBuilder.loadTexts: radiusClientAccessRequests.setDescription('The total number of RADIUS Access-Request messages sent since client start-up')
radiusClientAccessRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusClientAccessRetransmissions.setStatus('mandatory')
if mibBuilder.loadTexts: radiusClientAccessRetransmissions.setDescription('The total number of RADIUS Access-Request messages retransmitted since client start-up')
radiusClientAccessAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusClientAccessAccepts.setStatus('mandatory')
if mibBuilder.loadTexts: radiusClientAccessAccepts.setDescription('The total number of RADIUS Access-Accept messages received since client start-up')
radiusClientAccessChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusClientAccessChallenges.setStatus('mandatory')
if mibBuilder.loadTexts: radiusClientAccessChallenges.setDescription('The total number of RADIUS Access-Challenge messages received since client start-up')
radiusClientMalformedAccessResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusClientMalformedAccessResponses.setStatus('mandatory')
if mibBuilder.loadTexts: radiusClientMalformedAccessResponses.setDescription('The total number of malformed RADIUS Access-Response messages received since client start-up')
radiusClientAuthenticationBadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusClientAuthenticationBadAuthenticators.setStatus('mandatory')
if mibBuilder.loadTexts: radiusClientAuthenticationBadAuthenticators.setDescription('The total number of RADIUS Access-Response messages containing invalid authenticators received since client start-up')
radiusClientAccessRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusClientAccessRejects.setStatus('mandatory')
if mibBuilder.loadTexts: radiusClientAccessRejects.setDescription('The total number of RADIUS Access-Reject messages sent since client start-up')
radiusClientTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusClientTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: radiusClientTimeouts.setDescription('The total number of timeouts since client startup')
radiusClientAccountingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusClientAccountingRequests.setStatus('mandatory')
if mibBuilder.loadTexts: radiusClientAccountingRequests.setDescription('The total number of RADIUS Accounting-Request messages sent since client start-up')
radiusClientAccountingRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusClientAccountingRetransmissions.setStatus('mandatory')
if mibBuilder.loadTexts: radiusClientAccountingRetransmissions.setDescription('The total number of RADIUS Accounting-Request messages retransmitted since client start-up')
radiusClientAccountingResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusClientAccountingResponses.setStatus('mandatory')
if mibBuilder.loadTexts: radiusClientAccountingResponses.setDescription('The total number of RADIUS Accounting-Response messages received since client start-up')
radiusClientAccountingBadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusClientAccountingBadAuthenticators.setStatus('mandatory')
if mibBuilder.loadTexts: radiusClientAccountingBadAuthenticators.setDescription('The total number of RADIUS Accounting-Response messages which contained invalid authenticators received since client start-up')
radiusServerSharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerSharedSecret.setStatus('mandatory')
if mibBuilder.loadTexts: radiusServerSharedSecret.setDescription('The secret string which is shared between Server and Client')
radiusServerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: radiusServerEnabled.setDescription('Flag to tell whether the server is active or Inactive')
radiusServerResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerResponseTime.setStatus('mandatory')
if mibBuilder.loadTexts: radiusServerResponseTime.setDescription('The maximum time within which the server has to respond for a request from the client')
radiusServerMaximumRetransmission = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerMaximumRetransmission.setStatus('mandatory')
if mibBuilder.loadTexts: radiusServerMaximumRetransmission.setDescription('The allowed maximum no. of trials to be tried by a client to get response from the server for a request')
radiusClientMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 2))
radiusClientMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 2, 1))
radiusClientMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 2, 2))
psShimECPRetransmissionCount = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 8, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psShimECPRetransmissionCount.setStatus('mandatory')
if mibBuilder.loadTexts: psShimECPRetransmissionCount.setDescription('The number of retransmissions when responses are not received with the timeout period.')
psShimECPRepeatResponseCount = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 8, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psShimECPRepeatResponseCount.setStatus('mandatory')
if mibBuilder.loadTexts: psShimECPRepeatResponseCount.setDescription('The number of time the transmitted response can be retransmitted.')
psShimECPRetransmissionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 8, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psShimECPRetransmissionTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: psShimECPRetransmissionTimeout.setDescription('The timeout interval for a response to be received.')
psIappStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psIappStatus.setStatus('mandatory')
if mibBuilder.loadTexts: psIappStatus.setDescription('IAPP Status (whether IAPP feature should be enabled or diaabled)')
psIappAnnReqOut = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIappAnnReqOut.setStatus('mandatory')
if mibBuilder.loadTexts: psIappAnnReqOut.setDescription('Number of ANNOUNCE.requests sent.')
psIappAnnReqIn = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIappAnnReqIn.setStatus('mandatory')
if mibBuilder.loadTexts: psIappAnnReqIn.setDescription('Number of ANNOUNCE.requests received.')
psIappAnnRespOut = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIappAnnRespOut.setStatus('mandatory')
if mibBuilder.loadTexts: psIappAnnRespOut.setDescription('Number of ANNOUNCE.responses sent.')
psIappAnnRespIn = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIappAnnRespIn.setStatus('mandatory')
if mibBuilder.loadTexts: psIappAnnRespIn.setDescription('Number of ANNOUNCE.responses received.')
psIappHandOvrReqOut = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIappHandOvrReqOut.setStatus('mandatory')
if mibBuilder.loadTexts: psIappHandOvrReqOut.setDescription('Number of HANDOVER.request sent.')
psIappHandOvrReqIn = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIappHandOvrReqIn.setStatus('mandatory')
if mibBuilder.loadTexts: psIappHandOvrReqIn.setDescription('Number of HANDOVER.request received.')
psIappHandOvrRespOut = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIappHandOvrRespOut.setStatus('mandatory')
if mibBuilder.loadTexts: psIappHandOvrRespOut.setDescription('Number of HANDOVER.responses sent.')
psIappHandOvrRespIn = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIappHandOvrRespIn.setStatus('mandatory')
if mibBuilder.loadTexts: psIappHandOvrRespIn.setDescription('Number of HANDOVER.responses received.')
psIappEndSessOut = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIappEndSessOut.setStatus('mandatory')
if mibBuilder.loadTexts: psIappEndSessOut.setDescription('Number of IAPP End-PPP session PDUs sent.')
psIappEndSessIn = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIappEndSessIn.setStatus('mandatory')
if mibBuilder.loadTexts: psIappEndSessIn.setDescription('Number of IAPP End-PPP session PDUs received.')
psIappEndSessAckOut = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIappEndSessAckOut.setStatus('mandatory')
if mibBuilder.loadTexts: psIappEndSessAckOut.setDescription('Number of IAPP End-PPP session acknowledgement PDUs sent.')
psIappEndSessAckIn = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIappEndSessAckIn.setStatus('mandatory')
if mibBuilder.loadTexts: psIappEndSessAckIn.setDescription('Number of IAPP End-PPP session acknowledgement PDUs received.')
psIappPduDrops = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIappPduDrops.setStatus('mandatory')
if mibBuilder.loadTexts: psIappPduDrops.setDescription('Number of IAPP PDUs dropped.')
psIappHandOvrReqReSent = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIappHandOvrReqReSent.setStatus('mandatory')
if mibBuilder.loadTexts: psIappHandOvrReqReSent.setDescription('Number of HANDOVER requests re-transmitted..')
psIappAnnInterval = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psIappAnnInterval.setStatus('mandatory')
if mibBuilder.loadTexts: psIappAnnInterval.setDescription('This parameter represents interval in seconds for performing an IAPP announce operation by the device. The units for this parameter is seconds and default value should be 120 seconds.')
psIappAnnRespTime = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIappAnnRespTime.setStatus('mandatory')
if mibBuilder.loadTexts: psIappAnnRespTime.setDescription('This parameter indicates the amount of time in seconds the device waits to send an IAPP announce response after an announce request message is sent. This parameter is set to a default value of 2 seconds and is not configurable.')
psIappHandOvrTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psIappHandOvrTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: psIappHandOvrTimeOut.setDescription('This parameter represents the time in milliseconds the device waits before it resends a handover response message. The default value for this parameter should be 512 milliseconds.')
psIappMaxHandOvrRetries = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psIappMaxHandOvrRetries.setStatus('mandatory')
if mibBuilder.loadTexts: psIappMaxHandOvrRetries.setDescription('This parameter indicates the maximum amount of retransmission sent by the device for a handover request message. The default for this parameter should be 2.')
psIappRoamingClients = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIappRoamingClients.setStatus('mandatory')
if mibBuilder.loadTexts: psIappRoamingClients.setDescription('Number of roaming clients currently attached to the Access Server.')
psIpxStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 12, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psIpxStatus.setStatus('mandatory')
if mibBuilder.loadTexts: psIpxStatus.setDescription('Which protocol is supported, i.e, IP or IPX or both IP and IPX.')
psIpxDefaultRouterNodeNum = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 12, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psIpxDefaultRouterNodeNum.setStatus('mandatory')
if mibBuilder.loadTexts: psIpxDefaultRouterNodeNum.setDescription('If the source IPX network number is not equal to the destination IPX Network number in the packet from wireless side to the wired side, then replace the destination Ether MAC addr with the value of this object (Default IPX router node number).')
psIpxWiredToWlessBridged = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 12, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIpxWiredToWlessBridged.setStatus('mandatory')
if mibBuilder.loadTexts: psIpxWiredToWlessBridged.setDescription('Number of packets bridged from wired side to wireless side.')
psIpxWlessToWiredBridged = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 12, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIpxWlessToWiredBridged.setStatus('mandatory')
if mibBuilder.loadTexts: psIpxWlessToWiredBridged.setDescription('Number of packets bridged from wiredless side to wired side.')
psIpxEthernetEncapsulationFormat = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 12, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psIpxEthernetEncapsulationFormat.setStatus('mandatory')
if mibBuilder.loadTexts: psIpxEthernetEncapsulationFormat.setDescription('Encapsulation type to be used for the IPX packets sent in wired side')
psASClientTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 12, 6), )
if mibBuilder.loadTexts: psASClientTable.setStatus('mandatory')
if mibBuilder.loadTexts: psASClientTable.setDescription('The (conceptual) table listing the ASClients (IPX) connected to the access server 2000 device.')
psASClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 12, 6, 1), ).setIndexNames((0, "AS-2000", "psPPPSessionId"))
if mibBuilder.loadTexts: psASClientEntry.setStatus('mandatory')
if mibBuilder.loadTexts: psASClientEntry.setDescription('An entry (conceptual row) representing a ASClient (IPX) connnected to the Access Server 2000 device.')
psPPPSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 12, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPPPSessionId.setStatus('mandatory')
if mibBuilder.loadTexts: psPPPSessionId.setDescription('The PPP Session ID assigned by the AS-2000 to this ASClient.')
psIpxClientNetworkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 12, 6, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIpxClientNetworkNumber.setStatus('mandatory')
if mibBuilder.loadTexts: psIpxClientNetworkNumber.setDescription('The IPX Node Number assigned by the Novell Server to this IPX client.')
psIpxClientMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 12, 6, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIpxClientMAC.setStatus('mandatory')
if mibBuilder.loadTexts: psIpxClientMAC.setDescription('The Wireless MAC of this IPX Client.')
psIpxClientStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 12, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("disable", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psIpxClientStatus.setStatus('mandatory')
if mibBuilder.loadTexts: psIpxClientStatus.setDescription('Flag to indicate whether the IPX Client is Active or Inactive. IPX Client status can also be disabled/enabled/deleted.')
psASClientSessionUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 12, 6, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psASClientSessionUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: psASClientSessionUpTime.setDescription('This object represents the session up time for each AS Client or PPP virttual interface.')
psASClientPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 12, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psASClientPacketsIn.setStatus('mandatory')
if mibBuilder.loadTexts: psASClientPacketsIn.setDescription('This object represents the number of packets (unicast and non-unicast)recieved for each AS Client or PPP virttual interface.')
psASClientPacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 12, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psASClientPacketsOut.setStatus('mandatory')
if mibBuilder.loadTexts: psASClientPacketsOut.setDescription('This object represents the number of packets (unicast and non-unicast)sent for each AS Client or PPP virttual interface.')
oriLinkTestTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriLinkTestTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: oriLinkTestTimeOut.setDescription('The value of this parameter determines the time that a link test will continue without any SNMP requests for a Link Test Table entry. When the time expires the Link Test Table is cleared.')
oriLinkTestInterval = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriLinkTestInterval.setStatus('mandatory')
if mibBuilder.loadTexts: oriLinkTestInterval.setDescription('This parameter indicates the interval (in millisec) between sending link test frames to a station. Default on 200 millisecond.')
oriLinkTestExplore = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriLinkTestExplore.setStatus('mandatory')
if mibBuilder.loadTexts: oriLinkTestExplore.setDescription('When this parameter is set to 2, the access point will send out an explore request on all 802.11 interfaces and from the results build the Link Test table. This table is valid only while this parameter is 3.')
oriLinkTestTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5), )
if mibBuilder.loadTexts: oriLinkTestTable.setStatus('mandatory')
if mibBuilder.loadTexts: oriLinkTestTable.setDescription('This table contains the information for the stations currently associated with this access point.')
oriLinkTestTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1), ).setIndexNames((0, "AS-2000", "oriLinkTestTableIndex"))
if mibBuilder.loadTexts: oriLinkTestTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oriLinkTestTableEntry.setDescription('This parameter represents the entry in the Remote Link Test table.This is described below.')
oriLinkTestTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: oriLinkTestTableIndex.setDescription('This parameter represents a unique value for each stattion. The value for each station must remain constant at least from one explore to the next.')
oriLinkTestInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriLinkTestInProgress.setStatus('mandatory')
if mibBuilder.loadTexts: oriLinkTestInProgress.setDescription('When this parameter is set to 2 the access point will initiate a link test sequence with this station. ')
oriLinkTestStationName = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestStationName.setStatus('mandatory')
if mibBuilder.loadTexts: oriLinkTestStationName.setDescription('This parameter identifies the name of the station whom which the link test is being performed.')
oriLinkTestMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestMACAddress.setStatus('mandatory')
if mibBuilder.loadTexts: oriLinkTestMACAddress.setDescription('This variable represents the MAC address that will be mapped to the IP Address of the station.')
oriLinkTestStationProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestStationProfile.setStatus('mandatory')
if mibBuilder.loadTexts: oriLinkTestStationProfile.setDescription('This parameter represents the profile/capabilities for this station.')
oriLinkTestOurCurSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestOurCurSignalLevel.setStatus('mandatory')
if mibBuilder.loadTexts: oriLinkTestOurCurSignalLevel.setDescription('The current signal level (in dB)for the link test from this station. This variable indicates the running average of the local signal level using the algorithm (3/4*oldvalue + 1/4*newvalue).')
oriLinkTestOurCurNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestOurCurNoiseLevel.setStatus('mandatory')
if mibBuilder.loadTexts: oriLinkTestOurCurNoiseLevel.setDescription('The current noise level (in dB)for the link test to this station. This variable indicates the running average of the local noise level.')
oriLinkTestOurCurSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestOurCurSNR.setStatus('mandatory')
if mibBuilder.loadTexts: oriLinkTestOurCurSNR.setDescription('The current signal to noise ratio for the link test to this station.')
oriLinkTestOurMinSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestOurMinSignalLevel.setStatus('mandatory')
if mibBuilder.loadTexts: oriLinkTestOurMinSignalLevel.setDescription('The minimum signal level during the link test to this station.')
oriLinkTestOurMinNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestOurMinNoiseLevel.setStatus('mandatory')
if mibBuilder.loadTexts: oriLinkTestOurMinNoiseLevel.setDescription('The minimum noise level during the link test to this station.')
oriLinkTestOurMinSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestOurMinSNR.setStatus('mandatory')
if mibBuilder.loadTexts: oriLinkTestOurMinSNR.setDescription('The minimum signal to noise ratio during the link test to this station.')
oriLinkTestOurMaxSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestOurMaxSignalLevel.setStatus('mandatory')
if mibBuilder.loadTexts: oriLinkTestOurMaxSignalLevel.setDescription('The maximum signal level during the link test to this station.')
oriLinkTestOurMaxNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestOurMaxNoiseLevel.setStatus('mandatory')
if mibBuilder.loadTexts: oriLinkTestOurMaxNoiseLevel.setDescription('The maximum noise level during the link test to this station.')
oriLinkTestOurMaxSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestOurMaxSNR.setStatus('mandatory')
if mibBuilder.loadTexts: oriLinkTestOurMaxSNR.setDescription('The maximum signal to noise ratio during the link test to this station.')
oriLinkTestOurLowFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestOurLowFrameCount.setStatus('mandatory')
if mibBuilder.loadTexts: oriLinkTestOurLowFrameCount.setDescription('The total number of frames sent at 1 Mbit/s speed during the link test to this station.')
oriLinkTestOurStandardFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestOurStandardFrameCount.setStatus('mandatory')
if mibBuilder.loadTexts: oriLinkTestOurStandardFrameCount.setDescription('The total number of frames sent at 2 Mbit/s speed during the link test to this station.')
oriLinkTestOurMediumFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestOurMediumFrameCount.setStatus('mandatory')
if mibBuilder.loadTexts: oriLinkTestOurMediumFrameCount.setDescription('The total number of frames sent at 5.5 Mbit/s (for Turbo-8, it is 5 Mbit/s) speed during the link test to this station.')
oriLinkTestOurHighFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestOurHighFrameCount.setStatus('mandatory')
if mibBuilder.loadTexts: oriLinkTestOurHighFrameCount.setDescription('The total number of frames sent at 11 Mbit/s (for Turbo-8, it is 8 Mbit/s) speed during the link test to this station.')
oriLinkTestHisCurSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestHisCurSignalLevel.setStatus('mandatory')
if mibBuilder.loadTexts: oriLinkTestHisCurSignalLevel.setDescription('The current signal level for the link test to the remote station or access point.')
oriLinkTestHisCurNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestHisCurNoiseLevel.setStatus('mandatory')
if mibBuilder.loadTexts: oriLinkTestHisCurNoiseLevel.setDescription('The current noise level for the link test to the remote station or access point.')
oriLinkTestHisCurSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestHisCurSNR.setStatus('mandatory')
if mibBuilder.loadTexts: oriLinkTestHisCurSNR.setDescription('The current signal to noise ratio for the link test to the remote station or access point.')
oriLinkTestHisMinSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestHisMinSignalLevel.setStatus('mandatory')
if mibBuilder.loadTexts: oriLinkTestHisMinSignalLevel.setDescription('The minimum signal level during the link test to the remote statio or access point.')
oriLinkTestHisMinNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestHisMinNoiseLevel.setStatus('mandatory')
if mibBuilder.loadTexts: oriLinkTestHisMinNoiseLevel.setDescription('The minimum noise level during the link test to the remote station or access point.')
oriLinkTestHisMinSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestHisMinSNR.setStatus('mandatory')
if mibBuilder.loadTexts: oriLinkTestHisMinSNR.setDescription('The minimum signal to noise ratio during the link test to the remote station or access point.')
oriLinkTestHisMaxSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestHisMaxSignalLevel.setStatus('mandatory')
if mibBuilder.loadTexts: oriLinkTestHisMaxSignalLevel.setDescription('The maximum signal level during the link test to the remote station or access point.')
oriLinkTestHisMaxNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestHisMaxNoiseLevel.setStatus('mandatory')
if mibBuilder.loadTexts: oriLinkTestHisMaxNoiseLevel.setDescription('The maximum noise level during the link test to the remote station or access point.')
oriLinkTestHisMaxSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestHisMaxSNR.setStatus('mandatory')
if mibBuilder.loadTexts: oriLinkTestHisMaxSNR.setDescription('The maximum signal to noise ratio during the link test to the remote station or access point.')
oriLinkTestHisLowFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestHisLowFrameCount.setStatus('mandatory')
if mibBuilder.loadTexts: oriLinkTestHisLowFrameCount.setDescription('The total number of frames sent at 1 Mbit/s speed during the link test to the remote station or access point.')
oriLinkTestHisStandardFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestHisStandardFrameCount.setStatus('mandatory')
if mibBuilder.loadTexts: oriLinkTestHisStandardFrameCount.setDescription('The total number of frames sent at 2 Mbit/s speed during the link test to the remote station or access point.')
oriLinkTestHisMediumFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestHisMediumFrameCount.setStatus('mandatory')
if mibBuilder.loadTexts: oriLinkTestHisMediumFrameCount.setDescription('The total number of frames sent at 5.5 Mbit/s (for Turbo-8, it is 5 Mbit/s) speed during the link test to the remote station or access point.')
oriLinkTestHisHighFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestHisHighFrameCount.setStatus('mandatory')
if mibBuilder.loadTexts: oriLinkTestHisHighFrameCount.setDescription('The total number of frames sent at 11 Mbit/s (for Turbo-8, it is 5 Mbit/s) speed during the link test to the remote station or access point.')
oriLinkTestInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestInterface.setStatus('mandatory')
if mibBuilder.loadTexts: oriLinkTestInterface.setDescription('The PCMCIA Card Number to which the Client has sent the Explore Response Message.')
oriLinkTestRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestRadioType.setStatus('mandatory')
if mibBuilder.loadTexts: oriLinkTestRadioType.setDescription('The Wireless Standard eg. IEEE 802.11 or IEEE 802.11b used on the Radio.')
accessServerTrapVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 1))
accessServerGenericInformationMessage = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 1, 1), DisplayString())
if mibBuilder.loadTexts: accessServerGenericInformationMessage.setStatus('mandatory')
if mibBuilder.loadTexts: accessServerGenericInformationMessage.setDescription('Any generic string information can be sent as this message.')
accessServerMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 1, 2), PhysAddress())
if mibBuilder.loadTexts: accessServerMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: accessServerMacAddress.setDescription('The MAC address that is sent with the traps to identify which Access Server has the problem ')
accessServerFailedTFTPServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 1, 3), IpAddress())
if mibBuilder.loadTexts: accessServerFailedTFTPServerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: accessServerFailedTFTPServerAddress.setDescription('The ip address configured as the TFTP server for which the operation upload/download failed.')
accessServerFailedTFTPFilename = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 1, 4), DisplayString())
if mibBuilder.loadTexts: accessServerFailedTFTPFilename.setStatus('mandatory')
if mibBuilder.loadTexts: accessServerFailedTFTPFilename.setDescription('The filename configured to be retrieved/sent from/to the TFTP server for which the operation upload/download failed.')
accessServerFailedTFTPOperation = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 1, 5), Integer32())
if mibBuilder.loadTexts: accessServerFailedTFTPOperation.setStatus('mandatory')
if mibBuilder.loadTexts: accessServerFailedTFTPOperation.setDescription('This variable used in conjunction with the different TFTP traps ( TFTPInitiated, TFTPFailed, TFTPCompleted)')
accessServerSuspendedTaskName = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 1, 6), DisplayString())
if mibBuilder.loadTexts: accessServerSuspendedTaskName.setStatus('mandatory')
if mibBuilder.loadTexts: accessServerSuspendedTaskName.setDescription('The task that was suspended, can be several tasks executed within the Access Server.')
accessServerWirelessCard = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pc-cardA", 1), ("pc-cardB", 2))))
if mibBuilder.loadTexts: accessServerWirelessCard.setStatus('mandatory')
if mibBuilder.loadTexts: accessServerWirelessCard.setDescription('This trap variable is used to determine on which Wireless Card, PC Card A or PC Card B, a wireless TRAP has occured on.')
accessServerFlashRelatedTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 2))
accessServerFlashEmpty = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 2) + (0,1))
if mibBuilder.loadTexts: accessServerFlashEmpty.setDescription('This trap is sent when the FLASH is empty.')
accessServerFlashCorrupted = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 2) + (0,2))
if mibBuilder.loadTexts: accessServerFlashCorrupted.setDescription('This trap is sent when the data in the FLASH is corrupted.')
accessServerConfigurationRelatedTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 3))
accessServerInvalidKey = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 3) + (0,1))
if mibBuilder.loadTexts: accessServerInvalidKey.setDescription('This trap is sent when an invalid key is detected at the accessServer.')
accessServerAPMNotConfigured = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 3) + (0,2))
if mibBuilder.loadTexts: accessServerAPMNotConfigured.setDescription('This trap is sent when the APM information is not configured in the Access Server.')
accessServerWLCIncompatibleFirmware = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 3) + (0,3))
if mibBuilder.loadTexts: accessServerWLCIncompatibleFirmware.setDescription('This trap is sent when an ORiNOCO PC Card plugged in the Access Server is not compatible with the firmware versions supported.')
accessServerWLCFailure = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 3) + (0,4))
if mibBuilder.loadTexts: accessServerWLCFailure.setDescription('This trap is sent when an ORiNOCO PC Card is not present or there is a failure in the ORiNOCO PC card.')
accessServerWLCRemoval = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 3) + (0,5))
if mibBuilder.loadTexts: accessServerWLCRemoval.setDescription('This trap is generated when the ORiNOCO PC Card is removed from the Access Server.')
accessServerRadiusNotConfigured = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 3) + (0,6))
if mibBuilder.loadTexts: accessServerRadiusNotConfigured.setDescription('This trap is sent when the radius information is not configured in the Access Server.')
accessServerDNSIPNotConfigured = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 3) + (0,7))
if mibBuilder.loadTexts: accessServerDNSIPNotConfigured.setDescription('This trap is sent when the DNS IP information is not configured in the Access Server.')
accessServerNBNSIPNotConfigured = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 3) + (0,8))
if mibBuilder.loadTexts: accessServerNBNSIPNotConfigured.setDescription('This trap is sent when the NBNS IP information is not configured in the Access Server.')
accessServerRadiusAuthenticationNotConfigured = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 3) + (0,9))
if mibBuilder.loadTexts: accessServerRadiusAuthenticationNotConfigured.setDescription('This trap is sent when the radius authentication information is not configured in the Access Server.')
accessServerRadiusAccountingNotConfigured = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 3) + (0,10))
if mibBuilder.loadTexts: accessServerRadiusAccountingNotConfigured.setDescription('This trap is sent when the radius accounting information is not configured in the Access Server.')
accessServerDuplicateIPAddressEncountered = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 3) + (0,11))
if mibBuilder.loadTexts: accessServerDuplicateIPAddressEncountered.setDescription('This trap is sent when the IP Address of the Access Server is also used by someother device in the network.')
accessServerWLCVoltageDiscrepancy = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 3) + (0,12))
if mibBuilder.loadTexts: accessServerWLCVoltageDiscrepancy.setDescription('This trap is sent when non 5volt card or 3.3 v card is inserted in the Access Server.')
accessServerWLCIncompatibleVendor = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 3) + (0,13))
if mibBuilder.loadTexts: accessServerWLCIncompatibleVendor.setDescription('This trap is generated when an incompatible wireless vendor card is inserted or present in the Access Server.')
accessServerWLCFirmwareDownloadFailure = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 3) + (0,14))
if mibBuilder.loadTexts: accessServerWLCFirmwareDownloadFailure.setDescription('This trap is generated when a failure occurs during the firmware download process.')
accessServerDiagnosticTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 4))
accessServerTFTPInitiated = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 4) + (0,1))
if mibBuilder.loadTexts: accessServerTFTPInitiated.setDescription('This trap is sent when a TFTP operation happens at the Access Server.')
accessServerTFTPCompleted = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 4) + (0,2))
if mibBuilder.loadTexts: accessServerTFTPCompleted.setDescription('This trap is sent when a TFTP operation failure happens at the Access Server.')
accessServerTFTPFailure = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 4) + (0,3))
if mibBuilder.loadTexts: accessServerTFTPFailure.setDescription('This trap is sent when a TFTP operation failure happens at the Access Server.')
accessServerAdminStateMadeUp = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 4) + (0,4))
if mibBuilder.loadTexts: accessServerAdminStateMadeUp.setDescription("This trap is sent when the Access Server Admin state is made 'up'")
accessServerAdminStateMadeDown = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 4) + (0,5))
if mibBuilder.loadTexts: accessServerAdminStateMadeDown.setDescription("This trap is sent when the Access Server Admin state is made 'down'")
accessServerRebootingNow = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 4) + (0,6))
if mibBuilder.loadTexts: accessServerRebootingNow.setDescription('This trap is sent when the Access Server is about to reboot.')
accessServerTaskSuspended = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 4) + (0,7))
if mibBuilder.loadTexts: accessServerTaskSuspended.setDescription('This trap is sent when a task has suspended in the Access Server.')
accessServerBootPFailed = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 4) + (0,8))
if mibBuilder.loadTexts: accessServerBootPFailed.setDescription('This trap is sent when the BootP protocol in the bootloader has failed.')
accessServerDHCPFailed = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 4) + (0,9))
if mibBuilder.loadTexts: accessServerDHCPFailed.setDescription('This trap is sent when the DHCP in the application software has failed.')
accessServerImageTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 5))
accessServerZeroSizeImage = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 5) + (0,1))
if mibBuilder.loadTexts: accessServerZeroSizeImage.setDescription('This trap is sent when an image of size zero (0) is downloaded to the access server.')
accessServerNonVxWorksImage = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 5) + (0,2))
if mibBuilder.loadTexts: accessServerNonVxWorksImage.setDescription('This trap is sent when a non-VxWorks image is downloaded to the access server.')
accessServerImageTooLarge = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 5) + (0,3))
if mibBuilder.loadTexts: accessServerImageTooLarge.setDescription('This trap is sent when the image downloaded to the access server exceeds the size limitation of 5 MB.')
mibBuilder.exportSymbols("AS-2000", oriLinkTestOurHighFrameCount=oriLinkTestOurHighFrameCount, psIPAddress=psIPAddress, PhysAddress=PhysAddress, managerIndex=managerIndex, psSNMPTrapHostPassword=psSNMPTrapHostPassword, psPPPPAPStatus=psPPPPAPStatus, accessServerFailedTFTPServerAddress=accessServerFailedTFTPServerAddress, psASClientTable=psASClientTable, psPPPNoOfMACIPMappingEntries=psPPPNoOfMACIPMappingEntries, accessServerBootPFailed=accessServerBootPFailed, psPPPIPRangeTable=psPPPIPRangeTable, radiusClient=radiusClient, psPPPMACIPMappingTable=psPPPMACIPMappingTable, psIappMaxHandOvrRetries=psIappMaxHandOvrRetries, psIpxDefaultRouterNodeNum=psIpxDefaultRouterNodeNum, accessServerWLCFailure=accessServerWLCFailure, pliWlanIfClosedSystem=pliWlanIfClosedSystem, psTFTPFileType=psTFTPFileType, psPPPIPAddressAssignmentType=psPPPIPAddressAssignmentType, accessServerWirelessCard=accessServerWirelessCard, accessServerAPMNotConfigured=accessServerAPMNotConfigured, psIpxWlessToWiredBridged=psIpxWlessToWiredBridged, oriLinkTestOurCurSignalLevel=oriLinkTestOurCurSignalLevel, accessServerNonVxWorksImage=accessServerNonVxWorksImage, accessServerRadiusAccountingNotConfigured=accessServerRadiusAccountingNotConfigured, psIappHandOvrReqOut=psIappHandOvrReqOut, oriLinkTestExplore=oriLinkTestExplore, accessServerWLCVoltageDiscrepancy=accessServerWLCVoltageDiscrepancy, endIPAddress=endIPAddress, psDefaultGateway=psDefaultGateway, radiusServerIndex=radiusServerIndex, psIpxEthernetEncapsulationFormat=psIpxEthernetEncapsulationFormat, radiusClientAuthenticationBadAuthenticators=radiusClientAuthenticationBadAuthenticators, oriLinkTestOurLowFrameCount=oriLinkTestOurLowFrameCount, psSNMPAccessTable=psSNMPAccessTable, psPPPMACIPMappingTableEntry=psPPPMACIPMappingTableEntry, status=status, psIappAnnReqIn=psIappAnnReqIn, radiusClientAccessRetransmissions=radiusClientAccessRetransmissions, accessServerDHCPFailed=accessServerDHCPFailed, psIappHandOvrRespOut=psIappHandOvrRespOut, pPPIPIndex=pPPIPIndex, oriLinkTestOurMinSignalLevel=oriLinkTestOurMinSignalLevel, accessServerGenericInformationMessage=accessServerGenericInformationMessage, accessServerRadiusNotConfigured=accessServerRadiusNotConfigured, psIpxWiredToWlessBridged=psIpxWiredToWlessBridged, radiusServerSharedSecret=radiusServerSharedSecret, psShimECPRepeatResponseCount=psShimECPRepeatResponseCount, accessServerRadiusAuthenticationNotConfigured=accessServerRadiusAuthenticationNotConfigured, radiusServerDestPortAuth=radiusServerDestPortAuth, psPPPMaxNoOfUsers=psPPPMaxNoOfUsers, psPPPCHAPPriority=psPPPCHAPPriority, oriLinkTestHisMinNoiseLevel=oriLinkTestHisMinNoiseLevel, as2000Product=as2000Product, pliWlanIfMediumReservation=pliWlanIfMediumReservation, psIappEndSessAckOut=psIappEndSessAckOut, psIappHandOvrTimeOut=psIappHandOvrTimeOut, accessServerFlashRelatedTraps=accessServerFlashRelatedTraps, psSNMPManagerCount=psSNMPManagerCount, psSNMPReadPassword=psSNMPReadPassword, psSerialParity=psSerialParity, psIappAnnRespIn=psIappAnnRespIn, orinocoDriver=orinocoDriver, oriLinkTestTableEntry=oriLinkTestTableEntry, accessServerAdminStateMadeDown=accessServerAdminStateMadeDown, radiusClientAccountingRetransmissions=radiusClientAccountingRetransmissions, oriLinkTestOurStandardFrameCount=oriLinkTestOurStandardFrameCount, psTelnetLoginTimeout=psTelnetLoginTimeout, psIpxClientNetworkNumber=psIpxClientNetworkNumber, managerSubnetMask=managerSubnetMask, psPPPCHAPStatus=psPPPCHAPStatus, oriLinkTestTimeOut=oriLinkTestTimeOut, oriLinkTestHisMaxNoiseLevel=oriLinkTestHisMaxNoiseLevel, radiusServerResponseTime=radiusServerResponseTime, oriLinkTestMACAddress=oriLinkTestMACAddress, oriLinkTestHisCurSignalLevel=oriLinkTestHisCurSignalLevel, accessServerTaskSuspended=accessServerTaskSuspended, psIappAnnRespOut=psIappAnnRespOut, radiusClientAccessChallenges=radiusClientAccessChallenges, psASClientPacketsIn=psASClientPacketsIn, psTestSNMPReadWritePassword=psTestSNMPReadWritePassword, oriLinkTestInterval=oriLinkTestInterval, psIappEndSessIn=psIappEndSessIn, oriLinkTestHisStandardFrameCount=oriLinkTestHisStandardFrameCount, startIPAddress=startIPAddress, oriLinkTestHisLowFrameCount=oriLinkTestHisLowFrameCount, as2000=as2000, psWlanIfEntry=psWlanIfEntry, lucent=lucent, oriLinkTestInProgress=oriLinkTestInProgress, pliWlanIfMACAddress=pliWlanIfMACAddress, psSNMPInBadManagers=psSNMPInBadManagers, accessServerTFTPFailure=accessServerTFTPFailure, iPAddress=iPAddress, radiusServerTable=radiusServerTable, psIappEndSessAckIn=psIappEndSessAckIn, psPPPSessionId=psPPPSessionId, comment=comment, managerStatus=managerStatus, psSNMPAccessTableEntry=psSNMPAccessTableEntry, orinocoIPX=orinocoIPX, psPPPNoOfKeepAliveTimeouts=psPPPNoOfKeepAliveTimeouts, pliDriverName=pliDriverName, psSNMPReadWritePassword=psSNMPReadWritePassword, pliWlanIfCapabilityOptions=pliWlanIfCapabilityOptions, radiusServerType=radiusServerType, psASClientPacketsOut=psASClientPacketsOut, oriLinkTestRadioType=oriLinkTestRadioType, pliWlanIfRegulatoryDomainList=pliWlanIfRegulatoryDomainList, psIappAnnReqOut=psIappAnnReqOut, radiusServerDestPortAcct=radiusServerDestPortAcct, oriLinkTestOurMediumFrameCount=oriLinkTestOurMediumFrameCount, accessServerDiagnosticTraps=accessServerDiagnosticTraps, orinocoShimECPSetup=orinocoShimECPSetup, psTelnetPort=psTelnetPort, managerIPAddress=managerIPAddress, psShimECPRetransmissionTimeout=psShimECPRetransmissionTimeout, psShimECPRetransmissionCount=psShimECPRetransmissionCount, psPPPIPRangeTableEntry=psPPPIPRangeTableEntry, radiusServerMaximumRetransmission=radiusServerMaximumRetransmission, radiusClientInvalidServerAddresses=radiusClientInvalidServerAddresses, accessServerDNSIPNotConfigured=accessServerDNSIPNotConfigured, oriLinkTestOurMinSNR=oriLinkTestOurMinSNR, oriLinkTestStationName=oriLinkTestStationName, psIappRoamingClients=psIappRoamingClients, psVersion=psVersion, psSerialFlowControl=psSerialFlowControl, radiusClientAccessRejects=radiusClientAccessRejects, psPPPSecondaryNBNSIPAddress=psPPPSecondaryNBNSIPAddress, psIappHandOvrReqIn=psIappHandOvrReqIn, accessServerWLCIncompatibleFirmware=accessServerWLCIncompatibleFirmware, oriLinkTestHisHighFrameCount=oriLinkTestHisHighFrameCount, iPComment=iPComment, accessServerInvalidKey=accessServerInvalidKey, pliWlanIfTransmitRate=pliWlanIfTransmitRate, radiusClientMalformedAccessResponses=radiusClientMalformedAccessResponses, orinocoInterface=orinocoInterface, radiusClientTimeouts=radiusClientTimeouts, accessServerDuplicateIPAddressEncountered=accessServerDuplicateIPAddressEncountered, orinocoProducts=orinocoProducts, psSerialStopBits=psSerialStopBits, psASClientSessionUpTime=psASClientSessionUpTime, pliWlanIfIndex=pliWlanIfIndex, accessServerFlashEmpty=accessServerFlashEmpty, psHardwareVersionNumber=psHardwareVersionNumber, radiusClientMIBCompliances=radiusClientMIBCompliances, oriLinkTestHisCurNoiseLevel=oriLinkTestHisCurNoiseLevel, accessServerMacAddress=accessServerMacAddress, accessServerWLCFirmwareDownloadFailure=accessServerWLCFirmwareDownloadFailure, psDeviceSerialNumber=psDeviceSerialNumber, psIappHandOvrReqReSent=psIappHandOvrReqReSent, radiusClientAccountingBadAuthenticators=radiusClientAccountingBadAuthenticators, psSerialBaudRate=psSerialBaudRate, radiusClientMIBGroups=radiusClientMIBGroups, accessServerImageTooLarge=accessServerImageTooLarge, psIpxClientMAC=psIpxClientMAC, orinocoLinkTest=orinocoLinkTest, psPPPPrimaryNBNSIPAddress=psPPPPrimaryNBNSIPAddress, pliWlanIfProfileCode=pliWlanIfProfileCode, accessServerTFTPInitiated=accessServerTFTPInitiated, psPPPPAPPriority=psPPPPAPPriority, products=products, pliWlanIfOperatingFrequency=pliWlanIfOperatingFrequency, accessServerTFTPCompleted=accessServerTFTPCompleted, orinocoDiagnostics=orinocoDiagnostics, accessServerWLCIncompatibleVendor=accessServerWLCIncompatibleVendor, oriLinkTestTableIndex=oriLinkTestTableIndex, accessServerWLCRemoval=accessServerWLCRemoval, psIappAnnInterval=psIappAnnInterval, oriLinkTestOurMaxNoiseLevel=oriLinkTestOurMaxNoiseLevel, accessServerTrapVariables=accessServerTrapVariables, entryStatus=entryStatus, mibs=mibs, orinoco=orinoco, DisplayString=DisplayString, psTFTPOperation=psTFTPOperation, psASClientEntry=psASClientEntry, oriLinkTestStationProfile=oriLinkTestStationProfile, accessServerNBNSIPNotConfigured=accessServerNBNSIPNotConfigured, mACIPIndex=mACIPIndex, orinocoPPPSetup=orinocoPPPSetup, psPPPKeepAliveInterval=psPPPKeepAliveInterval, radiusClientMIBObjects=radiusClientMIBObjects, oriLinkTestOurCurSNR=oriLinkTestOurCurSNR, psBroadcastMessage=psBroadcastMessage, pliWlanIfAllowedOperatingFrequencies=pliWlanIfAllowedOperatingFrequencies, radiusServerEntry=radiusServerEntry, psPPPSecondaryDNSIPAddress=psPPPSecondaryDNSIPAddress, psIappPduDrops=psIappPduDrops, psReboot=psReboot, oriLinkTestOurCurNoiseLevel=oriLinkTestOurCurNoiseLevel, oriLinkTestHisCurSNR=oriLinkTestHisCurSNR, psAdministrativeState=psAdministrativeState, psTelnetTimeout=psTelnetTimeout, psIpxClientStatus=psIpxClientStatus, oriLinkTestOurMinNoiseLevel=oriLinkTestOurMinNoiseLevel, accessServerFailedTFTPFilename=accessServerFailedTFTPFilename, orinocoSNMPSetup=orinocoSNMPSetup, oriLinkTestHisMaxSignalLevel=oriLinkTestHisMaxSignalLevel, radiusClientAccountingRequests=radiusClientAccountingRequests, accessServerRebootingNow=accessServerRebootingNow, psSNMPTrapHostIPAddress=psSNMPTrapHostIPAddress, accessServerFlashCorrupted=accessServerFlashCorrupted, radius=radius, psTFTPIPAddress=psTFTPIPAddress, psIappHandOvrRespIn=psIappHandOvrRespIn, oriLinkTestHisMinSignalLevel=oriLinkTestHisMinSignalLevel, pliWlanIfAllowedTransmitRates=pliWlanIfAllowedTransmitRates, psBSPBootloaderVersion=psBSPBootloaderVersion, psIPAddressType=psIPAddressType, psPOSTVersionNumber=psPOSTVersionNumber, radiusServerEnabled=radiusServerEnabled, accessServerFailedTFTPOperation=accessServerFailedTFTPOperation, accessServerImageTraps=accessServerImageTraps, psTFTPFilename=psTFTPFilename, psIappEndSessOut=psIappEndSessOut, psSubnetMask=psSubnetMask, radiusClientMIB=radiusClientMIB, pliWlanIfAPDensity=pliWlanIfAPDensity, oriLinkTestOurMaxSNR=oriLinkTestOurMaxSNR, orinocoAgent=orinocoAgent, radiusClientAccountingResponses=radiusClientAccountingResponses, pliDriverVersion=pliDriverVersion, psSecondsToAdminDown=psSecondsToAdminDown, psPPPPrimaryDNSIPAddress=psPPPPrimaryDNSIPAddress, psTelnetPassword=psTelnetPassword, accessServerAdminStateMadeUp=accessServerAdminStateMadeUp, pliSystemName=pliSystemName, mACAddress=mACAddress, pliWlanIfNetworkName=pliWlanIfNetworkName, psIpxStatus=psIpxStatus, radiusClientMIBConformance=radiusClientMIBConformance, accessServerSuspendedTaskName=accessServerSuspendedTaskName, orinocoPHY=orinocoPHY, psSerialDataBits=psSerialDataBits, psIappAnnRespTime=psIappAnnRespTime, oriLinkTestTable=oriLinkTestTable, oriLinkTestInterface=oriLinkTestInterface, oriLinkTestHisMaxSNR=oriLinkTestHisMaxSNR, accessServerTraps=accessServerTraps, oriLinkTestHisMinSNR=oriLinkTestHisMinSNR, oriLinkTestHisMediumFrameCount=oriLinkTestHisMediumFrameCount, width=width, orinocoIAPP=orinocoIAPP, psIappStatus=psIappStatus, psPPPSessionIdleTimeOut=psPPPSessionIdleTimeOut, psTelnetSesssions=psTelnetSesssions, accessServerZeroSizeImage=accessServerZeroSizeImage, radiusClientAccessAccepts=radiusClientAccessAccepts, accessServerConfigurationRelatedTraps=accessServerConfigurationRelatedTraps, radiusClientAccessRequests=radiusClientAccessRequests, radiusServerAddress=radiusServerAddress, psWlanIfTable=psWlanIfTable, oriLinkTestOurMaxSignalLevel=oriLinkTestOurMaxSignalLevel)
mibBuilder.exportSymbols("AS-2000", psContactEmail=psContactEmail)
