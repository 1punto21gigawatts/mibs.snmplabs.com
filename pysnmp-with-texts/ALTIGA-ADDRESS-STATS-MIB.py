#
# PySNMP MIB module ALTIGA-ADDRESS-STATS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALTIGA-ADDRESS-STATS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:21:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
alAddressMibModule, = mibBuilder.importSymbols("ALTIGA-GLOBAL-REG", "alAddressMibModule")
alAddressGroup, alStatsAddress = mibBuilder.importSymbols("ALTIGA-MIB", "alAddressGroup", "alStatsAddress")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Gauge32, ModuleIdentity, Bits, NotificationType, ObjectIdentity, TimeTicks, MibIdentifier, iso, Integer32, Counter32, Counter64, Unsigned32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ModuleIdentity", "Bits", "NotificationType", "ObjectIdentity", "TimeTicks", "MibIdentifier", "iso", "Integer32", "Counter32", "Counter64", "Unsigned32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
altigaAddressStatsMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3076, 1, 1, 24, 2))
altigaAddressStatsMibModule.setRevisions(('2005-01-25 00:00', '2002-09-05 13:00', '2002-07-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: altigaAddressStatsMibModule.setRevisionsDescriptions(('Added tables alAddressStatsPoolTable, alAddressStatsPoolGroupTable. Added object alAddressStatsHeldAddresses, alAddressStatsGrpHeldAddresses, alAddressStatsHeldPoolId, alAddressStatsHeldAddrIndex, alAddressStatsHeldAddress, alAddressStatsHeldTimeLeft, alAddressStatsHeldReason, alAddressStatsGrpHeldId, alAddressStatsGrpHeldPoolId, alAddressStatsGrpHeldAddrIndex, alAddressStatsGrpHeldAddress, alAddressStatsGrpHeldTimeLeft, alAddressStatsGrpHeldReason.', 'Added module compliance.', 'Updated with new header',))
if mibBuilder.loadTexts: altigaAddressStatsMibModule.setLastUpdated('200501250000Z')
if mibBuilder.loadTexts: altigaAddressStatsMibModule.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: altigaAddressStatsMibModule.setContactInfo('Cisco Systems 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-cvpn3000@cisco.com')
if mibBuilder.loadTexts: altigaAddressStatsMibModule.setDescription('The Altiga Address Statistics MIB models counters and objects that are of management interest for address assignment. Acronyms The following acronyms are used in this document: MIB: Management Information Base ')
alAddressStatsGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 19, 1))
class IPAddressHeldReason(TextualConvention, Integer32):
    description = 'Definition of reason an IP Address is held for. delayReuse - held due to address re-use delay feature foundInUse - held because the address is found to be used'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("delayReuse", 1), ("foundInUse", 2))

alAddressStatsPoolTable = MibTable((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 19, 2), )
if mibBuilder.loadTexts: alAddressStatsPoolTable.setStatus('current')
if mibBuilder.loadTexts: alAddressStatsPoolTable.setDescription('The list of trap destinations.')
alAddressStatsPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 19, 2, 1), ).setIndexNames((0, "ALTIGA-ADDRESS-STATS-MIB", "alAddressStatsPoolId"))
if mibBuilder.loadTexts: alAddressStatsPoolEntry.setStatus('current')
if mibBuilder.loadTexts: alAddressStatsPoolEntry.setDescription('An entry in the alAddressStatsPoolTable.')
alAddressStatsPoolId = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 19, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAddressStatsPoolId.setStatus('current')
if mibBuilder.loadTexts: alAddressStatsPoolId.setDescription('The Global Address Pool ID for this entry.')
alAddressStatsTotalPoolAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 19, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAddressStatsTotalPoolAddresses.setStatus('current')
if mibBuilder.loadTexts: alAddressStatsTotalPoolAddresses.setDescription('Total number of legal addresses defined in pool. This does not include Network and Broadcast addresses.')
alAddressStatsCurrAllocAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 19, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAddressStatsCurrAllocAddresses.setStatus('current')
if mibBuilder.loadTexts: alAddressStatsCurrAllocAddresses.setDescription('Total number of addresses currently assigned.')
alAddressStatsCurrAvailAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 19, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAddressStatsCurrAvailAddresses.setStatus('current')
if mibBuilder.loadTexts: alAddressStatsCurrAvailAddresses.setDescription('Total number of addresses currently available.')
alAddressStatsMaxAddressesAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 19, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAddressStatsMaxAddressesAssigned.setStatus('current')
if mibBuilder.loadTexts: alAddressStatsMaxAddressesAssigned.setDescription('Total number of addresses currently available.')
alAddressStatsHeldAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 19, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAddressStatsHeldAddresses.setStatus('current')
if mibBuilder.loadTexts: alAddressStatsHeldAddresses.setDescription('Total number of addresses currently held. This reflects the number of entries in alAddressStatsHeldTable.')
alAddressStatsPoolGroupTable = MibTable((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 19, 3), )
if mibBuilder.loadTexts: alAddressStatsPoolGroupTable.setStatus('current')
if mibBuilder.loadTexts: alAddressStatsPoolGroupTable.setDescription('The list of trap destinations.')
alAddressStatsPoolGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 19, 3, 1), ).setIndexNames((0, "ALTIGA-ADDRESS-STATS-MIB", "alAddressStatsGrpId"), (0, "ALTIGA-ADDRESS-STATS-MIB", "alAddressStatsGrpPoolId"))
if mibBuilder.loadTexts: alAddressStatsPoolGroupEntry.setStatus('current')
if mibBuilder.loadTexts: alAddressStatsPoolGroupEntry.setDescription('An entry in the alAddressStatsPoolGroupTable.')
alAddressStatsGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 19, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAddressStatsGrpId.setStatus('current')
if mibBuilder.loadTexts: alAddressStatsGrpId.setDescription('The Group ID for this entry.')
alAddressStatsGrpPoolId = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 19, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAddressStatsGrpPoolId.setStatus('current')
if mibBuilder.loadTexts: alAddressStatsGrpPoolId.setDescription('The Group Pool ID for this entry.')
alAddressStatsGrpTotalPoolAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 19, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAddressStatsGrpTotalPoolAddresses.setStatus('current')
if mibBuilder.loadTexts: alAddressStatsGrpTotalPoolAddresses.setDescription('Total number of legal addresses defined in pool. This does not include Network and Broadcast addresses.')
alAddressStatsGrpCurrAllocAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 19, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAddressStatsGrpCurrAllocAddresses.setStatus('current')
if mibBuilder.loadTexts: alAddressStatsGrpCurrAllocAddresses.setDescription('Total number of addresses currently assigned.')
alAddressStatsGrpCurrAvailAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 19, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAddressStatsGrpCurrAvailAddresses.setStatus('current')
if mibBuilder.loadTexts: alAddressStatsGrpCurrAvailAddresses.setDescription('Total number of addresses currently available.')
alAddressStatsGrpMaxAddressesAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 19, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAddressStatsGrpMaxAddressesAssigned.setStatus('current')
if mibBuilder.loadTexts: alAddressStatsGrpMaxAddressesAssigned.setDescription('Total number of addresses currently available.')
alAddressStatsGrpHeldAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 19, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAddressStatsGrpHeldAddresses.setStatus('current')
if mibBuilder.loadTexts: alAddressStatsGrpHeldAddresses.setDescription('Total number of addresses currently held. This reflects the number of entries in alAddressStatsGrpHeldTable.')
alAddressStatsHeldTable = MibTable((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 19, 4), )
if mibBuilder.loadTexts: alAddressStatsHeldTable.setStatus('current')
if mibBuilder.loadTexts: alAddressStatsHeldTable.setDescription('The list of held IP addresses in the Base group. The IP addresses in this table are not available for use. When an IP address is released from use and if the re-use delay feature is enabled, the IP address is added into this table for a configured time period before it can be used again. An IP address that was discovered to be used by an external device is also added into this table for configured time period also. When the timer expires, the IP address is removed from this table.')
alAddressStatsHeldEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 19, 4, 1), ).setIndexNames((0, "ALTIGA-ADDRESS-STATS-MIB", "alAddressStatsHeldPoolId"), (0, "ALTIGA-ADDRESS-STATS-MIB", "alAddressStatsHeldAddrIndex"))
if mibBuilder.loadTexts: alAddressStatsHeldEntry.setStatus('current')
if mibBuilder.loadTexts: alAddressStatsHeldEntry.setDescription('An entry in the alAddressStatsHeldTable.')
alAddressStatsHeldPoolId = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 19, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAddressStatsHeldPoolId.setStatus('current')
if mibBuilder.loadTexts: alAddressStatsHeldPoolId.setDescription('The Global Address Pool ID for this entry.')
alAddressStatsHeldAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 19, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAddressStatsHeldAddrIndex.setStatus('current')
if mibBuilder.loadTexts: alAddressStatsHeldAddrIndex.setDescription('The address index for this entry.')
alAddressStatsHeldAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 19, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAddressStatsHeldAddress.setStatus('current')
if mibBuilder.loadTexts: alAddressStatsHeldAddress.setDescription('IP Address currently being held; not available for assignment.')
alAddressStatsHeldTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 19, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: alAddressStatsHeldTimeLeft.setStatus('current')
if mibBuilder.loadTexts: alAddressStatsHeldTimeLeft.setDescription('Amount of time left, in second, before the address can be assigned.')
alAddressStatsHeldReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 19, 4, 1, 5), IPAddressHeldReason()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAddressStatsHeldReason.setStatus('current')
if mibBuilder.loadTexts: alAddressStatsHeldReason.setDescription('This object reflects the reason for being held.')
alAddressStatsGrpHeldTable = MibTable((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 19, 5), )
if mibBuilder.loadTexts: alAddressStatsGrpHeldTable.setStatus('current')
if mibBuilder.loadTexts: alAddressStatsGrpHeldTable.setDescription('The list of held IP addresses in the user group. The IP addresses in this table are not available for use. When an IP address is released from use and if the re-use delay feature is enabled, the IP address is added into this table for a configured time period before it can be used again. An IP address that was discovered to be used by an external device is also added into this table for configured time period also. When the timer expires, the IP address is removed from this table.')
alAddressStatsGrpHeldEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 19, 5, 1), ).setIndexNames((0, "ALTIGA-ADDRESS-STATS-MIB", "alAddressStatsGrpHeldId"), (0, "ALTIGA-ADDRESS-STATS-MIB", "alAddressStatsGrpHeldPoolId"), (0, "ALTIGA-ADDRESS-STATS-MIB", "alAddressStatsGrpHeldAddrIndex"))
if mibBuilder.loadTexts: alAddressStatsGrpHeldEntry.setStatus('current')
if mibBuilder.loadTexts: alAddressStatsGrpHeldEntry.setDescription('An entry in the alAddressStatsGrpHeldTable.')
alAddressStatsGrpHeldId = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 19, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAddressStatsGrpHeldId.setStatus('current')
if mibBuilder.loadTexts: alAddressStatsGrpHeldId.setDescription('The Group ID for this entry.')
alAddressStatsGrpHeldPoolId = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 19, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAddressStatsGrpHeldPoolId.setStatus('current')
if mibBuilder.loadTexts: alAddressStatsGrpHeldPoolId.setDescription('The Global Address Pool ID for this entry.')
alAddressStatsGrpHeldAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 19, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAddressStatsGrpHeldAddrIndex.setStatus('current')
if mibBuilder.loadTexts: alAddressStatsGrpHeldAddrIndex.setDescription('The address index for this entry.')
alAddressStatsGrpHeldAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 19, 5, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAddressStatsGrpHeldAddress.setStatus('current')
if mibBuilder.loadTexts: alAddressStatsGrpHeldAddress.setDescription('IP Address currently being held; not available for assignment.')
alAddressStatsGrpHeldTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 19, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: alAddressStatsGrpHeldTimeLeft.setStatus('current')
if mibBuilder.loadTexts: alAddressStatsGrpHeldTimeLeft.setDescription('Amount of time left, in second, before the address can be assigned.')
alAddressStatsGrpHeldReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 19, 5, 1, 6), IPAddressHeldReason()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAddressStatsGrpHeldReason.setStatus('current')
if mibBuilder.loadTexts: alAddressStatsGrpHeldReason.setDescription('This object reflects the reason for being held.')
altigaAddressStatsMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 3076, 1, 1, 24, 2, 1))
altigaAddressStatsMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 3076, 1, 1, 24, 2, 1, 1))
altigaAddressStatsMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 3076, 1, 1, 24, 2, 1, 1, 1)).setObjects(("ALTIGA-ADDRESS-STATS-MIB", "altigaAddressStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    altigaAddressStatsMibCompliance = altigaAddressStatsMibCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: altigaAddressStatsMibCompliance.setDescription('The compliance statement for agents which implement the Altiga Address Statistics MIB.')
altigaAddressStatsMibComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 3076, 1, 1, 24, 2, 1, 1, 2)).setObjects(("ALTIGA-ADDRESS-STATS-MIB", "altigaAddressStatsGroup"), ("ALTIGA-ADDRESS-STATS-MIB", "altigaAddressStatsGroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    altigaAddressStatsMibComplianceRev1 = altigaAddressStatsMibComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: altigaAddressStatsMibComplianceRev1.setDescription('The compliance statement for agents which implement the Altiga Address Statistics MIB.')
altigaAddressStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3076, 2, 1, 1, 1, 19, 2)).setObjects(("ALTIGA-ADDRESS-STATS-MIB", "alAddressStatsPoolId"), ("ALTIGA-ADDRESS-STATS-MIB", "alAddressStatsTotalPoolAddresses"), ("ALTIGA-ADDRESS-STATS-MIB", "alAddressStatsCurrAllocAddresses"), ("ALTIGA-ADDRESS-STATS-MIB", "alAddressStatsCurrAvailAddresses"), ("ALTIGA-ADDRESS-STATS-MIB", "alAddressStatsMaxAddressesAssigned"), ("ALTIGA-ADDRESS-STATS-MIB", "alAddressStatsGrpId"), ("ALTIGA-ADDRESS-STATS-MIB", "alAddressStatsGrpPoolId"), ("ALTIGA-ADDRESS-STATS-MIB", "alAddressStatsGrpTotalPoolAddresses"), ("ALTIGA-ADDRESS-STATS-MIB", "alAddressStatsGrpCurrAllocAddresses"), ("ALTIGA-ADDRESS-STATS-MIB", "alAddressStatsGrpCurrAvailAddresses"), ("ALTIGA-ADDRESS-STATS-MIB", "alAddressStatsGrpMaxAddressesAssigned"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    altigaAddressStatsGroup = altigaAddressStatsGroup.setStatus('current')
if mibBuilder.loadTexts: altigaAddressStatsGroup.setDescription('The objects for address statistics.')
altigaAddressStatsGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 3076, 2, 1, 1, 1, 19, 3)).setObjects(("ALTIGA-ADDRESS-STATS-MIB", "alAddressStatsHeldAddresses"), ("ALTIGA-ADDRESS-STATS-MIB", "alAddressStatsGrpHeldAddresses"), ("ALTIGA-ADDRESS-STATS-MIB", "alAddressStatsHeldPoolId"), ("ALTIGA-ADDRESS-STATS-MIB", "alAddressStatsHeldAddrIndex"), ("ALTIGA-ADDRESS-STATS-MIB", "alAddressStatsHeldAddress"), ("ALTIGA-ADDRESS-STATS-MIB", "alAddressStatsHeldTimeLeft"), ("ALTIGA-ADDRESS-STATS-MIB", "alAddressStatsHeldReason"), ("ALTIGA-ADDRESS-STATS-MIB", "alAddressStatsGrpHeldId"), ("ALTIGA-ADDRESS-STATS-MIB", "alAddressStatsGrpHeldPoolId"), ("ALTIGA-ADDRESS-STATS-MIB", "alAddressStatsGrpHeldAddrIndex"), ("ALTIGA-ADDRESS-STATS-MIB", "alAddressStatsGrpHeldAddress"), ("ALTIGA-ADDRESS-STATS-MIB", "alAddressStatsGrpHeldTimeLeft"), ("ALTIGA-ADDRESS-STATS-MIB", "alAddressStatsGrpHeldReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    altigaAddressStatsGroupSup1 = altigaAddressStatsGroupSup1.setStatus('current')
if mibBuilder.loadTexts: altigaAddressStatsGroupSup1.setDescription('The objects for address statistics.')
mibBuilder.exportSymbols("ALTIGA-ADDRESS-STATS-MIB", alAddressStatsGrpHeldAddrIndex=alAddressStatsGrpHeldAddrIndex, altigaAddressStatsGroup=altigaAddressStatsGroup, altigaAddressStatsMibCompliance=altigaAddressStatsMibCompliance, altigaAddressStatsGroupSup1=altigaAddressStatsGroupSup1, alAddressStatsPoolEntry=alAddressStatsPoolEntry, alAddressStatsGrpCurrAvailAddresses=alAddressStatsGrpCurrAvailAddresses, alAddressStatsHeldPoolId=alAddressStatsHeldPoolId, alAddressStatsGrpHeldReason=alAddressStatsGrpHeldReason, altigaAddressStatsMibComplianceRev1=altigaAddressStatsMibComplianceRev1, alAddressStatsMaxAddressesAssigned=alAddressStatsMaxAddressesAssigned, alAddressStatsGrpId=alAddressStatsGrpId, alAddressStatsGrpHeldPoolId=alAddressStatsGrpHeldPoolId, alAddressStatsPoolGroupEntry=alAddressStatsPoolGroupEntry, alAddressStatsGrpMaxAddressesAssigned=alAddressStatsGrpMaxAddressesAssigned, alAddressStatsHeldReason=alAddressStatsHeldReason, alAddressStatsCurrAllocAddresses=alAddressStatsCurrAllocAddresses, altigaAddressStatsMibModule=altigaAddressStatsMibModule, alAddressStatsHeldAddrIndex=alAddressStatsHeldAddrIndex, alAddressStatsGrpPoolId=alAddressStatsGrpPoolId, altigaAddressStatsMibConformance=altigaAddressStatsMibConformance, IPAddressHeldReason=IPAddressHeldReason, alAddressStatsGrpHeldTimeLeft=alAddressStatsGrpHeldTimeLeft, alAddressStatsPoolId=alAddressStatsPoolId, alAddressStatsGrpHeldAddresses=alAddressStatsGrpHeldAddresses, alAddressStatsPoolTable=alAddressStatsPoolTable, alAddressStatsHeldTable=alAddressStatsHeldTable, alAddressStatsHeldTimeLeft=alAddressStatsHeldTimeLeft, alAddressStatsGlobal=alAddressStatsGlobal, altigaAddressStatsMibCompliances=altigaAddressStatsMibCompliances, alAddressStatsTotalPoolAddresses=alAddressStatsTotalPoolAddresses, alAddressStatsGrpTotalPoolAddresses=alAddressStatsGrpTotalPoolAddresses, alAddressStatsHeldAddress=alAddressStatsHeldAddress, alAddressStatsGrpHeldId=alAddressStatsGrpHeldId, alAddressStatsGrpHeldEntry=alAddressStatsGrpHeldEntry, alAddressStatsGrpHeldTable=alAddressStatsGrpHeldTable, alAddressStatsGrpHeldAddress=alAddressStatsGrpHeldAddress, alAddressStatsHeldAddresses=alAddressStatsHeldAddresses, alAddressStatsPoolGroupTable=alAddressStatsPoolGroupTable, PYSNMP_MODULE_ID=altigaAddressStatsMibModule, alAddressStatsHeldEntry=alAddressStatsHeldEntry, alAddressStatsCurrAvailAddresses=alAddressStatsCurrAvailAddresses, alAddressStatsGrpCurrAllocAddresses=alAddressStatsGrpCurrAllocAddresses)
