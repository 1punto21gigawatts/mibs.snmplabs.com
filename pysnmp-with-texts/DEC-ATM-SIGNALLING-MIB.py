#
# PySNMP MIB module DEC-ATM-SIGNALLING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DEC-ATM-SIGNALLING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:37:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
decMIBextension, = mibBuilder.importSymbols("DECATM-MIB", "decMIBextension")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, ObjectIdentity, ModuleIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Unsigned32, Integer32, Counter32, Gauge32, iso, NotificationType, MibIdentifier, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ObjectIdentity", "ModuleIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Unsigned32", "Integer32", "Counter32", "Gauge32", "iso", "NotificationType", "MibIdentifier", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
decAtmSignallingMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 34))
decAtmSignallingMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1))
decSignallingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 1))
decSignallingConfigTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 1, 1), )
if mibBuilder.loadTexts: decSignallingConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: decSignallingConfigTable.setDescription('')
decSignallingConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DEC-ATM-SIGNALLING-MIB", "decAtmSignallingIndex"))
if mibBuilder.loadTexts: decSignallingConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: decSignallingConfigEntry.setDescription("Each entry describes one UNI / NNI. Note that the table is indexed by 'atm' interfaces, rather than 'aal5' entities.")
decAtmSignallingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmSignallingIndex.setStatus('mandatory')
if mibBuilder.loadTexts: decAtmSignallingIndex.setDescription('An arbitrary integer index that can be used to distinguish among multiple signalling entities for the same (physical) interface.')
decAtmSignallingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("autoConfigure", 1), ("pnni", 2), ("uni30", 3), ("uni31", 4), ("uni40", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decAtmSignallingMode.setStatus('mandatory')
if mibBuilder.loadTexts: decAtmSignallingMode.setDescription('Indicates the mode in which the port is configured to run.')
decQ2931Group = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2))
decQ2931MsgTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1), )
if mibBuilder.loadTexts: decQ2931MsgTable.setStatus('mandatory')
if mibBuilder.loadTexts: decQ2931MsgTable.setDescription('Describes the number of call/connection processing messages sent and received on each UNI or NNI.')
decQ2931MsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DEC-ATM-SIGNALLING-MIB", "decAtmSignallingIndex"))
if mibBuilder.loadTexts: decQ2931MsgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: decQ2931MsgEntry.setDescription("Each entry contains signalling statistics for one UNI / NNI. Note that the table is indexed by ATM ports (ifType = 'atm') as opposed to AAL5 entities (ifType = 'aal5').")
callProceedingTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callProceedingTx.setStatus('mandatory')
if mibBuilder.loadTexts: callProceedingTx.setDescription('The number of CALL PROCEEDING messages transmitted on this interface.')
callProceedingRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callProceedingRx.setStatus('mandatory')
if mibBuilder.loadTexts: callProceedingRx.setDescription('The number of CALL PROCEEDING messages received on this interface.')
connectTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectTx.setStatus('mandatory')
if mibBuilder.loadTexts: connectTx.setDescription('The number of CONNECT messages transmitted on this interface.')
connectRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectRx.setStatus('mandatory')
if mibBuilder.loadTexts: connectRx.setDescription('The number of CONNECT messages received on this interface.')
connectAcknowledgeTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectAcknowledgeTx.setStatus('mandatory')
if mibBuilder.loadTexts: connectAcknowledgeTx.setDescription('The number of CONNECT ACKNOWLEDGE messages transmitted on this interface.')
connectAcknowledgeRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectAcknowledgeRx.setStatus('mandatory')
if mibBuilder.loadTexts: connectAcknowledgeRx.setDescription('The number of CONNECT ACKNOWLEDGE messages received on this interface.')
setupTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setupTx.setStatus('mandatory')
if mibBuilder.loadTexts: setupTx.setDescription('The number of SETUP messages transmitted on this interface.')
setupRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setupRx.setStatus('mandatory')
if mibBuilder.loadTexts: setupRx.setDescription('The number of SETUP messages received on this interface.')
releaseTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: releaseTx.setStatus('mandatory')
if mibBuilder.loadTexts: releaseTx.setDescription('The number of RELEASE messages transmitted on this interface.')
releaseRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: releaseRx.setStatus('mandatory')
if mibBuilder.loadTexts: releaseRx.setDescription('The number of RELEASE messages received on this interface.')
releaseCompleteTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: releaseCompleteTx.setStatus('mandatory')
if mibBuilder.loadTexts: releaseCompleteTx.setDescription('The number of RELEASE COMPLETE messages transmitted on this interface.')
releaseCompleteRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: releaseCompleteRx.setStatus('mandatory')
if mibBuilder.loadTexts: releaseCompleteRx.setDescription('The number of RELEASE COMPLETE messages received on this interface.')
restartTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restartTx.setStatus('mandatory')
if mibBuilder.loadTexts: restartTx.setDescription('The number of RESTART messages transmitted on this interface.')
restartRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restartRx.setStatus('mandatory')
if mibBuilder.loadTexts: restartRx.setDescription('The number of RESTART messages received on this interface.')
restartAcknowledgeTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restartAcknowledgeTx.setStatus('mandatory')
if mibBuilder.loadTexts: restartAcknowledgeTx.setDescription('The number of RESTART ACKNOWLEDGE messages transmitted on this interface.')
restartAcknowledgeRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restartAcknowledgeRx.setStatus('mandatory')
if mibBuilder.loadTexts: restartAcknowledgeRx.setDescription('The number of RESTART ACKNOWLEDGE messages received on this interface.')
statusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusTx.setStatus('mandatory')
if mibBuilder.loadTexts: statusTx.setDescription('The number of STATUS messages transmitted on this interface.')
statusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusRx.setStatus('mandatory')
if mibBuilder.loadTexts: statusRx.setDescription('The number of STATUS messages received on this interface.')
statusEnquiryTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEnquiryTx.setStatus('mandatory')
if mibBuilder.loadTexts: statusEnquiryTx.setDescription('The number of STATUS ENQUIRY messages transmitted on this interface.')
statusEnquiryRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEnquiryRx.setStatus('mandatory')
if mibBuilder.loadTexts: statusEnquiryRx.setDescription('The number of STATUS ENQUIRY messages received on this interface.')
addPartyTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: addPartyTx.setStatus('mandatory')
if mibBuilder.loadTexts: addPartyTx.setDescription('The number of ADD PARTY messages transmitted on this interface.')
addPartyRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: addPartyRx.setStatus('mandatory')
if mibBuilder.loadTexts: addPartyRx.setDescription('The number of ADD PARTY messages received on this interface.')
addPartyAcknowledgeTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: addPartyAcknowledgeTx.setStatus('mandatory')
if mibBuilder.loadTexts: addPartyAcknowledgeTx.setDescription('The number of ADD PARTY ACKNOWLEDGE messages transmitted on this interface.')
addPartyAcknowledgeRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: addPartyAcknowledgeRx.setStatus('mandatory')
if mibBuilder.loadTexts: addPartyAcknowledgeRx.setDescription('The number of ADD PARTY ACKNOWLEDGE messages received on this interface.')
addPartyRejectTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: addPartyRejectTx.setStatus('mandatory')
if mibBuilder.loadTexts: addPartyRejectTx.setDescription('The number of ADD PARTY REJECT messages transmitted on this interface.')
addPartyRejectRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: addPartyRejectRx.setStatus('mandatory')
if mibBuilder.loadTexts: addPartyRejectRx.setDescription('The number of ADD PARTY REJECT messages received on this interface.')
dropPartyTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dropPartyTx.setStatus('mandatory')
if mibBuilder.loadTexts: dropPartyTx.setDescription('The number of DROP PARTY messages transmitted on this interface.')
dropPartyRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dropPartyRx.setStatus('mandatory')
if mibBuilder.loadTexts: dropPartyRx.setDescription('The number of DROP PARTY messages received on this interface.')
dropPartyAcknowledgeTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dropPartyAcknowledgeTx.setStatus('mandatory')
if mibBuilder.loadTexts: dropPartyAcknowledgeTx.setDescription('The number of DROP PARTY ACKNOWLEDGE messages transmitted on this interface.')
dropPartyAcknowledgeRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dropPartyAcknowledgeRx.setStatus('mandatory')
if mibBuilder.loadTexts: dropPartyAcknowledgeRx.setDescription('The number of DROP PARTY ACKNOWLEDGE messages received on this interface.')
decQ2931StatusTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 2), )
if mibBuilder.loadTexts: decQ2931StatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: decQ2931StatusTable.setDescription('Contains additional Q2931 signalling statistics.')
decQ2931StatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DEC-ATM-SIGNALLING-MIB", "decAtmSignallingIndex"))
if mibBuilder.loadTexts: decQ2931StatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: decQ2931StatusEntry.setDescription("Each entry contains signalling statistics for one UNI / NNI. Note that the table is indexed by ATM ports (ifType = 'atm') as opposed to AAL5 entities (ifType = 'aal5').")
totalConns = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalConns.setStatus('mandatory')
if mibBuilder.loadTexts: totalConns.setDescription('The total number of connections established so far.')
activeConns = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeConns.setStatus('mandatory')
if mibBuilder.loadTexts: activeConns.setDescription('The number of currently-active connections.')
lastTxCause = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastTxCause.setStatus('mandatory')
if mibBuilder.loadTexts: lastTxCause.setDescription('The most recently transmitted cause code.')
lastTxDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastTxDiagnostic.setStatus('mandatory')
if mibBuilder.loadTexts: lastTxDiagnostic.setDescription('The most recently transmitted diagnostic code.')
lastRxCause = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastRxCause.setStatus('mandatory')
if mibBuilder.loadTexts: lastRxCause.setDescription('The most recently received cause code.')
lastRxDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastRxDiagnostic.setStatus('mandatory')
if mibBuilder.loadTexts: lastRxDiagnostic.setDescription('The most recently received diagnostic code.')
decQ2931TimerTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 3), )
if mibBuilder.loadTexts: decQ2931TimerTable.setStatus('mandatory')
if mibBuilder.loadTexts: decQ2931TimerTable.setDescription('Allows network managers to examine and configure the timers used for Q.2931 call processing.')
decQ2931TimerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DEC-ATM-SIGNALLING-MIB", "decAtmSignallingIndex"))
if mibBuilder.loadTexts: decQ2931TimerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: decQ2931TimerEntry.setDescription("Each entry contains timers for one UNI / NNI. Note that the table is indexed by ATM ports (ifType = 'atm') as opposed to AAL5 entities (ifType = 'aal5'). Sorry about the cryptic timer names, but that's what the ATM Forum calls these timers in the UNI V3.0 Specification.")
t303 = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 3, 1, 1), Integer32().clone(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t303.setStatus('mandatory')
if mibBuilder.loadTexts: t303.setDescription('SETUP message timeout, in seconds.')
t308 = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 3, 1, 2), Integer32().clone(30)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t308.setStatus('mandatory')
if mibBuilder.loadTexts: t308.setDescription('RELEASE message timeout, in seconds.')
t309 = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 3, 1, 3), Integer32().clone(90)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t309.setStatus('mandatory')
if mibBuilder.loadTexts: t309.setDescription('SAAL disconnection timeout, in seconds.')
t310 = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 3, 1, 4), Integer32().clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t310.setStatus('mandatory')
if mibBuilder.loadTexts: t310.setDescription('CALL PROCEEDING timeout, in seconds.')
t313 = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 3, 1, 5), Integer32().clone(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t313.setStatus('mandatory')
if mibBuilder.loadTexts: t313.setDescription('CONNECT timeout, in seconds. This timer is only used on the User side of a UNI.')
t316 = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 3, 1, 6), Integer32().clone(120)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t316.setStatus('mandatory')
if mibBuilder.loadTexts: t316.setDescription('RESTART timeout, in seconds.')
t317 = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t317.setStatus('mandatory')
if mibBuilder.loadTexts: t317.setDescription("RESTART reply timeout, in seconds. This should be less than the value for timer 't316'.")
t322 = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 3, 1, 8), Integer32().clone(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t322.setStatus('mandatory')
if mibBuilder.loadTexts: t322.setDescription('STATUS ENQUIRY timeout, in seconds.')
t398 = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 3, 1, 9), Integer32().clone(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t398.setStatus('mandatory')
if mibBuilder.loadTexts: t398.setDescription('DROP PARTY timeout, in seconds.')
t399 = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 2, 3, 1, 10), Integer32().clone(14)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t399.setStatus('mandatory')
if mibBuilder.loadTexts: t399.setDescription('ADD PARTY timeout, in seconds.')
decQSaalGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3))
decQSaalMsgTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1), )
if mibBuilder.loadTexts: decQSaalMsgTable.setStatus('mandatory')
if mibBuilder.loadTexts: decQSaalMsgTable.setDescription('')
decQSaalMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DEC-ATM-SIGNALLING-MIB", "decAtmSignallingIndex"))
if mibBuilder.loadTexts: decQSaalMsgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: decQSaalMsgEntry.setDescription("Each entry contains signalling statistics for one UNI / NNI. Note that the table is indexed by ATM ports (ifType = 'atm') as opposed to AAL5 entities (ifType = 'aal5').")
txDiscardedSdus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txDiscardedSdus.setStatus('mandatory')
if mibBuilder.loadTexts: txDiscardedSdus.setDescription('The number of outgoing SDUs which were discarded.')
rxErrorPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxErrorPdus.setStatus('mandatory')
if mibBuilder.loadTexts: rxErrorPdus.setDescription('The number of incoming PDUs which could not be received due to errors.')
txErrorPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txErrorPdus.setStatus('mandatory')
if mibBuilder.loadTexts: txErrorPdus.setDescription('The number of transmission errors for outgoing PDUs.')
rxDiscardedPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxDiscardedPdus.setStatus('mandatory')
if mibBuilder.loadTexts: rxDiscardedPdus.setDescription('The number of incoming PDUs which were discarded.')
txDiscardedPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txDiscardedPdus.setStatus('mandatory')
if mibBuilder.loadTexts: txDiscardedPdus.setDescription('The number of outgoing PDUs which were discarded.')
bgnTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgnTx.setStatus('mandatory')
if mibBuilder.loadTexts: bgnTx.setDescription('The number of BGN (Request Initialization) messages transmitted over the interface.')
bgnRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgnRx.setStatus('mandatory')
if mibBuilder.loadTexts: bgnRx.setDescription('The number of BGN (Request Initialization) messages received over the interface.')
bgakTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgakTx.setStatus('mandatory')
if mibBuilder.loadTexts: bgakTx.setDescription('The number of BGAK (Request Acknowledgement) messages transmitted over the interface.')
bgakRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgakRx.setStatus('mandatory')
if mibBuilder.loadTexts: bgakRx.setDescription('The number of BGAK (Request Acknowledgement) messages received over the interface.')
endTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endTx.setStatus('mandatory')
if mibBuilder.loadTexts: endTx.setDescription('The number of END (Disconnect Command) messages transmitted over the interface.')
endRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endRx.setStatus('mandatory')
if mibBuilder.loadTexts: endRx.setDescription('The number of END (Disconnect Command) messages received over the interface.')
endakTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endakTx.setStatus('mandatory')
if mibBuilder.loadTexts: endakTx.setDescription('The number of ENDAK (Disconnect Acknowledgement) messages transmitted over the interface.')
endakRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endakRx.setStatus('mandatory')
if mibBuilder.loadTexts: endakRx.setDescription('The number of ENDAK (Disconnect Acknowledgement) messages received over the interface.')
rsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsTx.setStatus('mandatory')
if mibBuilder.loadTexts: rsTx.setDescription('The number of RS (Resynchronization Command) messages transmitted over the interface.')
rsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsRx.setStatus('mandatory')
if mibBuilder.loadTexts: rsRx.setDescription('The number of RS (Resynchronization Command) messages received over the interface.')
rsakTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsakTx.setStatus('mandatory')
if mibBuilder.loadTexts: rsakTx.setDescription('The number of RSAK (Resynchronization Acknowledgement) messages transmitted over the interface.')
rsakRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsakRx.setStatus('mandatory')
if mibBuilder.loadTexts: rsakRx.setDescription('The number of RSAK (Resynchronization Acknowledgement) messages received over the interface.')
bgrejTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgrejTx.setStatus('mandatory')
if mibBuilder.loadTexts: bgrejTx.setDescription('The number of BGREJ (Connection Reject) messages transmitted over the interface.')
bgrejRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgrejRx.setStatus('mandatory')
if mibBuilder.loadTexts: bgrejRx.setDescription('The number of BGREJ (Connection Reject) messages received over the interface.')
sdTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdTx.setStatus('mandatory')
if mibBuilder.loadTexts: sdTx.setDescription('The number of SD (Sequenced Connection-Mode Data) messages transmitted over the interface.')
sdRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdRx.setStatus('mandatory')
if mibBuilder.loadTexts: sdRx.setDescription('The number of SD (Sequenced Connection-Mode Data) messages received over the interface.')
sdpTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpTx.setStatus('mandatory')
if mibBuilder.loadTexts: sdpTx.setDescription('The number of SDP (Sequenced Connection-Mode Data with request for Receive State Information) messages transmitted over the interface. This object only applies to UNI 3.0.')
sdpRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpRx.setStatus('mandatory')
if mibBuilder.loadTexts: sdpRx.setDescription('The number of SDP (Sequenced Connection-Mode Data with request for Receive State Information) messages received over the interface. This object only applies to UNI 3.0.')
erTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erTx.setStatus('mandatory')
if mibBuilder.loadTexts: erTx.setDescription('The number of ER (Recovery Command) messages transmitted over the interface. This object is not applicable to UNI 3.0.')
erRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erRx.setStatus('mandatory')
if mibBuilder.loadTexts: erRx.setDescription('The number of ER (Recovery Command) messages received over the interface. This object is not applicable to UNI 3.0.')
pollTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pollTx.setStatus('mandatory')
if mibBuilder.loadTexts: pollTx.setDescription('The number of POLL (Transmitter State Information with request for Receive State Information) messages transmitted over the interface.')
pollRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pollRx.setStatus('mandatory')
if mibBuilder.loadTexts: pollRx.setDescription('The number of POLL (Transmitter State Information with request for Receive State Information) messages received over the interface.')
statTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statTx.setStatus('mandatory')
if mibBuilder.loadTexts: statTx.setDescription('The number of STAT (Solicited Receiver State Information) messages transmitted over the interface.')
statRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statRx.setStatus('mandatory')
if mibBuilder.loadTexts: statRx.setDescription('The number of STAT (Solicited Receiver State Information) messages received over the interface.')
ustatTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ustatTx.setStatus('mandatory')
if mibBuilder.loadTexts: ustatTx.setDescription('The number of USTAT (Unsolicited Receiver State Info) messages transmitted over the interface.')
ustatRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ustatRx.setStatus('mandatory')
if mibBuilder.loadTexts: ustatRx.setDescription('The number of USTAT (Unsolicited Receiver State Info) messages received over the interface.')
udTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udTx.setStatus('mandatory')
if mibBuilder.loadTexts: udTx.setDescription('The number of UD (Unnumbered User Data) messages transmitted over the interface.')
udRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udRx.setStatus('mandatory')
if mibBuilder.loadTexts: udRx.setDescription('The number of UD (Unnumbered User Data) messages received over the interface.')
mdTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdTx.setStatus('mandatory')
if mibBuilder.loadTexts: mdTx.setDescription('The number of MD (Unnumbered Management Data) messages transmitted over the interface.')
mdRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdRx.setStatus('mandatory')
if mibBuilder.loadTexts: mdRx.setDescription('The number of MD (Unnumbered Management Data) messages received over the interface.')
erakTx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erakTx.setStatus('mandatory')
if mibBuilder.loadTexts: erakTx.setDescription('The number of ERAK (Recovery Acknowledgement) messages transmitted over the interface. This object is not applicable to UNI 3.0.')
erakRx = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 34, 1, 3, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erakRx.setStatus('mandatory')
if mibBuilder.loadTexts: erakRx.setDescription('The number of ERAK (Recovery Acknowledgement) messages received over the interface. This object is not applicable to UNI 3.0.')
mibBuilder.exportSymbols("DEC-ATM-SIGNALLING-MIB", t322=t322, ustatTx=ustatTx, rsakTx=rsakTx, addPartyAcknowledgeTx=addPartyAcknowledgeTx, restartRx=restartRx, pollRx=pollRx, txDiscardedPdus=txDiscardedPdus, activeConns=activeConns, sdpTx=sdpTx, restartAcknowledgeTx=restartAcknowledgeTx, sdRx=sdRx, decSignallingConfigTable=decSignallingConfigTable, decQ2931StatusEntry=decQ2931StatusEntry, t317=t317, connectTx=connectTx, t309=t309, dropPartyTx=dropPartyTx, t313=t313, erakTx=erakTx, t303=t303, releaseTx=releaseTx, pollTx=pollTx, lastTxDiagnostic=lastTxDiagnostic, restartTx=restartTx, sdpRx=sdpRx, dropPartyAcknowledgeTx=dropPartyAcknowledgeTx, decAtmSignallingMIB=decAtmSignallingMIB, mdRx=mdRx, releaseCompleteRx=releaseCompleteRx, t316=t316, endRx=endRx, endakRx=endakRx, sdTx=sdTx, decSignallingConfigEntry=decSignallingConfigEntry, lastRxCause=lastRxCause, statTx=statTx, lastTxCause=lastTxCause, connectRx=connectRx, decQ2931TimerEntry=decQ2931TimerEntry, statusEnquiryRx=statusEnquiryRx, decAtmSignallingMIBObjects=decAtmSignallingMIBObjects, bgakTx=bgakTx, decQSaalMsgEntry=decQSaalMsgEntry, connectAcknowledgeRx=connectAcknowledgeRx, rsRx=rsRx, t310=t310, t398=t398, addPartyRejectTx=addPartyRejectTx, rxErrorPdus=rxErrorPdus, statusEnquiryTx=statusEnquiryTx, rxDiscardedPdus=rxDiscardedPdus, statusTx=statusTx, decAtmSignallingIndex=decAtmSignallingIndex, addPartyRejectRx=addPartyRejectRx, ustatRx=ustatRx, t399=t399, decQ2931MsgEntry=decQ2931MsgEntry, txDiscardedSdus=txDiscardedSdus, erRx=erRx, txErrorPdus=txErrorPdus, releaseCompleteTx=releaseCompleteTx, decAtmSignallingMode=decAtmSignallingMode, decQ2931MsgTable=decQ2931MsgTable, connectAcknowledgeTx=connectAcknowledgeTx, statRx=statRx, bgrejTx=bgrejTx, decQ2931Group=decQ2931Group, setupTx=setupTx, callProceedingTx=callProceedingTx, dropPartyAcknowledgeRx=dropPartyAcknowledgeRx, t308=t308, addPartyTx=addPartyTx, decQ2931StatusTable=decQ2931StatusTable, endakTx=endakTx, statusRx=statusRx, rsakRx=rsakRx, udRx=udRx, addPartyAcknowledgeRx=addPartyAcknowledgeRx, decQ2931TimerTable=decQ2931TimerTable, bgnTx=bgnTx, decSignallingGroup=decSignallingGroup, releaseRx=releaseRx, bgrejRx=bgrejRx, dropPartyRx=dropPartyRx, bgakRx=bgakRx, erakRx=erakRx, mdTx=mdTx, restartAcknowledgeRx=restartAcknowledgeRx, lastRxDiagnostic=lastRxDiagnostic, totalConns=totalConns, erTx=erTx, decQSaalMsgTable=decQSaalMsgTable, addPartyRx=addPartyRx, udTx=udTx, decQSaalGroup=decQSaalGroup, endTx=endTx, bgnRx=bgnRx, setupRx=setupRx, callProceedingRx=callProceedingRx, rsTx=rsTx)
