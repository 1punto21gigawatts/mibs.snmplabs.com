#
# PySNMP MIB module JUNIPER-IPFORWARD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-IPFORWARD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:59:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
inetCidrRouteEntry, ipCidrRouteEntry = mibBuilder.importSymbols("IP-FORWARD-MIB", "inetCidrRouteEntry", "ipCidrRouteEntry")
jnxMibs, = mibBuilder.importSymbols("JUNIPER-SMI", "jnxMibs")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, TimeTicks, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Gauge32, IpAddress, Integer32, Counter32, ModuleIdentity, ObjectIdentity, MibIdentifier, Unsigned32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "TimeTicks", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Gauge32", "IpAddress", "Integer32", "Counter32", "ModuleIdentity", "ObjectIdentity", "MibIdentifier", "Unsigned32", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
jnxIpForwardMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 38))
jnxIpForwardMIB.setRevisions(('2011-11-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxIpForwardMIB.setRevisionsDescriptions(('jnxInetCidrRouteTunnelName deprecates jnxIpCidrRouteTunnelName.',))
if mibBuilder.loadTexts: jnxIpForwardMIB.setLastUpdated('201111130000Z')
if mibBuilder.loadTexts: jnxIpForwardMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxIpForwardMIB.setContactInfo(' Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxIpForwardMIB.setDescription("This is Juniper Networks' implementation of enterprise specific portions of ipForward MIB. Any data stored in this MIB has directly related entries in mib-2, ipForward MIB.")
jnxIpCidrRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 38, 1), )
if mibBuilder.loadTexts: jnxIpCidrRouteTable.setStatus('deprecated')
if mibBuilder.loadTexts: jnxIpCidrRouteTable.setDescription('Augments the ipCidrRouteTable with additional data.')
jnxIpCidrRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 38, 1, 1), )
ipCidrRouteEntry.registerAugmentions(("JUNIPER-IPFORWARD-MIB", "jnxIpCidrRouteEntry"))
jnxIpCidrRouteEntry.setIndexNames(*ipCidrRouteEntry.getIndexNames())
if mibBuilder.loadTexts: jnxIpCidrRouteEntry.setStatus('deprecated')
if mibBuilder.loadTexts: jnxIpCidrRouteEntry.setDescription('Each entry provides additional CIDR forwarding information.')
jnxIpCidrRouteTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 38, 1, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpCidrRouteTunnelName.setStatus('deprecated')
if mibBuilder.loadTexts: jnxIpCidrRouteTunnelName.setDescription('The canonical name assigned to the tunnel. The router will forward traffic bound for the destination defined by the INDEX through this tunnel.')
jnxInetCidrRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 38, 2), )
if mibBuilder.loadTexts: jnxInetCidrRouteTable.setStatus('current')
if mibBuilder.loadTexts: jnxInetCidrRouteTable.setDescription('Augments the inetCidrRouteTable with additional data.')
jnxInetCidrRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 38, 2, 1), )
inetCidrRouteEntry.registerAugmentions(("JUNIPER-IPFORWARD-MIB", "jnxInetCidrRouteEntry"))
jnxInetCidrRouteEntry.setIndexNames(*inetCidrRouteEntry.getIndexNames())
if mibBuilder.loadTexts: jnxInetCidrRouteEntry.setStatus('current')
if mibBuilder.loadTexts: jnxInetCidrRouteEntry.setDescription('Each entry provides additional CIDR forwarding information.')
jnxInetCidrRouteTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 38, 2, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxInetCidrRouteTunnelName.setStatus('current')
if mibBuilder.loadTexts: jnxInetCidrRouteTunnelName.setDescription('The canonical name assigned to the tunnel. The router will forward traffic bound for the destination defined by the INDEX through this tunnel.')
mibBuilder.exportSymbols("JUNIPER-IPFORWARD-MIB", jnxIpCidrRouteTunnelName=jnxIpCidrRouteTunnelName, jnxIpForwardMIB=jnxIpForwardMIB, PYSNMP_MODULE_ID=jnxIpForwardMIB, jnxIpCidrRouteEntry=jnxIpCidrRouteEntry, jnxIpCidrRouteTable=jnxIpCidrRouteTable, jnxInetCidrRouteEntry=jnxInetCidrRouteEntry, jnxInetCidrRouteTunnelName=jnxInetCidrRouteTunnelName, jnxInetCidrRouteTable=jnxInetCidrRouteTable)
