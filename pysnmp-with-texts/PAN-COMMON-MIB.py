#
# PySNMP MIB module PAN-COMMON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PAN-COMMON-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:36:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
panModules, panCommonMib = mibBuilder.importSymbols("PAN-GLOBAL-REG", "panModules", "panCommonMib")
TcChassisType, = mibBuilder.importSymbols("PAN-GLOBAL-TC", "TcChassisType")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, ModuleIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Gauge32, MibIdentifier, Counter64, ObjectIdentity, IpAddress, Bits, NotificationType, TimeTicks, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "ModuleIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Gauge32", "MibIdentifier", "Counter64", "ObjectIdentity", "IpAddress", "Bits", "NotificationType", "TimeTicks", "iso")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
panCommonMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 25461, 1, 1, 3))
panCommonMibModule.setRevisions(('2014-06-30 00:00', '2014-09-04 00:00', '2014-03-06 00:00', '2013-03-01 00:00', '2011-02-09 16:10',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: panCommonMibModule.setRevisionsDescriptions((' Rev 2.3 Added entries for Log Collector.', ' Rev 2.2 Added entries for Wildfire content versions. Added entry for new platform PA 3060.', ' Rev 2.1 Fixed a capitalization error with PanVsysEntry.', ' Rev 2.0 Updated with panGlobalProtect and panVsysTable.', ' Rev 1.0 Initial version of MIB module PAN-COMMON-MIB.',))
if mibBuilder.loadTexts: panCommonMibModule.setLastUpdated('201409040000Z')
if mibBuilder.loadTexts: panCommonMibModule.setOrganization('Palo Alto Networks')
if mibBuilder.loadTexts: panCommonMibModule.setContactInfo(' Customer Support Palo Alto Networks 4401 Great America Pkwy Santa Clara, CA 95054-1211 +1 866-898-9087 support at paloaltonetworks dot com')
if mibBuilder.loadTexts: panCommonMibModule.setDescription(" A MIB module containing definitions of managed objects implemented by all Palo Alto Networks' products.")
panCommonConfMib = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 1))
if mibBuilder.loadTexts: panCommonConfMib.setStatus('current')
if mibBuilder.loadTexts: panCommonConfMib.setDescription(' Sub-tree for MIB conformance statements.')
panCommonObjs = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2))
if mibBuilder.loadTexts: panCommonObjs.setStatus('current')
if mibBuilder.loadTexts: panCommonObjs.setDescription(' Sub-tree for common MIB objects.')
panCommonEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 3))
if mibBuilder.loadTexts: panCommonEvents.setStatus('current')
if mibBuilder.loadTexts: panCommonEvents.setDescription(' Sub-tree for common MIB events.')
panSys = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1))
if mibBuilder.loadTexts: panSys.setStatus('current')
if mibBuilder.loadTexts: panSys.setDescription(' Sub-tree for common system objects.')
panChassis = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 2))
if mibBuilder.loadTexts: panChassis.setStatus('current')
if mibBuilder.loadTexts: panChassis.setDescription(' Sub-tree for common chassis information.')
panSession = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3))
if mibBuilder.loadTexts: panSession.setStatus('current')
if mibBuilder.loadTexts: panSession.setDescription(' Sub-tree for common session information.')
panMgmt = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 4))
if mibBuilder.loadTexts: panMgmt.setStatus('current')
if mibBuilder.loadTexts: panMgmt.setDescription(' Sub-tree for common Management plane information.')
panGlobalProtect = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 5))
if mibBuilder.loadTexts: panGlobalProtect.setStatus('current')
if mibBuilder.loadTexts: panGlobalProtect.setDescription(' Sub-tree for common GlobalProtect information.')
panLogCollector = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6))
if mibBuilder.loadTexts: panLogCollector.setStatus('current')
if mibBuilder.loadTexts: panLogCollector.setDescription(' Sub-tree for common Log Collector information.')
panGlobalCounters = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19))
if mibBuilder.loadTexts: panGlobalCounters.setStatus('current')
if mibBuilder.loadTexts: panGlobalCounters.setDescription(' Sub-tree for common Global counters.')
panSysSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysSwVersion.setStatus('current')
if mibBuilder.loadTexts: panSysSwVersion.setDescription('Full software version. The first two components of the full version are the major and minor versions. The third component indicates the maintenance release number and the fourth, the build number.')
panSysHwVersion = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysHwVersion.setStatus('current')
if mibBuilder.loadTexts: panSysHwVersion.setDescription('Hardware version of the unit.')
panSysSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysSerialNumber.setStatus('current')
if mibBuilder.loadTexts: panSysSerialNumber.setDescription('The serial number of the unit. If not available, an empty string is returned.')
panSysTimeZoneOffset = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysTimeZoneOffset.setStatus('current')
if mibBuilder.loadTexts: panSysTimeZoneOffset.setDescription("The offset in seconds from UTC of the system's time zone. Values are negative for locations west of UTC and positive for locations east of UTC.")
panSysDaylightSaving = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysDaylightSaving.setStatus('current')
if mibBuilder.loadTexts: panSysDaylightSaving.setDescription("Whether daylight savings are in currently in effect for the system's time zone.")
panSysVpnClientVersion = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysVpnClientVersion.setStatus('current')
if mibBuilder.loadTexts: panSysVpnClientVersion.setDescription('Currently installed VPN client package version. If package is not installed, 0.0.0 is returned.')
panSysAppVersion = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysAppVersion.setStatus('current')
if mibBuilder.loadTexts: panSysAppVersion.setDescription('Currently installed application definition version. If no application definition is found, 0 is returned.')
panSysAvVersion = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysAvVersion.setStatus('current')
if mibBuilder.loadTexts: panSysAvVersion.setDescription('Currently installed antivirus version. If no antivirus is found, 0 is returned.')
panSysThreatVersion = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysThreatVersion.setStatus('current')
if mibBuilder.loadTexts: panSysThreatVersion.setDescription('Currently installed threat definition version. If no threat definition is found, 0 is returned.')
panSysUrlFilteringVersion = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysUrlFilteringVersion.setStatus('current')
if mibBuilder.loadTexts: panSysUrlFilteringVersion.setDescription('Currently installed URL filtering version. If no URL filtering is installed, 0 is returned.')
panSysHAState = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysHAState.setStatus('current')
if mibBuilder.loadTexts: panSysHAState.setDescription('Current high-availability state.')
panSysHAPeerState = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysHAPeerState.setStatus('current')
if mibBuilder.loadTexts: panSysHAPeerState.setDescription('Current peer high-availability state.')
panSysHAMode = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysHAMode.setStatus('current')
if mibBuilder.loadTexts: panSysHAMode.setDescription('Current high-availability mode (disabled, active-passive, or active-active).')
panSysUrlFilteringDatabase = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysUrlFilteringDatabase.setStatus('current')
if mibBuilder.loadTexts: panSysUrlFilteringDatabase.setDescription('Current installed URL filtering database (surfcontrol, brightcloud, etc)')
panSysGlobalProtectClientVersion = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysGlobalProtectClientVersion.setStatus('current')
if mibBuilder.loadTexts: panSysGlobalProtectClientVersion.setDescription('Currently installed global-protect client package version. If package is not installed, 0.0.0 is returned.')
panSysOpswatDatafileVersion = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysOpswatDatafileVersion.setStatus('current')
if mibBuilder.loadTexts: panSysOpswatDatafileVersion.setDescription('Currently installed opswat database version. If package is not installed, 0 is returned.')
panSysWildfireVersion = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysWildfireVersion.setStatus('current')
if mibBuilder.loadTexts: panSysWildfireVersion.setDescription('Currently installed wildfire content version. If no wildfire content is found, 0 is returned.')
panSysWildfirePrivateCloudVersion = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSysWildfirePrivateCloudVersion.setStatus('current')
if mibBuilder.loadTexts: panSysWildfirePrivateCloudVersion.setDescription('Currently installed wildfire private cloud content version. If no wpc is found, 0 is returned.')
panChassisType = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panChassisType.setStatus('current')
if mibBuilder.loadTexts: panChassisType.setDescription('Chassis type for this Palo Alto device.')
panMSeriesMode = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panMSeriesMode.setStatus('current')
if mibBuilder.loadTexts: panMSeriesMode.setDescription('Series Mode for this Palo Alto device.')
panSessionUtilization = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSessionUtilization.setStatus('current')
if mibBuilder.loadTexts: panSessionUtilization.setDescription('Session table utilization percentage. Values should be between 0 and 100.')
panSessionMax = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSessionMax.setStatus('current')
if mibBuilder.loadTexts: panSessionMax.setDescription('Total number of sessions supported.')
panSessionActive = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSessionActive.setStatus('current')
if mibBuilder.loadTexts: panSessionActive.setDescription('Total number of active sessions.')
panSessionActiveTcp = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSessionActiveTcp.setStatus('current')
if mibBuilder.loadTexts: panSessionActiveTcp.setDescription('Total number of active TCP sessions.')
panSessionActiveUdp = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSessionActiveUdp.setStatus('current')
if mibBuilder.loadTexts: panSessionActiveUdp.setDescription('Total number of active UDP sessions.')
panSessionActiveICMP = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSessionActiveICMP.setStatus('current')
if mibBuilder.loadTexts: panSessionActiveICMP.setDescription('Total number of active ICMP sessions.')
panSessionActiveSslProxy = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSessionActiveSslProxy.setStatus('current')
if mibBuilder.loadTexts: panSessionActiveSslProxy.setDescription('Total number of active SSL proxy sessions.')
panSessionSslProxyUtilization = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSessionSslProxyUtilization.setStatus('current')
if mibBuilder.loadTexts: panSessionSslProxyUtilization.setDescription('SSL proxy Session utilization percentage. Values should be between 0 and 100.')
panVsysTable = MibTable((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 9), )
if mibBuilder.loadTexts: panVsysTable.setStatus('current')
if mibBuilder.loadTexts: panVsysTable.setDescription('VSYS table')
panVsysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 9, 1), ).setIndexNames((0, "PAN-COMMON-MIB", "panVsysId"))
if mibBuilder.loadTexts: panVsysEntry.setStatus('current')
if mibBuilder.loadTexts: panVsysEntry.setDescription("Entries are created when the Vsys's are added to the entVsysTable.")
panVsysId = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panVsysId.setStatus('current')
if mibBuilder.loadTexts: panVsysId.setDescription('Vsys id')
panVsysName = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panVsysName.setStatus('current')
if mibBuilder.loadTexts: panVsysName.setDescription('User assigned vsys name (empty string if not available)')
panVsysSessionUtilizationPct = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panVsysSessionUtilizationPct.setStatus('current')
if mibBuilder.loadTexts: panVsysSessionUtilizationPct.setDescription("Vsys utilization percentage, if session limit is configured. If session limit is not configured, this value is '0'")
panVsysActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panVsysActiveSessions.setStatus('current')
if mibBuilder.loadTexts: panVsysActiveSessions.setDescription('Active sessions on this Vsys')
panVsysMaxSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 3, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panVsysMaxSessions.setStatus('current')
if mibBuilder.loadTexts: panVsysMaxSessions.setDescription("Max sessions on this Vsys, if session limit is configured. If session limit is not configured, this value is '0'")
panMgmtPanoramaConnected = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panMgmtPanoramaConnected.setStatus('current')
if mibBuilder.loadTexts: panMgmtPanoramaConnected.setDescription('Current Connection status to Panorama Server (connected, not-connected)')
panMgmtPanorama2Connected = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 4, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panMgmtPanorama2Connected.setStatus('current')
if mibBuilder.loadTexts: panMgmtPanorama2Connected.setDescription('Current Connection status to Panorama2 Server (connected, not-connected)')
panGPGatewayUtilization = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 5, 1))
if mibBuilder.loadTexts: panGPGatewayUtilization.setStatus('current')
if mibBuilder.loadTexts: panGPGatewayUtilization.setDescription('GlobalProtect gateway utilization')
panGPGWUtilizationPct = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panGPGWUtilizationPct.setStatus('current')
if mibBuilder.loadTexts: panGPGWUtilizationPct.setDescription('GlobalProtect Gateway utilization percentage')
panGPGWUtilizationMaxTunnels = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panGPGWUtilizationMaxTunnels.setStatus('current')
if mibBuilder.loadTexts: panGPGWUtilizationMaxTunnels.setDescription('Max tunnels allowed')
panGPGWUtilizationActiveTunnels = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panGPGWUtilizationActiveTunnels.setStatus('current')
if mibBuilder.loadTexts: panGPGWUtilizationActiveTunnels.setDescription('Number of active tunnels')
panLcStat = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1))
if mibBuilder.loadTexts: panLcStat.setStatus('current')
if mibBuilder.loadTexts: panLcStat.setDescription(' Sub-tree for the Log collection statistics.')
panLcLogRate = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLogRate.setStatus('current')
if mibBuilder.loadTexts: panLcLogRate.setDescription('The write rate in logs/s on the Log Collection')
panLcLogDuration = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 2))
if mibBuilder.loadTexts: panLcLogDuration.setStatus('current')
if mibBuilder.loadTexts: panLcLogDuration.setDescription(' Sub-tree for the Log Duration on the Log Collector. Log Duration is Expressed in Days of storage.')
panLcDiskUsageTable = MibTable((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 3), )
if mibBuilder.loadTexts: panLcDiskUsageTable.setStatus('current')
if mibBuilder.loadTexts: panLcDiskUsageTable.setDescription(' Sub-tree for the Log Disk Usage on the Log Collector. Log Disk Usage is available as MB in use.')
panLcLogDurationTraffic = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLogDurationTraffic.setStatus('current')
if mibBuilder.loadTexts: panLcLogDurationTraffic.setDescription('The Log duration (in days) for the traffic logs on the Log Collector')
panLcLogDurationConfig = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 2, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLogDurationConfig.setStatus('current')
if mibBuilder.loadTexts: panLcLogDurationConfig.setDescription('The Log duration (in days) for the config logs on the Log Collector')
panLcLogDurationSystem = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 2, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLogDurationSystem.setStatus('current')
if mibBuilder.loadTexts: panLcLogDurationSystem.setDescription('The Log duration (in days) for the system logs on the Log Collector')
panLcLogDurationThreat = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 2, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLogDurationThreat.setStatus('current')
if mibBuilder.loadTexts: panLcLogDurationThreat.setDescription('The Log duration (in days) for the threat logs on the Log Collector')
panLcLogDurationAppstat = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 2, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLogDurationAppstat.setStatus('current')
if mibBuilder.loadTexts: panLcLogDurationAppstat.setDescription('The Log duration (in days) for the appstat logs on the Log Collector')
panLcLogDurationTrsum = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 2, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLogDurationTrsum.setStatus('current')
if mibBuilder.loadTexts: panLcLogDurationTrsum.setDescription('The Log duration (in days) for the trsum logs on the Log Collector')
panLcLogDurationThsum = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 2, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLogDurationThsum.setStatus('current')
if mibBuilder.loadTexts: panLcLogDurationThsum.setDescription('The Log duration (in days) for the thsum logs on the Log Collector')
panLcLogDurationEvent = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 2, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLogDurationEvent.setStatus('current')
if mibBuilder.loadTexts: panLcLogDurationEvent.setDescription('The Log duration (in days) for the event logs on the Log Collector')
panLcLogDurationAlarm = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 2, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLogDurationAlarm.setStatus('current')
if mibBuilder.loadTexts: panLcLogDurationAlarm.setDescription('The Log duration (in days) for the alarm logs on the Log Collector')
panLcLogDurationHipmatch = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 2, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLogDurationHipmatch.setStatus('current')
if mibBuilder.loadTexts: panLcLogDurationHipmatch.setDescription('The Log duration (in days) for the hipmatch logs on the Log Collector')
panLcLogDurationUserid = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 2, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcLogDurationUserid.setStatus('current')
if mibBuilder.loadTexts: panLcLogDurationUserid.setDescription('The Log duration (in days) for the userid logs on the Log Collector')
panLcDiskUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 3, 1), ).setIndexNames((0, "PAN-COMMON-MIB", "panLcDiskUsageId"))
if mibBuilder.loadTexts: panLcDiskUsageEntry.setStatus('current')
if mibBuilder.loadTexts: panLcDiskUsageEntry.setDescription('Entries are created when the panLcDiskUsage are added to the panLcDiskUsageTable.')
panLcDiskUsageId = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcDiskUsageId.setStatus('current')
if mibBuilder.loadTexts: panLcDiskUsageId.setDescription('The Log disk id')
panLcDiskUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 1, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcDiskUsage.setStatus('current')
if mibBuilder.loadTexts: panLcDiskUsage.setDescription('The Log disk usage on the Log Collector')
panLcIsRedundancyMember = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 6, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panLcIsRedundancyMember.setStatus('current')
if mibBuilder.loadTexts: panLcIsRedundancyMember.setDescription('True value indicates this Log Collector is part of a Collector Group with Redundancy is enabled')
panCommonEventObjs = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 3, 1))
if mibBuilder.loadTexts: panCommonEventObjs.setStatus('current')
if mibBuilder.loadTexts: panCommonEventObjs.setDescription(' Branch for objects meant only to be sent in event varbinds.')
panCommonEventEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 3, 2))
if mibBuilder.loadTexts: panCommonEventEvents.setStatus('current')
if mibBuilder.loadTexts: panCommonEventEvents.setDescription(' Branch for the events themselves.')
panCommonEventEventsV2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 3, 2, 0))
if mibBuilder.loadTexts: panCommonEventEventsV2.setStatus('current')
if mibBuilder.loadTexts: panCommonEventEventsV2.setDescription(' Branch for SNMPv2 events. The OIDs for SNMPv2 events should have a zero as the next-to-last sub-identifier (as specified in RFC1902).')
panCommonEventDescr = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 3, 1, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: panCommonEventDescr.setStatus('current')
if mibBuilder.loadTexts: panCommonEventDescr.setDescription('String that provides a textual description of the event.')
panCommonEventLog = NotificationType((1, 3, 6, 1, 4, 1, 25461, 2, 1, 3, 2, 0, 1)).setObjects(("PAN-COMMON-MIB", "panCommonEventDescr"))
if mibBuilder.loadTexts: panCommonEventLog.setStatus('current')
if mibBuilder.loadTexts: panCommonEventLog.setDescription('A config/system/firewall/threat log')
panAhoSw = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panAhoSw.setStatus('current')
if mibBuilder.loadTexts: panAhoSw.setDescription('The total usage of software for AHO')
panDfaSw = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panDfaSw.setStatus('current')
if mibBuilder.loadTexts: panDfaSw.setDescription('The total number of dfa match using software')
panFlowHostServiceAllow = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowHostServiceAllow.setStatus('current')
if mibBuilder.loadTexts: panFlowHostServiceAllow.setDescription('Device management session allowed')
panHaPathmonSent = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panHaPathmonSent.setStatus('current')
if mibBuilder.loadTexts: panHaPathmonSent.setDescription('HA path-monitoring packets sent')
panAhoFpga = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panAhoFpga.setStatus('current')
if mibBuilder.loadTexts: panAhoFpga.setDescription('The total requests to FPGA for AHO')
panDfaFpga = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panDfaFpga.setStatus('current')
if mibBuilder.loadTexts: panDfaFpga.setDescription('The total requests to FPGA for DFA')
panFpgaPkt = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFpgaPkt.setStatus('current')
if mibBuilder.loadTexts: panFpgaPkt.setDescription('The packets held because of requests to FPGA')
panGlobalCountersDOSCounters = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8))
if mibBuilder.loadTexts: panGlobalCountersDOSCounters.setStatus('current')
if mibBuilder.loadTexts: panGlobalCountersDOSCounters.setDescription('Sub-tree for Global DOS counters')
panGlobalCountersDropCounters = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 9))
if mibBuilder.loadTexts: panGlobalCountersDropCounters.setStatus('current')
if mibBuilder.loadTexts: panGlobalCountersDropCounters.setDescription('Sub-tree for Global Drop counters')
panGlobalCountersIPFragmentationCounters = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 10))
if mibBuilder.loadTexts: panGlobalCountersIPFragmentationCounters.setStatus('current')
if mibBuilder.loadTexts: panGlobalCountersIPFragmentationCounters.setDescription('Sub-tree for Global IPFragmentation counters')
panGlobalCountersTCPState = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 11))
if mibBuilder.loadTexts: panGlobalCountersTCPState.setStatus('current')
if mibBuilder.loadTexts: panGlobalCountersTCPState.setDescription('Sub-tree for Global TCPState counters')
panFlowDosAgMaxSessLimit = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosAgMaxSessLimit.setStatus('current')
if mibBuilder.loadTexts: panFlowDosAgMaxSessLimit.setDescription('Session limit reached for aggregate profile, drop session')
panFlowDosBlkNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosBlkNumEntries.setStatus('current')
if mibBuilder.loadTexts: panFlowDosBlkNumEntries.setDescription('Number of entries in DOS block table')
panFlowDosClMaxSessLimit = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosClMaxSessLimit.setStatus('current')
if mibBuilder.loadTexts: panFlowDosClMaxSessLimit.setDescription('Session limit reached for classified profile, drop session')
panFlowDosClSyncookieAckErr = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosClSyncookieAckErr.setStatus('current')
if mibBuilder.loadTexts: panFlowDosClSyncookieAckErr.setDescription('TCP SYN cookies: Invalid ACKs received, classified profile')
panFlowDosClSyncookieAckRcv = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosClSyncookieAckRcv.setStatus('current')
if mibBuilder.loadTexts: panFlowDosClSyncookieAckRcv.setDescription('TCP SYN cookies: ACKs to cookies received, classified profile')
panFlowDosClSyncookieBlkDur = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosClSyncookieBlkDur.setStatus('current')
if mibBuilder.loadTexts: panFlowDosClSyncookieBlkDur.setDescription('Packets dropped: Flagged for blocking and under block duration for cl')
panFlowDosClSyncookieMax = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosClSyncookieMax.setStatus('current')
if mibBuilder.loadTexts: panFlowDosClSyncookieMax.setDescription('Packet dropped: SYN cookies maximum threshold reached, classified pro')
panFlowDosClSyncookieSent = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosClSyncookieSent.setStatus('current')
if mibBuilder.loadTexts: panFlowDosClSyncookieSent.setDescription('TCP SYN cookies: cookies sent, classified profile')
panFlowMeterVsysThrottle = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowMeterVsysThrottle.setStatus('current')
if mibBuilder.loadTexts: panFlowMeterVsysThrottle.setDescription('Session metering: sessions throttled by vsys configuration')
panFlowPolicyDeny = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowPolicyDeny.setStatus('current')
if mibBuilder.loadTexts: panFlowPolicyDeny.setDescription('Session setup: denied by policy')
panFlowPolicyNat = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowPolicyNat.setStatus('current')
if mibBuilder.loadTexts: panFlowPolicyNat.setDescription('Session setup: source NAT IP/port allocation error')
panFlowScanDrop = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowScanDrop.setStatus('current')
if mibBuilder.loadTexts: panFlowScanDrop.setDescription('Session setup: denied by scan detection')
panFlowDosDropIpBlocked = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosDropIpBlocked.setStatus('current')
if mibBuilder.loadTexts: panFlowDosDropIpBlocked.setDescription('Packets dropped: Flagged for blocking and under block duration by oth')
panFlowDosRedIcmp = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosRedIcmp.setStatus('current')
if mibBuilder.loadTexts: panFlowDosRedIcmp.setDescription("Packets dropped: Zone protection protocol 'icmp' RED")
panFlowDosRedIcmp6 = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosRedIcmp6.setStatus('current')
if mibBuilder.loadTexts: panFlowDosRedIcmp6.setDescription("Packets dropped: Zone protection protocol 'icmpv6' RED")
panFlowDosRedIp = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosRedIp.setStatus('current')
if mibBuilder.loadTexts: panFlowDosRedIp.setDescription("Packets dropped: Zone protection protocol 'other-ip' RED")
panFlowDosRedTcp = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosRedTcp.setStatus('current')
if mibBuilder.loadTexts: panFlowDosRedTcp.setDescription("Packets dropped: Zone protection protocol 'tcp-syn' RED")
panFlowDosRedUdp = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosRedUdp.setStatus('current')
if mibBuilder.loadTexts: panFlowDosRedUdp.setDescription("Packets dropped: Zone protection protocol 'udp' RED")
panFlowDosRuleAgBlkDur = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosRuleAgBlkDur.setStatus('current')
if mibBuilder.loadTexts: panFlowDosRuleAgBlkDur.setDescription('Packets dropped: Flagged for blocking and under block duration for ag')
panFlowDosRuleAgRedAct = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosRuleAgRedAct.setStatus('current')
if mibBuilder.loadTexts: panFlowDosRuleAgRedAct.setDescription('Packets dropped: Activate aggregate RED threshold reached, random ear')
panFlowDosRuleAgRedMax = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosRuleAgRedMax.setStatus('current')
if mibBuilder.loadTexts: panFlowDosRuleAgRedMax.setDescription('Packets dropped: Maximal aggregate RED threshold reached')
panFlowDosRuleDeny = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosRuleDeny.setStatus('current')
if mibBuilder.loadTexts: panFlowDosRuleDeny.setDescription('Packets dropped: Denied action by DoS policy')
panFlowDosRuleDrop = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosRuleDrop.setStatus('current')
if mibBuilder.loadTexts: panFlowDosRuleDrop.setDescription('Packets dropped: Rate limited or IP blocked')
panFlowDosRuleDropAggr = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosRuleDropAggr.setStatus('current')
if mibBuilder.loadTexts: panFlowDosRuleDropAggr.setDescription('Packets dropped: due to aggregate rate limiting')
panFlowDosRuleDropClBlkDur = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosRuleDropClBlkDur.setStatus('current')
if mibBuilder.loadTexts: panFlowDosRuleDropClBlkDur.setDescription('Packets dropped: Flagged for blocking and under block duration for cl')
panFlowDosRuleDropClRedAct = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosRuleDropClRedAct.setStatus('current')
if mibBuilder.loadTexts: panFlowDosRuleDropClRedAct.setDescription('Packets dropped: Activate classified RED threshold reached, random ea')
panFlowDosRuleDropClRedMax = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosRuleDropClRedMax.setStatus('current')
if mibBuilder.loadTexts: panFlowDosRuleDropClRedMax.setDescription('Packets dropped: Maximal classified RED threshold reached')
panFlowDosRuleDropClassified = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosRuleDropClassified.setStatus('current')
if mibBuilder.loadTexts: panFlowDosRuleDropClassified.setDescription('Packets dropped: due to classified rate limiting')
panFlowDosSyncookieBlkDur = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosSyncookieBlkDur.setStatus('current')
if mibBuilder.loadTexts: panFlowDosSyncookieBlkDur.setDescription('Packets dropped: Flagged for blocking and under block duration for ag')
panFlowDosSyncookieMax = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosSyncookieMax.setStatus('current')
if mibBuilder.loadTexts: panFlowDosSyncookieMax.setDescription('Packet dropped: SYN cookies maximum threshold reached, aggregate prof')
panFlowDosZoneRedAct = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosZoneRedAct.setStatus('current')
if mibBuilder.loadTexts: panFlowDosZoneRedAct.setDescription('Packets dropped: Activate zone RED threshold reached, random early dr')
panFlowDosZoneRedMax = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 8, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowDosZoneRedMax.setStatus('current')
if mibBuilder.loadTexts: panFlowDosZoneRedMax.setDescription('Packets dropped: Maximal zone RED threshold reached')
panFlowFwdL3TtlZero = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 9, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowFwdL3TtlZero.setStatus('current')
if mibBuilder.loadTexts: panFlowFwdL3TtlZero.setDescription('Packets dropped: IP TTL reaches zero')
panFlowMeterHostThrottle = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 9, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowMeterHostThrottle.setStatus('current')
if mibBuilder.loadTexts: panFlowMeterHostThrottle.setDescription('Session metering: sessions throttled by management session threshold')
panFlowHostServiceDeny = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 9, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowHostServiceDeny.setStatus('current')
if mibBuilder.loadTexts: panFlowHostServiceDeny.setDescription('Device management session denied')
panFlowHostServiceUnknown = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 9, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowHostServiceUnknown.setStatus('current')
if mibBuilder.loadTexts: panFlowHostServiceUnknown.setDescription('Session discarded: unknown application to control plane')
panPktAllocFailure = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 9, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panPktAllocFailure.setStatus('current')
if mibBuilder.loadTexts: panPktAllocFailure.setDescription('Packet allocation error')
panPktAllocFailureCos = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 9, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panPktAllocFailureCos.setStatus('current')
if mibBuilder.loadTexts: panPktAllocFailureCos.setDescription('Packet allocation error due to QoS control')
panSessionDiscard = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 9, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panSessionDiscard.setStatus('current')
if mibBuilder.loadTexts: panSessionDiscard.setDescription('Session set to discard by security policy check')
panFlowIpfragFragErr = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 10, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowIpfragFragErr.setStatus('current')
if mibBuilder.loadTexts: panFlowIpfragFragErr.setDescription('Packet dropped: IP fragmentation error')
panFlowIpfragRecv = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 10, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowIpfragRecv.setStatus('current')
if mibBuilder.loadTexts: panFlowIpfragRecv.setDescription('IP fragments received')
panTcpAllocWqeFailed = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 11, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panTcpAllocWqeFailed.setStatus('current')
if mibBuilder.loadTexts: panTcpAllocWqeFailed.setDescription('wqe allocation failure in tcp')
panTcpDeny = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 11, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panTcpDeny.setStatus('current')
if mibBuilder.loadTexts: panTcpDeny.setDescription('session denied because of failure in tcp reassembly')
panTcpDropOutOfWnd = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 11, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panTcpDropOutOfWnd.setStatus('current')
if mibBuilder.loadTexts: panTcpDropOutOfWnd.setDescription('out-of-window packets dropped')
panTcpDropPacket = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 11, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panTcpDropPacket.setStatus('current')
if mibBuilder.loadTexts: panTcpDropPacket.setDescription('packets dropped because of failure in tcp reassembly')
panFlowActionClose = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 11, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowActionClose.setStatus('current')
if mibBuilder.loadTexts: panFlowActionClose.setDescription('TCP sessions closed via injecting RST')
panFlowActionReset = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 11, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowActionReset.setStatus('current')
if mibBuilder.loadTexts: panFlowActionReset.setDescription('TCP clients reset via responding RST')
panFlowTcpNonSyn = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 11, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panFlowTcpNonSyn.setStatus('current')
if mibBuilder.loadTexts: panFlowTcpNonSyn.setDescription('Non-SYN TCP packets without session match')
panTcpExceedSegLimit = MibScalar((1, 3, 6, 1, 4, 1, 25461, 2, 1, 2, 1, 19, 11, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panTcpExceedSegLimit.setStatus('current')
if mibBuilder.loadTexts: panTcpExceedSegLimit.setDescription('packets dropped due to the limitation on global tcp out-of-order pack')
mibBuilder.exportSymbols("PAN-COMMON-MIB", panFlowDosRuleAgRedMax=panFlowDosRuleAgRedMax, panFlowDosRedIp=panFlowDosRedIp, panCommonMibModule=panCommonMibModule, panFlowDosRuleDropClBlkDur=panFlowDosRuleDropClBlkDur, panFlowIpfragFragErr=panFlowIpfragFragErr, panMgmt=panMgmt, panSysHAMode=panSysHAMode, panSessionActiveSslProxy=panSessionActiveSslProxy, panLcStat=panLcStat, panSysSerialNumber=panSysSerialNumber, panFlowDosRuleDropClRedMax=panFlowDosRuleDropClRedMax, panGlobalCountersTCPState=panGlobalCountersTCPState, panLcDiskUsageEntry=panLcDiskUsageEntry, panAhoSw=panAhoSw, panFlowDosRedUdp=panFlowDosRedUdp, panFlowMeterHostThrottle=panFlowMeterHostThrottle, panLcLogDurationSystem=panLcLogDurationSystem, panSysHAPeerState=panSysHAPeerState, panFlowDosRuleDrop=panFlowDosRuleDrop, panGPGWUtilizationMaxTunnels=panGPGWUtilizationMaxTunnels, panGPGatewayUtilization=panGPGatewayUtilization, panVsysName=panVsysName, panSession=panSession, panLcLogDurationThsum=panLcLogDurationThsum, panSysUrlFilteringVersion=panSysUrlFilteringVersion, panTcpAllocWqeFailed=panTcpAllocWqeFailed, panVsysMaxSessions=panVsysMaxSessions, panSysSwVersion=panSysSwVersion, panMgmtPanorama2Connected=panMgmtPanorama2Connected, panLcDiskUsage=panLcDiskUsage, panFlowPolicyNat=panFlowPolicyNat, panFlowDosSyncookieBlkDur=panFlowDosSyncookieBlkDur, panFlowActionReset=panFlowActionReset, panFlowScanDrop=panFlowScanDrop, panFlowDosZoneRedMax=panFlowDosZoneRedMax, panLcLogDurationAppstat=panLcLogDurationAppstat, panCommonEventEventsV2=panCommonEventEventsV2, panLcLogDurationTraffic=panLcLogDurationTraffic, panFlowDosSyncookieMax=panFlowDosSyncookieMax, panCommonEvents=panCommonEvents, panSysAvVersion=panSysAvVersion, panSysWildfirePrivateCloudVersion=panSysWildfirePrivateCloudVersion, panTcpDropPacket=panTcpDropPacket, panVsysEntry=panVsysEntry, panSessionSslProxyUtilization=panSessionSslProxyUtilization, panFlowDosZoneRedAct=panFlowDosZoneRedAct, panTcpDeny=panTcpDeny, panPktAllocFailure=panPktAllocFailure, panMSeriesMode=panMSeriesMode, panDfaFpga=panDfaFpga, panChassis=panChassis, panLcIsRedundancyMember=panLcIsRedundancyMember, panTcpDropOutOfWnd=panTcpDropOutOfWnd, panDfaSw=panDfaSw, panLcLogDurationEvent=panLcLogDurationEvent, panFlowMeterVsysThrottle=panFlowMeterVsysThrottle, panSessionActive=panSessionActive, panSysThreatVersion=panSysThreatVersion, panFlowDosRuleDropClassified=panFlowDosRuleDropClassified, panLcLogRate=panLcLogRate, panPktAllocFailureCos=panPktAllocFailureCos, panLcLogDurationThreat=panLcLogDurationThreat, panFlowDosClSyncookieAckRcv=panFlowDosClSyncookieAckRcv, panGlobalCountersIPFragmentationCounters=panGlobalCountersIPFragmentationCounters, panAhoFpga=panAhoFpga, panGlobalCountersDropCounters=panGlobalCountersDropCounters, panGPGWUtilizationPct=panGPGWUtilizationPct, panFlowTcpNonSyn=panFlowTcpNonSyn, panFlowDosDropIpBlocked=panFlowDosDropIpBlocked, panSessionActiveUdp=panSessionActiveUdp, panCommonEventDescr=panCommonEventDescr, panTcpExceedSegLimit=panTcpExceedSegLimit, panVsysSessionUtilizationPct=panVsysSessionUtilizationPct, panLcLogDurationUserid=panLcLogDurationUserid, panHaPathmonSent=panHaPathmonSent, panFlowDosRedTcp=panFlowDosRedTcp, PYSNMP_MODULE_ID=panCommonMibModule, panSysHwVersion=panSysHwVersion, panLcLogDurationHipmatch=panLcLogDurationHipmatch, panSysVpnClientVersion=panSysVpnClientVersion, panFlowDosClSyncookieMax=panFlowDosClSyncookieMax, panSysTimeZoneOffset=panSysTimeZoneOffset, panMgmtPanoramaConnected=panMgmtPanoramaConnected, panGlobalProtect=panGlobalProtect, panVsysTable=panVsysTable, panFlowDosClSyncookieSent=panFlowDosClSyncookieSent, panSessionMax=panSessionMax, panCommonEventObjs=panCommonEventObjs, panFlowDosAgMaxSessLimit=panFlowDosAgMaxSessLimit, panFlowHostServiceAllow=panFlowHostServiceAllow, panSysWildfireVersion=panSysWildfireVersion, panSessionUtilization=panSessionUtilization, panLcDiskUsageTable=panLcDiskUsageTable, panFlowHostServiceDeny=panFlowHostServiceDeny, panSessionActiveICMP=panSessionActiveICMP, panCommonConfMib=panCommonConfMib, panVsysId=panVsysId, panFlowActionClose=panFlowActionClose, panLcDiskUsageId=panLcDiskUsageId, panSysAppVersion=panSysAppVersion, panFlowDosRedIcmp6=panFlowDosRedIcmp6, panCommonEventLog=panCommonEventLog, panFlowIpfragRecv=panFlowIpfragRecv, panChassisType=panChassisType, panFlowDosClMaxSessLimit=panFlowDosClMaxSessLimit, panSysUrlFilteringDatabase=panSysUrlFilteringDatabase, panCommonObjs=panCommonObjs, panSessionActiveTcp=panSessionActiveTcp, panLcLogDuration=panLcLogDuration, panFlowDosClSyncookieBlkDur=panFlowDosClSyncookieBlkDur, panSessionDiscard=panSessionDiscard, panSys=panSys, panFlowDosRedIcmp=panFlowDosRedIcmp, panFlowFwdL3TtlZero=panFlowFwdL3TtlZero, panSysOpswatDatafileVersion=panSysOpswatDatafileVersion, panSysDaylightSaving=panSysDaylightSaving, panFlowPolicyDeny=panFlowPolicyDeny, panVsysActiveSessions=panVsysActiveSessions, panSysGlobalProtectClientVersion=panSysGlobalProtectClientVersion, panFlowDosClSyncookieAckErr=panFlowDosClSyncookieAckErr, panFlowDosBlkNumEntries=panFlowDosBlkNumEntries, panGlobalCounters=panGlobalCounters, panLcLogDurationConfig=panLcLogDurationConfig, panFlowHostServiceUnknown=panFlowHostServiceUnknown, panCommonEventEvents=panCommonEventEvents, panFlowDosRuleDeny=panFlowDosRuleDeny, panGPGWUtilizationActiveTunnels=panGPGWUtilizationActiveTunnels, panFlowDosRuleAgRedAct=panFlowDosRuleAgRedAct, panLcLogDurationTrsum=panLcLogDurationTrsum, panFpgaPkt=panFpgaPkt, panFlowDosRuleDropClRedAct=panFlowDosRuleDropClRedAct, panFlowDosRuleDropAggr=panFlowDosRuleDropAggr, panLogCollector=panLogCollector, panLcLogDurationAlarm=panLcLogDurationAlarm, panGlobalCountersDOSCounters=panGlobalCountersDOSCounters, panFlowDosRuleAgBlkDur=panFlowDosRuleAgBlkDur, panSysHAState=panSysHAState)
