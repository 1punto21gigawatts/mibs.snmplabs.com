#
# PySNMP MIB module DLINK-3100-QOS-CLI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DLINK-3100-QOS-CLI-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:48:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
rnd, Percents = mibBuilder.importSymbols("DLINK-3100-MIB", "rnd", "Percents")
StatisticsDPType, StatisticsClearActionType = mibBuilder.importSymbols("DLINK-3100-POLICY-MIB", "StatisticsDPType", "StatisticsClearActionType")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, iso, Gauge32, TimeTicks, Unsigned32, Counter64, ModuleIdentity, ObjectIdentity, NotificationType, MibIdentifier, Integer32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "iso", "Gauge32", "TimeTicks", "Unsigned32", "Counter64", "ModuleIdentity", "ObjectIdentity", "NotificationType", "MibIdentifier", "Integer32", "Counter32")
RowStatus, TruthValue, RowPointer, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "RowPointer", "DisplayString", "TextualConvention")
rlQosCliMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88))
rlQosCliMib.setRevisions(('2006-02-12 00:00', '2006-02-12 00:00', '2005-03-14 00:00', '2005-02-07 00:00', '2005-01-27 00:00', '2004-11-15 00:00', '2003-09-29 00:00', '2003-09-21 00:00', '2005-04-17 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rlQosCliMib.setRevisionsDescriptions(('The private MIB module definition for Quality Of Service CLI in DLINK-3100 devices.', 'Editorial changes to support new MIB compilers.', 'Add rlQosPortRateLimitStatus,rlQosCirPortRateLimit, rlQosCbsPortRateLimit to rlQosIfPolicyTable', 'Add vpt,ether-type,tcp-flags,icmp-type,icmp-code,igmp-type to ClassTupleType Add mac-Offset,ip-ICMP,ip-IGMP To AceObjectType Add vpt,ethertype To ClassOffsetType', 'Add new advanced action : trustCosDscp', 'Add DSCP to Queue Default map table.', 'Add textual convention to QosObjectMode (service).', 'Added this MODULE-IDENTITY clause, changed IMPORT, removed ranges in SEQUENCE elements, changed access of rlQosCliQosMode, rlQosCliBasicModeCfg and rlQosMaxNumOfAce.', 'Added rlQosDscpToDpTable',))
if mibBuilder.loadTexts: rlQosCliMib.setLastUpdated('200604040000Z')
if mibBuilder.loadTexts: rlQosCliMib.setOrganization('Dlink, Inc.')
if mibBuilder.loadTexts: rlQosCliMib.setContactInfo('www.dlink.com')
if mibBuilder.loadTexts: rlQosCliMib.setDescription('Added: StatisticsCntrNumOfBitsType StatisticsCntrType rlQosStatistics rlQosPortPolicyStatisticsTable rlQosSinglePolicerStatisticsTable rlQosAggregatePolicerStatisticsTable rlQosOutQueueStatisticsTable rlQosGlobalStatisticsCntrsTable.')
class ClassOffsetType(TextualConvention, Integer32):
    description = 'Specifies one of 6 offset types: 1- Absolute-start of the packet. 2- Layer 2-start of MAC header. 3- MPLS-start of MPLS header. 4- Layer 3-start of layer 3 header. 5- Layer 4-start of layer 4 header. 6- Layer 5-after TCP/UDP header. 7- VLAN. 8- input device port. 9- input device port. 10-VPT. 11-EtherType. 12-innerVlan. 13-Layer 3 IPv6 - start of layer 3 IPv6 header'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("packetStart", 1), ("layer2-start", 2), ("mpls-start", 3), ("layer3-start", 4), ("layer4-start", 5), ("layer5-start", 6), ("vlan", 7), ("in-port", 8), ("out-port", 9), ("vpt", 10), ("ethertype", 11), ("inner-vlan", 12), ("layer3-ipv6-start", 13))

class ClassTupleType(TextualConvention, Integer32):
    description = 'Specifies one of Tuple types '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))
    namedValues = NamedValues(("protocol", 1), ("ip-src", 2), ("ip-dest", 3), ("dscp", 4), ("ip-precedence", 5), ("udp-port-src", 6), ("udp-port-dest", 7), ("tcp-port-src", 8), ("tcp-port-dest", 9), ("mac-src", 10), ("mac-dest", 11), ("vlan", 12), ("in-port", 13), ("out-port", 14), ("general", 15), ("vpt", 16), ("ether-type", 17), ("tcp-flags", 18), ("icmp-type", 19), ("icmp-code", 20), ("igmp-type", 21), ("inner-vlan", 22), ("ipv6-src", 23), ("ipv6-dest", 24))

class AceActionType(TextualConvention, Integer32):
    description = 'Specifies one of 3 ACE Actions: 1- Permit- permit to the traffic that define by the parameters. 2- Deny- deny the traffic that define by the parameter. 3- Deny- deny the traffic that define by the parameters and disable the port.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("permit", 1), ("deny", 2), ("deny-DisablePort", 3))

class AceObjectType(TextualConvention, Integer32):
    description = 'Specifies one of 13 ACE types: 1- IP ACE. 2- IP-TCP ACE. 3- IP-UDP ACE. 4- IP-offset ACE. 5- MAC ACE. 6- MAC-offset ACE. 7- IP-ICMP ACE. 8- IP-IGMP ACE. 9- IPv6 ACE. 10- IPv6-TCP ACE. 11- IPv6-UDP ACE. 12- IPv6-offset ACE. 13- IPv6-ICMP ACE.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("ip", 1), ("ip-TCP", 2), ("ip-UDP", 3), ("ip-Offset", 4), ("mac", 5), ("mac-Offset", 6), ("ip-ICMP", 7), ("ip-IGMP", 8), ("ipv6", 9), ("ipv6-TCP", 10), ("ipv6-UDP", 11), ("ipv6-Offset", 12), ("ipv6-ICMP", 13))

class AclObjectType(TextualConvention, Integer32):
    description = 'Specifies one of 3 ACL types: 1- MAC ACL. 2- IPv4 ACL. 3- IPv6 ACL.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("mac", 1), ("ip", 2), ("ipv6", 3))

class ClassMapType(TextualConvention, Integer32):
    description = 'Specifies one of 2 Class-map types: 1- Match all. logical and between all statements. 2- Match any. logical or between all statements.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("matchAll", 1), ("matchAny", 2))

class ClassMapAction(TextualConvention, Integer32):
    description = 'Specifies one of 8 Class-map actios: 1- no action. 2- Mark IP-Precedence. 3- Mark DSCP. 4- Set Egress queueu 5- Mark VPT 6- Choose queue by the VPT. 7- Choose queue by the DSCP. 8- Choose queue by the TCP/UDP port.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("none", 1), ("setIP-Precedence", 2), ("setDSCP", 3), ("setQueue", 4), ("setCos", 5), ("trustCos", 6), ("trustDSCP", 7), ("trustTCP-UDPport", 8), ("trustCosDscp", 9))

class PolicerType(TextualConvention, Integer32):
    description = 'Specifies one of 3 Policer types: 1- Single policer only per one class map. 2- Aggregate policer can be applied to several class maps. 3- Cascade policer.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("single", 1), ("aggregate", 2), ("cascade", 3))

class PolicerAction(TextualConvention, Integer32):
    description = 'Specifies one of 4 Policer Action: 1- No Action 2- Drop out of profile packets. 3- Remark out of profile packets. 4- Remark to explicit value out of profile packets 5- this policer is part of cascade chain'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("none", 1), ("drop", 2), ("remark", 3), ("explicit-remark", 4), ("cascadePointer", 5))

class QosObjectMode(TextualConvention, Integer32):
    description = 'Specifies one of 3 QoS mode: 1- disable no QoS on the system 2- Basic Qos mode only trust mode with ACL are enabled. 3- Advance mode all Qos option are enabled. 4- Service Mode all Qos option are enabled only in service mode configuration'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("disable", 1), ("basic", 2), ("advance", 3), ("service", 4))

class QosObjectBasicMode(TextualConvention, Integer32):
    description = 'Specifies one of 6 QoS Basic mode: 1- none. means that only ACL can be applied. 2- 802.1p. queue is set by the VPT field. 3- DSCP. queue is set by the DSCP field 4- DSCP-Mutation. the DSCP mutate in the ingress and then the queue is set by the DSCP 5- TCP/UDP. the queue is set by the port number '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("none", 1), ("vpt", 2), ("dscp", 3), ("dscp-mutation", 4), ("tcp-udp", 5))

class BinaryStatus(TextualConvention, Integer32):
    description = 'Specifies Disable or enable.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("disable", 1), ("enable", 2))

class QueueType(TextualConvention, Integer32):
    description = 'Queue type Ef or WRR.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ef", 1), ("wrr", 2))

class AclDefaultAction(TextualConvention, Integer32):
    description = 'Default action when the ACL reach end point.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("deny-all", 1), ("forward-all", 2))

class InterfaceType(TextualConvention, Integer32):
    description = 'Interface type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("vlan", 1), ("port", 2))

class StatisticsCntrNumOfBitsType(TextualConvention, Integer32):
    description = 'The counter can be of different sizes - 32 bit, 48 bit, 64 bit. Maximum is 64.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(32, 48, 64))
    namedValues = NamedValues(("uint32", 32), ("uint48", 48), ("uint64", 64))

class StatisticsCntrType(TextualConvention, Integer32):
    description = 'The counter can be of different types, depends on actions adhered to rules that the counter is working on.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("statisticsCntrTypeSetDSCP", 1), ("statisticsCntrTypeDeny", 2))

class RlQosTimeBasedAclWeekPeriodicList(TextualConvention, Bits):
    description = 'Bitmap that includes days of week. Each bit in the bitmap associated with corresponding day of the week.'
    status = 'current'
    namedValues = NamedValues(("monday", 0), ("tuesday", 1), ("wednesday", 2), ("thursday", 3), ("friday", 4), ("saturday", 5), ("sunday", 6))

rlQosCliQosMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 1), QosObjectMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosCliQosMode.setStatus('current')
if mibBuilder.loadTexts: rlQosCliQosMode.setDescription('This scalar define in which mode the system will work: basic , advance or none.')
rlQosCliBasicModeCfg = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 2), QosObjectBasicMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosCliBasicModeCfg.setStatus('current')
if mibBuilder.loadTexts: rlQosCliBasicModeCfg.setDescription('This scalar define in which Basic mode the system will work:802.1p or DSCP or DSCP-Mutation or TCP/UDP or none.')
rlQosMaxNumOfAce = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosMaxNumOfAce.setStatus('current')
if mibBuilder.loadTexts: rlQosMaxNumOfAce.setDescription('This scalar define in which Basic mode the system will work:802.1p or DSCP or DSCP-Mutation or TCP/UDP or none.')
rlQosOffsetTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 4), )
if mibBuilder.loadTexts: rlQosOffsetTable.setStatus('deprecated')
if mibBuilder.loadTexts: rlQosOffsetTable.setDescription('This table specifies Offset Table information')
rlQosOffsetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 4, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosOffsetIndex"))
if mibBuilder.loadTexts: rlQosOffsetEntry.setStatus('deprecated')
if mibBuilder.loadTexts: rlQosOffsetEntry.setDescription('Each entry in this table describes one classifier field. The information includes: Offset Type the offset the mask and the Pattern. if the type is vlan then the value will be the vlan tag. if the Type is in/out port it will be the device in/out port. The index is sequential integer represent by rlQosOffsetIndex')
rlQosOffsetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: rlQosOffsetIndex.setStatus('deprecated')
if mibBuilder.loadTexts: rlQosOffsetIndex.setDescription('An arbitrary incremental Index for the offset table.')
rlQosOffsetType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 4, 1, 2), ClassOffsetType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosOffsetType.setStatus('deprecated')
if mibBuilder.loadTexts: rlQosOffsetType.setDescription('Start of the offset.')
rlQosOffsetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 4, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosOffsetValue.setStatus('deprecated')
if mibBuilder.loadTexts: rlQosOffsetValue.setDescription('The Offset value.')
rlQosOffsetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosOffsetMask.setStatus('deprecated')
if mibBuilder.loadTexts: rlQosOffsetMask.setDescription('Define which bit to be extracted from the offset.')
rlQosOffsetPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosOffsetPattern.setStatus('deprecated')
if mibBuilder.loadTexts: rlQosOffsetPattern.setDescription('The value to match too.')
rlQosOffsetTuplePointer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 4, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosOffsetTuplePointer.setStatus('deprecated')
if mibBuilder.loadTexts: rlQosOffsetTuplePointer.setDescription('Pointer for the relevant Tuple.')
rlQosOffsetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 4, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosOffsetStatus.setStatus('deprecated')
if mibBuilder.loadTexts: rlQosOffsetStatus.setDescription('The status of a table entry. It is used to delete/Add an entry from this table.')
rlQosTupleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 5), )
if mibBuilder.loadTexts: rlQosTupleTable.setStatus('current')
if mibBuilder.loadTexts: rlQosTupleTable.setDescription('This table specifies Tuple Table information')
rlQosTupleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 5, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosTupleIndex"))
if mibBuilder.loadTexts: rlQosTupleEntry.setStatus('current')
if mibBuilder.loadTexts: rlQosTupleEntry.setDescription('Each entry in this table describes one Tuple. The information includes: Tuple Type and the Tuples values. The index is sequential integer represent by rlQosTupleIndex')
rlQosTupleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: rlQosTupleIndex.setStatus('current')
if mibBuilder.loadTexts: rlQosTupleIndex.setDescription('An arbitrary incremental Index for the offset table.')
rlQosTupleType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 5, 1, 2), ClassTupleType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosTupleType.setStatus('current')
if mibBuilder.loadTexts: rlQosTupleType.setDescription('Start of the offset.')
rlQosTupleValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 5, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosTupleValue1.setStatus('current')
if mibBuilder.loadTexts: rlQosTupleValue1.setDescription('The Tuple no.1 value can be regular integer values only.')
rlQosTupleValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosTupleValue2.setStatus('current')
if mibBuilder.loadTexts: rlQosTupleValue2.setDescription('The Tuple no.2 value can be IPv4/IPv6/MAC address or protocol number with mask')
rlQosTupleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosTupleStatus.setStatus('current')
if mibBuilder.loadTexts: rlQosTupleStatus.setDescription('The status of a table entry. It is used to delete/Add an entry from this table.')
rlQosAceTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 6), )
if mibBuilder.loadTexts: rlQosAceTable.setStatus('current')
if mibBuilder.loadTexts: rlQosAceTable.setDescription('This table specifies ACE table information')
rlQosAceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 6, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosAceIndex"))
if mibBuilder.loadTexts: rlQosAceEntry.setStatus('current')
if mibBuilder.loadTexts: rlQosAceEntry.setDescription("Each entry in this table describes one Classifier Element. The information includes: Action the ACE's Type the up to 8 tuples pointers. The index is sequential integer represent by rlQosAceIndex")
rlQosAceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: rlQosAceIndex.setStatus('current')
if mibBuilder.loadTexts: rlQosAceIndex.setDescription('An arbitrary incremental Index for the ACE table.')
rlQosAceAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 6, 1, 2), AceActionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceAction.setStatus('current')
if mibBuilder.loadTexts: rlQosAceAction.setDescription('ACE Action to take.')
rlQosAceType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 6, 1, 3), AceObjectType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceType.setStatus('current')
if mibBuilder.loadTexts: rlQosAceType.setDescription('ACE Type')
rlQosAceTuple1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 6, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTuple1.setStatus('current')
if mibBuilder.loadTexts: rlQosAceTuple1.setDescription('ACE Tuple 1 pointer.')
rlQosAceTuple2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 6, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTuple2.setStatus('current')
if mibBuilder.loadTexts: rlQosAceTuple2.setDescription('ACE Tuple 1 pointer.')
rlQosAceTuple3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 6, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTuple3.setStatus('current')
if mibBuilder.loadTexts: rlQosAceTuple3.setDescription('ACE Tuple 1 pointer.')
rlQosAceTuple4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 6, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTuple4.setStatus('current')
if mibBuilder.loadTexts: rlQosAceTuple4.setDescription('ACE Tuple 1 pointer.')
rlQosAceTuple5 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 6, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTuple5.setStatus('current')
if mibBuilder.loadTexts: rlQosAceTuple5.setDescription('ACE Tuple 1 pointer.')
rlQosAceTuple6 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 6, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTuple6.setStatus('current')
if mibBuilder.loadTexts: rlQosAceTuple6.setDescription('ACE Tuple 1 pointer.')
rlQosAceTuple7 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 6, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTuple7.setStatus('current')
if mibBuilder.loadTexts: rlQosAceTuple7.setDescription('ACE Tuple 1 pointer.')
rlQosAceTuple8 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 6, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTuple8.setStatus('current')
if mibBuilder.loadTexts: rlQosAceTuple8.setDescription('ACE Tuple 1 pointer.')
rlQosAceAccount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 6, 1, 12), BinaryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceAccount.setStatus('current')
if mibBuilder.loadTexts: rlQosAceAccount.setDescription("ACE Accounting state. When set to 'enabled' than appropriate statistic's counter is provided for an ACE. For Broadcom ASICs this counter shows number of matched with ACE criteria packets. For Dlink ASICs TBD.")
rlQosAceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 6, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceStatus.setStatus('current')
if mibBuilder.loadTexts: rlQosAceStatus.setDescription('The status of a table entry. It is used to delete/Add an entry from this table.')
rlQosAclTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 7), )
if mibBuilder.loadTexts: rlQosAclTable.setStatus('current')
if mibBuilder.loadTexts: rlQosAclTable.setDescription('This table specifies ACL table information')
rlQosAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 7, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosAclIndex"))
if mibBuilder.loadTexts: rlQosAclEntry.setStatus('current')
if mibBuilder.loadTexts: rlQosAclEntry.setDescription('Each entry in this table describes one Classifier Element. The information includes: Action and the row status. The ACE pointer are in the ACL-ACE reference table. The index is sequential integer represent by rlQosAceIndex')
rlQosAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: rlQosAclIndex.setStatus('current')
if mibBuilder.loadTexts: rlQosAclIndex.setDescription('An arbitrary incremental Index for the ACE table.')
rlQosAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAclName.setStatus('current')
if mibBuilder.loadTexts: rlQosAclName.setDescription('Name ACL.')
rlQosAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 7, 1, 3), AclObjectType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAclType.setStatus('current')
if mibBuilder.loadTexts: rlQosAclType.setDescription('ACL Type.')
rlQosAclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 7, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAclStatus.setStatus('current')
if mibBuilder.loadTexts: rlQosAclStatus.setDescription('The status of a table entry. It is used to delete/Add an entry from this table.')
rlQosAclAceRefTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 8), )
if mibBuilder.loadTexts: rlQosAclAceRefTable.setStatus('current')
if mibBuilder.loadTexts: rlQosAclAceRefTable.setDescription('This table specifies the ACE to ACL relationship.')
rlQosAclAceRefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 8, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosAclAceRefAcePointer"))
if mibBuilder.loadTexts: rlQosAclAceRefEntry.setStatus('current')
if mibBuilder.loadTexts: rlQosAclAceRefEntry.setDescription('Each entry in this table describes the relationship between ACE to ACL. Show which ACE include in one ACL. The index is the ACE pointer represent by rlQosAclAceRefAcePointer')
rlQosAclAceRefAcePointer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 8, 1, 1), Integer32())
if mibBuilder.loadTexts: rlQosAclAceRefAcePointer.setStatus('current')
if mibBuilder.loadTexts: rlQosAclAceRefAcePointer.setDescription('The Index is the ACE pointer')
rlQosAclAceRefAclPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 8, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAclAceRefAclPointer.setStatus('current')
if mibBuilder.loadTexts: rlQosAclAceRefAclPointer.setDescription('ACL index Pointer')
rlQosAclAceRefStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 8, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAclAceRefStatus.setStatus('current')
if mibBuilder.loadTexts: rlQosAclAceRefStatus.setDescription('The status of a table entry. It is used to delete/Add an entry from this table.')
rlQosClassMapTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 9), )
if mibBuilder.loadTexts: rlQosClassMapTable.setStatus('current')
if mibBuilder.loadTexts: rlQosClassMapTable.setDescription('This table specifies CCL table information')
rlQosClassMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 9, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosClassMapIndex"))
if mibBuilder.loadTexts: rlQosClassMapEntry.setStatus('current')
if mibBuilder.loadTexts: rlQosClassMapEntry.setDescription('Each entry in this table describes one Class Map Element. The information includes: Classes Name,Class Action, Policer pointer, and 1 match statements. The index is sequential integer represent by rlQosClassMapIndex')
rlQosClassMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 9, 1, 1), Integer32())
if mibBuilder.loadTexts: rlQosClassMapIndex.setStatus('current')
if mibBuilder.loadTexts: rlQosClassMapIndex.setDescription('Class Map Index')
rlQosClassMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosClassMapName.setStatus('current')
if mibBuilder.loadTexts: rlQosClassMapName.setDescription('Name of the Class Map.')
rlQosClassMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 9, 1, 3), ClassMapType().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosClassMapType.setStatus('current')
if mibBuilder.loadTexts: rlQosClassMapType.setDescription('Class map type')
rlQosClassMapAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 9, 1, 4), ClassMapAction().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosClassMapAction.setStatus('current')
if mibBuilder.loadTexts: rlQosClassMapAction.setDescription('Class Map Action.')
rlQosClassMapMarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 9, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosClassMapMarkValue.setStatus('current')
if mibBuilder.loadTexts: rlQosClassMapMarkValue.setDescription('Mark value when mark action has been chosen in Class Map Action field.')
rlQosClassMapPolicer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 9, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosClassMapPolicer.setStatus('current')
if mibBuilder.loadTexts: rlQosClassMapPolicer.setDescription('Policer pointer. 0-means no policer.')
rlQosClassMapMatch1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 9, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosClassMapMatch1.setStatus('current')
if mibBuilder.loadTexts: rlQosClassMapMatch1.setDescription('Match ACL 1 pointer.')
rlQosClassMapMatch2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 9, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosClassMapMatch2.setStatus('current')
if mibBuilder.loadTexts: rlQosClassMapMatch2.setDescription('Match ACL 2 pointer.')
rlQosClassMapMarkVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 9, 1, 9), BinaryStatus().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosClassMapMarkVlan.setStatus('current')
if mibBuilder.loadTexts: rlQosClassMapMarkVlan.setDescription("If 'enabled', than the classified traffic will be remarked with new VLAN id. If 'disabled' VLAN id is not changed.")
rlQosClassMapNewVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosClassMapNewVlan.setStatus('current')
if mibBuilder.loadTexts: rlQosClassMapNewVlan.setDescription("If rlQosClassMapMarkVlan 'enabled', than the classified traffic will be remarked with new VLAN id. The value of this field sets new VLAN id.")
rlQosClassMapNewPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 9, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosClassMapNewPort.setStatus('current')
if mibBuilder.loadTexts: rlQosClassMapNewPort.setDescription('If value not zero, than the classified traffic will be redirected to the new egress physical port. The value of this field sets new egress port.')
rlQosClassMapCopyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 9, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosClassMapCopyPort.setStatus('current')
if mibBuilder.loadTexts: rlQosClassMapCopyPort.setDescription('If value not zero, than the classified traffic will be copied to the desination copy port. The value of this field sets desination copy port.')
rlQosClassMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 9, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosClassMapStatus.setStatus('current')
if mibBuilder.loadTexts: rlQosClassMapStatus.setDescription('The status of a table entry. It is used to delete/Add an entry from this table.')
rlQosClassMapMatch3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 9, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosClassMapMatch3.setStatus('current')
if mibBuilder.loadTexts: rlQosClassMapMatch3.setDescription('Match ACL 3 pointer.')
rlQosPolicerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 10), )
if mibBuilder.loadTexts: rlQosPolicerTable.setStatus('current')
if mibBuilder.loadTexts: rlQosPolicerTable.setDescription('This table specifies All the Policers in the system Information')
rlQosPolicerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 10, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosPolicerIndex"))
if mibBuilder.loadTexts: rlQosPolicerEntry.setStatus('current')
if mibBuilder.loadTexts: rlQosPolicerEntry.setDescription('Each entry in this table describes one policer. The information includes: Policer name, Policer type, Committed Rate, Committed Burst, Out-of-Profile Action. The index is sequential integer represent by rlQosPolicerIndex')
rlQosPolicerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: rlQosPolicerIndex.setStatus('current')
if mibBuilder.loadTexts: rlQosPolicerIndex.setDescription('Policer Index.')
rlQosPolicerName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosPolicerName.setStatus('current')
if mibBuilder.loadTexts: rlQosPolicerName.setDescription('Name of the Policer.')
rlQosPolicerType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 10, 1, 3), PolicerType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosPolicerType.setStatus('current')
if mibBuilder.loadTexts: rlQosPolicerType.setDescription('Policer type')
rlQosPolicerCir = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 10, 1, 4), Unsigned32()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosPolicerCir.setStatus('current')
if mibBuilder.loadTexts: rlQosPolicerCir.setDescription('Committed rate value.')
rlQosPolicerCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 10, 1, 5), Unsigned32()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosPolicerCbs.setStatus('current')
if mibBuilder.loadTexts: rlQosPolicerCbs.setDescription('Committed rate Value.')
rlQosPolicerAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 10, 1, 6), PolicerAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosPolicerAction.setStatus('current')
if mibBuilder.loadTexts: rlQosPolicerAction.setDescription('Out of profile Action.')
rlQosPolicerCasPointerRemVal = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 10, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosPolicerCasPointerRemVal.setStatus('current')
if mibBuilder.loadTexts: rlQosPolicerCasPointerRemVal.setDescription('Pointer to use whan the type is cascade policer. 0-means no cascade policer. It can also be Remark value in case of explicit remark')
rlQosPolicerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 10, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosPolicerStatus.setStatus('current')
if mibBuilder.loadTexts: rlQosPolicerStatus.setDescription('The status of a table entry. It is used to delete/Add an entry from this table.')
rlQosPolicyMapTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 11), )
if mibBuilder.loadTexts: rlQosPolicyMapTable.setStatus('current')
if mibBuilder.loadTexts: rlQosPolicyMapTable.setDescription('This table specifies Policy Map Table Information')
rlQosPolicyMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 11, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosPolicyMapIndex"))
if mibBuilder.loadTexts: rlQosPolicyMapEntry.setStatus('current')
if mibBuilder.loadTexts: rlQosPolicyMapEntry.setDescription('Each entry in this table describes one policy map. The information includes: Index, Policy Map name, Up to 6 class map names. The index is sequential integer represent by rlQosPolicerIndex')
rlQosPolicyMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 11, 1, 1), Integer32())
if mibBuilder.loadTexts: rlQosPolicyMapIndex.setStatus('current')
if mibBuilder.loadTexts: rlQosPolicyMapIndex.setDescription('Policy map Index.')
rlQosPolicyMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosPolicyMapName.setStatus('current')
if mibBuilder.loadTexts: rlQosPolicyMapName.setDescription('Policy map Name.')
rlQosPolicyMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 11, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosPolicyMapStatus.setStatus('current')
if mibBuilder.loadTexts: rlQosPolicyMapStatus.setDescription('The status of a table entry. It is used to delete/Add an entry from this table.')
rlQosPolicyClassRefTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 12), )
if mibBuilder.loadTexts: rlQosPolicyClassRefTable.setStatus('current')
if mibBuilder.loadTexts: rlQosPolicyClassRefTable.setDescription('This table specifies The relationship between policy map to class map')
rlQosPolicyClassRefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 12, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosPolicyClassRefClassPointer"))
if mibBuilder.loadTexts: rlQosPolicyClassRefEntry.setStatus('current')
if mibBuilder.loadTexts: rlQosPolicyClassRefEntry.setDescription('Each entry in this table describes the connection between class-map entry to policy map by using pointers. The index is Class map pointer represent by rlQosPolicyClassRefClassPointer')
rlQosPolicyClassRefClassPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 12, 1, 1), Integer32())
if mibBuilder.loadTexts: rlQosPolicyClassRefClassPointer.setStatus('current')
if mibBuilder.loadTexts: rlQosPolicyClassRefClassPointer.setDescription('The Index is the Class-map pointer')
rlQosPolicyClassRefPolicyPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 12, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosPolicyClassRefPolicyPointer.setStatus('current')
if mibBuilder.loadTexts: rlQosPolicyClassRefPolicyPointer.setDescription('Policy map index Pointer')
rlQosPolicyClassRefStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 12, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosPolicyClassRefStatus.setStatus('current')
if mibBuilder.loadTexts: rlQosPolicyClassRefStatus.setDescription('The status of a table entry. It is used to delete/Add an entry from this table.')
rlQosIfPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13), )
if mibBuilder.loadTexts: rlQosIfPolicyTable.setStatus('current')
if mibBuilder.loadTexts: rlQosIfPolicyTable.setDescription('This table specifies for each interface the Policy Map attach to it')
rlQosIfPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlIfIndex"), (0, "DLINK-3100-QOS-CLI-MIB", "rlIfType"))
if mibBuilder.loadTexts: rlQosIfPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: rlQosIfPolicyEntry.setDescription('Each entry in this table describes what policy Map attached to specific Interface. The index is Interface Index represent by rlIfIndex and the interface type represent by rlIfType')
rlIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 1), Integer32())
if mibBuilder.loadTexts: rlIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlIfIndex.setDescription('Interface Index.')
rlIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 2), InterfaceType())
if mibBuilder.loadTexts: rlIfType.setStatus('current')
if mibBuilder.loadTexts: rlIfType.setDescription('Interface Type(vlan/port).')
rlQosIfPolicyMapPointerIn = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosIfPolicyMapPointerIn.setStatus('current')
if mibBuilder.loadTexts: rlQosIfPolicyMapPointerIn.setDescription('Policy map pointer Input.')
rlQosIfPolicyMapPointerOut = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosIfPolicyMapPointerOut.setStatus('current')
if mibBuilder.loadTexts: rlQosIfPolicyMapPointerOut.setDescription('Policy map pointer Output.')
rlQosIfTrustActive = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 5), BinaryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosIfTrustActive.setStatus('current')
if mibBuilder.loadTexts: rlQosIfTrustActive.setDescription('Interface Basic Mode Trust is active or not .')
rlQosPortShaperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 6), BinaryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosPortShaperStatus.setStatus('current')
if mibBuilder.loadTexts: rlQosPortShaperStatus.setDescription('If there is shaper on the port')
rlQosCirPortShaper = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 7), Integer32()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCirPortShaper.setStatus('current')
if mibBuilder.loadTexts: rlQosCirPortShaper.setDescription('The CIR for the port shaper. N/A when the shper is disabled')
rlQosCbsPortShaper = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 8), Integer32()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCbsPortShaper.setStatus('current')
if mibBuilder.loadTexts: rlQosCbsPortShaper.setDescription('The CBS for the port shaper. N/A when the shper is disabled')
rlQosIfProfilePointer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosIfProfilePointer.setStatus('current')
if mibBuilder.loadTexts: rlQosIfProfilePointer.setDescription('Interface Profile name pointer.')
rlQosQueueProfilePointer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosQueueProfilePointer.setStatus('current')
if mibBuilder.loadTexts: rlQosQueueProfilePointer.setDescription(' Queue Profile name pointer.')
rlQosQueueShapeProfilePointer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosQueueShapeProfilePointer.setStatus('current')
if mibBuilder.loadTexts: rlQosQueueShapeProfilePointer.setDescription(' Queue shape Profile pointer.')
rlQosAclDefaultAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 12), AclDefaultAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAclDefaultAction.setStatus('current')
if mibBuilder.loadTexts: rlQosAclDefaultAction.setDescription(' When one ACL is enterd then what to do for the last rull.')
rlQosIfPolicyMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosIfPolicyMapStatus.setStatus('current')
if mibBuilder.loadTexts: rlQosIfPolicyMapStatus.setDescription('The status of a table entry. It is used to delete/Add an entry from this table.')
rlQosIfAclIn = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosIfAclIn.setStatus('current')
if mibBuilder.loadTexts: rlQosIfAclIn.setDescription('Index of an ACL in the rlQosAclTable, which is applied to the ingress of an interface. 0 - means no ACL applied.')
rlQosIfAclOut = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosIfAclOut.setStatus('current')
if mibBuilder.loadTexts: rlQosIfAclOut.setDescription('Index of an ACL in the rlQosAclTable, which is applied to the egress of an interface. 0 - means no ACL applied.')
rlQosIfPolicerIn = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 16), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosIfPolicerIn.setStatus('current')
if mibBuilder.loadTexts: rlQosIfPolicerIn.setDescription('Index of an Policer in the rlQosPolicerTable, which is applied to the ingress of an interface. 0 - means no Policer applied.')
rlQosPortRateLimitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 17), BinaryStatus().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosPortRateLimitStatus.setStatus('current')
if mibBuilder.loadTexts: rlQosPortRateLimitStatus.setDescription('If there is Rate limit on the port')
rlQosCirPortRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 18), Integer32()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCirPortRateLimit.setStatus('current')
if mibBuilder.loadTexts: rlQosCirPortRateLimit.setDescription('The CIR for the port rate limit. N/A when the Rate limit is disabled')
rlQosCbsPortRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 19), Integer32()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCbsPortRateLimit.setStatus('current')
if mibBuilder.loadTexts: rlQosCbsPortRateLimit.setDescription('The CBS for the port Rate limit. N/A when the Rate limit is disabled')
rlQosIfIpv6AclIn = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 20), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosIfIpv6AclIn.setStatus('current')
if mibBuilder.loadTexts: rlQosIfIpv6AclIn.setDescription('Index of an IPv6 ACL in the rlQosAclTable, which is applied to the ingress of an interface. 0 - means no ACL applied.')
rlQosIfIpv6AclOut = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 21), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosIfIpv6AclOut.setStatus('current')
if mibBuilder.loadTexts: rlQosIfIpv6AclOut.setDescription('Index of an IPv6 ACL in the rlQosAclTable, which is applied to the egress of an interface. 0 - means no ACL applied.')
rlQosIfProfileCfgTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 14), )
if mibBuilder.loadTexts: rlQosIfProfileCfgTable.setStatus('current')
if mibBuilder.loadTexts: rlQosIfProfileCfgTable.setDescription('This table specifies for each Queue the Tail Drop or WRED parameters and the EF of WRR parameters.')
rlQosIfProfileCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 14, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlIfProfileName"), (0, "DLINK-3100-QOS-CLI-MIB", "rlQosQueueId"))
if mibBuilder.loadTexts: rlQosIfProfileCfgEntry.setStatus('current')
if mibBuilder.loadTexts: rlQosIfProfileCfgEntry.setDescription('Each entry in this table describes one queue parameters: Tail-drop threshold for drop precedence 0,1,3 and the WRED min-max threshold and the probability factor for Drop precedence 0,1,2 and the WRED Q factor and the EF priority and the WRR weight. The index is Interface Index represent by rlIfProfileName and queue-id represent by rlQosQueueId')
rlIfProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 14, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: rlIfProfileName.setStatus('current')
if mibBuilder.loadTexts: rlIfProfileName.setDescription('Interface Index.')
rlQosQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: rlQosQueueId.setStatus('current')
if mibBuilder.loadTexts: rlQosQueueId.setDescription('Queue id Index.')
rlQosTdThersholdDp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosTdThersholdDp0.setStatus('current')
if mibBuilder.loadTexts: rlQosTdThersholdDp0.setDescription('Tail Drop Threshold for Drop Precedence 0.')
rlQosTdThersholdDp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosTdThersholdDp1.setStatus('current')
if mibBuilder.loadTexts: rlQosTdThersholdDp1.setDescription('Tail Drop Threshold for Drop Precedence 1.')
rlQosTdThersholdDp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 14, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosTdThersholdDp2.setStatus('current')
if mibBuilder.loadTexts: rlQosTdThersholdDp2.setDescription('Tail Drop Threshold for Drop Precedence 2.')
rlQosRedMinDp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 14, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosRedMinDp0.setStatus('current')
if mibBuilder.loadTexts: rlQosRedMinDp0.setDescription('WRED Min Threshold for Drop Precedence 2.')
rlQosRedMaxDp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 14, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosRedMaxDp0.setStatus('current')
if mibBuilder.loadTexts: rlQosRedMaxDp0.setDescription('WRED Max Threshold for Drop Precedence 0.')
rlQosRedProbDp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 14, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosRedProbDp0.setStatus('current')
if mibBuilder.loadTexts: rlQosRedProbDp0.setDescription('WRED probability for Drop Precedence 0.')
rlQosRedMinDp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 14, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosRedMinDp1.setStatus('current')
if mibBuilder.loadTexts: rlQosRedMinDp1.setDescription('WRED Min Threshold for Drop Precedence 2.')
rlQosRedMaxDp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 14, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosRedMaxDp1.setStatus('current')
if mibBuilder.loadTexts: rlQosRedMaxDp1.setDescription('WRED Max Threshold for Drop Precedence 1.')
rlQosRedProbDp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 14, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosRedProbDp1.setStatus('current')
if mibBuilder.loadTexts: rlQosRedProbDp1.setDescription('WRED probability for Drop Precedence 1.')
rlQosRedMinDp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 14, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosRedMinDp2.setStatus('current')
if mibBuilder.loadTexts: rlQosRedMinDp2.setDescription('WRED Min Threshold for Drop Precedence 2.')
rlQosRedMaxDp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 14, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosRedMaxDp2.setStatus('current')
if mibBuilder.loadTexts: rlQosRedMaxDp2.setDescription('WRED Max Threshold for Drop Precedence 2.')
rlQosRedProbDp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 14, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosRedProbDp2.setStatus('current')
if mibBuilder.loadTexts: rlQosRedProbDp2.setDescription('WRED probability for Drop Precedence 2.')
rlQosRedQweight = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 14, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosRedQweight.setStatus('current')
if mibBuilder.loadTexts: rlQosRedQweight.setDescription('Q factor for WRED.')
rlQosIfprofileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 14, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosIfprofileStatus.setStatus('current')
if mibBuilder.loadTexts: rlQosIfprofileStatus.setDescription('The status of a table entry. It is used to delete/Add an entry from this table.')
rlQosDscpMutationTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 15), )
if mibBuilder.loadTexts: rlQosDscpMutationTable.setStatus('current')
if mibBuilder.loadTexts: rlQosDscpMutationTable.setDescription('This table specifies The DSCP Mutation table')
rlQosDscpMutationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 15, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosOldDscp"))
if mibBuilder.loadTexts: rlQosDscpMutationEntry.setStatus('current')
if mibBuilder.loadTexts: rlQosDscpMutationEntry.setDescription('Each entry in this table describes the new DSCP for the packet. The index is Old DSCP represent by rlQosOldDscp')
rlQosOldDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: rlQosOldDscp.setStatus('current')
if mibBuilder.loadTexts: rlQosOldDscp.setDescription('Old DSCP.')
rlQosNewDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosNewDscp.setStatus('current')
if mibBuilder.loadTexts: rlQosNewDscp.setDescription('New DSCP.')
rlQosDscpRemarkTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 16), )
if mibBuilder.loadTexts: rlQosDscpRemarkTable.setStatus('current')
if mibBuilder.loadTexts: rlQosDscpRemarkTable.setDescription('This table specifies The DSCP Remark table')
rlQosDscpRemarkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 16, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosRmOldDscp"))
if mibBuilder.loadTexts: rlQosDscpRemarkEntry.setStatus('current')
if mibBuilder.loadTexts: rlQosDscpRemarkEntry.setDescription('Each entry in this table describes the new DSCP for the packet. The index is Old DSCP represent by rlQosOldDscp')
rlQosRmOldDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: rlQosRmOldDscp.setStatus('current')
if mibBuilder.loadTexts: rlQosRmOldDscp.setDescription('Old DSCP.')
rlQosRmNewDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 16, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosRmNewDscp.setStatus('current')
if mibBuilder.loadTexts: rlQosRmNewDscp.setDescription('New DSCP.')
rlQosCosQueueTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 17), )
if mibBuilder.loadTexts: rlQosCosQueueTable.setStatus('current')
if mibBuilder.loadTexts: rlQosCosQueueTable.setDescription('This table specifies The Cos to queue map table')
rlQosCosQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 17, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosCosIndex"))
if mibBuilder.loadTexts: rlQosCosQueueEntry.setStatus('current')
if mibBuilder.loadTexts: rlQosCosQueueEntry.setDescription('Each entry in this table describes queue ID. The index is CoS represent by rlQosCosIndex')
rlQosCosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: rlQosCosIndex.setStatus('current')
if mibBuilder.loadTexts: rlQosCosIndex.setDescription('CoS value (0-7).')
rlQosCosQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 17, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCosQueueId.setStatus('current')
if mibBuilder.loadTexts: rlQosCosQueueId.setDescription('Queue ID.')
rlQosDscpQueueTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 18), )
if mibBuilder.loadTexts: rlQosDscpQueueTable.setStatus('current')
if mibBuilder.loadTexts: rlQosDscpQueueTable.setDescription('This table specifies The DSCP to Queue map table')
rlQosDscpQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 18, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosDscpIndex"))
if mibBuilder.loadTexts: rlQosDscpQueueEntry.setStatus('current')
if mibBuilder.loadTexts: rlQosDscpQueueEntry.setDescription('Each entry in this table describes The Queue Number. The index is DSCP represent by rlQosDscpIndex')
rlQosDscpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: rlQosDscpIndex.setStatus('current')
if mibBuilder.loadTexts: rlQosDscpIndex.setDescription('DSCP value.')
rlQosQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 18, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosQueueNum.setStatus('current')
if mibBuilder.loadTexts: rlQosQueueNum.setDescription('Queue Number.')
rlQosTcpPortQueueTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 19), )
if mibBuilder.loadTexts: rlQosTcpPortQueueTable.setStatus('current')
if mibBuilder.loadTexts: rlQosTcpPortQueueTable.setDescription('This table specifies TCP Port to Queue map table')
rlQosTcpPortQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 19, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosTcpPort"))
if mibBuilder.loadTexts: rlQosTcpPortQueueEntry.setStatus('current')
if mibBuilder.loadTexts: rlQosTcpPortQueueEntry.setDescription('Each entry in this table describes The Queue Number. The index is TCP/UDP port represent by rlQosTcpUdpPort')
rlQosTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 19, 1, 1), Integer32())
if mibBuilder.loadTexts: rlQosTcpPort.setStatus('current')
if mibBuilder.loadTexts: rlQosTcpPort.setDescription('TCP port number.')
rlQosTcpQueueValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 19, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosTcpQueueValue.setStatus('current')
if mibBuilder.loadTexts: rlQosTcpQueueValue.setDescription('Queue Number.')
rlQosTcpPortQueueStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 19, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosTcpPortQueueStatus.setStatus('current')
if mibBuilder.loadTexts: rlQosTcpPortQueueStatus.setDescription('The status of a table entry. It is used to delete/Add an entry from this table.')
rlQosUdpPortQueueTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 20), )
if mibBuilder.loadTexts: rlQosUdpPortQueueTable.setStatus('current')
if mibBuilder.loadTexts: rlQosUdpPortQueueTable.setDescription('This table specifies UDP Port to Queue map table')
rlQosUdpPortQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 20, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosUdpPort"))
if mibBuilder.loadTexts: rlQosUdpPortQueueEntry.setStatus('current')
if mibBuilder.loadTexts: rlQosUdpPortQueueEntry.setDescription('Each entry in this table describes The Queue Number. The index is UDP port represent by rlQosTcpUdpPort')
rlQosUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 20, 1, 1), Integer32())
if mibBuilder.loadTexts: rlQosUdpPort.setStatus('current')
if mibBuilder.loadTexts: rlQosUdpPort.setDescription('UDP port number.')
rlQosUdpQueueValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosUdpQueueValue.setStatus('current')
if mibBuilder.loadTexts: rlQosUdpQueueValue.setDescription('Queue value.')
rlQosUdpPortQueueStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 20, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosUdpPortQueueStatus.setStatus('current')
if mibBuilder.loadTexts: rlQosUdpPortQueueStatus.setDescription('The status of a table entry. It is used to delete/Add an entry from this table.')
rlQosEfManageTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 21), )
if mibBuilder.loadTexts: rlQosEfManageTable.setStatus('current')
if mibBuilder.loadTexts: rlQosEfManageTable.setDescription('This table specifies UDP Port to DSCP map table')
rlQosEfManageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 21, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosEfQueueId"))
if mibBuilder.loadTexts: rlQosEfManageEntry.setStatus('current')
if mibBuilder.loadTexts: rlQosEfManageEntry.setDescription('This Table describes The EF management for the system. The index is UDP port represent by rlQosEfQueueId')
rlQosEfQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: rlQosEfQueueId.setStatus('current')
if mibBuilder.loadTexts: rlQosEfQueueId.setDescription('Queue-ID.')
rlQosEfState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 21, 1, 2), BinaryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosEfState.setStatus('current')
if mibBuilder.loadTexts: rlQosEfState.setDescription('Enable/disable')
rlQosEfPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 21, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosEfPriority.setStatus('current')
if mibBuilder.loadTexts: rlQosEfPriority.setDescription('The priority of the queue')
rlQosQueueProfileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22), )
if mibBuilder.loadTexts: rlQosQueueProfileTable.setStatus('current')
if mibBuilder.loadTexts: rlQosQueueProfileTable.setDescription('This table describes the queue managment profiles ')
rlQosQueueProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQueueProfileName"))
if mibBuilder.loadTexts: rlQosQueueProfileEntry.setStatus('current')
if mibBuilder.loadTexts: rlQosQueueProfileEntry.setDescription('Each entry in this table describes The queue managment profile Value. The index is profile name represent by rlQueueProfileName')
rlQueueProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: rlQueueProfileName.setStatus('current')
if mibBuilder.loadTexts: rlQueueProfileName.setDescription('Profile name for the Queue profile.')
rlQosTypeQueue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1, 2), QueueType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosTypeQueue1.setStatus('current')
if mibBuilder.loadTexts: rlQosTypeQueue1.setDescription('EF or WRR')
rlQosValueQueue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosValueQueue1.setStatus('current')
if mibBuilder.loadTexts: rlQosValueQueue1.setDescription('for EF read-only for wrr the weight')
rlQosTypeQueue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1, 4), QueueType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosTypeQueue2.setStatus('current')
if mibBuilder.loadTexts: rlQosTypeQueue2.setDescription('EF or WRR')
rlQosValueQueue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosValueQueue2.setStatus('current')
if mibBuilder.loadTexts: rlQosValueQueue2.setDescription('for EF read-only for wrr the weight')
rlQosTypeQueue3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1, 6), QueueType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosTypeQueue3.setStatus('current')
if mibBuilder.loadTexts: rlQosTypeQueue3.setDescription('EF or WRR')
rlQosValueQueue3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosValueQueue3.setStatus('current')
if mibBuilder.loadTexts: rlQosValueQueue3.setDescription('for EF read-only for wrr the weight')
rlQosTypeQueue4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1, 8), QueueType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosTypeQueue4.setStatus('current')
if mibBuilder.loadTexts: rlQosTypeQueue4.setDescription('EF or WRR')
rlQosValueQueue4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosValueQueue4.setStatus('current')
if mibBuilder.loadTexts: rlQosValueQueue4.setDescription('for EF read-only for wrr the weight')
rlQosTypeQueue5 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1, 10), QueueType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosTypeQueue5.setStatus('current')
if mibBuilder.loadTexts: rlQosTypeQueue5.setDescription('EF or WRR')
rlQosValueQueue5 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosValueQueue5.setStatus('current')
if mibBuilder.loadTexts: rlQosValueQueue5.setDescription('for EF read-only for wrr the weight')
rlQosTypeQueue6 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1, 12), QueueType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosTypeQueue6.setStatus('current')
if mibBuilder.loadTexts: rlQosTypeQueue6.setDescription('EF or WRR')
rlQosValueQueue6 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosValueQueue6.setStatus('current')
if mibBuilder.loadTexts: rlQosValueQueue6.setDescription('for EF read-only for wrr the weight')
rlQosTypeQueue7 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1, 14), QueueType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosTypeQueue7.setStatus('current')
if mibBuilder.loadTexts: rlQosTypeQueue7.setDescription('EF or WRR')
rlQosValueQueue7 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosValueQueue7.setStatus('current')
if mibBuilder.loadTexts: rlQosValueQueue7.setDescription('for EF read-only for wrr the weight')
rlQosTypeQueue8 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1, 16), QueueType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosTypeQueue8.setStatus('current')
if mibBuilder.loadTexts: rlQosTypeQueue8.setDescription('EF or WRR')
rlQosValueQueue8 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosValueQueue8.setStatus('current')
if mibBuilder.loadTexts: rlQosValueQueue8.setDescription('for EF read-only for wrr the weight')
rlQosQueueProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosQueueProfileStatus.setStatus('current')
if mibBuilder.loadTexts: rlQosQueueProfileStatus.setDescription('The status of a table entry. It is used to delete/Add an entry from this table.')
rlQosNumOfIfConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosNumOfIfConnections.setStatus('current')
if mibBuilder.loadTexts: rlQosNumOfIfConnections.setDescription('how many time this entry connected to the if policy table')
rlQosQueueShapeProfileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23), )
if mibBuilder.loadTexts: rlQosQueueShapeProfileTable.setStatus('current')
if mibBuilder.loadTexts: rlQosQueueShapeProfileTable.setDescription('This table specifies the queue shaper profile')
rlQosQueueShapeProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosQueueShapeIndex"))
if mibBuilder.loadTexts: rlQosQueueShapeProfileEntry.setStatus('current')
if mibBuilder.loadTexts: rlQosQueueShapeProfileEntry.setDescription('Each entry in this table describes The shaper profile for all queues. The index sequencial index represent by rlQosQueueShapeIndex')
rlQosQueueShapeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23, 1, 1), Integer32())
if mibBuilder.loadTexts: rlQosQueueShapeIndex.setStatus('current')
if mibBuilder.loadTexts: rlQosQueueShapeIndex.setDescription('Profile Index.')
rlQosCirQueue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCirQueue1.setStatus('current')
if mibBuilder.loadTexts: rlQosCirQueue1.setDescription('CIR for Queue1 0 for not active')
rlQosCbsQueue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCbsQueue1.setStatus('current')
if mibBuilder.loadTexts: rlQosCbsQueue1.setDescription('CBS for Queue1 0 for not active')
rlQosCirQueue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCirQueue2.setStatus('current')
if mibBuilder.loadTexts: rlQosCirQueue2.setDescription('CIR for Queue2 0 for not active')
rlQosCbsQueue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCbsQueue2.setStatus('current')
if mibBuilder.loadTexts: rlQosCbsQueue2.setDescription('CBS for Queue2 0 for not active')
rlQosCirQueue3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCirQueue3.setStatus('current')
if mibBuilder.loadTexts: rlQosCirQueue3.setDescription('CIR for Queue3 0 for not active')
rlQosCbsQueue3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCbsQueue3.setStatus('current')
if mibBuilder.loadTexts: rlQosCbsQueue3.setDescription('CBS for Queue3 0 for not active')
rlQosCirQueue4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCirQueue4.setStatus('current')
if mibBuilder.loadTexts: rlQosCirQueue4.setDescription('CIR for Queue4 0 for not active')
rlQosCbsQueue4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCbsQueue4.setStatus('current')
if mibBuilder.loadTexts: rlQosCbsQueue4.setDescription('CBS for Queue4 0 for not active')
rlQosCirQueue5 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCirQueue5.setStatus('current')
if mibBuilder.loadTexts: rlQosCirQueue5.setDescription('CIR for Queue5 0 for not active')
rlQosCbsQueue5 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCbsQueue5.setStatus('current')
if mibBuilder.loadTexts: rlQosCbsQueue5.setDescription('CBS for Queue5 0 for not active')
rlQosCirQueue6 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCirQueue6.setStatus('current')
if mibBuilder.loadTexts: rlQosCirQueue6.setDescription('CIR for Queue6 0 for not active')
rlQosCbsQueue6 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCbsQueue6.setStatus('current')
if mibBuilder.loadTexts: rlQosCbsQueue6.setDescription('CBS for Queue6 0 for not active')
rlQosCirQueue7 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCirQueue7.setStatus('current')
if mibBuilder.loadTexts: rlQosCirQueue7.setDescription('CIR for Queue7 0 for not active')
rlQosCbsQueue7 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCbsQueue7.setStatus('current')
if mibBuilder.loadTexts: rlQosCbsQueue7.setDescription('CBS for Queue7 0 for not active')
rlQosCirQueue8 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23, 1, 16), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCirQueue8.setStatus('current')
if mibBuilder.loadTexts: rlQosCirQueue8.setDescription('CIR for Queue8 0 for not active')
rlQosCbsQueue8 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCbsQueue8.setStatus('current')
if mibBuilder.loadTexts: rlQosCbsQueue8.setDescription('CBS for Queue8 0 for not active')
rlQosQueueShapeProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosQueueShapeProfileStatus.setStatus('current')
if mibBuilder.loadTexts: rlQosQueueShapeProfileStatus.setDescription('The status of a table entry. It is used to delete/Add an entry from this table.')
rlQosAclCounterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 24), )
if mibBuilder.loadTexts: rlQosAclCounterTable.setStatus('current')
if mibBuilder.loadTexts: rlQosAclCounterTable.setDescription('The table is used to show statistics for ACL applied on an interface.')
rlQosAclCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 24, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosAclCounterInterface"), (0, "DLINK-3100-QOS-CLI-MIB", "rlQosAclCounterAclIndex"), (0, "DLINK-3100-QOS-CLI-MIB", "rlQosAclCounterAceIndex"))
if mibBuilder.loadTexts: rlQosAclCounterEntry.setStatus('current')
if mibBuilder.loadTexts: rlQosAclCounterEntry.setDescription('This entry shows value of conter for a particular ACE of an ACL.')
rlQosAclCounterInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 24, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosAclCounterInterface.setStatus('current')
if mibBuilder.loadTexts: rlQosAclCounterInterface.setDescription('Interface Index on which ACL is applied.')
rlQosAclCounterAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 24, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosAclCounterAclIndex.setStatus('current')
if mibBuilder.loadTexts: rlQosAclCounterAclIndex.setDescription('Index of ACL, which was applied on the IfIndex.')
rlQosAclCounterAceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 24, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosAclCounterAceIndex.setStatus('current')
if mibBuilder.loadTexts: rlQosAclCounterAceIndex.setDescription('Index of ACE, which is belong to an ACL.')
rlQosAclCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 24, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosAclCounterValue.setStatus('current')
if mibBuilder.loadTexts: rlQosAclCounterValue.setDescription('The value of the ACE counter. For Broadcom ASICs it shows number of matched packets. For Marvel ASICs -TBD.')
rlQosFreeIndexesTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 25), )
if mibBuilder.loadTexts: rlQosFreeIndexesTable.setStatus('current')
if mibBuilder.loadTexts: rlQosFreeIndexesTable.setDescription("The table is used to get free indexes of tables to create new entries. The algorithm for free indexes depends on table's type: Tuple table - first free index. Offset table - first free index. ACE table - last used index + ACE indexes delta. ACL table - first free index. Class Map table - last used index + Class Map indexes delta. Policy Map table - first free index. Policer Table - first free index. The ACE indexes delta and Class Map indexes delta are used to supply QoS MIB user easy insert entry capabilities. Values of these deltas depend on the MIB implementation. The 'Get and increment' approach is used in all cases. ")
rlQosFreeIndexesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 25, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosFreeIndexesTableId"))
if mibBuilder.loadTexts: rlQosFreeIndexesEntry.setStatus('current')
if mibBuilder.loadTexts: rlQosFreeIndexesEntry.setDescription('The entry is used to get free index for particular table.')
rlQosFreeIndexesTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 25, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("tuple", 1), ("offset", 2), ("ace", 3), ("acl", 4), ("class", 5), ("policy", 6), ("policer", 7), ("shaper", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosFreeIndexesTableId.setStatus('current')
if mibBuilder.loadTexts: rlQosFreeIndexesTableId.setDescription('Identification of the table, for which free index is retrieved.')
rlQosFreeIndexesValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 25, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosFreeIndexesValue.setStatus('current')
if mibBuilder.loadTexts: rlQosFreeIndexesValue.setDescription('Free index for table. 0 means no free entries.')
rlQosNamesToIndexesTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 26), )
if mibBuilder.loadTexts: rlQosNamesToIndexesTable.setStatus('current')
if mibBuilder.loadTexts: rlQosNamesToIndexesTable.setDescription('The table is used to get the ACL,Class-Map and Policy-Map indexes from the name.')
rlQosNamesToIndexesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 26, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosNamesToIndexesTableId"), (0, "DLINK-3100-QOS-CLI-MIB", "rlQosNamesToIndexesName"))
if mibBuilder.loadTexts: rlQosNamesToIndexesEntry.setStatus('current')
if mibBuilder.loadTexts: rlQosNamesToIndexesEntry.setDescription('The entry is used to get index form particular name and table type.')
rlQosNamesToIndexesTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 26, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("acl", 1), ("class", 2), ("policy", 3), ("policer", 4))))
if mibBuilder.loadTexts: rlQosNamesToIndexesTableId.setStatus('current')
if mibBuilder.loadTexts: rlQosNamesToIndexesTableId.setDescription('Identification of the table, for which the index is retrieved.')
rlQosNamesToIndexesName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 26, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: rlQosNamesToIndexesName.setStatus('current')
if mibBuilder.loadTexts: rlQosNamesToIndexesName.setDescription('The name of the entry')
rlQosNamesToIndexesValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 26, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosNamesToIndexesValue.setStatus('current')
if mibBuilder.loadTexts: rlQosNamesToIndexesValue.setDescription('the index for table')
rlQosStackControlQueue = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosStackControlQueue.setStatus('current')
if mibBuilder.loadTexts: rlQosStackControlQueue.setDescription('This scalar object defines queue ID, which is used for stack control information transfer. For standalone systems the scalar value equals 0. This scalar object can be used for warning messages when users assign a QoS map item, or a Class to the stack control queue.')
rlQosStackControlCos = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosStackControlCos.setStatus('current')
if mibBuilder.loadTexts: rlQosStackControlCos.setDescription('This scalar object defines CoS (VPT), which is used for stack control information transfer. For standalone systems the scalar value equals 8 (not valid for VPT). This scalar object can be used for warning messages when users assign a stack control CoS to a non-stacking control queue.')
rlQosCosQueueDefaultMapTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 29), )
if mibBuilder.loadTexts: rlQosCosQueueDefaultMapTable.setStatus('current')
if mibBuilder.loadTexts: rlQosCosQueueDefaultMapTable.setDescription('The table is used to set default 802.1p map (vpt to queue)')
rlQosCosQueueDefaultMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 29, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosCosQueueDefaultMapVpt"))
if mibBuilder.loadTexts: rlQosCosQueueDefaultMapEntry.setStatus('current')
if mibBuilder.loadTexts: rlQosCosQueueDefaultMapEntry.setDescription('The entry is used to get index form particular name and table type.')
rlQosCosQueueDefaultMapVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 29, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosCosQueueDefaultMapVpt.setStatus('current')
if mibBuilder.loadTexts: rlQosCosQueueDefaultMapVpt.setDescription('vlan priority tag , 3 bits of priority which determine the service class.')
rlQosCosQueueDefaultMapQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 29, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosCosQueueDefaultMapQueueId.setStatus('current')
if mibBuilder.loadTexts: rlQosCosQueueDefaultMapQueueId.setDescription('the queue id vary from the first queue id to Max Number of queues supported')
rlQosPredefBlockAclTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 30), )
if mibBuilder.loadTexts: rlQosPredefBlockAclTable.setStatus('current')
if mibBuilder.loadTexts: rlQosPredefBlockAclTable.setDescription("The table is used apply predefined ACLs to interfaces. Predefined ACLs is ACL to filter particular protocol or protocol's family. These ACL may operate simultaneously with IP and MAC ACLs.")
rlQosPredefBlockAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 30, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosPredefBlockAclIfIndex"), (0, "DLINK-3100-QOS-CLI-MIB", "rlQosPredefBlockAclIfType"))
if mibBuilder.loadTexts: rlQosPredefBlockAclEntry.setStatus('current')
if mibBuilder.loadTexts: rlQosPredefBlockAclEntry.setDescription('The entry is used to apply predefined ACLs to the interface.')
rlQosPredefBlockAclIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 30, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rlQosPredefBlockAclIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlQosPredefBlockAclIfIndex.setDescription('IfIndex of port/trunk or VLAN tag of VLAN on which predefined ACLa will be configured.')
rlQosPredefBlockAclIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 30, 1, 2), InterfaceType())
if mibBuilder.loadTexts: rlQosPredefBlockAclIfType.setStatus('current')
if mibBuilder.loadTexts: rlQosPredefBlockAclIfType.setDescription('Interface Type(vlan/port).')
rlQosPredefBlockAclMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 30, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosPredefBlockAclMask.setStatus('current')
if mibBuilder.loadTexts: rlQosPredefBlockAclMask.setDescription('This bitmap defines predefined ACL which are applied on an interface. The table below defines bitmasks for supported predefined ACL. Protocol/Family bitmask Description ===================================================== LLC NetBuei/NetBios 0x01 ACL filters out LLC encapsulated NetBuei/NetBios frames IP NetBuei/NetBios 0x02 ACL filters out IP encapsulated NetBuei/NetBios frames ')
rlQosPredefBlockAclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 30, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosPredefBlockAclStatus.setStatus('current')
if mibBuilder.loadTexts: rlQosPredefBlockAclStatus.setDescription('The status of a table entry. It is used to delete/Add an entry from this table.')
rlQosAceTidxTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 31), )
if mibBuilder.loadTexts: rlQosAceTidxTable.setStatus('current')
if mibBuilder.loadTexts: rlQosAceTidxTable.setDescription('This table specifies ACE table with two index information')
rlQosAceTidxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 31, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosAceTidxAclIndex"), (0, "DLINK-3100-QOS-CLI-MIB", "rlQosAceTidxIndex"))
if mibBuilder.loadTexts: rlQosAceTidxEntry.setStatus('current')
if mibBuilder.loadTexts: rlQosAceTidxEntry.setDescription("Each entry in this table describes one Classifier Element. The information includes: Action the ACE's Type the up to 8 tuples pointers. The index is sequential integer represent by rlQosAceTidxAclIndex ACL index and rlQosAceTidxIndex ACE index")
rlQosAceTidxAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 31, 1, 1), Integer32())
if mibBuilder.loadTexts: rlQosAceTidxAclIndex.setStatus('current')
if mibBuilder.loadTexts: rlQosAceTidxAclIndex.setDescription('An arbitrary incremental Index for the ACL ACE connection.')
rlQosAceTidxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 31, 1, 2), Integer32())
if mibBuilder.loadTexts: rlQosAceTidxIndex.setStatus('current')
if mibBuilder.loadTexts: rlQosAceTidxIndex.setDescription('An arbitrary incremental Index for the ACE table.')
rlQosAceTidxAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 31, 1, 3), AceActionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTidxAction.setStatus('current')
if mibBuilder.loadTexts: rlQosAceTidxAction.setDescription('ACE Action to take.')
rlQosAceTidxType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 31, 1, 4), AceObjectType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTidxType.setStatus('current')
if mibBuilder.loadTexts: rlQosAceTidxType.setDescription('ACE Type')
rlQosAceTidxTuple1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 31, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTidxTuple1.setStatus('current')
if mibBuilder.loadTexts: rlQosAceTidxTuple1.setDescription('ACE Tuple pointer.')
rlQosAceTidxTuple2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 31, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTidxTuple2.setStatus('current')
if mibBuilder.loadTexts: rlQosAceTidxTuple2.setDescription('ACE Tuple pointer.')
rlQosAceTidxTuple3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 31, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTidxTuple3.setStatus('current')
if mibBuilder.loadTexts: rlQosAceTidxTuple3.setDescription('ACE Tuple pointer.')
rlQosAceTidxTuple4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 31, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTidxTuple4.setStatus('current')
if mibBuilder.loadTexts: rlQosAceTidxTuple4.setDescription('ACE Tuple pointer.')
rlQosAceTidxTuple5 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 31, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTidxTuple5.setStatus('current')
if mibBuilder.loadTexts: rlQosAceTidxTuple5.setDescription('ACE Tuple pointer.')
rlQosAceTidxTuple6 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 31, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTidxTuple6.setStatus('current')
if mibBuilder.loadTexts: rlQosAceTidxTuple6.setDescription('ACE Tuple pointer.')
rlQosAceTidxTuple7 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 31, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTidxTuple7.setStatus('current')
if mibBuilder.loadTexts: rlQosAceTidxTuple7.setDescription('ACE Tuple pointer.')
rlQosAceTidxTuple8 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 31, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTidxTuple8.setStatus('current')
if mibBuilder.loadTexts: rlQosAceTidxTuple8.setDescription('ACE Tuple pointer.')
rlQosAceTidxAccount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 31, 1, 13), BinaryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTidxAccount.setStatus('current')
if mibBuilder.loadTexts: rlQosAceTidxAccount.setDescription("ACE Accounting state. When set to 'enabled' than appropriate statistic's counter is provided for an ACE. For Broadcom ASICs this counter shows number of matched with ACE criteria packets. For Dlink ASICs TBD.")
rlQosAceTidxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 31, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTidxStatus.setStatus('current')
if mibBuilder.loadTexts: rlQosAceTidxStatus.setDescription('The status of a table entry. It is used to delete/Add an entry from this table.')
rlQosAceTidxTimeRange = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 31, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTidxTimeRange.setStatus('current')
if mibBuilder.loadTexts: rlQosAceTidxTimeRange.setDescription('ACE time range name.')
rlQosAceTidxTimeRangeIsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 31, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosAceTidxTimeRangeIsActive.setStatus('current')
if mibBuilder.loadTexts: rlQosAceTidxTimeRangeIsActive.setDescription('ACE time range is rule active state shows is ACE currently active or not.')
rlQosMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosMibVersion.setStatus('current')
if mibBuilder.loadTexts: rlQosMibVersion.setDescription("MIB's version, the current version is 11 1 - original version 2 - Add new two MIB's items. - rlQosAceTidxTable - Ace table with two indexes - rlQosMibVersion. Change the unit in Policer table from bps to kbps 3 - Add new MIB's value for Textual convention QosObjectMode 4 - Add new MIBs rlQosDscpQueueDefaultMapTable 5 - Add new advanced action : trustCosDscp 6 - Add vpt,ether-type,tcp-flags,icmp-type,icmp-code,igmp-type to ClassTupleType Add ip-ICMP,ip-IGMP To AceObjectType Add vpt,ethertype To ClassOffsetType 7- Add rlQosPortRateLimitStatus,rlQosCirPortRateLimit, rlQosCbsPortRateLimit to rlQosIfPolicyTable 8 - Add Added rlQosDscpToDpTable 9 - Add statistics 10 - Add innerVlan to ClassOffsetType And inner-vlan to ClassTupleType 11 - Added rlQosCPUSafeGuardEnable")
rlQosDscpQueueDefaultMapTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 33), )
if mibBuilder.loadTexts: rlQosDscpQueueDefaultMapTable.setStatus('current')
if mibBuilder.loadTexts: rlQosDscpQueueDefaultMapTable.setDescription('The table is used to set default dscp to queue map')
rlQosDscpQueueDefaultMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 33, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosDscpQueueDefaultMapDscp"))
if mibBuilder.loadTexts: rlQosDscpQueueDefaultMapEntry.setStatus('current')
if mibBuilder.loadTexts: rlQosDscpQueueDefaultMapEntry.setDescription('The entry is used to get index form particular name and table type.')
rlQosDscpQueueDefaultMapDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 33, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosDscpQueueDefaultMapDscp.setStatus('current')
if mibBuilder.loadTexts: rlQosDscpQueueDefaultMapDscp.setDescription('dscp , 6 bits of priority which determine the service class.')
rlQosDscpQueueDefaultMapQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 33, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosDscpQueueDefaultMapQueueId.setStatus('current')
if mibBuilder.loadTexts: rlQosDscpQueueDefaultMapQueueId.setDescription('the queue id vary from the first queue id to Max Number of queues supported')
rlQosDscpToDpTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 34), )
if mibBuilder.loadTexts: rlQosDscpToDpTable.setStatus('current')
if mibBuilder.loadTexts: rlQosDscpToDpTable.setDescription('This table specifies The DSCP To Dp table')
rlQosDscpToDpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 34, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosDscp"))
if mibBuilder.loadTexts: rlQosDscpToDpEntry.setStatus('current')
if mibBuilder.loadTexts: rlQosDscpToDpEntry.setDescription('Each entry in this table describes the new DP for the packet. The index is DSCP represent by rlQosDscp')
rlQosDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 34, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: rlQosDscp.setStatus('current')
if mibBuilder.loadTexts: rlQosDscp.setDescription('Packet DSCP.')
rlQosDp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 34, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosDp.setStatus('current')
if mibBuilder.loadTexts: rlQosDp.setDescription('New DP.')
rlQosStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35))
rlQosPortPolicyStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 1), )
if mibBuilder.loadTexts: rlQosPortPolicyStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: rlQosPortPolicyStatisticsTable.setDescription('This table specifies statistics counter for policies with specific actions ')
rlQosPortPolicyStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 1, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlIfIndex"), (0, "DLINK-3100-QOS-CLI-MIB", "rlIfType"), (0, "DLINK-3100-QOS-CLI-MIB", "rlQosPortPolicyStatisticsCntrType"))
if mibBuilder.loadTexts: rlQosPortPolicyStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: rlQosPortPolicyStatisticsEntry.setDescription("Each entry in this table describes counter per port. The index is port represent by rlIfIndex. In each entry represents counter, it's type , it's size and whether it's enabled.")
rlQosPortPolicyStatisticsCntrType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 1, 1, 1), StatisticsCntrType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosPortPolicyStatisticsCntrType.setStatus('current')
if mibBuilder.loadTexts: rlQosPortPolicyStatisticsCntrType.setDescription('Counter type.')
rlQosPortPolicyStatisticsCntrNumOfBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 1, 1, 2), StatisticsCntrNumOfBitsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosPortPolicyStatisticsCntrNumOfBits.setStatus('current')
if mibBuilder.loadTexts: rlQosPortPolicyStatisticsCntrNumOfBits.setDescription('Counter size in bits.')
rlQosPortPolicyStatisticsEnableCounting = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosPortPolicyStatisticsEnableCounting.setStatus('current')
if mibBuilder.loadTexts: rlQosPortPolicyStatisticsEnableCounting.setDescription('Indication whether the counter is enabled.')
rlQosPortPolicyStatisticsCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosPortPolicyStatisticsCounterValue.setStatus('current')
if mibBuilder.loadTexts: rlQosPortPolicyStatisticsCounterValue.setDescription('Counter value.')
rlQosSinglePolicerStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 2), )
if mibBuilder.loadTexts: rlQosSinglePolicerStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: rlQosSinglePolicerStatisticsTable.setDescription('This table specifies statistics counters per QoS meter ')
rlQosSinglePolicerStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 2, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlIfIndex"), (0, "DLINK-3100-QOS-CLI-MIB", "rlQosPolicerIndex"))
if mibBuilder.loadTexts: rlQosSinglePolicerStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: rlQosSinglePolicerStatisticsEntry.setDescription('Each entry in this table describes counter per meter. The index is port represent by RlQosMeterStatisticsPort and RlQosMeterStatisticsPolicerPointer. In each entry there are fields representing whether the counter for the meter is enabled and two counters value - for in-profile bytes and for out-of-profile bytes. ')
rlQosSinglePolicerStatisticsInProfileCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosSinglePolicerStatisticsInProfileCounterValue.setStatus('current')
if mibBuilder.loadTexts: rlQosSinglePolicerStatisticsInProfileCounterValue.setDescription(' Counter value of in profile traffic.')
rlQosSinglePolicerStatisticsInProfileCntrNumOfBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 2, 1, 2), StatisticsCntrNumOfBitsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosSinglePolicerStatisticsInProfileCntrNumOfBits.setStatus('current')
if mibBuilder.loadTexts: rlQosSinglePolicerStatisticsInProfileCntrNumOfBits.setDescription('Counter size in bits for in profile counter.')
rlQosSinglePolicerStatisticsOutProfileCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosSinglePolicerStatisticsOutProfileCounterValue.setStatus('current')
if mibBuilder.loadTexts: rlQosSinglePolicerStatisticsOutProfileCounterValue.setDescription(' Counter value of Out Profile traffic.')
rlQosSinglePolicerStatisticsOutProfileCntrNumOfBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 2, 1, 4), StatisticsCntrNumOfBitsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosSinglePolicerStatisticsOutProfileCntrNumOfBits.setStatus('current')
if mibBuilder.loadTexts: rlQosSinglePolicerStatisticsOutProfileCntrNumOfBits.setDescription('Counter size in bits for out profile counter.')
rlQosSinglePolicerStatisticsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 2, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosSinglePolicerStatisticsStatus.setStatus('current')
if mibBuilder.loadTexts: rlQosSinglePolicerStatisticsStatus.setDescription('The status of a table entry. It is used to delete an entry from this table.')
rlQosAggregatePolicerStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 3), )
if mibBuilder.loadTexts: rlQosAggregatePolicerStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: rlQosAggregatePolicerStatisticsTable.setDescription('This table specifies statistics counters per QoS aggregate meter ')
rlQosAggregatePolicerStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 3, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosPolicerIndex"))
if mibBuilder.loadTexts: rlQosAggregatePolicerStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: rlQosAggregatePolicerStatisticsEntry.setDescription('Each entry in this table describes counter per aggregate meter. The index is rlQosPolicerIndex. In each entry there are fields representing whether the counter for the meter is enabled and three counters values - for green, yellow and red profiles bytes. ')
rlQosAggregatePolicerStatisticsInProfileCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosAggregatePolicerStatisticsInProfileCounterValue.setStatus('current')
if mibBuilder.loadTexts: rlQosAggregatePolicerStatisticsInProfileCounterValue.setDescription('Counter value of In Profile amount of bytes.')
rlQosAggregatePolicerStatisticsInProfileCntrNumOfBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 3, 1, 2), StatisticsCntrNumOfBitsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosAggregatePolicerStatisticsInProfileCntrNumOfBits.setStatus('current')
if mibBuilder.loadTexts: rlQosAggregatePolicerStatisticsInProfileCntrNumOfBits.setDescription('Counter size in bits for In Profile .')
rlQosAggregatePolicerStatisticsOutProfileCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosAggregatePolicerStatisticsOutProfileCounterValue.setStatus('current')
if mibBuilder.loadTexts: rlQosAggregatePolicerStatisticsOutProfileCounterValue.setDescription(' Counter value of Out Profile amount of bytes.')
rlQosAggregatePolicerStatisticsOutProfileCntrNumOfBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 3, 1, 4), StatisticsCntrNumOfBitsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosAggregatePolicerStatisticsOutProfileCntrNumOfBits.setStatus('current')
if mibBuilder.loadTexts: rlQosAggregatePolicerStatisticsOutProfileCntrNumOfBits.setDescription('Counter size in bits for Out Profile.')
rlQosAggregatePolicerStatisticsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 3, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosAggregatePolicerStatisticsStatus.setStatus('current')
if mibBuilder.loadTexts: rlQosAggregatePolicerStatisticsStatus.setDescription('The status of a table entry. It is used to delete an entry from this table.')
rlQosOutQueueStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 4), )
if mibBuilder.loadTexts: rlQosOutQueueStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: rlQosOutQueueStatisticsTable.setDescription('This table specifies statistics counters per VLAN/Port/Queue/Drop Precedence ')
rlQosOutQueueStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 4, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosOutQueueStatisticsCountrID"))
if mibBuilder.loadTexts: rlQosOutQueueStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: rlQosOutQueueStatisticsEntry.setDescription("Each entry in this table describes counter per any permutation of Port/VLAN/Queue/Drop Precedence. Each of the above can a group off 'All'. The index is port represent by rlQosOutQueueStatisticsCountrID. In each entry there are fields representing whether the counter is enabled and counters value. ")
rlQosOutQueueStatisticsCountrID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosOutQueueStatisticsCountrID.setStatus('current')
if mibBuilder.loadTexts: rlQosOutQueueStatisticsCountrID.setDescription('Counter id, the key of the table.')
rlQosOutQueueStatisticsIfIndexList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 4, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosOutQueueStatisticsIfIndexList.setStatus('current')
if mibBuilder.loadTexts: rlQosOutQueueStatisticsIfIndexList.setDescription('Port for which the flow is counted.')
rlQosOutQueueStatisticsPortAll = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 4, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosOutQueueStatisticsPortAll.setStatus('current')
if mibBuilder.loadTexts: rlQosOutQueueStatisticsPortAll.setDescription('Indication for whether the port is configured as range of all the ports')
rlQosOutQueueStatisticsVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosOutQueueStatisticsVlan.setStatus('current')
if mibBuilder.loadTexts: rlQosOutQueueStatisticsVlan.setDescription('VLAN for which the flow is counted.')
rlQosOutQueueStatisticsVlanAll = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 4, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosOutQueueStatisticsVlanAll.setStatus('current')
if mibBuilder.loadTexts: rlQosOutQueueStatisticsVlanAll.setDescription('Indication for whether the VLAN is configured as range of all the VLANS')
rlQosOutQueueStatisticsQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosOutQueueStatisticsQueue.setStatus('current')
if mibBuilder.loadTexts: rlQosOutQueueStatisticsQueue.setDescription('Queue for which the flow is counted.')
rlQosOutQueueStatisticsQueueAll = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 4, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosOutQueueStatisticsQueueAll.setStatus('current')
if mibBuilder.loadTexts: rlQosOutQueueStatisticsQueueAll.setDescription('Indication for whether the queue is configured as range of all the Queues')
rlQosOutQueueStatisticsDP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 4, 1, 8), StatisticsDPType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosOutQueueStatisticsDP.setStatus('current')
if mibBuilder.loadTexts: rlQosOutQueueStatisticsDP.setDescription('Drop Precedence for which the flow is counted.')
rlQosOutQueueStatisticsDPAll = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 4, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosOutQueueStatisticsDPAll.setStatus('current')
if mibBuilder.loadTexts: rlQosOutQueueStatisticsDPAll.setDescription('Indication for whether the DP is configured as range of all the DPs')
rlQosOutQueueStatisticsCounterTailDropValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosOutQueueStatisticsCounterTailDropValue.setStatus('current')
if mibBuilder.loadTexts: rlQosOutQueueStatisticsCounterTailDropValue.setDescription('The counter for tail dropped value.')
rlQosOutQueueStatisticsCounterAllValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosOutQueueStatisticsCounterAllValue.setStatus('current')
if mibBuilder.loadTexts: rlQosOutQueueStatisticsCounterAllValue.setDescription('The counter for all traffic value.')
rlQosOutQueueStatisticsCntrNumOfBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 4, 1, 12), StatisticsCntrNumOfBitsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosOutQueueStatisticsCntrNumOfBits.setStatus('current')
if mibBuilder.loadTexts: rlQosOutQueueStatisticsCntrNumOfBits.setDescription('Counter size in bits for the counter.')
rlQosOutQueueStatisticsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 4, 1, 13), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosOutQueueStatisticsStatus.setStatus('current')
if mibBuilder.loadTexts: rlQosOutQueueStatisticsStatus.setDescription('The status of a table entry. It is used to delete an entry from this table.')
rlQosGlobalStatisticsCntrsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 5), )
if mibBuilder.loadTexts: rlQosGlobalStatisticsCntrsTable.setStatus('current')
if mibBuilder.loadTexts: rlQosGlobalStatisticsCntrsTable.setDescription('This table specifies statistics global counters for specific rules for all ports that they are connected to ')
rlQosGlobalStatisticsCntrsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 5, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosGlobalStatisticsCntrsType"))
if mibBuilder.loadTexts: rlQosGlobalStatisticsCntrsEntry.setStatus('current')
if mibBuilder.loadTexts: rlQosGlobalStatisticsCntrsEntry.setDescription('Each entry represents global counter.')
rlQosGlobalStatisticsCntrsType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 5, 1, 1), StatisticsCntrType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosGlobalStatisticsCntrsType.setStatus('current')
if mibBuilder.loadTexts: rlQosGlobalStatisticsCntrsType.setDescription('Counter type.')
rlQosGlobalStatisticsCntrsNumOfBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 5, 1, 2), StatisticsCntrNumOfBitsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosGlobalStatisticsCntrsNumOfBits.setStatus('current')
if mibBuilder.loadTexts: rlQosGlobalStatisticsCntrsNumOfBits.setDescription('Counter size in bits.')
rlQosGlobalStatisticsCntrsCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosGlobalStatisticsCntrsCounterValue.setStatus('current')
if mibBuilder.loadTexts: rlQosGlobalStatisticsCntrsCounterValue.setDescription('Counter value.')
rlQosGlobalStatisticsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 5, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosGlobalStatisticsStatus.setStatus('current')
if mibBuilder.loadTexts: rlQosGlobalStatisticsStatus.setDescription('The status of a table entry. It is used to delete an entry from this table.')
rlQosClearCounters = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosClearCounters.setStatus('current')
if mibBuilder.loadTexts: rlQosClearCounters.setDescription('This scalar indicates to clear all the counters.')
rlQosClassifierUtilization = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 36))
rlQosClassifierUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 36, 1), )
if mibBuilder.loadTexts: rlQosClassifierUtilizationTable.setStatus('current')
if mibBuilder.loadTexts: rlQosClassifierUtilizationTable.setDescription('A table containing Classifier utilization information. Each row represents objects for a particular Unit present in this system.')
rlQosClassifierUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 36, 1, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosClassifierUtilizationUnitId"))
if mibBuilder.loadTexts: rlQosClassifierUtilizationEntry.setStatus('current')
if mibBuilder.loadTexts: rlQosClassifierUtilizationEntry.setDescription('A Single entry containing Classifier utilization information.')
rlQosClassifierUtilizationUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 36, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: rlQosClassifierUtilizationUnitId.setStatus('current')
if mibBuilder.loadTexts: rlQosClassifierUtilizationUnitId.setDescription('The Unit ID of this Classifier. must be unique per entry. This is an index into the table.')
rlQosClassifierUtilizationPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 36, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosClassifierUtilizationPercent.setStatus('current')
if mibBuilder.loadTexts: rlQosClassifierUtilizationPercent.setDescription('The classifier utilization percentage. ')
rlQosClassifierUtilizationRulesNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 36, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosClassifierUtilizationRulesNumber.setStatus('current')
if mibBuilder.loadTexts: rlQosClassifierUtilizationRulesNumber.setDescription('The classifier utilization number of used rules, in short rules resolution.')
rlQosPortToProfileMappingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 37), )
if mibBuilder.loadTexts: rlQosPortToProfileMappingTable.setStatus('current')
if mibBuilder.loadTexts: rlQosPortToProfileMappingTable.setDescription('This table maps between port and profile')
rlQosPortToProfileMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 37, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosPort"))
if mibBuilder.loadTexts: rlQosPortToProfileMappingEntry.setStatus('current')
if mibBuilder.loadTexts: rlQosPortToProfileMappingEntry.setDescription('Each entry in this table describes mapping between port and profile')
rlQosPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 37, 1, 1), Integer32())
if mibBuilder.loadTexts: rlQosPort.setStatus('current')
if mibBuilder.loadTexts: rlQosPort.setDescription('Port number')
rlQosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 37, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosProfileName.setStatus('current')
if mibBuilder.loadTexts: rlQosProfileName.setDescription('profile')
rlQosTimeBasedAclTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 38), )
if mibBuilder.loadTexts: rlQosTimeBasedAclTable.setStatus('current')
if mibBuilder.loadTexts: rlQosTimeBasedAclTable.setDescription('This table specifies Time Based ACL table')
rlQosTimeBasedAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 38, 1), ).setIndexNames((1, "DLINK-3100-QOS-CLI-MIB", "rlQosTimeBasedAclRangeName"))
if mibBuilder.loadTexts: rlQosTimeBasedAclEntry.setStatus('current')
if mibBuilder.loadTexts: rlQosTimeBasedAclEntry.setDescription('Each entry in this table describes the new time range for ACE. The index is time range name')
rlQosTimeBasedAclRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 38, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: rlQosTimeBasedAclRangeName.setStatus('current')
if mibBuilder.loadTexts: rlQosTimeBasedAclRangeName.setDescription('Name of time range.')
rlQosTimeBasedAclAbsStart = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 38, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosTimeBasedAclAbsStart.setStatus('current')
if mibBuilder.loadTexts: rlQosTimeBasedAclAbsStart.setDescription('Time of start of absolute time range in following format: month day year hh:mm month: 01-12 (January-December) day: 01-31 year: 0-99 (2000-2099) hh: 0-23 (hours) mm: 0-59 (minutes)')
rlQosTimeBasedAclAbsEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 38, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosTimeBasedAclAbsEnd.setStatus('current')
if mibBuilder.loadTexts: rlQosTimeBasedAclAbsEnd.setDescription('Time of end of absolute time range in following format: month day year hh:mm month: 01-12 (January-December) day: 01-31 year: 0-99 (2000-2099) hh: 0-23 (hours) mm: 0-59 (minutes)')
rlQosTimeBasedAclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 38, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosTimeBasedAclStatus.setStatus('current')
if mibBuilder.loadTexts: rlQosTimeBasedAclStatus.setDescription('The status of a table entry. It is used to delete an entry from this table.')
rlQosTimeBasedAclPeriodicTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 39), )
if mibBuilder.loadTexts: rlQosTimeBasedAclPeriodicTable.setStatus('current')
if mibBuilder.loadTexts: rlQosTimeBasedAclPeriodicTable.setDescription('This table specifies Time Based ACL Periodic table')
rlQosTimeBasedAclPeriodicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 39, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosTimeBasedAclPeriodicName"), (0, "DLINK-3100-QOS-CLI-MIB", "rlQosTimeBasedAclPeriodicWeekList"), (0, "DLINK-3100-QOS-CLI-MIB", "rlQosTimeBasedAclPeriodicStart"), (0, "DLINK-3100-QOS-CLI-MIB", "rlQosTimeBasedAclPeriodicEnd"))
if mibBuilder.loadTexts: rlQosTimeBasedAclPeriodicEntry.setStatus('current')
if mibBuilder.loadTexts: rlQosTimeBasedAclPeriodicEntry.setDescription('Each entry in this table describes the new periodic time range for ACE. The index is time range index and periodic index')
rlQosTimeBasedAclPeriodicName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 39, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: rlQosTimeBasedAclPeriodicName.setStatus('current')
if mibBuilder.loadTexts: rlQosTimeBasedAclPeriodicName.setDescription('Index of time range.')
rlQosTimeBasedAclPeriodicWeekList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 39, 1, 2), RlQosTimeBasedAclWeekPeriodicList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosTimeBasedAclPeriodicWeekList.setStatus('current')
if mibBuilder.loadTexts: rlQosTimeBasedAclPeriodicWeekList.setDescription('The bitmap allows to user to select periodic time range for several days at once. The periodic range will be associated with specific days when corresponding bits will be set. If at least one bit has been set in the rlQosTimeBasedAclPeriodicList, the weekday in rlQosTimeBasedAclPeriodicStart and rlQosTimeBasedAclPeriodicEnd is not relevant and should be set to zero.')
rlQosTimeBasedAclPeriodicStart = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 39, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosTimeBasedAclPeriodicStart.setStatus('current')
if mibBuilder.loadTexts: rlQosTimeBasedAclPeriodicStart.setDescription('Time of start of periodic time range in following format: weekday hh:mm weekday: 0-7 (0 means the weekday is not specified, 1-7 are weekdays from Monday to Sunday) hh: 0-23 (hours) mm: 0-59 (minutes) Weekday may be 0 only if periodic time range weekdays were specified in rlQosTimeBasedAclPeriodicWeekList.')
rlQosTimeBasedAclPeriodicEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 39, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosTimeBasedAclPeriodicEnd.setStatus('current')
if mibBuilder.loadTexts: rlQosTimeBasedAclPeriodicEnd.setDescription('Time of end of periodic time range in following format: weekday hh:mm weekday: 0-7 (0 means the weekday is not specified, 1-7 are weekdays from Monday to Sunday) hh: 0-23 (hours) mm: 0-59 (minutes) Weekday may be 0 only if periodic time range weekdays were specified in rlQosTimeBasedAclPeriodicWeekList.')
rlQosTimeBasedAclPeriodicStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 39, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosTimeBasedAclPeriodicStatus.setStatus('current')
if mibBuilder.loadTexts: rlQosTimeBasedAclPeriodicStatus.setDescription('The status of a table entry. It is used to delete an entry from this table.')
rlQosCPUSafeGuardEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosCPUSafeGuardEnable.setStatus('current')
if mibBuilder.loadTexts: rlQosCPUSafeGuardEnable.setDescription('This scalar enables/disables CPU Safeguard.')
rlQosClassifierUtilizationSystem = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 36, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosClassifierUtilizationSystem.setStatus('current')
if mibBuilder.loadTexts: rlQosClassifierUtilizationSystem.setDescription('The system classifier utilization percentage. ')
rlQosClassifierRulesNumberUtilizationSystem = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 36, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosClassifierRulesNumberUtilizationSystem.setStatus('current')
if mibBuilder.loadTexts: rlQosClassifierRulesNumberUtilizationSystem.setDescription('Number of used rules per system, in short rule resolution ')
rlQosTcamUpdateSemaphore = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 41), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosTcamUpdateSemaphore.setStatus('current')
if mibBuilder.loadTexts: rlQosTcamUpdateSemaphore.setDescription('This scalar is used to prevent the dynamic applications to update TCAM resources when ACL application updates the TCAM.')
mibBuilder.exportSymbols("DLINK-3100-QOS-CLI-MIB", rlQosDscpQueueEntry=rlQosDscpQueueEntry, rlQosPortToProfileMappingTable=rlQosPortToProfileMappingTable, rlQosClassifierUtilization=rlQosClassifierUtilization, rlQosValueQueue8=rlQosValueQueue8, rlQosAceTidxTuple5=rlQosAceTidxTuple5, rlQosAggregatePolicerStatisticsStatus=rlQosAggregatePolicerStatisticsStatus, rlQosIfPolicyEntry=rlQosIfPolicyEntry, rlQosTypeQueue2=rlQosTypeQueue2, rlQosAceTidxTuple7=rlQosAceTidxTuple7, rlQosCbsQueue4=rlQosCbsQueue4, rlQosEfManageEntry=rlQosEfManageEntry, rlQosPortToProfileMappingEntry=rlQosPortToProfileMappingEntry, rlQosTcpPortQueueTable=rlQosTcpPortQueueTable, rlQosOutQueueStatisticsVlan=rlQosOutQueueStatisticsVlan, rlQosPolicerIndex=rlQosPolicerIndex, rlQosOldDscp=rlQosOldDscp, rlQosAceTuple3=rlQosAceTuple3, rlQosSinglePolicerStatisticsOutProfileCounterValue=rlQosSinglePolicerStatisticsOutProfileCounterValue, rlQosAclCounterValue=rlQosAclCounterValue, rlQosNewDscp=rlQosNewDscp, rlQosTimeBasedAclPeriodicWeekList=rlQosTimeBasedAclPeriodicWeekList, rlQosRedMinDp2=rlQosRedMinDp2, rlQosGlobalStatisticsCntrsTable=rlQosGlobalStatisticsCntrsTable, rlQosTimeBasedAclAbsEnd=rlQosTimeBasedAclAbsEnd, rlQosStackControlCos=rlQosStackControlCos, rlQosAggregatePolicerStatisticsOutProfileCntrNumOfBits=rlQosAggregatePolicerStatisticsOutProfileCntrNumOfBits, rlQosOutQueueStatisticsVlanAll=rlQosOutQueueStatisticsVlanAll, rlQosDscpQueueTable=rlQosDscpQueueTable, rlQosClassMapMarkValue=rlQosClassMapMarkValue, rlQosPredefBlockAclMask=rlQosPredefBlockAclMask, rlQosSinglePolicerStatisticsInProfileCounterValue=rlQosSinglePolicerStatisticsInProfileCounterValue, rlQosDscpIndex=rlQosDscpIndex, rlQosClassMapAction=rlQosClassMapAction, rlQosRedMaxDp2=rlQosRedMaxDp2, rlQosIfPolicyMapPointerOut=rlQosIfPolicyMapPointerOut, rlQosAclCounterEntry=rlQosAclCounterEntry, rlQosTcamUpdateSemaphore=rlQosTcamUpdateSemaphore, rlQosEfState=rlQosEfState, rlQosAclCounterAclIndex=rlQosAclCounterAclIndex, rlQosClassMapStatus=rlQosClassMapStatus, rlQosUdpPortQueueTable=rlQosUdpPortQueueTable, rlQosIfprofileStatus=rlQosIfprofileStatus, rlQosTupleTable=rlQosTupleTable, rlQosCbsQueue2=rlQosCbsQueue2, rlQosPredefBlockAclTable=rlQosPredefBlockAclTable, rlQosDscpMutationTable=rlQosDscpMutationTable, rlQosTimeBasedAclEntry=rlQosTimeBasedAclEntry, rlQosSinglePolicerStatisticsTable=rlQosSinglePolicerStatisticsTable, rlQosAggregatePolicerStatisticsInProfileCntrNumOfBits=rlQosAggregatePolicerStatisticsInProfileCntrNumOfBits, rlQosTcpPortQueueStatus=rlQosTcpPortQueueStatus, rlQosCbsQueue1=rlQosCbsQueue1, rlQosAceStatus=rlQosAceStatus, rlQosValueQueue4=rlQosValueQueue4, rlQosPredefBlockAclEntry=rlQosPredefBlockAclEntry, rlQosValueQueue2=rlQosValueQueue2, rlQosNamesToIndexesEntry=rlQosNamesToIndexesEntry, rlQosPortPolicyStatisticsCounterValue=rlQosPortPolicyStatisticsCounterValue, rlQosClassMapNewVlan=rlQosClassMapNewVlan, PolicerType=PolicerType, rlQosClassMapMatch1=rlQosClassMapMatch1, rlQosTimeBasedAclStatus=rlQosTimeBasedAclStatus, StatisticsCntrType=StatisticsCntrType, rlQosIfIpv6AclOut=rlQosIfIpv6AclOut, rlQosTupleType=rlQosTupleType, rlQosNamesToIndexesTable=rlQosNamesToIndexesTable, rlQosNamesToIndexesTableId=rlQosNamesToIndexesTableId, rlQosAclAceRefAcePointer=rlQosAclAceRefAcePointer, rlQosAceTidxTuple1=rlQosAceTidxTuple1, rlQosOffsetTable=rlQosOffsetTable, rlQosDscpRemarkTable=rlQosDscpRemarkTable, rlQosAceEntry=rlQosAceEntry, rlQosAceAccount=rlQosAceAccount, rlQosGlobalStatisticsCntrsEntry=rlQosGlobalStatisticsCntrsEntry, rlQosQueueShapeProfilePointer=rlQosQueueShapeProfilePointer, rlQosPolicyMapEntry=rlQosPolicyMapEntry, rlQosStackControlQueue=rlQosStackControlQueue, rlQosCirQueue7=rlQosCirQueue7, rlQosPolicyMapIndex=rlQosPolicyMapIndex, rlQosCosQueueTable=rlQosCosQueueTable, rlQosMaxNumOfAce=rlQosMaxNumOfAce, rlQosRedProbDp0=rlQosRedProbDp0, ClassMapAction=ClassMapAction, rlQosAclCounterInterface=rlQosAclCounterInterface, rlQosStatistics=rlQosStatistics, rlQosDscpMutationEntry=rlQosDscpMutationEntry, rlQosSinglePolicerStatisticsInProfileCntrNumOfBits=rlQosSinglePolicerStatisticsInProfileCntrNumOfBits, rlQosUdpPortQueueEntry=rlQosUdpPortQueueEntry, rlQosAceTidxTimeRangeIsActive=rlQosAceTidxTimeRangeIsActive, rlQosPolicyMapName=rlQosPolicyMapName, rlQosFreeIndexesEntry=rlQosFreeIndexesEntry, rlQosRedMaxDp0=rlQosRedMaxDp0, rlQosCbsPortRateLimit=rlQosCbsPortRateLimit, rlQosClassifierUtilizationTable=rlQosClassifierUtilizationTable, rlQosPortPolicyStatisticsCntrType=rlQosPortPolicyStatisticsCntrType, rlQosAceTuple8=rlQosAceTuple8, rlQosTimeBasedAclPeriodicName=rlQosTimeBasedAclPeriodicName, rlQosQueueShapeProfileStatus=rlQosQueueShapeProfileStatus, rlQosSinglePolicerStatisticsStatus=rlQosSinglePolicerStatisticsStatus, rlIfIndex=rlIfIndex, rlQosValueQueue3=rlQosValueQueue3, rlQosPolicyClassRefStatus=rlQosPolicyClassRefStatus, rlQosOffsetValue=rlQosOffsetValue, rlQosOutQueueStatisticsIfIndexList=rlQosOutQueueStatisticsIfIndexList, AceObjectType=AceObjectType, rlQosTcpPortQueueEntry=rlQosTcpPortQueueEntry, rlQosClassifierUtilizationUnitId=rlQosClassifierUtilizationUnitId, rlQosPolicerCasPointerRemVal=rlQosPolicerCasPointerRemVal, rlQosIfPolicyTable=rlQosIfPolicyTable, rlQosPredefBlockAclIfType=rlQosPredefBlockAclIfType, rlQosOutQueueStatisticsDPAll=rlQosOutQueueStatisticsDPAll, rlQosClassMapType=rlQosClassMapType, rlQosQueueProfilePointer=rlQosQueueProfilePointer, rlQosQueueId=rlQosQueueId, rlQosPolicerCbs=rlQosPolicerCbs, rlQosTypeQueue4=rlQosTypeQueue4, rlQosNamesToIndexesName=rlQosNamesToIndexesName, rlQosPolicerTable=rlQosPolicerTable, rlQosClassifierUtilizationPercent=rlQosClassifierUtilizationPercent, rlQosEfQueueId=rlQosEfQueueId, rlQosCirPortRateLimit=rlQosCirPortRateLimit, rlQosAceTidxAclIndex=rlQosAceTidxAclIndex, rlQosGlobalStatisticsCntrsCounterValue=rlQosGlobalStatisticsCntrsCounterValue, rlQosPolicyMapTable=rlQosPolicyMapTable, rlQosSinglePolicerStatisticsEntry=rlQosSinglePolicerStatisticsEntry, rlQosSinglePolicerStatisticsOutProfileCntrNumOfBits=rlQosSinglePolicerStatisticsOutProfileCntrNumOfBits, rlQosClassMapIndex=rlQosClassMapIndex, rlQosIfIpv6AclIn=rlQosIfIpv6AclIn, rlQosPolicyClassRefEntry=rlQosPolicyClassRefEntry, rlQosClassMapCopyPort=rlQosClassMapCopyPort, rlQosAclAceRefEntry=rlQosAclAceRefEntry, rlQosTypeQueue7=rlQosTypeQueue7, rlQosOffsetEntry=rlQosOffsetEntry, rlQosIfPolicyMapStatus=rlQosIfPolicyMapStatus, rlQosQueueShapeProfileTable=rlQosQueueShapeProfileTable, rlQosCbsPortShaper=rlQosCbsPortShaper, rlQosTimeBasedAclPeriodicEntry=rlQosTimeBasedAclPeriodicEntry, rlQosPolicerEntry=rlQosPolicerEntry, rlQosAceTidxTuple2=rlQosAceTidxTuple2, rlQosAclAceRefAclPointer=rlQosAclAceRefAclPointer, rlQosCosQueueDefaultMapEntry=rlQosCosQueueDefaultMapEntry, rlQosFreeIndexesValue=rlQosFreeIndexesValue, rlQosAclTable=rlQosAclTable, rlQosIfAclIn=rlQosIfAclIn, rlQosOutQueueStatisticsCounterAllValue=rlQosOutQueueStatisticsCounterAllValue, rlQosIfProfileCfgEntry=rlQosIfProfileCfgEntry, rlQosOutQueueStatisticsDP=rlQosOutQueueStatisticsDP, rlQosPortPolicyStatisticsEntry=rlQosPortPolicyStatisticsEntry, rlQosCbsQueue8=rlQosCbsQueue8, rlQosValueQueue1=rlQosValueQueue1, rlQosDscpQueueDefaultMapDscp=rlQosDscpQueueDefaultMapDscp, rlQosTcpPort=rlQosTcpPort, rlQosAceTidxIndex=rlQosAceTidxIndex, rlQosPortPolicyStatisticsCntrNumOfBits=rlQosPortPolicyStatisticsCntrNumOfBits, rlQosRedProbDp2=rlQosRedProbDp2, rlQosUdpPortQueueStatus=rlQosUdpPortQueueStatus, rlQosNumOfIfConnections=rlQosNumOfIfConnections, QueueType=QueueType, rlQosAclCounterTable=rlQosAclCounterTable, rlQosCirQueue1=rlQosCirQueue1, rlQosAceTuple4=rlQosAceTuple4, rlQosRedMaxDp1=rlQosRedMaxDp1, rlQosAceType=rlQosAceType, rlQosIfProfileCfgTable=rlQosIfProfileCfgTable, QosObjectBasicMode=QosObjectBasicMode, rlQosCosIndex=rlQosCosIndex, rlQosCirQueue3=rlQosCirQueue3, rlQosAceTuple7=rlQosAceTuple7, PolicerAction=PolicerAction, rlQosCirQueue4=rlQosCirQueue4, rlQosDscpToDpTable=rlQosDscpToDpTable, rlQosIfTrustActive=rlQosIfTrustActive, rlQosPortPolicyStatisticsTable=rlQosPortPolicyStatisticsTable, rlQosAceTidxTuple6=rlQosAceTidxTuple6, rlQosAclAceRefTable=rlQosAclAceRefTable, rlQosTypeQueue6=rlQosTypeQueue6, rlQosAggregatePolicerStatisticsOutProfileCounterValue=rlQosAggregatePolicerStatisticsOutProfileCounterValue, rlQosAclCounterAceIndex=rlQosAclCounterAceIndex, rlQosCbsQueue3=rlQosCbsQueue3, rlQosOutQueueStatisticsCounterTailDropValue=rlQosOutQueueStatisticsCounterTailDropValue, rlQosQueueProfileStatus=rlQosQueueProfileStatus, rlQosPredefBlockAclIfIndex=rlQosPredefBlockAclIfIndex, rlQosCbsQueue5=rlQosCbsQueue5, QosObjectMode=QosObjectMode, rlQosPolicyMapStatus=rlQosPolicyMapStatus, rlQosTupleStatus=rlQosTupleStatus, rlQosGlobalStatisticsCntrsNumOfBits=rlQosGlobalStatisticsCntrsNumOfBits, rlQosPolicerType=rlQosPolicerType, StatisticsCntrNumOfBitsType=StatisticsCntrNumOfBitsType, rlQosCliMib=rlQosCliMib, rlQosNamesToIndexesValue=rlQosNamesToIndexesValue, rlQosTypeQueue3=rlQosTypeQueue3, rlQosTimeBasedAclPeriodicStart=rlQosTimeBasedAclPeriodicStart, rlQosQueueProfileEntry=rlQosQueueProfileEntry, BinaryStatus=BinaryStatus, rlQosCirQueue2=rlQosCirQueue2, rlQosAceTidxTuple8=rlQosAceTidxTuple8, rlQosAceIndex=rlQosAceIndex, rlQosFreeIndexesTableId=rlQosFreeIndexesTableId, rlQosPortPolicyStatisticsEnableCounting=rlQosPortPolicyStatisticsEnableCounting, rlQosDscp=rlQosDscp, rlQosPortShaperStatus=rlQosPortShaperStatus, rlQosCliQosMode=rlQosCliQosMode, rlQosClassMapPolicer=rlQosClassMapPolicer, rlQosOutQueueStatisticsQueue=rlQosOutQueueStatisticsQueue, rlQosOffsetPattern=rlQosOffsetPattern, rlQosAceTuple1=rlQosAceTuple1, rlQosClassMapMarkVlan=rlQosClassMapMarkVlan, rlQosAclAceRefStatus=rlQosAclAceRefStatus, rlQosQueueShapeProfileEntry=rlQosQueueShapeProfileEntry, rlQosCbsQueue7=rlQosCbsQueue7, rlQosClassifierUtilizationEntry=rlQosClassifierUtilizationEntry, rlQosRedMinDp0=rlQosRedMinDp0, rlQosAclIndex=rlQosAclIndex, rlQosRedMinDp1=rlQosRedMinDp1, rlQosEfPriority=rlQosEfPriority, rlQosRedQweight=rlQosRedQweight, rlQosPort=rlQosPort, rlQosIfAclOut=rlQosIfAclOut, rlQosAclType=rlQosAclType, rlQosGlobalStatisticsStatus=rlQosGlobalStatisticsStatus, rlQosClassifierRulesNumberUtilizationSystem=rlQosClassifierRulesNumberUtilizationSystem, rlQosAceTuple2=rlQosAceTuple2, rlQosAclStatus=rlQosAclStatus, rlQosTupleEntry=rlQosTupleEntry, rlQosIfPolicyMapPointerIn=rlQosIfPolicyMapPointerIn, rlQosPolicyClassRefPolicyPointer=rlQosPolicyClassRefPolicyPointer, rlQosOutQueueStatisticsCntrNumOfBits=rlQosOutQueueStatisticsCntrNumOfBits, rlQosFreeIndexesTable=rlQosFreeIndexesTable, rlQosCirPortShaper=rlQosCirPortShaper, rlQosAceTidxAction=rlQosAceTidxAction, AceActionType=AceActionType, rlQosCosQueueDefaultMapVpt=rlQosCosQueueDefaultMapVpt, rlQosAggregatePolicerStatisticsEntry=rlQosAggregatePolicerStatisticsEntry, rlQosTdThersholdDp0=rlQosTdThersholdDp0, rlQosDp=rlQosDp, rlQosAceAction=rlQosAceAction, rlQosPolicerAction=rlQosPolicerAction, ClassTupleType=ClassTupleType, rlQosClassMapMatch2=rlQosClassMapMatch2, PYSNMP_MODULE_ID=rlQosCliMib, rlQosClassMapTable=rlQosClassMapTable, rlQosOffsetMask=rlQosOffsetMask, rlQosCPUSafeGuardEnable=rlQosCPUSafeGuardEnable, rlQosAceTidxType=rlQosAceTidxType, rlQosAceTidxEntry=rlQosAceTidxEntry, rlQosUdpQueueValue=rlQosUdpQueueValue, rlQosDscpRemarkEntry=rlQosDscpRemarkEntry, rlQosDscpQueueDefaultMapTable=rlQosDscpQueueDefaultMapTable, rlQosCirQueue6=rlQosCirQueue6, rlQosTupleValue2=rlQosTupleValue2, rlQosIfProfilePointer=rlQosIfProfilePointer, rlQosQueueShapeIndex=rlQosQueueShapeIndex, rlQosMibVersion=rlQosMibVersion, rlQosPolicerName=rlQosPolicerName)
mibBuilder.exportSymbols("DLINK-3100-QOS-CLI-MIB", rlQosClassMapNewPort=rlQosClassMapNewPort, rlQosAceTidxTable=rlQosAceTidxTable, rlQosCliBasicModeCfg=rlQosCliBasicModeCfg, rlQosOutQueueStatisticsStatus=rlQosOutQueueStatisticsStatus, rlQosCirQueue8=rlQosCirQueue8, rlIfProfileName=rlIfProfileName, rlQosOffsetIndex=rlQosOffsetIndex, rlQosTimeBasedAclRangeName=rlQosTimeBasedAclRangeName, rlIfType=rlIfType, rlQosAceTidxTuple4=rlQosAceTidxTuple4, rlQosRmOldDscp=rlQosRmOldDscp, rlQosClearCounters=rlQosClearCounters, rlQosClassifierUtilizationRulesNumber=rlQosClassifierUtilizationRulesNumber, rlQosTupleIndex=rlQosTupleIndex, rlQosTimeBasedAclPeriodicStatus=rlQosTimeBasedAclPeriodicStatus, rlQosTdThersholdDp2=rlQosTdThersholdDp2, rlQosClassMapEntry=rlQosClassMapEntry, rlQosValueQueue6=rlQosValueQueue6, rlQosClassMapName=rlQosClassMapName, rlQosOutQueueStatisticsTable=rlQosOutQueueStatisticsTable, AclDefaultAction=AclDefaultAction, rlQosTdThersholdDp1=rlQosTdThersholdDp1, rlQosQueueProfileTable=rlQosQueueProfileTable, ClassMapType=ClassMapType, rlQosAclEntry=rlQosAclEntry, rlQosCosQueueEntry=rlQosCosQueueEntry, rlQosAggregatePolicerStatisticsTable=rlQosAggregatePolicerStatisticsTable, rlQosTimeBasedAclAbsStart=rlQosTimeBasedAclAbsStart, rlQosAclDefaultAction=rlQosAclDefaultAction, rlQosOutQueueStatisticsEntry=rlQosOutQueueStatisticsEntry, rlQosClassMapMatch3=rlQosClassMapMatch3, rlQosUdpPort=rlQosUdpPort, rlQosTypeQueue5=rlQosTypeQueue5, rlQosRmNewDscp=rlQosRmNewDscp, rlQosPolicyClassRefClassPointer=rlQosPolicyClassRefClassPointer, rlQosTypeQueue8=rlQosTypeQueue8, rlQosDscpQueueDefaultMapQueueId=rlQosDscpQueueDefaultMapQueueId, rlQosTypeQueue1=rlQosTypeQueue1, rlQosGlobalStatisticsCntrsType=rlQosGlobalStatisticsCntrsType, rlQosClassifierUtilizationSystem=rlQosClassifierUtilizationSystem, rlQosTimeBasedAclTable=rlQosTimeBasedAclTable, rlQosOffsetStatus=rlQosOffsetStatus, rlQosOutQueueStatisticsCountrID=rlQosOutQueueStatisticsCountrID, rlQosValueQueue5=rlQosValueQueue5, rlQosPolicerCir=rlQosPolicerCir, rlQosCosQueueId=rlQosCosQueueId, rlQosAceTidxTuple3=rlQosAceTidxTuple3, rlQosAceTidxTimeRange=rlQosAceTidxTimeRange, RlQosTimeBasedAclWeekPeriodicList=RlQosTimeBasedAclWeekPeriodicList, rlQosAggregatePolicerStatisticsInProfileCounterValue=rlQosAggregatePolicerStatisticsInProfileCounterValue, rlQosAceTuple5=rlQosAceTuple5, rlQosOffsetType=rlQosOffsetType, rlQosValueQueue7=rlQosValueQueue7, InterfaceType=InterfaceType, rlQosDscpToDpEntry=rlQosDscpToDpEntry, rlQosTimeBasedAclPeriodicEnd=rlQosTimeBasedAclPeriodicEnd, AclObjectType=AclObjectType, rlQosCosQueueDefaultMapQueueId=rlQosCosQueueDefaultMapQueueId, rlQosDscpQueueDefaultMapEntry=rlQosDscpQueueDefaultMapEntry, rlQosPolicerStatus=rlQosPolicerStatus, rlQosAceTidxAccount=rlQosAceTidxAccount, rlQosTimeBasedAclPeriodicTable=rlQosTimeBasedAclPeriodicTable, rlQosCirQueue5=rlQosCirQueue5, rlQosAceTable=rlQosAceTable, rlQosTcpQueueValue=rlQosTcpQueueValue, rlQosOutQueueStatisticsQueueAll=rlQosOutQueueStatisticsQueueAll, rlQueueProfileName=rlQueueProfileName, rlQosAclName=rlQosAclName, rlQosEfManageTable=rlQosEfManageTable, rlQosTupleValue1=rlQosTupleValue1, rlQosCbsQueue6=rlQosCbsQueue6, rlQosPolicyClassRefTable=rlQosPolicyClassRefTable, rlQosProfileName=rlQosProfileName, rlQosIfPolicerIn=rlQosIfPolicerIn, rlQosAceTidxStatus=rlQosAceTidxStatus, rlQosPredefBlockAclStatus=rlQosPredefBlockAclStatus, rlQosCosQueueDefaultMapTable=rlQosCosQueueDefaultMapTable, rlQosPortRateLimitStatus=rlQosPortRateLimitStatus, ClassOffsetType=ClassOffsetType, rlQosOutQueueStatisticsPortAll=rlQosOutQueueStatisticsPortAll, rlQosRedProbDp1=rlQosRedProbDp1, rlQosAceTuple6=rlQosAceTuple6, rlQosOffsetTuplePointer=rlQosOffsetTuplePointer, rlQosQueueNum=rlQosQueueNum)
