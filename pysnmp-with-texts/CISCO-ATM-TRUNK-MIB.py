#
# PySNMP MIB module CISCO-ATM-TRUNK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ATM-TRUNK-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:51:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
BulkConfigResult, ConfigIterator = mibBuilder.importSymbols("CISCO-TC", "BulkConfigResult", "ConfigIterator")
CiscoAal2ProfileNumber, CiscoAal2ProfileType = mibBuilder.importSymbols("CISCO-VOICE-AALX-PROFILE-MIB", "CiscoAal2ProfileNumber", "CiscoAal2ProfileType")
CvcSpeechCoderRate, CvcCoderTypeRate = mibBuilder.importSymbols("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "CvcSpeechCoderRate", "CvcCoderTypeRate")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
OwnerString, = mibBuilder.importSymbols("RMON-MIB", "OwnerString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Gauge32, TimeTicks, MibIdentifier, Integer32, Bits, Unsigned32, ObjectIdentity, ModuleIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter64, IpAddress, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "TimeTicks", "MibIdentifier", "Integer32", "Bits", "Unsigned32", "ObjectIdentity", "ModuleIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter64", "IpAddress", "iso")
DisplayString, TextualConvention, TruthValue, TimeStamp, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue", "TimeStamp", "RowStatus")
ciscoAtmTrunkMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 351))
ciscoAtmTrunkMIB.setRevisions(('2003-07-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoAtmTrunkMIB.setRevisionsDescriptions(('Initial version of the MIB module.',))
if mibBuilder.loadTexts: ciscoAtmTrunkMIB.setLastUpdated('200307180000Z')
if mibBuilder.loadTexts: ciscoAtmTrunkMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoAtmTrunkMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-voice-gateway@cisco.com')
if mibBuilder.loadTexts: ciscoAtmTrunkMIB.setDescription('The MIB for voice and Nx64 over ATM Trunking applications. The following lists the abbreviations used in this MIB: AAL ATM Adaption Layer AIS Alarm Indication Signal CID Channel Identifier DSP Digital Signal Processing DTMF Dual Tone Multi Frequency FCS Frame Check Sequence TDM Time Division Multiplexing PVC Permanent Virtual Circuit RAI Remote Alarm Indication RDI Remote Defect Indication SID Silence Insertion Descriptor SVC Switched Virtual Circuit VAD Voice Activity Detection VBD Voice Band Data VC Virtual Circuit ')
cAtmTrunkMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 351, 0))
cAtmTrunkMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 351, 1))
cAtmTrunkCidConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 1))
cAtmTrunkCidConnStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 2))
cAtmTrunkAal1Config = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 3))
cAtmTrunkAal1ConnStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 4))
cAtmTrunkAal5Config = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 5))
cAtmTrunkAal5ConnStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 6))
class Counter32SinceReset(TextualConvention, Unsigned32):
    description = 'This textual convention defines a counter type that is similar to Counter32 but can be reset. The value of the objects of this type indicates the statistics since last counter reset. Once the value of the counter object of this type reaches its maximum, it will restart from zero again. '
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

catmtCidTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 1, 1), )
if mibBuilder.loadTexts: catmtCidTable.setStatus('current')
if mibBuilder.loadTexts: catmtCidTable.setDescription('This table is used to establish the mapping of one or more DS0 channels from a single DS1 interface to an AAL2 connection identified by a Channel IDentification number(CID). This table is created and used for ATM AAL2 trunking applications including both voice and data. ')
catmtCidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ATM-TRUNK-MIB", "catmtCidVpi"), (0, "CISCO-ATM-TRUNK-MIB", "catmtCidVci"), (0, "CISCO-ATM-TRUNK-MIB", "catmtCid"))
if mibBuilder.loadTexts: catmtCidEntry.setStatus('current')
if mibBuilder.loadTexts: catmtCidEntry.setDescription('An entry in the catmtCidTable. Each entry represents an AAL2 trunking connection which is uniquely identified by the PVC index and the CID number. An AAL2 trunking connection is established by binding one or more DS0 channels from a single DS1 interface to an AAL2 ATM connection identified by the CID. The Channel IDentification (CID) is the standard term used to identify an ATM AAL2 connection (ITU-T I.366.2). CID is unique within a VC, either a PVC or SVC connection. ')
catmtCidVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: catmtCidVpi.setStatus('current')
if mibBuilder.loadTexts: catmtCidVpi.setDescription('This object is the VPI value of an ATM PVC connection. ')
catmtCidVci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: catmtCidVci.setStatus('current')
if mibBuilder.loadTexts: catmtCidVci.setDescription('This object is the VCI value of an ATM PVC connection. ')
catmtCid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 255)))
if mibBuilder.loadTexts: catmtCid.setReference('ITU-T recommendation I.366.2. ')
if mibBuilder.loadTexts: catmtCid.setStatus('current')
if mibBuilder.loadTexts: catmtCid.setDescription('This object is the CID of an ATM AAL2 connection, it is unique within a PVC or SVC connection. The CID number at both sides of an AAL2 connection must be the same. Value of 0 is not used, and values of 1 to 7 are reserved for layer management by ITU-T I.366.2 standard. ')
catmtCidDs1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 1, 1, 1, 4), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: catmtCidDs1.setStatus('current')
if mibBuilder.loadTexts: catmtCidDs1.setDescription("The value of this object equals to the 'ifIndex' of the DS1 interface. This object is mandatory when adding a CID entry. Once a CID entry is added, this object can not be modified. ")
catmtCidDs0GroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: catmtCidDs0GroupIndex.setStatus('current')
if mibBuilder.loadTexts: catmtCidDs0GroupIndex.setDescription("An arbitrary index that uniquely identifies a DS0 group which contains one or more DS0(s) within a DS1 interface specified by 'catmtCidDs1'. This object is mandatory when adding a CID entry. Once a CID entry is added, this object can not be modified. ")
catmtCidProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 1, 1, 1, 6), CiscoAal2ProfileType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: catmtCidProfileType.setStatus('current')
if mibBuilder.loadTexts: catmtCidProfileType.setDescription("This object specifies the type of the AAL2 CODEC profile. The combination of the profile type and profile number specified by 'catmtCidProfileNumber' defines an AAL2 CODEC profile. This parameter is mandatory for adding and a voice trunking CID entry. This object is applicable when catmtCidNx64Enable is is set to 'false'. It is used for voice trunking applications only. ")
catmtCidProfileNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 1, 1, 1, 7), CiscoAal2ProfileNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: catmtCidProfileNumber.setReference(' ITU-T recommendation I.366.2.')
if mibBuilder.loadTexts: catmtCidProfileNumber.setStatus('current')
if mibBuilder.loadTexts: catmtCidProfileNumber.setDescription("This object specifies the AAL2 CODEC profile number. The combination of profile type and profile number defines an AAL2 CODEC profile. A profile contains one or more entries, with each entry specifying an encoding algorithm and information regarding how the TDM data is to be packed into a packet. This parameter is mandatory for adding a voice trunking CID entry. This object is applicable when catmtCidNx64Enable is is set to 'false'. It is used for voice trunking applications only. ")
catmtCidVoiceCodec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 1, 1, 1, 8), CvcSpeechCoderRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: catmtCidVoiceCodec.setStatus('current')
if mibBuilder.loadTexts: catmtCidVoiceCodec.setDescription("This object specifies the CODEC type used for the AAL2 trunking connection. The following table lists the CODEC types specified in each profile table by ITU I.366.2 standard. ---------------------------------------------------- Profile Profile Packet type Number CODEC SID time(ms) ---------------------------------------------------- ITU 1 G.711u No SID 5 G.711a No SID 5 ---------------------------------------------------- ITU 2 G.711u SIDG 5 G.711a SIDG 5 ---------------------------------------------------- ITU 3 G.711u SIDG 5 G.711a SIDG 5 G726-40 SIDG 5 G726-32 SIDG 5 G726-24 SIDG 5 G726-16 SIDG 5 ---------------------------------------------------- ITU 7 G.711u SIDG 5 G.711a SIDG 5 G.729ab SID729 10 G.729a No SID 10 ---------------------------------------------------- ITU 8 G.711u No SID 5 G.711a No SID 5 G.726-32 No SID 5 G.729ab SID729 10 G.729a SID729 10 ---------------------------------------------------- Custom 100 G.711u SIDG 5 G.711a SIDG 5 G.726-32 SIGD 10 ---------------------------------------------------- Custom 101 G.711u No SID 5 G.711a No SID 5 G.726-32 No SID 10 G.729ab SID729 10 G.729a No SID 10 ---------------------------------------------------- Custom 110 G.711u SIDG 5 G.711a SIDG 5 G.726-32 SIDG 10 G.729ab SID729 30 G.729a No SID 30 ---------------------------------------------------- Custom 200 clearChan No SID 5 ---------------------------------------------------- This object can only be set to the CODECs defined by the profile specified by catmtCidProfileType and catmtCidProfileNumber. This object is applicable when catmtCidNx64Enable is is set to 'false'. It is used for voice trunking applications only. This object is mandatory when adding a voice trunking CID entry. ")
catmtCidVBDCodec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 1, 1, 1, 9), CvcCoderTypeRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: catmtCidVBDCodec.setStatus('current')
if mibBuilder.loadTexts: catmtCidVBDCodec.setDescription("This object specifies the CODEC type to be used for Voice Band Data (VBD) upspeed. Upspeed is to change the transmission rate of a voice interface to a higher rate of CODEC type for fax/modem transportation. This object is applicable when catmtCidNx64Enable is is set to 'false'. It is used for voice trunking applications only. This object is mandatory when adding a voice trunking CID entry. ")
catmtCidNx64Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 1, 1, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: catmtCidNx64Enable.setStatus('current')
if mibBuilder.loadTexts: catmtCidNx64Enable.setDescription("This object specifies whether a CID entry is in the Nx64 packet stream mode. When this object is set to 'false', the CID connection is for voice trunking applications only; when it is set to 'true', the CID connection is for data trunking using Nx64 packet stream (N>=1). This object can not be modified. ")
catmtCidNx64Profile = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: catmtCidNx64Profile.setStatus('current')
if mibBuilder.loadTexts: catmtCidNx64Profile.setDescription("This object specifies the Nx64 data profile for an AAL2 data trunking connection. The value of this object is a valid index of the cdapNx64ProfileTable in the CISCO-DATA-AALX-PROFILE-MIB. This object is only applicable when catmtCidNx64Enable is set to 'true'. ")
catmtCidStateBitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 1, 1, 1, 12), Bits().clone(namedValues=NamedValues(("pvcAdminDown", 0), ("pvcFailure", 1), ("extAIS", 2), ("extRAI", 3), ("aal2ConnAIS", 4), ("aal2ConnRDI", 5), ("lineAlarm", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtCidStateBitMap.setReference(' ITU-T recommendation I.366.2 Annex N.')
if mibBuilder.loadTexts: catmtCidStateBitMap.setStatus('current')
if mibBuilder.loadTexts: catmtCidStateBitMap.setDescription("This object is used to indicate the state of the CID. All bits setting to 0 which means status 'okay'. ")
catmtCidRepetition = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 1, 1, 1, 13), ConfigIterator().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: catmtCidRepetition.setStatus('current')
if mibBuilder.loadTexts: catmtCidRepetition.setDescription("This object is used to repeatedly apply the writable objects of catmtCidTable specified in the same SNMP PDU starting from the row defined by the index object for the number of rows specified by this object. The repetition operation works differently for data trunking and voice trunking applications. When catmtCidNx64Enable is set to 'false' (voice trunking), it is iterated through the value of DS0's and CID number. When catmtCidNx64Enable is set to 'true' (data trunking), the order of repetition operation is iterated through the value of DS1 index and CID number. (1) For voice trunking applications: At each iteration, the value of CID (catmtCid), DS0 (catmtCidDs0GroupIndex) and DS1(catmtCidDs1) will be incremented. When the value of catmtCidDs0GroupIndex reaches its maximum, catmtCidDs1 will be incremented to the next logical order of DS1 interface. (2) For data trunking applications: At each iteration, the value of catmtCid, catmtCidDs1 will be incremented. In other words, the Nx64 packet stream repetition iterates on the DS1, with each DS1 interface having the same DS0 group (catmtCidDs0GroupIndex) configuration. The repetition iteration will stop once the value of catmtCid reaches its maximum value 255 or when the next CID is not available or already configured for different type of trunking application. For example, a non-Nx64 repetition will stop if the next CID has been configured for Nx64 packet stream trunking, and vise versa. The repetition will also stop if the next contiguous DS0 group index is not available. The maximum value of this object is 248 which is the maximum number of CID or AAL2 connections allowed within a VC connection. ")
catmtCidRepetitionOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 1, 1, 1, 14), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: catmtCidRepetitionOwner.setStatus('current')
if mibBuilder.loadTexts: catmtCidRepetitionOwner.setDescription('This object is used for error reporting of the bulk provisioning operation specified by catmtCidRepetition. The value of this object is set by the SNMP manager with its own identifier at the time of setting catmtCidRepetition to issue the bulk provisioning operation. Later on, the SNMP manager checks the value of this object. If it matches its own name, the value of catmtCidRepetitionResult will be set to indicate the result of bulk operation initiated by this SNMP manager. ')
catmtCidRepetitionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 1, 1, 1, 15), BulkConfigResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtCidRepetitionResult.setStatus('current')
if mibBuilder.loadTexts: catmtCidRepetitionResult.setDescription("This object indicates the result of the bulk provisioning specified in catmtCidRepetition. The format might look at (but not limited to): 'COMPLETION=<number of rows completed before any error occurred>/<number of rows was designated>, ERROR=<error code>/<index where the error occurred>: <error text>' For example: 'COMPLETION=22/100,ERROR=38/44:Invalid DS1 line coding for the line type' ")
catmtCidRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 1, 1, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: catmtCidRowStatus.setStatus('current')
if mibBuilder.loadTexts: catmtCidRowStatus.setDescription('This object is used for adding/deleting the entries from the catmtCidTable. In order to create a CID entry, the following parameters are mandatory and must be provided: For voice trunking applications: catmtDs1, catmtDs0GroupIndex, catmtCidProfileType, catmtCidProfileNumber, catmtCidVoiceCodec, catmtCidVBDCodec For data trunking applications: catmtDs1, catmtDs0GroupIndex ')
catmtCidStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 2, 1), )
if mibBuilder.loadTexts: catmtCidStatsTable.setStatus('current')
if mibBuilder.loadTexts: catmtCidStatsTable.setDescription('This table contains the statistical information on a per CID connection basis for AAL2 Trunking applications. ')
catmtCidStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ATM-TRUNK-MIB", "catmtCidVpi"), (0, "CISCO-ATM-TRUNK-MIB", "catmtCidVci"), (0, "CISCO-ATM-TRUNK-MIB", "catmtCid"))
if mibBuilder.loadTexts: catmtCidStatsEntry.setStatus('current')
if mibBuilder.loadTexts: catmtCidStatsEntry.setDescription('This table contains statistical information for an AAL2 connection. Each entry in this table corresponds to an AAL2 bearer connection that has been setup by mapping one or more DS1/DS0s to an AAL2 connection identified by CID. The entries in this table are implicitly created/deleted at the time of creation/deletion of entries in the catmtCidTable. ')
catmtCidSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 2, 1, 1, 1), Counter32SinceReset()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtCidSentPackets.setStatus('current')
if mibBuilder.loadTexts: catmtCidSentPackets.setDescription('This object indicates the number of packets sent towards network side since the connection setup. ')
catmtCidRcvdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 2, 1, 1, 2), Counter32SinceReset()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtCidRcvdPackets.setStatus('current')
if mibBuilder.loadTexts: catmtCidRcvdPackets.setDescription('This object indicates the count of packets received from network side since the connection setup. ')
catmtCidSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 2, 1, 1, 3), Counter32SinceReset()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtCidSentOctets.setStatus('current')
if mibBuilder.loadTexts: catmtCidSentOctets.setDescription('This object indicates the count of bytes sent towards network side since connection setup. ')
catmtCidRcvdOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 2, 1, 1, 4), Counter32SinceReset()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtCidRcvdOctets.setStatus('current')
if mibBuilder.loadTexts: catmtCidRcvdOctets.setDescription('This object indicates the count of bytes received from network since connection setup. ')
catmtCidLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 2, 1, 1, 5), Counter32SinceReset()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtCidLostPackets.setStatus('current')
if mibBuilder.loadTexts: catmtCidLostPackets.setDescription('This object indicates the count of packets lost in the egress direction (from the network). This number is computed based on the expected number of packets and the actual number of packets arrived from the network. ')
catmtCidJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 2, 1, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtCidJitter.setStatus('current')
if mibBuilder.loadTexts: catmtCidJitter.setDescription('This object indicates the jitter (a.k.a interarrival jitter). This value is determined by the gateway DSP and obtained by the processor running on gateway upon querying the DSP periodically. ')
catmtCidExtAISCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 2, 1, 1, 7), Counter32SinceReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtCidExtAISCnts.setReference('ITU-T G.366.2 Annex N')
if mibBuilder.loadTexts: catmtCidExtAISCnts.setStatus('current')
if mibBuilder.loadTexts: catmtCidExtAISCnts.setDescription('This object contains the number of external AIS AAL2 Type3 packets received. External AIS : alarm indication signal associated with a maintenance alarm detected on a defective maintenance span, that is transmitted in the direction of the defect as a substitute for normal signal. The purpose is to show the downstream entities that a defect has been identified and to prevent other maintenance alarms consequent to this first defect. ')
catmtCidExtRAICnts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 2, 1, 1, 8), Counter32SinceReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtCidExtRAICnts.setReference('ITU-T G.366.2 Annex N')
if mibBuilder.loadTexts: catmtCidExtRAICnts.setStatus('current')
if mibBuilder.loadTexts: catmtCidExtRAICnts.setDescription('This object contains the number of external RAI AAL2 Type3 packets received. External RAI is transmitted upstream from an entity that has detected defects persisting long enough to constitute a received signal failure. External RAI is to report in the backward direction to indicate there is an interruption of service in the forward direction. ')
catmtCidConnAISCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 2, 1, 1, 9), Counter32SinceReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtCidConnAISCnts.setReference('ITU-T G.366.2 Annex N')
if mibBuilder.loadTexts: catmtCidConnAISCnts.setStatus('current')
if mibBuilder.loadTexts: catmtCidConnAISCnts.setDescription('This object contains the number of external connection AIS AAL2 packets received. External Conn AIS is a Alarm Indicating Signal transmitted in the downstream direction from the AAL2 connecting point that first detects the defect affecting the AAL2 connection including defects indicated by the lower layers. ')
catmtCidConnRDICnts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 2, 1, 1, 10), Counter32SinceReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtCidConnRDICnts.setReference('ITU-T G.366.2 Annex N')
if mibBuilder.loadTexts: catmtCidConnRDICnts.setStatus('current')
if mibBuilder.loadTexts: catmtCidConnRDICnts.setDescription('This object contains the number of external connection RDI AAL2 packets received. External Connection RDI - is a signal transmitted in the upstream direction by an AAL2 endpoint that is in alarm state, as the result of having received an AAL2 connection AIS or having detected a defect that affects the AAL2 connection. ')
catmtCidNx64FramesTxToTDM = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 2, 1, 1, 11), Counter32SinceReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtCidNx64FramesTxToTDM.setStatus('current')
if mibBuilder.loadTexts: catmtCidNx64FramesTxToTDM.setDescription("This object contains the number of frames transmitted to the TDM interface. This object is only applicable when catmtCidNx64Mode is set to to 'hdlc'. ")
catmtCidNx64FramesRxFromTDM = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 2, 1, 1, 12), Counter32SinceReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtCidNx64FramesRxFromTDM.setStatus('current')
if mibBuilder.loadTexts: catmtCidNx64FramesRxFromTDM.setDescription("This object contains the number of frames received from the TDM interface. This object is only applicable when catmtCidNx64Mode is set to to 'hdlc'. ")
catmtCidNx64EncBytesTxToTDM = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 2, 1, 1, 13), Counter32SinceReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtCidNx64EncBytesTxToTDM.setStatus('current')
if mibBuilder.loadTexts: catmtCidNx64EncBytesTxToTDM.setDescription('This object contains the number of encoded bytes transmitted to the TDM interface. ')
catmtCidNx64EncBytesRxFromTDM = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 2, 1, 1, 14), Counter32SinceReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtCidNx64EncBytesRxFromTDM.setStatus('current')
if mibBuilder.loadTexts: catmtCidNx64EncBytesRxFromTDM.setDescription('This object contains the number of encoded bytes received from the TDM interface. ')
catmtCidNx64InvalidFCSFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 2, 1, 1, 15), Counter32SinceReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtCidNx64InvalidFCSFrames.setStatus('current')
if mibBuilder.loadTexts: catmtCidNx64InvalidFCSFrames.setDescription("This object contains the number of invalid frames received with invalid Frame Check Sequence (FCS) error. This object is only applicable when catmtCidNx64Mode is set to to 'hdlc'. ")
catmtCidNx64AbortSeqFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 2, 1, 1, 16), Counter32SinceReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtCidNx64AbortSeqFrames.setStatus('current')
if mibBuilder.loadTexts: catmtCidNx64AbortSeqFrames.setDescription("This object contains the number of invalid frames received with invalid frame abort sequence error. This object is only applicable when catmtCidNx64Mode is set to to 'hdlc'. ")
catmtCidNx64InvalidShortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 2, 1, 1, 17), Counter32SinceReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtCidNx64InvalidShortFrames.setStatus('current')
if mibBuilder.loadTexts: catmtCidNx64InvalidShortFrames.setDescription("This object contains the number of invalid short frames (length less than minimum length) received. This object is only applicable when catmtCidNx64Mode is set to to 'hdlc'. ")
catmtCidNx64InvalidLongFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 2, 1, 1, 18), Counter32SinceReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtCidNx64InvalidLongFrames.setStatus('current')
if mibBuilder.loadTexts: catmtCidNx64InvalidLongFrames.setDescription("This object contains the number of invalid long frames (length greater than maximum length) received. This object is only applicable when catmtCidNx64Mode is set to to 'hdlc'. ")
catmtCidNx64NoByteAlignErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 2, 1, 1, 19), Counter32SinceReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtCidNx64NoByteAlignErrorFrames.setStatus('current')
if mibBuilder.loadTexts: catmtCidNx64NoByteAlignErrorFrames.setDescription("This object contains the number of invalid frames received with no byte alignment. This object is only applicable when catmtCidNx64Mode is set to to 'hdlc'. ")
catmtCidNx64RASTimeOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 2, 1, 1, 20), Counter32SinceReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtCidNx64RASTimeOutFrames.setStatus('current')
if mibBuilder.loadTexts: catmtCidNx64RASTimeOutFrames.setDescription("This object contains the number of frames received with RAS timer timeout. This object is only applicable when catmtCidNx64Mode is set to to 'hdlc'. ")
catmtCidLastResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 2, 1, 1, 21), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtCidLastResetTime.setStatus('current')
if mibBuilder.loadTexts: catmtCidLastResetTime.setDescription('This object contains the value of sysUpTime when the last counter reset occurred. If no counter reset has occurred since the last time connection is established, this object will contain value of zero. ')
catmtCidCounterClear = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 2, 1, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: catmtCidCounterClear.setStatus('current')
if mibBuilder.loadTexts: catmtCidCounterClear.setDescription("When this object is set to value of true(1), all statistics counters with type of Counter32SinceReset in the table catmtCidStatsTable will be reset to zero. Setting this object to a value of false(2) has no implication. This object will always return 'false' upon any SNMP get operation. I ")
catmtAal1Table = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 3, 1), )
if mibBuilder.loadTexts: catmtAal1Table.setStatus('current')
if mibBuilder.loadTexts: catmtAal1Table.setDescription('This table is used to establish the mapping of a DS0 to an AAL1 ATM connection. This table is created and used for ATM AAL1 trunking applications only. ')
catmtAal1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ATM-TRUNK-MIB", "catmtAal1Vpi"), (0, "CISCO-ATM-TRUNK-MIB", "catmtAal1Vci"))
if mibBuilder.loadTexts: catmtAal1Entry.setStatus('current')
if mibBuilder.loadTexts: catmtAal1Entry.setDescription('An entry in the catmtAal1Table. Each entry represents an AAL1 trunking connection which is uniquely identified by the PVC index. An AAL1 trunking connection is established by binding one or more DS0(s) from one single DS1 interface to an AAL1 ATM connection identified the PVC index. ')
catmtAal1Vpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: catmtAal1Vpi.setStatus('current')
if mibBuilder.loadTexts: catmtAal1Vpi.setDescription('This object is the VPI value of an ATM PVC connection. ')
catmtAal1Vci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 3, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: catmtAal1Vci.setStatus('current')
if mibBuilder.loadTexts: catmtAal1Vci.setDescription('This object is the VCI value of an ATM PVC connection. ')
catmtAal1Ds1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 3, 1, 1, 3), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: catmtAal1Ds1.setStatus('current')
if mibBuilder.loadTexts: catmtAal1Ds1.setDescription("The value of this object is equivalent to the 'ifIndex' of the DS1 interface. This object is mandatory when adding an AAL1 entry. Once an AAL1 entry is added, this object can not be modified. ")
catmtAal1Ds0GroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: catmtAal1Ds0GroupIndex.setStatus('current')
if mibBuilder.loadTexts: catmtAal1Ds0GroupIndex.setDescription("An arbitrary index that uniquely identifies one or a group of DS0s to be connected to an AAL1 trunking connection. When catmtAal1Nx64Enable is set to 'false', the AAL1 trunking connection can only be a mapping of one single DS0 to one AAL1 ATM connection. This object is mandatory when adding an AAL1 entry. Once an AAL1 entry is added, this object can not be modified. ")
catmtAal1Nx64Profile = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: catmtAal1Nx64Profile.setStatus('current')
if mibBuilder.loadTexts: catmtAal1Nx64Profile.setDescription('This object specifies the Nx64 AAL1 data profile for an AAL1 trunking connection. The value of this object is a valid index of cdapNx64Aal1ProfileTable in CISCO-DATA-AALX-PROFILE-MIB. ')
catmtAal1RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 3, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: catmtAal1RowStatus.setStatus('current')
if mibBuilder.loadTexts: catmtAal1RowStatus.setDescription('This object is used for adding/deleting the entries from the catmtAal1Table. In order to create an AAL1 trunking entry, the following parameters are mandatory and must be provided: catmtAal1Ds1, catmtAal1Ds0GroupIdx ')
catmtAal1StatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 4, 1), )
if mibBuilder.loadTexts: catmtAal1StatsTable.setStatus('current')
if mibBuilder.loadTexts: catmtAal1StatsTable.setDescription('This table contains the statistics information on a per AAL1 connection basis for ATM AAL1 Trunking applications. ')
catmtAal1StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ATM-TRUNK-MIB", "catmtAal1Vpi"), (0, "CISCO-ATM-TRUNK-MIB", "catmtAal1Vci"))
if mibBuilder.loadTexts: catmtAal1StatsEntry.setStatus('current')
if mibBuilder.loadTexts: catmtAal1StatsEntry.setDescription('This table contains statistics information for an AAL1 trunking connection. Each entry in this table corresponds to an AAL1 connection that has been setup by binding an DS0 to an AAL1 connection identified by (ifIndex, catmtAal1Vpi, catmtAal1Vci). The entries in this table are implicitly created/deleted at the time of creation/deletion of entries in the catmtAal1Table. ')
catmtAal1TxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 4, 1, 1, 1), Counter32SinceReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtAal1TxCells.setStatus('current')
if mibBuilder.loadTexts: catmtAal1TxCells.setDescription('This object contains the number of ATM AAL1 cells transmitted from gateway to ATM network. ')
catmtAal1RxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 4, 1, 1, 2), Counter32SinceReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtAal1RxCells.setStatus('current')
if mibBuilder.loadTexts: catmtAal1RxCells.setDescription('This object contains the number of ATM AAL1 cells gateway has received from ATM network. ')
catmtAal1TxPayloadBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 4, 1, 1, 3), Counter32SinceReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtAal1TxPayloadBytes.setStatus('current')
if mibBuilder.loadTexts: catmtAal1TxPayloadBytes.setDescription('This object contains the number of payload bytes transmitted from gateway to ATM network. ')
catmtAal1RxPayloadBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 4, 1, 1, 4), Counter32SinceReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtAal1RxPayloadBytes.setStatus('current')
if mibBuilder.loadTexts: catmtAal1RxPayloadBytes.setDescription('This object contains the number of payload bytes gateway has received from ATM network. ')
catmtAal1Jitter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 4, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtAal1Jitter.setStatus('current')
if mibBuilder.loadTexts: catmtAal1Jitter.setDescription('This object indicates the jitter (a.k.a interarrival jitter). The value of this object is determined by the gateway DSP and obtained by the processor running on gateway upon querying the DSP periodically. ')
catmtAal1LastResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 4, 1, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtAal1LastResetTime.setStatus('current')
if mibBuilder.loadTexts: catmtAal1LastResetTime.setDescription('This object contains the value of sysUpTime when the last counter reset occurred. If no counter reset has occurred since the last time system is up, this object will contain value of zero. ')
catmtAal1CounterClear = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 4, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: catmtAal1CounterClear.setStatus('current')
if mibBuilder.loadTexts: catmtAal1CounterClear.setDescription("When this object is set to value of true(1), all statistics counters with type of Counter32SinceReset in the table catmtAal1StatsTable will be reset to zero. Setting this object to value of false(2) has no implication. This object will always return 'false' upon any SNMP get operation. I ")
catmtAal5Table = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 5, 1), )
if mibBuilder.loadTexts: catmtAal5Table.setStatus('current')
if mibBuilder.loadTexts: catmtAal5Table.setDescription('This table is used to establish the mapping of a DS0 to an AAL5 ATM connection. This table is created and used for ATM AAL5 trunking applications only. ')
catmtAal5Entry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ATM-TRUNK-MIB", "catmtAal5Vpi"), (0, "CISCO-ATM-TRUNK-MIB", "catmtAal5Vci"))
if mibBuilder.loadTexts: catmtAal5Entry.setStatus('current')
if mibBuilder.loadTexts: catmtAal5Entry.setDescription('An entry in the catmtAal5Table. Each entry represents an AAL5 trunking connection which is uniquely identified by the PVC index. An AAL5 trunking connection is established by binding a DS0 group voice interface containing one or more DS0 channels from one single DS1 interface to an AAL5 ATM connection identified the PVC index. ')
catmtAal5Vpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 5, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: catmtAal5Vpi.setStatus('current')
if mibBuilder.loadTexts: catmtAal5Vpi.setDescription('This object is the VPI value of an ATM PVC connection.')
catmtAal5Vci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 5, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: catmtAal5Vci.setStatus('current')
if mibBuilder.loadTexts: catmtAal5Vci.setDescription('This object is the VCI value of an ATM PVC connection.')
catmtAal5Ds1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 5, 1, 1, 3), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: catmtAal5Ds1.setStatus('current')
if mibBuilder.loadTexts: catmtAal5Ds1.setDescription("The value of this object equals to the 'ifIndex' of the DS1 interface. This object is mandatory when adding an AAL5 entry. Once an AAL5 entry is added, this object can not be modified. ")
catmtAal5Ds0GroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: catmtAal5Ds0GroupIndex.setStatus('current')
if mibBuilder.loadTexts: catmtAal5Ds0GroupIndex.setDescription('An arbitrary index that uniquely identifies a DS0 group containing one or more DS0 that connect to an AAL5 trunking connection. This object is mandatory when adding an AAL5 entry. Once an AAL5 entry is added, this object can not be modified. ')
catmtAal5Nx64Profile = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: catmtAal5Nx64Profile.setStatus('current')
if mibBuilder.loadTexts: catmtAal5Nx64Profile.setDescription('This object specifies the Nx64 data profile for an AAL5 trunking connection. The value of this object is a valid index of the cdapNx64ProfileTable in CISCO-DATA-AALX-PROFILE-MIB. ')
catmtAal5RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 5, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: catmtAal5RowStatus.setStatus('current')
if mibBuilder.loadTexts: catmtAal5RowStatus.setDescription('This object is used for adding/deleting the entries from the catmtAal5Table. In order to create an AAL5 trunking entry, the following parameters are mandatory and must be provided: catmtAal5Ds1, catmtAal5Ds0GroupIdx ')
catmtAal5StatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 6, 1), )
if mibBuilder.loadTexts: catmtAal5StatsTable.setStatus('current')
if mibBuilder.loadTexts: catmtAal5StatsTable.setDescription('This table contains the statistical information on a per AAL5 connection basis for ATM AAL5 Trunking applications. ')
catmtAal5StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ATM-TRUNK-MIB", "catmtAal5Vpi"), (0, "CISCO-ATM-TRUNK-MIB", "catmtAal5Vci"))
if mibBuilder.loadTexts: catmtAal5StatsEntry.setStatus('current')
if mibBuilder.loadTexts: catmtAal5StatsEntry.setDescription('This table contains statistical information for an AAL5 trunking connection. Each entry in this table corresponds to an AAL5 connection that has been setup by mapping one or more DS0(s) to an AAL5 connection identified by ifIndex, catmtAal5Vpi and atmtAal5Vci. The entries in this table are implicitly created/deleted at the time of creation/deletion of entries in the catmtAal5Table. ')
catmtAal5SentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 6, 1, 1, 1), Counter32SinceReset()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtAal5SentPackets.setStatus('current')
if mibBuilder.loadTexts: catmtAal5SentPackets.setDescription('This object indicates the number of packets sent towards network side since the connection is up. ')
catmtAal5RcvdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 6, 1, 1, 2), Counter32SinceReset()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtAal5RcvdPackets.setStatus('current')
if mibBuilder.loadTexts: catmtAal5RcvdPackets.setDescription('This object indicates the count of packets received from network side since the connection setup. ')
catmtAal5SentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 6, 1, 1, 3), Counter32SinceReset()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtAal5SentOctets.setStatus('current')
if mibBuilder.loadTexts: catmtAal5SentOctets.setDescription('This object indicates the count of bytes sent towards network side since connection setup. ')
catmtAal5RcvdOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 6, 1, 1, 4), Counter32SinceReset()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtAal5RcvdOctets.setStatus('current')
if mibBuilder.loadTexts: catmtAal5RcvdOctets.setDescription('This object indicates the count of bytes received from network since connection setup. ')
catmtAal5FramesTxToTDM = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 6, 1, 1, 5), Counter32SinceReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtAal5FramesTxToTDM.setStatus('current')
if mibBuilder.loadTexts: catmtAal5FramesTxToTDM.setDescription("This object contains the number of frames transmitted to the TDM interface. This object is only applicable when catmtAal5Nx64Mode is set to to 'hdlc'. ")
catmtAal5FramesRxFromTDM = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 6, 1, 1, 6), Counter32SinceReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtAal5FramesRxFromTDM.setStatus('current')
if mibBuilder.loadTexts: catmtAal5FramesRxFromTDM.setDescription("This object contains the number of frames received from the TDM interface. This object is only applicable when catmtAal5Nx64Mode is set to to 'hdlc'. ")
catmtAal5EncBytesTxToTDM = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 6, 1, 1, 7), Counter32SinceReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtAal5EncBytesTxToTDM.setStatus('current')
if mibBuilder.loadTexts: catmtAal5EncBytesTxToTDM.setDescription('This object contains the number of encoded bytes transmitted to the TDM interface. ')
catmtAal5EncBytesRxFromTDM = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 6, 1, 1, 8), Counter32SinceReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtAal5EncBytesRxFromTDM.setStatus('current')
if mibBuilder.loadTexts: catmtAal5EncBytesRxFromTDM.setDescription('This object contains the number of encoded bytes received from TDM interface. ')
catmtAal5InvalidFCSFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 6, 1, 1, 9), Counter32SinceReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtAal5InvalidFCSFrames.setStatus('current')
if mibBuilder.loadTexts: catmtAal5InvalidFCSFrames.setDescription("This object contains the number of invalid frames received with invalid Frame Check Sequence (FCS) error. This object is only applicable when catmtAal5Nx64Mode is set to to 'hdlc'. ")
catmtAal5AbortSeqFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 6, 1, 1, 10), Counter32SinceReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtAal5AbortSeqFrames.setStatus('current')
if mibBuilder.loadTexts: catmtAal5AbortSeqFrames.setDescription("This object contains the number of invalid frames received with invalid frame abort sequence error. This object is only applicable when catmtAal5Nx64Mode is set to to 'hdlc'. ")
catmtAal5InvalidShortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 6, 1, 1, 11), Counter32SinceReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtAal5InvalidShortFrames.setStatus('current')
if mibBuilder.loadTexts: catmtAal5InvalidShortFrames.setDescription("This object contains the number of invalid short frames (length less than minimum length) received. This object is only applicable when catmtAal5Nx64Mode is set to to 'hdlc'. ")
catmtAal5InvalidLongFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 6, 1, 1, 12), Counter32SinceReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtAal5InvalidLongFrames.setStatus('current')
if mibBuilder.loadTexts: catmtAal5InvalidLongFrames.setDescription("This object contains the number of invalid long frames (length greater than maximum length) received. This object is only applicable when catmtAal5Nx64Mode is set to to 'hdlc'. ")
catmtAal5NoByteAlignErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 6, 1, 1, 13), Counter32SinceReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtAal5NoByteAlignErrorFrames.setStatus('current')
if mibBuilder.loadTexts: catmtAal5NoByteAlignErrorFrames.setDescription("This object contains the number of invalid frames received with no byte alignment. This object is only applicable when catmtAal5Nx64Mode is set to to 'hdlc'. ")
catmtAal5LastResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 6, 1, 1, 14), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catmtAal5LastResetTime.setStatus('current')
if mibBuilder.loadTexts: catmtAal5LastResetTime.setDescription('This object contains the value of sysUpTime when the last counter reset occurred. If no counter reset has occurred since the last time system is up, this object will contain value of zero. ')
catmtAal5CounterClear = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 351, 1, 6, 1, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: catmtAal5CounterClear.setStatus('current')
if mibBuilder.loadTexts: catmtAal5CounterClear.setDescription("When this object is set to value of true(1), all statistics counters with type of Counter32SinceReset in the table catmtAal5StatsTable will be reset to zero. Setting this object to a value of false(2) has no implication. This object will always return 'false' upon any SNMP get operation. I ")
cAtmTrunkMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 351, 2))
cAtmTrunkMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 351, 2, 1))
cAtmTrunkMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 351, 2, 2))
cAtmTrunkMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 351, 2, 1, 1)).setObjects(("CISCO-ATM-TRUNK-MIB", "cAtmTrunkCidMIBGroup"), ("CISCO-ATM-TRUNK-MIB", "cAtmTrunkAal1MIBGroup"), ("CISCO-ATM-TRUNK-MIB", "cAtmTrunkAal5MIBGroup"), ("CISCO-ATM-TRUNK-MIB", "cAtmTrunkCidConnStatsMIBGroup"), ("CISCO-ATM-TRUNK-MIB", "cAtmTrunkAal1ConnStatsMIBGroup"), ("CISCO-ATM-TRUNK-MIB", "cAtmTrunkAal5ConnStatsMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cAtmTrunkMIBCompliance = cAtmTrunkMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: cAtmTrunkMIBCompliance.setDescription('Compliance statement for CISCO-VOICE-ATM-TRUNK-MIB.')
cAtmTrunkCidMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 351, 2, 2, 1)).setObjects(("CISCO-ATM-TRUNK-MIB", "catmtCidDs1"), ("CISCO-ATM-TRUNK-MIB", "catmtCidDs0GroupIndex"), ("CISCO-ATM-TRUNK-MIB", "catmtCidProfileType"), ("CISCO-ATM-TRUNK-MIB", "catmtCidProfileNumber"), ("CISCO-ATM-TRUNK-MIB", "catmtCidVoiceCodec"), ("CISCO-ATM-TRUNK-MIB", "catmtCidVBDCodec"), ("CISCO-ATM-TRUNK-MIB", "catmtCidNx64Enable"), ("CISCO-ATM-TRUNK-MIB", "catmtCidNx64Profile"), ("CISCO-ATM-TRUNK-MIB", "catmtCidStateBitMap"), ("CISCO-ATM-TRUNK-MIB", "catmtCidRepetition"), ("CISCO-ATM-TRUNK-MIB", "catmtCidRepetitionOwner"), ("CISCO-ATM-TRUNK-MIB", "catmtCidRepetitionResult"), ("CISCO-ATM-TRUNK-MIB", "catmtCidRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cAtmTrunkCidMIBGroup = cAtmTrunkCidMIBGroup.setStatus('current')
if mibBuilder.loadTexts: cAtmTrunkCidMIBGroup.setDescription('This group contains objects related to ATM AAL2 trunking CID level parameters.')
cAtmTrunkAal1MIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 351, 2, 2, 2)).setObjects(("CISCO-ATM-TRUNK-MIB", "catmtAal1Ds1"), ("CISCO-ATM-TRUNK-MIB", "catmtAal1Ds0GroupIndex"), ("CISCO-ATM-TRUNK-MIB", "catmtAal1Nx64Profile"), ("CISCO-ATM-TRUNK-MIB", "catmtAal1RowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cAtmTrunkAal1MIBGroup = cAtmTrunkAal1MIBGroup.setStatus('current')
if mibBuilder.loadTexts: cAtmTrunkAal1MIBGroup.setDescription('This group contains objects related to ATM AAL1 trunking parameters.')
cAtmTrunkAal5MIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 351, 2, 2, 3)).setObjects(("CISCO-ATM-TRUNK-MIB", "catmtAal5Ds1"), ("CISCO-ATM-TRUNK-MIB", "catmtAal5Ds0GroupIndex"), ("CISCO-ATM-TRUNK-MIB", "catmtAal5Nx64Profile"), ("CISCO-ATM-TRUNK-MIB", "catmtAal5RowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cAtmTrunkAal5MIBGroup = cAtmTrunkAal5MIBGroup.setStatus('current')
if mibBuilder.loadTexts: cAtmTrunkAal5MIBGroup.setDescription('This group contains objects related to ATM AAL5 trunking parameters.')
cAtmTrunkCidConnStatsMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 351, 2, 2, 4)).setObjects(("CISCO-ATM-TRUNK-MIB", "catmtCidSentPackets"), ("CISCO-ATM-TRUNK-MIB", "catmtCidRcvdPackets"), ("CISCO-ATM-TRUNK-MIB", "catmtCidSentOctets"), ("CISCO-ATM-TRUNK-MIB", "catmtCidRcvdOctets"), ("CISCO-ATM-TRUNK-MIB", "catmtCidLostPackets"), ("CISCO-ATM-TRUNK-MIB", "catmtCidJitter"), ("CISCO-ATM-TRUNK-MIB", "catmtCidExtAISCnts"), ("CISCO-ATM-TRUNK-MIB", "catmtCidExtRAICnts"), ("CISCO-ATM-TRUNK-MIB", "catmtCidConnAISCnts"), ("CISCO-ATM-TRUNK-MIB", "catmtCidConnRDICnts"), ("CISCO-ATM-TRUNK-MIB", "catmtCidNx64FramesTxToTDM"), ("CISCO-ATM-TRUNK-MIB", "catmtCidNx64FramesRxFromTDM"), ("CISCO-ATM-TRUNK-MIB", "catmtCidNx64EncBytesTxToTDM"), ("CISCO-ATM-TRUNK-MIB", "catmtCidNx64EncBytesRxFromTDM"), ("CISCO-ATM-TRUNK-MIB", "catmtCidNx64InvalidFCSFrames"), ("CISCO-ATM-TRUNK-MIB", "catmtCidNx64AbortSeqFrames"), ("CISCO-ATM-TRUNK-MIB", "catmtCidNx64InvalidShortFrames"), ("CISCO-ATM-TRUNK-MIB", "catmtCidNx64InvalidLongFrames"), ("CISCO-ATM-TRUNK-MIB", "catmtCidNx64NoByteAlignErrorFrames"), ("CISCO-ATM-TRUNK-MIB", "catmtCidNx64RASTimeOutFrames"), ("CISCO-ATM-TRUNK-MIB", "catmtCidLastResetTime"), ("CISCO-ATM-TRUNK-MIB", "catmtCidCounterClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cAtmTrunkCidConnStatsMIBGroup = cAtmTrunkCidConnStatsMIBGroup.setStatus('current')
if mibBuilder.loadTexts: cAtmTrunkCidConnStatsMIBGroup.setDescription('This group contains objects for AAL2 bearer connection statistics information used for ATM AAL2 trunking.')
cAtmTrunkAal1ConnStatsMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 351, 2, 2, 5)).setObjects(("CISCO-ATM-TRUNK-MIB", "catmtAal1TxCells"), ("CISCO-ATM-TRUNK-MIB", "catmtAal1RxCells"), ("CISCO-ATM-TRUNK-MIB", "catmtAal1TxPayloadBytes"), ("CISCO-ATM-TRUNK-MIB", "catmtAal1RxPayloadBytes"), ("CISCO-ATM-TRUNK-MIB", "catmtAal1Jitter"), ("CISCO-ATM-TRUNK-MIB", "catmtAal1LastResetTime"), ("CISCO-ATM-TRUNK-MIB", "catmtAal1CounterClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cAtmTrunkAal1ConnStatsMIBGroup = cAtmTrunkAal1ConnStatsMIBGroup.setStatus('current')
if mibBuilder.loadTexts: cAtmTrunkAal1ConnStatsMIBGroup.setDescription('This group contains objects for AAL1 connection statistics information used for ATM AAL1 trunking.')
cAtmTrunkAal5ConnStatsMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 351, 2, 2, 6)).setObjects(("CISCO-ATM-TRUNK-MIB", "catmtAal5SentPackets"), ("CISCO-ATM-TRUNK-MIB", "catmtAal5RcvdPackets"), ("CISCO-ATM-TRUNK-MIB", "catmtAal5SentOctets"), ("CISCO-ATM-TRUNK-MIB", "catmtAal5RcvdOctets"), ("CISCO-ATM-TRUNK-MIB", "catmtAal5FramesTxToTDM"), ("CISCO-ATM-TRUNK-MIB", "catmtAal5FramesRxFromTDM"), ("CISCO-ATM-TRUNK-MIB", "catmtAal5EncBytesTxToTDM"), ("CISCO-ATM-TRUNK-MIB", "catmtAal5EncBytesRxFromTDM"), ("CISCO-ATM-TRUNK-MIB", "catmtAal5InvalidFCSFrames"), ("CISCO-ATM-TRUNK-MIB", "catmtAal5AbortSeqFrames"), ("CISCO-ATM-TRUNK-MIB", "catmtAal5InvalidShortFrames"), ("CISCO-ATM-TRUNK-MIB", "catmtAal5InvalidLongFrames"), ("CISCO-ATM-TRUNK-MIB", "catmtAal5NoByteAlignErrorFrames"), ("CISCO-ATM-TRUNK-MIB", "catmtAal5LastResetTime"), ("CISCO-ATM-TRUNK-MIB", "catmtAal5CounterClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cAtmTrunkAal5ConnStatsMIBGroup = cAtmTrunkAal5ConnStatsMIBGroup.setStatus('current')
if mibBuilder.loadTexts: cAtmTrunkAal5ConnStatsMIBGroup.setDescription('This group contains objects for AAL5 bearer connection statistics information used for ATM AAL5 trunking.')
mibBuilder.exportSymbols("CISCO-ATM-TRUNK-MIB", catmtCidNx64EncBytesRxFromTDM=catmtCidNx64EncBytesRxFromTDM, catmtCidNx64InvalidFCSFrames=catmtCidNx64InvalidFCSFrames, catmtAal5SentOctets=catmtAal5SentOctets, Counter32SinceReset=Counter32SinceReset, cAtmTrunkAal5MIBGroup=cAtmTrunkAal5MIBGroup, cAtmTrunkCidConfig=cAtmTrunkCidConfig, catmtCidStatsTable=catmtCidStatsTable, catmtAal1Vci=catmtAal1Vci, catmtAal5StatsTable=catmtAal5StatsTable, catmtCidVoiceCodec=catmtCidVoiceCodec, cAtmTrunkAal1Config=cAtmTrunkAal1Config, catmtAal5SentPackets=catmtAal5SentPackets, catmtCidStateBitMap=catmtCidStateBitMap, catmtCidRepetitionResult=catmtCidRepetitionResult, catmtAal5Table=catmtAal5Table, catmtCidLastResetTime=catmtCidLastResetTime, catmtCidNx64Profile=catmtCidNx64Profile, cAtmTrunkAal5ConnStats=cAtmTrunkAal5ConnStats, catmtCidNx64NoByteAlignErrorFrames=catmtCidNx64NoByteAlignErrorFrames, catmtAal1StatsEntry=catmtAal1StatsEntry, catmtAal1Vpi=catmtAal1Vpi, cAtmTrunkCidMIBGroup=cAtmTrunkCidMIBGroup, catmtCidExtAISCnts=catmtCidExtAISCnts, catmtAal5RcvdOctets=catmtAal5RcvdOctets, cAtmTrunkAal5ConnStatsMIBGroup=cAtmTrunkAal5ConnStatsMIBGroup, catmtCidNx64InvalidShortFrames=catmtCidNx64InvalidShortFrames, catmtAal5CounterClear=catmtAal5CounterClear, catmtAal5RcvdPackets=catmtAal5RcvdPackets, catmtCid=catmtCid, catmtCidNx64EncBytesTxToTDM=catmtCidNx64EncBytesTxToTDM, catmtAal5LastResetTime=catmtAal5LastResetTime, catmtCidTable=catmtCidTable, catmtCidJitter=catmtCidJitter, catmtAal1LastResetTime=catmtAal1LastResetTime, catmtCidVBDCodec=catmtCidVBDCodec, catmtAal5Entry=catmtAal5Entry, catmtCidRcvdOctets=catmtCidRcvdOctets, catmtAal5StatsEntry=catmtAal5StatsEntry, catmtAal1Nx64Profile=catmtAal1Nx64Profile, catmtAal5AbortSeqFrames=catmtAal5AbortSeqFrames, catmtCidDs0GroupIndex=catmtCidDs0GroupIndex, cAtmTrunkMIBNotifications=cAtmTrunkMIBNotifications, cAtmTrunkMIBObjects=cAtmTrunkMIBObjects, catmtCidConnAISCnts=catmtCidConnAISCnts, catmtCidStatsEntry=catmtCidStatsEntry, catmtCidRcvdPackets=catmtCidRcvdPackets, catmtCidCounterClear=catmtCidCounterClear, catmtAal1StatsTable=catmtAal1StatsTable, catmtAal5NoByteAlignErrorFrames=catmtAal5NoByteAlignErrorFrames, cAtmTrunkAal1MIBGroup=cAtmTrunkAal1MIBGroup, catmtCidLostPackets=catmtCidLostPackets, catmtCidSentPackets=catmtCidSentPackets, catmtCidNx64InvalidLongFrames=catmtCidNx64InvalidLongFrames, catmtCidDs1=catmtCidDs1, catmtAal5Ds0GroupIndex=catmtAal5Ds0GroupIndex, catmtCidNx64FramesTxToTDM=catmtCidNx64FramesTxToTDM, catmtAal5Nx64Profile=catmtAal5Nx64Profile, cAtmTrunkMIBGroups=cAtmTrunkMIBGroups, catmtAal1Jitter=catmtAal1Jitter, catmtAal1Ds0GroupIndex=catmtAal1Ds0GroupIndex, catmtCidRepetition=catmtCidRepetition, catmtAal5RowStatus=catmtAal5RowStatus, PYSNMP_MODULE_ID=ciscoAtmTrunkMIB, catmtAal5Ds1=catmtAal5Ds1, catmtCidProfileType=catmtCidProfileType, cAtmTrunkAal5Config=cAtmTrunkAal5Config, catmtCidRepetitionOwner=catmtCidRepetitionOwner, catmtAal1RxPayloadBytes=catmtAal1RxPayloadBytes, catmtAal5EncBytesRxFromTDM=catmtAal5EncBytesRxFromTDM, catmtAal5Vci=catmtAal5Vci, catmtAal1RxCells=catmtAal1RxCells, catmtCidSentOctets=catmtCidSentOctets, cAtmTrunkMIBCompliances=cAtmTrunkMIBCompliances, catmtAal1Ds1=catmtAal1Ds1, catmtCidExtRAICnts=catmtCidExtRAICnts, cAtmTrunkCidConnStats=cAtmTrunkCidConnStats, catmtAal1CounterClear=catmtAal1CounterClear, cAtmTrunkMIBConformance=cAtmTrunkMIBConformance, catmtAal5FramesRxFromTDM=catmtAal5FramesRxFromTDM, catmtAal5InvalidLongFrames=catmtAal5InvalidLongFrames, catmtCidVci=catmtCidVci, catmtCidRowStatus=catmtCidRowStatus, catmtCidNx64AbortSeqFrames=catmtCidNx64AbortSeqFrames, cAtmTrunkAal1ConnStatsMIBGroup=cAtmTrunkAal1ConnStatsMIBGroup, catmtCidVpi=catmtCidVpi, catmtAal5EncBytesTxToTDM=catmtAal5EncBytesTxToTDM, catmtCidNx64FramesRxFromTDM=catmtCidNx64FramesRxFromTDM, catmtAal5Vpi=catmtAal5Vpi, catmtCidConnRDICnts=catmtCidConnRDICnts, ciscoAtmTrunkMIB=ciscoAtmTrunkMIB, cAtmTrunkAal1ConnStats=cAtmTrunkAal1ConnStats, catmtCidProfileNumber=catmtCidProfileNumber, catmtAal5InvalidShortFrames=catmtAal5InvalidShortFrames, catmtAal1TxCells=catmtAal1TxCells, catmtAal1Entry=catmtAal1Entry, catmtCidEntry=catmtCidEntry, catmtAal5FramesTxToTDM=catmtAal5FramesTxToTDM, cAtmTrunkCidConnStatsMIBGroup=cAtmTrunkCidConnStatsMIBGroup, cAtmTrunkMIBCompliance=cAtmTrunkMIBCompliance, catmtAal1Table=catmtAal1Table, catmtAal1RowStatus=catmtAal1RowStatus, catmtCidNx64RASTimeOutFrames=catmtCidNx64RASTimeOutFrames, catmtAal5InvalidFCSFrames=catmtAal5InvalidFCSFrames, catmtCidNx64Enable=catmtCidNx64Enable, catmtAal1TxPayloadBytes=catmtAal1TxPayloadBytes)
