#
# PySNMP MIB module CHIPNET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CHIPNET-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:48:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
DisplayString, = mibBuilder.importSymbols("RFC1155-SMI", "DisplayString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, enterprises, ModuleIdentity, Counter32, Counter64, MibIdentifier, NotificationType, Bits, ObjectIdentity, TimeTicks, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Gauge32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "enterprises", "ModuleIdentity", "Counter32", "Counter64", "MibIdentifier", "NotificationType", "Bits", "ObjectIdentity", "TimeTicks", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Gauge32", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
chipcom = MibIdentifier((1, 3, 6, 1, 4, 1, 49))
chipmib02 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2))
chipGen = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 1))
chipEcho = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 2))
chipProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3))
chipExperiment = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4))
chipTTY = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 5))
chipTFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 6))
chipDownload = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 7))
online = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1))
oebm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 2))
midnight = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 3))
workGroupHub = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4))
emm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 5))
chipBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 6))
trmm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 7))
fmm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 8))
focus1 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 9))
oeim = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 10))
chipExpTokenRing = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 1))
dot1dBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 14))
dot5 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1))
olAgents = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 1))
olConc = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 2))
olEnv = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 3))
olModules = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4))
olNets = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5))
olGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6))
olAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7))
olSpecMods = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4))
ol50nnMCTL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 3))
ol51nnMMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4))
ol51nnMFIB = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5))
ol51nnMUTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6))
ol51nnMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7))
ol51nnMBNC = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8))
ol51nnBEE = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9))
ol51nnRES = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10))
ol51nnREE = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11))
ol51nnMAUIF = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12))
ol51nnMAUIM = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13))
ol5208MTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14))
ol51nnMFP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15))
ol51nnMFBP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16))
ol51nnMTPL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17))
ol51nnMTPPL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18))
ol52nnMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19))
ol52nnMFR = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20))
ol51nnMTS = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21))
ol51nnMFL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22))
ol50nnMRCTL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 23))
ol51nnMFB = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24))
ol53nnMMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25))
ol53nnMFBMIC = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26))
ol53nnMFIBST = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27))
ol53nnMSTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28))
ol51nnMTPCL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29))
ol52nnBTT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30))
ol51nnIx = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31))
ol52nnMMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32))
ol50nnMHCTL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33))
olNet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1))
olEnet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2))
olTRnet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3))
olFDDInet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4))
hubSysGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 1))
hardwareGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 2))
softwareGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 3))
hubGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 4))
boardGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 5))
portGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 6))
alarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 7))
olThresh = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1))
olThreshControl = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 1))
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

olNetDPTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 1), )
if mibBuilder.loadTexts: olNetDPTable.setStatus('mandatory')
if mibBuilder.loadTexts: olNetDPTable.setDescription('A table that contains information linking physical backplane allocation to logical networks. This information is useful: (1) to determine the physical allocation of networks on the backplane, and (2) to determine the remaining capacity of the backplane for future network growth. Since unknown modules are managed via dip switches, this is useful in order to set the dips to the appropriate settings. Ethernet is a bus architecture. Once a path is allocated, all modules and ports can access that path. Token Ring and FDDI are ring architectures. Each module on a ring requires a path. Therefore, 4 paths could be used to link 4 modules together on one ring, or 2 modules on 2 separate rings. It is possible to have a module allocated to a ring (and thus a data path) without linking to another module. These rules can be used to determine the remaining capacity for network growth.')
olNetDPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 1, 1), ).setIndexNames((0, "CHIPNET-MIB", "olNetDPDataPath"))
if mibBuilder.loadTexts: olNetDPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olNetDPEntry.setDescription('A list of information about each data path in the concentrator.')
olNetDPDataPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("ethernet-path-1", 6), ("ethernet-path-2", 7), ("ethernet-path-3", 8), ("token-ring-path-1", 9), ("token-ring-path-2", 10), ("token-ring-path-3", 11), ("token-ring-path-4", 12), ("token-ring-path-5", 13), ("token-ring-path-6", 14), ("token-ring-path-7", 15), ("token-ring-path-8", 16), ("token-ring-path-9", 17), ("token-ring-path-10", 18), ("token-ring-path-11", 19), ("token-ring-path-12", 20), ("token-ring-path-13", 21), ("token-ring-path-14", 22), ("token-ring-path-15", 23), ("fddi-path-1", 24), ("fddi-path-2", 25), ("fddi-path-3", 26), ("fddi-path-4", 27), ("fddi-path-5", 28), ("fddi-path-6", 29), ("fddi-path-7", 30), ("fddi-path-8", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olNetDPDataPath.setStatus('mandatory')
if mibBuilder.loadTexts: olNetDPDataPath.setDescription('The data path on the backplane. Data paths between different protocols overlap. That is, an ethernet data path will overlap with multiple token ring and fddi data paths. ')
olNetDPNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("notUsed", 1), ("otherProto", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15), ("fddi-1", 16), ("fddi-2", 17), ("fddi-3", 18), ("fddi-4", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olNetDPNetID.setStatus('mandatory')
if mibBuilder.loadTexts: olNetDPNetID.setDescription('The network that this data path corresponds to. If the data path is not being used at all, notUsed(1) is the return value. If the data path is being used by another protocol, then otherProto(2) is the return value.')
olNetSecurityMACTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 2), )
if mibBuilder.loadTexts: olNetSecurityMACTable.setStatus('mandatory')
if mibBuilder.loadTexts: olNetSecurityMACTable.setDescription('A table of security configuration parameters and MAC addresses associated with every port with security configured in the concentrator.')
olNetSecurityMACEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 2, 1), ).setIndexNames((0, "CHIPNET-MIB", "olNetSecurityMACSlotIndex"), (0, "CHIPNET-MIB", "olNetSecurityMACPortIndex"), (0, "CHIPNET-MIB", "olNetSecurityMACAddress"))
if mibBuilder.loadTexts: olNetSecurityMACEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olNetSecurityMACEntry.setDescription('A list of security configuration parameters and MAC addresses associated with each port with security configured in the concentrator.')
olNetSecurityMACSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olNetSecurityMACSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olNetSecurityMACSlotIndex.setDescription('The slot number that contains this port.')
olNetSecurityMACPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olNetSecurityMACPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olNetSecurityMACPortIndex.setDescription('The port number within this slot.')
olNetSecurityMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 2, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olNetSecurityMACAddress.setStatus('mandatory')
if mibBuilder.loadTexts: olNetSecurityMACAddress.setDescription('The security MAC address assigned to this port.')
olNetSecurityMACMode = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olNetSecurityMACMode.setStatus('mandatory')
if mibBuilder.loadTexts: olNetSecurityMACMode.setDescription('The desired security mode for this port/address.')
olNetSecurityMACStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olNetSecurityMACStatus.setStatus('mandatory')
if mibBuilder.loadTexts: olNetSecurityMACStatus.setDescription('Each instance of the olNetSecurityMACTable associated with this olNetSecurityMACEntry (slot, port, and address) will be deleted by the agent if this olNetSecurityMACEntry is not equal to valid(1). Initial creation of instances occurs via a set operation on a specific slot/port/address.')
mibBuilder.exportSymbols("CHIPNET-MIB", ol51nnMAUIM=ol51nnMAUIM, ol51nnMTS=ol51nnMTS, olFDDInet=olFDDInet, fmm=fmm, olEnv=olEnv, ol51nnMFBP=ol51nnMFBP, ol50nnMCTL=ol50nnMCTL, trmm=trmm, chipcom=chipcom, ol51nnMBNC=ol51nnMBNC, olNetSecurityMACStatus=olNetSecurityMACStatus, emm=emm, ol51nnMTPCL=ol51nnMTPCL, olAlarm=olAlarm, oeim=oeim, olThreshControl=olThreshControl, olNetSecurityMACPortIndex=olNetSecurityMACPortIndex, focus1=focus1, workGroupHub=workGroupHub, ol51nnMMGT=ol51nnMMGT, ol51nnMTPPL=ol51nnMTPPL, ol51nnIx=ol51nnIx, olNetSecurityMACAddress=olNetSecurityMACAddress, hubSysGroup=hubSysGroup, olSpecMods=olSpecMods, ol51nnMTP=ol51nnMTP, portGroup=portGroup, olNetSecurityMACMode=olNetSecurityMACMode, ol53nnMFIBST=ol53nnMFIBST, ol53nnMSTP=ol53nnMSTP, olNetSecurityMACEntry=olNetSecurityMACEntry, oebm=oebm, olEnet=olEnet, chipProducts=chipProducts, hardwareGroup=hardwareGroup, olNetSecurityMACTable=olNetSecurityMACTable, olNets=olNets, olAgents=olAgents, ol53nnMFBMIC=ol53nnMFBMIC, chipExperiment=chipExperiment, dot1dBridge=dot1dBridge, ol51nnBEE=ol51nnBEE, midnight=midnight, olModules=olModules, chipDownload=chipDownload, ol51nnREE=ol51nnREE, olConc=olConc, ol51nnMAUIF=ol51nnMAUIF, olGroups=olGroups, ol52nnMTP=ol52nnMTP, MacAddress=MacAddress, chipTTY=chipTTY, ol51nnMFIB=ol51nnMFIB, boardGroup=boardGroup, dot5=dot5, ol51nnMFP=ol51nnMFP, ol51nnMUTP=ol51nnMUTP, ol51nnMFB=ol51nnMFB, olNetDPDataPath=olNetDPDataPath, chipExpTokenRing=chipExpTokenRing, chipmib02=chipmib02, ol50nnMHCTL=ol50nnMHCTL, olNetDPEntry=olNetDPEntry, softwareGroup=softwareGroup, chipGen=chipGen, chipBridge=chipBridge, olNet=olNet, alarmGroup=alarmGroup, ol53nnMMGT=ol53nnMMGT, olNetSecurityMACSlotIndex=olNetSecurityMACSlotIndex, chipTFTP=chipTFTP, olThresh=olThresh, olTRnet=olTRnet, ol51nnMTPL=ol51nnMTPL, ol51nnMFL=ol51nnMFL, ol52nnBTT=ol52nnBTT, olNetDPNetID=olNetDPNetID, ol50nnMRCTL=ol50nnMRCTL, ol52nnMFR=ol52nnMFR, ol51nnRES=ol51nnRES, chipEcho=chipEcho, ol5208MTP=ol5208MTP, olNetDPTable=olNetDPTable, hubGroup=hubGroup, online=online, ol52nnMMGT=ol52nnMMGT)
