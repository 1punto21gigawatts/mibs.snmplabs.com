#
# PySNMP MIB module FN10-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FN10-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:14:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
dot1dStpPortDesignatedBridge, dot1dStpForwardDelay, dot1dStpPortDesignatedPort, dot1dStpRootPort, dot1dStpHelloTime, dot1dStpPortDesignatedCost, dot1dStpPortState, dot1dStpDesignatedRoot, dot1dStpRootCost, dot1dStpPortDesignatedRoot, dot1dStpMaxAge = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dStpPortDesignatedBridge", "dot1dStpForwardDelay", "dot1dStpPortDesignatedPort", "dot1dStpRootPort", "dot1dStpHelloTime", "dot1dStpPortDesignatedCost", "dot1dStpPortState", "dot1dStpDesignatedRoot", "dot1dStpRootCost", "dot1dStpPortDesignatedRoot", "dot1dStpMaxAge")
ifOutDiscards, ifOutErrors, ifInErrors = mibBuilder.importSymbols("IF-MIB", "ifOutDiscards", "ifOutErrors", "ifInErrors")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, enterprises, Bits, NotificationType, NotificationType, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Integer32, ObjectIdentity, Gauge32, ModuleIdentity, Counter32, Counter64, MibIdentifier, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "enterprises", "Bits", "NotificationType", "NotificationType", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Integer32", "ObjectIdentity", "Gauge32", "ModuleIdentity", "Counter32", "Counter64", "MibIdentifier", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cmu = MibIdentifier((1, 3, 6, 1, 4, 1, 3))
sigma = MibIdentifier((1, 3, 6, 1, 4, 1, 97))
sys = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 1))
es_1xe = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 2)).setLabel("es-1xe")
sxhw = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 2, 1))
sxsw = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 2, 2))
sxadmin = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 2, 3))
sxswdis = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 2, 4))
sxaddr = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 2, 5))
sxif = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 2, 6))
sxdot3 = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 2, 7))
sxuart = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 2, 8))
sxfilter = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 2, 9))
sxdebug = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 2, 10))
sxlpbk = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 2, 11))
sxproto = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 2, 12))
sxtrunk = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 2, 13))
sxworkgroup = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 2, 14))
sxtrapMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 2, 15))
systems = MibIdentifier((1, 3, 6, 1, 4, 1, 3, 1))
mibs = MibIdentifier((1, 3, 6, 1, 4, 1, 3, 2))
cmuSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 3, 1, 1))
cmuKip = MibIdentifier((1, 3, 6, 1, 4, 1, 3, 1, 2))
cmuRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 3, 1, 3))
sysID = MibScalar((1, 3, 6, 1, 4, 1, 97, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("es-1xe-bridge", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysID.setStatus('mandatory')
sysReset = MibScalar((1, 3, 6, 1, 4, 1, 97, 1, 2), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysReset.setStatus('mandatory')
sysTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 97, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("traps-need-acks", 1), ("traps-not-acked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrapAck.setStatus('mandatory')
sysTrapTime = MibScalar((1, 3, 6, 1, 4, 1, 97, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrapTime.setStatus('mandatory')
sysTrapRetry = MibScalar((1, 3, 6, 1, 4, 1, 97, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrapRetry.setStatus('mandatory')
sysTrapPort = MibScalar((1, 3, 6, 1, 4, 1, 97, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapPort.setStatus('mandatory')
sxhwDiagCode = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxhwDiagCode.setStatus('mandatory')
sxhwManufData = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxhwManufData.setStatus('mandatory')
sxhwPortCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxhwPortCount.setStatus('mandatory')
sxhwPortTable = MibTable((1, 3, 6, 1, 4, 1, 97, 2, 1, 4), )
if mibBuilder.loadTexts: sxhwPortTable.setStatus('mandatory')
sxhwUpLink = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxhwUpLink.setStatus('mandatory')
if mibBuilder.loadTexts: sxhwUpLink.setDescription('Specifies whether the Up-Link I/O module is existed')
sxhwUpLinkManufData = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxhwUpLinkManufData.setStatus('mandatory')
if mibBuilder.loadTexts: sxhwUpLinkManufData.setDescription('This is a 32-byte array which contains the part number, serial number, and hardware revision level of the Up-Link I/O module. This array is valid only when the sxhwUplink is true. If sxhwUplink is false, it returns an error')
sxhwPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 2, 1, 4, 1), ).setIndexNames((0, "FN10-MIB", "sxhwPortIndex"))
if mibBuilder.loadTexts: sxhwPortEntry.setStatus('mandatory')
sxhwPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxhwPortIndex.setStatus('mandatory')
sxhwPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 255))).clone(namedValues=NamedValues(("port-csma", 1), ("port-uart", 6), ("port-none", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxhwPortType.setStatus('mandatory')
sxhwPortSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(13, 14, 16, 17, 18, 80, 255))).clone(namedValues=NamedValues(("csmacd-tpx", 13), ("csmacd-aui-tpx", 14), ("csmacd-100-tpx", 16), ("csmacd-100-fx", 17), ("csmacd-100-tp4", 18), ("uart-female-9pin", 80), ("no-information", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxhwPortSubType.setStatus('mandatory')
sxhwPortDiagPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("diag-passed", 1), ("diag-failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxhwPortDiagPassed.setStatus('mandatory')
sxhwAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 1, 4, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxhwAddr.setStatus('mandatory')
sxswNumber = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxswNumber.setStatus('mandatory')
sxswFilesetTable = MibTable((1, 3, 6, 1, 4, 1, 97, 2, 2, 2), )
if mibBuilder.loadTexts: sxswFilesetTable.setStatus('mandatory')
sxswFileset = MibTableRow((1, 3, 6, 1, 4, 1, 97, 2, 2, 2, 1), ).setIndexNames((0, "FN10-MIB", "sxswIndex"))
if mibBuilder.loadTexts: sxswFileset.setStatus('mandatory')
sxswIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("currently-executing", 1), ("next-boot", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxswIndex.setStatus('mandatory')
sxswDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxswDesc.setStatus('mandatory')
sxswCount = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxswCount.setStatus('mandatory')
sxswType = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 2, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxswType.setStatus('mandatory')
sxswSizes = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 2, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxswSizes.setStatus('mandatory')
sxswStarts = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 2, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxswStarts.setStatus('mandatory')
sxswBases = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 2, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxswBases.setStatus('mandatory')
sxswFlashBank = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("first-bank", 1), ("second-bank", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxswFlashBank.setStatus('mandatory')
sxadminFatalErr = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxadminFatalErr.setStatus('mandatory')
sxadminAnyPass = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxadminAnyPass.setStatus('mandatory')
sxadminGetPass = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxadminGetPass.setStatus('mandatory')
sxadminNMSIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxadminNMSIPAddr.setStatus('mandatory')
sxadminAlarmDynamic = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxadminAlarmDynamic.setStatus('mandatory')
sxadminAlarmAddressChange = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxadminAlarmAddressChange.setStatus('mandatory')
sxadminStorageFailure = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxadminStorageFailure.setStatus('mandatory')
sxadminAuthenticationFailure = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxadminAuthenticationFailure.setStatus('mandatory')
sxadminStatsExtended = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxadminStatsExtended.setStatus('mandatory')
sxadminNAMReceiveCongests = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxadminNAMReceiveCongests.setStatus('mandatory')
sxadminArpEntries = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxadminArpEntries.setStatus('mandatory')
sxadminArpStatics = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxadminArpStatics.setStatus('mandatory')
sxadminArpOverflows = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxadminArpOverflows.setStatus('mandatory')
sxadminIpEntries = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxadminIpEntries.setStatus('mandatory')
sxadminIpStatics = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxadminIpStatics.setStatus('mandatory')
sxadminStaticPreference = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxadminStaticPreference.setStatus('mandatory')
sxadminRipPreference = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxadminRipPreference.setStatus('mandatory')
sxadminRipRouteDiscards = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxadminRipRouteDiscards.setStatus('mandatory')
sxadminRebootConfig = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-change", 1), ("tftp-config", 2), ("revert-to-defaults", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxadminRebootConfig.setStatus('mandatory')
sxadminTempOK = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("temperature-normal", 1), ("temperature-too-hot", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxadminTempOK.setStatus('mandatory')
sxadminDisableButton = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxadminDisableButton.setStatus('mandatory')
sxadminButtonSelection = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("led-any-activity", 1), ("led-rx-activity", 2), ("led-tx-activity", 3), ("led-any-collision", 4), ("led-programmed", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxadminButtonSelection.setStatus('mandatory')
sxadminLEDProgramOption = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("program-led-any-error", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxadminLEDProgramOption.setStatus('mandatory')
sxadminNAMTxBufferCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxadminNAMTxBufferCount.setStatus('mandatory')
sxadminNAMRxBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxadminNAMRxBufferSize.setStatus('mandatory')
sxadminCpuUtilization = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low-cpu", 1), ("medium-cpu", 2), ("high-cpu", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxadminCpuUtilization.setStatus('mandatory')
sxadminExtraTrunkGrouping = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxadminExtraTrunkGrouping.setStatus('mandatory')
if mibBuilder.loadTexts: sxadminExtraTrunkGrouping.setDescription('If true(1), then as many as 8 trunk groups may be created, rather than the default limit of 4 trunk groups. When true(1), fewer links will be allowed in each trunk group, i.e., a maximum of 4 links will be used in each trunk group, instead of the default limit of 8 links per trunk group.')
sxswdisDesc = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 4, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxswdisDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sxswdisDesc.setDescription('The description (0-32 bytes) of the software set currently being downloaded, or a description of the software set last downloaded since the last boot.')
sxswdisAccess = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("protected", 1), ("any-software", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxswdisAccess.setStatus('mandatory')
if mibBuilder.loadTexts: sxswdisAccess.setDescription('The version of software that may be downloaded. Attempts to download other versions of software will be rejected. The value for swdisAccess is embedded within the software files that are to be distributed via TFTP. Its value may be derived from the names of the software files. the NMS operator may wish to use the following special values: protected (1) No software downloads will be accepted any-software (2) A software download of any version of new software will be accepted - this is the factory default')
sxswdisWriteStatus = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("in-progress", 1), ("success", 2), ("config-error", 3), ("flash-error", 4), ("config-and-flash-errors", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxswdisWriteStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sxswdisWriteStatus.setDescription('The status of the erase/write operation.')
sxswdisConfigIp = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 4, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxswdisConfigIp.setStatus('mandatory')
if mibBuilder.loadTexts: sxswdisConfigIp.setDescription('The IP address of the NMS (i.e., any IP host) that is allowed to use TFTP to send/retrieve the configuration file of the device. A value of 0.0.0.0 (which is the factory specified default) prevents any NMS from obtaining access, while a value of 255.255.255.255 gives every NMS permission.')
sxswdisConfigRetryTime = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxswdisConfigRetryTime.setStatus('mandatory')
if mibBuilder.loadTexts: sxswdisConfigRetryTime.setDescription('The number of seconds that the device will wait for an acknowledgment before it retransmits an unacknowledged TFTP data block. The factory specified default is 5 seconds.')
sxswdisConfigTotalTimeout = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxswdisConfigTotalTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: sxswdisConfigTotalTimeout.setDescription('The number of seconds that the device will wait for an acknowledgment to a data block before it cancels a TFTP session. The factory specified default is 25 seconds.')
sxaddrStatics = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxaddrStatics.setStatus('mandatory')
sxaddrDynamics = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxaddrDynamics.setStatus('mandatory')
sxaddrDynamicMax = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 3), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxaddrDynamicMax.setStatus('mandatory')
sxaddrDynamicOverflows = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxaddrDynamicOverflows.setStatus('mandatory')
sxaddrFlags = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxaddrFlags.setStatus('mandatory')
sxaddrMAC = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxaddrMAC.setStatus('mandatory')
sxaddrPort = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxaddrPort.setStatus('mandatory')
sxaddrOperation = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("read-random", 1), ("read-next", 2), ("zero-stats", 3), ("update", 4), ("delete", 5), ("read-block", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxaddrOperation.setStatus('mandatory')
sxaddrIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxaddrIndex.setStatus('mandatory')
sxaddrNext = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxaddrNext.setStatus('mandatory')
sxaddrAge = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 11), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxaddrAge.setStatus('mandatory')
sxaddrDestAge = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 12), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxaddrDestAge.setStatus('mandatory')
sxaddrRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 13), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxaddrRxPkts.setStatus('mandatory')
sxaddrRxChars = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 14), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxaddrRxChars.setStatus('mandatory')
sxaddrRxMultiPkts = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 15), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxaddrRxMultiPkts.setStatus('mandatory')
sxaddrRxFwdPkts = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 16), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxaddrRxFwdPkts.setStatus('mandatory')
sxaddrTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 17), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxaddrTxPkts.setStatus('mandatory')
sxaddrTxChars = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 18), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxaddrTxChars.setStatus('mandatory')
sxaddrBlockSize = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxaddrBlockSize.setStatus('mandatory')
sxaddrBlock = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 20), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxaddrBlock.setStatus('mandatory')
sxaddrAlarmMAC = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxaddrAlarmMAC.setStatus('mandatory')
sxifTable = MibTable((1, 3, 6, 1, 4, 1, 97, 2, 6, 1), )
if mibBuilder.loadTexts: sxifTable.setStatus('mandatory')
sxifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1), ).setIndexNames((0, "FN10-MIB", "sxifIndex"))
if mibBuilder.loadTexts: sxifEntry.setStatus('mandatory')
sxifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxifIndex.setStatus('mandatory')
sxifRxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxifRxCnt.setStatus('mandatory')
sxifTxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxifTxCnt.setStatus('mandatory')
sxifThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxifThreshold.setStatus('mandatory')
sxifThresholdTime = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 5), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxifThresholdTime.setStatus('mandatory')
sxifRxQueueThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxifRxQueueThresh.setStatus('mandatory')
sxifRxQueueThreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 7), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxifRxQueueThreshTime.setStatus('mandatory')
sxifTxStormCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxifTxStormCnt.setStatus('mandatory')
sxifTxStormTime = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 9), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxifTxStormTime.setStatus('mandatory')
sxifFilterFloodSourceSame = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxifFilterFloodSourceSame.setStatus('mandatory')
sxifFilterAllSourceLearned = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxifFilterAllSourceLearned.setStatus('mandatory')
sxifFilterNoLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxifFilterNoLearning.setStatus('mandatory')
sxifFilterAllDestLearned = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxifFilterAllDestLearned.setStatus('mandatory')
sxifCongestTime = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 14), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxifCongestTime.setStatus('mandatory')
sxifQueueTime = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 15), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxifQueueTime.setStatus('mandatory')
sxifFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxifFunction.setStatus('mandatory')
sxifRxPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxifRxPacket.setStatus('mandatory')
sxifRxHwFCSs = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxifRxHwFCSs.setStatus('mandatory')
sxifRxQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxifRxQueues.setStatus('mandatory')
sxifTxPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxifTxPacket.setStatus('mandatory')
sxifTxStorms = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxifTxStorms.setStatus('mandatory')
sxifTxDests = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxifTxDests.setStatus('mandatory')
sxifLan1 = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxifLan1.setStatus('mandatory')
sxifLan2 = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxifLan2.setStatus('mandatory')
sxifLan3 = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxifLan3.setStatus('mandatory')
sxifLan4 = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxifLan4.setStatus('mandatory')
sxifStatisticsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 27), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxifStatisticsTime.setStatus('mandatory')
sxifIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 28), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxifIpAddr.setStatus('mandatory')
sxifIpGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 29), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxifIpGroupAddr.setStatus('mandatory')
sxifForwardedChars = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxifForwardedChars.setStatus('mandatory')
sxifFilteredChars = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxifFilteredChars.setStatus('mandatory')
sxifDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 32), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxifDescr.setStatus('mandatory')
sxdot3Table = MibTable((1, 3, 6, 1, 4, 1, 97, 2, 7, 1), )
if mibBuilder.loadTexts: sxdot3Table.setStatus('mandatory')
sxdot3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 2, 7, 1, 1), ).setIndexNames((0, "FN10-MIB", "sxdot3Index"))
if mibBuilder.loadTexts: sxdot3Entry.setStatus('mandatory')
sxdot3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxdot3Index.setStatus('mandatory')
sxdot3TPLinkOK = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxdot3TPLinkOK.setStatus('mandatory')
sxdot3LedOn = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("led-on", 1), ("led-off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxdot3LedOn.setStatus('mandatory')
sxdot3RxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 7, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxdot3RxCollisions.setStatus('mandatory')
sxdot3RxRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 7, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxdot3RxRunts.setStatus('mandatory')
sxdot3RxLateColls = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 7, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxdot3RxLateColls.setStatus('mandatory')
sxdot3TxJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 7, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxdot3TxJabbers.setStatus('mandatory')
sxdot3TxBabbles = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 7, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxdot3TxBabbles.setStatus('mandatory')
sxdot3TxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 7, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxdot3TxCollisions.setStatus('mandatory')
sxdot3RxErrInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 7, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxdot3RxErrInfo.setStatus('mandatory')
sxdot3TxErrInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 7, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxdot3TxErrInfo.setStatus('mandatory')
sxdot3FuseOkay = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxdot3FuseOkay.setStatus('mandatory')
sxdot3SpeedSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("speed-10mbit", 1), ("speed-100mbit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxdot3SpeedSelection.setStatus('mandatory')
sxuartTable = MibTable((1, 3, 6, 1, 4, 1, 97, 2, 8, 1), )
if mibBuilder.loadTexts: sxuartTable.setStatus('mandatory')
sxuartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 2, 8, 1, 1), ).setIndexNames((0, "FN10-MIB", "sxuartIndex"))
if mibBuilder.loadTexts: sxuartEntry.setStatus('mandatory')
sxuartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxuartIndex.setStatus('mandatory')
sxuartBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("external-clock", 1), ("b1200-baud", 2), ("b2400-baud", 3), ("b4800-baud", 4), ("b9600-baud", 5), ("b19200-baud", 6), ("b38400-baud", 7), ("b56-kilobits", 8), ("b1544-kilobits", 9), ("b2048-kilobits", 10), ("b45-megabits", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxuartBaud.setStatus('mandatory')
sxuartAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 8, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxuartAlignmentErrors.setStatus('mandatory')
sxuartOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 8, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxuartOverrunErrors.setStatus('mandatory')
sxfilterMaxCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxfilterMaxCount.setStatus('mandatory')
sxfilterCurrentCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxfilterCurrentCount.setStatus('mandatory')
sxfilterDeleteID = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 9, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxfilterDeleteID.setStatus('mandatory')
sxfilterNextID = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxfilterNextID.setStatus('mandatory')
sxfilterAddID = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 9, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxfilterAddID.setStatus('mandatory')
sxfilterAddIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 9, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxfilterAddIndex.setStatus('mandatory')
sxfilterTable = MibTable((1, 3, 6, 1, 4, 1, 97, 2, 9, 7), )
if mibBuilder.loadTexts: sxfilterTable.setStatus('mandatory')
sxfilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1), ).setIndexNames((0, "FN10-MIB", "sxfilterIndex"))
if mibBuilder.loadTexts: sxfilterEntry.setStatus('mandatory')
sxfilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxfilterIndex.setStatus('mandatory')
sxfilterID = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxfilterID.setStatus('mandatory')
sxfilterPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxfilterPortNo.setStatus('mandatory')
sxfilterComboType = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxfilterComboType.setStatus('mandatory')
sxfilterFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxfilterFlags.setStatus('mandatory')
sxfilterFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("any-llc", 1), ("any-ethernet", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxfilterFrame.setStatus('mandatory')
sxfilterSource = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxfilterSource.setStatus('mandatory')
sxfilterSourceEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxfilterSourceEnd.setStatus('mandatory')
sxfilterDest = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxfilterDest.setStatus('mandatory')
sxfilterDestEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxfilterDestEnd.setStatus('mandatory')
sxfilterSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxfilterSourceMask.setStatus('mandatory')
sxfilterDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxfilterDestMask.setStatus('mandatory')
sxfilterSrcLan = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxfilterSrcLan.setStatus('mandatory')
sxfilterOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxfilterOffset.setStatus('mandatory')
sxfilterField = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxfilterField.setStatus('mandatory')
sxfilterMask = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 16), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxfilterMask.setStatus('mandatory')
sxfilterThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxfilterThreshold.setStatus('mandatory')
sxfilterThreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxfilterThreshTime.setStatus('mandatory')
sxfilterThreshFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxfilterThreshFlag.setStatus('mandatory')
sxfilterPktCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxfilterPktCnts.setStatus('mandatory')
sxfilterLastSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxfilterLastSrc.setStatus('mandatory')
sxfilterByteCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxfilterByteCnts.setStatus('mandatory')
sxdebugStringID = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxdebugStringID.setStatus('mandatory')
sxdebugString = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 10, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxdebugString.setStatus('mandatory')
sxdebugTable = MibTable((1, 3, 6, 1, 4, 1, 97, 2, 10, 3), )
if mibBuilder.loadTexts: sxdebugTable.setStatus('mandatory')
sxdebugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 2, 10, 3, 1), ).setIndexNames((0, "FN10-MIB", "sxdebugIndex"))
if mibBuilder.loadTexts: sxdebugEntry.setStatus('mandatory')
sxdebugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 10, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxdebugIndex.setStatus('mandatory')
sxdebugOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("examine", 1), ("modify", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxdebugOperation.setStatus('mandatory')
sxdebugBase = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 10, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxdebugBase.setStatus('mandatory')
sxdebugLength = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 10, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxdebugLength.setStatus('mandatory')
sxdebugData = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 10, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxdebugData.setStatus('mandatory')
sxlpbkTable = MibTable((1, 3, 6, 1, 4, 1, 97, 2, 11, 1), )
if mibBuilder.loadTexts: sxlpbkTable.setStatus('mandatory')
sxlpbkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 2, 11, 1, 1), ).setIndexNames((0, "FN10-MIB", "sxlpbkIndex"))
if mibBuilder.loadTexts: sxlpbkEntry.setStatus('mandatory')
sxlpbkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxlpbkIndex.setStatus('mandatory')
sxlpbkOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loopback-off", 1), ("loopback-local", 2), ("loopback-remote", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxlpbkOperation.setStatus('mandatory')
sxlpbkDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 11, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxlpbkDestAddr.setStatus('mandatory')
sxlpbkPktNum = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 11, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxlpbkPktNum.setStatus('mandatory')
sxlpbkInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 11, 1, 1, 5), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxlpbkInterval.setStatus('mandatory')
sxlpbkPktLength = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 11, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxlpbkPktLength.setStatus('mandatory')
sxlpbkIncrements = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 11, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxlpbkIncrements.setStatus('mandatory')
sxlpbkGoods = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 11, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxlpbkGoods.setStatus('mandatory')
sxlpbkErrorNoReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 11, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxlpbkErrorNoReceives.setStatus('mandatory')
sxlpbkErrorBadReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 11, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxlpbkErrorBadReceives.setStatus('mandatory')
sxlpbkErrorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 11, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxlpbkErrorSize.setStatus('mandatory')
sxlpbkErrorSent = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 11, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxlpbkErrorSent.setStatus('mandatory')
sxlpbkErrorReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 11, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxlpbkErrorReceived.setStatus('mandatory')
sxlpbkErrorOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 11, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxlpbkErrorOffset.setStatus('mandatory')
sxprotoTable = MibTable((1, 3, 6, 1, 4, 1, 97, 2, 12, 1), )
if mibBuilder.loadTexts: sxprotoTable.setStatus('mandatory')
if mibBuilder.loadTexts: sxprotoTable.setDescription('This table contains configuration information specify- ing the types of protocols used to bridge, route, translate, and filter frames for each port.')
sxprotoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 2, 12, 1, 1), ).setIndexNames((0, "FN10-MIB", "sxprotoIfIndex"))
if mibBuilder.loadTexts: sxprotoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sxprotoEntry.setDescription('Each entry in this table specifies which protocols are used by a particular port in the ES/1.')
sxprotoIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxprotoIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sxprotoIfIndex.setDescription("Identifies the interface (port) to which this entry's information belongs. The value of this variable corresponds to ifIndex, as well as most of the other port identification values in related MIBs.")
sxprotoBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("transparent", 1), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxprotoBridge.setStatus('mandatory')
if mibBuilder.loadTexts: sxprotoBridge.setDescription('Defines the bridging method to be applied to frames received at, or destined for, this port. Ethernet and FDDI ports may be configured for transparent, srt, or none. Token Ring ports may be configured for any of the four options. The UART may only be configured to none.')
sxprotoSuppressBpdu = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("suppressed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxprotoSuppressBpdu.setStatus('mandatory')
if mibBuilder.loadTexts: sxprotoSuppressBpdu.setDescription('Allows transmission of spanning tree protocol packets to be suppressed. If normal(1), 802.1d spanning tree packets and source-routing spanning tree packets are transmitted as usual. If suppressed(2), these packets are not transmitted. This option may be needed for in- teroperability with non-802.1d spanning tree protocols (e.g., DEC LanBridge 100).')
sxprotoRipListen = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxprotoRipListen.setStatus('mandatory')
if mibBuilder.loadTexts: sxprotoRipListen.setDescription('Specifies whether the port should listen for internet Routing Information Protocol (RFC-1058) packets, in order to build the routing table for the unit.')
sxprotoTrunking = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxprotoTrunking.setStatus('mandatory')
if mibBuilder.loadTexts: sxprotoTrunking.setDescription("Specifies whether SMC's trunking protocol (an extension to the standard Spanning Tree) is to be used over this port.")
sxsprotoCollisionRelief = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxsprotoCollisionRelief.setStatus('mandatory')
if mibBuilder.loadTexts: sxsprotoCollisionRelief.setDescription('Specifies whether the 10 Mbits Ethernet modified back-off algorithm is to be used. This option forces Ethernet port to stop the back-off timer when a transmit collision occured. It will start the timer again until no carrier on the wire. This option can reduce the number of transmit collisions. It may also slow down the transmit process under heavy loaded network.')
sxtrunkTable = MibTable((1, 3, 6, 1, 4, 1, 97, 2, 13, 1), )
if mibBuilder.loadTexts: sxtrunkTable.setStatus('mandatory')
if mibBuilder.loadTexts: sxtrunkTable.setDescription('This table describes the trunking status and attributes of the interfaces that are configured for bridge trunking.')
sxtrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 2, 13, 1, 1), ).setIndexNames((0, "FN10-MIB", "sxtrunkIfIndex"))
if mibBuilder.loadTexts: sxtrunkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sxtrunkEntry.setDescription('An entry exists in this table for each physical interface (port) that is configured for trunking.')
sxtrunkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxtrunkIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sxtrunkIfIndex.setDescription('Identifies a physical interface (port) which is configured for LAN trunking. The value of this variable corresponds to ifIndex, as well as most of the other port identification values in related MIBs.')
sxtrunkState = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("off", 1), ("closed", 2), ("oneway", 3), ("joined", 4), ("perturbed", 5), ("helddown", 6), ("broken", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxtrunkState.setStatus('mandatory')
if mibBuilder.loadTexts: sxtrunkState.setDescription('If off(1) then this link has not been enabled for trunking. If closed(2) then this link has not yet received any Trunking PDUs. If oneway(3) then incoming Trunking PDUs do not indicate that our PDUs are being successfully received by the far end. If joined(4) then this link is actively participating in the trunk group. If perturbed(5) then this link is actively participating in the trunk group; however, the transmission of data packets has been temporarily stopped due to a change in membership of the group. If helddown(6) then an error has been detected and the link is being held out-of-service until the error clears. If broken(7) then this link has been configured for trunking, but the port is physically non-operational.')
sxtrunkRemoteBridgeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 13, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxtrunkRemoteBridgeAddr.setStatus('mandatory')
if mibBuilder.loadTexts: sxtrunkRemoteBridgeAddr.setDescription('The MAC address portion of the bridge ID of the remote bridge.')
sxtrunkRemoteIp = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 13, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxtrunkRemoteIp.setStatus('mandatory')
if mibBuilder.loadTexts: sxtrunkRemoteIp.setDescription('The IP address of the remote bridge, as reported by that bridge for administrative purposes.')
sxtrunkLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("none", 1), ("in-bpdu", 2), ("multiple-bridges", 3), ("ack-lost", 4), ("standby", 5), ("too-many-groups", 6), ("no-ack", 7), ("perturbed-threshold", 8), ("self-connect", 9), ("port-moved", 10), ("multiple-lan-types", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxtrunkLastError.setStatus('mandatory')
if mibBuilder.loadTexts: sxtrunkLastError.setDescription('The last reason for failure when the link is in closed, oneway, or helddown state.')
sxtrunkLinkOrdinal = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 13, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxtrunkLinkOrdinal.setStatus('mandatory')
if mibBuilder.loadTexts: sxtrunkLinkOrdinal.setDescription('The position of this link within the trunk group.')
sxtrunkLinkCount = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 13, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxtrunkLinkCount.setStatus('mandatory')
if mibBuilder.loadTexts: sxtrunkLinkCount.setDescription('The number of links within the trunk group.')
sxtrunkLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 13, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxtrunkLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: sxtrunkLastChange.setDescription('The number of seconds since sxtrunkState changed.')
sxWorkGroupNextNumber = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxWorkGroupNextNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sxWorkGroupNextNumber.setDescription('The next available workgroup number to be used. When creating a new workgroup, it is recommended to read the value of the variable and use it to key into the workgroup table.')
sxWorkGroupCurrentCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 14, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxWorkGroupCurrentCount.setStatus('mandatory')
if mibBuilder.loadTexts: sxWorkGroupCurrentCount.setDescription('The total number of workgroups currently defined.')
sxWorkGroupMaxCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 14, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxWorkGroupMaxCount.setStatus('mandatory')
if mibBuilder.loadTexts: sxWorkGroupMaxCount.setDescription('The maximum number of workgroups allowed.')
sxWorkGroupTable = MibTable((1, 3, 6, 1, 4, 1, 97, 2, 14, 4), )
if mibBuilder.loadTexts: sxWorkGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: sxWorkGroupTable.setDescription('This table contains work group definitions for the interfaces.')
sxWorkGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 2, 14, 4, 1), ).setIndexNames((0, "FN10-MIB", "sxWorkGroupNumber"))
if mibBuilder.loadTexts: sxWorkGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sxWorkGroupEntry.setDescription('Each entry in this table contains a definition of a work group.')
sxWorkGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 14, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxWorkGroupNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sxWorkGroupNumber.setDescription('An integer that identifies the work group, used as an index to this table.')
sxWorkGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 14, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxWorkGroupName.setStatus('mandatory')
if mibBuilder.loadTexts: sxWorkGroupName.setDescription('A 1-16 character work group name.')
sxWorkGroupPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 14, 4, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxWorkGroupPorts.setStatus('mandatory')
if mibBuilder.loadTexts: sxWorkGroupPorts.setDescription('A list of all ports within the group. The first octet specified ports 1-8, the second 9-16, etc.')
sxWorkGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 14, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ip", 1), ("ipx", 2), ("all", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxWorkGroupType.setStatus('mandatory')
if mibBuilder.loadTexts: sxWorkGroupType.setDescription('The type of work group: all - no additional information needs to be supplied. ip - the IP network (and optionally, IP mask) must be supplied. ipx - the IPX network number may be supplied, or else all IPX network number will be assumed.')
sxWorkGroupIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 14, 4, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxWorkGroupIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sxWorkGroupIpAddress.setDescription('The IP network address.')
sxWorkGroupIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 14, 4, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxWorkGroupIpMask.setStatus('mandatory')
if mibBuilder.loadTexts: sxWorkGroupIpMask.setDescription('The IP network mask, if set to 0, the default network mask is applied.')
sxWorkGroupIpxNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 14, 4, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxWorkGroupIpxNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: sxWorkGroupIpxNetwork.setDescription('The IPX network number, 0 means all networks.')
sxtrapControlTable = MibTable((1, 3, 6, 1, 4, 1, 97, 2, 15, 1), )
if mibBuilder.loadTexts: sxtrapControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: sxtrapControlTable.setDescription('This table contains information about the severity of each trap and whether the trap is currently enable.')
sxtrapControl = MibTableRow((1, 3, 6, 1, 4, 1, 97, 2, 15, 1, 1), ).setIndexNames((0, "FN10-MIB", "sxtrapIndex"))
if mibBuilder.loadTexts: sxtrapControl.setStatus('mandatory')
sxtrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 15, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxtrapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sxtrapIndex.setDescription('The specific trap number.')
sxtrapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxtrapEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: sxtrapEnabled.setDescription('Enable or disable the generation of this trap.')
sxtrapSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("informational", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxtrapSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: sxtrapSeverity.setDescription('A user-definable severity, indicating the importance of the trap.')
sxtrapText = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 15, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxtrapText.setStatus('mandatory')
if mibBuilder.loadTexts: sxtrapText.setDescription('A description of the trap.')
sxtrapSeverityControlTable = MibTable((1, 3, 6, 1, 4, 1, 97, 2, 15, 2), )
if mibBuilder.loadTexts: sxtrapSeverityControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: sxtrapSeverityControlTable.setDescription('This table contains information about whether a class of traps of a particular severity are enabled or disabled.')
sxtrapSeverityControl = MibTableRow((1, 3, 6, 1, 4, 1, 97, 2, 15, 2, 1), ).setIndexNames((0, "FN10-MIB", "sxtrapSeverityControlSeverity"))
if mibBuilder.loadTexts: sxtrapSeverityControl.setStatus('mandatory')
sxtrapSeverityControlSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("informational", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxtrapSeverityControlSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: sxtrapSeverityControlSeverity.setDescription('A user-definable severity, indicating the importance of the trap.')
sxtrapSeverityEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 15, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxtrapSeverityEnable.setStatus('mandatory')
if mibBuilder.loadTexts: sxtrapSeverityEnable.setDescription('Enable or disable all traps of a given severity level.')
sxtrapIncludeText = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 15, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxtrapIncludeText.setStatus('mandatory')
if mibBuilder.loadTexts: sxtrapIncludeText.setDescription('Whether or not a formatted text string is included in the trap PDU.')
sxtrapTime = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 15, 4), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxtrapTime.setStatus('mandatory')
if mibBuilder.loadTexts: sxtrapTime.setDescription('The time, in centiseconds, which should expire between the sending of traps.')
sxtrapRetry = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 15, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxtrapRetry.setStatus('mandatory')
if mibBuilder.loadTexts: sxtrapRetry.setDescription('The number of times any enterprise-specific trap is to be sent for a given event. PDUs are retried using a truncated exponential backoff: 2 seconds, 4 seoncs, 8 seconds, 16 seconds, and then 32 seconds for all succeeding intervals.')
sxtrapEntryNumber = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 15, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxtrapEntryNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sxtrapEntryNumber.setDescription('The number of traps that are in the sxtrapTable.')
sxtrapTable = MibTable((1, 3, 6, 1, 4, 1, 97, 2, 15, 7), )
if mibBuilder.loadTexts: sxtrapTable.setStatus('mandatory')
if mibBuilder.loadTexts: sxtrapTable.setDescription('This table contains the latest traps that have been generated.')
sxtrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 2, 15, 7, 1), ).setIndexNames((0, "FN10-MIB", "sxtrapEntryIndex"))
if mibBuilder.loadTexts: sxtrapEntry.setStatus('mandatory')
sxtrapEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 15, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxtrapEntryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sxtrapEntryIndex.setDescription('A number representing the order in which the trap occurred in time. This 32 bit number can wrap.')
sxtrapEntryTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 15, 7, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxtrapEntryTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: sxtrapEntryTimeStamp.setDescription('The time at which the trap occurred.')
sxtrapEntryText = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 15, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxtrapEntryText.setStatus('mandatory')
if mibBuilder.loadTexts: sxtrapEntryText.setDescription('A description of the trap.')
sxtrapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 15, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxtrapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sxtrapNumber.setDescription('The specific trap number, as specified in the TRAP PDU.')
sxtrapEntrySeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 15, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("informational", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxtrapEntrySeverity.setStatus('mandatory')
if mibBuilder.loadTexts: sxtrapEntrySeverity.setDescription('A user-definable severity, indicating the importance of the trap.')
sxTempOKTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,1)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("FN10-MIB", "sxadminTempOK"), ("FN10-MIB", "sxhwManufData"))
if mibBuilder.loadTexts: sxTempOKTrap.setDescription("Sent whenever the module's temperature transitions from too hot to okay, and vice versa.")
sxWriteStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,2)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("FN10-MIB", "sxswdisWriteStatus"), ("FN10-MIB", "sxswdisDesc"))
if mibBuilder.loadTexts: sxWriteStatusTrap.setDescription('Sent when a bank of Flash EPROM has been erased. If sxswdisWriteStatus indicates success, then the unit is ready to be downloaded with the new software.')
sxPortFunctionsTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,3)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("FN10-MIB", "sxifFunction"))
if mibBuilder.loadTexts: sxPortFunctionsTrap.setDescription('Sent whenever the current functional state (active protocols) of the port has changed.')
sxRxQueuesTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,4)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("FN10-MIB", "sxifRxQueues"))
if mibBuilder.loadTexts: sxRxQueuesTrap.setDescription("Sent whenever the number of times that the port's receiver has stopped receiving packets due to buffer space shortages has exceeded the port's limit.")
sxTxStormFlagTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,5)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("FN10-MIB", "sxifTxStorms"))
if mibBuilder.loadTexts: sxTxStormFlagTrap.setDescription('Sent whenever multicast storm protection has been invoked for the port.')
sxTxCongestsTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,6)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("FN10-MIB", "sxadminNAMReceiveCongests"))
if mibBuilder.loadTexts: sxTxCongestsTrap.setDescription('Sent whenever packets destined for the unit itself were discarded due to lack of buffer space.')
sxFilterThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,7)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("FN10-MIB", "sxfilterLastSrc"), ("FN10-MIB", "sxfilterPortNo"))
if mibBuilder.loadTexts: sxFilterThreshTrap.setDescription("Sent whenever usage of a port's combination filter has exceeded the filter's limits.")
sxDebugStringIdTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,8)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("FN10-MIB", "sxdebugStringID"), ("FN10-MIB", "sxdebugString"))
if mibBuilder.loadTexts: sxDebugStringIdTrap.setDescription('Send whenever the unit has a debug text string to be displayed. The text strings are sent in a stream-like fashion.')
sxLpbkOperationTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,9)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("FN10-MIB", "sxlpbkOperation"), ("FN10-MIB", "sxlpbkErrorNoReceives"), ("FN10-MIB", "sxlpbkErrorBadReceives"))
if mibBuilder.loadTexts: sxLpbkOperationTrap.setDescription('Send whenever the unit has finished a loop back test, or a loop back error has been detected.')
sxTrunkStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,10)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("FN10-MIB", "sxtrunkState"))
if mibBuilder.loadTexts: sxTrunkStateTrap.setDescription('A trunking state change transition has occurred. The possible transitions are: CLOSED-ONEWAY ONEWAY-PERTURBED PERTURBED-JOINED JOINED-HELDDOWN CLOSED-HELDDOWN ONEWAY-HELDDOWN PERTURBED-HELDDOWN')
sxTrunkBridgeAddrTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,11)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("FN10-MIB", "sxtrunkRemoteBridgeAddr"))
if mibBuilder.loadTexts: sxTrunkBridgeAddrTrap.setDescription('The associated trunking MAC address of the bridge ID of the remote bridge has changed.')
sxTrunkIPAddrTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,12)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("FN10-MIB", "sxtrunkRemoteIp"))
if mibBuilder.loadTexts: sxTrunkIPAddrTrap.setDescription('The associated trunking IP address of the remote bridge has changed.')
sxTrunkErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,13)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("FN10-MIB", "sxtrunkLastError"))
if mibBuilder.loadTexts: sxTrunkErrorTrap.setDescription('An error has occurred in trunking.')
sxTrunkLinkOrdinalTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,14)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("FN10-MIB", "sxtrunkLinkOrdinal"))
if mibBuilder.loadTexts: sxTrunkLinkOrdinalTrap.setDescription("The port's index in the trunking group has changed.")
sxTrunkLinkCountTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,15)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("FN10-MIB", "sxtrunkLinkCount"))
if mibBuilder.loadTexts: sxTrunkLinkCountTrap.setDescription('The number of ports in the trunking group has changed.')
sxDiagUnitBootedTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,16)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("FN10-MIB", "sxadminFatalErr"))
if mibBuilder.loadTexts: sxDiagUnitBootedTrap.setDescription('The unit has booted. sxadminFatalErr contains information about why the unit rebooted.')
sxStorageFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,17)).setObjects(("FN10-MIB", "sxtrapSeverity"))
if mibBuilder.loadTexts: sxStorageFailureTrap.setDescription("Sent if the unit's Configuration EEPROM has failed. The unit will not be able to reboot, and must be returned to the factory.")
sxPortCongestedTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,18)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("IF-MIB", "ifOutDiscards"))
if mibBuilder.loadTexts: sxPortCongestedTrap.setDescription('Sent whenever outbound congestion control has been invoked for the port.')
sxTopChangeBegunTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,19)).setObjects(("FN10-MIB", "sxtrapSeverity"))
if mibBuilder.loadTexts: sxTopChangeBegunTrap.setDescription('The spanning tree topology has begun to change.')
sxTopChangeEndTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,20)).setObjects(("FN10-MIB", "sxtrapSeverity"))
if mibBuilder.loadTexts: sxTopChangeEndTrap.setDescription('The spanning tree topology has stopped changing.')
sxIfErrorsTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,21)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("IF-MIB", "ifInErrors"), ("IF-MIB", "ifOutErrors"))
if mibBuilder.loadTexts: sxIfErrorsTrap.setDescription("Sent whenever the number of hardware errors in received and transmitted packets has exceeded the port's limit.")
sxStRootIDTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,22)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("BRIDGE-MIB", "dot1dStpDesignatedRoot"))
if mibBuilder.loadTexts: sxStRootIDTrap.setDescription('The spanning tree root bridge ID for the unit has changed.')
sxStRootCostTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,23)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("BRIDGE-MIB", "dot1dStpRootCost"))
if mibBuilder.loadTexts: sxStRootCostTrap.setDescription("The unit's spanning tree cost to the root bridge has changed.")
sxStRootPortTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,24)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("BRIDGE-MIB", "dot1dStpRootPort"))
if mibBuilder.loadTexts: sxStRootPortTrap.setDescription("The unit's spanning tree root port has changed.")
sxStMaxAgeTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,25)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("BRIDGE-MIB", "dot1dStpMaxAge"))
if mibBuilder.loadTexts: sxStMaxAgeTrap.setDescription("The unit's spanning tree maximum age has changed.")
sxStHelloTimeTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,26)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("BRIDGE-MIB", "dot1dStpHelloTime"))
if mibBuilder.loadTexts: sxStHelloTimeTrap.setDescription("The unit's spanning tree hello time has changed.")
sxStForwardDelayTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,27)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("BRIDGE-MIB", "dot1dStpForwardDelay"))
if mibBuilder.loadTexts: sxStForwardDelayTrap.setDescription("The unit's spanning tree forward delay time has changed.")
sxStDesigRootTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,28)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("BRIDGE-MIB", "dot1dStpPortDesignatedRoot"))
if mibBuilder.loadTexts: sxStDesigRootTrap.setDescription('The Root Bridge ID in received Spanning Tree Configuration BPDUs from the port has changed.')
sxStPortDesigBridgeTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,29)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("BRIDGE-MIB", "dot1dStpPortDesignatedBridge"))
if mibBuilder.loadTexts: sxStPortDesigBridgeTrap.setDescription('The bridge ID of the spanning tree designated bridge of the LAN/WAN to which the port is attached has changed.')
sxStPortDesigCostTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,30)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("BRIDGE-MIB", "dot1dStpPortDesignatedCost"))
if mibBuilder.loadTexts: sxStPortDesigCostTrap.setDescription('The cost to the spanning tree root bridge from the designated port of the LAN/WAN to which the port is attached has changed.')
sxStPortDesigPortTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,31)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("BRIDGE-MIB", "dot1dStpPortDesignatedPort"))
if mibBuilder.loadTexts: sxStPortDesigPortTrap.setDescription('The port ID of the spanning tree designated port of the LAN/WAN to which the port is attached has changed.')
sxStPortStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,32)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("BRIDGE-MIB", "dot1dStpPortState"))
if mibBuilder.loadTexts: sxStPortStateTrap.setDescription('The spanning tree state of the port has changed.')
sxhwDiagTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,100)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("FN10-MIB", "sxhwDiagCode"))
if mibBuilder.loadTexts: sxhwDiagTrap.setDescription("Sent whenever the unit's diagnostics have indicated an error.")
mibBuilder.exportSymbols("FN10-MIB", sxTempOKTrap=sxTempOKTrap, sxfilterPktCnts=sxfilterPktCnts, sxaddrDestAge=sxaddrDestAge, sxaddrIndex=sxaddrIndex, sxifTxStormTime=sxifTxStormTime, sxtrapTable=sxtrapTable, sxswdisConfigIp=sxswdisConfigIp, sxdot3TxBabbles=sxdot3TxBabbles, sxswdis=sxswdis, sxadminStatsExtended=sxadminStatsExtended, sxtrapEnabled=sxtrapEnabled, sxPortFunctionsTrap=sxPortFunctionsTrap, sxfilterMask=sxfilterMask, sxFilterThreshTrap=sxFilterThreshTrap, sxhwPortTable=sxhwPortTable, sxfilterSource=sxfilterSource, sxifTxDests=sxifTxDests, sxaddrNext=sxaddrNext, sxtrapSeverityEnable=sxtrapSeverityEnable, sxifRxPacket=sxifRxPacket, sysTrapPort=sysTrapPort, sxifForwardedChars=sxifForwardedChars, sxDebugStringIdTrap=sxDebugStringIdTrap, sxStRootPortTrap=sxStRootPortTrap, sxswFilesetTable=sxswFilesetTable, sxfilterMaxCount=sxfilterMaxCount, sxfilterByteCnts=sxfilterByteCnts, sxWorkGroupCurrentCount=sxWorkGroupCurrentCount, sxTrunkErrorTrap=sxTrunkErrorTrap, sxifFunction=sxifFunction, sxadminRipPreference=sxadminRipPreference, sxaddrPort=sxaddrPort, sxfilterDestMask=sxfilterDestMask, sxfilterComboType=sxfilterComboType, sxdot3SpeedSelection=sxdot3SpeedSelection, sxadminCpuUtilization=sxadminCpuUtilization, sxfilterLastSrc=sxfilterLastSrc, sxlpbkPktNum=sxlpbkPktNum, sxifThresholdTime=sxifThresholdTime, sxhwUpLinkManufData=sxhwUpLinkManufData, sxStPortDesigBridgeTrap=sxStPortDesigBridgeTrap, sxlpbkDestAddr=sxlpbkDestAddr, sxdebugOperation=sxdebugOperation, sxtrapControlTable=sxtrapControlTable, sxfilterSrcLan=sxfilterSrcLan, sxdebugString=sxdebugString, sxlpbkErrorOffset=sxlpbkErrorOffset, sxadminAnyPass=sxadminAnyPass, sxfilterIndex=sxfilterIndex, sxprotoTable=sxprotoTable, sxWriteStatusTrap=sxWriteStatusTrap, sxlpbkOperation=sxlpbkOperation, sxadminNAMRxBufferSize=sxadminNAMRxBufferSize, sxproto=sxproto, sxlpbkTable=sxlpbkTable, sxDiagUnitBootedTrap=sxDiagUnitBootedTrap, sxadminNAMReceiveCongests=sxadminNAMReceiveCongests, sxadminExtraTrunkGrouping=sxadminExtraTrunkGrouping, sxifIndex=sxifIndex, sxifCongestTime=sxifCongestTime, sxtrapEntryText=sxtrapEntryText, sxswStarts=sxswStarts, sxTxCongestsTrap=sxTxCongestsTrap, sxswNumber=sxswNumber, sxtrunkLastError=sxtrunkLastError, sysTrapAck=sysTrapAck, sxdot3LedOn=sxdot3LedOn, sxdebug=sxdebug, sxStRootIDTrap=sxStRootIDTrap, sxfilterAddIndex=sxfilterAddIndex, sxtrunkIfIndex=sxtrunkIfIndex, sxprotoRipListen=sxprotoRipListen, sxaddrTxChars=sxaddrTxChars, sxtrunkLinkCount=sxtrunkLinkCount, sxTrunkBridgeAddrTrap=sxTrunkBridgeAddrTrap, sxStHelloTimeTrap=sxStHelloTimeTrap, sxswdisAccess=sxswdisAccess, sxlpbkErrorNoReceives=sxlpbkErrorNoReceives, sxtrapEntryTimeStamp=sxtrapEntryTimeStamp, sxifFilterFloodSourceSame=sxifFilterFloodSourceSame, sxifFilterAllSourceLearned=sxifFilterAllSourceLearned, sxadminAlarmDynamic=sxadminAlarmDynamic, sxswDesc=sxswDesc, sxtrunkRemoteIp=sxtrunkRemoteIp, sxtrapIncludeText=sxtrapIncludeText, sxlpbkIncrements=sxlpbkIncrements, sxhwDiagTrap=sxhwDiagTrap, sxRxQueuesTrap=sxRxQueuesTrap, sxifQueueTime=sxifQueueTime, sxfilterDest=sxfilterDest, sxswdisDesc=sxswdisDesc, sxif=sxif, sxhwPortSubType=sxhwPortSubType, sxlpbkErrorBadReceives=sxlpbkErrorBadReceives, sxhwAddr=sxhwAddr, sxadminButtonSelection=sxadminButtonSelection, sxaddrOperation=sxaddrOperation, sxaddrAge=sxaddrAge, sxaddrTxPkts=sxaddrTxPkts, sxswIndex=sxswIndex, sxtrunk=sxtrunk, sxaddrBlock=sxaddrBlock, sxifTxStormCnt=sxifTxStormCnt, sxdot3RxRunts=sxdot3RxRunts, sxlpbkGoods=sxlpbkGoods, sxtrunkLastChange=sxtrunkLastChange, sxifRxQueueThresh=sxifRxQueueThresh, sxfilterThreshFlag=sxfilterThreshFlag, sxlpbkEntry=sxlpbkEntry, sxtrapEntrySeverity=sxtrapEntrySeverity, sxaddrMAC=sxaddrMAC, sxdebugIndex=sxdebugIndex, sxTrunkLinkCountTrap=sxTrunkLinkCountTrap, sxfilterNextID=sxfilterNextID, sxStPortDesigPortTrap=sxStPortDesigPortTrap, cmuRouter=cmuRouter, sxadminAlarmAddressChange=sxadminAlarmAddressChange, sxaddrFlags=sxaddrFlags, sxhwManufData=sxhwManufData, sxStForwardDelayTrap=sxStForwardDelayTrap, sxswdisWriteStatus=sxswdisWriteStatus, sxswdisConfigRetryTime=sxswdisConfigRetryTime, cmuSNMP=cmuSNMP, sxfilterFlags=sxfilterFlags, sxTrunkStateTrap=sxTrunkStateTrap, sysTrapRetry=sysTrapRetry, sxadminArpStatics=sxadminArpStatics, sxWorkGroupEntry=sxWorkGroupEntry, sxtrapText=sxtrapText, sxaddrRxChars=sxaddrRxChars, sxadminIpEntries=sxadminIpEntries, sxaddr=sxaddr, sxTrunkLinkOrdinalTrap=sxTrunkLinkOrdinalTrap, sxtrunkState=sxtrunkState, sxWorkGroupMaxCount=sxWorkGroupMaxCount, sxdebugTable=sxdebugTable, sxdebugData=sxdebugData, sxfilterDeleteID=sxfilterDeleteID, sxWorkGroupNumber=sxWorkGroupNumber, sxtrapSeverity=sxtrapSeverity, sxifRxQueues=sxifRxQueues, sxswType=sxswType, sxStPortStateTrap=sxStPortStateTrap, sxsw=sxsw, sxifRxQueueThreshTime=sxifRxQueueThreshTime, sxifFilterAllDestLearned=sxifFilterAllDestLearned, sxdot3RxErrInfo=sxdot3RxErrInfo, sxlpbkPktLength=sxlpbkPktLength, sxlpbkErrorReceived=sxlpbkErrorReceived, sxStMaxAgeTrap=sxStMaxAgeTrap, sxtrunkLinkOrdinal=sxtrunkLinkOrdinal, sxfilterCurrentCount=sxfilterCurrentCount, sxprotoBridge=sxprotoBridge, sxtrapEntry=sxtrapEntry, sxadminStaticPreference=sxadminStaticPreference, sxhwPortIndex=sxhwPortIndex, cmu=cmu, sxtrapSeverityControl=sxtrapSeverityControl, sxadminFatalErr=sxadminFatalErr, sysID=sysID, sxdot3Table=sxdot3Table, sxaddrDynamics=sxaddrDynamics, sxdot3RxCollisions=sxdot3RxCollisions, sxfilterFrame=sxfilterFrame, sxifRxHwFCSs=sxifRxHwFCSs, mibs=mibs, sxprotoIfIndex=sxprotoIfIndex, sxuartAlignmentErrors=sxuartAlignmentErrors, sxStDesigRootTrap=sxStDesigRootTrap, sxaddrRxPkts=sxaddrRxPkts, sxadminRebootConfig=sxadminRebootConfig, sxStPortDesigCostTrap=sxStPortDesigCostTrap, sxWorkGroupType=sxWorkGroupType, sxswBases=sxswBases, sxTopChangeEndTrap=sxTopChangeEndTrap, sxIfErrorsTrap=sxIfErrorsTrap, sxaddrDynamicMax=sxaddrDynamicMax, sxtrapMgt=sxtrapMgt, sxdot3TPLinkOK=sxdot3TPLinkOK, sxfilterDestEnd=sxfilterDestEnd, sxfilterOffset=sxfilterOffset, sxadminRipRouteDiscards=sxadminRipRouteDiscards, sxWorkGroupTable=sxWorkGroupTable, sxifStatisticsTime=sxifStatisticsTime, sxdot3Index=sxdot3Index, sxfilterThreshTime=sxfilterThreshTime, sxWorkGroupIpAddress=sxWorkGroupIpAddress, sxifLan2=sxifLan2, sxadminArpEntries=sxadminArpEntries, sxfilterSourceMask=sxfilterSourceMask, sxfilterField=sxfilterField, sxprotoTrunking=sxprotoTrunking, sxTopChangeBegunTrap=sxTopChangeBegunTrap, sxdot3TxJabbers=sxdot3TxJabbers, sxifDescr=sxifDescr, sxdebugEntry=sxdebugEntry, sxifLan1=sxifLan1, sxWorkGroupName=sxWorkGroupName, sxdebugBase=sxdebugBase, sxStorageFailureTrap=sxStorageFailureTrap, sxPortCongestedTrap=sxPortCongestedTrap, sxuartIndex=sxuartIndex, sxtrunkRemoteBridgeAddr=sxtrunkRemoteBridgeAddr, sxWorkGroupPorts=sxWorkGroupPorts, sxfilterAddID=sxfilterAddID, sxworkgroup=sxworkgroup, sxaddrRxMultiPkts=sxaddrRxMultiPkts, sxhwUpLink=sxhwUpLink, sxuartOverrunErrors=sxuartOverrunErrors, sxifLan3=sxifLan3, sxtrunkEntry=sxtrunkEntry, sxadminArpOverflows=sxadminArpOverflows, sxswFileset=sxswFileset, sxhwPortEntry=sxhwPortEntry, sxlpbkErrorSent=sxlpbkErrorSent, sxhwPortCount=sxhwPortCount, systems=systems, sxaddrRxFwdPkts=sxaddrRxFwdPkts, sxlpbkIndex=sxlpbkIndex, sys=sys, sxifRxCnt=sxifRxCnt, sxifThreshold=sxifThreshold, sxuartTable=sxuartTable, sxfilterPortNo=sxfilterPortNo, sxdebugLength=sxdebugLength, sxtrapEntryIndex=sxtrapEntryIndex, sxifIpAddr=sxifIpAddr, sxadminTempOK=sxadminTempOK, sxifTxStorms=sxifTxStorms, sxtrapIndex=sxtrapIndex, sxtrapSeverityControlTable=sxtrapSeverityControlTable, sxtrapSeverityControlSeverity=sxtrapSeverityControlSeverity, sxswSizes=sxswSizes, sxdot3RxLateColls=sxdot3RxLateColls, sxswFlashBank=sxswFlashBank, sxtrapEntryNumber=sxtrapEntryNumber, sxlpbkInterval=sxlpbkInterval, sxWorkGroupIpxNetwork=sxWorkGroupIpxNetwork, sxtrapRetry=sxtrapRetry, sxifIpGroupAddr=sxifIpGroupAddr, sxuartBaud=sxuartBaud, sigma=sigma, sxdot3=sxdot3, sxadminIpStatics=sxadminIpStatics, sysReset=sysReset, sxadminAuthenticationFailure=sxadminAuthenticationFailure, sxifTxPacket=sxifTxPacket, sxswCount=sxswCount, sxuartEntry=sxuartEntry, sxTxStormFlagTrap=sxTxStormFlagTrap, sxaddrStatics=sxaddrStatics, sxhwDiagCode=sxhwDiagCode, sxhwPortDiagPassed=sxhwPortDiagPassed, sxadminLEDProgramOption=sxadminLEDProgramOption)
mibBuilder.exportSymbols("FN10-MIB", sxtrapNumber=sxtrapNumber, sxfilter=sxfilter, sxadmin=sxadmin, sxadminNMSIPAddr=sxadminNMSIPAddr, sxprotoEntry=sxprotoEntry, sxsprotoCollisionRelief=sxsprotoCollisionRelief, cmuKip=cmuKip, sxifLan4=sxifLan4, sysTrapTime=sysTrapTime, sxhwPortType=sxhwPortType, sxaddrAlarmMAC=sxaddrAlarmMAC, sxWorkGroupIpMask=sxWorkGroupIpMask, sxtrapTime=sxtrapTime, sxStRootCostTrap=sxStRootCostTrap, sxfilterSourceEnd=sxfilterSourceEnd, sxdebugStringID=sxdebugStringID, sxadminDisableButton=sxadminDisableButton, sxfilterTable=sxfilterTable, es_1xe=es_1xe, sxlpbk=sxlpbk, sxdot3TxCollisions=sxdot3TxCollisions, sxaddrBlockSize=sxaddrBlockSize, sxadminStorageFailure=sxadminStorageFailure, sxifTxCnt=sxifTxCnt, sxdot3TxErrInfo=sxdot3TxErrInfo, sxadminGetPass=sxadminGetPass, sxfilterID=sxfilterID, sxtrunkTable=sxtrunkTable, sxifTable=sxifTable, sxlpbkErrorSize=sxlpbkErrorSize, sxaddrDynamicOverflows=sxaddrDynamicOverflows, sxadminNAMTxBufferCount=sxadminNAMTxBufferCount, sxtrapControl=sxtrapControl, sxifFilteredChars=sxifFilteredChars, sxfilterThreshold=sxfilterThreshold, sxWorkGroupNextNumber=sxWorkGroupNextNumber, sxfilterEntry=sxfilterEntry, sxuart=sxuart, sxifFilterNoLearning=sxifFilterNoLearning, sxdot3Entry=sxdot3Entry, sxLpbkOperationTrap=sxLpbkOperationTrap, sxTrunkIPAddrTrap=sxTrunkIPAddrTrap, sxhw=sxhw, sxifEntry=sxifEntry, sxdot3FuseOkay=sxdot3FuseOkay, sxswdisConfigTotalTimeout=sxswdisConfigTotalTimeout, sxprotoSuppressBpdu=sxprotoSuppressBpdu)
