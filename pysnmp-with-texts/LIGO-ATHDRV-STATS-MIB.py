#
# PySNMP MIB module LIGO-ATHDRV-STATS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LIGO-ATHDRV-STATS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:07:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ligoMgmt, = mibBuilder.importSymbols("LIGOWAVE-MIB", "ligoMgmt")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, NotificationType, IpAddress, TimeTicks, Integer32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Unsigned32, Counter32, ObjectIdentity, Counter64, ModuleIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "NotificationType", "IpAddress", "TimeTicks", "Integer32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Unsigned32", "Counter32", "ObjectIdentity", "Counter64", "ModuleIdentity", "Gauge32")
TextualConvention, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress")
ligoAthDrvStatsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 32750, 3, 7))
ligoAthDrvStatsMIB.setRevisions(('2008-12-12 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ligoAthDrvStatsMIB.setRevisionsDescriptions(('First revision.',))
if mibBuilder.loadTexts: ligoAthDrvStatsMIB.setLastUpdated('200812120000Z')
if mibBuilder.loadTexts: ligoAthDrvStatsMIB.setOrganization('LigoWave')
if mibBuilder.loadTexts: ligoAthDrvStatsMIB.setContactInfo(' LigoWave Customer Support E-mail: support@ligowave.com')
if mibBuilder.loadTexts: ligoAthDrvStatsMIB.setDescription('The Atheros Driver Statistics MIB by LigoWave.')
ligoAthDrvStatsMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1))
ligoAthStatsTable = MibTable((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1), )
if mibBuilder.loadTexts: ligoAthStatsTable.setStatus('current')
if mibBuilder.loadTexts: ligoAthStatsTable.setDescription("Atheros driver's network traffic statistics table.")
ligoAthStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ligoAthStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ligoAthStatsEntry.setDescription("Atheros driver's network traffic statistics table entry.")
ligoAthWatchdogTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthWatchdogTimeouts.setStatus('current')
if mibBuilder.loadTexts: ligoAthWatchdogTimeouts.setDescription('Watchdog timeouts.')
ligoAthHardwareErrorInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthHardwareErrorInterrupts.setStatus('current')
if mibBuilder.loadTexts: ligoAthHardwareErrorInterrupts.setDescription('Hardware error interrupts.')
ligoAthBeaconMissInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthBeaconMissInterrupts.setStatus('current')
if mibBuilder.loadTexts: ligoAthBeaconMissInterrupts.setDescription('Beacon miss interrupts.')
ligoAthRecvOverrunInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthRecvOverrunInterrupts.setStatus('current')
if mibBuilder.loadTexts: ligoAthRecvOverrunInterrupts.setDescription('Received overrun interrupts.')
ligoAthRecvEolInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthRecvEolInterrupts.setStatus('current')
if mibBuilder.loadTexts: ligoAthRecvEolInterrupts.setDescription('Received EOL interrupts.')
ligoAthTxmitUnderrunInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthTxmitUnderrunInterrupts.setStatus('current')
if mibBuilder.loadTexts: ligoAthTxmitUnderrunInterrupts.setDescription('Transmission underrun interrupts.')
ligoAthTxManagementFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthTxManagementFrames.setStatus('current')
if mibBuilder.loadTexts: ligoAthTxManagementFrames.setDescription('Transmitted management frames.')
ligoAthTxFramesDiscQueueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthTxFramesDiscQueueDepth.setStatus('current')
if mibBuilder.loadTexts: ligoAthTxFramesDiscQueueDepth.setDescription('Transmit frames discarded due to queue depth.')
ligoAthTxFramesDiscDeviceGone = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthTxFramesDiscDeviceGone.setStatus('current')
if mibBuilder.loadTexts: ligoAthTxFramesDiscDeviceGone.setDescription('Transmit frames discarded due to device gone.')
ligoAthTxQueueFull = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthTxQueueFull.setStatus('current')
if mibBuilder.loadTexts: ligoAthTxQueueFull.setDescription('Transmit queue stopped because it is full.')
ligoAthTxEncapsulationFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthTxEncapsulationFailed.setStatus('current')
if mibBuilder.loadTexts: ligoAthTxEncapsulationFailed.setDescription('Transmit encapsulation failed.')
ligoAthTxFailedNoNode = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthTxFailedNoNode.setStatus('current')
if mibBuilder.loadTexts: ligoAthTxFailedNoNode.setDescription('Transmissions failed due to no node.')
ligoAthTxFailedNoDataTxBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthTxFailedNoDataTxBuffer.setStatus('current')
if mibBuilder.loadTexts: ligoAthTxFailedNoDataTxBuffer.setDescription('Transmissions failed due to no place in transmit buffer for data frames.')
ligoAthTxFailedNoMgtTxBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthTxFailedNoMgtTxBuffer.setStatus('current')
if mibBuilder.loadTexts: ligoAthTxFailedNoMgtTxBuffer.setDescription('Transmissions failed due to no place in transmit buffer for management frames.')
ligoAthTxFailedTooManyRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthTxFailedTooManyRetries.setStatus('current')
if mibBuilder.loadTexts: ligoAthTxFailedTooManyRetries.setDescription('Transmissions failed due to too many retries.')
ligoAthTxFailedFifoUnderrun = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthTxFailedFifoUnderrun.setStatus('current')
if mibBuilder.loadTexts: ligoAthTxFailedFifoUnderrun.setDescription('Transmissions failed due to FIFO underruns.')
ligoAthTxFailedXmitFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthTxFailedXmitFiltered.setStatus('current')
if mibBuilder.loadTexts: ligoAthTxFailedXmitFiltered.setDescription('Transmissions failed due to filtered packets.')
ligoAthShortOnchipTxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthShortOnchipTxRetries.setStatus('current')
if mibBuilder.loadTexts: ligoAthShortOnchipTxRetries.setDescription('Short on-chip transmission retries.')
ligoAthLongOnchipTxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthLongOnchipTxRetries.setStatus('current')
if mibBuilder.loadTexts: ligoAthLongOnchipTxRetries.setDescription('Long on-chip transmission retries.')
ligoAthTxFailedBogusXmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthTxFailedBogusXmitRate.setStatus('current')
if mibBuilder.loadTexts: ligoAthTxFailedBogusXmitRate.setDescription('Transmissions failed due to bogus transmission rate.')
ligoAthTxFramesNoAckMarked = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthTxFramesNoAckMarked.setStatus('current')
if mibBuilder.loadTexts: ligoAthTxFramesNoAckMarked.setDescription('Transmitted frames with no ACK marked.')
ligoAthTxFramesRtsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthTxFramesRtsEnabled.setStatus('current')
if mibBuilder.loadTexts: ligoAthTxFramesRtsEnabled.setDescription('Transmitted frames with RTS enabled.')
ligoAthTxFramesCtsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthTxFramesCtsEnabled.setStatus('current')
if mibBuilder.loadTexts: ligoAthTxFramesCtsEnabled.setDescription('Transmitted frames with CTS enabled.')
ligoAthTxFramesShortPreamble = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthTxFramesShortPreamble.setStatus('current')
if mibBuilder.loadTexts: ligoAthTxFramesShortPreamble.setDescription('Transmitted frames with short preamble.')
ligoAthTxFramesAlternateRate = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthTxFramesAlternateRate.setStatus('current')
if mibBuilder.loadTexts: ligoAthTxFramesAlternateRate.setDescription('Transmitted frames with an alternate rate.')
ligoAthTxFrames11gProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthTxFrames11gProtection.setStatus('current')
if mibBuilder.loadTexts: ligoAthTxFrames11gProtection.setDescription('Transmitted frames with 11g protection.')
ligoAthRxFailedDescOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthRxFailedDescOverrun.setStatus('current')
if mibBuilder.loadTexts: ligoAthRxFailedDescOverrun.setDescription('Receptions failed due to desc overrun.')
ligoAthRxFailedBadCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthRxFailedBadCrc.setStatus('current')
if mibBuilder.loadTexts: ligoAthRxFailedBadCrc.setDescription('Receptions failed due to bad CRC.')
ligoAthRxFailedFifoOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthRxFailedFifoOverrun.setStatus('current')
if mibBuilder.loadTexts: ligoAthRxFailedFifoOverrun.setDescription('Receptions failed due to FIFO overrun.')
ligoAthRxFailedDecryptErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthRxFailedDecryptErrors.setStatus('current')
if mibBuilder.loadTexts: ligoAthRxFailedDecryptErrors.setDescription('Receptions failed due to decryption errors.')
ligoAthRxFailedMicFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthRxFailedMicFailure.setStatus('current')
if mibBuilder.loadTexts: ligoAthRxFailedMicFailure.setDescription('Receptions failed due to MIC failure.')
ligoAthRxFailedFrameTooShort = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthRxFailedFrameTooShort.setStatus('current')
if mibBuilder.loadTexts: ligoAthRxFailedFrameTooShort.setDescription('Receptions failed due to frame being too short.')
ligoAthRxSetupFailedNoSkbuff = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthRxSetupFailedNoSkbuff.setStatus('current')
if mibBuilder.loadTexts: ligoAthRxSetupFailedNoSkbuff.setDescription('Reception setup failed due to no space in skbuff buffer.')
ligoAthRxManagementFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthRxManagementFrames.setStatus('current')
if mibBuilder.loadTexts: ligoAthRxManagementFrames.setDescription('Received management frames.')
ligoAthRxControlFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthRxControlFrames.setStatus('current')
if mibBuilder.loadTexts: ligoAthRxControlFrames.setDescription('Received control frames.')
ligoAthNoSkbuffForBeacon = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthNoSkbuffForBeacon.setStatus('current')
if mibBuilder.loadTexts: ligoAthNoSkbuffForBeacon.setDescription('No skbuff buffer space available for beacon.')
ligoAthBeaconsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthBeaconsTransmitted.setStatus('current')
if mibBuilder.loadTexts: ligoAthBeaconsTransmitted.setDescription('Beacons transmitted.')
ligoAthPeriodicCalibrations = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeriodicCalibrations.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeriodicCalibrations.setDescription('Periodic calibrations.')
ligoAthPeriodicCalibrFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeriodicCalibrFailures.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeriodicCalibrFailures.setDescription('Periodic calibration failures.')
ligoAthRfgainValueChange = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthRfgainValueChange.setStatus('current')
if mibBuilder.loadTexts: ligoAthRfgainValueChange.setDescription('RFgain value changes.')
ligoAthRateControlChecks = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthRateControlChecks.setStatus('current')
if mibBuilder.loadTexts: ligoAthRateControlChecks.setDescription('Rate control checks.')
ligoAthRateCtrlRaisedXmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthRateCtrlRaisedXmitRate.setStatus('current')
if mibBuilder.loadTexts: ligoAthRateCtrlRaisedXmitRate.setDescription('Rate control raised transmission rate.')
ligoAthRateCtrlDroppedXmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthRateCtrlDroppedXmitRate.setStatus('current')
if mibBuilder.loadTexts: ligoAthRateCtrlDroppedXmitRate.setDescription('Rate control dropped transmission rate.')
ligoAthRssiOfLastAck = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthRssiOfLastAck.setStatus('current')
if mibBuilder.loadTexts: ligoAthRssiOfLastAck.setDescription('RSSI of last ACK.')
ligoAthRssiOfLastRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 1, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthRssiOfLastRcv.setStatus('current')
if mibBuilder.loadTexts: ligoAthRssiOfLastRcv.setDescription('RSSI of last reception.')
ligoAthPhyErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 2), )
if mibBuilder.loadTexts: ligoAthPhyErrorsTable.setStatus('current')
if mibBuilder.loadTexts: ligoAthPhyErrorsTable.setDescription('PHY errrors table.')
ligoAthPhyErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ligoAthPhyErrorsEntry.setStatus('current')
if mibBuilder.loadTexts: ligoAthPhyErrorsEntry.setDescription('PHY errors table entry.')
ligoAthPhyTransmitUnderrun = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPhyTransmitUnderrun.setStatus('current')
if mibBuilder.loadTexts: ligoAthPhyTransmitUnderrun.setDescription('Transmit underrun errors.')
ligoAthPhyTimingError = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPhyTimingError.setStatus('current')
if mibBuilder.loadTexts: ligoAthPhyTimingError.setDescription('Timing errors.')
ligoAthPhyIllegalParity = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPhyIllegalParity.setStatus('current')
if mibBuilder.loadTexts: ligoAthPhyIllegalParity.setDescription('Illegal parity errors.')
ligoAthPhyIllegalRate = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPhyIllegalRate.setStatus('current')
if mibBuilder.loadTexts: ligoAthPhyIllegalRate.setDescription('Illegal rate errors.')
ligoAthPhyIllegalLength = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPhyIllegalLength.setStatus('current')
if mibBuilder.loadTexts: ligoAthPhyIllegalLength.setDescription('Illegal length errors.')
ligoAthPhyRadarDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPhyRadarDetect.setStatus('current')
if mibBuilder.loadTexts: ligoAthPhyRadarDetect.setDescription('Radar detected.')
ligoAthPhyIllegalService = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPhyIllegalService.setStatus('current')
if mibBuilder.loadTexts: ligoAthPhyIllegalService.setDescription('Illegal service errors.')
ligoAthPhyTxmitOverrideRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPhyTxmitOverrideRecv.setStatus('current')
if mibBuilder.loadTexts: ligoAthPhyTxmitOverrideRecv.setDescription('Transmission overrode reception errors.')
ligoAthPhyOfdmTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPhyOfdmTiming.setStatus('current')
if mibBuilder.loadTexts: ligoAthPhyOfdmTiming.setDescription('OFDM timing errors.')
ligoAthPhyOfdmIllegalParity = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPhyOfdmIllegalParity.setStatus('current')
if mibBuilder.loadTexts: ligoAthPhyOfdmIllegalParity.setDescription('OFDM illegal parity errors.')
ligoAthPhyOfdmIllegalRate = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPhyOfdmIllegalRate.setStatus('current')
if mibBuilder.loadTexts: ligoAthPhyOfdmIllegalRate.setDescription('OFDM illegal rate errors.')
ligoAthPhyOfdmIllegalLength = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPhyOfdmIllegalLength.setStatus('current')
if mibBuilder.loadTexts: ligoAthPhyOfdmIllegalLength.setDescription('OFDM illegal length errors.')
ligoAthPhyOfdmPowerDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPhyOfdmPowerDrop.setStatus('current')
if mibBuilder.loadTexts: ligoAthPhyOfdmPowerDrop.setDescription('OFDM power dropped.')
ligoAthPhyOfdmIllegalService = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPhyOfdmIllegalService.setStatus('current')
if mibBuilder.loadTexts: ligoAthPhyOfdmIllegalService.setDescription('OFDM illegal service errors.')
ligoAthPhyOfdmRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPhyOfdmRestart.setStatus('current')
if mibBuilder.loadTexts: ligoAthPhyOfdmRestart.setDescription('Number of times OFDM restarted.')
ligoAthPhyCckTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPhyCckTiming.setStatus('current')
if mibBuilder.loadTexts: ligoAthPhyCckTiming.setDescription('CCK timing errors.')
ligoAthPhyCckHeaderCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPhyCckHeaderCrc.setStatus('current')
if mibBuilder.loadTexts: ligoAthPhyCckHeaderCrc.setDescription('CCK header CRC errors.')
ligoAthPhyCckIllegalRate = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPhyCckIllegalRate.setStatus('current')
if mibBuilder.loadTexts: ligoAthPhyCckIllegalRate.setDescription('CCK illegal rate errors.')
ligoAthPhyCckIllegalService = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPhyCckIllegalService.setStatus('current')
if mibBuilder.loadTexts: ligoAthPhyCckIllegalService.setDescription('CCK illegal service errors.')
ligoAthPhyCckRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPhyCckRestart.setStatus('current')
if mibBuilder.loadTexts: ligoAthPhyCckRestart.setDescription('Number of times CCK restarted.')
ligoAthAntennaStatsTable = MibTable((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 3), )
if mibBuilder.loadTexts: ligoAthAntennaStatsTable.setStatus('current')
if mibBuilder.loadTexts: ligoAthAntennaStatsTable.setDescription('Antenna statistics table.')
ligoAthAntennaStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ligoAthAntennaStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ligoAthAntennaStatsEntry.setDescription('Antenna statistics table entry.')
ligoAthSwitchedDefaultRxAntenna = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthSwitchedDefaultRxAntenna.setStatus('current')
if mibBuilder.loadTexts: ligoAthSwitchedDefaultRxAntenna.setDescription('Number of times default/RX antenna was switched.')
ligoAthTxUsedAlternateAntenna = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthTxUsedAlternateAntenna.setStatus('current')
if mibBuilder.loadTexts: ligoAthTxUsedAlternateAntenna.setDescription('Number of times alternate antenna was used for transmission.')
ligoAthTxFramesAntenna1 = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthTxFramesAntenna1.setStatus('current')
if mibBuilder.loadTexts: ligoAthTxFramesAntenna1.setDescription('Transmitted over first antenna.')
ligoAthRxFramesAntenna1 = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthRxFramesAntenna1.setStatus('current')
if mibBuilder.loadTexts: ligoAthRxFramesAntenna1.setDescription('Received over first antenna.')
ligoAthTxFramesAntenna2 = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthTxFramesAntenna2.setStatus('current')
if mibBuilder.loadTexts: ligoAthTxFramesAntenna2.setDescription('Transmitted over second antenna.')
ligoAthRxFramesAntenna2 = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthRxFramesAntenna2.setStatus('current')
if mibBuilder.loadTexts: ligoAthRxFramesAntenna2.setDescription('Received over second antenna.')
ligoAthTxFramesAntenna3 = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthTxFramesAntenna3.setStatus('current')
if mibBuilder.loadTexts: ligoAthTxFramesAntenna3.setDescription('Transmitted over third antenna.')
ligoAthRxFramesAntenna3 = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthRxFramesAntenna3.setStatus('current')
if mibBuilder.loadTexts: ligoAthRxFramesAntenna3.setDescription('Received over third antenna.')
ligoAthDot11StatsTable = MibTable((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4), )
if mibBuilder.loadTexts: ligoAthDot11StatsTable.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11StatsTable.setDescription('802.11 stack statistics table.')
ligoAthDot11StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ligoAthDot11StatsEntry.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11StatsEntry.setDescription('802.11 stack statistics table entry.')
ligoAthDot11RxBadVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxBadVersion.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxBadVersion.setDescription('Received frames with bad version.')
ligoAthDot11RxTooShort = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxTooShort.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxTooShort.setDescription('Received too short frames.')
ligoAthDot11RxWrongBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxWrongBssid.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxWrongBssid.setDescription('Received from wrong BSSID.')
ligoAthDot11RxDup = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxDup.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxDup.setDescription('Received and discarded duplicate frames.')
ligoAthDot11RxWrongDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxWrongDirection.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxWrongDirection.setDescription('Received with wrong direction.')
ligoAthDot11RxMcastEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxMcastEcho.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxMcastEcho.setDescription('Received frames discarded due to multicast echo.')
ligoAthDot11RxNotAssoc = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxNotAssoc.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxNotAssoc.setDescription('Received frames discarded because station is not associated.')
ligoAthDot11RxNoPrivacy = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxNoPrivacy.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxNoPrivacy.setDescription('Received frames with WEP while privacy was off.')
ligoAthDot11RxUnencrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxUnencrypted.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxUnencrypted.setDescription('Received unencrypted frames while privacy was on.')
ligoAthDot11RxWepFail = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxWepFail.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxWepFail.setDescription('Received frames that failed WEP processing.')
ligoAthDot11RxDecapFail = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxDecapFail.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxDecapFail.setDescription('Received frames that failed decapsulation.')
ligoAthDot11RxDiscardMgt = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxDiscardMgt.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxDiscardMgt.setDescription('Received and discarded management frames.')
ligoAthDot11RxDiscardCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxDiscardCtrl.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxDiscardCtrl.setDescription('Received and discarded control frames.')
ligoAthDot11RxBeaconFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxBeaconFrames.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxBeaconFrames.setDescription('Received beacon frames.')
ligoAthDot11RxRateSetTrunc = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxRateSetTrunc.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxRateSetTrunc.setDescription('Received frames with rate set truncated.')
ligoAthDot11RxReqElemMissing = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxReqElemMissing.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxReqElemMissing.setDescription('Received frames with required element missing.')
ligoAthDot11RxElementTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxElementTooBig.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxElementTooBig.setDescription('Received frames with too big elements.')
ligoAthDot11RxElementTooSmall = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxElementTooSmall.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxElementTooSmall.setDescription('Received frames with too small elements.')
ligoAthDot11RxElementUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxElementUnknown.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxElementUnknown.setDescription('Received frames with unknown elements.')
ligoAthDot11RxInvalidChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxInvalidChannel.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxInvalidChannel.setDescription('Recevied frames with invalid channel.')
ligoAthDot11RxChannelMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxChannelMismatch.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxChannelMismatch.setDescription('Received frames with channel mismatch.')
ligoAthDot11RxNodesAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxNodesAllocated.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxNodesAllocated.setDescription('Nodes allocated for received frames.')
ligoAthDot11RxSsidMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxSsidMismatch.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxSsidMismatch.setDescription('Received frame SSID mismatches.')
ligoAthDot11RxUnsupportedAuthAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxUnsupportedAuthAlg.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxUnsupportedAuthAlg.setDescription('Received frames with unsupported authentication algorithm.')
ligoAthDot11RxAuthFail = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxAuthFail.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxAuthFail.setDescription('Station authentication failures.')
ligoAthDot11RxTkipCtrm = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxTkipCtrm.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxTkipCtrm.setDescription('Station authentication failures due to TKIP countermeasures.')
ligoAthDot11RxAssocWrongBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxAssocWrongBssid.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxAssocWrongBssid.setDescription('Associations from wrong BSSID.')
ligoAthDot11RxAssocNotAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxAssocNotAuth.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxAssocNotAuth.setDescription('Associations without authentication.')
ligoAthDot11RxAssocCapMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxAssocCapMismatch.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxAssocCapMismatch.setDescription('Associations with capabilities mismatch.')
ligoAthDot11RxAssocNoRateMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxAssocNoRateMatch.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxAssocNoRateMatch.setDescription('Associations with no matching rate.')
ligoAthDot11RxAssocBadWpaIe = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxAssocBadWpaIe.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxAssocBadWpaIe.setDescription('Associations with bad WPA IE.')
ligoAthDot11RxDeauth = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxDeauth.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxDeauth.setDescription('Deauthentications.')
ligoAthDot11RxDisassoc = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxDisassoc.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxDisassoc.setDescription('Disassociations.')
ligoAthDot11RxUnknownSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxUnknownSubtype.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxUnknownSubtype.setDescription('Received frames with unknown subtype.')
ligoAthDot11RxNoBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxNoBuffer.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxNoBuffer.setDescription('Buffer allocations failed for received frames.')
ligoAthDot11RxDecryptCrcError = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxDecryptCrcError.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxDecryptCrcError.setDescription('Decryptions failed with CRC error.')
ligoAthDot11RxMgmtInAhdocDemo = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxMgmtInAhdocDemo.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxMgmtInAhdocDemo.setDescription('Discarded management frames received in ahdoc demo mode.')
ligoAthDot11RxBadAuthRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxBadAuthRequest.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxBadAuthRequest.setDescription('Bad authentication requests.')
ligoAthDot11RxPortUnauth = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxPortUnauth.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxPortUnauth.setDescription('Received frames discarded due to unauthorized port.')
ligoAthDot11RxBadKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxBadKeyId.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxBadKeyId.setDescription('Received frames with incorrect keyid.')
ligoAthDot11RxCcmpBadSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxCcmpBadSeqNum.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxCcmpBadSeqNum.setDescription('CCMP sequence number violations.')
ligoAthDot11RxCcmpBadFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxCcmpBadFormat.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxCcmpBadFormat.setDescription('Bad format CCMP frames.')
ligoAthDot11RxCcmpMicCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxCcmpMicCheck.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxCcmpMicCheck.setDescription('CCMP MIC check failures.')
ligoAthDot11RxTkipBadSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxTkipBadSeqNum.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxTkipBadSeqNum.setDescription('TKIP sequence number violations.')
ligoAthDot11RxTkipBadFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxTkipBadFormat.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxTkipBadFormat.setDescription('Bad format TKIP frames.')
ligoAthDot11RxTkipMicCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxTkipMicCheck.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxTkipMicCheck.setDescription('TKIP MIC check failures.')
ligoAthDot11RxTkipIcvCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxTkipIcvCheck.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxTkipIcvCheck.setDescription('TKIP ICV check failures.')
ligoAthDot11RxBadCipherKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxBadCipherKeyType.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxBadCipherKeyType.setDescription('Receptions failed due to bad cipher/key type.')
ligoAthDot11RxCipherKeyNotSet = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxCipherKeyNotSet.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxCipherKeyNotSet.setDescription('Receptions failed due to cipher/key not setup.')
ligoAthDot11RxAclPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxAclPolicy.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxAclPolicy.setDescription('Received frames discarded due to ACL policy.')
ligoAthDot11RxFastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxFastFrames.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxFastFrames.setDescription('Received fast frames.')
ligoAthDot11RxFfBadTunnelHdr = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11RxFfBadTunnelHdr.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11RxFfBadTunnelHdr.setDescription('Fast frames failed due to bad tunnel header.')
ligoAthDot11TxNoBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11TxNoBuffer.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11TxNoBuffer.setDescription('Buffer allocations failed for transmitted frames.')
ligoAthDot11TxNoNode = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11TxNoNode.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11TxNoNode.setDescription('Transmissions failed for no node.')
ligoAthDot11TxBadMgtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11TxBadMgtFrames.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11TxBadMgtFrames.setDescription('Attempted transmissions of unknown management frame.')
ligoAthDot11TxBadCipherKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11TxBadCipherKeyType.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11TxBadCipherKeyType.setDescription('Transmissions failed due to bad cipher/key type.')
ligoAthDot11TxNoDefKey = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11TxNoDefKey.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11TxNoDefKey.setDescription('Transmissions failed due to no default key.')
ligoAthDot11TxNoCryptoHeadroom = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11TxNoCryptoHeadroom.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11TxNoCryptoHeadroom.setDescription('Transmissions failed due to no space for crypto headers.')
ligoAthDot11TxGoodFastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11TxGoodFastFrames.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11TxGoodFastFrames.setDescription('Successful fast frames transmissions.')
ligoAthDot11TxBadFastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11TxBadFastFrames.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11TxBadFastFrames.setDescription('Failed fast frames transmissions.')
ligoAthDot11ActiveScans = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11ActiveScans.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11ActiveScans.setDescription('Active scans started.')
ligoAthDot11PassiveScans = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11PassiveScans.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11PassiveScans.setDescription('Passive scans started.')
ligoAthDot11NodesTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11NodesTimeout.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11NodesTimeout.setDescription('Nodes timed out due to inactivity.')
ligoAthDot11CryptoCipherMalloc = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11CryptoCipherMalloc.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11CryptoCipherMalloc.setDescription('Failed memory allocations for cipher context.')
ligoAthDot11CryptoSwTkip = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11CryptoSwTkip.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11CryptoSwTkip.setDescription('TKIP encryptions done in software.')
ligoAthDot11CryptoTkipSwMicEnc = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11CryptoTkipSwMicEnc.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11CryptoTkipSwMicEnc.setDescription('TKIP MIC encryptions done in software.')
ligoAthDot11CryptoTkipSwMicDec = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11CryptoTkipSwMicDec.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11CryptoTkipSwMicDec.setDescription('TKIP MIC decryptions done in software.')
ligoAthDot11CryptoTkipCtrm = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11CryptoTkipCtrm.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11CryptoTkipCtrm.setDescription('TKIP frames dropped due to countermeasures.')
ligoAthDot11CryptoSwCcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11CryptoSwCcmp.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11CryptoSwCcmp.setDescription('CCMP encryptions done in software.')
ligoAthDot11CryptoSwWep = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11CryptoSwWep.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11CryptoSwWep.setDescription('WEP encryptions done in software.')
ligoAthDot11CryptoCipherRej = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11CryptoCipherRej.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11CryptoCipherRej.setDescription('Crypto failures due to cipher rejected data.')
ligoAthDot11CryptoNoKey = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11CryptoNoKey.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11CryptoNoKey.setDescription('Crypto failures due to no key index.')
ligoAthDot11CryptoDelKey = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11CryptoDelKey.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11CryptoDelKey.setDescription('Failed driver key deletions.')
ligoAthDot11CryptoBadCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11CryptoBadCipher.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11CryptoBadCipher.setDescription('Crypto failures due to unknown cipher.')
ligoAthDot11CryptoNoCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11CryptoNoCipher.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11CryptoNoCipher.setDescription('Crypto failures due to unavailable cipher module.')
ligoAthDot11CryptoAttachFail = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11CryptoAttachFail.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11CryptoAttachFail.setDescription('Crypto failures due to cipher attach failure.')
ligoAthDot11CryptoSwFallback = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11CryptoSwFallback.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11CryptoSwFallback.setDescription('Crypto fallbacks to software implementation.')
ligoAthDot11CryptoKeyFail = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 78), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11CryptoKeyFail.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11CryptoKeyFail.setDescription('Crypto failures due to driver key allocation failure.')
ligoAthDot11SnoopMcastPass = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 79), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11SnoopMcastPass.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11SnoopMcastPass.setDescription('Multicast packets passed by snooping filter.')
ligoAthDot11SnoopMcastDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 4, 1, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthDot11SnoopMcastDrop.setStatus('current')
if mibBuilder.loadTexts: ligoAthDot11SnoopMcastDrop.setDescription('Multicast packets dropped by snooping filter.')
ligoAthPeerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5), )
if mibBuilder.loadTexts: ligoAthPeerStatsTable.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerStatsTable.setDescription('Peer statistics table.')
ligoAthPeerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "LIGO-ATHDRV-STATS-MIB", "ligoAthPeerIndex"))
if mibBuilder.loadTexts: ligoAthPeerStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerStatsEntry.setDescription('Peer statistics table entry.')
ligoAthPeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: ligoAthPeerIndex.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerIndex.setDescription('Peer index, indexed from 1.')
ligoAthPeerMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerMacAddr.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerMacAddr.setDescription('Peer MAC address.')
ligoAthPeerRxData = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerRxData.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerRxData.setDescription('Received data frames.')
ligoAthPeerRxMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerRxMgmt.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerRxMgmt.setDescription('Received management frames.')
ligoAthPeerRxCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerRxCtrl.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerRxCtrl.setDescription('Received control frames.')
ligoAthPeerRxBeacons = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerRxBeacons.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerRxBeacons.setDescription('Received beacon frames.')
ligoAthPeerRxProbeResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerRxProbeResponse.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerRxProbeResponse.setDescription('Received probe response frames.')
ligoAthPeerRxUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerRxUcast.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerRxUcast.setDescription('Received unicast frames.')
ligoAthPeerRxMcast = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerRxMcast.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerRxMcast.setDescription('Received multicast/broadcast frames.')
ligoAthPeerRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerRxBytes.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerRxBytes.setDescription('Received bytes.')
ligoAthPeerRxDup = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerRxDup.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerRxDup.setDescription('Received and discarded duplicate frames.')
ligoAthPeerRxNoPrivacy = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerRxNoPrivacy.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerRxNoPrivacy.setDescription('Received frames with WEP while privacy was off.')
ligoAthPeerRxWepFail = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerRxWepFail.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerRxWepFail.setDescription('Received frames that failed WEP processing.')
ligoAthPeerRxDemicFail = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerRxDemicFail.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerRxDemicFail.setDescription('MIC decoding failures.')
ligoAthPeerRxDecapFail = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerRxDecapFail.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerRxDecapFail.setDescription('Decapsulation failures.')
ligoAthPeerRxDefragFail = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerRxDefragFail.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerRxDefragFail.setDescription('Defragmentation failures.')
ligoAthPeerRxDissasoc = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerRxDissasoc.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerRxDissasoc.setDescription('Disassociations.')
ligoAthPeerRxDeauth = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerRxDeauth.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerRxDeauth.setDescription('Deauthentications.')
ligoAthPeerRxDecryptCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerRxDecryptCrc.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerRxDecryptCrc.setDescription('Decryptions failed with CRC error.')
ligoAthPeerRxUnauth = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerRxUnauth.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerRxUnauth.setDescription('Received frames discarded due to unauthorized port.')
ligoAthPeerRxUnencrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerRxUnencrypted.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerRxUnencrypted.setDescription('Received unencrypted frames while privacy was on.')
ligoAthPeerTxData = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerTxData.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerTxData.setDescription('Transmitted data frames.')
ligoAthPeerTxMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerTxMgmt.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerTxMgmt.setDescription('Tranmitted management frames.')
ligoAthPeerTxProbeReq = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerTxProbeReq.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerTxProbeReq.setDescription('Transmitted probe requests.')
ligoAthPeerTxUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerTxUcast.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerTxUcast.setDescription('Transmitted unicast frames.')
ligoAthPeerTxMcast = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerTxMcast.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerTxMcast.setDescription('Transmitted multicast/broadcast frames.')
ligoAthPeerTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerTxBytes.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerTxBytes.setDescription('Transmitted bytes.')
ligoAthPeerTxNoVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerTxNoVlanTag.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerTxNoVlanTag.setDescription('Frames discarded due to no tag.')
ligoAthPeerTxVlanMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerTxVlanMismatch.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerTxVlanMismatch.setDescription('Frames discarded due to bad tag.')
ligoAthPeerTxUapsd = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerTxUapsd.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerTxUapsd.setDescription('Frames in UAPSD queue.')
ligoAthPeerUapsdTriggers = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerUapsdTriggers.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerUapsdTriggers.setDescription('Number of UAPSD triggers.')
ligoAthPeerTxEospLost = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerTxEospLost.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerTxEospLost.setDescription('Retried frames with UAPSD EOSP set.')
ligoAthPeerTxAssoc = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerTxAssoc.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerTxAssoc.setDescription('Associations/reassociations.')
ligoAthPeerTxAssocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerTxAssocFail.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerTxAssocFail.setDescription('Association/reassociation failures.')
ligoAthPeerTxAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerTxAuth.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerTxAuth.setDescription('Authentications/reauthentications.')
ligoAthPeerTxAuthFail = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerTxAuthFail.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerTxAuthFail.setDescription('Authentication/reauthentication failures.')
ligoAthPeerTxDeauth = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerTxDeauth.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerTxDeauth.setDescription('Deauthentications.')
ligoAthPeerTxDeauthCode = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerTxDeauthCode.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerTxDeauthCode.setDescription('Last deauthentication reason.')
ligoAthPeerTxDisassoc = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerTxDisassoc.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerTxDisassoc.setDescription('Disassociations.')
ligoAthPeerTxDisassocCode = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerTxDisassocCode.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerTxDisassocCode.setDescription('Last disassociation reason.')
ligoAthPeerPsqDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerPsqDrops.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerPsqDrops.setDescription('Power save queue drops.')
ligoAthPeerMcastSnoop = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 7, 1, 5, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoAthPeerMcastSnoop.setStatus('current')
if mibBuilder.loadTexts: ligoAthPeerMcastSnoop.setDescription('Frames passed by multicast snooping.')
mibBuilder.exportSymbols("LIGO-ATHDRV-STATS-MIB", ligoAthRecvOverrunInterrupts=ligoAthRecvOverrunInterrupts, ligoAthTxFramesDiscDeviceGone=ligoAthTxFramesDiscDeviceGone, ligoAthPhyCckIllegalRate=ligoAthPhyCckIllegalRate, ligoAthDot11RxUnknownSubtype=ligoAthDot11RxUnknownSubtype, ligoAthDot11NodesTimeout=ligoAthDot11NodesTimeout, ligoAthDot11TxGoodFastFrames=ligoAthDot11TxGoodFastFrames, ligoAthPeerRxDemicFail=ligoAthPeerRxDemicFail, ligoAthDot11RxReqElemMissing=ligoAthDot11RxReqElemMissing, ligoAthPeerTxMgmt=ligoAthPeerTxMgmt, ligoAthDot11RxCipherKeyNotSet=ligoAthDot11RxCipherKeyNotSet, ligoAthDot11RxBadVersion=ligoAthDot11RxBadVersion, ligoAthTxEncapsulationFailed=ligoAthTxEncapsulationFailed, ligoAthPhyIllegalService=ligoAthPhyIllegalService, ligoAthTxFailedNoDataTxBuffer=ligoAthTxFailedNoDataTxBuffer, ligoAthPeerUapsdTriggers=ligoAthPeerUapsdTriggers, ligoAthDot11RxAssocWrongBssid=ligoAthDot11RxAssocWrongBssid, ligoAthDot11RxWrongBssid=ligoAthDot11RxWrongBssid, ligoAthTxFrames11gProtection=ligoAthTxFrames11gProtection, ligoAthRssiOfLastAck=ligoAthRssiOfLastAck, ligoAthPhyOfdmRestart=ligoAthPhyOfdmRestart, ligoAthTxFramesNoAckMarked=ligoAthTxFramesNoAckMarked, ligoAthDot11PassiveScans=ligoAthDot11PassiveScans, ligoAthRxFailedFifoOverrun=ligoAthRxFailedFifoOverrun, ligoAthTxFramesCtsEnabled=ligoAthTxFramesCtsEnabled, ligoAthPeerRxWepFail=ligoAthPeerRxWepFail, ligoAthPeriodicCalibrFailures=ligoAthPeriodicCalibrFailures, ligoAthDot11TxNoNode=ligoAthDot11TxNoNode, ligoAthPeerTxUcast=ligoAthPeerTxUcast, ligoAthDot11RxNodesAllocated=ligoAthDot11RxNodesAllocated, ligoAthRxControlFrames=ligoAthRxControlFrames, ligoAthDrvStatsMIB=ligoAthDrvStatsMIB, ligoAthDot11RxCcmpBadSeqNum=ligoAthDot11RxCcmpBadSeqNum, PYSNMP_MODULE_ID=ligoAthDrvStatsMIB, ligoAthTxFramesDiscQueueDepth=ligoAthTxFramesDiscQueueDepth, ligoAthDot11RxSsidMismatch=ligoAthDot11RxSsidMismatch, ligoAthRxFailedBadCrc=ligoAthRxFailedBadCrc, ligoAthDot11CryptoCipherMalloc=ligoAthDot11CryptoCipherMalloc, ligoAthDot11RxAssocCapMismatch=ligoAthDot11RxAssocCapMismatch, ligoAthRxFailedDescOverrun=ligoAthRxFailedDescOverrun, ligoAthPhyOfdmTiming=ligoAthPhyOfdmTiming, ligoAthPhyOfdmIllegalParity=ligoAthPhyOfdmIllegalParity, ligoAthPeerRxDefragFail=ligoAthPeerRxDefragFail, ligoAthPhyOfdmIllegalRate=ligoAthPhyOfdmIllegalRate, ligoAthTxFailedBogusXmitRate=ligoAthTxFailedBogusXmitRate, ligoAthDot11RxAssocNoRateMatch=ligoAthDot11RxAssocNoRateMatch, ligoAthPeerRxProbeResponse=ligoAthPeerRxProbeResponse, ligoAthDot11RxMgmtInAhdocDemo=ligoAthDot11RxMgmtInAhdocDemo, ligoAthPeerStatsEntry=ligoAthPeerStatsEntry, ligoAthDot11CryptoAttachFail=ligoAthDot11CryptoAttachFail, ligoAthDot11RxBadCipherKeyType=ligoAthDot11RxBadCipherKeyType, ligoAthDot11RxNotAssoc=ligoAthDot11RxNotAssoc, ligoAthShortOnchipTxRetries=ligoAthShortOnchipTxRetries, ligoAthDot11CryptoSwCcmp=ligoAthDot11CryptoSwCcmp, ligoAthPeerTxDeauthCode=ligoAthPeerTxDeauthCode, ligoAthDot11RxRateSetTrunc=ligoAthDot11RxRateSetTrunc, ligoAthDot11RxDup=ligoAthDot11RxDup, ligoAthDot11RxDeauth=ligoAthDot11RxDeauth, ligoAthPeerRxMcast=ligoAthPeerRxMcast, ligoAthDot11RxElementTooSmall=ligoAthDot11RxElementTooSmall, ligoAthPeerTxAssoc=ligoAthPeerTxAssoc, ligoAthPeerMcastSnoop=ligoAthPeerMcastSnoop, ligoAthDot11RxTooShort=ligoAthDot11RxTooShort, ligoAthTxFailedNoNode=ligoAthTxFailedNoNode, ligoAthDot11RxElementUnknown=ligoAthDot11RxElementUnknown, ligoAthRxFailedDecryptErrors=ligoAthRxFailedDecryptErrors, ligoAthTxManagementFrames=ligoAthTxManagementFrames, ligoAthDot11RxDecryptCrcError=ligoAthDot11RxDecryptCrcError, ligoAthDot11CryptoTkipSwMicEnc=ligoAthDot11CryptoTkipSwMicEnc, ligoAthPhyOfdmIllegalService=ligoAthPhyOfdmIllegalService, ligoAthPeerRxDissasoc=ligoAthPeerRxDissasoc, ligoAthDot11RxFastFrames=ligoAthDot11RxFastFrames, ligoAthAntennaStatsTable=ligoAthAntennaStatsTable, ligoAthPeerRxDecryptCrc=ligoAthPeerRxDecryptCrc, ligoAthDot11RxTkipMicCheck=ligoAthDot11RxTkipMicCheck, ligoAthPeerTxEospLost=ligoAthPeerTxEospLost, ligoAthTxFramesShortPreamble=ligoAthTxFramesShortPreamble, ligoAthDot11TxBadCipherKeyType=ligoAthDot11TxBadCipherKeyType, ligoAthPhyOfdmIllegalLength=ligoAthPhyOfdmIllegalLength, ligoAthDot11RxDecapFail=ligoAthDot11RxDecapFail, ligoAthPeerTxAuth=ligoAthPeerTxAuth, ligoAthPeerRxData=ligoAthPeerRxData, ligoAthTxUsedAlternateAntenna=ligoAthTxUsedAlternateAntenna, ligoAthTxQueueFull=ligoAthTxQueueFull, ligoAthTxmitUnderrunInterrupts=ligoAthTxmitUnderrunInterrupts, ligoAthPeriodicCalibrations=ligoAthPeriodicCalibrations, ligoAthRxFramesAntenna2=ligoAthRxFramesAntenna2, ligoAthDot11TxBadFastFrames=ligoAthDot11TxBadFastFrames, ligoAthDot11CryptoBadCipher=ligoAthDot11CryptoBadCipher, ligoAthDot11SnoopMcastDrop=ligoAthDot11SnoopMcastDrop, ligoAthTxFailedTooManyRetries=ligoAthTxFailedTooManyRetries, ligoAthNoSkbuffForBeacon=ligoAthNoSkbuffForBeacon, ligoAthDot11CryptoSwWep=ligoAthDot11CryptoSwWep, ligoAthRateControlChecks=ligoAthRateControlChecks, ligoAthStatsEntry=ligoAthStatsEntry, ligoAthTxFramesRtsEnabled=ligoAthTxFramesRtsEnabled, ligoAthDot11RxCcmpMicCheck=ligoAthDot11RxCcmpMicCheck, ligoAthDot11RxAssocBadWpaIe=ligoAthDot11RxAssocBadWpaIe, ligoAthRateCtrlRaisedXmitRate=ligoAthRateCtrlRaisedXmitRate, ligoAthDot11RxUnencrypted=ligoAthDot11RxUnencrypted, ligoAthDot11TxBadMgtFrames=ligoAthDot11TxBadMgtFrames, ligoAthPeerRxUnencrypted=ligoAthPeerRxUnencrypted, ligoAthDot11RxTkipBadFormat=ligoAthDot11RxTkipBadFormat, ligoAthDot11RxTkipCtrm=ligoAthDot11RxTkipCtrm, ligoAthDot11RxFfBadTunnelHdr=ligoAthDot11RxFfBadTunnelHdr, ligoAthDot11CryptoSwTkip=ligoAthDot11CryptoSwTkip, ligoAthDot11CryptoNoCipher=ligoAthDot11CryptoNoCipher, ligoAthDot11RxNoBuffer=ligoAthDot11RxNoBuffer, ligoAthDot11CryptoSwFallback=ligoAthDot11CryptoSwFallback, ligoAthPeerRxUcast=ligoAthPeerRxUcast, ligoAthSwitchedDefaultRxAntenna=ligoAthSwitchedDefaultRxAntenna, ligoAthDot11TxNoBuffer=ligoAthDot11TxNoBuffer, ligoAthLongOnchipTxRetries=ligoAthLongOnchipTxRetries, ligoAthDot11RxElementTooBig=ligoAthDot11RxElementTooBig, ligoAthPhyCckTiming=ligoAthPhyCckTiming, ligoAthDot11RxDiscardMgt=ligoAthDot11RxDiscardMgt, ligoAthPhyCckIllegalService=ligoAthPhyCckIllegalService, ligoAthDot11RxDiscardCtrl=ligoAthDot11RxDiscardCtrl, ligoAthPeerMacAddr=ligoAthPeerMacAddr, ligoAthDot11StatsTable=ligoAthDot11StatsTable, ligoAthDot11CryptoCipherRej=ligoAthDot11CryptoCipherRej, ligoAthDot11TxNoCryptoHeadroom=ligoAthDot11TxNoCryptoHeadroom, ligoAthTxFramesAlternateRate=ligoAthTxFramesAlternateRate, ligoAthDot11RxPortUnauth=ligoAthDot11RxPortUnauth, ligoAthPhyErrorsTable=ligoAthPhyErrorsTable, ligoAthPhyIllegalRate=ligoAthPhyIllegalRate, ligoAthRfgainValueChange=ligoAthRfgainValueChange, ligoAthDot11RxWrongDirection=ligoAthDot11RxWrongDirection, ligoAthDot11RxBadAuthRequest=ligoAthDot11RxBadAuthRequest, ligoAthDot11RxBadKeyId=ligoAthDot11RxBadKeyId, ligoAthPeerRxCtrl=ligoAthPeerRxCtrl, ligoAthRxFramesAntenna3=ligoAthRxFramesAntenna3, ligoAthStatsTable=ligoAthStatsTable, ligoAthDot11RxInvalidChannel=ligoAthDot11RxInvalidChannel, ligoAthRxFramesAntenna1=ligoAthRxFramesAntenna1, ligoAthPeerStatsTable=ligoAthPeerStatsTable, ligoAthAntennaStatsEntry=ligoAthAntennaStatsEntry, ligoAthDot11CryptoDelKey=ligoAthDot11CryptoDelKey, ligoAthRxFailedFrameTooShort=ligoAthRxFailedFrameTooShort, ligoAthDot11RxUnsupportedAuthAlg=ligoAthDot11RxUnsupportedAuthAlg, ligoAthPeerTxUapsd=ligoAthPeerTxUapsd, ligoAthRateCtrlDroppedXmitRate=ligoAthRateCtrlDroppedXmitRate, ligoAthPeerTxData=ligoAthPeerTxData, ligoAthDot11RxTkipBadSeqNum=ligoAthDot11RxTkipBadSeqNum, ligoAthBeaconsTransmitted=ligoAthBeaconsTransmitted, ligoAthDot11SnoopMcastPass=ligoAthDot11SnoopMcastPass, ligoAthBeaconMissInterrupts=ligoAthBeaconMissInterrupts, ligoAthWatchdogTimeouts=ligoAthWatchdogTimeouts, ligoAthTxFailedNoMgtTxBuffer=ligoAthTxFailedNoMgtTxBuffer, ligoAthTxFramesAntenna2=ligoAthTxFramesAntenna2, ligoAthHardwareErrorInterrupts=ligoAthHardwareErrorInterrupts, ligoAthTxFailedFifoUnderrun=ligoAthTxFailedFifoUnderrun, ligoAthTxFramesAntenna1=ligoAthTxFramesAntenna1, ligoAthPeerRxMgmt=ligoAthPeerRxMgmt, ligoAthPeerTxMcast=ligoAthPeerTxMcast, ligoAthDot11CryptoNoKey=ligoAthDot11CryptoNoKey, ligoAthPhyCckHeaderCrc=ligoAthPhyCckHeaderCrc, ligoAthPeerRxDup=ligoAthPeerRxDup, ligoAthDot11RxNoPrivacy=ligoAthDot11RxNoPrivacy, ligoAthPeerRxNoPrivacy=ligoAthPeerRxNoPrivacy, ligoAthDot11RxAclPolicy=ligoAthDot11RxAclPolicy, ligoAthDot11ActiveScans=ligoAthDot11ActiveScans, ligoAthRxManagementFrames=ligoAthRxManagementFrames, ligoAthDot11RxCcmpBadFormat=ligoAthDot11RxCcmpBadFormat, ligoAthPhyIllegalLength=ligoAthPhyIllegalLength, ligoAthPeerTxBytes=ligoAthPeerTxBytes, ligoAthPeerTxDisassoc=ligoAthPeerTxDisassoc, ligoAthDot11RxWepFail=ligoAthDot11RxWepFail, ligoAthDot11CryptoTkipSwMicDec=ligoAthDot11CryptoTkipSwMicDec, ligoAthDot11RxBeaconFrames=ligoAthDot11RxBeaconFrames, ligoAthDot11RxMcastEcho=ligoAthDot11RxMcastEcho, ligoAthDot11RxDisassoc=ligoAthDot11RxDisassoc, ligoAthPhyRadarDetect=ligoAthPhyRadarDetect, ligoAthPeerTxVlanMismatch=ligoAthPeerTxVlanMismatch, ligoAthPeerIndex=ligoAthPeerIndex, ligoAthDot11RxTkipIcvCheck=ligoAthDot11RxTkipIcvCheck, ligoAthDot11RxAuthFail=ligoAthDot11RxAuthFail, ligoAthPeerRxDecapFail=ligoAthPeerRxDecapFail, ligoAthDrvStatsMIBObjects=ligoAthDrvStatsMIBObjects, ligoAthPhyOfdmPowerDrop=ligoAthPhyOfdmPowerDrop, ligoAthDot11StatsEntry=ligoAthDot11StatsEntry, ligoAthTxFramesAntenna3=ligoAthTxFramesAntenna3, ligoAthPeerRxBytes=ligoAthPeerRxBytes, ligoAthPeerRxBeacons=ligoAthPeerRxBeacons, ligoAthRecvEolInterrupts=ligoAthRecvEolInterrupts, ligoAthPeerTxAssocFail=ligoAthPeerTxAssocFail, ligoAthPhyTransmitUnderrun=ligoAthPhyTransmitUnderrun, ligoAthRxFailedMicFailure=ligoAthRxFailedMicFailure, ligoAthRssiOfLastRcv=ligoAthRssiOfLastRcv, ligoAthPhyTxmitOverrideRecv=ligoAthPhyTxmitOverrideRecv, ligoAthPeerTxAuthFail=ligoAthPeerTxAuthFail, ligoAthPeerTxNoVlanTag=ligoAthPeerTxNoVlanTag, ligoAthDot11TxNoDefKey=ligoAthDot11TxNoDefKey, ligoAthPeerTxProbeReq=ligoAthPeerTxProbeReq, ligoAthTxFailedXmitFiltered=ligoAthTxFailedXmitFiltered, ligoAthPeerTxDeauth=ligoAthPeerTxDeauth, ligoAthRxSetupFailedNoSkbuff=ligoAthRxSetupFailedNoSkbuff, ligoAthPhyErrorsEntry=ligoAthPhyErrorsEntry, ligoAthDot11CryptoTkipCtrm=ligoAthDot11CryptoTkipCtrm, ligoAthPhyCckRestart=ligoAthPhyCckRestart, ligoAthPhyIllegalParity=ligoAthPhyIllegalParity, ligoAthPeerRxDeauth=ligoAthPeerRxDeauth, ligoAthPhyTimingError=ligoAthPhyTimingError, ligoAthPeerRxUnauth=ligoAthPeerRxUnauth, ligoAthDot11CryptoKeyFail=ligoAthDot11CryptoKeyFail, ligoAthDot11RxAssocNotAuth=ligoAthDot11RxAssocNotAuth, ligoAthPeerTxDisassocCode=ligoAthPeerTxDisassocCode, ligoAthDot11RxChannelMismatch=ligoAthDot11RxChannelMismatch, ligoAthPeerPsqDrops=ligoAthPeerPsqDrops)
