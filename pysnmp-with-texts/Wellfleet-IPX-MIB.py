#
# PySNMP MIB module Wellfleet-IPX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-IPX-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:40:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, ObjectIdentity, ModuleIdentity, iso, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Unsigned32, Counter64, IpAddress, MibIdentifier, Integer32, Opaque, NotificationType, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ObjectIdentity", "ModuleIdentity", "iso", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Unsigned32", "Counter64", "IpAddress", "MibIdentifier", "Integer32", "Opaque", "NotificationType", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfIpxGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfIpxGroup")
wfIpxBase = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 1))
wfIpxBaseDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxBaseDelete.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxBaseDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete IPX.')
wfIpxBaseDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxBaseDisable.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxBaseDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable IPX.')
wfIpxBaseState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("in", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBaseState.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxBaseState.setDescription('The current state of the entire IPX.')
wfIpxBaseCfgHostNumber = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxBaseCfgHostNumber.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxBaseCfgHostNumber.setDescription('Host Number of Router and potential MAC address of box. This host number will be used to overide the default box generated hostnumber.')
wfIpxBaseActiveHostNumber = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBaseActiveHostNumber.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxBaseActiveHostNumber.setDescription('Host Number of Router and potential MAC address of box. This is not a restart variable because this will be filled in from the IPX code after reading it from either the configurable host number or from a box generated variable.')
wfIpxBaseNetCount = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBaseNetCount.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxBaseNetCount.setDescription('Count the total number of nets in the box.')
wfIpxBaseServiceCount = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBaseServiceCount.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxBaseServiceCount.setDescription('Count the total number of saps in the box.')
wfIpxBaseLogFilter = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 16, 3, 17, 18, 19))).clone(namedValues=NamedValues(("debug", 1), ("info", 2), ("trace", 16), ("debuginfo", 3), ("debugtrace", 17), ("infotrace", 18), ("debuginfotrace", 19))).clone('trace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxBaseLogFilter.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxBaseLogFilter.setDescription('Filter out some log messages, Default filters out debugs, info, and trace messages.')
wfIpxBaseNetTblSize = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxBaseNetTblSize.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxBaseNetTblSize.setDescription('Tell me how much space to set aside when creating the forwarding and network tables.')
wfIpxBaseRouterName = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxBaseRouterName.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxBaseRouterName.setDescription('The Name of the Router, used for IPXWAN')
wfIpxBasePrimaryNetNumber = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxBasePrimaryNetNumber.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxBasePrimaryNetNumber.setDescription("The 'interfernal' network number, used for IPXWAN")
wfIpxBaseRipMethod = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("metric", 1), ("tick", 2))).clone('tick')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxBaseRipMethod.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxBaseRipMethod.setDescription('Choose either Metric/Hops based or Tick based routing')
wfIpxBaseMaximumPath = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxBaseMaximumPath.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxBaseMaximumPath.setDescription('Declare Maximum number equal costs paths allowed for a given destination network')
wfIpxBaseHostCount = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBaseHostCount.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxBaseHostCount.setDescription('Count the total number of hosts in the box.')
wfIpxBaseMultipleHostAddrs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxBaseMultipleHostAddrs.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxBaseMultipleHostAddrs.setDescription("Allow the user to configure one host/mac addr for the whole box (default) where, if configured, the CfgHostNumber is used (becomes ActiveHostNubmer) otherwise if left unconfigured the ActiveHostNumber is discerned from the backplane serial number. If Multiple host is Enabled and the host number is configured in the interface record the configured value is used as the hostid/mac addr of the interface (except Token Ring which can't go into promiscous mode, uses Token Ring Mac as hostid/mac of interface). If the host number in left unconfigured then the hostid/mac is gotten from the mac of the circuit.")
wfIpxBaseNovellCertificationConformance = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxBaseNovellCertificationConformance.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxBaseNovellCertificationConformance.setDescription('enable/disable novell certification, disable/enable wellfleet specifics')
wfIpxBaseTrigUpdateEn = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxBaseTrigUpdateEn.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxBaseTrigUpdateEn.setDescription('enable/disable triggered rip updates for Goldman Sax')
wfIpxBaseNetSizeBoundEn = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxBaseNetSizeBoundEn.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxBaseNetSizeBoundEn.setDescription('enable/disable maximum allowed size of the network table')
wfIpxBaseMaxNetTblSize = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxBaseMaxNetTblSize.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxBaseMaxNetTblSize.setDescription('maximum allowed size of the network table')
wfIpxBaseNetTblFillNotify = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxBaseNetTblFillNotify.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxBaseNetTblFillNotify.setDescription('notify when (configured) percentage is reached')
wfIpxBaseRtEntryTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 2), )
if mibBuilder.loadTexts: wfIpxBaseRtEntryTable.setStatus('obsolete')
if mibBuilder.loadTexts: wfIpxBaseRtEntryTable.setDescription("The table of Elements in IPX's routing table")
wfIpxBaseRtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 2, 1), ).setIndexNames((0, "Wellfleet-IPX-MIB", "wfIpxBaseRouteDest"))
if mibBuilder.loadTexts: wfIpxBaseRtEntry.setStatus('obsolete')
if mibBuilder.loadTexts: wfIpxBaseRtEntry.setDescription('An entry in the Routing Table')
wfIpxBaseRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBaseRouteDest.setStatus('obsolete')
if mibBuilder.loadTexts: wfIpxBaseRouteDest.setDescription('Multiple routes to a single destination can appear in the table, but access to such multiple entries is dependent on the table- access mechanisms defined by the network management protocol in use.')
wfIpxBaseRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBaseRouteIfIndex.setStatus('obsolete')
if mibBuilder.loadTexts: wfIpxBaseRouteIfIndex.setDescription('The index value which uniquely identifies the local interface through which the next hop of this route should be reached. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
wfIpxBaseRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBaseRouteMetric.setStatus('obsolete')
if mibBuilder.loadTexts: wfIpxBaseRouteMetric.setDescription("The primary routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's ipRouteProto value. If this metric is not used, its value should be set to -1.")
wfIpxBaseRouteNextHopNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBaseRouteNextHopNetwork.setStatus('obsolete')
if mibBuilder.loadTexts: wfIpxBaseRouteNextHopNetwork.setDescription("In the case of a route bound to an interface which is realized via a broadcast media, the value of this field is the agent's IPX address on that interface.")
wfIpxBaseRouteNextHopHost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBaseRouteNextHopHost.setStatus('obsolete')
if mibBuilder.loadTexts: wfIpxBaseRouteNextHopHost.setDescription('Full network.host_id address of nexthop host for this network.')
wfIpxBaseRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("direct", 3), ("indirect", 4), ("static", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBaseRouteType.setStatus('obsolete')
if mibBuilder.loadTexts: wfIpxBaseRouteType.setDescription('The type of route. Note that the values direct(3) and indirect(4) refer to the notion of direct and indirect routing in the IPX architecture. Setting this object to the value invalid(2) has the effect of invalidating the corresponding entry in the ipRouteTable object. That is, it effectively dissasociates the destination identified with said entry from the route identified with said entry. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table. nagement stations must be prepared to receive tabular information from agents that corresponds to entries not currently in use. Proper interpretation of such entries requires examination of the relevant ipRouteType object.')
wfIpxBaseRouteProto = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("netmgmt", 3), ("rip", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBaseRouteProto.setStatus('obsolete')
if mibBuilder.loadTexts: wfIpxBaseRouteProto.setDescription('The routing mechanism via which this route was learned. Inclusion of values for gateway routing protocols is not intended to imply that hosts should support those protocols.')
wfIpxBaseRouteAge = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBaseRouteAge.setStatus('obsolete')
if mibBuilder.loadTexts: wfIpxBaseRouteAge.setDescription("The number of seconds since this route was last updated or otherwise determined to be correct. Note that no semantics of `too old' can be implied except through knowledge of the routing protocol by which the route was learned.")
wfIpxBaseRouteInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 2, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBaseRouteInfo.setStatus('obsolete')
if mibBuilder.loadTexts: wfIpxBaseRouteInfo.setDescription('A user-defined string which describes this Route entry')
wfIpxBaseRt2EntryTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 13), )
if mibBuilder.loadTexts: wfIpxBaseRt2EntryTable.setStatus('obsolete')
if mibBuilder.loadTexts: wfIpxBaseRt2EntryTable.setDescription("The table of Elements in IPX's routing table")
wfIpxBaseRt2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 13, 1), ).setIndexNames((0, "Wellfleet-IPX-MIB", "wfIpxBaseRoute2Proto"), (0, "Wellfleet-IPX-MIB", "wfIpxBaseRoute2Dest"), (0, "Wellfleet-IPX-MIB", "wfIpxBaseRoute2NextHopNetwork"), (0, "Wellfleet-IPX-MIB", "wfIpxBaseRoute2NextHopHost"))
if mibBuilder.loadTexts: wfIpxBaseRt2Entry.setStatus('obsolete')
if mibBuilder.loadTexts: wfIpxBaseRt2Entry.setDescription('An entry in the Routing Table')
wfIpxBaseRoute2Dest = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 13, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBaseRoute2Dest.setStatus('obsolete')
if mibBuilder.loadTexts: wfIpxBaseRoute2Dest.setDescription('Multiple routes to a single destination can appear in the table, but access to such multiple entries is dependent on the table- access mechanisms defined by the network management protocol in use.')
wfIpxBaseRoute2IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBaseRoute2IfIndex.setStatus('obsolete')
if mibBuilder.loadTexts: wfIpxBaseRoute2IfIndex.setDescription('The index value which uniquely identifies the local interface through which the next hop of this route should be reached. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
wfIpxBaseRoute2Ticks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBaseRoute2Ticks.setStatus('obsolete')
if mibBuilder.loadTexts: wfIpxBaseRoute2Ticks.setDescription("The primary routing metric (in ticks) for this route. The semantics of this metric are determined by the routing-protocol specified in the route's ipRouteProto value. If this metric is not used, its value should be set to -1.")
wfIpxBaseRoute2Hops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBaseRoute2Hops.setStatus('obsolete')
if mibBuilder.loadTexts: wfIpxBaseRoute2Hops.setDescription("The primary routing metric (in hops) for this route. The semantics of this metric are determined by the routing-protocol specified in the route's ipRouteProto value. If this metric is not used, its value should be set to -1.")
wfIpxBaseRoute2NextHopNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 13, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBaseRoute2NextHopNetwork.setStatus('obsolete')
if mibBuilder.loadTexts: wfIpxBaseRoute2NextHopNetwork.setDescription("In the case of a route bound to an interface which is realized via a broadcast media, the value of this field is the agent's IPX address on that interface.")
wfIpxBaseRoute2NextHopHost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 13, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBaseRoute2NextHopHost.setStatus('obsolete')
if mibBuilder.loadTexts: wfIpxBaseRoute2NextHopHost.setDescription('Full network.host_id address of nexthop host for this network.')
wfIpxBaseRoute2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("direct", 3), ("indirect", 4), ("static", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBaseRoute2Type.setStatus('obsolete')
if mibBuilder.loadTexts: wfIpxBaseRoute2Type.setDescription('The type of route. Note that the values direct(3) and indirect(4) refer to the notion of direct and indirect routing in the IPX architecture. Setting this object to the value invalid(2) has the effect of invalidating the corresponding entry in the ipRouteTable object. That is, it effectively dissasociates the destination identified with said entry from the route identified with said entry. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table. nagement stations must be prepared to receive tabular information from agents that corresponds to entries not currently in use. Proper interpretation of such entries requires examination of the relevant ipRouteType object.')
wfIpxBaseRoute2Proto = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("netmgmt", 3), ("rip", 4), ("nlsp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBaseRoute2Proto.setStatus('obsolete')
if mibBuilder.loadTexts: wfIpxBaseRoute2Proto.setDescription('The routing mechanism via which this route was learned. Inclusion of values for gateway routing protocols is not intended to imply that hosts should support those protocols.')
wfIpxBaseRoute2Age = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 13, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBaseRoute2Age.setStatus('obsolete')
if mibBuilder.loadTexts: wfIpxBaseRoute2Age.setDescription("The number of seconds since this route was last updated or otherwise determined to be correct. Note that no semantics of `too old' can be implied except through knowledge of the routing protocol by which the route was learned.")
wfIpxBaseRoute2Info = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 13, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBaseRoute2Info.setStatus('obsolete')
if mibBuilder.loadTexts: wfIpxBaseRoute2Info.setDescription('A user-defined string which describes this Route entry')
wfIpxBaseSapEntryTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 3), )
if mibBuilder.loadTexts: wfIpxBaseSapEntryTable.setStatus('obsolete')
if mibBuilder.loadTexts: wfIpxBaseSapEntryTable.setDescription("The table of Elements in IPX's SAP table")
wfIpxBaseSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 3, 1), ).setIndexNames((0, "Wellfleet-IPX-MIB", "wfIpxBaseSapIndex"))
if mibBuilder.loadTexts: wfIpxBaseSapEntry.setStatus('obsolete')
if mibBuilder.loadTexts: wfIpxBaseSapEntry.setDescription('An entry in the Routing Table')
wfIpxBaseSapType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBaseSapType.setStatus('obsolete')
if mibBuilder.loadTexts: wfIpxBaseSapType.setDescription('Multiple routes to a single destination can appear in the table, but access to such multiple entries is dependent on the table- access mechanisms defined by the network management protocol in use.')
wfIpxBaseSapNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBaseSapNetwork.setStatus('obsolete')
if mibBuilder.loadTexts: wfIpxBaseSapNetwork.setDescription('The network address of this service.')
wfIpxBaseSapHost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBaseSapHost.setStatus('obsolete')
if mibBuilder.loadTexts: wfIpxBaseSapHost.setDescription('The host address for this service.')
wfIpxBaseSapSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 3, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBaseSapSocket.setStatus('obsolete')
if mibBuilder.loadTexts: wfIpxBaseSapSocket.setDescription('The socket for this particular service')
wfIpxBaseSapName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBaseSapName.setStatus('obsolete')
if mibBuilder.loadTexts: wfIpxBaseSapName.setDescription('The server name.')
wfIpxBaseSapAge = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBaseSapAge.setStatus('obsolete')
if mibBuilder.loadTexts: wfIpxBaseSapAge.setDescription('The number of seconds since SAP entry has been updated.')
wfIpxBaseSapHops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBaseSapHops.setStatus('obsolete')
if mibBuilder.loadTexts: wfIpxBaseSapHops.setDescription('The number of Hops away service is from router.')
wfIpxBaseSapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(14, 14)).setFixedLength(14)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBaseSapIndex.setStatus('obsolete')
if mibBuilder.loadTexts: wfIpxBaseSapIndex.setDescription('Index string comprised of type.network.hostid.socket used to uniquely index this server.')
wfIpxBaseSapIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 3, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBaseSapIntf.setStatus('obsolete')
if mibBuilder.loadTexts: wfIpxBaseSapIntf.setDescription('Network Address of Nexthop Interface.')
wfIpxInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4), )
if mibBuilder.loadTexts: wfIpxInterfaceTable.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceTable.setDescription('The network interface record')
wfIpxInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4, 1), ).setIndexNames((0, "Wellfleet-IPX-MIB", "wfIpxInterfaceNetworkNumber"), (0, "Wellfleet-IPX-MIB", "wfIpxInterfaceCircuit"))
if mibBuilder.loadTexts: wfIpxInterfaceEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceEntry.setDescription('An entry in the Routing Table')
wfIpxInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxInterfaceIndex.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceIndex.setDescription('A unique value for each IPX interface. Its value ranges between 1 and the value of MAXCIRCUITS.')
wfIpxInterfaceDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxInterfaceDelete.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete an IPX interface.')
wfIpxInterfaceDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxInterfaceDisable.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable an IPX interface.')
wfIpxInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxInterfaceState.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceState.setDescription('The current state of the IPX interface')
wfIpxInterfaceCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxInterfaceCircuit.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceCircuit.setDescription('The Circuit Number that this interface runs over')
wfIpxInterfaceNetworkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxInterfaceNetworkNumber.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceNetworkNumber.setDescription("The IPX Address to which this entry's addressing information pertains")
wfIpxInterfaceCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("cost", 1))).clone('cost')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxInterfaceCost.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceCost.setDescription('The Cost associated with the IPX Address of this entry')
wfIpxInterfaceXsumOn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxInterfaceXsumOn.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceXsumOn.setDescription('Flag for checksums')
wfIpxInterfaceCfgEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ethernet", 1), ("lsap", 2), ("novell", 3), ("snap", 4), ("ppp", 5))).clone('ethernet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxInterfaceCfgEncaps.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceCfgEncaps.setDescription('The encapsulation method associated with this interface chosen by the user but not necessarily the one used. (See wfIpxInterfaceEncaps)')
wfIpxInterfaceMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxInterfaceMacAddress.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceMacAddress.setDescription('The MacAddress of this interface this port will receive or transmit.')
wfIpxInterfaceSMDSGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxInterfaceSMDSGroupAddress.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceSMDSGroupAddress.setDescription('The SMDS group address')
wfIpxInterfaceMaxInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxInterfaceMaxInfo.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceMaxInfo.setDescription('The maximum size of the INFO (non-MAC) field that this port will receive or transmit.')
wfIpxInterfaceInReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxInterfaceInReceives.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceInReceives.setDescription('The total number of input datagrams received from interfaces, including those received in error.')
wfIpxInterfaceInHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxInterfaceInHdrErrors.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceInHdrErrors.setDescription('The number of input datagrams discarded due to errors in their IPX headers, including bad checksums, version number mismatch, other format errors, time-to-live exceeded, errors discovered in processing their IPX options, etc.')
wfIpxInterfaceInAddrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxInterfaceInAddrErrors.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceInAddrErrors.setDescription("The number of input datagrams discarded because the IPX address in their IPX header's destination field was not a valid address to be received at this entity.")
wfIpxInterfaceForwDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxInterfaceForwDatagrams.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceForwDatagrams.setDescription('The number of input datagrams for which this entity was not their final IPX destination, as a result of which an attempt was made to find a route to forward them to that final destination. In entities which do not act as IPX Gateways, this counter will include only those packets which were Source-Routed via this entity, and the Source- Route option processing was successful.')
wfIpxInterfaceInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxInterfaceInUnknownProtos.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceInUnknownProtos.setDescription('The number of locally-addressed datagrams received successfully but discarded because of an unknown or unsupported protocol.')
wfIpxInterfaceInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxInterfaceInDiscards.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceInDiscards.setDescription('The number of input IPX datagrams for which no problems were encountered to prevent their continued processing, but which were discarded (e.g., for lack of buffer space). Note that this counter does not include any datagrams discarded while awaiting re-assembly.')
wfIpxInterfaceInDelivers = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxInterfaceInDelivers.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceInDelivers.setDescription('The total number of input datagrams successfully delivered to IPX user-protocols.')
wfIpxInterfaceOutRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxInterfaceOutRequests.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceOutRequests.setDescription('The total number of IPX datagrams which local IPX user-protocols supplied to IPX in requests for transmission. Note that this counter does not include any datagrams counted in ipxForwDatagrams.')
wfIpxInterfaceOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxInterfaceOutDiscards.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceOutDiscards.setDescription('The number of output IPX datagrams for which no problem was encountered to prevent their transmission to their destination, but which were discarded (e.g., for lack of buffer space). Note that this counter would include datagrams counted in ipForwDatagrams if any such packets met this (discretionary) discard criterion.')
wfIpxInterfaceOutNoRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxInterfaceOutNoRoutes.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceOutNoRoutes.setDescription("The number of IPX datagrams discarded because no route could be found to transmit them to their destination. Note that this counter includes any packets counted in ipForwDatagrams which meet this `no-route' criterion. Note that this includes any datagarms which a host cannot route because all of its default gateways are down.")
wfIpxInterfaceTrEndStation = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxInterfaceTrEndStation.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceTrEndStation.setDescription('Source Routing flag')
wfIpxInterfaceNetbiosAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxInterfaceNetbiosAccept.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceNetbiosAccept.setDescription('Accept NetBios All Networks Broadcast Packets')
wfIpxInterfaceNetbiosDeliver = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxInterfaceNetbiosDeliver.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceNetbiosDeliver.setDescription('Deliver NetBios All Networks Broadcast Packets')
wfIpxInterfaceWanSapPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("default", 2))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxInterfaceWanSapPeriod.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceWanSapPeriod.setDescription('Configurable timer for SAP updates over LAN-WAN')
wfIpxInterfaceFRBcast = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4, 1, 27), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxInterfaceFRBcast.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceFRBcast.setDescription('Configurable Frame Relay broadcast address')
wfIpxInterfaceFRMcast = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4, 1, 28), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxInterfaceFRMcast.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceFRMcast.setDescription('Configurable Frame Relay multicast address')
wfIpxInterfaceEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ethernet", 1), ("lsap", 2), ("novell", 3), ("snap", 4), ("ppp", 5))).clone('ethernet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxInterfaceEncaps.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceEncaps.setDescription("The Active or final encapsulation method associated with this interface as determined by the router's implementation of encapsulation algorithms (rules, restrictions) based on media type.")
wfIpxInterfaceSplit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxInterfaceSplit.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceSplit.setDescription('Enable or Disable Split Horizon algorithm for this interface Comes into to play for non full-meshed WAN networks (Frame Relay)')
wfIpxInterfaceCacheHit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxInterfaceCacheHit.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceCacheHit.setDescription('This counter was added for performance investigation under the same category as the number of Nets and number SAP counters. THis counter Will provide information that will determine the usefullness of caching.')
wfIpxInterfaceIpxWanDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxInterfaceIpxWanDisable.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceIpxWanDisable.setDescription('Enable IPXWAN negotiations')
wfIpxInterfaceIpxWanCommonNet = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4, 1, 33), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxInterfaceIpxWanCommonNet.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceIpxWanCommonNet.setDescription('Common network number for IPXWAN link')
wfIpxInterfaceIpxWanTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(60))).clone(namedValues=NamedValues(("default", 60))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxInterfaceIpxWanTimeOut.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceIpxWanTimeOut.setDescription('IPXWAN timer out period for negotiation')
wfIpxInterfaceIpxWanLinkRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5))).clone(namedValues=NamedValues(("default", 5))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxInterfaceIpxWanLinkRetry.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceIpxWanLinkRetry.setDescription('IPXWAN number of times to retry negotiation')
wfIpxInterfaceWanRipPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("default", 2))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxInterfaceWanRipPeriod.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceWanRipPeriod.setDescription('Configurable timer for routing updates LAN-WAN')
wfIpxInterfaceCfgHostNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4, 1, 37), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxInterfaceCfgHostNumber.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceCfgHostNumber.setDescription('Host Number and possible MAC address of interface. This host number will be used to overide the default cct generated hostnumber (if Multiple Host enabled). This field is not valid/used if the IpxBaseMultipleHost is not enabled, if the media is non-promiscuous (Token Ring) or if the field length is not 6 bytes.')
wfIpxInterfaceActiveHostNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 4, 1, 38), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxInterfaceActiveHostNumber.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxInterfaceActiveHostNumber.setDescription('Host Number and possible MAC address of interface. This field will always be filled in by the router and lists the HostNumber of each Interface.')
wfIpxRipIntfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 5), )
if mibBuilder.loadTexts: wfIpxRipIntfTable.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxRipIntfTable.setDescription('The list of RIP interfaces')
wfIpxRipIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 5, 1), ).setIndexNames((0, "Wellfleet-IPX-MIB", "wfIpxRipInterfaceIndex"))
if mibBuilder.loadTexts: wfIpxRipIntfEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxRipIntfEntry.setDescription('An entry in the Routing Table')
wfIpxRipInterfaceDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxRipInterfaceDelete.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxRipInterfaceDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete an RIP Interface instance.')
wfIpxRipInterfaceDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxRipInterfaceDisable.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxRipInterfaceDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable an RIP instance.')
wfIpxRipInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxRipInterfaceState.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxRipInterfaceState.setDescription('The current state of RIP on this interface.')
wfIpxRipInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxRipInterfaceIndex.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxRipInterfaceIndex.setDescription('The IPX interface to run RIP on (instance id ).')
wfIpxRipInterfaceSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxRipInterfaceSupply.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxRipInterfaceSupply.setDescription('Transmit RIP packets.')
wfIpxRipInterfaceListen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxRipInterfaceListen.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxRipInterfaceListen.setDescription('Receive RIP packets.')
wfIpxAdjacentHostTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 6), )
if mibBuilder.loadTexts: wfIpxAdjacentHostTable.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxAdjacentHostTable.setDescription('Table of configured Static Hosts This is implemented for hosts that are accessible over Frame Relay, SMDS etc. where a corresponding DLCI address must be configured for a nexthop host.')
wfIpxAdjacentHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 6, 1), ).setIndexNames((0, "Wellfleet-IPX-MIB", "wfIpxAhTargHostNetwork"), (0, "Wellfleet-IPX-MIB", "wfIpxAhTargHostId"))
if mibBuilder.loadTexts: wfIpxAdjacentHostEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxAdjacentHostEntry.setDescription('An entry in the Adjacent Host Table')
wfIpxAhDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxAhDelete.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxAhDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete the IPX Static Host.')
wfIpxAhDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxAhDisable.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxAhDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable this IPX Static Route.')
wfIpxAhTargHostNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAhTargHostNetwork.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxAhTargHostNetwork.setDescription('The network address of the static host.')
wfIpxAhTargHostId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAhTargHostId.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxAhTargHostId.setDescription('The Address of this static host.')
wfIpxAhNextHopIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 6, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxAhNextHopIntf.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxAhNextHopIntf.setDescription('The Next Hop Interface Network Address')
wfIpxAhDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 6, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxAhDlci.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxAhDlci.setDescription('The next Hop Host address')
wfIpxStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 7), )
if mibBuilder.loadTexts: wfIpxStaticRouteTable.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxStaticRouteTable.setDescription('The list of static routes used for Configuring IPX')
wfIpxStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 7, 1), ).setIndexNames((0, "Wellfleet-IPX-MIB", "wfIpxSrTargNetwork"), (0, "Wellfleet-IPX-MIB", "wfIpxSrNextHopNetwork"))
if mibBuilder.loadTexts: wfIpxStaticRouteEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxStaticRouteEntry.setDescription('An entry in the Routing Table')
wfIpxSrDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxSrDelete.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxSrDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete the IPX Static Route.')
wfIpxSrDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxSrDisable.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxSrDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable this IPX Static Route.')
wfIpxSrTargNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxSrTargNetwork.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxSrTargNetwork.setDescription('The Address of this static route')
wfIpxSrCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxSrCost.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxSrCost.setDescription('The Cost of this Static Route in Hops')
wfIpxSrNextHopNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 7, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxSrNextHopNetwork.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxSrNextHopNetwork.setDescription('The Next Hop IPX Address')
wfIpxSrNextHopHost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 7, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxSrNextHopHost.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxSrNextHopHost.setDescription('The next Hop Host address')
wfIpxSrTargNetworkRt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxSrTargNetworkRt.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxSrTargNetworkRt.setDescription('The Route Identifier Which numbered route this is to be')
wfIpxSrTickCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 7, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxSrTickCost.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxSrTickCost.setDescription('The Cost of this Static Route in Ticks')
wfIpxNetBiosStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 8), )
if mibBuilder.loadTexts: wfIpxNetBiosStaticRouteTable.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxNetBiosStaticRouteTable.setDescription('The list of static routes used for Configuring IPX')
wfIpxNetBiosStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 8, 1), ).setIndexNames((0, "Wellfleet-IPX-MIB", "wfIpxNetBiosSrTargNetwork"), (0, "Wellfleet-IPX-MIB", "wfIpxNetBiosSrIntf"))
if mibBuilder.loadTexts: wfIpxNetBiosStaticRouteEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxNetBiosStaticRouteEntry.setDescription('An entry in the Routing Table')
wfIpxNetBiosSrDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxNetBiosSrDelete.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxNetBiosSrDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete the IPX NETBIOS Static Route.')
wfIpxNetBiosSrDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxNetBiosSrDisable.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxNetBiosSrDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable this IPX NETBIOS Static Route.')
wfIpxNetBiosSrTargNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxNetBiosSrTargNetwork.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxNetBiosSrTargNetwork.setDescription('The Address of this static route')
wfIpxNetBiosSrName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 8, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxNetBiosSrName.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxNetBiosSrName.setDescription('The Name of the Target Server')
wfIpxNetBiosSrIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 8, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxNetBiosSrIntf.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxNetBiosSrIntf.setDescription('The Interface Identifier for this static entry')
wfIpxNetBiosSrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxNetBiosSrIndex.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxNetBiosSrIndex.setDescription('The Entry Index Which identifies this is entry')
wfIpxStaticSapTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 12), )
if mibBuilder.loadTexts: wfIpxStaticSapTable.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxStaticSapTable.setDescription('The table of Static Services')
wfIpxStaticSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 12, 1), ).setIndexNames((0, "Wellfleet-IPX-MIB", "wfIpxStaticSapIntf"), (0, "Wellfleet-IPX-MIB", "wfIpxStaticSapCircuit"), (0, "Wellfleet-IPX-MIB", "wfIpxStaticSapType"), (0, "Wellfleet-IPX-MIB", "wfIpxStaticSapNetwork"), (0, "Wellfleet-IPX-MIB", "wfIpxStaticSapSocket"))
if mibBuilder.loadTexts: wfIpxStaticSapEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxStaticSapEntry.setDescription('An entry in the Routing Table')
wfIpxStaticSapDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxStaticSapDelete.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxStaticSapDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete the IPX Static SAP.')
wfIpxStaticSapDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxStaticSapDisable.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxStaticSapDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable this IPX Static Route.')
wfIpxStaticSapType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 12, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxStaticSapType.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxStaticSapType.setDescription('Multiple routes to a single destination can appear in the table, but access to such multiple entries is dependent on the table- access mechanisms defined by the network management protocol in use.')
wfIpxStaticSapNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 12, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxStaticSapNetwork.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxStaticSapNetwork.setDescription('The network address of this service.')
wfIpxStaticSapHost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 12, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxStaticSapHost.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxStaticSapHost.setDescription('The host address for this service.')
wfIpxStaticSapSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 12, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxStaticSapSocket.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxStaticSapSocket.setDescription('The socket for this particular service')
wfIpxStaticSapName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 12, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxStaticSapName.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxStaticSapName.setDescription('The server name.')
wfIpxStaticSapHops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 12, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxStaticSapHops.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxStaticSapHops.setDescription('The number of Hops away service is from router.')
wfIpxStaticSapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 12, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxStaticSapIndex.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxStaticSapIndex.setDescription('Index string comprised of intf1.type.network.hostid.socket. Makes sorting easier and its a ah work around.')
wfIpxStaticSapIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 12, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxStaticSapIntf.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxStaticSapIntf.setDescription('Network Address of Nexthop Interface.')
wfIpxStaticSapCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 12, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxStaticSapCircuit.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxStaticSapCircuit.setDescription('Circuit of Nexthop Interface.')
wfIpxSapNetLvlFilterTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 9), )
if mibBuilder.loadTexts: wfIpxSapNetLvlFilterTable.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxSapNetLvlFilterTable.setDescription('The list of Network Level SAP Filters')
wfIpxSapNetLvlFilter = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 9, 1), ).setIndexNames((0, "Wellfleet-IPX-MIB", "wfIpxSapNetLvlIntf"), (0, "Wellfleet-IPX-MIB", "wfIpxSapNetLvlIndex"))
if mibBuilder.loadTexts: wfIpxSapNetLvlFilter.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxSapNetLvlFilter.setDescription('An entry in the Filter Table')
wfIpxSapNetLvlDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxSapNetLvlDelete.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxSapNetLvlDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete the IPX Sap network level filter.')
wfIpxSapNetLvlDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxSapNetLvlDisable.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxSapNetLvlDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable this IPX network level SAP filter.')
wfIpxSapNetLvlTargNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 9, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxSapNetLvlTargNetwork.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxSapNetLvlTargNetwork.setDescription('The Target Network address to monitor')
wfIpxSapNetLvlType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 9, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxSapNetLvlType.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxSapNetLvlType.setDescription('The Type of service to monitor')
wfIpxSapNetLvlAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxSapNetLvlAction.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxSapNetLvlAction.setDescription('The Action to take Advertise or not Advertise')
wfIpxSapNetLvlIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 9, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxSapNetLvlIntf.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxSapNetLvlIntf.setDescription('The Interface identifier for this filter')
wfIpxSapNetLvlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxSapNetLvlIndex.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxSapNetLvlIndex.setDescription('The Filter Index .')
wfIpxSapServtLvlFilterTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 10), )
if mibBuilder.loadTexts: wfIpxSapServtLvlFilterTable.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxSapServtLvlFilterTable.setDescription('The list of Server Level SAP Filters')
wfIpxSapServLvlFilter = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 10, 1), ).setIndexNames((0, "Wellfleet-IPX-MIB", "wfIpxSapServLvlIntf"), (0, "Wellfleet-IPX-MIB", "wfIpxSapServLvlIndex"))
if mibBuilder.loadTexts: wfIpxSapServLvlFilter.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxSapServLvlFilter.setDescription('An entry in the Filter Table')
wfIpxSapServLvlDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxSapServLvlDelete.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxSapServLvlDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete the IPX server-level SAP filter.')
wfIpxSapServLvlDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxSapServLvlDisable.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxSapServLvlDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable this IPX server-level SAP filter.')
wfIpxSapServLvlTargServer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 10, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxSapServLvlTargServer.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxSapServLvlTargServer.setDescription('The Server Name to monitor.')
wfIpxSapServLvlType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 10, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxSapServLvlType.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxSapServLvlType.setDescription('Type of service File server, Printer, etc...')
wfIpxSapServLvlAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxSapServLvlAction.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxSapServLvlAction.setDescription('Associated Action (advertise or ignore )')
wfIpxSapServLvlIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 10, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxSapServLvlIntf.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxSapServLvlIntf.setDescription('The Interface identifier for this filter')
wfIpxSapServLvlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxSapServLvlIndex.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxSapServLvlIndex.setDescription('The Filter Index .')
wfIpxTrafficFilterTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 11), )
if mibBuilder.loadTexts: wfIpxTrafficFilterTable.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxTrafficFilterTable.setDescription('IPX Traffic Filters')
wfIpxTrafficFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 11, 1), ).setIndexNames((0, "Wellfleet-IPX-MIB", "wfIpxTrafficFilterInterface"), (0, "Wellfleet-IPX-MIB", "wfIpxTrafficFilterCircuit"), (0, "Wellfleet-IPX-MIB", "wfIpxTrafficFilterRuleNumber"), (0, "Wellfleet-IPX-MIB", "wfIpxTrafficFilterFragment"))
if mibBuilder.loadTexts: wfIpxTrafficFilterEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxTrafficFilterEntry.setDescription('A traffic filter definition')
wfIpxTrafficFilterCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxTrafficFilterCreate.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxTrafficFilterCreate.setDescription('Defines the existence of the traffic filter rule: created - traffic filter exists delete - traffic filter does not exist and can be deleted.')
wfIpxTrafficFilterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxTrafficFilterEnable.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxTrafficFilterEnable.setDescription('Defines whether or not the traffic filter rule should be used: enabled - activate the rule. disabled - inactivate the rule.')
wfIpxTrafficFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("error", 2), ("inactive", 3))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxTrafficFilterStatus.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxTrafficFilterStatus.setDescription('Defines the current status of the traffic filter: inactive - the rule is not in use. active - the rule is being used. error - the application detected an error in the rule.')
wfIpxTrafficFilterCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxTrafficFilterCounter.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxTrafficFilterCounter.setDescription('The number of received packets that have matched this rule.')
wfIpxTrafficFilterDefinition = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 11, 1, 5), Opaque()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxTrafficFilterDefinition.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxTrafficFilterDefinition.setDescription('The filter rule definition.')
wfIpxTrafficFilterReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxTrafficFilterReserved.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxTrafficFilterReserved.setDescription('Reserved field.')
wfIpxTrafficFilterInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 11, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxTrafficFilterInterface.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxTrafficFilterInterface.setDescription('The network address of the IPX interface to which this filter is applied.')
wfIpxTrafficFilterCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 11, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxTrafficFilterCircuit.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxTrafficFilterCircuit.setDescription('The ID of the Circuit to which the filter is applied.')
wfIpxTrafficFilterRuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 11, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxTrafficFilterRuleNumber.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxTrafficFilterRuleNumber.setDescription('ID for the rule.')
wfIpxTrafficFilterFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 11, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxTrafficFilterFragment.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxTrafficFilterFragment.setDescription('Fragment number - for large rules.')
wfIpxTrafficFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 11, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxTrafficFilterName.setStatus('deprecated')
if mibBuilder.loadTexts: wfIpxTrafficFilterName.setDescription('Name of the rule number.')
wfIpxAggrStats = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 14))
wfIpxAggrInDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 14, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAggrInDatagrams.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAggrInDatagrams.setDescription('The total number of datagrams received')
wfIpxAggrOutDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 14, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAggrOutDatagrams.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAggrOutDatagrams.setDescription('The total number of datagrams sent (includes datagrams forwarded)')
wfIpxAggrFwdDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 14, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAggrFwdDatagrams.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAggrFwdDatagrams.setDescription('The total number of datagrams forwarded')
wfIpxAggrInDiscards = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 14, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAggrInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAggrInDiscards.setDescription('The total number of datagrams queued for reception that were discarded for resource reasons')
wfIpxAggrInHdrErrs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 14, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAggrInHdrErrs.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAggrInHdrErrs.setDescription('The total number of datagrams discarded because of errors in the IPX header.')
wfIpxAggrInAddrErrs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 14, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAggrInAddrErrs.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAggrInAddrErrs.setDescription('The total nmber of datagrams received whose destination address was invalid for this entity.')
wfIpxAggrInUnknownProtos = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 14, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAggrInUnknownProtos.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAggrInUnknownProtos.setDescription('The total number of datagrams received locally which specified an unknown or unsupported protocol.')
wfIpxAggrOutDiscards = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 14, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAggrOutDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAggrOutDiscards.setDescription('The total number of datagrams queued for transmission that were discarded for resource reasons.')
wfIpxAggrOutNoRoutes = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 14, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAggrOutNoRoutes.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAggrOutNoRoutes.setDescription('The total number of datagrams queued for transmission thet were discarded because the destination was unreachable.')
mibBuilder.exportSymbols("Wellfleet-IPX-MIB", wfIpxRipIntfEntry=wfIpxRipIntfEntry, wfIpxStaticRouteTable=wfIpxStaticRouteTable, wfIpxInterfaceInDiscards=wfIpxInterfaceInDiscards, wfIpxTrafficFilterCircuit=wfIpxTrafficFilterCircuit, wfIpxBaseRouteNextHopHost=wfIpxBaseRouteNextHopHost, wfIpxAggrInUnknownProtos=wfIpxAggrInUnknownProtos, wfIpxBaseRouteType=wfIpxBaseRouteType, wfIpxBaseState=wfIpxBaseState, wfIpxStaticSapIntf=wfIpxStaticSapIntf, wfIpxSrDisable=wfIpxSrDisable, wfIpxInterfaceState=wfIpxInterfaceState, wfIpxBaseSapIndex=wfIpxBaseSapIndex, wfIpxNetBiosSrIndex=wfIpxNetBiosSrIndex, wfIpxSapServLvlFilter=wfIpxSapServLvlFilter, wfIpxBaseSapEntry=wfIpxBaseSapEntry, wfIpxBaseHostCount=wfIpxBaseHostCount, wfIpxBaseNetTblFillNotify=wfIpxBaseNetTblFillNotify, wfIpxBaseRouteMetric=wfIpxBaseRouteMetric, wfIpxBaseRoute2NextHopHost=wfIpxBaseRoute2NextHopHost, wfIpxSapServLvlTargServer=wfIpxSapServLvlTargServer, wfIpxAggrInAddrErrs=wfIpxAggrInAddrErrs, wfIpxSrDelete=wfIpxSrDelete, wfIpxInterfaceActiveHostNumber=wfIpxInterfaceActiveHostNumber, wfIpxInterfaceFRBcast=wfIpxInterfaceFRBcast, wfIpxInterfaceSplit=wfIpxInterfaceSplit, wfIpxInterfaceCost=wfIpxInterfaceCost, wfIpxSapServLvlType=wfIpxSapServLvlType, wfIpxInterfaceIndex=wfIpxInterfaceIndex, wfIpxBaseTrigUpdateEn=wfIpxBaseTrigUpdateEn, wfIpxBaseSapHost=wfIpxBaseSapHost, wfIpxBaseRouteProto=wfIpxBaseRouteProto, wfIpxInterfaceCfgEncaps=wfIpxInterfaceCfgEncaps, wfIpxAhTargHostNetwork=wfIpxAhTargHostNetwork, wfIpxSrTickCost=wfIpxSrTickCost, wfIpxBaseMaxNetTblSize=wfIpxBaseMaxNetTblSize, wfIpxSapServLvlDisable=wfIpxSapServLvlDisable, wfIpxBaseRoute2Dest=wfIpxBaseRoute2Dest, wfIpxSapServLvlAction=wfIpxSapServLvlAction, wfIpxRipInterfaceState=wfIpxRipInterfaceState, wfIpxSapNetLvlIntf=wfIpxSapNetLvlIntf, wfIpxStaticSapTable=wfIpxStaticSapTable, wfIpxInterfaceMacAddress=wfIpxInterfaceMacAddress, wfIpxInterfaceCacheHit=wfIpxInterfaceCacheHit, wfIpxAggrOutDiscards=wfIpxAggrOutDiscards, wfIpxInterfaceInHdrErrors=wfIpxInterfaceInHdrErrors, wfIpxTrafficFilterDefinition=wfIpxTrafficFilterDefinition, wfIpxBaseMultipleHostAddrs=wfIpxBaseMultipleHostAddrs, wfIpxNetBiosSrDisable=wfIpxNetBiosSrDisable, wfIpxInterfaceNetbiosAccept=wfIpxInterfaceNetbiosAccept, wfIpxBaseRt2EntryTable=wfIpxBaseRt2EntryTable, wfIpxInterfaceInReceives=wfIpxInterfaceInReceives, wfIpxAhDisable=wfIpxAhDisable, wfIpxBaseSapNetwork=wfIpxBaseSapNetwork, wfIpxInterfaceCfgHostNumber=wfIpxInterfaceCfgHostNumber, wfIpxBaseRoute2Type=wfIpxBaseRoute2Type, wfIpxSapNetLvlAction=wfIpxSapNetLvlAction, wfIpxStaticSapDisable=wfIpxStaticSapDisable, wfIpxInterfaceInAddrErrors=wfIpxInterfaceInAddrErrors, wfIpxBaseSapIntf=wfIpxBaseSapIntf, wfIpxSapNetLvlFilter=wfIpxSapNetLvlFilter, wfIpxTrafficFilterStatus=wfIpxTrafficFilterStatus, wfIpxRipInterfaceSupply=wfIpxRipInterfaceSupply, wfIpxBaseDisable=wfIpxBaseDisable, wfIpxBaseRouteInfo=wfIpxBaseRouteInfo, wfIpxBaseSapHops=wfIpxBaseSapHops, wfIpxNetBiosSrDelete=wfIpxNetBiosSrDelete, wfIpxSapNetLvlIndex=wfIpxSapNetLvlIndex, wfIpxBaseRoute2Info=wfIpxBaseRoute2Info, wfIpxInterfaceTable=wfIpxInterfaceTable, wfIpxInterfaceIpxWanTimeOut=wfIpxInterfaceIpxWanTimeOut, wfIpxBaseRouterName=wfIpxBaseRouterName, wfIpxInterfaceOutNoRoutes=wfIpxInterfaceOutNoRoutes, wfIpxAdjacentHostTable=wfIpxAdjacentHostTable, wfIpxAhNextHopIntf=wfIpxAhNextHopIntf, wfIpxBaseRipMethod=wfIpxBaseRipMethod, wfIpxTrafficFilterRuleNumber=wfIpxTrafficFilterRuleNumber, wfIpxStaticSapHost=wfIpxStaticSapHost, wfIpxBaseRouteNextHopNetwork=wfIpxBaseRouteNextHopNetwork, wfIpxNetBiosSrName=wfIpxNetBiosSrName, wfIpxBaseSapType=wfIpxBaseSapType, wfIpxStaticSapIndex=wfIpxStaticSapIndex, wfIpxBase=wfIpxBase, wfIpxAggrInDiscards=wfIpxAggrInDiscards, wfIpxInterfaceForwDatagrams=wfIpxInterfaceForwDatagrams, wfIpxStaticSapCircuit=wfIpxStaticSapCircuit, wfIpxTrafficFilterReserved=wfIpxTrafficFilterReserved, wfIpxBaseLogFilter=wfIpxBaseLogFilter, wfIpxTrafficFilterName=wfIpxTrafficFilterName, wfIpxInterfaceCircuit=wfIpxInterfaceCircuit, wfIpxStaticSapType=wfIpxStaticSapType, wfIpxBaseDelete=wfIpxBaseDelete, wfIpxStaticSapDelete=wfIpxStaticSapDelete, wfIpxRipInterfaceDelete=wfIpxRipInterfaceDelete, wfIpxSrNextHopNetwork=wfIpxSrNextHopNetwork, wfIpxAggrFwdDatagrams=wfIpxAggrFwdDatagrams, wfIpxBaseRoute2Ticks=wfIpxBaseRoute2Ticks, wfIpxTrafficFilterFragment=wfIpxTrafficFilterFragment, wfIpxNetBiosSrTargNetwork=wfIpxNetBiosSrTargNetwork, wfIpxBasePrimaryNetNumber=wfIpxBasePrimaryNetNumber, wfIpxInterfaceTrEndStation=wfIpxInterfaceTrEndStation, wfIpxInterfaceOutDiscards=wfIpxInterfaceOutDiscards, wfIpxSapServLvlIndex=wfIpxSapServLvlIndex, wfIpxSapNetLvlDisable=wfIpxSapNetLvlDisable, wfIpxInterfaceFRMcast=wfIpxInterfaceFRMcast, wfIpxBaseRouteDest=wfIpxBaseRouteDest, wfIpxSapNetLvlDelete=wfIpxSapNetLvlDelete, wfIpxBaseRouteAge=wfIpxBaseRouteAge, wfIpxBaseSapEntryTable=wfIpxBaseSapEntryTable, wfIpxInterfaceEncaps=wfIpxInterfaceEncaps, wfIpxInterfaceIpxWanLinkRetry=wfIpxInterfaceIpxWanLinkRetry, wfIpxBaseRoute2IfIndex=wfIpxBaseRoute2IfIndex, wfIpxStaticSapSocket=wfIpxStaticSapSocket, wfIpxBaseNovellCertificationConformance=wfIpxBaseNovellCertificationConformance, wfIpxRipIntfTable=wfIpxRipIntfTable, wfIpxSrCost=wfIpxSrCost, wfIpxSrTargNetworkRt=wfIpxSrTargNetworkRt, wfIpxTrafficFilterEntry=wfIpxTrafficFilterEntry, wfIpxBaseRoute2Age=wfIpxBaseRoute2Age, wfIpxRipInterfaceListen=wfIpxRipInterfaceListen, wfIpxNetBiosStaticRouteTable=wfIpxNetBiosStaticRouteTable, wfIpxBaseMaximumPath=wfIpxBaseMaximumPath, wfIpxSrNextHopHost=wfIpxSrNextHopHost, wfIpxAdjacentHostEntry=wfIpxAdjacentHostEntry, wfIpxBaseSapName=wfIpxBaseSapName, wfIpxBaseNetCount=wfIpxBaseNetCount, wfIpxSapNetLvlType=wfIpxSapNetLvlType, wfIpxSapNetLvlFilterTable=wfIpxSapNetLvlFilterTable, wfIpxSrTargNetwork=wfIpxSrTargNetwork, wfIpxBaseRoute2NextHopNetwork=wfIpxBaseRoute2NextHopNetwork, wfIpxStaticSapName=wfIpxStaticSapName, wfIpxBaseSapSocket=wfIpxBaseSapSocket, wfIpxInterfaceMaxInfo=wfIpxInterfaceMaxInfo, wfIpxBaseRoute2Proto=wfIpxBaseRoute2Proto, wfIpxSapServtLvlFilterTable=wfIpxSapServtLvlFilterTable, wfIpxAggrOutNoRoutes=wfIpxAggrOutNoRoutes, wfIpxBaseSapAge=wfIpxBaseSapAge, wfIpxStaticSapNetwork=wfIpxStaticSapNetwork, wfIpxBaseRoute2Hops=wfIpxBaseRoute2Hops, wfIpxInterfaceWanSapPeriod=wfIpxInterfaceWanSapPeriod, wfIpxNetBiosStaticRouteEntry=wfIpxNetBiosStaticRouteEntry, wfIpxStaticSapEntry=wfIpxStaticSapEntry, wfIpxTrafficFilterTable=wfIpxTrafficFilterTable, wfIpxTrafficFilterCounter=wfIpxTrafficFilterCounter, wfIpxAggrStats=wfIpxAggrStats, wfIpxAggrInHdrErrs=wfIpxAggrInHdrErrs, wfIpxAggrInDatagrams=wfIpxAggrInDatagrams, wfIpxStaticSapHops=wfIpxStaticSapHops, wfIpxInterfaceXsumOn=wfIpxInterfaceXsumOn, wfIpxTrafficFilterInterface=wfIpxTrafficFilterInterface, wfIpxNetBiosSrIntf=wfIpxNetBiosSrIntf, wfIpxRipInterfaceDisable=wfIpxRipInterfaceDisable, wfIpxInterfaceSMDSGroupAddress=wfIpxInterfaceSMDSGroupAddress, wfIpxAhTargHostId=wfIpxAhTargHostId, wfIpxSapServLvlDelete=wfIpxSapServLvlDelete, wfIpxTrafficFilterEnable=wfIpxTrafficFilterEnable, wfIpxBaseNetTblSize=wfIpxBaseNetTblSize, wfIpxInterfaceWanRipPeriod=wfIpxInterfaceWanRipPeriod, wfIpxStaticRouteEntry=wfIpxStaticRouteEntry, wfIpxInterfaceDelete=wfIpxInterfaceDelete, wfIpxSapNetLvlTargNetwork=wfIpxSapNetLvlTargNetwork, wfIpxInterfaceDisable=wfIpxInterfaceDisable, wfIpxInterfaceInUnknownProtos=wfIpxInterfaceInUnknownProtos, wfIpxBaseRtEntryTable=wfIpxBaseRtEntryTable, wfIpxInterfaceNetworkNumber=wfIpxInterfaceNetworkNumber, wfIpxAggrOutDatagrams=wfIpxAggrOutDatagrams, wfIpxAhDelete=wfIpxAhDelete, wfIpxInterfaceInDelivers=wfIpxInterfaceInDelivers, wfIpxInterfaceNetbiosDeliver=wfIpxInterfaceNetbiosDeliver, wfIpxRipInterfaceIndex=wfIpxRipInterfaceIndex, wfIpxBaseNetSizeBoundEn=wfIpxBaseNetSizeBoundEn, wfIpxBaseRt2Entry=wfIpxBaseRt2Entry, wfIpxBaseCfgHostNumber=wfIpxBaseCfgHostNumber, wfIpxInterfaceEntry=wfIpxInterfaceEntry, wfIpxInterfaceIpxWanCommonNet=wfIpxInterfaceIpxWanCommonNet, wfIpxInterfaceIpxWanDisable=wfIpxInterfaceIpxWanDisable, wfIpxInterfaceOutRequests=wfIpxInterfaceOutRequests, wfIpxBaseServiceCount=wfIpxBaseServiceCount, wfIpxAhDlci=wfIpxAhDlci, wfIpxTrafficFilterCreate=wfIpxTrafficFilterCreate, wfIpxBaseRtEntry=wfIpxBaseRtEntry, wfIpxSapServLvlIntf=wfIpxSapServLvlIntf, wfIpxBaseActiveHostNumber=wfIpxBaseActiveHostNumber, wfIpxBaseRouteIfIndex=wfIpxBaseRouteIfIndex)
