#
# PySNMP MIB module Unisphere-Data-POLICY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Unisphere-Data-POLICY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:30:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Gauge32, Counter64, Bits, ObjectIdentity, iso, ModuleIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Unsigned32, MibIdentifier, Integer32, Counter32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter64", "Bits", "ObjectIdentity", "iso", "ModuleIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Unsigned32", "MibIdentifier", "Integer32", "Counter32", "TimeTicks")
DisplayString, TextualConvention, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus", "TruthValue")
usDataMibs, = mibBuilder.importSymbols("Unisphere-Data-MIBs", "usDataMibs")
usdPolicyMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27))
usdPolicyMIB.setRevisions(('2002-03-28 14:53', '2001-09-07 14:48', '2001-04-17 12:10', '2001-01-23 21:30', '2000-11-29 20:30', '2000-05-15 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: usdPolicyMIB.setRevisionsDescriptions(('Extended rate limit profile objects. Added traffic class rule objects. Obsoleted policy traffic shaped objects.', 'Added TCP flag and IP flag support objects. Replaced usdPolicyProfileTable with usdPolicyAttachProfileTable. Created new confomance groupings.', 'Added color rule objects. Added Local Input Policy ID and Local Input Stats Enable objects to the usdPolicyProfileTable. Replaced usdPolicyIfTable with usdPolicyIfAttachTable. Replaced usdPolicyIfStatsTable with usdPolicyIfAttachStatsTable.', 'Added log rule objects.', 'Added policy traffic shaped objects.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: usdPolicyMIB.setLastUpdated('200203281453Z')
if mibBuilder.loadTexts: usdPolicyMIB.setOrganization('Unisphere Networks, Inc.')
if mibBuilder.loadTexts: usdPolicyMIB.setContactInfo(' Unisphere Networks, Inc. Postal: 10 Technology Park Drive Westford, MA 01886 USA Tel: +1 978 589 5800 Email: mib@UnisphereNetworks.com')
if mibBuilder.loadTexts: usdPolicyMIB.setDescription('The Policy MIB for the Unisphere Networks Inc. enterprise.')
class UsdClaclPortOperator(TextualConvention, Integer32):
    description = 'Enumerates valid operators for use as source and destination port operators within a classifier control list.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("noOperator", 0), ("lt", 1), ("gt", 2), ("eq", 3), ("ne", 4), ("range", 5))

class UsdPolicyAttachmentType(TextualConvention, Integer32):
    description = 'Enumerates the types of policy attachments.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("inputPolicy", 1), ("outputPolicy", 2), ("localInputPolicy", 3))

class UsdPolicyForwardingType(TextualConvention, Integer32):
    description = 'Enumerates the type of forwarding to which the policy is applied.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ipForwarding", 1), ("cbfForwarding", 2))

class UsdPolicyIpFragValue(TextualConvention, Integer32):
    description = 'Enumerates the values for IP frag offset classification.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("equalToZero", 0), ("equalToOne", 1), ("reserved1", 2), ("greaterThenOne", 3), ("notSpecified", 4))

class UsdRateLimitProfileType(TextualConvention, Integer32):
    description = 'Enumerates the types of rate limit profiles.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("oneRate", 1), ("twoRate", 2))

usdPolicyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1))
usdClassifierControlList = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 1))
usdRateLimitControlList = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 2))
usdPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3))
usdPolicyIf = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 4))
usdPolicyProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 5))
usdPolicyStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 6))
usdTrafficShapeControlList = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 7))
usdPolicyNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPolicyNextIndex.setStatus('current')
if mibBuilder.loadTexts: usdPolicyNextIndex.setDescription('This scalar object returns the index of the next available row in the usdPolicyTable. This object returns a value of zero when it is the lexicographic successor of a varbind presented in an SNMP GETNEXT or GETBULK request, for which circumstance it is assumed that index allocation is unintended.')
usdPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 2), )
if mibBuilder.loadTexts: usdPolicyTable.setStatus('current')
if mibBuilder.loadTexts: usdPolicyTable.setDescription('This table contains entries which represent the non-repetive fields of a policy definition.')
usdPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 2, 1), ).setIndexNames((0, "Unisphere-Data-POLICY-MIB", "usdPolicyId"))
if mibBuilder.loadTexts: usdPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: usdPolicyEntry.setDescription('Each entry contains the non-repetitive fields of a policy definition.')
usdPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: usdPolicyId.setStatus('current')
if mibBuilder.loadTexts: usdPolicyId.setDescription('The number of the policy table entry which is defined by this row.')
usdPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdPolicyRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy *** LIMITED ACCESS LIST CONFIGURATION LEVEL *** RowStatus createAndGo/destroy operations have the following special-purpose semantics: createAndGo Create an entry having the specified configuration and append it to the target list, i.e. create a policy table entry with the associated policy name. destroy Destroy the specified list and all of its constituent elements. Policy row members may not be modified once the row has been created.')
usdPolicyAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPolicyAdminState.setStatus('current')
if mibBuilder.loadTexts: usdPolicyAdminState.setDescription('This object is used to control the administrative state of a policy. Enabling a policy will result in the rules which make up a policy being applied to interfaces to which the policy is assigned. Disabling a policy results in the the policy being taken out of service. This object may be modified while the row is active.')
usdPolicyOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("invalid", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPolicyOperStatus.setStatus('current')
if mibBuilder.loadTexts: usdPolicyOperStatus.setDescription('This object is used to retrieve the operational state of a policy. If a policy is disabled, it is not applied to any interfaces within the system. If a policy is invalid, there is a problem with the policy preventing it from being applied to an interface. An error code providing diagnostic information about the problem is found in usdPolicyErrorValue. If a policy is enabled, it has been applied to one or more interfaces within the system.')
usdPolicyErrorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPolicyErrorValue.setStatus('current')
if mibBuilder.loadTexts: usdPolicyErrorValue.setDescription('An error code providing diagnostic information for invalid policies. The enumeration of this field is TBD. A zero (0) value indicates that there is no error reported.')
usdPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPolicyName.setStatus('current')
if mibBuilder.loadTexts: usdPolicyName.setDescription('Specifies the name of the policy defined by this row.')
usdPolicyReferenceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPolicyReferenceCount.setStatus('current')
if mibBuilder.loadTexts: usdPolicyReferenceCount.setDescription('Reflects the number of times this policy has been applied within the chassis.')
usdPolicyRuleNextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPolicyRuleNextIndex.setStatus('current')
if mibBuilder.loadTexts: usdPolicyRuleNextIndex.setDescription('Read only variable which provides the next available PolicyRuleIndex with respect to the policy defined by this row. This object returns a value of zero when it is the lexicographic successor of a varbind presented in an SNMP GETNEXT or GETBULK request, for which circumstance it is assumed that index allocation is unintended.')
usdPolicyRuleTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 3), )
if mibBuilder.loadTexts: usdPolicyRuleTable.setStatus('current')
if mibBuilder.loadTexts: usdPolicyRuleTable.setDescription('Each entry within this table defines a rule component of a policy. The entries in this table are created automatically when entries are created in specific rule tables. This table is read only')
usdPolicyRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 3, 1), ).setIndexNames((0, "Unisphere-Data-POLICY-MIB", "usdPolicyRulePolicyId"), (0, "Unisphere-Data-POLICY-MIB", "usdPolicyRulePrec"), (0, "Unisphere-Data-POLICY-MIB", "usdPolicyRuleId"))
if mibBuilder.loadTexts: usdPolicyRuleEntry.setStatus('current')
if mibBuilder.loadTexts: usdPolicyRuleEntry.setDescription('Each entry defines a single rule component.')
usdPolicyRulePolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: usdPolicyRulePolicyId.setStatus('current')
if mibBuilder.loadTexts: usdPolicyRulePolicyId.setDescription('The PolicyTable index of the policy which owns this rule.')
usdPolicyRulePrec = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: usdPolicyRulePrec.setStatus('current')
if mibBuilder.loadTexts: usdPolicyRulePrec.setDescription('The precedence of this rule within this group of policy rules.')
usdPolicyRuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: usdPolicyRuleId.setStatus('current')
if mibBuilder.loadTexts: usdPolicyRuleId.setDescription('The index of this rule within the set of rules owned by the policy defined by usdPolicyRulePolicyId.')
usdPolicyRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 10))).clone(namedValues=NamedValues(("noRule", 0), ("nextHopRule", 1), ("filterRule", 2), ("nextInterfaceRule", 3), ("rateLimitRule", 4), ("markingRule", 5), ("trafficClassRule", 6), ("forwardRule", 7), ("logRule", 8), ("colorRule", 10))).clone('noRule')).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPolicyRuleType.setStatus('current')
if mibBuilder.loadTexts: usdPolicyRuleType.setDescription('This field specifies the type of rule being defined. The remaining information which makes up this rule is found in the specific rule table defined by usdPolicyRuleType. The specific rule tables are indexed by usdPolicyRulePolicyId.usdPolicyRuleId.')
usdPolicySuspend = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 3, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdPolicySuspend.setStatus('current')
if mibBuilder.loadTexts: usdPolicySuspend.setDescription('Setting this object to true results in the rule being suspended (taken out of service). Setting this value to false results in the rule being returned to service. ')
usdPolicyEclipsed = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 3, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPolicyEclipsed.setStatus('current')
if mibBuilder.loadTexts: usdPolicyEclipsed.setDescription('This value is true if the policy rule is eclipsed. A policy rule is eclipsed if a conflicting rule with the same classifier control list precedes the rule, and the preceding rule is not suspended. A false value indicates that the rule is not eclipsed.')
usdNextHopRuleTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 4), )
if mibBuilder.loadTexts: usdNextHopRuleTable.setStatus('current')
if mibBuilder.loadTexts: usdNextHopRuleTable.setDescription('A list of entries which provide next-hop rule data. Rows created in this table result in an entry being created in the policy rule table.')
usdNextHopRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 4, 1), ).setIndexNames((0, "Unisphere-Data-POLICY-MIB", "usdPolicyRulePolicyId"), (0, "Unisphere-Data-POLICY-MIB", "usdPolicyRulePrec"), (0, "Unisphere-Data-POLICY-MIB", "usdPolicyRuleId"))
if mibBuilder.loadTexts: usdNextHopRuleEntry.setStatus('current')
if mibBuilder.loadTexts: usdNextHopRuleEntry.setDescription('A next-hop rule entry.')
usdNextHopRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 4, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdNextHopRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdNextHopRowStatus.setDescription('Controls creation/deletion of conceptual rows within this table. The next-hop IP address is mandatory and must be specified. Modes supported are create-and-go and destroy.')
usdNextHopIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 4, 1, 2), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdNextHopIpAddress.setStatus('current')
if mibBuilder.loadTexts: usdNextHopIpAddress.setDescription('The IP address to forward all packets to.')
usdNextHopClaclId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdNextHopClaclId.setStatus('current')
if mibBuilder.loadTexts: usdNextHopClaclId.setDescription('The classifier control list ID which completes the NextHop policy rule.')
usdFilterRuleTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 5), )
if mibBuilder.loadTexts: usdFilterRuleTable.setStatus('current')
if mibBuilder.loadTexts: usdFilterRuleTable.setDescription('A list of entries which provide filter rule data. Creation of an entry in this table results in a corresponding entry being created in the policy rule table.')
usdFilterRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 5, 1), ).setIndexNames((0, "Unisphere-Data-POLICY-MIB", "usdPolicyRulePolicyId"), (0, "Unisphere-Data-POLICY-MIB", "usdPolicyRulePrec"), (0, "Unisphere-Data-POLICY-MIB", "usdPolicyRuleId"))
if mibBuilder.loadTexts: usdFilterRuleEntry.setStatus('current')
if mibBuilder.loadTexts: usdFilterRuleEntry.setDescription('A filter rule entry.')
usdFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 5, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdFilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdFilterRowStatus.setDescription('Controls creation/deletion of conceptual rows within this table. Modes supported are create-and-go and destroy. ')
usdFilterClaclId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdFilterClaclId.setStatus('current')
if mibBuilder.loadTexts: usdFilterClaclId.setDescription('The classifier control list ID which completes the filter policy rule.')
usdNextInterfaceRuleTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 6), )
if mibBuilder.loadTexts: usdNextInterfaceRuleTable.setStatus('current')
if mibBuilder.loadTexts: usdNextInterfaceRuleTable.setDescription('A list of entries which provide NextInterface rule data. Creation of entries in the table result in a corresponding entry being created in the policy rule table.')
usdNextInterfaceRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 6, 1), ).setIndexNames((0, "Unisphere-Data-POLICY-MIB", "usdPolicyRulePolicyId"), (0, "Unisphere-Data-POLICY-MIB", "usdPolicyRulePrec"), (0, "Unisphere-Data-POLICY-MIB", "usdPolicyRuleId"))
if mibBuilder.loadTexts: usdNextInterfaceRuleEntry.setStatus('current')
if mibBuilder.loadTexts: usdNextInterfaceRuleEntry.setDescription('A NextInterface rule entry.')
usdNextInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 6, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdNextInterfaceRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdNextInterfaceRowStatus.setDescription('Controls creation/deletion of conceptual rows within this table. The next-interface parameter is mandatory and must be specified. Modes supported are create-and-go and destroy. ')
usdNextInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 6, 1, 2), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdNextInterfaceId.setStatus('current')
if mibBuilder.loadTexts: usdNextInterfaceId.setDescription('The interface index to which traffic matching the CLACL ID will be routed.')
usdNextInterfaceClaclId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdNextInterfaceClaclId.setStatus('current')
if mibBuilder.loadTexts: usdNextInterfaceClaclId.setDescription('The classifier control list ID which completes the NextInterface policy rule.')
usdNextInterfaceNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 6, 1, 4), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdNextInterfaceNextHop.setStatus('current')
if mibBuilder.loadTexts: usdNextInterfaceNextHop.setDescription('The IP address to forward all packets to.')
usdRateLimitRuleTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 7), )
if mibBuilder.loadTexts: usdRateLimitRuleTable.setStatus('current')
if mibBuilder.loadTexts: usdRateLimitRuleTable.setDescription('A list of entries which provide RateLimit rule data. Creation of entries in the table result in a corresponding entry being created in the policy rule table.')
usdRateLimitRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 7, 1), ).setIndexNames((0, "Unisphere-Data-POLICY-MIB", "usdPolicyRulePolicyId"), (0, "Unisphere-Data-POLICY-MIB", "usdPolicyRulePrec"), (0, "Unisphere-Data-POLICY-MIB", "usdPolicyRuleId"))
if mibBuilder.loadTexts: usdRateLimitRuleEntry.setStatus('current')
if mibBuilder.loadTexts: usdRateLimitRuleEntry.setDescription('A RateLimit rule entry.')
usdRateLimitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 7, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdRateLimitRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdRateLimitRowStatus.setDescription('Controls creation/deletion of conceptual rows within this table. The rate limit profile ID is mandatory and must be specified. Modes supported are create-and-go and destroy.')
usdRateLimitId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdRateLimitId.setStatus('current')
if mibBuilder.loadTexts: usdRateLimitId.setDescription('The RLP ID which provides the rate limit data which completes the RateLimit policy rule.')
usdRateLimitClaclId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdRateLimitClaclId.setStatus('current')
if mibBuilder.loadTexts: usdRateLimitClaclId.setDescription('The classifier control list ID which fills out the RateLimit policy rule.')
usdMarkingRuleTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 8), )
if mibBuilder.loadTexts: usdMarkingRuleTable.setStatus('current')
if mibBuilder.loadTexts: usdMarkingRuleTable.setDescription('A list of entries which provide Marking rule data. Creation of entries in the table result in a corresponding entry being created in the policy rule table.')
usdMarkingRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 8, 1), ).setIndexNames((0, "Unisphere-Data-POLICY-MIB", "usdPolicyRulePolicyId"), (0, "Unisphere-Data-POLICY-MIB", "usdPolicyRulePrec"), (0, "Unisphere-Data-POLICY-MIB", "usdPolicyRuleId"))
if mibBuilder.loadTexts: usdMarkingRuleEntry.setStatus('current')
if mibBuilder.loadTexts: usdMarkingRuleEntry.setDescription('A Marking rule entry.')
usdMarkingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 8, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdMarkingRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdMarkingRowStatus.setDescription('Controls creation/deletion of conceptual rows within this table. The IP precedence field is mandatory and must be specified. Modes supported are create-and-go and destroy. ')
usdMarkingTOSByte = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdMarkingTOSByte.setStatus('current')
if mibBuilder.loadTexts: usdMarkingTOSByte.setDescription('The IP precedence value associated with this policy rule.')
usdMarkingMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdMarkingMask.setStatus('current')
if mibBuilder.loadTexts: usdMarkingMask.setDescription('The mask to use for TOS byte checks.')
usdMarkingClaclId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdMarkingClaclId.setStatus('current')
if mibBuilder.loadTexts: usdMarkingClaclId.setDescription('The classifier control list ID which fills out the Marking policy rule.')
usdForwardRuleTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 9), )
if mibBuilder.loadTexts: usdForwardRuleTable.setStatus('current')
if mibBuilder.loadTexts: usdForwardRuleTable.setDescription('A list of entries which provide forward rule data. Creation of an entry in this table results in a corresponding entry being created in the policy rule table.')
usdForwardRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 9, 1), ).setIndexNames((0, "Unisphere-Data-POLICY-MIB", "usdPolicyRulePolicyId"), (0, "Unisphere-Data-POLICY-MIB", "usdPolicyRulePrec"), (0, "Unisphere-Data-POLICY-MIB", "usdPolicyRuleId"))
if mibBuilder.loadTexts: usdForwardRuleEntry.setStatus('current')
if mibBuilder.loadTexts: usdForwardRuleEntry.setDescription('A forward rule entry.')
usdForwardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 9, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdForwardRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdForwardRowStatus.setDescription('Controls creation/deletion of conceptual rows within this table. Modes supported are create-and-go and destroy. ')
usdForwardClaclId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdForwardClaclId.setStatus('current')
if mibBuilder.loadTexts: usdForwardClaclId.setDescription('The classifier control list ID which completes the forward policy rule.')
usdTrafficShapeRuleTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 10), )
if mibBuilder.loadTexts: usdTrafficShapeRuleTable.setStatus('obsolete')
if mibBuilder.loadTexts: usdTrafficShapeRuleTable.setDescription('Obsolete list of entries which provide Traffic Shape rule data. Creation of entries in the table result in a corresponding entry being created in the policy rule table. This list became obsolete when the policy shaper capability was moved into the quality of service component.')
usdTrafficShapeRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 10, 1), ).setIndexNames((0, "Unisphere-Data-POLICY-MIB", "usdPolicyRulePolicyId"), (0, "Unisphere-Data-POLICY-MIB", "usdPolicyRulePrec"), (0, "Unisphere-Data-POLICY-MIB", "usdPolicyRuleId"))
if mibBuilder.loadTexts: usdTrafficShapeRuleEntry.setStatus('obsolete')
if mibBuilder.loadTexts: usdTrafficShapeRuleEntry.setDescription('A TrafficShape rule entry.')
usdTrafficShapeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 10, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdTrafficShapeRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: usdTrafficShapeRowStatus.setDescription('Controls creation/deletion of conceptual rows within this table. The traffic shape profile ID is mandatory and must be specified. Modes supported are create-and-go and destroy.')
usdTrafficShapeId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdTrafficShapeId.setStatus('obsolete')
if mibBuilder.loadTexts: usdTrafficShapeId.setDescription('The RLP ID which provides the rate limit data which completes the traffic shape policy rule.')
usdColorRuleTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 11), )
if mibBuilder.loadTexts: usdColorRuleTable.setStatus('current')
if mibBuilder.loadTexts: usdColorRuleTable.setDescription('A list of entries which provide Color rule data. Creation of entries in the table result in a corresponding entry being created in the policy rule table.')
usdColorRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 11, 1), ).setIndexNames((0, "Unisphere-Data-POLICY-MIB", "usdPolicyRulePolicyId"), (0, "Unisphere-Data-POLICY-MIB", "usdPolicyRulePrec"), (0, "Unisphere-Data-POLICY-MIB", "usdPolicyRuleId"))
if mibBuilder.loadTexts: usdColorRuleEntry.setStatus('current')
if mibBuilder.loadTexts: usdColorRuleEntry.setDescription('A Color rule entry.')
usdColorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 11, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdColorRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdColorRowStatus.setDescription('Controls creation/deletion of conceptual rows within this table. The color field is mandatory and must be specified. Modes supported are create-and-go and destroy. ')
usdColor = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("red", 1), ("yellow", 2), ("green", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdColor.setStatus('current')
if mibBuilder.loadTexts: usdColor.setDescription('The color with which to explicitly color packets associated with this policy rule.')
usdColorClaclId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdColorClaclId.setStatus('current')
if mibBuilder.loadTexts: usdColorClaclId.setDescription('The classifier control list ID which fills out the Color policy rule.')
usdLogRuleTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 12), )
if mibBuilder.loadTexts: usdLogRuleTable.setStatus('current')
if mibBuilder.loadTexts: usdLogRuleTable.setDescription('A list of entries which provide log rule data. Creation of an entry in this table results in a corresponding entry being created in the policy rule table.')
usdLogRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 12, 1), ).setIndexNames((0, "Unisphere-Data-POLICY-MIB", "usdPolicyRulePolicyId"), (0, "Unisphere-Data-POLICY-MIB", "usdPolicyRulePrec"), (0, "Unisphere-Data-POLICY-MIB", "usdPolicyRuleId"))
if mibBuilder.loadTexts: usdLogRuleEntry.setStatus('current')
if mibBuilder.loadTexts: usdLogRuleEntry.setDescription('A log rule entry.')
usdLogRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 12, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdLogRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdLogRowStatus.setDescription('Controls creation/deletion of conceptual rows within this table. Modes supported are create-and-go and destroy.')
usdLogClaclId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdLogClaclId.setStatus('current')
if mibBuilder.loadTexts: usdLogClaclId.setDescription('The classifier control list ID which completes the log policy rule.')
usdTrafficClassRuleTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 13), )
if mibBuilder.loadTexts: usdTrafficClassRuleTable.setStatus('current')
if mibBuilder.loadTexts: usdTrafficClassRuleTable.setDescription('A list of entries which provide traffic Class rule data. Creation of entries in the table result in a corresponding entry being created in the policy rule table.')
usdTrafficClassRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 13, 1), ).setIndexNames((0, "Unisphere-Data-POLICY-MIB", "usdPolicyRulePolicyId"), (0, "Unisphere-Data-POLICY-MIB", "usdPolicyRulePrec"), (0, "Unisphere-Data-POLICY-MIB", "usdPolicyRuleId"))
if mibBuilder.loadTexts: usdTrafficClassRuleEntry.setStatus('current')
if mibBuilder.loadTexts: usdTrafficClassRuleEntry.setDescription('A Traffic Class rule entry.')
usdTrafficClassRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 13, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdTrafficClassRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdTrafficClassRowStatus.setDescription('Controls creation/deletion of conceptual rows within this table. The usdTrafficClassId field is mandatory and must be specified. Modes supported are create-and-go and destroy. ')
usdTrafficClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdTrafficClassId.setStatus('current')
if mibBuilder.loadTexts: usdTrafficClassId.setDescription('The traffic class ID.')
usdTrafficClassClaclId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 3, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdTrafficClassClaclId.setStatus('current')
if mibBuilder.loadTexts: usdTrafficClassClaclId.setDescription('The classifier control list ID which fills out the traffic class policy rule.')
usdRateLimitProfileNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdRateLimitProfileNextIndex.setStatus('current')
if mibBuilder.loadTexts: usdRateLimitProfileNextIndex.setDescription('This scalar object returns the index of the next available row in the usdRateLimitProfileTable. This object returns a value of zero when it is the lexicographic successor of a varbind presented in an SNMP GETNEXT or GETBULK request, for which circumstance it is assumed that index allocation is unintended.')
usdRateLimitProfileTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 2, 2), )
if mibBuilder.loadTexts: usdRateLimitProfileTable.setStatus('current')
if mibBuilder.loadTexts: usdRateLimitProfileTable.setDescription('This table contains entries for elements of Rate Limit Profile (RLP) definitions.')
usdRateLimitProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 2, 2, 1), ).setIndexNames((0, "Unisphere-Data-POLICY-MIB", "usdRateLimitProfileId"))
if mibBuilder.loadTexts: usdRateLimitProfileEntry.setStatus('current')
if mibBuilder.loadTexts: usdRateLimitProfileEntry.setDescription('Each entry describes the characteristics of a rate limit profile element.')
usdRateLimitProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: usdRateLimitProfileId.setStatus('current')
if mibBuilder.loadTexts: usdRateLimitProfileId.setDescription('The ID number of the rate limit profile (RLP) entry which is defined by this row.')
usdRateLimitProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 2, 2, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRateLimitProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdRateLimitProfileRowStatus.setDescription('Controls creation/deletion of conceptual rows within this table. All rowStatus modes are supported. To create an entry in this table, the following entry objects MUST be explicitly configured: usdRateLimitProfileName ')
usdRateLimitProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRateLimitProfileName.setStatus('current')
if mibBuilder.loadTexts: usdRateLimitProfileName.setDescription('Specifies the name of the rate limit profile defined by this row.')
usdRateLimitReferenceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdRateLimitReferenceCount.setStatus('current')
if mibBuilder.loadTexts: usdRateLimitReferenceCount.setDescription('This object reflects the number of times a rate limit profile object is referenced by policies. ')
usdRateLimitCommittedBps = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 2, 2, 1, 5), Unsigned32()).setUnits('bits per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRateLimitCommittedBps.setStatus('current')
if mibBuilder.loadTexts: usdRateLimitCommittedBps.setDescription('The committed access rate in bits per second.')
usdRateLimitCommittedBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 2, 2, 1, 6), Unsigned32().clone(8192)).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRateLimitCommittedBurst.setStatus('current')
if mibBuilder.loadTexts: usdRateLimitCommittedBurst.setDescription('The committed access rate burst value in bytes.')
usdRateLimitExceedBps = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 2, 2, 1, 7), Unsigned32()).setUnits('bits per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRateLimitExceedBps.setStatus('current')
if mibBuilder.loadTexts: usdRateLimitExceedBps.setDescription('The peak access rate in bits per second. To be configured only if rate limit profile type is two-rate.')
usdRateLimitExceedBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 2, 2, 1, 8), Unsigned32().clone(8192)).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRateLimitExceedBurst.setStatus('current')
if mibBuilder.loadTexts: usdRateLimitExceedBurst.setDescription('The peak access rate burst value in bytes. To be configured only if rate limit profile type is two-rate.')
usdRateLimitCommittedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("transmit", 0), ("drop", 1), ("mark", 2))).clone('transmit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRateLimitCommittedAction.setStatus('current')
if mibBuilder.loadTexts: usdRateLimitCommittedAction.setDescription('Action to be taken when the access rate is within the bounds of the committed access rate.')
usdRateLimitConformedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("transmit", 0), ("drop", 1), ("mark", 2))).clone('transmit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRateLimitConformedAction.setStatus('current')
if mibBuilder.loadTexts: usdRateLimitConformedAction.setDescription('Action to be taken when the access rate exceeds the bounds of the committed access rate.')
usdRateLimitExceededAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("transmit", 0), ("drop", 1), ("mark", 2))).clone('transmit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRateLimitExceededAction.setStatus('current')
if mibBuilder.loadTexts: usdRateLimitExceededAction.setDescription('Action to be taken when the access rate exceeds the bounds of the peak access rate.')
usdRateLimitCommittedMarkVal = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 2, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRateLimitCommittedMarkVal.setStatus('current')
if mibBuilder.loadTexts: usdRateLimitCommittedMarkVal.setDescription('New IP precedence to be used when the usdRateLimitCommittedAction mark action is applied.')
usdRateLimitConformedMarkVal = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 2, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRateLimitConformedMarkVal.setStatus('current')
if mibBuilder.loadTexts: usdRateLimitConformedMarkVal.setDescription('New IP prececence to be used when the usdRateLimitExceedCommittedAction mark action is applied.')
usdRateLimitExceededMarkVal = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 2, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRateLimitExceededMarkVal.setStatus('current')
if mibBuilder.loadTexts: usdRateLimitExceededMarkVal.setDescription('New IP precedence to be used when the usdRateLimitExceedPeakAction mark action is applied.')
usdRateLimitMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 2, 2, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRateLimitMask.setStatus('current')
if mibBuilder.loadTexts: usdRateLimitMask.setDescription('Mask to be applied when executing a mark action.')
usdRateLimitProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 2, 2, 1, 16), UsdRateLimitProfileType().clone('twoRate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRateLimitProfileType.setStatus('current')
if mibBuilder.loadTexts: usdRateLimitProfileType.setDescription('The rate limit profile type (i.e. one-rate or two-rate). Defaults to two-rate, if not specified.')
usdRateLimitExcessBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 2, 2, 1, 17), Unsigned32()).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRateLimitExcessBurst.setStatus('current')
if mibBuilder.loadTexts: usdRateLimitExcessBurst.setDescription('The excess committed access rate burst value in bytes. To be configured only if rate limit profile type is one-rate.')
usdTrafficShapeProfileNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdTrafficShapeProfileNextIndex.setStatus('obsolete')
if mibBuilder.loadTexts: usdTrafficShapeProfileNextIndex.setDescription('Obsolete scalar object returns the index of the next available row in the usdTrafficShapeProfileTable. This object returns a value of zero when it is the lexicographic successor of a varbind presented in an SNMP GETNEXT or GETBULK request, for which circumstance it is assumed that index allocation is unintended. This object became obsolete when the policy shaper capability was moved into the quality of service component.')
usdTrafficShapeProfileTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 7, 2), )
if mibBuilder.loadTexts: usdTrafficShapeProfileTable.setStatus('obsolete')
if mibBuilder.loadTexts: usdTrafficShapeProfileTable.setDescription('This table contains entries for elements of Traffic Shape Profile definitions. This table became obsolete when the policy shaper capability was moved into the quality of service component.')
usdTrafficShapeProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 7, 2, 1), ).setIndexNames((0, "Unisphere-Data-POLICY-MIB", "usdTrafficShapeProfileId"))
if mibBuilder.loadTexts: usdTrafficShapeProfileEntry.setStatus('obsolete')
if mibBuilder.loadTexts: usdTrafficShapeProfileEntry.setDescription('Each entry describes the characteristics of a traffic shape profile element.')
usdTrafficShapeProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: usdTrafficShapeProfileId.setStatus('obsolete')
if mibBuilder.loadTexts: usdTrafficShapeProfileId.setDescription('The number of the traffic shape profile entry which is defined by this row.')
usdTrafficShapeProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 7, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdTrafficShapeProfileRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: usdTrafficShapeProfileRowStatus.setDescription('Controls creation/deletion of conceptual rows within this table. All rowStatus modes are supported. To create an entry in this table, the following entry objects MUST be explicitly configured: usdTrafficShapeProfileRowStatus ')
usdTrafficShapeProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 7, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdTrafficShapeProfileName.setStatus('obsolete')
if mibBuilder.loadTexts: usdTrafficShapeProfileName.setDescription('Specifies the name of the traffic shape profile defined by this row.')
usdTrafficShapeReferenceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 7, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdTrafficShapeReferenceCount.setStatus('obsolete')
if mibBuilder.loadTexts: usdTrafficShapeReferenceCount.setDescription('This object reflects the number of times a traffic shape profile object is referenced by policies. ')
usdTrafficShapeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 7, 2, 1, 5), Integer32()).setUnits('bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdTrafficShapeRate.setStatus('obsolete')
if mibBuilder.loadTexts: usdTrafficShapeRate.setDescription('The traffic shape rate in bits per second.')
usdTrafficShapeBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 7, 2, 1, 6), Integer32()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdTrafficShapeBurst.setStatus('obsolete')
if mibBuilder.loadTexts: usdTrafficShapeBurst.setDescription('The traffic shape burst in bytes.')
usdClassifierControlListNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdClassifierControlListNextIndex.setStatus('current')
if mibBuilder.loadTexts: usdClassifierControlListNextIndex.setDescription('This scalar object returns the index of the next available row in the usdClassifierControlListTable. This object returns a value of zero when it is the lexicographic successor of a varbind presented in an SNMP GETNEXT or GETBULK request, for which circumstance it is assumed that index allocation is unintended.')
usdClassifierControlListTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 1, 2), )
if mibBuilder.loadTexts: usdClassifierControlListTable.setStatus('current')
if mibBuilder.loadTexts: usdClassifierControlListTable.setDescription('This table contains entries for elements of classifier control lists. The details pertinent to each CLACL are found in the usdClassifierControlDefTable.')
usdClassifierControlListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 1, 2, 1), ).setIndexNames((0, "Unisphere-Data-POLICY-MIB", "usdClassifierControlListId"))
if mibBuilder.loadTexts: usdClassifierControlListEntry.setStatus('current')
if mibBuilder.loadTexts: usdClassifierControlListEntry.setDescription('Each entry describes the characteristics of an IP access list element.')
usdClassifierControlListId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: usdClassifierControlListId.setStatus('current')
if mibBuilder.loadTexts: usdClassifierControlListId.setDescription('The number of the classifier control list to which this entry belongs.')
usdClassifierControlListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdClassifierControlListRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdClassifierControlListRowStatus.setDescription('Controls creation/deletion of conceptual rows within this table. Modes supported are create-and-go and destroy. To create an entry in this table, the following entry objects MUST be explicitly configured: usdClassifierControlListRowStatus usdClassifierControlListElemId ')
usdClassifierControlListName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdClassifierControlListName.setStatus('current')
if mibBuilder.loadTexts: usdClassifierControlListName.setDescription('The name of the CLACL being defined.')
usdClassifierControlListReferenceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdClassifierControlListReferenceCount.setStatus('current')
if mibBuilder.loadTexts: usdClassifierControlListReferenceCount.setDescription('Number of times this CLACL is referenced by policies.')
usdClassifierControlListNextElementIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdClassifierControlListNextElementIndex.setStatus('current')
if mibBuilder.loadTexts: usdClassifierControlListNextElementIndex.setDescription('Each get of this object will return a unique index which may be used to create classifier control list elements. This object returns a value of zero when it is the lexicographic successor of a varbind presented in an SNMP GETNEXT or GETBULK request, for which circumstance it is assumed that index allocation is unintended.')
usdClassifierControlListElementTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 1, 4), )
if mibBuilder.loadTexts: usdClassifierControlListElementTable.setStatus('current')
if mibBuilder.loadTexts: usdClassifierControlListElementTable.setDescription("This table contains entries for elements of classifier control lists. Entries belonging to the same control list are ordered, and comparisons to those entries are performed in that order until a match is detected. If no match is found, the default action is to 'deny'.")
usdClassifierControlListElementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 1, 4, 1), ).setIndexNames((0, "Unisphere-Data-POLICY-MIB", "usdClassifierControlListId"), (0, "Unisphere-Data-POLICY-MIB", "usdClassifierControlListElemId"))
if mibBuilder.loadTexts: usdClassifierControlListElementEntry.setStatus('current')
if mibBuilder.loadTexts: usdClassifierControlListElementEntry.setDescription('Each entry describes the characteristics of an IP access list element.')
usdClassifierControlListElemId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)))
if mibBuilder.loadTexts: usdClassifierControlListElemId.setStatus('current')
if mibBuilder.loadTexts: usdClassifierControlListElemId.setDescription('The relative position of this entry within its classifier control list. Classifier control list entries are searched in this sequence (low to high values) until a match is found.')
usdClassifierControlListElemRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 1, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdClassifierControlListElemRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdClassifierControlListElemRowStatus.setDescription('Controls creation/deletion of conceptual rows within this table. This table provides a partial implementation for rowStatus. Rows may be created using createAndGo and createAndWait. Once a row has been made active the row status may not be changed. ')
usdClassifierControlListNotSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 1, 4, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdClassifierControlListNotSrc.setStatus('current')
if mibBuilder.loadTexts: usdClassifierControlListNotSrc.setDescription("Invert the meaning of the source IP address and mask objects. For example 'not 10.10.0.90/255.255.255.255 (host address)' would result in all source addresses except for host 10.19.9.90 being matched. ")
usdClassifierControlListSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 1, 4, 1, 4), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdClassifierControlListSrc.setStatus('current')
if mibBuilder.loadTexts: usdClassifierControlListSrc.setDescription('A source IP address. A subject IP address is first masked with the value of usdClassifierControlListSrcMask, then the result is compared to this value. Setting both this object and its corresponding mask to 0.0.0.0 acts as a wildcard, matching any source IP address.')
usdClassifierControlListSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 1, 4, 1, 5), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdClassifierControlListSrcMask.setStatus('current')
if mibBuilder.loadTexts: usdClassifierControlListSrcMask.setDescription('The IP address mask to be applied to a subject source IP address before comparing it to usdClassifierControlListSrc. Ones in the mask identify which bits in the subject IP address are significant for the comparison. To be considered valid, a nonzero value for this object must contain a single contiguous string of ones, beginning with the most significant bit of the mask.')
usdClassifierControlListNotDst = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 1, 4, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdClassifierControlListNotDst.setStatus('current')
if mibBuilder.loadTexts: usdClassifierControlListNotDst.setDescription("Invert the meaning of the destination IP address and mask objects. For example, 'not 10.10.0.90/255.255.255.255 (host address)' would result in all source addresses except for host 10.19.9.90 being matched.")
usdClassifierControlListDst = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 1, 4, 1, 7), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdClassifierControlListDst.setStatus('current')
if mibBuilder.loadTexts: usdClassifierControlListDst.setDescription('A destination IP address. A subject IP address is first masked with the value of usdClassifierControlListDstMask, then the result is compared to this value. Setting both this object and its corresponding mask to 0.0.0.0 acts as a wildcard, matching any destination IP address.')
usdClassifierControlListDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 1, 4, 1, 8), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdClassifierControlListDstMask.setStatus('current')
if mibBuilder.loadTexts: usdClassifierControlListDstMask.setDescription('The IP address mask to be applied to a subject destination IP address before comparing it to usdClassifierControlListDst. Ones in the mask identify which bits in the IP address are significant for the comparison. To be considered valid, a nonzero value for this object must contain a single contiguous string of ones, beginning with the most significant bit of the mask.')
usdClassifierControlListNotProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 1, 4, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdClassifierControlListNotProtocol.setStatus('current')
if mibBuilder.loadTexts: usdClassifierControlListNotProtocol.setDescription("Invert the meaning of the protocol object. For example, 'not TCP' matches any protocol except for TCP.")
usdClassifierControlListProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdClassifierControlListProtocol.setStatus('current')
if mibBuilder.loadTexts: usdClassifierControlListProtocol.setDescription('An IP Protocol value. Nonzero values match a specific IP Protocol value (e.g. 6 for TCP) carried in an IP packet; a value of zero acts as a wildcard, matching any IP Protocol.')
usdClassifierControlListTosByte = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdClassifierControlListTosByte.setStatus('current')
if mibBuilder.loadTexts: usdClassifierControlListTosByte.setDescription('The IP TOS byte value to match.')
usdClassifierControlListMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdClassifierControlListMask.setStatus('current')
if mibBuilder.loadTexts: usdClassifierControlListMask.setDescription('The mask to use for TOS byte checks. Allowed values are 0, 224, 252, 255.')
usdClassifierControlListSrcOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 1, 4, 1, 13), UsdClaclPortOperator().clone('noOperator')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdClassifierControlListSrcOperator.setStatus('current')
if mibBuilder.loadTexts: usdClassifierControlListSrcOperator.setDescription('Operator for use in comparing source ports.')
usdClassifierControlListSrcFromPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdClassifierControlListSrcFromPort.setStatus('current')
if mibBuilder.loadTexts: usdClassifierControlListSrcFromPort.setDescription("Source UDP or TCP 'from' port number.")
usdClassifierControlListSrcToPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 1, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdClassifierControlListSrcToPort.setStatus('current')
if mibBuilder.loadTexts: usdClassifierControlListSrcToPort.setDescription("Source UDP or TCP 'to' port number.")
usdClassifierControlListDestOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 1, 4, 1, 16), UsdClaclPortOperator().clone('noOperator')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdClassifierControlListDestOperator.setStatus('current')
if mibBuilder.loadTexts: usdClassifierControlListDestOperator.setDescription('Operator for use in comparing Destination ports.')
usdClassifierControlListDestFromPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 1, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdClassifierControlListDestFromPort.setStatus('current')
if mibBuilder.loadTexts: usdClassifierControlListDestFromPort.setDescription("Destination UDP or TCP 'from' port number.")
usdClassifierControlListDestToPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 1, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdClassifierControlListDestToPort.setStatus('current')
if mibBuilder.loadTexts: usdClassifierControlListDestToPort.setDescription("Destination UDP or TCP 'to' port number.")
usdClassifierControlListICMPType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 1, 4, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdClassifierControlListICMPType.setStatus('current')
if mibBuilder.loadTexts: usdClassifierControlListICMPType.setDescription('Optional ICMP message type for classification.')
usdClassifierControlListICMPCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 1, 4, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdClassifierControlListICMPCode.setStatus('current')
if mibBuilder.loadTexts: usdClassifierControlListICMPCode.setDescription('Optional ICMP message code for classification.')
usdClassifierControlListIGMPType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 1, 4, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdClassifierControlListIGMPType.setStatus('current')
if mibBuilder.loadTexts: usdClassifierControlListIGMPType.setDescription('Optional IGMP message type for classification.')
usdClassifierControlListTcpFlagsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 1, 4, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdClassifierControlListTcpFlagsValue.setStatus('current')
if mibBuilder.loadTexts: usdClassifierControlListTcpFlagsValue.setDescription('Optional TCP flags value for classification.')
usdClassifierControlListTcpFlagsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 1, 4, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdClassifierControlListTcpFlagsMask.setStatus('current')
if mibBuilder.loadTexts: usdClassifierControlListTcpFlagsMask.setDescription("Optional TCP flags mask for classification. TCP flag bits not specified in the mask are don't care bits.")
usdClassifierControlListIpFlagsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 1, 4, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdClassifierControlListIpFlagsValue.setStatus('current')
if mibBuilder.loadTexts: usdClassifierControlListIpFlagsValue.setDescription('Optional IP flags value for classification.')
usdClassifierControlListIpFlagsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 1, 4, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdClassifierControlListIpFlagsMask.setStatus('current')
if mibBuilder.loadTexts: usdClassifierControlListIpFlagsMask.setDescription("Optional IP flags mask for classification. IP flag bits not specified in the mask are don't care bits")
usdClassifierControlListIpFragValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 1, 4, 1, 26), UsdPolicyIpFragValue().clone('notSpecified')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdClassifierControlListIpFragValue.setStatus('current')
if mibBuilder.loadTexts: usdClassifierControlListIpFragValue.setDescription("Optional IP flags mask for classification. IP flag bits not specified in the mask are don't care bits")
usdPolicyIfTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 4, 1), )
if mibBuilder.loadTexts: usdPolicyIfTable.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyIfTable.setDescription('This obsolete table contains entries which represent attachment of policies to interfaces. This table became obsolete when the usdPolicyIfAttTable was added.')
usdPolicyIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 4, 1, 1), ).setIndexNames((0, "Unisphere-Data-POLICY-MIB", "usdPolicyIfInterfaceId"))
if mibBuilder.loadTexts: usdPolicyIfEntry.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyIfEntry.setDescription('Each entry contains the attachment of policy(s) to an interface.')
usdPolicyIfInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 4, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: usdPolicyIfInterfaceId.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyIfInterfaceId.setDescription('The interface number representing the interface to which policy(s) have been attached.')
usdPolicyIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 4, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPolicyIfRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyIfRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy *** LIMITED ACCESS LIST CONFIGURATION LEVEL *** RowStatus createAndGo/destroy operations have the following special-purpose semantics: createAndGo Create an entry having the specified configuration and append it to the target list, i.e. create a policy table entry with the associated policy name. destroy Destroy the specified list and all of its constituent elements. Policy row members may not be modified once the row has been created.')
usdPolicyIfInputPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 4, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPolicyIfInputPolicyId.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyIfInputPolicyId.setDescription('This object is used to control the attachment of input policies to the interface specified by usdPolicyIfInterfaceId, usdPolicyIfForwardingType and usdPolicyIfPolicyType. Attach a policy by setting this value to the ID of the policy. Remove a policy attachment by setting this value to zero. This object may be modified while the row is active. If so, the attachment is immediate.')
usdPolicyIfOutputPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 4, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPolicyIfOutputPolicyId.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyIfOutputPolicyId.setDescription('This object is used to control the attachment of output policies to the interface specified by usdPolicyIfInterfaceId, usdPolicyIfForwardingType and usdPolicyIfPolicyType. Attach a policy by setting this value to the ID of the policy. Remove a policy attachment by setting this value to zero. This object may be modified while the row is active. If so, the attachment is immediate.')
usdPolicyIfInputStatsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 4, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPolicyIfInputStatsEnable.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyIfInputStatsEnable.setDescription('This object is used to control the enabling and disabling of statistics for an input policy attachment. Set this object to true to enable statistics. Set this object to false to disable statistics. This object may be modified while the row is active. The desired value must be set before the policy is attached or in a multiple object varbind. Failure to do so will result in the policy being attached with the previous value of usdPolicyInputStatsEnable.')
usdPolicyIfOutputStatsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 4, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPolicyIfOutputStatsEnable.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyIfOutputStatsEnable.setDescription('This object is used to control the enabling and disabling of statistics for an output policy attachment. Set this object to true to enable statistics. Set this object to false to disable statistics. This object may be modified while the row is active. The desired value must be set before the policy is attached or in a multiple object varbind. Failure to do so will result in the policy being attached with the previous value of usdPolicyOutputStatsEnable.')
usdPolicyIfAttachTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 4, 2), )
if mibBuilder.loadTexts: usdPolicyIfAttachTable.setStatus('current')
if mibBuilder.loadTexts: usdPolicyIfAttachTable.setDescription('This table contains entries which represent attachment of policies to interfaces.')
usdPolicyIfAttachEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 4, 2, 1), ).setIndexNames((0, "Unisphere-Data-POLICY-MIB", "usdPolicyIfAttachInterfaceId"), (0, "Unisphere-Data-POLICY-MIB", "usdPolicyIfAttachForwardingType"), (0, "Unisphere-Data-POLICY-MIB", "usdPolicyIfAttachPolicyType"))
if mibBuilder.loadTexts: usdPolicyIfAttachEntry.setStatus('current')
if mibBuilder.loadTexts: usdPolicyIfAttachEntry.setDescription('Each entry contains the attachment of policy(s) to an interface.')
usdPolicyIfAttachInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 4, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdPolicyIfAttachInterfaceId.setStatus('current')
if mibBuilder.loadTexts: usdPolicyIfAttachInterfaceId.setDescription('The interface number representing the interface to which policy(s) have been attached.')
usdPolicyIfAttachForwardingType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 4, 2, 1, 2), UsdPolicyForwardingType())
if mibBuilder.loadTexts: usdPolicyIfAttachForwardingType.setStatus('current')
if mibBuilder.loadTexts: usdPolicyIfAttachForwardingType.setDescription('The interface type (i.e. IP or CBF) which the policy have been attached to.')
usdPolicyIfAttachPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 4, 2, 1, 3), UsdPolicyAttachmentType())
if mibBuilder.loadTexts: usdPolicyIfAttachPolicyType.setStatus('current')
if mibBuilder.loadTexts: usdPolicyIfAttachPolicyType.setDescription('The policy type (i.e. input, output or local input).')
usdPolicyIfAttachRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 4, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPolicyIfAttachRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdPolicyIfAttachRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy *** LIMITED ACCESS LIST CONFIGURATION LEVEL *** RowStatus createAndGo/destroy operations have the following special-purpose semantics: createAndGo Create an entry having the specified configuration and append it to the target list, i.e. create a policy table entry with the associated policy name. destroy Destroy the specified list and all of its constituent elements. Policy row members may not be modified once the row has been created.')
usdPolicyIfAttachPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPolicyIfAttachPolicyId.setStatus('current')
if mibBuilder.loadTexts: usdPolicyIfAttachPolicyId.setDescription('This object is used to control the attachment of policies to the interface specified by usdPolicyIfAttachInterfaceId, usdPolicyIfAttachForwardingType and usdPolicyIfAttachPolicyType. Attach a policy by setting this value to the ID of the policy. Remove a policy attachment by setting this value to zero. This object may be modified while the row is active. If so, the attachment is immediate.')
usdPolicyIfAttachStatsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 4, 2, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPolicyIfAttachStatsEnable.setStatus('current')
if mibBuilder.loadTexts: usdPolicyIfAttachStatsEnable.setDescription('This object is used to control the enabling and disabling of statistics for a policy attachment. Set this object to true to enable statistics. Set this object to false to disable statistics. This object may be modified while the row is active. The desired value must be set before the policy is attached or in a multiple object varbind. Failure to do so will result in the policy being attached with the previous value of usdPolicyStatsEnable.')
usdPolicyProfileTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 5, 1), )
if mibBuilder.loadTexts: usdPolicyProfileTable.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyProfileTable.setDescription('This obsolete table contains entries which represent attachment of policies to dynamic interfaces through profiles. This table became obsolete when the usdPolicyAttachProfileTable was added.')
usdPolicyProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 5, 1, 1), ).setIndexNames((0, "Unisphere-Data-POLICY-MIB", "usdPolicyProfileId"))
if mibBuilder.loadTexts: usdPolicyProfileEntry.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyProfileEntry.setDescription('Each entry contains the profile for attachment of policy(s) to a dynamic interface.')
usdPolicyProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 5, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: usdPolicyProfileId.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyProfileId.setDescription('The profile to which the policy attachment profile data belongs. When this profile is applied to a dynamic interface the associated policies will be applied to that interface.')
usdPolicyProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 5, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPolicyProfileRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyProfileRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy *** LIMITED ACCESS LIST CONFIGURATION LEVEL *** RowStatus createAndGo/destroy operations have the following special-purpose semantics: createAndGo Create an entry having the specified configuration and append it to the target list, i.e. create a policy table entry with the associated policy name. destroy Destroy the specified list and all of its constituent elements. Policy row members may not be modified once the row has been created.')
usdPolicyProfileInputPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPolicyProfileInputPolicyId.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyProfileInputPolicyId.setDescription('This object is used to control the attachment of input policies to dynamic interfaces configured by the profile identified by usdPolicyProfileId. Attach a policy by setting this value to the ID of the policy. Remove a policy attachment by setting this value to zero. This object may be modified while the row is active. Changes made to a row in this table do not take effect until the profile is applied.')
usdPolicyProfileOutputPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPolicyProfileOutputPolicyId.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyProfileOutputPolicyId.setDescription('This object is used to control the attachment of output policies to dynamic interfaces configured by the profile identified by usdPolicyProfileId. Attach a policy by setting this value to the ID of the policy. Remove a policy attachment by setting this value to zero. This object may be modified while the row is active. Changes made to a row in this table do not take effect until the profile is applied to an interface.')
usdPolicyProfileInputStatsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 5, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPolicyProfileInputStatsEnable.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyProfileInputStatsEnable.setDescription('This object is used to control the enabling and disabling of statistics for an input policy attachment performed by a profile. Set this object to true to enable statistics. Set this object to false to disable statistics. This object may be modified while the row is active. The changes will not take effect until the profile is applied to an interface.')
usdPolicyProfileOutputStatsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 5, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPolicyProfileOutputStatsEnable.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyProfileOutputStatsEnable.setDescription('This object is used to control the enabling and disabling of statistics for an output policy attachment performed by a profile. Set this object to true to enable statistics. Set this object to false to disable statistics. This object may be modified while the row is active. The changes will not take effect until the profile is applied to an interface.')
usdPolicyProfileLocalInputPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPolicyProfileLocalInputPolicyId.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyProfileLocalInputPolicyId.setDescription('This object is used to control the attachment of local input policies to dynamic interfaces configured by the profile identified by usdPolicyProfileId. Attach a policy by setting this value to the ID of the policy. Remove a policy attachment by setting this value to zero. This object may be modified while the row is active. Changes made to a row in this table do not take effect until the profile is applied.')
usdPolicyProfileLocalInputStatsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 5, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPolicyProfileLocalInputStatsEnable.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyProfileLocalInputStatsEnable.setDescription('This object is used to control the enabling and disabling of statistics for a local input policy attachment performed by a profile. Set this object to true to enable statistics. Set this object to false to disable statistics. This object may be modified while the row is active. The changes will not take effect until the profile is applied to an interface.')
usdPolicyAttachProfileTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 5, 2), )
if mibBuilder.loadTexts: usdPolicyAttachProfileTable.setStatus('current')
if mibBuilder.loadTexts: usdPolicyAttachProfileTable.setDescription('This table contains entries which represent attachment of policies to dynamic interfaces through profiles.')
usdPolicyAttachProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 5, 2, 1), ).setIndexNames((0, "Unisphere-Data-POLICY-MIB", "usdPolicyAttachProfileId"), (0, "Unisphere-Data-POLICY-MIB", "usdPolicyAttachProfileForwardingType"), (0, "Unisphere-Data-POLICY-MIB", "usdPolicyAttachProfilePolicyType"))
if mibBuilder.loadTexts: usdPolicyAttachProfileEntry.setStatus('current')
if mibBuilder.loadTexts: usdPolicyAttachProfileEntry.setDescription('Each entry contains the profile for attachment of policy(s) to a dynamic interface.')
usdPolicyAttachProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 5, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: usdPolicyAttachProfileId.setStatus('current')
if mibBuilder.loadTexts: usdPolicyAttachProfileId.setDescription('The profile to which the policy attachment profile data belongs. When this profile is applied to a dynamic interface the associated policies will be applied to that interface.')
usdPolicyAttachProfileForwardingType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 5, 2, 1, 2), UsdPolicyForwardingType())
if mibBuilder.loadTexts: usdPolicyAttachProfileForwardingType.setStatus('current')
if mibBuilder.loadTexts: usdPolicyAttachProfileForwardingType.setDescription('The interface type (i.e. IP or CBF) which the policy would be attached to.')
usdPolicyAttachProfilePolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 5, 2, 1, 3), UsdPolicyAttachmentType())
if mibBuilder.loadTexts: usdPolicyAttachProfilePolicyType.setStatus('current')
if mibBuilder.loadTexts: usdPolicyAttachProfilePolicyType.setDescription('The policy type (i.e. input, output or local input).')
usdPolicyAttachProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 5, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPolicyAttachProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdPolicyAttachProfileRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy *** LIMITED ACCESS LIST CONFIGURATION LEVEL *** RowStatus createAndGo/destroy operations have the following special-purpose semantics: createAndGo Create an entry having the specified configuration and append it to the target list, i.e. create a policy table entry with the associated policy name. destroy Destroy the specified list and all of its constituent elements. Policy row members may not be modified once the row has been created.')
usdPolicyAttachProfilePolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPolicyAttachProfilePolicyId.setStatus('current')
if mibBuilder.loadTexts: usdPolicyAttachProfilePolicyId.setDescription('This object is used to control the attachment of policies to dynamic interfaces configured by the profile identified by usdPolicyAttachProfileId, usdPolicyAttachProfileForwardingType and usdPolicyAttachProfilePolicyType. Attach a policy by setting this value to the ID of the policy. Remove a policy attachment by setting this value to zero. This object may be modified while the row is active. Changes made to a row in this table do not take effect until the profile is applied.')
usdPolicyAttachProfileStatsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 5, 2, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPolicyAttachProfileStatsEnable.setStatus('current')
if mibBuilder.loadTexts: usdPolicyAttachProfileStatsEnable.setDescription('This object is used to control the enabling and disabling of statistics for an policy attachment performed by a profile. Set this object to true to enable statistics. Set this object to false to disable statistics. This object may be modified while the row is active. The changes will not take effect until the profile is applied to an interface.')
usdPolicyIfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 6, 1), )
if mibBuilder.loadTexts: usdPolicyIfStatsTable.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyIfStatsTable.setDescription('Each entry within this obsolete table contains statistics data for an interface/policy rule combination. Interfaces with policies attached and statistics disabled are not represented in this table.')
usdPolicyIfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 6, 1, 1), ).setIndexNames((0, "Unisphere-Data-POLICY-MIB", "usdPolicyIfStatsIfId"), (0, "Unisphere-Data-POLICY-MIB", "usdPolicyIfStatsPolicyType"), (0, "Unisphere-Data-POLICY-MIB", "usdPolicyIfStatsPolicyId"), (0, "Unisphere-Data-POLICY-MIB", "usdPolicyIfStatsRulePrec"), (0, "Unisphere-Data-POLICY-MIB", "usdPolicyIfStatsRuleId"), (0, "Unisphere-Data-POLICY-MIB", "usdPolicyIfStatsClaclEntryNumber"))
if mibBuilder.loadTexts: usdPolicyIfStatsEntry.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyIfStatsEntry.setDescription('Each entry defines a single statistics entry.')
usdPolicyIfStatsIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 6, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdPolicyIfStatsIfId.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyIfStatsIfId.setDescription('The interface ID corresponding to the stats block represented by this row.')
usdPolicyIfStatsPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 6, 1, 1, 2), UsdPolicyAttachmentType())
if mibBuilder.loadTexts: usdPolicyIfStatsPolicyType.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyIfStatsPolicyType.setDescription('The attachment point for the policy.')
usdPolicyIfStatsPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: usdPolicyIfStatsPolicyId.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyIfStatsPolicyId.setDescription('The PolicyTable index of the policy corresponding to the stats block represented by this row.')
usdPolicyIfStatsRulePrec = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: usdPolicyIfStatsRulePrec.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyIfStatsRulePrec.setDescription('The precedence of the policy rule corresponding to the stats block represented by this row.')
usdPolicyIfStatsRuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: usdPolicyIfStatsRuleId.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyIfStatsRuleId.setDescription('The index of the policy rule corresponding to the stats block represented by this row.')
usdPolicyIfStatsClaclEntryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: usdPolicyIfStatsClaclEntryNumber.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyIfStatsClaclEntryNumber.setDescription('The index of the clacl entry number corresponding to the stats block represented by this row.')
usdPolicyIfStatsGreenPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 6, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPolicyIfStatsGreenPackets.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyIfStatsGreenPackets.setDescription('The number of green packets policed by the policy rule.')
usdPolicyIfStatsYellowPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 6, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPolicyIfStatsYellowPackets.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyIfStatsYellowPackets.setDescription('The number of yellow packets policed by the policy rule.')
usdPolicyIfStatsRedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 6, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPolicyIfStatsRedPackets.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyIfStatsRedPackets.setDescription('The number of red packets policed by the policy rule.')
usdPolicyIfStatsGreenBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 6, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPolicyIfStatsGreenBytes.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyIfStatsGreenBytes.setDescription('The number of green bytes policed by the policy rule.')
usdPolicyIfStatsYellowBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 6, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPolicyIfStatsYellowBytes.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyIfStatsYellowBytes.setDescription('The number of yellow bytes policed by the policy rule.')
usdPolicyIfStatsRedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 6, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPolicyIfStatsRedBytes.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyIfStatsRedBytes.setDescription('The number of red bytes policed by the policy rule.')
usdPolicyIfAttachStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 6, 2), )
if mibBuilder.loadTexts: usdPolicyIfAttachStatsTable.setStatus('current')
if mibBuilder.loadTexts: usdPolicyIfAttachStatsTable.setDescription('Each entry within this table contains statistics data for an interface/policy rule combination. Interfaces with policies attached and statistics disabled are not represented in this table.')
usdPolicyIfAttachStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 6, 2, 1), ).setIndexNames((0, "Unisphere-Data-POLICY-MIB", "usdPolicyIfAttachStatsIfId"), (0, "Unisphere-Data-POLICY-MIB", "usdPolicyIfAttachStatsForwardingType"), (0, "Unisphere-Data-POLICY-MIB", "usdPolicyIfAttachStatsPolicyType"), (0, "Unisphere-Data-POLICY-MIB", "usdPolicyIfAttachStatsPolicyId"), (0, "Unisphere-Data-POLICY-MIB", "usdPolicyIfAttachStatsRulePrec"), (0, "Unisphere-Data-POLICY-MIB", "usdPolicyIfAttachStatsRuleId"), (0, "Unisphere-Data-POLICY-MIB", "usdPolicyIfAttachStatsClaclEntryNumber"))
if mibBuilder.loadTexts: usdPolicyIfAttachStatsEntry.setStatus('current')
if mibBuilder.loadTexts: usdPolicyIfAttachStatsEntry.setDescription('Each entry defines a single statistics entry.')
usdPolicyIfAttachStatsIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 6, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdPolicyIfAttachStatsIfId.setStatus('current')
if mibBuilder.loadTexts: usdPolicyIfAttachStatsIfId.setDescription('The interface ID corresponding to the stats block represented by this row.')
usdPolicyIfAttachStatsForwardingType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 6, 2, 1, 2), UsdPolicyForwardingType())
if mibBuilder.loadTexts: usdPolicyIfAttachStatsForwardingType.setStatus('current')
if mibBuilder.loadTexts: usdPolicyIfAttachStatsForwardingType.setDescription('The forwarding type for the policy attachment.')
usdPolicyIfAttachStatsPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 6, 2, 1, 3), UsdPolicyAttachmentType())
if mibBuilder.loadTexts: usdPolicyIfAttachStatsPolicyType.setStatus('current')
if mibBuilder.loadTexts: usdPolicyIfAttachStatsPolicyType.setDescription('The attachment point for the policy.')
usdPolicyIfAttachStatsPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: usdPolicyIfAttachStatsPolicyId.setStatus('current')
if mibBuilder.loadTexts: usdPolicyIfAttachStatsPolicyId.setDescription('The PolicyTable index of the policy corresponding to the stats block represented by this row.')
usdPolicyIfAttachStatsRulePrec = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: usdPolicyIfAttachStatsRulePrec.setStatus('current')
if mibBuilder.loadTexts: usdPolicyIfAttachStatsRulePrec.setDescription('The precedence of the policy rule corresponding to the stats block represented by this row.')
usdPolicyIfAttachStatsRuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: usdPolicyIfAttachStatsRuleId.setStatus('current')
if mibBuilder.loadTexts: usdPolicyIfAttachStatsRuleId.setDescription('The index of the policy rule corresponding to the stats block represented by this row.')
usdPolicyIfAttachStatsClaclEntryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: usdPolicyIfAttachStatsClaclEntryNumber.setStatus('current')
if mibBuilder.loadTexts: usdPolicyIfAttachStatsClaclEntryNumber.setDescription('The index of the clacl entry number corresponding to the stats block represented by this row.')
usdPolicyIfAttachStatsGreenPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 6, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPolicyIfAttachStatsGreenPackets.setStatus('current')
if mibBuilder.loadTexts: usdPolicyIfAttachStatsGreenPackets.setDescription('The number of green packets policed by the policy rule.')
usdPolicyIfAttachStatsYellowPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 6, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPolicyIfAttachStatsYellowPackets.setStatus('current')
if mibBuilder.loadTexts: usdPolicyIfAttachStatsYellowPackets.setDescription('The number of yellow packets policed by the policy rule.')
usdPolicyIfAttachStatsRedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 6, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPolicyIfAttachStatsRedPackets.setStatus('current')
if mibBuilder.loadTexts: usdPolicyIfAttachStatsRedPackets.setDescription('The number of red packets policed by the policy rule.')
usdPolicyIfAttachStatsGreenBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 6, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPolicyIfAttachStatsGreenBytes.setStatus('current')
if mibBuilder.loadTexts: usdPolicyIfAttachStatsGreenBytes.setDescription('The number of green bytes policed by the policy rule.')
usdPolicyIfAttachStatsYellowBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 6, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPolicyIfAttachStatsYellowBytes.setStatus('current')
if mibBuilder.loadTexts: usdPolicyIfAttachStatsYellowBytes.setDescription('The number of yellow bytes policed by the policy rule.')
usdPolicyIfAttachStatsRedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 1, 6, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPolicyIfAttachStatsRedBytes.setStatus('current')
if mibBuilder.loadTexts: usdPolicyIfAttachStatsRedBytes.setDescription('The number of red bytes policed by the policy rule.')
usdPolicyConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 2))
usdPolicyCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 2, 1))
usdPolicyGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 2, 2))
usdPolicyCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 2, 1, 1)).setObjects(("Unisphere-Data-POLICY-MIB", "usdPolicyGroup"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitControlListGroup"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListGroup"), ("Unisphere-Data-POLICY-MIB", "usdPolicyIfGroup"), ("Unisphere-Data-POLICY-MIB", "usdPolicyProfileGroup"), ("Unisphere-Data-POLICY-MIB", "usdPolicyStatisticsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPolicyCompliance = usdPolicyCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyCompliance.setDescription('Obsolete compliance statement for entities which implement the Unisphere policy management MIB. This statement became obsolete when policy traffic shape and color objects were added to the MIB.')
usdPolicyCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 2, 1, 2)).setObjects(("Unisphere-Data-POLICY-MIB", "usdPolicyGroup2"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitControlListGroup"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListGroup"), ("Unisphere-Data-POLICY-MIB", "usdPolicyIfGroup"), ("Unisphere-Data-POLICY-MIB", "usdPolicyProfileGroup"), ("Unisphere-Data-POLICY-MIB", "usdPolicyStatisticsGroup"), ("Unisphere-Data-POLICY-MIB", "usdTrafficShapeProfileGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPolicyCompliance2 = usdPolicyCompliance2.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyCompliance2.setDescription('Obsolete compliance statement for entities which implement the Unisphere policy management MIB. This statement was obsolete when policy log rule objects were added to the MIB.')
usdPolicyCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 2, 1, 3)).setObjects(("Unisphere-Data-POLICY-MIB", "usdPolicyGroup2"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitControlListGroup"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListGroup"), ("Unisphere-Data-POLICY-MIB", "usdPolicyIfGroup"), ("Unisphere-Data-POLICY-MIB", "usdPolicyProfileGroup"), ("Unisphere-Data-POLICY-MIB", "usdPolicyStatisticsGroup"), ("Unisphere-Data-POLICY-MIB", "usdTrafficShapeProfileGroup"), ("Unisphere-Data-POLICY-MIB", "usdLogRuleGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPolicyCompliance3 = usdPolicyCompliance3.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyCompliance3.setDescription('Obsolete compliance statement for entities which implement the Unisphere policy management MIB. This statement became obsolete when policy color rule objects were added, the policy profile table was extended and the policy interface attachement tables were replaced by new versions.')
usdPolicyCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 2, 1, 4)).setObjects(("Unisphere-Data-POLICY-MIB", "usdPolicyGroup2"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitControlListGroup"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListGroup"), ("Unisphere-Data-POLICY-MIB", "usdPolicyIfAttachGroup"), ("Unisphere-Data-POLICY-MIB", "usdPolicyProfileGroup2"), ("Unisphere-Data-POLICY-MIB", "usdPolicyAttachStatisticsGroup"), ("Unisphere-Data-POLICY-MIB", "usdTrafficShapeProfileGroup"), ("Unisphere-Data-POLICY-MIB", "usdLogRuleGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPolicyCompliance4 = usdPolicyCompliance4.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyCompliance4.setDescription('Obsolete compliance statement for entities which implement the Unisphere policy management MIB. This statement became obsolete when TCP flag and IP flag classifier control list objects were added and the usdPolicyProfileTable was repalced by the usdPolicyAttachProfileTable.')
usdPolicyCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 2, 1, 5)).setObjects(("Unisphere-Data-POLICY-MIB", "usdPolicyBaseGroup"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListGroup2"), ("Unisphere-Data-POLICY-MIB", "usdPolicyIfAttachGroup"), ("Unisphere-Data-POLICY-MIB", "usdPolicyAttachProfileGroup"), ("Unisphere-Data-POLICY-MIB", "usdPolicyAttachStatisticsGroup"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitGroup"), ("Unisphere-Data-POLICY-MIB", "usdTrafficShapeGroup"), ("Unisphere-Data-POLICY-MIB", "usdLogRuleGroup"), ("Unisphere-Data-POLICY-MIB", "usdNextHopRulesGroup"), ("Unisphere-Data-POLICY-MIB", "usdFilterRulesGroup"), ("Unisphere-Data-POLICY-MIB", "usdNextInterfaceRulesGroup"), ("Unisphere-Data-POLICY-MIB", "usdMarkingRulesGroup"), ("Unisphere-Data-POLICY-MIB", "usdForwardRulesGroup"), ("Unisphere-Data-POLICY-MIB", "usdColorRulesGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPolicyCompliance5 = usdPolicyCompliance5.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyCompliance5.setDescription('Obsolete compliance statement for entities which implement the Unisphere policy management MIB. This statement became obsolete when traffic class rule objects and new rate limit objects were added and when the policy shaper capability was moved into the quality of service component.')
usdPolicyCompliance6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 2, 1, 6)).setObjects(("Unisphere-Data-POLICY-MIB", "usdPolicyBaseGroup"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListGroup2"), ("Unisphere-Data-POLICY-MIB", "usdPolicyIfAttachGroup"), ("Unisphere-Data-POLICY-MIB", "usdPolicyAttachProfileGroup"), ("Unisphere-Data-POLICY-MIB", "usdPolicyAttachStatisticsGroup"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitGroup2"), ("Unisphere-Data-POLICY-MIB", "usdLogRuleGroup"), ("Unisphere-Data-POLICY-MIB", "usdNextHopRulesGroup"), ("Unisphere-Data-POLICY-MIB", "usdFilterRulesGroup"), ("Unisphere-Data-POLICY-MIB", "usdNextInterfaceRulesGroup"), ("Unisphere-Data-POLICY-MIB", "usdMarkingRulesGroup"), ("Unisphere-Data-POLICY-MIB", "usdForwardRulesGroup"), ("Unisphere-Data-POLICY-MIB", "usdColorRulesGroup"), ("Unisphere-Data-POLICY-MIB", "usdTrafficClassRulesGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPolicyCompliance6 = usdPolicyCompliance6.setStatus('current')
if mibBuilder.loadTexts: usdPolicyCompliance6.setDescription('The compliance statement for entities which implement the Unisphere policy management MIB.')
usdPolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 2, 2, 1)).setObjects(("Unisphere-Data-POLICY-MIB", "usdPolicyNextIndex"), ("Unisphere-Data-POLICY-MIB", "usdPolicyRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdPolicyAdminState"), ("Unisphere-Data-POLICY-MIB", "usdPolicyOperStatus"), ("Unisphere-Data-POLICY-MIB", "usdPolicyErrorValue"), ("Unisphere-Data-POLICY-MIB", "usdPolicyName"), ("Unisphere-Data-POLICY-MIB", "usdPolicyReferenceCount"), ("Unisphere-Data-POLICY-MIB", "usdPolicyRuleNextIndex"), ("Unisphere-Data-POLICY-MIB", "usdPolicyRuleType"), ("Unisphere-Data-POLICY-MIB", "usdPolicySuspend"), ("Unisphere-Data-POLICY-MIB", "usdPolicyEclipsed"), ("Unisphere-Data-POLICY-MIB", "usdNextHopRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdNextHopIpAddress"), ("Unisphere-Data-POLICY-MIB", "usdNextHopClaclId"), ("Unisphere-Data-POLICY-MIB", "usdFilterRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdFilterClaclId"), ("Unisphere-Data-POLICY-MIB", "usdNextInterfaceRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdNextInterfaceId"), ("Unisphere-Data-POLICY-MIB", "usdNextInterfaceClaclId"), ("Unisphere-Data-POLICY-MIB", "usdNextInterfaceNextHop"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitId"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitClaclId"), ("Unisphere-Data-POLICY-MIB", "usdMarkingRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdMarkingTOSByte"), ("Unisphere-Data-POLICY-MIB", "usdMarkingMask"), ("Unisphere-Data-POLICY-MIB", "usdMarkingClaclId"), ("Unisphere-Data-POLICY-MIB", "usdForwardRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdForwardClaclId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPolicyGroup = usdPolicyGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyGroup.setDescription('Obsolete collection of objects for managing policies in a Unisphere product. This group became obsolete when policy traffic shape and color objects were added.')
usdRateLimitControlListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 2, 2, 2)).setObjects(("Unisphere-Data-POLICY-MIB", "usdRateLimitProfileNextIndex"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitProfileRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitProfileName"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitReferenceCount"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitCommittedBps"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitCommittedBurst"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitExceedBps"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitExceedBurst"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitCommittedAction"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitConformedAction"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitExceededAction"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitCommittedMarkVal"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitConformedMarkVal"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitExceededMarkVal"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitMask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdRateLimitControlListGroup = usdRateLimitControlListGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdRateLimitControlListGroup.setDescription('Obsolete collection of objects for managing rate limit control lists in a Unisphere product. This group became obsolete when it was replaced by the usdRateLimitGroup so that rate limit support could become optional.')
usdClassifierControlListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 2, 2, 3)).setObjects(("Unisphere-Data-POLICY-MIB", "usdClassifierControlListNextIndex"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListName"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListReferenceCount"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListNextElementIndex"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListElemRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListNotSrc"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListSrc"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListSrcMask"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListNotDst"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListDst"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListDstMask"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListNotProtocol"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListProtocol"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListTosByte"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListMask"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListSrcOperator"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListSrcFromPort"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListSrcToPort"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListDestOperator"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListDestFromPort"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListDestToPort"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListICMPType"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListICMPCode"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListIGMPType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdClassifierControlListGroup = usdClassifierControlListGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdClassifierControlListGroup.setDescription('Obsolete collection of objects for managing elements of classifier control lists in a Unisphere product. This group became obsolete when support was added for TCP flag and IP flag control objects.')
usdPolicyIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 2, 2, 4)).setObjects(("Unisphere-Data-POLICY-MIB", "usdPolicyIfRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdPolicyIfInputPolicyId"), ("Unisphere-Data-POLICY-MIB", "usdPolicyIfOutputPolicyId"), ("Unisphere-Data-POLICY-MIB", "usdPolicyIfInputStatsEnable"), ("Unisphere-Data-POLICY-MIB", "usdPolicyIfOutputStatsEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPolicyIfGroup = usdPolicyIfGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyIfGroup.setDescription('Obsolete collection of objects for managing attachment of policies to interfaces in a Unisphere product. This group became obsolete when the usdPolicyIfTable was replaced by the usdPolicyIfAttachTable.')
usdPolicyProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 2, 2, 5)).setObjects(("Unisphere-Data-POLICY-MIB", "usdPolicyProfileRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdPolicyProfileInputPolicyId"), ("Unisphere-Data-POLICY-MIB", "usdPolicyProfileOutputPolicyId"), ("Unisphere-Data-POLICY-MIB", "usdPolicyProfileInputStatsEnable"), ("Unisphere-Data-POLICY-MIB", "usdPolicyProfileOutputStatsEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPolicyProfileGroup = usdPolicyProfileGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyProfileGroup.setDescription('Obsolete collection of objects for managing attachment of policies to dynamic interfaces through profiles in a Unisphere product. This group became obsolete when the usdPolicyProfileLocalInputPolicyId and the usdPolicyProfileLocalInputStatsEnable objects were added.')
usdPolicyStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 2, 2, 6)).setObjects(("Unisphere-Data-POLICY-MIB", "usdPolicyIfStatsGreenPackets"), ("Unisphere-Data-POLICY-MIB", "usdPolicyIfStatsYellowPackets"), ("Unisphere-Data-POLICY-MIB", "usdPolicyIfStatsRedPackets"), ("Unisphere-Data-POLICY-MIB", "usdPolicyIfStatsGreenBytes"), ("Unisphere-Data-POLICY-MIB", "usdPolicyIfStatsYellowBytes"), ("Unisphere-Data-POLICY-MIB", "usdPolicyIfStatsRedBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPolicyStatisticsGroup = usdPolicyStatisticsGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyStatisticsGroup.setDescription('Obsolete collection of objects for managing statistics data for an interface/policy rule combination in a Unisphere product. This group became obsolete when the usdPolicyIfStatsTable was replaced by the usdPolicyIfAttachStatsTable.')
usdPolicyGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 2, 2, 7)).setObjects(("Unisphere-Data-POLICY-MIB", "usdPolicyNextIndex"), ("Unisphere-Data-POLICY-MIB", "usdPolicyRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdPolicyAdminState"), ("Unisphere-Data-POLICY-MIB", "usdPolicyOperStatus"), ("Unisphere-Data-POLICY-MIB", "usdPolicyErrorValue"), ("Unisphere-Data-POLICY-MIB", "usdPolicyName"), ("Unisphere-Data-POLICY-MIB", "usdPolicyReferenceCount"), ("Unisphere-Data-POLICY-MIB", "usdPolicyRuleNextIndex"), ("Unisphere-Data-POLICY-MIB", "usdPolicyRuleType"), ("Unisphere-Data-POLICY-MIB", "usdPolicySuspend"), ("Unisphere-Data-POLICY-MIB", "usdPolicyEclipsed"), ("Unisphere-Data-POLICY-MIB", "usdNextHopRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdNextHopIpAddress"), ("Unisphere-Data-POLICY-MIB", "usdNextHopClaclId"), ("Unisphere-Data-POLICY-MIB", "usdFilterRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdFilterClaclId"), ("Unisphere-Data-POLICY-MIB", "usdNextInterfaceRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdNextInterfaceId"), ("Unisphere-Data-POLICY-MIB", "usdNextInterfaceClaclId"), ("Unisphere-Data-POLICY-MIB", "usdNextInterfaceNextHop"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitId"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitClaclId"), ("Unisphere-Data-POLICY-MIB", "usdMarkingRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdMarkingTOSByte"), ("Unisphere-Data-POLICY-MIB", "usdMarkingMask"), ("Unisphere-Data-POLICY-MIB", "usdMarkingClaclId"), ("Unisphere-Data-POLICY-MIB", "usdForwardRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdForwardClaclId"), ("Unisphere-Data-POLICY-MIB", "usdTrafficShapeRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdTrafficShapeId"), ("Unisphere-Data-POLICY-MIB", "usdColorRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdColor"), ("Unisphere-Data-POLICY-MIB", "usdColorClaclId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPolicyGroup2 = usdPolicyGroup2.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyGroup2.setDescription('Obsolete collection of objects for managing policies in a Unisphere product. This group became obsolete when the specific rules objects were broken out into separte groups.')
usdTrafficShapeProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 2, 2, 8)).setObjects(("Unisphere-Data-POLICY-MIB", "usdTrafficShapeProfileNextIndex"), ("Unisphere-Data-POLICY-MIB", "usdTrafficShapeProfileRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdTrafficShapeProfileName"), ("Unisphere-Data-POLICY-MIB", "usdTrafficShapeReferenceCount"), ("Unisphere-Data-POLICY-MIB", "usdTrafficShapeRate"), ("Unisphere-Data-POLICY-MIB", "usdTrafficShapeBurst"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdTrafficShapeProfileGroup = usdTrafficShapeProfileGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdTrafficShapeProfileGroup.setDescription('Obsolete collection of objects for traffic shaping data for a policy rule in a Unisphere product. This group became obsolete when it was combined with the traffic shape policy rules objects.')
usdLogRuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 2, 2, 9)).setObjects(("Unisphere-Data-POLICY-MIB", "usdLogRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdLogClaclId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdLogRuleGroup = usdLogRuleGroup.setStatus('current')
if mibBuilder.loadTexts: usdLogRuleGroup.setDescription('A collection of objects for log data for a policy rule in a Unisphere product.')
usdPolicyIfAttachGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 2, 2, 10)).setObjects(("Unisphere-Data-POLICY-MIB", "usdPolicyIfAttachRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdPolicyIfAttachPolicyId"), ("Unisphere-Data-POLICY-MIB", "usdPolicyIfAttachStatsEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPolicyIfAttachGroup = usdPolicyIfAttachGroup.setStatus('current')
if mibBuilder.loadTexts: usdPolicyIfAttachGroup.setDescription('A collection of objects for managing attachment of policies to interfaces in a Unisphere product.')
usdPolicyProfileGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 2, 2, 11)).setObjects(("Unisphere-Data-POLICY-MIB", "usdPolicyProfileRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdPolicyProfileInputPolicyId"), ("Unisphere-Data-POLICY-MIB", "usdPolicyProfileOutputPolicyId"), ("Unisphere-Data-POLICY-MIB", "usdPolicyProfileInputStatsEnable"), ("Unisphere-Data-POLICY-MIB", "usdPolicyProfileOutputStatsEnable"), ("Unisphere-Data-POLICY-MIB", "usdPolicyProfileLocalInputPolicyId"), ("Unisphere-Data-POLICY-MIB", "usdPolicyProfileLocalInputStatsEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPolicyProfileGroup2 = usdPolicyProfileGroup2.setStatus('obsolete')
if mibBuilder.loadTexts: usdPolicyProfileGroup2.setDescription('Obsolete collection of objects for managing attachment of policies to dynamic interfaces through profiles. This group became obsolete when the usdPolicyProfileTable was replaced by the usdPolicyAttachProfileTable.')
usdPolicyAttachStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 2, 2, 12)).setObjects(("Unisphere-Data-POLICY-MIB", "usdPolicyIfAttachStatsGreenPackets"), ("Unisphere-Data-POLICY-MIB", "usdPolicyIfAttachStatsYellowPackets"), ("Unisphere-Data-POLICY-MIB", "usdPolicyIfAttachStatsRedPackets"), ("Unisphere-Data-POLICY-MIB", "usdPolicyIfAttachStatsGreenBytes"), ("Unisphere-Data-POLICY-MIB", "usdPolicyIfAttachStatsYellowBytes"), ("Unisphere-Data-POLICY-MIB", "usdPolicyIfAttachStatsRedBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPolicyAttachStatisticsGroup = usdPolicyAttachStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: usdPolicyAttachStatisticsGroup.setDescription('A collection of objects for managing statistics data for an interface/policy rule combination in a Unisphere product.')
usdClassifierControlListGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 2, 2, 13)).setObjects(("Unisphere-Data-POLICY-MIB", "usdClassifierControlListNextIndex"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListName"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListReferenceCount"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListNextElementIndex"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListElemRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListNotSrc"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListSrc"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListSrcMask"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListNotDst"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListDst"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListDstMask"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListNotProtocol"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListProtocol"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListTosByte"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListMask"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListSrcOperator"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListSrcFromPort"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListSrcToPort"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListDestOperator"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListDestFromPort"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListDestToPort"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListICMPType"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListICMPCode"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListIGMPType"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListTcpFlagsValue"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListTcpFlagsMask"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListIpFlagsValue"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListIpFlagsMask"), ("Unisphere-Data-POLICY-MIB", "usdClassifierControlListIpFragValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdClassifierControlListGroup2 = usdClassifierControlListGroup2.setStatus('current')
if mibBuilder.loadTexts: usdClassifierControlListGroup2.setDescription('A collection of objects for managing elements of classifier control lists in a Unisphere product.')
usdPolicyAttachProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 2, 2, 14)).setObjects(("Unisphere-Data-POLICY-MIB", "usdPolicyAttachProfileRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdPolicyAttachProfilePolicyId"), ("Unisphere-Data-POLICY-MIB", "usdPolicyAttachProfileStatsEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPolicyAttachProfileGroup = usdPolicyAttachProfileGroup.setStatus('current')
if mibBuilder.loadTexts: usdPolicyAttachProfileGroup.setDescription('A collection of objects for managing attachment of policies to dynamic interfaces through profiles.')
usdPolicyBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 2, 2, 15)).setObjects(("Unisphere-Data-POLICY-MIB", "usdPolicyNextIndex"), ("Unisphere-Data-POLICY-MIB", "usdPolicyRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdPolicyAdminState"), ("Unisphere-Data-POLICY-MIB", "usdPolicyOperStatus"), ("Unisphere-Data-POLICY-MIB", "usdPolicyErrorValue"), ("Unisphere-Data-POLICY-MIB", "usdPolicyName"), ("Unisphere-Data-POLICY-MIB", "usdPolicyReferenceCount"), ("Unisphere-Data-POLICY-MIB", "usdPolicyRuleNextIndex"), ("Unisphere-Data-POLICY-MIB", "usdPolicyRuleType"), ("Unisphere-Data-POLICY-MIB", "usdPolicySuspend"), ("Unisphere-Data-POLICY-MIB", "usdPolicyEclipsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPolicyBaseGroup = usdPolicyBaseGroup.setStatus('current')
if mibBuilder.loadTexts: usdPolicyBaseGroup.setDescription('A collection of basic objects for managing policies in a Unisphere product.')
usdNextHopRulesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 2, 2, 16)).setObjects(("Unisphere-Data-POLICY-MIB", "usdNextHopRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdNextHopIpAddress"), ("Unisphere-Data-POLICY-MIB", "usdNextHopClaclId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdNextHopRulesGroup = usdNextHopRulesGroup.setStatus('current')
if mibBuilder.loadTexts: usdNextHopRulesGroup.setDescription('A collection of objects for managing next-hop policy rules in a Unisphere product.')
usdFilterRulesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 2, 2, 17)).setObjects(("Unisphere-Data-POLICY-MIB", "usdFilterRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdFilterClaclId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdFilterRulesGroup = usdFilterRulesGroup.setStatus('current')
if mibBuilder.loadTexts: usdFilterRulesGroup.setDescription('A collection of objects for managing filter policy rules in a Unisphere product.')
usdNextInterfaceRulesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 2, 2, 18)).setObjects(("Unisphere-Data-POLICY-MIB", "usdNextInterfaceRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdNextInterfaceId"), ("Unisphere-Data-POLICY-MIB", "usdNextInterfaceClaclId"), ("Unisphere-Data-POLICY-MIB", "usdNextInterfaceNextHop"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdNextInterfaceRulesGroup = usdNextInterfaceRulesGroup.setStatus('current')
if mibBuilder.loadTexts: usdNextInterfaceRulesGroup.setDescription('A collection of objects for managing next-interface policy rules in a Unisphere product.')
usdRateLimitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 2, 2, 19)).setObjects(("Unisphere-Data-POLICY-MIB", "usdRateLimitRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitId"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitClaclId"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitProfileNextIndex"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitProfileRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitProfileName"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitReferenceCount"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitCommittedBps"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitCommittedBurst"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitExceedBps"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitExceedBurst"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitCommittedAction"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitConformedAction"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitExceededAction"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitCommittedMarkVal"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitConformedMarkVal"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitExceededMarkVal"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitMask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdRateLimitGroup = usdRateLimitGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdRateLimitGroup.setDescription('Obsolete collection of objects for managing rate limit policy rules and profile lists in a Unisphere product. This group became obsolete when new rate limit profile objects were added.')
usdMarkingRulesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 2, 2, 20)).setObjects(("Unisphere-Data-POLICY-MIB", "usdMarkingRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdMarkingTOSByte"), ("Unisphere-Data-POLICY-MIB", "usdMarkingMask"), ("Unisphere-Data-POLICY-MIB", "usdMarkingClaclId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdMarkingRulesGroup = usdMarkingRulesGroup.setStatus('current')
if mibBuilder.loadTexts: usdMarkingRulesGroup.setDescription('A collection of objects for managing policy rules for marking in a Unisphere product.')
usdForwardRulesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 2, 2, 21)).setObjects(("Unisphere-Data-POLICY-MIB", "usdForwardRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdForwardClaclId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdForwardRulesGroup = usdForwardRulesGroup.setStatus('current')
if mibBuilder.loadTexts: usdForwardRulesGroup.setDescription('A collection of objects for managing forward policy rules in a Unisphere product.')
usdTrafficShapeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 2, 2, 22)).setObjects(("Unisphere-Data-POLICY-MIB", "usdTrafficShapeRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdTrafficShapeId"), ("Unisphere-Data-POLICY-MIB", "usdTrafficShapeProfileNextIndex"), ("Unisphere-Data-POLICY-MIB", "usdTrafficShapeProfileRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdTrafficShapeProfileName"), ("Unisphere-Data-POLICY-MIB", "usdTrafficShapeReferenceCount"), ("Unisphere-Data-POLICY-MIB", "usdTrafficShapeRate"), ("Unisphere-Data-POLICY-MIB", "usdTrafficShapeBurst"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdTrafficShapeGroup = usdTrafficShapeGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdTrafficShapeGroup.setDescription('Obsolete collection of objects for managing traffic shape policy rules and profile lists in a Unisphere product. This group became obsolete when the policy shaper capability was moved into the quality of service component.')
usdColorRulesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 2, 2, 23)).setObjects(("Unisphere-Data-POLICY-MIB", "usdColorRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdColor"), ("Unisphere-Data-POLICY-MIB", "usdColorClaclId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdColorRulesGroup = usdColorRulesGroup.setStatus('current')
if mibBuilder.loadTexts: usdColorRulesGroup.setDescription('A collection of objects for managing color policy rules in a Unisphere product.')
usdTrafficClassRulesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 2, 2, 24)).setObjects(("Unisphere-Data-POLICY-MIB", "usdTrafficClassRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdTrafficClassId"), ("Unisphere-Data-POLICY-MIB", "usdTrafficClassClaclId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdTrafficClassRulesGroup = usdTrafficClassRulesGroup.setStatus('current')
if mibBuilder.loadTexts: usdTrafficClassRulesGroup.setDescription('A collection of objects for managing traffic class policy rules in a Unisphere product.')
usdRateLimitGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 27, 2, 2, 25)).setObjects(("Unisphere-Data-POLICY-MIB", "usdRateLimitRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitId"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitClaclId"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitProfileNextIndex"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitProfileRowStatus"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitProfileName"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitProfileType"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitReferenceCount"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitCommittedBps"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitCommittedBurst"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitExceedBps"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitExceedBurst"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitExcessBurst"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitCommittedAction"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitConformedAction"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitExceededAction"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitCommittedMarkVal"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitConformedMarkVal"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitExceededMarkVal"), ("Unisphere-Data-POLICY-MIB", "usdRateLimitMask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdRateLimitGroup2 = usdRateLimitGroup2.setStatus('current')
if mibBuilder.loadTexts: usdRateLimitGroup2.setDescription('A collection of objects for managing rate limit policy rules and profile lists in a Unisphere product.')
mibBuilder.exportSymbols("Unisphere-Data-POLICY-MIB", usdTrafficShapeProfileRowStatus=usdTrafficShapeProfileRowStatus, usdPolicyStatisticsGroup=usdPolicyStatisticsGroup, usdTrafficClassRowStatus=usdTrafficClassRowStatus, usdRateLimitExceedBps=usdRateLimitExceedBps, usdClassifierControlListIGMPType=usdClassifierControlListIGMPType, usdPolicyIfInputPolicyId=usdPolicyIfInputPolicyId, usdTrafficClassRuleTable=usdTrafficClassRuleTable, usdPolicyAttachProfilePolicyId=usdPolicyAttachProfilePolicyId, usdPolicyIfAttachStatsRedBytes=usdPolicyIfAttachStatsRedBytes, usdClassifierControlListId=usdClassifierControlListId, usdColorRulesGroup=usdColorRulesGroup, usdPolicyGroup2=usdPolicyGroup2, usdPolicyIfOutputStatsEnable=usdPolicyIfOutputStatsEnable, usdClassifierControlListEntry=usdClassifierControlListEntry, usdClassifierControlListDstMask=usdClassifierControlListDstMask, usdMarkingClaclId=usdMarkingClaclId, usdRateLimitExceededAction=usdRateLimitExceededAction, usdLogRuleEntry=usdLogRuleEntry, usdPolicyIfAttachStatsIfId=usdPolicyIfAttachStatsIfId, usdRateLimitProfileRowStatus=usdRateLimitProfileRowStatus, usdRateLimitProfileNextIndex=usdRateLimitProfileNextIndex, usdClassifierControlListRowStatus=usdClassifierControlListRowStatus, usdFilterRowStatus=usdFilterRowStatus, usdTrafficShapeBurst=usdTrafficShapeBurst, usdPolicyIfAttachStatsRedPackets=usdPolicyIfAttachStatsRedPackets, usdColorRowStatus=usdColorRowStatus, usdTrafficShapeProfileId=usdTrafficShapeProfileId, UsdClaclPortOperator=UsdClaclPortOperator, usdNextHopClaclId=usdNextHopClaclId, usdClassifierControlListDst=usdClassifierControlListDst, usdColor=usdColor, usdTrafficShapeProfileNextIndex=usdTrafficShapeProfileNextIndex, usdClassifierControlListTcpFlagsValue=usdClassifierControlListTcpFlagsValue, usdClassifierControlListTcpFlagsMask=usdClassifierControlListTcpFlagsMask, usdPolicyIfAttachStatsRulePrec=usdPolicyIfAttachStatsRulePrec, usdLogRowStatus=usdLogRowStatus, usdPolicyIfAttachStatsRuleId=usdPolicyIfAttachStatsRuleId, usdPolicyAttachProfileGroup=usdPolicyAttachProfileGroup, usdPolicyIf=usdPolicyIf, usdPolicyProfileInputPolicyId=usdPolicyProfileInputPolicyId, usdClassifierControlListSrcFromPort=usdClassifierControlListSrcFromPort, UsdRateLimitProfileType=UsdRateLimitProfileType, usdClassifierControlListElementEntry=usdClassifierControlListElementEntry, usdPolicyCompliance6=usdPolicyCompliance6, usdClassifierControlListReferenceCount=usdClassifierControlListReferenceCount, usdTrafficShapeProfileName=usdTrafficShapeProfileName, usdPolicyCompliance4=usdPolicyCompliance4, usdPolicyEntry=usdPolicyEntry, usdPolicyIfStatsRedBytes=usdPolicyIfStatsRedBytes, usdRateLimitRuleTable=usdRateLimitRuleTable, usdPolicyIfInterfaceId=usdPolicyIfInterfaceId, usdPolicyBaseGroup=usdPolicyBaseGroup, usdForwardRuleTable=usdForwardRuleTable, usdPolicyProfileEntry=usdPolicyProfileEntry, usdPolicyReferenceCount=usdPolicyReferenceCount, usdPolicyRulePolicyId=usdPolicyRulePolicyId, usdPolicyIfAttachStatsEnable=usdPolicyIfAttachStatsEnable, usdMarkingTOSByte=usdMarkingTOSByte, usdClassifierControlListElemRowStatus=usdClassifierControlListElemRowStatus, usdNextHopRuleEntry=usdNextHopRuleEntry, usdPolicyIfAttachStatsYellowPackets=usdPolicyIfAttachStatsYellowPackets, usdTrafficShapeProfileTable=usdTrafficShapeProfileTable, usdPolicyProfileOutputPolicyId=usdPolicyProfileOutputPolicyId, usdMarkingRuleTable=usdMarkingRuleTable, usdPolicyProfileLocalInputPolicyId=usdPolicyProfileLocalInputPolicyId, usdPolicyIfStatsYellowBytes=usdPolicyIfStatsYellowBytes, usdPolicyCompliance2=usdPolicyCompliance2, usdRateLimitExceedBurst=usdRateLimitExceedBurst, usdFilterRuleTable=usdFilterRuleTable, usdFilterRuleEntry=usdFilterRuleEntry, usdPolicyRuleTable=usdPolicyRuleTable, usdPolicyRuleId=usdPolicyRuleId, usdPolicyIfAttachStatsForwardingType=usdPolicyIfAttachStatsForwardingType, usdPolicyIfAttachStatsGreenPackets=usdPolicyIfAttachStatsGreenPackets, usdTrafficClassRuleEntry=usdTrafficClassRuleEntry, usdTrafficShapeId=usdTrafficShapeId, usdNextInterfaceRulesGroup=usdNextInterfaceRulesGroup, usdPolicyStatistics=usdPolicyStatistics, usdClassifierControlListICMPCode=usdClassifierControlListICMPCode, usdPolicyProfileOutputStatsEnable=usdPolicyProfileOutputStatsEnable, usdPolicyAdminState=usdPolicyAdminState, usdPolicyIfStatsClaclEntryNumber=usdPolicyIfStatsClaclEntryNumber, usdPolicyIfStatsRedPackets=usdPolicyIfStatsRedPackets, usdPolicyCompliances=usdPolicyCompliances, usdClassifierControlListGroup=usdClassifierControlListGroup, usdPolicyIfAttachStatsGreenBytes=usdPolicyIfAttachStatsGreenBytes, usdNextInterfaceRuleEntry=usdNextInterfaceRuleEntry, usdRateLimitCommittedAction=usdRateLimitCommittedAction, usdPolicyIfAttachPolicyId=usdPolicyIfAttachPolicyId, usdRateLimitProfileType=usdRateLimitProfileType, usdPolicyIfOutputPolicyId=usdPolicyIfOutputPolicyId, usdTrafficShapeRowStatus=usdTrafficShapeRowStatus, usdRateLimitGroup2=usdRateLimitGroup2, usdClassifierControlListNextIndex=usdClassifierControlListNextIndex, usdPolicyIfStatsIfId=usdPolicyIfStatsIfId, usdPolicyRuleNextIndex=usdPolicyRuleNextIndex, usdPolicyNextIndex=usdPolicyNextIndex, usdPolicyIfTable=usdPolicyIfTable, usdPolicyAttachStatisticsGroup=usdPolicyAttachStatisticsGroup, usdMarkingRuleEntry=usdMarkingRuleEntry, usdPolicyAttachProfileId=usdPolicyAttachProfileId, usdPolicy=usdPolicy, usdPolicyIfStatsRulePrec=usdPolicyIfStatsRulePrec, UsdPolicyAttachmentType=UsdPolicyAttachmentType, usdPolicyIfRowStatus=usdPolicyIfRowStatus, usdRateLimitCommittedBps=usdRateLimitCommittedBps, usdPolicyAttachProfileTable=usdPolicyAttachProfileTable, usdPolicyProfileId=usdPolicyProfileId, usdPolicyAttachProfileForwardingType=usdPolicyAttachProfileForwardingType, usdForwardRowStatus=usdForwardRowStatus, usdPolicyIfStatsGreenPackets=usdPolicyIfStatsGreenPackets, usdPolicyAttachProfileEntry=usdPolicyAttachProfileEntry, usdClassifierControlListNotSrc=usdClassifierControlListNotSrc, usdClassifierControlListSrc=usdClassifierControlListSrc, usdPolicyAttachProfilePolicyType=usdPolicyAttachProfilePolicyType, usdPolicyIfAttachStatsYellowBytes=usdPolicyIfAttachStatsYellowBytes, usdMarkingMask=usdMarkingMask, usdTrafficShapeProfileEntry=usdTrafficShapeProfileEntry, usdPolicyAttachProfileStatsEnable=usdPolicyAttachProfileStatsEnable, usdClassifierControlListElemId=usdClassifierControlListElemId, usdFilterRulesGroup=usdFilterRulesGroup, usdPolicyIfAttachTable=usdPolicyIfAttachTable, usdClassifierControlList=usdClassifierControlList, usdRateLimitControlList=usdRateLimitControlList, usdPolicyOperStatus=usdPolicyOperStatus, usdPolicyIfInputStatsEnable=usdPolicyIfInputStatsEnable, usdPolicyIfAttachStatsPolicyType=usdPolicyIfAttachStatsPolicyType, usdTrafficClassId=usdTrafficClassId, usdRateLimitExceededMarkVal=usdRateLimitExceededMarkVal, usdPolicyIfAttachRowStatus=usdPolicyIfAttachRowStatus, usdPolicyIfAttachInterfaceId=usdPolicyIfAttachInterfaceId, usdPolicyIfAttachStatsEntry=usdPolicyIfAttachStatsEntry, usdPolicyIfAttachEntry=usdPolicyIfAttachEntry, usdColorRuleEntry=usdColorRuleEntry, usdClassifierControlListICMPType=usdClassifierControlListICMPType, usdPolicyRulePrec=usdPolicyRulePrec, usdPolicyRowStatus=usdPolicyRowStatus, usdNextInterfaceNextHop=usdNextInterfaceNextHop, usdRateLimitProfileTable=usdRateLimitProfileTable, usdClassifierControlListName=usdClassifierControlListName, usdMarkingRulesGroup=usdMarkingRulesGroup, usdClassifierControlListDestToPort=usdClassifierControlListDestToPort, usdPolicyIfStatsYellowPackets=usdPolicyIfStatsYellowPackets, usdForwardRuleEntry=usdForwardRuleEntry, usdFilterClaclId=usdFilterClaclId, usdRateLimitClaclId=usdRateLimitClaclId, usdTrafficClassClaclId=usdTrafficClassClaclId, usdClassifierControlListDestOperator=usdClassifierControlListDestOperator, usdClassifierControlListIpFlagsValue=usdClassifierControlListIpFlagsValue, usdPolicyIfStatsTable=usdPolicyIfStatsTable, usdNextHopRulesGroup=usdNextHopRulesGroup, usdNextInterfaceId=usdNextInterfaceId, usdPolicyProfileTable=usdPolicyProfileTable, usdLogClaclId=usdLogClaclId, usdPolicyCompliance5=usdPolicyCompliance5, usdPolicyIfGroup=usdPolicyIfGroup, usdPolicyEclipsed=usdPolicyEclipsed, UsdPolicyForwardingType=UsdPolicyForwardingType, usdPolicyProfile=usdPolicyProfile, usdPolicyIfStatsGreenBytes=usdPolicyIfStatsGreenBytes, usdPolicyObjects=usdPolicyObjects, usdPolicySuspend=usdPolicySuspend, usdClassifierControlListSrcOperator=usdClassifierControlListSrcOperator, usdRateLimitConformedAction=usdRateLimitConformedAction, UsdPolicyIpFragValue=UsdPolicyIpFragValue, usdRateLimitCommittedBurst=usdRateLimitCommittedBurst, usdPolicyCompliance=usdPolicyCompliance, usdClassifierControlListSrcMask=usdClassifierControlListSrcMask, usdTrafficShapeGroup=usdTrafficShapeGroup, usdPolicyProfileLocalInputStatsEnable=usdPolicyProfileLocalInputStatsEnable, usdMarkingRowStatus=usdMarkingRowStatus, usdForwardRulesGroup=usdForwardRulesGroup, usdTrafficShapeRuleTable=usdTrafficShapeRuleTable, usdPolicyIfAttachPolicyType=usdPolicyIfAttachPolicyType, usdPolicyRuleEntry=usdPolicyRuleEntry, usdPolicyName=usdPolicyName, usdLogRuleTable=usdLogRuleTable, usdPolicyIfEntry=usdPolicyIfEntry, usdPolicyTable=usdPolicyTable, usdPolicyIfAttachStatsClaclEntryNumber=usdPolicyIfAttachStatsClaclEntryNumber, usdPolicyProfileRowStatus=usdPolicyProfileRowStatus, usdNextInterfaceRuleTable=usdNextInterfaceRuleTable, usdNextHopRuleTable=usdNextHopRuleTable, usdNextInterfaceClaclId=usdNextInterfaceClaclId, usdClassifierControlListProtocol=usdClassifierControlListProtocol, usdClassifierControlListNotProtocol=usdClassifierControlListNotProtocol, usdClassifierControlListTosByte=usdClassifierControlListTosByte, usdPolicyAttachProfileRowStatus=usdPolicyAttachProfileRowStatus, usdPolicyIfAttachStatsPolicyId=usdPolicyIfAttachStatsPolicyId, usdNextHopIpAddress=usdNextHopIpAddress, usdClassifierControlListElementTable=usdClassifierControlListElementTable, usdPolicyCompliance3=usdPolicyCompliance3, usdPolicyGroup=usdPolicyGroup, usdPolicyId=usdPolicyId, usdLogRuleGroup=usdLogRuleGroup, usdNextInterfaceRowStatus=usdNextInterfaceRowStatus, usdPolicyIfStatsEntry=usdPolicyIfStatsEntry, usdClassifierControlListIpFragValue=usdClassifierControlListIpFragValue, usdRateLimitExcessBurst=usdRateLimitExcessBurst, usdTrafficShapeRate=usdTrafficShapeRate, usdTrafficShapeProfileGroup=usdTrafficShapeProfileGroup, usdPolicyMIB=usdPolicyMIB, usdRateLimitConformedMarkVal=usdRateLimitConformedMarkVal, usdClassifierControlListNextElementIndex=usdClassifierControlListNextElementIndex, usdClassifierControlListMask=usdClassifierControlListMask, usdRateLimitRowStatus=usdRateLimitRowStatus, usdRateLimitRuleEntry=usdRateLimitRuleEntry, usdPolicyRuleType=usdPolicyRuleType, usdPolicyProfileGroup2=usdPolicyProfileGroup2, usdPolicyIfAttachForwardingType=usdPolicyIfAttachForwardingType, usdTrafficShapeRuleEntry=usdTrafficShapeRuleEntry, usdClassifierControlListNotDst=usdClassifierControlListNotDst, usdRateLimitGroup=usdRateLimitGroup, usdTrafficClassRulesGroup=usdTrafficClassRulesGroup, usdRateLimitId=usdRateLimitId, usdTrafficShapeControlList=usdTrafficShapeControlList, usdPolicyErrorValue=usdPolicyErrorValue, usdClassifierControlListGroup2=usdClassifierControlListGroup2, usdRateLimitProfileEntry=usdRateLimitProfileEntry, usdColorClaclId=usdColorClaclId, usdRateLimitReferenceCount=usdRateLimitReferenceCount, usdPolicyIfAttachStatsTable=usdPolicyIfAttachStatsTable, usdRateLimitControlListGroup=usdRateLimitControlListGroup, usdPolicyIfAttachGroup=usdPolicyIfAttachGroup, usdClassifierControlListIpFlagsMask=usdClassifierControlListIpFlagsMask, usdPolicyConformance=usdPolicyConformance, usdPolicyProfileGroup=usdPolicyProfileGroup, usdRateLimitMask=usdRateLimitMask, PYSNMP_MODULE_ID=usdPolicyMIB, usdRateLimitProfileName=usdRateLimitProfileName, usdClassifierControlListDestFromPort=usdClassifierControlListDestFromPort, usdRateLimitCommittedMarkVal=usdRateLimitCommittedMarkVal, usdClassifierControlListSrcToPort=usdClassifierControlListSrcToPort, usdPolicyIfStatsRuleId=usdPolicyIfStatsRuleId, usdPolicyGroups=usdPolicyGroups, usdPolicyIfStatsPolicyType=usdPolicyIfStatsPolicyType, usdRateLimitProfileId=usdRateLimitProfileId, usdColorRuleTable=usdColorRuleTable, usdClassifierControlListTable=usdClassifierControlListTable, usdTrafficShapeReferenceCount=usdTrafficShapeReferenceCount, usdForwardClaclId=usdForwardClaclId, usdPolicyIfStatsPolicyId=usdPolicyIfStatsPolicyId, usdNextHopRowStatus=usdNextHopRowStatus, usdPolicyProfileInputStatsEnable=usdPolicyProfileInputStatsEnable)
