#
# PySNMP MIB module CADANT-HW-MEAS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CADANT-HW-MEAS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:45:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
cadIf3CmtsCmUsStatusChIfIndex, = mibBuilder.importSymbols("CADANT-CMTS-IF3-MIB", "cadIf3CmtsCmUsStatusChIfIndex")
cadIfMacDomainIfIndex, = mibBuilder.importSymbols("CADANT-CMTS-LAYER2CMTS-MIB", "cadIfMacDomainIfIndex")
cadIfCmtsCmStatusMacAddress, = mibBuilder.importSymbols("CADANT-CMTS-MAC-MIB", "cadIfCmtsCmStatusMacAddress")
cadEquipment, = mibBuilder.importSymbols("CADANT-PRODUCTS-MIB", "cadEquipment")
PortId, CardId, CadIfDirection = mibBuilder.importSymbols("CADANT-TC", "PortId", "CardId", "CadIfDirection")
TenthdB, = mibBuilder.importSymbols("DOCS-IF-MIB", "TenthdB")
IfDirection, = mibBuilder.importSymbols("DOCS-QOS3-MIB", "IfDirection")
docsSubmgt3FilterGrpEntry, = mibBuilder.importSymbols("DOCS-SUBMGT3-MIB", "docsSubmgt3FilterGrpEntry")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
pktcEScTapStreamIndex, pktcEScTapMediationContentId = mibBuilder.importSymbols("PKTC-ES-TAP-MIB", "pktcEScTapStreamIndex", "pktcEScTapMediationContentId")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, ObjectIdentity, Gauge32, NotificationType, Counter64, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, MibIdentifier, TimeTicks, Unsigned32, iso, Integer32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ObjectIdentity", "Gauge32", "NotificationType", "Counter64", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "MibIdentifier", "TimeTicks", "Unsigned32", "iso", "Integer32", "IpAddress")
MacAddress, TimeStamp, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TimeStamp", "TextualConvention", "DisplayString", "TruthValue")
cadHardwareMeasMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2))
cadHardwareMeasMib.setRevisions(('2015-08-27 00:00', '2015-07-13 00:00', '2015-06-03 00:00', '2014-10-14 00:00', '2014-06-13 00:00', '2014-06-04 00:00', '2013-11-22 00:00', '2012-10-30 00:00', '2012-05-09 00:00', '2011-08-31 00:00', '2011-06-29 00:00', '2011-02-28 00:00', '2011-02-24 00:00', '2011-02-18 00:00', '2010-11-22 00:00', '2010-03-09 00:00', '2008-11-24 00:00', '2008-11-21 00:00', '2008-11-05 00:00', '2008-04-24 00:00', '2006-09-14 00:00', '2006-04-14 00:00', '2005-07-13 00:00', '2004-12-10 00:00', '2004-08-31 00:00', '2004-04-09 00:00', '2004-03-09 00:00', '2004-02-23 00:00', '2004-02-18 00:00', '2004-02-15 00:00', '2004-01-24 00:00', '2003-12-18 00:00', '2003-12-10 00:00', '2003-09-19 00:00', '2003-08-26 00:00', '2003-07-30 00:00', '2002-05-06 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cadHardwareMeasMib.setRevisionsDescriptions(('Add cadantDPortMeasOfdmChanUtilization', 'Add cadInterfaceHighResUtilizationPercentage and cadInterfaceIntervalOctetsForwarded', 'Add cadantDPortMeasDfdmIfSpeed, cadantDPortMeasOfdmHighestAvgBitsPerSubc, and cadantDPortMeasOfdmNumDataSubc', 'Support 384 downstream channels per DCAM-B', 'Add back in cadFftUpstreamChannelTable', 'Add cadDCardIgmpThrottleDropPkts.', 'Remove cadFftUpstreamChannelTable', 'Add cadLaesCountTable', 'Remove cadHWCmUsMeasTable', 'Remove cadantUPortMeasMapFrms', 'Remove cadSFIDMeasEntry', 'Deprecate cadSFIDMeasEntry and add the following MIB objects to cadantUFIDMeasEntry cadantUFIDMeasCcfStatsSgmtValids, cadantUFIDMeasCcfStatsSgmtLost and cadantUFIDMeasCcfStatsSgmtDrop.', 'Remove cadSFIDToSIDEntry', 'Add cadantUFIDMeasSIDMacIfIndex and cadantUFIDMeasSIDBonded to cadantUFIDMeasEntry', 'Change indices of cadDFIDMeasEntry as ifIndex and SFID. Change indices of cadantUFIDMeasEntry as ifIndex and SID', 'Add cadDCardDhcpV6ThrottleDropPkts and cadDCardNdThrottleDropPkts.', 'Add cadHWCmUsMeasEntry', 'Restructure cadantHWUFIDMeasEntry, rename cadantUFIDMeasUFID to cadantUFIDMeasSID, and Add cadantHWMeasUFIDIndex', 'Restructure cadSFIDMeasEntry to support docsQosServiceFlowCcfStatsEntry', 'Use ifindex as key for sfid to sid lookup.', 'Remove fabric tables and add CPWRED tables to match implementation.', 'Added implementation per utilization interval for cadInterfaceUtilizationAvgContSlots.', 'Added cadDFIDMeasPolicedDelayPkts for Traffic Shaping feature.', 'Extended cadSubMgtPktFilterExtTable to allow for packet capturing.', 'Added cadSubMgtPktFilterExtTable to reset docsSubMgtPktFilterMatches.', 'Added cadFftUpstreamChannelTable for FFT counts.', 'Added cadInterfaceUtilizationTable', 'Added support for per-SID HCS and CRC errors.', 'Added cadantDPortMeasIfOutTotalOctets', 'Added support for per UFID microreflection/signalnoise.', 'Added cadantDPortMeasAppMcastPkts', 'Added 10 BCM3214 counts to the cadantUPortMeasTable', ' add more arp throttle counts. ', ' add more receive error counts to cadantEtherPhyMeasTable', ' add error drop and filter drop counts to UPortMeas table', ' Add support for DHCP packets dropped due to throttling. ', ' change cadantUFIDMeasBytsSGreedyDrop to cadantUFIDMeasPktsSGreedyDrop.',))
if mibBuilder.loadTexts: cadHardwareMeasMib.setLastUpdated('201508270000Z')
if mibBuilder.loadTexts: cadHardwareMeasMib.setOrganization('Arris International, Inc.')
if mibBuilder.loadTexts: cadHardwareMeasMib.setContactInfo('Arris Technical Support E-Mail: support@arrisi.com')
if mibBuilder.loadTexts: cadHardwareMeasMib.setDescription('This Mib Module contains all of the counts that are associated with hardware in the ARRIS C4 CMTS. Many of these MIB variables contain the same counts as found in the standard MIBs. However, the grouping of these variables is done for the convenience of the Cadant engineering team. These tables can be used to build value-added interfaces to the Cadant ARRIS C4 CMTS. ')
class DFIDIndex(TextualConvention, Unsigned32):
    description = "The 1's-based SFID"
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class PktClassId(TextualConvention, Integer32):
    description = 'Index assigned to packet classifier entry by the CMTS which is unique per service flow.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 65535)

class SFIDIndex(TextualConvention, Integer32):
    description = "The 1's-based SFID"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class UFIDIndex(TextualConvention, Integer32):
    description = "The 1's-based UFID"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 32768)

class SIDValue(TextualConvention, Integer32):
    description = "The 1's-based SID. 0 is used when there is no SID, such as for downstream flows."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 16384)

class TMSide(TextualConvention, Integer32):
    description = 'The Traffic Manager side no SID, such as for downstream flows.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("tma", 1), ("tmb", 2))

cadantHWMeasGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 1))
cadantFabActualDepth = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantFabActualDepth.setStatus('current')
if mibBuilder.loadTexts: cadantFabActualDepth.setDescription(' The current depth of the fabric.')
cadantFabAvgDepth = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantFabAvgDepth.setStatus('current')
if mibBuilder.loadTexts: cadantFabAvgDepth.setDescription(' The average depth of the fabric.')
cadantUPortMeasTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 3), )
if mibBuilder.loadTexts: cadantUPortMeasTable.setStatus('current')
if mibBuilder.loadTexts: cadantUPortMeasTable.setDescription(' This table contains information relevant to D Card upstream channels.')
cadantUPortMeasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 3, 1), ).setIndexNames((0, "CADANT-HW-MEAS-MIB", "cadantUPortMeasCardId"), (0, "CADANT-HW-MEAS-MIB", "cadantUPortMeasPortId"))
if mibBuilder.loadTexts: cadantUPortMeasEntry.setStatus('current')
if mibBuilder.loadTexts: cadantUPortMeasEntry.setDescription(' ')
cadantUPortMeasCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 3, 1, 1), CardId())
if mibBuilder.loadTexts: cadantUPortMeasCardId.setStatus('current')
if mibBuilder.loadTexts: cadantUPortMeasCardId.setDescription('')
cadantUPortMeasPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 3, 1, 2), PortId())
if mibBuilder.loadTexts: cadantUPortMeasPortId.setStatus('current')
if mibBuilder.loadTexts: cadantUPortMeasPortId.setDescription('')
cadantUPortMeasUcastFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUPortMeasUcastFrms.setStatus('current')
if mibBuilder.loadTexts: cadantUPortMeasUcastFrms.setDescription(' The aggregrate number of unicast frames received on this U channel, whether dropped or passed. This includes MAC packets.')
cadantUPortMeasMcastFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUPortMeasMcastFrms.setStatus('current')
if mibBuilder.loadTexts: cadantUPortMeasMcastFrms.setDescription(' The aggregrate number of multicast frames received on this U channel, whether dropped or passed. This includes MAC packets.')
cadantUPortMeasBcastFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUPortMeasBcastFrms.setStatus('current')
if mibBuilder.loadTexts: cadantUPortMeasBcastFrms.setDescription(' The aggregrate number of broadcast frames received on this U channel, whether dropped or passed. This includes MAC packets.')
cadantUPortMeasUcastDataFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUPortMeasUcastDataFrms.setStatus('current')
if mibBuilder.loadTexts: cadantUPortMeasUcastDataFrms.setDescription(' The aggregrate number of unicast frames received on this U channel, whether dropped or passed. This does not include MAC packets.')
cadantUPortMeasMcastDataFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUPortMeasMcastDataFrms.setStatus('current')
if mibBuilder.loadTexts: cadantUPortMeasMcastDataFrms.setDescription(' The aggregrate number of multicast frames received on this U channel, whether dropped or passed. This does not include MAC packets.')
cadantUPortMeasBcastDataFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUPortMeasBcastDataFrms.setStatus('current')
if mibBuilder.loadTexts: cadantUPortMeasBcastDataFrms.setDescription(' The aggregrate number of broadcast frames received on this U channel, whether dropped or passed. This does not include MAC packets.')
cadantUPortMeasDiscardFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUPortMeasDiscardFrms.setStatus('current')
if mibBuilder.loadTexts: cadantUPortMeasDiscardFrms.setDescription(' The aggregrate number of frames received on this U channel that were dropped for reasons other than ErrorFrms or FilterFrms.')
cadantUPortMeasIfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUPortMeasIfInOctets.setStatus('current')
if mibBuilder.loadTexts: cadantUPortMeasIfInOctets.setDescription(' The aggregrate number of octets received on this U channel. This includes MAC packets and the length of the MAC header.')
cadantUPortMeasIfInDataOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUPortMeasIfInDataOctets.setStatus('current')
if mibBuilder.loadTexts: cadantUPortMeasIfInDataOctets.setDescription(' The aggregrate number of octets received on this U channel. This does not include MAC packets or the length of the MAC header.')
cadantUPortMeasIfInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUPortMeasIfInUnknownProtos.setStatus('current')
if mibBuilder.loadTexts: cadantUPortMeasIfInUnknownProtos.setDescription(' Aggregrate number of MAC frames with unknown protocol. This count is neither mutually exclusive with cadantUPortMeasErroredFrms nor cadantUPortMeasErroredFrms.')
cadantUPortMeasAppMinusBWReqFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUPortMeasAppMinusBWReqFrms.setStatus('current')
if mibBuilder.loadTexts: cadantUPortMeasAppMinusBWReqFrms.setDescription(' The number of (unicast) frames received by the software application which are not bandwidth request frames. ')
cadantUPortMeasErroredFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUPortMeasErroredFrms.setStatus('current')
if mibBuilder.loadTexts: cadantUPortMeasErroredFrms.setDescription(' The aggregrate number of packets received on this U channel that were received in error and dropped. This count is neither mutually exclusive with cadantUPortMeasIfInUnknownProtos nor cadantUPortMeasFilteredFrms.')
cadantUPortMeasFilteredFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUPortMeasFilteredFrms.setStatus('current')
if mibBuilder.loadTexts: cadantUPortMeasFilteredFrms.setDescription(' The aggregrate number of packets received on this U channel that were dropped due to a filter rule match and discard. This count is neither mutually exclusive with cadantUPortMeasIfInUnknownProtos nor cadantUPortMeasErroredFrms.')
cadantUPortMeasBcastReqOpps = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUPortMeasBcastReqOpps.setStatus('current')
if mibBuilder.loadTexts: cadantUPortMeasBcastReqOpps.setDescription('Broadcast contention request opportunity count')
cadantUPortMeasBcastReqColls = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUPortMeasBcastReqColls.setStatus('current')
if mibBuilder.loadTexts: cadantUPortMeasBcastReqColls.setDescription('Broadcast contention request opportunities with possible collisions count')
cadantUPortMeasBcastReqNoEnergies = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUPortMeasBcastReqNoEnergies.setStatus('current')
if mibBuilder.loadTexts: cadantUPortMeasBcastReqNoEnergies.setDescription('Broadcast contention request opportunities with no energy condition detected')
cadantUPortMeasBcastReqRxPwr1s = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUPortMeasBcastReqRxPwr1s.setStatus('current')
if mibBuilder.loadTexts: cadantUPortMeasBcastReqRxPwr1s.setDescription('Broadcast contention request opportunities with received power level between power threshold 2 and power threshold 1')
cadantUPortMeasBcastReqRxPwr2s = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUPortMeasBcastReqRxPwr2s.setStatus('current')
if mibBuilder.loadTexts: cadantUPortMeasBcastReqRxPwr2s.setDescription('Broadcast contention request opportunities with received power level greater than power threshold 2')
cadantUPortMeasInitMaintOpps = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUPortMeasInitMaintOpps.setStatus('current')
if mibBuilder.loadTexts: cadantUPortMeasInitMaintOpps.setDescription('Initial maintenance opportunities')
cadantUPortMeasInitMaintColls = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUPortMeasInitMaintColls.setStatus('current')
if mibBuilder.loadTexts: cadantUPortMeasInitMaintColls.setDescription('Initial maintenance opportunities with possible collision')
cadantUPortMeasInitMaintNoEnergies = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUPortMeasInitMaintNoEnergies.setStatus('current')
if mibBuilder.loadTexts: cadantUPortMeasInitMaintNoEnergies.setDescription('Initial maintenance opportunities with no energy detected')
cadantUPortMeasInitMaintRxPwr1s = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUPortMeasInitMaintRxPwr1s.setStatus('current')
if mibBuilder.loadTexts: cadantUPortMeasInitMaintRxPwr1s.setDescription('Initial maintenance opportunities with received power level between power threshold 2 and power threshold 1')
cadantUPortMeasInitMaintRxPwr2s = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUPortMeasInitMaintRxPwr2s.setStatus('current')
if mibBuilder.loadTexts: cadantUPortMeasInitMaintRxPwr2s.setDescription('Initial maintenance opportunities with received power level greater than power threshold 2')
cadantDPortMeasTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 4), )
if mibBuilder.loadTexts: cadantDPortMeasTable.setStatus('current')
if mibBuilder.loadTexts: cadantDPortMeasTable.setDescription(' This table contains information relevant to D Card downstream channels.')
cadantDPortMeasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 4, 1), ).setIndexNames((0, "CADANT-HW-MEAS-MIB", "cadantDPortMeasCardId"), (0, "CADANT-HW-MEAS-MIB", "cadantDPortMeasPortId"))
if mibBuilder.loadTexts: cadantDPortMeasEntry.setStatus('current')
if mibBuilder.loadTexts: cadantDPortMeasEntry.setDescription(' ')
cadantDPortMeasCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 4, 1, 1), CardId())
if mibBuilder.loadTexts: cadantDPortMeasCardId.setStatus('current')
if mibBuilder.loadTexts: cadantDPortMeasCardId.setDescription('')
cadantDPortMeasPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 4, 1, 2), PortId())
if mibBuilder.loadTexts: cadantDPortMeasPortId.setStatus('current')
if mibBuilder.loadTexts: cadantDPortMeasPortId.setDescription('')
cadantDPortMeasIfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantDPortMeasIfOutOctets.setStatus('current')
if mibBuilder.loadTexts: cadantDPortMeasIfOutOctets.setDescription(' Aggregrate number of data bytes sent on this D channel. This includes MAC mgmt messages and the length of the MAC header.')
cadantDPortMeasIfOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantDPortMeasIfOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: cadantDPortMeasIfOutUcastPkts.setDescription(' Aggregrate number of unicast data packets sent on this D channel. This includes MAC mgmt messages.')
cadantDPortMeasIfOutMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantDPortMeasIfOutMcastPkts.setStatus('current')
if mibBuilder.loadTexts: cadantDPortMeasIfOutMcastPkts.setDescription(' Aggregrate number of multicast data packets sent on this D channel. This includes MAC mgmt messages.')
cadantDPortMeasIfOutBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantDPortMeasIfOutBcastPkts.setStatus('current')
if mibBuilder.loadTexts: cadantDPortMeasIfOutBcastPkts.setDescription(' Aggregrate number of broadcast data packets sent on this D channel. This includes MAC mgmt messages.')
cadantDPortMeasIfOutDataOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantDPortMeasIfOutDataOctets.setStatus('current')
if mibBuilder.loadTexts: cadantDPortMeasIfOutDataOctets.setDescription(' Aggregrate number of data bytes sent on this D channel. This does not include MAC mgmt bytes.')
cadantDPortMeasIfOutUcastDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantDPortMeasIfOutUcastDataPkts.setStatus('current')
if mibBuilder.loadTexts: cadantDPortMeasIfOutUcastDataPkts.setDescription(' Aggregrate number of unicast data packets sent on this D channel. This does not include MAC mgmt messages.')
cadantDPortMeasIfOutMcastDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantDPortMeasIfOutMcastDataPkts.setStatus('current')
if mibBuilder.loadTexts: cadantDPortMeasIfOutMcastDataPkts.setDescription(' Aggregrate number of multicast data packets sent on this D channel. This does not include MAC mgmt messages.')
cadantDPortMeasIfOutBcastDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantDPortMeasIfOutBcastDataPkts.setStatus('current')
if mibBuilder.loadTexts: cadantDPortMeasIfOutBcastDataPkts.setDescription(' Aggregrate number of broadcast data packets sent on this D channel. This does not include MAC mgmt messages.')
cadantDPortMeasGotNoDMACs = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantDPortMeasGotNoDMACs.setStatus('current')
if mibBuilder.loadTexts: cadantDPortMeasGotNoDMACs.setDescription(' Aggregrate number of ???')
cadantDPortMeasGotNoClasses = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantDPortMeasGotNoClasses.setStatus('current')
if mibBuilder.loadTexts: cadantDPortMeasGotNoClasses.setDescription(' Aggregrate number of ???.')
cadantDPortMeasSyncPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantDPortMeasSyncPkts.setStatus('current')
if mibBuilder.loadTexts: cadantDPortMeasSyncPkts.setDescription(' Aggregrate number of sync. frames sent on this D channel.')
cadantDPortMeasAppUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 4, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantDPortMeasAppUcastPkts.setStatus('current')
if mibBuilder.loadTexts: cadantDPortMeasAppUcastPkts.setDescription(' Aggregrate number of unicast DOCSIS Mac mgmt messages sent by application software. ')
cadantDPortMeasAppMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 4, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantDPortMeasAppMcastPkts.setStatus('current')
if mibBuilder.loadTexts: cadantDPortMeasAppMcastPkts.setDescription(' Aggregrate number of multicast DOCSIS Mac mgmt messages sent by application software. ')
cadantDPortMeasIfOutTotalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 4, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantDPortMeasIfOutTotalOctets.setStatus('current')
if mibBuilder.loadTexts: cadantDPortMeasIfOutTotalOctets.setDescription(' Aggregrate number of octets sent by application software. ')
cadantDPortMeasOfdmIfSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 4, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantDPortMeasOfdmIfSpeed.setStatus('current')
if mibBuilder.loadTexts: cadantDPortMeasOfdmIfSpeed.setDescription('Downstream OFDM channel interface speed.')
cadantDPortMeasOfdmHighestAvgBitsPerSubc = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 4, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantDPortMeasOfdmHighestAvgBitsPerSubc.setStatus('current')
if mibBuilder.loadTexts: cadantDPortMeasOfdmHighestAvgBitsPerSubc.setDescription('Highest average bits per subcarrier among all the data profiles of the downstream OFDM channel.')
cadantDPortMeasOfdmNumDataSubc = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 4, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantDPortMeasOfdmNumDataSubc.setStatus('current')
if mibBuilder.loadTexts: cadantDPortMeasOfdmNumDataSubc.setDescription('The number of data subcarrier of the downstream OFDM channel.')
cadantDPortMeasOfdmChanUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 4, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantDPortMeasOfdmChanUtilization.setStatus('current')
if mibBuilder.loadTexts: cadantDPortMeasOfdmChanUtilization.setDescription('The utilization of the downstream OFDM channel.')
cadantUFIDMeasTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 6), )
if mibBuilder.loadTexts: cadantUFIDMeasTable.setStatus('current')
if mibBuilder.loadTexts: cadantUFIDMeasTable.setDescription(' ')
cadantUFIDMeasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CADANT-HW-MEAS-MIB", "cadantUFIDMeasSID"))
if mibBuilder.loadTexts: cadantUFIDMeasEntry.setStatus('current')
if mibBuilder.loadTexts: cadantUFIDMeasEntry.setDescription(' ')
cadantUFIDMeasSID = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 6, 1, 3), SIDValue())
if mibBuilder.loadTexts: cadantUFIDMeasSID.setStatus('current')
if mibBuilder.loadTexts: cadantUFIDMeasSID.setDescription(' The 14 bit (SID).')
cadantUFIDMeasPktsSGreedyDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUFIDMeasPktsSGreedyDrop.setStatus('current')
if mibBuilder.loadTexts: cadantUFIDMeasPktsSGreedyDrop.setDescription(' The aggregrate number of Super Greedy pkts dropped for this UFID for this MAC layer.')
cadantUFIDMeasBytsOtherDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUFIDMeasBytsOtherDrop.setStatus('current')
if mibBuilder.loadTexts: cadantUFIDMeasBytsOtherDrop.setDescription(' The aggregrate number of bytes dropped for this UFID for this MAC layer for any other reason than Super Greedy.')
cadantUFIDMeasBytsArrived = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUFIDMeasBytsArrived.setStatus('current')
if mibBuilder.loadTexts: cadantUFIDMeasBytsArrived.setDescription(' The aggregrate number of bytes that arrived for this UFID for this MAC layer.')
cadantUFIDMeasPktsArrived = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 6, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUFIDMeasPktsArrived.setStatus('current')
if mibBuilder.loadTexts: cadantUFIDMeasPktsArrived.setDescription(' The aggregrate number of packets that arrived for this UFID for this MAC layer.')
cadantUFIDMeasSIDCorrecteds = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 6, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUFIDMeasSIDCorrecteds.setStatus('current')
if mibBuilder.loadTexts: cadantUFIDMeasSIDCorrecteds.setDescription(' The aggregrate number of bytes that had errors and were corrected for this UFID for this MAC layer.')
cadantUFIDMeasSIDUnerroreds = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 6, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUFIDMeasSIDUnerroreds.setStatus('current')
if mibBuilder.loadTexts: cadantUFIDMeasSIDUnerroreds.setDescription(' The aggregrate number of bytes that had no errors for this UFID for this MAC layer.')
cadantUFIDMeasSIDUnCorrecteds = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 6, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUFIDMeasSIDUnCorrecteds.setStatus('current')
if mibBuilder.loadTexts: cadantUFIDMeasSIDUnCorrecteds.setDescription(' The aggregrate number of bytes that had errors and were not corrected for this UFID for this MAC layer.')
cadantUFIDMeasSIDNoUniqueWordDetecteds = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 6, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUFIDMeasSIDNoUniqueWordDetecteds.setStatus('current')
if mibBuilder.loadTexts: cadantUFIDMeasSIDNoUniqueWordDetecteds.setDescription(' The aggregrate number of bytes allocated for this UFID in which no unique code word was detected for this UFID for this MAC layer.')
cadantUFIDMeasSIDCollidedBursts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 6, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUFIDMeasSIDCollidedBursts.setStatus('current')
if mibBuilder.loadTexts: cadantUFIDMeasSIDCollidedBursts.setDescription(' The aggregrate number of bytes allocated for this UFID that had burst errors in their slots for this UFID for this MAC layer.')
cadantUFIDMeasSIDNoEnergyDetecteds = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 6, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUFIDMeasSIDNoEnergyDetecteds.setStatus('current')
if mibBuilder.loadTexts: cadantUFIDMeasSIDNoEnergyDetecteds.setDescription(' The aggregrate number of bytes allocated for this UFID that had no energy detected in their slots for this UFID for this MAC layer.')
cadantUFIDMeasSIDLengthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 6, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUFIDMeasSIDLengthErrors.setStatus('current')
if mibBuilder.loadTexts: cadantUFIDMeasSIDLengthErrors.setDescription(' The aggregrate number of bytes allocated for this UFID that had no length errors in their slots for this UFID for this MAC layer.')
cadantUFIDMeasSIDMACErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 6, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUFIDMeasSIDMACErrors.setStatus('current')
if mibBuilder.loadTexts: cadantUFIDMeasSIDMACErrors.setDescription(' The aggregrate number of bytes allocated for this UFID that had MAC errors in their slots for this UFID for this MAC layer.')
cadantUFIDMeasMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 6, 1, 17), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUFIDMeasMacAddress.setStatus('current')
if mibBuilder.loadTexts: cadantUFIDMeasMacAddress.setDescription(' The MAC address of the CM this flow is associated with.')
cadantUFIDMeasSCN = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 6, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUFIDMeasSCN.setStatus('current')
if mibBuilder.loadTexts: cadantUFIDMeasSCN.setDescription(' The Service Class Name for this flow.')
cadantUFIDMeasSFID = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 6, 1, 19), SFIDIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUFIDMeasSFID.setStatus('current')
if mibBuilder.loadTexts: cadantUFIDMeasSFID.setDescription(' The SFID this UFID(SID) is for.')
cadantUFIDMeasPHSUnknowns = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 6, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUFIDMeasPHSUnknowns.setStatus('current')
if mibBuilder.loadTexts: cadantUFIDMeasPHSUnknowns.setDescription('refer to docsQosServiceFlowPHSUnknowns')
cadantUFIDMeasFragPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 6, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUFIDMeasFragPkts.setStatus('current')
if mibBuilder.loadTexts: cadantUFIDMeasFragPkts.setDescription('refer to docsQosUpstreamFragPkts')
cadantUFIDMeasIncompletePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 6, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUFIDMeasIncompletePkts.setStatus('current')
if mibBuilder.loadTexts: cadantUFIDMeasIncompletePkts.setDescription('refer to docsQosUpstreamIncompletePkts')
cadantUFIDMeasConcatBursts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 6, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUFIDMeasConcatBursts.setStatus('current')
if mibBuilder.loadTexts: cadantUFIDMeasConcatBursts.setDescription('refer to docsQosUpstreamConcatBursts')
cadantUFIDMeasSIDSignalNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 6, 1, 24), TenthdB()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUFIDMeasSIDSignalNoise.setStatus('current')
if mibBuilder.loadTexts: cadantUFIDMeasSIDSignalNoise.setDescription('refer to docsIfCmtsCmStatusSignalNoise')
cadantUFIDMeasSIDMicroreflections = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 6, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUFIDMeasSIDMicroreflections.setStatus('current')
if mibBuilder.loadTexts: cadantUFIDMeasSIDMicroreflections.setDescription('refer to docsIfCmtsCmStatusMicroreflections')
cadantUFIDMeasSIDHCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 6, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUFIDMeasSIDHCSErrors.setStatus('current')
if mibBuilder.loadTexts: cadantUFIDMeasSIDHCSErrors.setDescription('The number of MAC HCS errors seen for this SID.')
cadantUFIDMeasSIDCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 6, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUFIDMeasSIDCRCErrors.setStatus('current')
if mibBuilder.loadTexts: cadantUFIDMeasSIDCRCErrors.setDescription('The number of MAC CRC errors seen for this SID.')
cadantUFIDMeasUFIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 6, 1, 28), UFIDIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUFIDMeasUFIDIndex.setStatus('current')
if mibBuilder.loadTexts: cadantUFIDMeasUFIDIndex.setDescription(' The 15 bit (UFID).')
cadantUFIDMeasGateID = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 6, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUFIDMeasGateID.setStatus('current')
if mibBuilder.loadTexts: cadantUFIDMeasGateID.setDescription(' The DQoS or PCMM gate ID corresponding to the flow, A zero in this field indicates no gate is associated with the flow.')
cadantUFIDMeasSIDMacIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 6, 1, 30), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUFIDMeasSIDMacIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadantUFIDMeasSIDMacIfIndex.setDescription(' The cable Mac domain ifIndex the SID is associated with.')
cadantUFIDMeasSIDBonded = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 6, 1, 31), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUFIDMeasSIDBonded.setStatus('current')
if mibBuilder.loadTexts: cadantUFIDMeasSIDBonded.setDescription(' This object indicates whether a SID is associated with a CCF service flow.')
cadantUFIDMeasCcfStatsSgmtValids = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 6, 1, 32), Counter32()).setUnits('segments').setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUFIDMeasCcfStatsSgmtValids.setStatus('current')
if mibBuilder.loadTexts: cadantUFIDMeasCcfStatsSgmtValids.setDescription('This attribute contains the number of segments counted on this service flow regardless of whether the fragment was correctly reassembled into valid packets. Discontinuities in the value of this counter can occur at reinitialization of the managed system.')
cadantUFIDMeasCcfStatsSgmtLost = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 6, 1, 33), Counter32()).setUnits('segments').setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUFIDMeasCcfStatsSgmtLost.setStatus('current')
if mibBuilder.loadTexts: cadantUFIDMeasCcfStatsSgmtLost.setDescription('This attribute counts the number of segments which the CMTS segment reassembly function determines were lost. Discontinuities in the value of this counter can occur at reinitialization of the managed system.')
cadantUFIDMeasCcfStatsSgmtDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 6, 1, 34), Counter32()).setUnits('segments').setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantUFIDMeasCcfStatsSgmtDrop.setStatus('current')
if mibBuilder.loadTexts: cadantUFIDMeasCcfStatsSgmtDrop.setDescription('This attribute counts the number of segments which the CMTS segment reassembly function determines were dropped. Discontinuities in the value of this counter can occur at reinitialization of the managed system.')
cadantEtherPhyMeasTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 10), )
if mibBuilder.loadTexts: cadantEtherPhyMeasTable.setStatus('current')
if mibBuilder.loadTexts: cadantEtherPhyMeasTable.setDescription(' ')
cadantEtherPhyMeasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 10, 1), ).setIndexNames((0, "CADANT-HW-MEAS-MIB", "cadantEtherPhyMeasCardId"), (0, "CADANT-HW-MEAS-MIB", "cadantEtherPhyMeasPortId"))
if mibBuilder.loadTexts: cadantEtherPhyMeasEntry.setStatus('current')
if mibBuilder.loadTexts: cadantEtherPhyMeasEntry.setDescription(' ')
cadantEtherPhyMeasCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 10, 1, 1), CardId())
if mibBuilder.loadTexts: cadantEtherPhyMeasCardId.setStatus('current')
if mibBuilder.loadTexts: cadantEtherPhyMeasCardId.setDescription('')
cadantEtherPhyMeasPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 10, 1, 2), PortId())
if mibBuilder.loadTexts: cadantEtherPhyMeasPortId.setStatus('current')
if mibBuilder.loadTexts: cadantEtherPhyMeasPortId.setDescription('')
cadantEtherPhyMeasRxOctOK = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 10, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantEtherPhyMeasRxOctOK.setStatus('current')
if mibBuilder.loadTexts: cadantEtherPhyMeasRxOctOK.setDescription(' .')
cadantEtherPhyMeasRxUniOK = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 10, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantEtherPhyMeasRxUniOK.setStatus('current')
if mibBuilder.loadTexts: cadantEtherPhyMeasRxUniOK.setDescription(' .')
cadantEtherPhyMeasRxMultiOK = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 10, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantEtherPhyMeasRxMultiOK.setStatus('current')
if mibBuilder.loadTexts: cadantEtherPhyMeasRxMultiOK.setDescription(' .')
cadantEtherPhyMeasRxBroadOK = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 10, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantEtherPhyMeasRxBroadOK.setStatus('current')
if mibBuilder.loadTexts: cadantEtherPhyMeasRxBroadOK.setDescription(' .')
cadantEtherPhyMeasRxOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 10, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantEtherPhyMeasRxOverflow.setStatus('current')
if mibBuilder.loadTexts: cadantEtherPhyMeasRxOverflow.setDescription(' .')
cadantEtherPhyMeasRxNormAlign = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 10, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantEtherPhyMeasRxNormAlign.setStatus('current')
if mibBuilder.loadTexts: cadantEtherPhyMeasRxNormAlign.setDescription(' .')
cadantEtherPhyMeasRxNormCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 10, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantEtherPhyMeasRxNormCRC.setStatus('current')
if mibBuilder.loadTexts: cadantEtherPhyMeasRxNormCRC.setDescription(' .')
cadantEtherPhyMeasRxLongOK = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 10, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantEtherPhyMeasRxLongOK.setStatus('current')
if mibBuilder.loadTexts: cadantEtherPhyMeasRxLongOK.setDescription(' .')
cadantEtherPhyMeasRxLongCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 10, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantEtherPhyMeasRxLongCRC.setStatus('current')
if mibBuilder.loadTexts: cadantEtherPhyMeasRxLongCRC.setDescription(' .')
cadantEtherPhyMeasRxFalsCRS = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 10, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantEtherPhyMeasRxFalsCRS.setStatus('current')
if mibBuilder.loadTexts: cadantEtherPhyMeasRxFalsCRS.setDescription(' .')
cadantEtherPhyMeasRxSymbolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 10, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantEtherPhyMeasRxSymbolErrors.setStatus('current')
if mibBuilder.loadTexts: cadantEtherPhyMeasRxSymbolErrors.setDescription(' .')
cadantEtherPhyMeasRxPause = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 10, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantEtherPhyMeasRxPause.setStatus('current')
if mibBuilder.loadTexts: cadantEtherPhyMeasRxPause.setDescription(' .')
cadantEtherPhyMeasTxOctOK = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 10, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantEtherPhyMeasTxOctOK.setStatus('current')
if mibBuilder.loadTexts: cadantEtherPhyMeasTxOctOK.setDescription(' .')
cadantEtherPhyMeasTxUniOK = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 10, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantEtherPhyMeasTxUniOK.setStatus('current')
if mibBuilder.loadTexts: cadantEtherPhyMeasTxUniOK.setDescription(' .')
cadantEtherPhyMeasTxMultiOK = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 10, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantEtherPhyMeasTxMultiOK.setStatus('current')
if mibBuilder.loadTexts: cadantEtherPhyMeasTxMultiOK.setDescription(' .')
cadantEtherPhyMeasTxBroadOK = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 10, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantEtherPhyMeasTxBroadOK.setStatus('current')
if mibBuilder.loadTexts: cadantEtherPhyMeasTxBroadOK.setDescription(' .')
cadantEtherPhyMeasTxScol = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 10, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantEtherPhyMeasTxScol.setStatus('current')
if mibBuilder.loadTexts: cadantEtherPhyMeasTxScol.setDescription(' .')
cadantEtherPhyMeasTxMcol = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 10, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantEtherPhyMeasTxMcol.setStatus('current')
if mibBuilder.loadTexts: cadantEtherPhyMeasTxMcol.setDescription(' .')
cadantEtherPhyMeasTxDeferred = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 10, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantEtherPhyMeasTxDeferred.setStatus('current')
if mibBuilder.loadTexts: cadantEtherPhyMeasTxDeferred.setDescription(' .')
cadantEtherPhyMeasTxLcol = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 10, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantEtherPhyMeasTxLcol.setStatus('current')
if mibBuilder.loadTexts: cadantEtherPhyMeasTxLcol.setDescription(' .')
cadantEtherPhyMeasTxCcol = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 10, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantEtherPhyMeasTxCcol.setStatus('current')
if mibBuilder.loadTexts: cadantEtherPhyMeasTxCcol.setDescription(' .')
cadantEtherPhyMeasTxErr = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 10, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantEtherPhyMeasTxErr.setStatus('current')
if mibBuilder.loadTexts: cadantEtherPhyMeasTxErr.setDescription(' .')
cadantEtherPhyMeasTxPause = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 10, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantEtherPhyMeasTxPause.setStatus('current')
if mibBuilder.loadTexts: cadantEtherPhyMeasTxPause.setDescription(' .')
cadantEtherPhyMeasRxShortOK = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 10, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantEtherPhyMeasRxShortOK.setStatus('current')
if mibBuilder.loadTexts: cadantEtherPhyMeasRxShortOK.setDescription(' .')
cadantEtherPhyMeasRxShortCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 10, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantEtherPhyMeasRxShortCRC.setStatus('current')
if mibBuilder.loadTexts: cadantEtherPhyMeasRxShortCRC.setDescription(' .')
cadantEtherPhyMeasRxRunt = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 10, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantEtherPhyMeasRxRunt.setStatus('current')
if mibBuilder.loadTexts: cadantEtherPhyMeasRxRunt.setDescription(' .')
cadantEtherPhyMeasRxOctBad = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 10, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadantEtherPhyMeasRxOctBad.setStatus('current')
if mibBuilder.loadTexts: cadantEtherPhyMeasRxOctBad.setDescription(' .')
cadDFIDMeasTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 14), )
if mibBuilder.loadTexts: cadDFIDMeasTable.setStatus('current')
if mibBuilder.loadTexts: cadDFIDMeasTable.setDescription('This table contains DFID-specific counts.')
cadDFIDMeasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 14, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CADANT-HW-MEAS-MIB", "cadDFIDMeasIndex"))
if mibBuilder.loadTexts: cadDFIDMeasEntry.setStatus('current')
if mibBuilder.loadTexts: cadDFIDMeasEntry.setDescription(' ')
cadDFIDMeasIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 14, 1, 3), SFIDIndex())
if mibBuilder.loadTexts: cadDFIDMeasIndex.setStatus('current')
if mibBuilder.loadTexts: cadDFIDMeasIndex.setDescription(' The SFID these DFID counts are for.')
cadDFIDMeasBytsArrived = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 14, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadDFIDMeasBytsArrived.setStatus('current')
if mibBuilder.loadTexts: cadDFIDMeasBytsArrived.setDescription(' The aggregrate number of bytes arriving to go out, but not necessarily transmitted.')
cadDFIDMeasPktsArrived = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 14, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadDFIDMeasPktsArrived.setStatus('current')
if mibBuilder.loadTexts: cadDFIDMeasPktsArrived.setDescription(' The aggregrate number of packets arriving to go out, but not necessarily transmitted.')
cadDFIDMeasBytsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 14, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadDFIDMeasBytsDropped.setStatus('current')
if mibBuilder.loadTexts: cadDFIDMeasBytsDropped.setDescription(' The aggregrate number of bytes dropped.')
cadDFIDMeasPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 14, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadDFIDMeasPktsDropped.setStatus('current')
if mibBuilder.loadTexts: cadDFIDMeasPktsDropped.setDescription(' The aggregrate number of packets dropped.')
cadDFIDMeasBytsUnkDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 14, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadDFIDMeasBytsUnkDropped.setStatus('current')
if mibBuilder.loadTexts: cadDFIDMeasBytsUnkDropped.setDescription(' The aggregrate number of bytes dropped due to unknown DMAC.')
cadDFIDMeasDFID = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 14, 1, 9), DFIDIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadDFIDMeasDFID.setStatus('current')
if mibBuilder.loadTexts: cadDFIDMeasDFID.setDescription(' The DFID.')
cadDFIDMeasPHSUnknowns = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 14, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadDFIDMeasPHSUnknowns.setStatus('current')
if mibBuilder.loadTexts: cadDFIDMeasPHSUnknowns.setDescription('refer to docsQosServiceFlowPHSUnknowns')
cadDFIDMeasMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 14, 1, 11), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadDFIDMeasMacAddress.setStatus('current')
if mibBuilder.loadTexts: cadDFIDMeasMacAddress.setDescription(' The MAC address of the CM this flow is associated with.')
cadDFIDMeasSCN = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 14, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadDFIDMeasSCN.setStatus('current')
if mibBuilder.loadTexts: cadDFIDMeasSCN.setDescription(' The Service Class Name for this flow.')
cadDFIDMeasPolicedDelayPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 14, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadDFIDMeasPolicedDelayPkts.setStatus('current')
if mibBuilder.loadTexts: cadDFIDMeasPolicedDelayPkts.setDescription('refer to docsQosServiceFlowPolicedDelayPkts')
cadDFIDMeasGateID = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 14, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadDFIDMeasGateID.setStatus('current')
if mibBuilder.loadTexts: cadDFIDMeasGateID.setDescription(' The DQoS or PCMM gate ID corresponding to the flow, A zero in this field indicates no gate is associated with the flow.')
cadQosPktClassMeasTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 16), )
if mibBuilder.loadTexts: cadQosPktClassMeasTable.setStatus('current')
if mibBuilder.loadTexts: cadQosPktClassMeasTable.setDescription(' This table contains just one data member: cadQosPktClassMeasPkts, which is equivalent to docsQosPktClassPkts in qos-draft-04.')
cadQosPktClassMeasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 16, 1), ).setIndexNames((0, "CADANT-HW-MEAS-MIB", "cadQosPktClassMeasIfIndex"), (0, "CADANT-HW-MEAS-MIB", "cadQosPktClassMeasSFID"), (0, "CADANT-HW-MEAS-MIB", "cadQosPktClassMeasPktClassId"))
if mibBuilder.loadTexts: cadQosPktClassMeasEntry.setStatus('current')
if mibBuilder.loadTexts: cadQosPktClassMeasEntry.setDescription(' ')
cadQosPktClassMeasIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 16, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cadQosPktClassMeasIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadQosPktClassMeasIfIndex.setDescription(' The ifIndex of ifType 127 for this classifier.')
cadQosPktClassMeasSFID = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 16, 1, 2), SFIDIndex())
if mibBuilder.loadTexts: cadQosPktClassMeasSFID.setStatus('current')
if mibBuilder.loadTexts: cadQosPktClassMeasSFID.setDescription(' The Service Flow ID this classifier is for.')
cadQosPktClassMeasPktClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 16, 1, 3), PktClassId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadQosPktClassMeasPktClassId.setStatus('current')
if mibBuilder.loadTexts: cadQosPktClassMeasPktClassId.setDescription(' The ID of this classifier, which only need be unique for a given Service Flow ID.')
cadQosPktClassMeasPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 16, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadQosPktClassMeasPkts.setStatus('current')
if mibBuilder.loadTexts: cadQosPktClassMeasPkts.setDescription(' The number of packets that have been classified using this classifier on this flow.')
cadIfMeasTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 18), )
if mibBuilder.loadTexts: cadIfMeasTable.setStatus('current')
if mibBuilder.loadTexts: cadIfMeasTable.setDescription(' This table is designed to concurrently support the counters defined in the ifTable and the ifXTable. Every row that appears in this table should have a corresponding row in both the ifTable and the ifXTable. However, not every row in the ifTable and ifXTable will appear in this table.')
cadIfMeasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 18, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cadIfMeasEntry.setStatus('current')
if mibBuilder.loadTexts: cadIfMeasEntry.setDescription('')
cadIfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 18, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfInOctets.setStatus('current')
if mibBuilder.loadTexts: cadIfInOctets.setDescription(" See the IF-MIB's corresponding object's DESCRIPTION for a description of this object.")
cadIfInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 18, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: cadIfInUcastPkts.setDescription(" See the IF-MIB's corresponding object's DESCRIPTION for a description of this object.")
cadIfInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 18, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfInMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: cadIfInMulticastPkts.setDescription(" See the IF-MIB's corresponding object's DESCRIPTION for a description of this object.")
cadIfInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 18, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfInBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: cadIfInBroadcastPkts.setDescription(" See the IF-MIB's corresponding object's DESCRIPTION for a description of this object.")
cadIfInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 18, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfInDiscards.setStatus('current')
if mibBuilder.loadTexts: cadIfInDiscards.setDescription(" See the IF-MIB's corresponding object's DESCRIPTION for a description of this object.")
cadIfInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 18, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfInErrors.setStatus('current')
if mibBuilder.loadTexts: cadIfInErrors.setDescription(" See the IF-MIB's corresponding object's DESCRIPTION for a description of this object.")
cadIfInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 18, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfInUnknownProtos.setStatus('current')
if mibBuilder.loadTexts: cadIfInUnknownProtos.setDescription(" See the IF-MIB's corresponding object's DESCRIPTION for a description of this object.")
cadIfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 18, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfOutOctets.setStatus('current')
if mibBuilder.loadTexts: cadIfOutOctets.setDescription(" See the IF-MIB's corresponding object's DESCRIPTION for a description of this object.")
cadIfOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 18, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: cadIfOutUcastPkts.setDescription(" See the IF-MIB's corresponding object's DESCRIPTION for a description of this object.")
cadIfOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 18, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfOutMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: cadIfOutMulticastPkts.setDescription(" See the IF-MIB's corresponding object's DESCRIPTION for a description of this object.")
cadIfOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 18, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfOutBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: cadIfOutBroadcastPkts.setDescription(" See the IF-MIB's corresponding object's DESCRIPTION for a description of this object.")
cadIfOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 18, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfOutDiscards.setStatus('current')
if mibBuilder.loadTexts: cadIfOutDiscards.setDescription(" See the IF-MIB's corresponding object's DESCRIPTION for a description of this object.")
cadIfOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 18, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfOutErrors.setStatus('current')
if mibBuilder.loadTexts: cadIfOutErrors.setDescription(" See the IF-MIB's corresponding object's DESCRIPTION for a description of this object.")
cadDCardMeasTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 20), )
if mibBuilder.loadTexts: cadDCardMeasTable.setStatus('current')
if mibBuilder.loadTexts: cadDCardMeasTable.setDescription(' This table contains information relevant to D Card counts.')
cadDCardMeasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 20, 1), ).setIndexNames((0, "CADANT-HW-MEAS-MIB", "cadDCardMeasCardId"))
if mibBuilder.loadTexts: cadDCardMeasEntry.setStatus('current')
if mibBuilder.loadTexts: cadDCardMeasEntry.setDescription(' ')
cadDCardMeasCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 20, 1, 1), CardId())
if mibBuilder.loadTexts: cadDCardMeasCardId.setStatus('current')
if mibBuilder.loadTexts: cadDCardMeasCardId.setDescription('')
cadDCardIpInReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 20, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadDCardIpInReceives.setStatus('current')
if mibBuilder.loadTexts: cadDCardIpInReceives.setDescription('The contribution to ipInRecevies for this particular D Card.')
cadDCardIpInHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 20, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadDCardIpInHdrErrors.setStatus('current')
if mibBuilder.loadTexts: cadDCardIpInHdrErrors.setDescription('The contribution to ipInHdrErrors for this particular D Card.')
cadDCardIpInAddrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 20, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadDCardIpInAddrErrors.setStatus('current')
if mibBuilder.loadTexts: cadDCardIpInAddrErrors.setDescription('The contribution to ipInAddrErrors for this particular D Card.')
cadDCardDhcpThrottleDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 20, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadDCardDhcpThrottleDropPkts.setStatus('current')
if mibBuilder.loadTexts: cadDCardDhcpThrottleDropPkts.setDescription('The number of dropped DHCP requests for this D Card.')
cadDCardArpThrottleDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 20, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadDCardArpThrottleDropPkts.setStatus('current')
if mibBuilder.loadTexts: cadDCardArpThrottleDropPkts.setDescription('The number of dropped ARP requests for this D Card.')
cadDCardDhcpV6ThrottleDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 20, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadDCardDhcpV6ThrottleDropPkts.setStatus('current')
if mibBuilder.loadTexts: cadDCardDhcpV6ThrottleDropPkts.setDescription('The number of dropped IPV6 DHCP requests for this D Card.')
cadDCardNdThrottleDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 20, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadDCardNdThrottleDropPkts.setStatus('current')
if mibBuilder.loadTexts: cadDCardNdThrottleDropPkts.setDescription('The number of dropped IPV6 ND requests for this D Card.')
cadDCardIgmpThrottleDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 20, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadDCardIgmpThrottleDropPkts.setStatus('current')
if mibBuilder.loadTexts: cadDCardIgmpThrottleDropPkts.setDescription('The number of dropped IGMP messages for this UCAM.')
cadInterfaceUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 23), )
if mibBuilder.loadTexts: cadInterfaceUtilizationTable.setStatus('current')
if mibBuilder.loadTexts: cadInterfaceUtilizationTable.setDescription('Reports utilization statistics for attached interfaces.')
cadInterfaceUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 23, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CADANT-HW-MEAS-MIB", "cadInterfaceUtilizationDirection"))
if mibBuilder.loadTexts: cadInterfaceUtilizationEntry.setStatus('current')
if mibBuilder.loadTexts: cadInterfaceUtilizationEntry.setDescription('Utilization statistics for a single interface. An entry exists in this table for each ifEntry with an ifType equal to docsCableDownstreamInterface (128), docsCableUpstreamInterface (129), docsCableUpstreamChannel (205), ethernet(6), or gigabitEthernet(117).')
cadInterfaceUtilizationDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 23, 1, 1), CadIfDirection())
if mibBuilder.loadTexts: cadInterfaceUtilizationDirection.setStatus('current')
if mibBuilder.loadTexts: cadInterfaceUtilizationDirection.setDescription("The direction of flow this utilization is for. Cable upstream interfaces will only have a value of 'in' for this object. Likewise, cable downstream interfaces will only hav a value of 'out' for this object. Full-duplex interfaces, such as fastEthernet and gigabitEthernet interfaces, will have both 'in' and 'out' rows.")
cadInterfaceUtilizationPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 23, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cadInterfaceUtilizationPercentage.setStatus('current')
if mibBuilder.loadTexts: cadInterfaceUtilizationPercentage.setDescription('The calculated and truncated utilization index for this interface, accurate as of the most recent docsIfCmtsChannelUtilizationInterval.')
cadInterfaceUtilizationAvgContSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 23, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cadInterfaceUtilizationAvgContSlots.setStatus('current')
if mibBuilder.loadTexts: cadInterfaceUtilizationAvgContSlots.setDescription('Applicable for ifType of docsCableUpstreamChannel (205) only. The average percentage of contention mini-slots for upstream channel. This ratio is calculated the most recent utilization interval. Formula: Upstream contention mini-slots utilization = (100 * ((contention mini-slots ) / (total mini-slots))')
cadInterfaceHighResUtilizationPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 23, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('Hundredth of a percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cadInterfaceHighResUtilizationPercentage.setStatus('current')
if mibBuilder.loadTexts: cadInterfaceHighResUtilizationPercentage.setDescription('The calculated and truncated utilization index for this interface, accurate (to 0.01% resolution) as of the most recent docsIfCmtsChannelUtilizationInterval.')
cadInterfaceIntervalOctetsForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 23, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadInterfaceIntervalOctetsForwarded.setStatus('current')
if mibBuilder.loadTexts: cadInterfaceIntervalOctetsForwarded.setDescription('The number of octets forwarded since the most recent docsIfCmtsChannelUtilizationInterval. Note that this count will only apply to the following interface types: Ethernet, Link-Aggregate. For all other interface types this value will display 0')
cadSubMgtPktFilterExtTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 25), )
if mibBuilder.loadTexts: cadSubMgtPktFilterExtTable.setStatus('current')
if mibBuilder.loadTexts: cadSubMgtPktFilterExtTable.setDescription('This table augments the docsSubMgtPktFilterTable. In its current form, it is used to clear docsSubMgtPktFilterMatches and keep track of the change.')
cadSubMgtPktFilterExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 25, 1), )
docsSubmgt3FilterGrpEntry.registerAugmentions(("CADANT-HW-MEAS-MIB", "cadSubMgtPktFilterExtEntry"))
cadSubMgtPktFilterExtEntry.setIndexNames(*docsSubmgt3FilterGrpEntry.getIndexNames())
if mibBuilder.loadTexts: cadSubMgtPktFilterExtEntry.setStatus('current')
if mibBuilder.loadTexts: cadSubMgtPktFilterExtEntry.setDescription('For every docsSubmgt3FilterGrpEntry, there is a matching cadSubMgtPktFilterExtEntry.')
cadSubMgtPktFilterMatchesReset = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 25, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadSubMgtPktFilterMatchesReset.setStatus('current')
if mibBuilder.loadTexts: cadSubMgtPktFilterMatchesReset.setDescription('This object always return false(2) when read. If the value false(2) is assigned to this object, no action is taken. However, if this object it set to the value true(1), the corresponding docsSubMgtPktFilterMatches counter object is set to 0 and cadSubMgtPktFilterLastChanged is set to the current time.')
cadSubMgtPktFilterLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 25, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSubMgtPktFilterLastChanged.setStatus('current')
if mibBuilder.loadTexts: cadSubMgtPktFilterLastChanged.setDescription('The time at which docsSubMgtPktFilterMatches might have experienced a discontinuity, such as when cadSubMgtPktFilterMatchesReset is set to true(1) or when any of the parameters in the docsSubMgtPktFilterTable affecting filtering last changed.')
cadSubMgtPktFilterCaptureEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 25, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadSubMgtPktFilterCaptureEnabled.setStatus('current')
if mibBuilder.loadTexts: cadSubMgtPktFilterCaptureEnabled.setDescription('Indicates whether packets matching this filter are captured for possible debug logging. A value of true indicates that packets matching this filter will be captured. A value of false indicates that packets matching this filter will not be captured for later debuggging.')
cadLaesCountTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 26), )
if mibBuilder.loadTexts: cadLaesCountTable.setStatus('current')
if mibBuilder.loadTexts: cadLaesCountTable.setDescription('This table references pktcEScTapStreamTable')
cadLaesCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 26, 1), ).setIndexNames((0, "PKTC-ES-TAP-MIB", "pktcEScTapMediationContentId"), (0, "PKTC-ES-TAP-MIB", "pktcEScTapStreamIndex"))
if mibBuilder.loadTexts: cadLaesCountEntry.setStatus('current')
if mibBuilder.loadTexts: cadLaesCountEntry.setDescription('For every cadLaesCountEntry, there is a matching pktcEScTapStreamEntry.')
cadLaesCountMacDomainIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 26, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadLaesCountMacDomainIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadLaesCountMacDomainIfIndex.setDescription('This object indicates the cable Mac domain interface index that the LAES stream is associated with.')
cadLaesCountStreamDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 26, 1, 2), IfDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadLaesCountStreamDirection.setStatus('current')
if mibBuilder.loadTexts: cadLaesCountStreamDirection.setDescription('This object indicates either downstream or upstream direction that the LAES stream is associated with.')
cadLaesCountInterceptedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 26, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadLaesCountInterceptedPackets.setStatus('current')
if mibBuilder.loadTexts: cadLaesCountInterceptedPackets.setDescription('Indicates number of intercepted packets are sent of the LAES stream.')
cadLaesCountInterceptDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 26, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadLaesCountInterceptDrops.setStatus('current')
if mibBuilder.loadTexts: cadLaesCountInterceptDrops.setDescription('Indicates number of intercepted packets are dropped of the LAES stream.')
cadFftUpstreamChannelTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 24), )
if mibBuilder.loadTexts: cadFftUpstreamChannelTable.setStatus('current')
if mibBuilder.loadTexts: cadFftUpstreamChannelTable.setDescription('Reports current FFT operation status.')
cadFftUpstreamChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 24, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cadFftUpstreamChannelEntry.setStatus('current')
if mibBuilder.loadTexts: cadFftUpstreamChannelEntry.setDescription('FFT status for a single upstream channel with ifType docsCableUpstreamInterface(129).')
cadFftInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 24, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadFftInProgress.setStatus('current')
if mibBuilder.loadTexts: cadFftInProgress.setDescription('The current state on the FFT capture. ')
cadFftCurrentTriggers = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 2, 24, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadFftCurrentTriggers.setStatus('current')
if mibBuilder.loadTexts: cadFftCurrentTriggers.setDescription('The number of times the FFT capture has triggered and transferred data from the Broadcom device.')
mibBuilder.exportSymbols("CADANT-HW-MEAS-MIB", cadDFIDMeasBytsUnkDropped=cadDFIDMeasBytsUnkDropped, cadantDPortMeasIfOutUcastDataPkts=cadantDPortMeasIfOutUcastDataPkts, cadInterfaceUtilizationDirection=cadInterfaceUtilizationDirection, cadDCardIpInReceives=cadDCardIpInReceives, cadLaesCountStreamDirection=cadLaesCountStreamDirection, cadInterfaceUtilizationPercentage=cadInterfaceUtilizationPercentage, cadantUPortMeasInitMaintNoEnergies=cadantUPortMeasInitMaintNoEnergies, cadantUPortMeasErroredFrms=cadantUPortMeasErroredFrms, cadantEtherPhyMeasRxNormCRC=cadantEtherPhyMeasRxNormCRC, cadantEtherPhyMeasRxLongOK=cadantEtherPhyMeasRxLongOK, cadDCardIpInAddrErrors=cadDCardIpInAddrErrors, cadSubMgtPktFilterCaptureEnabled=cadSubMgtPktFilterCaptureEnabled, cadSubMgtPktFilterExtTable=cadSubMgtPktFilterExtTable, cadantUPortMeasUcastDataFrms=cadantUPortMeasUcastDataFrms, cadantUPortMeasBcastReqColls=cadantUPortMeasBcastReqColls, cadantUFIDMeasSIDCollidedBursts=cadantUFIDMeasSIDCollidedBursts, cadIfInUcastPkts=cadIfInUcastPkts, cadantEtherPhyMeasCardId=cadantEtherPhyMeasCardId, cadIfOutUcastPkts=cadIfOutUcastPkts, cadantDPortMeasIfOutMcastPkts=cadantDPortMeasIfOutMcastPkts, SFIDIndex=SFIDIndex, cadDFIDMeasBytsDropped=cadDFIDMeasBytsDropped, cadIfOutErrors=cadIfOutErrors, cadantUFIDMeasSIDNoEnergyDetecteds=cadantUFIDMeasSIDNoEnergyDetecteds, cadantEtherPhyMeasRxMultiOK=cadantEtherPhyMeasRxMultiOK, cadDCardDhcpThrottleDropPkts=cadDCardDhcpThrottleDropPkts, cadantUFIDMeasPktsSGreedyDrop=cadantUFIDMeasPktsSGreedyDrop, cadantEtherPhyMeasRxShortOK=cadantEtherPhyMeasRxShortOK, cadIfInUnknownProtos=cadIfInUnknownProtos, cadantUPortMeasMcastFrms=cadantUPortMeasMcastFrms, cadantUPortMeasBcastDataFrms=cadantUPortMeasBcastDataFrms, cadLaesCountEntry=cadLaesCountEntry, PYSNMP_MODULE_ID=cadHardwareMeasMib, cadantDPortMeasAppMcastPkts=cadantDPortMeasAppMcastPkts, cadantUFIDMeasUFIDIndex=cadantUFIDMeasUFIDIndex, cadantUFIDMeasSIDMacIfIndex=cadantUFIDMeasSIDMacIfIndex, cadQosPktClassMeasSFID=cadQosPktClassMeasSFID, cadantDPortMeasIfOutBcastPkts=cadantDPortMeasIfOutBcastPkts, cadInterfaceUtilizationTable=cadInterfaceUtilizationTable, cadDCardMeasTable=cadDCardMeasTable, cadantUPortMeasEntry=cadantUPortMeasEntry, cadantDPortMeasIfOutOctets=cadantDPortMeasIfOutOctets, cadDFIDMeasPktsArrived=cadDFIDMeasPktsArrived, cadantUPortMeasIfInUnknownProtos=cadantUPortMeasIfInUnknownProtos, cadantUPortMeasBcastReqOpps=cadantUPortMeasBcastReqOpps, cadDFIDMeasGateID=cadDFIDMeasGateID, cadantEtherPhyMeasRxUniOK=cadantEtherPhyMeasRxUniOK, cadantUFIDMeasSCN=cadantUFIDMeasSCN, cadantEtherPhyMeasRxOverflow=cadantEtherPhyMeasRxOverflow, cadantDPortMeasIfOutUcastPkts=cadantDPortMeasIfOutUcastPkts, cadantDPortMeasGotNoDMACs=cadantDPortMeasGotNoDMACs, cadDFIDMeasMacAddress=cadDFIDMeasMacAddress, cadantUFIDMeasBytsOtherDrop=cadantUFIDMeasBytsOtherDrop, cadantUFIDMeasSID=cadantUFIDMeasSID, cadIfOutOctets=cadIfOutOctets, cadantEtherPhyMeasRxRunt=cadantEtherPhyMeasRxRunt, cadantUFIDMeasCcfStatsSgmtValids=cadantUFIDMeasCcfStatsSgmtValids, cadantUPortMeasInitMaintRxPwr2s=cadantUPortMeasInitMaintRxPwr2s, TMSide=TMSide, cadDFIDMeasPHSUnknowns=cadDFIDMeasPHSUnknowns, cadantEtherPhyMeasTxUniOK=cadantEtherPhyMeasTxUniOK, cadantEtherPhyMeasRxOctBad=cadantEtherPhyMeasRxOctBad, cadDFIDMeasDFID=cadDFIDMeasDFID, cadantHWMeasGeneral=cadantHWMeasGeneral, cadQosPktClassMeasPkts=cadQosPktClassMeasPkts, cadDCardIpInHdrErrors=cadDCardIpInHdrErrors, cadFftCurrentTriggers=cadFftCurrentTriggers, cadantEtherPhyMeasRxBroadOK=cadantEtherPhyMeasRxBroadOK, cadDCardIgmpThrottleDropPkts=cadDCardIgmpThrottleDropPkts, cadSubMgtPktFilterMatchesReset=cadSubMgtPktFilterMatchesReset, cadDCardMeasCardId=cadDCardMeasCardId, cadantUFIDMeasEntry=cadantUFIDMeasEntry, cadIfMeasEntry=cadIfMeasEntry, cadDFIDMeasBytsArrived=cadDFIDMeasBytsArrived, cadantUFIDMeasSIDUnerroreds=cadantUFIDMeasSIDUnerroreds, cadIfInDiscards=cadIfInDiscards, cadIfInMulticastPkts=cadIfInMulticastPkts, cadIfOutDiscards=cadIfOutDiscards, cadantUFIDMeasPHSUnknowns=cadantUFIDMeasPHSUnknowns, cadantEtherPhyMeasTxScol=cadantEtherPhyMeasTxScol, cadDCardDhcpV6ThrottleDropPkts=cadDCardDhcpV6ThrottleDropPkts, cadantDPortMeasOfdmIfSpeed=cadantDPortMeasOfdmIfSpeed, DFIDIndex=DFIDIndex, cadInterfaceUtilizationAvgContSlots=cadInterfaceUtilizationAvgContSlots, cadantEtherPhyMeasTxCcol=cadantEtherPhyMeasTxCcol, PktClassId=PktClassId, cadantUPortMeasDiscardFrms=cadantUPortMeasDiscardFrms, cadDCardMeasEntry=cadDCardMeasEntry, cadantEtherPhyMeasTxLcol=cadantEtherPhyMeasTxLcol, cadantUPortMeasBcastReqNoEnergies=cadantUPortMeasBcastReqNoEnergies, cadantUFIDMeasMacAddress=cadantUFIDMeasMacAddress, cadDCardArpThrottleDropPkts=cadDCardArpThrottleDropPkts, cadIfOutMulticastPkts=cadIfOutMulticastPkts, cadInterfaceIntervalOctetsForwarded=cadInterfaceIntervalOctetsForwarded, cadQosPktClassMeasTable=cadQosPktClassMeasTable, cadQosPktClassMeasEntry=cadQosPktClassMeasEntry, cadantUFIDMeasSIDLengthErrors=cadantUFIDMeasSIDLengthErrors, cadantFabActualDepth=cadantFabActualDepth, cadantUFIDMeasCcfStatsSgmtLost=cadantUFIDMeasCcfStatsSgmtLost, cadDFIDMeasPolicedDelayPkts=cadDFIDMeasPolicedDelayPkts, cadantDPortMeasOfdmChanUtilization=cadantDPortMeasOfdmChanUtilization, cadantUFIDMeasSIDUnCorrecteds=cadantUFIDMeasSIDUnCorrecteds, cadDCardNdThrottleDropPkts=cadDCardNdThrottleDropPkts, cadInterfaceUtilizationEntry=cadInterfaceUtilizationEntry, cadantUPortMeasUcastFrms=cadantUPortMeasUcastFrms, cadantDPortMeasPortId=cadantDPortMeasPortId, cadantUFIDMeasFragPkts=cadantUFIDMeasFragPkts, cadantFabAvgDepth=cadantFabAvgDepth, cadLaesCountInterceptedPackets=cadLaesCountInterceptedPackets, cadantDPortMeasSyncPkts=cadantDPortMeasSyncPkts, cadIfInOctets=cadIfInOctets, cadIfOutBroadcastPkts=cadIfOutBroadcastPkts, cadantUPortMeasTable=cadantUPortMeasTable, cadantEtherPhyMeasRxFalsCRS=cadantEtherPhyMeasRxFalsCRS, cadantEtherPhyMeasRxOctOK=cadantEtherPhyMeasRxOctOK, cadInterfaceHighResUtilizationPercentage=cadInterfaceHighResUtilizationPercentage, cadIfInBroadcastPkts=cadIfInBroadcastPkts, cadantEtherPhyMeasTable=cadantEtherPhyMeasTable, cadDFIDMeasEntry=cadDFIDMeasEntry, cadantEtherPhyMeasTxMcol=cadantEtherPhyMeasTxMcol, cadantUFIDMeasConcatBursts=cadantUFIDMeasConcatBursts, cadantEtherPhyMeasRxShortCRC=cadantEtherPhyMeasRxShortCRC, cadHardwareMeasMib=cadHardwareMeasMib, cadantEtherPhyMeasTxBroadOK=cadantEtherPhyMeasTxBroadOK, cadantDPortMeasIfOutBcastDataPkts=cadantDPortMeasIfOutBcastDataPkts, cadantEtherPhyMeasTxDeferred=cadantEtherPhyMeasTxDeferred, cadantDPortMeasGotNoClasses=cadantDPortMeasGotNoClasses, cadSubMgtPktFilterLastChanged=cadSubMgtPktFilterLastChanged, cadantUFIDMeasBytsArrived=cadantUFIDMeasBytsArrived, cadantEtherPhyMeasTxPause=cadantEtherPhyMeasTxPause, cadantUPortMeasCardId=cadantUPortMeasCardId, cadantUFIDMeasSIDCRCErrors=cadantUFIDMeasSIDCRCErrors, cadantUPortMeasIfInDataOctets=cadantUPortMeasIfInDataOctets, cadFftUpstreamChannelTable=cadFftUpstreamChannelTable, cadantUPortMeasInitMaintRxPwr1s=cadantUPortMeasInitMaintRxPwr1s, cadDFIDMeasSCN=cadDFIDMeasSCN, cadantUPortMeasIfInOctets=cadantUPortMeasIfInOctets, cadantUFIDMeasIncompletePkts=cadantUFIDMeasIncompletePkts, cadLaesCountInterceptDrops=cadLaesCountInterceptDrops, cadantDPortMeasIfOutTotalOctets=cadantDPortMeasIfOutTotalOctets, cadQosPktClassMeasPktClassId=cadQosPktClassMeasPktClassId, cadantUFIDMeasSIDSignalNoise=cadantUFIDMeasSIDSignalNoise, cadFftInProgress=cadFftInProgress, cadantUPortMeasBcastReqRxPwr2s=cadantUPortMeasBcastReqRxPwr2s, cadantDPortMeasEntry=cadantDPortMeasEntry, cadantUFIDMeasCcfStatsSgmtDrop=cadantUFIDMeasCcfStatsSgmtDrop, cadantUFIDMeasSIDBonded=cadantUFIDMeasSIDBonded, cadantUPortMeasInitMaintOpps=cadantUPortMeasInitMaintOpps, cadantUPortMeasPortId=cadantUPortMeasPortId, cadantUFIDMeasPktsArrived=cadantUFIDMeasPktsArrived, cadantEtherPhyMeasRxNormAlign=cadantEtherPhyMeasRxNormAlign, cadantUPortMeasAppMinusBWReqFrms=cadantUPortMeasAppMinusBWReqFrms, cadantUFIDMeasTable=cadantUFIDMeasTable, cadIfMeasTable=cadIfMeasTable, cadantEtherPhyMeasTxMultiOK=cadantEtherPhyMeasTxMultiOK, cadIfInErrors=cadIfInErrors, cadantUPortMeasInitMaintColls=cadantUPortMeasInitMaintColls, cadQosPktClassMeasIfIndex=cadQosPktClassMeasIfIndex, cadantEtherPhyMeasPortId=cadantEtherPhyMeasPortId, cadantUFIDMeasSIDMACErrors=cadantUFIDMeasSIDMACErrors, cadantEtherPhyMeasTxOctOK=cadantEtherPhyMeasTxOctOK, cadantDPortMeasCardId=cadantDPortMeasCardId, cadantDPortMeasOfdmNumDataSubc=cadantDPortMeasOfdmNumDataSubc, cadantEtherPhyMeasEntry=cadantEtherPhyMeasEntry, cadantEtherPhyMeasRxSymbolErrors=cadantEtherPhyMeasRxSymbolErrors, SIDValue=SIDValue, cadantDPortMeasOfdmHighestAvgBitsPerSubc=cadantDPortMeasOfdmHighestAvgBitsPerSubc, cadantEtherPhyMeasRxLongCRC=cadantEtherPhyMeasRxLongCRC, cadLaesCountTable=cadLaesCountTable, cadantUPortMeasFilteredFrms=cadantUPortMeasFilteredFrms, cadDFIDMeasPktsDropped=cadDFIDMeasPktsDropped, cadantUPortMeasBcastReqRxPwr1s=cadantUPortMeasBcastReqRxPwr1s, cadantDPortMeasIfOutDataOctets=cadantDPortMeasIfOutDataOctets, cadantEtherPhyMeasRxPause=cadantEtherPhyMeasRxPause, cadantDPortMeasIfOutMcastDataPkts=cadantDPortMeasIfOutMcastDataPkts, cadantUPortMeasBcastFrms=cadantUPortMeasBcastFrms, cadantUFIDMeasSIDMicroreflections=cadantUFIDMeasSIDMicroreflections, cadantUPortMeasMcastDataFrms=cadantUPortMeasMcastDataFrms, cadDFIDMeasTable=cadDFIDMeasTable, cadantDPortMeasAppUcastPkts=cadantDPortMeasAppUcastPkts, UFIDIndex=UFIDIndex, cadantUFIDMeasSFID=cadantUFIDMeasSFID, cadFftUpstreamChannelEntry=cadFftUpstreamChannelEntry, cadantUFIDMeasSIDNoUniqueWordDetecteds=cadantUFIDMeasSIDNoUniqueWordDetecteds, cadSubMgtPktFilterExtEntry=cadSubMgtPktFilterExtEntry, cadantUFIDMeasSIDHCSErrors=cadantUFIDMeasSIDHCSErrors, cadantUFIDMeasGateID=cadantUFIDMeasGateID, cadDFIDMeasIndex=cadDFIDMeasIndex, cadLaesCountMacDomainIfIndex=cadLaesCountMacDomainIfIndex, cadantDPortMeasTable=cadantDPortMeasTable, cadantUFIDMeasSIDCorrecteds=cadantUFIDMeasSIDCorrecteds, cadantEtherPhyMeasTxErr=cadantEtherPhyMeasTxErr)
