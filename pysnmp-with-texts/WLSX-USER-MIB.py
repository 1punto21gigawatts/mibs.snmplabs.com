#
# PySNMP MIB module WLSX-USER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WLSX-USER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:37:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
wlsxEnterpriseMibModules, = mibBuilder.importSymbols("ARUBA-MIB", "wlsxEnterpriseMibModules")
ArubaPhyType, ArubaSubAuthenticationMethods, ArubaUserForwardMode, ArubaHTMode, ArubaEncryptionType, ArubaAuthenticationMethods = mibBuilder.importSymbols("ARUBA-TC", "ArubaPhyType", "ArubaSubAuthenticationMethods", "ArubaUserForwardMode", "ArubaHTMode", "ArubaEncryptionType", "ArubaAuthenticationMethods")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ObjectIdentity, Bits, TimeTicks, MibIdentifier, TextualConvention, NotificationType, Gauge32, Unsigned32, iso, snmpModules, ModuleIdentity, IpAddress, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Bits", "TimeTicks", "MibIdentifier", "TextualConvention", "NotificationType", "Gauge32", "Unsigned32", "iso", "snmpModules", "ModuleIdentity", "IpAddress", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Counter32")
TestAndIncr, PhysAddress, TAddress, TimeInterval, MacAddress, TruthValue, StorageType, TextualConvention, DisplayString, RowStatus, TDomain = mibBuilder.importSymbols("SNMPv2-TC", "TestAndIncr", "PhysAddress", "TAddress", "TimeInterval", "MacAddress", "TruthValue", "StorageType", "TextualConvention", "DisplayString", "RowStatus", "TDomain")
wlanESSID, = mibBuilder.importSymbols("WLSX-WLAN-MIB", "wlanESSID")
wlsxUserMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4))
wlsxUserMIB.setRevisions(('1910-01-26 18:06',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wlsxUserMIB.setRevisionsDescriptions(('The initial revision.',))
if mibBuilder.loadTexts: wlsxUserMIB.setLastUpdated('1001261806Z')
if mibBuilder.loadTexts: wlsxUserMIB.setOrganization('Aruba Wireless Networks')
if mibBuilder.loadTexts: wlsxUserMIB.setContactInfo('Postal: 1322 Crossman Avenue Sunnyvale, CA 94089 E-mail: dl-support@arubanetworks.com Phone: +1 408 227 4500')
if mibBuilder.loadTexts: wlsxUserMIB.setDescription('This MIB module defines MIB objects which provide information about the users in an Aruba controller.')
wlsxUserAllInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1))
wlsxTotalNumOfUsers = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxTotalNumOfUsers.setStatus('current')
if mibBuilder.loadTexts: wlsxTotalNumOfUsers.setDescription(' Total Number of the users. ')
wlsxUserTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2), )
if mibBuilder.loadTexts: wlsxUserTable.setStatus('current')
if mibBuilder.loadTexts: wlsxUserTable.setDescription(' This Table lists all the users (both wired and wireless) currently connected to the controller. Users are identified by their MAC address and IP address. ')
wlsxUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1), ).setIndexNames((0, "WLSX-USER-MIB", "nUserPhyAddress"), (0, "WLSX-USER-MIB", "nUserIpAddress"))
if mibBuilder.loadTexts: wlsxUserEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxUserEntry.setDescription('User Entry')
nUserPhyAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: nUserPhyAddress.setStatus('current')
if mibBuilder.loadTexts: nUserPhyAddress.setDescription(' MAC address of the station from which the user connected to the controller. ')
nUserIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: nUserIpAddress.setStatus('current')
if mibBuilder.loadTexts: nUserIpAddress.setDescription(' IP Address of the user. ')
nUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserName.setStatus('current')
if mibBuilder.loadTexts: nUserName.setDescription(' Name of the User. ')
nUserRole = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserRole.setStatus('current')
if mibBuilder.loadTexts: nUserRole.setDescription(' The Role configured for this user. ')
nUserUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserUpTime.setStatus('current')
if mibBuilder.loadTexts: nUserUpTime.setDescription(' Time since the user connected to the controller. ')
nUserAuthenticationMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 6), ArubaAuthenticationMethods()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserAuthenticationMethod.setStatus('current')
if mibBuilder.loadTexts: nUserAuthenticationMethod.setDescription(' Authentication mechanism used by the user to connect to the controller. ')
nUserSubAuthenticationMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 7), ArubaSubAuthenticationMethods()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserSubAuthenticationMethod.setStatus('current')
if mibBuilder.loadTexts: nUserSubAuthenticationMethod.setDescription(' Sub Authentication Method ')
nUserAuthServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserAuthServerName.setStatus('current')
if mibBuilder.loadTexts: nUserAuthServerName.setDescription(' Name of the authentication server used to authenticate the user. ')
nUserExtVPNAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserExtVPNAddress.setStatus('current')
if mibBuilder.loadTexts: nUserExtVPNAddress.setDescription(' External VPN IP Address, if this is a VPN user or 0.0.0.0 if not. ')
nUserApLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserApLocation.setStatus('current')
if mibBuilder.loadTexts: nUserApLocation.setDescription(' Location of the access point to which the user is associated. ')
nUserApBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 11), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserApBSSID.setStatus('current')
if mibBuilder.loadTexts: nUserApBSSID.setDescription(' BSSID of the access point, which the user used to connect to the controller. ')
nUserIsOnHomeAgent = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserIsOnHomeAgent.setStatus('deprecated')
if mibBuilder.loadTexts: nUserIsOnHomeAgent.setDescription(' The Object will indicate if the controller is the home controller for the user or not. ')
nUserHomeAgentIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserHomeAgentIpAddress.setStatus('deprecated')
if mibBuilder.loadTexts: nUserHomeAgentIpAddress.setDescription(' The Home agent IP Address of the user. If this user is already on the home controller, then this IP is the controller IP else it is the home controller IP address. ')
nUserMobilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("visitor", 1), ("away", 2), ("associated", 3), ("wired", 4), ("wireless", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserMobilityStatus.setStatus('current')
if mibBuilder.loadTexts: nUserMobilityStatus.setDescription(' The Mobility Status of the User. ')
nUserHomeVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserHomeVlan.setStatus('deprecated')
if mibBuilder.loadTexts: nUserHomeVlan.setDescription(' Home VLAN of the User. If the user is on the home controller then this VLAN will be same as userDefaultVlan. ')
nUserDefaultVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserDefaultVlan.setStatus('current')
if mibBuilder.loadTexts: nUserDefaultVlan.setDescription(' Default VLAN of the User based on the AP configuration. ')
nUserAssignedVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserAssignedVlan.setStatus('current')
if mibBuilder.loadTexts: nUserAssignedVlan.setDescription(' This Vlan will be different from the Default VLAN if the user has a derived VLAN Configuration. ')
nUserBWContractName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserBWContractName.setStatus('deprecated')
if mibBuilder.loadTexts: nUserBWContractName.setDescription(' Name of the Bandwidth Contract applied to this user. ')
nUserBWContractUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("user", 1), ("shared", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserBWContractUsage.setStatus('deprecated')
if mibBuilder.loadTexts: nUserBWContractUsage.setDescription(' Indicates how the Bandwidth Contract is used. ')
nUserBWContractId = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserBWContractId.setStatus('deprecated')
if mibBuilder.loadTexts: nUserBWContractId.setDescription(' Bandwidth Contract Id Assigned to the User ')
nUserIsProxyArpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserIsProxyArpEnabled.setStatus('current')
if mibBuilder.loadTexts: nUserIsProxyArpEnabled.setDescription(' This object will indicate if the controller is proxy ARPing for the user. ')
nUserCurrentVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserCurrentVlan.setStatus('current')
if mibBuilder.loadTexts: nUserCurrentVlan.setDescription(' The VLAN to which the user is currently bound. ')
nUserIsWired = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserIsWired.setStatus('current')
if mibBuilder.loadTexts: nUserIsWired.setDescription(' Indicates whether this is a wired or wireless user. ')
nUserConnectedSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserConnectedSlot.setStatus('current')
if mibBuilder.loadTexts: nUserConnectedSlot.setDescription(' The slot to which the user is connected, if wired. ')
nUserConnectedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserConnectedPort.setStatus('current')
if mibBuilder.loadTexts: nUserConnectedPort.setDescription(' The port to which the user is connected, if wired. ')
nUserPhyType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 26), ArubaPhyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserPhyType.setStatus('current')
if mibBuilder.loadTexts: nUserPhyType.setDescription(" The wireless PHY type to which the user is associated, or 'wired'. ")
nUserMobilityDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserMobilityDomainName.setStatus('current')
if mibBuilder.loadTexts: nUserMobilityDomainName.setDescription(' The name of mobility domain mobile user belongs to. ')
nUserUPBWContractName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserUPBWContractName.setStatus('current')
if mibBuilder.loadTexts: nUserUPBWContractName.setDescription(' Name of the Upstream Bandwidth Contract applied to this user. ')
nUserUPBWContractUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("user", 1), ("shared", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserUPBWContractUsage.setStatus('current')
if mibBuilder.loadTexts: nUserUPBWContractUsage.setDescription(' Indicates how the Upstream Bandwidth Contract is used. ')
nUserUPBWContractId = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserUPBWContractId.setStatus('current')
if mibBuilder.loadTexts: nUserUPBWContractId.setDescription(' Upstream Bandwidth Contract Id Assigned to the User ')
nUserDNBWContractName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserDNBWContractName.setStatus('current')
if mibBuilder.loadTexts: nUserDNBWContractName.setDescription(' Name of the Downstream Bandwidth Contract applied to this user. ')
nUserDNBWContractUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("user", 1), ("shared", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserDNBWContractUsage.setStatus('current')
if mibBuilder.loadTexts: nUserDNBWContractUsage.setDescription(' Indicates how the Downstream Bandwidth Contract is used. ')
nUserDNBWContractId = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserDNBWContractId.setStatus('current')
if mibBuilder.loadTexts: nUserDNBWContractId.setDescription(' Downstream Bandwidth Contract Id Assigned to the User ')
nUserHTMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 34), ArubaHTMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserHTMode.setStatus('current')
if mibBuilder.loadTexts: nUserHTMode.setDescription(' The HT mode of this user, if any. ')
nUserEncryptionMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 35), ArubaEncryptionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserEncryptionMethod.setStatus('current')
if mibBuilder.loadTexts: nUserEncryptionMethod.setDescription(' Encryption method. ')
nUserForwardMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 36), ArubaUserForwardMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserForwardMode.setStatus('current')
if mibBuilder.loadTexts: nUserForwardMode.setDescription(' User mode. ')
nUserDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserDeviceID.setStatus('current')
if mibBuilder.loadTexts: nUserDeviceID.setDescription(' Device ID ')
nUserConnectedModule = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserConnectedModule.setStatus('current')
if mibBuilder.loadTexts: nUserConnectedModule.setDescription(' The module to which the user is connected, if wired. ')
nUserDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserDeviceType.setStatus('current')
if mibBuilder.loadTexts: nUserDeviceType.setDescription(' Device type ')
nUserRxDataPkts64 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserRxDataPkts64.setStatus('current')
if mibBuilder.loadTexts: nUserRxDataPkts64.setDescription(' This object specifies number of packets received by this IP for which this user is connected to the controller. ')
nUserTxDataPkts64 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserTxDataPkts64.setStatus('current')
if mibBuilder.loadTexts: nUserTxDataPkts64.setDescription(' This object specifies number of packets transmitted by this IP for which this user is connected to the controller. ')
nUserRxDataOctets64 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserRxDataOctets64.setStatus('current')
if mibBuilder.loadTexts: nUserRxDataOctets64.setDescription(' This object specifies number of octets received by this IP for which this user is connected to the controller. ')
nUserTxDataOctets64 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 2, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nUserTxDataOctets64.setStatus('current')
if mibBuilder.loadTexts: nUserTxDataOctets64.setDescription(' This object specifies number of octets transmitted by this IP for which this user is connected to the controller. ')
wlsxUserSessionTimeTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 3), )
if mibBuilder.loadTexts: wlsxUserSessionTimeTable.setStatus('current')
if mibBuilder.loadTexts: wlsxUserSessionTimeTable.setDescription(' This table lists the user session time counts on an ESSID. ssid. The session times are separated into predefined time length buckets, with sessions lasting longer than 240 minutes falling into the 240min bucket. ')
wlsxUserSessionTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 3, 1), ).setIndexNames((0, "WLSX-WLAN-MIB", "wlanESSID"), (0, "WLSX-USER-MIB", "wlsxUserSessionTimeLength"))
if mibBuilder.loadTexts: wlsxUserSessionTimeEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxUserSessionTimeEntry.setDescription(' User session time data, divided into buckets of different time length. ')
wlsxUserSessionTimeLength = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: wlsxUserSessionTimeLength.setStatus('current')
if mibBuilder.loadTexts: wlsxUserSessionTimeLength.setDescription(' Pre-defined user session time length. ')
wlsxUserSessionTimeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxUserSessionTimeCount.setStatus('current')
if mibBuilder.loadTexts: wlsxUserSessionTimeCount.setDescription(' Number of users that are connected to the essid whose sessions expired in this time interval. ')
wlsxUserStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 4))
wlsxNumOfUsers8021x = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 4, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxNumOfUsers8021x.setStatus('current')
if mibBuilder.loadTexts: wlsxNumOfUsers8021x.setDescription(' Number of 802.1x users. ')
wlsxNumOfUsersVPN = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 4, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxNumOfUsersVPN.setStatus('current')
if mibBuilder.loadTexts: wlsxNumOfUsersVPN.setDescription(' Number of VPN users. ')
wlsxNumOfUsersCP = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 4, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxNumOfUsersCP.setStatus('current')
if mibBuilder.loadTexts: wlsxNumOfUsersCP.setDescription(' Number of Captive Portal users. ')
wlsxNumOfUsersMAC = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 4, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxNumOfUsersMAC.setStatus('current')
if mibBuilder.loadTexts: wlsxNumOfUsersMAC.setDescription(' Number of MAC users. ')
wlsxNumOfUsersStateful8021x = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 4, 1, 4, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxNumOfUsersStateful8021x.setStatus('current')
if mibBuilder.loadTexts: wlsxNumOfUsersStateful8021x.setDescription(' Number of stateful 802.1x users. ')
mibBuilder.exportSymbols("WLSX-USER-MIB", wlsxUserSessionTimeEntry=wlsxUserSessionTimeEntry, nUserBWContractId=nUserBWContractId, nUserBWContractUsage=nUserBWContractUsage, wlsxUserSessionTimeTable=wlsxUserSessionTimeTable, nUserDefaultVlan=nUserDefaultVlan, nUserHomeAgentIpAddress=nUserHomeAgentIpAddress, nUserAuthenticationMethod=nUserAuthenticationMethod, nUserConnectedModule=nUserConnectedModule, nUserUPBWContractName=nUserUPBWContractName, nUserDNBWContractName=nUserDNBWContractName, PYSNMP_MODULE_ID=wlsxUserMIB, wlsxUserAllInfoGroup=wlsxUserAllInfoGroup, nUserMobilityStatus=nUserMobilityStatus, nUserConnectedSlot=nUserConnectedSlot, wlsxUserSessionTimeCount=wlsxUserSessionTimeCount, wlsxNumOfUsers8021x=wlsxNumOfUsers8021x, nUserMobilityDomainName=nUserMobilityDomainName, nUserRxDataOctets64=nUserRxDataOctets64, wlsxNumOfUsersCP=wlsxNumOfUsersCP, wlsxNumOfUsersMAC=wlsxNumOfUsersMAC, nUserUPBWContractUsage=nUserUPBWContractUsage, nUserTxDataOctets64=nUserTxDataOctets64, wlsxUserTable=wlsxUserTable, nUserRole=nUserRole, nUserDNBWContractUsage=nUserDNBWContractUsage, wlsxTotalNumOfUsers=wlsxTotalNumOfUsers, nUserApLocation=nUserApLocation, nUserDeviceID=nUserDeviceID, nUserEncryptionMethod=nUserEncryptionMethod, nUserBWContractName=nUserBWContractName, nUserName=nUserName, nUserUpTime=nUserUpTime, nUserSubAuthenticationMethod=nUserSubAuthenticationMethod, nUserTxDataPkts64=nUserTxDataPkts64, nUserConnectedPort=nUserConnectedPort, nUserExtVPNAddress=nUserExtVPNAddress, nUserUPBWContractId=nUserUPBWContractId, nUserRxDataPkts64=nUserRxDataPkts64, wlsxUserStatsGroup=wlsxUserStatsGroup, wlsxUserEntry=wlsxUserEntry, nUserApBSSID=nUserApBSSID, nUserDNBWContractId=nUserDNBWContractId, wlsxUserSessionTimeLength=wlsxUserSessionTimeLength, nUserIsWired=nUserIsWired, nUserAssignedVlan=nUserAssignedVlan, nUserIsOnHomeAgent=nUserIsOnHomeAgent, nUserIsProxyArpEnabled=nUserIsProxyArpEnabled, wlsxUserMIB=wlsxUserMIB, nUserCurrentVlan=nUserCurrentVlan, nUserPhyAddress=nUserPhyAddress, nUserHTMode=nUserHTMode, nUserDeviceType=nUserDeviceType, wlsxNumOfUsersVPN=wlsxNumOfUsersVPN, wlsxNumOfUsersStateful8021x=wlsxNumOfUsersStateful8021x, nUserHomeVlan=nUserHomeVlan, nUserPhyType=nUserPhyType, nUserForwardMode=nUserForwardMode, nUserAuthServerName=nUserAuthServerName, nUserIpAddress=nUserIpAddress)
