#
# PySNMP MIB module OLD-CISCO-NOVELL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OLD-CISCO-NOVELL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:32:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
temporary, = mibBuilder.importSymbols("CISCO-SMI", "temporary")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, TimeTicks, MibIdentifier, Bits, ObjectIdentity, Counter64, Counter32, IpAddress, Gauge32, Integer32, Unsigned32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "TimeTicks", "MibIdentifier", "Bits", "ObjectIdentity", "Counter64", "Counter32", "IpAddress", "Gauge32", "Integer32", "Unsigned32", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class IPXaddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(10, 10)
    fixedLength = 10

tmpnovell = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 3, 4))
novellInput = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellInput.setStatus('mandatory')
if mibBuilder.loadTexts: novellInput.setDescription('Total input count of number of NOVELL packets.')
novellBcastin = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellBcastin.setStatus('mandatory')
if mibBuilder.loadTexts: novellBcastin.setDescription('Total count of number of NOVELL input broadcast packets.')
novellForward = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellForward.setStatus('mandatory')
if mibBuilder.loadTexts: novellForward.setDescription('Total count of number of NOVELL packets forwarded.')
novellBcastout = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellBcastout.setStatus('mandatory')
if mibBuilder.loadTexts: novellBcastout.setDescription('Total count of number of NOVELL output broadcast packets.')
novellFormerr = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellFormerr.setStatus('mandatory')
if mibBuilder.loadTexts: novellFormerr.setDescription('Total count of number of NOVELL input packets with header errors.')
novellChksum = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellChksum.setStatus('mandatory')
if mibBuilder.loadTexts: novellChksum.setDescription('Total count of number of NOVELL input packets with checksum errors.')
novellHopcnt = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellHopcnt.setStatus('mandatory')
if mibBuilder.loadTexts: novellHopcnt.setDescription('Total count of number of NOVELL input packets that have exceeded the maximum hop count.')
novellNoroute = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellNoroute.setStatus('mandatory')
if mibBuilder.loadTexts: novellNoroute.setDescription('Total count of number of NOVELL packets dropped due to no route.')
novellNoencap = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellNoencap.setStatus('mandatory')
if mibBuilder.loadTexts: novellNoencap.setDescription('Total count of number of NOVELL packets dropped due to output encapsulation failure.')
novellOutput = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellOutput.setStatus('mandatory')
if mibBuilder.loadTexts: novellOutput.setDescription('Total count of number of NOVELL output packets.')
novellInmult = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellInmult.setStatus('mandatory')
if mibBuilder.loadTexts: novellInmult.setDescription('Total count of number of NOVELL input multicast packets.')
novellLocal = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellLocal.setStatus('mandatory')
if mibBuilder.loadTexts: novellLocal.setDescription('Total count of NOVELL input packets for this host.')
novellUnknown = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellUnknown.setStatus('mandatory')
if mibBuilder.loadTexts: novellUnknown.setDescription('Total count of number of unknown NOVELL input packets.')
novellSapreqin = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellSapreqin.setStatus('mandatory')
if mibBuilder.loadTexts: novellSapreqin.setDescription('Total count of number of NOVELL SAP request packets received.')
novellSapresin = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellSapresin.setStatus('mandatory')
if mibBuilder.loadTexts: novellSapresin.setDescription('Total count of number of NOVELL SAP response packets received.')
novellSapout = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellSapout.setStatus('mandatory')
if mibBuilder.loadTexts: novellSapout.setDescription('Total count of number of NOVELL SAP request packets sent.')
novellSapreply = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellSapreply.setStatus('mandatory')
if mibBuilder.loadTexts: novellSapreply.setDescription('Total count of number of NOVELL SAP reply packets sent.')
ipxActThresh = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxActThresh.setStatus('mandatory')
if mibBuilder.loadTexts: ipxActThresh.setDescription('Threshold of IPX accounting records in use before IPX traffic will be unaccounted.')
ipxActLostPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxActLostPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ipxActLostPkts.setDescription('Lost IPX packets due to memory limitations.')
ipxActLostByts = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxActLostByts.setStatus('mandatory')
if mibBuilder.loadTexts: ipxActLostByts.setDescription('Total bytes of lost IPX packets.')
lipxAccountingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 3, 4, 21), )
if mibBuilder.loadTexts: lipxAccountingTable.setStatus('mandatory')
if mibBuilder.loadTexts: lipxAccountingTable.setDescription('A list of IPX accounting entries.')
lipxAccountingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 3, 4, 21, 1), ).setIndexNames((0, "OLD-CISCO-NOVELL-MIB", "ipxActSrc"), (0, "OLD-CISCO-NOVELL-MIB", "ipxActDst"))
if mibBuilder.loadTexts: lipxAccountingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lipxAccountingEntry.setDescription('something')
ipxActSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 4, 21, 1, 1), IPXaddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxActSrc.setStatus('mandatory')
if mibBuilder.loadTexts: ipxActSrc.setDescription('IPX Source address for host traffic matrix.')
ipxActDst = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 4, 21, 1, 2), IPXaddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxActDst.setStatus('mandatory')
if mibBuilder.loadTexts: ipxActDst.setDescription('IPX Destination address for host traffic matrix.')
ipxActPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 4, 21, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxActPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ipxActPkts.setDescription('Number of IPX packets sent from source to destination.')
ipxActByts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 4, 21, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxActByts.setStatus('mandatory')
if mibBuilder.loadTexts: ipxActByts.setDescription('Total number of bytes in IPX packets from source to destination.')
ipxActAge = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 22), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxActAge.setStatus('mandatory')
if mibBuilder.loadTexts: ipxActAge.setDescription('The age of the data in the current IPX data matrix.')
lipxCkAccountingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 3, 4, 23), )
if mibBuilder.loadTexts: lipxCkAccountingTable.setStatus('mandatory')
if mibBuilder.loadTexts: lipxCkAccountingTable.setDescription('A list of IPX checkpoint accounting entries.')
lipxCkAccountingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 3, 4, 23, 1), ).setIndexNames((0, "OLD-CISCO-NOVELL-MIB", "ipxCkactSrc"), (0, "OLD-CISCO-NOVELL-MIB", "ipxCkactDst"))
if mibBuilder.loadTexts: lipxCkAccountingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lipxCkAccountingEntry.setDescription('something')
ipxCkactSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 4, 23, 1, 1), IPXaddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCkactSrc.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCkactSrc.setDescription('IPX Source address for host in checkpoint traffic matrix.')
ipxCkactDst = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 4, 23, 1, 2), IPXaddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCkactDst.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCkactDst.setDescription('IPX Destination address for host in checkpoint traffic matrix.')
ipxCkactPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 4, 23, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCkactPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCkactPkts.setDescription('Number of IPX packets sent from source to destination in checkpoint matrix.')
ipxCkactByts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 4, 23, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCkactByts.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCkactByts.setDescription('Total number of bytes in IPX packets from source to destination in checkpoint matrix.')
ipxCkactAge = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 24), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCkactAge.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCkactAge.setDescription('Age of data in the IPX checkpoint matrix.')
ipxActCheckPoint = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxActCheckPoint.setStatus('mandatory')
if mibBuilder.loadTexts: ipxActCheckPoint.setDescription('Check points the IPX accounting database. This mib variable must be read and then set with the same value for the check point to succeed. The value read and then set will be incremented after a successful set request')
mibBuilder.exportSymbols("OLD-CISCO-NOVELL-MIB", novellOutput=novellOutput, novellNoencap=novellNoencap, ipxCkactAge=ipxCkactAge, ipxActSrc=ipxActSrc, novellChksum=novellChksum, novellBcastin=novellBcastin, ipxActAge=ipxActAge, novellInmult=novellInmult, novellHopcnt=novellHopcnt, novellFormerr=novellFormerr, ipxActLostPkts=ipxActLostPkts, ipxActCheckPoint=ipxActCheckPoint, ipxCkactByts=ipxCkactByts, ipxActPkts=ipxActPkts, novellSapreqin=novellSapreqin, novellUnknown=novellUnknown, IPXaddress=IPXaddress, ipxActDst=ipxActDst, ipxActByts=ipxActByts, lipxCkAccountingTable=lipxCkAccountingTable, ipxCkactPkts=ipxCkactPkts, novellSapresin=novellSapresin, novellBcastout=novellBcastout, novellForward=novellForward, novellInput=novellInput, novellSapreply=novellSapreply, lipxAccountingTable=lipxAccountingTable, novellNoroute=novellNoroute, novellSapout=novellSapout, lipxCkAccountingEntry=lipxCkAccountingEntry, ipxActLostByts=ipxActLostByts, lipxAccountingEntry=lipxAccountingEntry, ipxCkactDst=ipxCkactDst, tmpnovell=tmpnovell, ipxActThresh=ipxActThresh, ipxCkactSrc=ipxCkactSrc, novellLocal=novellLocal)
