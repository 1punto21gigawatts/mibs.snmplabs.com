#
# PySNMP MIB module ADSL-LINE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ADSL-LINE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:13:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
AdslLineCodingType, AdslPerfTimeElapsed, AdslPerfPrevDayCount, AdslPerfCurrDayCount = mibBuilder.importSymbols("ADSL-TC-MIB", "AdslLineCodingType", "AdslPerfTimeElapsed", "AdslPerfPrevDayCount", "AdslPerfCurrDayCount")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
PerfIntervalCount, PerfCurrentCount = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfIntervalCount", "PerfCurrentCount")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
transmission, IpAddress, Gauge32, MibIdentifier, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, iso, Counter32, Integer32, ModuleIdentity, TimeTicks, NotificationType, ObjectIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "transmission", "IpAddress", "Gauge32", "MibIdentifier", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "iso", "Counter32", "Integer32", "ModuleIdentity", "TimeTicks", "NotificationType", "ObjectIdentity", "Counter64")
VariablePointer, TruthValue, DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "VariablePointer", "TruthValue", "DisplayString", "TextualConvention", "RowStatus")
adslMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 94))
adslMIB.setRevisions(('1999-08-19 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: adslMIB.setRevisionsDescriptions(('Initial Version, published as RFC 2662',))
if mibBuilder.loadTexts: adslMIB.setLastUpdated('9908190000Z')
if mibBuilder.loadTexts: adslMIB.setOrganization('IETF ADSL MIB Working Group')
if mibBuilder.loadTexts: adslMIB.setContactInfo(' Gregory Bathrick AG Communication Systems A Subsidiary of Lucent Technologies 2500 W Utopia Rd. Phoenix, AZ 85027 USA Tel: +1 602-582-7679 Fax: +1 602-582-7697 E-mail: bathricg@agcs.com Faye Ly Copper Mountain Networks Norcal Office 2470 Embarcadero Way Palo Alto, CA 94303 Tel: +1 650-858-8500 Fax: +1 650-858-8085 E-Mail: faye@coppermountain.com (ADSL Forum input only) John Burgess Predictive Systems, Inc. 25A Vreeland Rd. Florham Park, NJ 07932 USA Tel: +1 973-301-5610 Fax: +1 973-301-5699 E-mail: jtburgess@predictive.com IETF ADSL MIB Working Group (adsl@xlist.agcs.com) ')
if mibBuilder.loadTexts: adslMIB.setDescription('The MIB module defining objects for the management of a pair of ADSL modems at each end of the ADSL line. Each such line has an entry in an ifTable which may include multiple modem lines. An agent may reside at either end of the ADSL line however the MIB is designed to require no management communication between them beyond that inherent in the low-level ADSL line protocol. The agent may monitor and control this protocol for its needs. ADSL lines may support optional Fast or Interleaved channels. If these are supported, additional entries corresponding to the supported channels must be created in the ifTable. Thus an ADSL line that supports both channels will have three entries in the ifTable, one for each physical, fast, and interleaved, whose ifType values are equal to adsl(94), fast(125), and interleaved(124), respectively. The ifStackTable is used to represent the relationship between the entries. Naming Conventions: Atuc -- (ATUC) modem at near (Central) end of line Atur -- (ATUR) modem at Remote end of line Curr -- Current Prev -- Previous Atn -- Attenuation ES -- Errored Second. LCS -- Line Code Specific Lof -- Loss of Frame Lol -- Loss of Link Los -- Loss of Signal Lpr -- Loss of Power xxxs-- interval of Seconds in which xxx occurs (e.g., xxx=Lof, Los, Lpr) Max -- Maximum Mgn -- Margin Min -- Minimum Psd -- Power Spectral Density Snr -- Signal to Noise Ratio Tx -- Transmit Blks-- Blocks, a data unit, see adslAtuXChanCrcBlockLength ')
adslLineMib = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 94, 1))
adslMibObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 94, 1, 1))
adslLineTable = MibTable((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 1), )
if mibBuilder.loadTexts: adslLineTable.setStatus('current')
if mibBuilder.loadTexts: adslLineTable.setDescription('This table includes common attributes describing both ends of the line. It is required for all ADSL physical interfaces. ADSL physical interfaces are those ifEntries where ifType is equal to adsl(94).')
adslLineEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: adslLineEntry.setStatus('current')
if mibBuilder.loadTexts: adslLineEntry.setDescription('An entry in adslLineTable.')
adslLineCoding = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 1, 1, 1), AdslLineCodingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslLineCoding.setStatus('current')
if mibBuilder.loadTexts: adslLineCoding.setDescription('Specifies the ADSL coding type used on this line.')
adslLineType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noChannel", 1), ("fastOnly", 2), ("interleavedOnly", 3), ("fastOrInterleaved", 4), ("fastAndInterleaved", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslLineType.setStatus('current')
if mibBuilder.loadTexts: adslLineType.setDescription('Defines the type of ADSL physical line entity that exists, by defining whether and how the line is channelized. If the line is channelized, the value will be other than noChannel(1). This object defines which channel type(s) are supported. In the case that the line is channelized, the manager can use the ifStackTable to determine the ifIndex for the associated channel(s).')
adslLineSpecific = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 1, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslLineSpecific.setStatus('current')
if mibBuilder.loadTexts: adslLineSpecific.setDescription('OID instance in vendor-specific MIB. The Instance may be used to determine shelf/slot/port of the ATUC interface in a DSLAM.')
adslLineConfProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfProfile.setStatus('current')
if mibBuilder.loadTexts: adslLineConfProfile.setDescription("The value of this object identifies the row in the ADSL Line Configuration Profile Table, (adslLineConfProfileTable), which applies for this ADSL line, and channels if applicable. For `dynamic' mode, in the case which the configuration profile has not been set, the value will be set to `DEFVAL'. If the implementator of this MIB has chosen not to implement `dynamic assignment' of profiles, this object's MIN-ACCESS is read-only.")
adslLineAlarmConfProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineAlarmConfProfile.setStatus('current')
if mibBuilder.loadTexts: adslLineAlarmConfProfile.setDescription("The value of this object identifies the row in the ADSL Line Alarm Configuration Profile Table, (adslLineAlarmConfProfileTable), which applies to this ADSL line, and channels if applicable. For `dynamic' mode, in the case which the alarm profile has not been set, the value will be set to `DEFVAL'. If the implementator of this MIB has chosen not to implement `dynamic assignment' of profiles, this object's MIN-ACCESS is read-only.")
adslAtucPhysTable = MibTable((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 2), )
if mibBuilder.loadTexts: adslAtucPhysTable.setStatus('current')
if mibBuilder.loadTexts: adslAtucPhysTable.setDescription('This table provides one row for each ATUC. Each row contains the Physical Layer Parameters table for that ATUC. ADSL physical interfaces are those ifEntries where ifType is equal to adsl(94).')
adslAtucPhysEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: adslAtucPhysEntry.setStatus('current')
if mibBuilder.loadTexts: adslAtucPhysEntry.setDescription('An entry in the adslAtucPhysTable.')
adslAtucInvSerialNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucInvSerialNumber.setStatus('current')
if mibBuilder.loadTexts: adslAtucInvSerialNumber.setDescription('The vendor specific string that identifies the vendor equipment.')
adslAtucInvVendorID = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucInvVendorID.setReference('ANSI T1.413[10]')
if mibBuilder.loadTexts: adslAtucInvVendorID.setStatus('current')
if mibBuilder.loadTexts: adslAtucInvVendorID.setDescription('The vendor ID code is a copy of the binary vendor identification field defined by the PHY[10] and expressed as readable characters.')
adslAtucInvVersionNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucInvVersionNumber.setReference('ANSI T1.413[10]')
if mibBuilder.loadTexts: adslAtucInvVersionNumber.setStatus('current')
if mibBuilder.loadTexts: adslAtucInvVersionNumber.setDescription('The vendor specific version number sent by this ATU as part of the initialization messages. It is a copy of the binary version number field defined by the PHY[10] and expressed as readable characters.')
adslAtucCurrSnrMgn = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-640, 640))).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucCurrSnrMgn.setStatus('current')
if mibBuilder.loadTexts: adslAtucCurrSnrMgn.setDescription('Noise Margin as seen by this ATU with respect to its received signal in tenth dB.')
adslAtucCurrAtn = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 2, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 630))).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucCurrAtn.setStatus('current')
if mibBuilder.loadTexts: adslAtucCurrAtn.setDescription('Measured difference in the total power transmitted by the peer ATU and the total power received by this ATU.')
adslAtucCurrStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 2, 1, 6), Bits().clone(namedValues=NamedValues(("noDefect", 0), ("lossOfFraming", 1), ("lossOfSignal", 2), ("lossOfPower", 3), ("lossOfSignalQuality", 4), ("lossOfLink", 5), ("dataInitFailure", 6), ("configInitFailure", 7), ("protocolInitFailure", 8), ("noPeerAtuPresent", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucCurrStatus.setStatus('current')
if mibBuilder.loadTexts: adslAtucCurrStatus.setDescription('Indicates current state of the ATUC line. This is a bit-map of possible conditions. The various bit positions are: 0 noDefect There no defects on the line 1 lossOfFraming ATUC failure due to not receiving valid frame. 2 lossOfSignal ATUC failure due to not receiving signal. 3 lossOfPower ATUC failure due to loss of power. Note: the Agent may still function. 4 lossOfSignalQuality Loss of Signal Quality is declared when the Noise Margin falls below the Minimum Noise Margin, or the bit-error-rate exceeds 10^-7. 5 lossOfLink ATUC failure due to inability to link with ATUR. 6 dataInitFailure ATUC failure during initialization due to bit errors corrupting startup exchange data. 7 configInitFailure ATUC failure during initialization due to peer ATU not able to support requested configuration 8 protocolInitFailure ATUC failure during initialization due to incompatible protocol used by the peer ATU. 9 noPeerAtuPresent ATUC failure during initialization due to no activation sequence detected from peer ATU. This is intended to supplement ifOperStatus.')
adslAtucCurrOutputPwr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-310, 310))).setUnits('tenth dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucCurrOutputPwr.setStatus('current')
if mibBuilder.loadTexts: adslAtucCurrOutputPwr.setDescription('Measured total output power transmitted by this ATU. This is the measurement that was reported during the last activation sequence.')
adslAtucCurrAttainableRate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 2, 1, 8), Gauge32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucCurrAttainableRate.setStatus('current')
if mibBuilder.loadTexts: adslAtucCurrAttainableRate.setDescription('Indicates the maximum currently attainable data rate by the ATU. This value will be equal or greater than the current line rate.')
adslAturPhysTable = MibTable((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 3), )
if mibBuilder.loadTexts: adslAturPhysTable.setStatus('current')
if mibBuilder.loadTexts: adslAturPhysTable.setDescription('This table provides one row for each ATUR Each row contains the Physical Layer Parameters table for that ATUR. ADSL physical interfaces are those ifEntries where ifType is equal to adsl(94).')
adslAturPhysEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: adslAturPhysEntry.setStatus('current')
if mibBuilder.loadTexts: adslAturPhysEntry.setDescription('An entry in the adslAturPhysTable.')
adslAturInvSerialNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 3, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturInvSerialNumber.setStatus('current')
if mibBuilder.loadTexts: adslAturInvSerialNumber.setDescription('The vendor specific string that identifies the vendor equipment.')
adslAturInvVendorID = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturInvVendorID.setReference('ANSI T1.413')
if mibBuilder.loadTexts: adslAturInvVendorID.setStatus('current')
if mibBuilder.loadTexts: adslAturInvVendorID.setDescription('The vendor ID code is a copy of the binary vendor identification field defined by the PHY[10] and expressed as readable characters.')
adslAturInvVersionNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 3, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturInvVersionNumber.setReference('ANSI T1.413')
if mibBuilder.loadTexts: adslAturInvVersionNumber.setStatus('current')
if mibBuilder.loadTexts: adslAturInvVersionNumber.setDescription('The vendor specific version number sent by this ATU as part of the initialization messages. It is a copy of the binary version number field defined by the PHY[10] and expressed as readable characters.')
adslAturCurrSnrMgn = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-640, 640))).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturCurrSnrMgn.setStatus('current')
if mibBuilder.loadTexts: adslAturCurrSnrMgn.setDescription('Noise Margin as seen by this ATU with respect to its received signal in tenth dB.')
adslAturCurrAtn = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 3, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 630))).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturCurrAtn.setStatus('current')
if mibBuilder.loadTexts: adslAturCurrAtn.setDescription('Measured difference in the total power transmitted by the peer ATU and the total power received by this ATU.')
adslAturCurrStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 3, 1, 6), Bits().clone(namedValues=NamedValues(("noDefect", 0), ("lossOfFraming", 1), ("lossOfSignal", 2), ("lossOfPower", 3), ("lossOfSignalQuality", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturCurrStatus.setStatus('current')
if mibBuilder.loadTexts: adslAturCurrStatus.setDescription('Indicates current state of the ATUR line. This is a bit-map of possible conditions. Due to the isolation of the ATUR when line problems occur, many state conditions like loss of power, loss of quality signal, and initialization errors, can not be determined. While trouble shooting ATUR, also use object, adslAtucCurrStatus. The various bit positions are: 0 noDefect There no defects on the line 1 lossOfFraming ATUR failure due to not receiving valid frame 2 lossOfSignal ATUR failure due to not receiving signal 3 lossOfPower ATUR failure due to loss of power 4 lossOfSignalQuality Loss of Signal Quality is declared when the Noise Margin falls below the Minimum Noise Margin, or the bit-error-rate exceeds 10^-7. This is intended to supplement ifOperStatus.')
adslAturCurrOutputPwr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-310, 310))).setUnits('tenth dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturCurrOutputPwr.setStatus('current')
if mibBuilder.loadTexts: adslAturCurrOutputPwr.setDescription('Measured total output power transmitted by this ATU. This is the measurement that was reported during the last activation sequence.')
adslAturCurrAttainableRate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 3, 1, 8), Gauge32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturCurrAttainableRate.setStatus('current')
if mibBuilder.loadTexts: adslAturCurrAttainableRate.setDescription('Indicates the maximum currently attainable data rate by the ATU. This value will be equal or greater than the current line rate.')
adslAtucChanTable = MibTable((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 4), )
if mibBuilder.loadTexts: adslAtucChanTable.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanTable.setDescription('This table provides one row for each ATUC channel. ADSL channel interfaces are those ifEntries where ifType is equal to adslInterleave(124) or adslFast(125).')
adslAtucChanEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: adslAtucChanEntry.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanEntry.setDescription('An entry in the adslAtucChanTable.')
adslAtucChanInterleaveDelay = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 4, 1, 1), Gauge32()).setUnits('milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucChanInterleaveDelay.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanInterleaveDelay.setDescription('Interleave Delay for this channel. Interleave delay applies only to the interleave channel and defines the mapping (relative spacing) between subsequent input bytes at the interleaver input and their placement in the bit stream at the interleaver output. Larger numbers provide greater separation between consecutive input bytes in the output bit stream allowing for improved impulse noise immunity at the expense of payload latency. In the case where the ifType is Fast(125), use noSuchObject.')
adslAtucChanCurrTxRate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 4, 1, 2), Gauge32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucChanCurrTxRate.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanCurrTxRate.setDescription('Actual transmit rate on this channel.')
adslAtucChanPrevTxRate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 4, 1, 3), Gauge32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucChanPrevTxRate.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanPrevTxRate.setDescription('The rate at the time of the last adslAtucRateChangeTrap event. It is also set at initialization to prevent a trap being sent. Rate changes less than adslAtucThresh(*)RateDown or less than adslAtucThresh(*)RateUp will not cause a trap or cause this object to change. (*) == Fast or Interleave. See AdslLineAlarmConfProfileEntry.')
adslAtucChanCrcBlockLength = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 4, 1, 4), Gauge32()).setUnits('byte').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucChanCrcBlockLength.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanCrcBlockLength.setDescription('Indicates the length of the channel data-block on which the CRC operates. Refer to Line Code Specific MIBs, [11] and [12] for more information.')
adslAturChanTable = MibTable((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 5), )
if mibBuilder.loadTexts: adslAturChanTable.setStatus('current')
if mibBuilder.loadTexts: adslAturChanTable.setDescription('This table provides one row for each ATUR channel. ADSL channel interfaces are those ifEntries where ifType is equal to adslInterleave(124) or adslFast(125).')
adslAturChanEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: adslAturChanEntry.setStatus('current')
if mibBuilder.loadTexts: adslAturChanEntry.setDescription('An entry in the adslAturChanTable.')
adslAturChanInterleaveDelay = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 5, 1, 1), Gauge32()).setUnits('milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturChanInterleaveDelay.setStatus('current')
if mibBuilder.loadTexts: adslAturChanInterleaveDelay.setDescription('Interleave Delay for this channel. Interleave delay applies only to the interleave channel and defines the mapping (relative spacing) between subsequent input bytes at the interleaver input and their placement in the bit stream at the interleaver output. Larger numbers provide greater separation between consecutive input bytes in the output bit stream allowing for improved impulse noise immunity at the expense of payload latency. In the case where the ifType is Fast(125), use noSuchObject.')
adslAturChanCurrTxRate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 5, 1, 2), Gauge32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturChanCurrTxRate.setStatus('current')
if mibBuilder.loadTexts: adslAturChanCurrTxRate.setDescription('Actual transmit rate on this channel.')
adslAturChanPrevTxRate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 5, 1, 3), Gauge32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturChanPrevTxRate.setStatus('current')
if mibBuilder.loadTexts: adslAturChanPrevTxRate.setDescription('The rate at the time of the last adslAturRateChangeTrap event. It is also set at initialization to prevent a trap being sent. Rate changes less than adslAturThresh(*)RateDown or less than adslAturThresh(*)RateUp will not cause a trap or cause this object to change. (*) == Fast or Interleave. See AdslLineAlarmConfProfileEntry.')
adslAturChanCrcBlockLength = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 5, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturChanCrcBlockLength.setStatus('current')
if mibBuilder.loadTexts: adslAturChanCrcBlockLength.setDescription('Indicates the length of the channel data-block on which the CRC operates. Refer to Line Code Specific MIBs, [11] and [12] for more information.')
adslAtucPerfDataTable = MibTable((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 6), )
if mibBuilder.loadTexts: adslAtucPerfDataTable.setStatus('current')
if mibBuilder.loadTexts: adslAtucPerfDataTable.setDescription('This table provides one row for each ATUC. ADSL physical interfaces are those ifEntries where ifType is equal to adsl(94).')
adslAtucPerfDataEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: adslAtucPerfDataEntry.setStatus('current')
if mibBuilder.loadTexts: adslAtucPerfDataEntry.setDescription('An entry in adslAtucPerfDataTable.')
adslAtucPerfLofs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucPerfLofs.setStatus('current')
if mibBuilder.loadTexts: adslAtucPerfLofs.setDescription('Count of the number of Loss of Framing failures since agent reset.')
adslAtucPerfLoss = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucPerfLoss.setStatus('current')
if mibBuilder.loadTexts: adslAtucPerfLoss.setDescription('Count of the number of Loss of Signal failures since agent reset.')
adslAtucPerfLols = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucPerfLols.setStatus('current')
if mibBuilder.loadTexts: adslAtucPerfLols.setDescription('Count of the number of Loss of Link failures since agent reset.')
adslAtucPerfLprs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucPerfLprs.setStatus('current')
if mibBuilder.loadTexts: adslAtucPerfLprs.setDescription('Count of the number of Loss of Power failures since agent reset.')
adslAtucPerfESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucPerfESs.setStatus('current')
if mibBuilder.loadTexts: adslAtucPerfESs.setDescription('Count of the number of Errored Seconds since agent reset. The errored second parameter is a count of one-second intervals containing one or more crc anomalies, or one or more los or sef defects.')
adslAtucPerfInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucPerfInits.setStatus('current')
if mibBuilder.loadTexts: adslAtucPerfInits.setDescription('Count of the line initialization attempts since agent reset. Includes both successful and failed attempts.')
adslAtucPerfValidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucPerfValidIntervals.setStatus('current')
if mibBuilder.loadTexts: adslAtucPerfValidIntervals.setDescription('The number of previous 15-minute intervals in the interval table for which data was collected. Given that <n> is the maximum # of intervals supported. The value will be <n> unless the measurement was (re-)started within the last (<n>*15) minutes, in which case the value will be the number of complete 15 minute intervals for which the agent has at least some data. In certain cases (e.g., in the case where the agent is a proxy) it is possible that some intervals are unavailable. In this case, this interval is the maximum interval number for which data is available.')
adslAtucPerfInvalidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucPerfInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: adslAtucPerfInvalidIntervals.setDescription('The number of intervals in the range from 0 to the value of adslAtucPerfValidIntervals for which no data is available. This object will typically be zero except in cases where the data for some intervals are not available (e.g., in proxy situations).')
adslAtucPerfCurr15MinTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 6, 1, 9), AdslPerfTimeElapsed().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucPerfCurr15MinTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: adslAtucPerfCurr15MinTimeElapsed.setDescription('Total elapsed seconds in this interval.')
adslAtucPerfCurr15MinLofs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 6, 1, 10), PerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucPerfCurr15MinLofs.setStatus('current')
if mibBuilder.loadTexts: adslAtucPerfCurr15MinLofs.setDescription('Count of seconds in the current 15 minute interval when there was Loss of Framing.')
adslAtucPerfCurr15MinLoss = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 6, 1, 11), PerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucPerfCurr15MinLoss.setStatus('current')
if mibBuilder.loadTexts: adslAtucPerfCurr15MinLoss.setDescription('Count of seconds in the current 15 minute interval when there was Loss of Signal.')
adslAtucPerfCurr15MinLols = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 6, 1, 12), PerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucPerfCurr15MinLols.setStatus('current')
if mibBuilder.loadTexts: adslAtucPerfCurr15MinLols.setDescription('Count of seconds in the current 15 minute interval when there was Loss of Link.')
adslAtucPerfCurr15MinLprs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 6, 1, 13), PerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucPerfCurr15MinLprs.setStatus('current')
if mibBuilder.loadTexts: adslAtucPerfCurr15MinLprs.setDescription('Count of seconds in the current 15 minute interval when there was Loss of Power.')
adslAtucPerfCurr15MinESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 6, 1, 14), PerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucPerfCurr15MinESs.setStatus('current')
if mibBuilder.loadTexts: adslAtucPerfCurr15MinESs.setDescription('Count of Errored Seconds in the current 15 minute interval. The errored second parameter is a count of one-second intervals containing one or more crc anomalies, or one or more los or sef defects.')
adslAtucPerfCurr15MinInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 6, 1, 15), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucPerfCurr15MinInits.setStatus('current')
if mibBuilder.loadTexts: adslAtucPerfCurr15MinInits.setDescription('Count of the line initialization attempts in the current 15 minute interval. Includes both successful and failed attempts.')
adslAtucPerfCurr1DayTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 6, 1, 16), AdslPerfTimeElapsed().subtype(subtypeSpec=ValueRangeConstraint(0, 86399))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucPerfCurr1DayTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: adslAtucPerfCurr1DayTimeElapsed.setDescription('Number of seconds that have elapsed since the beginning of the current 1-day interval.')
adslAtucPerfCurr1DayLofs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 6, 1, 17), AdslPerfCurrDayCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucPerfCurr1DayLofs.setStatus('current')
if mibBuilder.loadTexts: adslAtucPerfCurr1DayLofs.setDescription('Count of the number of seconds when there was Loss of Framing during the current day as measured by adslAtucPerfCurr1DayTimeElapsed.')
adslAtucPerfCurr1DayLoss = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 6, 1, 18), AdslPerfCurrDayCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucPerfCurr1DayLoss.setStatus('current')
if mibBuilder.loadTexts: adslAtucPerfCurr1DayLoss.setDescription('Count of the number of seconds when there was Loss of Signal during the current day as measured by adslAtucPerfCurr1DayTimeElapsed.')
adslAtucPerfCurr1DayLols = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 6, 1, 19), AdslPerfCurrDayCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucPerfCurr1DayLols.setStatus('current')
if mibBuilder.loadTexts: adslAtucPerfCurr1DayLols.setDescription('Count of the number of seconds when there was Loss of Link during the current day as measured by adslAtucPerfCurr1DayTimeElapsed.')
adslAtucPerfCurr1DayLprs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 6, 1, 20), AdslPerfCurrDayCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucPerfCurr1DayLprs.setStatus('current')
if mibBuilder.loadTexts: adslAtucPerfCurr1DayLprs.setDescription('Count of the number of seconds when there was Loss of Power during the current day as measured by adslAtucPerfCurr1DayTimeElapsed.')
adslAtucPerfCurr1DayESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 6, 1, 21), AdslPerfCurrDayCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucPerfCurr1DayESs.setStatus('current')
if mibBuilder.loadTexts: adslAtucPerfCurr1DayESs.setDescription('Count of Errored Seconds during the current day as measured by adslAtucPerfCurr1DayTimeElapsed. The errored second parameter is a count of one-second intervals containing one or more crc anomalies, or one or more los or sef defects.')
adslAtucPerfCurr1DayInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 6, 1, 22), AdslPerfCurrDayCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucPerfCurr1DayInits.setStatus('current')
if mibBuilder.loadTexts: adslAtucPerfCurr1DayInits.setDescription('Count of the line initialization attempts in the day as measured by adslAtucPerfCurr1DayTimeElapsed. Includes both successful and failed attempts.')
adslAtucPerfPrev1DayMoniSecs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 6, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucPerfPrev1DayMoniSecs.setStatus('current')
if mibBuilder.loadTexts: adslAtucPerfPrev1DayMoniSecs.setDescription('The amount of time in the previous 1-day interval over which the performance monitoring information is actually counted. This value will be the same as the interval duration except in a situation where performance monitoring data could not be collected for any reason.')
adslAtucPerfPrev1DayLofs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 6, 1, 24), AdslPerfPrevDayCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucPerfPrev1DayLofs.setStatus('current')
if mibBuilder.loadTexts: adslAtucPerfPrev1DayLofs.setDescription('Count of seconds in the interval when there was Loss of Framing within the most recent previous 1-day period.')
adslAtucPerfPrev1DayLoss = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 6, 1, 25), AdslPerfPrevDayCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucPerfPrev1DayLoss.setStatus('current')
if mibBuilder.loadTexts: adslAtucPerfPrev1DayLoss.setDescription('Count of seconds in the interval when there was Loss of Signal within the most recent previous 1-day period.')
adslAtucPerfPrev1DayLols = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 6, 1, 26), AdslPerfPrevDayCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucPerfPrev1DayLols.setStatus('current')
if mibBuilder.loadTexts: adslAtucPerfPrev1DayLols.setDescription('Count of seconds in the interval when there was Loss of Link within the most recent previous 1-day period.')
adslAtucPerfPrev1DayLprs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 6, 1, 27), AdslPerfPrevDayCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucPerfPrev1DayLprs.setStatus('current')
if mibBuilder.loadTexts: adslAtucPerfPrev1DayLprs.setDescription('Count of seconds in the interval when there was Loss of Power within the most recent previous 1-day period.')
adslAtucPerfPrev1DayESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 6, 1, 28), AdslPerfPrevDayCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucPerfPrev1DayESs.setStatus('current')
if mibBuilder.loadTexts: adslAtucPerfPrev1DayESs.setDescription('Count of Errored Seconds within the most recent previous 1-day period. The errored second parameter is a count of one-second intervals containing one or more crc anomalies, or one or more los or sef defects.')
adslAtucPerfPrev1DayInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 6, 1, 29), AdslPerfPrevDayCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucPerfPrev1DayInits.setStatus('current')
if mibBuilder.loadTexts: adslAtucPerfPrev1DayInits.setDescription('Count of the line initialization attempts in the most recent previous 1-day period. Includes both successful and failed attempts.')
adslAturPerfDataTable = MibTable((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 7), )
if mibBuilder.loadTexts: adslAturPerfDataTable.setStatus('current')
if mibBuilder.loadTexts: adslAturPerfDataTable.setDescription('This table provides one row for each ATUR. ADSL physical interfaces are those ifEntries where ifType is equal to adsl(94).')
adslAturPerfDataEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: adslAturPerfDataEntry.setStatus('current')
if mibBuilder.loadTexts: adslAturPerfDataEntry.setDescription('An entry in adslAturPerfDataTable.')
adslAturPerfLofs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 7, 1, 1), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturPerfLofs.setStatus('current')
if mibBuilder.loadTexts: adslAturPerfLofs.setDescription('Count of the number of Loss of Framing failures since agent reset.')
adslAturPerfLoss = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 7, 1, 2), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturPerfLoss.setStatus('current')
if mibBuilder.loadTexts: adslAturPerfLoss.setDescription('Count of the number of Loss of Signal failures since agent reset.')
adslAturPerfLprs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 7, 1, 3), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturPerfLprs.setStatus('current')
if mibBuilder.loadTexts: adslAturPerfLprs.setDescription('Count of the number of Loss of Power failures since agent reset.')
adslAturPerfESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 7, 1, 4), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturPerfESs.setStatus('current')
if mibBuilder.loadTexts: adslAturPerfESs.setDescription('Count of the number of Errored Seconds since agent reset. The errored second parameter is a count of one-second intervals containing one or more crc anomalies, or one or more los or sef defects.')
adslAturPerfValidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturPerfValidIntervals.setStatus('current')
if mibBuilder.loadTexts: adslAturPerfValidIntervals.setDescription('The number of previous 15-minute intervals in the interval table for which data was collected. Given that <n> is the maximum # of intervals supported. The value will be <n> unless the measurement was (re-)started within the last (<n>*15) minutes, in which case the value will be the number of complete 15 minute intervals for which the agent has at least some data. In certain cases (e.g., in the case where the agent is a proxy) it is possible that some intervals are unavailable. In this case, this interval is the maximum interval number for which data is available.')
adslAturPerfInvalidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturPerfInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: adslAturPerfInvalidIntervals.setDescription('The number of intervals in the range from 0 to the value of adslAturPerfValidIntervals for which no data is available. This object will typically be zero except in cases where the data for some intervals are not available (e.g., in proxy situations).')
adslAturPerfCurr15MinTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 7, 1, 7), AdslPerfTimeElapsed().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturPerfCurr15MinTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: adslAturPerfCurr15MinTimeElapsed.setDescription('Total elapsed seconds in this interval.')
adslAturPerfCurr15MinLofs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 7, 1, 8), PerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturPerfCurr15MinLofs.setStatus('current')
if mibBuilder.loadTexts: adslAturPerfCurr15MinLofs.setDescription('Count of seconds in the current 15 minute interval when there was Loss of Framing.')
adslAturPerfCurr15MinLoss = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 7, 1, 9), PerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturPerfCurr15MinLoss.setStatus('current')
if mibBuilder.loadTexts: adslAturPerfCurr15MinLoss.setDescription('Count of seconds in the current 15 minute interval when there was Loss of Signal.')
adslAturPerfCurr15MinLprs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 7, 1, 10), PerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturPerfCurr15MinLprs.setStatus('current')
if mibBuilder.loadTexts: adslAturPerfCurr15MinLprs.setDescription('Count of seconds in the current 15 minute interval when there was Loss of Power.')
adslAturPerfCurr15MinESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 7, 1, 11), PerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturPerfCurr15MinESs.setStatus('current')
if mibBuilder.loadTexts: adslAturPerfCurr15MinESs.setDescription('Count of Errored Seconds in the current 15 minute interval. The errored second parameter is a count of one-second intervals containing one or more crc anomalies, or one or more los or sef defects.')
adslAturPerfCurr1DayTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 7, 1, 12), AdslPerfTimeElapsed().subtype(subtypeSpec=ValueRangeConstraint(0, 86399))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturPerfCurr1DayTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: adslAturPerfCurr1DayTimeElapsed.setDescription('Number of seconds that have elapsed since the beginning of the current 1-day interval.')
adslAturPerfCurr1DayLofs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 7, 1, 13), AdslPerfCurrDayCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturPerfCurr1DayLofs.setStatus('current')
if mibBuilder.loadTexts: adslAturPerfCurr1DayLofs.setDescription('Count of the number of seconds when there was Loss of Framing during the current day as measured by adslAturPerfCurr1DayTimeElapsed.')
adslAturPerfCurr1DayLoss = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 7, 1, 14), AdslPerfCurrDayCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturPerfCurr1DayLoss.setStatus('current')
if mibBuilder.loadTexts: adslAturPerfCurr1DayLoss.setDescription('Count of the number of seconds when there was Loss of Signal during the current day as measured by adslAturPerfCurr1DayTimeElapsed.')
adslAturPerfCurr1DayLprs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 7, 1, 15), AdslPerfCurrDayCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturPerfCurr1DayLprs.setStatus('current')
if mibBuilder.loadTexts: adslAturPerfCurr1DayLprs.setDescription('Count of the number of seconds when there was Loss of Power during the current day as measured by adslAturPerfCurr1DayTimeElapsed.')
adslAturPerfCurr1DayESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 7, 1, 16), AdslPerfCurrDayCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturPerfCurr1DayESs.setStatus('current')
if mibBuilder.loadTexts: adslAturPerfCurr1DayESs.setDescription('Count of Errored Seconds during the current day as measured by adslAturPerfCurr1DayTimeElapsed. The errored second parameter is a count of one-second intervals containing one or more crc anomalies, or one or more los or sef defects.')
adslAturPerfPrev1DayMoniSecs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 7, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturPerfPrev1DayMoniSecs.setStatus('current')
if mibBuilder.loadTexts: adslAturPerfPrev1DayMoniSecs.setDescription('The amount of time in the previous 1-day interval over which the performance monitoring information is actually counted. This value will be the same as the interval duration except in a situation where performance monitoring data could not be collected for any reason.')
adslAturPerfPrev1DayLofs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 7, 1, 18), AdslPerfPrevDayCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturPerfPrev1DayLofs.setStatus('current')
if mibBuilder.loadTexts: adslAturPerfPrev1DayLofs.setDescription('Count of seconds in the interval when there was Loss of Framing within the most recent previous 1-day period.')
adslAturPerfPrev1DayLoss = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 7, 1, 19), AdslPerfPrevDayCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturPerfPrev1DayLoss.setStatus('current')
if mibBuilder.loadTexts: adslAturPerfPrev1DayLoss.setDescription('Count of seconds in the interval when there was Loss of Signal within the most recent previous 1-day period.')
adslAturPerfPrev1DayLprs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 7, 1, 20), AdslPerfPrevDayCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturPerfPrev1DayLprs.setStatus('current')
if mibBuilder.loadTexts: adslAturPerfPrev1DayLprs.setDescription('Count of seconds in the interval when there was Loss of Power within the most recent previous 1-day period.')
adslAturPerfPrev1DayESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 7, 1, 21), AdslPerfPrevDayCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturPerfPrev1DayESs.setStatus('current')
if mibBuilder.loadTexts: adslAturPerfPrev1DayESs.setDescription('Count of Errored Seconds within the most recent previous 1-day period. The errored second parameter is a count of one-second intervals containing one or more crc anomalies, or one or more los or sef defects.')
adslAtucIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 8), )
if mibBuilder.loadTexts: adslAtucIntervalTable.setStatus('current')
if mibBuilder.loadTexts: adslAtucIntervalTable.setDescription('This table provides one row for each ATUC performance data collection interval. ADSL physical interfaces are those ifEntries where ifType is equal to adsl(94).')
adslAtucIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ADSL-LINE-MIB", "adslAtucIntervalNumber"))
if mibBuilder.loadTexts: adslAtucIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: adslAtucIntervalEntry.setDescription('An entry in the adslAtucIntervalTable.')
adslAtucIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: adslAtucIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: adslAtucIntervalNumber.setDescription('Performance Data Interval number 1 is the the most recent previous interval; interval 96 is 24 hours ago. Intervals 2..96 are optional.')
adslAtucIntervalLofs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 8, 1, 2), PerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucIntervalLofs.setStatus('current')
if mibBuilder.loadTexts: adslAtucIntervalLofs.setDescription('Count of seconds in the interval when there was Loss of Framing.')
adslAtucIntervalLoss = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 8, 1, 3), PerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucIntervalLoss.setStatus('current')
if mibBuilder.loadTexts: adslAtucIntervalLoss.setDescription('Count of seconds in the interval when there was Loss of Signal.')
adslAtucIntervalLols = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 8, 1, 4), PerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucIntervalLols.setStatus('current')
if mibBuilder.loadTexts: adslAtucIntervalLols.setDescription('Count of seconds in the interval when there was Loss of Link.')
adslAtucIntervalLprs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 8, 1, 5), PerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucIntervalLprs.setStatus('current')
if mibBuilder.loadTexts: adslAtucIntervalLprs.setDescription('Count of seconds in the interval when there was Loss of Power.')
adslAtucIntervalESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 8, 1, 6), PerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucIntervalESs.setStatus('current')
if mibBuilder.loadTexts: adslAtucIntervalESs.setDescription('Count of Errored Seconds in the interval. The errored second parameter is a count of one-second intervals containing one or more crc anomalies, or one or more los or sef defects.')
adslAtucIntervalInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 8, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucIntervalInits.setStatus('current')
if mibBuilder.loadTexts: adslAtucIntervalInits.setDescription('Count of the line initialization attempts during the interval. Includes both successful and failed attempts.')
adslAtucIntervalValidData = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 8, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucIntervalValidData.setStatus('current')
if mibBuilder.loadTexts: adslAtucIntervalValidData.setDescription('This variable indicates if the data for this interval is valid.')
adslAturIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 9), )
if mibBuilder.loadTexts: adslAturIntervalTable.setStatus('current')
if mibBuilder.loadTexts: adslAturIntervalTable.setDescription('This table provides one row for each ATUR performance data collection interval. ADSL physical interfaces are those ifEntries where ifType is equal to adsl(94).')
adslAturIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ADSL-LINE-MIB", "adslAturIntervalNumber"))
if mibBuilder.loadTexts: adslAturIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: adslAturIntervalEntry.setDescription('An entry in the adslAturIntervalTable.')
adslAturIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: adslAturIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: adslAturIntervalNumber.setDescription('Performance Data Interval number 1 is the the most recent previous interval; interval 96 is 24 hours ago. Intervals 2..96 are optional.')
adslAturIntervalLofs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 9, 1, 2), PerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturIntervalLofs.setStatus('current')
if mibBuilder.loadTexts: adslAturIntervalLofs.setDescription('Count of seconds in the interval when there was Loss of Framing.')
adslAturIntervalLoss = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 9, 1, 3), PerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturIntervalLoss.setStatus('current')
if mibBuilder.loadTexts: adslAturIntervalLoss.setDescription('Count of seconds in the interval when there was Loss of Signal.')
adslAturIntervalLprs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 9, 1, 4), PerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturIntervalLprs.setStatus('current')
if mibBuilder.loadTexts: adslAturIntervalLprs.setDescription('Count of seconds in the interval when there was Loss of Power.')
adslAturIntervalESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 9, 1, 5), PerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturIntervalESs.setStatus('current')
if mibBuilder.loadTexts: adslAturIntervalESs.setDescription('Count of Errored Seconds in the interval. The errored second parameter is a count of one-second intervals containing one or more crc anomalies, or one or more los or sef defects.')
adslAturIntervalValidData = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 9, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturIntervalValidData.setStatus('current')
if mibBuilder.loadTexts: adslAturIntervalValidData.setDescription('This variable indicates if the data for this interval is valid.')
adslAtucChanPerfDataTable = MibTable((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 10), )
if mibBuilder.loadTexts: adslAtucChanPerfDataTable.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanPerfDataTable.setDescription('This table provides one row for each ATUC channel. ADSL channel interfaces are those ifEntries where ifType is equal to adslInterleave(124) or adslFast(125).')
adslAtucChanPerfDataEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: adslAtucChanPerfDataEntry.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanPerfDataEntry.setDescription('An entry in adslAtucChanPerfDataTable.')
adslAtucChanReceivedBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucChanReceivedBlks.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanReceivedBlks.setDescription('Count of all encoded blocks received on this channel since agent reset.')
adslAtucChanTransmittedBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucChanTransmittedBlks.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanTransmittedBlks.setDescription('Count of all encoded blocks transmitted on this channel since agent reset.')
adslAtucChanCorrectedBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucChanCorrectedBlks.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanCorrectedBlks.setDescription('Count of all blocks received with errors that were corrected since agent reset. These blocks are passed on as good data.')
adslAtucChanUncorrectBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucChanUncorrectBlks.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanUncorrectBlks.setDescription('Count of all blocks received with uncorrectable errors since agent reset.')
adslAtucChanPerfValidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucChanPerfValidIntervals.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanPerfValidIntervals.setDescription('The number of previous 15-minute intervals in the interval table for which data was collected. Given that <n> is the maximum # of intervals supported. The value will be <n> unless the measurement was (re-)started within the last (<n>*15) minutes, in which case the value will be the number of complete 15 minute intervals for which the agent has at least some data. In certain cases (e.g., in the case where the agent is a proxy) it is possible that some intervals are unavailable. In this case, this interval is the maximum interval number for which data is available.')
adslAtucChanPerfInvalidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucChanPerfInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanPerfInvalidIntervals.setDescription('The number of intervals in the range from 0 to the value of adslAtucChanPerfValidIntervals for which no data is available. This object will typically be zero except in cases where the data for some intervals are not available (e.g., in proxy situations).')
adslAtucChanPerfCurr15MinTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 10, 1, 7), AdslPerfTimeElapsed().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucChanPerfCurr15MinTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanPerfCurr15MinTimeElapsed.setDescription('Total elapsed seconds in this interval.')
adslAtucChanPerfCurr15MinReceivedBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 10, 1, 8), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucChanPerfCurr15MinReceivedBlks.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanPerfCurr15MinReceivedBlks.setDescription('Count of all encoded blocks received on this channel within the current 15 minute interval.')
adslAtucChanPerfCurr15MinTransmittedBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 10, 1, 9), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucChanPerfCurr15MinTransmittedBlks.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanPerfCurr15MinTransmittedBlks.setDescription('Count of all encoded blocks transmitted on this channel within the current 15 minute interval.')
adslAtucChanPerfCurr15MinCorrectedBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 10, 1, 10), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucChanPerfCurr15MinCorrectedBlks.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanPerfCurr15MinCorrectedBlks.setDescription('Count of all blocks received with errors that were corrected on this channel within the current 15 minute interval.')
adslAtucChanPerfCurr15MinUncorrectBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 10, 1, 11), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucChanPerfCurr15MinUncorrectBlks.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanPerfCurr15MinUncorrectBlks.setDescription('Count of all blocks received with uncorrectable errors on this channel within the current 15 minute interval.')
adslAtucChanPerfCurr1DayTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 10, 1, 12), AdslPerfTimeElapsed().subtype(subtypeSpec=ValueRangeConstraint(0, 86399))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucChanPerfCurr1DayTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanPerfCurr1DayTimeElapsed.setDescription('Number of seconds that have elapsed since the beginning of the current 1-day interval.')
adslAtucChanPerfCurr1DayReceivedBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 10, 1, 13), AdslPerfCurrDayCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucChanPerfCurr1DayReceivedBlks.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanPerfCurr1DayReceivedBlks.setDescription('Count of all encoded blocks received on this channel during the current day as measured by adslAtucChanPerfCurr1DayTimeElapsed.')
adslAtucChanPerfCurr1DayTransmittedBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 10, 1, 14), AdslPerfCurrDayCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucChanPerfCurr1DayTransmittedBlks.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanPerfCurr1DayTransmittedBlks.setDescription('Count of all encoded blocks transmitted on this channel during the current day as measured by adslAtucChanPerfCurr1DayTimeElapsed.')
adslAtucChanPerfCurr1DayCorrectedBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 10, 1, 15), AdslPerfCurrDayCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucChanPerfCurr1DayCorrectedBlks.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanPerfCurr1DayCorrectedBlks.setDescription('Count of all blocks received with errors that were corrected on this channel during the current day as measured by adslAtucChanPerfCurr1DayTimeElapsed.')
adslAtucChanPerfCurr1DayUncorrectBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 10, 1, 16), AdslPerfCurrDayCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucChanPerfCurr1DayUncorrectBlks.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanPerfCurr1DayUncorrectBlks.setDescription('Count of all blocks received with uncorrectable errors on this channel during the current day as measured by adslAtucChanPerfCurr1DayTimeElapsed.')
adslAtucChanPerfPrev1DayMoniSecs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 10, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucChanPerfPrev1DayMoniSecs.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanPerfPrev1DayMoniSecs.setDescription('The amount of time in the previous 1-day interval over which the performance monitoring information is actually counted. This value will be the same as the interval duration except in a situation where performance monitoring data could not be collected for any reason.')
adslAtucChanPerfPrev1DayReceivedBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 10, 1, 18), AdslPerfPrevDayCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucChanPerfPrev1DayReceivedBlks.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanPerfPrev1DayReceivedBlks.setDescription('Count of all encoded blocks received on this channel within the most recent previous 1-day period.')
adslAtucChanPerfPrev1DayTransmittedBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 10, 1, 19), AdslPerfPrevDayCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucChanPerfPrev1DayTransmittedBlks.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanPerfPrev1DayTransmittedBlks.setDescription('Count of all encoded blocks transmitted on this channel within the most recent previous 1-day period.')
adslAtucChanPerfPrev1DayCorrectedBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 10, 1, 20), AdslPerfPrevDayCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucChanPerfPrev1DayCorrectedBlks.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanPerfPrev1DayCorrectedBlks.setDescription('Count of all blocks received with errors that were corrected on this channel within the most recent previous 1-day period.')
adslAtucChanPerfPrev1DayUncorrectBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 10, 1, 21), AdslPerfPrevDayCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucChanPerfPrev1DayUncorrectBlks.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanPerfPrev1DayUncorrectBlks.setDescription('Count of all blocks received with uncorrectable errors on this channel within the most recent previous 1-day period.')
adslAturChanPerfDataTable = MibTable((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 11), )
if mibBuilder.loadTexts: adslAturChanPerfDataTable.setStatus('current')
if mibBuilder.loadTexts: adslAturChanPerfDataTable.setDescription('This table provides one row for each ATUR channel. ADSL channel interfaces are those ifEntries where ifType is equal to adslInterleave(124) or adslFast(125).')
adslAturChanPerfDataEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: adslAturChanPerfDataEntry.setStatus('current')
if mibBuilder.loadTexts: adslAturChanPerfDataEntry.setDescription('An entry in adslAturChanPerfDataTable.')
adslAturChanReceivedBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturChanReceivedBlks.setStatus('current')
if mibBuilder.loadTexts: adslAturChanReceivedBlks.setDescription('Count of all encoded blocks received on this channel since agent reset.')
adslAturChanTransmittedBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturChanTransmittedBlks.setStatus('current')
if mibBuilder.loadTexts: adslAturChanTransmittedBlks.setDescription('Count of all encoded blocks transmitted on this channel since agent reset.')
adslAturChanCorrectedBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturChanCorrectedBlks.setStatus('current')
if mibBuilder.loadTexts: adslAturChanCorrectedBlks.setDescription('Count of all blocks received with errors that were corrected since agent reset. These blocks are passed on as good data.')
adslAturChanUncorrectBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturChanUncorrectBlks.setStatus('current')
if mibBuilder.loadTexts: adslAturChanUncorrectBlks.setDescription('Count of all blocks received with uncorrectable errors since agent reset.')
adslAturChanPerfValidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturChanPerfValidIntervals.setStatus('current')
if mibBuilder.loadTexts: adslAturChanPerfValidIntervals.setDescription('The number of previous 15-minute intervals in the interval table for which data was collected. Given that <n> is the maximum # of intervals supported. The value will be <n> unless the measurement was (re-)started within the last (<n>*15) minutes, in which case the value will be the number of complete 15 minute intervals for which the agent has at least some data. In certain cases (e.g., in the case where the agent is a proxy) it is possible that some intervals are unavailable. In this case, this interval is the maximum interval number for which data is available.')
adslAturChanPerfInvalidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturChanPerfInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: adslAturChanPerfInvalidIntervals.setDescription('The number of intervals in the range from 0 to the value of adslAturChanPerfValidIntervals for which no data is available. This object will typically be zero except in cases where the data for some intervals are not available (e.g., in proxy situations).')
adslAturChanPerfCurr15MinTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 11, 1, 7), AdslPerfTimeElapsed().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturChanPerfCurr15MinTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: adslAturChanPerfCurr15MinTimeElapsed.setDescription('Total elapsed seconds in this interval. A full interval is 900 seconds.')
adslAturChanPerfCurr15MinReceivedBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 11, 1, 8), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturChanPerfCurr15MinReceivedBlks.setStatus('current')
if mibBuilder.loadTexts: adslAturChanPerfCurr15MinReceivedBlks.setDescription('Count of all encoded blocks received on this channel within the current 15 minute interval.')
adslAturChanPerfCurr15MinTransmittedBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 11, 1, 9), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturChanPerfCurr15MinTransmittedBlks.setStatus('current')
if mibBuilder.loadTexts: adslAturChanPerfCurr15MinTransmittedBlks.setDescription('Count of all encoded blocks transmitted on this channel within the current 15 minute interval.')
adslAturChanPerfCurr15MinCorrectedBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 11, 1, 10), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturChanPerfCurr15MinCorrectedBlks.setStatus('current')
if mibBuilder.loadTexts: adslAturChanPerfCurr15MinCorrectedBlks.setDescription('Count of all blocks received with errors that were corrected on this channel within the current 15 minute interval.')
adslAturChanPerfCurr15MinUncorrectBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 11, 1, 11), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturChanPerfCurr15MinUncorrectBlks.setStatus('current')
if mibBuilder.loadTexts: adslAturChanPerfCurr15MinUncorrectBlks.setDescription('Count of all blocks received with uncorrectable errors on this channel within the current 15 minute interval.')
adslAturChanPerfCurr1DayTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 11, 1, 12), AdslPerfTimeElapsed().subtype(subtypeSpec=ValueRangeConstraint(0, 86399))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturChanPerfCurr1DayTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: adslAturChanPerfCurr1DayTimeElapsed.setDescription('Number of seconds that have elapsed since the beginning of the current 1-day interval.')
adslAturChanPerfCurr1DayReceivedBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 11, 1, 13), AdslPerfCurrDayCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturChanPerfCurr1DayReceivedBlks.setStatus('current')
if mibBuilder.loadTexts: adslAturChanPerfCurr1DayReceivedBlks.setDescription('Count of all encoded blocks received on this channel during the current day as measured by adslAturChanPerfCurr1DayTimeElapsed.')
adslAturChanPerfCurr1DayTransmittedBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 11, 1, 14), AdslPerfCurrDayCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturChanPerfCurr1DayTransmittedBlks.setStatus('current')
if mibBuilder.loadTexts: adslAturChanPerfCurr1DayTransmittedBlks.setDescription('Count of all encoded blocks transmitted on this channel during the current day as measured by adslAturChanPerfCurr1DayTimeElapsed.')
adslAturChanPerfCurr1DayCorrectedBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 11, 1, 15), AdslPerfCurrDayCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturChanPerfCurr1DayCorrectedBlks.setStatus('current')
if mibBuilder.loadTexts: adslAturChanPerfCurr1DayCorrectedBlks.setDescription('Count of all blocks received with errors that were corrected on this channel during the current day as measured by adslAturChanPerfCurr1DayTimeElapsed.')
adslAturChanPerfCurr1DayUncorrectBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 11, 1, 16), AdslPerfCurrDayCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturChanPerfCurr1DayUncorrectBlks.setStatus('current')
if mibBuilder.loadTexts: adslAturChanPerfCurr1DayUncorrectBlks.setDescription('Count of all blocks received with uncorrectable errors on this channel during the current day as measured by adslAturChanPerfCurr1DayTimeElapsed.')
adslAturChanPerfPrev1DayMoniSecs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 11, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturChanPerfPrev1DayMoniSecs.setStatus('current')
if mibBuilder.loadTexts: adslAturChanPerfPrev1DayMoniSecs.setDescription('The amount of time in the previous 1-day interval over which the performance monitoring information is actually counted. This value will be the same as the interval duration except in a situation where performance monitoring data could not be collected for any reason.')
adslAturChanPerfPrev1DayReceivedBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 11, 1, 18), AdslPerfPrevDayCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturChanPerfPrev1DayReceivedBlks.setStatus('current')
if mibBuilder.loadTexts: adslAturChanPerfPrev1DayReceivedBlks.setDescription('Count of all encoded blocks received on this channel within the most recent previous 1-day period.')
adslAturChanPerfPrev1DayTransmittedBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 11, 1, 19), AdslPerfPrevDayCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturChanPerfPrev1DayTransmittedBlks.setStatus('current')
if mibBuilder.loadTexts: adslAturChanPerfPrev1DayTransmittedBlks.setDescription('Count of all encoded blocks transmitted on this channel within the most recent previous 1-day period.')
adslAturChanPerfPrev1DayCorrectedBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 11, 1, 20), AdslPerfPrevDayCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturChanPerfPrev1DayCorrectedBlks.setStatus('current')
if mibBuilder.loadTexts: adslAturChanPerfPrev1DayCorrectedBlks.setDescription('Count of all blocks received with errors that were corrected on this channel within the most recent previous 1-day period.')
adslAturChanPerfPrev1DayUncorrectBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 11, 1, 21), AdslPerfPrevDayCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturChanPerfPrev1DayUncorrectBlks.setStatus('current')
if mibBuilder.loadTexts: adslAturChanPerfPrev1DayUncorrectBlks.setDescription('Count of all blocks received with uncorrectable errors on this channel within the most recent previous 1-day period.')
adslAtucChanIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 12), )
if mibBuilder.loadTexts: adslAtucChanIntervalTable.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanIntervalTable.setDescription("This table provides one row for each ATUC channel's performance data collection interval. ADSL channel interfaces are those ifEntries where ifType is equal to adslInterleave(124) or adslFast(125).")
adslAtucChanIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ADSL-LINE-MIB", "adslAtucChanIntervalNumber"))
if mibBuilder.loadTexts: adslAtucChanIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanIntervalEntry.setDescription('An entry in the adslAtucIntervalTable.')
adslAtucChanIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: adslAtucChanIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanIntervalNumber.setDescription('Performance Data Interval number 1 is the the most recent previous interval; interval 96 is 24 hours ago. Intervals 2..96 are optional.')
adslAtucChanIntervalReceivedBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 12, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucChanIntervalReceivedBlks.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanIntervalReceivedBlks.setDescription('Count of all encoded blocks received on this channel during this interval.')
adslAtucChanIntervalTransmittedBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 12, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucChanIntervalTransmittedBlks.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanIntervalTransmittedBlks.setDescription('Count of all encoded blocks transmitted on this channel during this interval.')
adslAtucChanIntervalCorrectedBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 12, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucChanIntervalCorrectedBlks.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanIntervalCorrectedBlks.setDescription('Count of all blocks received with errors that were corrected on this channel during this interval.')
adslAtucChanIntervalUncorrectBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 12, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucChanIntervalUncorrectBlks.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanIntervalUncorrectBlks.setDescription('Count of all blocks received with uncorrectable errors on this channel during this interval.')
adslAtucChanIntervalValidData = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 12, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucChanIntervalValidData.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanIntervalValidData.setDescription('This variable indicates if the data for this interval is valid.')
adslAturChanIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 13), )
if mibBuilder.loadTexts: adslAturChanIntervalTable.setStatus('current')
if mibBuilder.loadTexts: adslAturChanIntervalTable.setDescription("This table provides one row for each ATUR channel's performance data collection interval. ADSL channel interfaces are those ifEntries where ifType is equal to adslInterleave(124) or adslFast(125).")
adslAturChanIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 13, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ADSL-LINE-MIB", "adslAturChanIntervalNumber"))
if mibBuilder.loadTexts: adslAturChanIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: adslAturChanIntervalEntry.setDescription('An entry in the adslAturIntervalTable.')
adslAturChanIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: adslAturChanIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: adslAturChanIntervalNumber.setDescription('Performance Data Interval number 1 is the the most recent previous interval; interval 96 is 24 hours ago. Intervals 2..96 are optional.')
adslAturChanIntervalReceivedBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 13, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturChanIntervalReceivedBlks.setStatus('current')
if mibBuilder.loadTexts: adslAturChanIntervalReceivedBlks.setDescription('Count of all encoded blocks received on this channel during this interval.')
adslAturChanIntervalTransmittedBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 13, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturChanIntervalTransmittedBlks.setStatus('current')
if mibBuilder.loadTexts: adslAturChanIntervalTransmittedBlks.setDescription('Count of all encoded blocks transmitted on this channel during this interval.')
adslAturChanIntervalCorrectedBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 13, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturChanIntervalCorrectedBlks.setStatus('current')
if mibBuilder.loadTexts: adslAturChanIntervalCorrectedBlks.setDescription('Count of all blocks received with errors that were corrected on this channel during this interval.')
adslAturChanIntervalUncorrectBlks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 13, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturChanIntervalUncorrectBlks.setStatus('current')
if mibBuilder.loadTexts: adslAturChanIntervalUncorrectBlks.setDescription('Count of all blocks received with uncorrectable errors on this channel during this interval.')
adslAturChanIntervalValidData = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 13, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturChanIntervalValidData.setStatus('current')
if mibBuilder.loadTexts: adslAturChanIntervalValidData.setDescription('This variable indicates if the data for this interval is valid.')
adslLineConfProfileTable = MibTable((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 14), )
if mibBuilder.loadTexts: adslLineConfProfileTable.setStatus('current')
if mibBuilder.loadTexts: adslLineConfProfileTable.setDescription('This table contains information on the ADSL line configuration. One entry in this table reflects a profile defined by a manager which can be used to configure the ADSL line.')
adslLineConfProfileEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 14, 1), ).setIndexNames((1, "ADSL-LINE-MIB", "adslLineConfProfileName"))
if mibBuilder.loadTexts: adslLineConfProfileEntry.setStatus('current')
if mibBuilder.loadTexts: adslLineConfProfileEntry.setDescription("Each entry consists of a list of parameters that represents the configuration of an ADSL modem. When `dynamic' profiles are implemented, a default profile will always exist. This profile's name will be set to `DEFVAL' and its parameters will be set to vendor specific values, unless otherwise specified in this document. When `static' profiles are implemented, profiles are automaticly created or destroyed as ADSL physical lines are discovered and removed by the system. The name of the profile will be equivalent to the decimal value of the line's interface index. ")
adslLineConfProfileName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 14, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: adslLineConfProfileName.setStatus('current')
if mibBuilder.loadTexts: adslLineConfProfileName.setDescription("This object is used by the line configuration table in order to identify a row of this table. When `dynamic' profiles are implemented, the profile name is user specified. Also, the system will always provide a default profile whose name is `DEFVAL'. When `static' profiles are implemented, there is an one-to-one relationship between each line and its profile. In which case, the profile name will need to algorithmicly represent the Line's ifIndex. Therefore, the profile's name is a decimalized string of the ifIndex that is fixed-length (i.e., 10) with leading zero(s). For example, the profile name for ifIndex which equals '15' will be '0000000015'.")
adslAtucConfRateMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fixed", 1), ("adaptAtStartup", 2), ("adaptAtRuntime", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAtucConfRateMode.setStatus('current')
if mibBuilder.loadTexts: adslAtucConfRateMode.setDescription('Defines what form of transmit rate adaptation is configured on this modem. See ADSL Forum TR-005 [3] for more information.')
adslAtucConfRateChanRatio = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAtucConfRateChanRatio.setStatus('current')
if mibBuilder.loadTexts: adslAtucConfRateChanRatio.setDescription('Configured allocation ratio of excess transmit bandwidth between fast and interleaved channels. Only applies when two channel mode and RADSL are supported. Distribute bandwidth on each channel in excess of the corresponding ChanConfMinTxRate so that: adslAtucConfRateChanRatio = [Fast / (Fast + Interleaved)] * 100 In other words this value is the fast channel percentage.')
adslAtucConfTargetSnrMgn = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('tenth dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAtucConfTargetSnrMgn.setStatus('current')
if mibBuilder.loadTexts: adslAtucConfTargetSnrMgn.setDescription('Configured Target Signal/Noise Margin. This is the Noise Margin the modem must achieve with a BER of 10-7 or better to successfully complete initialization.')
adslAtucConfMaxSnrMgn = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 14, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('tenth dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAtucConfMaxSnrMgn.setStatus('current')
if mibBuilder.loadTexts: adslAtucConfMaxSnrMgn.setDescription('Configured Maximum acceptable Signal/Noise Margin. If the Noise Margin is above this the modem should attempt to reduce its power output to optimize its operation.')
adslAtucConfMinSnrMgn = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 14, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('tenth dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAtucConfMinSnrMgn.setStatus('current')
if mibBuilder.loadTexts: adslAtucConfMinSnrMgn.setDescription('Configured Minimum acceptable Signal/Noise Margin. If the noise margin falls below this level, the modem should attempt to increase its power output. If that is not possible the modem will attempt to re-initialize or shut down.')
adslAtucConfDownshiftSnrMgn = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 14, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('tenth dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAtucConfDownshiftSnrMgn.setStatus('current')
if mibBuilder.loadTexts: adslAtucConfDownshiftSnrMgn.setDescription("Configured Signal/Noise Margin for rate downshift. If the noise margin falls below this level, the modem should attempt to decrease its transmit rate. In the case that RADSL mode is not present, the value will be `0'.")
adslAtucConfUpshiftSnrMgn = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 14, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('tenth dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAtucConfUpshiftSnrMgn.setStatus('current')
if mibBuilder.loadTexts: adslAtucConfUpshiftSnrMgn.setDescription("Configured Signal/Noise Margin for rate upshift. If the noise margin rises above this level, the modem should attempt to increase its transmit rate. In the case that RADSL is not present, the value will be `0'.")
adslAtucConfMinUpshiftTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 14, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAtucConfMinUpshiftTime.setStatus('current')
if mibBuilder.loadTexts: adslAtucConfMinUpshiftTime.setDescription("Minimum time that the current margin is above UpshiftSnrMgn before an upshift occurs. In the case that RADSL is not present, the value will be `0'.")
adslAtucConfMinDownshiftTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 14, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAtucConfMinDownshiftTime.setStatus('current')
if mibBuilder.loadTexts: adslAtucConfMinDownshiftTime.setDescription("Minimum time that the current margin is below DownshiftSnrMgn before a downshift occurs. In the case that RADSL mode is not present, the value will be `0'.")
adslAtucChanConfFastMinTxRate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 14, 1, 11), Unsigned32()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAtucChanConfFastMinTxRate.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanConfFastMinTxRate.setDescription("Configured Minimum Transmit rate for `Fast' channels, in bps. See adslAtucConfRateChanRatio for information regarding RADSL mode and ATUR transmit rate for ATUC receive rates.")
adslAtucChanConfInterleaveMinTxRate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 14, 1, 12), Unsigned32()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAtucChanConfInterleaveMinTxRate.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanConfInterleaveMinTxRate.setDescription("Configured Minimum Transmit rate for `Interleave' channels, in bps. See adslAtucConfRateChanRatio for information regarding RADSL mode and see ATUR transmit rate for receive rates.")
adslAtucChanConfFastMaxTxRate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 14, 1, 13), Unsigned32()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAtucChanConfFastMaxTxRate.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanConfFastMaxTxRate.setDescription("Configured Maximum Transmit rate for `Fast' channels, in bps. See adslAtucConfRateChanRatio for information regarding RADSL mode and see ATUR transmit rate for ATUC receive rates.")
adslAtucChanConfInterleaveMaxTxRate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 14, 1, 14), Unsigned32()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAtucChanConfInterleaveMaxTxRate.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanConfInterleaveMaxTxRate.setDescription("Configured Maximum Transmit rate for `Interleave' channels, in bps. See adslAtucConfRateChanRatio for information regarding RADSL mode and ATUR transmit rate for ATUC receive rates.")
adslAtucChanConfMaxInterleaveDelay = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 14, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('milli-seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAtucChanConfMaxInterleaveDelay.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanConfMaxInterleaveDelay.setDescription('Configured maximum Interleave Delay for this channel. Interleave delay applies only to the interleave channel and defines the mapping (relative spacing) between subsequent input bytes at the interleaver input and their placement in the bit stream at the interleaver output. Larger numbers provide greater separation between consecutive input bytes in the output bit stream allowing for improved impulse noise immunity at the expense of payload latency.')
adslAturConfRateMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 14, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fixed", 1), ("adaptAtStartup", 2), ("adaptAtRuntime", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAturConfRateMode.setStatus('current')
if mibBuilder.loadTexts: adslAturConfRateMode.setDescription('Defines what form of transmit rate adaptation is configured on this modem. See ADSL Forum TR-005 [3] for more information.')
adslAturConfRateChanRatio = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 14, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAturConfRateChanRatio.setStatus('current')
if mibBuilder.loadTexts: adslAturConfRateChanRatio.setDescription('Configured allocation ratio of excess transmit bandwidth between fast and interleaved channels. Only applies when two channel mode and RADSL are supported. Distribute bandwidth on each channel in excess of the corresponding ChanConfMinTxRate so that: adslAturConfRateChanRatio = [Fast / (Fast + Interleaved)] * 100 In other words this value is the fast channel percentage.')
adslAturConfTargetSnrMgn = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 14, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('tenth dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAturConfTargetSnrMgn.setStatus('current')
if mibBuilder.loadTexts: adslAturConfTargetSnrMgn.setDescription('Configured Target Signal/Noise Margin. This is the Noise Margin the modem must achieve with a BER of 10-7 or better to successfully complete initialization.')
adslAturConfMaxSnrMgn = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 14, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('tenth dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAturConfMaxSnrMgn.setStatus('current')
if mibBuilder.loadTexts: adslAturConfMaxSnrMgn.setDescription('Configured Maximum acceptable Signal/Noise Margin. If the Noise Margin is above this the modem should attempt to reduce its power output to optimize its operation.')
adslAturConfMinSnrMgn = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 14, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('tenth dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAturConfMinSnrMgn.setStatus('current')
if mibBuilder.loadTexts: adslAturConfMinSnrMgn.setDescription('Configured Minimum acceptable Signal/Noise Margin. If the noise margin falls below this level, the modem should attempt to increase its power output. If that is not possible the modem will attempt to re-initialize or shut down.')
adslAturConfDownshiftSnrMgn = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 14, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('tenth dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAturConfDownshiftSnrMgn.setStatus('current')
if mibBuilder.loadTexts: adslAturConfDownshiftSnrMgn.setDescription("Configured Signal/Noise Margin for rate downshift. If the noise margin falls below this level, the modem should attempt to decrease its transmit rate. In the case that RADSL mode is not present, the value will be `0'.")
adslAturConfUpshiftSnrMgn = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 14, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('tenth dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAturConfUpshiftSnrMgn.setStatus('current')
if mibBuilder.loadTexts: adslAturConfUpshiftSnrMgn.setDescription("Configured Signal/Noise Margin for rate upshift. If the noise margin rises above this level, the modem should attempt to increase its transmit rate. In the case that RADSL is not present, the value will be `0'.")
adslAturConfMinUpshiftTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 14, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAturConfMinUpshiftTime.setStatus('current')
if mibBuilder.loadTexts: adslAturConfMinUpshiftTime.setDescription("Minimum time that the current margin is above UpshiftSnrMgn before an upshift occurs. In the case that RADSL is not present, the value will be `0'.")
adslAturConfMinDownshiftTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 14, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAturConfMinDownshiftTime.setStatus('current')
if mibBuilder.loadTexts: adslAturConfMinDownshiftTime.setDescription("Minimum time that the current margin is below DownshiftSnrMgn before a downshift occurs. In the case that RADSL mode is not present, the value will be `0'.")
adslAturChanConfFastMinTxRate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 14, 1, 25), Unsigned32()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAturChanConfFastMinTxRate.setStatus('current')
if mibBuilder.loadTexts: adslAturChanConfFastMinTxRate.setDescription("Configured Minimum Transmit rate for `Fast' channels, in bps. See adslAturConfRateChanRatio for information regarding RADSL mode and ATUC transmit rate for ATUR receive rates.")
adslAturChanConfInterleaveMinTxRate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 14, 1, 26), Unsigned32()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAturChanConfInterleaveMinTxRate.setStatus('current')
if mibBuilder.loadTexts: adslAturChanConfInterleaveMinTxRate.setDescription("Configured Minimum Transmit rate for `Interleave' channels, in bps. See adslAturConfRateChanRatio for information regarding RADSL mode and ATUC transmit rate for ATUR receive rates.")
adslAturChanConfFastMaxTxRate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 14, 1, 27), Unsigned32()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAturChanConfFastMaxTxRate.setStatus('current')
if mibBuilder.loadTexts: adslAturChanConfFastMaxTxRate.setDescription("Configured Maximum Transmit rate for `Fast' channels, in bps. See adslAturConfRateChanRatio for information regarding RADSL mode and ATUC transmit rate for ATUR receive rates.")
adslAturChanConfInterleaveMaxTxRate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 14, 1, 28), Unsigned32()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAturChanConfInterleaveMaxTxRate.setStatus('current')
if mibBuilder.loadTexts: adslAturChanConfInterleaveMaxTxRate.setDescription("Configured Maximum Transmit rate for `Interleave' channels, in bps. See adslAturConfRateChanRatio for information regarding RADSL mode and see ATUC transmit rate for ATUR receive rates.")
adslAturChanConfMaxInterleaveDelay = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 14, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('milli-seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAturChanConfMaxInterleaveDelay.setStatus('current')
if mibBuilder.loadTexts: adslAturChanConfMaxInterleaveDelay.setDescription('Configured maximum Interleave Delay for this channel. Interleave delay applies only to the interleave channel and defines the mapping (relative spacing) between subsequent input bytes at the interleaver input and their placement in the bit stream at the interleaver output. Larger numbers provide greater separation between consecutive input bytes in the output bit stream allowing for improved impulse noise immunity at the expense of payload latency.')
adslLineConfProfileRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 14, 1, 30), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslLineConfProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: adslLineConfProfileRowStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. A profile activated by setting this object to `active'. When `active' is set, the system will validate the profile. Before a profile can be deleted or taken out of service, (by setting this object to `destroy' or `outOfService') it must be first unreferenced from all associated lines. If the implementator of this MIB has chosen not to implement `dynamic assignment' of profiles, this object's MIN-ACCESS is read-only and its value is always to be `active'.")
adslLineAlarmConfProfileTable = MibTable((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 15), )
if mibBuilder.loadTexts: adslLineAlarmConfProfileTable.setStatus('current')
if mibBuilder.loadTexts: adslLineAlarmConfProfileTable.setDescription('This table contains information on the ADSL line configuration. One entry in this table reflects a profile defined by a manager which can be used to configure the modem for a physical line')
adslLineAlarmConfProfileEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 15, 1), ).setIndexNames((1, "ADSL-LINE-MIB", "adslLineAlarmConfProfileName"))
if mibBuilder.loadTexts: adslLineAlarmConfProfileEntry.setStatus('current')
if mibBuilder.loadTexts: adslLineAlarmConfProfileEntry.setDescription("Each entry consists of a list of parameters that represents the configuration of an ADSL modem. When `dynamic' profiles are implemented, a default profile will always exist. This profile's name will be set to `DEFVAL' and its parameters will be set to vendor specific values, unless otherwise specified in this document. When `static' profiles are implemented, profiles are automaticly created or destroyed as ADSL physical lines are discovered and removed by the system. The name of the profile will be equivalent to the decimal value of the line's interface index. ")
adslLineAlarmConfProfileName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 15, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: adslLineAlarmConfProfileName.setStatus('current')
if mibBuilder.loadTexts: adslLineAlarmConfProfileName.setDescription("This object is used by the line alarm configuration table in order to identify a row of this table. When `dynamic' profiles are implemented, the profile name is user specified. Also, the system will always provide a default profile whose name is `DEFVAL'. When `static' profiles are implemented, there is an one-to-one relationship between each line and its profile. In which case, the profile name will need to algorithmicly represent the Line's ifIndex. Therefore, the profile's name is a decimalized string of the ifIndex that is fixed-length (i.e., 10) with leading zero(s). For example, the profile name for ifIndex which equals '15' will be '0000000015'.")
adslAtucThresh15MinLofs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAtucThresh15MinLofs.setStatus('current')
if mibBuilder.loadTexts: adslAtucThresh15MinLofs.setDescription("The number of Loss of Frame Seconds encountered by an ADSL interface within any given 15 minutes performance data collection period, which causes the SNMP agent to send an adslAtucPerfLofsThreshTrap. One trap will be sent per interval per interface. A value of `0' will disable the trap.")
adslAtucThresh15MinLoss = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAtucThresh15MinLoss.setStatus('current')
if mibBuilder.loadTexts: adslAtucThresh15MinLoss.setDescription("The number of Loss of Signal Seconds encountered by an ADSL interface within any given 15 minutes performance data collection period, which causes the SNMP agent to send an adslAtucPerfLossThreshTrap. One trap will be sent per interval per interface. A value of `0' will disable the trap.")
adslAtucThresh15MinLols = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAtucThresh15MinLols.setStatus('current')
if mibBuilder.loadTexts: adslAtucThresh15MinLols.setDescription("The number of Loss of Link Seconds encountered by an ADSL interface within any given 15 minutes performance data collection period, which causes the SNMP agent to send an adslAtucPerfLolsThreshTrap. One trap will be sent per interval per interface. A value of `0' will disable the trap.")
adslAtucThresh15MinLprs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAtucThresh15MinLprs.setStatus('current')
if mibBuilder.loadTexts: adslAtucThresh15MinLprs.setDescription("The number of Loss of Power Seconds encountered by an ADSL interface within any given 15 minutes performance data collection period, which causes the SNMP agent to send an adslAtucPerfLprsThreshTrap. One trap will be sent per interval per interface. A value of `0' will disable the trap.")
adslAtucThresh15MinESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 15, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAtucThresh15MinESs.setStatus('current')
if mibBuilder.loadTexts: adslAtucThresh15MinESs.setDescription("The number of Errored Seconds encountered by an ADSL interface within any given 15 minutes performance data collection period, which causes the SNMP agent to send an adslAtucPerfESsThreshTrap. One trap will be sent per interval per interface. A value of `0' will disable the trap.")
adslAtucThreshFastRateUp = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 15, 1, 7), Unsigned32()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAtucThreshFastRateUp.setStatus('current')
if mibBuilder.loadTexts: adslAtucThreshFastRateUp.setDescription("Applies to `Fast' channels only. Configured change in rate causing an adslAtucRateChangeTrap. A trap is produced when: ChanCurrTxRate >= ChanPrevTxRate plus the value of this object. A value of `0' will disable the trap.")
adslAtucThreshInterleaveRateUp = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 15, 1, 8), Unsigned32()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAtucThreshInterleaveRateUp.setStatus('current')
if mibBuilder.loadTexts: adslAtucThreshInterleaveRateUp.setDescription("Applies to `Interleave' channels only. Configured change in rate causing an adslAtucRateChangeTrap. A trap is produced when: ChanCurrTxRate >= ChanPrevTxRate plus the value of this object. A value of `0' will disable the trap.")
adslAtucThreshFastRateDown = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 15, 1, 9), Unsigned32()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAtucThreshFastRateDown.setStatus('current')
if mibBuilder.loadTexts: adslAtucThreshFastRateDown.setDescription("Applies to `Fast' channels only. Configured change in rate causing an adslAtucRateChangeTrap. A trap is produced when: ChanCurrTxRate <= ChanPrevTxRate minus the value of this object. A value of `0' will disable the trap.")
adslAtucThreshInterleaveRateDown = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 15, 1, 10), Unsigned32()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAtucThreshInterleaveRateDown.setStatus('current')
if mibBuilder.loadTexts: adslAtucThreshInterleaveRateDown.setDescription("Applies to `Interleave' channels only. Configured change in rate causing an adslAtucRateChangeTrap. A trap is produced when: ChanCurrTxRate <= ChanPrevTxRate minus the value of this object. A value of `0' will disable the trap.")
adslAtucInitFailureTrapEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 15, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAtucInitFailureTrapEnable.setStatus('current')
if mibBuilder.loadTexts: adslAtucInitFailureTrapEnable.setDescription('Enables and disables the InitFailureTrap. This object is defaulted disable(2).')
adslAturThresh15MinLofs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 15, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAturThresh15MinLofs.setStatus('current')
if mibBuilder.loadTexts: adslAturThresh15MinLofs.setDescription("The number of Loss of Frame Seconds encountered by an ADSL interface within any given 15 minutes performance data collection period, which causes the SNMP agent to send an adslAturPerfLofsThreshTrap. One trap will be sent per interval per interface. A value of `0' will disable the trap.")
adslAturThresh15MinLoss = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 15, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAturThresh15MinLoss.setStatus('current')
if mibBuilder.loadTexts: adslAturThresh15MinLoss.setDescription("The number of Loss of Signal Seconds encountered by an ADSL interface within any given 15 minutes performance data collection period, which causes the SNMP agent to send an adslAturPerfLossThreshTrap. One trap will be sent per interval per interface. A value of `0' will disable the trap.")
adslAturThresh15MinLprs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 15, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAturThresh15MinLprs.setStatus('current')
if mibBuilder.loadTexts: adslAturThresh15MinLprs.setDescription("The number of Loss of Power Seconds encountered by an ADSL interface within any given 15 minutes performance data collection period, which causes the SNMP agent to send an adslAturPerfLprsThreshTrap. One trap will be sent per interval per interface. A value of `0' will disable the trap.")
adslAturThresh15MinESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 15, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAturThresh15MinESs.setStatus('current')
if mibBuilder.loadTexts: adslAturThresh15MinESs.setDescription("The number of Errored Seconds encountered by an ADSL interface within any given 15 minutes performance data collection period, which causes the SNMP agent to send an adslAturPerfESsThreshTrap. One trap will be sent per interval per interface. A value of `0' will disable the trap.")
adslAturThreshFastRateUp = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 15, 1, 16), Unsigned32()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAturThreshFastRateUp.setStatus('current')
if mibBuilder.loadTexts: adslAturThreshFastRateUp.setDescription("Applies to `Fast' channels only. Configured change in rate causing an adslAturRateChangeTrap. A trap is produced when: ChanCurrTxRate >= ChanPrevTxRate plus the value of this object. A value of `0' will disable the trap.")
adslAturThreshInterleaveRateUp = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 15, 1, 17), Unsigned32()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAturThreshInterleaveRateUp.setStatus('current')
if mibBuilder.loadTexts: adslAturThreshInterleaveRateUp.setDescription("Applies to `Interleave' channels only. configured change in rate causing an adslAturRateChangeTrap. A trap is produced when: ChanCurrTxRate >= ChanPrevTxRate plus the value of this object. A value of `0' will disable the trap.")
adslAturThreshFastRateDown = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 15, 1, 18), Unsigned32()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAturThreshFastRateDown.setStatus('current')
if mibBuilder.loadTexts: adslAturThreshFastRateDown.setDescription("Applies to `Fast' channels only. Configured change in rate causing an adslAturRateChangeTrap. A trap is produced when: ChanCurrTxRate <= ChanPrevTxRate minus the value of this object. A value of `0' will disable the trap.")
adslAturThreshInterleaveRateDown = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 15, 1, 19), Unsigned32()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAturThreshInterleaveRateDown.setStatus('current')
if mibBuilder.loadTexts: adslAturThreshInterleaveRateDown.setDescription("Applies to `Interleave' channels only. Configured change in rate causing an adslAturRateChangeTrap. A trap is produced when: ChanCurrTxRate <= ChanPrevTxRate minus the value of this object. A value of `0' will disable the trap.")
adslLineAlarmConfProfileRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 15, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslLineAlarmConfProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: adslLineAlarmConfProfileRowStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. A profile activated by setting this object to `active'. When `active' is set, the system will validate the profile. Before a profile can be deleted or taken out of service, (by setting this object to `destroy' or `outOfService') it must be first unreferenced from all associated lines. If the implementator of this MIB has chosen not to implement `dynamic assignment' of profiles, this object's MIN-ACCESS is read-only and its value is always to be `active'.")
adslLCSMib = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16))
adslTraps = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 94, 1, 2))
adslAtucTraps = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 94, 1, 2, 1))
adslAtucPerfLofsThreshTrap = NotificationType((1, 3, 6, 1, 2, 1, 10, 94, 1, 2, 1, 0, 1)).setObjects(("ADSL-LINE-MIB", "adslAtucPerfCurr15MinLofs"), ("ADSL-LINE-MIB", "adslAtucThresh15MinLofs"))
if mibBuilder.loadTexts: adslAtucPerfLofsThreshTrap.setStatus('current')
if mibBuilder.loadTexts: adslAtucPerfLofsThreshTrap.setDescription('Loss of Framing 15-minute interval threshold reached.')
adslAtucPerfLossThreshTrap = NotificationType((1, 3, 6, 1, 2, 1, 10, 94, 1, 2, 1, 0, 2)).setObjects(("ADSL-LINE-MIB", "adslAtucPerfCurr15MinLoss"), ("ADSL-LINE-MIB", "adslAtucThresh15MinLoss"))
if mibBuilder.loadTexts: adslAtucPerfLossThreshTrap.setStatus('current')
if mibBuilder.loadTexts: adslAtucPerfLossThreshTrap.setDescription('Loss of Signal 15-minute interval threshold reached.')
adslAtucPerfLprsThreshTrap = NotificationType((1, 3, 6, 1, 2, 1, 10, 94, 1, 2, 1, 0, 3)).setObjects(("ADSL-LINE-MIB", "adslAtucPerfCurr15MinLprs"), ("ADSL-LINE-MIB", "adslAtucThresh15MinLprs"))
if mibBuilder.loadTexts: adslAtucPerfLprsThreshTrap.setStatus('current')
if mibBuilder.loadTexts: adslAtucPerfLprsThreshTrap.setDescription('Loss of Power 15-minute interval threshold reached.')
adslAtucPerfESsThreshTrap = NotificationType((1, 3, 6, 1, 2, 1, 10, 94, 1, 2, 1, 0, 4)).setObjects(("ADSL-LINE-MIB", "adslAtucPerfCurr15MinESs"), ("ADSL-LINE-MIB", "adslAtucThresh15MinESs"))
if mibBuilder.loadTexts: adslAtucPerfESsThreshTrap.setStatus('current')
if mibBuilder.loadTexts: adslAtucPerfESsThreshTrap.setDescription('Errored Second 15-minute interval threshold reached.')
adslAtucRateChangeTrap = NotificationType((1, 3, 6, 1, 2, 1, 10, 94, 1, 2, 1, 0, 5)).setObjects(("ADSL-LINE-MIB", "adslAtucChanCurrTxRate"), ("ADSL-LINE-MIB", "adslAtucChanPrevTxRate"))
if mibBuilder.loadTexts: adslAtucRateChangeTrap.setStatus('current')
if mibBuilder.loadTexts: adslAtucRateChangeTrap.setDescription('The ATUCs transmit rate has changed (RADSL mode only)')
adslAtucPerfLolsThreshTrap = NotificationType((1, 3, 6, 1, 2, 1, 10, 94, 1, 2, 1, 0, 6)).setObjects(("ADSL-LINE-MIB", "adslAtucPerfCurr15MinLols"), ("ADSL-LINE-MIB", "adslAtucThresh15MinLols"))
if mibBuilder.loadTexts: adslAtucPerfLolsThreshTrap.setStatus('current')
if mibBuilder.loadTexts: adslAtucPerfLolsThreshTrap.setDescription('Loss of Link 15-minute interval threshold reached.')
adslAtucInitFailureTrap = NotificationType((1, 3, 6, 1, 2, 1, 10, 94, 1, 2, 1, 0, 7)).setObjects(("ADSL-LINE-MIB", "adslAtucCurrStatus"))
if mibBuilder.loadTexts: adslAtucInitFailureTrap.setStatus('current')
if mibBuilder.loadTexts: adslAtucInitFailureTrap.setDescription('ATUC initialization failed. See adslAtucCurrStatus for potential reasons.')
adslAturTraps = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 94, 1, 2, 2))
adslAturPerfLofsThreshTrap = NotificationType((1, 3, 6, 1, 2, 1, 10, 94, 1, 2, 2, 0, 1)).setObjects(("ADSL-LINE-MIB", "adslAturPerfCurr15MinLofs"), ("ADSL-LINE-MIB", "adslAturThresh15MinLofs"))
if mibBuilder.loadTexts: adslAturPerfLofsThreshTrap.setStatus('current')
if mibBuilder.loadTexts: adslAturPerfLofsThreshTrap.setDescription('Loss of Framing 15-minute interval threshold reached.')
adslAturPerfLossThreshTrap = NotificationType((1, 3, 6, 1, 2, 1, 10, 94, 1, 2, 2, 0, 2)).setObjects(("ADSL-LINE-MIB", "adslAturPerfCurr15MinLoss"), ("ADSL-LINE-MIB", "adslAturThresh15MinLoss"))
if mibBuilder.loadTexts: adslAturPerfLossThreshTrap.setStatus('current')
if mibBuilder.loadTexts: adslAturPerfLossThreshTrap.setDescription('Loss of Signal 15-minute interval threshold reached.')
adslAturPerfLprsThreshTrap = NotificationType((1, 3, 6, 1, 2, 1, 10, 94, 1, 2, 2, 0, 3)).setObjects(("ADSL-LINE-MIB", "adslAturPerfCurr15MinLprs"), ("ADSL-LINE-MIB", "adslAturThresh15MinLprs"))
if mibBuilder.loadTexts: adslAturPerfLprsThreshTrap.setStatus('current')
if mibBuilder.loadTexts: adslAturPerfLprsThreshTrap.setDescription('Loss of Power 15-minute interval threshold reached.')
adslAturPerfESsThreshTrap = NotificationType((1, 3, 6, 1, 2, 1, 10, 94, 1, 2, 2, 0, 4)).setObjects(("ADSL-LINE-MIB", "adslAturPerfCurr15MinESs"), ("ADSL-LINE-MIB", "adslAturThresh15MinESs"))
if mibBuilder.loadTexts: adslAturPerfESsThreshTrap.setStatus('current')
if mibBuilder.loadTexts: adslAturPerfESsThreshTrap.setDescription('Errored Second 15-minute interval threshold reached.')
adslAturRateChangeTrap = NotificationType((1, 3, 6, 1, 2, 1, 10, 94, 1, 2, 2, 0, 5)).setObjects(("ADSL-LINE-MIB", "adslAturChanCurrTxRate"), ("ADSL-LINE-MIB", "adslAturChanPrevTxRate"))
if mibBuilder.loadTexts: adslAturRateChangeTrap.setStatus('current')
if mibBuilder.loadTexts: adslAturRateChangeTrap.setDescription('The ATURs transmit rate has changed (RADSL mode only)')
adslConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 94, 1, 3))
adslGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 94, 1, 3, 1))
adslCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 94, 1, 3, 2))
adslLineMibAtucCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 94, 1, 3, 2, 1)).setObjects(("ADSL-LINE-MIB", "adslLineGroup"), ("ADSL-LINE-MIB", "adslPhysicalGroup"), ("ADSL-LINE-MIB", "adslChannelGroup"), ("ADSL-LINE-MIB", "adslAtucPhysPerfIntervalGroup"), ("ADSL-LINE-MIB", "adslAturPhysPerfIntervalGroup"), ("ADSL-LINE-MIB", "adslLineConfProfileGroup"), ("ADSL-LINE-MIB", "adslLineAlarmConfProfileGroup"), ("ADSL-LINE-MIB", "adslLineConfProfileControlGroup"), ("ADSL-LINE-MIB", "adslAtucPhysPerfRawCounterGroup"), ("ADSL-LINE-MIB", "adslAturPhysPerfRawCounterGroup"), ("ADSL-LINE-MIB", "adslAtucChanPerformanceGroup"), ("ADSL-LINE-MIB", "adslAturChanPerformanceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adslLineMibAtucCompliance = adslLineMibAtucCompliance.setStatus('current')
if mibBuilder.loadTexts: adslLineMibAtucCompliance.setDescription('The compliance statement for SNMP entities which manage ADSL ATU-C interfaces.')
adslLineMibAturCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 94, 1, 3, 2, 2)).setObjects(("ADSL-LINE-MIB", "adslAturLineGroup"), ("ADSL-LINE-MIB", "adslAturPhysicalGroup"), ("ADSL-LINE-MIB", "adslAturChannelGroup"), ("ADSL-LINE-MIB", "adslAturAtucPhysPerfIntervalGroup"), ("ADSL-LINE-MIB", "adslAturAturPhysPerfIntervalGroup"), ("ADSL-LINE-MIB", "adslAturLineAlarmConfProfileGroup"), ("ADSL-LINE-MIB", "adslAturLineConfProfileControlGroup"), ("ADSL-LINE-MIB", "adslAturAtucPhysPerfRawCounterGroup"), ("ADSL-LINE-MIB", "adslAturAturPhysPerfRawCounterGroup"), ("ADSL-LINE-MIB", "adslAturAtucChanPerformanceGroup"), ("ADSL-LINE-MIB", "adslAturAturChanPerformanceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adslLineMibAturCompliance = adslLineMibAturCompliance.setStatus('current')
if mibBuilder.loadTexts: adslLineMibAturCompliance.setDescription('The compliance statement for SNMP entities which manage ADSL ATU-R interfaces.')
adslLineGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 94, 1, 3, 1, 1)).setObjects(("ADSL-LINE-MIB", "adslLineCoding"), ("ADSL-LINE-MIB", "adslLineType"), ("ADSL-LINE-MIB", "adslLineSpecific"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adslLineGroup = adslLineGroup.setStatus('current')
if mibBuilder.loadTexts: adslLineGroup.setDescription('A collection of objects providing configuration information about an ADSL Line.')
adslPhysicalGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 94, 1, 3, 1, 2)).setObjects(("ADSL-LINE-MIB", "adslAtucInvSerialNumber"), ("ADSL-LINE-MIB", "adslAtucInvVendorID"), ("ADSL-LINE-MIB", "adslAtucInvVersionNumber"), ("ADSL-LINE-MIB", "adslAtucCurrSnrMgn"), ("ADSL-LINE-MIB", "adslAtucCurrAtn"), ("ADSL-LINE-MIB", "adslAtucCurrStatus"), ("ADSL-LINE-MIB", "adslAtucCurrOutputPwr"), ("ADSL-LINE-MIB", "adslAtucCurrAttainableRate"), ("ADSL-LINE-MIB", "adslAturInvSerialNumber"), ("ADSL-LINE-MIB", "adslAturInvVendorID"), ("ADSL-LINE-MIB", "adslAturInvVersionNumber"), ("ADSL-LINE-MIB", "adslAturCurrSnrMgn"), ("ADSL-LINE-MIB", "adslAturCurrAtn"), ("ADSL-LINE-MIB", "adslAturCurrStatus"), ("ADSL-LINE-MIB", "adslAturCurrOutputPwr"), ("ADSL-LINE-MIB", "adslAturCurrAttainableRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adslPhysicalGroup = adslPhysicalGroup.setStatus('current')
if mibBuilder.loadTexts: adslPhysicalGroup.setDescription('A collection of objects providing physical configuration information of the ADSL Line.')
adslChannelGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 94, 1, 3, 1, 3)).setObjects(("ADSL-LINE-MIB", "adslAtucChanInterleaveDelay"), ("ADSL-LINE-MIB", "adslAtucChanCurrTxRate"), ("ADSL-LINE-MIB", "adslAtucChanPrevTxRate"), ("ADSL-LINE-MIB", "adslAtucChanCrcBlockLength"), ("ADSL-LINE-MIB", "adslAturChanInterleaveDelay"), ("ADSL-LINE-MIB", "adslAturChanCurrTxRate"), ("ADSL-LINE-MIB", "adslAturChanPrevTxRate"), ("ADSL-LINE-MIB", "adslAturChanCrcBlockLength"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adslChannelGroup = adslChannelGroup.setStatus('current')
if mibBuilder.loadTexts: adslChannelGroup.setDescription('A collection of objects providing configuration information about an ADSL channel.')
adslAtucPhysPerfRawCounterGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 94, 1, 3, 1, 4)).setObjects(("ADSL-LINE-MIB", "adslAtucPerfLofs"), ("ADSL-LINE-MIB", "adslAtucPerfLoss"), ("ADSL-LINE-MIB", "adslAtucPerfLols"), ("ADSL-LINE-MIB", "adslAtucPerfLprs"), ("ADSL-LINE-MIB", "adslAtucPerfESs"), ("ADSL-LINE-MIB", "adslAtucPerfInits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adslAtucPhysPerfRawCounterGroup = adslAtucPhysPerfRawCounterGroup.setStatus('current')
if mibBuilder.loadTexts: adslAtucPhysPerfRawCounterGroup.setDescription('A collection of objects providing raw performance counts on an ADSL Line (ATU-C end).')
adslAtucPhysPerfIntervalGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 94, 1, 3, 1, 5)).setObjects(("ADSL-LINE-MIB", "adslAtucPerfValidIntervals"), ("ADSL-LINE-MIB", "adslAtucPerfInvalidIntervals"), ("ADSL-LINE-MIB", "adslAtucPerfCurr15MinTimeElapsed"), ("ADSL-LINE-MIB", "adslAtucPerfCurr15MinLofs"), ("ADSL-LINE-MIB", "adslAtucPerfCurr15MinLoss"), ("ADSL-LINE-MIB", "adslAtucPerfCurr15MinLols"), ("ADSL-LINE-MIB", "adslAtucPerfCurr15MinLprs"), ("ADSL-LINE-MIB", "adslAtucPerfCurr15MinESs"), ("ADSL-LINE-MIB", "adslAtucPerfCurr15MinInits"), ("ADSL-LINE-MIB", "adslAtucPerfCurr1DayLofs"), ("ADSL-LINE-MIB", "adslAtucPerfCurr1DayLoss"), ("ADSL-LINE-MIB", "adslAtucPerfCurr1DayLols"), ("ADSL-LINE-MIB", "adslAtucPerfCurr1DayLprs"), ("ADSL-LINE-MIB", "adslAtucPerfCurr1DayESs"), ("ADSL-LINE-MIB", "adslAtucPerfCurr1DayInits"), ("ADSL-LINE-MIB", "adslAtucPerfPrev1DayMoniSecs"), ("ADSL-LINE-MIB", "adslAtucPerfPrev1DayLofs"), ("ADSL-LINE-MIB", "adslAtucPerfPrev1DayLoss"), ("ADSL-LINE-MIB", "adslAtucPerfPrev1DayLols"), ("ADSL-LINE-MIB", "adslAtucPerfPrev1DayLprs"), ("ADSL-LINE-MIB", "adslAtucPerfPrev1DayESs"), ("ADSL-LINE-MIB", "adslAtucPerfPrev1DayInits"), ("ADSL-LINE-MIB", "adslAtucIntervalLofs"), ("ADSL-LINE-MIB", "adslAtucIntervalLoss"), ("ADSL-LINE-MIB", "adslAtucIntervalLols"), ("ADSL-LINE-MIB", "adslAtucIntervalLprs"), ("ADSL-LINE-MIB", "adslAtucIntervalESs"), ("ADSL-LINE-MIB", "adslAtucIntervalInits"), ("ADSL-LINE-MIB", "adslAtucIntervalValidData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adslAtucPhysPerfIntervalGroup = adslAtucPhysPerfIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: adslAtucPhysPerfIntervalGroup.setDescription('A collection of objects providing current 15-minute, 1-day; and previous 1-day performance counts on ADSL Line (ATU-C end) .')
adslAturPhysPerfRawCounterGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 94, 1, 3, 1, 6)).setObjects(("ADSL-LINE-MIB", "adslAturPerfLofs"), ("ADSL-LINE-MIB", "adslAturPerfLoss"), ("ADSL-LINE-MIB", "adslAturPerfLprs"), ("ADSL-LINE-MIB", "adslAturPerfESs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adslAturPhysPerfRawCounterGroup = adslAturPhysPerfRawCounterGroup.setStatus('current')
if mibBuilder.loadTexts: adslAturPhysPerfRawCounterGroup.setDescription('A collection of objects providing raw performance counts on an ADSL Line (ATU-R end).')
adslAturPhysPerfIntervalGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 94, 1, 3, 1, 7)).setObjects(("ADSL-LINE-MIB", "adslAturPerfValidIntervals"), ("ADSL-LINE-MIB", "adslAturPerfInvalidIntervals"), ("ADSL-LINE-MIB", "adslAturPerfCurr15MinTimeElapsed"), ("ADSL-LINE-MIB", "adslAturPerfCurr15MinLofs"), ("ADSL-LINE-MIB", "adslAturPerfCurr15MinLoss"), ("ADSL-LINE-MIB", "adslAturPerfCurr15MinLprs"), ("ADSL-LINE-MIB", "adslAturPerfCurr15MinESs"), ("ADSL-LINE-MIB", "adslAturPerfCurr1DayTimeElapsed"), ("ADSL-LINE-MIB", "adslAturPerfCurr1DayLofs"), ("ADSL-LINE-MIB", "adslAturPerfCurr1DayLoss"), ("ADSL-LINE-MIB", "adslAturPerfCurr1DayLprs"), ("ADSL-LINE-MIB", "adslAturPerfCurr1DayESs"), ("ADSL-LINE-MIB", "adslAturPerfPrev1DayMoniSecs"), ("ADSL-LINE-MIB", "adslAturPerfPrev1DayLofs"), ("ADSL-LINE-MIB", "adslAturPerfPrev1DayLoss"), ("ADSL-LINE-MIB", "adslAturPerfPrev1DayLprs"), ("ADSL-LINE-MIB", "adslAturPerfPrev1DayESs"), ("ADSL-LINE-MIB", "adslAturIntervalLofs"), ("ADSL-LINE-MIB", "adslAturIntervalLoss"), ("ADSL-LINE-MIB", "adslAturIntervalLprs"), ("ADSL-LINE-MIB", "adslAturIntervalESs"), ("ADSL-LINE-MIB", "adslAturIntervalValidData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adslAturPhysPerfIntervalGroup = adslAturPhysPerfIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: adslAturPhysPerfIntervalGroup.setDescription('A collection of objects providing current 15-minute, 1-day; and previous 1-day performance counts on ADSL Line (ATU-R end).')
adslAtucChanPerformanceGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 94, 1, 3, 1, 8)).setObjects(("ADSL-LINE-MIB", "adslAtucChanReceivedBlks"), ("ADSL-LINE-MIB", "adslAtucChanTransmittedBlks"), ("ADSL-LINE-MIB", "adslAtucChanCorrectedBlks"), ("ADSL-LINE-MIB", "adslAtucChanUncorrectBlks"), ("ADSL-LINE-MIB", "adslAtucChanPerfValidIntervals"), ("ADSL-LINE-MIB", "adslAtucChanPerfInvalidIntervals"), ("ADSL-LINE-MIB", "adslAtucChanPerfCurr15MinTimeElapsed"), ("ADSL-LINE-MIB", "adslAtucChanPerfCurr15MinReceivedBlks"), ("ADSL-LINE-MIB", "adslAtucChanPerfCurr15MinTransmittedBlks"), ("ADSL-LINE-MIB", "adslAtucChanPerfCurr15MinCorrectedBlks"), ("ADSL-LINE-MIB", "adslAtucChanPerfCurr15MinUncorrectBlks"), ("ADSL-LINE-MIB", "adslAtucChanPerfCurr1DayTimeElapsed"), ("ADSL-LINE-MIB", "adslAtucChanPerfCurr1DayReceivedBlks"), ("ADSL-LINE-MIB", "adslAtucChanPerfCurr1DayTransmittedBlks"), ("ADSL-LINE-MIB", "adslAtucChanPerfCurr1DayCorrectedBlks"), ("ADSL-LINE-MIB", "adslAtucChanPerfCurr1DayUncorrectBlks"), ("ADSL-LINE-MIB", "adslAtucChanPerfPrev1DayMoniSecs"), ("ADSL-LINE-MIB", "adslAtucChanPerfPrev1DayReceivedBlks"), ("ADSL-LINE-MIB", "adslAtucChanPerfPrev1DayTransmittedBlks"), ("ADSL-LINE-MIB", "adslAtucChanPerfPrev1DayCorrectedBlks"), ("ADSL-LINE-MIB", "adslAtucChanPerfPrev1DayUncorrectBlks"), ("ADSL-LINE-MIB", "adslAtucChanIntervalReceivedBlks"), ("ADSL-LINE-MIB", "adslAtucChanIntervalTransmittedBlks"), ("ADSL-LINE-MIB", "adslAtucChanIntervalCorrectedBlks"), ("ADSL-LINE-MIB", "adslAtucChanIntervalUncorrectBlks"), ("ADSL-LINE-MIB", "adslAtucChanIntervalValidData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adslAtucChanPerformanceGroup = adslAtucChanPerformanceGroup.setStatus('current')
if mibBuilder.loadTexts: adslAtucChanPerformanceGroup.setDescription('A collection of objects providing channel block performance information on an ADSL channel (ATU-C end).')
adslAturChanPerformanceGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 94, 1, 3, 1, 9)).setObjects(("ADSL-LINE-MIB", "adslAturChanReceivedBlks"), ("ADSL-LINE-MIB", "adslAturChanTransmittedBlks"), ("ADSL-LINE-MIB", "adslAturChanCorrectedBlks"), ("ADSL-LINE-MIB", "adslAturChanUncorrectBlks"), ("ADSL-LINE-MIB", "adslAturChanPerfValidIntervals"), ("ADSL-LINE-MIB", "adslAturChanPerfInvalidIntervals"), ("ADSL-LINE-MIB", "adslAturChanPerfCurr15MinTimeElapsed"), ("ADSL-LINE-MIB", "adslAturChanPerfCurr15MinReceivedBlks"), ("ADSL-LINE-MIB", "adslAturChanPerfCurr15MinTransmittedBlks"), ("ADSL-LINE-MIB", "adslAturChanPerfCurr15MinCorrectedBlks"), ("ADSL-LINE-MIB", "adslAturChanPerfCurr15MinUncorrectBlks"), ("ADSL-LINE-MIB", "adslAturChanPerfCurr1DayTimeElapsed"), ("ADSL-LINE-MIB", "adslAturChanPerfCurr1DayReceivedBlks"), ("ADSL-LINE-MIB", "adslAturChanPerfCurr1DayTransmittedBlks"), ("ADSL-LINE-MIB", "adslAturChanPerfCurr1DayCorrectedBlks"), ("ADSL-LINE-MIB", "adslAturChanPerfCurr1DayUncorrectBlks"), ("ADSL-LINE-MIB", "adslAturChanPerfPrev1DayMoniSecs"), ("ADSL-LINE-MIB", "adslAturChanPerfPrev1DayReceivedBlks"), ("ADSL-LINE-MIB", "adslAturChanPerfPrev1DayTransmittedBlks"), ("ADSL-LINE-MIB", "adslAturChanPerfPrev1DayCorrectedBlks"), ("ADSL-LINE-MIB", "adslAturChanPerfPrev1DayUncorrectBlks"), ("ADSL-LINE-MIB", "adslAturChanIntervalReceivedBlks"), ("ADSL-LINE-MIB", "adslAturChanIntervalTransmittedBlks"), ("ADSL-LINE-MIB", "adslAturChanIntervalCorrectedBlks"), ("ADSL-LINE-MIB", "adslAturChanIntervalUncorrectBlks"), ("ADSL-LINE-MIB", "adslAturChanIntervalValidData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adslAturChanPerformanceGroup = adslAturChanPerformanceGroup.setStatus('current')
if mibBuilder.loadTexts: adslAturChanPerformanceGroup.setDescription('A collection of objects providing channel block performance information on an ADSL channel (ATU-C end).')
adslLineConfProfileGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 94, 1, 3, 1, 10)).setObjects(("ADSL-LINE-MIB", "adslAtucConfRateMode"), ("ADSL-LINE-MIB", "adslAtucConfRateChanRatio"), ("ADSL-LINE-MIB", "adslAtucConfTargetSnrMgn"), ("ADSL-LINE-MIB", "adslAtucConfMaxSnrMgn"), ("ADSL-LINE-MIB", "adslAtucConfMinSnrMgn"), ("ADSL-LINE-MIB", "adslAtucConfDownshiftSnrMgn"), ("ADSL-LINE-MIB", "adslAtucConfUpshiftSnrMgn"), ("ADSL-LINE-MIB", "adslAtucConfMinUpshiftTime"), ("ADSL-LINE-MIB", "adslAtucConfMinDownshiftTime"), ("ADSL-LINE-MIB", "adslAtucChanConfFastMinTxRate"), ("ADSL-LINE-MIB", "adslAtucChanConfInterleaveMinTxRate"), ("ADSL-LINE-MIB", "adslAtucChanConfFastMaxTxRate"), ("ADSL-LINE-MIB", "adslAtucChanConfInterleaveMaxTxRate"), ("ADSL-LINE-MIB", "adslAtucChanConfMaxInterleaveDelay"), ("ADSL-LINE-MIB", "adslAturConfRateMode"), ("ADSL-LINE-MIB", "adslAturConfRateChanRatio"), ("ADSL-LINE-MIB", "adslAturConfTargetSnrMgn"), ("ADSL-LINE-MIB", "adslAturConfMaxSnrMgn"), ("ADSL-LINE-MIB", "adslAturConfMinSnrMgn"), ("ADSL-LINE-MIB", "adslAturConfDownshiftSnrMgn"), ("ADSL-LINE-MIB", "adslAturConfUpshiftSnrMgn"), ("ADSL-LINE-MIB", "adslAturConfMinUpshiftTime"), ("ADSL-LINE-MIB", "adslAturConfMinDownshiftTime"), ("ADSL-LINE-MIB", "adslAturChanConfFastMinTxRate"), ("ADSL-LINE-MIB", "adslAturChanConfInterleaveMinTxRate"), ("ADSL-LINE-MIB", "adslAturChanConfFastMaxTxRate"), ("ADSL-LINE-MIB", "adslAturChanConfInterleaveMaxTxRate"), ("ADSL-LINE-MIB", "adslAturChanConfMaxInterleaveDelay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adslLineConfProfileGroup = adslLineConfProfileGroup.setStatus('current')
if mibBuilder.loadTexts: adslLineConfProfileGroup.setDescription('A collection of objects providing provisioning information about an ADSL Line.')
adslLineAlarmConfProfileGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 94, 1, 3, 1, 11)).setObjects(("ADSL-LINE-MIB", "adslAtucThresh15MinLofs"), ("ADSL-LINE-MIB", "adslAtucThresh15MinLoss"), ("ADSL-LINE-MIB", "adslAtucThresh15MinLols"), ("ADSL-LINE-MIB", "adslAtucThresh15MinLprs"), ("ADSL-LINE-MIB", "adslAtucThresh15MinESs"), ("ADSL-LINE-MIB", "adslAtucThreshFastRateUp"), ("ADSL-LINE-MIB", "adslAtucThreshInterleaveRateUp"), ("ADSL-LINE-MIB", "adslAtucThreshFastRateDown"), ("ADSL-LINE-MIB", "adslAtucThreshInterleaveRateDown"), ("ADSL-LINE-MIB", "adslAtucInitFailureTrapEnable"), ("ADSL-LINE-MIB", "adslAturThresh15MinLofs"), ("ADSL-LINE-MIB", "adslAturThresh15MinLoss"), ("ADSL-LINE-MIB", "adslAturThresh15MinLprs"), ("ADSL-LINE-MIB", "adslAturThresh15MinESs"), ("ADSL-LINE-MIB", "adslAturThreshFastRateUp"), ("ADSL-LINE-MIB", "adslAturThreshInterleaveRateUp"), ("ADSL-LINE-MIB", "adslAturThreshFastRateDown"), ("ADSL-LINE-MIB", "adslAturThreshInterleaveRateDown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adslLineAlarmConfProfileGroup = adslLineAlarmConfProfileGroup.setStatus('current')
if mibBuilder.loadTexts: adslLineAlarmConfProfileGroup.setDescription('A collection of objects providing alarm provisioning information about an ADSL Line.')
adslLineConfProfileControlGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 94, 1, 3, 1, 12)).setObjects(("ADSL-LINE-MIB", "adslLineConfProfile"), ("ADSL-LINE-MIB", "adslLineAlarmConfProfile"), ("ADSL-LINE-MIB", "adslLineConfProfileRowStatus"), ("ADSL-LINE-MIB", "adslLineAlarmConfProfileRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adslLineConfProfileControlGroup = adslLineConfProfileControlGroup.setStatus('current')
if mibBuilder.loadTexts: adslLineConfProfileControlGroup.setDescription('A collection of objects providing profile control for the ADSL system.')
adslNotificationsGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 10, 94, 1, 3, 1, 13)).setObjects(("ADSL-LINE-MIB", "adslAtucPerfLofsThreshTrap"), ("ADSL-LINE-MIB", "adslAtucPerfLossThreshTrap"), ("ADSL-LINE-MIB", "adslAtucPerfLprsThreshTrap"), ("ADSL-LINE-MIB", "adslAtucPerfESsThreshTrap"), ("ADSL-LINE-MIB", "adslAtucRateChangeTrap"), ("ADSL-LINE-MIB", "adslAtucPerfLolsThreshTrap"), ("ADSL-LINE-MIB", "adslAtucInitFailureTrap"), ("ADSL-LINE-MIB", "adslAturPerfLofsThreshTrap"), ("ADSL-LINE-MIB", "adslAturPerfLossThreshTrap"), ("ADSL-LINE-MIB", "adslAturPerfLprsThreshTrap"), ("ADSL-LINE-MIB", "adslAturPerfESsThreshTrap"), ("ADSL-LINE-MIB", "adslAturRateChangeTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adslNotificationsGroup = adslNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: adslNotificationsGroup.setDescription('The collection of adsl notifications.')
adslAturLineGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 94, 1, 3, 1, 14)).setObjects(("ADSL-LINE-MIB", "adslLineCoding"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adslAturLineGroup = adslAturLineGroup.setStatus('current')
if mibBuilder.loadTexts: adslAturLineGroup.setDescription('A collection of objects providing configuration information about an ADSL Line on the ATU-R side.')
adslAturPhysicalGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 94, 1, 3, 1, 15)).setObjects(("ADSL-LINE-MIB", "adslAtucInvVendorID"), ("ADSL-LINE-MIB", "adslAtucInvVersionNumber"), ("ADSL-LINE-MIB", "adslAtucCurrOutputPwr"), ("ADSL-LINE-MIB", "adslAtucCurrAttainableRate"), ("ADSL-LINE-MIB", "adslAturInvSerialNumber"), ("ADSL-LINE-MIB", "adslAturInvVendorID"), ("ADSL-LINE-MIB", "adslAturInvVersionNumber"), ("ADSL-LINE-MIB", "adslAturCurrSnrMgn"), ("ADSL-LINE-MIB", "adslAturCurrAtn"), ("ADSL-LINE-MIB", "adslAturCurrStatus"), ("ADSL-LINE-MIB", "adslAturCurrOutputPwr"), ("ADSL-LINE-MIB", "adslAturCurrAttainableRate"), ("ADSL-LINE-MIB", "adslAtucCurrStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adslAturPhysicalGroup = adslAturPhysicalGroup.setStatus('current')
if mibBuilder.loadTexts: adslAturPhysicalGroup.setDescription('A collection of objects providing physical configuration information of the ADSL Line on the ATU-R side.')
adslAturChannelGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 94, 1, 3, 1, 16)).setObjects(("ADSL-LINE-MIB", "adslAtucChanInterleaveDelay"), ("ADSL-LINE-MIB", "adslAtucChanCurrTxRate"), ("ADSL-LINE-MIB", "adslAtucChanPrevTxRate"), ("ADSL-LINE-MIB", "adslAturChanInterleaveDelay"), ("ADSL-LINE-MIB", "adslAturChanCurrTxRate"), ("ADSL-LINE-MIB", "adslAturChanPrevTxRate"), ("ADSL-LINE-MIB", "adslAturChanCrcBlockLength"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adslAturChannelGroup = adslAturChannelGroup.setStatus('current')
if mibBuilder.loadTexts: adslAturChannelGroup.setDescription('A collection of objects providing configuration information about an ADSL channel on the ATU-R side.')
adslAturAtucPhysPerfRawCounterGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 94, 1, 3, 1, 17)).setObjects(("ADSL-LINE-MIB", "adslAtucPerfLofs"), ("ADSL-LINE-MIB", "adslAtucPerfLoss"), ("ADSL-LINE-MIB", "adslAtucPerfESs"), ("ADSL-LINE-MIB", "adslAtucPerfInits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adslAturAtucPhysPerfRawCounterGroup = adslAturAtucPhysPerfRawCounterGroup.setStatus('current')
if mibBuilder.loadTexts: adslAturAtucPhysPerfRawCounterGroup.setDescription('A collection of objects providing raw performance counts on an ADSL Line (ATU-C end) provided by the ATU-R agent.')
adslAturAtucPhysPerfIntervalGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 94, 1, 3, 1, 18)).setObjects(("ADSL-LINE-MIB", "adslAtucPerfValidIntervals"), ("ADSL-LINE-MIB", "adslAtucPerfInvalidIntervals"), ("ADSL-LINE-MIB", "adslAtucPerfCurr15MinTimeElapsed"), ("ADSL-LINE-MIB", "adslAtucPerfCurr15MinLofs"), ("ADSL-LINE-MIB", "adslAtucPerfCurr15MinLoss"), ("ADSL-LINE-MIB", "adslAtucPerfCurr15MinESs"), ("ADSL-LINE-MIB", "adslAtucPerfCurr15MinInits"), ("ADSL-LINE-MIB", "adslAtucPerfCurr1DayTimeElapsed"), ("ADSL-LINE-MIB", "adslAtucPerfCurr1DayLofs"), ("ADSL-LINE-MIB", "adslAtucPerfCurr1DayLoss"), ("ADSL-LINE-MIB", "adslAtucPerfCurr1DayESs"), ("ADSL-LINE-MIB", "adslAtucPerfCurr1DayInits"), ("ADSL-LINE-MIB", "adslAtucPerfPrev1DayMoniSecs"), ("ADSL-LINE-MIB", "adslAtucPerfPrev1DayLofs"), ("ADSL-LINE-MIB", "adslAtucPerfPrev1DayLoss"), ("ADSL-LINE-MIB", "adslAtucPerfPrev1DayESs"), ("ADSL-LINE-MIB", "adslAtucPerfPrev1DayInits"), ("ADSL-LINE-MIB", "adslAtucIntervalLofs"), ("ADSL-LINE-MIB", "adslAtucIntervalLoss"), ("ADSL-LINE-MIB", "adslAtucIntervalESs"), ("ADSL-LINE-MIB", "adslAtucIntervalInits"), ("ADSL-LINE-MIB", "adslAtucIntervalValidData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adslAturAtucPhysPerfIntervalGroup = adslAturAtucPhysPerfIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: adslAturAtucPhysPerfIntervalGroup.setDescription('A collection of objects providing current 15-minute, 1-day; and previous 1-day performance counts on ADSL Line (ATU-C end) provided by the ATU-R agent.')
adslAturAturPhysPerfRawCounterGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 94, 1, 3, 1, 19)).setObjects(("ADSL-LINE-MIB", "adslAturPerfLofs"), ("ADSL-LINE-MIB", "adslAturPerfLoss"), ("ADSL-LINE-MIB", "adslAturPerfLprs"), ("ADSL-LINE-MIB", "adslAturPerfESs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adslAturAturPhysPerfRawCounterGroup = adslAturAturPhysPerfRawCounterGroup.setStatus('current')
if mibBuilder.loadTexts: adslAturAturPhysPerfRawCounterGroup.setDescription('A collection of objects providing raw performance counts on an ADSL Line (ATU-R end) provided by the ATU-R agent.')
adslAturAturPhysPerfIntervalGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 94, 1, 3, 1, 20)).setObjects(("ADSL-LINE-MIB", "adslAturPerfValidIntervals"), ("ADSL-LINE-MIB", "adslAturPerfInvalidIntervals"), ("ADSL-LINE-MIB", "adslAturPerfCurr15MinTimeElapsed"), ("ADSL-LINE-MIB", "adslAturPerfCurr15MinLofs"), ("ADSL-LINE-MIB", "adslAturPerfCurr15MinLoss"), ("ADSL-LINE-MIB", "adslAturPerfCurr15MinLprs"), ("ADSL-LINE-MIB", "adslAturPerfCurr15MinESs"), ("ADSL-LINE-MIB", "adslAturPerfCurr1DayTimeElapsed"), ("ADSL-LINE-MIB", "adslAturPerfCurr1DayLofs"), ("ADSL-LINE-MIB", "adslAturPerfCurr1DayLoss"), ("ADSL-LINE-MIB", "adslAturPerfCurr1DayLprs"), ("ADSL-LINE-MIB", "adslAturPerfCurr1DayESs"), ("ADSL-LINE-MIB", "adslAturPerfPrev1DayMoniSecs"), ("ADSL-LINE-MIB", "adslAturPerfPrev1DayLofs"), ("ADSL-LINE-MIB", "adslAturPerfPrev1DayLoss"), ("ADSL-LINE-MIB", "adslAturPerfPrev1DayLprs"), ("ADSL-LINE-MIB", "adslAturPerfPrev1DayESs"), ("ADSL-LINE-MIB", "adslAturIntervalLofs"), ("ADSL-LINE-MIB", "adslAturIntervalLoss"), ("ADSL-LINE-MIB", "adslAturIntervalLprs"), ("ADSL-LINE-MIB", "adslAturIntervalESs"), ("ADSL-LINE-MIB", "adslAturIntervalValidData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adslAturAturPhysPerfIntervalGroup = adslAturAturPhysPerfIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: adslAturAturPhysPerfIntervalGroup.setDescription('A collection of objects providing current 15-minute, 1-day; and previous 1-day performance counts on ADSL Line (ATU-R end) provided by the ATU-R agent.')
adslAturAtucChanPerformanceGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 94, 1, 3, 1, 21)).setObjects(("ADSL-LINE-MIB", "adslAtucChanReceivedBlks"), ("ADSL-LINE-MIB", "adslAtucChanTransmittedBlks"), ("ADSL-LINE-MIB", "adslAtucChanCorrectedBlks"), ("ADSL-LINE-MIB", "adslAtucChanUncorrectBlks"), ("ADSL-LINE-MIB", "adslAtucChanPerfCurr15MinTimeElapsed"), ("ADSL-LINE-MIB", "adslAtucChanPerfCurr15MinReceivedBlks"), ("ADSL-LINE-MIB", "adslAtucChanPerfCurr15MinTransmittedBlks"), ("ADSL-LINE-MIB", "adslAtucChanPerfCurr15MinCorrectedBlks"), ("ADSL-LINE-MIB", "adslAtucChanPerfCurr15MinUncorrectBlks"), ("ADSL-LINE-MIB", "adslAtucChanPerfCurr1DayTimeElapsed"), ("ADSL-LINE-MIB", "adslAtucChanPerfCurr1DayReceivedBlks"), ("ADSL-LINE-MIB", "adslAtucChanPerfCurr1DayTransmittedBlks"), ("ADSL-LINE-MIB", "adslAtucChanPerfCurr1DayCorrectedBlks"), ("ADSL-LINE-MIB", "adslAtucChanPerfCurr1DayUncorrectBlks"), ("ADSL-LINE-MIB", "adslAtucChanPerfPrev1DayMoniSecs"), ("ADSL-LINE-MIB", "adslAtucChanPerfPrev1DayReceivedBlks"), ("ADSL-LINE-MIB", "adslAtucChanPerfPrev1DayTransmittedBlks"), ("ADSL-LINE-MIB", "adslAtucChanPerfPrev1DayCorrectedBlks"), ("ADSL-LINE-MIB", "adslAtucChanPerfPrev1DayUncorrectBlks"), ("ADSL-LINE-MIB", "adslAtucChanPerfValidIntervals"), ("ADSL-LINE-MIB", "adslAtucChanPerfInvalidIntervals"), ("ADSL-LINE-MIB", "adslAtucChanIntervalReceivedBlks"), ("ADSL-LINE-MIB", "adslAtucChanIntervalTransmittedBlks"), ("ADSL-LINE-MIB", "adslAtucChanIntervalCorrectedBlks"), ("ADSL-LINE-MIB", "adslAtucChanIntervalUncorrectBlks"), ("ADSL-LINE-MIB", "adslAtucChanIntervalValidData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adslAturAtucChanPerformanceGroup = adslAturAtucChanPerformanceGroup.setStatus('current')
if mibBuilder.loadTexts: adslAturAtucChanPerformanceGroup.setDescription('A collection of objects providing channel block performance information on an ADSL channel (ATU-C end) provided by the ATU-R agent.')
adslAturAturChanPerformanceGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 94, 1, 3, 1, 22)).setObjects(("ADSL-LINE-MIB", "adslAturChanReceivedBlks"), ("ADSL-LINE-MIB", "adslAturChanTransmittedBlks"), ("ADSL-LINE-MIB", "adslAturChanCorrectedBlks"), ("ADSL-LINE-MIB", "adslAturChanUncorrectBlks"), ("ADSL-LINE-MIB", "adslAturChanPerfValidIntervals"), ("ADSL-LINE-MIB", "adslAturChanPerfInvalidIntervals"), ("ADSL-LINE-MIB", "adslAturChanPerfCurr15MinTimeElapsed"), ("ADSL-LINE-MIB", "adslAturChanPerfCurr15MinReceivedBlks"), ("ADSL-LINE-MIB", "adslAturChanPerfCurr15MinTransmittedBlks"), ("ADSL-LINE-MIB", "adslAturChanPerfCurr15MinCorrectedBlks"), ("ADSL-LINE-MIB", "adslAturChanPerfCurr15MinUncorrectBlks"), ("ADSL-LINE-MIB", "adslAturChanPerfCurr1DayTimeElapsed"), ("ADSL-LINE-MIB", "adslAturChanPerfCurr1DayReceivedBlks"), ("ADSL-LINE-MIB", "adslAturChanPerfCurr1DayTransmittedBlks"), ("ADSL-LINE-MIB", "adslAturChanPerfCurr1DayCorrectedBlks"), ("ADSL-LINE-MIB", "adslAturChanPerfCurr1DayUncorrectBlks"), ("ADSL-LINE-MIB", "adslAturChanPerfPrev1DayMoniSecs"), ("ADSL-LINE-MIB", "adslAturChanPerfPrev1DayReceivedBlks"), ("ADSL-LINE-MIB", "adslAturChanPerfPrev1DayTransmittedBlks"), ("ADSL-LINE-MIB", "adslAturChanPerfPrev1DayCorrectedBlks"), ("ADSL-LINE-MIB", "adslAturChanPerfPrev1DayUncorrectBlks"), ("ADSL-LINE-MIB", "adslAturChanIntervalReceivedBlks"), ("ADSL-LINE-MIB", "adslAturChanIntervalTransmittedBlks"), ("ADSL-LINE-MIB", "adslAturChanIntervalCorrectedBlks"), ("ADSL-LINE-MIB", "adslAturChanIntervalUncorrectBlks"), ("ADSL-LINE-MIB", "adslAturChanIntervalValidData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adslAturAturChanPerformanceGroup = adslAturAturChanPerformanceGroup.setStatus('current')
if mibBuilder.loadTexts: adslAturAturChanPerformanceGroup.setDescription('A collection of objects providing channel block performance information on an ADSL channel (ATU-R end) provided by the ATU-R agent.')
adslAturLineAlarmConfProfileGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 94, 1, 3, 1, 23)).setObjects(("ADSL-LINE-MIB", "adslAtucThresh15MinLofs"), ("ADSL-LINE-MIB", "adslAtucThresh15MinLoss"), ("ADSL-LINE-MIB", "adslAtucThresh15MinESs"), ("ADSL-LINE-MIB", "adslAtucThreshFastRateUp"), ("ADSL-LINE-MIB", "adslAtucThreshInterleaveRateUp"), ("ADSL-LINE-MIB", "adslAtucThreshFastRateDown"), ("ADSL-LINE-MIB", "adslAtucThreshInterleaveRateDown"), ("ADSL-LINE-MIB", "adslAtucInitFailureTrapEnable"), ("ADSL-LINE-MIB", "adslAturThresh15MinLofs"), ("ADSL-LINE-MIB", "adslAturThresh15MinLoss"), ("ADSL-LINE-MIB", "adslAturThresh15MinLprs"), ("ADSL-LINE-MIB", "adslAturThresh15MinESs"), ("ADSL-LINE-MIB", "adslAturThreshFastRateUp"), ("ADSL-LINE-MIB", "adslAturThreshInterleaveRateUp"), ("ADSL-LINE-MIB", "adslAturThreshFastRateDown"), ("ADSL-LINE-MIB", "adslAturThreshInterleaveRateDown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adslAturLineAlarmConfProfileGroup = adslAturLineAlarmConfProfileGroup.setStatus('current')
if mibBuilder.loadTexts: adslAturLineAlarmConfProfileGroup.setDescription('A collection of objects providing alarm provisioning information about an ADSL Line provided by the ATU-R agent.')
adslAturLineConfProfileControlGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 94, 1, 3, 1, 24)).setObjects(("ADSL-LINE-MIB", "adslLineAlarmConfProfile"), ("ADSL-LINE-MIB", "adslLineAlarmConfProfileRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adslAturLineConfProfileControlGroup = adslAturLineConfProfileControlGroup.setStatus('current')
if mibBuilder.loadTexts: adslAturLineConfProfileControlGroup.setDescription('A collection of objects providing profile control for the ADSL system by the ATU-R agent.')
adslAturNotificationsGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 10, 94, 1, 3, 1, 25)).setObjects(("ADSL-LINE-MIB", "adslAtucPerfLofsThreshTrap"), ("ADSL-LINE-MIB", "adslAtucPerfLossThreshTrap"), ("ADSL-LINE-MIB", "adslAtucPerfESsThreshTrap"), ("ADSL-LINE-MIB", "adslAtucRateChangeTrap"), ("ADSL-LINE-MIB", "adslAturPerfLofsThreshTrap"), ("ADSL-LINE-MIB", "adslAturPerfLossThreshTrap"), ("ADSL-LINE-MIB", "adslAturPerfLprsThreshTrap"), ("ADSL-LINE-MIB", "adslAturPerfESsThreshTrap"), ("ADSL-LINE-MIB", "adslAturRateChangeTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adslAturNotificationsGroup = adslAturNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: adslAturNotificationsGroup.setDescription('The collection of ADSL notifications implemented by the ATU-R agent.')
mibBuilder.exportSymbols("ADSL-LINE-MIB", adslAturAtucChanPerformanceGroup=adslAturAtucChanPerformanceGroup, adslAturPerfCurr15MinLprs=adslAturPerfCurr15MinLprs, adslAtucThreshFastRateDown=adslAtucThreshFastRateDown, adslAturConfMinUpshiftTime=adslAturConfMinUpshiftTime, adslAturChanPerfCurr1DayCorrectedBlks=adslAturChanPerfCurr1DayCorrectedBlks, adslAturThreshFastRateUp=adslAturThreshFastRateUp, adslLineSpecific=adslLineSpecific, adslAturChanConfInterleaveMaxTxRate=adslAturChanConfInterleaveMaxTxRate, adslAturThresh15MinESs=adslAturThresh15MinESs, adslAtucPerfCurr15MinTimeElapsed=adslAtucPerfCurr15MinTimeElapsed, adslAtucCurrAtn=adslAtucCurrAtn, adslAtucChanPerfPrev1DayMoniSecs=adslAtucChanPerfPrev1DayMoniSecs, adslAtucChanConfFastMaxTxRate=adslAtucChanConfFastMaxTxRate, adslAtucPerfLossThreshTrap=adslAtucPerfLossThreshTrap, adslAtucConfMaxSnrMgn=adslAtucConfMaxSnrMgn, adslLineConfProfileRowStatus=adslLineConfProfileRowStatus, adslAtucChanPerfCurr1DayUncorrectBlks=adslAtucChanPerfCurr1DayUncorrectBlks, adslAturPerfLprs=adslAturPerfLprs, adslAtucPerfCurr1DayLprs=adslAtucPerfCurr1DayLprs, adslAturAturPhysPerfIntervalGroup=adslAturAturPhysPerfIntervalGroup, adslAtucPerfCurr15MinLoss=adslAtucPerfCurr15MinLoss, adslLineAlarmConfProfileTable=adslLineAlarmConfProfileTable, adslAturChanPerfCurr15MinTimeElapsed=adslAturChanPerfCurr15MinTimeElapsed, adslAtucPhysTable=adslAtucPhysTable, adslAturPerfCurr15MinLofs=adslAturPerfCurr15MinLofs, adslLineConfProfileControlGroup=adslLineConfProfileControlGroup, adslAturTraps=adslAturTraps, adslAturPerfCurr1DayESs=adslAturPerfCurr1DayESs, adslAturPerfLossThreshTrap=adslAturPerfLossThreshTrap, adslAtucConfUpshiftSnrMgn=adslAtucConfUpshiftSnrMgn, adslAtucPerfLprsThreshTrap=adslAtucPerfLprsThreshTrap, adslAtucPerfCurr15MinInits=adslAtucPerfCurr15MinInits, adslAtucCurrOutputPwr=adslAtucCurrOutputPwr, adslAturInvVendorID=adslAturInvVendorID, adslAtucIntervalLols=adslAtucIntervalLols, adslAturIntervalValidData=adslAturIntervalValidData, adslAturThreshInterleaveRateDown=adslAturThreshInterleaveRateDown, adslAturCurrStatus=adslAturCurrStatus, adslLineConfProfile=adslLineConfProfile, adslAtucChanPerfCurr1DayTransmittedBlks=adslAtucChanPerfCurr1DayTransmittedBlks, adslAtucInvSerialNumber=adslAtucInvSerialNumber, adslAtucPerfInvalidIntervals=adslAtucPerfInvalidIntervals, adslLineConfProfileName=adslLineConfProfileName, adslAtucPerfLoss=adslAtucPerfLoss, adslAturConfRateMode=adslAturConfRateMode, adslAturChanPerfDataEntry=adslAturChanPerfDataEntry, adslPhysicalGroup=adslPhysicalGroup, adslAtucThresh15MinLoss=adslAtucThresh15MinLoss, adslAtucChanPerfPrev1DayCorrectedBlks=adslAtucChanPerfPrev1DayCorrectedBlks, adslAturChanCrcBlockLength=adslAturChanCrcBlockLength, adslAturConfDownshiftSnrMgn=adslAturConfDownshiftSnrMgn, adslAturPerfPrev1DayLprs=adslAturPerfPrev1DayLprs, adslAturCurrAttainableRate=adslAturCurrAttainableRate, adslAtucChanTransmittedBlks=adslAtucChanTransmittedBlks, adslAtucChanPerfCurr1DayCorrectedBlks=adslAtucChanPerfCurr1DayCorrectedBlks, adslLCSMib=adslLCSMib, adslAturCurrAtn=adslAturCurrAtn, adslAturChanPerfPrev1DayCorrectedBlks=adslAturChanPerfPrev1DayCorrectedBlks, adslAtucPerfCurr1DayLofs=adslAtucPerfCurr1DayLofs, adslAtucChanPerfCurr1DayReceivedBlks=adslAtucChanPerfCurr1DayReceivedBlks, adslAtucIntervalEntry=adslAtucIntervalEntry, adslAturChanTransmittedBlks=adslAturChanTransmittedBlks, adslAturChanPerfCurr1DayTimeElapsed=adslAturChanPerfCurr1DayTimeElapsed, adslAturChanIntervalNumber=adslAturChanIntervalNumber, adslAtucConfMinSnrMgn=adslAtucConfMinSnrMgn, adslAturPerfCurr1DayTimeElapsed=adslAturPerfCurr1DayTimeElapsed, PYSNMP_MODULE_ID=adslMIB, adslAturCurrOutputPwr=adslAturCurrOutputPwr, adslAtucPerfCurr15MinLols=adslAtucPerfCurr15MinLols, adslAtucPerfLofsThreshTrap=adslAtucPerfLofsThreshTrap, adslAtucRateChangeTrap=adslAtucRateChangeTrap, adslAturChanTable=adslAturChanTable, adslAturIntervalNumber=adslAturIntervalNumber, adslAtucPerfPrev1DayESs=adslAtucPerfPrev1DayESs, adslAtucIntervalNumber=adslAtucIntervalNumber, adslAturPhysicalGroup=adslAturPhysicalGroup, adslAtucChanPerfCurr15MinUncorrectBlks=adslAtucChanPerfCurr15MinUncorrectBlks, adslAtucPerfPrev1DayInits=adslAtucPerfPrev1DayInits, adslAturPerfLofsThreshTrap=adslAturPerfLofsThreshTrap, adslAturChanPerfCurr15MinTransmittedBlks=adslAturChanPerfCurr15MinTransmittedBlks, adslAtucPerfPrev1DayLprs=adslAtucPerfPrev1DayLprs, adslAturChanPerfCurr1DayUncorrectBlks=adslAturChanPerfCurr1DayUncorrectBlks, adslAtucChanConfInterleaveMinTxRate=adslAtucChanConfInterleaveMinTxRate, adslAtucThreshFastRateUp=adslAtucThreshFastRateUp, adslAturLineGroup=adslAturLineGroup, adslAturChanPerformanceGroup=adslAturChanPerformanceGroup, adslAturChanPerfCurr15MinReceivedBlks=adslAturChanPerfCurr15MinReceivedBlks, adslAtucChanPerfCurr15MinTransmittedBlks=adslAtucChanPerfCurr15MinTransmittedBlks, adslAturThreshFastRateDown=adslAturThreshFastRateDown, adslAtucConfTargetSnrMgn=adslAtucConfTargetSnrMgn, adslAtucChanIntervalUncorrectBlks=adslAtucChanIntervalUncorrectBlks, adslAturInvVersionNumber=adslAturInvVersionNumber, adslAtucChanPerfPrev1DayTransmittedBlks=adslAtucChanPerfPrev1DayTransmittedBlks, adslAturChanIntervalUncorrectBlks=adslAturChanIntervalUncorrectBlks, adslNotificationsGroup=adslNotificationsGroup, adslMIB=adslMIB, adslAtucChanPerfInvalidIntervals=adslAtucChanPerfInvalidIntervals, adslLineMibAtucCompliance=adslLineMibAtucCompliance, adslAturPerfPrev1DayMoniSecs=adslAturPerfPrev1DayMoniSecs, adslAturNotificationsGroup=adslAturNotificationsGroup, adslAtucPerfPrev1DayLofs=adslAtucPerfPrev1DayLofs, adslAtucChanConfMaxInterleaveDelay=adslAtucChanConfMaxInterleaveDelay, adslAtucChanPerfCurr15MinCorrectedBlks=adslAtucChanPerfCurr15MinCorrectedBlks, adslAturPerfCurr1DayLoss=adslAturPerfCurr1DayLoss, adslAtucThresh15MinLols=adslAtucThresh15MinLols, adslAturConfRateChanRatio=adslAturConfRateChanRatio, adslAtucCurrStatus=adslAtucCurrStatus, adslAturPerfLprsThreshTrap=adslAturPerfLprsThreshTrap, adslAtucChanIntervalCorrectedBlks=adslAtucChanIntervalCorrectedBlks, adslAturPhysPerfRawCounterGroup=adslAturPhysPerfRawCounterGroup, adslAtucPerfLofs=adslAtucPerfLofs, adslTraps=adslTraps, adslCompliances=adslCompliances, adslAturPhysTable=adslAturPhysTable, adslLineMibAturCompliance=adslLineMibAturCompliance, adslLineAlarmConfProfileGroup=adslLineAlarmConfProfileGroup, adslAtucPerfCurr15MinESs=adslAtucPerfCurr15MinESs, adslAturAturPhysPerfRawCounterGroup=adslAturAturPhysPerfRawCounterGroup, adslAtucIntervalESs=adslAtucIntervalESs, adslAturConfTargetSnrMgn=adslAturConfTargetSnrMgn, adslAturChanReceivedBlks=adslAturChanReceivedBlks, adslAturPhysEntry=adslAturPhysEntry, adslAturChanCorrectedBlks=adslAturChanCorrectedBlks, adslAturChanConfFastMinTxRate=adslAturChanConfFastMinTxRate, adslAturChanInterleaveDelay=adslAturChanInterleaveDelay, adslAtucPhysEntry=adslAtucPhysEntry, adslAtucChanPerfValidIntervals=adslAtucChanPerfValidIntervals, adslAturChannelGroup=adslAturChannelGroup, adslAturChanIntervalTable=adslAturChanIntervalTable, adslAtucConfRateMode=adslAtucConfRateMode, adslAturPhysPerfIntervalGroup=adslAturPhysPerfIntervalGroup, adslAtucChanIntervalTable=adslAtucChanIntervalTable, adslAturAtucPhysPerfRawCounterGroup=adslAturAtucPhysPerfRawCounterGroup, adslAturChanPerfPrev1DayReceivedBlks=adslAturChanPerfPrev1DayReceivedBlks, adslAtucChanEntry=adslAtucChanEntry, adslAturChanPerfDataTable=adslAturChanPerfDataTable, adslAturChanIntervalValidData=adslAturChanIntervalValidData, adslAturLineAlarmConfProfileGroup=adslAturLineAlarmConfProfileGroup, adslAturChanConfInterleaveMinTxRate=adslAturChanConfInterleaveMinTxRate, adslAtucPhysPerfIntervalGroup=adslAtucPhysPerfIntervalGroup, adslLineConfProfileGroup=adslLineConfProfileGroup, adslAturPerfCurr1DayLprs=adslAturPerfCurr1DayLprs, adslAtucChanPerfPrev1DayReceivedBlks=adslAtucChanPerfPrev1DayReceivedBlks, adslAturPerfCurr15MinTimeElapsed=adslAturPerfCurr15MinTimeElapsed, adslAtucChanInterleaveDelay=adslAtucChanInterleaveDelay, adslAturPerfCurr15MinESs=adslAturPerfCurr15MinESs, adslAturPerfDataEntry=adslAturPerfDataEntry, adslAturChanPerfInvalidIntervals=adslAturChanPerfInvalidIntervals, adslAturChanIntervalTransmittedBlks=adslAturChanIntervalTransmittedBlks, adslAtucConfRateChanRatio=adslAtucConfRateChanRatio, adslAturChanConfMaxInterleaveDelay=adslAturChanConfMaxInterleaveDelay, adslLineAlarmConfProfileEntry=adslLineAlarmConfProfileEntry, adslAtucConfMinUpshiftTime=adslAtucConfMinUpshiftTime, adslAtucThreshInterleaveRateUp=adslAtucThreshInterleaveRateUp, adslAtucPerfCurr1DayLols=adslAtucPerfCurr1DayLols, adslAturPerfESsThreshTrap=adslAturPerfESsThreshTrap, adslAtucIntervalLofs=adslAtucIntervalLofs, adslAturPerfESs=adslAturPerfESs, adslAtucConfDownshiftSnrMgn=adslAtucConfDownshiftSnrMgn, adslLineCoding=adslLineCoding, adslAtucCurrSnrMgn=adslAtucCurrSnrMgn, adslAtucPerfCurr1DayInits=adslAtucPerfCurr1DayInits, adslAtucChanPerfCurr1DayTimeElapsed=adslAtucChanPerfCurr1DayTimeElapsed, adslLineEntry=adslLineEntry, adslAtucPerfPrev1DayMoniSecs=adslAtucPerfPrev1DayMoniSecs, adslLineAlarmConfProfile=adslLineAlarmConfProfile, adslAtucPerfLprs=adslAtucPerfLprs, adslLineAlarmConfProfileRowStatus=adslLineAlarmConfProfileRowStatus, adslAtucChanPerformanceGroup=adslAtucChanPerformanceGroup, adslAturIntervalESs=adslAturIntervalESs, adslAtucThreshInterleaveRateDown=adslAtucThreshInterleaveRateDown, adslAturThresh15MinLofs=adslAturThresh15MinLofs, adslAturPerfCurr15MinLoss=adslAturPerfCurr15MinLoss, adslAtucChanCrcBlockLength=adslAtucChanCrcBlockLength, adslAturChanIntervalReceivedBlks=adslAturChanIntervalReceivedBlks, adslAturChanIntervalCorrectedBlks=adslAturChanIntervalCorrectedBlks, adslAtucChanConfInterleaveMaxTxRate=adslAtucChanConfInterleaveMaxTxRate, adslAturCurrSnrMgn=adslAturCurrSnrMgn, adslAturIntervalLoss=adslAturIntervalLoss, adslAturPerfLoss=adslAturPerfLoss, adslAtucPerfDataEntry=adslAtucPerfDataEntry, adslAtucPerfPrev1DayLoss=adslAtucPerfPrev1DayLoss, adslAturIntervalLofs=adslAturIntervalLofs, adslLineMib=adslLineMib, adslAturThresh15MinLoss=adslAturThresh15MinLoss, adslAtucInvVersionNumber=adslAtucInvVersionNumber, adslAturChanPerfCurr15MinCorrectedBlks=adslAturChanPerfCurr15MinCorrectedBlks, adslAtucInvVendorID=adslAtucInvVendorID, adslAturIntervalLprs=adslAturIntervalLprs, adslAturPerfInvalidIntervals=adslAturPerfInvalidIntervals, adslAtucChanPerfDataEntry=adslAtucChanPerfDataEntry, adslAtucChanCorrectedBlks=adslAtucChanCorrectedBlks, adslAturChanPerfValidIntervals=adslAturChanPerfValidIntervals, adslAturChanPerfCurr1DayTransmittedBlks=adslAturChanPerfCurr1DayTransmittedBlks, adslAtucPerfCurr1DayLoss=adslAtucPerfCurr1DayLoss, adslAtucPerfLolsThreshTrap=adslAtucPerfLolsThreshTrap, adslAtucInitFailureTrapEnable=adslAtucInitFailureTrapEnable, adslAturConfMaxSnrMgn=adslAturConfMaxSnrMgn, adslAtucPerfDataTable=adslAtucPerfDataTable, adslAturIntervalEntry=adslAturIntervalEntry, adslAtucInitFailureTrap=adslAtucInitFailureTrap, adslAturChanPerfPrev1DayUncorrectBlks=adslAturChanPerfPrev1DayUncorrectBlks, adslMibObjects=adslMibObjects, adslAtucPerfCurr15MinLofs=adslAtucPerfCurr15MinLofs, adslAturConfUpshiftSnrMgn=adslAturConfUpshiftSnrMgn, adslAtucChanReceivedBlks=adslAtucChanReceivedBlks, adslAturPerfValidIntervals=adslAturPerfValidIntervals, adslAtucPerfCurr1DayTimeElapsed=adslAtucPerfCurr1DayTimeElapsed, adslAtucThresh15MinESs=adslAtucThresh15MinESs, adslAtucPerfInits=adslAtucPerfInits, adslAturInvSerialNumber=adslAturInvSerialNumber, adslAturChanPerfPrev1DayTransmittedBlks=adslAturChanPerfPrev1DayTransmittedBlks, adslAtucPhysPerfRawCounterGroup=adslAtucPhysPerfRawCounterGroup, adslAtucPerfCurr1DayESs=adslAtucPerfCurr1DayESs, adslAturChanEntry=adslAturChanEntry, adslGroups=adslGroups, adslLineAlarmConfProfileName=adslLineAlarmConfProfileName, adslLineTable=adslLineTable, adslChannelGroup=adslChannelGroup, adslAturChanPerfCurr15MinUncorrectBlks=adslAturChanPerfCurr15MinUncorrectBlks, adslAtucChanUncorrectBlks=adslAtucChanUncorrectBlks, adslAtucChanPerfPrev1DayUncorrectBlks=adslAtucChanPerfPrev1DayUncorrectBlks, adslAturChanPerfPrev1DayMoniSecs=adslAturChanPerfPrev1DayMoniSecs, adslAtucCurrAttainableRate=adslAtucCurrAttainableRate, adslAturChanCurrTxRate=adslAturChanCurrTxRate, adslAturConfMinSnrMgn=adslAturConfMinSnrMgn, adslAtucChanTable=adslAtucChanTable, adslAturPerfPrev1DayLofs=adslAturPerfPrev1DayLofs, adslAtucConfMinDownshiftTime=adslAtucConfMinDownshiftTime, adslAturPerfPrev1DayESs=adslAturPerfPrev1DayESs, adslAtucThresh15MinLprs=adslAtucThresh15MinLprs, adslAturChanPerfCurr1DayReceivedBlks=adslAturChanPerfCurr1DayReceivedBlks, adslLineConfProfileTable=adslLineConfProfileTable, adslAtucChanIntervalEntry=adslAtucChanIntervalEntry, adslAturPerfDataTable=adslAturPerfDataTable, adslConformance=adslConformance, adslAtucChanPerfDataTable=adslAtucChanPerfDataTable, adslAtucIntervalLprs=adslAtucIntervalLprs, adslLineConfProfileEntry=adslLineConfProfileEntry, adslAturChanConfFastMaxTxRate=adslAturChanConfFastMaxTxRate, adslAtucChanPerfCurr15MinReceivedBlks=adslAtucChanPerfCurr15MinReceivedBlks, adslAturConfMinDownshiftTime=adslAturConfMinDownshiftTime, adslAturChanUncorrectBlks=adslAturChanUncorrectBlks, adslAtucChanIntervalNumber=adslAtucChanIntervalNumber, adslAturPerfLofs=adslAturPerfLofs, adslAtucPerfESs=adslAtucPerfESs, adslAturChanPrevTxRate=adslAturChanPrevTxRate, adslAtucChanPrevTxRate=adslAtucChanPrevTxRate, adslAturThresh15MinLprs=adslAturThresh15MinLprs, adslAturPerfCurr1DayLofs=adslAturPerfCurr1DayLofs, adslAturIntervalTable=adslAturIntervalTable, adslAtucPerfLols=adslAtucPerfLols, adslAturAturChanPerformanceGroup=adslAturAturChanPerformanceGroup, adslAtucChanPerfCurr15MinTimeElapsed=adslAtucChanPerfCurr15MinTimeElapsed)
mibBuilder.exportSymbols("ADSL-LINE-MIB", adslAturChanIntervalEntry=adslAturChanIntervalEntry, adslAtucPerfValidIntervals=adslAtucPerfValidIntervals, adslAtucIntervalValidData=adslAtucIntervalValidData, adslAtucChanIntervalValidData=adslAtucChanIntervalValidData, adslAtucChanCurrTxRate=adslAtucChanCurrTxRate, adslAtucThresh15MinLofs=adslAtucThresh15MinLofs, adslAtucChanConfFastMinTxRate=adslAtucChanConfFastMinTxRate, adslAtucChanIntervalTransmittedBlks=adslAtucChanIntervalTransmittedBlks, adslAturPerfPrev1DayLoss=adslAturPerfPrev1DayLoss, adslAtucIntervalLoss=adslAtucIntervalLoss, adslAtucPerfESsThreshTrap=adslAtucPerfESsThreshTrap, adslLineGroup=adslLineGroup, adslAtucIntervalTable=adslAtucIntervalTable, adslAtucPerfCurr15MinLprs=adslAtucPerfCurr15MinLprs, adslAtucTraps=adslAtucTraps, adslAturThreshInterleaveRateUp=adslAturThreshInterleaveRateUp, adslAtucChanIntervalReceivedBlks=adslAtucChanIntervalReceivedBlks, adslAtucPerfPrev1DayLols=adslAtucPerfPrev1DayLols, adslLineType=adslLineType, adslAtucIntervalInits=adslAtucIntervalInits, adslAturRateChangeTrap=adslAturRateChangeTrap, adslAturAtucPhysPerfIntervalGroup=adslAturAtucPhysPerfIntervalGroup, adslAturLineConfProfileControlGroup=adslAturLineConfProfileControlGroup)
