#
# PySNMP MIB module RBN-CIRCUIT-GROUP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RBN-CIRCUIT-GROUP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:52:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
RbnQosClassId, RbnQosPolicyType = mibBuilder.importSymbols("RBN-QOS-MIB", "RbnQosClassId", "RbnQosPolicyType")
rbnMgmt, = mibBuilder.importSymbols("RBN-SMI", "rbnMgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Integer32, Unsigned32, ModuleIdentity, Bits, Counter32, Gauge32, MibIdentifier, iso, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ObjectIdentity, NotificationType, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Unsigned32", "ModuleIdentity", "Bits", "Counter32", "Gauge32", "MibIdentifier", "iso", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ObjectIdentity", "NotificationType", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
rbnCircuitGroupMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2352, 2, 43))
rbnCircuitGroupMib.setRevisions(('2008-07-30 00:00', '2007-07-25 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rbnCircuitGroupMib.setRevisionsDescriptions(("rbnCctGrpName object's maximum length has been increased from 39 to 80", 'Initial version.',))
if mibBuilder.loadTexts: rbnCircuitGroupMib.setLastUpdated('200807300000Z')
if mibBuilder.loadTexts: rbnCircuitGroupMib.setOrganization('Redback Networks, Inc.')
if mibBuilder.loadTexts: rbnCircuitGroupMib.setContactInfo(' Redback Networks, Inc. Postal: 300 Holger Way San Jose, CA 95134 USA Phone: +1 408 750 5000 Fax: +1 408 750 5599 ')
if mibBuilder.loadTexts: rbnCircuitGroupMib.setDescription('Defines objects which may be used to monitor circuit groups policies')
rbnCircuitGroupObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1))
rbnCircuitGroupConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 43, 2))
rbnCircuitGroupStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 1), )
if mibBuilder.loadTexts: rbnCircuitGroupStatsTable.setStatus('current')
if mibBuilder.loadTexts: rbnCircuitGroupStatsTable.setDescription('A table containing various Tx, Rx, and drop counters for each circuit group.')
rbnCircuitGroupStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 1, 1), ).setIndexNames((0, "RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpName"))
if mibBuilder.loadTexts: rbnCircuitGroupStatsEntry.setStatus('current')
if mibBuilder.loadTexts: rbnCircuitGroupStatsEntry.setDescription('A conceptual row in the rbnCircuitGroupStatsTable. Each row contains a set of packet and octet counters for a circuit group.')
rbnCctGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 113)))
if mibBuilder.loadTexts: rbnCctGrpName.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpName.setDescription('The name of the hierarchical group.')
rbnCctGrpTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpTxOctets.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpTxOctets.setDescription('The number of octets transmitted by the group including its children.')
rbnCctGrpTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpTxPackets.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpTxPackets.setDescription('The number of packets transmitted by the group including its children.')
rbnCctGrpTxMulticastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpTxMulticastOctets.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpTxMulticastOctets.setDescription('The number of multicast octets transmitted by the group including its children.')
rbnCctGrpTxMulticastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpTxMulticastPackets.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpTxMulticastPackets.setDescription('The number of multicast packets transmitted by the group including its children.')
rbnCctGrpRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRxOctets.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpRxOctets.setDescription('The number of octets received by the group including its children.')
rbnCctGrpRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRxPackets.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpRxPackets.setDescription('The number of packets received by the group including its children.')
rbnCctGrpRxMulticastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRxMulticastOctets.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpRxMulticastOctets.setDescription('The number of multicast octets received by the group including its children.')
rbnCctGrpRxMulticastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRxMulticastPackets.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpRxMulticastPackets.setDescription('The number of multicast packets received by the group including its children.')
rbnCctGrpAdjDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpAdjDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpAdjDroppedOctets.setDescription('The number of adjacency octets dropped.')
rbnCctGrpAdjDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpAdjDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpAdjDroppedPackets.setDescription('The number of adjacency packets dropped.')
rbnCctGrpDownDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpDownDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpDownDroppedOctets.setDescription('The number of down octets dropped.')
rbnCctGrpDownDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpDownDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpDownDroppedPackets.setDescription('The number of down packets dropped.')
rbnCctGrpUnreachDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpUnreachDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpUnreachDroppedOctets.setDescription('The number of unreachable octets dropped.')
rbnCctGrpUnreachDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpUnreachDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpUnreachDroppedPackets.setDescription('The number of unreachable packets dropped.')
rbnCctGrpUnknownEncapsOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpUnknownEncapsOctets.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpUnknownEncapsOctets.setDescription('The number octets dropped due to unknown encapsulation.')
rbnCctGrpUnknownEncapsPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpUnknownEncapsPackets.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpUnknownEncapsPackets.setDescription('The number of packets dropped due to unknown encapsulation.')
rbnCircuitGroupQTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 2), )
if mibBuilder.loadTexts: rbnCircuitGroupQTable.setStatus('current')
if mibBuilder.loadTexts: rbnCircuitGroupQTable.setDescription('A table containing various counters for each transmit queue assigned to a circuit group.')
rbnCircuitGroupQEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 2, 1), ).setIndexNames((0, "RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpName"), (0, "RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpQueueId"))
if mibBuilder.loadTexts: rbnCircuitGroupQEntry.setStatus('current')
if mibBuilder.loadTexts: rbnCircuitGroupQEntry.setDescription('A conceptual row in the rbnCircuitGroupQueueTable. Each row contains tx and drop counters for each transmit queue assigned to a circuit group.')
rbnCctGrpQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: rbnCctGrpQueueId.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpQueueId.setDescription('A unique identifier for a transmit queue used by the circuit.')
rbnCctGrpQTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpQTxOctets.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpQTxOctets.setDescription('The number of octets transmitted out of this queue. Discontinuities in the value of this counter can occur at re-initialization of the management system.')
rbnCctGrpQTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpQTxPackets.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpQTxPackets.setDescription('The number of packets transmitted out of this queue. Discontinuities in the value of this counter can occur at re-initialization of the management system.')
rbnCctGrpQWredDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpQWredDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpQWredDroppedOctets.setDescription('The number of octets dropped due to the application of a weighted random early detection algorithm. Discontinuities in the value of this counter can occur at re-initialization of the management system.')
rbnCctGrpQWredDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpQWredDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpQWredDroppedPkts.setDescription('The number of packets dropped due to the application of a weighted random early detection algorithm. Discontinuities in the value of this counter can occur at re-initialization of the management system.')
rbnCctGrpQTailDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpQTailDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpQTailDroppedOctets.setDescription('The number of octets dropped when the total number of packets in this queue was greater than the maximum threshold. Discontinuities in the value of this counter can occur at re-initialization of the management system.')
rbnCctGrpQTailDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpQTailDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpQTailDroppedPkts.setDescription('The number of packets dropped when the total number of packets in this queue was greater than the maximum threshold. Discontinuities in the value of this counter can occur at re-initialization of the management system.')
rbnCctGrpRLPolicyStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 3), )
if mibBuilder.loadTexts: rbnCctGrpRLPolicyStatsTable.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpRLPolicyStatsTable.setDescription('A table of counters for rate limit policies applied to circuit groups.')
rbnCctGrpRLPolicyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 3, 1), ).setIndexNames((0, "RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpName"), (0, "RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLPolicyType"))
if mibBuilder.loadTexts: rbnCctGrpRLPolicyStatsEntry.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpRLPolicyStatsEntry.setDescription('A conceptial row in the rbnCircuitGroupPolicyStatsTable. Each row contains counters for a rate limit policy applied to the circuit group. Note that each counter includes the sum of all the child circuits. ')
rbnCctGrpRLPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 3, 1, 1), RbnQosPolicyType())
if mibBuilder.loadTexts: rbnCctGrpRLPolicyType.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpRLPolicyType.setDescription('The type of the rate-limit policy which is applied to the circuit group.')
rbnCctGrpRLPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 39))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLPolicyName.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpRLPolicyName.setDescription('Name of the rate-limit policy.')
rbnCctGrpRLPolicyConformOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLPolicyConformOctets.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpRLPolicyConformOctets.setDescription('The number of octets that conform to the rate limit set on the circuit group for which counters are enabled.')
rbnCctGrpRLPolicyConformPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLPolicyConformPkts.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpRLPolicyConformPkts.setDescription('The number of packets that conform to the rate limit set on the circuit group for which counters are enabled.')
rbnCctGrpRLPolicyExceedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLPolicyExceedOctets.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpRLPolicyExceedOctets.setDescription('The number of octets that exceed the rate limit set on the interface for which class counters are enabled.')
rbnCctGrpRLPolicyExceedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLPolicyExceedPkts.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpRLPolicyExceedPkts.setDescription('The number of packets that exceed the rate limit set on the interface.')
rbnCctGrpRLPolicyExceedDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLPolicyExceedDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpRLPolicyExceedDroppedOctets.setDescription('The number of octets that were dropped due to the application of an exceed action on packets that exceed the rate limit set on the circuit group for which counters are enabled.')
rbnCctGrpRLPolicyExceedDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLPolicyExceedDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpRLPolicyExceedDroppedPkts.setDescription('The number of packets that were dropped due to the application of an exceed action on packets that exceed the rate limit set on the circuit group for which counters are enabled.')
rbnCctGrpRLPolicyViolateOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLPolicyViolateOctets.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpRLPolicyViolateOctets.setDescription('The number of octets that violate the normal and maximum burst sizes on the circuit group for which counters are enabled.')
rbnCctGrpRLPolicyViolatePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLPolicyViolatePkts.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpRLPolicyViolatePkts.setDescription('The number of packets that violate the normal and maximum burst sizes on the circuit group for which counters are enabled.')
rbnCctGrpRLPolicyViolateDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLPolicyViolateDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpRLPolicyViolateDroppedOctets.setDescription('The number of octets that were dropped due to the application of a violate action on packets that violate the normal and maximum burst sizes on the circuit group for which counters are enabled.')
rbnCctGrpRLPolicyViolateDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLPolicyViolateDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpRLPolicyViolateDroppedPkts.setDescription('The number of packets that were dropped due to the application of a violate action on packets that violate the normal and maximum burst sizes on the circuit group for which counters are enabled.')
rbnCctGrpRLClassStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 4), )
if mibBuilder.loadTexts: rbnCctGrpRLClassStatsTable.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpRLClassStatsTable.setDescription('A table of counters for rate limit policy classes applied to circuit groups.')
rbnCctGrpRLClassStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 4, 1), ).setIndexNames((0, "RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpName"), (0, "RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLPolicyType"), (0, "RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLClassId"))
if mibBuilder.loadTexts: rbnCctGrpRLClassStatsEntry.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpRLClassStatsEntry.setDescription('A conceptial row in the rbnCctGrpRLClassStatsTable. Each row contains counters for a rate limit policy class applied to the circuit group.')
rbnCctGrpRLClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 4, 1, 1), RbnQosClassId())
if mibBuilder.loadTexts: rbnCctGrpRLClassId.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpRLClassId.setDescription('A value that uniquely identifies a class defined in the rate-limit policy access list.')
rbnCctGrpRLClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 4, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 39))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLClassName.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpRLClassName.setDescription('Name of the class in the rate-limit policy access list.')
rbnCctGrpRLClassConformOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLClassConformOctets.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpRLClassConformOctets.setDescription('The number of octets that conform to the policy class rate limit set on the circuit group.')
rbnCctGrpRLClassConformPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLClassConformPkts.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpRLClassConformPkts.setDescription('The number of packets that conform to the policy class rate limit set on the circuit group.')
rbnCctGrpRLClassConformDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLClassConformDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpRLClassConformDroppedOctets.setDescription('The number of octets that were dropped due to the application of a conform action on packets that conform to the policy class rate limit set on the circuit group.')
rbnCctGrpRLClassConformDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLClassConformDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpRLClassConformDroppedPkts.setDescription('The number of packets that were dropped due to the application of a conform action on packets that conform to the policy class rate limit set on the circuit group.')
rbnCctGrpRLClassExceedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLClassExceedOctets.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpRLClassExceedOctets.setDescription('The number of octets that exceed the policy class rate limit set on the circuit group.')
rbnCctGrpRLClassExceedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLClassExceedPkts.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpRLClassExceedPkts.setDescription('The number of packets that exceed the policy class rate limit set on the circuit group.')
rbnCctGrpRLClassExceedDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLClassExceedDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpRLClassExceedDroppedOctets.setDescription('The number of octets that were dropped due to the application of an exceed action on packets that exceed the policy class rate limit set on the circuit group.')
rbnCctGrpRLClassExceedDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLClassExceedDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpRLClassExceedDroppedPkts.setDescription('The number of packets that were dropped due to the application of an exceed action on packets that exceed the policy class rate limit set on the circuit group.')
rbnCctGrpRLClassViolateOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLClassViolateOctets.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpRLClassViolateOctets.setDescription('The number of octets that violate the normal and maximum burst sizes on the circuit group.')
rbnCctGrpRLClassViolatePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLClassViolatePkts.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpRLClassViolatePkts.setDescription('The number of packets that violate the normal and maximum burst sizes on the circuit group.')
rbnCctGrpRLClassViolateDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLClassViolateDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpRLClassViolateDroppedOctets.setDescription('The number of octets that were dropped due to the application of a violate action on packets that violate the normal and maximum burst sizes on the circuit group.')
rbnCctGrpRLClassViolateDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 4, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLClassViolateDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpRLClassViolateDroppedPkts.setDescription('The number of packets that were dropped due to the application of a violate action on packets that violate the normal and maximum burst sizes on the circuit group.')
rbnCircuitGroupCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 43, 2, 1))
rbnCircuitGroupConformGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 43, 2, 2))
rbnCCircuitGroupCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 43, 2, 1, 1)).setObjects(("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpStatsGroup"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpQStatsGroup"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpPolicyStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnCCircuitGroupCompliance = rbnCCircuitGroupCompliance.setStatus('current')
if mibBuilder.loadTexts: rbnCCircuitGroupCompliance.setDescription('The compliance statement for SNMP entities which implement the Redback CircuitGroup MIB.')
rbnCctGrpStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 43, 2, 2, 1)).setObjects(("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpTxOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpTxPackets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpTxMulticastOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpTxMulticastPackets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRxOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRxPackets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRxMulticastOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRxMulticastPackets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpAdjDroppedOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpAdjDroppedPackets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpDownDroppedOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpDownDroppedPackets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpUnreachDroppedOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpUnreachDroppedPackets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpUnknownEncapsOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpUnknownEncapsPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnCctGrpStatsGroup = rbnCctGrpStatsGroup.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpStatsGroup.setDescription('The collection of objects which allow monitoring of circuit groups.')
rbnCctGrpQStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 43, 2, 2, 2)).setObjects(("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpQTxOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpQTxPackets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpQWredDroppedOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpQWredDroppedPkts"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpQTailDroppedOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpQTailDroppedPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnCctGrpQStatsGroup = rbnCctGrpQStatsGroup.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpQStatsGroup.setDescription('The collection of objects which allow monitoring of circuit group queues.')
rbnCctGrpPolicyStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 43, 2, 2, 3)).setObjects(("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLPolicyName"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLPolicyConformOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLPolicyConformPkts"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLPolicyExceedOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLPolicyExceedPkts"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLPolicyExceedDroppedOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLPolicyExceedDroppedPkts"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLPolicyViolateOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLPolicyViolatePkts"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLPolicyViolateDroppedOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLPolicyViolateDroppedPkts"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLClassName"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLClassConformOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLClassConformPkts"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLClassConformDroppedOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLClassConformDroppedPkts"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLClassExceedOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLClassExceedPkts"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLClassExceedDroppedOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLClassExceedDroppedPkts"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLClassViolateOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLClassViolatePkts"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLClassViolateDroppedOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLClassViolateDroppedPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnCctGrpPolicyStatsGroup = rbnCctGrpPolicyStatsGroup.setStatus('current')
if mibBuilder.loadTexts: rbnCctGrpPolicyStatsGroup.setDescription('The collection of objects which allow monitoring rate limit policy and class counters for circuit groups.')
mibBuilder.exportSymbols("RBN-CIRCUIT-GROUP-MIB", rbnCctGrpQueueId=rbnCctGrpQueueId, rbnCctGrpRLClassName=rbnCctGrpRLClassName, rbnCctGrpQStatsGroup=rbnCctGrpQStatsGroup, rbnCctGrpAdjDroppedPackets=rbnCctGrpAdjDroppedPackets, rbnCctGrpQWredDroppedOctets=rbnCctGrpQWredDroppedOctets, rbnCctGrpRLPolicyViolatePkts=rbnCctGrpRLPolicyViolatePkts, rbnCctGrpRLClassStatsEntry=rbnCctGrpRLClassStatsEntry, rbnCctGrpRLClassConformDroppedPkts=rbnCctGrpRLClassConformDroppedPkts, rbnCctGrpRLClassConformOctets=rbnCctGrpRLClassConformOctets, rbnCctGrpTxMulticastPackets=rbnCctGrpTxMulticastPackets, rbnCctGrpRLClassViolatePkts=rbnCctGrpRLClassViolatePkts, rbnCctGrpName=rbnCctGrpName, rbnCctGrpUnknownEncapsPackets=rbnCctGrpUnknownEncapsPackets, rbnCctGrpRLPolicyExceedOctets=rbnCctGrpRLPolicyExceedOctets, rbnCircuitGroupConformGroups=rbnCircuitGroupConformGroups, rbnCctGrpTxPackets=rbnCctGrpTxPackets, rbnCctGrpRLClassViolateOctets=rbnCctGrpRLClassViolateOctets, rbnCCircuitGroupCompliance=rbnCCircuitGroupCompliance, rbnCctGrpRLPolicyStatsTable=rbnCctGrpRLPolicyStatsTable, rbnCctGrpRLClassExceedDroppedOctets=rbnCctGrpRLClassExceedDroppedOctets, rbnCctGrpDownDroppedPackets=rbnCctGrpDownDroppedPackets, PYSNMP_MODULE_ID=rbnCircuitGroupMib, rbnCctGrpRLClassConformDroppedOctets=rbnCctGrpRLClassConformDroppedOctets, rbnCircuitGroupConformance=rbnCircuitGroupConformance, rbnCctGrpRxMulticastOctets=rbnCctGrpRxMulticastOctets, rbnCctGrpQTxOctets=rbnCctGrpQTxOctets, rbnCctGrpRLPolicyViolateDroppedOctets=rbnCctGrpRLPolicyViolateDroppedOctets, rbnCctGrpRLPolicyExceedDroppedPkts=rbnCctGrpRLPolicyExceedDroppedPkts, rbnCctGrpRLPolicyConformOctets=rbnCctGrpRLPolicyConformOctets, rbnCctGrpRLPolicyType=rbnCctGrpRLPolicyType, rbnCctGrpRLPolicyViolateOctets=rbnCctGrpRLPolicyViolateOctets, rbnCctGrpRLPolicyStatsEntry=rbnCctGrpRLPolicyStatsEntry, rbnCctGrpUnknownEncapsOctets=rbnCctGrpUnknownEncapsOctets, rbnCctGrpRLClassExceedOctets=rbnCctGrpRLClassExceedOctets, rbnCctGrpAdjDroppedOctets=rbnCctGrpAdjDroppedOctets, rbnCctGrpRxMulticastPackets=rbnCctGrpRxMulticastPackets, rbnCircuitGroupQEntry=rbnCircuitGroupQEntry, rbnCctGrpRLClassId=rbnCctGrpRLClassId, rbnCctGrpQTailDroppedOctets=rbnCctGrpQTailDroppedOctets, rbnCircuitGroupStatsEntry=rbnCircuitGroupStatsEntry, rbnCircuitGroupQTable=rbnCircuitGroupQTable, rbnCctGrpQTxPackets=rbnCctGrpQTxPackets, rbnCctGrpPolicyStatsGroup=rbnCctGrpPolicyStatsGroup, rbnCctGrpQWredDroppedPkts=rbnCctGrpQWredDroppedPkts, rbnCctGrpRLPolicyName=rbnCctGrpRLPolicyName, rbnCctGrpRLPolicyExceedPkts=rbnCctGrpRLPolicyExceedPkts, rbnCctGrpRxOctets=rbnCctGrpRxOctets, rbnCctGrpRLPolicyViolateDroppedPkts=rbnCctGrpRLPolicyViolateDroppedPkts, rbnCctGrpRxPackets=rbnCctGrpRxPackets, rbnCctGrpRLClassExceedPkts=rbnCctGrpRLClassExceedPkts, rbnCctGrpRLClassViolateDroppedOctets=rbnCctGrpRLClassViolateDroppedOctets, rbnCircuitGroupCompliances=rbnCircuitGroupCompliances, rbnCctGrpDownDroppedOctets=rbnCctGrpDownDroppedOctets, rbnCircuitGroupMib=rbnCircuitGroupMib, rbnCctGrpTxOctets=rbnCctGrpTxOctets, rbnCircuitGroupStatsTable=rbnCircuitGroupStatsTable, rbnCctGrpStatsGroup=rbnCctGrpStatsGroup, rbnCircuitGroupObjects=rbnCircuitGroupObjects, rbnCctGrpRLPolicyExceedDroppedOctets=rbnCctGrpRLPolicyExceedDroppedOctets, rbnCctGrpUnreachDroppedOctets=rbnCctGrpUnreachDroppedOctets, rbnCctGrpRLClassStatsTable=rbnCctGrpRLClassStatsTable, rbnCctGrpRLClassConformPkts=rbnCctGrpRLClassConformPkts, rbnCctGrpRLPolicyConformPkts=rbnCctGrpRLPolicyConformPkts, rbnCctGrpRLClassViolateDroppedPkts=rbnCctGrpRLClassViolateDroppedPkts, rbnCctGrpRLClassExceedDroppedPkts=rbnCctGrpRLClassExceedDroppedPkts, rbnCctGrpTxMulticastOctets=rbnCctGrpTxMulticastOctets, rbnCctGrpQTailDroppedPkts=rbnCctGrpQTailDroppedPkts, rbnCctGrpUnreachDroppedPackets=rbnCctGrpUnreachDroppedPackets)
