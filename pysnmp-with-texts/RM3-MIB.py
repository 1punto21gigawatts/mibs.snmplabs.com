#
# PySNMP MIB module RM3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RM3-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:58:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, snmpModules, ObjectName, Bits, Integer32, Counter32, Counter64, Gauge32, NotificationType, iso, ObjectIdentity, ModuleIdentity, MibIdentifier, TimeTicks, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "snmpModules", "ObjectName", "Bits", "Integer32", "Counter32", "Counter64", "Gauge32", "NotificationType", "iso", "ObjectIdentity", "ModuleIdentity", "MibIdentifier", "TimeTicks", "Unsigned32")
DisplayString, TruthValue, TimeStamp, RowStatus, TestAndIncr, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TimeStamp", "RowStatus", "TestAndIncr", "TextualConvention")
lucent = MibIdentifier((1, 3, 6, 1, 4, 1, 1751))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1))
softSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198))
resourceMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4))
rm3 = ModuleIdentity((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3))
if mibBuilder.loadTexts: rm3.setLastUpdated('240701')
if mibBuilder.loadTexts: rm3.setOrganization('Lucent Technologies')
if mibBuilder.loadTexts: rm3.setContactInfo('')
if mibBuilder.loadTexts: rm3.setDescription('The MIB module for entities implementing the xxxx protocol.')
rmSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 1))
rmDiskGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 2))
rmCpuGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 3))
rmFileGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 4))
rmProcessGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 5))
rmDescr = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmDescr.setStatus('current')
if mibBuilder.loadTexts: rmDescr.setDescription('A textual description of the entity. This value should include the full name and version identification of the resource monitor software. It is mandatory that this only contain printable ASCII characters.')
rmObjectID = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmObjectID.setStatus('current')
if mibBuilder.loadTexts: rmObjectID.setDescription('An internal identification for this resource monitor.')
rmUpTime = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmUpTime.setStatus('current')
if mibBuilder.loadTexts: rmUpTime.setDescription('The time (in hundredths of a second) since the resource monitor deamon was last re-initialized.')
rmNetAddress = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmNetAddress.setStatus('current')
if mibBuilder.loadTexts: rmNetAddress.setDescription('The ip address of the host on which this deamon is running.')
rmControl = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmControl.setStatus('current')
if mibBuilder.loadTexts: rmControl.setDescription('This is the settable field that in turn controls some of the functioning of the resource monitor. At present, this field is not used. It has been created for future expansion.')
diskPeriod = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diskPeriod.setStatus('current')
if mibBuilder.loadTexts: diskPeriod.setDescription('Defines disk monitoring frequency. Period in seconds. It is a settable field, so user can alter how frequently the file systems are checked for size limits.')
diskUsageWarningPct = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diskUsageWarningPct.setStatus('current')
if mibBuilder.loadTexts: diskUsageWarningPct.setDescription('If disk usage exceeds this amount of percentage, a diskAttention trap will be emitted. severity: MAJOR')
diskUsageAlarmPct = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diskUsageAlarmPct.setStatus('current')
if mibBuilder.loadTexts: diskUsageAlarmPct.setDescription('If Disk usage exceeds this mount of percentage, a diskAlarm trap will be emitted. severity: CRITICAL')
duNumber = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: duNumber.setStatus('current')
if mibBuilder.loadTexts: duNumber.setDescription('The number of file systems being monitored. (indicates the number of rows in diskUsageTable)')
diskUsageTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 2, 5), )
if mibBuilder.loadTexts: diskUsageTable.setStatus('current')
if mibBuilder.loadTexts: diskUsageTable.setDescription('A list of file system entries. The number of entries is given by the value of duNumber.')
diskUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 2, 5, 1), ).setIndexNames((0, "RM3-MIB", "duIndex"))
if mibBuilder.loadTexts: diskUsageEntry.setStatus('current')
if mibBuilder.loadTexts: diskUsageEntry.setDescription('')
duIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: duIndex.setStatus('current')
if mibBuilder.loadTexts: duIndex.setDescription('A unique value for each disk slice. Goes from 1 to N')
duFSName = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 2, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: duFSName.setStatus('current')
if mibBuilder.loadTexts: duFSName.setDescription('The name of the file system being monitored')
duSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("readonly")
if mibBuilder.loadTexts: duSize.setStatus('current')
if mibBuilder.loadTexts: duSize.setDescription('The size of the file system in k bytes')
duPctUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: duPctUsed.setStatus('current')
if mibBuilder.loadTexts: duPctUsed.setDescription('The percentage of the file system used up')
cpuPeriod = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuPeriod.setStatus('current')
if mibBuilder.loadTexts: cpuPeriod.setDescription('Defines cpu monitoring frequency. The CPU load and utilization are measure as per this frequency. Period can be either one, ten or fifteen minutes. Setting it to any other value will cause the set to fail (the old value will stay).')
cpuUtilization = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilization.setStatus('current')
if mibBuilder.loadTexts: cpuUtilization.setDescription('The current cpu utilization percentage.')
cpuUtilWarningPct = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuUtilWarningPct.setStatus('current')
if mibBuilder.loadTexts: cpuUtilWarningPct.setDescription('If cpu utlization exceeds this percentage, a cpuUtilAttention trap will be emitted. severity: MAJOR')
cpuUtilAlarmPct = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuUtilAlarmPct.setStatus('current')
if mibBuilder.loadTexts: cpuUtilAlarmPct.setDescription('If CPU utilization exceeds this percentage, a cpuUtilAlarm trap will be emitted. severity: CRITICAL')
cpuLoad = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 3, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuLoad.setStatus('current')
if mibBuilder.loadTexts: cpuLoad.setDescription('The current value of cpu load. Note: Although the syntax is DisplayString, the real semantics should be floating point value of cpu load. For example: 0.3, 2.5, etc.')
cpuLoadWarningThreshold = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 3, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuLoadWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: cpuLoadWarningThreshold.setDescription('If cpu load exceeds this amount, a cpuLoadAttention trap will be emitted. severity: MAJOR Note: Although the syntax is DisplayString, the real semantics should be floating point value.')
cpuLoadAlarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 3, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuLoadAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: cpuLoadAlarmThreshold.setDescription('If cpu load exceeds this amount, a cpuLoadAlarm trap will be emitted. severity: CRITICAL Note: Although the syntax is DisplayString, the real semantics should be floating point value.')
filePeriod = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filePeriod.setStatus('current')
if mibBuilder.loadTexts: filePeriod.setDescription('Defines log file monitoring frequency. This value is expressed as the number of minutes.')
fmNumber = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmNumber.setStatus('current')
if mibBuilder.loadTexts: fmNumber.setDescription('The number of files being monitored by this deamon.')
fmTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 4, 3), )
if mibBuilder.loadTexts: fmTable.setStatus('current')
if mibBuilder.loadTexts: fmTable.setDescription('A list of files being monitored for size.')
fmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 4, 3, 1), ).setIndexNames((0, "RM3-MIB", "fmIndex"))
if mibBuilder.loadTexts: fmEntry.setStatus('current')
if mibBuilder.loadTexts: fmEntry.setDescription('Each entry represents one log file, and is a sequence of type FileEntry, which is explained below.')
fmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmIndex.setStatus('current')
if mibBuilder.loadTexts: fmIndex.setDescription('A unique number for each file being monitored. Goes from 1 to N')
fmName = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 4, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmName.setStatus('current')
if mibBuilder.loadTexts: fmName.setDescription('the absolute path for the file being monitored.')
fmCurSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmCurSize.setStatus('current')
if mibBuilder.loadTexts: fmCurSize.setDescription('The is the current size of the file.')
fmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmThreshold.setStatus('current')
if mibBuilder.loadTexts: fmThreshold.setDescription('This is the size above which a FileSizeEvent trap will be sent out. This information is read from the config directory when the RMpep is started.')
archiveDir = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 4, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: archiveDir.setStatus('current')
if mibBuilder.loadTexts: archiveDir.setDescription('This variable returns the current archive directory. ResMon may be periodically asked to archive log files. After detecting and reporting a fileOversize event, resMon may also be told to archive the log file along with file monitoring target switch. The current running policy determines the archive action.')
processPeriod = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: processPeriod.setStatus('current')
if mibBuilder.loadTexts: processPeriod.setDescription('Defines process monitoring frequency. Period in seconds. It is a settable field, so user can alter how frequently the processes are checked for CPU and memory utilization')
processNumber = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("readonly")
if mibBuilder.loadTexts: processNumber.setStatus('current')
if mibBuilder.loadTexts: processNumber.setDescription('The number of processes being monitored. (indicates the number of rows in processTable)')
processTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 5, 3), )
if mibBuilder.loadTexts: processTable.setStatus('current')
if mibBuilder.loadTexts: processTable.setDescription('A list of process entries. The number of entries is given by the value of processNumber.')
processEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 5, 3, 1), ).setIndexNames((0, "RM3-MIB", "processIndex"))
if mibBuilder.loadTexts: processEntry.setStatus('current')
if mibBuilder.loadTexts: processEntry.setDescription('')
processIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("readonly")
if mibBuilder.loadTexts: processIndex.setStatus('current')
if mibBuilder.loadTexts: processIndex.setDescription('A unique value for each process. Goes from 1 to N')
processID = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: processID.setStatus('current')
if mibBuilder.loadTexts: processID.setDescription('A unique value for each process.')
processName = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 5, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processName.setStatus('current')
if mibBuilder.loadTexts: processName.setDescription('The name of the process.')
processUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: processUpTime.setStatus('current')
if mibBuilder.loadTexts: processUpTime.setDescription('The time since the process is up running.')
processCPUUsageWarnMark = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: processCPUUsageWarnMark.setStatus('current')
if mibBuilder.loadTexts: processCPUUsageWarnMark.setDescription('The threshold when resMon should generate a warning for netMon.')
processCPUUsageAlarmMark = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: processCPUUsageAlarmMark.setStatus('current')
if mibBuilder.loadTexts: processCPUUsageAlarmMark.setDescription('The threshold when resMon should generate a alarm for netMon.')
processCPUUsageCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: processCPUUsageCurrent.setStatus('current')
if mibBuilder.loadTexts: processCPUUsageCurrent.setDescription('The amount of CPU time this process used.')
processMemUsageAlarmMark = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: processMemUsageAlarmMark.setStatus('current')
if mibBuilder.loadTexts: processMemUsageAlarmMark.setDescription('The memory usage threshold when resMon should generate a memory usage alarm for netMon.')
processMemUsageCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3, 5, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("readonly")
if mibBuilder.loadTexts: processMemUsageCurrent.setStatus('current')
if mibBuilder.loadTexts: processMemUsageCurrent.setDescription('The amount of memory this process used.')
mibBuilder.exportSymbols("RM3-MIB", diskUsageTable=diskUsageTable, cpuUtilAlarmPct=cpuUtilAlarmPct, rmCpuGrp=rmCpuGrp, duFSName=duFSName, duIndex=duIndex, processCPUUsageAlarmMark=processCPUUsageAlarmMark, diskUsageEntry=diskUsageEntry, duSize=duSize, processIndex=processIndex, rmObjectID=rmObjectID, processEntry=processEntry, processMemUsageAlarmMark=processMemUsageAlarmMark, processName=processName, cpuLoad=cpuLoad, fmThreshold=fmThreshold, fmNumber=fmNumber, rm3=rm3, processPeriod=processPeriod, processMemUsageCurrent=processMemUsageCurrent, fmTable=fmTable, rmNetAddress=rmNetAddress, processID=processID, fmName=fmName, processUpTime=processUpTime, processNumber=processNumber, rmProcessGrp=rmProcessGrp, cpuLoadWarningThreshold=cpuLoadWarningThreshold, diskPeriod=diskPeriod, rmUpTime=rmUpTime, rmFileGrp=rmFileGrp, rmDescr=rmDescr, fmEntry=fmEntry, products=products, rmControl=rmControl, fmIndex=fmIndex, resourceMonitor=resourceMonitor, filePeriod=filePeriod, diskUsageAlarmPct=diskUsageAlarmPct, archiveDir=archiveDir, rmSystem=rmSystem, processTable=processTable, duPctUsed=duPctUsed, cpuUtilization=cpuUtilization, cpuUtilWarningPct=cpuUtilWarningPct, PYSNMP_MODULE_ID=rm3, lucent=lucent, duNumber=duNumber, fmCurSize=fmCurSize, diskUsageWarningPct=diskUsageWarningPct, cpuLoadAlarmThreshold=cpuLoadAlarmThreshold, processCPUUsageWarnMark=processCPUUsageWarnMark, softSwitch=softSwitch, rmDiskGrp=rmDiskGrp, processCPUUsageCurrent=processCPUUsageCurrent, cpuPeriod=cpuPeriod)
