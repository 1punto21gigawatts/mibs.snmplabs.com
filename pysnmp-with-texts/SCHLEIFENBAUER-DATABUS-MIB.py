#
# PySNMP MIB module SCHLEIFENBAUER-DATABUS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SCHLEIFENBAUER-DATABUS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:01:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
schleifenbauerMgmt, = mibBuilder.importSymbols("SCHLEIFENBAUER-SMI", "schleifenbauerMgmt")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
TimeTicks, IpAddress, Gauge32, ObjectIdentity, Counter32, ModuleIdentity, MibIdentifier, NotificationType, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits, Unsigned32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "IpAddress", "Gauge32", "ObjectIdentity", "Counter32", "ModuleIdentity", "MibIdentifier", "NotificationType", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits", "Unsigned32", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
schleifenbauerDatabusMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 31034, 12, 1))
schleifenbauerDatabusMIB.setRevisions(('2016-10-21 00:00', '2016-06-16 00:00', '2016-05-10 00:00', '2016-03-24 00:00', '2016-02-19 00:00', '2015-10-23 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: schleifenbauerDatabusMIB.setRevisionsDescriptions(('1. Added sdbDevSsOutletVoltageDropAlert object. 2. Added sdbDevStAutoResetAlerts object. 3. Added sdbDevStExtendedNames object. 4. Added sdbDevSsOutletVoltageDropAlertDetected object.', '1. Fixed incorrect range of sdbDevIdIndex.', '1. Added sdbDevOutMtPowerVoltAmpere object. 2. Added sdbDevOutMtPowerWatt object.', '1. Added sdbMgmtStsRingState object. 2. Added sdbMgmtStsBreachIndex object. 3. Added sdbMgmtStsRingStateChanged notification.', '1. Fixed incorrect description of sdbDevIdIndex. 2. Fixed description of sdbDevSsSensorChangeAlertDetected. Removed sdbDevSnsType from description.', 'The initial revision of this MIB module',))
if mibBuilder.loadTexts: schleifenbauerDatabusMIB.setLastUpdated('201610210000Z')
if mibBuilder.loadTexts: schleifenbauerDatabusMIB.setOrganization('Schleifenbauer Engineering')
if mibBuilder.loadTexts: schleifenbauerDatabusMIB.setContactInfo('Schleifenbauer Engineering Alain Schuermans Chief Technology Officer Turnhoutseweg 22 5541 NX Reusel The Netherlands t. +31 73 5230256 f. +31 73 5212383 alain@schleifenbauer.eu www.schleifenbauer.eu')
if mibBuilder.loadTexts: schleifenbauerDatabusMIB.setDescription('This MIB describes the SNMP functions of network enabled databus devices. Copyright (c) 2016 by Schleifenbauer Holding BV ')
class DeciValue(TextualConvention, Integer32):
    description = 'Data type for reporting generic measurements associated with environmental sensors. If the underlying hardware sensor indicates 21.1 degrees Celsius, then the SNMP agent will report a value of 2110 DeciValue.'
    status = 'current'
    displayHint = 'd-2'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 327680)

class KiloWattHour(TextualConvention, Integer32):
    description = 'Data type for reporting measurements associated with energy accumulation sensors. If the underlying hardware sensor indicates 1 kWh, then the SNMP agent will report a value of 1 kWh.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 16777215)

class DeciAmpere(TextualConvention, Integer32):
    description = 'Data type for reporting measurements and thresholds associated with current sensors. If the underlying hardware sensor indicates 1.1 A, then the SNMP agent will report a value of 110 DeciAmpere.'
    status = 'current'
    displayHint = 'd-2'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 327680)

class DeciCelsius(TextualConvention, Integer32):
    description = 'Data type for reporting sensor readings associated with temperature sensors. If the underlying hardware sensor indicates 20.1 degrees Celsius, then the SNMP agent will report a value of 2010 DeciCelsius.'
    status = 'current'
    displayHint = 'd-2'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 9900)

class DeciPercent(TextualConvention, Integer32):
    description = 'Data type for reporting calculated percentages. If the calculated percentage is 98.3%, then the SNMP agent will report a value of 9830 DeciPercent.'
    status = 'current'
    displayHint = 'd-2'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 10000)

class DeciVolt(TextualConvention, Integer32):
    description = 'Data type for reporting measurements and thresholds associated with voltage sensors. If the underlying hardware sensor indicates 231.1 V, then the SNMP agent will report a value of 23110 DeciVolt.'
    status = 'current'
    displayHint = 'd-2'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 327680)

class MilliSecond(TextualConvention, Integer32):
    description = 'Duration in milliseconds'
    status = 'current'
    displayHint = 'd'

class Second(TextualConvention, Integer32):
    description = 'Duration in seconds.'
    status = 'current'
    displayHint = 'd'

sdbMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 31034, 12, 1, 0))
sdbMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1))
sdbMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 31034, 12, 1, 2))
sdbMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 1))
sdbDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2))
sdbMgmtStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 1, 1))
sdbMgmtControl = MibIdentifier((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 1, 2))
sdbDevIdentification = MibIdentifier((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 1))
sdbDevConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 2))
sdbDevSystemStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 3))
sdbDevReset = MibIdentifier((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 4))
sdbDevSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 5))
sdbDevInput = MibIdentifier((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 6))
sdbDevOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 7))
sdbDevSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 8))
sdbMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 31034, 12, 1, 2, 1))
sdbMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 31034, 12, 1, 2, 2))
sdbMgmtStsDevices = MibScalar((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbMgmtStsDevices.setStatus('current')
if mibBuilder.loadTexts: sdbMgmtStsDevices.setDescription('The number of devices on the databus.')
sdbMgmtStsAddressableDevices = MibScalar((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbMgmtStsAddressableDevices.setStatus('current')
if mibBuilder.loadTexts: sdbMgmtStsAddressableDevices.setDescription('The number of devices on the databus addressable by snmp.')
sdbMgmtStsNewDevices = MibScalar((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbMgmtStsNewDevices.setStatus('current')
if mibBuilder.loadTexts: sdbMgmtStsNewDevices.setDescription('The number of new devices on the databus.')
sdbMgmtStsDuplicateDevices = MibScalar((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbMgmtStsDuplicateDevices.setStatus('current')
if mibBuilder.loadTexts: sdbMgmtStsDuplicateDevices.setDescription('The number of duplicate devices on the databus.')
sdbMgmtStsRingState = MibScalar((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("open", 0), ("closed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbMgmtStsRingState.setStatus('current')
if mibBuilder.loadTexts: sdbMgmtStsRingState.setDescription('If the device is in a bridge-like mode, this will indicate the actual state of the databus.')
sdbMgmtStsRingBreachIndex = MibScalar((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbMgmtStsRingBreachIndex.setStatus('current')
if mibBuilder.loadTexts: sdbMgmtStsRingBreachIndex.setDescription('Indicates the breach index if the current state of the data bus is open. If the data bus is closed this has no meaning.')
sdbMgmtCtrlScan = MibScalar((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("idle", 0), ("scan", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdbMgmtCtrlScan.setStatus('current')
if mibBuilder.loadTexts: sdbMgmtCtrlScan.setDescription('Perform a bus scan. To verify if scanning is completed the value of this object can be read. During the bus scan the value remains 1. When the bus scan completed the value will be 0.')
sdbMgmtCtrlRenumberAllFromN = MibScalar((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdbMgmtCtrlRenumberAllFromN.setStatus('current')
if mibBuilder.loadTexts: sdbMgmtCtrlRenumberAllFromN.setDescription('Renumber all devices on the databus. If set to 0 all units will be set to 0. If set to another value, all units will be numbered in sequence starting from the value set.')
sdbMgmtCtrlRenumberZeros = MibScalar((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("idle", 0), ("renumber", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdbMgmtCtrlRenumberZeros.setStatus('current')
if mibBuilder.loadTexts: sdbMgmtCtrlRenumberZeros.setDescription('Renumber all devices on the databus having address 0. Renumbering will be done in sequence. The sequence starts with the highest address found on the databus.')
sdbMgmtCtrlDevicesTable = MibTable((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 1, 2, 4), )
if mibBuilder.loadTexts: sdbMgmtCtrlDevicesTable.setStatus('current')
if mibBuilder.loadTexts: sdbMgmtCtrlDevicesTable.setDescription('A table containing information of devices connected to the databus. The number of entries is given by the value of sdbMgmtStsDevices.')
sdbMgmtCtrlDevicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 1, 2, 4, 1), ).setIndexNames((0, "SCHLEIFENBAUER-DATABUS-MIB", "sdbMgmtCtrlDevIndex"))
if mibBuilder.loadTexts: sdbMgmtCtrlDevicesEntry.setStatus('current')
if mibBuilder.loadTexts: sdbMgmtCtrlDevicesEntry.setDescription('Information entry containing objects of a particular databus device.')
sdbMgmtCtrlDevIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: sdbMgmtCtrlDevIndex.setStatus('current')
if mibBuilder.loadTexts: sdbMgmtCtrlDevIndex.setDescription('A unique value for each device. Its value ranges between 1 and the value of sdbMgmtStsDevices with a maximum of 255. The value for each device will remain constant until the next scan is performed.')
sdbMgmtCtrlDevUnitAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdbMgmtCtrlDevUnitAddress.setStatus('current')
if mibBuilder.loadTexts: sdbMgmtCtrlDevUnitAddress.setDescription('User defined address. This will be used for addressing the device on the databus.')
sdbMgmtCtrlDevHardwareAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 1, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbMgmtCtrlDevHardwareAddress.setStatus('current')
if mibBuilder.loadTexts: sdbMgmtCtrlDevHardwareAddress.setDescription('Hardware serial number. This cannot be changed. It can be used as backup unit address. format as 3 unsigned ints separated by dashes: int - int - int')
sdbMgmtCtrlDevIsNew = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 1, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbMgmtCtrlDevIsNew.setStatus('current')
if mibBuilder.loadTexts: sdbMgmtCtrlDevIsNew.setDescription('Indication if the device is new on the databus.')
sdbMgmtCtrlDevIsDuplicate = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 1, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbMgmtCtrlDevIsDuplicate.setStatus('current')
if mibBuilder.loadTexts: sdbMgmtCtrlDevIsDuplicate.setDescription('Indication if the device is conflicting with another device on the databus.')
sdbDevIdTable = MibTable((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 1, 1), )
if mibBuilder.loadTexts: sdbDevIdTable.setStatus('current')
if mibBuilder.loadTexts: sdbDevIdTable.setDescription('A table containing identification information of devices connected to the databus. The number of entries is given by the value of sdbMgmtStsAddressableDevices.')
sdbDevIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 1, 1, 1), ).setIndexNames((0, "SCHLEIFENBAUER-DATABUS-MIB", "sdbDevIdIndex"))
if mibBuilder.loadTexts: sdbDevIdEntry.setStatus('current')
if mibBuilder.loadTexts: sdbDevIdEntry.setDescription('Information entry containing information objects of a particular databus device.')
sdbDevIdSPDMVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevIdSPDMVersion.setStatus('current')
if mibBuilder.loadTexts: sdbDevIdSPDMVersion.setDescription('Data model version.')
sdbDevIdFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevIdFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: sdbDevIdFirmwareVersion.setDescription('The firmware revision number.')
sdbDevIdBuildNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevIdBuildNumber.setStatus('current')
if mibBuilder.loadTexts: sdbDevIdBuildNumber.setDescription('Date and time the firmware was built.')
sdbDevIdSalesOrderNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevIdSalesOrderNumber.setStatus('current')
if mibBuilder.loadTexts: sdbDevIdSalesOrderNumber.setDescription('SP sales order number.')
sdbDevIdProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevIdProductId.setStatus('current')
if mibBuilder.loadTexts: sdbDevIdProductId.setDescription('SP product id.')
sdbDevIdSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevIdSerialNumber.setStatus('current')
if mibBuilder.loadTexts: sdbDevIdSerialNumber.setDescription('SP serial number.')
sdbDevIdHardwareAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevIdHardwareAddress.setStatus('current')
if mibBuilder.loadTexts: sdbDevIdHardwareAddress.setDescription('Hardware serial number. This can not be changed. It can be used as backup unit address. Format as 3 unsigned ints separated by dashes (-) e.g. 12345-54321-00000')
sdbDevIdMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevIdMacAddress.setStatus('current')
if mibBuilder.loadTexts: sdbDevIdMacAddress.setDescription('The MAC address. This can not be changed. It represents an 802 MAC address as if it were transmitted least significant bit first. Format as six groups of 2 hexadecimal digits separated by colons (:) e.g. D0:22:12:B0:00:00')
sdbDevIdUnitAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdbDevIdUnitAddress.setStatus('current')
if mibBuilder.loadTexts: sdbDevIdUnitAddress.setDescription('User defined address. This will be used for addressing the device on the databus.')
sdbDevIdName = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdbDevIdName.setStatus('current')
if mibBuilder.loadTexts: sdbDevIdName.setDescription('User configurable device name or identifier.')
sdbDevIdLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdbDevIdLocation.setStatus('current')
if mibBuilder.loadTexts: sdbDevIdLocation.setDescription('User configurable device location identifier.')
sdbDevIdVanityTag = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 1, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdbDevIdVanityTag.setStatus('current')
if mibBuilder.loadTexts: sdbDevIdVanityTag.setDescription('Characters to be displayed as vanity text in display.')
sdbDevIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: sdbDevIdIndex.setStatus('current')
if mibBuilder.loadTexts: sdbDevIdIndex.setDescription('A unique value for each device. Its value represents the unit address of the device and is used to address individual devices in the tree. The value for each device will remain constant until the next scan is performed.')
sdbDevCfTable = MibTable((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 2, 1), )
if mibBuilder.loadTexts: sdbDevCfTable.setStatus('current')
if mibBuilder.loadTexts: sdbDevCfTable.setDescription('A table containing configuration information of devices connected to the databus. The number of entries is given by the value of sdbMgmtStsAddressableDevices.')
sdbDevCfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 2, 1, 1), ).setIndexNames((0, "SCHLEIFENBAUER-DATABUS-MIB", "sdbDevIdIndex"))
if mibBuilder.loadTexts: sdbDevCfEntry.setStatus('current')
if mibBuilder.loadTexts: sdbDevCfEntry.setDescription('Configuration entry containing configuration objects of a particular databus device.')
sdbDevCfPhases = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevCfPhases.setStatus('current')
if mibBuilder.loadTexts: sdbDevCfPhases.setDescription('Number of phases for input metering.')
sdbDevCfOutletsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevCfOutletsTotal.setStatus('current')
if mibBuilder.loadTexts: sdbDevCfOutletsTotal.setDescription('Total number of outlets including hardwired without switch/metered modules.')
sdbDevCfOutletsSwitched = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevCfOutletsSwitched.setStatus('current')
if mibBuilder.loadTexts: sdbDevCfOutletsSwitched.setDescription('Number of switched outlets. If outlet numbering is non-contiguous its the highest outlet number.')
sdbDevCfOutletsMetered = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevCfOutletsMetered.setStatus('current')
if mibBuilder.loadTexts: sdbDevCfOutletsMetered.setDescription('Number of metered outlets. If outlet numbering is non-contiguous its the highest outlet number.')
sdbDevCfSensors = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevCfSensors.setStatus('current')
if mibBuilder.loadTexts: sdbDevCfSensors.setDescription('The number sensors.')
sdbDevCfMaximumLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ))).setUnits('A').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevCfMaximumLoad.setStatus('current')
if mibBuilder.loadTexts: sdbDevCfMaximumLoad.setDescription('Maximum rated load of device per phase')
sdbDevSsTable = MibTable((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 3, 1), )
if mibBuilder.loadTexts: sdbDevSsTable.setStatus('current')
if mibBuilder.loadTexts: sdbDevSsTable.setDescription('A table containing system status information of devices connected to the databus. The number of entries is given by the value of sdbMgmtStsAddressableDevices.')
sdbDevSsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 3, 1, 1), ).setIndexNames((0, "SCHLEIFENBAUER-DATABUS-MIB", "sdbDevIdIndex"))
if mibBuilder.loadTexts: sdbDevSsEntry.setStatus('current')
if mibBuilder.loadTexts: sdbDevSsEntry.setDescription('System status entry containing system status objects of a particular databus device.')
sdbDevSsDeviceStatusCode = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevSsDeviceStatusCode.setStatus('current')
if mibBuilder.loadTexts: sdbDevSsDeviceStatusCode.setDescription('Returns an internal status or error code. A value of 0 means OK. If not 0 it can be any of the following codes. Multiple status codes can be active at the same time. The value will be the sum of the active status codes. 1 = alert flagged 2 = settings(s) initialized 4 = power-on reset 8 = external reset 16 = watchdog timer caused reset 32 = brownout detected 64 = controller error 128 = slave module was reset')
sdbDevSsTemperatureAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevSsTemperatureAlert.setStatus('current')
if mibBuilder.loadTexts: sdbDevSsTemperatureAlert.setDescription('An alert has been raised due to temperature exceeding treshhold. 0 = no alert 1 = internal temperature sensor 2 = external temperature sensor')
sdbDevSsInputCurrentAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevSsInputCurrentAlert.setStatus('current')
if mibBuilder.loadTexts: sdbDevSsInputCurrentAlert.setDescription('An alert has been raised due to current exceeding treshhold. The value indicates the exceeding phase. 0 = no alert.')
sdbDevSsOutletCurrentAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevSsOutletCurrentAlert.setStatus('current')
if mibBuilder.loadTexts: sdbDevSsOutletCurrentAlert.setDescription('An alert has been raised due to current exceeding treshhold. The value indicates the exceeding outlet. 0 = no alert.')
sdbDevSsInputVoltageAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevSsInputVoltageAlert.setStatus('current')
if mibBuilder.loadTexts: sdbDevSsInputVoltageAlert.setDescription('An alert has been raised due to a voltage dip. The value indicates the dipped phase. 0 = no alert.')
sdbDevSsOutletCurrentDropAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevSsOutletCurrentDropAlert.setStatus('current')
if mibBuilder.loadTexts: sdbDevSsOutletCurrentDropAlert.setDescription('An alert has been raised due to the current of a metered outlet suddenly dropping to near zero, possibly indicating a blown fuse. The value indicates the dropped outlet. 0 = no alert.')
sdbDevSsInputCurrentDropAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevSsInputCurrentDropAlert.setStatus('current')
if mibBuilder.loadTexts: sdbDevSsInputCurrentDropAlert.setDescription('An alert has been raised due to the current of a metered input suddenly dropping to near zero, possibly indicating a blown fuse. The value indicates the dropped phase. 0 = no alert.')
sdbDevSsSensorChangeAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevSsSensorChangeAlert.setStatus('current')
if mibBuilder.loadTexts: sdbDevSsSensorChangeAlert.setDescription('An alert has been raised due to a change in the number of sensors. The value indicates the previous amount of sensors.')
sdbDevSsOutletVoltageDropAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevSsOutletVoltageDropAlert.setStatus('current')
if mibBuilder.loadTexts: sdbDevSsOutletVoltageDropAlert.setDescription('An alert has been raised due to voltage drop on this outlet. The value indicates the first failed outlet.')
sdbDevRsTable = MibTable((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 4, 1), )
if mibBuilder.loadTexts: sdbDevRsTable.setStatus('current')
if mibBuilder.loadTexts: sdbDevRsTable.setDescription('A table providing reset capabilities to devices connected to the databus. The number of entries is given by the value of sdbMgmtStsAddressableDevices.')
sdbDevRsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 4, 1, 1), ).setIndexNames((0, "SCHLEIFENBAUER-DATABUS-MIB", "sdbDevIdIndex"))
if mibBuilder.loadTexts: sdbDevRsEntry.setStatus('current')
if mibBuilder.loadTexts: sdbDevRsEntry.setDescription('Reset entry providing reset objects of a particular databus device.')
sdbDevRsReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("idle", 0), ("reboot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdbDevRsReboot.setStatus('current')
if mibBuilder.loadTexts: sdbDevRsReboot.setDescription('Warm reboot/reset of device controller. NOTE: this will have NO effect on outlet status!')
sdbDevRsResetAlerts = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("idle", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdbDevRsResetAlerts.setStatus('current')
if mibBuilder.loadTexts: sdbDevRsResetAlerts.setDescription('Reset all alert signals and device status code.')
sdbDevRsZeroInputKWhSubtotal = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("idle", 0), ("zero", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdbDevRsZeroInputKWhSubtotal.setStatus('current')
if mibBuilder.loadTexts: sdbDevRsZeroInputKWhSubtotal.setDescription('Reset of all input kWh subtotal counters to zero.')
sdbDevRsZeroOutletKWhSubtotal = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("idle", 0), ("zero", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdbDevRsZeroOutletKWhSubtotal.setStatus('current')
if mibBuilder.loadTexts: sdbDevRsZeroOutletKWhSubtotal.setDescription('Reset of all outlet kWh subtotal counter to zero.')
sdbDevRsResetPeaksAndDips = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("idle", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdbDevRsResetPeaksAndDips.setStatus('current')
if mibBuilder.loadTexts: sdbDevRsResetPeaksAndDips.setDescription('Reset all peak and dip values to zero.')
sdbDevStTable = MibTable((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 5, 1), )
if mibBuilder.loadTexts: sdbDevStTable.setStatus('current')
if mibBuilder.loadTexts: sdbDevStTable.setDescription('A table containing setting information of devices connected to the databus. The number of entries is given by the value of sdbMgmtStsAddressableDevices.')
sdbDevStEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 5, 1, 1), ).setIndexNames((0, "SCHLEIFENBAUER-DATABUS-MIB", "sdbDevIdIndex"))
if mibBuilder.loadTexts: sdbDevStEntry.setStatus('current')
if mibBuilder.loadTexts: sdbDevStEntry.setDescription('Setting entry containing settings objects of a particular databus device.')
sdbDevStAutoResetAlerts = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdbDevStAutoResetAlerts.setStatus('current')
if mibBuilder.loadTexts: sdbDevStAutoResetAlerts.setDescription('Auto reset alerts configuration. If set to 0 the auto reset alerts feature is disabled. If set to a value greater then 0, the auto reset alerts feature is enabled and alerts will get cleared after the configured amount of seconds since the last alert condition have passed.')
sdbDevStExtendedNames = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdbDevStExtendedNames.setStatus('current')
if mibBuilder.loadTexts: sdbDevStExtendedNames.setDescription('Use original or longer names for inputs, outlets and sensors.')
sdbDevStPeakDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 5, 1, 1, 4), MilliSecond().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdbDevStPeakDuration.setStatus('current')
if mibBuilder.loadTexts: sdbDevStPeakDuration.setDescription('Amount of ms a current peak should last before an alert is raised.')
sdbDevStFixedOutletDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 5, 1, 1, 5), MilliSecond().subtype(subtypeSpec=ValueRangeConstraint(100, 65535))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdbDevStFixedOutletDelay.setStatus('current')
if mibBuilder.loadTexts: sdbDevStFixedOutletDelay.setDescription('Minimal delay between two successive relay switches in milliseconds. Minimal delay is 100 ms. Will always be respected!')
sdbDevStPowerSaverMode = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 5, 1, 1, 6), Second().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(10, 10), ValueRangeConstraint(60, 60), ValueRangeConstraint(120, 120), ValueRangeConstraint(240, 240), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdbDevStPowerSaverMode.setStatus('current')
if mibBuilder.loadTexts: sdbDevStPowerSaverMode.setDescription('Set backlight on time in seconds. 0 keeps display always on. Note that keeping the backlight on may decrease luminosity over time.')
sdbDevStOutletPowerUpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("sameState", 1), ("sameStateDelayed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdbDevStOutletPowerUpMode.setStatus('current')
if mibBuilder.loadTexts: sdbDevStOutletPowerUpMode.setDescription('Behaviour of outlets on power-up.')
sdbDevStMaximumTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setUnits('degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdbDevStMaximumTemperature.setStatus('current')
if mibBuilder.loadTexts: sdbDevStMaximumTemperature.setDescription('Maximum temperature threshold An alert will be generated whenever the temperature is above this value. Zero means disabled.')
sdbDevStDisplayOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("noDisplay", 0), ("verticalDisplayOnTop", 1), ("verticalDisplayUpsideDown", 2), ("horizontalDisplayAtLeft", 3), ("horizontalDisplayAtRight", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdbDevStDisplayOrientation.setStatus('current')
if mibBuilder.loadTexts: sdbDevStDisplayOrientation.setDescription('Display orientation.')
sdbDevStLocalAlertReset = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAllowed", 0), ("allowed", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdbDevStLocalAlertReset.setStatus('current')
if mibBuilder.loadTexts: sdbDevStLocalAlertReset.setDescription('Allow alerts to be reset locally on device by pushing one of the buttons.')
sdbDevStCurrentDropDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("off", 0), ("inputsOnly", 1), ("outletsOnly", 2), ("inputsAndOutlets", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdbDevStCurrentDropDetection.setStatus('current')
if mibBuilder.loadTexts: sdbDevStCurrentDropDetection.setDescription('Enables the current drop detection function.')
sdbDevInTable = MibTable((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 6, 1), )
if mibBuilder.loadTexts: sdbDevInTable.setStatus('current')
if mibBuilder.loadTexts: sdbDevInTable.setDescription('A table containing information of inputs of devices connected to the databus.')
sdbDevInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 6, 1, 1), ).setIndexNames((0, "SCHLEIFENBAUER-DATABUS-MIB", "sdbDevIdIndex"), (0, "SCHLEIFENBAUER-DATABUS-MIB", "sdbDevInIndex"))
if mibBuilder.loadTexts: sdbDevInEntry.setStatus('current')
if mibBuilder.loadTexts: sdbDevInEntry.setDescription('Inputs entry containing objects of an input of a particular databus device. Note that this table has two indexes. sdbDevIdIndex to identify a particular device and sdbDevInIndex to identify a particular input of the device identified by sdbDevIdIndex.')
sdbDevInIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48)))
if mibBuilder.loadTexts: sdbDevInIndex.setStatus('current')
if mibBuilder.loadTexts: sdbDevInIndex.setDescription('A unique value for each input. Its value ranges between 1 and the value of sdbDevCfPhases.')
sdbDevInKWhTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 6, 1, 1, 2), KiloWattHour()).setUnits('kWh').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevInKWhTotal.setStatus('current')
if mibBuilder.loadTexts: sdbDevInKWhTotal.setDescription('Total kWh value of an input. This value can not be reset.')
sdbDevInKWhSubtotal = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 6, 1, 1, 3), KiloWattHour()).setUnits('kWh').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevInKWhSubtotal.setStatus('current')
if mibBuilder.loadTexts: sdbDevInKWhSubtotal.setDescription('Subtotal kWh value of an input. This value can be reset.')
sdbDevInPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 6, 1, 1, 4), DeciPercent()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevInPowerFactor.setStatus('current')
if mibBuilder.loadTexts: sdbDevInPowerFactor.setDescription('Power factor of input. The power factor of an AC power system is defined as the ratio of the real or active power to the apparent power and is a number between 0 and 1. This value is expressed as a percentage between 0% and 100%.')
sdbDevInActualCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 6, 1, 1, 5), DeciAmpere()).setUnits('A').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevInActualCurrent.setStatus('current')
if mibBuilder.loadTexts: sdbDevInActualCurrent.setDescription('Actual apparent, RMS current.')
sdbDevInPeakCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 6, 1, 1, 6), DeciAmpere()).setUnits('A').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevInPeakCurrent.setStatus('current')
if mibBuilder.loadTexts: sdbDevInPeakCurrent.setDescription('Peak apparent, RMS current. Highest value since last reset of the alerts.')
sdbDevInActualVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 6, 1, 1, 7), DeciVolt()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevInActualVoltage.setStatus('current')
if mibBuilder.loadTexts: sdbDevInActualVoltage.setDescription('The actual voltage.')
sdbDevInMinVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 6, 1, 1, 8), DeciVolt()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevInMinVoltage.setStatus('current')
if mibBuilder.loadTexts: sdbDevInMinVoltage.setDescription('RMS voltage dip. Lowest value since reset of alerts.')
sdbDevInPowerVoltAmpere = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 327680))).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevInPowerVoltAmpere.setStatus('current')
if mibBuilder.loadTexts: sdbDevInPowerVoltAmpere.setDescription('Calculated apparent power.')
sdbDevInPowerWatt = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 327680))).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevInPowerWatt.setStatus('current')
if mibBuilder.loadTexts: sdbDevInPowerWatt.setDescription('Calculated real power.')
sdbDevInMaxAmps = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 6, 1, 1, 11), DeciAmpere()).setUnits('A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdbDevInMaxAmps.setStatus('current')
if mibBuilder.loadTexts: sdbDevInMaxAmps.setDescription('Maximum current per input phase. Should last at least sdbDevStPeakDuration ms before triggering an alert.')
sdbDevInCTRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdbDevInCTRatio.setStatus('current')
if mibBuilder.loadTexts: sdbDevInCTRatio.setDescription('The multiplier to use for the input CTs.')
sdbDevInName = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 6, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdbDevInName.setStatus('current')
if mibBuilder.loadTexts: sdbDevInName.setDescription('User configurable naming of inputs or phases.')
sdbDevInZeroKWhSubtotal = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 6, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("idle", 0), ("zero", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdbDevInZeroKWhSubtotal.setStatus('current')
if mibBuilder.loadTexts: sdbDevInZeroKWhSubtotal.setDescription('Reset input kWh subtotal counter of a single input to zero.')
sdbDevOutTable = MibTable((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 7, 1), )
if mibBuilder.loadTexts: sdbDevOutTable.setStatus('current')
if mibBuilder.loadTexts: sdbDevOutTable.setDescription('A table containing information of outlets of devices connected to the databus.')
sdbDevOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 7, 1, 1), ).setIndexNames((0, "SCHLEIFENBAUER-DATABUS-MIB", "sdbDevIdIndex"), (0, "SCHLEIFENBAUER-DATABUS-MIB", "sdbDevOutIndex"))
if mibBuilder.loadTexts: sdbDevOutEntry.setStatus('current')
if mibBuilder.loadTexts: sdbDevOutEntry.setDescription('Outlets entry containing objects of an outlet of a particular databus device. Note that this table has two indexes. sdbDevIdIndex to identify a particular device and sdbDevOutIndex to identify a particular outlet of the device identified by sdbDevIdIndex.')
sdbDevOutIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48)))
if mibBuilder.loadTexts: sdbDevOutIndex.setStatus('current')
if mibBuilder.loadTexts: sdbDevOutIndex.setDescription('A unique value for each outlet. Its value ranges between 1 and the value of sdbDevCfOutletsTotal.')
sdbDevOutName = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 7, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdbDevOutName.setStatus('current')
if mibBuilder.loadTexts: sdbDevOutName.setDescription('User configurable naming of individual outlets.')
sdbDevOutMtTable = MibTable((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 7, 2), )
if mibBuilder.loadTexts: sdbDevOutMtTable.setStatus('current')
if mibBuilder.loadTexts: sdbDevOutMtTable.setDescription('A table containing information of metered outlets of devices connected to the databus.')
sdbDevOutMtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 7, 2, 1), ).setIndexNames((0, "SCHLEIFENBAUER-DATABUS-MIB", "sdbDevIdIndex"), (0, "SCHLEIFENBAUER-DATABUS-MIB", "sdbDevOutMtIndex"))
if mibBuilder.loadTexts: sdbDevOutMtEntry.setStatus('current')
if mibBuilder.loadTexts: sdbDevOutMtEntry.setDescription('Metered outlets entry containing objects of a metered outlet of a particular databus device. Note that this table has two indexes. sdbDevIdIndex to identify a particular device and sdbDevOutMtIndex to identify a particular outlet of the device identified by sdbDevIdIndex.')
sdbDevOutMtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48)))
if mibBuilder.loadTexts: sdbDevOutMtIndex.setStatus('current')
if mibBuilder.loadTexts: sdbDevOutMtIndex.setDescription('A unique value for each outlet. Its value ranges between 1 and the value of sdbDevCfOutletsMetered.')
sdbDevOutMtKWhTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 7, 2, 1, 2), KiloWattHour()).setUnits('kWh').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevOutMtKWhTotal.setStatus('current')
if mibBuilder.loadTexts: sdbDevOutMtKWhTotal.setDescription('Total kWh value of an outlet. This value can not be reset.')
sdbDevOutMtKWhSubtotal = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 7, 2, 1, 3), KiloWattHour()).setUnits('kWh').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevOutMtKWhSubtotal.setStatus('current')
if mibBuilder.loadTexts: sdbDevOutMtKWhSubtotal.setDescription('Subotal kWh value of an outlet. This value can be reset.')
sdbDevOutMtPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 7, 2, 1, 4), DeciPercent()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevOutMtPowerFactor.setStatus('current')
if mibBuilder.loadTexts: sdbDevOutMtPowerFactor.setDescription('Power factor of outlet. The power factor of an AC power system is defined as the ratio of the real or active power to the apparent power and is a number between 0 and 1. This number is expressed as a percentage between 0% and 100%.')
sdbDevOutMtActualCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 7, 2, 1, 5), DeciAmpere()).setUnits('A').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevOutMtActualCurrent.setStatus('current')
if mibBuilder.loadTexts: sdbDevOutMtActualCurrent.setDescription('Actual apparent, RMS current.')
sdbDevOutMtPeakCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 7, 2, 1, 6), DeciAmpere()).setUnits('A').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevOutMtPeakCurrent.setStatus('current')
if mibBuilder.loadTexts: sdbDevOutMtPeakCurrent.setDescription('Peak apparent, RMS current. Highest value since last reset of the alerts.')
sdbDevOutMtActualVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 7, 2, 1, 7), DeciVolt()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevOutMtActualVoltage.setStatus('current')
if mibBuilder.loadTexts: sdbDevOutMtActualVoltage.setDescription('Actual voltage on outlet.')
sdbDevOutMtMaxAmps = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 7, 2, 1, 8), DeciAmpere()).setUnits('A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdbDevOutMtMaxAmps.setStatus('current')
if mibBuilder.loadTexts: sdbDevOutMtMaxAmps.setDescription('Maximum current per outlet. Should last at least sdbDevStPeakDuration ms before triggering an alert.')
sdbDevOutMtCTRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdbDevOutMtCTRatio.setStatus('current')
if mibBuilder.loadTexts: sdbDevOutMtCTRatio.setDescription('The multiplier to use for the outlet CTs.')
sdbDevOutMtPowerVoltAmpere = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 327680))).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevOutMtPowerVoltAmpere.setStatus('current')
if mibBuilder.loadTexts: sdbDevOutMtPowerVoltAmpere.setDescription('Calculated apparent power.')
sdbDevOutMtPowerWatt = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 7, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 327680))).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevOutMtPowerWatt.setStatus('current')
if mibBuilder.loadTexts: sdbDevOutMtPowerWatt.setDescription('Calculated real power.')
sdbDevOutSwTable = MibTable((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 7, 3), )
if mibBuilder.loadTexts: sdbDevOutSwTable.setStatus('current')
if mibBuilder.loadTexts: sdbDevOutSwTable.setDescription('A table containing information of switched outlets of devices connected to the databus.')
sdbDevOutSwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 7, 3, 1), ).setIndexNames((0, "SCHLEIFENBAUER-DATABUS-MIB", "sdbDevIdIndex"), (0, "SCHLEIFENBAUER-DATABUS-MIB", "sdbDevOutSwIndex"))
if mibBuilder.loadTexts: sdbDevOutSwEntry.setStatus('current')
if mibBuilder.loadTexts: sdbDevOutSwEntry.setDescription('Switched outlets entry containing objects of a switched outlet of a particular databus device. Note that this table has two indexes. sdbDevIdIndex to identify a particular device and sdbDevOutSwIndex to identify a particular outlet of the device identified by sdbDevIdIndex.')
sdbDevOutSwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48)))
if mibBuilder.loadTexts: sdbDevOutSwIndex.setStatus('current')
if mibBuilder.loadTexts: sdbDevOutSwIndex.setDescription('A unique value for each outlet. Its value ranges between 1 and the value of sdbDevCfOutletsSwitched.')
sdbDevOutSwCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 7, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdbDevOutSwCurrentState.setStatus('current')
if mibBuilder.loadTexts: sdbDevOutSwCurrentState.setDescription('The actual state of the outlet relay. Note that Writing is only effective after setting sdbDevOutSwUnlock.')
sdbDevOutSwScheduled = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("idle", 0), ("scheduled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevOutSwScheduled.setStatus('current')
if mibBuilder.loadTexts: sdbDevOutSwScheduled.setDescription('A one indicates pending activity; the switch delay has not yet expired.')
sdbDevOutSwUnlock = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 7, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdbDevOutSwUnlock.setStatus('current')
if mibBuilder.loadTexts: sdbDevOutSwUnlock.setDescription('Switching and rebooting is unlocked for 10 seconds by writing a 1.')
sdbDevOutSwIndividualOutletDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 7, 3, 1, 5), Second().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdbDevOutSwIndividualOutletDelay.setStatus('current')
if mibBuilder.loadTexts: sdbDevOutSwIndividualOutletDelay.setDescription('Delay before an individual outlet switches on at power-up.')
sdbDevOutSwReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 7, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("idle", 0), ("reboot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdbDevOutSwReboot.setStatus('current')
if mibBuilder.loadTexts: sdbDevOutSwReboot.setDescription('Reboot outlet relay if current state is on and outlet is unlocked; The outlet will be turned on after 10 seconds.')
sdbDevMeasuresTable = MibTable((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 8, 1), )
if mibBuilder.loadTexts: sdbDevMeasuresTable.setStatus('current')
if mibBuilder.loadTexts: sdbDevMeasuresTable.setDescription('A table containing information of temperatures of devices connected to the databus.')
sdbDevMeasuresEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 8, 1, 1), ).setIndexNames((0, "SCHLEIFENBAUER-DATABUS-MIB", "sdbDevIdIndex"))
if mibBuilder.loadTexts: sdbDevMeasuresEntry.setStatus('current')
if mibBuilder.loadTexts: sdbDevMeasuresEntry.setDescription('Device measures entry containing temperature information objects of a particular databus device.')
sdbDevMsIntTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 8, 1, 1, 1), DeciCelsius()).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevMsIntTemperature.setStatus('current')
if mibBuilder.loadTexts: sdbDevMsIntTemperature.setDescription('Actual internal device temperature in deg C')
sdbDevMsExtTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 8, 1, 1, 2), DeciCelsius()).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevMsExtTemperature.setStatus('current')
if mibBuilder.loadTexts: sdbDevMsExtTemperature.setDescription('Actual external device temperature sensor in deg C.')
sdbDevMsIntTemperaturePeak = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 8, 1, 1, 3), DeciCelsius()).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevMsIntTemperaturePeak.setStatus('current')
if mibBuilder.loadTexts: sdbDevMsIntTemperaturePeak.setDescription('Peak internal device temperature since last reset of alerts.')
sdbDevMsExtTemperaturePeak = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 8, 1, 1, 4), DeciCelsius()).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevMsExtTemperaturePeak.setStatus('current')
if mibBuilder.loadTexts: sdbDevMsExtTemperaturePeak.setDescription('Peak external device temperature since last reset of alerts.')
sdbDevSnsTable = MibTable((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 8, 2), )
if mibBuilder.loadTexts: sdbDevSnsTable.setStatus('current')
if mibBuilder.loadTexts: sdbDevSnsTable.setDescription('A table containing information of sensors of devices connected to the databus.')
sdbDevSnsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 8, 2, 1), ).setIndexNames((0, "SCHLEIFENBAUER-DATABUS-MIB", "sdbDevIdIndex"), (0, "SCHLEIFENBAUER-DATABUS-MIB", "sdbDevSnsIndex"))
if mibBuilder.loadTexts: sdbDevSnsEntry.setStatus('current')
if mibBuilder.loadTexts: sdbDevSnsEntry.setDescription('Sensors entry containing objects of a sensor of a particular databus device. Note that this table has two indexes. sdbDevIdIndex to identify a particular device and sdbDevSnsIndex to identify a particular sensor of the device identified by sdbDevIdIndex.')
sdbDevSnsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: sdbDevSnsIndex.setStatus('current')
if mibBuilder.loadTexts: sdbDevSnsIndex.setDescription('A unique value for each sensor. Its value ranges between 1 and the value of sdbDevCfSensors.')
sdbDevSnsType = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 8, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevSnsType.setStatus('current')
if mibBuilder.loadTexts: sdbDevSnsType.setDescription('Type of connected sensor. T = Temperature (C) H = Humidity (%) I = dry switch contact')
sdbDevSnsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 8, 2, 1, 3), DeciValue().subtype(subtypeSpec=ValueRangeConstraint(0, 327680))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdbDevSnsValue.setStatus('current')
if mibBuilder.loadTexts: sdbDevSnsValue.setDescription('Value of connected sensor')
sdbDevSnsName = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 12, 1, 1, 2, 8, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdbDevSnsName.setStatus('current')
if mibBuilder.loadTexts: sdbDevSnsName.setDescription('User definable name for sensors.')
sdbDevSsDeviceStatusCodeChanged = NotificationType((1, 3, 6, 1, 4, 1, 31034, 12, 1, 0, 1))
if mibBuilder.loadTexts: sdbDevSsDeviceStatusCodeChanged.setStatus('current')
if mibBuilder.loadTexts: sdbDevSsDeviceStatusCodeChanged.setDescription('Device status code changed. OBJECTS { sdbDevSsDeviceStatusCode }')
sdbDevSsTemperatureAlertDetected = NotificationType((1, 3, 6, 1, 4, 1, 31034, 12, 1, 0, 2))
if mibBuilder.loadTexts: sdbDevSsTemperatureAlertDetected.setStatus('current')
if mibBuilder.loadTexts: sdbDevSsTemperatureAlertDetected.setDescription('Temperature alert detected. Internal temperature alert: OBJECTS { sdbDevSsTemperatureAlert, sdbDevMsIntTemperature, sdbDevMsIntTemperaturePeak } External analog temperature alert: OBJECTS { sdbDevSsTemperatureAlert, sdbDevMsExtTemperature, sdbDevMsExtTemperaturePeak } External digital temperature alert: OBJECTS { sdbDevSsTemperatureAlert, sdbDevSnsValue }')
sdbDevSsInputCurrentAlertDetected = NotificationType((1, 3, 6, 1, 4, 1, 31034, 12, 1, 0, 3))
if mibBuilder.loadTexts: sdbDevSsInputCurrentAlertDetected.setStatus('current')
if mibBuilder.loadTexts: sdbDevSsInputCurrentAlertDetected.setDescription('Input current alert detected. OBJECTS { sdbDevSsInputCurrentAlert, sdbDevInActualCurrent }')
sdbDevSsOutletCurrentAlertDetected = NotificationType((1, 3, 6, 1, 4, 1, 31034, 12, 1, 0, 4))
if mibBuilder.loadTexts: sdbDevSsOutletCurrentAlertDetected.setStatus('current')
if mibBuilder.loadTexts: sdbDevSsOutletCurrentAlertDetected.setDescription('Outlet current alert detected. OBJECTS { sdbDevSsOutletCurrentAlert, sdbDevOutMtActualCurrent }')
sdbDevSsInputVoltageAlertDetected = NotificationType((1, 3, 6, 1, 4, 1, 31034, 12, 1, 0, 5))
if mibBuilder.loadTexts: sdbDevSsInputVoltageAlertDetected.setStatus('current')
if mibBuilder.loadTexts: sdbDevSsInputVoltageAlertDetected.setDescription('Input voltage alert detected. OBJECTS { sdbDevSsInputVoltageAlert, sdbDevInActualVoltage }')
sdbDevSsOutletCurrentDropAlertDetected = NotificationType((1, 3, 6, 1, 4, 1, 31034, 12, 1, 0, 6))
if mibBuilder.loadTexts: sdbDevSsOutletCurrentDropAlertDetected.setStatus('current')
if mibBuilder.loadTexts: sdbDevSsOutletCurrentDropAlertDetected.setDescription('Outlet current drop alert detected. OBJECTS { sdbDevSsOutletCurrentDropAlert, sdbDevOutMtActualCurrent }')
sdbDevSsInputCurrentDropAlertDetected = NotificationType((1, 3, 6, 1, 4, 1, 31034, 12, 1, 0, 7))
if mibBuilder.loadTexts: sdbDevSsInputCurrentDropAlertDetected.setStatus('current')
if mibBuilder.loadTexts: sdbDevSsInputCurrentDropAlertDetected.setDescription('Input current drop alert detected. OBJECTS { sdbDevSsInputCurrentDropAlert, sdbDevInActualCurrent }')
sdbDevSsSensorChangeAlertDetected = NotificationType((1, 3, 6, 1, 4, 1, 31034, 12, 1, 0, 8))
if mibBuilder.loadTexts: sdbDevSsSensorChangeAlertDetected.setStatus('current')
if mibBuilder.loadTexts: sdbDevSsSensorChangeAlertDetected.setDescription('Sensor channel change alert detected. OBJECTS { sdbDevSsSensorChangeAlert }')
sdbMgmtStsRingStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 31034, 12, 1, 0, 9))
if mibBuilder.loadTexts: sdbMgmtStsRingStateChanged.setStatus('current')
if mibBuilder.loadTexts: sdbMgmtStsRingStateChanged.setDescription('Ring state changed. Ring state changded to open: OBJECTS { sdbMgmtStsRingState, sdbMgmtStsRingBreachIndex } Ring state changded to closed: OBJECTS { sdbMgmtStsRingState }')
sdbDevSsOutletVoltageDropAlertDetected = NotificationType((1, 3, 6, 1, 4, 1, 31034, 12, 1, 0, 10))
if mibBuilder.loadTexts: sdbDevSsOutletVoltageDropAlertDetected.setStatus('current')
if mibBuilder.loadTexts: sdbDevSsOutletVoltageDropAlertDetected.setDescription('Outlet voltage drop alert detected. OBJECTS { sdbDevSsOutletVoltageDropAlert, sdbDevOutMtActualVoltage }')
sdbMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 31034, 12, 1, 2, 1, 1)).setObjects(("SCHLEIFENBAUER-DATABUS-MIB", "sdbMIBNotificationGroup"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbMIBDevSensorGroup"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbMIBDevOutGroup"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbMIBDevOutMtGroup"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbMIBDevOutSwGroup"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbMIBDevInGroup"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbMIBDevStGroup"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbMIBDevSsGroup"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbMIBDevCfGroup"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbMIBDevIdGroup"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbMIBDevRsGroup"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbMIBMgmtStatusGroup"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbMIBMgmtControlGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sdbMIBCompliance = sdbMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: sdbMIBCompliance.setDescription('The requirements for conformance to the SCHLEIFENBAUER-DATABUS-MIB.')
sdbMIBNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 31034, 12, 1, 2, 2, 1)).setObjects(("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevSsDeviceStatusCodeChanged"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevSsTemperatureAlertDetected"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevSsInputCurrentAlertDetected"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevSsOutletCurrentAlertDetected"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevSsInputVoltageAlertDetected"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevSsOutletCurrentDropAlertDetected"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevSsInputCurrentDropAlertDetected"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevSsSensorChangeAlertDetected"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbMgmtStsRingStateChanged"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevSsOutletVoltageDropAlertDetected"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sdbMIBNotificationGroup = sdbMIBNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: sdbMIBNotificationGroup.setDescription('A collection of notifications.')
sdbMIBDevIdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 31034, 12, 1, 2, 2, 3)).setObjects(("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevIdSPDMVersion"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevIdFirmwareVersion"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevIdSalesOrderNumber"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevIdProductId"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevIdSerialNumber"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevIdHardwareAddress"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevIdUnitAddress"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevIdName"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevIdLocation"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevIdVanityTag"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevIdMacAddress"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevIdBuildNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sdbMIBDevIdGroup = sdbMIBDevIdGroup.setStatus('current')
if mibBuilder.loadTexts: sdbMIBDevIdGroup.setDescription('A collection of objects providing identification information about the device.')
sdbMIBDevCfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 31034, 12, 1, 2, 2, 4)).setObjects(("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevCfPhases"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevCfOutletsTotal"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevCfOutletsSwitched"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevCfOutletsMetered"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevCfMaximumLoad"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevCfSensors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sdbMIBDevCfGroup = sdbMIBDevCfGroup.setStatus('current')
if mibBuilder.loadTexts: sdbMIBDevCfGroup.setDescription('A collection of objects providing configuration information about the device.')
sdbMIBDevSsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 31034, 12, 1, 2, 2, 5)).setObjects(("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevSsDeviceStatusCode"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevSsTemperatureAlert"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevSsInputCurrentAlert"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevSsOutletCurrentAlert"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevSsInputVoltageAlert"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevSsOutletCurrentDropAlert"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevSsInputCurrentDropAlert"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevSsSensorChangeAlert"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevSsOutletVoltageDropAlert"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sdbMIBDevSsGroup = sdbMIBDevSsGroup.setStatus('current')
if mibBuilder.loadTexts: sdbMIBDevSsGroup.setDescription('A collection of objects providing status information about the device.')
sdbMIBDevRsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 31034, 12, 1, 2, 2, 6)).setObjects(("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevRsResetAlerts"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevRsResetPeaksAndDips"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevRsReboot"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevRsZeroInputKWhSubtotal"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevRsZeroOutletKWhSubtotal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sdbMIBDevRsGroup = sdbMIBDevRsGroup.setStatus('current')
if mibBuilder.loadTexts: sdbMIBDevRsGroup.setDescription('Groups resettable attributes op the device.')
sdbMIBDevStGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 31034, 12, 1, 2, 2, 7)).setObjects(("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevStAutoResetAlerts"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevStExtendedNames"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevStPeakDuration"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevStLocalAlertReset"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevStFixedOutletDelay"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevStPowerSaverMode"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevStOutletPowerUpMode"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevStMaximumTemperature"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevStDisplayOrientation"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevStCurrentDropDetection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sdbMIBDevStGroup = sdbMIBDevStGroup.setStatus('current')
if mibBuilder.loadTexts: sdbMIBDevStGroup.setDescription('A collection of objects providing the actual settings about the device.')
sdbMIBDevInGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 31034, 12, 1, 2, 2, 8)).setObjects(("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevInKWhTotal"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevInKWhSubtotal"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevInPowerFactor"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevInActualCurrent"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevInPeakCurrent"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevInActualVoltage"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevInMinVoltage"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevInPowerVoltAmpere"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevInPowerWatt"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevInMaxAmps"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevInCTRatio"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevInName"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevInZeroKWhSubtotal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sdbMIBDevInGroup = sdbMIBDevInGroup.setStatus('current')
if mibBuilder.loadTexts: sdbMIBDevInGroup.setDescription('A collection of objects providing the actual input measurements of the device.')
sdbMIBDevOutGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 31034, 12, 1, 2, 2, 9)).setObjects(("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevOutName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sdbMIBDevOutGroup = sdbMIBDevOutGroup.setStatus('current')
if mibBuilder.loadTexts: sdbMIBDevOutGroup.setDescription('A collection of objects providing the actual outlet measurements of the device.')
sdbMIBDevOutMtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 31034, 12, 1, 2, 2, 10)).setObjects(("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevOutMtKWhTotal"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevOutMtKWhSubtotal"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevOutMtPowerFactor"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevOutMtActualCurrent"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevOutMtPeakCurrent"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevOutMtActualVoltage"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevOutMtMaxAmps"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevOutMtCTRatio"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevOutMtPowerVoltAmpere"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevOutMtPowerWatt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sdbMIBDevOutMtGroup = sdbMIBDevOutMtGroup.setStatus('current')
if mibBuilder.loadTexts: sdbMIBDevOutMtGroup.setDescription('A collection of objects providing the actual outlet measurements of the device.')
sdbMIBDevOutSwGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 31034, 12, 1, 2, 2, 11)).setObjects(("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevOutSwCurrentState"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevOutSwScheduled"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevOutSwUnlock"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevOutSwIndividualOutletDelay"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevOutSwReboot"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sdbMIBDevOutSwGroup = sdbMIBDevOutSwGroup.setStatus('current')
if mibBuilder.loadTexts: sdbMIBDevOutSwGroup.setDescription('A collection of objects providing the actual outlet measurements of the device.')
sdbMIBDevSensorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 31034, 12, 1, 2, 2, 12)).setObjects(("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevSnsType"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevSnsValue"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevSnsName"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevMsIntTemperature"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevMsExtTemperature"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevMsIntTemperaturePeak"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbDevMsExtTemperaturePeak"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sdbMIBDevSensorGroup = sdbMIBDevSensorGroup.setStatus('current')
if mibBuilder.loadTexts: sdbMIBDevSensorGroup.setDescription('A collection of objects providing the actual environmental measurements of the device.')
sdbMIBMgmtStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 31034, 12, 1, 2, 2, 13)).setObjects(("SCHLEIFENBAUER-DATABUS-MIB", "sdbMgmtStsDevices"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbMgmtStsAddressableDevices"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbMgmtStsNewDevices"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbMgmtStsDuplicateDevices"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbMgmtStsRingState"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbMgmtStsRingBreachIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sdbMIBMgmtStatusGroup = sdbMIBMgmtStatusGroup.setStatus('current')
if mibBuilder.loadTexts: sdbMIBMgmtStatusGroup.setDescription('A collection of objects providing management status information about the databus.')
sdbMIBMgmtControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 31034, 12, 1, 2, 2, 14)).setObjects(("SCHLEIFENBAUER-DATABUS-MIB", "sdbMgmtCtrlScan"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbMgmtCtrlRenumberAllFromN"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbMgmtCtrlRenumberZeros"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbMgmtCtrlDevUnitAddress"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbMgmtCtrlDevHardwareAddress"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbMgmtCtrlDevIsNew"), ("SCHLEIFENBAUER-DATABUS-MIB", "sdbMgmtCtrlDevIsDuplicate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sdbMIBMgmtControlGroup = sdbMIBMgmtControlGroup.setStatus('current')
if mibBuilder.loadTexts: sdbMIBMgmtControlGroup.setDescription('A collection of objects providing management control information about the databus.')
mibBuilder.exportSymbols("SCHLEIFENBAUER-DATABUS-MIB", sdbMgmtStsRingBreachIndex=sdbMgmtStsRingBreachIndex, sdbMIBConformance=sdbMIBConformance, sdbDevIdSPDMVersion=sdbDevIdSPDMVersion, sdbDevReset=sdbDevReset, sdbMIBDevSensorGroup=sdbMIBDevSensorGroup, sdbMgmtCtrlDevUnitAddress=sdbMgmtCtrlDevUnitAddress, sdbDevCfMaximumLoad=sdbDevCfMaximumLoad, sdbMgmtStsRingStateChanged=sdbMgmtStsRingStateChanged, sdbMgmtCtrlDevHardwareAddress=sdbMgmtCtrlDevHardwareAddress, sdbDevStDisplayOrientation=sdbDevStDisplayOrientation, sdbDevRsResetAlerts=sdbDevRsResetAlerts, sdbDevSsInputCurrentDropAlertDetected=sdbDevSsInputCurrentDropAlertDetected, sdbDevIdHardwareAddress=sdbDevIdHardwareAddress, sdbDevStPowerSaverMode=sdbDevStPowerSaverMode, sdbDevInIndex=sdbDevInIndex, sdbDevInKWhSubtotal=sdbDevInKWhSubtotal, schleifenbauerDatabusMIB=schleifenbauerDatabusMIB, sdbDevInPeakCurrent=sdbDevInPeakCurrent, sdbMgmtStsAddressableDevices=sdbMgmtStsAddressableDevices, DeciPercent=DeciPercent, sdbDevIdName=sdbDevIdName, sdbDevSsSensorChangeAlert=sdbDevSsSensorChangeAlert, sdbDevIdBuildNumber=sdbDevIdBuildNumber, sdbDevOutMtPowerVoltAmpere=sdbDevOutMtPowerVoltAmpere, sdbDevOutEntry=sdbDevOutEntry, sdbDevMsIntTemperature=sdbDevMsIntTemperature, sdbDevSsTemperatureAlert=sdbDevSsTemperatureAlert, sdbDevOutMtIndex=sdbDevOutMtIndex, sdbDevInKWhTotal=sdbDevInKWhTotal, sdbDevInActualCurrent=sdbDevInActualCurrent, sdbDevOutMtKWhTotal=sdbDevOutMtKWhTotal, sdbDevSnsType=sdbDevSnsType, sdbDevSsInputCurrentAlertDetected=sdbDevSsInputCurrentAlertDetected, sdbMIBDevRsGroup=sdbMIBDevRsGroup, sdbMIBDevIdGroup=sdbMIBDevIdGroup, PYSNMP_MODULE_ID=schleifenbauerDatabusMIB, sdbMIBGroups=sdbMIBGroups, sdbDevOutSwScheduled=sdbDevOutSwScheduled, sdbMIBDevCfGroup=sdbMIBDevCfGroup, sdbDevSnsValue=sdbDevSnsValue, sdbDevOutlet=sdbDevOutlet, sdbDevSsEntry=sdbDevSsEntry, sdbMIBNotifications=sdbMIBNotifications, sdbDevOutMtActualCurrent=sdbDevOutMtActualCurrent, sdbDevInEntry=sdbDevInEntry, sdbMIBDevOutSwGroup=sdbMIBDevOutSwGroup, sdbDevConfiguration=sdbDevConfiguration, sdbDevOutName=sdbDevOutName, sdbDevIdProductId=sdbDevIdProductId, sdbDevOutSwIndividualOutletDelay=sdbDevOutSwIndividualOutletDelay, sdbDevCfTable=sdbDevCfTable, sdbDevIdFirmwareVersion=sdbDevIdFirmwareVersion, sdbDevIdLocation=sdbDevIdLocation, sdbDevStExtendedNames=sdbDevStExtendedNames, sdbDevIdSalesOrderNumber=sdbDevIdSalesOrderNumber, sdbDevOutTable=sdbDevOutTable, sdbDevSsDeviceStatusCodeChanged=sdbDevSsDeviceStatusCodeChanged, sdbMIBDevSsGroup=sdbMIBDevSsGroup, sdbMIBDevInGroup=sdbMIBDevInGroup, sdbDevRsResetPeaksAndDips=sdbDevRsResetPeaksAndDips, sdbMgmtStsNewDevices=sdbMgmtStsNewDevices, sdbDevIdSerialNumber=sdbDevIdSerialNumber, sdbDevOutIndex=sdbDevOutIndex, sdbDevOutMtKWhSubtotal=sdbDevOutMtKWhSubtotal, sdbMgmtStsRingState=sdbMgmtStsRingState, sdbDevSsInputVoltageAlertDetected=sdbDevSsInputVoltageAlertDetected, sdbDevOutMtTable=sdbDevOutMtTable, sdbMgmtStsDevices=sdbMgmtStsDevices, sdbDevRsTable=sdbDevRsTable, sdbDevStTable=sdbDevStTable, sdbDevCfOutletsTotal=sdbDevCfOutletsTotal, sdbMgmtCtrlDevIsNew=sdbMgmtCtrlDevIsNew, sdbDevStFixedOutletDelay=sdbDevStFixedOutletDelay, sdbDevSsSensorChangeAlertDetected=sdbDevSsSensorChangeAlertDetected, sdbDevIdTable=sdbDevIdTable, sdbDevInTable=sdbDevInTable, sdbDevSnsTable=sdbDevSnsTable, sdbDevSsInputVoltageAlert=sdbDevSsInputVoltageAlert, Second=Second, sdbDevSsDeviceStatusCode=sdbDevSsDeviceStatusCode, sdbDevStAutoResetAlerts=sdbDevStAutoResetAlerts, sdbDevSystemStatus=sdbDevSystemStatus, sdbDevStLocalAlertReset=sdbDevStLocalAlertReset, sdbDevIdentification=sdbDevIdentification, sdbDevOutSwUnlock=sdbDevOutSwUnlock, sdbMIBMgmtStatusGroup=sdbMIBMgmtStatusGroup, sdbDevSensor=sdbDevSensor, sdbDevInPowerFactor=sdbDevInPowerFactor, sdbMgmtControl=sdbMgmtControl, sdbDevInPowerWatt=sdbDevInPowerWatt, sdbDevMeasuresTable=sdbDevMeasuresTable, DeciCelsius=DeciCelsius, sdbDevRsEntry=sdbDevRsEntry, sdbMIBDevStGroup=sdbMIBDevStGroup, sdbDevStPeakDuration=sdbDevStPeakDuration, sdbMgmtCtrlScan=sdbMgmtCtrlScan, sdbDevSsTemperatureAlertDetected=sdbDevSsTemperatureAlertDetected, sdbDevOutSwReboot=sdbDevOutSwReboot, sdbDevOutMtCTRatio=sdbDevOutMtCTRatio, sdbMgmtCtrlDevIsDuplicate=sdbMgmtCtrlDevIsDuplicate, sdbDevInName=sdbDevInName, sdbMIBDevOutMtGroup=sdbMIBDevOutMtGroup, sdbMgmtStsDuplicateDevices=sdbMgmtStsDuplicateDevices, sdbDevIdIndex=sdbDevIdIndex, sdbDevOutMtPowerWatt=sdbDevOutMtPowerWatt, KiloWattHour=KiloWattHour, sdbDevOutMtPowerFactor=sdbDevOutMtPowerFactor, sdbMIBMgmtControlGroup=sdbMIBMgmtControlGroup, sdbDevMsExtTemperaturePeak=sdbDevMsExtTemperaturePeak, sdbDevStMaximumTemperature=sdbDevStMaximumTemperature, sdbMIBDevOutGroup=sdbMIBDevOutGroup, sdbDevInPowerVoltAmpere=sdbDevInPowerVoltAmpere, sdbDevRsReboot=sdbDevRsReboot, DeciAmpere=DeciAmpere, sdbMgmtCtrlDevIndex=sdbMgmtCtrlDevIndex, sdbDevInMaxAmps=sdbDevInMaxAmps, sdbDevInZeroKWhSubtotal=sdbDevInZeroKWhSubtotal, sdbDevOutSwCurrentState=sdbDevOutSwCurrentState, sdbDevIdMacAddress=sdbDevIdMacAddress, sdbDevCfPhases=sdbDevCfPhases, sdbMgmtCtrlRenumberZeros=sdbMgmtCtrlRenumberZeros, MilliSecond=MilliSecond, sdbDevOutSwEntry=sdbDevOutSwEntry, sdbDevSsInputCurrentDropAlert=sdbDevSsInputCurrentDropAlert, sdbDevMsIntTemperaturePeak=sdbDevMsIntTemperaturePeak, sdbMIBObjects=sdbMIBObjects, sdbDevCfSensors=sdbDevCfSensors, sdbDevOutSwTable=sdbDevOutSwTable, sdbMgmtCtrlDevicesEntry=sdbMgmtCtrlDevicesEntry, DeciValue=DeciValue, sdbDevInCTRatio=sdbDevInCTRatio, sdbDevInMinVoltage=sdbDevInMinVoltage, sdbDevSsOutletCurrentDropAlertDetected=sdbDevSsOutletCurrentDropAlertDetected, sdbDevCfEntry=sdbDevCfEntry, sdbDevOutMtActualVoltage=sdbDevOutMtActualVoltage, sdbDevInput=sdbDevInput, sdbDevStCurrentDropDetection=sdbDevStCurrentDropDetection, sdbMgmtCtrlRenumberAllFromN=sdbMgmtCtrlRenumberAllFromN, sdbDevSsOutletCurrentAlertDetected=sdbDevSsOutletCurrentAlertDetected, sdbMIBNotificationGroup=sdbMIBNotificationGroup, sdbDevOutSwIndex=sdbDevOutSwIndex, sdbMIBCompliance=sdbMIBCompliance, sdbDevSnsEntry=sdbDevSnsEntry, sdbDevInActualVoltage=sdbDevInActualVoltage, sdbDevCfOutletsMetered=sdbDevCfOutletsMetered, sdbDevMeasuresEntry=sdbDevMeasuresEntry, sdbMIBCompliances=sdbMIBCompliances, DeciVolt=DeciVolt, sdbDevSsOutletCurrentAlert=sdbDevSsOutletCurrentAlert, sdbDevSnsName=sdbDevSnsName, sdbDevice=sdbDevice, sdbDevStOutletPowerUpMode=sdbDevStOutletPowerUpMode, sdbDevSettings=sdbDevSettings, sdbDevSsTable=sdbDevSsTable, sdbDevRsZeroOutletKWhSubtotal=sdbDevRsZeroOutletKWhSubtotal, sdbMgmt=sdbMgmt, sdbDevOutMtEntry=sdbDevOutMtEntry, sdbDevStEntry=sdbDevStEntry, sdbDevRsZeroInputKWhSubtotal=sdbDevRsZeroInputKWhSubtotal, sdbDevSsOutletVoltageDropAlert=sdbDevSsOutletVoltageDropAlert, sdbDevCfOutletsSwitched=sdbDevCfOutletsSwitched, sdbDevOutMtMaxAmps=sdbDevOutMtMaxAmps, sdbDevSsInputCurrentAlert=sdbDevSsInputCurrentAlert, sdbDevIdUnitAddress=sdbDevIdUnitAddress, sdbMgmtCtrlDevicesTable=sdbMgmtCtrlDevicesTable, sdbDevSsOutletCurrentDropAlert=sdbDevSsOutletCurrentDropAlert, sdbDevMsExtTemperature=sdbDevMsExtTemperature, sdbDevIdEntry=sdbDevIdEntry, sdbDevIdVanityTag=sdbDevIdVanityTag, sdbDevSnsIndex=sdbDevSnsIndex, sdbMgmtStatus=sdbMgmtStatus, sdbDevSsOutletVoltageDropAlertDetected=sdbDevSsOutletVoltageDropAlertDetected, sdbDevOutMtPeakCurrent=sdbDevOutMtPeakCurrent)
