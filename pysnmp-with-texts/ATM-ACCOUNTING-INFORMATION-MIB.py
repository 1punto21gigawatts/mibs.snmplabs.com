#
# PySNMP MIB module ATM-ACCOUNTING-INFORMATION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ATM-ACCOUNTING-INFORMATION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:30:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
AtmAddr, = mibBuilder.importSymbols("ATM-TC-MIB", "AtmAddr")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Gauge32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter64, Counter32, Unsigned32, iso, Bits, IpAddress, TimeTicks, NotificationType, mib_2, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Gauge32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter64", "Counter32", "Unsigned32", "iso", "Bits", "IpAddress", "TimeTicks", "NotificationType", "mib-2", "ObjectIdentity")
DisplayString, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "TextualConvention")
atmAccountingInformationMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 59))
if mibBuilder.loadTexts: atmAccountingInformationMIB.setLastUpdated('9611052000Z')
if mibBuilder.loadTexts: atmAccountingInformationMIB.setOrganization('IETF AToM MIB Working Group')
if mibBuilder.loadTexts: atmAccountingInformationMIB.setContactInfo(' Keith McCloghrie Cisco Systems, Inc. 170 West Tasman Drive, San Jose CA 95134-1706. Phone: +1 408 526 5260 Email: kzm@cisco.com')
if mibBuilder.loadTexts: atmAccountingInformationMIB.setDescription('The MIB module for identifying items of accounting information which are applicable to ATM connections.')
atmAcctngMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 59, 1))
atmAcctngDataObjects = ObjectIdentity((1, 3, 6, 1, 2, 1, 59, 1, 1))
if mibBuilder.loadTexts: atmAcctngDataObjects.setStatus('current')
if mibBuilder.loadTexts: atmAcctngDataObjects.setDescription('This identifier defines a subtree under which various objects are defined such that a set of objects to be collected as ATM accounting data can be specified as a (subtree, list) tuple using this identifier as the subtree.')
atmAcctngConnectionType = MibScalar((1, 3, 6, 1, 2, 1, 59, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("pvc", 1), ("pvp", 2), ("svcIncoming", 3), ("svcOutgoing", 4), ("svpIncoming", 5), ("svpOutgoing", 6), ("spvcInitiator", 7), ("spvcTarget", 8), ("spvpInitiator", 9), ("spvpTarget", 10))))
if mibBuilder.loadTexts: atmAcctngConnectionType.setStatus('current')
if mibBuilder.loadTexts: atmAcctngConnectionType.setDescription('The type of connection.')
atmAcctngCastType = MibScalar((1, 3, 6, 1, 2, 1, 59, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("p2p", 1), ("p2mp", 2))))
if mibBuilder.loadTexts: atmAcctngCastType.setStatus('current')
if mibBuilder.loadTexts: atmAcctngCastType.setDescription('An indication of whether the connection is point-to-point or point-to-multipoint.')
atmAcctngIfName = MibScalar((1, 3, 6, 1, 2, 1, 59, 1, 1, 3), DisplayString())
if mibBuilder.loadTexts: atmAcctngIfName.setStatus('current')
if mibBuilder.loadTexts: atmAcctngIfName.setDescription('A textual name for the interface on which the data for the connection was collected. If the local SNMP agent supports the object ifName, the value of this object must be identical to that of ifName in the conceptual row of the ifTable corresponding to this interface.')
atmAcctngIfAlias = MibScalar((1, 3, 6, 1, 2, 1, 59, 1, 1, 4), DisplayString())
if mibBuilder.loadTexts: atmAcctngIfAlias.setStatus('current')
if mibBuilder.loadTexts: atmAcctngIfAlias.setDescription("The 'alias' name for the interface as specified by a network manager, e.g., via a management set operation to modify the relevant instance of the ifAlias object. Note that in contrast to ifIndex, ifAlias provides a non-volatile 'handle' for the interface, the value of which is retained across agent reboots.")
atmAcctngVpi = MibScalar((1, 3, 6, 1, 2, 1, 59, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: atmAcctngVpi.setStatus('current')
if mibBuilder.loadTexts: atmAcctngVpi.setDescription('The VPI used for the connection.')
atmAcctngVci = MibScalar((1, 3, 6, 1, 2, 1, 59, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: atmAcctngVci.setStatus('current')
if mibBuilder.loadTexts: atmAcctngVci.setDescription('The VCI used for the connection.')
atmAcctngCallingParty = MibScalar((1, 3, 6, 1, 2, 1, 59, 1, 1, 7), AtmAddr())
if mibBuilder.loadTexts: atmAcctngCallingParty.setStatus('current')
if mibBuilder.loadTexts: atmAcctngCallingParty.setDescription("The connection's calling party. If unknown (e.g., for a PVC), then the value of this object is the zero-length string.")
atmAcctngCalledParty = MibScalar((1, 3, 6, 1, 2, 1, 59, 1, 1, 8), AtmAddr())
if mibBuilder.loadTexts: atmAcctngCalledParty.setStatus('current')
if mibBuilder.loadTexts: atmAcctngCalledParty.setDescription("The connection's called party. If unknown (e.g., for a PVC), then the value of this object is the zero-length string.")
atmAcctngCallReference = MibScalar((1, 3, 6, 1, 2, 1, 59, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3)))
if mibBuilder.loadTexts: atmAcctngCallReference.setStatus('current')
if mibBuilder.loadTexts: atmAcctngCallReference.setDescription("The connection's call reference value (e.g., from Q.2931). If unknown (e.g., for a PVC), then the value of this object is the zero-length string.")
atmAcctngStartTime = MibScalar((1, 3, 6, 1, 2, 1, 59, 1, 1, 10), DateAndTime())
if mibBuilder.loadTexts: atmAcctngStartTime.setStatus('current')
if mibBuilder.loadTexts: atmAcctngStartTime.setDescription('The time when the connection was established.')
atmAcctngCollectionTime = MibScalar((1, 3, 6, 1, 2, 1, 59, 1, 1, 11), DateAndTime())
if mibBuilder.loadTexts: atmAcctngCollectionTime.setStatus('current')
if mibBuilder.loadTexts: atmAcctngCollectionTime.setDescription('The time at which the data in this record was collected.')
atmAcctngCollectMode = MibScalar((1, 3, 6, 1, 2, 1, 59, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("onRelease", 1), ("periodically", 2), ("onCommand", 3))))
if mibBuilder.loadTexts: atmAcctngCollectMode.setStatus('current')
if mibBuilder.loadTexts: atmAcctngCollectMode.setDescription('The reason why this connection data was collected.')
atmAcctngReleaseCause = MibScalar((1, 3, 6, 1, 2, 1, 59, 1, 1, 13), Integer32())
if mibBuilder.loadTexts: atmAcctngReleaseCause.setStatus('current')
if mibBuilder.loadTexts: atmAcctngReleaseCause.setDescription('If the connection data was collected because of the release of an SVC, then this is the cause code in the Release message for the connection; otherwise, this object has the value zero.')
atmAcctngServiceCategory = MibScalar((1, 3, 6, 1, 2, 1, 59, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("cbr", 2), ("vbrRt", 3), ("vbrNrt", 4), ("abr", 5), ("ubr", 6), ("unknown", 7))))
if mibBuilder.loadTexts: atmAcctngServiceCategory.setStatus('current')
if mibBuilder.loadTexts: atmAcctngServiceCategory.setDescription("The connection's service category.")
atmAcctngTransmittedCells = MibScalar((1, 3, 6, 1, 2, 1, 59, 1, 1, 15), Counter64())
if mibBuilder.loadTexts: atmAcctngTransmittedCells.setStatus('current')
if mibBuilder.loadTexts: atmAcctngTransmittedCells.setDescription('The number of cells, including OAM cells, transmitted by this switch on this connection.')
atmAcctngTransmittedClp0Cells = MibScalar((1, 3, 6, 1, 2, 1, 59, 1, 1, 16), Counter64())
if mibBuilder.loadTexts: atmAcctngTransmittedClp0Cells.setStatus('current')
if mibBuilder.loadTexts: atmAcctngTransmittedClp0Cells.setDescription('The number of cells with CLP=0, including OAM cells, transmitted by this switch on this connection.')
atmAcctngReceivedCells = MibScalar((1, 3, 6, 1, 2, 1, 59, 1, 1, 17), Counter64())
if mibBuilder.loadTexts: atmAcctngReceivedCells.setStatus('current')
if mibBuilder.loadTexts: atmAcctngReceivedCells.setDescription('The number of cells, including OAM cells, received by this switch on this connection.')
atmAcctngReceivedClp0Cells = MibScalar((1, 3, 6, 1, 2, 1, 59, 1, 1, 18), Counter64())
if mibBuilder.loadTexts: atmAcctngReceivedClp0Cells.setStatus('current')
if mibBuilder.loadTexts: atmAcctngReceivedClp0Cells.setDescription('The number of cells with CLP=0, including OAM cells, received by this switch on this connection.')
atmAcctngTransmitTrafficDescriptorType = MibScalar((1, 3, 6, 1, 2, 1, 59, 1, 1, 19), ObjectIdentifier())
if mibBuilder.loadTexts: atmAcctngTransmitTrafficDescriptorType.setReference('See atmTrafficDescriptorTypes in ATM-MIB.my in RFC 1695 and its successors.')
if mibBuilder.loadTexts: atmAcctngTransmitTrafficDescriptorType.setStatus('current')
if mibBuilder.loadTexts: atmAcctngTransmitTrafficDescriptorType.setDescription('The traffic descriptor type (as defined in RFC 1695 and its successors) in the direction in which the switch transmits cells on the connection.')
atmAcctngTransmitTrafficDescriptorParam1 = MibScalar((1, 3, 6, 1, 2, 1, 59, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: atmAcctngTransmitTrafficDescriptorParam1.setStatus('current')
if mibBuilder.loadTexts: atmAcctngTransmitTrafficDescriptorParam1.setDescription('The first traffic descriptor parameter in the direction in which this switch transmits cells on this connection. Interpretation of this parameter is dependent on the value of atmAcctngTransmitTrafficDescriptorType.')
atmAcctngTransmitTrafficDescriptorParam2 = MibScalar((1, 3, 6, 1, 2, 1, 59, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: atmAcctngTransmitTrafficDescriptorParam2.setStatus('current')
if mibBuilder.loadTexts: atmAcctngTransmitTrafficDescriptorParam2.setDescription('The second traffic descriptor parameter in the direction in which this switch transmits cells on this connection. Interpretation of this parameter is dependent on the value of atmAcctngTransmitTrafficDescriptorType.')
atmAcctngTransmitTrafficDescriptorParam3 = MibScalar((1, 3, 6, 1, 2, 1, 59, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: atmAcctngTransmitTrafficDescriptorParam3.setStatus('current')
if mibBuilder.loadTexts: atmAcctngTransmitTrafficDescriptorParam3.setDescription('The third traffic descriptor parameter in the direction in which this switch transmits cells on this connection. Interpretation of this parameter is dependent on the value of atmAcctngTransmitTrafficDescriptorType.')
atmAcctngTransmitTrafficDescriptorParam4 = MibScalar((1, 3, 6, 1, 2, 1, 59, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: atmAcctngTransmitTrafficDescriptorParam4.setStatus('current')
if mibBuilder.loadTexts: atmAcctngTransmitTrafficDescriptorParam4.setDescription('The fourth traffic descriptor parameter in the direction in which this switch transmits cells on this connection. Interpretation of this parameter is dependent on the value of atmAcctngTransmitTrafficDescriptorType.')
atmAcctngTransmitTrafficDescriptorParam5 = MibScalar((1, 3, 6, 1, 2, 1, 59, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: atmAcctngTransmitTrafficDescriptorParam5.setStatus('current')
if mibBuilder.loadTexts: atmAcctngTransmitTrafficDescriptorParam5.setDescription('The fifth traffic descriptor parameter in the direction in which this switch transmits cells on this connection. Interpretation of this parameter is dependent on the value of atmAcctngTransmitTrafficDescriptorType.')
atmAcctngReceiveTrafficDescriptorType = MibScalar((1, 3, 6, 1, 2, 1, 59, 1, 1, 25), ObjectIdentifier())
if mibBuilder.loadTexts: atmAcctngReceiveTrafficDescriptorType.setReference('See atmTrafficDescriptorTypes in ATM-MIB.my in RFC 1695 and its successors.')
if mibBuilder.loadTexts: atmAcctngReceiveTrafficDescriptorType.setStatus('current')
if mibBuilder.loadTexts: atmAcctngReceiveTrafficDescriptorType.setDescription('The traffic descriptor type (as defined in RFC 1695 and its successors) in the direction in which this switch receives cells on this connection.')
atmAcctngReceiveTrafficDescriptorParam1 = MibScalar((1, 3, 6, 1, 2, 1, 59, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: atmAcctngReceiveTrafficDescriptorParam1.setStatus('current')
if mibBuilder.loadTexts: atmAcctngReceiveTrafficDescriptorParam1.setDescription('The first traffic descriptor parameter in the direction in which this switch receives cells on this connection. Interpretation of this parameter is dependent on the value of atmAcctngReceiveTrafficDescriptorType.')
atmAcctngReceiveTrafficDescriptorParam2 = MibScalar((1, 3, 6, 1, 2, 1, 59, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: atmAcctngReceiveTrafficDescriptorParam2.setStatus('current')
if mibBuilder.loadTexts: atmAcctngReceiveTrafficDescriptorParam2.setDescription('The second traffic descriptor parameter in the direction in which this switch receives cells on this connection. Interpretation of this parameter is dependent on the value of atmAcctngReceiveTrafficDescriptorType.')
atmAcctngReceiveTrafficDescriptorParam3 = MibScalar((1, 3, 6, 1, 2, 1, 59, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: atmAcctngReceiveTrafficDescriptorParam3.setStatus('current')
if mibBuilder.loadTexts: atmAcctngReceiveTrafficDescriptorParam3.setDescription('The third traffic descriptor parameter in the direction in which this switch receives cells on this connection. Interpretation of this parameter is dependent on the value of atmAcctngReceiveTrafficDescriptorType.')
atmAcctngReceiveTrafficDescriptorParam4 = MibScalar((1, 3, 6, 1, 2, 1, 59, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: atmAcctngReceiveTrafficDescriptorParam4.setStatus('current')
if mibBuilder.loadTexts: atmAcctngReceiveTrafficDescriptorParam4.setDescription('The fourth traffic descriptor parameter in the direction in which this switch receives cells on this connection. Interpretation of this parameter is dependent on the value of atmAcctngReceiveTrafficDescriptorType.')
atmAcctngReceiveTrafficDescriptorParam5 = MibScalar((1, 3, 6, 1, 2, 1, 59, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: atmAcctngReceiveTrafficDescriptorParam5.setStatus('current')
if mibBuilder.loadTexts: atmAcctngReceiveTrafficDescriptorParam5.setDescription('The fifth traffic descriptor parameter in the direction in which this switch receives cells on this connection. Interpretation of this parameter is dependent on the value of atmAcctngReceiveTrafficDescriptorType.')
atmAcctngCallingPartySubAddress = MibScalar((1, 3, 6, 1, 2, 1, 59, 1, 1, 31), AtmAddr())
if mibBuilder.loadTexts: atmAcctngCallingPartySubAddress.setStatus('current')
if mibBuilder.loadTexts: atmAcctngCallingPartySubAddress.setDescription("The connection's calling party sub-address. If the connection has no calling party sub-address, or it's value is unknown, then the value of this object is the zero-length string.")
atmAcctngCalledPartySubAddress = MibScalar((1, 3, 6, 1, 2, 1, 59, 1, 1, 32), AtmAddr())
if mibBuilder.loadTexts: atmAcctngCalledPartySubAddress.setStatus('current')
if mibBuilder.loadTexts: atmAcctngCalledPartySubAddress.setDescription("The connection's called party sub-address. If the connection has no called party sub-address, or it's value is unknown, then the value of this object is the zero-length string.")
atmAcctngRecordCrc16 = MibScalar((1, 3, 6, 1, 2, 1, 59, 1, 1, 33), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2))
if mibBuilder.loadTexts: atmAcctngRecordCrc16.setStatus('current')
if mibBuilder.loadTexts: atmAcctngRecordCrc16.setDescription("The value of the CRC-16 checksum (as defined by ISO 3309 (HDLC) and/or ITU X.25) calculated over the accounting record containing this object. While the mechanism for calculating/encoding the checksum value is specific to the method of encoding the accounting record, an accounting record containing this object is typically generated by initializing the value of this object to the all-zeros string ('0000'H), with the location of these zeros being saved. After generating the record, the checksum is calculated over the whole connection record and then the all-zeros value is overwritten (at the saved location) by the calculated value of the checksum.")
mibBuilder.exportSymbols("ATM-ACCOUNTING-INFORMATION-MIB", atmAcctngReceiveTrafficDescriptorType=atmAcctngReceiveTrafficDescriptorType, atmAcctngVci=atmAcctngVci, atmAccountingInformationMIB=atmAccountingInformationMIB, atmAcctngStartTime=atmAcctngStartTime, atmAcctngVpi=atmAcctngVpi, atmAcctngTransmitTrafficDescriptorParam1=atmAcctngTransmitTrafficDescriptorParam1, atmAcctngReceiveTrafficDescriptorParam1=atmAcctngReceiveTrafficDescriptorParam1, atmAcctngRecordCrc16=atmAcctngRecordCrc16, atmAcctngConnectionType=atmAcctngConnectionType, atmAcctngReceiveTrafficDescriptorParam5=atmAcctngReceiveTrafficDescriptorParam5, atmAcctngMIBObjects=atmAcctngMIBObjects, atmAcctngIfAlias=atmAcctngIfAlias, atmAcctngCollectMode=atmAcctngCollectMode, atmAcctngReleaseCause=atmAcctngReleaseCause, atmAcctngTransmitTrafficDescriptorType=atmAcctngTransmitTrafficDescriptorType, atmAcctngIfName=atmAcctngIfName, atmAcctngTransmittedClp0Cells=atmAcctngTransmittedClp0Cells, atmAcctngServiceCategory=atmAcctngServiceCategory, atmAcctngReceivedClp0Cells=atmAcctngReceivedClp0Cells, atmAcctngTransmitTrafficDescriptorParam5=atmAcctngTransmitTrafficDescriptorParam5, atmAcctngDataObjects=atmAcctngDataObjects, atmAcctngCallReference=atmAcctngCallReference, atmAcctngCastType=atmAcctngCastType, atmAcctngReceivedCells=atmAcctngReceivedCells, atmAcctngReceiveTrafficDescriptorParam4=atmAcctngReceiveTrafficDescriptorParam4, atmAcctngReceiveTrafficDescriptorParam3=atmAcctngReceiveTrafficDescriptorParam3, PYSNMP_MODULE_ID=atmAccountingInformationMIB, atmAcctngCalledParty=atmAcctngCalledParty, atmAcctngTransmitTrafficDescriptorParam2=atmAcctngTransmitTrafficDescriptorParam2, atmAcctngCollectionTime=atmAcctngCollectionTime, atmAcctngTransmittedCells=atmAcctngTransmittedCells, atmAcctngReceiveTrafficDescriptorParam2=atmAcctngReceiveTrafficDescriptorParam2, atmAcctngCalledPartySubAddress=atmAcctngCalledPartySubAddress, atmAcctngCallingParty=atmAcctngCallingParty, atmAcctngCallingPartySubAddress=atmAcctngCallingPartySubAddress, atmAcctngTransmitTrafficDescriptorParam4=atmAcctngTransmitTrafficDescriptorParam4, atmAcctngTransmitTrafficDescriptorParam3=atmAcctngTransmitTrafficDescriptorParam3)
