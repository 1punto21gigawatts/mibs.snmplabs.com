#
# PySNMP MIB module IEEE-802DOT17-RPR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IEEE-802DOT17-RPR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:48:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
HCPerfCurrentCount, HCPerfTotalCount, HCPerfIntervalCount = mibBuilder.importSymbols("HC-PerfHist-TC-MIB", "HCPerfCurrentCount", "HCPerfTotalCount", "HCPerfIntervalCount")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
NotificationType, IpAddress, Unsigned32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Bits, ObjectIdentity, MibIdentifier, Counter32, Counter64, TimeTicks, ModuleIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "IpAddress", "Unsigned32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Bits", "ObjectIdentity", "MibIdentifier", "Counter32", "Counter64", "TimeTicks", "ModuleIdentity", "iso")
TruthValue, MacAddress, TextualConvention, DisplayString, DateAndTime, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "MacAddress", "TextualConvention", "DisplayString", "DateAndTime", "TimeStamp")
ieee802dot17rprMIB = ModuleIdentity((1, 0, 8802, 17, 1, 1))
ieee802dot17rprMIB.setRevisions(('2004-04-21 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ieee802dot17rprMIB.setRevisionsDescriptions(('First published version.',))
if mibBuilder.loadTexts: ieee802dot17rprMIB.setLastUpdated('200404211200Z')
if mibBuilder.loadTexts: ieee802dot17rprMIB.setOrganization('IEEE 802.17 Working Group')
if mibBuilder.loadTexts: ieee802dot17rprMIB.setContactInfo('stds-802-17@ieee.org')
if mibBuilder.loadTexts: ieee802dot17rprMIB.setDescription('The resilient packet ring MIB for IEEE 802.17. Copyright (C) IEEE802.17. This version of this MIB module is part of IEEE802.17; see the draft itself for full legal notices.')
class RprSpan(TextualConvention, Integer32):
    description = 'Indicates the span interface of the RPR MAC. Each RPR span is connected to both ringlet0 and ringlet1. The east span receives from ringlet1 and transmits through ringlet0. The west span receives from ringlet0 and transmits through ringlet1.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("east", 1), ("west", 2))

class RprProtectionStatus(TextualConvention, Bits):
    description = 'Indicates the current protection status of the RPR MAC span. The status values are (arranged in ascending priority order) : noRequest No protection request on the span, the protection status is idle. waitToRestore The condition for an automatic protection was cleared and the span is engaged in a wait to restore period. manualSwitch A user initiated manual switch (via the rprSpanProtectionCommand) on the span. signalDegraded An automatically-detected status which causes protection on a span when a media signal degrade is detected due to excessive BER. signalFailed An automatically-detected status which causes protection on a span when a media signal failure is detected. forcedSwitch A user initiated forced switch (via the rprSpanProtectionCommand) on the span.'
    status = 'current'
    namedValues = NamedValues(("noRequest", 0), ("waitToRestore", 1), ("manualSwitch", 2), ("signalDegraded", 3), ("signalFailed", 4), ("forcedSwitch", 5))

class RprOamRinglet(TextualConvention, Integer32):
    description = 'Indicates the ringlet on which the OAM action request/response is sent/replied. The valid values for this object are: (1) Default (2) ringlet0 (3) ringlet1 (4) Reverse ringlet. The value (4) is applicable only for OAM response action.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("default", 1), ("ringlet0", 2), ("ringlet1", 3), ("reverseRinglet", 4))

rprObjects = MibIdentifier((1, 0, 8802, 17, 1, 1, 1))
rprGeneral = MibIdentifier((1, 0, 8802, 17, 1, 1, 1, 1))
rprProtocols = MibIdentifier((1, 0, 8802, 17, 1, 1, 1, 2))
rprSpanCounters = MibIdentifier((1, 0, 8802, 17, 1, 1, 1, 3))
rprClientCounters = MibIdentifier((1, 0, 8802, 17, 1, 1, 1, 4))
rprSpanErrorCounters = MibIdentifier((1, 0, 8802, 17, 1, 1, 1, 5))
rprConformance = MibIdentifier((1, 0, 8802, 17, 1, 1, 2))
rprIfTable = MibTable((1, 0, 8802, 17, 1, 1, 1, 1, 1), )
if mibBuilder.loadTexts: rprIfTable.setStatus('current')
if mibBuilder.loadTexts: rprIfTable.setDescription('The RPR interface table, extension to the ifTable. All read-write attributes in this table are non-volatile, i.e. will be retained across system reset.')
rprIfEntry = MibTableRow((1, 0, 8802, 17, 1, 1, 1, 1, 1, 1), ).setIndexNames((0, "IEEE-802DOT17-RPR-MIB", "rprIfIndex"))
if mibBuilder.loadTexts: rprIfEntry.setStatus('current')
if mibBuilder.loadTexts: rprIfEntry.setDescription('One such entry for every interface in the ifTable which has an ifType of RPR interface.')
rprIfIndex = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rprIfIndex.setReference('RFC 2863, ifIndex')
if mibBuilder.loadTexts: rprIfIndex.setStatus('current')
if mibBuilder.loadTexts: rprIfIndex.setDescription('The ifIndex of this RPR interface.')
rprIfStationsOnRing = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprIfStationsOnRing.setReference('IEEE 802.17 Subclause 11.2.4, numStations')
if mibBuilder.loadTexts: rprIfStationsOnRing.setStatus('current')
if mibBuilder.loadTexts: rprIfStationsOnRing.setDescription('The number of stations on the RPR ring. When the operStatus of the interface is down the value is 1.')
rprIfReversionMode = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 1, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprIfReversionMode.setReference('IEEE 802.17 Subclause 11.2.3, revertive')
if mibBuilder.loadTexts: rprIfReversionMode.setStatus('current')
if mibBuilder.loadTexts: rprIfReversionMode.setDescription('The reversion mode of the MAC, False for non-revertive True for revertive. Revertive station will return to idle state after WTR interval expires. Default value for reversion mode is true.')
rprIfProtectionWTR = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440)).clone(10)).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprIfProtectionWTR.setReference('IEEE 802.17 Subclause 11.2.3, wtr')
if mibBuilder.loadTexts: rprIfProtectionWTR.setStatus('current')
if mibBuilder.loadTexts: rprIfProtectionWTR.setDescription('Indicates the length of time in seconds, to remain in the protection state, after the cause of an automatic protection is removed. This mechanism prevents protection switch oscillations. Default value for WTR is 10 seconds.')
rprIfProtectionFastTimer = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(10)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprIfProtectionFastTimer.setReference('IEEE 802.17 Subclause 11.2.3, txFastTimeout')
if mibBuilder.loadTexts: rprIfProtectionFastTimer.setStatus('current')
if mibBuilder.loadTexts: rprIfProtectionFastTimer.setDescription('Indicates the protection messages fast timer value in 1 ms units. The fast timer is used for protection protocols. Default value for fast timer protection messages is 10 ms.')
rprIfProtectionSlowTimer = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 200)).clone(20)).setUnits('50 milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprIfProtectionSlowTimer.setReference('IEEE 802.17 Subclause 11.2.3, txSlowTimeout')
if mibBuilder.loadTexts: rprIfProtectionSlowTimer.setStatus('current')
if mibBuilder.loadTexts: rprIfProtectionSlowTimer.setDescription('Indicates the protection slow timer value in 50 ms units. The slow timer is used for topology and protection protocols. Default value for slow timer protection and topology messages is 20 units of 50 ms, i.e. 1sec.')
rprIfAtdTimer = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 200)).clone(20)).setUnits('50 milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprIfAtdTimer.setReference('IEEE 802.17 Subclause 11.2.3, atdTimerTimeout')
if mibBuilder.loadTexts: rprIfAtdTimer.setStatus('current')
if mibBuilder.loadTexts: rprIfAtdTimer.setDescription('Indicates the timer period for ATD message transmissions. Default value is 20 units of 50 ms, i.e. 1sec.')
rprIfKeepaliveTimeout = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 50)).clone(3)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprIfKeepaliveTimeout.setReference('IEEE 802.17 Subclause 11.2.3, keepaliveTime')
if mibBuilder.loadTexts: rprIfKeepaliveTimeout.setStatus('current')
if mibBuilder.loadTexts: rprIfKeepaliveTimeout.setDescription('Indicates the timer to declare keepalive timeout, multiples of 1 millisecond. Default value for keepalive timeout is 3 ms.')
rprIfFairnessAggressive = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 1, 1, 9), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprIfFairnessAggressive.setReference('IEEE 802.17 Subclause 11.2.5, conservativeMode')
if mibBuilder.loadTexts: rprIfFairnessAggressive.setStatus('current')
if mibBuilder.loadTexts: rprIfFairnessAggressive.setDescription('Indicates whether the selected RPR fairness algorithm is aggressive or conservative. If true, the selected fairness mode is aggressive. If false, the selected fairness mode is conservative. The default value for fairness aggressive is true.')
rprIfPtqSize = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 1, 1, 10), Unsigned32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rprIfPtqSize.setReference('IEEE 802.17 Subclause 7.2.2, sizePtq')
if mibBuilder.loadTexts: rprIfPtqSize.setStatus('current')
if mibBuilder.loadTexts: rprIfPtqSize.setDescription('The size in bytes of the Primary Transit Queue per ringlet supported by this RPR MAC.')
rprIfStqSize = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 1, 1, 11), Unsigned32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rprIfStqSize.setReference('IEEE 802.17 Subclause 7.2.2, size Stq')
if mibBuilder.loadTexts: rprIfStqSize.setStatus('current')
if mibBuilder.loadTexts: rprIfStqSize.setDescription('The size in bytes of the Secondary Transit Queue per ringlet supported by this RPR MAC.')
rprIfSTQFullThreshold = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 1, 1, 12), Unsigned32().clone(2)).setUnits('MTUs').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprIfSTQFullThreshold.setReference('IEEE 802.17 Subclause 7.2.2, stqFullThreshold')
if mibBuilder.loadTexts: rprIfSTQFullThreshold.setStatus('current')
if mibBuilder.loadTexts: rprIfSTQFullThreshold.setDescription('A level of STQ occupancy at or above which the STQ is almost full. This attribute specifies the full threshold location in MTU units below the STQ size. The range is [stqHighThreshold + mtuSize, sizeSTQ - mtuSize]. The default value for stqFullThreshold is sizeSTQ - 2*mtuSize.')
rprIfIdleThreshold = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 1, 1, 13), Unsigned32().clone(1)).setUnits('MTUs').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprIfIdleThreshold.setReference('IEEE 802.17 Subclause 7.5.3.2, idleThreshold')
if mibBuilder.loadTexts: rprIfIdleThreshold.setStatus('current')
if mibBuilder.loadTexts: rprIfIdleThreshold.setDescription('Indicates that a MAC is experiencing an adverse rate mismatch. When the PTQ depth exceeds this value, the incoming link is considered adversely rate mismatched. This attribute specifies the idle-threshold location from the top of the PTQ buffer, in MTU size. Default value should be 1, which means (sizePTQ - mtuSize)')
rprIfSesThreshold = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprIfSesThreshold.setReference('IEEE 802.17 Subclause 12.2.2, sesThreshold')
if mibBuilder.loadTexts: rprIfSesThreshold.setStatus('current')
if mibBuilder.loadTexts: rprIfSesThreshold.setDescription('Indicates the number of E-RPR errors to declare a second as SES-RPR The default value is the rounded integer of 0.000001 * (lineRate * advertisementRatio).')
rprIfWrapConfig = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 1, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprIfWrapConfig.setReference('IEEE 802.17 Subclause 11.2.5, protConfig')
if mibBuilder.loadTexts: rprIfWrapConfig.setStatus('current')
if mibBuilder.loadTexts: rprIfWrapConfig.setDescription('Indicates the configured protection mode, steering or wrapping, in a MAC that supports both modes. If wrap configured bit is set, the station will perform wrap protection during ring failures. If the station detects another station on the ring that has a protection configuration that conflicts with its own, the station will generate a defect to higher layers. Default value for wrap preferred is false for steering only stations, and true for stations that implement wrapping.')
rprIfJumboFramePreferred = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 1, 1, 16), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprIfJumboFramePreferred.setReference('IEEE 802.17 Subclause 11.2.5, jumboPrefer')
if mibBuilder.loadTexts: rprIfJumboFramePreferred.setStatus('current')
if mibBuilder.loadTexts: rprIfJumboFramePreferred.setDescription("Indicates the preference of the manager to support jumbo frame in a MAC that supports jumbo frame. The station advertises the 'logical and' of rprIfJumboFramePreferred and jumbo capable bit in the rprIfMacCapability. Default value for jumbo frame preferred is true. i.e. station supports jumbo frame.")
rprIfMacOperModes = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 1, 1, 17), Bits().clone(namedValues=NamedValues(("strictOrder", 0), ("dropBadFcs", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprIfMacOperModes.setReference('IEEE 802.17 Subclause 6.2, forceStrict and copyBadFcs')
if mibBuilder.loadTexts: rprIfMacOperModes.setStatus('current')
if mibBuilder.loadTexts: rprIfMacOperModes.setDescription('The summary of the Mac operational modes. if strictOrder is set, the MAC operates in strict order mode. if dropBadFcs is set, frames with bad FCS are dropped.')
rprIfRingOperModes = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 1, 1, 18), Bits().clone(namedValues=NamedValues(("jumboFrames", 0), ("wrapProtection", 1), ("openRing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprIfRingOperModes.setReference('IEEE 802.17 Subclause 11.2.4, jumboType and topoType')
if mibBuilder.loadTexts: rprIfRingOperModes.setStatus('current')
if mibBuilder.loadTexts: rprIfRingOperModes.setDescription("The summary of the ring operational modes collected through the topology discovery protocol. If at least one station doesn't support jumbo frames, the jumboFrame bit in this attribute is set to false. Only if all stations support jumbo frames, the bit is true. If at least one station wasn't configured to wrap, the wrap bit in this attribute is set to false. Only if all stations configured to wrap, the bit is true. If the ring doesn't complete full loop, the ring is considered openRing, with at least one detected edge.")
rprIfCurrentStatus = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 1, 1, 19), Bits().clone(namedValues=NamedValues(("neighborInconsistency", 0), ("duplicateMac", 1), ("exceedMaxStations", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprIfCurrentStatus.setReference('IEEE 802.17 Subclause 11.2.9, topoInconsistencyDefect, duplicateSecMacAddressDefect, and maxStationsDefect')
if mibBuilder.loadTexts: rprIfCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: rprIfCurrentStatus.setDescription('Indicates the current status of the RPR interface. this attribute is used to generate alarm to the management system.')
rprIfLastChange = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 1, 1, 20), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprIfLastChange.setStatus('current')
if mibBuilder.loadTexts: rprIfLastChange.setDescription('The value of sysUpTime at the time when any of the following attributes changes: rprIfStationsOnRing, rprIfReversionMode, rprIfProtectionWTR, rprIfProtectionFastTimer, rprIfProtectionSlowTimer, rprIfAtdTimer, rprIfKeepaliveTimeout, rprIfFairnessAggressive, rprIfSTQFullThreshold, rprIfIdleThreshold, rprIfSesThreshold, rprIfWrapConfig, rprIfJumboFramePreferred, rprIfMacOperModes, rprIfRingOperModes, rprIfCurrentStatus contents of the rprTopoImageEntry.')
rprIfChanges = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprIfChanges.setStatus('current')
if mibBuilder.loadTexts: rprIfChanges.setDescription('Indicates number of times rprIfLastChange changed. The discontinued counter value is indicated by the ifCounterDiscontinuityTime value.')
rprIfStatsControlTable = MibTable((1, 0, 8802, 17, 1, 1, 1, 1, 2), )
if mibBuilder.loadTexts: rprIfStatsControlTable.setStatus('current')
if mibBuilder.loadTexts: rprIfStatsControlTable.setDescription("The RPR statistics management table, controls the collection, duration, clearance, and status of the MAC statistics. The usage of this table is as follows: 1. In order to clear period of counters (or all periods) of specific counting point (or all counting points) of the RPR MAC, the user should first set the rprIfStatsControlPeriodClear item to specify the period that he would like to clear, and the rprIfStatsControlCountPointClear item to specify the counting point on which he would like to perform the statistics clearance. In case that the user specified 'clearSpecificInterval' in the rprIfStatsControlPeriodClear item, the user should also set the specific interval to clear by setting rprIfStatsControlIntervalClear. After setting these items, the user can activate the clear operation by setting rprIfStatsControlCommitClear item to 'commit'. The status of the clear operation (done of failed) is indicated by the returned value of rprIfStatsControlCommitClear item. 2. Setting rprIfStatsControlPeriodClear to 'clearAllIntervals' and rprIfStatsControlCountPointClear to 'clearWest' (for example) will clear all current and previous intervals, and day counters of the west side of the RPR MAC. 3. The IntervalValidData of cleared interval should be set to false. All read-write attributes in this table are volatile, i.e. will be cleared on system reset.")
rprIfStatsControlEntry = MibTableRow((1, 0, 8802, 17, 1, 1, 1, 1, 2, 1), ).setIndexNames((0, "IEEE-802DOT17-RPR-MIB", "rprIfStatsControlIfIndex"))
if mibBuilder.loadTexts: rprIfStatsControlEntry.setStatus('current')
if mibBuilder.loadTexts: rprIfStatsControlEntry.setDescription('One such entry for every interface in the ifTable which has an ifType of RPR interface.')
rprIfStatsControlIfIndex = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rprIfStatsControlIfIndex.setReference('RFC 2863, ifIndex')
if mibBuilder.loadTexts: rprIfStatsControlIfIndex.setStatus('current')
if mibBuilder.loadTexts: rprIfStatsControlIfIndex.setDescription('The ifIndex of this RPR interface.')
rprIfStatsControlPeriodClear = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("idle", 1), ("clearAllIntervals", 2), ("clearCurrent", 3), ("clearIntervals", 4), ("clearSpecificInterval", 5))).clone('idle')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprIfStatsControlPeriodClear.setStatus('current')
if mibBuilder.loadTexts: rprIfStatsControlPeriodClear.setDescription('This attribute allows for some or all of the interval statistics for this RPR MAC to be cleared. It does not affect the values of the running counters or the counter values reported through the interface MIB. clearSpecificInterval clears the interval indicated by rprIfStatsControlIntervalClear. Default value for period clear is idle.')
rprIfStatsControlCountPointClear = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("clearAll", 1), ("clearWest", 2), ("clearEast", 3), ("clearClient", 4))).clone('clearAll')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprIfStatsControlCountPointClear.setStatus('current')
if mibBuilder.loadTexts: rprIfStatsControlCountPointClear.setDescription('This attribute allows for a specific counting point of the RPR MAC or all of the RPR MAC counting points to be cleared on rprIfStatsControlPeriodClear request. Default value for Interface to clear is clearAll, i.e. clear statistics of all interfaces.')
rprIfStatsControlIntervalClear = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprIfStatsControlIntervalClear.setStatus('current')
if mibBuilder.loadTexts: rprIfStatsControlIntervalClear.setDescription('The statistics interval number to clear. The interval identified by 1 is the most recently completed 15 minute interval, and interval identified by N is the interval immediately preceding the one identified by N-1. Setting rprIfStatsControlPeriodClear to clearSpecificInterval will clear the interval that is indicated by this object.')
rprIfStatsControlCommitClear = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("commit", 1), ("commitDone", 2), ("commitFailed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprIfStatsControlCommitClear.setStatus('current')
if mibBuilder.loadTexts: rprIfStatsControlCommitClear.setDescription('Sends a commit with input parameters to specify the Period (rprIfStatsControlPeriodClear), count point (rprIfStatsControlCountPointClear) and specific interval (rprIfStatsControlIntervalClear) to clear. If the clear operation succeeds this attribute will have the value commitDone(2) when read. If the clear operation fails this attribute will have the value commitFailed(3) when read.')
rprIfStatsControlTimeElapsed = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rprIfStatsControlTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: rprIfStatsControlTimeElapsed.setDescription("The number of seconds, including partial seconds, that have elapsed since the beginning of the current measurement interval. If, for some reason, such as an adjustment in the system's time-of-day clock, the current interval exceeds the maximum value, the agent will return the maximum value.")
rprIfStatsControlValidIntervals = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprIfStatsControlValidIntervals.setStatus('current')
if mibBuilder.loadTexts: rprIfStatsControlValidIntervals.setDescription('The number of previous 15-minute intervals for which data was collected. An RPR interface must be capable of supporting at least n intervals. The minimum value of n is 4. The default of n is 32. The maximum value of n is 96. The value will be <n> unless the measurement was (re-)started within the last (<n>*15) minutes, in which case the value will be the number of complete 15 minute intervals for which the agent has at least some data. In certain cases (e.g., in the case where the agent is a proxy) it is possible that some intervals are unavailable. In this case, this interval is the maximum interval number for which data is available. ')
rprSpanTable = MibTable((1, 0, 8802, 17, 1, 1, 1, 1, 3), )
if mibBuilder.loadTexts: rprSpanTable.setStatus('current')
if mibBuilder.loadTexts: rprSpanTable.setDescription('The RPR interface Span table. All read-write attributes in this table are non-volatile, i.e. will be retained across system reset.')
rprSpanEntry = MibTableRow((1, 0, 8802, 17, 1, 1, 1, 1, 3, 1), ).setIndexNames((0, "IEEE-802DOT17-RPR-MIB", "rprSpanIfIndex"), (0, "IEEE-802DOT17-RPR-MIB", "rprSpanId"))
if mibBuilder.loadTexts: rprSpanEntry.setStatus('current')
if mibBuilder.loadTexts: rprSpanEntry.setDescription('One such entry for every span of an RPR interface.')
rprSpanIfIndex = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rprSpanIfIndex.setReference('RFC 2863, ifIndex')
if mibBuilder.loadTexts: rprSpanIfIndex.setStatus('current')
if mibBuilder.loadTexts: rprSpanIfIndex.setDescription('The ifIndex of this RPR interface.')
rprSpanId = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 3, 1, 2), RprSpan())
if mibBuilder.loadTexts: rprSpanId.setReference('IEEE 802.17 Subclause 7.2.2, myRi')
if mibBuilder.loadTexts: rprSpanId.setStatus('current')
if mibBuilder.loadTexts: rprSpanId.setDescription('Indicates the span interface of the RPR MAC. Each RPR span is connected to both ringlet0 and ringlet1. The east span receives from ringlet1 and transmits through ringlet0. The west span receives from ringlet0 and transmits through ringlet1.')
rprSpanLowerLayerIfIndex = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 3, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanLowerLayerIfIndex.setReference('RFC 2863, ifIndex')
if mibBuilder.loadTexts: rprSpanLowerLayerIfIndex.setStatus('current')
if mibBuilder.loadTexts: rprSpanLowerLayerIfIndex.setDescription('The ifIndex of interface which is below the RPR layer in this span. A value of zero indicates an interface index that has yet to be determined')
rprSpanTotalRingletReservedRate = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 3, 1, 4), Unsigned32()).setUnits('Mb/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanTotalRingletReservedRate.setReference('IEEE 802.17 Subclause 11.2.4, unreservedRate')
if mibBuilder.loadTexts: rprSpanTotalRingletReservedRate.setStatus('current')
if mibBuilder.loadTexts: rprSpanTotalRingletReservedRate.setDescription('The total reserved subclassA0 bandwidth on the ringlet. This variable is used by the fairness module to determine the total reclaimable bandwidth.')
rprSpanCurrentStatus = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 3, 1, 5), Bits().clone(namedValues=NamedValues(("keepAliveTimeout", 0), ("miscabling", 1), ("phyLinkDegrade", 2), ("phyLinkFail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanCurrentStatus.setReference('IEEE 802.17 Subclause 11.2.3, keepaliveTime, 11.2.9, miscablingDefect, and 8.2.3.2, LINK_STATUS')
if mibBuilder.loadTexts: rprSpanCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: rprSpanCurrentStatus.setDescription('Indicates the current status of the RPR span. this attribute is used to generate alarm to the management system.')
rprSpanLastChange = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 3, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanLastChange.setStatus('current')
if mibBuilder.loadTexts: rprSpanLastChange.setDescription('The value of sysUpTime at the time when any of the following attributes changes: rprSpanCurrentStatus, rprSpanProtectionNeighborValid, rprSpanProtectionHoldOffTimer, rprSpanProtectionCommand, rprSpanProtectionCount.')
rprSpanChanges = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanChanges.setStatus('current')
if mibBuilder.loadTexts: rprSpanChanges.setDescription('Indicates number of times rprSpanLastChange changed. The discontinued counter value is indicated by the ifCounterDiscontinuityTime value.')
rprSpanProtectionTable = MibTable((1, 0, 8802, 17, 1, 1, 1, 1, 4), )
if mibBuilder.loadTexts: rprSpanProtectionTable.setStatus('current')
if mibBuilder.loadTexts: rprSpanProtectionTable.setDescription('The RPR interface Span protection management table. All read-write attributes in this table are non-volatile, i.e. will be retained across system reset.')
rprSpanProtectionEntry = MibTableRow((1, 0, 8802, 17, 1, 1, 1, 1, 4, 1), ).setIndexNames((0, "IEEE-802DOT17-RPR-MIB", "rprSpanProtectionIfIndex"), (0, "IEEE-802DOT17-RPR-MIB", "rprSpanProtectionSpan"))
if mibBuilder.loadTexts: rprSpanProtectionEntry.setStatus('current')
if mibBuilder.loadTexts: rprSpanProtectionEntry.setDescription('One such entry for every span of an RPR interface.')
rprSpanProtectionIfIndex = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rprSpanProtectionIfIndex.setReference('RFC 2863, ifIndex')
if mibBuilder.loadTexts: rprSpanProtectionIfIndex.setStatus('current')
if mibBuilder.loadTexts: rprSpanProtectionIfIndex.setDescription('The ifIndex of this RPR interface.')
rprSpanProtectionSpan = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 4, 1, 2), RprSpan())
if mibBuilder.loadTexts: rprSpanProtectionSpan.setReference('IEEE 802.17 Subclause 7.2.2. myRi')
if mibBuilder.loadTexts: rprSpanProtectionSpan.setStatus('current')
if mibBuilder.loadTexts: rprSpanProtectionSpan.setDescription('The Span for this entry.')
rprSpanProtectionNeighborValid = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 4, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanProtectionNeighborValid.setReference('IEEE 802.17 Subclause 11.2.5, lastNeighborMac')
if mibBuilder.loadTexts: rprSpanProtectionNeighborValid.setStatus('current')
if mibBuilder.loadTexts: rprSpanProtectionNeighborValid.setDescription('Indicates whether the neighbor address is active or former. true value for active, false for former')
rprSpanProtectionHoldOffTimer = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprSpanProtectionHoldOffTimer.setReference('IEEE 802.17 Subclause 11.2.3, holdOffTimeout')
if mibBuilder.loadTexts: rprSpanProtectionHoldOffTimer.setStatus('current')
if mibBuilder.loadTexts: rprSpanProtectionHoldOffTimer.setDescription('The period that RPR gives to lower layer to perform protection, before it activates its protection mechanism. Default value of hold off timer is 0.')
rprSpanProtectionCommand = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("manualSwitch", 2), ("forcedSwitch", 3))).clone('idle')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprSpanProtectionCommand.setReference('IEEE 802.17 Subclause 11.2.3, adminRequestProtection')
if mibBuilder.loadTexts: rprSpanProtectionCommand.setStatus('current')
if mibBuilder.loadTexts: rprSpanProtectionCommand.setDescription("The protection mode requested by management for the local station that can affect the protection status of the RPR station, according to the set of rules describing the RPR protection. When read, this object returns the last command written unless it has been preempted, or idle if no command has been written to this interface span since initialization. There is no pending of commands, that is if a command has been preempted by a failure, when the failure clears the command is not executed. If the command cannot be executed because an equal or \\ higher priority request is in effect, an error is returned. writing idle to a span that has no pending protection command, has no affect. An idle clears an active WTR state. The protection commands (arranged in ascending priority order) are: idle This command clears the protection for the specified interface span. This value should be returned by a read request when no protection command has been written to the object. manualSwitch A protection command on each end of a specified span. This command doesn't have precedence over automatic protection, and therefore it can't preempt an existing automatic protection request. forcedSwitch A command on each end of a specified span. This command has precedence over automatic protection, and therefore it can preempt an existing automatic protection request. Default value of protection command is idle.")
rprSpanProtectionCount = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanProtectionCount.setReference('IEEE 802.17 Subclause 11.6.5.5, IndicateEdgeState()')
if mibBuilder.loadTexts: rprSpanProtectionCount.setStatus('current')
if mibBuilder.loadTexts: rprSpanProtectionCount.setDescription('The number of transitions from idle state to active protection state. The discontinued counter value is indicated by the ifCounterDiscontinuityTime value.')
rprSpanProtectionDuration = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 4, 1, 7), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanProtectionDuration.setReference('IEEE 802.17 Subclause 11.6.5.5, IndicateEdgeState()')
if mibBuilder.loadTexts: rprSpanProtectionDuration.setStatus('current')
if mibBuilder.loadTexts: rprSpanProtectionDuration.setDescription('The total amount of time protection was active on the span interface. The discontinued counter value is indicated by the ifCounterDiscontinuityTime value.')
rprSpanProtectionLastActivationTime = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 1, 4, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanProtectionLastActivationTime.setReference('IEEE 802.17 Subclause 11.6.5.5, IndicateEdgeState()')
if mibBuilder.loadTexts: rprSpanProtectionLastActivationTime.setStatus('current')
if mibBuilder.loadTexts: rprSpanProtectionLastActivationTime.setDescription('The value of sysUpTime at the time of the last protection activation.')
rprTopoImageTable = MibTable((1, 0, 8802, 17, 1, 1, 1, 2, 1), )
if mibBuilder.loadTexts: rprTopoImageTable.setStatus('current')
if mibBuilder.loadTexts: rprTopoImageTable.setDescription('A topology map that details the list of stations on the RPR ringlets. All attributes in this table are volatile, i.e. will be cleared on system reset.')
rprTopoImageEntry = MibTableRow((1, 0, 8802, 17, 1, 1, 1, 2, 1, 1), ).setIndexNames((0, "IEEE-802DOT17-RPR-MIB", "rprTopoImageIfIndex"), (0, "IEEE-802DOT17-RPR-MIB", "rprTopoImageMacAddress"))
if mibBuilder.loadTexts: rprTopoImageEntry.setStatus('current')
if mibBuilder.loadTexts: rprTopoImageEntry.setDescription('Each entry contains information specific to a particular station on the ring. The table has at least one entry for the station itself, this entry indicates zero hops on each ringlet.')
rprTopoImageIfIndex = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rprTopoImageIfIndex.setReference('RFC 2863, ifIndex')
if mibBuilder.loadTexts: rprTopoImageIfIndex.setStatus('current')
if mibBuilder.loadTexts: rprTopoImageIfIndex.setDescription('The ifIndex of this RPR interface.')
rprTopoImageMacAddress = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 1, 1, 2), MacAddress())
if mibBuilder.loadTexts: rprTopoImageMacAddress.setReference('IEEE 802.17 Subclause 11.2.6, macAddress')
if mibBuilder.loadTexts: rprTopoImageMacAddress.setStatus('current')
if mibBuilder.loadTexts: rprTopoImageMacAddress.setDescription('The 48-bit MAC address of the station.')
rprTopoImageSecMacAddress1 = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprTopoImageSecMacAddress1.setReference('IEEE 802.17 Subclause 11.2.6, secMac')
if mibBuilder.loadTexts: rprTopoImageSecMacAddress1.setStatus('current')
if mibBuilder.loadTexts: rprTopoImageSecMacAddress1.setDescription('The 48-bit first secondary MAC address of the station. Default and unused value is FF:FF:FF:FF:FF:FF')
rprTopoImageSecMacAddress2 = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprTopoImageSecMacAddress2.setReference('IEEE 802.17 Subclause 11.2.6, secMac')
if mibBuilder.loadTexts: rprTopoImageSecMacAddress2.setStatus('current')
if mibBuilder.loadTexts: rprTopoImageSecMacAddress2.setDescription('The 48-bit second secondary MAC address of the station. Default and unused value is FF:FF:FF:FF:FF:FF')
rprTopoImageStationIfIndex = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 1, 1, 5), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprTopoImageStationIfIndex.setReference('IEEE 802.17 Subclause 11.2.6, interfaceIndex')
if mibBuilder.loadTexts: rprTopoImageStationIfIndex.setStatus('current')
if mibBuilder.loadTexts: rprTopoImageStationIfIndex.setDescription('The station ifIndex.')
rprTopoImageStationName = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprTopoImageStationName.setReference('IEEE 802.17 Subclause 11.2.6, stationName')
if mibBuilder.loadTexts: rprTopoImageStationName.setStatus('current')
if mibBuilder.loadTexts: rprTopoImageStationName.setDescription('The operator assigned station name.')
rprTopoImageInetAddressType = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 1, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprTopoImageInetAddressType.setReference('IEEE 802.17 Subclause 11.2.6, managementAddressType')
if mibBuilder.loadTexts: rprTopoImageInetAddressType.setStatus('current')
if mibBuilder.loadTexts: rprTopoImageInetAddressType.setDescription("Denotes the address type of the station INET address It should be set to 'unknown' if station INET address is not known.")
rprTopoImageInetAddress = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 1, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprTopoImageInetAddress.setReference('IEEE 802.17 Subclause 11.2.6, managementIpAddr')
if mibBuilder.loadTexts: rprTopoImageInetAddress.setStatus('current')
if mibBuilder.loadTexts: rprTopoImageInetAddress.setDescription('This object contains the value of of the station IP (v4 or V6) address. The format of this address is specified by the value of the corresponding rprTopoImageInetAddressType object. If the address type is unknown, then this object contains the zero-length OCTET-STRING.')
rprTopoImageCapability = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 1, 1, 9), Bits().clone(namedValues=NamedValues(("jumboFrames", 0), ("wrapProtection", 1), ("supportsConservativeFairness", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprTopoImageCapability.setReference('IEEE 802.17 Subclause 11.2.6, jumboPrefer, protConfig, and conservativeMode')
if mibBuilder.loadTexts: rprTopoImageCapability.setStatus('current')
if mibBuilder.loadTexts: rprTopoImageCapability.setDescription('Indicates the capabilities that the MAC supports. jumboFrames - Indicates whether the MAC capable of receiving, transmitting and transiting jumbo frames. wrapProtection - Indicates whether the MAC configured to wrap protection. supportsConservativeFairness - indicates the MAC supports conservative fairness algorithm.')
rprTopoImageRinglet0Hops = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprTopoImageRinglet0Hops.setReference('IEEE 802.17 Subclause 11.2.6, hops')
if mibBuilder.loadTexts: rprTopoImageRinglet0Hops.setStatus('current')
if mibBuilder.loadTexts: rprTopoImageRinglet0Hops.setDescription('The number of hops to this station through ringlet0. The self station is indicated with zero hops. A non reachable station is indicated with -1 value.')
rprTopoImageRinglet0ReservedRate = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 1, 1, 11), Unsigned32()).setUnits('Mb/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: rprTopoImageRinglet0ReservedRate.setReference('IEEE 802.17 Subclause 11.2.6, reservedRate')
if mibBuilder.loadTexts: rprTopoImageRinglet0ReservedRate.setStatus('current')
if mibBuilder.loadTexts: rprTopoImageRinglet0ReservedRate.setDescription('The amount of A0 traffic that this station adds on ringlet0, in Mb/s units.')
rprTopoImageRinglet1Hops = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprTopoImageRinglet1Hops.setReference('IEEE 802.17 Subclause 11.2.6, hops')
if mibBuilder.loadTexts: rprTopoImageRinglet1Hops.setStatus('current')
if mibBuilder.loadTexts: rprTopoImageRinglet1Hops.setDescription('The number of hops to this station through ringlet1. The self station is indicated with zero hops. A non reachable station is indicated with -1 value.')
rprTopoImageRinglet1ReservedRate = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 1, 1, 13), Unsigned32()).setUnits('Mb/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: rprTopoImageRinglet1ReservedRate.setReference('IEEE 802.17 Subclause 11.2.6, reservedRate')
if mibBuilder.loadTexts: rprTopoImageRinglet1ReservedRate.setStatus('current')
if mibBuilder.loadTexts: rprTopoImageRinglet1ReservedRate.setDescription('The amount of A0 traffic that this station adds on ringlet1, in Mb/s units.')
rprTopoImageWestProtectionStatus = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 1, 1, 14), RprProtectionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprTopoImageWestProtectionStatus.setReference('IEEE 802.17 Subclause 11.2.6, spanProtState')
if mibBuilder.loadTexts: rprTopoImageWestProtectionStatus.setStatus('current')
if mibBuilder.loadTexts: rprTopoImageWestProtectionStatus.setDescription('The current protection status of the West span.')
rprTopoImageWestWeight = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprTopoImageWestWeight.setReference('IEEE 802.17 Subclause 11.2.6, weight')
if mibBuilder.loadTexts: rprTopoImageWestWeight.setStatus('current')
if mibBuilder.loadTexts: rprTopoImageWestWeight.setDescription('The weight of the station on the west span. used for weighted fairness.')
rprTopoImageEastProtectionStatus = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 1, 1, 16), RprProtectionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprTopoImageEastProtectionStatus.setReference('IEEE 802.17 Subclause 11.2.6, spanProtState')
if mibBuilder.loadTexts: rprTopoImageEastProtectionStatus.setStatus('current')
if mibBuilder.loadTexts: rprTopoImageEastProtectionStatus.setDescription('The current protection status of the east span.')
rprTopoImageEastWeight = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprTopoImageEastWeight.setReference('IEEE 802.17 Subclause 11.2.6, weight')
if mibBuilder.loadTexts: rprTopoImageEastWeight.setStatus('current')
if mibBuilder.loadTexts: rprTopoImageEastWeight.setDescription('The weight of the station on the east span. Used for weighted fairness.')
rprTopoImageStatus = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 1, 1, 18), Bits().clone(namedValues=NamedValues(("reachableRinglet0", 0), ("reachableRinglet1", 1), ("wrapActiveWest", 2), ("wrapActiveEast", 3), ("receivedBadFcs", 4), ("receivedMultichokeFairness", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprTopoImageStatus.setReference('IEEE 802.17 Subclause 11.2.6, reachable, protConfig, spanProtState, badFcsUser, and multichokeUser')
if mibBuilder.loadTexts: rprTopoImageStatus.setStatus('current')
if mibBuilder.loadTexts: rprTopoImageStatus.setDescription('Status of the station, the reachability of station through ringlet0 and ringlet1, wrap active on the station spans, events of reception frames with bad FCS, events of reception multichoke fairness frames.')
rprFairnessTable = MibTable((1, 0, 8802, 17, 1, 1, 1, 2, 2), )
if mibBuilder.loadTexts: rprFairnessTable.setStatus('current')
if mibBuilder.loadTexts: rprFairnessTable.setDescription('A table of RPR Fairness per RPR span. All read-write attributes in this table are non-volatile, i.e. will be retained across system reset.')
rprFairnessEntry = MibTableRow((1, 0, 8802, 17, 1, 1, 1, 2, 2, 1), ).setIndexNames((0, "IEEE-802DOT17-RPR-MIB", "rprFairnessIfIndex"), (0, "IEEE-802DOT17-RPR-MIB", "rprFairnessRinglet"))
if mibBuilder.loadTexts: rprFairnessEntry.setStatus('current')
if mibBuilder.loadTexts: rprFairnessEntry.setDescription('A fairness parameters for a particular ringlet of the an RPR interface.')
rprFairnessIfIndex = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rprFairnessIfIndex.setReference('RFC 2863, ifIndex')
if mibBuilder.loadTexts: rprFairnessIfIndex.setStatus('current')
if mibBuilder.loadTexts: rprFairnessIfIndex.setDescription('The ifIndex of this RPR interface.')
rprFairnessRinglet = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ringlet0", 1), ("ringlet1", 2))))
if mibBuilder.loadTexts: rprFairnessRinglet.setReference('IEEE 802.17 Subclause 7.2.2, myRi')
if mibBuilder.loadTexts: rprFairnessRinglet.setStatus('current')
if mibBuilder.loadTexts: rprFairnessRinglet.setDescription('The ringlet for which this row contains information. ringlet0 is the transmission of the east span and the reception of the west span, ringlet1 is the transmission of the west span and the reception of the east span')
rprFairnessRingletWeight = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprFairnessRingletWeight.setReference('IEEE 802.17 Subclause 10.2.2, localWeight')
if mibBuilder.loadTexts: rprFairnessRingletWeight.setStatus('current')
if mibBuilder.loadTexts: rprFairnessRingletWeight.setDescription('Weight assigned to fairness to permit the scaling of fair rate values among stations on the ringlet. This allows one station to use a larger share of available capacity than another station without violating fairness principles. The allowed range is [1, 255]. The default value is 1.')
rprFairnessReservedRate = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 2, 1, 4), Unsigned32()).setUnits('Mb/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprFairnessReservedRate.setReference('IEEE 802.17 Subclause 11.2.4, reservedRate')
if mibBuilder.loadTexts: rprFairnessReservedRate.setStatus('current')
if mibBuilder.loadTexts: rprFairnessReservedRate.setDescription('The amount of A0 traffic that this station adds that ringlet, in Mb/s units. Default value for A0 reserved rate is 0 Mb/s.')
rprFairnessMaxAllowed = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 2, 1, 5), Unsigned32()).setUnits('Mb/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprFairnessMaxAllowed.setReference('IEEE 802.17 Subclause 10.2.2, maxAllowedRate')
if mibBuilder.loadTexts: rprFairnessMaxAllowed.setStatus('current')
if mibBuilder.loadTexts: rprFairnessMaxAllowed.setDescription('The maximum value that the station is allowed to transmit local excess traffic to the ringlet. The default value is the physical ring rate.')
rprFairnessAgeCoef = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprFairnessAgeCoef.setReference('IEEE 802.17 Subclause 10.2.2, ageCoef')
if mibBuilder.loadTexts: rprFairnessAgeCoef.setStatus('current')
if mibBuilder.loadTexts: rprFairnessAgeCoef.setDescription('The coefficient used by the aging procedure to specify the relative weights assigned to (a) the change in the value of a rate-counter during the most recent agingInterval and (b) the value of the rate-counter at the end of the previous agingInterval. The value is interpreted as 2 raised to the power specified by this attribute. The default value is 2, giving an aging coefficient of 2**2, or 4.')
rprFairnessRampCoef = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 9)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprFairnessRampCoef.setReference('IEEE 802.17 Subclause 10.2.2, rampUpCoef')
if mibBuilder.loadTexts: rprFairnessRampCoef.setStatus('current')
if mibBuilder.loadTexts: rprFairnessRampCoef.setDescription('The coefficient used for ramping a rate. The value is interpreted as 2 raised to the power specified by this attribute. The default value is 6, giving a low-pass coefficient of 2**6, or 64.')
rprFairnessLpCoef = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 9)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprFairnessLpCoef.setReference('IEEE 802.17 Subclause 10.2.2, lpCoef')
if mibBuilder.loadTexts: rprFairnessLpCoef.setStatus('current')
if mibBuilder.loadTexts: rprFairnessLpCoef.setDescription('The coefficient used by the low-pass filter procedure to specify the relative weights applied to (a) the increase in the rate-count value during the most recent agingInterval and (b) the previous low-pass filtered rate. The former is assigned a weight of 1 and the latter a weight of (lpCoef-1). The value is interpreted as 2 raised to the power specified by this attribute. The default value is 6, giving a low-pass coefficient of 2**6, or 64.')
rprFairnessAdvertisementRatio = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 40)).clone(5)).setUnits('0.00025').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprFairnessAdvertisementRatio.setReference('IEEE 802.17 Subclause 10.2.2, advertisementRatio')
if mibBuilder.loadTexts: rprFairnessAdvertisementRatio.setStatus('current')
if mibBuilder.loadTexts: rprFairnessAdvertisementRatio.setDescription('The ratio between the link capacity reserved for fairness control messages and the total link capacity. Default value of fairness advertisement ratio is 5 units of 0.00025, i.e 0.00125.')
rprFairnessMcffReportCoef = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(8, 512)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprFairnessMcffReportCoef.setReference('IEEE 802.17 Subclause 10.2.2, reportCoef')
if mibBuilder.loadTexts: rprFairnessMcffReportCoef.setStatus('current')
if mibBuilder.loadTexts: rprFairnessMcffReportCoef.setDescription('Indicates the number of SCFF advertisingIntervals that elapse between the sending of successive MCFFs, This value allows the interval between sending MCFFs to be established as MCFF_reportingInterval = rprFairnessMcffReportCoef * SCFF_avertisingInterval. The default value is 10.')
rprFairnessActiveWeightsCoef = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(8, 512)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprFairnessActiveWeightsCoef.setReference('IEEE 802.17 Subclause 10.2.2, activeWeightsCoef')
if mibBuilder.loadTexts: rprFairnessActiveWeightsCoef.setStatus('current')
if mibBuilder.loadTexts: rprFairnessActiveWeightsCoef.setDescription('Indicates the number of agingIntervals that elapse between successive computations of activeWeights. This value allows the interval between computations of activeWeights to be established as activeWeightsInterval = activeWeightsCoef * agingInterval. The default value is 64.')
rprFairnessSTQHighThreshold = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000)).clone(250)).setUnits('Tenth of percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprFairnessSTQHighThreshold.setReference('IEEE 802.17 Subclause 10.2.2, stqHighThreshold')
if mibBuilder.loadTexts: rprFairnessSTQHighThreshold.setStatus('current')
if mibBuilder.loadTexts: rprFairnessSTQHighThreshold.setDescription('A level of STQ occupancy at or above which CSFE frames are no longer admitted. Defined only for a dual transit-queue implementation. This attribute specifies the high threshold location in percentage of the STQ size. The allowed range is [2*mtuSize, stqFullThreshold -mtuSize]. The default value is 0.25*stqFullThreshold.')
rprFairnessSTQMedThreshold = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 2, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000)).clone(187)).setUnits('Tenth of percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprFairnessSTQMedThreshold.setReference('IEEE 802.17 Subclause 10.2.2, stqMedThreshold')
if mibBuilder.loadTexts: rprFairnessSTQMedThreshold.setStatus('current')
if mibBuilder.loadTexts: rprFairnessSTQMedThreshold.setDescription('A level of buffer occupancy in a dual-queue deployment, at or above which congestion on the outbound link is declared. This attribute specifies the medium threshold location in percentage of the STQ size. The allowed range is [stqLowThreshold + mtuSize, stqHighThreshold - mtuSize]. The default value is 0.5 * (stqHighThreshold + stqLowThreshold).')
rprFairnessSTQLowThreshold = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 2, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000)).clone(125)).setUnits('Tenth of percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprFairnessSTQLowThreshold.setReference('IEEE 802.17 Subclause 10.2.2, stqLowThreshold')
if mibBuilder.loadTexts: rprFairnessSTQLowThreshold.setStatus('current')
if mibBuilder.loadTexts: rprFairnessSTQLowThreshold.setDescription('A level of STQ occupancy at or above which congestion on the outbound link is imminent. Defined only for dual transit-queue implementations. This attribute specifies the low threshold location in percentage of the STQ size. The range is [mtuSize, stqHighThreshold -mtuSize]. The default value is 0.5*stqHighThreshold.')
rprFairnessRateHighThreshold = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 2, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(400, 990)).clone(950)).setUnits('Tenth of percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprFairnessRateHighThreshold.setReference('IEEE 802.17 Subclause 10.2.2, rateHighThreshold')
if mibBuilder.loadTexts: rprFairnessRateHighThreshold.setStatus('current')
if mibBuilder.loadTexts: rprFairnessRateHighThreshold.setDescription('Rate at or above which congestion on the outbound link is declared. The range is [0.4 * unreservedRate, 0.99 * unreservedRate]. The default value is 0.95 * unreservedRate.')
rprFairnessRateLowThreshold = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 2, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(500, 990)).clone(900)).setUnits('Tenth of percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprFairnessRateLowThreshold.setReference('IEEE 802.17 Subclause 10.2.2, rateLowThreshold')
if mibBuilder.loadTexts: rprFairnessRateLowThreshold.setStatus('current')
if mibBuilder.loadTexts: rprFairnessRateLowThreshold.setDescription('Rate at or above which congestion on the outbound link is imminent. The range is [0.5 * rateHighThreshold, 0.99 * rateHighThreshold]. The default value is 0.9 * rateHighThreshold')
rprFairnessResetWaterMarks = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("resetWaterMarks", 2))).clone('idle')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprFairnessResetWaterMarks.setStatus('current')
if mibBuilder.loadTexts: rprFairnessResetWaterMarks.setDescription('Write resetWaterMarks to this attribute to reset the STQ water marks to the current occupancy. Default value is idle')
rprFairnessSTQHighWaterMark = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 2, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('Tenth of percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: rprFairnessSTQHighWaterMark.setReference('IEEE 802.17 Subclause 10.2.2, stqHighWatermark')
if mibBuilder.loadTexts: rprFairnessSTQHighWaterMark.setStatus('current')
if mibBuilder.loadTexts: rprFairnessSTQHighWaterMark.setDescription('The highest level of STQ occupancy since the last reset of this value, in percentage of the STQ size.')
rprFairnessSTQLowWaterMark = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 2, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('Tenth of percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: rprFairnessSTQLowWaterMark.setReference('IEEE 802.17 Subclause 10.2.2, stqLowWatermark')
if mibBuilder.loadTexts: rprFairnessSTQLowWaterMark.setStatus('current')
if mibBuilder.loadTexts: rprFairnessSTQLowWaterMark.setDescription('The lowest level of STQ occupancy since the last reset of this value, in percentage of the STQ size.')
rprFairnessLastChange = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 2, 1, 20), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprFairnessLastChange.setStatus('current')
if mibBuilder.loadTexts: rprFairnessLastChange.setDescription('The value of sysUpTime at the time when any of the following attributes changes: rprFairnessRingletWeight, rprFairnessReservedRate, rprFairnessMaxAllowed, rprFairnessAgeCoef, rprFairnessRampCoef, rprFairnessLpCoef, rprFairnessAdvertisementRatio, rprFairnessSTQHighThreshold, rprFairnessSTQLowThreshold rprFairnessResetWaterMarks.')
rprFairnessChanges = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprFairnessChanges.setStatus('current')
if mibBuilder.loadTexts: rprFairnessChanges.setDescription('Indicates number of times rprFairnessLastChange changed. The discontinued counter value is indicated by the ifCounterDiscontinuityTime value.')
rprOamTable = MibTable((1, 0, 8802, 17, 1, 1, 1, 2, 3), )
if mibBuilder.loadTexts: rprOamTable.setStatus('current')
if mibBuilder.loadTexts: rprOamTable.setDescription('A table of RPR OAM actions. The table is designed to support a one action at a time on an RPR interface. All read-write attributes in this table are volatile, i.e. will be cleared on system reset.')
rprOamEntry = MibTableRow((1, 0, 8802, 17, 1, 1, 1, 2, 3, 1), ).setIndexNames((0, "IEEE-802DOT17-RPR-MIB", "rprOamIfIndex"))
if mibBuilder.loadTexts: rprOamEntry.setStatus('current')
if mibBuilder.loadTexts: rprOamEntry.setDescription('OAM Echo and Flush control for an RPR interface')
rprOamIfIndex = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rprOamIfIndex.setReference('RFC 2863, ifIndex')
if mibBuilder.loadTexts: rprOamIfIndex.setStatus('current')
if mibBuilder.loadTexts: rprOamIfIndex.setDescription('The ifIndex of this RPR interface.')
rprOamActionType = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("echo", 1), ("flush", 2))).clone('echo')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprOamActionType.setReference('IEEE 802.17 Subclause 12.4.1, OAM_ECHO_REQ, and 12.4.3, OAM_FLUSH_REQ')
if mibBuilder.loadTexts: rprOamActionType.setStatus('current')
if mibBuilder.loadTexts: rprOamActionType.setDescription('The type of OAM action. The valid values for this object are: (1) echo (2) flush.')
rprOamDestAddress = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 3, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprOamDestAddress.setReference('IEEE 802.17 Subclause 12.4.1 and 12.4.3, destination_address')
if mibBuilder.loadTexts: rprOamDestAddress.setStatus('current')
if mibBuilder.loadTexts: rprOamDestAddress.setDescription('The 48-bit MAC address of the destination station of OAM session.')
rprOamRequestRinglet = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 3, 1, 4), RprOamRinglet().clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprOamRequestRinglet.setReference('IEEE 802.17 Subclause 12.4.1 and 12.4.3, ringlet_id')
if mibBuilder.loadTexts: rprOamRequestRinglet.setStatus('current')
if mibBuilder.loadTexts: rprOamRequestRinglet.setDescription('The ringlet ID on which the OAM request should be sent.')
rprOamResponseRinglet = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 3, 1, 5), RprOamRinglet().clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprOamResponseRinglet.setReference('IEEE 802.17 Subclause 12.4.1, response_ringlet')
if mibBuilder.loadTexts: rprOamResponseRinglet.setStatus('current')
if mibBuilder.loadTexts: rprOamResponseRinglet.setDescription('The ringlet ID on which the OAM response should be replied.')
rprOamClassOfService = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("classA", 1), ("classB", 2), ("classC", 3))).clone('classC')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprOamClassOfService.setReference('IEEE 802.17 Subclause 12.4.1 and 12.4.3, service_class')
if mibBuilder.loadTexts: rprOamClassOfService.setStatus('current')
if mibBuilder.loadTexts: rprOamClassOfService.setDescription('The class-of-service of OAM session frames')
rprOamUserData = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprOamUserData.setReference('IEEE 802.17 Subclause 12.4.1 and 12.4.3, user_data')
if mibBuilder.loadTexts: rprOamUserData.setStatus('current')
if mibBuilder.loadTexts: rprOamUserData.setDescription('The operator assigned user specific data.')
rprOamProtected = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 3, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprOamProtected.setReference('IEEE 802.17 Subclause 12.4.1 and 12.4.3, mac_protection')
if mibBuilder.loadTexts: rprOamProtected.setStatus('current')
if mibBuilder.loadTexts: rprOamProtected.setDescription('Indicates whether the OAM action should be protected. In a wrapping ring, If true, the WE (wrap eligible) bit of the OAM action frame is set to 1. Otherwise, the WE bit is set to 0. In steering ring, If true, in case of failure on the requested ringlet between the source and the destination stations, the OAM action frame will be steered to the alternative ringlet. Otherwise, the OAM action frame will be sent through the requested ringlet regardless of its protection state.')
rprOamRequestCount = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprOamRequestCount.setStatus('current')
if mibBuilder.loadTexts: rprOamRequestCount.setDescription('Indicates the number of OAM requests to send. Default value of OAM request action is 1.')
rprOamTimeout = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 3, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(500)).setUnits('10usec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprOamTimeout.setStatus('current')
if mibBuilder.loadTexts: rprOamTimeout.setDescription('Indicates the timer to declare OAM action timeout, in 10usec units. Default value of OAM timeout is 500 units of 10usec (i.e. 5 ms)')
rprOamControl = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("active", 2), ("abort", 3))).clone('idle')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprOamControl.setStatus('current')
if mibBuilder.loadTexts: rprOamControl.setDescription('Control of an OAM action. The valid values for this object are: (1) idle (2) active (3) abort. Default value of OAM control is idle.')
rprOamResponseCount = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 3, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprOamResponseCount.setStatus('current')
if mibBuilder.loadTexts: rprOamResponseCount.setDescription('Indicates the number of OAM actions responses received.')
rprOamAvResponseTime = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 3, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('10usec').setMaxAccess("readonly")
if mibBuilder.loadTexts: rprOamAvResponseTime.setStatus('current')
if mibBuilder.loadTexts: rprOamAvResponseTime.setDescription('Average response time to receive the OAM reply.')
rprOamResponseStatus = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("inProcess", 2), ("error", 3), ("success", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprOamResponseStatus.setStatus('current')
if mibBuilder.loadTexts: rprOamResponseStatus.setDescription('Status of an OAM action. The valid values for this object are: (1) unknown (2) inProcess (3) error (4) success. The action status is success if at least 90% of the responses were received till timeout.')
rprIfChangeSummaryObject = MibIdentifier((1, 0, 8802, 17, 1, 1, 1, 1, 5))
rprIfChangeSummaryNumInterfaces = MibScalar((1, 0, 8802, 17, 1, 1, 1, 1, 5, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprIfChangeSummaryNumInterfaces.setStatus('current')
if mibBuilder.loadTexts: rprIfChangeSummaryNumInterfaces.setDescription('Number of RPR interfaces on this device.')
rprIfChangeSummaryIfLastChange = MibScalar((1, 0, 8802, 17, 1, 1, 1, 1, 5, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprIfChangeSummaryIfLastChange.setStatus('current')
if mibBuilder.loadTexts: rprIfChangeSummaryIfLastChange.setDescription('Latest timestamp when any instance of rprIfLastChange changed.')
rprIfChangeSummaryIfChanges = MibScalar((1, 0, 8802, 17, 1, 1, 1, 1, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprIfChangeSummaryIfChanges.setStatus('current')
if mibBuilder.loadTexts: rprIfChangeSummaryIfChanges.setDescription('Number of times any instance of rprIfChanges changed. The discontinued counter value is indicated by the ifCounterDiscontinuityTime value.')
rprIfChangeSummarySpanLastChange = MibScalar((1, 0, 8802, 17, 1, 1, 1, 1, 5, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprIfChangeSummarySpanLastChange.setStatus('current')
if mibBuilder.loadTexts: rprIfChangeSummarySpanLastChange.setDescription('Latest timestamp when any instance of rprSpanLastChange changed.')
rprIfChangeSummarySpanChanges = MibScalar((1, 0, 8802, 17, 1, 1, 1, 1, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprIfChangeSummarySpanChanges.setStatus('current')
if mibBuilder.loadTexts: rprIfChangeSummarySpanChanges.setDescription('Number of times any instance of rprSpanChanges changed. The discontinued counter value is indicated by the ifCounterDiscontinuityTime value.')
rprIfChangeSummaryFairnessLastChange = MibScalar((1, 0, 8802, 17, 1, 1, 1, 1, 5, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprIfChangeSummaryFairnessLastChange.setStatus('current')
if mibBuilder.loadTexts: rprIfChangeSummaryFairnessLastChange.setDescription('Latest timestamp when any instance of rprFairnessLastChange changed.')
rprIfChangeSummaryFairnessChanges = MibScalar((1, 0, 8802, 17, 1, 1, 1, 1, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprIfChangeSummaryFairnessChanges.setStatus('current')
if mibBuilder.loadTexts: rprIfChangeSummaryFairnessChanges.setDescription('Number of times any instance of rprFairnessChanges changed. The discontinued counter value is indicated by the ifCounterDiscontinuityTime value.')
rprSpanCountersCurrentTable = MibTable((1, 0, 8802, 17, 1, 1, 1, 3, 1), )
if mibBuilder.loadTexts: rprSpanCountersCurrentTable.setStatus('current')
if mibBuilder.loadTexts: rprSpanCountersCurrentTable.setDescription('The RPR MAC Span interface current counters table. All attributes in this table are volatile, i.e. will be cleared on system reset.')
rprSpanCountersCurrentEntry = MibTableRow((1, 0, 8802, 17, 1, 1, 1, 3, 1, 1), ).setIndexNames((0, "IEEE-802DOT17-RPR-MIB", "rprSpanCurrentIfIndex"), (0, "IEEE-802DOT17-RPR-MIB", "rprSpanCurrentSpan"))
if mibBuilder.loadTexts: rprSpanCountersCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: rprSpanCountersCurrentEntry.setDescription('Frames and octets statistics for the current interval for the RPR MAC Span interface. The corresponding instance of rprIfStatsControlTimeElapsed indicates the number of seconds which have elapsed so far in the current interval.')
rprSpanCurrentIfIndex = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rprSpanCurrentIfIndex.setReference('RFC 2863, ifIndex')
if mibBuilder.loadTexts: rprSpanCurrentIfIndex.setStatus('current')
if mibBuilder.loadTexts: rprSpanCurrentIfIndex.setDescription('The ifIndex of this RPR interface.')
rprSpanCurrentSpan = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 1, 1, 2), RprSpan())
if mibBuilder.loadTexts: rprSpanCurrentSpan.setStatus('current')
if mibBuilder.loadTexts: rprSpanCurrentSpan.setDescription('An indication of the span of the interface for which this row contains information.')
rprSpanCurrentInUcastClassAFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 1, 1, 3), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanCurrentInUcastClassAFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanCurrentInUcastClassAFrames.setDescription('The number of received (PHY to MAC) classA unicast frames in the current interval.')
rprSpanCurrentInUcastClassAOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 1, 1, 4), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanCurrentInUcastClassAOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanCurrentInUcastClassAOctets.setDescription('The number of received (PHY to MAC) classA unicast octets, in the current interval.')
rprSpanCurrentInUcastClassBCirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 1, 1, 5), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanCurrentInUcastClassBCirFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanCurrentInUcastClassBCirFrames.setDescription('The number of received (PHY to MAC) classB CIR unicast frames in the current interval.')
rprSpanCurrentInUcastClassBCirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 1, 1, 6), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanCurrentInUcastClassBCirOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanCurrentInUcastClassBCirOctets.setDescription('The number of received (PHY to MAC) classB CIR unicast octets in the current interval.')
rprSpanCurrentInUcastClassBEirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 1, 1, 7), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanCurrentInUcastClassBEirFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanCurrentInUcastClassBEirFrames.setDescription('The number of received (PHY to MAC) classB EIR unicast frames in the current interval.')
rprSpanCurrentInUcastClassBEirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 1, 1, 8), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanCurrentInUcastClassBEirOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanCurrentInUcastClassBEirOctets.setDescription('The number of received (PHY to MAC) classB EIR unicast octets in the current interval.')
rprSpanCurrentInUcastClassCFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 1, 1, 9), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanCurrentInUcastClassCFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanCurrentInUcastClassCFrames.setDescription('The number of received (PHY to MAC) classC unicast frames in the current interval.')
rprSpanCurrentInUcastClassCOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 1, 1, 10), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanCurrentInUcastClassCOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanCurrentInUcastClassCOctets.setDescription('The number of received (PHY to MAC) classC unicast octets in the current interval.')
rprSpanCurrentInMcastClassAFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 1, 1, 11), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanCurrentInMcastClassAFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanCurrentInMcastClassAFrames.setDescription('The number of received (PHY to MAC) classA multicast and broadcast frames in the current interval.')
rprSpanCurrentInMcastClassAOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 1, 1, 12), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanCurrentInMcastClassAOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanCurrentInMcastClassAOctets.setDescription('The number of received (PHY to MAC) classA multicast and broadcast octets in the current interval.')
rprSpanCurrentInMcastClassBCirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 1, 1, 13), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanCurrentInMcastClassBCirFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanCurrentInMcastClassBCirFrames.setDescription('The number of received (PHY to MAC) classB CIR multicast and broadcast frames in the current interval.')
rprSpanCurrentInMcastClassBCirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 1, 1, 14), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanCurrentInMcastClassBCirOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanCurrentInMcastClassBCirOctets.setDescription('The number of received (PHY to MAC) classB CIR multicast and broadcast octets in the current interval.')
rprSpanCurrentInMcastClassBEirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 1, 1, 15), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanCurrentInMcastClassBEirFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanCurrentInMcastClassBEirFrames.setDescription('The number of received (PHY to MAC) classB EIR multicast and broadcast frames in the current interval.')
rprSpanCurrentInMcastClassBEirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 1, 1, 16), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanCurrentInMcastClassBEirOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanCurrentInMcastClassBEirOctets.setDescription('The number of received (PHY to MAC) classB EIR multicast and broadcast octets in the current interval.')
rprSpanCurrentInMcastClassCFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 1, 1, 17), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanCurrentInMcastClassCFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanCurrentInMcastClassCFrames.setDescription('The number of received (PHY to MAC) classC multicast and broadcast frames in the current interval.')
rprSpanCurrentInMcastClassCOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 1, 1, 18), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanCurrentInMcastClassCOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanCurrentInMcastClassCOctets.setDescription('The number of received (PHY to MAC) classC multicast and broadcast octets in the current interval.')
rprSpanCurrentOutUcastClassAFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 1, 1, 19), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanCurrentOutUcastClassAFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanCurrentOutUcastClassAFrames.setDescription('The number of transmitted (MAC to PHY) classA unicast frames in the current interval.')
rprSpanCurrentOutUcastClassAOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 1, 1, 20), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanCurrentOutUcastClassAOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanCurrentOutUcastClassAOctets.setDescription('The number of transmitted (MAC to PHY) classA unicast octets in the current interval.')
rprSpanCurrentOutUcastClassBCirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 1, 1, 21), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanCurrentOutUcastClassBCirFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanCurrentOutUcastClassBCirFrames.setDescription('The number of transmitted (MAC to PHY) classB CIR unicast frames in the current interval.')
rprSpanCurrentOutUcastClassBCirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 1, 1, 22), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanCurrentOutUcastClassBCirOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanCurrentOutUcastClassBCirOctets.setDescription('The number of transmitted (MAC to PHY) classB CIR unicast octets in the current interval.')
rprSpanCurrentOutUcastClassBEirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 1, 1, 23), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanCurrentOutUcastClassBEirFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanCurrentOutUcastClassBEirFrames.setDescription('The number of transmitted (MAC to PHY) classB EIR unicast frames in the current interval.')
rprSpanCurrentOutUcastClassBEirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 1, 1, 24), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanCurrentOutUcastClassBEirOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanCurrentOutUcastClassBEirOctets.setDescription('The number of transmitted (MAC to PHY) classB EIR unicast octets in the current interval.')
rprSpanCurrentOutUcastClassCFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 1, 1, 25), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanCurrentOutUcastClassCFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanCurrentOutUcastClassCFrames.setDescription('The number of transmitted (MAC to PHY) classC unicast frames in the current interval.')
rprSpanCurrentOutUcastClassCOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 1, 1, 26), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanCurrentOutUcastClassCOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanCurrentOutUcastClassCOctets.setDescription('The number of transmitted (MAC to PHY) classC unicast octets in the current interval.')
rprSpanCurrentOutMcastClassAFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 1, 1, 27), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanCurrentOutMcastClassAFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanCurrentOutMcastClassAFrames.setDescription('The number of transmitted (MAC to PHY) classA multicast and broadcast frames in the current interval.')
rprSpanCurrentOutMcastClassAOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 1, 1, 28), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanCurrentOutMcastClassAOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanCurrentOutMcastClassAOctets.setDescription('The number of transmitted (MAC to PHY) classA multicast and broadcast octets in the current interval.')
rprSpanCurrentOutMcastClassBCirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 1, 1, 29), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanCurrentOutMcastClassBCirFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanCurrentOutMcastClassBCirFrames.setDescription('The number of transmitted (MAC to PHY) classB CIR multicast and broadcast frames in the current interval.')
rprSpanCurrentOutMcastClassBCirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 1, 1, 30), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanCurrentOutMcastClassBCirOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanCurrentOutMcastClassBCirOctets.setDescription('The number of transmitted (MAC to PHY) classB CIR multicast and broadcast octets in the current interval.')
rprSpanCurrentOutMcastClassBEirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 1, 1, 31), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanCurrentOutMcastClassBEirFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanCurrentOutMcastClassBEirFrames.setDescription('The number of transmitted (MAC to PHY) classB EIR multicast and broadcast frames in the current interval.')
rprSpanCurrentOutMcastClassBEirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 1, 1, 32), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanCurrentOutMcastClassBEirOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanCurrentOutMcastClassBEirOctets.setDescription('The number of transmitted (MAC to PHY) classB EIR multicast and broadcast octets in the current interval.')
rprSpanCurrentOutMcastClassCFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 1, 1, 33), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanCurrentOutMcastClassCFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanCurrentOutMcastClassCFrames.setDescription('The number of transmitted (MAC to PHY) classC multicast and broadcast frames in the current interval.')
rprSpanCurrentOutMcastClassCOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 1, 1, 34), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanCurrentOutMcastClassCOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanCurrentOutMcastClassCOctets.setDescription('The number of transmitted (MAC to PHY) classC multicast and broadcast octets in the current interval.')
rprSpanCountersIntervalTable = MibTable((1, 0, 8802, 17, 1, 1, 1, 3, 2), )
if mibBuilder.loadTexts: rprSpanCountersIntervalTable.setStatus('current')
if mibBuilder.loadTexts: rprSpanCountersIntervalTable.setDescription('The RPR MAC Span interface interval counters table. All attributes in this table are volatile, i.e. will be cleared on system reset.')
rprSpanCountersIntervalEntry = MibTableRow((1, 0, 8802, 17, 1, 1, 1, 3, 2, 1), ).setIndexNames((0, "IEEE-802DOT17-RPR-MIB", "rprSpanIntervalIfIndex"), (0, "IEEE-802DOT17-RPR-MIB", "rprSpanIntervalSpan"), (0, "IEEE-802DOT17-RPR-MIB", "rprSpanIntervalNumber"))
if mibBuilder.loadTexts: rprSpanCountersIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: rprSpanCountersIntervalEntry.setDescription('Frames and octets statistics collected for a particular interval for the RPR MAC Span interface of a particular span of a particular RPR interface. The corresponding instance of rprIfValidIntervals indicates the number of intervals for which the set of statistics is available.')
rprSpanIntervalIfIndex = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rprSpanIntervalIfIndex.setStatus('current')
if mibBuilder.loadTexts: rprSpanIntervalIfIndex.setDescription('The ifIndex of this RPR interface.')
rprSpanIntervalSpan = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 2, 1, 2), RprSpan())
if mibBuilder.loadTexts: rprSpanIntervalSpan.setStatus('current')
if mibBuilder.loadTexts: rprSpanIntervalSpan.setDescription('An indication of the span of the interface for which this row contains information.')
rprSpanIntervalNumber = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: rprSpanIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: rprSpanIntervalNumber.setDescription('A number between 1 and 96, which identifies the intervals for which the set of statistics is available. The interval identified by 1 is the most recently completed 15 minute interval, and interval identified by N is the interval immediately preceding the one identified by N-1.')
rprSpanIntervalValidData = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanIntervalValidData.setStatus('current')
if mibBuilder.loadTexts: rprSpanIntervalValidData.setDescription('This variable indicates if the data for this interval is valid. It will be valid if it contains data for 900 seconds plus or minus 10 seconds.')
rprSpanIntervalTimeElapsed = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanIntervalTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: rprSpanIntervalTimeElapsed.setDescription("The duration of a particular interval in seconds. If, for some reason, such as an adjustment in the system's time-of-day clock, the current interval exceeds the maximum value, the agent will return the maximum value.")
rprSpanIntervalStartTime = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanIntervalStartTime.setStatus('current')
if mibBuilder.loadTexts: rprSpanIntervalStartTime.setDescription('Indicates the wall clock time that this interval started.')
rprSpanIntervalInUcastClassAFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 2, 1, 7), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanIntervalInUcastClassAFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanIntervalInUcastClassAFrames.setDescription('The number of received (PHY to MAC) classA unicast frames in a particular interval in the past 24 hours.')
rprSpanIntervalInUcastClassAOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 2, 1, 8), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanIntervalInUcastClassAOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanIntervalInUcastClassAOctets.setDescription('The number of received (PHY to MAC) classA unicast octets in a particular interval in the past 24 hours.')
rprSpanIntervalInUcastClassBCirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 2, 1, 9), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanIntervalInUcastClassBCirFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanIntervalInUcastClassBCirFrames.setDescription('The number of received (PHY to MAC) classB CIR unicast frames in a particular interval in the past 24 hours.')
rprSpanIntervalInUcastClassBCirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 2, 1, 10), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanIntervalInUcastClassBCirOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanIntervalInUcastClassBCirOctets.setDescription('The number of received (PHY to MAC) classB CIR unicast octets in a particular interval in the past 24 hours.')
rprSpanIntervalInUcastClassBEirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 2, 1, 11), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanIntervalInUcastClassBEirFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanIntervalInUcastClassBEirFrames.setDescription('The number of received (PHY to MAC) classB EIR unicast frames in a particular interval in the past 24 hours.')
rprSpanIntervalInUcastClassBEirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 2, 1, 12), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanIntervalInUcastClassBEirOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanIntervalInUcastClassBEirOctets.setDescription('The number of received (PHY to MAC) classB EIR unicast octets in a particular interval in the past 24 hours.')
rprSpanIntervalInUcastClassCFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 2, 1, 13), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanIntervalInUcastClassCFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanIntervalInUcastClassCFrames.setDescription('The number of received (PHY to MAC) classC unicast frames in a particular interval in the past 24 hours.')
rprSpanIntervalInUcastClassCOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 2, 1, 14), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanIntervalInUcastClassCOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanIntervalInUcastClassCOctets.setDescription('The number of received (PHY to MAC) classC unicast octets in a particular interval in the past 24 hours.')
rprSpanIntervalInMcastClassAFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 2, 1, 15), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanIntervalInMcastClassAFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanIntervalInMcastClassAFrames.setDescription('The number of received (PHY to MAC) classA multicast and broadcast frames in a particular interval in the past 24 hours.')
rprSpanIntervalInMcastClassAOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 2, 1, 16), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanIntervalInMcastClassAOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanIntervalInMcastClassAOctets.setDescription('The number of received (PHY to MAC) classA multicast and broadcast octets in a particular interval in the past 24 hours.')
rprSpanIntervalInMcastClassBCirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 2, 1, 17), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanIntervalInMcastClassBCirFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanIntervalInMcastClassBCirFrames.setDescription('The number of received (PHY to MAC) classB CIR multicast and broadcast frames in a particular interval in the past 24 hours.')
rprSpanIntervalInMcastClassBCirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 2, 1, 18), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanIntervalInMcastClassBCirOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanIntervalInMcastClassBCirOctets.setDescription('The number of received (PHY to MAC) classB CIR multicast and broadcast octets in a particular interval in the past 24 hours.')
rprSpanIntervalInMcastClassBEirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 2, 1, 19), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanIntervalInMcastClassBEirFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanIntervalInMcastClassBEirFrames.setDescription('The number of received (PHY to MAC) classB EIR multicast and broadcast frames in a particular interval in the past 24 hours.')
rprSpanIntervalInMcastClassBEirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 2, 1, 20), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanIntervalInMcastClassBEirOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanIntervalInMcastClassBEirOctets.setDescription('The number of received (PHY to MAC) classB EIR multicast and broadcast octets in a particular interval in the past 24 hours.')
rprSpanIntervalInMcastClassCFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 2, 1, 21), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanIntervalInMcastClassCFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanIntervalInMcastClassCFrames.setDescription('The number of received (PHY to MAC) classC multicast and broadcast frames in a particular interval in the past 24 hours.')
rprSpanIntervalInMcastClassCOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 2, 1, 22), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanIntervalInMcastClassCOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanIntervalInMcastClassCOctets.setDescription('The number of received (PHY to MAC) classC multicast and broadcast octets in a particular interval in the past 24 hours.')
rprSpanIntervalOutUcastClassAFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 2, 1, 23), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanIntervalOutUcastClassAFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanIntervalOutUcastClassAFrames.setDescription('The number of transmitted (MAC to PHY) classA unicast frames in a particular interval in the past 24 hours.')
rprSpanIntervalOutUcastClassAOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 2, 1, 24), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanIntervalOutUcastClassAOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanIntervalOutUcastClassAOctets.setDescription('The number of transmitted (MAC to PHY) classA unicast octets in a particular interval in the past 24 hours.')
rprSpanIntervalOutUcastClassBCirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 2, 1, 25), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanIntervalOutUcastClassBCirFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanIntervalOutUcastClassBCirFrames.setDescription('The number of transmitted (MAC to PHY) classB CIR unicast frames, in a particular interval in the past 24 hours.')
rprSpanIntervalOutUcastClassBCirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 2, 1, 26), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanIntervalOutUcastClassBCirOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanIntervalOutUcastClassBCirOctets.setDescription('The number of transmitted (MAC to PHY) classB CIR unicast octets in a particular interval in the past 24 hours.')
rprSpanIntervalOutUcastClassBEirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 2, 1, 27), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanIntervalOutUcastClassBEirFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanIntervalOutUcastClassBEirFrames.setDescription('The number of transmitted (MAC to PHY) classB EIR unicast frames in a particular interval in the past 24 hours.')
rprSpanIntervalOutUcastClassBEirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 2, 1, 28), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanIntervalOutUcastClassBEirOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanIntervalOutUcastClassBEirOctets.setDescription('The number of transmitted (MAC to PHY) classB EIR unicast octets in a particular interval in the past 24 hours.')
rprSpanIntervalOutUcastClassCFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 2, 1, 29), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanIntervalOutUcastClassCFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanIntervalOutUcastClassCFrames.setDescription('The number of transmitted (MAC to PHY) classC unicast frames in a particular interval in the past 24 hours.')
rprSpanIntervalOutUcastClassCOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 2, 1, 30), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanIntervalOutUcastClassCOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanIntervalOutUcastClassCOctets.setDescription('The number of transmitted (MAC to PHY) classC unicast octets in a particular interval in the past 24 hours.')
rprSpanIntervalOutMcastClassAFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 2, 1, 31), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanIntervalOutMcastClassAFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanIntervalOutMcastClassAFrames.setDescription('The number of transmitted (MAC to PHY) classA multicast and broadcast frames in a particular interval in the past 24 hours.')
rprSpanIntervalOutMcastClassAOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 2, 1, 32), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanIntervalOutMcastClassAOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanIntervalOutMcastClassAOctets.setDescription('The number of transmitted (MAC to PHY) classA multicast and broadcast octets in a particular interval in the past 24 hours.')
rprSpanIntervalOutMcastClassBCirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 2, 1, 33), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanIntervalOutMcastClassBCirFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanIntervalOutMcastClassBCirFrames.setDescription('The number of transmitted (MAC to PHY) classB CIR multicast and broadcast frames in a particular interval in the past 24 hours.')
rprSpanIntervalOutMcastClassBCirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 2, 1, 34), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanIntervalOutMcastClassBCirOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanIntervalOutMcastClassBCirOctets.setDescription('The number of transmitted (MAC to PHY) classB CIR multicast and broadcast octets in a particular interval in the past 24 hours.')
rprSpanIntervalOutMcastClassBEirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 2, 1, 35), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanIntervalOutMcastClassBEirFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanIntervalOutMcastClassBEirFrames.setDescription('The number of transmitted (MAC to PHY) classB EIR multicast and broadcast frames in a particular interval in the past 24 hours.')
rprSpanIntervalOutMcastClassBEirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 2, 1, 36), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanIntervalOutMcastClassBEirOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanIntervalOutMcastClassBEirOctets.setDescription('The number of transmitted (MAC to PHY) classB EIR multicast and broadcast octets in a particular interval in the past 24 hours.')
rprSpanIntervalOutMcastClassCFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 2, 1, 37), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanIntervalOutMcastClassCFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanIntervalOutMcastClassCFrames.setDescription('The number of transmitted (MAC to PHY) classC multicast and broadcast frames in a particular interval in the past 24 hours.')
rprSpanIntervalOutMcastClassCOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 2, 1, 38), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanIntervalOutMcastClassCOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanIntervalOutMcastClassCOctets.setDescription('The number of transmitted (MAC to PHY) classC multicast and broadcast octets in a particular interval in the past 24 hours.')
rprSpanCountersDayTable = MibTable((1, 0, 8802, 17, 1, 1, 1, 3, 3), )
if mibBuilder.loadTexts: rprSpanCountersDayTable.setStatus('current')
if mibBuilder.loadTexts: rprSpanCountersDayTable.setDescription('The RPR Mac Span Day Table contains the cumulative sum of the various statistics for the 24 hour period preceding the current interval. All attributes in this table are volatile, i.e. will be cleared on system reset.')
rprSpanCountersDayEntry = MibTableRow((1, 0, 8802, 17, 1, 1, 1, 3, 3, 1), ).setIndexNames((0, "IEEE-802DOT17-RPR-MIB", "rprSpanDayIfIndex"), (0, "IEEE-802DOT17-RPR-MIB", "rprSpanDaySpan"))
if mibBuilder.loadTexts: rprSpanCountersDayEntry.setStatus('current')
if mibBuilder.loadTexts: rprSpanCountersDayEntry.setDescription('An entry in the RPR Span Day table.')
rprSpanDayIfIndex = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rprSpanDayIfIndex.setStatus('current')
if mibBuilder.loadTexts: rprSpanDayIfIndex.setDescription('The ifIndex of this RPR interface.')
rprSpanDaySpan = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 3, 1, 2), RprSpan())
if mibBuilder.loadTexts: rprSpanDaySpan.setStatus('current')
if mibBuilder.loadTexts: rprSpanDaySpan.setDescription('An indication of the span of the interface for which this row contains information.')
rprSpanDayInUcastClassAFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 3, 1, 3), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanDayInUcastClassAFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanDayInUcastClassAFrames.setDescription('The number of received (PHY to MAC) classA unicast frames.')
rprSpanDayInUcastClassAOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 3, 1, 4), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanDayInUcastClassAOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanDayInUcastClassAOctets.setDescription('The number of received (PHY to MAC) classA unicast octets.')
rprSpanDayInUcastClassBCirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 3, 1, 5), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanDayInUcastClassBCirFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanDayInUcastClassBCirFrames.setDescription('The number of received (PHY to MAC) classB CIR unicast frames.')
rprSpanDayInUcastClassBCirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 3, 1, 6), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanDayInUcastClassBCirOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanDayInUcastClassBCirOctets.setDescription('The number of received (PHY to MAC) classB CIR unicast octets.')
rprSpanDayInUcastClassBEirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 3, 1, 7), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanDayInUcastClassBEirFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanDayInUcastClassBEirFrames.setDescription('The number of received (PHY to MAC) classB EIR unicast frames.')
rprSpanDayInUcastClassBEirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 3, 1, 8), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanDayInUcastClassBEirOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanDayInUcastClassBEirOctets.setDescription('The number of received (PHY to MAC) classB EIR unicast octets.')
rprSpanDayInUcastClassCFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 3, 1, 9), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanDayInUcastClassCFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanDayInUcastClassCFrames.setDescription('The number of received (PHY to MAC) classC unicast frames.')
rprSpanDayInUcastClassCOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 3, 1, 10), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanDayInUcastClassCOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanDayInUcastClassCOctets.setDescription('The number of received (PHY to MAC) classC unicast octets.')
rprSpanDayInMcastClassAFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 3, 1, 11), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanDayInMcastClassAFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanDayInMcastClassAFrames.setDescription('The number of received (PHY to MAC) classA multicast and broadcast frames')
rprSpanDayInMcastClassAOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 3, 1, 12), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanDayInMcastClassAOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanDayInMcastClassAOctets.setDescription('The number of received (PHY to MAC) classA multicast and broadcast octets')
rprSpanDayInMcastClassBCirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 3, 1, 13), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanDayInMcastClassBCirFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanDayInMcastClassBCirFrames.setDescription('The number of received (PHY to MAC) classB CIR multicast and broadcast frames')
rprSpanDayInMcastClassBCirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 3, 1, 14), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanDayInMcastClassBCirOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanDayInMcastClassBCirOctets.setDescription('The number of received (PHY to MAC) classB CIR multicast and broadcast octets')
rprSpanDayInMcastClassBEirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 3, 1, 15), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanDayInMcastClassBEirFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanDayInMcastClassBEirFrames.setDescription('The number of received (PHY to MAC) classB EIR multicast and broadcast frames')
rprSpanDayInMcastClassBEirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 3, 1, 16), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanDayInMcastClassBEirOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanDayInMcastClassBEirOctets.setDescription('The number of received (PHY to MAC) classB EIR multicast and broadcast octets')
rprSpanDayInMcastClassCFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 3, 1, 17), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanDayInMcastClassCFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanDayInMcastClassCFrames.setDescription('The number of received (PHY to MAC) classC multicast and broadcast frames')
rprSpanDayInMcastClassCOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 3, 1, 18), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanDayInMcastClassCOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanDayInMcastClassCOctets.setDescription('The number of received (PHY to MAC) classC multicast and broadcast octets')
rprSpanDayOutUcastClassAFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 3, 1, 19), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanDayOutUcastClassAFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanDayOutUcastClassAFrames.setDescription('The number of transmitted (MAC to PHY) classA unicast frames.')
rprSpanDayOutUcastClassAOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 3, 1, 20), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanDayOutUcastClassAOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanDayOutUcastClassAOctets.setDescription('The number of transmitted (MAC to PHY) classA unicast octets.')
rprSpanDayOutUcastClassBCirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 3, 1, 21), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanDayOutUcastClassBCirFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanDayOutUcastClassBCirFrames.setDescription('The number of transmitted (MAC to PHY) classB CIR unicast frames.')
rprSpanDayOutUcastClassBCirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 3, 1, 22), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanDayOutUcastClassBCirOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanDayOutUcastClassBCirOctets.setDescription('The number of transmitted (MAC to PHY) classB CIR unicast octets.')
rprSpanDayOutUcastClassBEirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 3, 1, 23), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanDayOutUcastClassBEirFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanDayOutUcastClassBEirFrames.setDescription('The number of transmitted (MAC to PHY) classB EIR unicast frames')
rprSpanDayOutUcastClassBEirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 3, 1, 24), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanDayOutUcastClassBEirOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanDayOutUcastClassBEirOctets.setDescription('The number of transmitted (MAC to PHY) classB EIR unicast octets')
rprSpanDayOutUcastClassCFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 3, 1, 25), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanDayOutUcastClassCFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanDayOutUcastClassCFrames.setDescription('The number of transmitted (MAC to PHY) classC unicast frames')
rprSpanDayOutUcastClassCOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 3, 1, 26), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanDayOutUcastClassCOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanDayOutUcastClassCOctets.setDescription('The number of transmitted (MAC to PHY) classC unicast octets')
rprSpanDayOutMcastClassAFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 3, 1, 27), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanDayOutMcastClassAFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanDayOutMcastClassAFrames.setDescription('The number of transmitted (MAC to PHY) classA multicast and broadcast frames.')
rprSpanDayOutMcastClassAOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 3, 1, 28), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanDayOutMcastClassAOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanDayOutMcastClassAOctets.setDescription('The number of transmitted (MAC to PHY) classA multicast and broadcast octets.')
rprSpanDayOutMcastClassBCirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 3, 1, 29), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanDayOutMcastClassBCirFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanDayOutMcastClassBCirFrames.setDescription('The number of transmitted (MAC to PHY) classB CIR multicast and broadcast frames.')
rprSpanDayOutMcastClassBCirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 3, 1, 30), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanDayOutMcastClassBCirOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanDayOutMcastClassBCirOctets.setDescription('The number of transmitted (MAC to PHY) classB CIR multicast and broadcast octets.')
rprSpanDayOutMcastClassBEirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 3, 1, 31), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanDayOutMcastClassBEirFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanDayOutMcastClassBEirFrames.setDescription('The number of transmitted (MAC to PHY) classB EIR multicast and broadcast frames.')
rprSpanDayOutMcastClassBEirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 3, 1, 32), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanDayOutMcastClassBEirOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanDayOutMcastClassBEirOctets.setDescription('The number of transmitted (MAC to PHY) classB EIR multicast and broadcast octets.')
rprSpanDayOutMcastClassCFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 3, 1, 33), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanDayOutMcastClassCFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanDayOutMcastClassCFrames.setDescription('The number of transmitted (MAC to PHY) classC multicast and broadcast frames.')
rprSpanDayOutMcastClassCOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 3, 1, 34), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanDayOutMcastClassCOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanDayOutMcastClassCOctets.setDescription('The number of transmitted (MAC to PHY) classC multicast and broadcast octets.')
rprSpanCountersStatsTable = MibTable((1, 0, 8802, 17, 1, 1, 1, 3, 4), )
if mibBuilder.loadTexts: rprSpanCountersStatsTable.setStatus('current')
if mibBuilder.loadTexts: rprSpanCountersStatsTable.setDescription('The RPR Mac Span interface total counters table. The DiscontinuityTime for this table is indicated by ifCounterDiscontinuityTime defined in ifXTable. All attributes in this table are volatile, i.e. will be cleared on system reset.')
rprSpanCountersStatsEntry = MibTableRow((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1), ).setIndexNames((0, "IEEE-802DOT17-RPR-MIB", "rprSpanStatsIfIndex"), (0, "IEEE-802DOT17-RPR-MIB", "rprSpanStatsSpan"))
if mibBuilder.loadTexts: rprSpanCountersStatsEntry.setStatus('current')
if mibBuilder.loadTexts: rprSpanCountersStatsEntry.setDescription('An entry in the span stats table.')
rprSpanStatsIfIndex = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rprSpanStatsIfIndex.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsIfIndex.setDescription('The ifIndex of this RPR interface.')
rprSpanStatsSpan = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 2), RprSpan())
if mibBuilder.loadTexts: rprSpanStatsSpan.setReference('IEEE 802.17 Subclause 7.2.2, myRi')
if mibBuilder.loadTexts: rprSpanStatsSpan.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsSpan.setDescription('An indication of the span of the interface for which this row contains information.')
rprSpanStatsInUcastClassAFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsInUcastClassAFrames.setReference('IEEE 802.17 Subclause 7.2.5, rxUcastClassAFrames')
if mibBuilder.loadTexts: rprSpanStatsInUcastClassAFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsInUcastClassAFrames.setDescription('The number of received (PHY to MAC) classA unicast frames.')
rprSpanStatsInUcastClassAOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsInUcastClassAOctets.setReference('IEEE 802.17 Subclause 7.2.5, rxUcastClassABytes')
if mibBuilder.loadTexts: rprSpanStatsInUcastClassAOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsInUcastClassAOctets.setDescription('The number of received (PHY to MAC) classA unicast octets.')
rprSpanStatsInUcastClassBCirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsInUcastClassBCirFrames.setReference('IEEE 802.17 Subclause 7.2.5, rxUcastClassBCirFrames')
if mibBuilder.loadTexts: rprSpanStatsInUcastClassBCirFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsInUcastClassBCirFrames.setDescription('The number of received (PHY to MAC) classB CIR unicast frames.')
rprSpanStatsInUcastClassBCirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsInUcastClassBCirOctets.setReference('IEEE 802.17 Subclause 7.2.5, rxUcastClassBCirBytes')
if mibBuilder.loadTexts: rprSpanStatsInUcastClassBCirOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsInUcastClassBCirOctets.setDescription('The number of received (PHY to MAC) classB CIR unicast octets.')
rprSpanStatsInUcastClassBEirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsInUcastClassBEirFrames.setReference('IEEE 802.17 Subclause 7.2.5, rxUcastClassBEirFrames')
if mibBuilder.loadTexts: rprSpanStatsInUcastClassBEirFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsInUcastClassBEirFrames.setDescription('The number of received (PHY to MAC) classB EIR unicast frames.')
rprSpanStatsInUcastClassBEirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsInUcastClassBEirOctets.setReference('IEEE 802.17 Subclause 7.2.5, rxUcastClassBEirBytes')
if mibBuilder.loadTexts: rprSpanStatsInUcastClassBEirOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsInUcastClassBEirOctets.setDescription('The number of received (PHY to MAC) classB EIR unicast octets.')
rprSpanStatsInUcastClassCFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsInUcastClassCFrames.setReference('IEEE 802.17 Subclause 7.2.5, rxUcastClassCFrames')
if mibBuilder.loadTexts: rprSpanStatsInUcastClassCFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsInUcastClassCFrames.setDescription('The number of received (PHY to MAC) classC unicast frames.')
rprSpanStatsInUcastClassCOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsInUcastClassCOctets.setReference('IEEE 802.17 Subclause 7.2.5, rxUcastClassCBytes')
if mibBuilder.loadTexts: rprSpanStatsInUcastClassCOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsInUcastClassCOctets.setDescription('The number of received (PHY to MAC) classC unicast octets.')
rprSpanStatsInMcastClassAFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsInMcastClassAFrames.setReference('IEEE 802.17 Subclause 7.2.5, rxMcastClassAFrames')
if mibBuilder.loadTexts: rprSpanStatsInMcastClassAFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsInMcastClassAFrames.setDescription('The number of received (PHY to MAC) classA multicast and broadcast frames')
rprSpanStatsInMcastClassAOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsInMcastClassAOctets.setReference('IEEE 802.17 Subclause 7.2.5, rxMcastClassABytes')
if mibBuilder.loadTexts: rprSpanStatsInMcastClassAOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsInMcastClassAOctets.setDescription('The number of received (PHY to MAC) classA multicast and broadcast octets')
rprSpanStatsInMcastClassBCirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsInMcastClassBCirFrames.setReference('IEEE 802.17 Subclause 7.2.5, rxMcastClassBCirFrames')
if mibBuilder.loadTexts: rprSpanStatsInMcastClassBCirFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsInMcastClassBCirFrames.setDescription('The number of received (PHY to MAC) classB CIR multicast and broadcast frames')
rprSpanStatsInMcastClassBCirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsInMcastClassBCirOctets.setReference('IEEE 802.17 Subclause 7.2.5, rxMcastClassBCirBytes')
if mibBuilder.loadTexts: rprSpanStatsInMcastClassBCirOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsInMcastClassBCirOctets.setDescription('The number of received (PHY to MAC) classB CIR multicast and broadcast octets')
rprSpanStatsInMcastClassBEirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsInMcastClassBEirFrames.setReference('IEEE 802.17 Subclause 7.2.5, rxMcastClassBEirFrames')
if mibBuilder.loadTexts: rprSpanStatsInMcastClassBEirFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsInMcastClassBEirFrames.setDescription('The number of received (PHY to MAC) classB EIR multicast and broadcast frames')
rprSpanStatsInMcastClassBEirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsInMcastClassBEirOctets.setReference('IEEE 802.17 Subclause 7.2.5, rxMcastClassBEirBytes')
if mibBuilder.loadTexts: rprSpanStatsInMcastClassBEirOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsInMcastClassBEirOctets.setDescription('The number of received (PHY to MAC) classB EIR multicast and broadcast octets')
rprSpanStatsInMcastClassCFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsInMcastClassCFrames.setReference('IEEE 802.17 Subclause 7.2.5, rxMcastClassCFrames')
if mibBuilder.loadTexts: rprSpanStatsInMcastClassCFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsInMcastClassCFrames.setDescription('The number of received (PHY to MAC) classC multicast and broadcast frames')
rprSpanStatsInMcastClassCOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsInMcastClassCOctets.setReference('IEEE 802.17 Subclause 7.2.5, rxMcastClassCBytes')
if mibBuilder.loadTexts: rprSpanStatsInMcastClassCOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsInMcastClassCOctets.setDescription('The number of received (PHY to MAC) classC multicast and broadcast octets')
rprSpanStatsInCtrlFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsInCtrlFrames.setReference('IEEE 802.17 Subclause 7.2.5, toCtrlFrames')
if mibBuilder.loadTexts: rprSpanStatsInCtrlFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsInCtrlFrames.setDescription('The number of received (PHY to MAC) control frames processed by this MAC. This does not include control frames in transit, i.e. a multicast control frame received from a ringlet will be counted as In but not Out. This does not include Fairness or idle frames.')
rprSpanStatsInOamEchoFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsInOamEchoFrames.setReference('IEEE 802.17 Subclause 7.2.5, toCtrlOamEchoFrames')
if mibBuilder.loadTexts: rprSpanStatsInOamEchoFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsInOamEchoFrames.setDescription('The number of received (PHY to MAC) OAM echo frames processed by this MAC.')
rprSpanStatsInOamFlushFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsInOamFlushFrames.setReference('IEEE 802.17 Subclause 7.2.5, toCtrlOamFlushFrames')
if mibBuilder.loadTexts: rprSpanStatsInOamFlushFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsInOamFlushFrames.setDescription('The number of received (PHY to MAC) OAM flush frames processed by this MAC.')
rprSpanStatsInOamOrgFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsInOamOrgFrames.setReference('IEEE 802.17 Subclause 7.2.5, toCtrlOamOrgFrames')
if mibBuilder.loadTexts: rprSpanStatsInOamOrgFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsInOamOrgFrames.setDescription('The number of received (PHY to MAC) OAM Org frames processed by this MAC.')
rprSpanStatsInTopoAtdFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsInTopoAtdFrames.setReference('IEEE 802.17 Subclause 7.2.5, toCtrlTopoATDFrames')
if mibBuilder.loadTexts: rprSpanStatsInTopoAtdFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsInTopoAtdFrames.setDescription('The number of received (PHY to MAC) Topology ATD frames processed by this MAC.')
rprSpanStatsInTopoChkSumFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsInTopoChkSumFrames.setReference('IEEE 802.17 Subclause 7.2.5, toCtrlTopoSumFrames')
if mibBuilder.loadTexts: rprSpanStatsInTopoChkSumFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsInTopoChkSumFrames.setDescription('The number of received (PHY to MAC) topology checksum frames processed by this MAC.')
rprSpanStatsInTopoTpFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsInTopoTpFrames.setReference('IEEE 802.17 Subclause 7.2.5, toCtrlTopoTPFrames')
if mibBuilder.loadTexts: rprSpanStatsInTopoTpFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsInTopoTpFrames.setDescription('The number of received (PHY to MAC) topology TP frames processed by this MAC.')
rprSpanStatsOutUcastClassAFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsOutUcastClassAFrames.setReference('IEEE 802.17 Subclause 7.2.5, txUcastClassAFrames')
if mibBuilder.loadTexts: rprSpanStatsOutUcastClassAFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsOutUcastClassAFrames.setDescription('The number of transmitted (MAC to PHY) classA unicast frames.')
rprSpanStatsOutUcastClassAOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsOutUcastClassAOctets.setReference('IEEE 802.17 Subclause 7.2.5, txUcastClassABytes')
if mibBuilder.loadTexts: rprSpanStatsOutUcastClassAOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsOutUcastClassAOctets.setDescription('The number of transmitted (MAC to PHY) classA unicast octets.')
rprSpanStatsOutUcastClassBCirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsOutUcastClassBCirFrames.setReference('IEEE 802.17 Subclause 7.2.5, txUcastClassBCirFrames')
if mibBuilder.loadTexts: rprSpanStatsOutUcastClassBCirFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsOutUcastClassBCirFrames.setDescription('The number of transmitted (MAC to PHY) classB CIR unicast frames.')
rprSpanStatsOutUcastClassBCirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsOutUcastClassBCirOctets.setReference('IEEE 802.17 Subclause 7.2.5, txUcastClassBCirBytes')
if mibBuilder.loadTexts: rprSpanStatsOutUcastClassBCirOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsOutUcastClassBCirOctets.setDescription('The number of transmitted (MAC to PHY) classB CIR unicast octets.')
rprSpanStatsOutUcastClassBEirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsOutUcastClassBEirFrames.setReference('IEEE 802.17 Subclause 7.2.5, txUcastClassBEirFrames')
if mibBuilder.loadTexts: rprSpanStatsOutUcastClassBEirFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsOutUcastClassBEirFrames.setDescription('The number of transmitted (MAC to PHY) classB EIR unicast frames')
rprSpanStatsOutUcastClassBEirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsOutUcastClassBEirOctets.setReference('IEEE 802.17 Subclause 7.2.5, txUcastClassBEirBytes')
if mibBuilder.loadTexts: rprSpanStatsOutUcastClassBEirOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsOutUcastClassBEirOctets.setDescription('The number of transmitted (MAC to PHY) classB EIR unicast octets')
rprSpanStatsOutUcastClassCFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsOutUcastClassCFrames.setReference('IEEE 802.17 Subclause 7.2.5, txUcastClassCFrames')
if mibBuilder.loadTexts: rprSpanStatsOutUcastClassCFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsOutUcastClassCFrames.setDescription('The number of transmitted (MAC to PHY) classC unicast frames')
rprSpanStatsOutUcastClassCOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsOutUcastClassCOctets.setReference('IEEE 802.17 Subclause 7.2.5, txUcastClassCBytes')
if mibBuilder.loadTexts: rprSpanStatsOutUcastClassCOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsOutUcastClassCOctets.setDescription('The number of transmitted (MAC to PHY) classC unicast octets')
rprSpanStatsOutMcastClassAFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsOutMcastClassAFrames.setReference('IEEE 802.17 Subclause 7.2.5, txMcastClassAFrames')
if mibBuilder.loadTexts: rprSpanStatsOutMcastClassAFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsOutMcastClassAFrames.setDescription('The number of transmitted (MAC to PHY) classA multicast and broadcast frames.')
rprSpanStatsOutMcastClassAOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsOutMcastClassAOctets.setReference('IEEE 802.17 Subclause 7.2.5, txMcastClassABytes')
if mibBuilder.loadTexts: rprSpanStatsOutMcastClassAOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsOutMcastClassAOctets.setDescription('The number of transmitted (MAC to PHY) classA multicast and broadcast octets.')
rprSpanStatsOutMcastClassBCirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsOutMcastClassBCirFrames.setReference('IEEE 802.17 Subclause 7.2.5, txMcastClassBCirFrames')
if mibBuilder.loadTexts: rprSpanStatsOutMcastClassBCirFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsOutMcastClassBCirFrames.setDescription('The number of transmitted (MAC to PHY) classB CIR multicast and broadcast frames.')
rprSpanStatsOutMcastClassBCirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsOutMcastClassBCirOctets.setReference('IEEE 802.17 Subclause 7.2.5, txMcastClassBCirBytes')
if mibBuilder.loadTexts: rprSpanStatsOutMcastClassBCirOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsOutMcastClassBCirOctets.setDescription('The number of transmitted (MAC to PHY) classB CIR multicast and broadcast octets.')
rprSpanStatsOutMcastClassBEirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsOutMcastClassBEirFrames.setReference('IEEE 802.17 Subclause 7.2.5, txMcastClassBEirFrames')
if mibBuilder.loadTexts: rprSpanStatsOutMcastClassBEirFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsOutMcastClassBEirFrames.setDescription('The number of transmitted (MAC to PHY) classB EIR multicast and broadcast frames.')
rprSpanStatsOutMcastClassBEirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsOutMcastClassBEirOctets.setReference('IEEE 802.17 Subclause 7.2.5, txMcastClassBEirBytes')
if mibBuilder.loadTexts: rprSpanStatsOutMcastClassBEirOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsOutMcastClassBEirOctets.setDescription('The number of transmitted (MAC to PHY) classB EIR multicast and broadcast octets.')
rprSpanStatsOutMcastClassCFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsOutMcastClassCFrames.setReference('IEEE 802.17 Subclause 7.2.5, txMcastClassCFrames')
if mibBuilder.loadTexts: rprSpanStatsOutMcastClassCFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsOutMcastClassCFrames.setDescription('The number of transmitted (MAC to PHY) classC multicast and broadcast frames.')
rprSpanStatsOutMcastClassCOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsOutMcastClassCOctets.setReference('IEEE 802.17 Subclause 7.2.5, txMcastClassCBytes')
if mibBuilder.loadTexts: rprSpanStatsOutMcastClassCOctets.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsOutMcastClassCOctets.setDescription('The number of transmitted (MAC to PHY) classC multicast and broadcast octets.')
rprSpanStatsOutCtrlFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsOutCtrlFrames.setReference('IEEE 802.17 Subclause 7.2.5, fromCtrlFrames')
if mibBuilder.loadTexts: rprSpanStatsOutCtrlFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsOutCtrlFrames.setDescription('The number of transmitted (MAC to PHY) control frames generated by this MAC. This does not include control frames in transit, i.e. a multicast control frame received from a ringlet will be counted as In but not Out. This does not include Fairness or idle frames.')
rprSpanStatsOutOamEchoFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsOutOamEchoFrames.setReference('IEEE 802.17 Subclause 7.2.5, fromCtrlOamEchoFrames')
if mibBuilder.loadTexts: rprSpanStatsOutOamEchoFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsOutOamEchoFrames.setDescription('The number of transmitted (MAC to PHY) OAM echo frames generated by this MAC.')
rprSpanStatsOutOamFlushFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsOutOamFlushFrames.setReference('IEEE 802.17 Subclause 7.2.5, fromCtrlOamFlushFrames')
if mibBuilder.loadTexts: rprSpanStatsOutOamFlushFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsOutOamFlushFrames.setDescription('The number of transmitted (MAC to PHY) OAM flush frames generated by this MAC.')
rprSpanStatsOutOamOrgFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsOutOamOrgFrames.setReference('IEEE 802.17 Subclause 7.2.5, fromCtrlOamOrgFrames')
if mibBuilder.loadTexts: rprSpanStatsOutOamOrgFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsOutOamOrgFrames.setDescription('The number of transmitted (MAC to PHY) OAM Org frames generated by this MAC.')
rprSpanStatsOutTopoAtdFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsOutTopoAtdFrames.setReference('IEEE 802.17 Subclause 7.2.5, fromCtrlTopoATDFrames')
if mibBuilder.loadTexts: rprSpanStatsOutTopoAtdFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsOutTopoAtdFrames.setDescription('The number of transmitted (MAC to PHY) topology ATD frames generated by this MAC.')
rprSpanStatsOutTopoChkSumFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsOutTopoChkSumFrames.setReference('IEEE 802.17 Subclause 7.2.5, fromCtrlTopoSumFrames')
if mibBuilder.loadTexts: rprSpanStatsOutTopoChkSumFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsOutTopoChkSumFrames.setDescription('The number of transmitted (MAC to PHY) topology checksum frames generated by this MAC.')
rprSpanStatsOutTopoTpFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 3, 4, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanStatsOutTopoTpFrames.setReference('IEEE 802.17 Subclause 7.2.5, fromCtrlTopoTPFrames')
if mibBuilder.loadTexts: rprSpanStatsOutTopoTpFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsOutTopoTpFrames.setDescription('The number of transmitted (MAC to PHY) topology TP frames generated by this MAC.')
rprClientCountersCurrentTable = MibTable((1, 0, 8802, 17, 1, 1, 1, 4, 1), )
if mibBuilder.loadTexts: rprClientCountersCurrentTable.setStatus('current')
if mibBuilder.loadTexts: rprClientCountersCurrentTable.setDescription('The local station traffic current counters table. All attributes in this table are volatile, i.e. will be cleared on system reset.')
rprClientCountersCurrentEntry = MibTableRow((1, 0, 8802, 17, 1, 1, 1, 4, 1, 1), ).setIndexNames((0, "IEEE-802DOT17-RPR-MIB", "rprClientCurrentIfIndex"))
if mibBuilder.loadTexts: rprClientCountersCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: rprClientCountersCurrentEntry.setDescription('Frames and octets statistics for the current interval for the local station traffic of a particular RPR client interface. The corresponding instance of rprIfTimeElapsed indicates the number of seconds which have elapsed so far in the current interval.')
rprClientCurrentIfIndex = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rprClientCurrentIfIndex.setReference('RFC 2863, ifIndex')
if mibBuilder.loadTexts: rprClientCurrentIfIndex.setStatus('current')
if mibBuilder.loadTexts: rprClientCurrentIfIndex.setDescription('The ifIndex of this RPR interface.')
rprClientCurrentInUcastClassAFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 1, 1, 2), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientCurrentInUcastClassAFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientCurrentInUcastClassAFrames.setDescription('The number of MAC to client classA unicast frames in the current interval.')
rprClientCurrentInUcastClassAOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 1, 1, 3), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientCurrentInUcastClassAOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientCurrentInUcastClassAOctets.setDescription('The number of MAC to client classA unicast octets in the current interval.')
rprClientCurrentInUcastClassBCirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 1, 1, 4), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientCurrentInUcastClassBCirFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientCurrentInUcastClassBCirFrames.setDescription('The number of MAC to client classB CIR unicast frames in the current interval.')
rprClientCurrentInUcastClassBCirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 1, 1, 5), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientCurrentInUcastClassBCirOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientCurrentInUcastClassBCirOctets.setDescription('The number of MAC to client classB CIR unicast octets in the current interval.')
rprClientCurrentInUcastClassBEirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 1, 1, 6), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientCurrentInUcastClassBEirFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientCurrentInUcastClassBEirFrames.setDescription('The number of MAC to client classB EIR unicast frames in the current interval.')
rprClientCurrentInUcastClassBEirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 1, 1, 7), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientCurrentInUcastClassBEirOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientCurrentInUcastClassBEirOctets.setDescription('The number of MAC to client classB EIR unicast octets in the current interval.')
rprClientCurrentInUcastClassCFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 1, 1, 8), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientCurrentInUcastClassCFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientCurrentInUcastClassCFrames.setDescription('The number of MAC to client classC unicast frames in the current interval.')
rprClientCurrentInUcastClassCOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 1, 1, 9), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientCurrentInUcastClassCOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientCurrentInUcastClassCOctets.setDescription('The number of MAC to client classC unicast octets in the current interval.')
rprClientCurrentInMcastClassAFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 1, 1, 10), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientCurrentInMcastClassAFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientCurrentInMcastClassAFrames.setDescription('The number of MAC to client classA multicast and broadcast frames in the current interval.')
rprClientCurrentInMcastClassAOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 1, 1, 11), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientCurrentInMcastClassAOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientCurrentInMcastClassAOctets.setDescription('The number of MAC to client classA multicast and broadcast octets in the current interval.')
rprClientCurrentInMcastClassBCirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 1, 1, 12), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientCurrentInMcastClassBCirFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientCurrentInMcastClassBCirFrames.setDescription('The number of MAC to client classB CIR multicast and broadcast frames in the current interval.')
rprClientCurrentInMcastClassBCirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 1, 1, 13), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientCurrentInMcastClassBCirOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientCurrentInMcastClassBCirOctets.setDescription('The number of MAC to client classB CIR multicast and broadcast octets in the current interval.')
rprClientCurrentInMcastClassBEirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 1, 1, 14), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientCurrentInMcastClassBEirFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientCurrentInMcastClassBEirFrames.setDescription('The number of MAC to client classB EIR multicast and broadcast frames in the current interval.')
rprClientCurrentInMcastClassBEirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 1, 1, 15), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientCurrentInMcastClassBEirOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientCurrentInMcastClassBEirOctets.setDescription('The number of MAC to client classB EIR multicast and broadcast octets in the current interval.')
rprClientCurrentInMcastClassCFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 1, 1, 16), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientCurrentInMcastClassCFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientCurrentInMcastClassCFrames.setDescription('The number of MAC to client classC multicast and broadcast frames in the current interval.')
rprClientCurrentInMcastClassCOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 1, 1, 17), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientCurrentInMcastClassCOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientCurrentInMcastClassCOctets.setDescription('The number of MAC to client classC multicast and broadcast octets in the current interval.')
rprClientCurrentOutUcastClassAFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 1, 1, 18), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientCurrentOutUcastClassAFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientCurrentOutUcastClassAFrames.setDescription('The number of client to MAC classA unicast frames in the current interval.')
rprClientCurrentOutUcastClassAOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 1, 1, 19), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientCurrentOutUcastClassAOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientCurrentOutUcastClassAOctets.setDescription('The number of client to MAC classA unicast octets in the current interval.')
rprClientCurrentOutUcastClassBCirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 1, 1, 20), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientCurrentOutUcastClassBCirFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientCurrentOutUcastClassBCirFrames.setDescription('The number of client to MAC classB CIR unicast frames in the current interval.')
rprClientCurrentOutUcastClassBCirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 1, 1, 21), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientCurrentOutUcastClassBCirOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientCurrentOutUcastClassBCirOctets.setDescription('The number of client to MAC classB CIR unicast octets in the current interval.')
rprClientCurrentOutUcastClassBEirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 1, 1, 22), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientCurrentOutUcastClassBEirFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientCurrentOutUcastClassBEirFrames.setDescription('The number of client to MAC classB EIR unicast frames in the current interval.')
rprClientCurrentOutUcastClassBEirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 1, 1, 23), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientCurrentOutUcastClassBEirOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientCurrentOutUcastClassBEirOctets.setDescription('The number of client to MAC classB EIR unicast octets in the current interval.')
rprClientCurrentOutUcastClassCFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 1, 1, 24), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientCurrentOutUcastClassCFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientCurrentOutUcastClassCFrames.setDescription('The number of client to MAC classC unicast frames in the current interval.')
rprClientCurrentOutUcastClassCOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 1, 1, 25), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientCurrentOutUcastClassCOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientCurrentOutUcastClassCOctets.setDescription('The number of client to MAC classC unicast octets in the current interval.')
rprClientCurrentOutMcastClassAFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 1, 1, 26), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientCurrentOutMcastClassAFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientCurrentOutMcastClassAFrames.setDescription('The number of client to MAC classA multicast and broadcast frames in the current interval.')
rprClientCurrentOutMcastClassAOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 1, 1, 27), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientCurrentOutMcastClassAOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientCurrentOutMcastClassAOctets.setDescription('The number of client to MAC classA multicast and broadcast octets in the current interval.')
rprClientCurrentOutMcastClassBCirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 1, 1, 28), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientCurrentOutMcastClassBCirFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientCurrentOutMcastClassBCirFrames.setDescription('The number of client to MAC classB CIR multicast and broadcast frames in the current interval.')
rprClientCurrentOutMcastClassBCirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 1, 1, 29), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientCurrentOutMcastClassBCirOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientCurrentOutMcastClassBCirOctets.setDescription('The number of client to MAC classB CIR multicast and broadcast octets in the current interval.')
rprClientCurrentOutMcastClassBEirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 1, 1, 30), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientCurrentOutMcastClassBEirFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientCurrentOutMcastClassBEirFrames.setDescription('The number of client to MAC classB EIR multicast and broadcast frames in the current interval.')
rprClientCurrentOutMcastClassBEirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 1, 1, 31), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientCurrentOutMcastClassBEirOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientCurrentOutMcastClassBEirOctets.setDescription('The number of client to MAC classB EIR multicast and broadcast octets in the current interval.')
rprClientCurrentOutMcastClassCFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 1, 1, 32), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientCurrentOutMcastClassCFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientCurrentOutMcastClassCFrames.setDescription('The number of client to MAC classC multicast and broadcast frames in the current interval.')
rprClientCurrentOutMcastClassCOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 1, 1, 33), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientCurrentOutMcastClassCOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientCurrentOutMcastClassCOctets.setDescription('The number of client to MAC classC multicast and broadcast octets in the current interval.')
rprClientCountersIntervalTable = MibTable((1, 0, 8802, 17, 1, 1, 1, 4, 2), )
if mibBuilder.loadTexts: rprClientCountersIntervalTable.setStatus('current')
if mibBuilder.loadTexts: rprClientCountersIntervalTable.setDescription('The local station traffic interval counters table. All attributes in this table are volatile, i.e. will be cleared on system reset.')
rprClientCountersIntervalEntry = MibTableRow((1, 0, 8802, 17, 1, 1, 1, 4, 2, 1), ).setIndexNames((0, "IEEE-802DOT17-RPR-MIB", "rprClientIntervalIfIndex"), (0, "IEEE-802DOT17-RPR-MIB", "rprClientIntervalNumber"))
if mibBuilder.loadTexts: rprClientCountersIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: rprClientCountersIntervalEntry.setDescription('Frames and octets statistics collected for a particular interval for local station traffic of a particular RPR interface. The corresponding instance of rprIfValidIntervals indicates the number of intervals for which the set of statistics is available.')
rprClientIntervalIfIndex = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rprClientIntervalIfIndex.setStatus('current')
if mibBuilder.loadTexts: rprClientIntervalIfIndex.setDescription('The ifIndex of this RPR interface.')
rprClientIntervalNumber = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: rprClientIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: rprClientIntervalNumber.setDescription('A number between 1 and 96, which identifies the interval for which the set of statistics is available. The interval identified by 1 is the most recently completed 15 minute interval, and interval identified by N is the interval immediately preceding the one identified by N-1.')
rprClientIntervalValidData = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientIntervalValidData.setStatus('current')
if mibBuilder.loadTexts: rprClientIntervalValidData.setDescription('This variable indicates if the data for this interval is valid. It will be valid if it contains data for 900 seconds plus or minus 10 seconds.')
rprClientIntervalTimeElapsed = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientIntervalTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: rprClientIntervalTimeElapsed.setDescription("The duration of a particular interval in seconds. If, for some reason, such as an adjustment in the system's time-of-day clock, the current interval exceeds the maximum value, the agent will return the maximum value.")
rprClientIntervalInUcastClassAFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 2, 1, 5), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientIntervalInUcastClassAFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientIntervalInUcastClassAFrames.setDescription('The number of MAC to client classA unicast frames in a particular interval in the past 24 hours.')
rprClientIntervalInUcastClassAOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 2, 1, 6), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientIntervalInUcastClassAOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientIntervalInUcastClassAOctets.setDescription('The number of MAC to client classA unicast octets in a particular interval in the past 24 hours.')
rprClientIntervalInUcastClassBCirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 2, 1, 7), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientIntervalInUcastClassBCirFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientIntervalInUcastClassBCirFrames.setDescription('The number of MAC to client classB CIR unicast frames in a particular interval in the past 24 hours.')
rprClientIntervalInUcastClassBCirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 2, 1, 8), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientIntervalInUcastClassBCirOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientIntervalInUcastClassBCirOctets.setDescription('The number of MAC to client classB CIR unicast octets in a particular interval in the past 24 hours.')
rprClientIntervalInUcastClassBEirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 2, 1, 9), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientIntervalInUcastClassBEirFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientIntervalInUcastClassBEirFrames.setDescription('The number of MAC to client classB EIR unicast frames in a particular interval in the past 24 hours.')
rprClientIntervalInUcastClassBEirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 2, 1, 10), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientIntervalInUcastClassBEirOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientIntervalInUcastClassBEirOctets.setDescription('The number of MAC to client classB EIR unicast octets in a particular interval in the past 24 hours.')
rprClientIntervalInUcastClassCFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 2, 1, 11), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientIntervalInUcastClassCFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientIntervalInUcastClassCFrames.setDescription('The number of MAC to client classC unicast frames in a particular interval in the past 24 hours.')
rprClientIntervalInUcastClassCOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 2, 1, 12), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientIntervalInUcastClassCOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientIntervalInUcastClassCOctets.setDescription('The number of MAC to client classC unicast octets in a particular interval in the past 24 hours.')
rprClientIntervalInMcastClassAFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 2, 1, 13), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientIntervalInMcastClassAFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientIntervalInMcastClassAFrames.setDescription('The number of MAC to client classA multicast and broadcast frames in a particular interval in the past 24 hours.')
rprClientIntervalInMcastClassAOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 2, 1, 14), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientIntervalInMcastClassAOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientIntervalInMcastClassAOctets.setDescription('The number of MAC to client classA multicast and broadcast octets in a particular interval in the past 24 hours.')
rprClientIntervalInMcastClassBCirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 2, 1, 15), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientIntervalInMcastClassBCirFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientIntervalInMcastClassBCirFrames.setDescription('The number of MAC to client classB CIR multicast and broadcast frames in a particular interval in the past 24 hours.')
rprClientIntervalInMcastClassBCirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 2, 1, 16), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientIntervalInMcastClassBCirOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientIntervalInMcastClassBCirOctets.setDescription('The number of MAC to client classB CIR multicast and broadcast octets in a particular interval in the past 24 hours.')
rprClientIntervalInMcastClassBEirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 2, 1, 17), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientIntervalInMcastClassBEirFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientIntervalInMcastClassBEirFrames.setDescription('The number of MAC to client classB EIR multicast and broadcast frames in a particular interval in the past 24 hours.')
rprClientIntervalInMcastClassBEirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 2, 1, 18), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientIntervalInMcastClassBEirOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientIntervalInMcastClassBEirOctets.setDescription('The number of MAC to client classB EIR multicast and broadcast octets in a particular interval in the past 24 hours.')
rprClientIntervalInMcastClassCFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 2, 1, 19), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientIntervalInMcastClassCFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientIntervalInMcastClassCFrames.setDescription('The number of MAC to client classC multicast and broadcast frames in a particular interval in the past 24 hours.')
rprClientIntervalInMcastClassCOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 2, 1, 20), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientIntervalInMcastClassCOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientIntervalInMcastClassCOctets.setDescription('The number of MAC to client classC multicast and broadcast octets in a particular interval in the past 24 hours.')
rprClientIntervalOutUcastClassAFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 2, 1, 21), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientIntervalOutUcastClassAFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientIntervalOutUcastClassAFrames.setDescription('The number of client to MAC classA unicast frames in a particular interval in the past 24 hours.')
rprClientIntervalOutUcastClassAOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 2, 1, 22), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientIntervalOutUcastClassAOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientIntervalOutUcastClassAOctets.setDescription('The number of client to MAC classA unicast octets in a particular interval in the past 24 hours.')
rprClientIntervalOutUcastClassBCirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 2, 1, 23), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientIntervalOutUcastClassBCirFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientIntervalOutUcastClassBCirFrames.setDescription('The number of client to MAC classB CIR unicast frames in a particular interval in the past 24 hours.')
rprClientIntervalOutUcastClassBCirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 2, 1, 24), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientIntervalOutUcastClassBCirOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientIntervalOutUcastClassBCirOctets.setDescription('The number of client to MAC classB CIR unicast octets in a particular interval in the past 24 hours.')
rprClientIntervalOutUcastClassBEirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 2, 1, 25), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientIntervalOutUcastClassBEirFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientIntervalOutUcastClassBEirFrames.setDescription('The number of client to MAC classB EIR unicast frames in a particular interval in the past 24 hours.')
rprClientIntervalOutUcastClassBEirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 2, 1, 26), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientIntervalOutUcastClassBEirOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientIntervalOutUcastClassBEirOctets.setDescription('The number of client to MAC classB EIR unicast octets in a particular interval in the past 24 hours.')
rprClientIntervalOutUcastClassCFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 2, 1, 27), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientIntervalOutUcastClassCFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientIntervalOutUcastClassCFrames.setDescription('The number of client to MAC classC unicast frames in a particular interval in the past 24 hours.')
rprClientIntervalOutUcastClassCOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 2, 1, 28), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientIntervalOutUcastClassCOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientIntervalOutUcastClassCOctets.setDescription('The number of client to MAC classC unicast octets in a particular interval in the past 24 hours.')
rprClientIntervalOutMcastClassAFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 2, 1, 29), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientIntervalOutMcastClassAFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientIntervalOutMcastClassAFrames.setDescription('The number of client to MAC classA multicast and broadcast frames in a particular interval in the past 24 hours.')
rprClientIntervalOutMcastClassAOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 2, 1, 30), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientIntervalOutMcastClassAOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientIntervalOutMcastClassAOctets.setDescription('The number of client to MAC classA multicast and broadcast octets in a particular interval in the past 24 hours.')
rprClientIntervalOutMcastClassBCirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 2, 1, 31), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientIntervalOutMcastClassBCirFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientIntervalOutMcastClassBCirFrames.setDescription('The number of client to MAC classB CIR multicast and broadcast frames in a particular interval in the past 24 hours.')
rprClientIntervalOutMcastClassBCirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 2, 1, 32), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientIntervalOutMcastClassBCirOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientIntervalOutMcastClassBCirOctets.setDescription('The number of client to MAC classB CIR multicast and broadcast octets in a particular interval in the past 24 hours.')
rprClientIntervalOutMcastClassBEirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 2, 1, 33), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientIntervalOutMcastClassBEirFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientIntervalOutMcastClassBEirFrames.setDescription('The number of client to MAC classB EIR multicast and broadcast frames in a particular interval in the past 24 hours.')
rprClientIntervalOutMcastClassBEirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 2, 1, 34), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientIntervalOutMcastClassBEirOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientIntervalOutMcastClassBEirOctets.setDescription('The number of client to MAC classB EIR multicast and broadcast octets in a particular interval in the past 24 hours.')
rprClientIntervalOutMcastClassCFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 2, 1, 35), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientIntervalOutMcastClassCFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientIntervalOutMcastClassCFrames.setDescription('The number of client to MAC classC multicast and broadcast frames in a particular interval in the past 24 hours.')
rprClientIntervalOutMcastClassCOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 2, 1, 36), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientIntervalOutMcastClassCOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientIntervalOutMcastClassCOctets.setDescription('The number of client to MAC classC multicast and broadcast octets in a particular interval in the past 24 hours.')
rprClientCountersDayTable = MibTable((1, 0, 8802, 17, 1, 1, 1, 4, 3), )
if mibBuilder.loadTexts: rprClientCountersDayTable.setStatus('current')
if mibBuilder.loadTexts: rprClientCountersDayTable.setDescription('The RPR Mac Client Day Table contains the cumulative sum of the various statistics for the 24 hour period preceding the current interval. All attributes in this table are volatile, i.e. will be cleared on system reset.')
rprClientCountersDayEntry = MibTableRow((1, 0, 8802, 17, 1, 1, 1, 4, 3, 1), ).setIndexNames((0, "IEEE-802DOT17-RPR-MIB", "rprClientDayIfIndex"))
if mibBuilder.loadTexts: rprClientCountersDayEntry.setStatus('current')
if mibBuilder.loadTexts: rprClientCountersDayEntry.setDescription('An entry in the RPR Client Day table.')
rprClientDayIfIndex = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rprClientDayIfIndex.setStatus('current')
if mibBuilder.loadTexts: rprClientDayIfIndex.setDescription('The ifIndex of this RPR interface.')
rprClientDayInUcastClassAFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 3, 1, 2), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientDayInUcastClassAFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientDayInUcastClassAFrames.setDescription('The number of MAC to client classA unicast frames.')
rprClientDayInUcastClassAOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 3, 1, 3), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientDayInUcastClassAOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientDayInUcastClassAOctets.setDescription('The number of MAC to client classA unicast octets.')
rprClientDayInUcastClassBCirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 3, 1, 4), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientDayInUcastClassBCirFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientDayInUcastClassBCirFrames.setDescription('The number of MAC to client classB CIR unicast frames.')
rprClientDayInUcastClassBCirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 3, 1, 5), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientDayInUcastClassBCirOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientDayInUcastClassBCirOctets.setDescription('The number of MAC to client classB CIR unicast octets.')
rprClientDayInUcastClassBEirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 3, 1, 6), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientDayInUcastClassBEirFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientDayInUcastClassBEirFrames.setDescription('The number of MAC to client classB EIR unicast frames.')
rprClientDayInUcastClassBEirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 3, 1, 7), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientDayInUcastClassBEirOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientDayInUcastClassBEirOctets.setDescription('The number of MAC to client classB EIR unicast octets.')
rprClientDayInUcastClassCFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 3, 1, 8), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientDayInUcastClassCFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientDayInUcastClassCFrames.setDescription('The number of MAC to client classC unicast frames.')
rprClientDayInUcastClassCOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 3, 1, 9), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientDayInUcastClassCOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientDayInUcastClassCOctets.setDescription('The number of MAC to client classC unicast octets.')
rprClientDayInMcastClassAFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 3, 1, 10), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientDayInMcastClassAFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientDayInMcastClassAFrames.setDescription('The number of MAC to client classA multicast and broadcast frames')
rprClientDayInMcastClassAOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 3, 1, 11), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientDayInMcastClassAOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientDayInMcastClassAOctets.setDescription('The number of MAC to client classA multicast and broadcast octets')
rprClientDayInMcastClassBCirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 3, 1, 12), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientDayInMcastClassBCirFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientDayInMcastClassBCirFrames.setDescription('The number of MAC to client classB CIR multicast and broadcast frames')
rprClientDayInMcastClassBCirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 3, 1, 13), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientDayInMcastClassBCirOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientDayInMcastClassBCirOctets.setDescription('The number of MAC to client classB CIR multicast and broadcast octets')
rprClientDayInMcastClassBEirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 3, 1, 14), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientDayInMcastClassBEirFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientDayInMcastClassBEirFrames.setDescription('The number of MAC to client classB EIR multicast and broadcast frames')
rprClientDayInMcastClassBEirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 3, 1, 15), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientDayInMcastClassBEirOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientDayInMcastClassBEirOctets.setDescription('The number of MAC to client classB EIR multicast and broadcast octets')
rprClientDayInMcastClassCFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 3, 1, 16), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientDayInMcastClassCFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientDayInMcastClassCFrames.setDescription('The number of MAC to client classC multicast and broadcast frames')
rprClientDayInMcastClassCOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 3, 1, 17), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientDayInMcastClassCOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientDayInMcastClassCOctets.setDescription('The number of MAC to client classC multicast and broadcast octets')
rprClientDayOutUcastClassAFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 3, 1, 18), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientDayOutUcastClassAFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientDayOutUcastClassAFrames.setDescription('The number of client to MAC classA unicast frames.')
rprClientDayOutUcastClassAOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 3, 1, 19), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientDayOutUcastClassAOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientDayOutUcastClassAOctets.setDescription('The number of client to MAC classA unicast octets.')
rprClientDayOutUcastClassBCirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 3, 1, 20), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientDayOutUcastClassBCirFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientDayOutUcastClassBCirFrames.setDescription('The number of client to MAC classB CIR unicast frames.')
rprClientDayOutUcastClassBCirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 3, 1, 21), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientDayOutUcastClassBCirOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientDayOutUcastClassBCirOctets.setDescription('The number of client to MAC classB CIR unicast octets.')
rprClientDayOutUcastClassBEirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 3, 1, 22), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientDayOutUcastClassBEirFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientDayOutUcastClassBEirFrames.setDescription('The number of client to MAC classB EIR unicast frames')
rprClientDayOutUcastClassBEirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 3, 1, 23), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientDayOutUcastClassBEirOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientDayOutUcastClassBEirOctets.setDescription('The number of client to MAC classB EIR unicast octets')
rprClientDayOutUcastClassCFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 3, 1, 24), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientDayOutUcastClassCFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientDayOutUcastClassCFrames.setDescription('The number of client to MAC classC unicast frames')
rprClientDayOutUcastClassCOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 3, 1, 25), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientDayOutUcastClassCOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientDayOutUcastClassCOctets.setDescription('The number of client to MAC classC unicast octets')
rprClientDayOutMcastClassAFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 3, 1, 26), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientDayOutMcastClassAFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientDayOutMcastClassAFrames.setDescription('The number of client to MAC classA multicast and broadcast frames.')
rprClientDayOutMcastClassAOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 3, 1, 27), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientDayOutMcastClassAOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientDayOutMcastClassAOctets.setDescription('The number of client to MAC classA multicast and broadcast octets.')
rprClientDayOutMcastClassBCirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 3, 1, 28), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientDayOutMcastClassBCirFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientDayOutMcastClassBCirFrames.setDescription('The number of client to MAC classB CIR multicast and broadcast frames.')
rprClientDayOutMcastClassBCirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 3, 1, 29), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientDayOutMcastClassBCirOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientDayOutMcastClassBCirOctets.setDescription('The number of client to MAC classB CIR multicast and broadcast octets.')
rprClientDayOutMcastClassBEirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 3, 1, 30), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientDayOutMcastClassBEirFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientDayOutMcastClassBEirFrames.setDescription('The number of client to MAC classB EIR multicast and broadcast frames.')
rprClientDayOutMcastClassBEirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 3, 1, 31), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientDayOutMcastClassBEirOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientDayOutMcastClassBEirOctets.setDescription('The number of client to MAC classB EIR multicast and broadcast octets.')
rprClientDayOutMcastClassCFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 3, 1, 32), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientDayOutMcastClassCFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientDayOutMcastClassCFrames.setDescription('The number of client to MAC classC multicast and broadcast frames.')
rprClientDayOutMcastClassCOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 3, 1, 33), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientDayOutMcastClassCOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientDayOutMcastClassCOctets.setDescription('The number of client to MAC classC multicast and broadcast octets.')
rprClientCountersStatsTable = MibTable((1, 0, 8802, 17, 1, 1, 1, 4, 4), )
if mibBuilder.loadTexts: rprClientCountersStatsTable.setStatus('current')
if mibBuilder.loadTexts: rprClientCountersStatsTable.setDescription('The local station traffic total counters table. The DiscontinuityTime for this table is indicated by ifCounterDiscontinuityTime defined in ifXTable. All attributes in this table are volatile, i.e. will be cleared on system reset.')
rprClientCountersStatsEntry = MibTableRow((1, 0, 8802, 17, 1, 1, 1, 4, 4, 1), ).setIndexNames((0, "IEEE-802DOT17-RPR-MIB", "rprClientStatsIfIndex"))
if mibBuilder.loadTexts: rprClientCountersStatsEntry.setStatus('current')
if mibBuilder.loadTexts: rprClientCountersStatsEntry.setDescription('An entry in the span stats table.')
rprClientStatsIfIndex = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rprClientStatsIfIndex.setStatus('current')
if mibBuilder.loadTexts: rprClientStatsIfIndex.setDescription('The ifIndex of this RPR interface.')
rprClientStatsInUcastClassAFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientStatsInUcastClassAFrames.setReference('IEEE 802.17 Subclause 7.2.5, toClientUcastClassAFrames')
if mibBuilder.loadTexts: rprClientStatsInUcastClassAFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientStatsInUcastClassAFrames.setDescription('The number of MAC to client classA unicast frames.')
rprClientStatsInUcastClassAOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientStatsInUcastClassAOctets.setReference('IEEE 802.17 Subclause 7.2.5, toClientUcastClassABytes')
if mibBuilder.loadTexts: rprClientStatsInUcastClassAOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientStatsInUcastClassAOctets.setDescription('The number of MAC to client classA unicast octets.')
rprClientStatsInUcastClassBCirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientStatsInUcastClassBCirFrames.setReference('IEEE 802.17 Subclause 7.2.5, toClientUcastClassBCirAFrames')
if mibBuilder.loadTexts: rprClientStatsInUcastClassBCirFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientStatsInUcastClassBCirFrames.setDescription('The number of MAC to client classB CIR unicast frames.')
rprClientStatsInUcastClassBCirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientStatsInUcastClassBCirOctets.setReference('IEEE 802.17 Subclause 7.2.5, toClientUcastClassBCirBytes')
if mibBuilder.loadTexts: rprClientStatsInUcastClassBCirOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientStatsInUcastClassBCirOctets.setDescription('The number of MAC to client classB CIR unicast octets.')
rprClientStatsInUcastClassBEirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientStatsInUcastClassBEirFrames.setReference('IEEE 802.17 Subclause 7.2.5, toClientUcastClassBEirFrames')
if mibBuilder.loadTexts: rprClientStatsInUcastClassBEirFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientStatsInUcastClassBEirFrames.setDescription('The number of MAC to client classB EIR unicast frames.')
rprClientStatsInUcastClassBEirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientStatsInUcastClassBEirOctets.setReference('IEEE 802.17 Subclause 7.2.5, toClientUcastClassBEirBytes')
if mibBuilder.loadTexts: rprClientStatsInUcastClassBEirOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientStatsInUcastClassBEirOctets.setDescription('The number of MAC to client classB EIR unicast octets.')
rprClientStatsInUcastClassCFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientStatsInUcastClassCFrames.setReference('IEEE 802.17 Subclause 7.2.5, toClientUcastClassCFrames')
if mibBuilder.loadTexts: rprClientStatsInUcastClassCFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientStatsInUcastClassCFrames.setDescription('The number of MAC to client classC unicast frames.')
rprClientStatsInUcastClassCOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientStatsInUcastClassCOctets.setReference('IEEE 802.17 Subclause 7.2.5, toClientUcastClassCBytes')
if mibBuilder.loadTexts: rprClientStatsInUcastClassCOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientStatsInUcastClassCOctets.setDescription('The number of MAC to client classC unicast octets.')
rprClientStatsInMcastClassAFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientStatsInMcastClassAFrames.setReference('IEEE 802.17 Subclause 7.2.5, toClientMcastClassAFrames')
if mibBuilder.loadTexts: rprClientStatsInMcastClassAFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientStatsInMcastClassAFrames.setDescription('The number of MAC to client classA multicast and broadcast frames')
rprClientStatsInMcastClassAOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientStatsInMcastClassAOctets.setReference('IEEE 802.17 Subclause 7.2.5, toClientMcastClassABytes')
if mibBuilder.loadTexts: rprClientStatsInMcastClassAOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientStatsInMcastClassAOctets.setDescription('The number of MAC to client classA multicast and broadcast octets')
rprClientStatsInMcastClassBCirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientStatsInMcastClassBCirFrames.setReference('IEEE 802.17 Subclause 7.2.5, toClientMcastClassBCirFrames')
if mibBuilder.loadTexts: rprClientStatsInMcastClassBCirFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientStatsInMcastClassBCirFrames.setDescription('The number of MAC to client classB CIR multicast and broadcast frames')
rprClientStatsInMcastClassBCirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientStatsInMcastClassBCirOctets.setReference('IEEE 802.17 Subclause 7.2.5, toClientMcastClassBCirBytes')
if mibBuilder.loadTexts: rprClientStatsInMcastClassBCirOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientStatsInMcastClassBCirOctets.setDescription('The number of MAC to client classB CIR multicast and broadcast octets')
rprClientStatsInMcastClassBEirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 4, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientStatsInMcastClassBEirFrames.setReference('IEEE 802.17 Subclause 7.2.5, toClientMcastClassBEirFrames')
if mibBuilder.loadTexts: rprClientStatsInMcastClassBEirFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientStatsInMcastClassBEirFrames.setDescription('The number of MAC to client classB EIR multicast and broadcast frames')
rprClientStatsInMcastClassBEirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 4, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientStatsInMcastClassBEirOctets.setReference('IEEE 802.17 Subclause 7.2.5, toClientMcastClassBEirBytes')
if mibBuilder.loadTexts: rprClientStatsInMcastClassBEirOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientStatsInMcastClassBEirOctets.setDescription('The number of MAC to client classB EIR multicast and broadcast octets')
rprClientStatsInMcastClassCFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 4, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientStatsInMcastClassCFrames.setReference('IEEE 802.17 Subclause 7.2.5, toClientMcastClassCFrames')
if mibBuilder.loadTexts: rprClientStatsInMcastClassCFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientStatsInMcastClassCFrames.setDescription('The number of MAC to client classC multicast and broadcast frames')
rprClientStatsInMcastClassCOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 4, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientStatsInMcastClassCOctets.setReference('IEEE 802.17 Subclause 7.2.5, toClientMcastClassCBytes')
if mibBuilder.loadTexts: rprClientStatsInMcastClassCOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientStatsInMcastClassCOctets.setDescription('The number of MAC to client classC multicast and broadcast octets')
rprClientStatsInBcastFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 4, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientStatsInBcastFrames.setReference('IEEE 802.17 Subclause 7.2.5, toClientBcastFrames')
if mibBuilder.loadTexts: rprClientStatsInBcastFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientStatsInBcastFrames.setDescription('The number of MAC to client broadcast frames. This is used only when deriving the multicast and broadcast packet counters for the interface MIB.')
rprClientStatsOutUcastClassAFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 4, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientStatsOutUcastClassAFrames.setReference('IEEE 802.17 Subclause 7.2.5, fromClientUcastClassAFrames')
if mibBuilder.loadTexts: rprClientStatsOutUcastClassAFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientStatsOutUcastClassAFrames.setDescription('The number of client to MAC classA unicast frames.')
rprClientStatsOutUcastClassAOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 4, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientStatsOutUcastClassAOctets.setReference('IEEE 802.17 Subclause 7.2.5, fromClientUcastClassABytes')
if mibBuilder.loadTexts: rprClientStatsOutUcastClassAOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientStatsOutUcastClassAOctets.setDescription('The number of client to MAC classA unicast octets.')
rprClientStatsOutUcastClassBCirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 4, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientStatsOutUcastClassBCirFrames.setReference('IEEE 802.17 Subclause 7.2.5, fromClientUcastClassBCirFrames')
if mibBuilder.loadTexts: rprClientStatsOutUcastClassBCirFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientStatsOutUcastClassBCirFrames.setDescription('The number of client to MAC classB CIR unicast frames.')
rprClientStatsOutUcastClassBCirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 4, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientStatsOutUcastClassBCirOctets.setReference('IEEE 802.17 Subclause 7.2.5, fromClientUcastClassBCirBytes')
if mibBuilder.loadTexts: rprClientStatsOutUcastClassBCirOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientStatsOutUcastClassBCirOctets.setDescription('The number of client to MAC classB CIR unicast octets.')
rprClientStatsOutUcastClassBEirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 4, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientStatsOutUcastClassBEirFrames.setReference('IEEE 802.17 Subclause 7.2.5, fromClientUcastClassBEirFrames')
if mibBuilder.loadTexts: rprClientStatsOutUcastClassBEirFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientStatsOutUcastClassBEirFrames.setDescription('The number of client to MAC classB EIR unicast frames')
rprClientStatsOutUcastClassBEirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 4, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientStatsOutUcastClassBEirOctets.setReference('IEEE 802.17 Subclause 7.2.5, fromClientUcastClassBEirBytes')
if mibBuilder.loadTexts: rprClientStatsOutUcastClassBEirOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientStatsOutUcastClassBEirOctets.setDescription('The number of client to MAC classB EIR unicast octets')
rprClientStatsOutUcastClassCFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 4, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientStatsOutUcastClassCFrames.setReference('IEEE 802.17 Subclause 7.2.5, fromClientUcastClassCFrames')
if mibBuilder.loadTexts: rprClientStatsOutUcastClassCFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientStatsOutUcastClassCFrames.setDescription('The number of client to MAC classC unicast frames')
rprClientStatsOutUcastClassCOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 4, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientStatsOutUcastClassCOctets.setReference('IEEE 802.17 Subclause 7.2.5, fromClientUcastClassCBytes')
if mibBuilder.loadTexts: rprClientStatsOutUcastClassCOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientStatsOutUcastClassCOctets.setDescription('The number of client to MAC classC unicast octets')
rprClientStatsOutMcastClassAFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 4, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientStatsOutMcastClassAFrames.setReference('IEEE 802.17 Subclause 7.2.5, fromClientMcastClassAFrames')
if mibBuilder.loadTexts: rprClientStatsOutMcastClassAFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientStatsOutMcastClassAFrames.setDescription('The number of client to MAC classA multicast and broadcast frames.')
rprClientStatsOutMcastClassAOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 4, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientStatsOutMcastClassAOctets.setReference('IEEE 802.17 Subclause 7.2.5, fromClientMcastClassABytes')
if mibBuilder.loadTexts: rprClientStatsOutMcastClassAOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientStatsOutMcastClassAOctets.setDescription('The number of client to MAC classA multicast and broadcast octets.')
rprClientStatsOutMcastClassBCirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 4, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientStatsOutMcastClassBCirFrames.setReference('IEEE 802.17 Subclause 7.2.5, fromClientMcastClassBCirFrames')
if mibBuilder.loadTexts: rprClientStatsOutMcastClassBCirFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientStatsOutMcastClassBCirFrames.setDescription('The number of client to MAC classB CIR multicast and broadcast frames.')
rprClientStatsOutMcastClassBCirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 4, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientStatsOutMcastClassBCirOctets.setReference('IEEE 802.17 Subclause 7.2.5, fromClientMcastClassBCirBytes')
if mibBuilder.loadTexts: rprClientStatsOutMcastClassBCirOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientStatsOutMcastClassBCirOctets.setDescription('The number of client to MAC classB CIR multicast and broadcast octets.')
rprClientStatsOutMcastClassBEirFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 4, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientStatsOutMcastClassBEirFrames.setReference('IEEE 802.17 Subclause 7.2.5, fromClientMcastClassBEirFrames')
if mibBuilder.loadTexts: rprClientStatsOutMcastClassBEirFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientStatsOutMcastClassBEirFrames.setDescription('The number of client to MAC classB EIR multicast and broadcast frames.')
rprClientStatsOutMcastClassBEirOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 4, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientStatsOutMcastClassBEirOctets.setReference('IEEE 802.17 Subclause 7.2.5, fromClientMcastClassBEirBytes')
if mibBuilder.loadTexts: rprClientStatsOutMcastClassBEirOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientStatsOutMcastClassBEirOctets.setDescription('The number of client to MAC classB EIR multicast and broadcast octets.')
rprClientStatsOutMcastClassCFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 4, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientStatsOutMcastClassCFrames.setReference('IEEE 802.17 Subclause 7.2.5, fromClientMcastClassCFrames')
if mibBuilder.loadTexts: rprClientStatsOutMcastClassCFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientStatsOutMcastClassCFrames.setDescription('The number of client to MAC classC multicast and broadcast frames.')
rprClientStatsOutMcastClassCOctets = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 4, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientStatsOutMcastClassCOctets.setReference('IEEE 802.17 Subclause 7.2.5, fromClientMcastClassCBytes')
if mibBuilder.loadTexts: rprClientStatsOutMcastClassCOctets.setStatus('current')
if mibBuilder.loadTexts: rprClientStatsOutMcastClassCOctets.setDescription('The number of client to MAC classC multicast and broadcast octets.')
rprClientStatsOutBcastFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 4, 4, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprClientStatsOutBcastFrames.setReference('IEEE 802.17 Subclause 7.2.5, fromClientBcastFrames')
if mibBuilder.loadTexts: rprClientStatsOutBcastFrames.setStatus('current')
if mibBuilder.loadTexts: rprClientStatsOutBcastFrames.setDescription('The number of client to MAC broadcast frames. This is used only when deriving the multicast and broadcast packet counters for the interface MIB.')
rprSpanErrorCountersCurrentTable = MibTable((1, 0, 8802, 17, 1, 1, 1, 5, 1), )
if mibBuilder.loadTexts: rprSpanErrorCountersCurrentTable.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorCountersCurrentTable.setDescription('The RPR Errors Current counters table. All attributes in this table are volatile, i.e. will be cleared on system reset.')
rprSpanErrorCountersCurrentEntry = MibTableRow((1, 0, 8802, 17, 1, 1, 1, 5, 1, 1), ).setIndexNames((0, "IEEE-802DOT17-RPR-MIB", "rprSpanErrorCurrentIfIndex"), (0, "IEEE-802DOT17-RPR-MIB", "rprSpanErrorCurrentSpan"))
if mibBuilder.loadTexts: rprSpanErrorCountersCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorCountersCurrentEntry.setDescription('Errors statistics for the current interval of a particular span of a particular RPR interface. The corresponding instance of rprIfTimeElapsed indicates the number of seconds which have elapsed so far in the current interval.')
rprSpanErrorCurrentIfIndex = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rprSpanErrorCurrentIfIndex.setReference('RFC 2863, ifIndex')
if mibBuilder.loadTexts: rprSpanErrorCurrentIfIndex.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorCurrentIfIndex.setDescription('The ifIndex of this RPR interface.')
rprSpanErrorCurrentSpan = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 1, 1, 2), RprSpan())
if mibBuilder.loadTexts: rprSpanErrorCurrentSpan.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorCurrentSpan.setDescription('An indication of the span of the interface for which this row contains information.')
rprSpanErrorCurrentTtlExpFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 1, 1, 3), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorCurrentTtlExpFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorCurrentTtlExpFrames.setDescription('The number of received (PHY to MAC) data frames that were dropped due to zero Time To Live (TTL).')
rprSpanErrorCurrentTooLongFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 1, 1, 4), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorCurrentTooLongFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorCurrentTooLongFrames.setDescription('The number of received (PHY to MAC) frames that exceed the maximum permitted frame size.')
rprSpanErrorCurrentTooShortFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 1, 1, 5), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorCurrentTooShortFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorCurrentTooShortFrames.setDescription('The number of received (PHY to MAC) frames shortest than the minimum permitted frame size.')
rprSpanErrorCurrentBadHecFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 1, 1, 6), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorCurrentBadHecFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorCurrentBadHecFrames.setDescription('The number of received (PHY to MAC) frames with HEC error.')
rprSpanErrorCurrentBadFcsFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 1, 1, 7), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorCurrentBadFcsFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorCurrentBadFcsFrames.setDescription('The number of received (PHY to MAC) data and control frames where the fcs value did not match the expected fcs value. This includes data frames passed to the client as a result of rprIfMacOperModes being not set to dropBadFcs.')
rprSpanErrorCurrentSelfSrcUcastFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 1, 1, 8), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorCurrentSelfSrcUcastFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorCurrentSelfSrcUcastFrames.setDescription('The number of received (PHY to MAC) unicast frames that were transmitted by the station itself i.e. the source MAC is equal to the interface MAC.')
rprSpanErrorCurrentPmdAbortFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 1, 1, 9), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorCurrentPmdAbortFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorCurrentPmdAbortFrames.setDescription('The number of received (PHY to MAC) frames that were aborted by the PMD.')
rprSpanErrorCurrentBadAddrFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 1, 1, 10), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorCurrentBadAddrFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorCurrentBadAddrFrames.setDescription('The number of received (PHY to MAC) frames with invalid SA value.')
rprSpanErrorCurrentBadParityFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 1, 1, 11), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorCurrentBadParityFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorCurrentBadParityFrames.setDescription('The number of received (PHY to MAC) frames parity value not matching the expected parity value')
rprSpanErrorCurrentContainedFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 1, 1, 12), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorCurrentContainedFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorCurrentContainedFrames.setDescription('The number of received (PHY to MAC) frames that were removed due to context containment')
rprSpanErrorCurrentScffErrors = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 1, 1, 13), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorCurrentScffErrors.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorCurrentScffErrors.setDescription('The number of received (PHY to MAC) errored SCFF, with bad parity, bad FCS, or both.')
rprSpanErrorCurrentErroredSeconds = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 1, 1, 14), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorCurrentErroredSeconds.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorCurrentErroredSeconds.setDescription('The number of errored seconds.')
rprSpanErrorCurrentSeverelyErroredSeconds = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 1, 1, 15), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorCurrentSeverelyErroredSeconds.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorCurrentSeverelyErroredSeconds.setDescription('The number of severely errored seconds.')
rprSpanErrorCurrentUnavailableSeconds = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 1, 1, 16), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorCurrentUnavailableSeconds.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorCurrentUnavailableSeconds.setDescription('The number of unavailable seconds.')
rprSpanErrorCountersIntervalTable = MibTable((1, 0, 8802, 17, 1, 1, 1, 5, 2), )
if mibBuilder.loadTexts: rprSpanErrorCountersIntervalTable.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorCountersIntervalTable.setDescription('The RPR Errors Interval counters table. All attributes in this table are volatile, i.e. will be cleared on system reset.')
rprSpanErrorCountersIntervalEntry = MibTableRow((1, 0, 8802, 17, 1, 1, 1, 5, 2, 1), ).setIndexNames((0, "IEEE-802DOT17-RPR-MIB", "rprSpanErrorIntervalIfIndex"), (0, "IEEE-802DOT17-RPR-MIB", "rprSpanErrorIntervalSpan"), (0, "IEEE-802DOT17-RPR-MIB", "rprSpanErrorIntervalNumber"))
if mibBuilder.loadTexts: rprSpanErrorCountersIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorCountersIntervalEntry.setDescription('Error statistics collected for a particular interval of a particular span of a particular RPR interface. The corresponding instance of rprIfValidIntervals indicates the number of intervals for which the set of statistics is available.')
rprSpanErrorIntervalIfIndex = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rprSpanErrorIntervalIfIndex.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorIntervalIfIndex.setDescription('The ifIndex of this RPR interface.')
rprSpanErrorIntervalSpan = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 2, 1, 2), RprSpan())
if mibBuilder.loadTexts: rprSpanErrorIntervalSpan.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorIntervalSpan.setDescription('An indication of the span of the interface for which this row contains information.')
rprSpanErrorIntervalNumber = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: rprSpanErrorIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorIntervalNumber.setDescription('A number between 1 and 96, which identifies the interval for which the set of statistics is available. The interval identified by 1 is the most recently completed 15 minute interval, and interval identified by N is the interval immediately preceding the one identified by N-1.')
rprSpanErrorIntervalValidData = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorIntervalValidData.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorIntervalValidData.setDescription('This variable indicates if the data for this interval is valid. It will be valid if it contains data for 900 seconds plus or minus 10 seconds.')
rprSpanErrorIntervalTimeElapsed = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorIntervalTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorIntervalTimeElapsed.setDescription("The duration of a particular interval in seconds. If, for some reason, such as an adjustment in the system's time-of-day clock, the current interval exceeds the maximum value, the agent will return the maximum value.")
rprSpanErrorIntervalTtlExpFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 2, 1, 6), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorIntervalTtlExpFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorIntervalTtlExpFrames.setDescription('The number of received (PHY to MAC) frames that were dropped due to zero Time To Live (TTL) in a particular interval in the past 24 hours')
rprSpanErrorIntervalTooLongFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 2, 1, 7), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorIntervalTooLongFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorIntervalTooLongFrames.setDescription('The number of received (PHY to MAC) frames that exceed the maximum permitted frame size in a particular interval in the past 24 hours')
rprSpanErrorIntervalTooShortFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 2, 1, 8), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorIntervalTooShortFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorIntervalTooShortFrames.setDescription('The number of received (PHY to MAC) frames shortest than the minimum permitted frame size in a particular interval in the past 24 hours.')
rprSpanErrorIntervalBadHecFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 2, 1, 9), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorIntervalBadHecFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorIntervalBadHecFrames.setDescription('The number of received (PHY to MAC) frames with HEC error in a particular interval in the past 24 hours')
rprSpanErrorIntervalBadFcsFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 2, 1, 10), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorIntervalBadFcsFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorIntervalBadFcsFrames.setDescription('The number of received (PHY to MAC) data and control frames where the fcs value did not match the expected fcs value. This includes data frames passed to the client as a result of rprIfMacOperModes being not set to dropBadFcs.')
rprSpanErrorIntervalSelfSrcUcastFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 2, 1, 11), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorIntervalSelfSrcUcastFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorIntervalSelfSrcUcastFrames.setDescription('The number of received (PHY to MAC) unicast frames that were transmitted by the station itself i.e. the source MAC is equal to the interface MAC, in a particular interval in the past 24 hours')
rprSpanErrorIntervalPmdAbortFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 2, 1, 12), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorIntervalPmdAbortFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorIntervalPmdAbortFrames.setDescription('The number of received (PHY to MAC) unicast frames that were aborted by the PMD layer, in a particular interval in the past 24 hours')
rprSpanErrorIntervalBadAddrFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 2, 1, 13), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorIntervalBadAddrFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorIntervalBadAddrFrames.setDescription('The number of received (PHY to MAC) frames with invalid SA value.')
rprSpanErrorIntervalBadParityFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 2, 1, 14), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorIntervalBadParityFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorIntervalBadParityFrames.setDescription('The number of received (PHY to MAC) frames parity value not matching the expected parity value')
rprSpanErrorIntervalContainedFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 2, 1, 15), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorIntervalContainedFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorIntervalContainedFrames.setDescription('The number of received (PHY to MAC) frames that were removed due to context containment')
rprSpanErrorIntervalScffErrors = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 2, 1, 16), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorIntervalScffErrors.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorIntervalScffErrors.setDescription('The number of received (PHY to MAC) errored SCFF, with bad parity, bad FCS, or both.')
rprSpanErrorIntervalErroredSeconds = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 2, 1, 17), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorIntervalErroredSeconds.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorIntervalErroredSeconds.setDescription('The number of errored seconds.')
rprSpanErrorIntervalSeverelyErroredSeconds = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 2, 1, 18), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorIntervalSeverelyErroredSeconds.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorIntervalSeverelyErroredSeconds.setDescription('The number of severely errored seconds.')
rprSpanErrorIntervalUnavailableSeconds = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 2, 1, 19), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorIntervalUnavailableSeconds.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorIntervalUnavailableSeconds.setDescription('The number of unavailable seconds.')
rprSpanErrorCountersDayTable = MibTable((1, 0, 8802, 17, 1, 1, 1, 5, 3), )
if mibBuilder.loadTexts: rprSpanErrorCountersDayTable.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorCountersDayTable.setDescription('The RPR Mac Error Day Table contains the cumulative sum of the various statistics for the 24 hour period preceding the current interval. All attributes in this table are volatile, i.e. will be cleared on system reset.')
rprSpanErrorCountersDayEntry = MibTableRow((1, 0, 8802, 17, 1, 1, 1, 5, 3, 1), ).setIndexNames((0, "IEEE-802DOT17-RPR-MIB", "rprSpanErrorDayIfIndex"), (0, "IEEE-802DOT17-RPR-MIB", "rprSpanErrorDaySpan"))
if mibBuilder.loadTexts: rprSpanErrorCountersDayEntry.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorCountersDayEntry.setDescription('An entry in the RPR Error Day table.')
rprSpanErrorDayIfIndex = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rprSpanErrorDayIfIndex.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorDayIfIndex.setDescription('The ifIndex of this RPR interface.')
rprSpanErrorDaySpan = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 3, 1, 2), RprSpan())
if mibBuilder.loadTexts: rprSpanErrorDaySpan.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorDaySpan.setDescription('An indication of the span of the interface for which this row contains information.')
rprSpanErrorDayTtlExpFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 3, 1, 3), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorDayTtlExpFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorDayTtlExpFrames.setDescription('The number of received (PHY to MAC) frames that were dropped due to zero Time To Live (TTL).')
rprSpanErrorDayTooLongFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 3, 1, 4), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorDayTooLongFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorDayTooLongFrames.setDescription('The number of received (PHY to MAC) frames that exceed the maximum permitted frame size.')
rprSpanErrorDayTooShortFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 3, 1, 5), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorDayTooShortFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorDayTooShortFrames.setDescription('The number of received (PHY to MAC) frames shortest than the minimum permitted frame size.')
rprSpanErrorDayBadHecFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 3, 1, 6), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorDayBadHecFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorDayBadHecFrames.setDescription('The number of received (PHY to MAC) frames with HEC error.')
rprSpanErrorDayBadFcsFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 3, 1, 7), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorDayBadFcsFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorDayBadFcsFrames.setDescription('The number of received (PHY to MAC) data and control frames where the fcs value did not match the expected fcs value. This includes data frames passed to the client as a result of rprIfMacOperModes being not set to dropBadFcs.')
rprSpanErrorDaySelfSrcUcastFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 3, 1, 8), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorDaySelfSrcUcastFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorDaySelfSrcUcastFrames.setDescription('The number of received (PHY to MAC) unicast frames that were transmitted by the station itself i.e. the source MAC is equal to the interface MAC.')
rprSpanErrorDayPmdAbortFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 3, 1, 9), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorDayPmdAbortFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorDayPmdAbortFrames.setDescription('The number of received (PHY to MAC) frames that were aborted by the PMD')
rprSpanErrorDayBadAddrFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 3, 1, 10), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorDayBadAddrFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorDayBadAddrFrames.setDescription('The number of received (PHY to MAC) frames with invalid SA value.')
rprSpanErrorDayBadParityFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 3, 1, 11), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorDayBadParityFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorDayBadParityFrames.setDescription('The number of received (PHY to MAC) frames parity value not matching the expected parity value')
rprSpanErrorDayContainedFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 3, 1, 12), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorDayContainedFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorDayContainedFrames.setDescription('The number of received (PHY to MAC) frames that were removed due to context containment')
rprSpanErrorDayScffErrors = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 3, 1, 13), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorDayScffErrors.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorDayScffErrors.setDescription('The number of received (PHY to MAC) errored SCFF, with bad parity, bad FCS, or both.')
rprSpanErrorDayErroredSeconds = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 3, 1, 14), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorDayErroredSeconds.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorDayErroredSeconds.setDescription('The number of errored seconds.')
rprSpanErrorDaySeverelyErroredSeconds = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 3, 1, 15), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorDaySeverelyErroredSeconds.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorDaySeverelyErroredSeconds.setDescription('The number of severely errored seconds.')
rprSpanErrorDayUnavailableSeconds = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 3, 1, 16), HCPerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorDayUnavailableSeconds.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorDayUnavailableSeconds.setDescription('The number of unavailable seconds.')
rprSpanErrorCountersStatsTable = MibTable((1, 0, 8802, 17, 1, 1, 1, 5, 4), )
if mibBuilder.loadTexts: rprSpanErrorCountersStatsTable.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorCountersStatsTable.setDescription('The RPR Errors total counters table. The DiscontinuityTime for this table is indicated by ifCounterDiscontinuityTime defined in ifXTable. All attributes in this table are volatile, i.e. will be cleared on system reset.')
rprSpanErrorCountersStatsEntry = MibTableRow((1, 0, 8802, 17, 1, 1, 1, 5, 4, 1), ).setIndexNames((0, "IEEE-802DOT17-RPR-MIB", "rprSpanErrorStatsIfIndex"), (0, "IEEE-802DOT17-RPR-MIB", "rprSpanErrorStatsSpan"))
if mibBuilder.loadTexts: rprSpanErrorCountersStatsEntry.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorCountersStatsEntry.setDescription('An entry in the span error counter table.')
rprSpanErrorStatsIfIndex = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rprSpanErrorStatsIfIndex.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorStatsIfIndex.setDescription('The ifIndex of this RPR interface.')
rprSpanErrorStatsSpan = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 4, 1, 2), RprSpan())
if mibBuilder.loadTexts: rprSpanErrorStatsSpan.setReference('IEEE 802.17 Subclause 7.2.2, myRi')
if mibBuilder.loadTexts: rprSpanErrorStatsSpan.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorStatsSpan.setDescription('An indication of the span of the interface for which this row contains information.')
rprSpanErrorStatsTtlExpFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorStatsTtlExpFrames.setReference('IEEE 802.17 Subclause 7.6.3.6.2, ttlExpiredFrames')
if mibBuilder.loadTexts: rprSpanErrorStatsTtlExpFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorStatsTtlExpFrames.setDescription('The number of received (PHY to MAC) frames that were dropped due to zero Time To Live (TTL).')
rprSpanErrorStatsTooLongFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorStatsTooLongFrames.setReference('IEEE 802.17 Subclause 7.6.3.6.2, tooLongFrames')
if mibBuilder.loadTexts: rprSpanErrorStatsTooLongFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorStatsTooLongFrames.setDescription('The number of received (PHY to MAC) frames that exceed the maximum permitted frame size.')
rprSpanErrorStatsTooShortFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorStatsTooShortFrames.setReference('IEEE 802.17 Subclause 7.6.3.6.2, tooShortFrames')
if mibBuilder.loadTexts: rprSpanErrorStatsTooShortFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorStatsTooShortFrames.setDescription('The number of received (PHY to MAC) frames shortest than the minimum permitted frame size.')
rprSpanErrorStatsBadHecFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorStatsBadHecFrames.setReference('IEEE 802.17 Subclause 7.6.3.6.2, badHecFrames')
if mibBuilder.loadTexts: rprSpanErrorStatsBadHecFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorStatsBadHecFrames.setDescription('The number of received (PHY to MAC) frames with HEC error.')
rprSpanErrorStatsBadFcsFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorStatsBadFcsFrames.setReference('IEEE 802.17 Subclause 7.6.3.6.2, badFcsFrames')
if mibBuilder.loadTexts: rprSpanErrorStatsBadFcsFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorStatsBadFcsFrames.setDescription('The number of received (PHY to MAC) data and control frames where the fcs value did not match the expected fcs value. This includes data frames passed to the client as a result of rprIfMacOperModes being not set to dropBadFcs.')
rprSpanErrorStatsSelfSrcUcastFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorStatsSelfSrcUcastFrames.setReference('IEEE 802.17 Subclause 7.6.3.8.2, selfSourcedFrames')
if mibBuilder.loadTexts: rprSpanErrorStatsSelfSrcUcastFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorStatsSelfSrcUcastFrames.setDescription('The number of received (PHY to MAC) unicast frames that were transmitted by the station itself i.e. the source MAC is equal to the interface MAC.')
rprSpanErrorStatsPmdAbortFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorStatsPmdAbortFrames.setReference('IEEE 802.17 Subclause 8.2.2, STATUS')
if mibBuilder.loadTexts: rprSpanErrorStatsPmdAbortFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorStatsPmdAbortFrames.setDescription('The number of received (PHY to MAC) frames that were aborted by the PMD')
rprSpanErrorStatsBadAddrFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorStatsBadAddrFrames.setReference('IEEE 802.17 Subclause 7.6.3.6.2, badAddressFrames')
if mibBuilder.loadTexts: rprSpanErrorStatsBadAddrFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorStatsBadAddrFrames.setDescription('The number of received (PHY to MAC) frames with invalid SA value.')
rprSpanErrorStatsBadParityFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorStatsBadParityFrames.setReference('IEEE 802.17 Subclause 7.6.3.6.2, badParityFrames')
if mibBuilder.loadTexts: rprSpanErrorStatsBadParityFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorStatsBadParityFrames.setDescription('The number of received (PHY to MAC) frames parity value not matching the expected parity value')
rprSpanErrorStatsContainedFrames = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorStatsContainedFrames.setReference('IEEE 802.17 Subclause , containedFrames')
if mibBuilder.loadTexts: rprSpanErrorStatsContainedFrames.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorStatsContainedFrames.setDescription('The number of received (PHY to MAC) frames that were removed due to context containment')
rprSpanErrorStatsScffErrors = MibTableColumn((1, 0, 8802, 17, 1, 1, 1, 5, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rprSpanErrorStatsScffErrors.setReference('IEEE 802.17 Subclause 12.5.1.2, scffErrors')
if mibBuilder.loadTexts: rprSpanErrorStatsScffErrors.setStatus('current')
if mibBuilder.loadTexts: rprSpanErrorStatsScffErrors.setDescription('The number of received (PHY to MAC) errored SCFF, with bad parity, bad FCS, or both.')
rprGroups = MibIdentifier((1, 0, 8802, 17, 1, 1, 2, 1))
rprCompliances = MibIdentifier((1, 0, 8802, 17, 1, 1, 2, 2))
rprModuleTotalStatsCompliance = ModuleCompliance((1, 0, 8802, 17, 1, 1, 2, 2, 1)).setObjects(("IEEE-802DOT17-RPR-MIB", "rprIfGroup"), ("IEEE-802DOT17-RPR-MIB", "rprSpanGroup"), ("IEEE-802DOT17-RPR-MIB", "rprSpanProtectionGroup"), ("IEEE-802DOT17-RPR-MIB", "rprTopoGroup"), ("IEEE-802DOT17-RPR-MIB", "rprFairnessGroup"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsGroup"), ("IEEE-802DOT17-RPR-MIB", "rprClientStatsGroup"), ("IEEE-802DOT17-RPR-MIB", "rprErrorStatsGroup"), ("IEEE-802DOT17-RPR-MIB", "rprIfGroupOpt"), ("IEEE-802DOT17-RPR-MIB", "rprSpanGroupOpt"), ("IEEE-802DOT17-RPR-MIB", "rprIfStatsControlGroup"), ("IEEE-802DOT17-RPR-MIB", "rprFairnessGroupOpt"), ("IEEE-802DOT17-RPR-MIB", "rprOamGroup"), ("IEEE-802DOT17-RPR-MIB", "rprIfChangeSummaryGroup"), ("IEEE-802DOT17-RPR-MIB", "rprSpanCurrentGroup"), ("IEEE-802DOT17-RPR-MIB", "rprSpanIntervalGroup"), ("IEEE-802DOT17-RPR-MIB", "rprSpanDayGroup"), ("IEEE-802DOT17-RPR-MIB", "rprClientCurrentGroup"), ("IEEE-802DOT17-RPR-MIB", "rprClientIntervalGroup"), ("IEEE-802DOT17-RPR-MIB", "rprClientDayGroup"), ("IEEE-802DOT17-RPR-MIB", "rprErrorCurrentGroup"), ("IEEE-802DOT17-RPR-MIB", "rprErrorIntervalGroup"), ("IEEE-802DOT17-RPR-MIB", "rprErrorDayGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rprModuleTotalStatsCompliance = rprModuleTotalStatsCompliance.setStatus('current')
if mibBuilder.loadTexts: rprModuleTotalStatsCompliance.setDescription('The compliance statement for agent that support RPR operation with total statistics collections.')
rprIfGroup = ObjectGroup((1, 0, 8802, 17, 1, 1, 2, 1, 1)).setObjects(("IEEE-802DOT17-RPR-MIB", "rprIfStationsOnRing"), ("IEEE-802DOT17-RPR-MIB", "rprIfReversionMode"), ("IEEE-802DOT17-RPR-MIB", "rprIfProtectionWTR"), ("IEEE-802DOT17-RPR-MIB", "rprIfProtectionFastTimer"), ("IEEE-802DOT17-RPR-MIB", "rprIfProtectionSlowTimer"), ("IEEE-802DOT17-RPR-MIB", "rprIfAtdTimer"), ("IEEE-802DOT17-RPR-MIB", "rprIfKeepaliveTimeout"), ("IEEE-802DOT17-RPR-MIB", "rprIfFairnessAggressive"), ("IEEE-802DOT17-RPR-MIB", "rprIfPtqSize"), ("IEEE-802DOT17-RPR-MIB", "rprIfStqSize"), ("IEEE-802DOT17-RPR-MIB", "rprIfSTQFullThreshold"), ("IEEE-802DOT17-RPR-MIB", "rprIfIdleThreshold"), ("IEEE-802DOT17-RPR-MIB", "rprIfSesThreshold"), ("IEEE-802DOT17-RPR-MIB", "rprIfWrapConfig"), ("IEEE-802DOT17-RPR-MIB", "rprIfJumboFramePreferred"), ("IEEE-802DOT17-RPR-MIB", "rprIfMacOperModes"), ("IEEE-802DOT17-RPR-MIB", "rprIfRingOperModes"), ("IEEE-802DOT17-RPR-MIB", "rprIfCurrentStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rprIfGroup = rprIfGroup.setStatus('current')
if mibBuilder.loadTexts: rprIfGroup.setDescription('Collection of objects needed for RPR MAC configuration.')
rprIfGroupOpt = ObjectGroup((1, 0, 8802, 17, 1, 1, 2, 1, 2)).setObjects(("IEEE-802DOT17-RPR-MIB", "rprIfLastChange"), ("IEEE-802DOT17-RPR-MIB", "rprIfChanges"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rprIfGroupOpt = rprIfGroupOpt.setStatus('current')
if mibBuilder.loadTexts: rprIfGroupOpt.setDescription('Collection of objects for RPR MAC.')
rprIfStatsControlGroup = ObjectGroup((1, 0, 8802, 17, 1, 1, 2, 1, 3)).setObjects(("IEEE-802DOT17-RPR-MIB", "rprIfStatsControlPeriodClear"), ("IEEE-802DOT17-RPR-MIB", "rprIfStatsControlCountPointClear"), ("IEEE-802DOT17-RPR-MIB", "rprIfStatsControlIntervalClear"), ("IEEE-802DOT17-RPR-MIB", "rprIfStatsControlCommitClear"), ("IEEE-802DOT17-RPR-MIB", "rprIfStatsControlTimeElapsed"), ("IEEE-802DOT17-RPR-MIB", "rprIfStatsControlValidIntervals"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rprIfStatsControlGroup = rprIfStatsControlGroup.setStatus('current')
if mibBuilder.loadTexts: rprIfStatsControlGroup.setDescription('Collection of objects needed for RPR MAC statistics management.')
rprSpanGroup = ObjectGroup((1, 0, 8802, 17, 1, 1, 2, 1, 4)).setObjects(("IEEE-802DOT17-RPR-MIB", "rprSpanLowerLayerIfIndex"), ("IEEE-802DOT17-RPR-MIB", "rprSpanTotalRingletReservedRate"), ("IEEE-802DOT17-RPR-MIB", "rprSpanCurrentStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rprSpanGroup = rprSpanGroup.setStatus('current')
if mibBuilder.loadTexts: rprSpanGroup.setDescription('Collection of objects needed for RPR Span configuration.')
rprSpanGroupOpt = ObjectGroup((1, 0, 8802, 17, 1, 1, 2, 1, 5)).setObjects(("IEEE-802DOT17-RPR-MIB", "rprSpanLastChange"), ("IEEE-802DOT17-RPR-MIB", "rprSpanChanges"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rprSpanGroupOpt = rprSpanGroupOpt.setStatus('current')
if mibBuilder.loadTexts: rprSpanGroupOpt.setDescription('Collection of objects for RPR Span.')
rprSpanProtectionGroup = ObjectGroup((1, 0, 8802, 17, 1, 1, 2, 1, 6)).setObjects(("IEEE-802DOT17-RPR-MIB", "rprSpanProtectionNeighborValid"), ("IEEE-802DOT17-RPR-MIB", "rprSpanProtectionHoldOffTimer"), ("IEEE-802DOT17-RPR-MIB", "rprSpanProtectionCommand"), ("IEEE-802DOT17-RPR-MIB", "rprSpanProtectionCount"), ("IEEE-802DOT17-RPR-MIB", "rprSpanProtectionDuration"), ("IEEE-802DOT17-RPR-MIB", "rprSpanProtectionLastActivationTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rprSpanProtectionGroup = rprSpanProtectionGroup.setStatus('current')
if mibBuilder.loadTexts: rprSpanProtectionGroup.setDescription('Collection of objects needed for RPR Span Protection monitoring.')
rprTopoGroup = ObjectGroup((1, 0, 8802, 17, 1, 1, 2, 1, 7)).setObjects(("IEEE-802DOT17-RPR-MIB", "rprTopoImageSecMacAddress1"), ("IEEE-802DOT17-RPR-MIB", "rprTopoImageSecMacAddress2"), ("IEEE-802DOT17-RPR-MIB", "rprTopoImageStationIfIndex"), ("IEEE-802DOT17-RPR-MIB", "rprTopoImageStationName"), ("IEEE-802DOT17-RPR-MIB", "rprTopoImageInetAddressType"), ("IEEE-802DOT17-RPR-MIB", "rprTopoImageInetAddress"), ("IEEE-802DOT17-RPR-MIB", "rprTopoImageCapability"), ("IEEE-802DOT17-RPR-MIB", "rprTopoImageRinglet0Hops"), ("IEEE-802DOT17-RPR-MIB", "rprTopoImageRinglet0ReservedRate"), ("IEEE-802DOT17-RPR-MIB", "rprTopoImageRinglet1Hops"), ("IEEE-802DOT17-RPR-MIB", "rprTopoImageRinglet1ReservedRate"), ("IEEE-802DOT17-RPR-MIB", "rprTopoImageWestProtectionStatus"), ("IEEE-802DOT17-RPR-MIB", "rprTopoImageWestWeight"), ("IEEE-802DOT17-RPR-MIB", "rprTopoImageEastProtectionStatus"), ("IEEE-802DOT17-RPR-MIB", "rprTopoImageEastWeight"), ("IEEE-802DOT17-RPR-MIB", "rprTopoImageStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rprTopoGroup = rprTopoGroup.setStatus('current')
if mibBuilder.loadTexts: rprTopoGroup.setDescription('Collection of objects needed for RPR Topology discovery.')
rprFairnessGroup = ObjectGroup((1, 0, 8802, 17, 1, 1, 2, 1, 8)).setObjects(("IEEE-802DOT17-RPR-MIB", "rprFairnessRingletWeight"), ("IEEE-802DOT17-RPR-MIB", "rprFairnessReservedRate"), ("IEEE-802DOT17-RPR-MIB", "rprFairnessMaxAllowed"), ("IEEE-802DOT17-RPR-MIB", "rprFairnessAgeCoef"), ("IEEE-802DOT17-RPR-MIB", "rprFairnessRampCoef"), ("IEEE-802DOT17-RPR-MIB", "rprFairnessLpCoef"), ("IEEE-802DOT17-RPR-MIB", "rprFairnessAdvertisementRatio"), ("IEEE-802DOT17-RPR-MIB", "rprFairnessMcffReportCoef"), ("IEEE-802DOT17-RPR-MIB", "rprFairnessActiveWeightsCoef"), ("IEEE-802DOT17-RPR-MIB", "rprFairnessSTQHighThreshold"), ("IEEE-802DOT17-RPR-MIB", "rprFairnessSTQMedThreshold"), ("IEEE-802DOT17-RPR-MIB", "rprFairnessSTQLowThreshold"), ("IEEE-802DOT17-RPR-MIB", "rprFairnessRateHighThreshold"), ("IEEE-802DOT17-RPR-MIB", "rprFairnessRateLowThreshold"), ("IEEE-802DOT17-RPR-MIB", "rprFairnessResetWaterMarks"), ("IEEE-802DOT17-RPR-MIB", "rprFairnessSTQHighWaterMark"), ("IEEE-802DOT17-RPR-MIB", "rprFairnessSTQLowWaterMark"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rprFairnessGroup = rprFairnessGroup.setStatus('current')
if mibBuilder.loadTexts: rprFairnessGroup.setDescription('Collection of objects needed for RPR Fairness configuration.')
rprFairnessGroupOpt = ObjectGroup((1, 0, 8802, 17, 1, 1, 2, 1, 9)).setObjects(("IEEE-802DOT17-RPR-MIB", "rprFairnessLastChange"), ("IEEE-802DOT17-RPR-MIB", "rprFairnessChanges"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rprFairnessGroupOpt = rprFairnessGroupOpt.setStatus('current')
if mibBuilder.loadTexts: rprFairnessGroupOpt.setDescription('Collection of objects for RPR Fairness.')
rprOamGroup = ObjectGroup((1, 0, 8802, 17, 1, 1, 2, 1, 10)).setObjects(("IEEE-802DOT17-RPR-MIB", "rprOamActionType"), ("IEEE-802DOT17-RPR-MIB", "rprOamDestAddress"), ("IEEE-802DOT17-RPR-MIB", "rprOamRequestRinglet"), ("IEEE-802DOT17-RPR-MIB", "rprOamResponseRinglet"), ("IEEE-802DOT17-RPR-MIB", "rprOamClassOfService"), ("IEEE-802DOT17-RPR-MIB", "rprOamUserData"), ("IEEE-802DOT17-RPR-MIB", "rprOamProtected"), ("IEEE-802DOT17-RPR-MIB", "rprOamRequestCount"), ("IEEE-802DOT17-RPR-MIB", "rprOamTimeout"), ("IEEE-802DOT17-RPR-MIB", "rprOamControl"), ("IEEE-802DOT17-RPR-MIB", "rprOamResponseCount"), ("IEEE-802DOT17-RPR-MIB", "rprOamAvResponseTime"), ("IEEE-802DOT17-RPR-MIB", "rprOamResponseStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rprOamGroup = rprOamGroup.setStatus('current')
if mibBuilder.loadTexts: rprOamGroup.setDescription('Collection of objects needed for RPR OAM configuration.')
rprIfChangeSummaryGroup = ObjectGroup((1, 0, 8802, 17, 1, 1, 2, 1, 11)).setObjects(("IEEE-802DOT17-RPR-MIB", "rprIfChangeSummaryNumInterfaces"), ("IEEE-802DOT17-RPR-MIB", "rprIfChangeSummaryIfLastChange"), ("IEEE-802DOT17-RPR-MIB", "rprIfChangeSummaryIfChanges"), ("IEEE-802DOT17-RPR-MIB", "rprIfChangeSummarySpanLastChange"), ("IEEE-802DOT17-RPR-MIB", "rprIfChangeSummarySpanChanges"), ("IEEE-802DOT17-RPR-MIB", "rprIfChangeSummaryFairnessLastChange"), ("IEEE-802DOT17-RPR-MIB", "rprIfChangeSummaryFairnessChanges"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rprIfChangeSummaryGroup = rprIfChangeSummaryGroup.setStatus('current')
if mibBuilder.loadTexts: rprIfChangeSummaryGroup.setDescription('Collection of objects summarizes changes on the RPR interfaces.')
rprSpanCurrentGroup = ObjectGroup((1, 0, 8802, 17, 1, 1, 2, 1, 12)).setObjects(("IEEE-802DOT17-RPR-MIB", "rprSpanCurrentInUcastClassAFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanCurrentInUcastClassAOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanCurrentInUcastClassBCirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanCurrentInUcastClassBCirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanCurrentInUcastClassBEirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanCurrentInUcastClassBEirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanCurrentInUcastClassCFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanCurrentInUcastClassCOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanCurrentInMcastClassAFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanCurrentInMcastClassAOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanCurrentInMcastClassBCirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanCurrentInMcastClassBCirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanCurrentInMcastClassBEirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanCurrentInMcastClassBEirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanCurrentInMcastClassCFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanCurrentInMcastClassCOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanCurrentOutUcastClassAFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanCurrentOutUcastClassAOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanCurrentOutUcastClassBCirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanCurrentOutUcastClassBCirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanCurrentOutUcastClassBEirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanCurrentOutUcastClassBEirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanCurrentOutUcastClassCFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanCurrentOutUcastClassCOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanCurrentOutMcastClassAFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanCurrentOutMcastClassAOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanCurrentOutMcastClassBCirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanCurrentOutMcastClassBCirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanCurrentOutMcastClassBEirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanCurrentOutMcastClassBEirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanCurrentOutMcastClassCFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanCurrentOutMcastClassCOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rprSpanCurrentGroup = rprSpanCurrentGroup.setStatus('current')
if mibBuilder.loadTexts: rprSpanCurrentGroup.setDescription('Collection of objects counting MAC span current statistics.')
rprSpanIntervalGroup = ObjectGroup((1, 0, 8802, 17, 1, 1, 2, 1, 13)).setObjects(("IEEE-802DOT17-RPR-MIB", "rprSpanIntervalValidData"), ("IEEE-802DOT17-RPR-MIB", "rprSpanIntervalTimeElapsed"), ("IEEE-802DOT17-RPR-MIB", "rprSpanIntervalStartTime"), ("IEEE-802DOT17-RPR-MIB", "rprSpanIntervalInUcastClassAFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanIntervalInUcastClassAOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanIntervalInUcastClassBCirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanIntervalInUcastClassBCirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanIntervalInUcastClassBEirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanIntervalInUcastClassBEirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanIntervalInUcastClassCFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanIntervalInUcastClassCOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanIntervalInMcastClassAFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanIntervalInMcastClassAOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanIntervalInMcastClassBCirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanIntervalInMcastClassBCirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanIntervalInMcastClassBEirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanIntervalInMcastClassBEirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanIntervalInMcastClassCFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanIntervalInMcastClassCOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanIntervalOutUcastClassAFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanIntervalOutUcastClassAOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanIntervalOutUcastClassBCirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanIntervalOutUcastClassBCirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanIntervalOutUcastClassBEirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanIntervalOutUcastClassBEirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanIntervalOutUcastClassCFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanIntervalOutUcastClassCOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanIntervalOutMcastClassAFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanIntervalOutMcastClassAOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanIntervalOutMcastClassBCirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanIntervalOutMcastClassBCirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanIntervalOutMcastClassBEirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanIntervalOutMcastClassBEirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanIntervalOutMcastClassCFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanIntervalOutMcastClassCOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rprSpanIntervalGroup = rprSpanIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: rprSpanIntervalGroup.setDescription('Collection of objects counting MAC span intervals statistics.')
rprSpanDayGroup = ObjectGroup((1, 0, 8802, 17, 1, 1, 2, 1, 14)).setObjects(("IEEE-802DOT17-RPR-MIB", "rprSpanDayInUcastClassAFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanDayInUcastClassAOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanDayInUcastClassBCirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanDayInUcastClassBCirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanDayInUcastClassBEirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanDayInUcastClassBEirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanDayInUcastClassCFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanDayInUcastClassCOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanDayInMcastClassAFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanDayInMcastClassAOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanDayInMcastClassBCirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanDayInMcastClassBCirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanDayInMcastClassBEirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanDayInMcastClassBEirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanDayInMcastClassCFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanDayInMcastClassCOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanDayOutUcastClassAFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanDayOutUcastClassAOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanDayOutUcastClassBCirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanDayOutUcastClassBCirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanDayOutUcastClassBEirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanDayOutUcastClassBEirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanDayOutUcastClassCFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanDayOutUcastClassCOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanDayOutMcastClassAFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanDayOutMcastClassAOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanDayOutMcastClassBCirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanDayOutMcastClassBCirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanDayOutMcastClassBEirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanDayOutMcastClassBEirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanDayOutMcastClassCFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanDayOutMcastClassCOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rprSpanDayGroup = rprSpanDayGroup.setStatus('current')
if mibBuilder.loadTexts: rprSpanDayGroup.setDescription('Collection of objects counting MAC span 24 hours statistics.')
rprSpanStatsGroup = ObjectGroup((1, 0, 8802, 17, 1, 1, 2, 1, 15)).setObjects(("IEEE-802DOT17-RPR-MIB", "rprSpanStatsInUcastClassAFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsInUcastClassAOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsInUcastClassBCirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsInUcastClassBCirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsInUcastClassBEirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsInUcastClassBEirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsInUcastClassCFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsInUcastClassCOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsInMcastClassAFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsInMcastClassAOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsInMcastClassBCirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsInMcastClassBCirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsInMcastClassBEirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsInMcastClassBEirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsInMcastClassCFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsInMcastClassCOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsInCtrlFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsInOamEchoFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsInOamFlushFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsInOamOrgFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsInTopoAtdFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsInTopoChkSumFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsInTopoTpFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsOutUcastClassAFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsOutUcastClassAOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsOutUcastClassBCirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsOutUcastClassBCirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsOutUcastClassBEirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsOutUcastClassBEirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsOutUcastClassCFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsOutUcastClassCOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsOutMcastClassAFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsOutMcastClassAOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsOutMcastClassBCirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsOutMcastClassBCirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsOutMcastClassBEirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsOutMcastClassBEirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsOutMcastClassCFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsOutMcastClassCOctets"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsOutCtrlFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsOutOamEchoFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsOutOamFlushFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsOutOamOrgFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsOutTopoAtdFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsOutTopoChkSumFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanStatsOutTopoTpFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rprSpanStatsGroup = rprSpanStatsGroup.setStatus('current')
if mibBuilder.loadTexts: rprSpanStatsGroup.setDescription('Collection of objects counting MAC span total statistics.')
rprClientCurrentGroup = ObjectGroup((1, 0, 8802, 17, 1, 1, 2, 1, 16)).setObjects(("IEEE-802DOT17-RPR-MIB", "rprClientCurrentInUcastClassAFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientCurrentInUcastClassAOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientCurrentInUcastClassBCirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientCurrentInUcastClassBCirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientCurrentInUcastClassBEirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientCurrentInUcastClassBEirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientCurrentInUcastClassCFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientCurrentInUcastClassCOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientCurrentInMcastClassAFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientCurrentInMcastClassAOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientCurrentInMcastClassBCirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientCurrentInMcastClassBCirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientCurrentInMcastClassBEirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientCurrentInMcastClassBEirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientCurrentInMcastClassCFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientCurrentInMcastClassCOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientCurrentOutUcastClassAFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientCurrentOutUcastClassAOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientCurrentOutUcastClassBCirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientCurrentOutUcastClassBCirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientCurrentOutUcastClassBEirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientCurrentOutUcastClassBEirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientCurrentOutUcastClassCFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientCurrentOutUcastClassCOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientCurrentOutMcastClassAFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientCurrentOutMcastClassAOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientCurrentOutMcastClassBCirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientCurrentOutMcastClassBCirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientCurrentOutMcastClassBEirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientCurrentOutMcastClassBEirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientCurrentOutMcastClassCFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientCurrentOutMcastClassCOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rprClientCurrentGroup = rprClientCurrentGroup.setStatus('current')
if mibBuilder.loadTexts: rprClientCurrentGroup.setDescription('Collection of objects counting MAC client interface current statistics.')
rprClientIntervalGroup = ObjectGroup((1, 0, 8802, 17, 1, 1, 2, 1, 17)).setObjects(("IEEE-802DOT17-RPR-MIB", "rprClientIntervalValidData"), ("IEEE-802DOT17-RPR-MIB", "rprClientIntervalTimeElapsed"), ("IEEE-802DOT17-RPR-MIB", "rprClientIntervalInUcastClassAFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientIntervalInUcastClassAOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientIntervalInUcastClassBCirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientIntervalInUcastClassBCirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientIntervalInUcastClassBEirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientIntervalInUcastClassBEirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientIntervalInUcastClassCFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientIntervalInUcastClassCOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientIntervalInMcastClassAFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientIntervalInMcastClassAOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientIntervalInMcastClassBCirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientIntervalInMcastClassBCirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientIntervalInMcastClassBEirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientIntervalInMcastClassBEirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientIntervalInMcastClassCFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientIntervalInMcastClassCOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientIntervalOutUcastClassAFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientIntervalOutUcastClassAOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientIntervalOutUcastClassBCirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientIntervalOutUcastClassBCirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientIntervalOutUcastClassBEirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientIntervalOutUcastClassBEirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientIntervalOutUcastClassCFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientIntervalOutUcastClassCOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientIntervalOutMcastClassAFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientIntervalOutMcastClassAOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientIntervalOutMcastClassBCirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientIntervalOutMcastClassBCirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientIntervalOutMcastClassBEirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientIntervalOutMcastClassBEirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientIntervalOutMcastClassCFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientIntervalOutMcastClassCOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rprClientIntervalGroup = rprClientIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: rprClientIntervalGroup.setDescription('Collection of objects counting MAC client interface intervals statistics.')
rprClientDayGroup = ObjectGroup((1, 0, 8802, 17, 1, 1, 2, 1, 18)).setObjects(("IEEE-802DOT17-RPR-MIB", "rprClientDayInUcastClassAFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientDayInUcastClassAOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientDayInUcastClassBCirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientDayInUcastClassBCirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientDayInUcastClassBEirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientDayInUcastClassBEirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientDayInUcastClassCFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientDayInUcastClassCOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientDayInMcastClassAFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientDayInMcastClassAOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientDayInMcastClassBCirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientDayInMcastClassBCirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientDayInMcastClassBEirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientDayInMcastClassBEirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientDayInMcastClassCFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientDayInMcastClassCOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientDayOutUcastClassAFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientDayOutUcastClassAOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientDayOutUcastClassBCirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientDayOutUcastClassBCirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientDayOutUcastClassBEirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientDayOutUcastClassBEirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientDayOutUcastClassCFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientDayOutUcastClassCOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientDayOutMcastClassAFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientDayOutMcastClassAOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientDayOutMcastClassBCirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientDayOutMcastClassBCirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientDayOutMcastClassBEirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientDayOutMcastClassBEirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientDayOutMcastClassCFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientDayOutMcastClassCOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rprClientDayGroup = rprClientDayGroup.setStatus('current')
if mibBuilder.loadTexts: rprClientDayGroup.setDescription('Collection of objects counting MAC client interface 24 hours statistics.')
rprClientStatsGroup = ObjectGroup((1, 0, 8802, 17, 1, 1, 2, 1, 19)).setObjects(("IEEE-802DOT17-RPR-MIB", "rprClientStatsInUcastClassAFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientStatsInUcastClassAOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientStatsInUcastClassBCirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientStatsInUcastClassBCirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientStatsInUcastClassBEirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientStatsInUcastClassBEirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientStatsInUcastClassCFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientStatsInUcastClassCOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientStatsInMcastClassAFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientStatsInMcastClassAOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientStatsInMcastClassBCirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientStatsInMcastClassBCirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientStatsInMcastClassBEirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientStatsInMcastClassBEirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientStatsInMcastClassCFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientStatsInMcastClassCOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientStatsInBcastFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientStatsOutUcastClassAFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientStatsOutUcastClassAOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientStatsOutUcastClassBCirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientStatsOutUcastClassBCirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientStatsOutUcastClassBEirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientStatsOutUcastClassBEirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientStatsOutUcastClassCFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientStatsOutUcastClassCOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientStatsOutMcastClassAFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientStatsOutMcastClassAOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientStatsOutMcastClassBCirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientStatsOutMcastClassBCirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientStatsOutMcastClassBEirFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientStatsOutMcastClassBEirOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientStatsOutMcastClassCFrames"), ("IEEE-802DOT17-RPR-MIB", "rprClientStatsOutMcastClassCOctets"), ("IEEE-802DOT17-RPR-MIB", "rprClientStatsOutBcastFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rprClientStatsGroup = rprClientStatsGroup.setStatus('current')
if mibBuilder.loadTexts: rprClientStatsGroup.setDescription('Collection of objects counting MAC client interface total statistics.')
rprErrorCurrentGroup = ObjectGroup((1, 0, 8802, 17, 1, 1, 2, 1, 20)).setObjects(("IEEE-802DOT17-RPR-MIB", "rprSpanErrorCurrentTtlExpFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorCurrentTooLongFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorCurrentTooShortFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorCurrentBadHecFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorCurrentBadFcsFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorCurrentSelfSrcUcastFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorCurrentPmdAbortFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorCurrentBadAddrFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorCurrentBadParityFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorCurrentContainedFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorCurrentScffErrors"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorCurrentErroredSeconds"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorCurrentSeverelyErroredSeconds"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorCurrentUnavailableSeconds"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rprErrorCurrentGroup = rprErrorCurrentGroup.setStatus('current')
if mibBuilder.loadTexts: rprErrorCurrentGroup.setDescription('Collection of objects counting MAC span error current statistics.')
rprErrorIntervalGroup = ObjectGroup((1, 0, 8802, 17, 1, 1, 2, 1, 21)).setObjects(("IEEE-802DOT17-RPR-MIB", "rprSpanErrorIntervalValidData"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorIntervalTimeElapsed"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorIntervalTtlExpFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorIntervalTooLongFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorIntervalTooShortFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorIntervalBadHecFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorIntervalBadFcsFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorIntervalSelfSrcUcastFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorIntervalPmdAbortFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorIntervalBadAddrFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorIntervalBadParityFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorIntervalContainedFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorIntervalScffErrors"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorIntervalErroredSeconds"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorIntervalSeverelyErroredSeconds"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorIntervalUnavailableSeconds"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rprErrorIntervalGroup = rprErrorIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: rprErrorIntervalGroup.setDescription('Collection of objects counting MAC span error intervals statistics.')
rprErrorDayGroup = ObjectGroup((1, 0, 8802, 17, 1, 1, 2, 1, 22)).setObjects(("IEEE-802DOT17-RPR-MIB", "rprSpanErrorDayTtlExpFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorDayTooLongFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorDayTooShortFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorDayBadHecFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorDayBadFcsFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorDaySelfSrcUcastFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorDayPmdAbortFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorDayBadAddrFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorDayBadParityFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorDayContainedFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorDayScffErrors"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorDayErroredSeconds"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorDaySeverelyErroredSeconds"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorDayUnavailableSeconds"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rprErrorDayGroup = rprErrorDayGroup.setStatus('current')
if mibBuilder.loadTexts: rprErrorDayGroup.setDescription('Collection of objects counting MAC span error 24 hours statistics.')
rprErrorStatsGroup = ObjectGroup((1, 0, 8802, 17, 1, 1, 2, 1, 23)).setObjects(("IEEE-802DOT17-RPR-MIB", "rprSpanErrorStatsTtlExpFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorStatsTooLongFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorStatsTooShortFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorStatsBadHecFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorStatsBadFcsFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorStatsSelfSrcUcastFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorStatsPmdAbortFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorStatsBadAddrFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorStatsBadParityFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorStatsContainedFrames"), ("IEEE-802DOT17-RPR-MIB", "rprSpanErrorStatsScffErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rprErrorStatsGroup = rprErrorStatsGroup.setStatus('current')
if mibBuilder.loadTexts: rprErrorStatsGroup.setDescription('Collection of objects counting MAC span error total statistics.')
mibBuilder.exportSymbols("IEEE-802DOT17-RPR-MIB", rprSpanCurrentOutUcastClassCOctets=rprSpanCurrentOutUcastClassCOctets, rprCompliances=rprCompliances, rprSpanLastChange=rprSpanLastChange, rprSpanErrorStatsSpan=rprSpanErrorStatsSpan, rprSpanCurrentOutMcastClassBCirFrames=rprSpanCurrentOutMcastClassBCirFrames, rprClientStatsInUcastClassBCirFrames=rprClientStatsInUcastClassBCirFrames, rprSpanIntervalIfIndex=rprSpanIntervalIfIndex, rprOamControl=rprOamControl, rprSpanErrorCurrentScffErrors=rprSpanErrorCurrentScffErrors, rprIfStatsControlPeriodClear=rprIfStatsControlPeriodClear, rprSpanStatsOutTopoAtdFrames=rprSpanStatsOutTopoAtdFrames, rprClientStatsOutMcastClassAFrames=rprClientStatsOutMcastClassAFrames, rprClientStatsInMcastClassBCirFrames=rprClientStatsInMcastClassBCirFrames, rprSpanCurrentInMcastClassBEirFrames=rprSpanCurrentInMcastClassBEirFrames, rprSpanIntervalOutMcastClassBEirFrames=rprSpanIntervalOutMcastClassBEirFrames, rprSpanDayOutMcastClassBEirOctets=rprSpanDayOutMcastClassBEirOctets, rprClientDayOutUcastClassBEirFrames=rprClientDayOutUcastClassBEirFrames, rprOamGroup=rprOamGroup, rprSpanIntervalOutMcastClassBEirOctets=rprSpanIntervalOutMcastClassBEirOctets, rprClientIntervalOutUcastClassBEirFrames=rprClientIntervalOutUcastClassBEirFrames, rprSpanEntry=rprSpanEntry, rprSpanCurrentOutMcastClassBCirOctets=rprSpanCurrentOutMcastClassBCirOctets, rprTopoImageRinglet1ReservedRate=rprTopoImageRinglet1ReservedRate, rprIfEntry=rprIfEntry, rprClientCurrentOutUcastClassCFrames=rprClientCurrentOutUcastClassCFrames, rprSpanIntervalValidData=rprSpanIntervalValidData, rprFairnessGroup=rprFairnessGroup, rprSpanDayOutMcastClassBEirFrames=rprSpanDayOutMcastClassBEirFrames, rprClientCounters=rprClientCounters, rprSpanProtectionLastActivationTime=rprSpanProtectionLastActivationTime, rprSpanErrorIntervalTimeElapsed=rprSpanErrorIntervalTimeElapsed, rprSpanErrorStatsContainedFrames=rprSpanErrorStatsContainedFrames, rprFairnessSTQMedThreshold=rprFairnessSTQMedThreshold, rprClientIntervalInUcastClassBCirOctets=rprClientIntervalInUcastClassBCirOctets, rprIfCurrentStatus=rprIfCurrentStatus, rprErrorCurrentGroup=rprErrorCurrentGroup, rprOamClassOfService=rprOamClassOfService, rprClientDayOutMcastClassCFrames=rprClientDayOutMcastClassCFrames, rprSpanCurrentOutMcastClassBEirOctets=rprSpanCurrentOutMcastClassBEirOctets, rprClientStatsInUcastClassCFrames=rprClientStatsInUcastClassCFrames, rprClientIntervalOutUcastClassBCirFrames=rprClientIntervalOutUcastClassBCirFrames, rprClientStatsInMcastClassBEirOctets=rprClientStatsInMcastClassBEirOctets, rprClientStatsInBcastFrames=rprClientStatsInBcastFrames, rprTopoImageRinglet1Hops=rprTopoImageRinglet1Hops, rprSpanIntervalInUcastClassBCirFrames=rprSpanIntervalInUcastClassBCirFrames, rprClientDayInUcastClassBEirOctets=rprClientDayInUcastClassBEirOctets, rprSpanDayInUcastClassBEirFrames=rprSpanDayInUcastClassBEirFrames, rprSpanIntervalInUcastClassAOctets=rprSpanIntervalInUcastClassAOctets, rprClientDayOutMcastClassAOctets=rprClientDayOutMcastClassAOctets, rprClientIntervalInMcastClassBEirFrames=rprClientIntervalInMcastClassBEirFrames, rprSpanStatsOutOamEchoFrames=rprSpanStatsOutOamEchoFrames, rprClientCurrentOutUcastClassAFrames=rprClientCurrentOutUcastClassAFrames, rprSpanDayOutUcastClassBEirFrames=rprSpanDayOutUcastClassBEirFrames, rprClientDayInMcastClassBEirOctets=rprClientDayInMcastClassBEirOctets, rprClientCurrentInUcastClassAFrames=rprClientCurrentInUcastClassAFrames, rprClientIntervalOutMcastClassAOctets=rprClientIntervalOutMcastClassAOctets, rprClientCurrentOutUcastClassAOctets=rprClientCurrentOutUcastClassAOctets, rprClientIntervalInUcastClassAFrames=rprClientIntervalInUcastClassAFrames, rprClientCurrentOutUcastClassBEirFrames=rprClientCurrentOutUcastClassBEirFrames, rprClientIntervalOutUcastClassBCirOctets=rprClientIntervalOutUcastClassBCirOctets, rprSpanDaySpan=rprSpanDaySpan, rprSpanErrorCurrentSpan=rprSpanErrorCurrentSpan, rprClientDayOutUcastClassBEirOctets=rprClientDayOutUcastClassBEirOctets, rprSpanStatsOutUcastClassCFrames=rprSpanStatsOutUcastClassCFrames, rprClientDayInUcastClassCFrames=rprClientDayInUcastClassCFrames, rprSpanStatsInMcastClassCFrames=rprSpanStatsInMcastClassCFrames, rprSpanErrorCurrentContainedFrames=rprSpanErrorCurrentContainedFrames, rprFairnessSTQHighWaterMark=rprFairnessSTQHighWaterMark, rprTopoImageStationIfIndex=rprTopoImageStationIfIndex, rprIfWrapConfig=rprIfWrapConfig, rprIfChangeSummaryFairnessLastChange=rprIfChangeSummaryFairnessLastChange, rprClientIntervalInUcastClassCFrames=rprClientIntervalInUcastClassCFrames, rprClientCurrentOutMcastClassBCirOctets=rprClientCurrentOutMcastClassBCirOctets, rprSpanIntervalOutUcastClassBEirOctets=rprSpanIntervalOutUcastClassBEirOctets, rprClientStatsInUcastClassCOctets=rprClientStatsInUcastClassCOctets, rprSpanIntervalInMcastClassAOctets=rprSpanIntervalInMcastClassAOctets, rprSpanErrorCurrentUnavailableSeconds=rprSpanErrorCurrentUnavailableSeconds, rprClientIntervalOutMcastClassBEirFrames=rprClientIntervalOutMcastClassBEirFrames, rprFairnessAdvertisementRatio=rprFairnessAdvertisementRatio, rprClientDayOutUcastClassCFrames=rprClientDayOutUcastClassCFrames, rprTopoImageRinglet0Hops=rprTopoImageRinglet0Hops, rprSpanProtectionHoldOffTimer=rprSpanProtectionHoldOffTimer, rprIfChangeSummaryNumInterfaces=rprIfChangeSummaryNumInterfaces, rprClientCountersDayEntry=rprClientCountersDayEntry, rprSpanErrorStatsSelfSrcUcastFrames=rprSpanErrorStatsSelfSrcUcastFrames, rprSpanErrorIntervalSeverelyErroredSeconds=rprSpanErrorIntervalSeverelyErroredSeconds, rprClientDayInMcastClassBEirFrames=rprClientDayInMcastClassBEirFrames, rprClientCurrentInMcastClassAOctets=rprClientCurrentInMcastClassAOctets, rprSpanDayOutUcastClassCOctets=rprSpanDayOutUcastClassCOctets, rprClientIntervalIfIndex=rprClientIntervalIfIndex, rprFairnessMcffReportCoef=rprFairnessMcffReportCoef, rprTopoImageStatus=rprTopoImageStatus, rprIfRingOperModes=rprIfRingOperModes, rprSpanCountersCurrentTable=rprSpanCountersCurrentTable, rprSpanErrorCurrentTtlExpFrames=rprSpanErrorCurrentTtlExpFrames, rprIfChanges=rprIfChanges, rprSpanCountersDayTable=rprSpanCountersDayTable, rprSpanCurrentInUcastClassBCirFrames=rprSpanCurrentInUcastClassBCirFrames, rprSpanErrorIntervalValidData=rprSpanErrorIntervalValidData, rprModuleTotalStatsCompliance=rprModuleTotalStatsCompliance, rprIfFairnessAggressive=rprIfFairnessAggressive, rprSpanTotalRingletReservedRate=rprSpanTotalRingletReservedRate, rprSpanStatsInMcastClassBEirFrames=rprSpanStatsInMcastClassBEirFrames, rprSpanTable=rprSpanTable, rprSpanIntervalTimeElapsed=rprSpanIntervalTimeElapsed, rprClientDayOutUcastClassAOctets=rprClientDayOutUcastClassAOctets, rprSpanErrorStatsBadParityFrames=rprSpanErrorStatsBadParityFrames, rprClientIntervalInUcastClassBEirFrames=rprClientIntervalInUcastClassBEirFrames, rprClientCurrentOutMcastClassBCirFrames=rprClientCurrentOutMcastClassBCirFrames, rprIfSTQFullThreshold=rprIfSTQFullThreshold, rprSpanErrorIntervalBadParityFrames=rprSpanErrorIntervalBadParityFrames, rprSpanErrorIntervalUnavailableSeconds=rprSpanErrorIntervalUnavailableSeconds, rprOamAvResponseTime=rprOamAvResponseTime, rprTopoImageSecMacAddress1=rprTopoImageSecMacAddress1, rprSpanErrorCountersDayTable=rprSpanErrorCountersDayTable, rprSpanErrorCountersStatsEntry=rprSpanErrorCountersStatsEntry, rprObjects=rprObjects, rprClientStatsInMcastClassBCirOctets=rprClientStatsInMcastClassBCirOctets, rprIfStatsControlIntervalClear=rprIfStatsControlIntervalClear, rprSpanErrorCurrentTooLongFrames=rprSpanErrorCurrentTooLongFrames, rprFairnessRampCoef=rprFairnessRampCoef, rprSpanCurrentInUcastClassAFrames=rprSpanCurrentInUcastClassAFrames, rprGroups=rprGroups, rprSpanIntervalInMcastClassBEirOctets=rprSpanIntervalInMcastClassBEirOctets, rprSpanDayOutMcastClassCOctets=rprSpanDayOutMcastClassCOctets, rprClientDayInUcastClassBCirFrames=rprClientDayInUcastClassBCirFrames, rprIfStatsControlIfIndex=rprIfStatsControlIfIndex, rprSpanStatsOutTopoChkSumFrames=rprSpanStatsOutTopoChkSumFrames, rprClientIntervalOutUcastClassCFrames=rprClientIntervalOutUcastClassCFrames, rprSpanErrorStatsPmdAbortFrames=rprSpanErrorStatsPmdAbortFrames, rprSpanStatsInOamOrgFrames=rprSpanStatsInOamOrgFrames, rprSpanStatsOutMcastClassBEirOctets=rprSpanStatsOutMcastClassBEirOctets, rprIfStatsControlEntry=rprIfStatsControlEntry, rprSpanIntervalOutUcastClassBEirFrames=rprSpanIntervalOutUcastClassBEirFrames, rprClientIntervalTimeElapsed=rprClientIntervalTimeElapsed, rprOamRequestCount=rprOamRequestCount, rprSpanIntervalGroup=rprSpanIntervalGroup, rprSpanStatsOutMcastClassCOctets=rprSpanStatsOutMcastClassCOctets, rprClientIntervalInMcastClassBCirOctets=rprClientIntervalInMcastClassBCirOctets, rprClientIntervalInMcastClassCFrames=rprClientIntervalInMcastClassCFrames, rprSpanErrorDayBadFcsFrames=rprSpanErrorDayBadFcsFrames, rprSpanStatsOutUcastClassBCirFrames=rprSpanStatsOutUcastClassBCirFrames, rprIfStatsControlCountPointClear=rprIfStatsControlCountPointClear, rprIfIndex=rprIfIndex, rprSpanDayOutMcastClassBCirFrames=rprSpanDayOutMcastClassBCirFrames, rprClientIntervalOutMcastClassBEirOctets=rprClientIntervalOutMcastClassBEirOctets, rprSpanCurrentOutMcastClassCOctets=rprSpanCurrentOutMcastClassCOctets, rprSpanErrorDayBadHecFrames=rprSpanErrorDayBadHecFrames, rprFairnessRingletWeight=rprFairnessRingletWeight, rprSpanStatsOutMcastClassAOctets=rprSpanStatsOutMcastClassAOctets, rprSpanProtectionEntry=rprSpanProtectionEntry, rprSpanErrorDayIfIndex=rprSpanErrorDayIfIndex, rprSpanDayOutMcastClassAOctets=rprSpanDayOutMcastClassAOctets, rprClientStatsInUcastClassBCirOctets=rprClientStatsInUcastClassBCirOctets, rprClientStatsOutMcastClassBEirFrames=rprClientStatsOutMcastClassBEirFrames, rprClientStatsOutUcastClassBCirFrames=rprClientStatsOutUcastClassBCirFrames, rprSpanErrorDayPmdAbortFrames=rprSpanErrorDayPmdAbortFrames, rprSpanDayOutUcastClassAFrames=rprSpanDayOutUcastClassAFrames, rprSpanCurrentInUcastClassAOctets=rprSpanCurrentInUcastClassAOctets, rprSpanStatsOutOamOrgFrames=rprSpanStatsOutOamOrgFrames, rprSpanCurrentInUcastClassBEirFrames=rprSpanCurrentInUcastClassBEirFrames, rprSpanIntervalOutMcastClassBCirOctets=rprSpanIntervalOutMcastClassBCirOctets, rprClientCurrentIfIndex=rprClientCurrentIfIndex, rprErrorIntervalGroup=rprErrorIntervalGroup, rprClientCurrentInMcastClassCOctets=rprClientCurrentInMcastClassCOctets, rprOamTimeout=rprOamTimeout, rprClientStatsOutUcastClassBEirOctets=rprClientStatsOutUcastClassBEirOctets, rprClientIntervalInMcastClassCOctets=rprClientIntervalInMcastClassCOctets, rprClientStatsOutMcastClassCFrames=rprClientStatsOutMcastClassCFrames, rprSpanCountersStatsEntry=rprSpanCountersStatsEntry, rprClientIntervalOutUcastClassCOctets=rprClientIntervalOutUcastClassCOctets, rprIfReversionMode=rprIfReversionMode, rprSpanStatsOutMcastClassAFrames=rprSpanStatsOutMcastClassAFrames, rprOamResponseRinglet=rprOamResponseRinglet, rprSpanDayInUcastClassAOctets=rprSpanDayInUcastClassAOctets, rprSpanErrorStatsBadFcsFrames=rprSpanErrorStatsBadFcsFrames, rprIfStatsControlCommitClear=rprIfStatsControlCommitClear, rprSpanStatsOutUcastClassAFrames=rprSpanStatsOutUcastClassAFrames, rprSpanProtectionIfIndex=rprSpanProtectionIfIndex, rprClientIntervalOutMcastClassBCirOctets=rprClientIntervalOutMcastClassBCirOctets, rprSpanProtectionSpan=rprSpanProtectionSpan, rprSpanErrorDayErroredSeconds=rprSpanErrorDayErroredSeconds, rprClientStatsInUcastClassAFrames=rprClientStatsInUcastClassAFrames, rprClientIntervalOutMcastClassCFrames=rprClientIntervalOutMcastClassCFrames, rprSpanCurrentInUcastClassBEirOctets=rprSpanCurrentInUcastClassBEirOctets, rprClientStatsOutUcastClassBEirFrames=rprClientStatsOutUcastClassBEirFrames, rprSpanErrorCountersStatsTable=rprSpanErrorCountersStatsTable, rprClientDayGroup=rprClientDayGroup, rprIfProtectionFastTimer=rprIfProtectionFastTimer, rprSpanErrorDayTooShortFrames=rprSpanErrorDayTooShortFrames, rprSpanCurrentGroup=rprSpanCurrentGroup, rprFairnessSTQHighThreshold=rprFairnessSTQHighThreshold, RprProtectionStatus=RprProtectionStatus, rprClientCurrentOutMcastClassCOctets=rprClientCurrentOutMcastClassCOctets, rprFairnessLpCoef=rprFairnessLpCoef, rprSpanStatsOutTopoTpFrames=rprSpanStatsOutTopoTpFrames, rprClientIntervalNumber=rprClientIntervalNumber, rprSpanIntervalInMcastClassBCirFrames=rprSpanIntervalInMcastClassBCirFrames, rprSpanStatsSpan=rprSpanStatsSpan, rprClientDayOutMcastClassBEirFrames=rprClientDayOutMcastClassBEirFrames, rprSpanErrorCurrentTooShortFrames=rprSpanErrorCurrentTooShortFrames, rprTopoGroup=rprTopoGroup, rprSpanDayInUcastClassCOctets=rprSpanDayInUcastClassCOctets, rprSpanStatsInUcastClassAOctets=rprSpanStatsInUcastClassAOctets, PYSNMP_MODULE_ID=ieee802dot17rprMIB, rprFairnessChanges=rprFairnessChanges, rprFairnessActiveWeightsCoef=rprFairnessActiveWeightsCoef, rprSpanErrorCountersCurrentTable=rprSpanErrorCountersCurrentTable, rprOamEntry=rprOamEntry, rprClientStatsInMcastClassAOctets=rprClientStatsInMcastClassAOctets, rprTopoImageWestProtectionStatus=rprTopoImageWestProtectionStatus, rprSpanStatsInMcastClassCOctets=rprSpanStatsInMcastClassCOctets, rprClientDayOutMcastClassCOctets=rprClientDayOutMcastClassCOctets, rprTopoImageMacAddress=rprTopoImageMacAddress, rprSpanErrorCountersDayEntry=rprSpanErrorCountersDayEntry, rprSpanCountersCurrentEntry=rprSpanCountersCurrentEntry, rprSpanIntervalNumber=rprSpanIntervalNumber, rprClientCurrentInMcastClassBCirFrames=rprClientCurrentInMcastClassBCirFrames, rprClientCountersStatsEntry=rprClientCountersStatsEntry, rprIfChangeSummarySpanLastChange=rprIfChangeSummarySpanLastChange, rprIfAtdTimer=rprIfAtdTimer, rprSpanCurrentInMcastClassBEirOctets=rprSpanCurrentInMcastClassBEirOctets, rprSpanCountersDayEntry=rprSpanCountersDayEntry, rprClientIntervalOutMcastClassCOctets=rprClientIntervalOutMcastClassCOctets, rprClientCurrentInUcastClassBEirFrames=rprClientCurrentInUcastClassBEirFrames, rprSpanErrorDaySelfSrcUcastFrames=rprSpanErrorDaySelfSrcUcastFrames, rprSpanDayInMcastClassCFrames=rprSpanDayInMcastClassCFrames, rprClientCurrentOutMcastClassCFrames=rprClientCurrentOutMcastClassCFrames, rprSpanStatsOutUcastClassAOctets=rprSpanStatsOutUcastClassAOctets, rprClientStatsIfIndex=rprClientStatsIfIndex, rprClientIntervalOutUcastClassAFrames=rprClientIntervalOutUcastClassAFrames, rprClientDayOutMcastClassAFrames=rprClientDayOutMcastClassAFrames, rprFairnessEntry=rprFairnessEntry, rprSpanStatsOutUcastClassBEirFrames=rprSpanStatsOutUcastClassBEirFrames, rprClientDayInUcastClassBCirOctets=rprClientDayInUcastClassBCirOctets, rprFairnessSTQLowThreshold=rprFairnessSTQLowThreshold, rprIfStatsControlGroup=rprIfStatsControlGroup, rprSpanErrorIntervalErroredSeconds=rprSpanErrorIntervalErroredSeconds, rprSpanProtectionTable=rprSpanProtectionTable, rprClientCurrentInMcastClassAFrames=rprClientCurrentInMcastClassAFrames, rprClientCountersCurrentEntry=rprClientCountersCurrentEntry, rprClientDayOutUcastClassCOctets=rprClientDayOutUcastClassCOctets, rprSpanStatsInUcastClassBCirOctets=rprSpanStatsInUcastClassBCirOctets, rprClientCurrentInUcastClassCOctets=rprClientCurrentInUcastClassCOctets, rprIfChangeSummaryIfChanges=rprIfChangeSummaryIfChanges, rprConformance=rprConformance, rprSpanCurrentOutMcastClassBEirFrames=rprSpanCurrentOutMcastClassBEirFrames, rprSpanStatsOutMcastClassBCirOctets=rprSpanStatsOutMcastClassBCirOctets, rprSpanGroupOpt=rprSpanGroupOpt, rprSpanErrorStatsBadHecFrames=rprSpanErrorStatsBadHecFrames, rprSpanDayOutMcastClassBCirOctets=rprSpanDayOutMcastClassBCirOctets, rprSpanIntervalInMcastClassCFrames=rprSpanIntervalInMcastClassCFrames, rprClientCurrentInMcastClassBEirFrames=rprClientCurrentInMcastClassBEirFrames, rprIfTable=rprIfTable)
mibBuilder.exportSymbols("IEEE-802DOT17-RPR-MIB", rprSpanCurrentOutUcastClassBEirFrames=rprSpanCurrentOutUcastClassBEirFrames, rprClientIntervalInMcastClassBEirOctets=rprClientIntervalInMcastClassBEirOctets, rprProtocols=rprProtocols, rprIfStatsControlTimeElapsed=rprIfStatsControlTimeElapsed, rprSpanErrorCurrentSeverelyErroredSeconds=rprSpanErrorCurrentSeverelyErroredSeconds, rprSpanErrorCountersIntervalTable=rprSpanErrorCountersIntervalTable, rprSpanCurrentOutUcastClassBCirFrames=rprSpanCurrentOutUcastClassBCirFrames, rprClientDayOutUcastClassBCirFrames=rprClientDayOutUcastClassBCirFrames, ieee802dot17rprMIB=ieee802dot17rprMIB, rprIfChangeSummaryObject=rprIfChangeSummaryObject, rprClientStatsOutMcastClassCOctets=rprClientStatsOutMcastClassCOctets, rprIfChangeSummarySpanChanges=rprIfChangeSummarySpanChanges, rprSpanErrorCurrentBadParityFrames=rprSpanErrorCurrentBadParityFrames, rprFairnessIfIndex=rprFairnessIfIndex, rprSpanCurrentOutUcastClassBCirOctets=rprSpanCurrentOutUcastClassBCirOctets, rprIfGroup=rprIfGroup, rprTopoImageStationName=rprTopoImageStationName, rprSpanCurrentSpan=rprSpanCurrentSpan, rprSpanDayInMcastClassBCirOctets=rprSpanDayInMcastClassBCirOctets, rprOamUserData=rprOamUserData, rprSpanIntervalOutMcastClassAOctets=rprSpanIntervalOutMcastClassAOctets, rprClientCurrentInMcastClassCFrames=rprClientCurrentInMcastClassCFrames, rprClientCurrentOutMcastClassBEirOctets=rprClientCurrentOutMcastClassBEirOctets, rprSpanIntervalOutUcastClassBCirFrames=rprSpanIntervalOutUcastClassBCirFrames, rprOamIfIndex=rprOamIfIndex, rprSpanErrorCounters=rprSpanErrorCounters, rprSpanErrorIntervalSelfSrcUcastFrames=rprSpanErrorIntervalSelfSrcUcastFrames, rprClientDayInMcastClassCFrames=rprClientDayInMcastClassCFrames, rprSpanDayOutMcastClassAFrames=rprSpanDayOutMcastClassAFrames, rprIfMacOperModes=rprIfMacOperModes, rprSpanCurrentInMcastClassAOctets=rprSpanCurrentInMcastClassAOctets, rprOamResponseCount=rprOamResponseCount, rprSpanErrorIntervalIfIndex=rprSpanErrorIntervalIfIndex, rprTopoImageRinglet0ReservedRate=rprTopoImageRinglet0ReservedRate, rprClientCurrentOutMcastClassAOctets=rprClientCurrentOutMcastClassAOctets, rprSpanProtectionNeighborValid=rprSpanProtectionNeighborValid, rprSpanCurrentOutUcastClassCFrames=rprSpanCurrentOutUcastClassCFrames, rprSpanDayInMcastClassAFrames=rprSpanDayInMcastClassAFrames, rprSpanStatsInMcastClassBCirOctets=rprSpanStatsInMcastClassBCirOctets, rprOamProtected=rprOamProtected, rprIfIdleThreshold=rprIfIdleThreshold, rprSpanDayOutMcastClassCFrames=rprSpanDayOutMcastClassCFrames, rprSpanErrorCountersCurrentEntry=rprSpanErrorCountersCurrentEntry, rprSpanStatsOutOamFlushFrames=rprSpanStatsOutOamFlushFrames, rprClientIntervalOutUcastClassBEirOctets=rprClientIntervalOutUcastClassBEirOctets, rprSpanCountersIntervalEntry=rprSpanCountersIntervalEntry, rprFairnessAgeCoef=rprFairnessAgeCoef, rprSpanDayOutUcastClassAOctets=rprSpanDayOutUcastClassAOctets, rprSpanChanges=rprSpanChanges, rprGeneral=rprGeneral, rprClientDayInUcastClassAOctets=rprClientDayInUcastClassAOctets, rprSpanCounters=rprSpanCounters, rprFairnessLastChange=rprFairnessLastChange, rprIfStationsOnRing=rprIfStationsOnRing, rprSpanCurrentInUcastClassBCirOctets=rprSpanCurrentInUcastClassBCirOctets, rprSpanIntervalInMcastClassCOctets=rprSpanIntervalInMcastClassCOctets, rprSpanIntervalOutMcastClassAFrames=rprSpanIntervalOutMcastClassAFrames, rprSpanStatsInOamFlushFrames=rprSpanStatsInOamFlushFrames, rprFairnessRinglet=rprFairnessRinglet, rprSpanCurrentOutUcastClassAFrames=rprSpanCurrentOutUcastClassAFrames, rprFairnessResetWaterMarks=rprFairnessResetWaterMarks, rprSpanIntervalInUcastClassBCirOctets=rprSpanIntervalInUcastClassBCirOctets, rprSpanErrorCountersIntervalEntry=rprSpanErrorCountersIntervalEntry, rprClientDayOutMcastClassBCirOctets=rprClientDayOutMcastClassBCirOctets, rprSpanErrorStatsTtlExpFrames=rprSpanErrorStatsTtlExpFrames, rprClientCurrentOutUcastClassCOctets=rprClientCurrentOutUcastClassCOctets, rprClientDayInUcastClassBEirFrames=rprClientDayInUcastClassBEirFrames, rprClientCountersIntervalTable=rprClientCountersIntervalTable, rprClientIntervalInUcastClassBCirFrames=rprClientIntervalInUcastClassBCirFrames, rprSpanStatsOutMcastClassCFrames=rprSpanStatsOutMcastClassCFrames, rprFairnessRateHighThreshold=rprFairnessRateHighThreshold, rprSpanStatsInMcastClassBEirOctets=rprSpanStatsInMcastClassBEirOctets, rprSpanIntervalInUcastClassBEirFrames=rprSpanIntervalInUcastClassBEirFrames, rprSpanDayOutUcastClassBEirOctets=rprSpanDayOutUcastClassBEirOctets, rprSpanCurrentInUcastClassCOctets=rprSpanCurrentInUcastClassCOctets, rprClientStatsOutMcastClassBCirOctets=rprClientStatsOutMcastClassBCirOctets, rprClientStatsGroup=rprClientStatsGroup, rprClientCountersCurrentTable=rprClientCountersCurrentTable, rprOamRequestRinglet=rprOamRequestRinglet, rprSpanStatsInUcastClassAFrames=rprSpanStatsInUcastClassAFrames, rprSpanCountersIntervalTable=rprSpanCountersIntervalTable, rprFairnessSTQLowWaterMark=rprFairnessSTQLowWaterMark, rprIfProtectionWTR=rprIfProtectionWTR, rprClientStatsOutUcastClassAOctets=rprClientStatsOutUcastClassAOctets, rprSpanErrorIntervalBadHecFrames=rprSpanErrorIntervalBadHecFrames, rprSpanCurrentOutUcastClassBEirOctets=rprSpanCurrentOutUcastClassBEirOctets, rprOamActionType=rprOamActionType, rprClientIntervalInMcastClassAFrames=rprClientIntervalInMcastClassAFrames, rprClientDayOutUcastClassBCirOctets=rprClientDayOutUcastClassBCirOctets, rprTopoImageIfIndex=rprTopoImageIfIndex, rprSpanIntervalOutUcastClassCOctets=rprSpanIntervalOutUcastClassCOctets, rprSpanStatsInTopoChkSumFrames=rprSpanStatsInTopoChkSumFrames, rprSpanCurrentOutMcastClassAFrames=rprSpanCurrentOutMcastClassAFrames, rprErrorStatsGroup=rprErrorStatsGroup, rprClientStatsInMcastClassCFrames=rprClientStatsInMcastClassCFrames, rprClientCurrentOutUcastClassBCirFrames=rprClientCurrentOutUcastClassBCirFrames, rprClientStatsOutMcastClassBEirOctets=rprClientStatsOutMcastClassBEirOctets, rprFairnessRateLowThreshold=rprFairnessRateLowThreshold, rprSpanIntervalStartTime=rprSpanIntervalStartTime, rprClientCurrentInUcastClassAOctets=rprClientCurrentInUcastClassAOctets, rprSpanErrorDayScffErrors=rprSpanErrorDayScffErrors, rprSpanGroup=rprSpanGroup, rprSpanIfIndex=rprSpanIfIndex, rprTopoImageEastProtectionStatus=rprTopoImageEastProtectionStatus, rprSpanIntervalInUcastClassCFrames=rprSpanIntervalInUcastClassCFrames, rprSpanDayInUcastClassCFrames=rprSpanDayInUcastClassCFrames, rprSpanCurrentIfIndex=rprSpanCurrentIfIndex, rprSpanErrorDayContainedFrames=rprSpanErrorDayContainedFrames, rprSpanErrorIntervalSpan=rprSpanErrorIntervalSpan, rprClientDayInUcastClassAFrames=rprClientDayInUcastClassAFrames, rprSpanErrorIntervalPmdAbortFrames=rprSpanErrorIntervalPmdAbortFrames, rprClientCurrentOutMcastClassAFrames=rprClientCurrentOutMcastClassAFrames, rprSpanStatsInTopoAtdFrames=rprSpanStatsInTopoAtdFrames, rprFairnessTable=rprFairnessTable, rprClientCurrentInUcastClassBEirOctets=rprClientCurrentInUcastClassBEirOctets, rprClientIntervalOutMcastClassBCirFrames=rprClientIntervalOutMcastClassBCirFrames, rprSpanErrorStatsBadAddrFrames=rprSpanErrorStatsBadAddrFrames, rprSpanLowerLayerIfIndex=rprSpanLowerLayerIfIndex, rprSpanDayInUcastClassAFrames=rprSpanDayInUcastClassAFrames, rprSpanStatsInMcastClassBCirFrames=rprSpanStatsInMcastClassBCirFrames, rprIfChangeSummaryFairnessChanges=rprIfChangeSummaryFairnessChanges, rprClientDayInUcastClassCOctets=rprClientDayInUcastClassCOctets, rprClientCurrentOutMcastClassBEirFrames=rprClientCurrentOutMcastClassBEirFrames, rprSpanErrorIntervalTooShortFrames=rprSpanErrorIntervalTooShortFrames, rprClientDayInMcastClassAFrames=rprClientDayInMcastClassAFrames, rprSpanIntervalInMcastClassAFrames=rprSpanIntervalInMcastClassAFrames, rprIfStqSize=rprIfStqSize, rprSpanErrorDaySpan=rprSpanErrorDaySpan, rprIfKeepaliveTimeout=rprIfKeepaliveTimeout, rprTopoImageWestWeight=rprTopoImageWestWeight, rprClientCurrentInMcastClassBEirOctets=rprClientCurrentInMcastClassBEirOctets, RprOamRinglet=RprOamRinglet, rprSpanErrorIntervalTooLongFrames=rprSpanErrorIntervalTooLongFrames, rprSpanCurrentOutMcastClassAOctets=rprSpanCurrentOutMcastClassAOctets, rprSpanDayInMcastClassAOctets=rprSpanDayInMcastClassAOctets, rprTopoImageTable=rprTopoImageTable, rprClientCurrentInUcastClassBCirOctets=rprClientCurrentInUcastClassBCirOctets, RprSpan=RprSpan, rprSpanIntervalOutMcastClassBCirFrames=rprSpanIntervalOutMcastClassBCirFrames, rprClientDayInMcastClassCOctets=rprClientDayInMcastClassCOctets, rprFairnessReservedRate=rprFairnessReservedRate, rprClientIntervalValidData=rprClientIntervalValidData, rprSpanStatsInOamEchoFrames=rprSpanStatsInOamEchoFrames, rprClientStatsOutMcastClassBCirFrames=rprClientStatsOutMcastClassBCirFrames, rprSpanErrorCurrentPmdAbortFrames=rprSpanErrorCurrentPmdAbortFrames, rprSpanErrorIntervalContainedFrames=rprSpanErrorIntervalContainedFrames, rprClientCountersDayTable=rprClientCountersDayTable, rprSpanErrorCurrentBadAddrFrames=rprSpanErrorCurrentBadAddrFrames, rprSpanIntervalOutUcastClassAOctets=rprSpanIntervalOutUcastClassAOctets, rprClientIntervalGroup=rprClientIntervalGroup, rprClientIntervalInUcastClassAOctets=rprClientIntervalInUcastClassAOctets, rprSpanCurrentStatus=rprSpanCurrentStatus, rprClientStatsInMcastClassAFrames=rprClientStatsInMcastClassAFrames, rprIfChangeSummaryIfLastChange=rprIfChangeSummaryIfLastChange, rprClientIntervalInUcastClassBEirOctets=rprClientIntervalInUcastClassBEirOctets, rprOamDestAddress=rprOamDestAddress, rprSpanStatsInUcastClassBEirFrames=rprSpanStatsInUcastClassBEirFrames, rprSpanErrorIntervalScffErrors=rprSpanErrorIntervalScffErrors, rprClientDayInMcastClassBCirFrames=rprClientDayInMcastClassBCirFrames, rprClientStatsInMcastClassBEirFrames=rprClientStatsInMcastClassBEirFrames, rprSpanDayInMcastClassBEirOctets=rprSpanDayInMcastClassBEirOctets, rprSpanIntervalOutUcastClassAFrames=rprSpanIntervalOutUcastClassAFrames, rprSpanStatsInMcastClassAFrames=rprSpanStatsInMcastClassAFrames, rprOamTable=rprOamTable, rprSpanCurrentInMcastClassCFrames=rprSpanCurrentInMcastClassCFrames, rprClientCurrentInUcastClassBCirFrames=rprClientCurrentInUcastClassBCirFrames, rprSpanCurrentOutMcastClassCFrames=rprSpanCurrentOutMcastClassCFrames, rprSpanIntervalInMcastClassBCirOctets=rprSpanIntervalInMcastClassBCirOctets, rprSpanDayOutUcastClassBCirFrames=rprSpanDayOutUcastClassBCirFrames, rprSpanIntervalInUcastClassAFrames=rprSpanIntervalInUcastClassAFrames, rprSpanStatsInUcastClassCOctets=rprSpanStatsInUcastClassCOctets, rprSpanIntervalInUcastClassCOctets=rprSpanIntervalInUcastClassCOctets, rprSpanErrorStatsTooShortFrames=rprSpanErrorStatsTooShortFrames, rprIfPtqSize=rprIfPtqSize, rprSpanCurrentInMcastClassAFrames=rprSpanCurrentInMcastClassAFrames, rprClientCurrentOutUcastClassBEirOctets=rprClientCurrentOutUcastClassBEirOctets, rprClientStatsOutBcastFrames=rprClientStatsOutBcastFrames, rprSpanErrorStatsTooLongFrames=rprSpanErrorStatsTooLongFrames, rprSpanDayGroup=rprSpanDayGroup, rprSpanIntervalSpan=rprSpanIntervalSpan, rprSpanErrorCurrentBadHecFrames=rprSpanErrorCurrentBadHecFrames, rprIfStatsControlTable=rprIfStatsControlTable, rprClientCurrentGroup=rprClientCurrentGroup, rprSpanIntervalOutUcastClassBCirOctets=rprSpanIntervalOutUcastClassBCirOctets, rprSpanCurrentInMcastClassBCirFrames=rprSpanCurrentInMcastClassBCirFrames, rprSpanProtectionCommand=rprSpanProtectionCommand, rprSpanProtectionDuration=rprSpanProtectionDuration, rprSpanStatsInUcastClassBCirFrames=rprSpanStatsInUcastClassBCirFrames, rprSpanIntervalOutMcastClassCFrames=rprSpanIntervalOutMcastClassCFrames, rprSpanStatsInUcastClassCFrames=rprSpanStatsInUcastClassCFrames, rprSpanDayInMcastClassBCirFrames=rprSpanDayInMcastClassBCirFrames, rprSpanCountersStatsTable=rprSpanCountersStatsTable, rprSpanStatsIfIndex=rprSpanStatsIfIndex, rprClientIntervalOutMcastClassAFrames=rprClientIntervalOutMcastClassAFrames, rprSpanErrorDaySeverelyErroredSeconds=rprSpanErrorDaySeverelyErroredSeconds, rprClientStatsInUcastClassAOctets=rprClientStatsInUcastClassAOctets, rprIfJumboFramePreferred=rprIfJumboFramePreferred, rprSpanProtectionGroup=rprSpanProtectionGroup, rprClientIntervalOutUcastClassAOctets=rprClientIntervalOutUcastClassAOctets, rprTopoImageEntry=rprTopoImageEntry, rprClientDayOutMcastClassBCirFrames=rprClientDayOutMcastClassBCirFrames, rprSpanStatsOutUcastClassBEirOctets=rprSpanStatsOutUcastClassBEirOctets, rprSpanStatsGroup=rprSpanStatsGroup, rprClientCurrentOutUcastClassBCirOctets=rprClientCurrentOutUcastClassBCirOctets, rprSpanErrorDayBadParityFrames=rprSpanErrorDayBadParityFrames, rprSpanErrorDayTooLongFrames=rprSpanErrorDayTooLongFrames, rprTopoImageEastWeight=rprTopoImageEastWeight, rprIfStatsControlValidIntervals=rprIfStatsControlValidIntervals, rprClientDayOutUcastClassAFrames=rprClientDayOutUcastClassAFrames, rprSpanId=rprSpanId, rprTopoImageCapability=rprTopoImageCapability, rprSpanErrorDayBadAddrFrames=rprSpanErrorDayBadAddrFrames, rprSpanErrorIntervalBadAddrFrames=rprSpanErrorIntervalBadAddrFrames, rprClientStatsInMcastClassCOctets=rprClientStatsInMcastClassCOctets, rprSpanCurrentInMcastClassBCirOctets=rprSpanCurrentInMcastClassBCirOctets, rprTopoImageSecMacAddress2=rprTopoImageSecMacAddress2, rprSpanErrorCurrentIfIndex=rprSpanErrorCurrentIfIndex, rprOamResponseStatus=rprOamResponseStatus, rprSpanIntervalOutUcastClassCFrames=rprSpanIntervalOutUcastClassCFrames, rprClientDayIfIndex=rprClientDayIfIndex, rprClientStatsInUcastClassBEirOctets=rprClientStatsInUcastClassBEirOctets, rprClientCountersIntervalEntry=rprClientCountersIntervalEntry, rprSpanStatsOutUcastClassCOctets=rprSpanStatsOutUcastClassCOctets, rprClientStatsOutUcastClassCFrames=rprClientStatsOutUcastClassCFrames, rprSpanDayIfIndex=rprSpanDayIfIndex, rprIfProtectionSlowTimer=rprIfProtectionSlowTimer, rprSpanDayInUcastClassBCirFrames=rprSpanDayInUcastClassBCirFrames, rprClientStatsInUcastClassBEirFrames=rprClientStatsInUcastClassBEirFrames, rprSpanErrorIntervalTtlExpFrames=rprSpanErrorIntervalTtlExpFrames, rprSpanErrorIntervalNumber=rprSpanErrorIntervalNumber, rprSpanStatsInCtrlFrames=rprSpanStatsInCtrlFrames, rprSpanErrorCurrentErroredSeconds=rprSpanErrorCurrentErroredSeconds, rprSpanErrorDayUnavailableSeconds=rprSpanErrorDayUnavailableSeconds, rprClientCurrentInMcastClassBCirOctets=rprClientCurrentInMcastClassBCirOctets, rprSpanCurrentOutUcastClassAOctets=rprSpanCurrentOutUcastClassAOctets, rprClientStatsOutUcastClassAFrames=rprClientStatsOutUcastClassAFrames, rprSpanStatsInUcastClassBEirOctets=rprSpanStatsInUcastClassBEirOctets, rprErrorDayGroup=rprErrorDayGroup, rprClientIntervalInMcastClassBCirFrames=rprClientIntervalInMcastClassBCirFrames, rprSpanIntervalInUcastClassBEirOctets=rprSpanIntervalInUcastClassBEirOctets, rprSpanDayInMcastClassCOctets=rprSpanDayInMcastClassCOctets, rprClientIntervalInUcastClassCOctets=rprClientIntervalInUcastClassCOctets, rprSpanErrorIntervalBadFcsFrames=rprSpanErrorIntervalBadFcsFrames, rprSpanProtectionCount=rprSpanProtectionCount, rprSpanIntervalInMcastClassBEirFrames=rprSpanIntervalInMcastClassBEirFrames, rprSpanStatsInMcastClassAOctets=rprSpanStatsInMcastClassAOctets, rprClientStatsOutUcastClassCOctets=rprClientStatsOutUcastClassCOctets, rprSpanStatsOutMcastClassBEirFrames=rprSpanStatsOutMcastClassBEirFrames, rprIfSesThreshold=rprIfSesThreshold, rprSpanStatsOutUcastClassBCirOctets=rprSpanStatsOutUcastClassBCirOctets, rprSpanDayInUcastClassBCirOctets=rprSpanDayInUcastClassBCirOctets, rprClientDayOutMcastClassBEirOctets=rprClientDayOutMcastClassBEirOctets, rprSpanDayOutUcastClassCFrames=rprSpanDayOutUcastClassCFrames, rprSpanDayInUcastClassBEirOctets=rprSpanDayInUcastClassBEirOctets)
mibBuilder.exportSymbols("IEEE-802DOT17-RPR-MIB", rprTopoImageInetAddressType=rprTopoImageInetAddressType, rprSpanCurrentInUcastClassCFrames=rprSpanCurrentInUcastClassCFrames, rprTopoImageInetAddress=rprTopoImageInetAddress, rprSpanDayInMcastClassBEirFrames=rprSpanDayInMcastClassBEirFrames, rprClientDayInMcastClassAOctets=rprClientDayInMcastClassAOctets, rprSpanStatsOutMcastClassBCirFrames=rprSpanStatsOutMcastClassBCirFrames, rprClientStatsOutMcastClassAOctets=rprClientStatsOutMcastClassAOctets, rprSpanErrorCurrentSelfSrcUcastFrames=rprSpanErrorCurrentSelfSrcUcastFrames, rprIfGroupOpt=rprIfGroupOpt, rprSpanStatsInTopoTpFrames=rprSpanStatsInTopoTpFrames, rprSpanErrorDayTtlExpFrames=rprSpanErrorDayTtlExpFrames, rprIfLastChange=rprIfLastChange, rprSpanStatsOutCtrlFrames=rprSpanStatsOutCtrlFrames, rprClientIntervalInMcastClassAOctets=rprClientIntervalInMcastClassAOctets, rprSpanErrorStatsScffErrors=rprSpanErrorStatsScffErrors, rprClientCurrentInUcastClassCFrames=rprClientCurrentInUcastClassCFrames, rprFairnessMaxAllowed=rprFairnessMaxAllowed, rprSpanErrorStatsIfIndex=rprSpanErrorStatsIfIndex, rprSpanDayOutUcastClassBCirOctets=rprSpanDayOutUcastClassBCirOctets, rprSpanErrorCurrentBadFcsFrames=rprSpanErrorCurrentBadFcsFrames, rprSpanIntervalOutMcastClassCOctets=rprSpanIntervalOutMcastClassCOctets, rprSpanCurrentInMcastClassCOctets=rprSpanCurrentInMcastClassCOctets, rprIfChangeSummaryGroup=rprIfChangeSummaryGroup, rprClientDayInMcastClassBCirOctets=rprClientDayInMcastClassBCirOctets, rprFairnessGroupOpt=rprFairnessGroupOpt, rprClientCountersStatsTable=rprClientCountersStatsTable, rprClientStatsOutUcastClassBCirOctets=rprClientStatsOutUcastClassBCirOctets)
