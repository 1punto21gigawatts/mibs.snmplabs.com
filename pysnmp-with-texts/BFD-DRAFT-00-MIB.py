#
# PySNMP MIB module BFD-DRAFT-00-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BFD-DRAFT-00-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:37:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter32, NotificationType, Unsigned32, ObjectIdentity, iso, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, MibIdentifier, ModuleIdentity, Integer32, TimeTicks, mib_2, Counter64, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "NotificationType", "Unsigned32", "ObjectIdentity", "iso", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "MibIdentifier", "ModuleIdentity", "Integer32", "TimeTicks", "mib-2", "Counter64", "Bits")
TruthValue, DisplayString, StorageType, RowStatus, TextualConvention, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "StorageType", "RowStatus", "TextualConvention", "TimeStamp")
bfdMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 999))
bfdMIB.setRevisions(('2004-01-22 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: bfdMIB.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: bfdMIB.setLastUpdated('200401221200Z')
if mibBuilder.loadTexts: bfdMIB.setOrganization('IETF')
if mibBuilder.loadTexts: bfdMIB.setContactInfo(' Zafar Ali Cisco Systems, Inc. Email: zali@cisco.com Thomas D. Nadeau Cisco Systems, Inc. Email: tnadeau@cisco.com ')
if mibBuilder.loadTexts: bfdMIB.setDescription('Bidirectional Forwarding Management Information Base.')
bfdNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 0))
bfdObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 1))
bfdConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 3))
bfdScalarObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 1, 1))
class BfdSessIndexTC(TextualConvention, Unsigned32):
    description = 'An index used to uniquely identify BFD sessions.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class BfdInterval(TextualConvention, Unsigned32):
    description = 'The BFD interval delay in microseconds.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class BfdDiag(TextualConvention, Integer32):
    description = 'A common BFD diagnostic code.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("noDiagnostic", 1), ("controlDetectionTimeExpired", 2), ("echoFunctionFailed", 3), ("neighborSignaledSessionDown", 4), ("forwardingPlaneReset", 5), ("pathDown", 6), ("concatenatedPathDown", 7), ("administrativelyDown", 8))

bfdAdminStatus = MibScalar((1, 3, 6, 1, 2, 1, 999, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bfdAdminStatus.setStatus('current')
if mibBuilder.loadTexts: bfdAdminStatus.setDescription("The global administrative status of BFD in this router. The value 'enabled' denotes that the BFD Process is active on at least one interface; 'disabled' disables it on all interfaces.")
bfdOperStatus = MibScalar((1, 3, 6, 1, 2, 1, 999, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdOperStatus.setStatus('current')
if mibBuilder.loadTexts: bfdOperStatus.setDescription('The operational status of BFD on this router.')
bfdVersionNumber = MibScalar((1, 3, 6, 1, 2, 1, 999, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdVersionNumber.setReference(' BFD Version 0 (draft-katz-ward-bfd-04.txt)')
if mibBuilder.loadTexts: bfdVersionNumber.setStatus('current')
if mibBuilder.loadTexts: bfdVersionNumber.setDescription('The current version number of the BFD protocol.')
bfdSessTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 2), )
if mibBuilder.loadTexts: bfdSessTable.setReference('BFD Version 0 (draft-katz-ward-bfd-04.txt)')
if mibBuilder.loadTexts: bfdSessTable.setStatus('current')
if mibBuilder.loadTexts: bfdSessTable.setDescription('The BFD Session Table describes the BFD sessions.')
bfdSessEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 2, 1), ).setIndexNames((0, "BFD-DRAFT-00-MIB", "bfdSessIndex"))
if mibBuilder.loadTexts: bfdSessEntry.setStatus('current')
if mibBuilder.loadTexts: bfdSessEntry.setDescription('The BFD Session Entry describes BFD session.')
bfdSessIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 1, 1), BfdSessIndexTC())
if mibBuilder.loadTexts: bfdSessIndex.setStatus('current')
if mibBuilder.loadTexts: bfdSessIndex.setDescription('This object contains an index used to represent a unique BFD session on this device.')
bfdSessApplicationId = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdSessApplicationId.setStatus('current')
if mibBuilder.loadTexts: bfdSessApplicationId.setDescription('This object contains an index used to indicate an local application which owns or maintains this BFD session. For instance, the VPN process may maintain a subset of the total number of BFD sessions. This application ID provides a convienent way to segretate sessions by the applications which maintain them.')
bfdSessDiscriminator = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdSessDiscriminator.setStatus('current')
if mibBuilder.loadTexts: bfdSessDiscriminator.setDescription('This object specifies the local discriminator for this BFD session, used to uniquely identify it.')
bfdSessLocalDiscr = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdSessLocalDiscr.setStatus('current')
if mibBuilder.loadTexts: bfdSessLocalDiscr.setDescription('This object specifies the local discriminator for this BFD session, used to uniquely identify it.')
bfdSessRemoteDiscr = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdSessRemoteDiscr.setStatus('current')
if mibBuilder.loadTexts: bfdSessRemoteDiscr.setDescription('This object specifies the discriminator chosen by the remote system local discriminator for this BFD session.')
bfdSessState = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("init", 1), ("up", 2), ("failing", 3), ("down", 4), ("adminDown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdSessState.setStatus('current')
if mibBuilder.loadTexts: bfdSessState.setDescription('The perceived state of the BFD session.')
bfdSessRemoteHeardFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdSessRemoteHeardFlag.setStatus('current')
if mibBuilder.loadTexts: bfdSessRemoteHeardFlag.setDescription('This object specifies status of BFD packet reception from the remote system. Specifically, it is set to true(1) if the local system is actively receiving BFD packets from the remote system, and is set to false(0) if the local system has not received BFD packets recently (within the detection time) or if the local system is attempting to tear down the BFD session.')
bfdSessDiag = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 1, 8), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bfdSessDiag.setStatus('current')
if mibBuilder.loadTexts: bfdSessDiag.setDescription("A diagnostic code specifying the local system's reason for the last transition of the session from up(1) to some other state.")
bfdSessOperMode = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("asyncModeWEchoFun", 1), ("asynchModeWOEchoFun", 2), ("demandModeWEchoFunction", 3), ("demandModeWOEchoFunction", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdSessOperMode.setStatus('current')
if mibBuilder.loadTexts: bfdSessOperMode.setDescription('This object specifies current operating mode that BFD session is operating in. A value of AsyncModeWEchoFun(1) ... A value of AsynchModeWOEchoFun(2) ... A value of DemandModeWEchoFunction(3) ... A value of DemandModeWOEchoFunction(4) ... ')
bfdSessDemandModeDesiredFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bfdSessDemandModeDesiredFlag.setStatus('current')
if mibBuilder.loadTexts: bfdSessDemandModeDesiredFlag.setDescription("This object indicates that the local system's desire to use Demand mode. Specifically, it is set to true(1) if the local system wishes to use Demand mode or false(0) if not")
bfdSessEchoFuncModeDesiredFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bfdSessEchoFuncModeDesiredFlag.setStatus('current')
if mibBuilder.loadTexts: bfdSessEchoFuncModeDesiredFlag.setDescription("This object indicates that the local system's desire to use Echo mode. Specifically, it is set to true(1) if the local system wishes to use Echo mode or false(0) if not")
bfdSessEchoFuncFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bfdSessEchoFuncFlag.setStatus('current')
if mibBuilder.loadTexts: bfdSessEchoFuncFlag.setDescription("The administrative status of Echo function for this BFD session. The value 'enabled' denotes that the Echo function is enabled for this session; 'disabled' disables Echo function for this session.")
bfdSessAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 1, 13), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bfdSessAddrType.setStatus('current')
if mibBuilder.loadTexts: bfdSessAddrType.setDescription('This object specifies IP address of the interface associated with this BFD session. Only values unknown(0), ipv4(1) or ipv6(2) have to be supported. A value of unknown(0) is allowed only when the outgoing interface is of type point-to-point, or when the BFD session is not associated with a specific interface. If any other unsupported values are attempted in a set operation, the agent MUST return an inconsistentValue error. ')
bfdSessAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 1, 14), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bfdSessAddr.setStatus('current')
if mibBuilder.loadTexts: bfdSessAddr.setDescription('This object specifies IP address of the interface associated with this BFD session. It can also be used to enabled BFD on a specific interface. The value is set to zero when BFD session is not associated with a specific interface. ')
bfdSessDesiredMinTxInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 1, 15), BfdInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bfdSessDesiredMinTxInterval.setStatus('current')
if mibBuilder.loadTexts: bfdSessDesiredMinTxInterval.setDescription('This object specifies the minimum interval, in microseconds, that the local system would like to use when transmitting BFD Control packets.')
bfdSessDesiredMinRxInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 1, 16), BfdInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bfdSessDesiredMinRxInterval.setStatus('current')
if mibBuilder.loadTexts: bfdSessDesiredMinRxInterval.setDescription('This object specifies the minimum interval, in microseconds, between received BFD Control packets the local system is capable of supporting.')
bfdSessDesiredMinEchoRxInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 1, 17), BfdInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bfdSessDesiredMinEchoRxInterval.setStatus('current')
if mibBuilder.loadTexts: bfdSessDesiredMinEchoRxInterval.setDescription('This object specifies the minimum interval, in microseconds, between received BFD Echo packets that this system is capable of supporting.')
bfdSessDetectMult = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 1, 18), BfdInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bfdSessDetectMult.setStatus('current')
if mibBuilder.loadTexts: bfdSessDetectMult.setDescription('This object specifies the Detect time multiplier.')
bfdSessStorType = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 1, 19), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bfdSessStorType.setStatus('current')
if mibBuilder.loadTexts: bfdSessStorType.setDescription("This variable indicates the storage type for this object. Conceptual rows having the value 'permanent' need not allow write-access to any columnar objects in the row.")
bfdSessRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bfdSessRowStatus.setStatus('current')
if mibBuilder.loadTexts: bfdSessRowStatus.setDescription('This variable is used to create, modify, and/or delete a row in this table. When a row in this table has a row in the active(1) state, no objects in this row can be modified except the bfdSessRowStatus and bfdSessStorageType.')
bfdSessPerfTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 3), )
if mibBuilder.loadTexts: bfdSessPerfTable.setStatus('current')
if mibBuilder.loadTexts: bfdSessPerfTable.setDescription('This table specifies BFD Session performance counters.')
bfdSessPerfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 3, 1), )
bfdSessEntry.registerAugmentions(("BFD-DRAFT-00-MIB", "bfdSessPerfEntry"))
bfdSessPerfEntry.setIndexNames(*bfdSessEntry.getIndexNames())
if mibBuilder.loadTexts: bfdSessPerfEntry.setStatus('current')
if mibBuilder.loadTexts: bfdSessPerfEntry.setDescription('An entry in this table is created by a BFD-enabled node for every BFD Session. bfdCounterDiscontinuityTime is used to indicate potential discontinuity for all counter objects in this table.')
bfdSessPerfPktIn = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdSessPerfPktIn.setStatus('current')
if mibBuilder.loadTexts: bfdSessPerfPktIn.setDescription('The total number of BFD messages received for this BFD session.')
bfdSessPerfPktOut = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdSessPerfPktOut.setStatus('current')
if mibBuilder.loadTexts: bfdSessPerfPktOut.setDescription('The total number of BFD messages sent for this BFD session.')
bfdSessPerfBadDiscrim = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdSessPerfBadDiscrim.setStatus('current')
if mibBuilder.loadTexts: bfdSessPerfBadDiscrim.setDescription('The total number of BFD messages received with a bad local Discriminator value for this BFD session.')
bfdSessPerfLastSessDownTime = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdSessPerfLastSessDownTime.setStatus('current')
if mibBuilder.loadTexts: bfdSessPerfLastSessDownTime.setDescription('The value of sysUpTime on the most recent occasion at which the last time communication was lost with the neighbor. If no such down event exist this object contains a zero value.')
bfdSessPerfLastCommLostDiag = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 1, 5), BfdDiag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdSessPerfLastCommLostDiag.setStatus('current')
if mibBuilder.loadTexts: bfdSessPerfLastCommLostDiag.setDescription('The BFD diag code for the last time communication was lost with the neighbor. If no such down event exist this object contains a zero value.')
bfdSessPerfSessDownCount = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdSessPerfSessDownCount.setStatus('current')
if mibBuilder.loadTexts: bfdSessPerfSessDownCount.setDescription('The number of times this session has gone into the down state since the router last rebooted.')
bfdSessPerfDiscTime = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdSessPerfDiscTime.setStatus('current')
if mibBuilder.loadTexts: bfdSessPerfDiscTime.setDescription('The value of sysUpTime on the most recent occasion at which any one or more of the session counters suffered a discontinuity. The relevant counters are the specific instances associated with this BFD sesion of any Counter32 object contained in the BfdSessPerfTable. If no such discontinuities have occurred since the last re-initialization of the local management subsystem, then this object contains a zero value.')
bfdSessPerfPktInHC = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdSessPerfPktInHC.setStatus('current')
if mibBuilder.loadTexts: bfdSessPerfPktInHC.setDescription('This value represents the total number of total number of BFD messages received for this BFD session. It MUST be equal to the least significant 32 bits of bfdSessPerfPktIn if bfdSessPerfPktInHC is supported according to the rules spelled out in RFC2863.')
bfdSessPerfPktOutHC = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdSessPerfPktOutHC.setStatus('current')
if mibBuilder.loadTexts: bfdSessPerfPktOutHC.setDescription('This value represents the total number of total number of BFD messages transmitted for this BFD session. It MUST be equal to the least significant 32 bits of bfdSessPerfPktIn if bfdSessPerfPktOutHC is supported according to the rules spelled out in RFC2863.')
bfdSessPerfBadDiscrimHC = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdSessPerfBadDiscrimHC.setStatus('current')
if mibBuilder.loadTexts: bfdSessPerfBadDiscrimHC.setDescription('This value represents the total number of total number of BFD messages received with a bad local Discriminator value for this BFD session. It MUST be equal to the least significant 32 bits of bfdSessPerfBadDiscrimHC if bfdSessPerfBadDiscrimHC is supported according to the rules spelled out in RFC2863.')
bfdSessMapTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 4), )
if mibBuilder.loadTexts: bfdSessMapTable.setReference('BFD Version 0 (draft-katz-ward-bfd-04.txt)')
if mibBuilder.loadTexts: bfdSessMapTable.setStatus('current')
if mibBuilder.loadTexts: bfdSessMapTable.setDescription('The BFD Session Map Table maps the complex indexing of the BFD sessions to the flat BFDIndex used in the BfdSessionTable. Implementors need to be aware that if the value of the bfdSessAddr (an OID) has more that 111 sub-identifiers, then OIDs of column instances in this table will have more than 128 sub-identifiers and cannot be accessed using SNMPv1, SNMPv2c, or SNMPv3. ')
bfdSessMapEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 4, 1), ).setIndexNames((0, "BFD-DRAFT-00-MIB", "bfdSessApplicationId"), (0, "BFD-DRAFT-00-MIB", "bfdSessDiscriminator"), (0, "BFD-DRAFT-00-MIB", "bfdSessAddrType"), (0, "BFD-DRAFT-00-MIB", "bfdSessAddr"))
if mibBuilder.loadTexts: bfdSessMapEntry.setStatus('current')
if mibBuilder.loadTexts: bfdSessMapEntry.setDescription('The BFD Session Entry describes BFD session that is mapped to this index. Implementors need to be aware that if the value of the bfdSessAddr has more that 111 octets, then OIDs of column instances in this table will have more than 128 sub-identifiers and cannot be accessed using SNMPv1, SNMPv2c, or SNMPv3')
bfdSessMapBfdIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 1, 1), BfdSessIndexTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdSessMapBfdIndex.setStatus('current')
if mibBuilder.loadTexts: bfdSessMapBfdIndex.setDescription('This object specifies the BfdIndex refered to by the indexes of this row. In essence, a mapping is provided between these indexes and the BfdSessTable.')
bfdSessNotificationsEnable = MibScalar((1, 3, 6, 1, 2, 1, 999, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bfdSessNotificationsEnable.setReference('See also RFC3413 for explanation that notifications are under the ultimate control of the MIB modules in this document.')
if mibBuilder.loadTexts: bfdSessNotificationsEnable.setStatus('current')
if mibBuilder.loadTexts: bfdSessNotificationsEnable.setDescription('If this object is set to true(1), then it enables the emission of bfdSessUp and bfdSessDown notifications; otherwise these notifications are not emitted.')
bfdSessUp = NotificationType((1, 3, 6, 1, 2, 1, 999, 0, 1)).setObjects(("BFD-DRAFT-00-MIB", "bfdSessDiag"), ("BFD-DRAFT-00-MIB", "bfdSessDiag"))
if mibBuilder.loadTexts: bfdSessUp.setStatus('current')
if mibBuilder.loadTexts: bfdSessUp.setDescription('This notification is generated when the bfdSessState object for one or more contiguous entries in bfdSessTable are about to enter the up(2) state from some other state. The included values of bfdSessDiag MUST both be set equal to this new state (i.e: up(1)). The two instances of bfdSessDiag in this notification indicate the range of indexes that are affected. Note that all the indexes of the two ends of the range can be derived from the instance identifiers of these two objects. For cases where a contiguous range of sessions have transitioned into the up(1) state at roughly the same time, the device SHOULD issue a single notification for each range of contiguous indexes in an effort to minimize the emission of a large number of notifications. If a notification has to be issued for just a single bfdSessEntry, then the instance identifier (and values) of the two bfdSessDiag objects MUST be the identical.')
bfdSessDown = NotificationType((1, 3, 6, 1, 2, 1, 999, 0, 2)).setObjects(("BFD-DRAFT-00-MIB", "bfdSessDiag"), ("BFD-DRAFT-00-MIB", "bfdSessDiag"))
if mibBuilder.loadTexts: bfdSessDown.setStatus('current')
if mibBuilder.loadTexts: bfdSessDown.setDescription('This notification is generated when the bfdSessState object for one or more contiguous entries in bfdSessTable are about to enter the down(4) or adminDown(5) states from some other state. The included values of bfdSessDiag MUST both be set equal to this new state (i.e: down(4) or adminDown(5)). The two instances of bfdSessDiag in this notification indicate the range of indexes that are affected. Note that all the indexes of the two ends of the range can be derived from the instance identifiers of these two objects. For cases where a contiguous range of sessions have transitioned into the down(4) or adminDown(5) states at roughly the same time, the device SHOULD issue a single notification for each range of contiguous indexes in an effort to minimize the emission of a large number of notifications. If a notification has to be issued for just a single bfdSessEntry, then the instance identifier (and values) of the two bfdSessDiag objects MUST be the identical.')
bfdGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 3, 1))
bfdCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 3, 2))
bfdModuleFullCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 999, 3, 2, 1)).setObjects(("BFD-DRAFT-00-MIB", "bfdSessionGroup"), ("BFD-DRAFT-00-MIB", "bfdSessionPerfGroup"), ("BFD-DRAFT-00-MIB", "bfdSessionPerfHCGroup"), ("BFD-DRAFT-00-MIB", "bfdNotificationGroup"), ("BFD-DRAFT-00-MIB", "bfdSessionPerfHCGroup"), ("BFD-DRAFT-00-MIB", "bfdNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bfdModuleFullCompliance = bfdModuleFullCompliance.setStatus('current')
if mibBuilder.loadTexts: bfdModuleFullCompliance.setDescription('Compliance statement for agents that provide full support for BFD-MIB. Such devices can then be monitored and also be configured using this MIB module.')
bfdSessionGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 999, 3, 1, 1)).setObjects(("BFD-DRAFT-00-MIB", "bfdSessNotificationsEnable"), ("BFD-DRAFT-00-MIB", "bfdAdminStatus"), ("BFD-DRAFT-00-MIB", "bfdOperStatus"), ("BFD-DRAFT-00-MIB", "bfdVersionNumber"), ("BFD-DRAFT-00-MIB", "bfdSessApplicationId"), ("BFD-DRAFT-00-MIB", "bfdSessDiscriminator"), ("BFD-DRAFT-00-MIB", "bfdSessAddrType"), ("BFD-DRAFT-00-MIB", "bfdSessAddr"), ("BFD-DRAFT-00-MIB", "bfdSessLocalDiscr"), ("BFD-DRAFT-00-MIB", "bfdSessRemoteDiscr"), ("BFD-DRAFT-00-MIB", "bfdSessState"), ("BFD-DRAFT-00-MIB", "bfdSessRemoteHeardFlag"), ("BFD-DRAFT-00-MIB", "bfdSessDiag"), ("BFD-DRAFT-00-MIB", "bfdSessOperMode"), ("BFD-DRAFT-00-MIB", "bfdSessDemandModeDesiredFlag"), ("BFD-DRAFT-00-MIB", "bfdSessEchoFuncFlag"), ("BFD-DRAFT-00-MIB", "bfdSessEchoFuncModeDesiredFlag"), ("BFD-DRAFT-00-MIB", "bfdSessDesiredMinTxInterval"), ("BFD-DRAFT-00-MIB", "bfdSessDesiredMinRxInterval"), ("BFD-DRAFT-00-MIB", "bfdSessDesiredMinEchoRxInterval"), ("BFD-DRAFT-00-MIB", "bfdSessDetectMult"), ("BFD-DRAFT-00-MIB", "bfdSessStorType"), ("BFD-DRAFT-00-MIB", "bfdSessRowStatus"), ("BFD-DRAFT-00-MIB", "bfdSessMapBfdIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bfdSessionGroup = bfdSessionGroup.setStatus('current')
if mibBuilder.loadTexts: bfdSessionGroup.setDescription('Collection of objects needed for BFD sessions.')
bfdSessionPerfGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 999, 3, 1, 2)).setObjects(("BFD-DRAFT-00-MIB", "bfdSessPerfPktIn"), ("BFD-DRAFT-00-MIB", "bfdSessPerfPktOut"), ("BFD-DRAFT-00-MIB", "bfdSessPerfBadDiscrim"), ("BFD-DRAFT-00-MIB", "bfdSessPerfLastSessDownTime"), ("BFD-DRAFT-00-MIB", "bfdSessPerfLastCommLostDiag"), ("BFD-DRAFT-00-MIB", "bfdSessPerfSessDownCount"), ("BFD-DRAFT-00-MIB", "bfdSessPerfDiscTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bfdSessionPerfGroup = bfdSessionPerfGroup.setStatus('current')
if mibBuilder.loadTexts: bfdSessionPerfGroup.setDescription('Collection of objects needed to monitor the performance of BFD sessions.')
bfdSessionPerfHCGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 999, 3, 1, 3)).setObjects(("BFD-DRAFT-00-MIB", "bfdSessPerfPktInHC"), ("BFD-DRAFT-00-MIB", "bfdSessPerfPktOutHC"), ("BFD-DRAFT-00-MIB", "bfdSessPerfBadDiscrimHC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bfdSessionPerfHCGroup = bfdSessionPerfHCGroup.setStatus('current')
if mibBuilder.loadTexts: bfdSessionPerfHCGroup.setDescription('Collection of objects needed to monitor the performance of BFD sessions for which the values of bfdSessPerfPktIn, bfdSessPerfPktOut, or bfdSessPerfBadDiscrim wrap around too quickly.')
bfdNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 999, 3, 1, 4)).setObjects(("BFD-DRAFT-00-MIB", "bfdSessUp"), ("BFD-DRAFT-00-MIB", "bfdSessDown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bfdNotificationGroup = bfdNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: bfdNotificationGroup.setDescription('Set of notifications implemented in this module.')
mibBuilder.exportSymbols("BFD-DRAFT-00-MIB", bfdObjects=bfdObjects, bfdSessDesiredMinEchoRxInterval=bfdSessDesiredMinEchoRxInterval, bfdSessPerfBadDiscrim=bfdSessPerfBadDiscrim, BfdSessIndexTC=BfdSessIndexTC, bfdSessEntry=bfdSessEntry, bfdSessionGroup=bfdSessionGroup, bfdSessDesiredMinRxInterval=bfdSessDesiredMinRxInterval, bfdScalarObjects=bfdScalarObjects, bfdSessionPerfHCGroup=bfdSessionPerfHCGroup, bfdSessMapEntry=bfdSessMapEntry, bfdSessStorType=bfdSessStorType, bfdSessState=bfdSessState, bfdSessApplicationId=bfdSessApplicationId, bfdSessAddr=bfdSessAddr, bfdSessPerfPktOutHC=bfdSessPerfPktOutHC, bfdAdminStatus=bfdAdminStatus, BfdDiag=BfdDiag, bfdSessDemandModeDesiredFlag=bfdSessDemandModeDesiredFlag, bfdVersionNumber=bfdVersionNumber, bfdConformance=bfdConformance, bfdSessAddrType=bfdSessAddrType, bfdSessRowStatus=bfdSessRowStatus, bfdSessPerfPktInHC=bfdSessPerfPktInHC, bfdSessLocalDiscr=bfdSessLocalDiscr, bfdSessUp=bfdSessUp, bfdSessRemoteDiscr=bfdSessRemoteDiscr, bfdSessPerfPktIn=bfdSessPerfPktIn, bfdSessDown=bfdSessDown, bfdMIB=bfdMIB, bfdNotifications=bfdNotifications, bfdSessTable=bfdSessTable, bfdSessPerfPktOut=bfdSessPerfPktOut, bfdCompliances=bfdCompliances, bfdSessEchoFuncFlag=bfdSessEchoFuncFlag, bfdNotificationGroup=bfdNotificationGroup, bfdSessRemoteHeardFlag=bfdSessRemoteHeardFlag, bfdSessNotificationsEnable=bfdSessNotificationsEnable, bfdSessPerfBadDiscrimHC=bfdSessPerfBadDiscrimHC, bfdSessDiscriminator=bfdSessDiscriminator, bfdSessionPerfGroup=bfdSessionPerfGroup, bfdSessDetectMult=bfdSessDetectMult, bfdSessOperMode=bfdSessOperMode, bfdSessPerfLastCommLostDiag=bfdSessPerfLastCommLostDiag, bfdOperStatus=bfdOperStatus, bfdSessPerfDiscTime=bfdSessPerfDiscTime, bfdSessMapTable=bfdSessMapTable, bfdSessPerfEntry=bfdSessPerfEntry, PYSNMP_MODULE_ID=bfdMIB, bfdSessPerfSessDownCount=bfdSessPerfSessDownCount, bfdGroups=bfdGroups, bfdSessDesiredMinTxInterval=bfdSessDesiredMinTxInterval, bfdSessMapBfdIndex=bfdSessMapBfdIndex, BfdInterval=BfdInterval, bfdSessEchoFuncModeDesiredFlag=bfdSessEchoFuncModeDesiredFlag, bfdSessDiag=bfdSessDiag, bfdSessPerfLastSessDownTime=bfdSessPerfLastSessDownTime, bfdSessIndex=bfdSessIndex, bfdSessPerfTable=bfdSessPerfTable, bfdModuleFullCompliance=bfdModuleFullCompliance)
