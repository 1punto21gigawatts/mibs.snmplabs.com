#
# PySNMP MIB module HPN-ICF-DOT3-EFM-EPON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-DOT3-EFM-EPON-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:38:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
hpnicfEpon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfEpon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
iso, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, MibIdentifier, TimeTicks, Bits, NotificationType, ModuleIdentity, Unsigned32, Gauge32, Counter64, IpAddress, Integer32, mib_2 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "MibIdentifier", "TimeTicks", "Bits", "NotificationType", "ModuleIdentity", "Unsigned32", "Gauge32", "Counter64", "IpAddress", "Integer32", "mib-2")
TextualConvention, DisplayString, MacAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress", "TruthValue")
hpnicfDot3EfmeponMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2))
hpnicfDot3EfmeponMIB.setRevisions(('2004-09-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpnicfDot3EfmeponMIB.setRevisionsDescriptions(('Initial version, published as RFC XXXX.',))
if mibBuilder.loadTexts: hpnicfDot3EfmeponMIB.setLastUpdated('200409210000Z')
if mibBuilder.loadTexts: hpnicfDot3EfmeponMIB.setOrganization('')
if mibBuilder.loadTexts: hpnicfDot3EfmeponMIB.setContactInfo('')
if mibBuilder.loadTexts: hpnicfDot3EfmeponMIB.setDescription("The objects in this MIB module are used to manage the Ethernet in the First Mile (EFM) Multi Point Control Protocol (MPCP) Interfaces as defined in IEEE Draft P802.3ah/D3.0 clause 64,65. The following reference is used throughout this MIB module: [802.3ah] refers to: IEEE Draft P802.3ah/D3.3: 'Draft amendment to - Information technology - Telecommunications and information exchange between systems - Local and metropolitan area networks - Specific requirements - Part 3: Carrier sense multiple access with collision detection (CSMA/CD) access method and physical layer specifications - Media Access Control Parameters, Physical Layers and Management Parameters for subscriber access networks', 22 April 2004. Of particular interest are Clause 64(MPCP) 65(P2MP RS) and 60 (PON PMDs). Clause 30, 'Management', and Clause 45, 'Management Data Input/Output (MDIO) Interface'. Copyright (C) The Internet Society (2004). This version of this MIB module is part of XXXX see the RFC itself for full legal notices.")
hpnicfDot3MpcpMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1))
hpnicfDot3MpcpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 1))
hpnicfDot3MpcpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 2))
hpnicfDot3MpcpTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 1, 1), )
if mibBuilder.loadTexts: hpnicfDot3MpcpTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3MpcpTable.setDescription('Table for dot3 Multi-Point Control Protocol (MPCP) MIB modules.')
hpnicfDot3MpcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfDot3MpcpEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3MpcpEntry.setDescription('An entry in the dot3 MPCP MIB modules table.')
hpnicfDot3MpcpID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3MpcpID.setReference('[802.3ah], 30.3.5.1.1.')
if mibBuilder.loadTexts: hpnicfDot3MpcpID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3MpcpID.setDescription('This variable is assigned so as to uniquely identify the Multi-Point MAC Control (MPCP) entity, as defined in [802.3ah] clause 64, among the subordinate managed objects of the containing object. This attribute is relevant for an OLT and an ONU.')
hpnicfDot3MpcpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 1, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3MpcpOperStatus.setReference('[802.3ah], 30.3.5.1.2.')
if mibBuilder.loadTexts: hpnicfDot3MpcpOperStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3MpcpOperStatus.setDescription('This variable can be used to define the operational state of the Multi-Point MAC Control sublayer as defined in [802.3ah] clause 64. Selecting admin for an interface with Multi-Point MAC Control sublayer. When the attribute is True the the interface will act as if Multi-point control protocol is enabled. When the attribute is False the interface will act as if it does not have the Multi-point control protocol. The operational state can be changed using the hpnicfDot3MpcpAdminState attribute. This attribute is relevant for an OLT and an ONU.')
hpnicfDot3MpcpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("olt", 1), ("onu", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot3MpcpMode.setReference('[802.3ah], 30.3.5.1.3.')
if mibBuilder.loadTexts: hpnicfDot3MpcpMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3MpcpMode.setDescription('This variable can be used to identify the operational state of the Multi-Point MAC Control sublayer as defined in [802.3ah] clause 64. Selecting olt(1) for an OLT (server) mode and onu(2) for an ONU (client) mode. Writing can be done during only during initialization, when hpnicfDot3MpcpOperStatus indicates Flase. This attribute is relevant for an OLT and an ONU.')
hpnicfDot3MpcpLinkID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3MpcpLinkID.setReference('[802.3ah], 30.3.5.1.4.')
if mibBuilder.loadTexts: hpnicfDot3MpcpLinkID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3MpcpLinkID.setDescription('A read-only value that identifies the Logical Link identity (LLID) associated with the MAC port as specified in [802.3ah] clause 65.1.3.2.2. This attribute is relevant for an OLT and an ONU.')
hpnicfDot3MpcpRemoteMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 1, 1, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3MpcpRemoteMACAddress.setReference('[802.3ah], 30.3.5.1.5.')
if mibBuilder.loadTexts: hpnicfDot3MpcpRemoteMACAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3MpcpRemoteMACAddress.setDescription('A read-only value that identifies the source_address parameter of the last MPCPDUs passed to the MAC Control. This value is updated on reception of a valid frame with (1) a destination Field equal to the reserved multicast address for MAC Control specified in [802.3ah] Annex 31A, (2) lengthOrType field value equal to the reserved Type for MAC Control as specified in [802.3ah] Annex 31A. (3) an MPCP subtype value equal to the subtype reserved for MPCP as specified in [802.3ah] Annex 31A. This attribute is relevant for an OLT and an ONU.')
hpnicfDot3MpcpRegistrationState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unregistered", 1), ("registering", 2), ("registered", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3MpcpRegistrationState.setReference('[802.3ah], 30.3.5.1.6.')
if mibBuilder.loadTexts: hpnicfDot3MpcpRegistrationState.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3MpcpRegistrationState.setDescription('A read-only value that identifies the operational state of the Multi-Point MAC Control sublayer as defined in [802.3ah] clause 64. When this attribute has the enumeration unregistered(1) the interface may be used for registering a link partner. When this attribute has the enumeration registering(2) the interface is in the process of registering a link-partner. When this attribute has the enumeration registered(3) the interface has an established link-partner. This attribute is relevant for an OLT and an ONU. For the OLT it provides an indication per LLID.')
hpnicfDot3MpcpTransmitElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 1, 1, 1, 7), Integer32()).setUnits('TQ (16nsec)').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3MpcpTransmitElapsed.setReference('[802.3ah], 30.3.5.1.19.')
if mibBuilder.loadTexts: hpnicfDot3MpcpTransmitElapsed.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3MpcpTransmitElapsed.setDescription('A read-only value that reports the interval from last MPCP frame transmission in increments of Time Quanta (TQ) 16ns. The value returned shall be (interval from last MPCP frame transmission in ns)/16. If this value exceeds (2^32-1) the value (2^32-1) shall be returned. This attribute is relevant for an OLT and an ONU.')
hpnicfDot3MpcpReceiveElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 1, 1, 1, 8), Integer32()).setUnits('TQ (16nsec)').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3MpcpReceiveElapsed.setReference('[802.3ah], 30.3.5.1.20.')
if mibBuilder.loadTexts: hpnicfDot3MpcpReceiveElapsed.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3MpcpReceiveElapsed.setDescription('A read-only value that reports the interval from last MPCP frame reception in increments of Time Quanta (TQ) 16ns. The value returned shall be (interval from last MPCP last MPCP frame reception in ns)/16. If this value exceeds (2^32-1) the value (2^32-1) shall be returned. This attribute is relevant for an OLT and an ONU.')
hpnicfDot3MpcpRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 1, 1, 1, 9), Integer32()).setUnits('TQ (16nsec)').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3MpcpRoundTripTime.setReference('[802.3ah], 30.3.5.1.21.')
if mibBuilder.loadTexts: hpnicfDot3MpcpRoundTripTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3MpcpRoundTripTime.setDescription('A read-only value that reports the MPCP round trip time in increments of Time Quanta (TQ) 16ns. The value returned shall be (round trip time in ns)/16. If this value exceeds (2^16-1) the value (2^16-1) shall be returned. This attribute is relevant for an OLT and an ONU. For the OLT there is a value per LLID')
hpnicfDot3MpcpMaximumPendingGrants = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3MpcpMaximumPendingGrants.setReference('[802.3ah], 30.3.5.1.24.')
if mibBuilder.loadTexts: hpnicfDot3MpcpMaximumPendingGrants.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3MpcpMaximumPendingGrants.setDescription('A read-only value that indicates the maximum number of grants an ONU can store. The maximum number of grants an ONU can store has a range of 0 to 255. This attribute is relevant for an OLT and an ONU. For the OLT there is a value per LLID')
hpnicfDot3MpcpAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 1, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot3MpcpAdminState.setReference('[802.3ah], 30.3.5.2.1.')
if mibBuilder.loadTexts: hpnicfDot3MpcpAdminState.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3MpcpAdminState.setDescription('This variable can be used to define the operational state of the Multi-Point MAC Control sublayer as defined in [802.3ah] clause 64. Selecting admin for an interface with Multi-Point MAC Control sublayer. When selecting the value as True the interface Multi-Point control protocol is enabled. When selecting the value as False the interface acts as if the Multi-point Control protocol does not exist. Reading reflects the state of the attribute and the operation of the Multi-point control protocol mode of the interface. Writing can be done all the time. This attribute is relevant for an OLT and an ONU.')
hpnicfDot3MpcpOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 1, 1, 1, 12), Integer32()).setUnits('TQ (16nsec)').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3MpcpOnTime.setReference('[802.3ah], 64.3.5.1.')
if mibBuilder.loadTexts: hpnicfDot3MpcpOnTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3MpcpOnTime.setDescription('A read-only value that reports the -on time- for a grant burst in increments of Time Quanta (TQ) 16ns as defined in [802.3ah] 60,64. The value returned shall be (on time ns)/16. If this value exceeds (2^32-1) the value (2^32-1) shall be returned. This attribute is relevant for an OLT and an ONU.')
hpnicfDot3MpcpOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 1, 1, 1, 13), Integer32()).setUnits('TQ (16nsec)').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3MpcpOffTime.setReference('[802.3ah], 64.3.5.1.')
if mibBuilder.loadTexts: hpnicfDot3MpcpOffTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3MpcpOffTime.setDescription('A read-only value that reports the -off time- for a grant burst in increments of Time Quanta (TQ) 16ns as defined in [802.3ah] 60,64. The value returned shall be (off time ns)/16. If this value exceeds (2^32-1) the value (2^32-1) shall be returned. This attribute is relevant for an OLT and an ONU.')
hpnicfDot3MpcpSyncTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 1, 1, 1, 14), Integer32()).setUnits('TQ (16nsec)').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3MpcpSyncTime.setReference('[802.3ah], 64.3.3.2.')
if mibBuilder.loadTexts: hpnicfDot3MpcpSyncTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3MpcpSyncTime.setDescription('A read-only value that reports the -sync lock time- for an OLT receiver in increments of Time Quanta (TQ) 16ns as defined in [802.3ah] 60,64,65. The value returned shall be (sync lock time ns)/16. If this value exceeds (2^32-1) the value (2^32-1) shall be returned. This attribute is relevant for an OLT and an ONU.')
hpnicfDot3MpcpStatTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 1, 2), )
if mibBuilder.loadTexts: hpnicfDot3MpcpStatTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3MpcpStatTable.setDescription('This table defines the list of statistics counters of [802.3ah] clause 64 MPCP interface.')
hpnicfDot3MpcpStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfDot3MpcpStatEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3MpcpStatEntry.setDescription('Table entries for table of statistics counters of [802.3ah] clause 64 MPCP interface.')
hpnicfDot3MpcpMACCtrlFramesTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 1, 2, 1, 1), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3MpcpMACCtrlFramesTransmitted.setReference('[802.3ah], 30.3.5.1.7.')
if mibBuilder.loadTexts: hpnicfDot3MpcpMACCtrlFramesTransmitted.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3MpcpMACCtrlFramesTransmitted.setDescription('A count of MPCP frames passed to the MAC sublayer for transmission. This counter is incremented when a MA_CONTROL.request service primitive is generated within the MAC control sublayer with an opcode indicating a MPCP frame. This attribute is relevant for an OLT and an ONU.')
hpnicfDot3MpcpMACCtrlFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 1, 2, 1, 2), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3MpcpMACCtrlFramesReceived.setReference('[802.3ah], 30.3.5.1.8.')
if mibBuilder.loadTexts: hpnicfDot3MpcpMACCtrlFramesReceived.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3MpcpMACCtrlFramesReceived.setDescription('A count of MPCP frames passed by the MAC sublayer to the MAC Control sublayer. This counter is incremented when a ReceiveFrame function call returns a valid frame with: (1) a lengthOrType field value equal to the reserved Type for 802.3_MAC_Control as specified in 31.4.1.3, and (2) an opcode indicating a MPCP frame. This attribute is relevant for an OLT and an ONU.')
hpnicfDot3MpcpDiscoveryWindowsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3MpcpDiscoveryWindowsSent.setReference('[802.3ah], 30.3.5.1.22.')
if mibBuilder.loadTexts: hpnicfDot3MpcpDiscoveryWindowsSent.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3MpcpDiscoveryWindowsSent.setDescription('A count of discovery windows generated. The counter is incremented by one for each generated discovery window. This attribute is relevant for an OLT and an ONU. At the ONU value should be zero.')
hpnicfDot3MpcpDiscoveryTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3MpcpDiscoveryTimeout.setReference('[802.3ah], 30.3.5.1.23.')
if mibBuilder.loadTexts: hpnicfDot3MpcpDiscoveryTimeout.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3MpcpDiscoveryTimeout.setDescription('A count of the number of times a discovery timeout occurs. Increment the counter by one for each discovery processing state-machine reset resulting from timeout waiting for message arrival. This attribute is relevant for an OLT and an ONU.')
hpnicfDot3MpcpTxRegRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 1, 2, 1, 5), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3MpcpTxRegRequest.setReference('[802.3ah], 30.3.5.1.12.')
if mibBuilder.loadTexts: hpnicfDot3MpcpTxRegRequest.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3MpcpTxRegRequest.setDescription('A count of the number of times a REGISTER_REQ MPCP frames transmission occurs. Increment the counter by one for each REGISTER_REQ MPCP frame transmitted as defined in [802.3ah] clause 64. This counter is mandatory for an ONU. This attribute is relevant for an OLT and an ONU. At the OLT value should be zero.')
hpnicfDot3MpcpRxRegRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 1, 2, 1, 6), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3MpcpRxRegRequest.setReference('[802.3ah], 30.3.5.1.17.')
if mibBuilder.loadTexts: hpnicfDot3MpcpRxRegRequest.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3MpcpRxRegRequest.setDescription('A count of the number of times a REGISTER_REQ MPCP frames reception occurs. A single counter at the ONU and a set of counters, one for each LLID, at the OLT. Increment the counter by one for each REGISTER_REQ MPCP frame received for each LLID as defined in [802.3ah] clause 64. This counter is mandatory for an ONU and for an OLT. At the ONU value should be zero.')
hpnicfDot3MpcpTxRegAck = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 1, 2, 1, 7), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3MpcpTxRegAck.setReference('[802.3ah], 30.3.5.1.10.')
if mibBuilder.loadTexts: hpnicfDot3MpcpTxRegAck.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3MpcpTxRegAck.setDescription('A count of the number of times a REGISTER_ACK MPCP frames transmission occurs. Increment the counter by one for each REGISTER_ACK MPCP frame transmitted as defined in [802.3ah] clause 64. This counter is mandatory for an ONU. This attribute is relevant for an OLT and an ONU. At the OLT the value should be zero.')
hpnicfDot3MpcpRxRegAck = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 1, 2, 1, 8), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3MpcpRxRegAck.setReference('[802.3ah], 30.3.5.1.15.')
if mibBuilder.loadTexts: hpnicfDot3MpcpRxRegAck.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3MpcpRxRegAck.setDescription('A count of the number of times a REGISTER_ACK MPCP frames reception occurs. A single counter at the ONU and a set of counters, one for each LLID, at the OLT. Increment the counter by one for each REGISTER_ACK MPCP frame received for each LLID, as defined in [802.3ah] clause 64. This counter is mandatory for an ONU and for an OLT. At the ONU the value should be zero.')
hpnicfDot3MpcpTxReport = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 1, 2, 1, 9), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3MpcpTxReport.setReference('[802.3ah], 30.3.5.1.13.')
if mibBuilder.loadTexts: hpnicfDot3MpcpTxReport.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3MpcpTxReport.setDescription('A count of the number of times a REPORT MPCP frames transmission occurs. Increment the counter by one for each REPORT MPCP frame transmitted as defined in [802.3ah] clause 64. This counter is mandatory for an ONU. This attribute is relevant for an OLT and an ONU. At the OLT value should be zero.')
hpnicfDot3MpcpRxReport = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 1, 2, 1, 10), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3MpcpRxReport.setReference('[802.3ah], 30.3.5.1.18.')
if mibBuilder.loadTexts: hpnicfDot3MpcpRxReport.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3MpcpRxReport.setDescription('A count of the number of times a REPORT MPCP frames reception occurs. A single counter at the ONU and a set of counters, one for each LLID, at the OLT. Increment the counter by one for each REPORT MPCP frame received for each LLID, as defined in [802.3ah] clause 64. This counter is mandatory for an ONU and for an OLT. At the ONU value should be zero.')
hpnicfDot3MpcpTxGate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 1, 2, 1, 11), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3MpcpTxGate.setReference('[802.3ah], 30.3.5.1.9.')
if mibBuilder.loadTexts: hpnicfDot3MpcpTxGate.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3MpcpTxGate.setDescription('A count of the number of times a GATE MPCP frames transmission occurs. A set of counters, one for each LLID, at the OLT. Increment the counter by one for each GATE MPCP frame transmitted, for each LLID, as defined in [802.3ah] clause 64. This counter is mandatory for an OLT. This attribute is relevant for an OLT and an ONU. At the ONU the value should be zero.')
hpnicfDot3MpcpRxGate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 1, 2, 1, 12), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3MpcpRxGate.setReference('[802.3ah], 30.3.5.1.14.')
if mibBuilder.loadTexts: hpnicfDot3MpcpRxGate.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3MpcpRxGate.setDescription('A count of the number of times a GATE MPCP frames reception occurs. A single counter at the ONU and a set of counters, one for each LLID ,at the OLT. Increment the counter by one for each GATE MPCP frame received, for each LLID, as defined in [802.3ah] clause 64. This counter is mandatory for an ONU and for an OLT. At the OLT the value should be zero.')
hpnicfDot3MpcpTxRegister = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 1, 2, 1, 13), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3MpcpTxRegister.setReference('[802.3ah], 30.3.5.1.11.')
if mibBuilder.loadTexts: hpnicfDot3MpcpTxRegister.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3MpcpTxRegister.setDescription('A count of the number of times a REGISTER MPCP frames transmission occurs. A set of counters, one for each LLID, at the OLT. Increment the counter by one for each REGISTER MPCP frame transmitted, for each LLID, as defined in [802.3ah] clause 64. This counter is mandatory for an OLT. This attribute is relevant for an OLT and an ONU. At the ONU the value should be zero.')
hpnicfDot3MpcpRxRegister = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 1, 2, 1, 14), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3MpcpRxRegister.setReference('[802.3ah], 30.3.5.1.16.')
if mibBuilder.loadTexts: hpnicfDot3MpcpRxRegister.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3MpcpRxRegister.setDescription('A count of the number of times a REGISTER MPCP frames reception occurs. A single counter at the ONU and a set of counters, one for each LLID, at the OLT. Increment the counter by one for each REGISTER MPCP frame received, for each LLID, as defined in [802.3ah] clause 64. This counter is mandatory for an ONU and for an OLT. at the OLT the value should be zero.')
hpnicfDot3MpcpRxNotSupportedMPCP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 1, 2, 1, 15), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3MpcpRxNotSupportedMPCP.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3MpcpRxNotSupportedMPCP.setDescription('A count of the number of times a non-supported MPCP frames reception occurs. A single counter at the ONU and a set of counters, one for each LLID, at the OLT. Increment the counter by one for each non-supported MPCP frame received, for each LLID, as defined in [802.3ah] clause 64. This counter is mandatory for an ONU and for an OLT.')
hpnicfDot3MpcpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 2, 1))
hpnicfDot3MpcpGroupBase = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 2, 1, 1)).setObjects(("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3MpcpID"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3MpcpOperStatus"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3MpcpMode"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3MpcpLinkID"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3MpcpRemoteMACAddress"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3MpcpRegistrationState"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3MpcpMaximumPendingGrants"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3MpcpAdminState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfDot3MpcpGroupBase = hpnicfDot3MpcpGroupBase.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3MpcpGroupBase.setDescription('A collection of objects of dot3 Mpcp Basic entity state definition.')
hpnicfDot3MpcpGroupParam = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 2, 1, 2)).setObjects(("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3MpcpTransmitElapsed"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3MpcpReceiveElapsed"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3MpcpRoundTripTime"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3MpcpOnTime"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3MpcpOffTime"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3MpcpSyncTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfDot3MpcpGroupParam = hpnicfDot3MpcpGroupParam.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3MpcpGroupParam.setDescription('A collection of objects of dot3 Mpcp for P2MP parameters.')
hpnicfDot3MpcpGroupStat = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 2, 1, 3)).setObjects(("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3MpcpMACCtrlFramesTransmitted"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3MpcpMACCtrlFramesReceived"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3MpcpDiscoveryWindowsSent"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3MpcpDiscoveryTimeout"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3MpcpTxRegRequest"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3MpcpRxRegRequest"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3MpcpTxRegAck"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3MpcpRxRegAck"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3MpcpTxReport"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3MpcpRxReport"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3MpcpTxGate"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3MpcpRxGate"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3MpcpTxRegister"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3MpcpRxRegister"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3MpcpRxNotSupportedMPCP"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfDot3MpcpGroupStat = hpnicfDot3MpcpGroupStat.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3MpcpGroupStat.setDescription('A collection of objects of dot3 Mpcp Statistics')
hpnicfDot3MpcpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 2, 2))
hpnicfDot3MpcpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 1, 2, 2, 1)).setObjects(("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3MpcpGroupBase"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3MpcpGroupParam"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3MpcpGroupStat"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfDot3MpcpCompliance = hpnicfDot3MpcpCompliance.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3MpcpCompliance.setDescription('The compliance statement for Multi-point control protocol interfaces.')
hpnicfDot3OmpEmulationMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 2))
hpnicfDot3OmpEmulationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 2, 1))
hpnicfDot3OmpeConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 2, 2))
hpnicfDot3OmpEmulationTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 2, 1, 1), )
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationTable.setDescription('Table for dot3 OmpEmulation MIB modules.')
hpnicfDot3OmpEmulationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 2, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationEntry.setDescription('An entry in the dot3 OmpEmulation MIB modules table.')
hpnicfDot3OmpEmulationID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationID.setReference('[802.3ah], 30.3.7.1.1.')
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationID.setDescription('The value of hpnicfDot3OmpEmulationID is assigned so as to uniquely identify a OMPEmulation entity among the subordinate managed objects of the containing object. The value is mandated for an ONU.')
hpnicfDot3OmpEmulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("olt", 2), ("onu", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationType.setReference('[802.3ah], 30.3.7.1.2.')
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationType.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationType.setDescription('A read-only value that indicates that mode of operation of the Reconciliation Sublayer for Point to Point Emulation (see [802.3ah] clause 65.1). unknown(1) value is assigned in initializing, true state or type not yet known. olt(2) value is assigned when Sublayer operating in OLT mode. onu(3) value is assigned when Sublayer operating in ONU mode.')
hpnicfDot3OmpEmulationStatTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 2, 1, 2), )
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationStatTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationStatTable.setDescription('This table defines the list of statistics counters of [802.3ah] clause 65 OMP interface.')
hpnicfDot3OmpEmulationStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 2, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationStatEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationStatEntry.setDescription('Table entries for Table of statistics counters of [802.3ah] clause 65 OMP interface.')
hpnicfDot3OmpEmulationSLDErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 2, 1, 2, 1, 1), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationSLDErrors.setReference('[802.3ah], 30.3.7.1.3.')
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationSLDErrors.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationSLDErrors.setDescription('A count of frames received that do not contain a valid SLD field as defined in [802.3ah] clause 65.1.3.3.1. This attribute is mandatory for an OLT and optional for an ONU.')
hpnicfDot3OmpEmulationCRC8Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 2, 1, 2, 1, 2), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationCRC8Errors.setReference('[802.3ah], 30.3.7.1.4.')
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationCRC8Errors.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationCRC8Errors.setDescription('A count of frames received that contain a valid SLD field, as defined in [802.3ah] clause 65.1.3.3.1, but do not pass the CRC-8 check as defined in [802.3ah] clause 65.1.3.3.3. This attribute is mandatory for an OLT and for an ONU.')
hpnicfDot3OmpEmulationBadLLID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 2, 1, 2, 1, 3), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationBadLLID.setReference('[802.3ah], 30.3.7.1.8.')
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationBadLLID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationBadLLID.setDescription('A count of frames received that contain a valid SLD field, as defined in [802.3ah] clause 65.1.3.3.1, and pass the CRC-8 check, as defined in [802.3ah] clause 65.1.3.3.3, but are discarded due to the LLID check as defined in [802.3ah] clause 65.1.3.3.2. This attribute is relevant for an OLT and an ONU.')
hpnicfDot3OmpEmulationGoodLLID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 2, 1, 2, 1, 4), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationGoodLLID.setReference('[802.3ah], 30.3.7.1.5.')
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationGoodLLID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationGoodLLID.setDescription('A count of frames received that contain a valid SLD field, as defined in [802.3ah] clause 65.1.3.3.1, and pass the CRC-8 check, as defined in [802.3ah] clause 65.1.3.3.3. This attribute is relevant for an OLT and an ONU.')
hpnicfDot3OmpEmulationOnuPonCastLLID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 2, 1, 2, 1, 5), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationOnuPonCastLLID.setReference('[802.3ah], 30.3.7.1.6.')
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationOnuPonCastLLID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationOnuPonCastLLID.setDescription('A count of frames received that contain a valid SLD field in an ONU, as defined in [802.3ah] 65.1.3.3.1, passes the CRC-8 check, as defined in [802.3ah] 65.1.3.3.3, and the frame meets the rule for acceptance defined in [802.3ah] 65.1.3.3.2.')
hpnicfDot3OmpEmulationOltPonCastLLID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 2, 1, 2, 1, 6), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationOltPonCastLLID.setReference('[802.3ah], 30.3.7.1.7.')
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationOltPonCastLLID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationOltPonCastLLID.setDescription('A count of frames received that contain a valid SLD field in an OLT, as defined in [802.3ah] 65.1.3.3.1, passes the CRC-8 check, as defined in [802.3ah] 65.1.3.3.3, and the frame meets the rule for acceptance defined in [802.3ah] 65.1.3.3.2.')
hpnicfDot3OmpEmulationBroadcastLLIDNotOnuID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 2, 1, 2, 1, 7), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationBroadcastLLIDNotOnuID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationBroadcastLLIDNotOnuID.setDescription('A count of frames received that contain a valid SLD field in a OLT, as defined in [802.3ah] clause 65.1.3.3.1, and pass the CRC-8 check, as defined in [802.3ah] clause 65.1.3.3.3, and contain broadcast LLID as defined in [802.3ah] clause 65. This attribute is mandatory for an OLT and for an ONU.')
hpnicfDot3OmpEmulationOnuLLIDNotBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 2, 1, 2, 1, 8), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationOnuLLIDNotBroadcast.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationOnuLLIDNotBroadcast.setDescription("A count of frames received that contain a valid SLD field in a OLT, as defined in [802.3ah] clause 65.1.3.3.1, and pass the CRC-8 check, as defined in [802.3ah] clause 65.1.3.3.3, and contain the ONU's LLID as defined in [802.3ah] clause 65. This attribute is mandatory for an ONU and mandatory for an OLT (a counter per LLID).")
hpnicfDot3OmpEmulationBroadcastLLIDPlusOnuId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 2, 1, 2, 1, 9), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationBroadcastLLIDPlusOnuId.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationBroadcastLLIDPlusOnuId.setDescription("A count of frames received that contain a valid SLD field in a OLT, as defined in [802.3ah] clause 65.1.3.3.1, and pass the CRC-8 check, as defined in [802.3ah] clause 65.1.3.3.3, and contain the broadcast LLID plus ONU's LLID (frame reflected) as defined in [802.3ah] clause 65. This attribute is mandatory for an ONU and mandatory for an OLT (a counter per LLID).")
hpnicfDot3OmpEmulationNotBroadcastLLIDNotOnuId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 2, 1, 2, 1, 10), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationNotBroadcastLLIDNotOnuId.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3OmpEmulationNotBroadcastLLIDNotOnuId.setDescription("A count of frames received that contain a valid SLD field in a OLT, as defined in [802.3ah] clause 65.1.3.3.1, and pass the CRC-8 check, as defined in [802.3ah] clause 65.1.3.3.3, and does not contain the ONU's LLID as defined in [802.3ah] clause 65. This attribute is mandatory for an ONU")
hpnicfDot3OmpeGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 2, 2, 1))
hpnicfDot3OmpeGroupID = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 2, 2, 1, 1)).setObjects(("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3OmpEmulationID"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3OmpEmulationType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfDot3OmpeGroupID = hpnicfDot3OmpeGroupID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3OmpeGroupID.setDescription('A collection of objects of dot3 OMP emulation ID entity state definition.')
hpnicfDot3OmpeGroupStat = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 2, 2, 1, 2)).setObjects(("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3OmpEmulationSLDErrors"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3OmpEmulationCRC8Errors"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3OmpEmulationBadLLID"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3OmpEmulationGoodLLID"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3OmpEmulationOnuPonCastLLID"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3OmpEmulationOltPonCastLLID"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3OmpEmulationBroadcastLLIDNotOnuID"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3OmpEmulationOnuLLIDNotBroadcast"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3OmpEmulationBroadcastLLIDPlusOnuId"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3OmpEmulationNotBroadcastLLIDNotOnuId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfDot3OmpeGroupStat = hpnicfDot3OmpeGroupStat.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3OmpeGroupStat.setDescription('A collection of objects of dot3 OMP emulation Statistics')
hpnicfDot3OmpeCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 2, 2, 2))
hpnicfDot3OmpeCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 2, 2, 2, 1)).setObjects(("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3OmpeGroupID"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3OmpeGroupStat"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfDot3OmpeCompliance = hpnicfDot3OmpeCompliance.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3OmpeCompliance.setDescription('The compliance statement for OMPEmulation interfaces.')
hpnicfDot3EponMauMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 3))
hpnicfDot3EponMauObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 3, 1))
hpnicfDot3EponMauConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 3, 2))
hpnicfDot3EponMauTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 3, 1, 1), )
if mibBuilder.loadTexts: hpnicfDot3EponMauTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3EponMauTable.setDescription('Table for dot3 MAU EPON MIB modules.')
hpnicfDot3EponMauEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 3, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfDot3EponMauEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3EponMauEntry.setDescription('An entry in the dot3 MAU EPON MIB modules table.')
hpnicfDot3EponMauPCSCodingViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 3, 1, 1, 1, 1), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3EponMauPCSCodingViolation.setReference('[802.3ah], 30.5.1.1.12.')
if mibBuilder.loadTexts: hpnicfDot3EponMauPCSCodingViolation.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3EponMauPCSCodingViolation.setDescription('For 100 Mb/ s operation it is a count of the number of times an invalid code-group is received, other than the /H/ code-group. For 1000 Mb/ s operation it is a count of the number of times an invalid codegroup is received, other than the /V/ code-group.')
hpnicfDot3EponMauFecAbility = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("nonsupported", 2), ("supported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3EponMauFecAbility.setReference('[802.3ah], 30.5.1.1.13.')
if mibBuilder.loadTexts: hpnicfDot3EponMauFecAbility.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3EponMauFecAbility.setDescription('A read-only value that indicates the support of operation of the 1000BASE-PX PHY optional FEC Sublayer for Forward error correction see [802.3ah] clause 65.2). unknown(1) value is assigned in initializing, for non FEC support state or type not yet known. nonsupported(2) value is assigned when Sublayer is not support. supported(3) value is assigned when Sublayer is supported.')
hpnicfDot3EponMauFecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("enabled", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot3EponMauFecMode.setReference('[802.3ah], 30.5.1.1.14.')
if mibBuilder.loadTexts: hpnicfDot3EponMauFecMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3EponMauFecMode.setDescription('A read-write value that indicates the mode of operation of the 1000BASE-PX PHY optional FEC Sublayer for Forward error correction see [802.3ah] clause 65.2). A GET operation returns the current mode of operation the PHY. A SET operation changes the mode of operation of the PHY to the indicated value. unknown(1) value is assigned in initializing, for non FEC support state or type not yet known. disabled(2) value is assigned when Sublayer operating in disabled mode. enabled(3) value is assigned when Sublayer operating in FEC mode. writing can be done all the time.')
hpnicfDot3EponMauFECCorrectedBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 3, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3EponMauFECCorrectedBlocks.setReference('[802.3ah], 30.5.1.1.15.')
if mibBuilder.loadTexts: hpnicfDot3EponMauFECCorrectedBlocks.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3EponMauFECCorrectedBlocks.setDescription('For 10PASS-TS, 2BASE-TL and 1000BASE-PX PHYs, a count of corrected FEC blocks. This counter will not increment for other PHY Types. Increment the counter by one for each received block that is corrected by the FEC function in the PHY.')
hpnicfDot3EponMauFECUncorrectableBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 3, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3EponMauFECUncorrectableBlocks.setReference('[802.3ah], 30.5.1.1.16.')
if mibBuilder.loadTexts: hpnicfDot3EponMauFECUncorrectableBlocks.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3EponMauFECUncorrectableBlocks.setDescription('For 10PASS-TS, 2BASE-TL and 1000BASE-PX PHYs, a count of uncorrectable FEC blocks. This counter will not increment for other PHY Types. Increment the counter by one for each FEC block that is determined to be uncorrectable by the FEC function in the PHY.')
hpnicfDot3EponMauBufferHeadCodingViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 3, 1, 1, 1, 6), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot3EponMauBufferHeadCodingViolation.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3EponMauBufferHeadCodingViolation.setDescription('For 1000 Mbps operation it is a counts of the number of invalid code-group received directly from the link.')
hpnicfDot3EponMauType = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 3, 3))
hpnicfEponMauType1000BasePXOLT = ObjectIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 3, 3, 1))
if mibBuilder.loadTexts: hpnicfEponMauType1000BasePXOLT.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponMauType1000BasePXOLT.setDescription('Multipoint MAC Control (per 802.3 section 64,65) OLT (master), unknown PMD')
if mibBuilder.loadTexts: hpnicfEponMauType1000BasePXOLT.setReference('[802.3ah], 30.5.1.1.2.')
hpnicfEponMauType1000BasePXONU = ObjectIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 3, 3, 2))
if mibBuilder.loadTexts: hpnicfEponMauType1000BasePXONU.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponMauType1000BasePXONU.setDescription('Multipoint MAC Control (per 802.3 section 64,65),ONU (slave), unknown PMD')
if mibBuilder.loadTexts: hpnicfEponMauType1000BasePXONU.setReference('[802.3ah], 30.5.1.1.2.')
hpnicfEponMauType1000BasePX10DOLT = ObjectIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 3, 3, 3))
if mibBuilder.loadTexts: hpnicfEponMauType1000BasePX10DOLT.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponMauType1000BasePX10DOLT.setDescription('EPON over 10K link, downlink (per 802.3 section 60), OLT side')
if mibBuilder.loadTexts: hpnicfEponMauType1000BasePX10DOLT.setReference('[802.3ah], 30.5.1.1.2.')
hpnicfEponMauType1000BasePX10DONU = ObjectIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 3, 3, 4))
if mibBuilder.loadTexts: hpnicfEponMauType1000BasePX10DONU.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponMauType1000BasePX10DONU.setDescription('EPON over 10K link, downlink (per 802.3 section 60), ONU side')
if mibBuilder.loadTexts: hpnicfEponMauType1000BasePX10DONU.setReference('[802.3ah], 30.5.1.1.2.')
hpnicfEponMauType1000BasePX10UOLT = ObjectIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 3, 3, 5))
if mibBuilder.loadTexts: hpnicfEponMauType1000BasePX10UOLT.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponMauType1000BasePX10UOLT.setDescription('EPON over 10K link, uplink (per 802.3 section 60), OLT side')
if mibBuilder.loadTexts: hpnicfEponMauType1000BasePX10UOLT.setReference('[802.3ah], 30.5.1.1.2.')
hpnicfEponMauType1000BasePX10UONU = ObjectIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 3, 3, 6))
if mibBuilder.loadTexts: hpnicfEponMauType1000BasePX10UONU.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponMauType1000BasePX10UONU.setDescription('EPON over 10K link, uplink (per 802.3 section 60), ONU side')
if mibBuilder.loadTexts: hpnicfEponMauType1000BasePX10UONU.setReference('[802.3ah], 30.5.1.1.2.')
hpnicfEponMauType1000BasePX20DOLT = ObjectIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 3, 3, 7))
if mibBuilder.loadTexts: hpnicfEponMauType1000BasePX20DOLT.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponMauType1000BasePX20DOLT.setDescription('EPON over 20K link, downlink (per 802.3 section 60), OLT side')
if mibBuilder.loadTexts: hpnicfEponMauType1000BasePX20DOLT.setReference('[802.3ah], 30.5.1.1.2.')
hpnicfEponMauType1000BasePX20DONU = ObjectIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 3, 3, 8))
if mibBuilder.loadTexts: hpnicfEponMauType1000BasePX20DONU.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponMauType1000BasePX20DONU.setDescription('EPON over 20K link, downlink (per 802.3 section 60), ONU side')
if mibBuilder.loadTexts: hpnicfEponMauType1000BasePX20DONU.setReference('[802.3ah], 30.5.1.1.2.')
hpnicfEponMauType1000BasePX20UOLT = ObjectIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 3, 3, 9))
if mibBuilder.loadTexts: hpnicfEponMauType1000BasePX20UOLT.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponMauType1000BasePX20UOLT.setDescription('EPON over 20K link, uplink (per 802.3 section 60), OLT side')
if mibBuilder.loadTexts: hpnicfEponMauType1000BasePX20UOLT.setReference('[802.3ah], 30.5.1.1.2.')
hpnicfEponMauType1000BasePX20UONU = ObjectIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 3, 3, 10))
if mibBuilder.loadTexts: hpnicfEponMauType1000BasePX20UONU.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponMauType1000BasePX20UONU.setDescription('EPON over 20K link, uplink (per 802.3 section 60), ONU side')
if mibBuilder.loadTexts: hpnicfEponMauType1000BasePX20UONU.setReference('[802.3ah], 30.5.1.1.2.')
hpnicfDot3EponMauGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 3, 2, 1))
hpnicfDot3EponMauGroupAll = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 3, 2, 1, 1)).setObjects(("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3EponMauPCSCodingViolation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfDot3EponMauGroupAll = hpnicfDot3EponMauGroupAll.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3EponMauGroupAll.setDescription('A collection of objects of dot3 MAU definition.')
hpnicfDot3EponMauGroupFEC = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 3, 2, 1, 2)).setObjects(("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3EponMauFecAbility"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3EponMauFecMode"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3EponMauFECCorrectedBlocks"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3EponMauFECUncorrectableBlocks"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3EponMauBufferHeadCodingViolation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfDot3EponMauGroupFEC = hpnicfDot3EponMauGroupFEC.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3EponMauGroupFEC.setDescription('A collection of objects of FEC group definition.')
hpnicfDot3EponMauCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 3, 2, 2))
hpnicfDot3EponMauCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 2, 3, 2, 2, 1)).setObjects(("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3EponMauGroupAll"), ("HPN-ICF-DOT3-EFM-EPON-MIB", "hpnicfDot3EponMauGroupFEC"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfDot3EponMauCompliance = hpnicfDot3EponMauCompliance.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot3EponMauCompliance.setDescription('The compliance statement for MAU EPON interfaces.')
mibBuilder.exportSymbols("HPN-ICF-DOT3-EFM-EPON-MIB", hpnicfDot3MpcpLinkID=hpnicfDot3MpcpLinkID, hpnicfDot3MpcpObjects=hpnicfDot3MpcpObjects, hpnicfDot3MpcpRxRegRequest=hpnicfDot3MpcpRxRegRequest, hpnicfDot3OmpeGroups=hpnicfDot3OmpeGroups, hpnicfDot3EfmeponMIB=hpnicfDot3EfmeponMIB, hpnicfDot3EponMauConformance=hpnicfDot3EponMauConformance, hpnicfDot3EponMauFECCorrectedBlocks=hpnicfDot3EponMauFECCorrectedBlocks, hpnicfEponMauType1000BasePX10UONU=hpnicfEponMauType1000BasePX10UONU, hpnicfDot3OmpeCompliance=hpnicfDot3OmpeCompliance, hpnicfDot3OmpEmulationMIB=hpnicfDot3OmpEmulationMIB, hpnicfDot3OmpeCompliances=hpnicfDot3OmpeCompliances, hpnicfDot3EponMauMIB=hpnicfDot3EponMauMIB, hpnicfDot3MpcpDiscoveryWindowsSent=hpnicfDot3MpcpDiscoveryWindowsSent, hpnicfDot3EponMauCompliances=hpnicfDot3EponMauCompliances, hpnicfEponMauType1000BasePX20UOLT=hpnicfEponMauType1000BasePX20UOLT, hpnicfDot3MpcpRegistrationState=hpnicfDot3MpcpRegistrationState, hpnicfDot3MpcpSyncTime=hpnicfDot3MpcpSyncTime, hpnicfDot3MpcpOffTime=hpnicfDot3MpcpOffTime, hpnicfDot3MpcpTable=hpnicfDot3MpcpTable, hpnicfDot3EponMauGroups=hpnicfDot3EponMauGroups, hpnicfEponMauType1000BasePX20DOLT=hpnicfEponMauType1000BasePX20DOLT, hpnicfDot3MpcpRemoteMACAddress=hpnicfDot3MpcpRemoteMACAddress, hpnicfDot3OmpEmulationBroadcastLLIDNotOnuID=hpnicfDot3OmpEmulationBroadcastLLIDNotOnuID, hpnicfDot3OmpEmulationObjects=hpnicfDot3OmpEmulationObjects, hpnicfDot3OmpeConformance=hpnicfDot3OmpeConformance, hpnicfDot3OmpEmulationStatEntry=hpnicfDot3OmpEmulationStatEntry, hpnicfDot3MpcpTxRegRequest=hpnicfDot3MpcpTxRegRequest, hpnicfDot3MpcpGroupStat=hpnicfDot3MpcpGroupStat, hpnicfDot3OmpEmulationGoodLLID=hpnicfDot3OmpEmulationGoodLLID, hpnicfDot3EponMauGroupAll=hpnicfDot3EponMauGroupAll, hpnicfDot3MpcpTxRegAck=hpnicfDot3MpcpTxRegAck, hpnicfDot3OmpEmulationStatTable=hpnicfDot3OmpEmulationStatTable, hpnicfDot3MpcpRxNotSupportedMPCP=hpnicfDot3MpcpRxNotSupportedMPCP, hpnicfDot3MpcpStatTable=hpnicfDot3MpcpStatTable, hpnicfDot3MpcpCompliance=hpnicfDot3MpcpCompliance, hpnicfDot3OmpEmulationBadLLID=hpnicfDot3OmpEmulationBadLLID, hpnicfDot3EponMauFecMode=hpnicfDot3EponMauFecMode, hpnicfEponMauType1000BasePX20DONU=hpnicfEponMauType1000BasePX20DONU, hpnicfDot3MpcpRxGate=hpnicfDot3MpcpRxGate, hpnicfEponMauType1000BasePX20UONU=hpnicfEponMauType1000BasePX20UONU, hpnicfDot3MpcpMode=hpnicfDot3MpcpMode, hpnicfDot3MpcpConformance=hpnicfDot3MpcpConformance, hpnicfDot3MpcpRxRegAck=hpnicfDot3MpcpRxRegAck, hpnicfDot3MpcpAdminState=hpnicfDot3MpcpAdminState, hpnicfDot3MpcpMACCtrlFramesTransmitted=hpnicfDot3MpcpMACCtrlFramesTransmitted, hpnicfDot3OmpEmulationCRC8Errors=hpnicfDot3OmpEmulationCRC8Errors, hpnicfDot3MpcpTxRegister=hpnicfDot3MpcpTxRegister, PYSNMP_MODULE_ID=hpnicfDot3EfmeponMIB, hpnicfDot3MpcpCompliances=hpnicfDot3MpcpCompliances, hpnicfDot3MpcpGroups=hpnicfDot3MpcpGroups, hpnicfDot3OmpEmulationOnuPonCastLLID=hpnicfDot3OmpEmulationOnuPonCastLLID, hpnicfDot3MpcpMaximumPendingGrants=hpnicfDot3MpcpMaximumPendingGrants, hpnicfDot3MpcpRoundTripTime=hpnicfDot3MpcpRoundTripTime, hpnicfDot3OmpEmulationType=hpnicfDot3OmpEmulationType, hpnicfEponMauType1000BasePX10DOLT=hpnicfEponMauType1000BasePX10DOLT, hpnicfDot3MpcpTxReport=hpnicfDot3MpcpTxReport, hpnicfEponMauType1000BasePXOLT=hpnicfEponMauType1000BasePXOLT, hpnicfDot3MpcpEntry=hpnicfDot3MpcpEntry, hpnicfDot3EponMauBufferHeadCodingViolation=hpnicfDot3EponMauBufferHeadCodingViolation, hpnicfDot3MpcpRxRegister=hpnicfDot3MpcpRxRegister, hpnicfDot3MpcpRxReport=hpnicfDot3MpcpRxReport, hpnicfEponMauType1000BasePXONU=hpnicfEponMauType1000BasePXONU, hpnicfDot3EponMauCompliance=hpnicfDot3EponMauCompliance, hpnicfDot3MpcpID=hpnicfDot3MpcpID, hpnicfDot3OmpEmulationTable=hpnicfDot3OmpEmulationTable, hpnicfDot3EponMauType=hpnicfDot3EponMauType, hpnicfDot3MpcpGroupParam=hpnicfDot3MpcpGroupParam, hpnicfDot3OmpEmulationNotBroadcastLLIDNotOnuId=hpnicfDot3OmpEmulationNotBroadcastLLIDNotOnuId, hpnicfDot3OmpeGroupStat=hpnicfDot3OmpeGroupStat, hpnicfDot3EponMauObjects=hpnicfDot3EponMauObjects, hpnicfDot3MpcpGroupBase=hpnicfDot3MpcpGroupBase, hpnicfDot3MpcpReceiveElapsed=hpnicfDot3MpcpReceiveElapsed, hpnicfDot3OmpEmulationSLDErrors=hpnicfDot3OmpEmulationSLDErrors, hpnicfDot3OmpEmulationBroadcastLLIDPlusOnuId=hpnicfDot3OmpEmulationBroadcastLLIDPlusOnuId, hpnicfDot3MpcpDiscoveryTimeout=hpnicfDot3MpcpDiscoveryTimeout, hpnicfDot3OmpeGroupID=hpnicfDot3OmpeGroupID, hpnicfDot3OmpEmulationOnuLLIDNotBroadcast=hpnicfDot3OmpEmulationOnuLLIDNotBroadcast, hpnicfDot3EponMauTable=hpnicfDot3EponMauTable, hpnicfDot3MpcpMACCtrlFramesReceived=hpnicfDot3MpcpMACCtrlFramesReceived, hpnicfDot3EponMauPCSCodingViolation=hpnicfDot3EponMauPCSCodingViolation, hpnicfDot3EponMauFecAbility=hpnicfDot3EponMauFecAbility, hpnicfDot3EponMauEntry=hpnicfDot3EponMauEntry, hpnicfEponMauType1000BasePX10DONU=hpnicfEponMauType1000BasePX10DONU, hpnicfEponMauType1000BasePX10UOLT=hpnicfEponMauType1000BasePX10UOLT, hpnicfDot3MpcpOnTime=hpnicfDot3MpcpOnTime, hpnicfDot3EponMauGroupFEC=hpnicfDot3EponMauGroupFEC, hpnicfDot3EponMauFECUncorrectableBlocks=hpnicfDot3EponMauFECUncorrectableBlocks, hpnicfDot3OmpEmulationEntry=hpnicfDot3OmpEmulationEntry, hpnicfDot3OmpEmulationID=hpnicfDot3OmpEmulationID, hpnicfDot3MpcpMIB=hpnicfDot3MpcpMIB, hpnicfDot3MpcpTransmitElapsed=hpnicfDot3MpcpTransmitElapsed, hpnicfDot3MpcpOperStatus=hpnicfDot3MpcpOperStatus, hpnicfDot3MpcpStatEntry=hpnicfDot3MpcpStatEntry, hpnicfDot3MpcpTxGate=hpnicfDot3MpcpTxGate, hpnicfDot3OmpEmulationOltPonCastLLID=hpnicfDot3OmpEmulationOltPonCastLLID)
