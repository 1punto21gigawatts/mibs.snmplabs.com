#
# PySNMP MIB module AcBoard (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AcBoard
# Produced by pysmi-0.3.4 at Wed May  1 11:33:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, TimeTicks, MibIdentifier, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter64, ModuleIdentity, iso, Unsigned32, Integer32, IpAddress, enterprises, Gauge32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "TimeTicks", "MibIdentifier", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter64", "ModuleIdentity", "iso", "Unsigned32", "Integer32", "IpAddress", "enterprises", "Gauge32", "Counter32")
DateAndTime, TAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TAddress", "DisplayString", "TextualConvention")
audioCodes = MibIdentifier((1, 3, 6, 1, 4, 1, 5003))
acRegistrations = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 7))
acGeneric = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 8))
acProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9))
acBoardMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10))
acBoard = ModuleIdentity((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1))
acBoard.setRevisions(('2004-01-26 11:53',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: acBoard.setRevisionsDescriptions((' Update mib for version 4.4 - obsolete atmSetting and ss7Setting families ',))
if mibBuilder.loadTexts: acBoard.setLastUpdated('201002-01649Z')
if mibBuilder.loadTexts: acBoard.setOrganization('AudioCodes Ltd')
if mibBuilder.loadTexts: acBoard.setContactInfo('Postal: Support AudioCodes LTD 1 Hayarden Street Airport City Lod, ISRAEL 70151 Tel: 972-3-9764000 Fax: 972-3-9764040 Email: support@audiocodes.com Web: www.audiocodes.com')
if mibBuilder.loadTexts: acBoard.setDescription("AudioCodes Proprietary MIB Contains The managed objects of AudioCodes systems. Through this MIB, the User can set up the board configuration parameters, reset the board, and monitor the board's operational robustness and quality of service during run-time. This MIB has the following Groups: boardConfiguration boardInformation channelConfiguration channelStatus notifications reset boardConfiguration: When The user Get Parameter from most of sub-groups in boardConfiguration group, he gets the value that should be burned to the board after the next Remote Reset. He can Set new values to many parameters, and these values will burned to the board after the next remote Reset In the sub-group mGCPDefaultChannelSettings the parameters are the actual parameters, that will take place when opening channel. (Reset is not needed for that sub-group). BoardInformation: Contains Read-only parameters like: board name, serial number, number of channels, software version. ChannelConfiguration: Read-only Parameters to see the configuratin of each channel: voice settings, fax settings, etc. ChannelStatus: Read-only parameters about the status of channel, like: Is the channle active, is it in Silence Period, is it in Fax mode, ON/Off hook, etc. This group contains also counters: packets to DSP, errors, lost packets, underruns, etc. Notifications: In this version, the notification we have are: acEvBoardStarted, and acEvResetingBoard. The board should send these notifications to its manager that the user defined in INI file with the parameter: NMPManagerIP = (IP address). Reset: To remote reset the board, the user should set an integer value to the parameter remoteReset. Then he should get the trap acEvResettingBoard. Note: Before Reset, The current boardConfiguration parameters will be burned to the board. The user should not use INI file, if he wants these parameters to take place. To set the default values, the user should set an integer value to the parameter acSetDefaults. ")
boardConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1))
boardTDMBusSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 1))
pCMLawSelect = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1))).clone(namedValues=NamedValues(("muLaw", 3), ("aLaw", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pCMLawSelect.setStatus('obsolete')
if mibBuilder.loadTexts: pCMLawSelect.setDescription('Selects the type of PCM companding law in input/output TDM bus (TDM bus is defined using the TDMBusType parameter). ')
tDMBusClockSource = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("acTDMBusClockSource-Internal", 1), ("acTDMBusClockSource-MVIP", 3), ("acTDMBusClockSource-Network", 4), ("acTDMBusClockSource-H110-A", 8), ("acTDMBusClockSource-H110-B", 9), ("acTDMBusClockSource-NetReference1", 10), ("acTDMBusClockSource-NetReference2", 11), ("acTDMBusClockSource-SC-2M", 12), ("acTDMBusClockSource-SC-4M", 13), ("acTDMBusClockSource-SC-8M", 14), ("acTDMBusClockSource-BITS", 15), ("acTDMBusClockSource-Network-B", 16), ("acTDMBusClockSource-ATM-OC3", 17), ("acTDMBusClockSource-ATM-OC3-B", 18), ("acTDMBusClockSource-ATM-OC12", 19)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tDMBusClockSource.setStatus('obsolete')
if mibBuilder.loadTexts: tDMBusClockSource.setDescription('Selects the clock source on which the board synchronizes')
tDMBusEnableFallBack = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tDMBusEnableFallBack.setStatus('obsolete')
if mibBuilder.loadTexts: tDMBusEnableFallBack.setDescription('Enable/Disable clock fallback. The Fall Back clock is determined by BSPTDMBusFallbackClock')
tDMBusLocalReference = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 27))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tDMBusLocalReference.setStatus('obsolete')
if mibBuilder.loadTexts: tDMBusLocalReference.setDescription('When ClockSource is set to acH110BusClockSource_Network this parameter selects the TrunkID to be used as the clock synchronization source of the board. When using H.110/H.100 bus this parameter also selects the trunk which is used as the clock source for the NETREF clock generation (in this case ClockSource might not be set to acH110BusClockSource_Network).')
idlePCMPattern = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idlePCMPattern.setStatus('obsolete')
if mibBuilder.loadTexts: idlePCMPattern.setDescription('PCM Pattern applied to E1/T1 timeslot (B-channel) when channel is idle. ')
idleABCD = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idleABCD.setStatus('obsolete')
if mibBuilder.loadTexts: idleABCD.setDescription('ABCD (CAS) Pattern to be applied to CAS signaling bus before changed by the user or PSTN protocol. This is only relevant when using PSTN interface with CAS protocols.')
tDMBusMasterSlaveSelection = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("acTDMBusSlaveMode", 0), ("acTDMBusMasterMode", 1), ("acH110BusSecondaryMasterMode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tDMBusMasterSlaveSelection.setStatus('obsolete')
if mibBuilder.loadTexts: tDMBusMasterSlaveSelection.setDescription('Set SC/MVIP/H.110 to either: Master mode (the board is the clock source for the TDM bus) or Slave mode (some other board in the system must supply the clock to the TDM bus).')
tDMBusNetRefSpeed = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("acTH110BusNetReferenceSpeed-8khz", 0), ("acTH110BusNetReferenceSpeed-20488khz", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tDMBusNetRefSpeed.setStatus('obsolete')
if mibBuilder.loadTexts: tDMBusNetRefSpeed.setDescription('Determine the NetRef frequency (for both generation and synchronization). ')
tDMBusOutputStartingChannel = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tDMBusOutputStartingChannel.setStatus('obsolete')
if mibBuilder.loadTexts: tDMBusOutputStartingChannel.setDescription('Defines the outgoing TDM Timeslot of the first channel (ChannelId=0). The remaining channels are organized sequentially.')
boardTDMBusOutputPort = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardTDMBusOutputPort.setStatus('obsolete')
if mibBuilder.loadTexts: boardTDMBusOutputPort.setDescription("Defines the SC/MVIP/H.100/H.110 port to be used for board's channel #0. All other channels then occupy the next timeslots sequentially")
tDMBusSpeed = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4))).clone(namedValues=NamedValues(("acTDMBusSpeed-2Mbps", 0), ("acTDMBusSpeed-4Mbps", 2), ("acTDMBusSpeed-8Mbps", 3), ("acTDMBusSpeed-16Mbps", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tDMBusSpeed.setStatus('obsolete')
if mibBuilder.loadTexts: tDMBusSpeed.setDescription('Selects the TDM Bus Speed. Speed is set according to the Bus Type. The following are allowed speeds for each bus type: SC = 0/2/3 H.110/H.100 = 3 MVIP = 0')
tDMBusType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 8))).clone(namedValues=NamedValues(("mVIP-BUS", 0), ("sC-BUS", 1), ("uSE-FRAMERS", 2), ("qSLAC-BUS", 3), ("uSE-H110-BUS", 4), ("uSE-EXT-BUS", 5), ("aNALOG-BUS", 6), ("uSE-PSTN-SW-ONLY", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tDMBusType.setStatus('obsolete')
if mibBuilder.loadTexts: tDMBusType.setDescription('Selects the TDM bus interface to be used (only one TDM bus interface can be enabled at one time although more than one can physically exist on the board).')
acOverrideDefaultIdlePCMPattern = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("useDefaults", 0), ("useIdlePCMPattern", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acOverrideDefaultIdlePCMPattern.setStatus('obsolete')
if mibBuilder.loadTexts: acOverrideDefaultIdlePCMPattern.setDescription('Override Default Idle PCM Pattern. 0 - use defaults (0xff-Mulaw, 0x55-Alaw) 1 - use IdlePCMPattern.')
acOverrideDefaultIdleABCDPattern = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("useDefaults", 0), ("useIdleABCDPattern", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acOverrideDefaultIdleABCDPattern.setStatus('obsolete')
if mibBuilder.loadTexts: acOverrideDefaultIdleABCDPattern.setDescription('Description: Override Default Idle ABCD Pattern. 0 - use defaults (0xf) 1 - use IdleABCDPattern.')
networkSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 2))
baseUDPPort = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baseUDPPort.setStatus('obsolete')
if mibBuilder.loadTexts: baseUDPPort.setDescription('Lower boundary of UDP ports to be used by the board. The upper boundary is BoardBaseUDPPort+10*(Number of Channels). Must be a multiple of 10.')
defaultGatewayAddr = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 2, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: defaultGatewayAddr.setStatus('obsolete')
if mibBuilder.loadTexts: defaultGatewayAddr.setDescription("Default Gateway Address. Board's Default Gateway IP address. (in host byte order e.g. 192.10.1.255 = 0xc00a01ff).")
boardIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 2, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardIPAddr.setStatus('obsolete')
if mibBuilder.loadTexts: boardIPAddr.setDescription('Board IP Address. in host byte order e.g. 192.10.1.2 = 0xc00a0102). Users should set the subnet mask to a valid value per the IP address.')
boardSubNetAddr = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 2, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardSubNetAddr.setStatus('obsolete')
if mibBuilder.loadTexts: boardSubNetAddr.setDescription('Board SubNet Address. (in host byte order e.g. 255.255.255.0 = 0xffffff00). default =255.255.255.0.')
acSyslogServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 2, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSyslogServerIP.setStatus('obsolete')
if mibBuilder.loadTexts: acSyslogServerIP.setDescription('IP address in dotted format notation, e.g., 192.10.1.255')
acMGControlProtocolType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 8))).clone(namedValues=NamedValues(("controlProtocol-None", 0), ("controlProtocol-MGCP", 1), ("controlProtocol-MEGACO", 2), ("controlProtocol-H323", 4), ("controlProtocol-SIP", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acMGControlProtocolType.setStatus('obsolete')
if mibBuilder.loadTexts: acMGControlProtocolType.setDescription('This parameter defines the control protocol type 0 = none, 1 = MGCP, 2 = MEGACO, 4 = H323, 8 = SIP')
acSNMPManagerIP = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 2, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSNMPManagerIP.setStatus('obsolete')
if mibBuilder.loadTexts: acSNMPManagerIP.setDescription('SNMP manager server IP address')
acDisableWEBConfig = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDisableWEBConfig.setStatus('obsolete')
if mibBuilder.loadTexts: acDisableWEBConfig.setDescription('Enables or disables Web Configuration 0-Read & Write mode(default) 1-Read Only mode')
acEnableSyslog = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acEnableSyslog.setStatus('obsolete')
if mibBuilder.loadTexts: acEnableSyslog.setDescription('Enable SysLog protocol log.')
acContrlProtocolTransportType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("acCPTransport-UDP-IP", 0), ("acCPTransport-TCP-IP", 1), ("acCPTransport-SCTP-IP", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acContrlProtocolTransportType.setStatus('obsolete')
if mibBuilder.loadTexts: acContrlProtocolTransportType.setDescription('Defines the transport type for the control: 0 - UDP, 1 - TCP (SCTP on road map).')
acCPControlDiffServ = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acCPControlDiffServ.setStatus('obsolete')
if mibBuilder.loadTexts: acCPControlDiffServ.setDescription("Defines the value of the 'DiffServ' field in the IP header for the control session.")
snmpManagers = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 2, 21))
snmpManagersTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 2, 21, 1), )
if mibBuilder.loadTexts: snmpManagersTable.setStatus('obsolete')
if mibBuilder.loadTexts: snmpManagersTable.setDescription('Snmp Managers Table')
snmpManagersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 2, 21, 1, 1), ).setIndexNames((0, "AcBoard", "snmpManagerIndex"))
if mibBuilder.loadTexts: snmpManagersEntry.setStatus('obsolete')
if mibBuilder.loadTexts: snmpManagersEntry.setDescription('')
snmpManagerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 2, 21, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpManagerIndex.setStatus('obsolete')
if mibBuilder.loadTexts: snmpManagerIndex.setDescription('Snmp Manager Index')
snmpManagerIsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 2, 21, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpManagerIsUsed.setStatus('obsolete')
if mibBuilder.loadTexts: snmpManagerIsUsed.setDescription('Enable the SNMP Manager to recieve traps.')
snmpManagerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 2, 21, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpManagerIp.setStatus('obsolete')
if mibBuilder.loadTexts: snmpManagerIp.setDescription('IP address of default SNMP manager in dotted notation format: xxx.xxx.xxx.xxx. SNMP traps are sent to this manager.')
snmpManagerTrapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 2, 21, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpManagerTrapPort.setStatus('obsolete')
if mibBuilder.loadTexts: snmpManagerTrapPort.setDescription('Sets the trap ports to be used by the different managers.')
snmpManagerTrapSendingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 2, 21, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpManagerTrapSendingEnable.setStatus('obsolete')
if mibBuilder.loadTexts: snmpManagerTrapSendingEnable.setDescription('Enable the SNMP Manager to recieve traps.')
acNTPSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 2, 22))
acNTPServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 2, 22, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acNTPServerIPAddress.setStatus('obsolete')
if mibBuilder.loadTexts: acNTPServerIPAddress.setDescription('NTP Server IP address.')
acNTPUtcOffset = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 2, 22, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-43200, 43200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acNTPUtcOffset.setStatus('deprecated')
if mibBuilder.loadTexts: acNTPUtcOffset.setDescription('NTP time to offset in seconds. Default is 0. Range - Between -43200 ot 43200 seconds.')
acNTPUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 2, 22, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acNTPUpdateInterval.setStatus('deprecated')
if mibBuilder.loadTexts: acNTPUpdateInterval.setDescription('NTPupdate interval in seconds. Default is 86400 (24 hours). Not recommended to be set beyond one month (2592000 sec).')
acWEBAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 2, 23))
acWEBAccessTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 2, 23, 1), )
if mibBuilder.loadTexts: acWEBAccessTable.setStatus('obsolete')
if mibBuilder.loadTexts: acWEBAccessTable.setDescription('')
acWEBAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 2, 23, 1, 1), ).setIndexNames((0, "AcBoard", "acWEBAccessIndex"))
if mibBuilder.loadTexts: acWEBAccessEntry.setStatus('obsolete')
if mibBuilder.loadTexts: acWEBAccessEntry.setDescription('')
acWEBAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 2, 23, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acWEBAccessRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: acWEBAccessRowStatus.setDescription('WEB Access row-status')
acWEBAccessAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 2, 23, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acWEBAccessAction.setStatus('obsolete')
if mibBuilder.loadTexts: acWEBAccessAction.setDescription('WEB Access action')
acWEBAccessActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 2, 23, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acWEBAccessActionResult.setStatus('obsolete')
if mibBuilder.loadTexts: acWEBAccessActionResult.setDescription('WEB Access action result')
acWEBAccessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 2, 23, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acWEBAccessIndex.setStatus('obsolete')
if mibBuilder.loadTexts: acWEBAccessIndex.setDescription('WEB Access index')
acWEBAccessUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 2, 23, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 26))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acWEBAccessUserName.setStatus('obsolete')
if mibBuilder.loadTexts: acWEBAccessUserName.setDescription('WEB Access user name')
acWEBAccessUserCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 2, 23, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 26))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acWEBAccessUserCode.setStatus('obsolete')
if mibBuilder.loadTexts: acWEBAccessUserCode.setDescription('WEB Access user code')
auxiliarySettings = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 3))
enableDiagnostics = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("acDiagnostics-Disabled", 0), ("acDiagnostics-BuiltInTest", 1), ("acDiagnostics-BuiltInTestwithPartialFlash", 2), ("acDiagnostics-BuiltInTestWithSDRAM", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableDiagnostics.setStatus('obsolete')
if mibBuilder.loadTexts: enableDiagnostics.setDescription('The EnableDiagnostics checks the correct functionality of different hardware components on the board. Upon completion, the board sends EV_END_BIT which contains information on the results of the test of each hardware component. ')
trunkSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 4))
trunkSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 4, 1), )
if mibBuilder.loadTexts: trunkSettingsTable.setStatus('obsolete')
if mibBuilder.loadTexts: trunkSettingsTable.setDescription('Trunks Table')
trunkSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 4, 1, 1), ).setIndexNames((0, "AcBoard", "trunkId"))
if mibBuilder.loadTexts: trunkSettingsEntry.setStatus('obsolete')
if mibBuilder.loadTexts: trunkSettingsEntry.setDescription('')
trunkId = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkId.setStatus('obsolete')
if mibBuilder.loadTexts: trunkId.setDescription('Trunk ID at board in which the call is taking place ')
clockMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("acCLOCK-MASTER-OFF", 0), ("acCLOCK-MASTER-ON", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clockMaster.setStatus('obsolete')
if mibBuilder.loadTexts: clockMaster.setDescription('Selects the trunk clock source. When choosing acCLOCK_MASTER_OFF (= 0) the clock is recovered from the line. When choosing acCLOCK_MASTER_ON (= 1) the trunk clock source is provided by the internal/TDM bus clock source depending on the TDMBusClockSource parameter.')
framingMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("eXTENDED-SUPER-FRAME", 0), ("sUPER-FRAME", 1), ("e1-FRAMING-DDF", 2), ("e1-FRAMING-MFF-CRC4", 3), ("e1-FRAMING-MFF-CRC4-EXT", 4), ("e1-FRAMING-NIL", 5), ("t1-FRAMING-F4", 6), ("t1-FRAMING-F12", 7), ("t1-FRAMING-ESF", 8), ("t1-FRAMING-ESF-CRC6", 9), ("t1-FRAMING-F72", 10), ("t1-FRAMING-ESF-CRC6-JT", 11), ("t1-FRAMING-NIL", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: framingMethod.setStatus('obsolete')
if mibBuilder.loadTexts: framingMethod.setDescription('Selects the Framing method to be used for this trunk.')
protocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36))).clone(namedValues=NamedValues(("nONE", 0), ("e1EuroISDN", 1), ("t1Cas", 2), ("t1RawCas", 3), ("t1Transparent", 4), ("e1Transparent31", 5), ("e1Transparent30", 6), ("e1Mfcr2", 7), ("e1CasR2", 8), ("e1RawCAS", 9), ("t1-NI2ISDN", 10), ("t1-4EssISDN", 11), ("t1-5Ess-9-ISDN", 12), ("t1-5Ess-10-ISDN", 13), ("t1-Dms100-ISDN", 14), ("j1-TRANSPARENT", 15), ("pROTOCOL-TYPE-T1-NTT-ISDN", 16), ("pROTOCOL-TYPE-E1-AUSTEL-ISDN", 17), ("pROTOCOL-TYPE-E1-HKT-ISDN", 18), ("pROTOCOL-TYPE-E1-KOR-ISDN", 19), ("pROTOCOL-TYPE-T1-HKT-ISDN", 20), ("pROTOCOL-TYPE-E1-QSIG", 21), ("pROTOCOL-TYPE-E1-TNZ-22", 22), ("pROTOCOL-TYPE-T1-EXTRA-23", 23), ("pROTOCOL-TYPE-V5-1-AN", 24), ("pROTOCOL-TYPE-V5-1-LE", 25), ("pROTOCOL-TYPE-V5-2-AN", 26), ("pROTOCOL-TYPE-V5-2-LE", 27), ("pROTOCOL-TYPE-T1-IUA", 28), ("pROTOCOL-TYPE-E1-IUA", 29), ("pROTOCOL-TYPE-E1-EXTRA-30", 30), ("pROTOCOL-TYPE-E1-EXTRA-31", 31), ("pROTOCOL-TYPE-T1-EXTRA-32", 32), ("pROTOCOL-TYPE-T1-EXTRA-33", 33), ("pROTOCOL-TYPE-T1-EURO-ISDN", 34), ("pROTOCOL-TYPE-T1-DMS100-MERIDIAN-ISDN", 35), ("pROTOCOL-TYPE-T1-NI1-ISDN", 36)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: protocolType.setStatus('obsolete')
if mibBuilder.loadTexts: protocolType.setDescription("Protocol Type. Sets the PSTN protocol to be used for this trunk. The protocol type parameter defines the interface and the specific telephony protocol. Each protocol defines the following: 1. E1 or T1 physical line configuration. 2. Fixed connection of the relevant time-slots, which are the Trunks' B-channels, mapping to the 60 (128 for TrunkPack-VoIP/400) DSP channels. This limitation is about to change in versions higher than 3.4. 3. Layer 3 specific telephony protocol or transparent mode of operation. Currently only identical configurations (protocol type, framing method, etc.) for the two trunks are supported.(see at the TrunkPack-VoIP User Manual for available protocols families) relevant only when TDMBusType=FRAMERS. ")
terminationSide = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("acUSER-TERMINATION-SIDE", 0), ("acNETWORK-TERMINATION-SIDE", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminationSide.setStatus('obsolete')
if mibBuilder.loadTexts: terminationSide.setDescription('For ISDN only. select the ISDN Termination side (layer 2)')
dchConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("acDCH-CONFIG-PRIMARY", 0), ("acDCH-CONFIG-BACKUP", 1), ("acDCH-CONFIG-NFAS", 2), ("acDCH-NOT-ISDN-TRUNK", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dchConfig.setStatus('obsolete')
if mibBuilder.loadTexts: dchConfig.setDescription('Defines D-channel configuration. This setting is only applicable to ISDN PRI protocols that support NFAS and/or D-channel backup procedures.')
lineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("acB8ZS", 0), ("acAMI", 1), ("acHDB3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineCode.setStatus('obsolete')
if mibBuilder.loadTexts: lineCode.setDescription('Use to select line code. B8ZS or AMI for T1 spans and HDB3 or AMI for E1 spans. ')
lineBuildOutLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ac0DB", 0), ("ac7-5DB", 1), ("ac15DB", 2), ("ac22-5DB", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineBuildOutLoss.setStatus('obsolete')
if mibBuilder.loadTexts: lineBuildOutLoss.setDescription('Selects the line build out loss to be used for this trunk')
lineBuildOutOverwrite = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("acNO-OVER-WRITE", 0), ("acOVER-WRITE", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineBuildOutOverwrite.setStatus('obsolete')
if mibBuilder.loadTexts: lineBuildOutOverwrite.setDescription("Overwrite the framer's XPM registers values (these registers control the line pulse shape).")
lineBuildOutXPM0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineBuildOutXPM0.setStatus('obsolete')
if mibBuilder.loadTexts: lineBuildOutXPM0.setDescription("Controls the Framer's XPM0 register value (line pulse shape control). Applicable only when TrunkConfig.LineBuildOut.Overwrite=1.Should be used only by expert Users.")
lineBuildOutXPM1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineBuildOutXPM1.setStatus('obsolete')
if mibBuilder.loadTexts: lineBuildOutXPM1.setDescription("Controls the Framer's XPM1 register value (line pulse shape control). Applicable only when TrunkConfig.LineBuildOut.Overwrite=1. Should be used only by expert Users.")
lineBuildOutXPM2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineBuildOutXPM2.setStatus('obsolete')
if mibBuilder.loadTexts: lineBuildOutXPM2.setDescription("Controls the Framer's XPM2 register value (line pulse shape control). Applicable only when TrunkConfig.LineBuildOut.Overwrite=1.Should be used only by expert Users.")
traceLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 15))).clone(namedValues=NamedValues(("acNO-TRACE", 0), ("acFULL-ISDN-TRACE", 1), ("acLAYER3-ISDN-TRACE", 2), ("acONLY-ISDN-Q931-MSGS-TRACE", 3), ("acLAYER3-ISDN-TRACE-NO-DUPLICATION", 4), ("acFULL-ISDN-TRACE-WITH-DUPLICATION", 5), ("acISDN-Q931-RAW-DATA-TRACE", 6), ("acISDN-Q921-RAW-DATA-TRACE", 7), ("acISDN-Q931-Q921-RAW-DATA-TRACE", 8), ("acSS7-MTP2", 10), ("acSS7-MTP2-AND-APPLI", 11), ("acSS7-MTP2-SL-L3-NO-MSU", 12), ("acSS7-AAL", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceLevel.setStatus('obsolete')
if mibBuilder.loadTexts: traceLevel.setDescription('Defines the Protocol Trace level ')
acV5InterfaceTrunkGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acV5InterfaceTrunkGroupId.setStatus('obsolete')
if mibBuilder.loadTexts: acV5InterfaceTrunkGroupId.setDescription('copy from Table 8-1 in LIB manual 4.2beta')
acV5LinkIdOld = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acV5LinkIdOld.setStatus('obsolete')
if mibBuilder.loadTexts: acV5LinkIdOld.setDescription('copy from Table 8-1 in LIB manual 4.2beta')
acPMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMStatus.setStatus('obsolete')
if mibBuilder.loadTexts: acPMStatus.setDescription('performance Monitoring Enable/Disable.')
acLedStatusColor = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("red", 1), ("green", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLedStatusColor.setStatus('obsolete')
if mibBuilder.loadTexts: acLedStatusColor.setDescription('Trunk led status color')
acLedStatusRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("steady", 0), ("blink", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLedStatusRate.setStatus('obsolete')
if mibBuilder.loadTexts: acLedStatusRate.setDescription('Trunk led status blinking rate')
acIsdnNfasInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acIsdnNfasInterfaceId.setStatus('obsolete')
if mibBuilder.loadTexts: acIsdnNfasInterfaceId.setDescription("Defines the Interface ID works with NS_EXPLICIT_INTERFACE_ID bit. Refer to the Appendix A.8 'ISDN Flexible Behavior' in the VoPLib Reference Library User's Manual Document #: LTRT-00740. ")
acTrunkCasTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 4, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkCasTableIndex.setStatus('obsolete')
if mibBuilder.loadTexts: acTrunkCasTableIndex.setDescription('Index of Cas Table used by this Trunk')
acTrunkAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 4, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("lock", 0), ("unLock", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkAdminState.setStatus('obsolete')
if mibBuilder.loadTexts: acTrunkAdminState.setDescription('Trunk Administrative State')
acPSTNIuaInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 4, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPSTNIuaInterfaceId.setStatus('obsolete')
if mibBuilder.loadTexts: acPSTNIuaInterfaceId.setDescription('IUA trunk interface ID value')
acIsdnQ931LayerResponseBehavior = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 4, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acIsdnQ931LayerResponseBehavior.setStatus('obsolete')
if mibBuilder.loadTexts: acIsdnQ931LayerResponseBehavior.setDescription('Bit-field used to determine several behavior options, which influence how the Q.931 protocol behaves.')
acIsdnIncomingCallsBehavior = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 4, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acIsdnIncomingCallsBehavior.setStatus('obsolete')
if mibBuilder.loadTexts: acIsdnIncomingCallsBehavior.setDescription("This is the bit-field used to determine several behavior options that influence how the ISDN Stack INCOMING calls behave. Refer to the Appendix A.8 'ISDN Flexible Behavior' in the VoPLib Reference Library User's Manual Document #: LTRT-00740.")
acIsdnOutgoingCallsBehavior = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 4, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acIsdnOutgoingCallsBehavior.setStatus('obsolete')
if mibBuilder.loadTexts: acIsdnOutgoingCallsBehavior.setDescription("This is the bit-field used to determine several behavior options that influence how the ISDN Stack OUTGOING calls behave. Refer to Appendix A.8 in the 'VoPLib Reference Library User's Manual. ")
acIsdnGeneralCCBehavior = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 4, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acIsdnGeneralCCBehavior.setStatus('obsolete')
if mibBuilder.loadTexts: acIsdnGeneralCCBehavior.setDescription("This is the bit-field used to determine several general ISDN behavior options. Refer to the Appendix A.8 'ISDN Flexible Behavior' in the VoPLib Reference Library User's Manual Document #: LTRT-00740.")
acIsdnNfasGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 4, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acIsdnNfasGroupNumber.setStatus('obsolete')
if mibBuilder.loadTexts: acIsdnNfasGroupNumber.setDescription('Relevant only for T1 ISDN NFAS trunks indicates the group number of the NFAS group. ;Valid NFAS group numbers are only 1 to 4, 0 indicating that this trunk is not NFAS (in this case the ISDNNFASInterfaceID and DchConfig parameters are ignored).')
mGCPSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 5))
callAgentIP = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 5, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callAgentIP.setStatus('obsolete')
if mibBuilder.loadTexts: callAgentIP.setDescription('MGCP Call Agent IP address to be used for the initial RestartInProgress MGCP message (RSIP) (e.g., 192.10.1.255). Set to 0.0.0.0 to avoid sending RSIP. This parameter if in use overrides the Call Agent IP address provided in BootP.')
callAgentPort = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callAgentPort.setStatus('obsolete')
if mibBuilder.loadTexts: callAgentPort.setDescription('Gate Way will use CallAgentPort as default UDP Port of MGCP Call Agent.')
callAgentDomainName = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 5, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callAgentDomainName.setStatus('obsolete')
if mibBuilder.loadTexts: callAgentDomainName.setDescription('MGCP Call Agent domain name.')
redundantAgentIP = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 5, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantAgentIP.setStatus('obsolete')
if mibBuilder.loadTexts: redundantAgentIP.setDescription('Redundant MGCP call agent IP address for initial RestartInProgress MGCP message (RSIP) e.g. 192.10.1.255. Set to 0 to avoid sending RSIP.')
redundantAgentPort = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantAgentPort.setStatus('obsolete')
if mibBuilder.loadTexts: redundantAgentPort.setDescription('UDP Port of Redundant MGCP call agent.')
redundantCallAgentDomainName = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 5, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantCallAgentDomainName.setStatus('obsolete')
if mibBuilder.loadTexts: redundantCallAgentDomainName.setDescription('Redundant MGCP Call Agent Domain name')
dePopulatedChannelsNumber = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dePopulatedChannelsNumber.setStatus('obsolete')
if mibBuilder.loadTexts: dePopulatedChannelsNumber.setDescription('This parameter can be used to enable MGCP call agent to access only subset of the on board channel bank. Set to -1 (or do not specify) to use all channels.')
gateWayName = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 5, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gateWayName.setStatus('obsolete')
if mibBuilder.loadTexts: gateWayName.setDescription('GateWay Name')
endPointName = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 5, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endPointName.setStatus('obsolete')
if mibBuilder.loadTexts: endPointName.setDescription("MGCP: Gateway's end point name. This is a prefix used to identify the endpoint, i.e., 'ACgw' in the following example: 'ACgw5@acl.com'. MEGACO: Prefix of the endpoint part of the termination name")
mGCPCommunicationLayerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 5, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGCPCommunicationLayerTimeout.setStatus('obsolete')
if mibBuilder.loadTexts: mGCPCommunicationLayerTimeout.setDescription('Assumed delay of the communication layer. It is used in retransmission.')
acDefaultChannelSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 6))
acChDefaultDJBufMinDelay = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 150))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChDefaultDJBufMinDelay.setStatus('obsolete')
if mibBuilder.loadTexts: acChDefaultDJBufMinDelay.setDescription('Dynamic Jitter Buffer Minimum Delay (msec)')
acChDefaultDJBufOptFactor = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChDefaultDJBufOptFactor.setStatus('obsolete')
if mibBuilder.loadTexts: acChDefaultDJBufOptFactor.setDescription('Dynamic Jitter Buffer frame error/delay optimization.')
acChDefaultCallerIDType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 16, 17, 18))).clone(namedValues=NamedValues(("callerIDStandard-Bellcore", 0), ("callerIDStandard-ETSI", 1), ("callerIDStandard-NTT", 2), ("callerIDStandard-DTMF-Based-ETSI", 16), ("callerIDStandard-Denmark", 17), ("callerIDStandard-Indian", 18)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChDefaultCallerIDType.setStatus('obsolete')
if mibBuilder.loadTexts: acChDefaultCallerIDType.setDescription('The supported caller ID standard types')
acChDefaultFaxModemBypassM = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChDefaultFaxModemBypassM.setStatus('obsolete')
if mibBuilder.loadTexts: acChDefaultFaxModemBypassM.setDescription('Number of basic frames to generating one RTP fax/modem bypass packet.')
acChDefaultFaxModemRelayVolume = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-18, -3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChDefaultFaxModemRelayVolume.setStatus('obsolete')
if mibBuilder.loadTexts: acChDefaultFaxModemRelayVolume.setDescription('Fax gain control. The range -18 to -3 relates to -18.5 dBm to -3.5 dBm in 1 dBm steps.')
acChDefaultFaxRelayECMEnable = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChDefaultFaxRelayECMEnable.setStatus('obsolete')
if mibBuilder.loadTexts: acChDefaultFaxRelayECMEnable.setDescription('Enables or disables the using of ECM mode during Fax Relay.')
acChDefaultFaxRelayMaxRate = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("acRate2400bps", 0), ("acRate4800bps", 1), ("acRate7200bps", 2), ("acRate9600bps", 3), ("acRate12000bps", 4), ("acRate14400bps", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChDefaultFaxRelayMaxRate.setStatus('obsolete')
if mibBuilder.loadTexts: acChDefaultFaxRelayMaxRate.setDescription('Limits the maximum rate at which fax messages are transmitted. ')
acChDefaultFaxTransportMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("relayEnable", 1), ("byPassEnable", 2), ("eventsOnly", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChDefaultFaxTransportMode.setStatus('obsolete')
if mibBuilder.loadTexts: acChDefaultFaxTransportMode.setDescription('Sets the Fax over IP transport method.')
acChDefaultModemRelayRedundancyDepth = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChDefaultModemRelayRedundancyDepth.setStatus('obsolete')
if mibBuilder.loadTexts: acChDefaultModemRelayRedundancyDepth.setDescription('Amount of redundancy for fax relay packets')
acChDefaultModemRelayMaxRate = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 6, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ac2400", 0), ("ac4800", 1), ("ac7200", 2), ("ac9600", 3), ("ac12000", 4), ("ac14400", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChDefaultModemRelayMaxRate.setStatus('obsolete')
if mibBuilder.loadTexts: acChDefaultModemRelayMaxRate.setDescription(' Default: Modem Relay Max Rate')
acChDefaultUseT38orFRF11 = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 6, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fRF11", 0), ("acT38", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChDefaultUseT38orFRF11.setStatus('obsolete')
if mibBuilder.loadTexts: acChDefaultUseT38orFRF11.setDescription('Selects protocol to send/ receive fax relay.')
acChDefaultV21ModemTransportType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 6, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("relayEnable", 1), ("byPassEnable", 2), ("eventsOnly", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChDefaultV21ModemTransportType.setStatus('obsolete')
if mibBuilder.loadTexts: acChDefaultV21ModemTransportType.setDescription('Sets the V.21 modem transport method (must be set to 0 = disable)')
acChDefaultV22ModemTransportType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 6, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("relayEnable", 1), ("byPassEnable", 2), ("eventsOnly", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChDefaultV22ModemTransportType.setStatus('obsolete')
if mibBuilder.loadTexts: acChDefaultV22ModemTransportType.setDescription('Sets the V.22 modem transport method ')
acChDefaultV23ModemTransportType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 6, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("relayEnable", 1), ("byPassEnable", 2), ("eventsOnly", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChDefaultV23ModemTransportType.setStatus('obsolete')
if mibBuilder.loadTexts: acChDefaultV23ModemTransportType.setDescription('Sets the V.23 modem transport method ')
acChDefaultV32ModemTransportType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 6, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("relayEnable", 1), ("byPassEnable", 2), ("eventsOnly", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChDefaultV32ModemTransportType.setStatus('obsolete')
if mibBuilder.loadTexts: acChDefaultV32ModemTransportType.setDescription('Sets the V.32 modem transport method ')
acChDefaultV34ModemTransportType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 6, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("relayEnable", 1), ("byPassEnable", 2), ("eventsOnly", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChDefaultV34ModemTransportType.setStatus('obsolete')
if mibBuilder.loadTexts: acChDefaultV34ModemTransportType.setDescription('Sets the V.34 modem transport method ')
acChDefaultFaxModemBypassCoderType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 6, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4, 5))).clone(namedValues=NamedValues(("g711Alaw-64", 0), ("g711Mulaw", 1), ("g726-32", 4), ("g726-40", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChDefaultFaxModemBypassCoderType.setStatus('obsolete')
if mibBuilder.loadTexts: acChDefaultFaxModemBypassCoderType.setDescription('The User can set the bypass coder (according to the known coders)')
acChDefaultFaxRelayRedundancyDepth = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 6, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChDefaultFaxRelayRedundancyDepth.setStatus('obsolete')
if mibBuilder.loadTexts: acChDefaultFaxRelayRedundancyDepth.setDescription(' Default: Fax Relay Redundancy Depth. Number of repetitions to be applied to each fax relay payload when transmitting to network.')
acChDefaultT38ProtectionMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 6, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("redundancyPackets", 0), ("fEC", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChDefaultT38ProtectionMode.setStatus('obsolete')
if mibBuilder.loadTexts: acChDefaultT38ProtectionMode.setDescription(' Default: T38 Protection Mode. Use Forward Error Correction (FEC) algorithm to protect T.38 fax relay stream.')
acChDefaultDTMFVolume = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 6, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-31, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChDefaultDTMFVolume.setStatus('obsolete')
if mibBuilder.loadTexts: acChDefaultDTMFVolume.setDescription('DTMF generation Volume Control')
acChDefaultDTMFTransportType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 6, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 7))).clone(namedValues=NamedValues(("acMuteDTMF", 0), ("acRelayDTMF", 1), ("acTransparentDTMF", 2), ("acRFC2833RalayDTMF", 3), ("acRFC2833RelayDecoderMute", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChDefaultDTMFTransportType.setStatus('obsolete')
if mibBuilder.loadTexts: acChDefaultDTMFTransportType.setDescription('0 = Mute = erases digit from voice stream does not relay to remote. 2 = Transparent = digits remains in voice stream. 3 = RFC 2833 relay = erase digit from voice stream relay to remote using RFC 2833 syntax. The other values as seen in the Value List (1 and 7) are not supported as of version 4.4.')
acChDefaultMFTransportType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 6, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("acMuteMF", 0), ("acRelayMF", 1), ("acTransparentMF", 2), ("acRFC2833RalayMF", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChDefaultMFTransportType.setStatus('obsolete')
if mibBuilder.loadTexts: acChDefaultMFTransportType.setDescription('0 = erase MFs from voice transport not relayed to remote. 2 = MFs not erased not relayed to remote. 3 = MFs are muted from the voice stream & relayed according to RFC 2833.')
acChDefaultInputGain = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 6, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChDefaultInputGain.setStatus('obsolete')
if mibBuilder.loadTexts: acChDefaultInputGain.setDescription('PCM input gain. The range is 31 dB to +31 dB in 1 dB steps.')
acChDefaultRTPRedundancyDepth = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 6, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChDefaultRTPRedundancyDepth.setStatus('obsolete')
if mibBuilder.loadTexts: acChDefaultRTPRedundancyDepth.setDescription('Enables or disables generation of RFC 2198 redundancy packets.')
acChDefaultTestMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 6, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("coderLoopback", 0), ("pCMLoopback", 1), ("toneInjection", 2), ("noLoopback", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChDefaultTestMode.setStatus('obsolete')
if mibBuilder.loadTexts: acChDefaultTestMode.setDescription('Testing mode applied. 0 = Coder Loopback performs an encoder/decoder loopback inside DSP device. 1 = PCMLoopback loops back incoming PCM to the outgoing PCM. 2 = ToneInjection generates a 1000 Hz tone to outgoing PCM. 3 = NoLoopback sets the channel to work in normal mode. ')
acChDefaultVoiceVolume = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 6, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChDefaultVoiceVolume.setStatus('obsolete')
if mibBuilder.loadTexts: acChDefaultVoiceVolume.setDescription('Voice output gain control the range is -31 dB to +31 dB in 1 dB steps -32 = mute. ')
acChDefaultM = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 6, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChDefaultM.setStatus('obsolete')
if mibBuilder.loadTexts: acChDefaultM.setDescription('Number of DSP payloads for generating one RTP packet')
acChDefaultFlashHookPeriod = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 6, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChDefaultFlashHookPeriod.setStatus('obsolete')
if mibBuilder.loadTexts: acChDefaultFlashHookPeriod.setDescription('Flash hook period.')
acChDefaultDTMFDetectionPoint = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 6, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChDefaultDTMFDetectionPoint.setStatus('obsolete')
if mibBuilder.loadTexts: acChDefaultDTMFDetectionPoint.setDescription('Defines if the detection of DTMF events is notified at the end of DTMF or at the start of DTMF.')
acChDefaultRtpIpTos = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 6, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChDefaultRtpIpTos.setStatus('obsolete')
if mibBuilder.loadTexts: acChDefaultRtpIpTos.setDescription('Sets value of IP Type Of Service field in IP header for all packets generated from this channel. Follow the acTIPTOS enumeration.')
acChDefaultRtpIpPrecedence = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 6, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChDefaultRtpIpPrecedence.setStatus('obsolete')
if mibBuilder.loadTexts: acChDefaultRtpIpPrecedence.setDescription('Sets value of the IP precedence field in the IP header for all packets generated from this channel. Follow the acTIPPrecedence enumeration.')
acChDefaultEchoCancler = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 6, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChDefaultEchoCancler.setStatus('obsolete')
if mibBuilder.loadTexts: acChDefaultEchoCancler.setDescription("Controls the activation of the Echo Canceler (refer also to 'ForceEchoOff')")
acChDefaultSilenceSuppression = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 6, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("sILENCE-COMPRESION-DISABLE", 0), ("sILENCE-COMPRESION-ENABLE", 1), ("sILENCE-COMPRESION-ENABLE-NOISE-ADAPTATION-DISABLE", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChDefaultSilenceSuppression.setStatus('obsolete')
if mibBuilder.loadTexts: acChDefaultSilenceSuppression.setDescription('Silence Suppression mode')
acChDefaultEchoCanclerHybridLoss = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 6, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("eCHybridLoss6DBM", 0), ("eCHybridLoss9DBM", 1), ("eCHybridLoss0DBM", 2), ("eCHybridLoss3DBM", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChDefaultEchoCanclerHybridLoss.setStatus('obsolete')
if mibBuilder.loadTexts: acChDefaultEchoCanclerHybridLoss.setDescription('Sets worst case ratio between signal level transmitted to hybrid & echo level returning from hybrid. Set this per worst hybrid in the system in terms of echo return loss. Refer to acTECHybridLoss enumeration:')
acChDefaultPacketizationPeriod = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 6, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChDefaultPacketizationPeriod.setStatus('obsolete')
if mibBuilder.loadTexts: acChDefaultPacketizationPeriod.setDescription('Packetization Period ')
aTMSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 7))
vPMask = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPMask.setStatus('obsolete')
if mibBuilder.loadTexts: vPMask.setDescription('VP masking bits used for address resolution')
vCMask = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vCMask.setStatus('obsolete')
if mibBuilder.loadTexts: vCMask.setDescription('VC masking bits used for address resolution')
externalClk = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("acATMUtopiaExternalClock", 1), ("acATMUtopiaInternalClock", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalClk.setStatus('obsolete')
if mibBuilder.loadTexts: externalClk.setDescription('Source clock of on the board UTOPIA bus')
aTMLoopBack = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("loopbackDisabled", 0), ("loopbackEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aTMLoopBack.setStatus('obsolete')
if mibBuilder.loadTexts: aTMLoopBack.setDescription('Phy loopback. The loopback can be used for testing purposes. The loopback direction is towards the PSTN side')
utopiaSlave = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("aTM-UTOPIA-MASTER", 0), ("aTM-UTOPIA-SLAVE", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utopiaSlave.setStatus('obsolete')
if mibBuilder.loadTexts: utopiaSlave.setDescription('UTOPIA interface mode of bus arbitration')
multyPhy = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("singlePhy", 0), ("multiPhy", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multyPhy.setStatus('obsolete')
if mibBuilder.loadTexts: multyPhy.setDescription('UTOPIA interface SinglePhy or MultiPhy mode')
slavePhyNum = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 7, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slavePhyNum.setStatus('obsolete')
if mibBuilder.loadTexts: slavePhyNum.setDescription('Provides the slave number for this device (board) in the UTOPIA system bus (Applies to slave mode only)')
utopiaBus16 = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("acATMUtopiaBusWidth16bit", 0), ("acATMUtopiaBusWidth8bit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utopiaBus16.setStatus('obsolete')
if mibBuilder.loadTexts: utopiaBus16.setDescription('UTOPIA interface mode of bus width')
aTMPHYType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("acOC3", 0), ("acUtopia", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aTMPHYType.setStatus('obsolete')
if mibBuilder.loadTexts: aTMPHYType.setDescription('External interface type of the board ')
disablePayloadScrambling = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 7, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: disablePayloadScrambling.setStatus('obsolete')
if mibBuilder.loadTexts: disablePayloadScrambling.setDescription('Disable/Enable Cell payload scrambling in the ATM PHY')
pHYClkSource = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 7, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("acPhyInternalClock", 0), ("acPhyExternalClock", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pHYClkSource.setStatus('obsolete')
if mibBuilder.loadTexts: pHYClkSource.setDescription('OC3 Tx clock source')
sendIdleCASUponLinkFail = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 7, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("acATMSendIdleCASUponLinkFail-Disabled", 0), ("acATMSendIdleCASUponLinkFail-Enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sendIdleCASUponLinkFail.setStatus('obsolete')
if mibBuilder.loadTexts: sendIdleCASUponLinkFail.setDescription('This I.366.2 allows sending a special idle CAS packet which signals that the other side has a failure')
masterSlaveMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 7, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("acATM-MasterMode-CO-IWF", 0), ("acATM-SlaveMode-CP-IWF", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: masterSlaveMode.setStatus('obsolete')
if mibBuilder.loadTexts: masterSlaveMode.setDescription('Loop Emulation Mode (vmoa145) Master/Slave mode')
vccProfile = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 7, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ac240VCCs-8CIDsperVCC", 0), ("ac105VCCs-24CIDsperVCC", 1), ("ac84VCCs-32CIDsperVCC", 2), ("ac14VCCs-240CIDsperVCC", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vccProfile.setStatus('obsolete')
if mibBuilder.loadTexts: vccProfile.setDescription("Determine the required combination of Board's maximal number of VCC and maximal number of channels per VCC")
tPNCPVPI = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 7, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tPNCPVPI.setStatus('obsolete')
if mibBuilder.loadTexts: tPNCPVPI.setDescription('VPI used for transferring TPNCP command over AAL5 transport layer')
tPNCPVCI = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 7, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tPNCPVCI.setStatus('obsolete')
if mibBuilder.loadTexts: tPNCPVCI.setDescription('VCI used for transferring TPNCP command over AAL5 transport layer')
sAALLink0VPI = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 7, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sAALLink0VPI.setStatus('obsolete')
if mibBuilder.loadTexts: sAALLink0VPI.setDescription('VPI of the 1st SAAL link (number 0)')
sAALLink0VCI = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 7, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sAALLink0VCI.setStatus('obsolete')
if mibBuilder.loadTexts: sAALLink0VCI.setDescription('VCI of the 1st SAAL link (number 0)')
sAALLink1VPI = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 7, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sAALLink1VPI.setStatus('obsolete')
if mibBuilder.loadTexts: sAALLink1VPI.setDescription('VPI of the 2nd SAAL link (number 1)')
sAALLink1VCI = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 7, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sAALLink1VCI.setStatus('obsolete')
if mibBuilder.loadTexts: sAALLink1VCI.setDescription('VCI of the 1st SAAL link (number 1)')
acSS7Settings = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 8))
acSS7SettingsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 8, 1), )
if mibBuilder.loadTexts: acSS7SettingsTable.setStatus('obsolete')
if mibBuilder.loadTexts: acSS7SettingsTable.setDescription('')
acSS7SettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 8, 1, 1), ).setIndexNames((0, "AcBoard", "acSS7LinkId"))
if mibBuilder.loadTexts: acSS7SettingsEntry.setStatus('obsolete')
if mibBuilder.loadTexts: acSS7SettingsEntry.setDescription('')
acSS7LinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSS7LinkId.setStatus('obsolete')
if mibBuilder.loadTexts: acSS7LinkId.setDescription('SS7 Link Id.')
acSS7traceLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 9, 10, 11, 12, 15))).clone(namedValues=NamedValues(("acNO-TRACE", 0), ("acFULL-TRACE", 1), ("acISDN-IUA-TRACE", 9), ("acSS7-MTP2", 10), ("acSS7-MTP2-AND-APPLI", 11), ("acSS7-MTP2-SL-L3-NO-MSU", 12), ("acSS7-AAL", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSS7traceLevel.setStatus('obsolete')
if mibBuilder.loadTexts: acSS7traceLevel.setDescription('.')
acConfigFiles = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 11))
acFxsCoefficients = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 11, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acFxsCoefficients.setStatus('obsolete')
if mibBuilder.loadTexts: acFxsCoefficients.setDescription('The FXS coefficient file name.')
acFxoCoefficients = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 11, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acFxoCoefficients.setStatus('obsolete')
if mibBuilder.loadTexts: acFxoCoefficients.setDescription('The FXO coefficient file name.')
acCptFile = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 11, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acCptFile.setStatus('obsolete')
if mibBuilder.loadTexts: acCptFile.setDescription('.')
acVpFile = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 11, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acVpFile.setStatus('obsolete')
if mibBuilder.loadTexts: acVpFile.setDescription('The name (and path) of the file containing the voice prompts')
acCasTables = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 11, 21))
acCasTablesTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 11, 21, 1), )
if mibBuilder.loadTexts: acCasTablesTable.setStatus('obsolete')
if mibBuilder.loadTexts: acCasTablesTable.setDescription('')
acCasTablesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 11, 21, 1, 1), ).setIndexNames((0, "AcBoard", "acCasTableIndex"))
if mibBuilder.loadTexts: acCasTablesEntry.setStatus('obsolete')
if mibBuilder.loadTexts: acCasTablesEntry.setDescription('')
acCasTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 11, 21, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acCasTableIndex.setStatus('obsolete')
if mibBuilder.loadTexts: acCasTableIndex.setDescription('Cas Table Indexd')
acCasTabeName = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 11, 21, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acCasTabeName.setStatus('obsolete')
if mibBuilder.loadTexts: acCasTabeName.setDescription('Cas Table Name')
acFxs = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 12))
acPolarityReversalType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("soft", 0), ("hard", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPolarityReversalType.setStatus('obsolete')
if mibBuilder.loadTexts: acPolarityReversalType.setDescription('Sets the type of the polarity reversal signal used for the network far-end answer and disconnect indications. Smooth reversal prevents negative effects as non-required ringing.')
megacoSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 13))
megacoCurrentProfile = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 13, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: megacoCurrentProfile.setStatus('obsolete')
if mibBuilder.loadTexts: megacoCurrentProfile.setDescription('Use this parameter to MGCP/MEGACO beheviour for specific compatibility. See user manual.')
megacoGatewayName = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 13, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: megacoGatewayName.setStatus('obsolete')
if mibBuilder.loadTexts: megacoGatewayName.setDescription("MGCP:Gateway's identification name towards the MGCP Call Agent. If empty Gateway name holds the IP address of the board MEGACO: Prefix of the gateway part of the termination name")
megacoEndpointName = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 13, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: megacoEndpointName.setStatus('obsolete')
if mibBuilder.loadTexts: megacoEndpointName.setDescription('Megaco Endpoint Name')
megacoTrunkName = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 13, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: megacoTrunkName.setStatus('obsolete')
if mibBuilder.loadTexts: megacoTrunkName.setDescription("MGCP: Together with 'EndpointPrefix' field generates local endpoint name on trunk enabled gateways MEGACO: Prefix of the trunk part of the termination name")
megacoActiveCallAgentIp = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 13, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: megacoActiveCallAgentIp.setStatus('obsolete')
if mibBuilder.loadTexts: megacoActiveCallAgentIp.setDescription('Megaco Active Call Agent ')
megacoActiveCallAgentPort = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 13, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: megacoActiveCallAgentPort.setStatus('obsolete')
if mibBuilder.loadTexts: megacoActiveCallAgentPort.setDescription('Megaco Active Port')
megacoCheckLegalityOfMGC = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 13, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: megacoCheckLegalityOfMGC.setStatus('obsolete')
if mibBuilder.loadTexts: megacoCheckLegalityOfMGC.setDescription('This parameter specified if the MEGACO will reject commands from an MGC not in the provisioned list ')
megacoCallAgents = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 13, 7))
megacoCallAgentsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 13, 7, 1), )
if mibBuilder.loadTexts: megacoCallAgentsTable.setStatus('obsolete')
if mibBuilder.loadTexts: megacoCallAgentsTable.setDescription('Magaco Call agents Table')
megacoCallAgentsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 13, 7, 1, 1), ).setIndexNames((0, "AcBoard", "megacoCallAgentId"))
if mibBuilder.loadTexts: megacoCallAgentsEntry.setStatus('obsolete')
if mibBuilder.loadTexts: megacoCallAgentsEntry.setDescription('')
megacoCallAgentId = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 13, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: megacoCallAgentId.setStatus('obsolete')
if mibBuilder.loadTexts: megacoCallAgentId.setDescription('Megaco Call Agent Id')
megacoCallAgentIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 13, 7, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: megacoCallAgentIp.setStatus('obsolete')
if mibBuilder.loadTexts: megacoCallAgentIp.setDescription('Megaco CallAgent IP')
megacoCallAgentPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 13, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: megacoCallAgentPort.setStatus('obsolete')
if mibBuilder.loadTexts: megacoCallAgentPort.setDescription('List of up to 10 UDP Ports of MEGACO Call Agent separated by , or ;.')
megacoCallAgentIsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 13, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: megacoCallAgentIsUsed.setStatus('obsolete')
if mibBuilder.loadTexts: megacoCallAgentIsUsed.setDescription('Is this index used')
acPSTNParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 14))
acQ931RELAYMODE = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("none", 0), ("activateLAPDmessaging", 1), ("layer3-IS-IUA", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acQ931RELAYMODE.setStatus('obsolete')
if mibBuilder.loadTexts: acQ931RELAYMODE.setDescription('ISDN level 3 mode')
acIsdnDuplicateQ931BuffMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 14, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acIsdnDuplicateQ931BuffMode.setStatus('obsolete')
if mibBuilder.loadTexts: acIsdnDuplicateQ931BuffMode.setDescription('Activates / de-activates delivery of raw Q.931 messages. This Object is obsolete and is replaces by acTrunkISDNCommonDuplicateQ931BuffMode in the acPSTN-MIB.')
acPSTNCASTableNum = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 14, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPSTNCASTableNum.setStatus('obsolete')
if mibBuilder.loadTexts: acPSTNCASTableNum.setDescription('Indicates how many CAS protocol configuration files are loaded, when 0 is no CAS table. It should match the number of fields.')
aMsConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 51))
amsNumOfConferencePorts = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 51, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 480))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amsNumOfConferencePorts.setStatus('obsolete')
if mibBuilder.loadTexts: amsNumOfConferencePorts.setDescription('Number Of Conference ports. How many ports on the TPM are allocated to the conferencing service.')
amsNumOfTestTrunkPorts = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 51, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 480))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amsNumOfTestTrunkPorts.setStatus('obsolete')
if mibBuilder.loadTexts: amsNumOfTestTrunkPorts.setDescription('Number Of Test Trunk ports. How many ports on the TPM are allocated to the Test Trunk service.')
amsNumOfLawfulInterceptPorts = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 51, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 480))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amsNumOfLawfulInterceptPorts.setStatus('obsolete')
if mibBuilder.loadTexts: amsNumOfLawfulInterceptPorts.setDescription('Number Of Test Trunk ports. How many ports on the TPM are allocated to the Lawful Intercept service.')
amsNumOfAnnouncementPorts = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 51, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 480))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amsNumOfAnnouncementPorts.setStatus('obsolete')
if mibBuilder.loadTexts: amsNumOfAnnouncementPorts.setDescription('Number Of Test Trunk ports. How many ports on the TPM are allocated to the Announcement service.')
amsApsIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 51, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amsApsIpAddress.setStatus('obsolete')
if mibBuilder.loadTexts: amsApsIpAddress.setDescription('Sets the destination IP to which the heartbeat packets are sent.')
amsApsPort = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 51, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amsApsPort.setStatus('obsolete')
if mibBuilder.loadTexts: amsApsPort.setDescription('Sets the destination UDP port to which the heartbeat packets are sent.')
amsPrimaryLanguage = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 51, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(15, 0, 1, 16, 19, 10, 2, 3, 17, 4, 20, 18, 6, 5, 7, 8, 9, 11, 12, 13, 14, 21, 22, 100))).clone(namedValues=NamedValues(("isoLangBasque", 15), ("amsLangBelgianDutch", 0), ("amsLangCantonese", 1), ("isoLangCatalan", 16), ("isoLangCzech", 19), ("isoLangDutch", 10), ("isoLangEnglish", 2), ("isoLangFrench", 3), ("isoLangGallegan", 17), ("isoLangGerman", 4), ("isoLangGreek", 20), ("isoLangHebrew", 18), ("isoLangJapanese", 6), ("isoLangItalian", 5), ("isoLangKorean", 7), ("isoLangMalay", 8), ("isoLangMandarin", 9), ("isoLangPortuguese", 11), ("isoLangSpanish", 12), ("isoLangTagalog", 13), ("isoLangThai", 14), ("isoLangTurkish", 21), ("isoLangVietnamese", 22), ("amsLangBad", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amsPrimaryLanguage.setStatus('obsolete')
if mibBuilder.loadTexts: amsPrimaryLanguage.setDescription('Primary Language')
amsSecondaryLanguage = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 51, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(15, 0, 1, 16, 19, 10, 2, 3, 17, 4, 20, 18, 6, 5, 7, 8, 9, 11, 12, 13, 14, 21, 22, 100))).clone(namedValues=NamedValues(("isoLangBasque", 15), ("amsLangBelgianDutch", 0), ("amsLangCantonese", 1), ("isoLangCatalan", 16), ("isoLangCzech", 19), ("isoLangDutch", 10), ("isoLangEnglish", 2), ("isoLangFrench", 3), ("isoLangGallegan", 17), ("isoLangGerman", 4), ("isoLangGreek", 20), ("isoLangHebrew", 18), ("isoLangJapanese", 6), ("isoLangItalian", 5), ("isoLangKorean", 7), ("isoLangMalay", 8), ("isoLangMandarin", 9), ("isoLangPortuguese", 11), ("isoLangSpanish", 12), ("isoLangTagalog", 13), ("isoLangThai", 14), ("isoLangTurkish", 21), ("isoLangVietnamese", 22), ("amsLangBad", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amsSecondaryLanguage.setStatus('obsolete')
if mibBuilder.loadTexts: amsSecondaryLanguage.setDescription('Secondary Language')
amsProfile = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 51, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amsProfile.setStatus('obsolete')
if mibBuilder.loadTexts: amsProfile.setDescription("AMS Profile Bit Mask: 1'st bit - APS Audio Enable/Disable 2'nd bit - Trunks Interface On/Off 3'td bit - Board Operation State change on ATM Port failure Enable/Disable.")
amsAASPackagesProfile = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 51, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("td5Starndard", 0), ("h2489Standard", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amsAASPackagesProfile.setStatus('obsolete')
if mibBuilder.loadTexts: amsAASPackagesProfile.setDescription('.')
acFeatureKey = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 90))
acFeatureKeyString = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 90, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acFeatureKeyString.setStatus('obsolete')
if mibBuilder.loadTexts: acFeatureKeyString.setDescription('Coded Key specific for board and required features.')
acActiveFeaturesList = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 90, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 484))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acActiveFeaturesList.setStatus('obsolete')
if mibBuilder.loadTexts: acActiveFeaturesList.setDescription('List of all avtivated features.')
supplementary = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 99))
supplementaryField = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 1, 99, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: supplementaryField.setStatus('obsolete')
if mibBuilder.loadTexts: supplementaryField.setDescription('Flexible INI file line.')
boardInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 2))
boardType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 8, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56))).clone(namedValues=NamedValues(("unKnownBoard", 0), ("tP-08", 1), ("mEDIAPACK-108", 2), ("mEDIAPACK-124", 3), ("tP-240", 8), ("tP-610-CL120", 10), ("tP-600", 11), ("tP-600-IPMEDIA", 12), ("tP-9800-C", 13), ("tPM800", 16), ("tPM800-RDK", 17), ("tPM800B", 18), ("tPM800B-RDK", 19), ("tP1600", 20), ("tP-240-IpMedia", 21), ("tPM1100", 22), ("trunkPack-260-IpMedia", 23), ("tP1610", 24), ("mP-104", 25), ("mP-102", 26), ("tP-04", 27), ("tP-02", 28), ("tP-1610-SB", 29), ("tP-1610-IpMedia", 30), ("tP-MEDIANT2000", 31), ("tP-STRETTO2000", 32), ("tP-IPMServer2000", 33), ("tP-2810", 34), ("tP-260-UN-IpMedia", 35), ("tP-260-IpMedia-30Ch", 36), ("tP-260-IpMedia-60Ch", 37), ("tP-260-IpMedia-120Ch", 38), ("tP-260RT-IpMedia-30Ch", 39), ("tP-260RT-IpMedia-60Ch", 40), ("tP-260RT-IpMedia-120Ch", 41), ("tP-260", 42), ("tP-260-UN", 43), ("tPM1100-PCM", 44), ("tP-6310", 45), ("tPM6300", 46), ("mediant1000", 47), ("ipMedia3000", 48), ("mediant3000", 49), ("stretto3000", 50), ("tP-6310-IpMedia", 51), ("tP-6310-SB", 52), ("aTP-1610", 53), ("aTP-260", 54), ("aTP-260-UN", 55), ("mP-118", 56)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardType.setStatus('obsolete')
if mibBuilder.loadTexts: boardType.setDescription('The type of the Board.')
boardName = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardName.setStatus('obsolete')
if mibBuilder.loadTexts: boardName.setDescription('The name fo the board')
serialNum = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNum.setStatus('obsolete')
if mibBuilder.loadTexts: serialNum.setDescription('serial number of board.')
dSPCount = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dSPCount.setStatus('obsolete')
if mibBuilder.loadTexts: dSPCount.setDescription('DSP Count')
channelsCount = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelsCount.setStatus('obsolete')
if mibBuilder.loadTexts: channelsCount.setDescription('Channel Count.')
cPUSpeed = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cPUSpeed.setStatus('obsolete')
if mibBuilder.loadTexts: cPUSpeed.setDescription('CPU Speed')
softwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 2, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareVersion.setStatus('obsolete')
if mibBuilder.loadTexts: softwareVersion.setDescription('TrunkPack Software Version')
trunkPackSoftwareDate = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 2, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkPackSoftwareDate.setStatus('obsolete')
if mibBuilder.loadTexts: trunkPackSoftwareDate.setDescription('TrunkPack Software Date')
slotNumber = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotNumber.setStatus('obsolete')
if mibBuilder.loadTexts: slotNumber.setDescription('Slot number')
iniFileVersion = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iniFileVersion.setStatus('obsolete')
if mibBuilder.loadTexts: iniFileVersion.setDescription('Ini file version.')
acDspType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDspType.setStatus('obsolete')
if mibBuilder.loadTexts: acDspType.setDescription('Dsp Type')
acFlashVersion = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acFlashVersion.setStatus('obsolete')
if mibBuilder.loadTexts: acFlashVersion.setDescription('Flash [BootLoader] Version. ')
acBoardFxsOrFxo = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fXO", 0), ("fXS", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acBoardFxsOrFxo.setStatus('obsolete')
if mibBuilder.loadTexts: acBoardFxsOrFxo.setDescription('Board is Fxs Or Fxo')
acTrunkslCount = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acTrunkslCount.setStatus('obsolete')
if mibBuilder.loadTexts: acTrunkslCount.setDescription('Trunks Count.')
acDspVersionTemplate = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDspVersionTemplate.setStatus('obsolete')
if mibBuilder.loadTexts: acDspVersionTemplate.setDescription('selects the DSP load number, which defines the supported set of coders. Default=0 Each template assigns a specific version to each DSP. Each DSP version supports a set of coders and features. The number of channels supported by the DSP can also vary between DSP versions. The total number of channels supported by the board depends on the selected template. ')
acFirstPortDuplexMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("halfDuplex", 0), ("fullDuplex", 1), ("forceModeValue", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acFirstPortDuplexMode.setStatus('obsolete')
if mibBuilder.loadTexts: acFirstPortDuplexMode.setDescription('full-duplex or half-duplex connection')
acFirstPortSpeed = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 10, 100))).clone(namedValues=NamedValues(("forceModeValue", 2), ("notAvailable", 3), ("ac10Mbps", 10), ("ac100Mbps", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acFirstPortSpeed.setStatus('obsolete')
if mibBuilder.loadTexts: acFirstPortSpeed.setDescription('.')
acMeanFreeChannels = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acMeanFreeChannels.setStatus('obsolete')
if mibBuilder.loadTexts: acMeanFreeChannels.setDescription('Mean of Free Channels')
acMaxFreeChannels = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 2, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acMaxFreeChannels.setStatus('obsolete')
if mibBuilder.loadTexts: acMaxFreeChannels.setDescription('Max of Free Channels')
acSysUpTime = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysUpTime.setStatus('obsolete')
if mibBuilder.loadTexts: acSysUpTime.setDescription('Time (in Seconds) that the board is alive.')
acPhysicalModCount = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("soloist", 0), ("second", 1), ("first", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPhysicalModCount.setStatus('obsolete')
if mibBuilder.loadTexts: acPhysicalModCount.setDescription('.')
acBoardTemperature = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 2, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acBoardTemperature.setStatus('obsolete')
if mibBuilder.loadTexts: acBoardTemperature.setDescription('Temperature of the board in degrees Celsius, should not go higher then 60!')
channelConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3))
voiceSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 2))
voiceSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 2, 1), )
if mibBuilder.loadTexts: voiceSettingsTable.setStatus('obsolete')
if mibBuilder.loadTexts: voiceSettingsTable.setDescription('Data in voice SettingsTable uniquely identify a voice parameters of channel.')
voiceSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 2, 1, 1), ).setIndexNames((0, "AcBoard", "cID"))
if mibBuilder.loadTexts: voiceSettingsEntry.setStatus('obsolete')
if mibBuilder.loadTexts: voiceSettingsEntry.setDescription('')
cID = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cID.setStatus('deprecated')
if mibBuilder.loadTexts: cID.setDescription('Channel ID')
coder = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78))).clone(namedValues=NamedValues(("g711Alaw", 0), ("g711Mulaw", 1), ("g726-16", 2), ("g726-24", 3), ("g726-32", 4), ("g726-40", 5), ("g727-16", 6), ("g727-24-16", 7), ("g727-24", 8), ("g727-32-16", 9), ("g727-32-24", 10), ("g727-32", 11), ("g727-40-16", 12), ("g727-40-24", 13), ("g727-40-32", 14), ("g723Low", 15), ("g723High", 16), ("g729", 17), ("gSM", 19), ("gSM610MS", 20), ("transparent", 22), ("g728", 23), ("hDLCCoder", 24), ("netCoder-4-8", 25), ("netCoder-5-6", 26), ("netCoder-6-4", 27), ("netCoder-7-2", 28), ("netCoder-8", 29), ("netCoder-8-8", 30), ("netCoder-9-6", 31), ("eVRC", 32), ("eVRC-TFO", 33), ("qCELP-8", 34), ("qCELP-8-TFO", 35), ("qCELP-13", 36), ("qCELP-13-TFO", 37), ("noCoder", 40), ("modemAnswer", 41), ("modemCall", 42), ("g711Alaw-5-5", 45), ("g711Mulaw-5-5", 46), ("g726-32-5-5", 47), ("aMR-4-75", 50), ("aMR-5-15", 51), ("aMR-5-9", 52), ("aMR-6-7", 53), ("aMR-7-4", 54), ("aMR-7-95", 55), ("aMR-10-2", 56), ("aMR-12-2", 57), ("iLBC-15", 63), ("iLBC-13", 64), ("bV-16", 65), ("acAMRWB-6-6", 66), ("acAMRWB-8-85", 67), ("acAMRWB-12-65", 68), ("acAMRWB-14-25", 69), ("acAMRWB-15-85", 70), ("acAMRWB-18-25", 71), ("acAMRWB-19-85", 72), ("acAMRWB-23-05", 73), ("acAMRWB-23-85", 74), ("acG722-48K", 75), ("acG722-56K", 76), ("acG722-64K", 77), ("acDPNSSCoder", 78)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coder.setStatus('deprecated')
if mibBuilder.loadTexts: coder.setDescription('Digital voice coder')
eCE = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eCE.setStatus('deprecated')
if mibBuilder.loadTexts: eCE.setDescription('Enable/Disable Echo Canceler')
sCE = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCE.setStatus('deprecated')
if mibBuilder.loadTexts: sCE.setDescription('Enable/Disable Silence Compresion mechanism')
pFE = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pFE.setStatus('deprecated')
if mibBuilder.loadTexts: pFE.setDescription('Post Filter Enable of the voice coder')
hPFE = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hPFE.setStatus('deprecated')
if mibBuilder.loadTexts: hPFE.setDescription('High Pass Filter Enabled of the voice coder')
testMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("coderLoopback", 0), ("pCMLoopback", 1), ("toneInjection", 2), ("noLoopback", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: testMode.setStatus('deprecated')
if mibBuilder.loadTexts: testMode.setDescription('Testing mode to be applied. Valid Range:CoderLoopback will perform an encoder-decoder loopback inside the DSP device, PCMLoopback will loopback the incoming PCM to the outgoing PCM, ToneInjection will generate a1000 Hz tone to outgoing PCM and NoLoopback will set the channel to work in a normal mode. Refer to TTestCode enumeration (default =3= NoLoopBack). ')
voiceVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceVolume.setStatus('deprecated')
if mibBuilder.loadTexts: voiceVolume.setDescription('Voice Volume sets the voice decoders output gain Range: 0-63 corresponding to -31 dB to +31 dB in 1 dB steps')
inputGain = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputGain.setStatus('deprecated')
if mibBuilder.loadTexts: inputGain.setDescription('PCM input gain sets the gain at the encoders input.')
m = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m.setStatus('deprecated')
if mibBuilder.loadTexts: m.setDescription('This Packet Multiply Factor is the Number of 20 msec payloads (30 msec for G.723) to be used for generating one RTP packet. Range: 1 - Until max Tx/Rx buffer size is reached')
rTPRedundancyDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTPRedundancyDepth.setStatus('deprecated')
if mibBuilder.loadTexts: rTPRedundancyDepth.setDescription('RTP Redundancy Depth. Number of repetitions to be applied to each RTP payload when transmitting to network. apply redundancy sequence per RFC2198. Valid range: Disable redundancy packets generation = 0. Enable generation of RFC2198 redundancy packets = 1.')
eCLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("eCLength10MSec", 0), ("eCLength15Msec", 1), ("eCLength20Msec", 2), ("eCLength25Msec", 3), ("eCLength30Msec", 4), ("eCLength35Msec", 5), ("eCLength40Msec", 6), ("eCLength45Msec", 7), ("eCLength50Msec", 8), ("eCLength55Msec", 9), ("eCLength60Msec", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eCLength.setStatus('deprecated')
if mibBuilder.loadTexts: eCLength.setDescription('Length of echo canceler tail to be used according to TECLength enumeration. Note that EC length has different length limitations for different boards.')
eCHybridLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("loss6DB", 0), ("loss9DB", 1), ("loss0DB", 2), ("loss3DB", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eCHybridLoss.setStatus('deprecated')
if mibBuilder.loadTexts: eCHybridLoss.setDescription('Echo Cancler Hybrid Loss. sets the worst case ratio between the signal level transmitted to the hybrid and the echo level returning from the hybrid. User should set this value according to the worst hybrid in the system in terms of echo return loss according to enum TECHybridLoss enumeration')
faxModemSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 3))
faxModemSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 3, 1), )
if mibBuilder.loadTexts: faxModemSettingsTable.setStatus('obsolete')
if mibBuilder.loadTexts: faxModemSettingsTable.setDescription('Data in faxModem Settings Table uniquely identify fax and modem parameters channel.')
faxModemSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 3, 1, 1), ).setIndexNames((0, "AcBoard", "cID"))
if mibBuilder.loadTexts: faxModemSettingsEntry.setStatus('obsolete')
if mibBuilder.loadTexts: faxModemSettingsEntry.setDescription('')
fAXTransportType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("transparent", 0), ("relay", 1), ("bypass", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fAXTransportType.setStatus('obsolete')
if mibBuilder.loadTexts: fAXTransportType.setDescription('FAX Transport Type.')
acCallerIDType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("transparent", 0), ("relay", 1), ("bypass", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acCallerIDType.setStatus('obsolete')
if mibBuilder.loadTexts: acCallerIDType.setDescription('CallerID Type.')
v21ModemTransportType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("transparent", 0), ("relay", 1), ("bypass", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v21ModemTransportType.setStatus('obsolete')
if mibBuilder.loadTexts: v21ModemTransportType.setDescription('V21 Modem Transpor tType. ')
v22ModemTransportType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("transparent", 0), ("relay", 1), ("bypass", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v22ModemTransportType.setStatus('obsolete')
if mibBuilder.loadTexts: v22ModemTransportType.setDescription('V22 Modem Transpor tType. ')
v23ModemTransportType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("transparent", 0), ("relay", 1), ("bypass", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v23ModemTransportType.setStatus('obsolete')
if mibBuilder.loadTexts: v23ModemTransportType.setDescription('V23 Modem Transpor tType. ')
v32ModemTransportType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("transparent", 0), ("relay", 1), ("bypass", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v32ModemTransportType.setStatus('obsolete')
if mibBuilder.loadTexts: v32ModemTransportType.setDescription('V32 Modem Transpor tType. ')
v34ModemTransportType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("transparent", 0), ("relay", 1), ("bypass", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v34ModemTransportType.setStatus('obsolete')
if mibBuilder.loadTexts: v34ModemTransportType.setDescription('V34 Modem Transpor tType. ')
faxRelayMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ac2400", 0), ("ac4800", 1), ("ac7200", 2), ("ac9600", 3), ("ac12000", 4), ("ac14400", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxRelayMaxRate.setStatus('obsolete')
if mibBuilder.loadTexts: faxRelayMaxRate.setDescription('Fax Relay Max Rate Limits the maximum rate at which fax messages are transmitted. Refer to acTFaxModemRelayRate enumeration. (Default =14400 bps). ')
modemRelayMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ac2400", 0), ("ac4800", 1), ("ac7200", 2), ("ac9600", 3), ("ac12000", 4), ("ac14400", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemRelayMaxRate.setStatus('obsolete')
if mibBuilder.loadTexts: modemRelayMaxRate.setDescription('Modem Relay Max Rate Limits the maximum rate at which modem relay messages are transmitted. Refer to acTFaxModemRelayRate enumeration. (Default =14400 bps).')
faxRelayECMEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxRelayECMEnable.setStatus('obsolete')
if mibBuilder.loadTexts: faxRelayECMEnable.setDescription('Fax Relay ECM Enable Enable using ECM mode during Fax Relay.')
t38FaxRelayProtectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("redundancyPackets", 0), ("fEC", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t38FaxRelayProtectionMode.setStatus('obsolete')
if mibBuilder.loadTexts: t38FaxRelayProtectionMode.setDescription('T38 Fax Relay Protection Mode Use Forward Error Correction (FEC) algorithm to protect T.38 fax relay stream.')
faxRelayRedundancyDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxRelayRedundancyDepth.setStatus('obsolete')
if mibBuilder.loadTexts: faxRelayRedundancyDepth.setDescription('Fax Relay Redundancy Depth Number of repetitions to be applied to each fax relay payload when transmitting to network (applicable only when acTFaxModemCmdacTFaxModemSettings.T38FaxRelayProtectionMode=0). ')
enhancedFaxRelayRedundancyDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enhancedFaxRelayRedundancyDepth.setStatus('obsolete')
if mibBuilder.loadTexts: enhancedFaxRelayRedundancyDepth.setDescription('Enhanced Fax Relay Redundancy Depth Number of repetitions to be applied to control packets when using T.38 standard.')
modemRelayRedundancyDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemRelayRedundancyDepth.setStatus('obsolete')
if mibBuilder.loadTexts: modemRelayRedundancyDepth.setDescription('Modem Relay Redundancy Depth Number of repetitions to be applied to each modem relay payload when transmitting to network.')
faxModemRelayVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-18, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxModemRelayVolume.setStatus('obsolete')
if mibBuilder.loadTexts: faxModemRelayVolume.setDescription('Fax Modem Relay Volume Fax gain control. Range: -18 - 15 corresponding to -18.5 dBm to -3.5 dBm in 1 dB steps. The reason the range extends to 15 is for backward compatibility. (Default =6).')
faxModemBypassCoderType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("g711Alaw", 0), ("g711Mulaw", 1), ("g726-16", 2), ("g726-24", 3), ("g726-32", 4), ("g726-40", 5), ("g727-16", 6), ("g727-24-16", 7), ("g727-24", 8), ("g727-32-16", 9), ("g727-32-24", 10), ("g727-32", 11), ("g727-40-16", 12), ("g727-40-24", 13), ("g727-40-32", 14), ("g723Low", 15), ("g723High", 16), ("g729", 17), ("gSM", 19), ("gSM610MS", 20), ("transparent", 22), ("g728", 23), ("hDLCCoder", 24), ("netCoder-4-8", 25), ("netCoder-5-6", 26), ("netCoder-6-4", 27), ("netCoder-7-2", 28), ("netCoder-8", 29), ("netCoder-8-8", 30), ("netCoder-9-6", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxModemBypassCoderType.setStatus('obsolete')
if mibBuilder.loadTexts: faxModemBypassCoderType.setDescription('Fax Modem Bypass Coder Type Coder to be used while performing fax/modem bypass. Usually, high bit rate coders such as G.711 and G.726/G.727 should be used. (Default = G.711 A-law).')
faxModemBypassM = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxModemBypassM.setStatus('obsolete')
if mibBuilder.loadTexts: faxModemBypassM.setDescription('Fax Modem Bypass M Number of 20 msec payloads to be used for generating one RTP fax/modem bypass packet. Range: 1 - Until max Tx/Rx buffer size is reached')
useT38orFRF11 = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fRF11", 0), ("t38", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: useT38orFRF11.setStatus('obsolete')
if mibBuilder.loadTexts: useT38orFRF11.setDescription('Use T38 or FRF11 Use T.38 protocol or proprietary FRF.11 syntax, to send/receive fax relay.')
dJBSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 4))
dJBSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 4, 1), )
if mibBuilder.loadTexts: dJBSettingsTable.setStatus('obsolete')
if mibBuilder.loadTexts: dJBSettingsTable.setDescription('Data in dJB Settings Table uniquely identify jitter buffer parameters of channel.')
dJBSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 4, 1, 1), ).setIndexNames((0, "AcBoard", "cID"))
if mibBuilder.loadTexts: dJBSettingsEntry.setStatus('obsolete')
if mibBuilder.loadTexts: dJBSettingsEntry.setDescription('')
dJBufMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 150))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dJBufMinDelay.setStatus('obsolete')
if mibBuilder.loadTexts: dJBufMinDelay.setDescription('[Millisec] Dynamic Jitter Buffer Minimum Delay. 0 - 150 (default =150)')
dJBufOptFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dJBufOptFactor.setStatus('obsolete')
if mibBuilder.loadTexts: dJBufOptFactor.setDescription('Dynamic Jitter Buffer Optimization Factor. Dynamic jitter buffer frame error/delay optimization. 0 - 12 (default =7)')
channelTDMBusSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 5))
channelTDMBusSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 5, 1), )
if mibBuilder.loadTexts: channelTDMBusSettingsTable.setStatus('obsolete')
if mibBuilder.loadTexts: channelTDMBusSettingsTable.setDescription(' Data in channel TDM Bus Settings Table, uniquely identify TDM Bus sparameters of channel ')
channelTDMBusSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 5, 1, 1), ).setIndexNames((0, "AcBoard", "cID"))
if mibBuilder.loadTexts: channelTDMBusSettingsEntry.setStatus('obsolete')
if mibBuilder.loadTexts: channelTDMBusSettingsEntry.setDescription('')
tDMBusInputPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tDMBusInputPort.setStatus('obsolete')
if mibBuilder.loadTexts: tDMBusInputPort.setDescription('TDM Bus Input Port. Together with TDMBusInputChannel, defines the TDM bus timeslot to be used as input for this channel. Note that the valid region for this parameter varies according to the type of TDM bus used. When using TDMBusType=acFramers this parameter selects the trunkID, in which the incoming B-channel resides. 0-127. ')
tDMBusInputChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tDMBusInputChannel.setStatus('obsolete')
if mibBuilder.loadTexts: tDMBusInputChannel.setDescription('TDM Bus Input Channel. Together with TDMBusInputPort, defines the TDM bus timeslot to be used as input for this channel. Note that the valid region for this parameter varies according to the TDMBusSpeed. When using TDMBusType=acFramers, this parameter selects the incoming B-channel (in this case the valid region is 0-31).')
tDMBusOutputDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tDMBusOutputDisable.setStatus('obsolete')
if mibBuilder.loadTexts: tDMBusOutputDisable.setDescription('TDM Bus Output Disable. 0: Places TDM bus output timeslot in tri-state mode. Ignored in case of PSTN interface. 1: Enables TDM bus output timeslot. Ignored in case of PSTN interface.')
tDMBusOutputPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tDMBusOutputPort.setStatus('obsolete')
if mibBuilder.loadTexts: tDMBusOutputPort.setDescription('TDM Bus Output Port. Together with TDMBusOutputChannel, defines the TDM bus timeslot to be used as output for this channel. Note that the valid region for this parameter varies according to the type of TDM bus used. When this parameter is set to 0xff=255 the boardwise setting (set in acOpenBoard()) will be used. When using TDMBusType=acFramers, this parameter is ignored. 0-31 or 255.')
tDMBusOutputChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tDMBusOutputChannel.setStatus('obsolete')
if mibBuilder.loadTexts: tDMBusOutputChannel.setDescription('TDM Bus Output Channel. Together with TDMBusOutputPort, defines the TDM bus timeslot to be used as output for this channel. Note that the valid region for this parameter varies according to the TDMBusSpeed. When using TDMBusType=acFramers, this parameter is ignored.')
transportSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 6))
transportSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 6, 1), )
if mibBuilder.loadTexts: transportSettingsTable.setStatus('obsolete')
if mibBuilder.loadTexts: transportSettingsTable.setDescription('Data in Transport Table, uniquely identify Transport sparameters of channel.')
transportSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 6, 1, 1), ).setIndexNames((0, "AcBoard", "cID"))
if mibBuilder.loadTexts: transportSettingsEntry.setStatus('obsolete')
if mibBuilder.loadTexts: transportSettingsEntry.setDescription('')
useNIorPCI = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: useNIorPCI.setStatus('obsolete')
if mibBuilder.loadTexts: useNIorPCI.setDescription('Description: Use NI or PCI interface. =1 if channel will use NI interface, =0 if PCI interface. 0- PCI interface: Compressed traffic will be sent/received through the PCI interface. 1- NI interface: RTP-RTCP packets sent/received to/from on board Ethernet interface. (default=1).')
disableSoftIPLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: disableSoftIPLoopback.setStatus('obsolete')
if mibBuilder.loadTexts: disableSoftIPLoopback.setDescription('Disable Soft IP Loopback =1 in order to diable soft IP loopback. 0- Enables the hair pin connection made in case two channels on the same board are connected together. 1- Disables the hair pin connection made in case two channels on the same board are connected together.')
uniDirectionalRTP = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uniDirectionalRTP.setStatus('obsolete')
if mibBuilder.loadTexts: uniDirectionalRTP.setDescription('uni Directional RTP. enables one sided RTP stream - according to niDirectionalRTPMode. enables the User to set the channel to work with unidirectional RTP streams. When UniDirectionalRTP is set to acRTPTxOnly, the receiver part of the channel will be disabled, and only the transmitter (encoder) will work. When UniDirectionalRTP is set to acRTPRxOnly, the transmitter part of the channel will be disabled, and only the receiver (decoder) will work. When UniDirectionalRTP is set to acRTPTxRx, both sides will be enabled. Users should note that when configuring a session between two endpoints, some of the channel configuration parameters must be identical on both sides. Such parameters are the voice coder type, the Fax/Modem transport type and bypass coders. All other configuration parameters are independent.')
rTPRTCPSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 7))
rTPRTCPSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 7, 1), )
if mibBuilder.loadTexts: rTPRTCPSettingsTable.setStatus('obsolete')
if mibBuilder.loadTexts: rTPRTCPSettingsTable.setDescription('Data in RTP-RTCP Table, uniquely identify RTP-RTCP sparameters of channel.')
rTPRTCPSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 7, 1, 1), ).setIndexNames((0, "AcBoard", "cID"))
if mibBuilder.loadTexts: rTPRTCPSettingsEntry.setStatus('obsolete')
if mibBuilder.loadTexts: rTPRTCPSettingsEntry.setDescription('')
cNAME = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 7, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cNAME.setStatus('obsolete')
if mibBuilder.loadTexts: cNAME.setDescription("RTP Canonical Name. Should be unique among all participants within one RTP session. Refer to RFC1890 for more information. Up to 255 characters string. (default ='ChX', X=CID).")
iPPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iPPrecedence.setStatus('obsolete')
if mibBuilder.loadTexts: iPPrecedence.setDescription('IP Precedence. Sets the value of the IP precedence field in the IP header for all the packets to be generated from this channel. Follow the acTIPPrecedence enumeration. Valid Range: 0-7 (default =0) ')
iPTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iPTOS.setStatus('obsolete')
if mibBuilder.loadTexts: iPTOS.setDescription('iP Type Of Service. sets the value of the IP Type Of Service field in the IP header for all the packets to be generated from this channel. acNormalServiceTOS=0, acMinimizeMonetaryCostTOS=1, acMaximizeReliabilityTOS=2, acMaximizeThroughputTOS=4, acMinimizeDelayTOS=8 (Follow the acTIPTOS enumeration). ')
localRTPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localRTPPort.setStatus('obsolete')
if mibBuilder.loadTexts: localRTPPort.setDescription('Local RTP Port. Local UDP Port to be used for incoming RTP stream to this channel. This parameter also sets the local RTCP and local T.38 ports in offset of 1,2 from LocalRTPPort respectively. The local RTP port must be a number dividable by 10 and must reside within the following range BoardParams.BaseUDPPort-> BoardParams.BaseUDPPort +10*MAX_CID_NUM. ')
remoteRTPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 7, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteRTPAddr.setStatus('obsolete')
if mibBuilder.loadTexts: remoteRTPAddr.setDescription('Remote RTP Address')
remoteRTPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteRTPPort.setStatus('obsolete')
if mibBuilder.loadTexts: remoteRTPPort.setDescription('IP/UDP Address of the remote endpoint RTP port')
remoteT38Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 7, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteT38Addr.setStatus('obsolete')
if mibBuilder.loadTexts: remoteT38Addr.setDescription('remote T38 Address')
remoteT38Port = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteT38Port.setStatus('obsolete')
if mibBuilder.loadTexts: remoteT38Port.setDescription('IP/UDP Address of the remote endpoint T.38 port')
rTCPMeanTxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTCPMeanTxInterval.setStatus('obsolete')
if mibBuilder.loadTexts: rTCPMeanTxInterval.setDescription("RTCP Mean Tx Interval. Mean interval [msec] between channel's RTCP reports. ")
rxRTPPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxRTPPayloadType.setStatus('obsolete')
if mibBuilder.loadTexts: rxRTPPayloadType.setDescription('Rx RTP Payload Type -1 = use the default coder RTP payload type for incoming voice packets. -2 = allow any RTP payload type for incoming packets. Otherwise, = sets the RTP payload type to be used for incoming voice packets (this will override the default RTP payload type defined for each coder). Valid Range: -1/-2 or any unoccupied RTPPT in the range 0-127 . (default =-1). ')
txRTPPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 3, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txRTPPayloadType.setStatus('obsolete')
if mibBuilder.loadTexts: txRTPPayloadType.setDescription('Tx RTP Payload Type -1 = use the default coder RTP payload type for incoming voice packets. -2 = allow any RTP payload type for incoming packets. Otherwise, = sets the RTP payload type to be used for incoming voice packets (this will override the default RTP payload type defined for each coder). Valid Range: -1/-2 or any unoccupied RTPPT in the range 0-127. (default =-1). ')
channelStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 4))
channelStatusTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 4, 1), )
if mibBuilder.loadTexts: channelStatusTable.setStatus('obsolete')
if mibBuilder.loadTexts: channelStatusTable.setDescription('Data in voice SettingsTable uniquely identify a voice parameters of channel.')
channelStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 4, 1, 1), ).setIndexNames((0, "AcBoard", "cID"))
if mibBuilder.loadTexts: channelStatusEntry.setStatus('obsolete')
if mibBuilder.loadTexts: channelStatusEntry.setDescription('')
rTPActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notActive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTPActive.setStatus('deprecated')
if mibBuilder.loadTexts: rTPActive.setDescription('RTP Active')
bypassNIC = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bypassNIC.setStatus('deprecated')
if mibBuilder.loadTexts: bypassNIC.setDescription('Bypass NIC')
pendingIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pendingIdle.setStatus('obsolete')
if mibBuilder.loadTexts: pendingIdle.setDescription('Pending Idle')
txSilencePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSilencePeriod.setStatus('deprecated')
if mibBuilder.loadTexts: txSilencePeriod.setDescription('Tx Silence Period ')
rxSilencePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxSilencePeriod.setStatus('deprecated')
if mibBuilder.loadTexts: rxSilencePeriod.setDescription('Rx Silence Period')
txFaxMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txFaxMode.setStatus('deprecated')
if mibBuilder.loadTexts: txFaxMode.setDescription('Tx Fax Mode ')
rxFaxMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxFaxMode.setStatus('deprecated')
if mibBuilder.loadTexts: rxFaxMode.setDescription('Rx Fax Mode ')
txDTMFPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txDTMFPeriod.setStatus('deprecated')
if mibBuilder.loadTexts: txDTMFPeriod.setDescription('Tx DTMF Period ')
rxDTMFPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxDTMFPeriod.setStatus('deprecated')
if mibBuilder.loadTexts: rxDTMFPeriod.setDescription('Rx DTMF Period')
packetsToDSPCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: packetsToDSPCnt.setStatus('deprecated')
if mibBuilder.loadTexts: packetsToDSPCnt.setDescription('Jitter Buffer Error Counter')
jitterBufErrorCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jitterBufErrorCnt.setStatus('obsolete')
if mibBuilder.loadTexts: jitterBufErrorCnt.setDescription('Jitter Buffer Forced Packet count')
jitterBufForcedPacketLost = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jitterBufForcedPacketLost.setStatus('obsolete')
if mibBuilder.loadTexts: jitterBufForcedPacketLost.setDescription('Jitter Buffer Forced Packet Lost')
jitterBufForcedPacketAddition = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jitterBufForcedPacketAddition.setStatus('obsolete')
if mibBuilder.loadTexts: jitterBufForcedPacketAddition.setDescription('Jitter Buffer Forced Packet Addition')
jitterBufUnderRunCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jitterBufUnderRunCnt.setStatus('deprecated')
if mibBuilder.loadTexts: jitterBufUnderRunCnt.setDescription('Jitter Buffer Under-Run Counter')
jitterBufOverRunCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jitterBufOverRunCnt.setStatus('deprecated')
if mibBuilder.loadTexts: jitterBufOverRunCnt.setDescription('Jitter Buffer Over-Run Counter')
jitterBufAccumDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jitterBufAccumDelay.setStatus('obsolete')
if mibBuilder.loadTexts: jitterBufAccumDelay.setDescription('Jitter Buffer accumulation Delay. In packets.')
fXSorFXO = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("nonAnalogDevice", -1), ("fXO", 0), ("fXS", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fXSorFXO.setStatus('deprecated')
if mibBuilder.loadTexts: fXSorFXO.setDescription('returns the type phisical type of endpoint')
channelHookState = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("nonAnalogDevice", -1), ("offHook", 0), ("onHook", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelHookState.setStatus('deprecated')
if mibBuilder.loadTexts: channelHookState.setDescription('Channel Hook State')
notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 5))
reset = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 6))
remoteReset = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteReset.setStatus('obsolete')
if mibBuilder.loadTexts: remoteReset.setDescription('remote Reset. To remote reset the board, set an integer value to this parameter. Note: Before Reset, The current boardConfiguration parameters will be burned to the board. ')
acSetDefaults = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSetDefaults.setStatus('obsolete')
if mibBuilder.loadTexts: acSetDefaults.setDescription('To set the default values, set an integer value to this parameter')
acgwAdminState = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("shuttingDown", 1), ("unlocked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acgwAdminState.setStatus('obsolete')
if mibBuilder.loadTexts: acgwAdminState.setDescription("Determines the gateway's operational state. 0 - locked: Shutdown the GW In the time frame set by acgwAdminStateLockControl 1 - shuttingDown: (read only) Graceful Shutdown is being carried out 2 - unlocked: GW is in service. ")
acgwAdminStateLockControl = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acgwAdminStateLockControl.setStatus('obsolete')
if mibBuilder.loadTexts: acgwAdminStateLockControl.setDescription('(in sec) time left for the graceful shutdown to complete. -1 indicates unlimited time frame. 0 indicates immediate (forced) lock. Implementing the control requires setting acgwAdminState to locked. ')
acSaveConfigToSystem = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSaveConfigToSystem.setStatus('obsolete')
if mibBuilder.loadTexts: acSaveConfigToSystem.setDescription('This will save all current configuration in the board onto the flash. Any digit will call on the function. NOTE: Do NOT save the configuration while voice is running - this will cause a delay.')
acOperationalState = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acOperationalState.setStatus('obsolete')
if mibBuilder.loadTexts: acOperationalState.setDescription('The operational state of the gateway.')
remoteResetControl = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("resetFromFlashAfterBurn", 1), ("resetFromFlashNoBurn", 2), ("resetFromBootP", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteResetControl.setStatus('obsolete')
if mibBuilder.loadTexts: remoteResetControl.setDescription('Determine the remote reset action 1 - burn staged load image, if any, and config to flash, perform a reset, and load from flash 2 - perform a reset, and load from flash (staged load image, if any, and config is not burned to flash) 3 - perform a reset, and load from bootp/tftp (staged load image, if any, and config burn is not needed) * - an error is returned for any other value Note: The staged load image is an image of a cmp file that was previously loaded to a area in RAM via an HTTP upload ')
acTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21))
acBoardTrapGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 1))
acBoardTrapGlobalsName = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acBoardTrapGlobalsName.setStatus('deprecated')
if mibBuilder.loadTexts: acBoardTrapGlobalsName.setDescription('trap name')
acBoardTrapGlobalsTextualDescription = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acBoardTrapGlobalsTextualDescription.setStatus('deprecated')
if mibBuilder.loadTexts: acBoardTrapGlobalsTextualDescription.setDescription('title of trap')
acBoardTrapGlobalsSource = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acBoardTrapGlobalsSource.setStatus('deprecated')
if mibBuilder.loadTexts: acBoardTrapGlobalsSource.setDescription('Trap Source - MG1/Shelf1/Board2/Trunk3')
acBoardTrapGlobalsSeverity = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("cleared", 0), ("indeterminate", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acBoardTrapGlobalsSeverity.setStatus('deprecated')
if mibBuilder.loadTexts: acBoardTrapGlobalsSeverity.setDescription('Trap Severity')
acBoardTrapGlobalsUniqID = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acBoardTrapGlobalsUniqID.setStatus('deprecated')
if mibBuilder.loadTexts: acBoardTrapGlobalsUniqID.setDescription('Trap Uniq Id - generated by AcBoard and should be uniq for the entire EMS')
acBoardTrapGlobalsType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 0), ("communicationsAlarm", 1), ("qualityOfServiceAlarm", 2), ("processingErrorAlarm", 3), ("equipmentAlarm", 4), ("environmentalAlarm", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acBoardTrapGlobalsType.setStatus('deprecated')
if mibBuilder.loadTexts: acBoardTrapGlobalsType.setDescription('Trap type - ItuAlarmType')
acBoardTrapGlobalsProbableCause = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74))).clone(namedValues=NamedValues(("other", 0), ("adapterError", 1), ("applicationSubsystemFailure", 2), ("bandwidthReduced", 3), ("callEstablishmentError", 4), ("communicationsProtocolError", 5), ("communicationsSubsystemFailure", 6), ("configurationOrCustomizationError", 7), ("congestion", 8), ("corruptData", 9), ("cpuCyclesLimitExceeded", 10), ("dataSetOrModemError", 11), ("degradedSignal", 12), ("dteDceInterfaceError", 13), ("enclosureDoorOpen", 14), ("equipmentMalfunction", 15), ("excessiveVibration", 16), ("fileError", 17), ("fireDetected", 18), ("floodDetected", 19), ("framingError", 20), ("heatingVentCoolingSystemProblem", 21), ("humidityUnacceptable", 22), ("inputOutputDeviceError", 23), ("inputDeviceError", 24), ("lanError", 25), ("leakDetected", 26), ("localNodeTransmissionError", 27), ("lossOfFrame", 28), ("lossOfSignal", 29), ("materialSupplyExhausted", 30), ("multiplexerProblem", 31), ("outOfMemory", 32), ("ouputDeviceError", 33), ("performanceDegraded", 34), ("powerProblem", 35), ("pressureUnacceptable", 36), ("processorProblem", 37), ("pumpFailure", 38), ("queueSizeExceeded", 39), ("receiveFailure", 40), ("receiverFailure", 41), ("remoteNodeTransmissionError", 42), ("resourceAtOrNearingCapacity", 43), ("responseTimeExecessive", 44), ("retransmissionRateExcessive", 45), ("softwareError", 46), ("softwareProgramAbnormallyTerminated", 47), ("softwareProgramError", 48), ("storageCapacityProblem", 49), ("temperatureUnacceptable", 50), ("thresholdCrossed", 51), ("timingProblem", 52), ("toxicLeakDetected", 53), ("transmitFailure", 54), ("transmitterFailure", 55), ("underlyingResourceUnavailable", 56), ("versionMismatch", 57), ("authenticationFailure", 58), ("breachOfConfidentiality", 59), ("cableTamper", 60), ("delayedInformation", 61), ("denialOfService", 62), ("duplicateInformation", 63), ("informationMissing", 64), ("informationModificationDetected", 65), ("informationOutOfSequence", 66), ("intrusionDetection", 67), ("keyExpired", 68), ("nonRepudiationFailure", 69), ("outOfHoursActivity", 70), ("outOfService", 71), ("proceduralError", 72), ("unauthorizedAccessAttempt", 73), ("unexpectedInformation", 74)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acBoardTrapGlobalsProbableCause.setStatus('deprecated')
if mibBuilder.loadTexts: acBoardTrapGlobalsProbableCause.setDescription('Trap probable cause - SnmpAlarmProbableCause')
acBoardTrapGlobalsAdditionalInfo1 = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acBoardTrapGlobalsAdditionalInfo1.setStatus('deprecated')
if mibBuilder.loadTexts: acBoardTrapGlobalsAdditionalInfo1.setDescription('Trap additional info global field')
acBoardTrapGlobalsAdditionalInfo2 = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acBoardTrapGlobalsAdditionalInfo2.setStatus('deprecated')
if mibBuilder.loadTexts: acBoardTrapGlobalsAdditionalInfo2.setDescription('Trap additional info global field')
acBoardTrapGlobalsAdditionalInfo3 = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acBoardTrapGlobalsAdditionalInfo3.setStatus('deprecated')
if mibBuilder.loadTexts: acBoardTrapGlobalsAdditionalInfo3.setDescription('Trap additional info global field')
acBoardTrapGlobalsDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acBoardTrapGlobalsDateAndTime.setStatus('deprecated')
if mibBuilder.loadTexts: acBoardTrapGlobalsDateAndTime.setDescription('Date and time that the trap was sent.')
acBoardTrapDefinitions = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2))
acBoardFatalError = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 1)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acBoardFatalError.setStatus('current')
if mibBuilder.loadTexts: acBoardFatalError.setDescription('Board fatal error')
acBoardConfigurationError = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 2)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acBoardConfigurationError.setStatus('current')
if mibBuilder.loadTexts: acBoardConfigurationError.setDescription('Configuration Error')
acBoardTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 3)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acBoardTemperatureAlarm.setStatus('current')
if mibBuilder.loadTexts: acBoardTemperatureAlarm.setDescription('Temperature Alarm. Turned on when temperature exceeds 60 degrees Celsius, and relaxes when temperature goes under 55 again.')
acBoardEvBoardStarted = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 4)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acBoardEvBoardStarted.setStatus('current')
if mibBuilder.loadTexts: acBoardEvBoardStarted.setDescription('Initialization Ended')
acBoardEvResettingBoard = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 5)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acBoardEvResettingBoard.setStatus('current')
if mibBuilder.loadTexts: acBoardEvResettingBoard.setDescription('The board start Reset process - following software reset')
acFeatureKeyError = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 6)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acFeatureKeyError.setStatus('current')
if mibBuilder.loadTexts: acFeatureKeyError.setDescription('Feature key related Error')
acgwAdminStateChange = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 7)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acgwAdminStateChange.setStatus('current')
if mibBuilder.loadTexts: acgwAdminStateChange.setDescription('The administrative state of the gate way has been changed to a new state.')
acBoardCallResourcesAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 8)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acBoardCallResourcesAlarm.setStatus('current')
if mibBuilder.loadTexts: acBoardCallResourcesAlarm.setDescription('No free channels available')
acBoardControllerFailureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 9)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acBoardControllerFailureAlarm.setStatus('current')
if mibBuilder.loadTexts: acBoardControllerFailureAlarm.setDescription('The GK/Proxy not found or registration failed. internal routing table may be used for routing')
acBoardEthernetLinkAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 10)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acBoardEthernetLinkAlarm.setStatus('current')
if mibBuilder.loadTexts: acBoardEthernetLinkAlarm.setDescription('Ethernet Link is down or remote Ethernet link is down and board has no communication to any other host')
acBoardOverloadAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 11)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acBoardOverloadAlarm.setStatus('current')
if mibBuilder.loadTexts: acBoardOverloadAlarm.setDescription("Overload in one or some of the system's components")
acActiveAlarmTableOverflow = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 12)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acActiveAlarmTableOverflow.setStatus('current')
if mibBuilder.loadTexts: acActiveAlarmTableOverflow.setDescription('An active alarm could not be placed in the active alarm table because the table is full. This alarm will not clear. Reboot is the only way to completely clear the Active Alarm table overflow problem. Any alarm raised at this state will not be Carrier Grade compatible. Therefore, Updates will not clear the alarm before changing the bindings and re-raising alarms. The History tables remain unaffected. All Alarms raised prior to overflow will remain Carrier Grade compatible. Other alarms, raised after this alarm was raised, that are placed in the Active Alarm table will be Carrier Grade compatible. (This is for when after the alarm was raised there were some clears, clearing alarms off the Active Alarm table).')
acAtmPortAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 13)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acAtmPortAlarm.setStatus('current')
if mibBuilder.loadTexts: acAtmPortAlarm.setDescription(' ATM Port Alarm')
acAudioProvisioningAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 14)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acAudioProvisioningAlarm.setStatus('current')
if mibBuilder.loadTexts: acAudioProvisioningAlarm.setDescription(' This alarm is raised if the Media Server is unable to provision its audio. This could be because the Audio Provisioning System (APS) is down or there is a network problem.')
acOperationalStateChange = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 15)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acOperationalStateChange.setStatus('current')
if mibBuilder.loadTexts: acOperationalStateChange.setDescription('This alarm is raised if the operational state of the node goes to disabled. The alarm is cleared when the operational state of the node goes to enabled.')
acKeepAlive = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 16)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acKeepAlive.setStatus('current')
if mibBuilder.loadTexts: acKeepAlive.setDescription('This trap is the NAT Traversal keep alive trap. If the STUN application in the device detects a NAT then this trap will be sent out on a regular time laps - 9/10 of the acSysSTUNBindingLifeTime object. The AdditionalInfo1 varbind has the MAC address of the device. Note that all traps are sent out from the SNMP Port (usually 161).')
acNATTraversalAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 17)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acNATTraversalAlarm.setStatus('current')
if mibBuilder.loadTexts: acNATTraversalAlarm.setDescription('When the NAT placed in front a device is identified as a symmetric NAT - this alarm is raised. It is cleared when a non-symmetric NAT or no NAT replace the symmetric one. ')
acEnhancedBITStatus = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 18)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acEnhancedBITStatus.setStatus('current')
if mibBuilder.loadTexts: acEnhancedBITStatus.setDescription('This trap is used to for the status of the BIT (Built In Test). The information in the trap contains board HW elements being tested and their status. The information is presented in the additional info fields.')
acSS7LinkStateChangeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 19)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acSS7LinkStateChangeAlarm.setStatus('current')
if mibBuilder.loadTexts: acSS7LinkStateChangeAlarm.setDescription('This alarm is raised if the operational state of the SS7 link becomes XXXX. The alarm is cleared when the operational state of the link becomes XXXX.')
acSS7LinkInhibitStateChangeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 20)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acSS7LinkInhibitStateChangeAlarm.setStatus('current')
if mibBuilder.loadTexts: acSS7LinkInhibitStateChangeAlarm.setDescription('This alarm is raised if the SS7 link becomes inhibited (local or remote). The alarm is cleared when the link becomes uninhibited - local AND remote. Note that this alarm will be raised for any change in the remote or local inhibition status.')
acSS7LinkBlockStateChangeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 21)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acSS7LinkBlockStateChangeAlarm.setStatus('current')
if mibBuilder.loadTexts: acSS7LinkBlockStateChangeAlarm.setDescription('This alarm is raised if the SS7 link becomes blocked (local or remote). The alarm is cleared when the link becomes unblocked - local AND remote. Note that this alarm will be raised for any change in the remote or local blocking status.')
acSS7LinkCongestionStateChangeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 22)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acSS7LinkCongestionStateChangeAlarm.setStatus('current')
if mibBuilder.loadTexts: acSS7LinkCongestionStateChangeAlarm.setDescription('This alarm is raised if the SS7 link becomes congested (local or remote). The alarm is cleared when the link becomes uncongested - local AND remote. Note that this alarm will be raised for any change in the remote or local congestion status.')
acSS7LinkSetStateChangeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 23)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acSS7LinkSetStateChangeAlarm.setStatus('current')
if mibBuilder.loadTexts: acSS7LinkSetStateChangeAlarm.setDescription('This alarm is raised if the operational state of the SS7 linkset becomes BUSY. The alarm is cleared when the operational state of the linkset becomes IN-SERVICE or OFFLINE.')
acSS7RouteSetStateChangeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 24)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acSS7RouteSetStateChangeAlarm.setStatus('current')
if mibBuilder.loadTexts: acSS7RouteSetStateChangeAlarm.setDescription('This alarm is raised if the operational state of the SS7 routeset becomes BUSY. The alarm is cleared when the operational state of the routeset becomes IN-SERVICE or OFFLINE.')
acSS7SNSetStateChangeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 25)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acSS7SNSetStateChangeAlarm.setStatus('current')
if mibBuilder.loadTexts: acSS7SNSetStateChangeAlarm.setDescription('This alarm is raised if the operational state of the SS7 node becomes BUSY. The alarm is cleared when the operational state of the node becomes IN-SERVICE or OFFLINE.')
acSS7RedundancyAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 26)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acSS7RedundancyAlarm.setStatus('current')
if mibBuilder.loadTexts: acSS7RedundancyAlarm.setDescription('Raised when the SS7 redundancy degregated. Cleared when all entities of redundancy are fully functional and in serveice.')
acPerformanceMonitoringThresholdCrossing = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 27)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acPerformanceMonitoringThresholdCrossing.setStatus('current')
if mibBuilder.loadTexts: acPerformanceMonitoringThresholdCrossing.setDescription("This log trap is sent out for every time the threshold of a Performance Monitored object is crossed. The severity field is 'indeterminate' when the crossing is above the threshold and 'cleared' when it goes back under the threshold. The 'source' varbind in the trap indicates the object for which the threshold is being crossed.")
acHTTPDownloadResult = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 28)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acHTTPDownloadResult.setStatus('current')
if mibBuilder.loadTexts: acHTTPDownloadResult.setDescription('This trap indicates the result of a recent file download (includes HTTP error code, if available).')
acFanTrayAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 29)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acFanTrayAlarm.setStatus('current')
if mibBuilder.loadTexts: acFanTrayAlarm.setDescription('This alarm is raised when the fan tray is missing or some of the fans are faulty. If the fan tray is missing or more then X fans are faulty the severity will be Critical. If more then one and less the X fans are faulty the severity will be Major. ')
acPowerSupplyAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 30)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acPowerSupplyAlarm.setStatus('current')
if mibBuilder.loadTexts: acPowerSupplyAlarm.setDescription('This alarm is raised when the HA (High Availability) feature is active and one of the power supply units is faulty.')
acPEMAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 31)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acPEMAlarm.setStatus('current')
if mibBuilder.loadTexts: acPEMAlarm.setDescription('This alarm is raised when the HA (High Availability) feature is active. The severity is critical if one of the PEM units is missing and major if the electric wire to one of the units is disconnected. ')
acSAMissingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 32)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acSAMissingAlarm.setStatus('current')
if mibBuilder.loadTexts: acSAMissingAlarm.setDescription('This alarm is raised when the SA module in the M3K MG is missing. Whenthere is no SAT there are no other chassis HW related alarms. Note - relevant only for M3K.')
acHASystemFaultAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 33)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acHASystemFaultAlarm.setStatus('current')
if mibBuilder.loadTexts: acHASystemFaultAlarm.setDescription('This alarm is raised when the HA (High Availability) feature is active and the system is NOT HA. Critical severity - 1.Wrong HW Configuration. 2. Redundant module is missing (not in slot). 3. The redundant module is non operable. Minor severity - waiting for redunadant to connect (after reset!). ')
acHASystemConfigMismatchAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 34)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acHASystemConfigMismatchAlarm.setStatus('current')
if mibBuilder.loadTexts: acHASystemConfigMismatchAlarm.setDescription('This alarm is raised when the HA (High Availability) feature is active and there has been a configuration change due to which the HA system may or may not be usable.')
acHASystemSwitchOverAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 35)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acHASystemSwitchOverAlarm.setStatus('current')
if mibBuilder.loadTexts: acHASystemSwitchOverAlarm.setDescription('This alarm is raised when the HA (High Availability) feature is active and there has been a switchover due to failure or reset in the active module.')
acUserInputAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 36)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acUserInputAlarm.setStatus('current')
if mibBuilder.loadTexts: acUserInputAlarm.setDescription('This Alarm is raised when the input dry contact is short circuited. Cleared when the circuit is reopened.')
acDChannelStatus = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 37)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acDChannelStatus.setStatus('current')
if mibBuilder.loadTexts: acDChannelStatus.setDescription('This non alarm trap is sent when establishment, re-establishment or release of LAPD link with its peer connection occurs. The trap will be sent out with one of the following in the textual description: D-channel synchronized D-channel not-synchronized')
acSonetSectionLOFAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 38)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acSonetSectionLOFAlarm.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionLOFAlarm.setDescription('SONET section Loss of Frame alarm.')
acSonetSectionLOSAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 39)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acSonetSectionLOSAlarm.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionLOSAlarm.setDescription('SONET section Loss of Signal alarm.')
acSonetLineAISAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 40)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acSonetLineAISAlarm.setStatus('current')
if mibBuilder.loadTexts: acSonetLineAISAlarm.setDescription('SONET Line AIS alarm.')
acSonetLineRDIAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 41)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acSonetLineRDIAlarm.setStatus('current')
if mibBuilder.loadTexts: acSonetLineRDIAlarm.setDescription('SONET Line RDI alarm.')
acSonetIfHwFailureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 42)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acSonetIfHwFailureAlarm.setStatus('current')
if mibBuilder.loadTexts: acSonetIfHwFailureAlarm.setDescription('SONET or SDH medium Interface has failed.')
acHwFailureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 43)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acHwFailureAlarm.setStatus('current')
if mibBuilder.loadTexts: acHwFailureAlarm.setDescription('HW failure alarm.')
acH248LostConnectionWithCA = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 44)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acH248LostConnectionWithCA.setStatus('current')
if mibBuilder.loadTexts: acH248LostConnectionWithCA.setDescription('H248 lost connection with call agent')
acDialPlanFileReplaced = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 45)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acDialPlanFileReplaced.setStatus('current')
if mibBuilder.loadTexts: acDialPlanFileReplaced.setDescription('dial plan file replaced notification')
acAnalogPortSPIOutOfService = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 46)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acAnalogPortSPIOutOfService.setStatus('current')
if mibBuilder.loadTexts: acAnalogPortSPIOutOfService.setDescription('Analog port out of service ')
acAnalogPortHighTemperature = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 47)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acAnalogPortHighTemperature.setStatus('current')
if mibBuilder.loadTexts: acAnalogPortHighTemperature.setDescription('Analog Port High Temperature')
acHitlessUpdateStatus = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 48)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acHitlessUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: acHitlessUpdateStatus.setDescription('Notification trap that is sent out at the beginning and the end of a Hitless SW update. Failure during the process will also instigate the trap. Relevant to HA systems only.')
acTrunksAlarmNearEndLOS = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 49)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acTrunksAlarmNearEndLOS.setStatus('current')
if mibBuilder.loadTexts: acTrunksAlarmNearEndLOS.setDescription("Loss of signal at trunk's near end.")
acTrunksAlarmNearEndLOF = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 50)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acTrunksAlarmNearEndLOF.setStatus('current')
if mibBuilder.loadTexts: acTrunksAlarmNearEndLOF.setDescription("Loss of frame at trunk's near end.")
acTrunksAlarmRcvAIS = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 51)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acTrunksAlarmRcvAIS.setStatus('current')
if mibBuilder.loadTexts: acTrunksAlarmRcvAIS.setDescription("Received AIS from trunk's far end.")
acTrunksAlarmFarEndLOF = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 52)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acTrunksAlarmFarEndLOF.setStatus('current')
if mibBuilder.loadTexts: acTrunksAlarmFarEndLOF.setDescription("Loss of frame at trunk's far end.")
acIPv6ErrorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 53)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acIPv6ErrorAlarm.setStatus('current')
if mibBuilder.loadTexts: acIPv6ErrorAlarm.setDescription('Alarm trap that is sent out for IPv6 related errors.')
acAMSProcedureResult = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 54)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acAMSProcedureResult.setStatus('current')
if mibBuilder.loadTexts: acAMSProcedureResult.setDescription('AMS procedure related information')
acWeakRedundancy = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 55)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acWeakRedundancy.setStatus('current')
if mibBuilder.loadTexts: acWeakRedundancy.setDescription('The system is in weak redundancy mode. Switch over is done with a reset to the board taking over.')
acTMInconsistentRemoteAndLocalPLLStatus = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 56)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acTMInconsistentRemoteAndLocalPLLStatus.setStatus('current')
if mibBuilder.loadTexts: acTMInconsistentRemoteAndLocalPLLStatus.setDescription('Inconsistent Remote And Local PLL Status ')
acTMReferenceStatus = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 57)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acTMReferenceStatus.setStatus('current')
if mibBuilder.loadTexts: acTMReferenceStatus.setDescription('Timing manager reference status')
acTMReferenceChange = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 58)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acTMReferenceChange.setStatus('current')
if mibBuilder.loadTexts: acTMReferenceChange.setDescription('Timing manager reference Change')
acGWSASEmergencyModeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 59)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acGWSASEmergencyModeAlarm.setStatus('current')
if mibBuilder.loadTexts: acGWSASEmergencyModeAlarm.setDescription('The alarm is raised when SAS enters the Emergency Mode and then cleared when SAS enters Normal Mode again.')
acV52InterfaceAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 60)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acV52InterfaceAlarm.setStatus('current')
if mibBuilder.loadTexts: acV52InterfaceAlarm.setDescription("The alarm is raised for v5.2 interface errors and alarms.{@}For a detailed list of the interfaces' alarms see the acV5InterfceTable.")
acSonetPathSTSLOPAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 61)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acSonetPathSTSLOPAlarm.setStatus('current')
if mibBuilder.loadTexts: acSonetPathSTSLOPAlarm.setDescription('Sonet Path STS LOP alarm.')
acSonetPathSTSAISAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 62)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acSonetPathSTSAISAlarm.setStatus('current')
if mibBuilder.loadTexts: acSonetPathSTSAISAlarm.setDescription('Sonet Path STS AIS alarm.')
acSonetPathSTSRDIAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 63)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acSonetPathSTSRDIAlarm.setStatus('current')
if mibBuilder.loadTexts: acSonetPathSTSRDIAlarm.setDescription('Sonet Path STS RDI alarm.')
acSonetPathUnequippedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 64)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acSonetPathUnequippedAlarm.setStatus('current')
if mibBuilder.loadTexts: acSonetPathUnequippedAlarm.setDescription('Sonet Path Unequipped alarm.')
acSonetPathSignalLabelMismatchAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 65)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acSonetPathSignalLabelMismatchAlarm.setStatus('current')
if mibBuilder.loadTexts: acSonetPathSignalLabelMismatchAlarm.setDescription('Sonet Path Signal Label Mismatch alarm.')
acDS3RAIAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 66)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acDS3RAIAlarm.setStatus('current')
if mibBuilder.loadTexts: acDS3RAIAlarm.setDescription('DS3 RAI alarm.')
acDS3AISAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 67)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acDS3AISAlarm.setStatus('current')
if mibBuilder.loadTexts: acDS3AISAlarm.setDescription('DS3 AIS alarm.')
acDS3LOFAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 68)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acDS3LOFAlarm.setStatus('current')
if mibBuilder.loadTexts: acDS3LOFAlarm.setDescription('DS3 LOF alarm.')
acDS3LOSAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 69)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acDS3LOSAlarm.setStatus('current')
if mibBuilder.loadTexts: acDS3LOSAlarm.setDescription('DS3 LOS alarm.')
acSWUpgradeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 70)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acSWUpgradeAlarm.setStatus('current')
if mibBuilder.loadTexts: acSWUpgradeAlarm.setDescription('Raised for SW upgrade process errors.')
acNTPServerStatusAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 71)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acNTPServerStatusAlarm.setStatus('current')
if mibBuilder.loadTexts: acNTPServerStatusAlarm.setDescription('NTP server status alarm. {@}Raised when the connection to the NTP server is lost. Cleared when the connection is reestablished. {@}Unset time (as a result of no connection to NTP server) may result with functionality degradation and failure in device.')
acThreeWayConferenceOutOfResources = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 72)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acThreeWayConferenceOutOfResources.setStatus('current')
if mibBuilder.loadTexts: acThreeWayConferenceOutOfResources.setDescription('Three way conference out of resources. ')
acSS7AliasPcStateChangeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 73)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acSS7AliasPcStateChangeAlarm.setStatus('current')
if mibBuilder.loadTexts: acSS7AliasPcStateChangeAlarm.setDescription('raised when the Alias PC is in BUSY state. Cleared when it is in In-Service state.')
acSS7UalGroupStateChangeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 74)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acSS7UalGroupStateChangeAlarm.setStatus('current')
if mibBuilder.loadTexts: acSS7UalGroupStateChangeAlarm.setDescription('Raised when the Ual Group Asp state is not ACTIVE. Cleared when it is Active.')
acLDAPLostConnection = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 75)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acLDAPLostConnection.setStatus('current')
if mibBuilder.loadTexts: acLDAPLostConnection.setDescription('Raised when there is no connection to the LDAP server.')
acAnalogPortGroundFaultOutOfService = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 76)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acAnalogPortGroundFaultOutOfService.setStatus('current')
if mibBuilder.loadTexts: acAnalogPortGroundFaultOutOfService.setDescription('Raised when the MP500 FXS port is inactive due to ground fault.')
acSSHConnectionStatus = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 77)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acSSHConnectionStatus.setStatus('current')
if mibBuilder.loadTexts: acSSHConnectionStatus.setDescription('This trap indicates the result of a recent SSH connection attempt.')
acOCSPServerStatusAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5003, 9, 10, 1, 21, 2, 0, 78)).setObjects(("AcBoard", "acBoardTrapGlobalsName"), ("AcBoard", "acBoardTrapGlobalsTextualDescription"), ("AcBoard", "acBoardTrapGlobalsSource"), ("AcBoard", "acBoardTrapGlobalsSeverity"), ("AcBoard", "acBoardTrapGlobalsUniqID"), ("AcBoard", "acBoardTrapGlobalsType"), ("AcBoard", "acBoardTrapGlobalsProbableCause"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo1"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo2"), ("AcBoard", "acBoardTrapGlobalsAdditionalInfo3"), ("AcBoard", "acBoardTrapGlobalsDateAndTime"))
if mibBuilder.loadTexts: acOCSPServerStatusAlarm.setStatus('current')
if mibBuilder.loadTexts: acOCSPServerStatusAlarm.setDescription('raised when OCSP connection is not available.')
mibBuilder.exportSymbols("AcBoard", acSS7LinkSetStateChangeAlarm=acSS7LinkSetStateChangeAlarm, acHASystemConfigMismatchAlarm=acHASystemConfigMismatchAlarm, aTMPHYType=aTMPHYType, boardType=boardType, acChDefaultFaxTransportMode=acChDefaultFaxTransportMode, boardIPAddr=boardIPAddr, inputGain=inputGain, acBoardCallResourcesAlarm=acBoardCallResourcesAlarm, acDefaultChannelSettings=acDefaultChannelSettings, channelsCount=channelsCount, callAgentPort=callAgentPort, gateWayName=gateWayName, acFanTrayAlarm=acFanTrayAlarm, dJBufMinDelay=dJBufMinDelay, acLedStatusRate=acLedStatusRate, acTrunkslCount=acTrunkslCount, acBoardTrapGlobalsAdditionalInfo1=acBoardTrapGlobalsAdditionalInfo1, acNTPUpdateInterval=acNTPUpdateInterval, acSS7AliasPcStateChangeAlarm=acSS7AliasPcStateChangeAlarm, tDMBusOutputStartingChannel=tDMBusOutputStartingChannel, modemRelayRedundancyDepth=modemRelayRedundancyDepth, channelHookState=channelHookState, tDMBusEnableFallBack=tDMBusEnableFallBack, acSonetLineRDIAlarm=acSonetLineRDIAlarm, acBoardFatalError=acBoardFatalError, lineBuildOutLoss=lineBuildOutLoss, acTrap=acTrap, cPUSpeed=cPUSpeed, acGWSASEmergencyModeAlarm=acGWSASEmergencyModeAlarm, megacoGatewayName=megacoGatewayName, acActiveFeaturesList=acActiveFeaturesList, enableDiagnostics=enableDiagnostics, acgwAdminStateLockControl=acgwAdminStateLockControl, tPNCPVCI=tPNCPVCI, acFxs=acFxs, fAXTransportType=fAXTransportType, acChDefaultCallerIDType=acChDefaultCallerIDType, megacoActiveCallAgentIp=megacoActiveCallAgentIp, acDisableWEBConfig=acDisableWEBConfig, sendIdleCASUponLinkFail=sendIdleCASUponLinkFail, remoteRTPPort=remoteRTPPort, aTMSettings=aTMSettings, acBoardTrapGlobalsType=acBoardTrapGlobalsType, vccProfile=vccProfile, acWEBAccessActionResult=acWEBAccessActionResult, acChDefaultModemRelayMaxRate=acChDefaultModemRelayMaxRate, acChDefaultEchoCancler=acChDefaultEchoCancler, acBoardEthernetLinkAlarm=acBoardEthernetLinkAlarm, acChDefaultEchoCanclerHybridLoss=acChDefaultEchoCanclerHybridLoss, acSonetPathSTSAISAlarm=acSonetPathSTSAISAlarm, acChDefaultV32ModemTransportType=acChDefaultV32ModemTransportType, faxRelayRedundancyDepth=faxRelayRedundancyDepth, acChDefaultFlashHookPeriod=acChDefaultFlashHookPeriod, protocolType=protocolType, pendingIdle=pendingIdle, channelTDMBusSettingsTable=channelTDMBusSettingsTable, acDS3LOFAlarm=acDS3LOFAlarm, PYSNMP_MODULE_ID=acBoard, acTrunksAlarmFarEndLOF=acTrunksAlarmFarEndLOF, snmpManagerIsUsed=snmpManagerIsUsed, redundantAgentIP=redundantAgentIP, acAMSProcedureResult=acAMSProcedureResult, snmpManagerTrapPort=snmpManagerTrapPort, clockMaster=clockMaster, acHTTPDownloadResult=acHTTPDownloadResult, faxModemRelayVolume=faxModemRelayVolume, acChDefaultVoiceVolume=acChDefaultVoiceVolume, acCallerIDType=acCallerIDType, channelStatusTable=channelStatusTable, acNTPSettings=acNTPSettings, lineCode=lineCode, amsNumOfAnnouncementPorts=amsNumOfAnnouncementPorts, megacoTrunkName=megacoTrunkName, acFlashVersion=acFlashVersion, rTPRTCPSettingsTable=rTPRTCPSettingsTable, megacoEndpointName=megacoEndpointName, acFxsCoefficients=acFxsCoefficients, aTMLoopBack=aTMLoopBack, acChDefaultM=acChDefaultM, trunkSettingsTable=trunkSettingsTable, acDS3AISAlarm=acDS3AISAlarm, acWEBAccess=acWEBAccess, acWEBAccessIndex=acWEBAccessIndex, redundantAgentPort=redundantAgentPort, boardInformation=boardInformation, softwareVersion=softwareVersion, acBoardTrapDefinitions=acBoardTrapDefinitions, amsAASPackagesProfile=amsAASPackagesProfile, audioCodes=audioCodes, utopiaBus16=utopiaBus16, acBoardTrapGlobalsAdditionalInfo3=acBoardTrapGlobalsAdditionalInfo3, uniDirectionalRTP=uniDirectionalRTP, modemRelayMaxRate=modemRelayMaxRate, v23ModemTransportType=v23ModemTransportType, acBoardOverloadAlarm=acBoardOverloadAlarm, acSS7LinkCongestionStateChangeAlarm=acSS7LinkCongestionStateChangeAlarm, packetsToDSPCnt=packetsToDSPCnt, acEnhancedBITStatus=acEnhancedBITStatus, acSonetSectionLOFAlarm=acSonetSectionLOFAlarm, acPSTNCASTableNum=acPSTNCASTableNum, acChDefaultT38ProtectionMode=acChDefaultT38ProtectionMode, vPMask=vPMask, acFeatureKey=acFeatureKey, acHASystemSwitchOverAlarm=acHASystemSwitchOverAlarm, transportSettingsTable=transportSettingsTable, acBoardTrapGlobalsDateAndTime=acBoardTrapGlobalsDateAndTime, acPerformanceMonitoringThresholdCrossing=acPerformanceMonitoringThresholdCrossing, tDMBusSpeed=tDMBusSpeed, localRTPPort=localRTPPort, rTPRTCPSettings=rTPRTCPSettings, acV5InterfaceTrunkGroupId=acV5InterfaceTrunkGroupId, acLedStatusColor=acLedStatusColor, amsPrimaryLanguage=amsPrimaryLanguage, boardName=boardName, acSonetPathSTSLOPAlarm=acSonetPathSTSLOPAlarm, acCasTabeName=acCasTabeName, snmpManagersEntry=snmpManagersEntry, acCptFile=acCptFile, acChDefaultMFTransportType=acChDefaultMFTransportType, acTrunkAdminState=acTrunkAdminState, multyPhy=multyPhy, megacoCallAgentsTable=megacoCallAgentsTable, serialNum=serialNum, rxRTPPayloadType=rxRTPPayloadType, acDspType=acDspType, lineBuildOutXPM1=lineBuildOutXPM1, acV52InterfaceAlarm=acV52InterfaceAlarm, acFeatureKeyString=acFeatureKeyString, acPolarityReversalType=acPolarityReversalType, iPTOS=iPTOS, iniFileVersion=iniFileVersion, acHASystemFaultAlarm=acHASystemFaultAlarm, acPEMAlarm=acPEMAlarm, acChDefaultSilenceSuppression=acChDefaultSilenceSuppression, acPMStatus=acPMStatus, voiceSettingsEntry=voiceSettingsEntry, pFE=pFE, tDMBusOutputPort=tDMBusOutputPort, trunkSettings=trunkSettings, acDS3RAIAlarm=acDS3RAIAlarm, dJBSettingsTable=dJBSettingsTable, cID=cID, rxSilencePeriod=rxSilencePeriod, snmpManagerTrapSendingEnable=snmpManagerTrapSendingEnable, bypassNIC=bypassNIC, eCHybridLoss=eCHybridLoss, acWEBAccessUserCode=acWEBAccessUserCode, acChDefaultFaxRelayRedundancyDepth=acChDefaultFaxRelayRedundancyDepth, acTMInconsistentRemoteAndLocalPLLStatus=acTMInconsistentRemoteAndLocalPLLStatus, acTMReferenceStatus=acTMReferenceStatus, boardConfiguration=boardConfiguration, testMode=testMode, acWEBAccessUserName=acWEBAccessUserName, remoteResetControl=remoteResetControl, acKeepAlive=acKeepAlive, acIsdnDuplicateQ931BuffMode=acIsdnDuplicateQ931BuffMode, acBoardTrapGlobalsName=acBoardTrapGlobalsName, aMsConfiguration=aMsConfiguration, amsNumOfConferencePorts=amsNumOfConferencePorts, tDMBusOutputDisable=tDMBusOutputDisable, acOperationalStateChange=acOperationalStateChange, acUserInputAlarm=acUserInputAlarm, dJBSettings=dJBSettings, acCasTables=acCasTables, acSS7UalGroupStateChangeAlarm=acSS7UalGroupStateChangeAlarm, faxRelayMaxRate=faxRelayMaxRate, cNAME=cNAME, acBoardControllerFailureAlarm=acBoardControllerFailureAlarm, acActiveAlarmTableOverflow=acActiveAlarmTableOverflow, amsNumOfLawfulInterceptPorts=amsNumOfLawfulInterceptPorts, acEnableSyslog=acEnableSyslog, acHwFailureAlarm=acHwFailureAlarm, megacoCurrentProfile=megacoCurrentProfile, acPowerSupplyAlarm=acPowerSupplyAlarm, trunkSettingsEntry=trunkSettingsEntry, acMGControlProtocolType=acMGControlProtocolType, acBoardEvResettingBoard=acBoardEvResettingBoard, acSonetPathSTSRDIAlarm=acSonetPathSTSRDIAlarm, tDMBusLocalReference=tDMBusLocalReference, m=m, acChDefaultDJBufMinDelay=acChDefaultDJBufMinDelay, voiceVolume=voiceVolume, acSAMissingAlarm=acSAMissingAlarm, acCasTablesTable=acCasTablesTable, acChDefaultDJBufOptFactor=acChDefaultDJBufOptFactor, acgwAdminStateChange=acgwAdminStateChange, acChDefaultFaxRelayECMEnable=acChDefaultFaxRelayECMEnable, framingMethod=framingMethod, voiceSettingsTable=voiceSettingsTable, acH248LostConnectionWithCA=acH248LostConnectionWithCA, jitterBufUnderRunCnt=jitterBufUnderRunCnt, acIsdnNfasGroupNumber=acIsdnNfasGroupNumber, acTrunksAlarmNearEndLOF=acTrunksAlarmNearEndLOF, acBoardTemperatureAlarm=acBoardTemperatureAlarm, megacoCallAgentPort=megacoCallAgentPort, tDMBusType=tDMBusType, acAnalogPortGroundFaultOutOfService=acAnalogPortGroundFaultOutOfService, acChDefaultV34ModemTransportType=acChDefaultV34ModemTransportType, jitterBufErrorCnt=jitterBufErrorCnt, lineBuildOutXPM0=lineBuildOutXPM0, acSonetSectionLOSAlarm=acSonetSectionLOSAlarm, jitterBufOverRunCnt=jitterBufOverRunCnt, reset=reset, acTrunksAlarmRcvAIS=acTrunksAlarmRcvAIS, acCasTablesEntry=acCasTablesEntry, redundantCallAgentDomainName=redundantCallAgentDomainName, jitterBufAccumDelay=jitterBufAccumDelay, txSilencePeriod=txSilencePeriod, acSS7LinkId=acSS7LinkId, amsProfile=amsProfile, remoteRTPAddr=remoteRTPAddr, acSS7SNSetStateChangeAlarm=acSS7SNSetStateChangeAlarm, acOCSPServerStatusAlarm=acOCSPServerStatusAlarm, acChDefaultUseT38orFRF11=acChDefaultUseT38orFRF11, snmpManagersTable=snmpManagersTable, tDMBusOutputChannel=tDMBusOutputChannel, acChDefaultInputGain=acChDefaultInputGain, acDChannelStatus=acDChannelStatus, coder=coder, acDspVersionTemplate=acDspVersionTemplate, acSonetIfHwFailureAlarm=acSonetIfHwFailureAlarm, fXSorFXO=fXSorFXO, sAALLink0VCI=sAALLink0VCI, megacoCheckLegalityOfMGC=megacoCheckLegalityOfMGC, sAALLink0VPI=sAALLink0VPI, channelStatusEntry=channelStatusEntry, acNTPServerIPAddress=acNTPServerIPAddress, sCE=sCE, acIsdnNfasInterfaceId=acIsdnNfasInterfaceId, auxiliarySettings=auxiliarySettings, snmpManagers=snmpManagers, faxModemSettings=faxModemSettings, acDS3LOSAlarm=acDS3LOSAlarm, acChDefaultRTPRedundancyDepth=acChDefaultRTPRedundancyDepth, tPNCPVPI=tPNCPVPI, idlePCMPattern=idlePCMPattern, acBoardFxsOrFxo=acBoardFxsOrFxo, mGCPCommunicationLayerTimeout=mGCPCommunicationLayerTimeout, acSetDefaults=acSetDefaults, acSS7traceLevel=acSS7traceLevel, tDMBusNetRefSpeed=tDMBusNetRefSpeed, endPointName=endPointName, acSS7RedundancyAlarm=acSS7RedundancyAlarm, acContrlProtocolTransportType=acContrlProtocolTransportType, acWEBAccessTable=acWEBAccessTable, faxRelayECMEnable=faxRelayECMEnable, acChDefaultDTMFTransportType=acChDefaultDTMFTransportType, defaultGatewayAddr=defaultGatewayAddr, acSaveConfigToSystem=acSaveConfigToSystem, acQ931RELAYMODE=acQ931RELAYMODE, enhancedFaxRelayRedundancyDepth=enhancedFaxRelayRedundancyDepth, acAnalogPortSPIOutOfService=acAnalogPortSPIOutOfService, acOverrideDefaultIdleABCDPattern=acOverrideDefaultIdleABCDPattern, acTrunkCasTableIndex=acTrunkCasTableIndex)
mibBuilder.exportSymbols("AcBoard", channelTDMBusSettingsEntry=channelTDMBusSettingsEntry, notifications=notifications, disablePayloadScrambling=disablePayloadScrambling, rxFaxMode=rxFaxMode, channelStatus=channelStatus, tDMBusClockSource=tDMBusClockSource, callAgentDomainName=callAgentDomainName, rTPRTCPSettingsEntry=rTPRTCPSettingsEntry, transportSettings=transportSettings, trunkId=trunkId, acChDefaultFaxModemRelayVolume=acChDefaultFaxModemRelayVolume, faxModemBypassM=faxModemBypassM, acMeanFreeChannels=acMeanFreeChannels, acChDefaultTestMode=acChDefaultTestMode, acGeneric=acGeneric, acNATTraversalAlarm=acNATTraversalAlarm, acBoardMibs=acBoardMibs, rTCPMeanTxInterval=rTCPMeanTxInterval, snmpManagerIndex=snmpManagerIndex, acIsdnGeneralCCBehavior=acIsdnGeneralCCBehavior, dSPCount=dSPCount, snmpManagerIp=snmpManagerIp, acLDAPLostConnection=acLDAPLostConnection, acChDefaultFaxModemBypassCoderType=acChDefaultFaxModemBypassCoderType, jitterBufForcedPacketAddition=jitterBufForcedPacketAddition, acProducts=acProducts, txRTPPayloadType=txRTPPayloadType, utopiaSlave=utopiaSlave, lineBuildOutXPM2=lineBuildOutXPM2, acFirstPortDuplexMode=acFirstPortDuplexMode, acSS7SettingsTable=acSS7SettingsTable, dchConfig=dchConfig, acFirstPortSpeed=acFirstPortSpeed, pCMLawSelect=pCMLawSelect, tDMBusMasterSlaveSelection=tDMBusMasterSlaveSelection, slotNumber=slotNumber, remoteT38Port=remoteT38Port, acTrunksAlarmNearEndLOS=acTrunksAlarmNearEndLOS, acChDefaultFaxRelayMaxRate=acChDefaultFaxRelayMaxRate, masterSlaveMode=masterSlaveMode, acBoardTrapGlobals=acBoardTrapGlobals, iPPrecedence=iPPrecedence, terminationSide=terminationSide, supplementaryField=supplementaryField, acFxoCoefficients=acFxoCoefficients, transportSettingsEntry=transportSettingsEntry, acBoard=acBoard, remoteT38Addr=remoteT38Addr, acHitlessUpdateStatus=acHitlessUpdateStatus, acSS7LinkBlockStateChangeAlarm=acSS7LinkBlockStateChangeAlarm, acVpFile=acVpFile, acNTPServerStatusAlarm=acNTPServerStatusAlarm, acConfigFiles=acConfigFiles, baseUDPPort=baseUDPPort, acAtmPortAlarm=acAtmPortAlarm, vCMask=vCMask, dJBSettingsEntry=dJBSettingsEntry, acChDefaultV23ModemTransportType=acChDefaultV23ModemTransportType, tDMBusInputPort=tDMBusInputPort, megacoActiveCallAgentPort=megacoActiveCallAgentPort, rxDTMFPeriod=rxDTMFPeriod, externalClk=externalClk, acSS7Settings=acSS7Settings, faxModemSettingsEntry=faxModemSettingsEntry, acSS7LinkStateChangeAlarm=acSS7LinkStateChangeAlarm, rTPActive=rTPActive, rTPRedundancyDepth=rTPRedundancyDepth, slavePhyNum=slavePhyNum, amsApsPort=amsApsPort, idleABCD=idleABCD, acBoardTemperature=acBoardTemperature, megacoCallAgentIsUsed=megacoCallAgentIsUsed, acTMReferenceChange=acTMReferenceChange, supplementary=supplementary, acBoardTrapGlobalsSource=acBoardTrapGlobalsSource, acSyslogServerIP=acSyslogServerIP, tDMBusInputChannel=tDMBusInputChannel, acBoardTrapGlobalsAdditionalInfo2=acBoardTrapGlobalsAdditionalInfo2, amsSecondaryLanguage=amsSecondaryLanguage, boardTDMBusOutputPort=boardTDMBusOutputPort, acWEBAccessRowStatus=acWEBAccessRowStatus, eCLength=eCLength, acChDefaultDTMFDetectionPoint=acChDefaultDTMFDetectionPoint, acSNMPManagerIP=acSNMPManagerIP, acChDefaultModemRelayRedundancyDepth=acChDefaultModemRelayRedundancyDepth, acChDefaultV22ModemTransportType=acChDefaultV22ModemTransportType, sAALLink1VPI=sAALLink1VPI, t38FaxRelayProtectionMode=t38FaxRelayProtectionMode, acBoardTrapGlobalsProbableCause=acBoardTrapGlobalsProbableCause, dJBufOptFactor=dJBufOptFactor, v22ModemTransportType=v22ModemTransportType, v32ModemTransportType=v32ModemTransportType, acOperationalState=acOperationalState, acgwAdminState=acgwAdminState, acOverrideDefaultIdlePCMPattern=acOverrideDefaultIdlePCMPattern, acChDefaultV21ModemTransportType=acChDefaultV21ModemTransportType, txFaxMode=txFaxMode, acRegistrations=acRegistrations, acCPControlDiffServ=acCPControlDiffServ, acCasTableIndex=acCasTableIndex, acIsdnOutgoingCallsBehavior=acIsdnOutgoingCallsBehavior, acIsdnQ931LayerResponseBehavior=acIsdnQ931LayerResponseBehavior, acFeatureKeyError=acFeatureKeyError, acSS7SettingsEntry=acSS7SettingsEntry, jitterBufForcedPacketLost=jitterBufForcedPacketLost, acBoardTrapGlobalsTextualDescription=acBoardTrapGlobalsTextualDescription, channelTDMBusSettings=channelTDMBusSettings, sAALLink1VCI=sAALLink1VCI, acPSTNParameters=acPSTNParameters, acDialPlanFileReplaced=acDialPlanFileReplaced, acSysUpTime=acSysUpTime, acSonetPathUnequippedAlarm=acSonetPathUnequippedAlarm, acSS7LinkInhibitStateChangeAlarm=acSS7LinkInhibitStateChangeAlarm, acWEBAccessEntry=acWEBAccessEntry, v34ModemTransportType=v34ModemTransportType, acChDefaultRtpIpPrecedence=acChDefaultRtpIpPrecedence, mGCPSettings=mGCPSettings, acWeakRedundancy=acWeakRedundancy, megacoSettings=megacoSettings, faxModemBypassCoderType=faxModemBypassCoderType, acBoardEvBoardStarted=acBoardEvBoardStarted, acBoardTrapGlobalsSeverity=acBoardTrapGlobalsSeverity, traceLevel=traceLevel, disableSoftIPLoopback=disableSoftIPLoopback, boardTDMBusSettings=boardTDMBusSettings, megacoCallAgents=megacoCallAgents, acSWUpgradeAlarm=acSWUpgradeAlarm, acAudioProvisioningAlarm=acAudioProvisioningAlarm, useT38orFRF11=useT38orFRF11, megacoCallAgentId=megacoCallAgentId, acMaxFreeChannels=acMaxFreeChannels, useNIorPCI=useNIorPCI, lineBuildOutOverwrite=lineBuildOutOverwrite, callAgentIP=callAgentIP, megacoCallAgentsEntry=megacoCallAgentsEntry, acPSTNIuaInterfaceId=acPSTNIuaInterfaceId, acSSHConnectionStatus=acSSHConnectionStatus, faxModemSettingsTable=faxModemSettingsTable, amsNumOfTestTrunkPorts=amsNumOfTestTrunkPorts, megacoCallAgentIp=megacoCallAgentIp, channelConfiguration=channelConfiguration, networkSettings=networkSettings, boardSubNetAddr=boardSubNetAddr, acNTPUtcOffset=acNTPUtcOffset, amsApsIpAddress=amsApsIpAddress, txDTMFPeriod=txDTMFPeriod, acBoardTrapGlobalsUniqID=acBoardTrapGlobalsUniqID, hPFE=hPFE, eCE=eCE, pHYClkSource=pHYClkSource, acAnalogPortHighTemperature=acAnalogPortHighTemperature, acPhysicalModCount=acPhysicalModCount, acChDefaultRtpIpTos=acChDefaultRtpIpTos, trunkPackSoftwareDate=trunkPackSoftwareDate, acBoardConfigurationError=acBoardConfigurationError, voiceSettings=voiceSettings, acV5LinkIdOld=acV5LinkIdOld, acChDefaultDTMFVolume=acChDefaultDTMFVolume, acChDefaultPacketizationPeriod=acChDefaultPacketizationPeriod, acSonetPathSignalLabelMismatchAlarm=acSonetPathSignalLabelMismatchAlarm, acThreeWayConferenceOutOfResources=acThreeWayConferenceOutOfResources, remoteReset=remoteReset, acWEBAccessAction=acWEBAccessAction, acSonetLineAISAlarm=acSonetLineAISAlarm, v21ModemTransportType=v21ModemTransportType, acIPv6ErrorAlarm=acIPv6ErrorAlarm, dePopulatedChannelsNumber=dePopulatedChannelsNumber, acSS7RouteSetStateChangeAlarm=acSS7RouteSetStateChangeAlarm, acIsdnIncomingCallsBehavior=acIsdnIncomingCallsBehavior, acChDefaultFaxModemBypassM=acChDefaultFaxModemBypassM)
