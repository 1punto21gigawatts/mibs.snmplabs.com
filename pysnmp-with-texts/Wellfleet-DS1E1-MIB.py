#
# PySNMP MIB module Wellfleet-DS1E1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-DS1E1-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:39:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Counter64, iso, NotificationType, ObjectIdentity, Integer32, ModuleIdentity, Bits, Gauge32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, MibIdentifier, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter64", "iso", "NotificationType", "ObjectIdentity", "Integer32", "ModuleIdentity", "Bits", "Gauge32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "MibIdentifier", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfMcT1Group, wfDs1E1Group = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfMcT1Group", "wfDs1E1Group")
wfDs1E1ModuleTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 1), )
if mibBuilder.loadTexts: wfDs1E1ModuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ModuleTable.setDescription('This file describes the MIBS for managing the Multichannel T1 and E1 link modules. DS1E1 MOD record - Contains DS1E1 module Configuration parameters')
wfDs1E1ModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 1, 1), ).setIndexNames((0, "Wellfleet-DS1E1-MIB", "wfDs1E1ModuleSlot"), (0, "Wellfleet-DS1E1-MIB", "wfDs1E1ModuleModule"))
if mibBuilder.loadTexts: wfDs1E1ModuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ModuleEntry.setDescription('An entry in the DS1E1 Base table')
wfDs1E1ModuleDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ModuleDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ModuleDelete.setDescription('Create/Delete parameter')
wfDs1E1ModuleSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1ModuleSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ModuleSlot.setDescription('Instance ID slot, filled in by driver')
wfDs1E1ModuleModule = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1ModuleModule.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ModuleModule.setDescription('Instance ID slot, filled in by driver')
wfDs1E1ModulePrimaryClock = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("external", 1), ("loop1", 2), ("loop2", 3), ("internal", 4), ("loop3", 5), ("loop4", 6))).clone('loop1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ModulePrimaryClock.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ModulePrimaryClock.setDescription('Specifies the primary source for transmit timing. Both ports use the same transmit timing source. The options for timing source are internal timing source, loop timing from either port and an external timing source.')
wfDs1E1ModuleSecondaryClock = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("external", 1), ("loop1", 2), ("loop2", 3), ("internal", 4), ("loop3", 5), ("loop4", 6))).clone('internal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ModuleSecondaryClock.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ModuleSecondaryClock.setDescription('Specifies the secondary source for transmit timing. During normal operation transmit timing is derived from the primary timing source. If the primary timing source fails, the software switches to secondary timing source.')
wfDs1E1ModuleCurrentClock = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("external", 1), ("loop1", 2), ("loop2", 3), ("internal", 4), ("loop3", 5), ("loop4", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1ModuleCurrentClock.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ModuleCurrentClock.setDescription('Indicates the clock source currently in use')
wfDs1E1ModuleExtClockOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("notpresent", 2))).clone('present')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1ModuleExtClockOperational.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ModuleExtClockOperational.setDescription('Indicates whether the External clock is operational')
wfDs1E1ModuleLoop1ClockOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("notpresent", 2))).clone('present')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1ModuleLoop1ClockOperational.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ModuleLoop1ClockOperational.setDescription('Indicates whether the timing source from port 1 is operational')
wfDs1E1ModuleLoop2ClockOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("notpresent", 2))).clone('present')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1ModuleLoop2ClockOperational.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ModuleLoop2ClockOperational.setDescription('Indicates whether the timing source from port 2 is operational')
wfDs1E1ModuleLoop3ClockOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("notpresent", 2))).clone('present')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1ModuleLoop3ClockOperational.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ModuleLoop3ClockOperational.setDescription('Indicates whether the timing source from port 3 is operational')
wfDs1E1ModuleLoop4ClockOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("notpresent", 2))).clone('present')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1ModuleLoop4ClockOperational.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ModuleLoop4ClockOperational.setDescription('Indicates whether the timing source from port 4 is operational')
wfDs1E1ModuleCfgTxBufferUseCredits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ModuleCfgTxBufferUseCredits.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ModuleCfgTxBufferUseCredits.setDescription('Configured Transmit Buffer Credits. Values other than zero over-ride the router selected values. A value of zero has a special meaning. Zero causes router based default values to be used. All values are accepted. Care should be taken not to set this to a value which is much greater than the default. The default can be read out of the wfDs1E1ModuleTxBufferUseCredits attribute when the router is running with this attribute set to zero. Sets to this attribute may take up to one minute to take effect.')
wfDs1E1ModuleCfgRxBufferUseCredits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ModuleCfgRxBufferUseCredits.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ModuleCfgRxBufferUseCredits.setDescription('Configured Receive Buffer Credits. Values other than zero over-ride the router selected values. A value of zero has a special meaning. Zero cuases router based default values to be used. Values larger than the compiled ring size are truncated to the compiled ring size. Sets to this attribute may take up to one minute to take effect.')
wfDs1E1ModuleTxBufferUseCredits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1ModuleTxBufferUseCredits.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ModuleTxBufferUseCredits.setDescription('Current Transmit Buffers available for use by module')
wfDs1E1ModuleRxBufferUseCredits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1ModuleRxBufferUseCredits.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ModuleRxBufferUseCredits.setDescription('Current Receive Buffers available for use by module')
wfDs1E1PortMapTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 2), )
if mibBuilder.loadTexts: wfDs1E1PortMapTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1PortMapTable.setDescription('DS1E1 port map record - Used by the driver to identify the LineNumber for the Port. The only table indexed by slot.connector. Its purpose is to map slot.connector to a PortLineNumber.')
wfDs1E1PortMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 2, 1), ).setIndexNames((0, "Wellfleet-DS1E1-MIB", "wfDs1E1PortMapSlot"), (0, "Wellfleet-DS1E1-MIB", "wfDs1E1PortMapConnector"))
if mibBuilder.loadTexts: wfDs1E1PortMapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1PortMapEntry.setDescription('An entry in the DS1E1 port table')
wfDs1E1PortMapDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1PortMapDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1PortMapDelete.setDescription('Create/Delete parameter')
wfDs1E1PortMapSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1PortMapSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1PortMapSlot.setDescription('Instance ID Slot, filled in by driver')
wfDs1E1PortMapConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1PortMapConnector.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1PortMapConnector.setDescription('Instance ID Connector, filled in by driver')
wfDs1E1PortMapLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1PortMapLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1PortMapLineNumber.setDescription('LineNumber off of which all other MIB instances are indexed.')
wfDs1E1PortMapDslId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1PortMapDslId.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1PortMapDslId.setDescription('When this T1/E1 interface is configured for Primary Rate ISDN (PRI) this attribute provides the ID of this Digital Subscriber Loop (DSL) interface. Each T1 or E1 PRI interface on a particular slot is assigned a unique DSL ID.')
wfDs1E1PortTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 3), )
if mibBuilder.loadTexts: wfDs1E1PortTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1PortTable.setDescription('DS1E1 port record - Contains MUNICH32 Configuration parameters ')
wfDs1E1PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 3, 1), ).setIndexNames((0, "Wellfleet-DS1E1-MIB", "wfDs1E1PortLineNumber"))
if mibBuilder.loadTexts: wfDs1E1PortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1PortEntry.setDescription('An entry in the DS1E1 port table')
wfDs1E1PortDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1PortDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1PortDelete.setDescription('Create/Delete parameter')
wfDs1E1PortDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1PortDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1PortDisable.setDescription('Enable/Disable parameter')
wfDs1E1PortState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 10, 11, 15, 20))).clone(namedValues=NamedValues(("up", 1), ("yelalarm", 2), ("aisalarm", 3), ("redalarm", 4), ("loopback", 10), ("bert", 11), ("init", 15), ("notpresent", 20))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1PortState.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1PortState.setDescription('Line Driver state variable')
wfDs1E1PortLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1PortLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1PortLineNumber.setDescription('LineNumber for this port. This value is assigned at configuration time and uniquely identifies this interface. This LineNumber not equal to any of the LineNumbers assigned to the LogicalLines configured through this Port.')
wfDs1E1PortMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 4608)).clone(1600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1PortMtu.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1PortMtu.setDescription('MTU parameter. Obsoleted, it is no longer referenced.')
wfDs1E1PortSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ds1-minus-15", 1), ("ds1-minus-7point5", 2), ("zero-point0", 3), ("dsx1-plus-point5", 4), ("dsx1-plus-point8", 5), ("dsx1-plus-1point1", 6), ("dsx1-plus-1point5", 7))).clone('zero-point0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1PortSignalLevel.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1PortSignalLevel.setDescription('Specifies T1 transmit power level, in terms of DB. They translate into cable length as follows: 0.0dB -> 0-133 ft 0.5dB -> 133-266 ft 0.8dB -> 266-399 ft 1.1dB -> 399-533 ft 1.5dB -> 533-655 ft')
wfDs1E1PortSetupAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1PortSetupAlarmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1PortSetupAlarmThreshold.setDescription('Specifies setup time for performance failure conditions, in seconds. When a performance defect is present for greater than the time specified by this parameter a performance failure is registered and a message is logged.')
wfDs1E1PortClearAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1PortClearAlarmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1PortClearAlarmThreshold.setDescription('Specifies clear time for performance failure conditions, in seconds. When a performance failure condition has been cleared for greater than the time specified by this parameter then the failure cleared condition is registered and a message is logged.')
wfDs1E1PortFdlTargetHdlcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("az", 1), ("by", 2))).clone('by')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1PortFdlTargetHdlcAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1PortFdlTargetHdlcAddress.setDescription('Selects between the two FDL target address modes. This determines whether the near-end FDL will respond to HDLC address AZ or BY in the FDL messages received from the far-end.')
wfDs1E1PortAcceptLoopbackRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1PortAcceptLoopbackRequest.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1PortAcceptLoopbackRequest.setDescription('The DS1E1 link module is capable of detecting loop up and loop down codes received from the far end. This parameter enables and disables loop up/down code detection circuitry. If enabled, this interface will accept and comply with a request to go into loopback mode from a far end device.')
wfDs1E1PortLoopbackState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noloop", 1), ("mgrreqpayloadloop", 2), ("mgrreqlineloop", 3), ("netreqpayloadloop", 4), ("netreqlineloop", 5), ("otherloop", 6))).clone('noloop')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1PortLoopbackState.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1PortLoopbackState.setDescription('Indicates the current loopback state of this interface. The interface can be in one the following states: Payload Loopback Line Loopback no loopback Payload or Line loopback modes can be initiated by either of two methods: Manager requested Loopback (MGRREQPAYLOADLOOP or MGRREQLINELOOP) is initiated by the Manager of this device. Network requested Loopback (NETREQPAYLOADLOOP or NETREQLINELOOP) is initiated by this interface receiving an in-band request on the network from the far end device.')
wfDs1E1PortBertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1PortBertMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1PortBertMode.setDescription('An option to generate and analyze specific test patterns is provided in BERT mode of operation. Only one port can be in BERT mode at a time. This attribute selects normal or BERT mode of operation')
wfDs1E1PortBertTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("zeros", 1), ("ones", 2), ("qrss", 3), ("two15", 4), ("two15-inv", 5), ("two20", 6), ("two23", 7), ("two23-inv", 8))).clone('ones')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1PortBertTestPattern.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1PortBertTestPattern.setDescription('When a port is in BERT mode, it is capable of generating a set of known patterns. This paramater selects between those patterns')
wfDs1E1PortBertSendAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ais-alarm", 1), ("yellow-alarm", 2), ("disabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1PortBertSendAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1PortBertSendAlarm.setDescription('Specifies a Alarm Indication Signal (AIS) (Blue Alarm) or yellow alarm to be transmitted while in BERT mode.')
wfDs1E1PortInternationalBit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1PortInternationalBit.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1PortInternationalBit.setDescription('Specifies if the International bit should be set in the E1 frame')
wfDs1E1PortLineApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("nonpri", 1), ("pri", 2), ("mixed", 3), ("frswpri", 4))).clone('nonpri')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1PortLineApplication.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1PortLineApplication.setDescription('Specifies the application that the LogicalLines of this Port will provide. NONPRI indicates that all of the LogicalLines will have a permanent Cct number and will not be used to dial to varying destinations. PRI indicates that some or all of the ds0s of this port will be used for switched Ccts using ISDN. MIXED indicates that some of the ds0s are being used for switched Ccts using ISDN and some are being used for non PRI permanent connections for other applications such as leased lines or Frame Relay.')
wfDs1E1PortLoggingEnableMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 3, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1PortLoggingEnableMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1PortLoggingEnableMask.setDescription('Specifies which catagories of extended event log messages are enabled for logging. Current bit definitions are: bit 31 bit 0 +--------------------------------+ | | +--------------------------------+ bit0 ISDN PRI debug messages bit1-31 reserved')
wfDs1E1PortSendPrmCrAddressBit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("prm-ci", 1), ("prm-carrier", 2))).clone('prm-ci')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1PortSendPrmCrAddressBit.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1PortSendPrmCrAddressBit.setDescription('Specifies the Performance message as originating from either a Carrier or Customer Installation (CI). As the performance message is sent out the FDL, the PRM Opening Address C/R bit is either set (Carrier) or cleared (CI). This feature is only supported by the QMCT1.')
wfDs1E1PortAcceptPrmCrAddressBit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("prm-ci", 1), ("prm-carrier", 2))).clone('prm-ci')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1PortAcceptPrmCrAddressBit.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1PortAcceptPrmCrAddressBit.setDescription('Accepts only Performance messages originating from either a Carrier or Customer Installation (CI), as determined below. The PRM Opening Address C/R bit is read upon receiving a performance message. If the Performance message does not originate from the expected source, it is discarded. This feature is only supported by the QMCT1.')
wfDs1E1PortLineImpedanceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rj45-120-ohms", 1), ("bnc-75-ohms", 2))).clone('rj45-120-ohms')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1PortLineImpedanceOption.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1PortLineImpedanceOption.setDescription('Supports user selectible Line Impedance option for ASN MCE1 Net Modules.')
wfDs1E1PortFdlLoopInterframeFill = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mark", 1), ("loop-retention", 2))).clone('mark')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1PortFdlLoopInterframeFill.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1PortFdlLoopInterframeFill.setDescription('Enables the Loop Retention Interframe Time Fill for the FDL after sending Loop Up Code. Also enables the detection of the Loop Retention Code when placed into Line or Payload loopback by the remote end.')
wfDs1E1PortRelayCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loop", 1), ("no-loop", 2))).clone('loop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1PortRelayCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1PortRelayCtrl.setDescription("The Relay on the QMCT1 will always be placed into loopback for the following conditions: 1. Power Up 2. Reboot 3. Hardware Reset Button 4. System CRASH However, when altering QMCT1 Port or Module MIBs' attributes with a restart characteristic, the state of the Relay will be controlled by this MIB attribute. When set to loop (1), the Relay will go into loopback as the Port/Module is re-initialized. The Relay will come out of loopback as the Port/Module re-initialization is complete. When set to noLoop (2), the Relay will remain in its present state as the Port/Module is re-initialized.")
wfDs1E1PortRelayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loop", 1), ("noLoop", 2))).clone('loop')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1PortRelayStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1PortRelayStatus.setDescription('This attribute indicates the current state of the Relay on the QMCT1. When set to loop (1), the Relay is currently looping data from the Rx path onto the Tx path. When set to noLoop (2), the Rx path and Tx path are connected to the Framer. Note that the Framer may be placed into loopback without affecting this attribute.')
wfDs1E1PortPrimaryClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internal", 1), ("external", 2), ("loop", 3))).clone('loop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1PortPrimaryClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1PortPrimaryClockSource.setDescription('Selects the Primary source of the Tx Clock for the DS1/E1 interface')
wfDs1E1PortSecondaryClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internal", 1), ("external", 2), ("loop", 3))).clone('internal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1PortSecondaryClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1PortSecondaryClockSource.setDescription('Selects the Secondary source of the Tx Clock for the DS1/E1 interface')
wfDs1E1PortCurrentClock = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internal", 1), ("external", 2), ("loop", 3))).clone('loop')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1PortCurrentClock.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1PortCurrentClock.setDescription('Indicates the clock source currently in use by the DS1')
wfDs1E1PortExtClockOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("notpresent", 2))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1PortExtClockOperational.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1PortExtClockOperational.setDescription('Indicates whether the External clock is operational')
wfDs1E1PortTransmitWaveform = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("long-haul-0point0", 1), ("long-haul-7point5", 2), ("long-haul-15point0", 3), ("long-haul-22point5", 4), ("short-haul-0to110", 5), ("short-haul-110to220", 6), ("short-haul-220to330", 7), ("short-haul-330to440", 8), ("short-haul-440to550", 9), ("short-haul-550to660", 10))).clone('short-haul-0to110')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1PortTransmitWaveform.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1PortTransmitWaveform.setDescription('Specifies T1 transmit waveform settings. Legal values are: long haul (LBO 0.0dB) long haul (LBO 7.5dB) long haul (LBO 15.0dB) long haul (LBO 22.5dB) short haul (0-110 ft) short haul (110-220 ft) short haul (220-330 ft) short haul (330-440 ft) short haul (440-550 ft) short haul (550-660 ft) Note that this attribute is not supported by all T1 interfaces. For those interfaces that DO NOT support this attribute, the wfDs1E1PortSignalLevel attribute is used instead.')
wfDs1E1ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 4), )
if mibBuilder.loadTexts: wfDs1E1ConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ConfigTable.setDescription('DS1E1 Configuration Table. This is a copy of the dsx1ConfigTable found in RFC1406. The table is indexed with PortLineNumber instead of ifIndex, however.')
wfDs1E1ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 4, 1), ).setIndexNames((0, "Wellfleet-DS1E1-MIB", "wfDs1E1ConfigPortLineNumber"))
if mibBuilder.loadTexts: wfDs1E1ConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ConfigEntry.setDescription('An entry in the DS1E1 config table')
wfDs1E1ConfigDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ConfigDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ConfigDelete.setDescription('Create/Delete attribute')
wfDs1E1ConfigPortLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1ConfigPortLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ConfigPortLineNumber.setDescription('The index ID for this record. It is the line number assigned to a port in the wfDs1E1PortMapEntry for a port.connector pair. Its channel field should be 0.')
wfDs1E1ConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1ConfigIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ConfigIfIndex.setDescription('Currently this is the sames as wfDs1E1LinePortIndex')
wfDs1E1ConfigTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1ConfigTimeElapsed.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ConfigTimeElapsed.setDescription('The number of seconds that have elapsed since the beginning of the current error-measurement period. Only relevant when the wfDs1E1ConfigLineType is ESF and the wfDs1E1ConfigFdl is AT&T 54016.')
wfDs1E1ConfigValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1ConfigValidIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ConfigValidIntervals.setDescription('The number of previous intervals for which valid data was collected. The value will be 96 unless the interface was brought on-line within the last 24 hours, in which case the value will be the number of complete 15 minute intervals the since interface has been online. Only relevant when the wfDs1E1ConfigLineType is ESF and the wfDs1E1ConfigFdl is AT&T 54016.')
wfDs1E1ConfigLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unframedt1", 1), ("esf", 2), ("sf", 3), ("e1", 4), ("e1crc", 5), ("e1mf", 6), ("e1crcmf", 7), ("unframede1", 8))).clone('esf')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ConfigLineType.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ConfigLineType.setDescription("This attribute is used to configure the line framing type to match the carrier's framing. SF and ESF are T1 framing types and the main differences between the two are the number of frames in a superframe and the use of the f-bit. The E1, E1CRC, E1MF, and E1CRCMF are used for E1 lines.")
wfDs1E1ConfigLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("jbzs", 1), ("b8zs", 2), ("hdb3", 3), ("zbtsi", 4), ("ami", 5))).clone('b8zs')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ConfigLineCoding.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ConfigLineCoding.setDescription('This variable describes the variety of Zero Code Suppression used on the link, which in turn affects a number of its characteristics. It should be set to match the carrier. AMI (alternate mark inversion) refers to a mode wherein no zero code suppression is present and the line encoding does not solve the problem directly. In this application, the higher layer must provide data which meets or exceeds the pulse density requirements, such as inverting HDLC data. This could be used for T1 or E1 lines. B8ZS refers to the use of a specified pattern of normal bits and bipolar violations which are used to replace a sequence of eight zero bits. This can be used on T1 lines while HDB3 provides similar functionality for E1 links.')
wfDs1E1ConfigSendCode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("sendnocode", 1), ("sendlinecode", 2), ("sendpayloadcode", 3), ("sendresetcode", 4), ("sendqrs", 5), ("send511pattern", 6), ("send3in24pattern", 7), ("sendothertestpattern", 8))).clone('sendnocode')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1ConfigSendCode.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ConfigSendCode.setDescription('This variable is currently read-only and it indicates what type of code is being sent across the DS1 interface by the device. The values mean: SENDNOCODE - sending looped or normal data SENDLINECODE - sending a request for a line loopback SENDPAYLOADCODE - sending a request for a payload loopback SENDRESETCODE - sending a loopback termination request SENDQRS - sending a Quasi-Random Signal (QRS) test pattern SEND511PATTERN - sending a 511 bit fixed test pattern SEND3IN24PATTERN - sending a fixed test pattern of 3 bits set in 24 SENDOTHERTESTPATTERN - sending a test pattern other than those described by this object')
wfDs1E1ConfigCircuitIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 4, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ConfigCircuitIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ConfigCircuitIdentifier.setDescription("This attribute is not used and appears here as a place holder only. If it was implemented then it would contain the transmission vendor's circuit identifier, for the purpose of facilitating troubleshooting.")
wfDs1E1ConfigLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noloop", 1), ("payloadloop", 2), ("lineloop", 3))).clone('noloop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ConfigLoopbackConfig.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ConfigLoopbackConfig.setDescription('This variable represents the loopback configuration of the DS1 interface. The value NOLOOP indicates the port is not in loopback. The value PAYLOADLOOP indicates the port is in payload loopback which means that data is looped back after it goes through the framer. The value LINELOOP indicates the port is in line loopback which means that data is looped back before the framer.')
wfDs1E1ConfigLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096))).clone(namedValues=NamedValues(("noalarm", 1), ("rcvfarendlof", 2), ("xmtfarendlof", 4), ("rcvais", 8), ("xmtais", 16), ("lossofframe", 32), ("lossofsignal", 64), ("loopbackstate", 128), ("t16ais", 256), ("rcvfarendlomf", 512), ("xmtfarendlomf", 1024), ("rcvtestcode", 2048), ("otherfailure", 4096))).clone('noalarm')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1ConfigLineStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ConfigLineStatus.setDescription("This variable is a bit-map which indicates the Line Status of the interface. It contains loopback, failure, received 'alarm' and transmitted 'alarm' information. The bit definition as as follows with bit #0 being the LSB. bit 0 NOALARM - No alarm present, set only when none of the other bits are. 1 RCVFARENDLOF - Far end LOF (a.k.a., Yellow Alarm) 2 XMTFARENDLOF - Near end sending LOF Indication 3 RCVAIS - Far end sending AIS 4 XMTAIS - Near end sending AIS 5 LOSSOFFRAME - Near end LOF (a.k.a., Red Alarm) 6 LOSSOFSIGNAL - Near end Loss Of Signal 7 LOOPBACKSTATE - Near end is looped 8 T16AIS - E1 only, TS16 AIS 9 RCVFARENDLOMF - E1 only, Far End Sending TS16 LOMF 10 XMTFARENDLOMF - E1 only, Near End Sending TS16 LOMF 11 RCVTESTCODE - Near End detects a test code 12 OTHERFAILURE - any line status not defined here' ")
wfDs1E1ConfigSignalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("robbedbit", 2), ("bitoriented", 3), ("messageoriented", 4))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1ConfigSignalMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ConfigSignalMode.setDescription('This attribute is not implemented and exists here only as a place holder.')
wfDs1E1ConfigTransmitClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("looptiming", 1), ("localtiming", 2), ("throughtiming", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1ConfigTransmitClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ConfigTransmitClockSource.setDescription('The source of Tranmit Clock. LOOPTIMING indicates that the recovered receive clock is used as the transmit clock. LOCALTIMING indicates that a local clock source is used. Either the internal clock or the external clock through the extra connector on the board. THROUGHTIMING indicates that recovered receive clock from another interface is used as the transmit clock.')
wfDs1E1ConfigFdl = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 8))).clone(namedValues=NamedValues(("ansi403", 2), ("att54016", 4), ("none", 8))).clone('ansi403')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ConfigFdl.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ConfigFdl.setDescription('This attribute is used to configure the type facilities data link (FDL). The ANSI403 configures the port to use the FDL exchange described in the ANSI T1 403 specification. ATT54016 is used to configure the port for the for the FDL exchange listed in the AT&T 54016 document. NONE is used when no FDL is desired. The FDL can only be used when the line type is ESF.')
wfDs1E1ActionTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 5), )
if mibBuilder.loadTexts: wfDs1E1ActionTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ActionTable.setDescription('DS1E1 configuration Action record - Contains MUNICH32 and Framer write only Configuration parameters')
wfDs1E1ActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 5, 1), ).setIndexNames((0, "Wellfleet-DS1E1-MIB", "wfDs1E1ActionPortLineNumber"))
if mibBuilder.loadTexts: wfDs1E1ActionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ActionEntry.setDescription('An entry in the DS1E1 Config table')
wfDs1E1ActionPortLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1ActionPortLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ActionPortLineNumber.setDescription('Instance ID LineNumber, filled in by driver')
wfDs1E1ActionBertReset = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 21))).clone(namedValues=NamedValues(("reset", 1), ("noaction", 21))).clone('noaction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ActionBertReset.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ActionBertReset.setDescription('Reset counters on BERT device')
wfDs1E1ActionBertErrorInsert = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 21))).clone(namedValues=NamedValues(("oneerror", 1), ("errorperthousand", 2), ("errorpermillion", 3), ("disable", 4), ("noaction", 21))).clone('noaction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ActionBertErrorInsert.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ActionBertErrorInsert.setDescription('Indicates that an error be injected into the transmitted data stream while in BERT mode.')
wfDs1E1ActionSendLoopCode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 21))).clone(namedValues=NamedValues(("loopup", 1), ("loopdown", 2), ("noaction", 21))).clone('noaction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ActionSendLoopCode.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ActionSendLoopCode.setDescription('Selects a Loop Up/Down code to be sent to the remote end')
wfDs1E1ActionSendFdlLoopbackCode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 21))).clone(namedValues=NamedValues(("lineloopci", 1), ("lineloopia", 2), ("lineloopib", 3), ("deactivatell", 4), ("payloadloop", 5), ("deactivatepl", 6), ("deactivateall", 7), ("noaction", 21))).clone('noaction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ActionSendFdlLoopbackCode.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ActionSendFdlLoopbackCode.setDescription('Selects an FDL code to be sent to the remote end.')
wfDs1E1ActionSendLoopUpFractionalCode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(33))).clone(namedValues=NamedValues(("noaction", 33))).clone('noaction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ActionSendLoopUpFractionalCode.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ActionSendLoopUpFractionalCode.setDescription('Selects Fractional Loop Up code to be sent to the remote end. Value passed through this attribute is the Logical Line number (1 through 24). This feature is only supported by the QMCT1.')
wfDs1E1ActionSendLoopDownFractionalCode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(33))).clone(namedValues=NamedValues(("noaction", 33))).clone('noaction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ActionSendLoopDownFractionalCode.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ActionSendLoopDownFractionalCode.setDescription('Selects Fractional Loop Down code to be sent to the remote end. Value passed through this attribute is the Logical Line number (1 through 24). This feature is only supported by the QMCT1.')
wfDs1E1ActionClearFractionalLoopState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(33))).clone(namedValues=NamedValues(("noaction", 33))).clone('noaction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ActionClearFractionalLoopState.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ActionClearFractionalLoopState.setDescription('Removes any Logical Line left in hardware Fractional T1 loopback state. The Logical Line number is passed as an argument. This feature is only supported by the QMCT1.')
wfDs1E1ActionClearFdlStats = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clrStats", 1), ("noaction", 2))).clone('noaction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ActionClearFdlStats.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ActionClearFdlStats.setDescription("Clears this port's FDL Statistics. This feature is only supported by the QMCT1.")
wfDs1E1ActionClearCurrentStats = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clrStats", 1), ("noaction", 2))).clone('noaction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ActionClearCurrentStats.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ActionClearCurrentStats.setDescription("Clears this port's Current 15 minute Statistics.")
wfDs1E1ActionClearFarEndCurrentStats = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clrStats", 1), ("noaction", 2))).clone('noaction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ActionClearFarEndCurrentStats.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ActionClearFarEndCurrentStats.setDescription("Clears this port's Far End, Current 15 minute Statistics.")
wfDs1E1ActionClearDayCurrentStats = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clrStats", 1), ("noaction", 2))).clone('noaction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ActionClearDayCurrentStats.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ActionClearDayCurrentStats.setDescription("Clears this port's Current Day Statistics.")
wfDs1E1ActionClearFarEndDayCurrentStats = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clrStats", 1), ("noaction", 2))).clone('noaction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ActionClearFarEndDayCurrentStats.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ActionClearFarEndDayCurrentStats.setDescription("Clears this port's Far End, Current Day Statistics.")
wfDs1E1ActionClearIntervalStats = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clrStats", 1), ("noaction", 2))).clone('noaction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ActionClearIntervalStats.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ActionClearIntervalStats.setDescription('Clears All Interval Statistics (15 minute and day) of this port.')
wfDs1E1ActionClearFarEndIntervalStats = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clrStats", 1), ("noaction", 2))).clone('noaction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ActionClearFarEndIntervalStats.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ActionClearFarEndIntervalStats.setDescription('Clears All Far End Interval Statistics (15 minute and day) of this port.')
wfLogicalLineTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6), )
if mibBuilder.loadTexts: wfLogicalLineTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineTable.setDescription('LogicalLine record - Contains configuration parameters and statistics for MUNICH32 which are LogicalLine specific.')
wfLogicalLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1), ).setIndexNames((0, "Wellfleet-DS1E1-MIB", "wfLogicalLinePortLineNumber"), (0, "Wellfleet-DS1E1-MIB", "wfLogicalLineIndex"))
if mibBuilder.loadTexts: wfLogicalLineEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineEntry.setDescription('An entry in the LOGICAL_LINE table')
wfLogicalLineDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLogicalLineDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineDelete.setDescription('Create/Delete parameter')
wfLogicalLineDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLogicalLineDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineDisable.setDescription('Enable/Disable parameter')
wfLogicalLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 19, 20))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("lmiwait", 4), ("loopback", 5), ("linedieing", 6), ("linedead", 7), ("remoteloop", 8), ("remotedeaf", 9), ("bert", 10), ("hwfrac", 11), ("priWait", 12), ("lineloopbofltest", 19), ("notpresent", 20))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLineState.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineState.setDescription('Line Driver state variable')
wfLogicalLinePortLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLinePortLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLinePortLineNumber.setDescription('Instance ID PortLineNumber, filled in by driver')
wfLogicalLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineIndex.setDescription('Index for this line instance, filled in by driver. The index corresponds to the position of the circuit, from 1 to 31, on the port.')
wfLogicalLineCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLogicalLineCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineCct.setDescription('Circuit number for this line instance')
wfLogicalLineLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLogicalLineLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineLineNumber.setDescription('LineNumber for this logical line instance. This is the same line number contained in the PORT_TABLE with the channel field nonzero.')
wfLogicalLineBofl = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLogicalLineBofl.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineBofl.setDescription('Selects Breath of Life (BOFL) parameter. If selected, a BOFL packet is sent out on the wire as often as specifies by the wfLogicalLineBoflTmo parameter')
wfLogicalLineBoflTmo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLogicalLineBoflTmo.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineBoflTmo.setDescription('Indicates the time-period between BOFL packets')
wfLogicalLineFractionalLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLogicalLineFractionalLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineFractionalLoopback.setDescription('Any Logical Line on this T1/E1 port is capable of being put into loopback, i.e. data coming into that circuit from the wire is mirrorred back onto the wire. This parameter enables or disables this loopback feature on any circuit.')
wfLogicalLineTimeSlotAssignment = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLineTimeSlotAssignment.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineTimeSlotAssignment.setDescription('Lists the time-slots which constitute this channel. Read only attribute that contains a list of time-slots from 1 to 31 used by the channel')
wfLogicalLineMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLineMtu.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineMtu.setDescription('Contains the largest frame size that can be received by the logical line. Anything larger than the MTU will be discarded. In all cases except when the wfLogicalLineWanProtocol is LAPB, this value will be the same as wfLogicalLineCfgMtu. In the LAPB case it will be twice wfLogicalLineCfgMtu with a maximum of 4608.')
wfLogicalLineMadr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLineMadr.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineMadr.setDescription('Line MAC address, fixed - line driver fills in from the 48 bit address stored in the serial number prom.')
wfLogicalLineWanProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("standard", 1), ("passthru", 2), ("ppp", 3), ("smds", 4), ("framerelay", 5), ("x25", 6), ("switch", 7), ("sw", 8), ("atm", 9), ("lapb", 10), ("sdlc", 11))).clone('standard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLogicalLineWanProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineWanProtocol.setDescription('WAN protocol selection is provided via this parameter. The supported protocols can be selected per circuit.')
wfLogicalLineHdlcService = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("transparent", 1), ("llc1", 2))).clone('llc1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLogicalLineHdlcService.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineHdlcService.setDescription('HDLC Service type for this line. Transparent is raw HDLC mode, LLC1 will prefix the HDLC address and control fields to the frame.')
wfLogicalLineLocalHdlcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 7))).clone(namedValues=NamedValues(("dce", 1), ("dte", 3), ("seven", 7))).clone('seven')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLogicalLineLocalHdlcAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineLocalHdlcAddress.setDescription('This attribute is only used if the Wan protocol is Wellfleet Standard Proprietary Point to Point. This attribute is unused for other Wan protocols. The local HDLC address can take on values between 1 and 7. The default is 7. 1 is refered to as DCE. 3 is refered to DTE. All others are refered to as EXPLICIT. EXPLICIT indicates that the user has explicitely selected the address.')
wfLogicalLineRemoteHdlcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 7))).clone(namedValues=NamedValues(("dce", 1), ("dte", 3), ("seven", 7))).clone('seven')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLogicalLineRemoteHdlcAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineRemoteHdlcAddress.setDescription('This attribute is only used if the Wan protocol is Wellfleet Standard Proprietary Point to Point. This attribute is unused for other Wan protocols. The remote HDLC address can take on values between 1 and 7. The default is 7. 1 is refered to as DCE. 3 is refered to DTE. All others are refered to as EXPLICIT. EXPLICIT indicates that the user has explicitely selected the address.')
wfLogicalLineRateAdaption = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("adaption-64k", 1), ("adaption-56kmsb", 2), ("adaption-56klsb", 3), ("adaption-9dot6k", 4), ("adaption-19dot2k", 5))).clone('adaption-56klsb')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLogicalLineRateAdaption.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineRateAdaption.setDescription('Determines the number of bits and their bit positions within the time-slot. 64k selection uses all 8 bits in the time-slot. The two 56k selections use 7 of the 8 bits in the time-slot. 56k_MSB does not use the most significant bit and 56k_LSB does not use the least significant bit in the time-slot. If the logical line is configured for DS0-A operation, rate adaptions of 9.6 Kbps and 19.2 Kbps may be configured.')
wfLogicalLineIFTF = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flags", 1), ("idles", 2))).clone('flags')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLogicalLineIFTF.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineIFTF.setDescription('Determines the Interframe time fill character to be transmitted by the MUNICH. In case of IFTF_FLAGS, 0x7E is sent and in case of IFTF_IDLES 0xff is sent as the interframe timefill characters.')
wfLogicalLineCRCSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crc-32", 1), ("crc-16", 2))).clone('crc-16')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLogicalLineCRCSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineCRCSize.setDescription('Determines the CRC Size. When CRC32 is selected a 32 bit CRC is appended to the frame being transmitted and a 32 bit CRC check is performed on the received frame. When CRC16 is selected, a 16 bit CRC is appended to the transmitted frame and a 16 bit CRC is performed. on the received frame.')
wfLogicalLineRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLineRxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineRxOctets.setDescription('Number of octets received without error')
wfLogicalLineRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLineRxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineRxFrames.setDescription('Number of frames received without error')
wfLogicalLineTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLineTxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineTxOctets.setDescription('Number of octets transmitted without error')
wfLogicalLineTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLineTxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineTxFrames.setDescription('Number of frames transmitted without error')
wfLogicalLineRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLineRxErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineRxErrors.setDescription('Number of receive errors')
wfLogicalLineTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLineTxErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineTxErrors.setDescription('Number of transmission errors')
wfLogicalLineLackRxResources = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLineLackRxResources.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineLackRxResources.setDescription('Number of Rx frames dropped due to lack of buffer resources')
wfLogicalLineLackTxResources = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLineLackTxResources.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineLackTxResources.setDescription('Number of Tx frames dropped due to lack of system resources')
wfLogicalLineTxUnderflows = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLineTxUnderflows.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineTxUnderflows.setDescription('Number of Tx frames dropped due to Transmit underflow')
wfLogicalLineRxOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLineRxOverflows.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineRxOverflows.setDescription('Number of Rx frames dropped due to Receive overflow')
wfLogicalLineRxNullFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLineRxNullFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineRxNullFrames.setDescription('Number of short frames received (with no data bytes)')
wfLogicalLineRxShortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLineRxShortFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineRxShortFrames.setDescription('Number of short frames received whose length is either 1 or 2 data bytes.')
wfLogicalLineRxLossSyncs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLineRxLossSyncs.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineRxLossSyncs.setDescription('Loss of synchronization on receiver')
wfLogicalLineRxCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLineRxCRCErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineRxCRCErrors.setDescription('CRC error received')
wfLogicalLineRxNonOctetBits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLineRxNonOctetBits.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineRxNonOctetBits.setDescription('Non-Octet bits received in frame')
wfLogicalLineRxLongFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLineRxLongFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineRxLongFrames.setDescription('Frame longer than MFL received')
wfLogicalLineRxAbortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLineRxAbortFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineRxAbortFrames.setDescription('Aborted frame received')
wfLogicalLineRxDescOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLineRxDescOverflows.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineRxDescOverflows.setDescription('Receive overflow on chip buffer')
wfLogicalLineRxReplenMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLineRxReplenMisses.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineRxReplenMisses.setDescription('Count of number of packet buffer misses while attempting to replenish driver receive ring')
wfLogicalLineRxIFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLineRxIFCs.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineRxIFCs.setDescription('Number of times the device detects a change of interframe time-fill between incomming frames.')
wfLogicalLineRxDropPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLineRxDropPackets.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineRxDropPackets.setDescription('Number of packets dropped after reception')
wfLogicalLineCfgTxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLogicalLineCfgTxQueueLength.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineCfgTxQueueLength.setDescription('Configured Transmit Queue Length. Values other than zero over-ride the router selected values. A value of zero has a special meaning. Zero causes router based default values to be used. All values are accepted. Care should be taken not to set this to a value which is much greater than the default. The default can be read out of the wfLoigcalLineTxQueueLength attribute when the router is running with this attribute set to zero. Sets to this attribute may take up to one minute to take effect.')
wfLogicalLineCfgRxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLogicalLineCfgRxQueueLength.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineCfgRxQueueLength.setDescription('Configured Receive Queue Length. Values other than zero over-ride the router selected values. A value of zero has a special meaning. Zero cuases router based default values to be used. Values larger than the compiled ring size are truncated to the compiled ring size. Sets to this attribute may take up to one minute to take effect.')
wfLogicalLineTxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLineTxQueueLength.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineTxQueueLength.setDescription('Current hardware transmit queue length')
wfLogicalLineRxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLineRxQueueLength.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineRxQueueLength.setDescription('Current Receive queue length')
wfLogicalLineTxQueueEmpties = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLineTxQueueEmpties.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineTxQueueEmpties.setDescription('The number of times the transmit ring is found empty when transmitting packets')
wfLogicalLineRxIntProcs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLineRxIntProcs.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineRxIntProcs.setDescription('DEBUG paramete - Receive Interrupt processing count')
wfLogicalLineTxIntProcs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLineTxIntProcs.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineTxIntProcs.setDescription('DEBUG parameter - Tx interrupt processing count')
wfLogicalLineRxPktCorruptions = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLineRxPktCorruptions.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineRxPktCorruptions.setDescription('DEBUG parameter - Corruption check on receive')
wfLogicalLineTurboBofl = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLogicalLineTurboBofl.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineTurboBofl.setDescription('DEBUG parameter - Turbo bofl enabled or disabled')
wfLogicalLineBoflNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLogicalLineBoflNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineBoflNum.setDescription('DEBUG parameter - Number of breath of life packets per breath of life')
wfLogicalLineBoflLen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(22, 4450)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLogicalLineBoflLen.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineBoflLen.setDescription('DEBUG parameter - breath of life packet length')
wfLogicalLineOutQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLineOutQLen.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineOutQLen.setDescription('The instantaneous current length of the output packet queue (in packets).')
wfLogicalLineLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 54), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLineLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineLastChange.setDescription("The value of SysUpTime at the time the interface entered it's current operational state (UP state). SysUpTime is defined as the time (in hundredths of a second) since the network management portion of the system was last re-initialized. Usually the time since boot.")
wfLogicalLineCfgMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 4608)).clone(1600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLogicalLineCfgMtu.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineCfgMtu.setDescription('Specifies the largest frame size that can be received by the logical line. Anything larger than the MTU will be discarded.')
wfLogicalLineRemoteLpbkDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLogicalLineRemoteLpbkDetection.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineRemoteLpbkDetection.setDescription('This attribute enables Remote Loopback Detection. When enabled along with wfLogicalLineBofl, the device driver will detect when it is receiving its own BOFL packets and will bring the interface down assuming that somewhere down stream the link has been put into loopback. ')
wfLogicalLineLastState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 20))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("lmiwait", 4), ("loopback", 5), ("linedieing", 6), ("linedead", 7), ("remoteloop", 8), ("remotedeaf", 9), ("bert", 10), ("hwfrac", 11), ("priWait", 12), ("notpresent", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLineLastState.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineLastState.setDescription('The state which the Logical Line driver was in prior to the most recent re-initialization.')
wfLogicalLineRxIdles = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLineRxIdles.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineRxIdles.setDescription('Number of received frames followed by ShortFrame errors reported by the hardware. ShortFrame errors imediately after received frames actually indicates an Idle (all 1s) interframe time fill. One ShortFrame is allowed per received frame without incrementing wfLogicalLineRxErrors or wfLogicalLineRxShortFrames. Additional ShortFrames will not increment wfLogicalLineRxIdles but will increment both wfLogicalLineRxErrors and wfLogicalLineRxShortFrames.')
wfLogicalLineRole = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("syncconnect", 1), ("dchannel", 2), ("bchannel", 3))).clone('syncconnect')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLogicalLineRole.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineRole.setDescription("Specifies the role of this Logical Line. This attribute directs the Logical Line to be either a normal permanent synchronous connection, a Primary Rate ISDN 'D' channel or a Primary Rate ISDN 'B' channel.")
wfLogicalLineActiveCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLineActiveCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineActiveCct.setDescription('Active CCT number for this LogicalLine. Used in ISDN PRI to indicate the CCT of the current call in progress.')
wfLogicalLineActualRateAdaption = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("adaption64k", 1), ("adaption56kmsb", 2), ("adaption56klsb", 3), ("adaption9dot6k", 4), ("adaption19dot2k", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLineActualRateAdaption.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineActualRateAdaption.setDescription('Indicates the current Rate Adaption in use. This may differ from the configured Rate Adaption in ISDN PRI applications. This attribute indicates the number of bits and their bit positions within the time-slot. 64k selection uses all 8 bits in the time-slot. The two 56k selections use 7 of the 8 bits in the time-slot. 56k_MSB does not use the most significant bit and 56k_LSB does not use the least significant bit in the time-slot. If the logical line is configured for DS0-A operation, rate adaptions of 9.6 Kbps and 19.2 Kbps may be configured.')
wfLogicalLineBertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLogicalLineBertMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineBertMode.setDescription('Enables BERT testing on a logical line level. This feature is only supported by the QMCT1.')
wfLogicalLineBertTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("zeros", 1), ("ones", 2), ("qrss", 3), ("two15", 4), ("two15-inv", 5), ("two20", 6), ("two23", 7), ("two23-inv", 8))).clone('ones')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLogicalLineBertTestPattern.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineBertTestPattern.setDescription('Test pattern for BERT. This feature is only supported by the QMCT1.')
wfLogicalLineAcceptFracLoopCode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLogicalLineAcceptFracLoopCode.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineAcceptFracLoopCode.setDescription('Allows logical line to accept Fractional T1 Loop Code. This feature is only supported by the QMCT1.')
wfLogicalLineDS0AStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLogicalLineDS0AStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineDS0AStatus.setDescription('Indicates logical line set to T1 DS0-A Subrates. This feature is only supported by the QMCT1.')
wfLogicalLineNRZIEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLogicalLineNRZIEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineNRZIEnable.setDescription('Allows logical line to accept T1 NRZI encoding on logical Line. This feature is only supported by the QMRT1.')
wfLogicalLineNRZIType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 6, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("space", 1), ("mark", 2))).clone('mark')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLogicalLineNRZIType.setStatus('mandatory')
if mibBuilder.loadTexts: wfLogicalLineNRZIType.setDescription('Defines logical line to T1 NRZI encoding as either Mark or Space on logical Line. This feature is only supported by the QMRT1.')
wfDs1E1FracTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 7), )
if mibBuilder.loadTexts: wfDs1E1FracTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FracTable.setDescription('The DS1E1 fractional table identifies for each time-slot, the Logical Line to which the time-slot is currently bound.')
wfDs1E1FracEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 7, 1), ).setIndexNames((0, "Wellfleet-DS1E1-MIB", "wfDs1E1FracPortLineNumber"), (0, "Wellfleet-DS1E1-MIB", "wfDs1E1FracNumber"))
if mibBuilder.loadTexts: wfDs1E1FracEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FracEntry.setDescription('An entry in the DS1E1 Fractional Table')
wfDs1E1FracDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1FracDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FracDelete.setDescription('Create/Delete parameter')
wfDs1E1FracPortLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FracPortLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FracPortLineNumber.setDescription('Line number with a zero channel number field. Identifies the port')
wfDs1E1FracNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FracNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FracNumber.setDescription('The time slot to be assigned')
wfDs1E1FracLogicalLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1FracLogicalLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FracLogicalLineIndex.setDescription('This time slot is assigned to the Logical Line identified by this attribute.')
wfDs1E1FracActualLogicalLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FracActualLogicalLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FracActualLogicalLineIndex.setDescription('This time slot can be manipulated by ISDN PRI Multi-Rate service. This is the logical line to which the time slot is currently allocated.')
wfDs1E1CurrentTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 10), )
if mibBuilder.loadTexts: wfDs1E1CurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1CurrentTable.setDescription('Current AT&T FDL stats table.')
wfDs1E1CurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 10, 1), ).setIndexNames((0, "Wellfleet-DS1E1-MIB", "wfDs1E1CurrentPortLineNumber"))
if mibBuilder.loadTexts: wfDs1E1CurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1CurrentEntry.setDescription('An entry in the DS1E1 Current table')
wfDs1E1CurrentPortLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1CurrentPortLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1CurrentPortLineNumber.setDescription('The instance ID that identifies the port. The port line number with a zero channel number field as found in the port map table.')
wfDs1E1CurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 10, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1CurrentESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1CurrentESs.setDescription('The number of Errored Seconds, encountered by a DS1 interface in the current 15 minute interval.')
wfDs1E1CurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 10, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1CurrentSESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1CurrentSESs.setDescription("The number of Severely Errored Seconds encountered by a DS1 interface in the current 15 minute interval.'")
wfDs1E1CurrentSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 10, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1CurrentSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1CurrentSEFSs.setDescription('The number of Severely Errored Framing Seconds encountered by a DS1 interface in the current 15 minute interval.')
wfDs1E1CurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 10, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1CurrentUASs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1CurrentUASs.setDescription('The number of Unavailable Seconds encountered by a DS1 interface in the current 15 minute interval.')
wfDs1E1CurrentCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 10, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1CurrentCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1CurrentCSSs.setDescription('The number of Controlled Slip Seconds encountered by a DS1 interface in the current 15 minute interval.')
wfDs1E1CurrentPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 10, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1CurrentPCVs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1CurrentPCVs.setDescription('The number of Path Coding Violations encountered by a DS1 interface in the current 15 minute interval.')
wfDs1E1CurrentLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 10, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1CurrentLESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1CurrentLESs.setDescription("The number of Line Errored Seconds encountered by a DS1 interface in the current 15 minute interval.'")
wfDs1E1CurrentBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 10, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1CurrentBESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1CurrentBESs.setDescription('The number of Bursty Errored Seconds (BESs) encountered by a DS1 interface in the current 15 minute interval.')
wfDs1E1CurrentDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 10, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1CurrentDMs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1CurrentDMs.setDescription("The number of Degraded Minutes (DMs) encountered by a DS1 interface in the current 15 minute interval.'")
wfDs1E1CurrentLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 10, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1CurrentLCVs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1CurrentLCVs.setDescription("The number of Line Code Violations (LCVs) encountered by a DS1 interface in the current 15 minute interval.'")
wfDs1E1CurrentSASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 10, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1CurrentSASs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1CurrentSASs.setDescription('The number of seconds, within the current 15 minute interval, containing one or more SEFs or AIS defects.')
wfDs1E1CurrentAISSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 10, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1CurrentAISSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1CurrentAISSs.setDescription('The number of seconds, within the current 15 minute interval, containing one or more AIS defect.')
wfDs1E1CurrentFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 10, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1CurrentFCs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1CurrentFCs.setDescription('The number of Path Failure Count error events detected in the current 15 minute interval.')
wfDs1E1CurrentTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 10, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1CurrentTimeElapsed.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1CurrentTimeElapsed.setDescription('The number of seconds that have elapsed since the beginning of the current error-measurement period.')
wfDs1E1CurrentValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 10, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1CurrentValidIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1CurrentValidIntervals.setDescription('The number of previous intervals for which valid data was collected. The value will be 96 unless the interface was brought on-line within the last 24 hours, in which case the value will be the number of complete 15 minute intervals the since interface has been online.')
wfDs1E1CurrentValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 10, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2))).clone('valid')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1CurrentValidFlag.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1CurrentValidFlag.setDescription('Indicates whether this interval reported by the Mib Table is valid or invalid.')
wfDs1E1IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 11), )
if mibBuilder.loadTexts: wfDs1E1IntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1IntervalTable.setDescription('AT&T Interval stats')
wfDs1E1IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 11, 1), ).setIndexNames((0, "Wellfleet-DS1E1-MIB", "wfDs1E1IntervalPortLineNumber"), (0, "Wellfleet-DS1E1-MIB", "wfDs1E1IntervalNumber"))
if mibBuilder.loadTexts: wfDs1E1IntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1IntervalEntry.setDescription('An entry in the DS1E1 Interval table')
wfDs1E1IntervalPortLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1IntervalPortLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1IntervalPortLineNumber.setDescription('The instance ID that identifies the port. The port line number with a zero channel number field as found in the port map table.')
wfDs1E1IntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1IntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1IntervalNumber.setDescription('A number between 1 and 96, where 1 is the most recently completed 15 minute interval and 96 is the least recently completed 15 minutes interval (assuming that all 96 intervals are valid).')
wfDs1E1IntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 11, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1IntervalESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1IntervalESs.setDescription('The number of Errored Seconds, encountered by a DS1 interface in the current 15 minute interval.')
wfDs1E1IntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 11, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1IntervalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1IntervalSESs.setDescription('The number of Severely Errored Seconds encountered by a DS1 interface in one of the previous 15 minute intervals.')
wfDs1E1IntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 11, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1IntervalSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1IntervalSEFSs.setDescription('The number of Severely Errored Framing Seconds encountered by a DS1 interface in one of the previous 15 minute intervals.')
wfDs1E1IntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 11, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1IntervalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1IntervalUASs.setDescription('The number of Unavailable Seconds encountered by a DS1 interface in one of the previous 15 minute intervals.')
wfDs1E1IntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 11, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1IntervalCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1IntervalCSSs.setDescription('The number of Controlled Slip Seconds encountered by a DS1 interface in one of the previous 15 minute intervals.')
wfDs1E1IntervalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 11, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1IntervalPCVs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1IntervalPCVs.setDescription('The number of Path Coding Violations encountered by a DS1 interface in one of the previous 15 minute intervals.')
wfDs1E1IntervalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 11, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1IntervalLESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1IntervalLESs.setDescription('The number of Line Errored Seconds encountered by a DS1 interface in one of the previous 15 minute intervals.')
wfDs1E1IntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 11, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1IntervalBESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1IntervalBESs.setDescription('The number of Bursty Errored Seconds (BESs) encountered by a DS1 interface in one of the previous 15 minute intervals.')
wfDs1E1IntervalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 11, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1IntervalDMs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1IntervalDMs.setDescription('The number of Degraded Minutes (DMs) encountered by a DS1 interface in one of the previous 15 minute intervals.')
wfDs1E1IntervalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 11, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1IntervalLCVs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1IntervalLCVs.setDescription('The number of Line Code Violations (LCVs) encountered by a DS1 interface in one of the previous 15 minute intervals.')
wfDs1E1IntervalSASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 11, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1IntervalSASs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1IntervalSASs.setDescription('The number of seconds, in one of the previous 15 minute intervals, containing one or more SEFs or AIS defects.')
wfDs1E1IntervalAISSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 11, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1IntervalAISSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1IntervalAISSs.setDescription('The number of seconds, in one of the previous 15 minute intervals, containing one or more AIS defect.')
wfDs1E1IntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 11, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1IntervalFCs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1IntervalFCs.setDescription('The number of Path Failure Count error events detected one of the previous 15 minute intervals.')
wfDs1E1IntervalValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 11, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2))).clone('valid')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1IntervalValidFlag.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1IntervalValidFlag.setDescription('Indicates whether this interval reported by the Mib Table is valid or invalid.')
wfDs1E1TotalTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 12), )
if mibBuilder.loadTexts: wfDs1E1TotalTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1TotalTable.setDescription('AT&T Total stats Table')
wfDs1E1TotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 12, 1), ).setIndexNames((0, "Wellfleet-DS1E1-MIB", "wfDs1E1TotalPortLineNumber"))
if mibBuilder.loadTexts: wfDs1E1TotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1TotalEntry.setDescription('An entry in the DS1E1 Total table')
wfDs1E1TotalPortLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1TotalPortLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1TotalPortLineNumber.setDescription('The instance ID that identifies the port. The port line number with a zero channel number field as found in the port map table.')
wfDs1E1TotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 12, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1TotalESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1TotalESs.setDescription('The number of Errored Seconds, encountered by a DS1 interface in the current 15 minute interval.')
wfDs1E1TotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 12, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1TotalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1TotalSESs.setDescription('The number of Severely Errored Seconds encountered by a DS1 interface in the previous 24-hour interval.')
wfDs1E1TotalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 12, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1TotalSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1TotalSEFSs.setDescription('The number of Severely Errored Framing Seconds encountered by a DS1 interface in the previous 24-hour interval.')
wfDs1E1TotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 12, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1TotalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1TotalUASs.setDescription('The number of Unavailable Seconds encountered by a DS1 interface in the previous 24-hour interval.')
wfDs1E1TotalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 12, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1TotalCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1TotalCSSs.setDescription('The number of Controlled Slip Seconds encountered by a DS1 interface in the previous 24-hour interval.')
wfDs1E1TotalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 12, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1TotalPCVs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1TotalPCVs.setDescription('The number of Path Coding Violations encountered by a DS1 interface in the previous 24-hour interval.')
wfDs1E1TotalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 12, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1TotalLESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1TotalLESs.setDescription('The number of Line Errored Seconds encountered by a DS1 interface in the previous 24-hour interval.')
wfDs1E1TotalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 12, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1TotalBESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1TotalBESs.setDescription('The number of Bursty Errored Seconds (BESs) encountered by a DS1 interface in the previous 24-hour interval.')
wfDs1E1TotalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 12, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1TotalDMs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1TotalDMs.setDescription('The number of Degraded Minutes (DMs) encountered by a DS1 interface in the previous 24-hour interval.')
wfDs1E1TotalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 12, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1TotalLCVs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1TotalLCVs.setDescription('The number of Line Code Violations (LCVs) encountered by a DS1 interface in the previous 24-hour interval.')
wfDs1E1TotalSASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 12, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1TotalSASs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1TotalSASs.setDescription('The number of seconds, in the previous 24-hour interval, containing one or more SEFs or AIS defects.')
wfDs1E1TotalAISSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 12, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1TotalAISSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1TotalAISSs.setDescription('The number of seconds, in the previous 24-hour interval, containing one or more AIS defect.')
wfDs1E1TotalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 12, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1TotalFCs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1TotalFCs.setDescription('The number of Path Failure Count error events detected in the previous 24-hour interval.')
wfDs1E1TotalValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 12, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2))).clone('valid')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1TotalValidFlag.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1TotalValidFlag.setDescription('Indicates whether this interval reported by the Mib Table is valid or invalid.')
wfDs1E1AnsiTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 13), )
if mibBuilder.loadTexts: wfDs1E1AnsiTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1AnsiTable.setDescription('ANSI Statistics line record - This table contains the performance parameters for the ANSI register set ')
wfDs1E1AnsiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 13, 1), ).setIndexNames((0, "Wellfleet-DS1E1-MIB", "wfDs1E1AnsiPortLineNumber"))
if mibBuilder.loadTexts: wfDs1E1AnsiEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1AnsiEntry.setDescription('An entry in the DS1E1 Ansi table')
wfDs1E1AnsiPortLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1AnsiPortLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1AnsiPortLineNumber.setDescription('Instance ID Slot, filled in by driver')
wfDs1E1AnsiCRCCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1AnsiCRCCounts.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1AnsiCRCCounts.setDescription('Counts CRC-6 error events')
wfDs1E1AnsiBPVCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1AnsiBPVCounts.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1AnsiBPVCounts.setDescription('Counts bipolar violations')
wfDs1E1AnsiOOFCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1AnsiOOFCounts.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1AnsiOOFCounts.setDescription('Counts out-of-frame error events')
wfDs1E1AnsiFECounts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1AnsiFECounts.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1AnsiFECounts.setDescription('Counts errors in the FPS framing pattern')
wfDs1E1AnsiESCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1AnsiESCounts.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1AnsiESCounts.setDescription('Counts errorred seconds')
wfDs1E1AnsiSESCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1AnsiSESCounts.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1AnsiSESCounts.setDescription('Counts severly errorred seconds')
wfDs1E1AnsiUASCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1AnsiUASCounts.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1AnsiUASCounts.setDescription('counts unavailable seconds')
wfDs1E1AnsiPRMR0Counts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1AnsiPRMR0Counts.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1AnsiPRMR0Counts.setDescription('Counts PRMs that ewre received in the FDL in the last four seconds')
wfDs1E1AnsiPRMR1Counts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 13, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1AnsiPRMR1Counts.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1AnsiPRMR1Counts.setDescription('Counts PRMs that ewre received in the FDL in the last four seconds')
wfDs1E1AnsiPRMR2Counts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 13, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1AnsiPRMR2Counts.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1AnsiPRMR2Counts.setDescription('Counts PRMs that ewre received in the FDL in the last four seconds')
wfDs1E1AnsiPRMR3Counts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 13, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1AnsiPRMR3Counts.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1AnsiPRMR3Counts.setDescription('Counts PRMs that ewre received in the FDL in the last four seconds')
wfDs1E1AnsiPRMESCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 13, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1AnsiPRMESCounts.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1AnsiPRMESCounts.setDescription('Counts errorred seconds as reported in the Performance report messages')
wfDs1E1AnsiPRMSESCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 13, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1AnsiPRMSESCounts.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1AnsiPRMSESCounts.setDescription('Counts severely errorred seconds as reported in the Performance report messages')
wfDs1E1AnsiPRMECounts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 8, 13, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1AnsiPRMECounts.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1AnsiPRMECounts.setDescription('Counts Performance report messages that are received in error')
wfDs1E1BertStatsTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 14), )
if mibBuilder.loadTexts: wfDs1E1BertStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1BertStatsTable.setDescription('BERT Counter line record - This table contains the statistics for the BERT tester.')
wfDs1E1BertStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 14, 1), ).setIndexNames((0, "Wellfleet-DS1E1-MIB", "wfDs1E1BertStatsPortLineNumber"))
if mibBuilder.loadTexts: wfDs1E1BertStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1BertStatsEntry.setDescription('An entry in the DS1E1 Bert Stats table')
wfDs1E1BertStatsPortLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1BertStatsPortLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1BertStatsPortLineNumber.setDescription('Instance ID Slot, filled in by driver')
wfDs1E1BertStatsBitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 14, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1BertStatsBitErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1BertStatsBitErrors.setDescription('Bit error counter')
wfDs1E1BertStatsBits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 14, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1BertStatsBits.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1BertStatsBits.setDescription('Bit counter')
wfDs1E1CurrentFramerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 15), )
if mibBuilder.loadTexts: wfDs1E1CurrentFramerStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1CurrentFramerStatsTable.setDescription('Framer stats line record - This table contains the statistics for the Framer tester.')
wfDs1E1CurrentFramerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 15, 1), ).setIndexNames((0, "Wellfleet-DS1E1-MIB", "wfDs1E1CurrentFramerStatsPortLineNumber"))
if mibBuilder.loadTexts: wfDs1E1CurrentFramerStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1CurrentFramerStatsEntry.setDescription('An entry in the DS1E1 CurrentFramer Stats table')
wfDs1E1CurrentFramerStatsPortLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1CurrentFramerStatsPortLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1CurrentFramerStatsPortLineNumber.setDescription('Instance ID Slot, filled in by driver')
wfDs1E1CurrentFramerStatsMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("t1", 1), ("e1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1CurrentFramerStatsMediaType.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1CurrentFramerStatsMediaType.setDescription('The media type is either T1 or E1')
wfDs1E1CurrentFramerStatsBpvCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 15, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1CurrentFramerStatsBpvCounts.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1CurrentFramerStatsBpvCounts.setDescription('bipolar violations counter')
wfDs1E1CurrentFramerStatsCrc4Counts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 15, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1CurrentFramerStatsCrc4Counts.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1CurrentFramerStatsCrc4Counts.setDescription('CRC4 error counter')
wfDs1E1CurrentFramerStatsFebeCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 15, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1CurrentFramerStatsFebeCounts.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1CurrentFramerStatsFebeCounts.setDescription('Far End Block Error counter')
wfDs1E1CurrentFramerStatsOofCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 15, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1CurrentFramerStatsOofCounts.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1CurrentFramerStatsOofCounts.setDescription('Out of frame error counts. Out of frame is declared when at least two of four (or five) consecutive framing bits are in error.')
wfDs1E1CurrentFramerStatsFeCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 15, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1CurrentFramerStatsFeCounts.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1CurrentFramerStatsFeCounts.setDescription('Framing error counts. In ESF mode this is the number of errored superframes while in SF mode it is the number of incorrect framing bits.')
wfDs1E1CurrentFramerStatsLossFrameFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 15, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1CurrentFramerStatsLossFrameFailures.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1CurrentFramerStatsLossFrameFailures.setDescription('Loss of frame failures. These occur when an out of frame event or carrier loss happens')
wfDs1E1CurrentFramerStatsLossSignalFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 15, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1CurrentFramerStatsLossSignalFailures.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1CurrentFramerStatsLossSignalFailures.setDescription('Loss of Signal failure happen when receive carrier is lost')
wfDs1E1CurrentFramerStatsAlarmIndicationFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 15, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1CurrentFramerStatsAlarmIndicationFailures.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1CurrentFramerStatsAlarmIndicationFailures.setDescription('Alarm Indication signal Failures occur when 2 consecutive frames have less than 3 zeros (total) in the data stream.')
wfDs1E1CurrentFramerStatsRemoteAlarmFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 15, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1CurrentFramerStatsRemoteAlarmFailures.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1CurrentFramerStatsRemoteAlarmFailures.setDescription('Remote alarm failure happen when the yellow alarm is detected')
wfDs1E1TotalFramerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 16), )
if mibBuilder.loadTexts: wfDs1E1TotalFramerStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1TotalFramerStatsTable.setDescription('Total framer stats line record - This table contains the statistics for the Framer.')
wfDs1E1TotalFramerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 16, 1), ).setIndexNames((0, "Wellfleet-DS1E1-MIB", "wfDs1E1TotalFramerStatsPortLineNumber"))
if mibBuilder.loadTexts: wfDs1E1TotalFramerStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1TotalFramerStatsEntry.setDescription('An entry in the DS1E1 TotalFramer Stats table')
wfDs1E1TotalFramerStatsPortLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1TotalFramerStatsPortLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1TotalFramerStatsPortLineNumber.setDescription('Instance ID Slot, filled in by driver')
wfDs1E1TotalFramerStatsMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("t1", 1), ("e1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1TotalFramerStatsMediaType.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1TotalFramerStatsMediaType.setDescription('bipolar violations counter')
wfDs1E1TotalFramerStatsValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 16, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1TotalFramerStatsValidIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1TotalFramerStatsValidIntervals.setDescription('The number of valid 15 minutes intervals in the last 24-hour period')
wfDs1E1TotalFramerStatsBpvCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 16, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1TotalFramerStatsBpvCounts.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1TotalFramerStatsBpvCounts.setDescription('bipolar violations counter')
wfDs1E1TotalFramerStatsCrc4Counts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 16, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1TotalFramerStatsCrc4Counts.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1TotalFramerStatsCrc4Counts.setDescription('CRC4 error counter')
wfDs1E1TotalFramerStatsFebeCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 16, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1TotalFramerStatsFebeCounts.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1TotalFramerStatsFebeCounts.setDescription('Far End Block Error counter')
wfDs1E1TotalFramerStatsOofCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 16, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1TotalFramerStatsOofCounts.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1TotalFramerStatsOofCounts.setDescription('Out of frame error counts. Out of frame is declared when at least two of four (or five) consecutive framing bits are in error.')
wfDs1E1TotalFramerStatsFeCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 16, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1TotalFramerStatsFeCounts.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1TotalFramerStatsFeCounts.setDescription('Framing error counts. In ESF mode this is the number of errored superframes while in SF mode it is the number of incorrect framing bits.')
wfDs1E1TotalFramerStatsLossFrameFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 16, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1TotalFramerStatsLossFrameFailures.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1TotalFramerStatsLossFrameFailures.setDescription('Loss of frame failures. These occur when an out of frame event or carrier loss happens')
wfDs1E1TotalFramerStatsLossSignalFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 16, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1TotalFramerStatsLossSignalFailures.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1TotalFramerStatsLossSignalFailures.setDescription('Loss of Signal failure happen when receive carrier is lost')
wfDs1E1TotalFramerStatsAlarmIndicationFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 16, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1TotalFramerStatsAlarmIndicationFailures.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1TotalFramerStatsAlarmIndicationFailures.setDescription('Alarm Indication signal Failures occur when 2 consecutive frames have less than 3 zeros (total) in the data stream.')
wfDs1E1TotalFramerStatsRemoteAlarmFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 16, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1TotalFramerStatsRemoteAlarmFailures.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1TotalFramerStatsRemoteAlarmFailures.setDescription('Remote alarm failure happen when the yellow alarm is detected')
wfDs1E1IntervalFramerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 17), )
if mibBuilder.loadTexts: wfDs1E1IntervalFramerStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1IntervalFramerStatsTable.setDescription('Interval Framer stats line record - This table contains the statistics for the Framer.')
wfDs1E1IntervalFramerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 17, 1), ).setIndexNames((0, "Wellfleet-DS1E1-MIB", "wfDs1E1IntervalFramerStatsPortLineNumber"), (0, "Wellfleet-DS1E1-MIB", "wfDs1E1IntervalFramerStatsIntervalNumber"))
if mibBuilder.loadTexts: wfDs1E1IntervalFramerStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1IntervalFramerStatsEntry.setDescription('An entry in the DS1E1 IntervalFramer Stats table')
wfDs1E1IntervalFramerStatsPortLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1IntervalFramerStatsPortLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1IntervalFramerStatsPortLineNumber.setDescription('Instance ID Slot, filled in by driver')
wfDs1E1IntervalFramerStatsIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1IntervalFramerStatsIntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1IntervalFramerStatsIntervalNumber.setDescription('Instance ID interval number, filled in by driver')
wfDs1E1IntervalFramerStatsMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("t1", 1), ("e1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1IntervalFramerStatsMediaType.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1IntervalFramerStatsMediaType.setDescription('Media Type, T1 or E1')
wfDs1E1IntervalFramerStatsBpvCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 17, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1IntervalFramerStatsBpvCounts.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1IntervalFramerStatsBpvCounts.setDescription('bipolar violations counter')
wfDs1E1IntervalFramerStatsCrc4Counts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 17, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1IntervalFramerStatsCrc4Counts.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1IntervalFramerStatsCrc4Counts.setDescription('CRC4 error counter')
wfDs1E1IntervalFramerStatsFebeCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 17, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1IntervalFramerStatsFebeCounts.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1IntervalFramerStatsFebeCounts.setDescription('Far End Block Error counter')
wfDs1E1IntervalFramerStatsOofCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 17, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1IntervalFramerStatsOofCounts.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1IntervalFramerStatsOofCounts.setDescription('Out of frame error counts. Out of frame is declared when at least two of four (or five) consecutive framing bits are in error.')
wfDs1E1IntervalFramerStatsFeCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 17, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1IntervalFramerStatsFeCounts.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1IntervalFramerStatsFeCounts.setDescription('Framing error counts. In ESF mode this is the number of errored superframes while in SF mode it is the number of incorrect framing bits.')
wfDs1E1IntervalFramerStatsLossFrameFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 17, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1IntervalFramerStatsLossFrameFailures.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1IntervalFramerStatsLossFrameFailures.setDescription('Loss of frame failures. These occur when an out of frame event or carrier loss happens')
wfDs1E1IntervalFramerStatsLossSignalFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 17, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1IntervalFramerStatsLossSignalFailures.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1IntervalFramerStatsLossSignalFailures.setDescription('Loss of Signal failure happen when receive carrier is lost')
wfDs1E1IntervalFramerStatsAlarmIndicationFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 17, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1IntervalFramerStatsAlarmIndicationFailures.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1IntervalFramerStatsAlarmIndicationFailures.setDescription('Alarm Indication signal Failures occur when 2 consecutive frames have less than 3 zeros (total) in the data stream.')
wfDs1E1IntervalFramerStatsRemoteAlarmFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 17, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1IntervalFramerStatsRemoteAlarmFailures.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1IntervalFramerStatsRemoteAlarmFailures.setDescription('Remote alarm failure happen when the yellow alarm is detected')
wfDs1E1ClockTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 18), )
if mibBuilder.loadTexts: wfDs1E1ClockTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ClockTable.setDescription('DS1E1 clock record - Contains Clock parameters supporting the QMCT1. ')
wfDs1E1ClockEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 18, 1), ).setIndexNames((0, "Wellfleet-DS1E1-MIB", "wfDs1E1ClockPortLineNumber"))
if mibBuilder.loadTexts: wfDs1E1ClockEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ClockEntry.setDescription('An entry in the DS1E1 clock table')
wfDs1E1ClockDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ClockDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ClockDelete.setDescription('Create/Delete attribute')
wfDs1E1ClockPortLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1ClockPortLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ClockPortLineNumber.setDescription('The index ID for this record. It is the line number assigned to a port in the wfDs1E1PortMapEntry for a port.connector pair. Its channel field should be 0.')
wfDs1E1ClockPrimaryClock = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("internal", 1), ("external", 2), ("loop1", 3), ("loop2", 4), ("loop3", 5), ("loop4", 6))).clone('internal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ClockPrimaryClock.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ClockPrimaryClock.setDescription('Specifies the primary source for transmit timing for this port. The options for timing source are internal timing source, loop timing from either port and an external timing source. Note that the bit defines are equal to the Timing Register bit definitions plus 1.')
wfDs1E1ClockSecondaryClock = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("internal", 1), ("external", 2), ("loop1", 3), ("loop2", 4), ("loop3", 5), ("loop4", 6))).clone('internal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ClockSecondaryClock.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ClockSecondaryClock.setDescription('Specifies the secondary source for transmit timing for this port.')
wfDs1E1ClockCurrentClock = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("internal", 1), ("external", 2), ("loop1", 3), ("loop2", 4), ("loop3", 5), ("loop4", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1ClockCurrentClock.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ClockCurrentClock.setDescription('Specifies the current source for transmit timing for this port.')
wfDs1E1ClockLoopClockOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 18, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("notpresent", 2))).clone('present')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1ClockLoopClockOperational.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ClockLoopClockOperational.setDescription('Specifies this ports Loop Clock Status, PRESENT (UP) or NOTPRESENT (DOWN).')
wfDs1E1ClockExtClockOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 18, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("notpresent", 2))).clone('present')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1ClockExtClockOperational.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ClockExtClockOperational.setDescription('Indicates whether the External clock is operational.')
wfDs1E1LineCfgTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 21), )
if mibBuilder.loadTexts: wfDs1E1LineCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineCfgTable.setDescription('Contains configuration parameters for Channel specific Fractional T1/E1.')
wfDs1E1LineCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 21, 1), ).setIndexNames((0, "Wellfleet-DS1E1-MIB", "wfDs1E1LineCfgPortLineNumber"), (0, "Wellfleet-DS1E1-MIB", "wfDs1E1LineCfgIndex"))
if mibBuilder.loadTexts: wfDs1E1LineCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineCfgEntry.setDescription('An entry in the LOGICAL_LINE table')
wfDs1E1LineCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1LineCfgDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineCfgDelete.setDescription('Create/Delete parameter')
wfDs1E1LineCfgDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1LineCfgDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineCfgDisable.setDescription('Enable/Disable parameter')
wfDs1E1LineCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("lmiwait", 4), ("loopback", 5), ("linedieing", 6), ("linedead", 7), ("remoteloop", 8), ("remotedeaf", 9), ("bert", 10), ("hwfrac", 11), ("priWait", 12), ("quePkgWait", 13), ("queMisCfg", 14), ("notpresent", 20))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1LineCfgState.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineCfgState.setDescription('Line Driver state variable')
wfDs1E1LineLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 21, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1LineLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineLastChange.setDescription('The value of sysUpTime at the time the interface entered its current operational state.')
wfDs1E1LineCfgPortLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 21, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1LineCfgPortLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineCfgPortLineNumber.setDescription('Instance ID PortLineNumber, filled in by driver')
wfDs1E1LineCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 21, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1LineCfgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineCfgIndex.setDescription('Index for this line instance, filled in by driver. The index corresponds to the position of the circuit on the port.')
wfDs1E1LineCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 21, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1LineCfgIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineCfgIfIndex.setDescription('IfTable Index for this line instance, filled in by driver.')
wfDs1E1LineCfgCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 21, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1LineCfgCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineCfgCct.setDescription('Circuit number for this line instance')
wfDs1E1LineCfgLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 21, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1LineCfgLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineCfgLineNumber.setDescription('LineNumber for this logical line instance. This is the same line number contained in the PORT_TABLE with the channel field nonzero.')
wfDs1E1LineCfgQosServicePkg = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 21, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1LineCfgQosServicePkg.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineCfgQosServicePkg.setDescription('Queue Service Package to be used for this line')
wfDs1E1LineCfgTimeSlotAssign = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 21, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1LineCfgTimeSlotAssign.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineCfgTimeSlotAssign.setDescription('Bitmask of timeslot(s) assigned to this line MSB == Bit 31, LSB == Bit 0 TimeSlot 1 == Bit 1 TimeSlot 24 == Bit 24 (T1) TimeSlot 31 == Bit 31 (E1)')
wfDs1E1LineCfgActualTimeSlotAssign = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 21, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1LineCfgActualTimeSlotAssign.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineCfgActualTimeSlotAssign.setDescription('Lists the time-slots which constitute this channel. Read only attribute that contains a list of time-slots from 1 to 31 used by the channel')
wfDs1E1LineCfgWanProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 21, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("standard", 1), ("passthru", 2), ("ppp", 3), ("smds", 4), ("framerelay", 5), ("x25", 6), ("switch", 7), ("sw", 8), ("atm", 9), ("lapb", 10), ("sdlc", 11))).clone('ppp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1LineCfgWanProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineCfgWanProtocol.setDescription('WAN protocol selection is provided via this parameter. The supported protocols can be selected per circuit.')
wfDs1E1LineCfgRateAdaption = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 21, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("adaption64k", 1), ("adaption56klsb", 3))).clone('adaption64k')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1LineCfgRateAdaption.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineCfgRateAdaption.setDescription('Determines the number of bits and their bit positions within the time-slot. 64k selection uses all 8 bits in the time-slot. The two 56k selections use 7 of the 8 bits in the time-slot. 56k_MSB does not use the most significant bit and 56k_LSB does not use the least significant bit in the time-slot.')
wfDs1E1LineCfgIFTF = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 21, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flags", 1), ("idles", 2))).clone('flags')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1LineCfgIFTF.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineCfgIFTF.setDescription('Determines the Interframe time fill character to be transmitted by the HDLC Controller. In case of IFTF_FLAGS, 0x7E is sent and in case of IFTF_IDLES 0xff is sent as the interframe timefill characters.')
wfDs1E1LineCfgCRCSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 21, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crc32", 1), ("crc16", 2))).clone('crc16')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1LineCfgCRCSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineCfgCRCSize.setDescription('Determines the CRC Size. When CRC32 is selected a 32 bit CRC is appended to the frame being transmitted and a 32 bit CRC check is performed on the received frame. When CRC16 is selected, a 16 bit CRC is appended to the transmitted frame and a 16 bit CRC is performed. on the received frame.')
wfDs1E1LineCfgMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 21, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 4608)).clone(4608)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1LineCfgMtu.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineCfgMtu.setDescription('Specifies the largest frame size that can be received by the logical line. Anything larger than the MTU will be discarded.')
wfDs1E1LineCfgBertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 21, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1LineCfgBertMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineCfgBertMode.setDescription('Enables Bit Error Rate Testing (BERT) on a logical line level.')
wfDs1E1LineCfgBertTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 21, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("zeros", 1), ("ones", 2), ("qrss", 3), ("two15", 4), ("two15-inv", 5), ("two20", 6), ("two23", 7), ("two23-inv", 8))).clone('ones')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1LineCfgBertTestPattern.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineCfgBertTestPattern.setDescription('When a line is in BERT mode, it is capable of generating a set of known patterns. This paramater selects between those patterns')
wfDs1E1LineCfgFractionalLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 21, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1LineCfgFractionalLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineCfgFractionalLoopback.setDescription('Any Ds1E1 Line on this T1/E1 port is capable of being put into loopback through hardware, i.e. data coming into that circuit from the wire is mirrorred back onto the wire. This parameter enables or disables this loopback feature on any circuit.')
wfDs1E1LineCfgAcceptFracLoopCode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 21, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1LineCfgAcceptFracLoopCode.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineCfgAcceptFracLoopCode.setDescription('Allows logical line to accept Fractional T1 Loop Code sent from a Remote Device.')
wfDs1E1LineCfgManagerMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 21, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("timeslots", 1), ("t1", 2))).clone('timeslots')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1LineCfgManagerMethod.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineCfgManagerMethod.setDescription('This attribute has no affect on the Hardware configuration. This attribute is purely for any Network Management Tool to determine whether it configured the Logical Line as a Clear Channel T1 or as a Fractional T1 with Timeslots.')
wfDs1E1LineStatTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 22), )
if mibBuilder.loadTexts: wfDs1E1LineStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineStatTable.setDescription('Contains statistics for Channel specific Fractional T1/E1.')
wfDs1E1LineStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 22, 1), ).setIndexNames((0, "Wellfleet-DS1E1-MIB", "wfDs1E1LineStatPortLineNumber"), (0, "Wellfleet-DS1E1-MIB", "wfDs1E1LineStatIndex"))
if mibBuilder.loadTexts: wfDs1E1LineStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineStatEntry.setDescription('An entry in the LOGICAL_LINE table')
wfDs1E1LineStatPortLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1LineStatPortLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineStatPortLineNumber.setDescription('Instance ID PortLineNumber, filled in by driver')
wfDs1E1LineStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 22, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1LineStatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineStatIndex.setDescription('Index for this line instance, filled in by driver. The index corresponds to the position of the circuit, from 1 to 31, on the port.')
wfDs1E1LineStatRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 22, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1LineStatRxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineStatRxOctets.setDescription('Number of octets received without error')
wfDs1E1LineStatTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 22, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1LineStatTxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineStatTxOctets.setDescription('Number of octets transmitted without error')
wfDs1E1LineStatRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 22, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1LineStatRxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineStatRxFrames.setDescription('Number of frames received without error')
wfDs1E1LineStatTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 22, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1LineStatTxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineStatTxFrames.setDescription('Number of frames transmitted without error')
wfDs1E1LineStatRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 22, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1LineStatRxErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineStatRxErrors.setDescription('Number of receive errors')
wfDs1E1LineStatTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 22, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1LineStatTxErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineStatTxErrors.setDescription('Number of transmission errors')
wfDs1E1LineStatRxDropPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 22, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1LineStatRxDropPackets.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineStatRxDropPackets.setDescription('Number of Rx frames dropped')
wfDs1E1LineStatTxDropPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 22, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1LineStatTxDropPackets.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineStatTxDropPackets.setDescription('Number of Tx frames dropped')
wfDs1E1LineStatTxUnderflows = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 22, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1LineStatTxUnderflows.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineStatTxUnderflows.setDescription('Number of Tx frames dropped due to Transmit underflow')
wfDs1E1LineStatRxOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 22, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1LineStatRxOverflows.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineStatRxOverflows.setDescription('Number of Rx frames dropped due to Receive overflow')
wfDs1E1LineStatRxShortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 22, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1LineStatRxShortFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineStatRxShortFrames.setDescription('Number of short frames received whose length is either 1 or 2 data bytes.')
wfDs1E1LineStatRxCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 22, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1LineStatRxCRCErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineStatRxCRCErrors.setDescription('CRC error received')
wfDs1E1LineStatRxNonOctetBits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 22, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1LineStatRxNonOctetBits.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineStatRxNonOctetBits.setDescription('Non-Octet bits received in frame')
wfDs1E1LineStatRxLongFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 22, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1LineStatRxLongFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineStatRxLongFrames.setDescription('Frame longer than MFL received')
wfDs1E1LineStatRxAbortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 22, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1LineStatRxAbortFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineStatRxAbortFrames.setDescription('Aborted frame received')
wfDs1E1DayCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 24), )
if mibBuilder.loadTexts: wfDs1E1DayCurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayCurrentTable.setDescription('Current AT&T FDL stats table.')
wfDs1E1DayCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 24, 1), ).setIndexNames((0, "Wellfleet-DS1E1-MIB", "wfDs1E1DayCurrentPortLineNumber"))
if mibBuilder.loadTexts: wfDs1E1DayCurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayCurrentEntry.setDescription('An entry in the DS1E1 Current table')
wfDs1E1DayCurrentPortLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 24, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayCurrentPortLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayCurrentPortLineNumber.setDescription('The instance ID that identifies the port. The port line number with a zero channel number field as found in the port map table.')
wfDs1E1DayCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 24, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayCurrentESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayCurrentESs.setDescription('The number of Errored Seconds, encountered by a DS1 interface in the current day interval.')
wfDs1E1DayCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 24, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayCurrentSESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayCurrentSESs.setDescription("The number of Severely Errored Seconds encountered by a DS1 interface in the current day interval.'")
wfDs1E1DayCurrentSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 24, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayCurrentSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayCurrentSEFSs.setDescription('The number of Severely Errored Framing Seconds encountered by a DS1 interface in the current day interval.')
wfDs1E1DayCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 24, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayCurrentUASs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayCurrentUASs.setDescription('The number of Unavailable Seconds encountered by a DS1 interface in the current day interval.')
wfDs1E1DayCurrentCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 24, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayCurrentCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayCurrentCSSs.setDescription('The number of Controlled Slip Seconds encountered by a DS1 interface in the current day interval.')
wfDs1E1DayCurrentPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 24, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayCurrentPCVs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayCurrentPCVs.setDescription('The number of Path Coding Violations encountered by a DS1 interface in the current day interval.')
wfDs1E1DayCurrentLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 24, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayCurrentLESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayCurrentLESs.setDescription("The number of Line Errored Seconds encountered by a DS1 interface in the current day interval.'")
wfDs1E1DayCurrentBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 24, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayCurrentBESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayCurrentBESs.setDescription('The number of Bursty Errored Seconds (BESs) encountered by a DS1 interface in the current day interval.')
wfDs1E1DayCurrentDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 24, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayCurrentDMs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayCurrentDMs.setDescription("The number of Degraded Minutes (DMs) encountered by a DS1 interface in the current day interval.'")
wfDs1E1DayCurrentLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 24, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayCurrentLCVs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayCurrentLCVs.setDescription("The number of Line Code Violations (LCVs) encountered by a DS1 interface in the current day interval.'")
wfDs1E1DayCurrentSASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 24, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayCurrentSASs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayCurrentSASs.setDescription('The number of seconds, within the current day interval, containing one or more SEFs or AIS defects.')
wfDs1E1DayCurrentAISSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 24, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayCurrentAISSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayCurrentAISSs.setDescription('The number of seconds, within the current day interval, containing one or more AIS defect.')
wfDs1E1DayCurrentFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 24, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayCurrentFCs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayCurrentFCs.setDescription('The number of Path Failure Count error events detected in the current day interval.')
wfDs1E1DayCurrentTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 24, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayCurrentTimeElapsed.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayCurrentTimeElapsed.setDescription('The number of seconds that have elapsed since the beginning of the current error-measurement period.')
wfDs1E1DayCurrentValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 24, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayCurrentValidIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayCurrentValidIntervals.setDescription('The number of previous intervals for which valid data was collected. The value will be 8 unless the interface was brought on-line within the last 8 days, in which case the value will be the number of complete day intervals the since interface has been online.')
wfDs1E1DayCurrentValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 24, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2))).clone('valid')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayCurrentValidFlag.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayCurrentValidFlag.setDescription('Indicates whether this interval reported by the Mib Table is valid or invalid.')
wfDs1E1DayIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 25), )
if mibBuilder.loadTexts: wfDs1E1DayIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayIntervalTable.setDescription('AT&T Interval stats')
wfDs1E1DayIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 25, 1), ).setIndexNames((0, "Wellfleet-DS1E1-MIB", "wfDs1E1DayIntervalPortLineNumber"), (0, "Wellfleet-DS1E1-MIB", "wfDs1E1DayIntervalNumber"))
if mibBuilder.loadTexts: wfDs1E1DayIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayIntervalEntry.setDescription('An entry in the DS1E1 Interval table')
wfDs1E1DayIntervalPortLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 25, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayIntervalPortLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayIntervalPortLineNumber.setDescription('The instance ID that identifies the port. The port line number with a zero channel number field as found in the port map table.')
wfDs1E1DayIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 25, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayIntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayIntervalNumber.setDescription('A number between 1 and 8, where 1 is the most recently completed day interval and 8 is the least recently completed day interval (assuming that all 8 intervals are valid).')
wfDs1E1DayIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 25, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayIntervalESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayIntervalESs.setDescription('The number of Errored Seconds, encountered by a DS1 interface in the current day interval.')
wfDs1E1DayIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 25, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayIntervalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayIntervalSESs.setDescription('The number of Severely Errored Seconds encountered by a DS1 interface in one of the previous day intervals.')
wfDs1E1DayIntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 25, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayIntervalSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayIntervalSEFSs.setDescription('The number of Severely Errored Framing Seconds encountered by a DS1 interface in one of the previous day intervals.')
wfDs1E1DayIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 25, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayIntervalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayIntervalUASs.setDescription('The number of Unavailable Seconds encountered by a DS1 interface in one of the previous day intervals.')
wfDs1E1DayIntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 25, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayIntervalCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayIntervalCSSs.setDescription('The number of Controlled Slip Seconds encountered by a DS1 interface in one of the previous day intervals.')
wfDs1E1DayIntervalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 25, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayIntervalPCVs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayIntervalPCVs.setDescription('The number of Path Coding Violations encountered by a DS1 interface in one of the previous day intervals.')
wfDs1E1DayIntervalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 25, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayIntervalLESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayIntervalLESs.setDescription('The number of Line Errored Seconds encountered by a DS1 interface in one of the previous day intervals.')
wfDs1E1DayIntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 25, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayIntervalBESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayIntervalBESs.setDescription('The number of Bursty Errored Seconds (BESs) encountered by a DS1 interface in one of the previous day intervals.')
wfDs1E1DayIntervalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 25, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayIntervalDMs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayIntervalDMs.setDescription('The number of Degraded Minutes (DMs) encountered by a DS1 interface in one of the previous day intervals.')
wfDs1E1DayIntervalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 25, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayIntervalLCVs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayIntervalLCVs.setDescription('The number of Line Code Violations (LCVs) encountered by a DS1 interface in one of the previous day intervals.')
wfDs1E1DayIntervalSASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 25, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayIntervalSASs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayIntervalSASs.setDescription('The number of seconds, in one of the previous day intervals, containing one or more SEFs or AIS defects.')
wfDs1E1DayIntervalAISSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 25, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayIntervalAISSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayIntervalAISSs.setDescription('The number of seconds, in one of the previous day intervals, containing one or more AIS defect.')
wfDs1E1DayIntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 25, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayIntervalFCs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayIntervalFCs.setDescription('The number of Path Failure Count error events detected one of the previous day intervals.')
wfDs1E1DayIntervalValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 25, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2))).clone('valid')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayIntervalValidFlag.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayIntervalValidFlag.setDescription('Indicates whether this interval reported by the Mib Table is valid or invalid.')
wfDs1E1DayTotalTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 26), )
if mibBuilder.loadTexts: wfDs1E1DayTotalTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayTotalTable.setDescription('AT&T Total stats Table')
wfDs1E1DayTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 26, 1), ).setIndexNames((0, "Wellfleet-DS1E1-MIB", "wfDs1E1DayTotalPortLineNumber"))
if mibBuilder.loadTexts: wfDs1E1DayTotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayTotalEntry.setDescription('An entry in the DS1E1 Total table')
wfDs1E1DayTotalPortLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 26, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayTotalPortLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayTotalPortLineNumber.setDescription('The instance ID that identifies the port. The port line number with a zero channel number field as found in the port map table.')
wfDs1E1DayTotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 26, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayTotalESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayTotalESs.setDescription('The number of Errored Seconds, encountered by a DS1 interface in the previous 8 day interval.')
wfDs1E1DayTotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 26, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayTotalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayTotalSESs.setDescription('The number of Severely Errored Seconds encountered by a DS1 interface in the previous 8 day interval.')
wfDs1E1DayTotalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 26, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayTotalSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayTotalSEFSs.setDescription('The number of Severely Errored Framing Seconds encountered by a DS1 interface in the previous 8 day interval.')
wfDs1E1DayTotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 26, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayTotalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayTotalUASs.setDescription('The number of Unavailable Seconds encountered by a DS1 interface in the previous 8 day interval.')
wfDs1E1DayTotalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 26, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayTotalCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayTotalCSSs.setDescription('The number of Controlled Slip Seconds encountered by a DS1 interface in the previous 8 day interval.')
wfDs1E1DayTotalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 26, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayTotalPCVs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayTotalPCVs.setDescription('The number of Path Coding Violations encountered by a DS1 interface in the previous 8 day interval.')
wfDs1E1DayTotalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 26, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayTotalLESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayTotalLESs.setDescription('The number of Line Errored Seconds encountered by a DS1 interface in the previous 8 day interval.')
wfDs1E1DayTotalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 26, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayTotalBESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayTotalBESs.setDescription('The number of Bursty Errored Seconds (BESs) encountered by a DS1 interface in the previous 8 day interval.')
wfDs1E1DayTotalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 26, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayTotalDMs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayTotalDMs.setDescription('The number of Degraded Minutes (DMs) encountered by a DS1 interface in the previous 8 day interval.')
wfDs1E1DayTotalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 26, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayTotalLCVs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayTotalLCVs.setDescription('The number of Line Code Violations (LCVs) encountered by a DS1 interface in the previous 8 day interval.')
wfDs1E1DayTotalSASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 26, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayTotalSASs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayTotalSASs.setDescription('The number of seconds, in the previous 8 day interval, containing one or more SEFs or AIS defects.')
wfDs1E1DayTotalAISSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 26, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayTotalAISSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayTotalAISSs.setDescription('The number of seconds, in the previous 8 day interval, containing one or more AIS defect.')
wfDs1E1DayTotalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 26, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayTotalFCs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayTotalFCs.setDescription('The number of Path Failure Count error events detected in the previous 8 day interval.')
wfDs1E1DayTotalValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 26, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2))).clone('valid')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayTotalValidFlag.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayTotalValidFlag.setDescription('Indicates whether this interval reported by the Mib Table is valid or invalid.')
wfDs1E1FarEndCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 27), )
if mibBuilder.loadTexts: wfDs1E1FarEndCurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndCurrentTable.setDescription('Current AT&T FDL stats table.')
wfDs1E1FarEndCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 27, 1), ).setIndexNames((0, "Wellfleet-DS1E1-MIB", "wfDs1E1FarEndCurrentPortLineNumber"))
if mibBuilder.loadTexts: wfDs1E1FarEndCurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndCurrentEntry.setDescription('An entry in the DS1E1 Current table')
wfDs1E1FarEndCurrentPortLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 27, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndCurrentPortLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndCurrentPortLineNumber.setDescription('The instance ID that identifies the port. The port line number with a zero channel number field as found in the port map table.')
wfDs1E1FarEndCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 27, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndCurrentESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndCurrentESs.setDescription('The number of Errored Seconds, encountered by a DS1 interface in the current day interval.')
wfDs1E1FarEndCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 27, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndCurrentSESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndCurrentSESs.setDescription("The number of Severely Errored Seconds encountered by a DS1 interface in the current day interval.'")
wfDs1E1FarEndCurrentSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 27, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndCurrentSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndCurrentSEFSs.setDescription('The number of Severely Errored Framing Seconds encountered by a DS1 interface in the current day interval.')
wfDs1E1FarEndCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 27, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndCurrentUASs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndCurrentUASs.setDescription('The number of Unavailable Seconds encountered by a DS1 interface in the current day interval.')
wfDs1E1FarEndCurrentCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 27, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndCurrentCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndCurrentCSSs.setDescription('The number of Controlled Slip Seconds encountered by a DS1 interface in the current day interval.')
wfDs1E1FarEndCurrentPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 27, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndCurrentPCVs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndCurrentPCVs.setDescription('The number of Path Coding Violations encountered by a DS1 interface in the current day interval.')
wfDs1E1FarEndCurrentLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 27, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndCurrentLESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndCurrentLESs.setDescription("The number of Line Errored Seconds encountered by a DS1 interface in the current day interval.'")
wfDs1E1FarEndCurrentBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 27, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndCurrentBESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndCurrentBESs.setDescription('The number of Bursty Errored Seconds (BESs) encountered by a DS1 interface in the current day interval.')
wfDs1E1FarEndCurrentDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 27, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndCurrentDMs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndCurrentDMs.setDescription("The number of Degraded Minutes (DMs) encountered by a DS1 interface in the current day interval.'")
wfDs1E1FarEndCurrentLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 27, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndCurrentLCVs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndCurrentLCVs.setDescription("The number of Line Code Violations (LCVs) encountered by a DS1 interface in the current day interval.'")
wfDs1E1FarEndCurrentSASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 27, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndCurrentSASs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndCurrentSASs.setDescription('The number of seconds, within the current day interval, containing one or more SEFs or AIS defects.')
wfDs1E1FarEndCurrentAISSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 27, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndCurrentAISSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndCurrentAISSs.setDescription('The number of seconds, within the current day interval, containing one or more AIS defect.')
wfDs1E1FarEndCurrentFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 27, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndCurrentFCs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndCurrentFCs.setDescription('The number of Path Failure Count error events detected in the current day interval.')
wfDs1E1FarEndCurrentTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 27, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndCurrentTimeElapsed.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndCurrentTimeElapsed.setDescription('The number of seconds that have elapsed since the beginning of the current error-measurement period.')
wfDs1E1FarEndCurrentValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 27, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndCurrentValidIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndCurrentValidIntervals.setDescription('The number of previous intervals for which valid data was collected. The value will be 8 unless the interface was brought on-line within the last 8 days, in which case the value will be the number of complete day intervals the since interface has been online.')
wfDs1E1FarEndCurrentValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 27, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2))).clone('valid')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndCurrentValidFlag.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndCurrentValidFlag.setDescription('Indicates whether this interval reported by the Mib Table is valid or invalid.')
wfDs1E1FarEndIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 28), )
if mibBuilder.loadTexts: wfDs1E1FarEndIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndIntervalTable.setDescription('AT&T Interval stats')
wfDs1E1FarEndIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 28, 1), ).setIndexNames((0, "Wellfleet-DS1E1-MIB", "wfDs1E1FarEndIntervalPortLineNumber"), (0, "Wellfleet-DS1E1-MIB", "wfDs1E1FarEndIntervalNumber"))
if mibBuilder.loadTexts: wfDs1E1FarEndIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndIntervalEntry.setDescription('An entry in the DS1E1 Interval table')
wfDs1E1FarEndIntervalPortLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 28, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndIntervalPortLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndIntervalPortLineNumber.setDescription('The instance ID that identifies the port. The port line number with a zero channel number field as found in the port map table.')
wfDs1E1FarEndIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 28, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndIntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndIntervalNumber.setDescription('A number between 1 and 8, where 1 is the most recently completed day interval and 8 is the least recently completed day interval (assuming that all 8 intervals are valid).')
wfDs1E1FarEndIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 28, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndIntervalESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndIntervalESs.setDescription('The number of Errored Seconds, encountered by a DS1 interface in the current day interval.')
wfDs1E1FarEndIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 28, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndIntervalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndIntervalSESs.setDescription('The number of Severely Errored Seconds encountered by a DS1 interface in one of the previous day intervals.')
wfDs1E1FarEndIntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 28, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndIntervalSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndIntervalSEFSs.setDescription('The number of Severely Errored Framing Seconds encountered by a DS1 interface in one of the previous day intervals.')
wfDs1E1FarEndIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 28, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndIntervalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndIntervalUASs.setDescription('The number of Unavailable Seconds encountered by a DS1 interface in one of the previous day intervals.')
wfDs1E1FarEndIntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 28, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndIntervalCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndIntervalCSSs.setDescription('The number of Controlled Slip Seconds encountered by a DS1 interface in one of the previous day intervals.')
wfDs1E1FarEndIntervalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 28, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndIntervalPCVs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndIntervalPCVs.setDescription('The number of Path Coding Violations encountered by a DS1 interface in one of the previous day intervals.')
wfDs1E1FarEndIntervalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 28, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndIntervalLESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndIntervalLESs.setDescription('The number of Line Errored Seconds encountered by a DS1 interface in one of the previous day intervals.')
wfDs1E1FarEndIntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 28, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndIntervalBESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndIntervalBESs.setDescription('The number of Bursty Errored Seconds (BESs) encountered by a DS1 interface in one of the previous day intervals.')
wfDs1E1FarEndIntervalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 28, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndIntervalDMs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndIntervalDMs.setDescription('The number of Degraded Minutes (DMs) encountered by a DS1 interface in one of the previous day intervals.')
wfDs1E1FarEndIntervalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 28, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndIntervalLCVs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndIntervalLCVs.setDescription('The number of Line Code Violations (LCVs) encountered by a DS1 interface in one of the previous day intervals.')
wfDs1E1FarEndIntervalSASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 28, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndIntervalSASs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndIntervalSASs.setDescription('The number of seconds, in one of the previous day intervals, containing one or more SEFs or AIS defects.')
wfDs1E1FarEndIntervalAISSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 28, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndIntervalAISSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndIntervalAISSs.setDescription('The number of seconds, in one of the previous day intervals, containing one or more AIS defect.')
wfDs1E1FarEndIntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 28, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndIntervalFCs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndIntervalFCs.setDescription('The number of Path Failure Count error events detected one of the previous day intervals.')
wfDs1E1FarEndIntervalValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 28, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2))).clone('valid')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndIntervalValidFlag.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndIntervalValidFlag.setDescription('Indicates whether this interval reported by the Mib Table is valid or invalid.')
wfDs1E1FarEndTotalTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 29), )
if mibBuilder.loadTexts: wfDs1E1FarEndTotalTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndTotalTable.setDescription('AT&T Total stats Table')
wfDs1E1FarEndTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 29, 1), ).setIndexNames((0, "Wellfleet-DS1E1-MIB", "wfDs1E1FarEndTotalPortLineNumber"))
if mibBuilder.loadTexts: wfDs1E1FarEndTotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndTotalEntry.setDescription('An entry in the DS1E1 Total table')
wfDs1E1FarEndTotalPortLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 29, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndTotalPortLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndTotalPortLineNumber.setDescription('The instance ID that identifies the port. The port line number with a zero channel number field as found in the port map table.')
wfDs1E1FarEndTotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 29, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndTotalESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndTotalESs.setDescription('The number of Errored Seconds, encountered by a DS1 interface in the previous 8 day interval.')
wfDs1E1FarEndTotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 29, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndTotalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndTotalSESs.setDescription('The number of Severely Errored Seconds encountered by a DS1 interface in the previous 8 day interval.')
wfDs1E1FarEndTotalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 29, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndTotalSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndTotalSEFSs.setDescription('The number of Severely Errored Framing Seconds encountered by a DS1 interface in the previous 8 day interval.')
wfDs1E1FarEndTotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 29, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndTotalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndTotalUASs.setDescription('The number of Unavailable Seconds encountered by a DS1 interface in the previous 8 day interval.')
wfDs1E1FarEndTotalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 29, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndTotalCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndTotalCSSs.setDescription('The number of Controlled Slip Seconds encountered by a DS1 interface in the previous 8 day interval.')
wfDs1E1FarEndTotalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 29, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndTotalPCVs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndTotalPCVs.setDescription('The number of Path Coding Violations encountered by a DS1 interface in the previous 8 day interval.')
wfDs1E1FarEndTotalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 29, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndTotalLESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndTotalLESs.setDescription('The number of Line Errored Seconds encountered by a DS1 interface in the previous 8 day interval.')
wfDs1E1FarEndTotalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 29, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndTotalBESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndTotalBESs.setDescription('The number of Bursty Errored Seconds (BESs) encountered by a DS1 interface in the previous 8 day interval.')
wfDs1E1FarEndTotalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 29, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndTotalDMs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndTotalDMs.setDescription('The number of Degraded Minutes (DMs) encountered by a DS1 interface in the previous 8 day interval.')
wfDs1E1FarEndTotalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 29, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndTotalLCVs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndTotalLCVs.setDescription('The number of Line Code Violations (LCVs) encountered by a DS1 interface in the previous 8 day interval.')
wfDs1E1FarEndTotalSASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 29, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndTotalSASs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndTotalSASs.setDescription('The number of seconds, in the previous 8 day interval, containing one or more SEFs or AIS defects.')
wfDs1E1FarEndTotalAISSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 29, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndTotalAISSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndTotalAISSs.setDescription('The number of seconds, in the previous 8 day interval, containing one or more AIS defect.')
wfDs1E1FarEndTotalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 29, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndTotalFCs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndTotalFCs.setDescription('The number of Path Failure Count error events detected in the previous 8 day interval.')
wfDs1E1FarEndTotalValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 29, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2))).clone('valid')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndTotalValidFlag.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndTotalValidFlag.setDescription('Indicates whether this interval reported by the Mib Table is valid or invalid.')
wfDs1E1FarEndDayCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 30), )
if mibBuilder.loadTexts: wfDs1E1FarEndDayCurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayCurrentTable.setDescription('Current AT&T FDL stats table.')
wfDs1E1FarEndDayCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 30, 1), ).setIndexNames((0, "Wellfleet-DS1E1-MIB", "wfDs1E1FarEndDayCurrentPortLineNumber"))
if mibBuilder.loadTexts: wfDs1E1FarEndDayCurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayCurrentEntry.setDescription('An entry in the DS1E1 Current table')
wfDs1E1FarEndDayCurrentPortLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 30, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayCurrentPortLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayCurrentPortLineNumber.setDescription('The instance ID that identifies the port. The port line number with a zero channel number field as found in the port map table.')
wfDs1E1FarEndDayCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 30, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayCurrentESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayCurrentESs.setDescription('The number of Errored Seconds, encountered by a DS1 interface in the current day interval.')
wfDs1E1FarEndDayCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 30, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayCurrentSESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayCurrentSESs.setDescription("The number of Severely Errored Seconds encountered by a DS1 interface in the current day interval.'")
wfDs1E1FarEndDayCurrentSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 30, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayCurrentSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayCurrentSEFSs.setDescription('The number of Severely Errored Framing Seconds encountered by a DS1 interface in the current day interval.')
wfDs1E1FarEndDayCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 30, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayCurrentUASs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayCurrentUASs.setDescription('The number of Unavailable Seconds encountered by a DS1 interface in the current day interval.')
wfDs1E1FarEndDayCurrentCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 30, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayCurrentCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayCurrentCSSs.setDescription('The number of Controlled Slip Seconds encountered by a DS1 interface in the current day interval.')
wfDs1E1FarEndDayCurrentPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 30, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayCurrentPCVs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayCurrentPCVs.setDescription('The number of Path Coding Violations encountered by a DS1 interface in the current day interval.')
wfDs1E1FarEndDayCurrentLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 30, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayCurrentLESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayCurrentLESs.setDescription("The number of Line Errored Seconds encountered by a DS1 interface in the current day interval.'")
wfDs1E1FarEndDayCurrentBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 30, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayCurrentBESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayCurrentBESs.setDescription('The number of Bursty Errored Seconds (BESs) encountered by a DS1 interface in the current day interval.')
wfDs1E1FarEndDayCurrentDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 30, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayCurrentDMs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayCurrentDMs.setDescription("The number of Degraded Minutes (DMs) encountered by a DS1 interface in the current day interval.'")
wfDs1E1FarEndDayCurrentLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 30, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayCurrentLCVs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayCurrentLCVs.setDescription("The number of Line Code Violations (LCVs) encountered by a DS1 interface in the current day interval.'")
wfDs1E1FarEndDayCurrentSASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 30, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayCurrentSASs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayCurrentSASs.setDescription('The number of seconds, within the current day interval, containing one or more SEFs or AIS defects.')
wfDs1E1FarEndDayCurrentAISSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 30, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayCurrentAISSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayCurrentAISSs.setDescription('The number of seconds, within the current day interval, containing one or more AIS defect.')
wfDs1E1FarEndDayCurrentFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 30, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayCurrentFCs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayCurrentFCs.setDescription('The number of Path Failure Count error events detected in the current day interval.')
wfDs1E1FarEndDayCurrentTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 30, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayCurrentTimeElapsed.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayCurrentTimeElapsed.setDescription('The number of seconds that have elapsed since the beginning of the current error-measurement period.')
wfDs1E1FarEndDayCurrentValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 30, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayCurrentValidIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayCurrentValidIntervals.setDescription('The number of previous intervals for which valid data was collected. The value will be 8 unless the interface was brought on-line within the last 8 days, in which case the value will be the number of complete day intervals the since interface has been online.')
wfDs1E1FarEndDayCurrentValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 30, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2))).clone('valid')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayCurrentValidFlag.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayCurrentValidFlag.setDescription('Indicates whether this interval reported by the Mib Table is valid or invalid.')
wfDs1E1FarEndDayIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 31), )
if mibBuilder.loadTexts: wfDs1E1FarEndDayIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayIntervalTable.setDescription('AT&T Interval stats')
wfDs1E1FarEndDayIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 31, 1), ).setIndexNames((0, "Wellfleet-DS1E1-MIB", "wfDs1E1FarEndDayIntervalPortLineNumber"), (0, "Wellfleet-DS1E1-MIB", "wfDs1E1FarEndDayIntervalNumber"))
if mibBuilder.loadTexts: wfDs1E1FarEndDayIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayIntervalEntry.setDescription('An entry in the DS1E1 Interval table')
wfDs1E1FarEndDayIntervalPortLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 31, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayIntervalPortLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayIntervalPortLineNumber.setDescription('The instance ID that identifies the port. The port line number with a zero channel number field as found in the port map table.')
wfDs1E1FarEndDayIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 31, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayIntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayIntervalNumber.setDescription('A number between 1 and 8, where 1 is the most recently completed day interval and 8 is the least recently completed day interval (assuming that all 8 intervals are valid).')
wfDs1E1FarEndDayIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 31, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayIntervalESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayIntervalESs.setDescription('The number of Errored Seconds, encountered by a DS1 interface in the current day interval.')
wfDs1E1FarEndDayIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 31, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayIntervalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayIntervalSESs.setDescription('The number of Severely Errored Seconds encountered by a DS1 interface in one of the previous day intervals.')
wfDs1E1FarEndDayIntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 31, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayIntervalSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayIntervalSEFSs.setDescription('The number of Severely Errored Framing Seconds encountered by a DS1 interface in one of the previous day intervals.')
wfDs1E1FarEndDayIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 31, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayIntervalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayIntervalUASs.setDescription('The number of Unavailable Seconds encountered by a DS1 interface in one of the previous day intervals.')
wfDs1E1FarEndDayIntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 31, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayIntervalCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayIntervalCSSs.setDescription('The number of Controlled Slip Seconds encountered by a DS1 interface in one of the previous day intervals.')
wfDs1E1FarEndDayIntervalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 31, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayIntervalPCVs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayIntervalPCVs.setDescription('The number of Path Coding Violations encountered by a DS1 interface in one of the previous day intervals.')
wfDs1E1FarEndDayIntervalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 31, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayIntervalLESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayIntervalLESs.setDescription('The number of Line Errored Seconds encountered by a DS1 interface in one of the previous day intervals.')
wfDs1E1FarEndDayIntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 31, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayIntervalBESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayIntervalBESs.setDescription('The number of Bursty Errored Seconds (BESs) encountered by a DS1 interface in one of the previous day intervals.')
wfDs1E1FarEndDayIntervalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 31, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayIntervalDMs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayIntervalDMs.setDescription('The number of Degraded Minutes (DMs) encountered by a DS1 interface in one of the previous day intervals.')
wfDs1E1FarEndDayIntervalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 31, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayIntervalLCVs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayIntervalLCVs.setDescription('The number of Line Code Violations (LCVs) encountered by a DS1 interface in one of the previous day intervals.')
wfDs1E1FarEndDayIntervalSASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 31, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayIntervalSASs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayIntervalSASs.setDescription('The number of seconds, in one of the previous day intervals, containing one or more SEFs or AIS defects.')
wfDs1E1FarEndDayIntervalAISSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 31, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayIntervalAISSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayIntervalAISSs.setDescription('The number of seconds, in one of the previous day intervals, containing one or more AIS defect.')
wfDs1E1FarEndDayIntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 31, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayIntervalFCs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayIntervalFCs.setDescription('The number of Path Failure Count error events detected one of the previous day intervals.')
wfDs1E1FarEndDayIntervalValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 31, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2))).clone('valid')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayIntervalValidFlag.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayIntervalValidFlag.setDescription('Indicates whether this interval reported by the Mib Table is valid or invalid.')
wfDs1E1FarEndDayTotalTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 32), )
if mibBuilder.loadTexts: wfDs1E1FarEndDayTotalTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayTotalTable.setDescription('AT&T Total stats Table')
wfDs1E1FarEndDayTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 32, 1), ).setIndexNames((0, "Wellfleet-DS1E1-MIB", "wfDs1E1FarEndDayTotalPortLineNumber"))
if mibBuilder.loadTexts: wfDs1E1FarEndDayTotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayTotalEntry.setDescription('An entry in the DS1E1 Total table')
wfDs1E1FarEndDayTotalPortLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 32, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayTotalPortLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayTotalPortLineNumber.setDescription('The instance ID that identifies the port. The port line number with a zero channel number field as found in the port map table.')
wfDs1E1FarEndDayTotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 32, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayTotalESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayTotalESs.setDescription('The number of Errored Seconds, encountered by a DS1 interface in the previous 8 day interval.')
wfDs1E1FarEndDayTotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 32, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayTotalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayTotalSESs.setDescription('The number of Severely Errored Seconds encountered by a DS1 interface in the previous 8 day interval.')
wfDs1E1FarEndDayTotalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 32, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayTotalSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayTotalSEFSs.setDescription('The number of Severely Errored Framing Seconds encountered by a DS1 interface in the previous 8 day interval.')
wfDs1E1FarEndDayTotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 32, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayTotalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayTotalUASs.setDescription('The number of Unavailable Seconds encountered by a DS1 interface in the previous 8 day interval.')
wfDs1E1FarEndDayTotalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 32, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayTotalCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayTotalCSSs.setDescription('The number of Controlled Slip Seconds encountered by a DS1 interface in the previous 8 day interval.')
wfDs1E1FarEndDayTotalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 32, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayTotalPCVs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayTotalPCVs.setDescription('The number of Path Coding Violations encountered by a DS1 interface in the previous 8 day interval.')
wfDs1E1FarEndDayTotalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 32, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayTotalLESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayTotalLESs.setDescription('The number of Line Errored Seconds encountered by a DS1 interface in the previous 8 day interval.')
wfDs1E1FarEndDayTotalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 32, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayTotalBESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayTotalBESs.setDescription('The number of Bursty Errored Seconds (BESs) encountered by a DS1 interface in the previous 8 day interval.')
wfDs1E1FarEndDayTotalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 32, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayTotalDMs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayTotalDMs.setDescription('The number of Degraded Minutes (DMs) encountered by a DS1 interface in the previous 8 day interval.')
wfDs1E1FarEndDayTotalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 32, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayTotalLCVs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayTotalLCVs.setDescription('The number of Line Code Violations (LCVs) encountered by a DS1 interface in the previous 8 day interval.')
wfDs1E1FarEndDayTotalSASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 32, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayTotalSASs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayTotalSASs.setDescription('The number of seconds, in the previous 8 day interval, containing one or more SEFs or AIS defects.')
wfDs1E1FarEndDayTotalAISSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 32, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayTotalAISSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayTotalAISSs.setDescription('The number of seconds, in the previous 8 day interval, containing one or more AIS defect.')
wfDs1E1FarEndDayTotalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 32, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayTotalFCs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayTotalFCs.setDescription('The number of Path Failure Count error events detected in the previous 8 day interval.')
wfDs1E1FarEndDayTotalValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 32, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2))).clone('valid')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayTotalValidFlag.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayTotalValidFlag.setDescription('Indicates whether this interval reported by the Mib Table is valid or invalid.')
wfDs1E1ThrAlrtTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 33), )
if mibBuilder.loadTexts: wfDs1E1ThrAlrtTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ThrAlrtTable.setDescription('Current statistics Alarm Threshold Crossing table.')
wfDs1E1ThrAlrtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 33, 1), ).setIndexNames((0, "Wellfleet-DS1E1-MIB", "wfDs1E1ThrAlrtPortLineNumber"))
if mibBuilder.loadTexts: wfDs1E1ThrAlrtEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ThrAlrtEntry.setDescription('An entry in the DS1E1 Current table')
wfDs1E1ThrAlrtDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 33, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ThrAlrtDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ThrAlrtDelete.setDescription('Create/Delete parameter')
wfDs1E1ThrAlrtPortLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 33, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1ThrAlrtPortLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ThrAlrtPortLineNumber.setDescription('The instance ID that identifies the port.')
wfDs1E1ThrAlrtESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 33, 1, 3), Gauge32().clone(65)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ThrAlrtESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ThrAlrtESs.setDescription('The number of Errored Seconds which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1ThrAlrtSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 33, 1, 4), Gauge32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ThrAlrtSESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ThrAlrtSESs.setDescription('The number of Severely Errored Seconds which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1ThrAlrtSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 33, 1, 5), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ThrAlrtSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ThrAlrtSEFSs.setDescription('The number of Severely Errored Framing Seconds which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1ThrAlrtUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 33, 1, 6), Gauge32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ThrAlrtUASs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ThrAlrtUASs.setDescription('The number of Unavailable Seconds which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1ThrAlrtCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 33, 1, 7), Gauge32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ThrAlrtCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ThrAlrtCSSs.setDescription('The number of Controlled Slip Seconds which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1ThrAlrtPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 33, 1, 8), Gauge32().clone(13296)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ThrAlrtPCVs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ThrAlrtPCVs.setDescription('The number of Path Coding Violations which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1ThrAlrtLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 33, 1, 9), Gauge32().clone(65)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ThrAlrtLESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ThrAlrtLESs.setDescription('The number of Line Errored Seconds which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1ThrAlrtBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 33, 1, 10), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ThrAlrtBESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ThrAlrtBESs.setDescription('The number of Bursty Errored Seconds which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1ThrAlrtDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 33, 1, 11), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ThrAlrtDMs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ThrAlrtDMs.setDescription('The number of Degraded Minutes which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1ThrAlrtLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 33, 1, 12), Gauge32().clone(13340)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ThrAlrtLCVs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ThrAlrtLCVs.setDescription('The number of Line Code Violations which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1ThrAlrtSASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 33, 1, 13), Gauge32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ThrAlrtSASs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ThrAlrtSASs.setDescription('The number of SEF/AIS Seconds which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1ThrAlrtAISSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 33, 1, 14), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ThrAlrtAISSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ThrAlrtAISSs.setDescription('The number of AIS defect Seconds which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1ThrAlrtFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 33, 1, 15), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1ThrAlrtFCs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1ThrAlrtFCs.setDescription('The number of Path Failure Counts which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1DayThrAlrtTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 34), )
if mibBuilder.loadTexts: wfDs1E1DayThrAlrtTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayThrAlrtTable.setDescription('Current Day statistics Alarm Threshold Crossing table.')
wfDs1E1DayThrAlrtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 34, 1), ).setIndexNames((0, "Wellfleet-DS1E1-MIB", "wfDs1E1DayThrAlrtPortLineNumber"))
if mibBuilder.loadTexts: wfDs1E1DayThrAlrtEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayThrAlrtEntry.setDescription('An entry in the DS1E1 ThrAlrt table')
wfDs1E1DayThrAlrtDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 34, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1DayThrAlrtDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayThrAlrtDelete.setDescription('Create/Delete parameter')
wfDs1E1DayThrAlrtPortLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 34, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1DayThrAlrtPortLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayThrAlrtPortLineNumber.setDescription('The instance ID that identifies the port.')
wfDs1E1DayThrAlrtESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 34, 1, 3), Gauge32().clone(648)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1DayThrAlrtESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayThrAlrtESs.setDescription('The number of Errored Seconds which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1DayThrAlrtSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 34, 1, 4), Gauge32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1DayThrAlrtSESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayThrAlrtSESs.setDescription('The number of Severely Errored Seconds which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1DayThrAlrtSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 34, 1, 5), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1DayThrAlrtSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayThrAlrtSEFSs.setDescription('The number of Severely Errored Framing Seconds which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1DayThrAlrtUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 34, 1, 6), Gauge32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1DayThrAlrtUASs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayThrAlrtUASs.setDescription('The number of Unavailable Seconds which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1DayThrAlrtCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 34, 1, 7), Gauge32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1DayThrAlrtCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayThrAlrtCSSs.setDescription('The number of Controlled Slip Seconds which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1DayThrAlrtPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 34, 1, 8), Gauge32().clone(132960)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1DayThrAlrtPCVs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayThrAlrtPCVs.setDescription('The number of Path Coding Violations which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1DayThrAlrtLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 34, 1, 9), Gauge32().clone(648)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1DayThrAlrtLESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayThrAlrtLESs.setDescription('The number of Line Errored Seconds which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1DayThrAlrtBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 34, 1, 10), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1DayThrAlrtBESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayThrAlrtBESs.setDescription('The number of Bursty Errored Seconds which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1DayThrAlrtDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 34, 1, 11), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1DayThrAlrtDMs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayThrAlrtDMs.setDescription('The number of Degraded Minutes which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1DayThrAlrtLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 34, 1, 12), Gauge32().clone(133400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1DayThrAlrtLCVs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayThrAlrtLCVs.setDescription('The number of Line Code Violations which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1DayThrAlrtSASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 34, 1, 13), Gauge32().clone(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1DayThrAlrtSASs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayThrAlrtSASs.setDescription('The number of SEF/AIS Seconds which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1DayThrAlrtAISSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 34, 1, 14), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1DayThrAlrtAISSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayThrAlrtAISSs.setDescription('The number of AIS defect Seconds which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1DayThrAlrtFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 34, 1, 15), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1DayThrAlrtFCs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1DayThrAlrtFCs.setDescription('The number of Path Failure Counts which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1FarEndThrAlrtTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 35), )
if mibBuilder.loadTexts: wfDs1E1FarEndThrAlrtTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndThrAlrtTable.setDescription('Current Far End statistics Alarm Threshold Crossing table.')
wfDs1E1FarEndThrAlrtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 35, 1), ).setIndexNames((0, "Wellfleet-DS1E1-MIB", "wfDs1E1FarEndThrAlrtPortLineNumber"))
if mibBuilder.loadTexts: wfDs1E1FarEndThrAlrtEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndThrAlrtEntry.setDescription('An entry in the DS1E1 ThrAlrt table')
wfDs1E1FarEndThrAlrtDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 35, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1FarEndThrAlrtDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndThrAlrtDelete.setDescription('Create/Delete parameter')
wfDs1E1FarEndThrAlrtPortLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 35, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndThrAlrtPortLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndThrAlrtPortLineNumber.setDescription('The instance ID that identifies the port.')
wfDs1E1FarEndThrAlrtESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 35, 1, 3), Gauge32().clone(65)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1FarEndThrAlrtESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndThrAlrtESs.setDescription('The number of Errored Seconds which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1FarEndThrAlrtSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 35, 1, 4), Gauge32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1FarEndThrAlrtSESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndThrAlrtSESs.setDescription('The number of Severely Errored Seconds which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1FarEndThrAlrtSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 35, 1, 5), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1FarEndThrAlrtSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndThrAlrtSEFSs.setDescription('The number of Severely Errored Framing Seconds which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1FarEndThrAlrtUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 35, 1, 6), Gauge32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1FarEndThrAlrtUASs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndThrAlrtUASs.setDescription('The number of Unavailable Seconds which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1FarEndThrAlrtCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 35, 1, 7), Gauge32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1FarEndThrAlrtCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndThrAlrtCSSs.setDescription('The number of Controlled Slip Seconds which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1FarEndThrAlrtPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 35, 1, 8), Gauge32().clone(13296)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1FarEndThrAlrtPCVs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndThrAlrtPCVs.setDescription('The number of Path Coding Violations which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1FarEndThrAlrtLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 35, 1, 9), Gauge32().clone(65)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1FarEndThrAlrtLESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndThrAlrtLESs.setDescription('The number of Line Errored Seconds which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1FarEndThrAlrtBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 35, 1, 10), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1FarEndThrAlrtBESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndThrAlrtBESs.setDescription('The number of Bursty Errored Seconds which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1FarEndThrAlrtDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 35, 1, 11), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1FarEndThrAlrtDMs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndThrAlrtDMs.setDescription('The number of Degraded Minutes which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1FarEndThrAlrtLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 35, 1, 12), Gauge32().clone(13340)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1FarEndThrAlrtLCVs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndThrAlrtLCVs.setDescription('The number of Line Code Violations which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1FarEndThrAlrtSASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 35, 1, 13), Gauge32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1FarEndThrAlrtSASs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndThrAlrtSASs.setDescription('The number of SEF/AIS Seconds which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1FarEndThrAlrtAISSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 35, 1, 14), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1FarEndThrAlrtAISSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndThrAlrtAISSs.setDescription('The number of AIS defect Seconds which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1FarEndThrAlrtFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 35, 1, 15), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1FarEndThrAlrtFCs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndThrAlrtFCs.setDescription('The number of Path Failure Counts which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1FarEndDayThrAlrtTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 36), )
if mibBuilder.loadTexts: wfDs1E1FarEndDayThrAlrtTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayThrAlrtTable.setDescription('Current Far End Day statistics Alarm Threshold Crossing table.')
wfDs1E1FarEndDayThrAlrtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 36, 1), ).setIndexNames((0, "Wellfleet-DS1E1-MIB", "wfDs1E1FarEndDayThrAlrtPortLineNumber"))
if mibBuilder.loadTexts: wfDs1E1FarEndDayThrAlrtEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayThrAlrtEntry.setDescription('An entry in the DS1E1 ThrAlrt table')
wfDs1E1FarEndDayThrAlrtDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 36, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1FarEndDayThrAlrtDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayThrAlrtDelete.setDescription('Create/Delete parameter')
wfDs1E1FarEndDayThrAlrtPortLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 36, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1FarEndDayThrAlrtPortLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayThrAlrtPortLineNumber.setDescription('The instance ID that identifies the port.')
wfDs1E1FarEndDayThrAlrtESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 36, 1, 3), Gauge32().clone(648)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1FarEndDayThrAlrtESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayThrAlrtESs.setDescription('The number of Errored Seconds which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1FarEndDayThrAlrtSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 36, 1, 4), Gauge32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1FarEndDayThrAlrtSESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayThrAlrtSESs.setDescription('The number of Severely Errored Seconds which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1FarEndDayThrAlrtSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 36, 1, 5), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1FarEndDayThrAlrtSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayThrAlrtSEFSs.setDescription('The number of Severely Errored Seconds which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1FarEndDayThrAlrtUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 36, 1, 6), Gauge32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1FarEndDayThrAlrtUASs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayThrAlrtUASs.setDescription('The number of Unavailable Seconds which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1FarEndDayThrAlrtCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 36, 1, 7), Gauge32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1FarEndDayThrAlrtCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayThrAlrtCSSs.setDescription('The number of Controlled Slip Seconds which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1FarEndDayThrAlrtPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 36, 1, 8), Gauge32().clone(132960)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1FarEndDayThrAlrtPCVs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayThrAlrtPCVs.setDescription('The number of Path Coding Violations which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1FarEndDayThrAlrtLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 36, 1, 9), Gauge32().clone(648)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1FarEndDayThrAlrtLESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayThrAlrtLESs.setDescription('The number of Line Errored Seconds which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1FarEndDayThrAlrtBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 36, 1, 10), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1FarEndDayThrAlrtBESs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayThrAlrtBESs.setDescription('The number of Bursty Errored Seconds which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1FarEndDayThrAlrtDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 36, 1, 11), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1FarEndDayThrAlrtDMs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayThrAlrtDMs.setDescription('The number of Degraded Minutes which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1FarEndDayThrAlrtLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 36, 1, 12), Gauge32().clone(133400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1FarEndDayThrAlrtLCVs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayThrAlrtLCVs.setDescription('The number of Line Code Violations which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1FarEndDayThrAlrtSASs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 36, 1, 13), Gauge32().clone(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1FarEndDayThrAlrtSASs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayThrAlrtSASs.setDescription('The number of SEF/AIS Seconds which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1FarEndDayThrAlrtAISSs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 36, 1, 14), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1FarEndDayThrAlrtAISSs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayThrAlrtAISSs.setDescription('The number of AIS defect Seconds which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1FarEndDayThrAlrtFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 36, 1, 15), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDs1E1FarEndDayThrAlrtFCs.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1FarEndDayThrAlrtFCs.setDescription('The number of Path Failure Counts which must be received prior to the generation of a Threshold Crossing Alert.')
wfDs1E1LineQueStatTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 20), )
if mibBuilder.loadTexts: wfDs1E1LineQueStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineQueStatTable.setDescription('This file describes the MIBS for getting Line Queue Stats')
wfDs1E1LineQueStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 20, 1), ).setIndexNames((0, "Wellfleet-DS1E1-MIB", "wfDs1E1LineQueStatPortLineNumber"), (0, "Wellfleet-DS1E1-MIB", "wfDs1E1LineQueStatLineIndex"), (0, "Wellfleet-DS1E1-MIB", "wfDs1E1LineQueStatQueueIndex"))
if mibBuilder.loadTexts: wfDs1E1LineQueStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineQueStatEntry.setDescription('An entry in the Queue Base table')
wfDs1E1LineQueStatPortLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1LineQueStatPortLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineQueStatPortLineNumber.setDescription('Instance ID PortLineNumber')
wfDs1E1LineQueStatLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 20, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1LineQueStatLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineQueStatLineIndex.setDescription('Instance Line Number')
wfDs1E1LineQueStatQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 20, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1LineQueStatQueueIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineQueStatQueueIndex.setDescription('Queue Index, matches that of wfQosServPkgQueCfgQueueIndex or one for best effort.')
wfDs1E1LineQueStatTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 20, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1LineQueStatTxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineQueStatTxOctets.setDescription('Number of Transmit Octets received by the Queue without error')
wfDs1E1LineQueStatTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 20, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1LineQueStatTxPackets.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineQueStatTxPackets.setDescription('Number of Transmit Packets received by the Queue without error')
wfDs1E1LineQueStatTxDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 9, 20, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDs1E1LineQueStatTxDrops.setStatus('mandatory')
if mibBuilder.loadTexts: wfDs1E1LineQueStatTxDrops.setDescription('Number of Transmit Packets Dropped by the Queue')
mibBuilder.exportSymbols("Wellfleet-DS1E1-MIB", wfDs1E1FarEndIntervalSASs=wfDs1E1FarEndIntervalSASs, wfDs1E1FarEndTotalCSSs=wfDs1E1FarEndTotalCSSs, wfDs1E1FarEndIntervalCSSs=wfDs1E1FarEndIntervalCSSs, wfDs1E1ActionSendLoopDownFractionalCode=wfDs1E1ActionSendLoopDownFractionalCode, wfDs1E1FarEndDayCurrentFCs=wfDs1E1FarEndDayCurrentFCs, wfDs1E1FracNumber=wfDs1E1FracNumber, wfDs1E1AnsiESCounts=wfDs1E1AnsiESCounts, wfDs1E1ConfigEntry=wfDs1E1ConfigEntry, wfDs1E1DayTotalESs=wfDs1E1DayTotalESs, wfDs1E1CurrentTimeElapsed=wfDs1E1CurrentTimeElapsed, wfDs1E1DayCurrentEntry=wfDs1E1DayCurrentEntry, wfDs1E1FarEndTotalBESs=wfDs1E1FarEndTotalBESs, wfDs1E1DayIntervalSEFSs=wfDs1E1DayIntervalSEFSs, wfDs1E1IntervalAISSs=wfDs1E1IntervalAISSs, wfLogicalLineNRZIType=wfLogicalLineNRZIType, wfDs1E1PortSetupAlarmThreshold=wfDs1E1PortSetupAlarmThreshold, wfDs1E1FarEndDayCurrentAISSs=wfDs1E1FarEndDayCurrentAISSs, wfDs1E1PortMapSlot=wfDs1E1PortMapSlot, wfDs1E1IntervalSESs=wfDs1E1IntervalSESs, wfDs1E1DayIntervalPortLineNumber=wfDs1E1DayIntervalPortLineNumber, wfDs1E1IntervalCSSs=wfDs1E1IntervalCSSs, wfDs1E1DayThrAlrtSESs=wfDs1E1DayThrAlrtSESs, wfDs1E1FarEndDayIntervalBESs=wfDs1E1FarEndDayIntervalBESs, wfDs1E1ModuleLoop2ClockOperational=wfDs1E1ModuleLoop2ClockOperational, wfDs1E1FracEntry=wfDs1E1FracEntry, wfDs1E1FarEndThrAlrtDelete=wfDs1E1FarEndThrAlrtDelete, wfDs1E1ThrAlrtPCVs=wfDs1E1ThrAlrtPCVs, wfDs1E1FarEndDayIntervalPCVs=wfDs1E1FarEndDayIntervalPCVs, wfDs1E1IntervalFramerStatsOofCounts=wfDs1E1IntervalFramerStatsOofCounts, wfDs1E1DayTotalLESs=wfDs1E1DayTotalLESs, wfDs1E1ThrAlrtESs=wfDs1E1ThrAlrtESs, wfDs1E1LineCfgIFTF=wfDs1E1LineCfgIFTF, wfDs1E1ClockSecondaryClock=wfDs1E1ClockSecondaryClock, wfLogicalLineRxErrors=wfLogicalLineRxErrors, wfDs1E1ConfigFdl=wfDs1E1ConfigFdl, wfDs1E1IntervalFramerStatsBpvCounts=wfDs1E1IntervalFramerStatsBpvCounts, wfDs1E1ThrAlrtSESs=wfDs1E1ThrAlrtSESs, wfDs1E1ModuleTxBufferUseCredits=wfDs1E1ModuleTxBufferUseCredits, wfDs1E1TotalSESs=wfDs1E1TotalSESs, wfDs1E1CurrentFramerStatsBpvCounts=wfDs1E1CurrentFramerStatsBpvCounts, wfDs1E1FarEndThrAlrtESs=wfDs1E1FarEndThrAlrtESs, wfDs1E1IntervalFramerStatsFeCounts=wfDs1E1IntervalFramerStatsFeCounts, wfDs1E1TotalCSSs=wfDs1E1TotalCSSs, wfLogicalLineRateAdaption=wfLogicalLineRateAdaption, wfDs1E1FarEndTotalDMs=wfDs1E1FarEndTotalDMs, wfDs1E1FarEndTotalEntry=wfDs1E1FarEndTotalEntry, wfDs1E1PortMapLineNumber=wfDs1E1PortMapLineNumber, wfDs1E1IntervalLCVs=wfDs1E1IntervalLCVs, wfDs1E1ThrAlrtUASs=wfDs1E1ThrAlrtUASs, wfDs1E1IntervalEntry=wfDs1E1IntervalEntry, wfDs1E1ThrAlrtDelete=wfDs1E1ThrAlrtDelete, wfLogicalLineDelete=wfLogicalLineDelete, wfDs1E1ModuleLoop1ClockOperational=wfDs1E1ModuleLoop1ClockOperational, wfDs1E1ConfigLoopbackConfig=wfDs1E1ConfigLoopbackConfig, wfLogicalLineRole=wfLogicalLineRole, wfDs1E1DayTotalSEFSs=wfDs1E1DayTotalSEFSs, wfDs1E1FarEndDayTotalAISSs=wfDs1E1FarEndDayTotalAISSs, wfDs1E1ThrAlrtAISSs=wfDs1E1ThrAlrtAISSs, wfDs1E1ActionBertErrorInsert=wfDs1E1ActionBertErrorInsert, wfDs1E1PortSendPrmCrAddressBit=wfDs1E1PortSendPrmCrAddressBit, wfDs1E1LineCfgRateAdaption=wfDs1E1LineCfgRateAdaption, wfDs1E1CurrentLESs=wfDs1E1CurrentLESs, wfDs1E1AnsiFECounts=wfDs1E1AnsiFECounts, wfDs1E1FracTable=wfDs1E1FracTable, wfDs1E1LineQueStatTable=wfDs1E1LineQueStatTable, wfDs1E1FarEndDayThrAlrtAISSs=wfDs1E1FarEndDayThrAlrtAISSs, wfDs1E1DayCurrentCSSs=wfDs1E1DayCurrentCSSs, wfDs1E1FarEndThrAlrtPortLineNumber=wfDs1E1FarEndThrAlrtPortLineNumber, wfDs1E1DayCurrentSESs=wfDs1E1DayCurrentSESs, wfDs1E1FarEndThrAlrtSEFSs=wfDs1E1FarEndThrAlrtSEFSs, wfLogicalLineMtu=wfLogicalLineMtu, wfDs1E1AnsiPortLineNumber=wfDs1E1AnsiPortLineNumber, wfDs1E1FarEndDayIntervalESs=wfDs1E1FarEndDayIntervalESs, wfDs1E1LineStatTxOctets=wfDs1E1LineStatTxOctets, wfDs1E1IntervalFramerStatsAlarmIndicationFailures=wfDs1E1IntervalFramerStatsAlarmIndicationFailures, wfLogicalLineTxQueueEmpties=wfLogicalLineTxQueueEmpties, wfDs1E1LineQueStatTxPackets=wfDs1E1LineQueStatTxPackets, wfDs1E1FarEndDayIntervalDMs=wfDs1E1FarEndDayIntervalDMs, wfDs1E1FarEndTotalAISSs=wfDs1E1FarEndTotalAISSs, wfDs1E1FarEndCurrentValidIntervals=wfDs1E1FarEndCurrentValidIntervals, wfDs1E1PortDelete=wfDs1E1PortDelete, wfDs1E1DayIntervalDMs=wfDs1E1DayIntervalDMs, wfDs1E1FarEndThrAlrtLCVs=wfDs1E1FarEndThrAlrtLCVs, wfDs1E1FarEndDayTotalLESs=wfDs1E1FarEndDayTotalLESs, wfLogicalLineHdlcService=wfLogicalLineHdlcService, wfDs1E1ModuleCurrentClock=wfDs1E1ModuleCurrentClock, wfDs1E1TotalFramerStatsLossSignalFailures=wfDs1E1TotalFramerStatsLossSignalFailures, wfDs1E1FarEndThrAlrtSASs=wfDs1E1FarEndThrAlrtSASs, wfDs1E1LineCfgDelete=wfDs1E1LineCfgDelete, wfDs1E1FarEndIntervalUASs=wfDs1E1FarEndIntervalUASs, wfDs1E1FarEndCurrentEntry=wfDs1E1FarEndCurrentEntry, wfDs1E1IntervalSEFSs=wfDs1E1IntervalSEFSs, wfDs1E1FarEndIntervalDMs=wfDs1E1FarEndIntervalDMs, wfDs1E1LineCfgMtu=wfDs1E1LineCfgMtu, wfDs1E1IntervalFramerStatsTable=wfDs1E1IntervalFramerStatsTable, wfDs1E1FarEndDayIntervalSEFSs=wfDs1E1FarEndDayIntervalSEFSs, wfDs1E1FarEndDayIntervalFCs=wfDs1E1FarEndDayIntervalFCs, wfDs1E1PortBertMode=wfDs1E1PortBertMode, wfDs1E1CurrentUASs=wfDs1E1CurrentUASs, wfLogicalLineRxLongFrames=wfLogicalLineRxLongFrames, wfDs1E1DayThrAlrtDelete=wfDs1E1DayThrAlrtDelete, wfDs1E1CurrentFramerStatsTable=wfDs1E1CurrentFramerStatsTable, wfDs1E1FarEndThrAlrtCSSs=wfDs1E1FarEndThrAlrtCSSs, wfDs1E1PortRelayCtrl=wfDs1E1PortRelayCtrl, wfLogicalLineBoflNum=wfLogicalLineBoflNum, wfDs1E1AnsiCRCCounts=wfDs1E1AnsiCRCCounts, wfDs1E1DayIntervalLCVs=wfDs1E1DayIntervalLCVs, wfDs1E1ThrAlrtLCVs=wfDs1E1ThrAlrtLCVs, wfDs1E1CurrentFramerStatsFeCounts=wfDs1E1CurrentFramerStatsFeCounts, wfLogicalLineEntry=wfLogicalLineEntry, wfDs1E1DayTotalValidFlag=wfDs1E1DayTotalValidFlag, wfDs1E1TotalFCs=wfDs1E1TotalFCs, wfDs1E1FarEndDayCurrentUASs=wfDs1E1FarEndDayCurrentUASs, wfDs1E1FarEndIntervalPCVs=wfDs1E1FarEndIntervalPCVs, wfDs1E1ModuleRxBufferUseCredits=wfDs1E1ModuleRxBufferUseCredits, wfDs1E1LineStatEntry=wfDs1E1LineStatEntry, wfDs1E1FarEndThrAlrtSESs=wfDs1E1FarEndThrAlrtSESs, wfDs1E1IntervalFramerStatsIntervalNumber=wfDs1E1IntervalFramerStatsIntervalNumber, wfDs1E1FarEndDayTotalSASs=wfDs1E1FarEndDayTotalSASs, wfDs1E1DayIntervalSESs=wfDs1E1DayIntervalSESs, wfLogicalLineMadr=wfLogicalLineMadr, wfDs1E1ConfigTable=wfDs1E1ConfigTable, wfDs1E1ThrAlrtSEFSs=wfDs1E1ThrAlrtSEFSs, wfDs1E1ClockPortLineNumber=wfDs1E1ClockPortLineNumber, wfDs1E1FarEndThrAlrtDMs=wfDs1E1FarEndThrAlrtDMs, wfLogicalLineRemoteLpbkDetection=wfLogicalLineRemoteLpbkDetection, wfDs1E1FarEndDayThrAlrtFCs=wfDs1E1FarEndDayThrAlrtFCs, wfDs1E1DayThrAlrtESs=wfDs1E1DayThrAlrtESs, wfDs1E1LineCfgTable=wfDs1E1LineCfgTable, wfDs1E1PortClearAlarmThreshold=wfDs1E1PortClearAlarmThreshold, wfLogicalLineBoflTmo=wfLogicalLineBoflTmo, wfDs1E1ActionSendLoopCode=wfDs1E1ActionSendLoopCode, wfDs1E1FarEndDayIntervalLESs=wfDs1E1FarEndDayIntervalLESs, wfDs1E1CurrentFramerStatsRemoteAlarmFailures=wfDs1E1CurrentFramerStatsRemoteAlarmFailures, wfDs1E1DayTotalBESs=wfDs1E1DayTotalBESs, wfLogicalLineState=wfLogicalLineState, wfDs1E1DayCurrentPortLineNumber=wfDs1E1DayCurrentPortLineNumber, wfLogicalLineRemoteHdlcAddress=wfLogicalLineRemoteHdlcAddress, wfDs1E1FarEndDayThrAlrtBESs=wfDs1E1FarEndDayThrAlrtBESs, wfDs1E1LineStatTable=wfDs1E1LineStatTable, wfDs1E1FarEndCurrentPCVs=wfDs1E1FarEndCurrentPCVs, wfDs1E1CurrentDMs=wfDs1E1CurrentDMs, wfDs1E1DayCurrentAISSs=wfDs1E1DayCurrentAISSs, wfDs1E1TotalFramerStatsBpvCounts=wfDs1E1TotalFramerStatsBpvCounts, wfLogicalLineLastState=wfLogicalLineLastState, wfLogicalLineRxDescOverflows=wfLogicalLineRxDescOverflows, wfDs1E1FarEndDayThrAlrtSEFSs=wfDs1E1FarEndDayThrAlrtSEFSs, wfDs1E1FarEndDayIntervalAISSs=wfDs1E1FarEndDayIntervalAISSs, wfDs1E1TotalFramerStatsValidIntervals=wfDs1E1TotalFramerStatsValidIntervals, wfDs1E1CurrentFramerStatsOofCounts=wfDs1E1CurrentFramerStatsOofCounts, wfDs1E1AnsiUASCounts=wfDs1E1AnsiUASCounts, wfDs1E1DayIntervalLESs=wfDs1E1DayIntervalLESs, wfDs1E1DayCurrentFCs=wfDs1E1DayCurrentFCs, wfLogicalLineRxOverflows=wfLogicalLineRxOverflows, wfDs1E1TotalLCVs=wfDs1E1TotalLCVs, wfDs1E1ModuleExtClockOperational=wfDs1E1ModuleExtClockOperational, wfDs1E1FarEndDayThrAlrtSASs=wfDs1E1FarEndDayThrAlrtSASs, wfDs1E1ThrAlrtDMs=wfDs1E1ThrAlrtDMs, wfDs1E1DayIntervalFCs=wfDs1E1DayIntervalFCs, wfDs1E1LineStatRxCRCErrors=wfDs1E1LineStatRxCRCErrors, wfDs1E1CurrentCSSs=wfDs1E1CurrentCSSs, wfDs1E1FarEndCurrentLCVs=wfDs1E1FarEndCurrentLCVs, wfDs1E1ActionClearFarEndCurrentStats=wfDs1E1ActionClearFarEndCurrentStats, wfDs1E1DayCurrentSEFSs=wfDs1E1DayCurrentSEFSs, wfDs1E1FarEndCurrentCSSs=wfDs1E1FarEndCurrentCSSs, wfDs1E1ConfigSendCode=wfDs1E1ConfigSendCode, wfDs1E1FarEndThrAlrtUASs=wfDs1E1FarEndThrAlrtUASs, wfDs1E1ClockCurrentClock=wfDs1E1ClockCurrentClock, wfDs1E1FarEndTotalFCs=wfDs1E1FarEndTotalFCs, wfDs1E1FarEndTotalESs=wfDs1E1FarEndTotalESs, wfDs1E1TotalSASs=wfDs1E1TotalSASs, wfDs1E1FarEndDayTotalDMs=wfDs1E1FarEndDayTotalDMs, wfDs1E1FarEndDayThrAlrtDelete=wfDs1E1FarEndDayThrAlrtDelete, wfDs1E1TotalFramerStatsTable=wfDs1E1TotalFramerStatsTable, wfDs1E1FarEndIntervalSESs=wfDs1E1FarEndIntervalSESs, wfDs1E1DayTotalTable=wfDs1E1DayTotalTable, wfDs1E1FarEndIntervalFCs=wfDs1E1FarEndIntervalFCs, wfDs1E1DayIntervalValidFlag=wfDs1E1DayIntervalValidFlag, wfDs1E1LineStatRxOverflows=wfDs1E1LineStatRxOverflows, wfDs1E1FarEndTotalSESs=wfDs1E1FarEndTotalSESs, wfDs1E1TotalFramerStatsOofCounts=wfDs1E1TotalFramerStatsOofCounts, wfDs1E1TotalBESs=wfDs1E1TotalBESs, wfDs1E1IntervalFramerStatsMediaType=wfDs1E1IntervalFramerStatsMediaType, wfDs1E1AnsiPRMSESCounts=wfDs1E1AnsiPRMSESCounts, wfDs1E1CurrentFramerStatsEntry=wfDs1E1CurrentFramerStatsEntry, wfDs1E1FarEndCurrentDMs=wfDs1E1FarEndCurrentDMs, wfDs1E1FarEndDayIntervalTable=wfDs1E1FarEndDayIntervalTable, wfDs1E1FarEndIntervalESs=wfDs1E1FarEndIntervalESs, wfDs1E1AnsiPRMR0Counts=wfDs1E1AnsiPRMR0Counts, wfLogicalLineBofl=wfLogicalLineBofl, wfDs1E1LineCfgTimeSlotAssign=wfDs1E1LineCfgTimeSlotAssign, wfLogicalLineTable=wfLogicalLineTable, wfDs1E1CurrentFramerStatsFebeCounts=wfDs1E1CurrentFramerStatsFebeCounts, wfLogicalLineBoflLen=wfLogicalLineBoflLen, wfDs1E1DayThrAlrtSASs=wfDs1E1DayThrAlrtSASs, wfDs1E1CurrentSEFSs=wfDs1E1CurrentSEFSs, wfLogicalLinePortLineNumber=wfLogicalLinePortLineNumber, wfDs1E1FarEndThrAlrtAISSs=wfDs1E1FarEndThrAlrtAISSs, wfDs1E1AnsiOOFCounts=wfDs1E1AnsiOOFCounts, wfLogicalLineRxAbortFrames=wfLogicalLineRxAbortFrames, wfDs1E1FarEndTotalSASs=wfDs1E1FarEndTotalSASs, wfDs1E1FarEndDayCurrentTimeElapsed=wfDs1E1FarEndDayCurrentTimeElapsed, wfDs1E1DayTotalCSSs=wfDs1E1DayTotalCSSs, wfDs1E1LineQueStatPortLineNumber=wfDs1E1LineQueStatPortLineNumber, wfDs1E1ActionPortLineNumber=wfDs1E1ActionPortLineNumber, wfDs1E1IntervalFramerStatsRemoteAlarmFailures=wfDs1E1IntervalFramerStatsRemoteAlarmFailures, wfDs1E1IntervalBESs=wfDs1E1IntervalBESs, wfDs1E1BertStatsEntry=wfDs1E1BertStatsEntry, wfDs1E1LineStatRxFrames=wfDs1E1LineStatRxFrames, wfDs1E1CurrentESs=wfDs1E1CurrentESs, wfLogicalLineRxReplenMisses=wfLogicalLineRxReplenMisses, wfDs1E1FarEndDayThrAlrtUASs=wfDs1E1FarEndDayThrAlrtUASs, wfDs1E1LineStatRxShortFrames=wfDs1E1LineStatRxShortFrames, wfDs1E1CurrentPortLineNumber=wfDs1E1CurrentPortLineNumber, wfDs1E1DayCurrentUASs=wfDs1E1DayCurrentUASs, wfDs1E1FarEndCurrentESs=wfDs1E1FarEndCurrentESs, wfDs1E1DayIntervalSASs=wfDs1E1DayIntervalSASs, wfDs1E1DayThrAlrtLESs=wfDs1E1DayThrAlrtLESs, wfDs1E1DayThrAlrtFCs=wfDs1E1DayThrAlrtFCs, wfDs1E1LineQueStatTxDrops=wfDs1E1LineQueStatTxDrops, wfDs1E1IntervalFramerStatsCrc4Counts=wfDs1E1IntervalFramerStatsCrc4Counts, wfDs1E1PortDisable=wfDs1E1PortDisable, wfDs1E1FarEndCurrentSASs=wfDs1E1FarEndCurrentSASs, wfDs1E1TotalAISSs=wfDs1E1TotalAISSs, wfDs1E1TotalFramerStatsCrc4Counts=wfDs1E1TotalFramerStatsCrc4Counts, wfDs1E1PortFdlLoopInterframeFill=wfDs1E1PortFdlLoopInterframeFill, wfDs1E1ClockPrimaryClock=wfDs1E1ClockPrimaryClock, wfDs1E1LineCfgAcceptFracLoopCode=wfDs1E1LineCfgAcceptFracLoopCode, wfDs1E1FarEndDayThrAlrtPortLineNumber=wfDs1E1FarEndDayThrAlrtPortLineNumber, wfDs1E1FarEndDayCurrentEntry=wfDs1E1FarEndDayCurrentEntry, wfDs1E1ConfigPortLineNumber=wfDs1E1ConfigPortLineNumber, wfLogicalLineRxLossSyncs=wfLogicalLineRxLossSyncs, wfDs1E1DayTotalPortLineNumber=wfDs1E1DayTotalPortLineNumber, wfDs1E1ConfigValidIntervals=wfDs1E1ConfigValidIntervals, wfLogicalLineRxNonOctetBits=wfLogicalLineRxNonOctetBits, wfDs1E1ModuleSlot=wfDs1E1ModuleSlot, wfDs1E1IntervalPortLineNumber=wfDs1E1IntervalPortLineNumber, wfDs1E1ConfigLineCoding=wfDs1E1ConfigLineCoding, wfDs1E1FarEndCurrentTimeElapsed=wfDs1E1FarEndCurrentTimeElapsed, wfDs1E1FarEndThrAlrtLESs=wfDs1E1FarEndThrAlrtLESs, wfDs1E1TotalUASs=wfDs1E1TotalUASs, wfDs1E1IntervalFramerStatsFebeCounts=wfDs1E1IntervalFramerStatsFebeCounts, wfLogicalLineIFTF=wfLogicalLineIFTF, wfDs1E1FarEndTotalValidFlag=wfDs1E1FarEndTotalValidFlag, wfLogicalLineLastChange=wfLogicalLineLastChange, wfDs1E1BertStatsTable=wfDs1E1BertStatsTable, wfDs1E1ActionClearIntervalStats=wfDs1E1ActionClearIntervalStats, wfDs1E1IntervalESs=wfDs1E1IntervalESs, wfDs1E1DayIntervalNumber=wfDs1E1DayIntervalNumber, wfDs1E1LineCfgBertTestPattern=wfDs1E1LineCfgBertTestPattern, wfDs1E1FarEndIntervalAISSs=wfDs1E1FarEndIntervalAISSs, wfDs1E1ThrAlrtLESs=wfDs1E1ThrAlrtLESs, wfDs1E1FarEndIntervalNumber=wfDs1E1FarEndIntervalNumber, wfDs1E1PortMapDelete=wfDs1E1PortMapDelete)
mibBuilder.exportSymbols("Wellfleet-DS1E1-MIB", wfDs1E1ActionTable=wfDs1E1ActionTable, wfDs1E1IntervalSASs=wfDs1E1IntervalSASs, wfDs1E1FarEndDayCurrentValidIntervals=wfDs1E1FarEndDayCurrentValidIntervals, wfDs1E1PortTable=wfDs1E1PortTable, wfDs1E1PortLineApplication=wfDs1E1PortLineApplication, wfDs1E1FarEndThrAlrtEntry=wfDs1E1FarEndThrAlrtEntry, wfDs1E1ConfigDelete=wfDs1E1ConfigDelete, wfLogicalLineDS0AStatus=wfLogicalLineDS0AStatus, wfDs1E1ModulePrimaryClock=wfDs1E1ModulePrimaryClock, wfLogicalLineTurboBofl=wfLogicalLineTurboBofl, wfDs1E1CurrentAISSs=wfDs1E1CurrentAISSs, wfDs1E1IntervalFCs=wfDs1E1IntervalFCs, wfDs1E1AnsiTable=wfDs1E1AnsiTable, wfDs1E1ModuleEntry=wfDs1E1ModuleEntry, wfDs1E1FarEndTotalTable=wfDs1E1FarEndTotalTable, wfDs1E1FarEndDayCurrentPortLineNumber=wfDs1E1FarEndDayCurrentPortLineNumber, wfDs1E1AnsiSESCounts=wfDs1E1AnsiSESCounts, wfDs1E1CurrentFramerStatsAlarmIndicationFailures=wfDs1E1CurrentFramerStatsAlarmIndicationFailures, wfLogicalLineCfgMtu=wfLogicalLineCfgMtu, wfDs1E1TotalDMs=wfDs1E1TotalDMs, wfDs1E1ModuleDelete=wfDs1E1ModuleDelete, wfDs1E1FarEndDayTotalTable=wfDs1E1FarEndDayTotalTable, wfDs1E1DayThrAlrtBESs=wfDs1E1DayThrAlrtBESs, wfDs1E1LineCfgActualTimeSlotAssign=wfDs1E1LineCfgActualTimeSlotAssign, wfDs1E1IntervalLESs=wfDs1E1IntervalLESs, wfLogicalLineTxErrors=wfLogicalLineTxErrors, wfDs1E1FarEndDayIntervalUASs=wfDs1E1FarEndDayIntervalUASs, wfDs1E1PortMapDslId=wfDs1E1PortMapDslId, wfDs1E1PortCurrentClock=wfDs1E1PortCurrentClock, wfDs1E1FarEndDayCurrentValidFlag=wfDs1E1FarEndDayCurrentValidFlag, wfDs1E1LineCfgEntry=wfDs1E1LineCfgEntry, wfDs1E1PortLineNumber=wfDs1E1PortLineNumber, wfDs1E1FarEndCurrentPortLineNumber=wfDs1E1FarEndCurrentPortLineNumber, wfDs1E1FarEndDayCurrentSEFSs=wfDs1E1FarEndDayCurrentSEFSs, wfDs1E1DayCurrentLCVs=wfDs1E1DayCurrentLCVs, wfDs1E1FarEndCurrentTable=wfDs1E1FarEndCurrentTable, wfDs1E1FarEndTotalLCVs=wfDs1E1FarEndTotalLCVs, wfDs1E1LineStatTxFrames=wfDs1E1LineStatTxFrames, wfLogicalLineRxPktCorruptions=wfLogicalLineRxPktCorruptions, wfDs1E1LineCfgQosServicePkg=wfDs1E1LineCfgQosServicePkg, wfDs1E1IntervalFramerStatsLossFrameFailures=wfDs1E1IntervalFramerStatsLossFrameFailures, wfDs1E1LineStatRxLongFrames=wfDs1E1LineStatRxLongFrames, wfDs1E1ActionBertReset=wfDs1E1ActionBertReset, wfDs1E1LineStatTxErrors=wfDs1E1LineStatTxErrors, wfDs1E1CurrentFramerStatsLossFrameFailures=wfDs1E1CurrentFramerStatsLossFrameFailures, wfLogicalLineRxIntProcs=wfLogicalLineRxIntProcs, wfLogicalLineRxNullFrames=wfLogicalLineRxNullFrames, wfDs1E1ThrAlrtBESs=wfDs1E1ThrAlrtBESs, wfDs1E1AnsiPRMR2Counts=wfDs1E1AnsiPRMR2Counts, wfDs1E1FarEndDayTotalLCVs=wfDs1E1FarEndDayTotalLCVs, wfDs1E1ThrAlrtCSSs=wfDs1E1ThrAlrtCSSs, wfDs1E1CurrentFramerStatsMediaType=wfDs1E1CurrentFramerStatsMediaType, wfDs1E1LineCfgIndex=wfDs1E1LineCfgIndex, wfDs1E1FarEndIntervalTable=wfDs1E1FarEndIntervalTable, wfDs1E1FarEndDayTotalBESs=wfDs1E1FarEndDayTotalBESs, wfDs1E1LineStatRxDropPackets=wfDs1E1LineStatRxDropPackets, wfDs1E1ThrAlrtEntry=wfDs1E1ThrAlrtEntry, wfLogicalLineLackTxResources=wfLogicalLineLackTxResources, wfDs1E1FarEndThrAlrtFCs=wfDs1E1FarEndThrAlrtFCs, wfLogicalLineTxFrames=wfLogicalLineTxFrames, wfDs1E1PortAcceptPrmCrAddressBit=wfDs1E1PortAcceptPrmCrAddressBit, wfDs1E1AnsiPRMESCounts=wfDs1E1AnsiPRMESCounts, wfDs1E1PortMapConnector=wfDs1E1PortMapConnector, wfDs1E1FarEndThrAlrtBESs=wfDs1E1FarEndThrAlrtBESs, wfDs1E1DayIntervalBESs=wfDs1E1DayIntervalBESs, wfDs1E1CurrentEntry=wfDs1E1CurrentEntry, wfDs1E1IntervalTable=wfDs1E1IntervalTable, wfLogicalLineTxIntProcs=wfLogicalLineTxIntProcs, wfDs1E1PortBertTestPattern=wfDs1E1PortBertTestPattern, wfDs1E1FarEndThrAlrtPCVs=wfDs1E1FarEndThrAlrtPCVs, wfDs1E1TotalFramerStatsAlarmIndicationFailures=wfDs1E1TotalFramerStatsAlarmIndicationFailures, wfDs1E1PortFdlTargetHdlcAddress=wfDs1E1PortFdlTargetHdlcAddress, wfDs1E1LineCfgIfIndex=wfDs1E1LineCfgIfIndex, wfLogicalLineCct=wfLogicalLineCct, wfDs1E1LineCfgFractionalLoopback=wfDs1E1LineCfgFractionalLoopback, wfDs1E1ModuleSecondaryClock=wfDs1E1ModuleSecondaryClock, wfDs1E1DayIntervalPCVs=wfDs1E1DayIntervalPCVs, wfDs1E1FarEndDayTotalUASs=wfDs1E1FarEndDayTotalUASs, wfDs1E1FarEndDayCurrentDMs=wfDs1E1FarEndDayCurrentDMs, wfDs1E1ModuleLoop3ClockOperational=wfDs1E1ModuleLoop3ClockOperational, wfDs1E1LineStatRxAbortFrames=wfDs1E1LineStatRxAbortFrames, wfDs1E1PortLineImpedanceOption=wfDs1E1PortLineImpedanceOption, wfDs1E1ConfigLineType=wfDs1E1ConfigLineType, wfDs1E1ClockTable=wfDs1E1ClockTable, wfDs1E1PortPrimaryClockSource=wfDs1E1PortPrimaryClockSource, wfDs1E1TotalEntry=wfDs1E1TotalEntry, wfDs1E1FracDelete=wfDs1E1FracDelete, wfDs1E1FarEndDayCurrentSESs=wfDs1E1FarEndDayCurrentSESs, wfDs1E1PortAcceptLoopbackRequest=wfDs1E1PortAcceptLoopbackRequest, wfDs1E1CurrentFramerStatsLossSignalFailures=wfDs1E1CurrentFramerStatsLossSignalFailures, wfLogicalLineCfgRxQueueLength=wfLogicalLineCfgRxQueueLength, wfDs1E1ThrAlrtFCs=wfDs1E1ThrAlrtFCs, wfDs1E1PortState=wfDs1E1PortState, wfDs1E1FarEndTotalLESs=wfDs1E1FarEndTotalLESs, wfDs1E1TotalFramerStatsEntry=wfDs1E1TotalFramerStatsEntry, wfDs1E1DayThrAlrtPCVs=wfDs1E1DayThrAlrtPCVs, wfDs1E1ModuleCfgRxBufferUseCredits=wfDs1E1ModuleCfgRxBufferUseCredits, wfDs1E1ConfigSignalMode=wfDs1E1ConfigSignalMode, wfDs1E1FarEndCurrentFCs=wfDs1E1FarEndCurrentFCs, wfDs1E1ActionClearFdlStats=wfDs1E1ActionClearFdlStats, wfDs1E1LineStatIndex=wfDs1E1LineStatIndex, wfDs1E1IntervalUASs=wfDs1E1IntervalUASs, wfDs1E1TotalFramerStatsFebeCounts=wfDs1E1TotalFramerStatsFebeCounts, wfDs1E1ModuleTable=wfDs1E1ModuleTable, wfDs1E1ActionClearFractionalLoopState=wfDs1E1ActionClearFractionalLoopState, wfDs1E1FarEndDayCurrentBESs=wfDs1E1FarEndDayCurrentBESs, wfDs1E1FarEndTotalPortLineNumber=wfDs1E1FarEndTotalPortLineNumber, wfDs1E1ConfigTransmitClockSource=wfDs1E1ConfigTransmitClockSource, wfDs1E1DayThrAlrtAISSs=wfDs1E1DayThrAlrtAISSs, wfLogicalLineBertTestPattern=wfLogicalLineBertTestPattern, wfLogicalLineCfgTxQueueLength=wfLogicalLineCfgTxQueueLength, wfLogicalLineAcceptFracLoopCode=wfLogicalLineAcceptFracLoopCode, wfDs1E1PortEntry=wfDs1E1PortEntry, wfDs1E1IntervalPCVs=wfDs1E1IntervalPCVs, wfDs1E1BertStatsPortLineNumber=wfDs1E1BertStatsPortLineNumber, wfDs1E1LineCfgLineNumber=wfDs1E1LineCfgLineNumber, wfDs1E1TotalFramerStatsMediaType=wfDs1E1TotalFramerStatsMediaType, wfDs1E1FarEndCurrentValidFlag=wfDs1E1FarEndCurrentValidFlag, wfDs1E1FarEndIntervalPortLineNumber=wfDs1E1FarEndIntervalPortLineNumber, wfDs1E1FarEndDayIntervalCSSs=wfDs1E1FarEndDayIntervalCSSs, wfDs1E1LineQueStatEntry=wfDs1E1LineQueStatEntry, wfLogicalLineTxOctets=wfLogicalLineTxOctets, wfDs1E1FarEndDayIntervalSESs=wfDs1E1FarEndDayIntervalSESs, wfDs1E1FarEndDayTotalEntry=wfDs1E1FarEndDayTotalEntry, wfDs1E1TotalFramerStatsPortLineNumber=wfDs1E1TotalFramerStatsPortLineNumber, wfDs1E1LineCfgWanProtocol=wfDs1E1LineCfgWanProtocol, wfDs1E1DayThrAlrtDMs=wfDs1E1DayThrAlrtDMs, wfDs1E1DayCurrentBESs=wfDs1E1DayCurrentBESs, wfDs1E1DayTotalFCs=wfDs1E1DayTotalFCs, wfDs1E1CurrentFramerStatsCrc4Counts=wfDs1E1CurrentFramerStatsCrc4Counts, wfDs1E1DayThrAlrtEntry=wfDs1E1DayThrAlrtEntry, wfDs1E1FarEndCurrentBESs=wfDs1E1FarEndCurrentBESs, wfDs1E1FarEndDayThrAlrtLESs=wfDs1E1FarEndDayThrAlrtLESs, wfDs1E1DayIntervalUASs=wfDs1E1DayIntervalUASs, wfDs1E1DayThrAlrtUASs=wfDs1E1DayThrAlrtUASs, wfDs1E1FarEndCurrentSESs=wfDs1E1FarEndCurrentSESs, wfDs1E1AnsiPRMECounts=wfDs1E1AnsiPRMECounts, wfDs1E1FarEndDayThrAlrtEntry=wfDs1E1FarEndDayThrAlrtEntry, wfLogicalLineWanProtocol=wfLogicalLineWanProtocol, wfDs1E1DayIntervalEntry=wfDs1E1DayIntervalEntry, wfDs1E1LineQueStatLineIndex=wfDs1E1LineQueStatLineIndex, wfLogicalLineTxUnderflows=wfLogicalLineTxUnderflows, wfLogicalLineRxIdles=wfLogicalLineRxIdles, wfDs1E1ClockExtClockOperational=wfDs1E1ClockExtClockOperational, wfDs1E1FarEndDayCurrentESs=wfDs1E1FarEndDayCurrentESs, wfDs1E1FarEndDayCurrentLESs=wfDs1E1FarEndDayCurrentLESs, wfLogicalLineLackRxResources=wfLogicalLineLackRxResources, wfDs1E1TotalESs=wfDs1E1TotalESs, wfDs1E1IntervalFramerStatsEntry=wfDs1E1IntervalFramerStatsEntry, wfDs1E1IntervalDMs=wfDs1E1IntervalDMs, wfDs1E1ConfigCircuitIdentifier=wfDs1E1ConfigCircuitIdentifier, wfDs1E1PortMtu=wfDs1E1PortMtu, wfDs1E1FarEndDayIntervalValidFlag=wfDs1E1FarEndDayIntervalValidFlag, wfDs1E1FarEndCurrentUASs=wfDs1E1FarEndCurrentUASs, wfDs1E1FarEndDayCurrentPCVs=wfDs1E1FarEndDayCurrentPCVs, wfDs1E1CurrentSASs=wfDs1E1CurrentSASs, wfDs1E1ModuleLoop4ClockOperational=wfDs1E1ModuleLoop4ClockOperational, wfDs1E1FarEndDayIntervalLCVs=wfDs1E1FarEndDayIntervalLCVs, wfDs1E1ThrAlrtPortLineNumber=wfDs1E1ThrAlrtPortLineNumber, wfDs1E1FracPortLineNumber=wfDs1E1FracPortLineNumber, wfDs1E1AnsiPRMR3Counts=wfDs1E1AnsiPRMR3Counts, wfDs1E1PortSignalLevel=wfDs1E1PortSignalLevel, wfDs1E1FarEndDayCurrentSASs=wfDs1E1FarEndDayCurrentSASs, wfDs1E1LineCfgDisable=wfDs1E1LineCfgDisable, wfDs1E1DayThrAlrtPortLineNumber=wfDs1E1DayThrAlrtPortLineNumber, wfDs1E1DayIntervalAISSs=wfDs1E1DayIntervalAISSs, wfDs1E1DayCurrentESs=wfDs1E1DayCurrentESs, wfDs1E1IntervalFramerStatsPortLineNumber=wfDs1E1IntervalFramerStatsPortLineNumber, wfDs1E1FarEndIntervalEntry=wfDs1E1FarEndIntervalEntry, wfLogicalLineRxCRCErrors=wfLogicalLineRxCRCErrors, wfDs1E1FarEndIntervalLESs=wfDs1E1FarEndIntervalLESs, wfDs1E1ThrAlrtSASs=wfDs1E1ThrAlrtSASs, wfDs1E1FarEndIntervalSEFSs=wfDs1E1FarEndIntervalSEFSs, wfDs1E1DayThrAlrtLCVs=wfDs1E1DayThrAlrtLCVs, wfDs1E1CurrentFramerStatsPortLineNumber=wfDs1E1CurrentFramerStatsPortLineNumber, wfDs1E1FarEndDayThrAlrtTable=wfDs1E1FarEndDayThrAlrtTable, wfDs1E1LineStatRxOctets=wfDs1E1LineStatRxOctets, wfDs1E1FarEndThrAlrtTable=wfDs1E1FarEndThrAlrtTable, wfDs1E1ActionEntry=wfDs1E1ActionEntry, wfLogicalLineRxDropPackets=wfLogicalLineRxDropPackets, wfDs1E1ConfigIfIndex=wfDs1E1ConfigIfIndex, wfDs1E1PortInternationalBit=wfDs1E1PortInternationalBit, wfDs1E1PortRelayStatus=wfDs1E1PortRelayStatus, wfDs1E1CurrentValidFlag=wfDs1E1CurrentValidFlag, wfDs1E1ClockDelete=wfDs1E1ClockDelete, wfDs1E1PortMapEntry=wfDs1E1PortMapEntry, wfDs1E1IntervalValidFlag=wfDs1E1IntervalValidFlag, wfLogicalLineActiveCct=wfLogicalLineActiveCct, wfDs1E1ActionSendLoopUpFractionalCode=wfDs1E1ActionSendLoopUpFractionalCode, wfDs1E1FracLogicalLineIndex=wfDs1E1FracLogicalLineIndex, wfDs1E1IntervalFramerStatsLossSignalFailures=wfDs1E1IntervalFramerStatsLossSignalFailures, wfDs1E1FarEndDayThrAlrtLCVs=wfDs1E1FarEndDayThrAlrtLCVs, wfLogicalLineFractionalLoopback=wfLogicalLineFractionalLoopback, wfDs1E1DayCurrentTable=wfDs1E1DayCurrentTable, wfDs1E1DayTotalEntry=wfDs1E1DayTotalEntry, wfDs1E1ClockLoopClockOperational=wfDs1E1ClockLoopClockOperational, wfDs1E1LineLastChange=wfDs1E1LineLastChange, wfDs1E1ActionClearFarEndDayCurrentStats=wfDs1E1ActionClearFarEndDayCurrentStats, wfDs1E1FarEndIntervalLCVs=wfDs1E1FarEndIntervalLCVs, wfDs1E1FarEndDayTotalValidFlag=wfDs1E1FarEndDayTotalValidFlag, wfDs1E1FarEndDayThrAlrtPCVs=wfDs1E1FarEndDayThrAlrtPCVs, wfDs1E1LineStatRxErrors=wfDs1E1LineStatRxErrors, wfDs1E1LineCfgManagerMethod=wfDs1E1LineCfgManagerMethod, wfDs1E1ModuleCfgTxBufferUseCredits=wfDs1E1ModuleCfgTxBufferUseCredits, wfDs1E1LineStatTxDropPackets=wfDs1E1LineStatTxDropPackets, wfDs1E1FarEndIntervalValidFlag=wfDs1E1FarEndIntervalValidFlag, wfDs1E1TotalLESs=wfDs1E1TotalLESs, wfDs1E1DayCurrentLESs=wfDs1E1DayCurrentLESs, wfDs1E1ActionSendFdlLoopbackCode=wfDs1E1ActionSendFdlLoopbackCode, wfDs1E1FarEndTotalUASs=wfDs1E1FarEndTotalUASs, wfDs1E1FarEndDayThrAlrtESs=wfDs1E1FarEndDayThrAlrtESs, wfDs1E1FarEndIntervalBESs=wfDs1E1FarEndIntervalBESs, wfDs1E1DayCurrentValidFlag=wfDs1E1DayCurrentValidFlag, wfDs1E1DayCurrentValidIntervals=wfDs1E1DayCurrentValidIntervals, wfDs1E1FarEndDayThrAlrtSESs=wfDs1E1FarEndDayThrAlrtSESs, wfDs1E1PortBertSendAlarm=wfDs1E1PortBertSendAlarm, wfDs1E1AnsiEntry=wfDs1E1AnsiEntry, wfDs1E1AnsiPRMR1Counts=wfDs1E1AnsiPRMR1Counts, wfDs1E1TotalPortLineNumber=wfDs1E1TotalPortLineNumber, wfDs1E1ConfigLineStatus=wfDs1E1ConfigLineStatus, wfDs1E1CurrentBESs=wfDs1E1CurrentBESs, wfDs1E1FarEndDayTotalPortLineNumber=wfDs1E1FarEndDayTotalPortLineNumber, wfDs1E1DayTotalLCVs=wfDs1E1DayTotalLCVs, wfDs1E1FarEndCurrentAISSs=wfDs1E1FarEndCurrentAISSs, wfDs1E1TotalFramerStatsRemoteAlarmFailures=wfDs1E1TotalFramerStatsRemoteAlarmFailures, wfDs1E1DayTotalUASs=wfDs1E1DayTotalUASs, wfDs1E1FarEndDayIntervalEntry=wfDs1E1FarEndDayIntervalEntry, wfDs1E1CurrentPCVs=wfDs1E1CurrentPCVs, wfDs1E1DayCurrentSASs=wfDs1E1DayCurrentSASs, wfDs1E1CurrentTable=wfDs1E1CurrentTable, wfDs1E1FarEndDayTotalESs=wfDs1E1FarEndDayTotalESs, wfDs1E1ActionClearDayCurrentStats=wfDs1E1ActionClearDayCurrentStats, wfDs1E1FarEndDayCurrentCSSs=wfDs1E1FarEndDayCurrentCSSs, wfLogicalLineLineNumber=wfLogicalLineLineNumber, wfDs1E1TotalFramerStatsFeCounts=wfDs1E1TotalFramerStatsFeCounts, wfDs1E1DayCurrentDMs=wfDs1E1DayCurrentDMs, wfLogicalLineRxOctets=wfLogicalLineRxOctets, wfDs1E1FarEndDayTotalPCVs=wfDs1E1FarEndDayTotalPCVs, wfDs1E1TotalTable=wfDs1E1TotalTable, wfDs1E1LineStatTxUnderflows=wfDs1E1LineStatTxUnderflows, wfDs1E1FarEndDayIntervalNumber=wfDs1E1FarEndDayIntervalNumber, wfDs1E1ActionClearFarEndIntervalStats=wfDs1E1ActionClearFarEndIntervalStats, wfDs1E1PortExtClockOperational=wfDs1E1PortExtClockOperational, wfDs1E1LineCfgBertMode=wfDs1E1LineCfgBertMode, wfDs1E1FarEndDayTotalFCs=wfDs1E1FarEndDayTotalFCs, wfLogicalLineCRCSize=wfLogicalLineCRCSize, wfDs1E1TotalFramerStatsLossFrameFailures=wfDs1E1TotalFramerStatsLossFrameFailures, wfDs1E1DayTotalDMs=wfDs1E1DayTotalDMs, wfDs1E1FarEndDayCurrentLCVs=wfDs1E1FarEndDayCurrentLCVs, wfLogicalLineLocalHdlcAddress=wfLogicalLineLocalHdlcAddress, wfLogicalLineDisable=wfLogicalLineDisable, wfDs1E1LineStatPortLineNumber=wfDs1E1LineStatPortLineNumber, wfDs1E1IntervalNumber=wfDs1E1IntervalNumber, wfDs1E1DayCurrentTimeElapsed=wfDs1E1DayCurrentTimeElapsed)
mibBuilder.exportSymbols("Wellfleet-DS1E1-MIB", wfDs1E1DayTotalSESs=wfDs1E1DayTotalSESs, wfDs1E1PortSecondaryClockSource=wfDs1E1PortSecondaryClockSource, wfDs1E1FarEndDayIntervalPortLineNumber=wfDs1E1FarEndDayIntervalPortLineNumber, wfDs1E1FarEndDayTotalCSSs=wfDs1E1FarEndDayTotalCSSs, wfDs1E1ActionClearCurrentStats=wfDs1E1ActionClearCurrentStats, wfDs1E1LineQueStatTxOctets=wfDs1E1LineQueStatTxOctets, wfLogicalLineBertMode=wfLogicalLineBertMode, wfDs1E1BertStatsBits=wfDs1E1BertStatsBits, wfDs1E1FarEndTotalSEFSs=wfDs1E1FarEndTotalSEFSs, wfDs1E1DayIntervalCSSs=wfDs1E1DayIntervalCSSs, wfDs1E1FracActualLogicalLineIndex=wfDs1E1FracActualLogicalLineIndex, wfDs1E1TotalSEFSs=wfDs1E1TotalSEFSs, wfDs1E1ConfigTimeElapsed=wfDs1E1ConfigTimeElapsed, wfDs1E1DayIntervalESs=wfDs1E1DayIntervalESs, wfDs1E1FarEndDayCurrentTable=wfDs1E1FarEndDayCurrentTable, wfDs1E1FarEndDayThrAlrtDMs=wfDs1E1FarEndDayThrAlrtDMs, wfDs1E1TotalValidFlag=wfDs1E1TotalValidFlag, wfDs1E1FarEndDayTotalSEFSs=wfDs1E1FarEndDayTotalSEFSs, wfDs1E1ModuleModule=wfDs1E1ModuleModule, wfDs1E1DayThrAlrtSEFSs=wfDs1E1DayThrAlrtSEFSs, wfDs1E1FarEndDayIntervalSASs=wfDs1E1FarEndDayIntervalSASs, wfDs1E1DayTotalSASs=wfDs1E1DayTotalSASs, wfLogicalLineRxIFCs=wfLogicalLineRxIFCs, wfDs1E1FarEndDayTotalSESs=wfDs1E1FarEndDayTotalSESs, wfDs1E1FarEndCurrentLESs=wfDs1E1FarEndCurrentLESs, wfDs1E1CurrentValidIntervals=wfDs1E1CurrentValidIntervals, wfDs1E1PortLoggingEnableMask=wfDs1E1PortLoggingEnableMask, wfDs1E1LineStatRxNonOctetBits=wfDs1E1LineStatRxNonOctetBits, wfDs1E1AnsiBPVCounts=wfDs1E1AnsiBPVCounts, wfLogicalLineTxQueueLength=wfLogicalLineTxQueueLength, wfLogicalLineIndex=wfLogicalLineIndex, wfDs1E1ClockEntry=wfDs1E1ClockEntry, wfDs1E1LineCfgState=wfDs1E1LineCfgState, wfDs1E1PortMapTable=wfDs1E1PortMapTable, wfDs1E1FarEndTotalPCVs=wfDs1E1FarEndTotalPCVs, wfDs1E1FarEndCurrentSEFSs=wfDs1E1FarEndCurrentSEFSs, wfLogicalLineRxShortFrames=wfLogicalLineRxShortFrames, wfDs1E1ThrAlrtTable=wfDs1E1ThrAlrtTable, wfDs1E1LineCfgCct=wfDs1E1LineCfgCct, wfDs1E1DayThrAlrtCSSs=wfDs1E1DayThrAlrtCSSs, wfDs1E1PortTransmitWaveform=wfDs1E1PortTransmitWaveform, wfDs1E1LineQueStatQueueIndex=wfDs1E1LineQueStatQueueIndex, wfDs1E1CurrentLCVs=wfDs1E1CurrentLCVs, wfDs1E1FarEndDayThrAlrtCSSs=wfDs1E1FarEndDayThrAlrtCSSs, wfLogicalLineRxFrames=wfLogicalLineRxFrames, wfDs1E1DayTotalAISSs=wfDs1E1DayTotalAISSs, wfDs1E1CurrentSESs=wfDs1E1CurrentSESs, wfDs1E1CurrentFCs=wfDs1E1CurrentFCs, wfLogicalLineTimeSlotAssignment=wfLogicalLineTimeSlotAssignment, wfDs1E1LineCfgPortLineNumber=wfDs1E1LineCfgPortLineNumber, wfDs1E1DayIntervalTable=wfDs1E1DayIntervalTable, wfDs1E1LineCfgCRCSize=wfDs1E1LineCfgCRCSize, wfDs1E1BertStatsBitErrors=wfDs1E1BertStatsBitErrors, wfDs1E1PortLoopbackState=wfDs1E1PortLoopbackState, wfLogicalLineNRZIEnable=wfLogicalLineNRZIEnable, wfLogicalLineOutQLen=wfLogicalLineOutQLen, wfDs1E1DayTotalPCVs=wfDs1E1DayTotalPCVs, wfLogicalLineRxQueueLength=wfLogicalLineRxQueueLength, wfDs1E1TotalPCVs=wfDs1E1TotalPCVs, wfDs1E1DayThrAlrtTable=wfDs1E1DayThrAlrtTable, wfDs1E1DayCurrentPCVs=wfDs1E1DayCurrentPCVs, wfLogicalLineActualRateAdaption=wfLogicalLineActualRateAdaption)
