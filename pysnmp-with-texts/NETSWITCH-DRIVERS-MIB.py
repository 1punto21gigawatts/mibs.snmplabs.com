#
# PySNMP MIB module NETSWITCH-DRIVERS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETSWITCH-DRIVERS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:20:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, Counter64, TimeTicks, Counter32, Unsigned32, Bits, ModuleIdentity, Gauge32, iso, ObjectIdentity, Integer32, MibIdentifier, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Counter64", "TimeTicks", "Counter32", "Unsigned32", "Bits", "ModuleIdentity", "Gauge32", "iso", "ObjectIdentity", "Integer32", "MibIdentifier", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hp = MibIdentifier((1, 3, 6, 1, 4, 1, 11))
nm = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2))
icf = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14))
hpicfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11))
hpicfSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5))
hpSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1))
hpOpSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1))
hpHwSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2))
hpDriverStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3))
hpDriverStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 1), )
if mibBuilder.loadTexts: hpDriverStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpDriverStatsTable.setDescription('A list of driver entries. ')
hpDriverStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 1, 1), ).setIndexNames((0, "NETSWITCH-DRIVERS-MIB", "hpDriverStatsIndex"))
if mibBuilder.loadTexts: hpDriverStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpDriverStatsEntry.setDescription('A driver entry containing information common to all drivers.')
hpDriverStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDriverStatsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpDriverStatsIndex.setDescription("A unique value for each driver. The value for each driver must remain constant at least from one re- initialization of the entity's network management system to the next re-initialization.")
hpDriverStatsType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDriverStatsType.setStatus('mandatory')
if mibBuilder.loadTexts: hpDriverStatsType.setDescription('Type of driver, FDDI, ATM, SPITFIRE, etc. ')
hpDriverStatsOctetsRxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDriverStatsOctetsRxOk.setStatus('mandatory')
if mibBuilder.loadTexts: hpDriverStatsOctetsRxOk.setDescription('The number of octets received by the driver including the FCS but not including framing bits.')
hpDriverStatsFrameRxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDriverStatsFrameRxOk.setStatus('mandatory')
if mibBuilder.loadTexts: hpDriverStatsFrameRxOk.setDescription('The number of frames received by the driver.')
hpDriverStatsTotalRxError = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDriverStatsTotalRxError.setStatus('mandatory')
if mibBuilder.loadTexts: hpDriverStatsTotalRxError.setDescription('The total number of receive errors.')
hpDriverStatsOctetTxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDriverStatsOctetTxOk.setStatus('mandatory')
if mibBuilder.loadTexts: hpDriverStatsOctetTxOk.setDescription('The number of octets transmitted by the driver including the FCS but not including framing bits.')
hpDriverStatsFrameTxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDriverStatsFrameTxOk.setStatus('mandatory')
if mibBuilder.loadTexts: hpDriverStatsFrameTxOk.setDescription('The number of frames transmitted by the driver.')
hpDriverStatsTotalTxError = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDriverStatsTotalTxError.setStatus('mandatory')
if mibBuilder.loadTexts: hpDriverStatsTotalTxError.setDescription('The total number of transmit errors.')
hpDriverStatsOctetsRxPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDriverStatsOctetsRxPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: hpDriverStatsOctetsRxPerSec.setDescription('The number of octets received by the driver during the previous one second sample period.')
hpDriverStatsPeakOctetsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDriverStatsPeakOctetsRx.setStatus('mandatory')
if mibBuilder.loadTexts: hpDriverStatsPeakOctetsRx.setDescription('The highest number of octets received by the driver during one second sample periods.')
hpDriverStatsFramesRxPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDriverStatsFramesRxPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: hpDriverStatsFramesRxPerSec.setDescription('The number of frames received by the driver during the previous one second sample period.')
hpDriverStatsPeakFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDriverStatsPeakFramesRx.setStatus('mandatory')
if mibBuilder.loadTexts: hpDriverStatsPeakFramesRx.setDescription('The highest number of frames received by the driver during one second sample periods.')
hpDriverStatsOctetsTxPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDriverStatsOctetsTxPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: hpDriverStatsOctetsTxPerSec.setDescription('The number of octets transmitted by the driver during the previous one second sample period.')
hpDriverStatsPeakOctetsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDriverStatsPeakOctetsTx.setStatus('mandatory')
if mibBuilder.loadTexts: hpDriverStatsPeakOctetsTx.setDescription('The highest number of octets transmitted by the driver during one second sample periods. ')
hpDriverStatsFramesTxPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDriverStatsFramesTxPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: hpDriverStatsFramesTxPerSec.setDescription('The number of frames transmitted by the driver during the previous one second sample period ')
hpDriverStatsPeakFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDriverStatsPeakFramesTx.setStatus('mandatory')
if mibBuilder.loadTexts: hpDriverStatsPeakFramesTx.setDescription('The highest number of frames transmitted by the driver during one second sample periods. ')
hpFddiDriverStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 2), )
if mibBuilder.loadTexts: hpFddiDriverStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpFddiDriverStatsTable.setDescription('A list of FDDI driver entries. ')
hpFddiDriverStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 2, 1), ).setIndexNames((0, "NETSWITCH-DRIVERS-MIB", "hpFddiDriverStatsIndex"))
if mibBuilder.loadTexts: hpFddiDriverStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpFddiDriverStatsEntry.setDescription('A FDDI driver entry containing information common to a given driver.')
hpFddiDriverStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFddiDriverStatsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpFddiDriverStatsIndex.setDescription("A unique value for each driver. The value for each driver must remain constant at least from one re- initialization of the entity's network management system to the next re-initialization.")
hpFddiDriverStatsSMTOctetsRxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFddiDriverStatsSMTOctetsRxOk.setStatus('mandatory')
if mibBuilder.loadTexts: hpFddiDriverStatsSMTOctetsRxOk.setDescription('The number of SMT octets received by the driver including the FCS but not including framing bits.')
hpFddiDriverStatsSMTFrameRxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFddiDriverStatsSMTFrameRxOk.setStatus('mandatory')
if mibBuilder.loadTexts: hpFddiDriverStatsSMTFrameRxOk.setDescription('The number of SMT frames received by the driver.')
hpFddiDriverStatsSMTOctetsTxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFddiDriverStatsSMTOctetsTxOk.setStatus('mandatory')
if mibBuilder.loadTexts: hpFddiDriverStatsSMTOctetsTxOk.setDescription('The number of SMT octets transmitted by the driver including the FCS but not including framing bits.')
hpFddiDriverStatsSMTFrameTxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFddiDriverStatsSMTFrameTxOk.setStatus('mandatory')
if mibBuilder.loadTexts: hpFddiDriverStatsSMTFrameTxOk.setDescription('The number of SMT frames transmitted by the driver.')
hpFddiDriverStatsErrRxCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFddiDriverStatsErrRxCRC.setStatus('mandatory')
if mibBuilder.loadTexts: hpFddiDriverStatsErrRxCRC.setDescription('The number of received frames containing a CRC error detected by the FDDI network interface chip.')
hpFddiDriverStatsErrRxOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFddiDriverStatsErrRxOverrun.setStatus('mandatory')
if mibBuilder.loadTexts: hpFddiDriverStatsErrRxOverrun.setDescription('The number of received frames that are invalid due to overrun conditions in the FSI of the MC68840 FDDI network interface chip.')
hpFddiDriverStatsErrRxParity = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFddiDriverStatsErrRxParity.setStatus('mandatory')
if mibBuilder.loadTexts: hpFddiDriverStatsErrRxParity.setDescription('The number of received frames containing a parity error detected by the FDDI network interface chip.')
hpFddiDriverStatsErrRxMACStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFddiDriverStatsErrRxMACStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hpFddiDriverStatsErrRxMACStatus.setDescription('The number of received frames generating MAC status errors in the MC68840 FDDI network interface chip.')
hpFddiDriverStatsErrTxAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFddiDriverStatsErrTxAbort.setStatus('mandatory')
if mibBuilder.loadTexts: hpFddiDriverStatsErrTxAbort.setDescription('The number of transmit frames that were aborted by the MC68840 FDDI network interface chip.')
hpFddiDriverStatsErrTxUnderrun = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFddiDriverStatsErrTxUnderrun.setStatus('mandatory')
if mibBuilder.loadTexts: hpFddiDriverStatsErrTxUnderrun.setDescription('The number of transmit frames that were aborted due to underrun errors in the MC68840 FDDI network interface chip.')
hpFddiDriverStatsErrTxParity = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFddiDriverStatsErrTxParity.setStatus('mandatory')
if mibBuilder.loadTexts: hpFddiDriverStatsErrTxParity.setDescription('The number of transmit frames that were aborted due to parity errors in the MC68840 FDDI network interface chip.')
hpFddiDriverStatsErrGsrLlcTxRer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFddiDriverStatsErrGsrLlcTxRer.setStatus('mandatory')
if mibBuilder.loadTexts: hpFddiDriverStatsErrGsrLlcTxRer.setDescription('The number of LLC transmit ring errors detected by the MC68840 FDDI network interface chip.')
hpFddiDriverStatsErrGsrLlcRxRer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFddiDriverStatsErrGsrLlcRxRer.setStatus('mandatory')
if mibBuilder.loadTexts: hpFddiDriverStatsErrGsrLlcRxRer.setDescription('The number of LLC receive ring errors detected by the MC68840 FDDI network interface chip.')
hpFddiDriverStatsErrGsrSMTTxRer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFddiDriverStatsErrGsrSMTTxRer.setStatus('mandatory')
if mibBuilder.loadTexts: hpFddiDriverStatsErrGsrSMTTxRer.setDescription('The number of SMT transmit ring errors detected by the MC68840 FDDI network interface chip.')
hpFddiDriverStatsErrGsrSMTRxRer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFddiDriverStatsErrGsrSMTRxRer.setStatus('mandatory')
if mibBuilder.loadTexts: hpFddiDriverStatsErrGsrSMTRxRer.setDescription('The number of SMT receive ring errors detected by the MC68840 FDDI network interface chip.')
hpFddiDriverStatsErrGsrPortOp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFddiDriverStatsErrGsrPortOp.setStatus('mandatory')
if mibBuilder.loadTexts: hpFddiDriverStatsErrGsrPortOp.setDescription('The number of port operation errors detected by the FSI of the MC68840 FDDI network interface chip.')
hpFddiDriverStatsErrGsrLlcRxRov = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFddiDriverStatsErrGsrLlcRxRov.setStatus('mandatory')
if mibBuilder.loadTexts: hpFddiDriverStatsErrGsrLlcRxRov.setDescription('The number of LLC receive overrun condition detected by the FSI of the MC68840 FDDI network interface chip.')
hpFddiDriverStatsErrGsrSMTRxRov = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFddiDriverStatsErrGsrSMTRxRov.setStatus('mandatory')
if mibBuilder.loadTexts: hpFddiDriverStatsErrGsrSMTRxRov.setDescription('The number of SMT receive overrun condition detected by the FSI of the MC68840 FDDI network interface chip.')
hpFddiDriverStatsErrGsrInternalOp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFddiDriverStatsErrGsrInternalOp.setStatus('mandatory')
if mibBuilder.loadTexts: hpFddiDriverStatsErrGsrInternalOp.setDescription('The number of internal operation errors detected by the FSI of the MC68840 FDDI network interface chip.')
hpFddiDriverStatsIoeMov = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFddiDriverStatsIoeMov.setStatus('mandatory')
if mibBuilder.loadTexts: hpFddiDriverStatsIoeMov.setDescription('The number of memory overrun conditions that the FSI has detected in MC68840 FDDI network interface chip. The internal operation error count will also be incremented under this condition.')
hpFddiDriverStatsErrGsrHost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFddiDriverStatsErrGsrHost.setStatus('mandatory')
if mibBuilder.loadTexts: hpFddiDriverStatsErrGsrHost.setDescription('The number of host errors detected by the FSI of the MC68840 FDDI network interface chip.')
hpFddiDriverStatsTxCongestion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFddiDriverStatsTxCongestion.setStatus('mandatory')
if mibBuilder.loadTexts: hpFddiDriverStatsTxCongestion.setDescription('The number of transmit packets dropped due to insufficient space on the FDDI driver transmit ring.')
hpFddiDriverStatsMissedCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFddiDriverStatsMissedCmd.setStatus('mandatory')
if mibBuilder.loadTexts: hpFddiDriverStatsMissedCmd.setDescription('The number of FSI commands that did not execute properly in the MC68840 FDDI network interface chip.')
hpFddiDriverStatsMissedCRF = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 3, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFddiDriverStatsMissedCRF.setStatus('mandatory')
if mibBuilder.loadTexts: hpFddiDriverStatsMissedCRF.setDescription('The number of FSI commands that could not be issued because of an unavailable command register in the MC68840 FDDI network interface chip.')
mibBuilder.exportSymbols("NETSWITCH-DRIVERS-MIB", hpDriverStatsTotalRxError=hpDriverStatsTotalRxError, hpDriverStatsPeakOctetsTx=hpDriverStatsPeakOctetsTx, hpFddiDriverStatsErrGsrLlcTxRer=hpFddiDriverStatsErrGsrLlcTxRer, hpFddiDriverStatsErrGsrLlcRxRer=hpFddiDriverStatsErrGsrLlcRxRer, hpFddiDriverStatsErrGsrSMTTxRer=hpFddiDriverStatsErrGsrSMTTxRer, hpDriverStatsOctetsRxOk=hpDriverStatsOctetsRxOk, hpDriverStatsFramesTxPerSec=hpDriverStatsFramesTxPerSec, hpDriverStatsOctetsRxPerSec=hpDriverStatsOctetsRxPerSec, hpFddiDriverStatsTable=hpFddiDriverStatsTable, hpFddiDriverStatsIoeMov=hpFddiDriverStatsIoeMov, hpDriverStats=hpDriverStats, hpDriverStatsPeakOctetsRx=hpDriverStatsPeakOctetsRx, hpDriverStatsOctetTxOk=hpDriverStatsOctetTxOk, hpDriverStatsFrameTxOk=hpDriverStatsFrameTxOk, hpicfSwitch=hpicfSwitch, hpFddiDriverStatsIndex=hpFddiDriverStatsIndex, hpDriverStatsFrameRxOk=hpDriverStatsFrameRxOk, hpDriverStatsPeakFramesRx=hpDriverStatsPeakFramesRx, hpFddiDriverStatsMissedCmd=hpFddiDriverStatsMissedCmd, hpicfObjects=hpicfObjects, hpDriverStatsFramesRxPerSec=hpDriverStatsFramesRxPerSec, hpFddiDriverStatsTxCongestion=hpFddiDriverStatsTxCongestion, icf=icf, hpFddiDriverStatsErrGsrPortOp=hpFddiDriverStatsErrGsrPortOp, hpFddiDriverStatsErrTxParity=hpFddiDriverStatsErrTxParity, hpDriverStatsOctetsTxPerSec=hpDriverStatsOctetsTxPerSec, hpFddiDriverStatsEntry=hpFddiDriverStatsEntry, hpFddiDriverStatsSMTOctetsTxOk=hpFddiDriverStatsSMTOctetsTxOk, hpFddiDriverStatsSMTOctetsRxOk=hpFddiDriverStatsSMTOctetsRxOk, hpFddiDriverStatsErrRxOverrun=hpFddiDriverStatsErrRxOverrun, hpDriverStatsIndex=hpDriverStatsIndex, hpDriverStatsType=hpDriverStatsType, hpOpSystem=hpOpSystem, hpDriverStatsTable=hpDriverStatsTable, hpDriverStatsTotalTxError=hpDriverStatsTotalTxError, hpDriverStatsPeakFramesTx=hpDriverStatsPeakFramesTx, hpFddiDriverStatsSMTFrameRxOk=hpFddiDriverStatsSMTFrameRxOk, hpFddiDriverStatsErrRxMACStatus=hpFddiDriverStatsErrRxMACStatus, hpFddiDriverStatsErrTxUnderrun=hpFddiDriverStatsErrTxUnderrun, hpDriverStatsEntry=hpDriverStatsEntry, hpHwSystem=hpHwSystem, hpFddiDriverStatsErrGsrHost=hpFddiDriverStatsErrGsrHost, hpFddiDriverStatsErrGsrLlcRxRov=hpFddiDriverStatsErrGsrLlcRxRov, hpFddiDriverStatsMissedCRF=hpFddiDriverStatsMissedCRF, hpFddiDriverStatsErrTxAbort=hpFddiDriverStatsErrTxAbort, nm=nm, hpFddiDriverStatsErrRxParity=hpFddiDriverStatsErrRxParity, hpFddiDriverStatsErrRxCRC=hpFddiDriverStatsErrRxCRC, hpFddiDriverStatsSMTFrameTxOk=hpFddiDriverStatsSMTFrameTxOk, hpSwitch=hpSwitch, hpFddiDriverStatsErrGsrSMTRxRer=hpFddiDriverStatsErrGsrSMTRxRer, hpFddiDriverStatsErrGsrSMTRxRov=hpFddiDriverStatsErrGsrSMTRxRov, hpFddiDriverStatsErrGsrInternalOp=hpFddiDriverStatsErrGsrInternalOp, hp=hp)
