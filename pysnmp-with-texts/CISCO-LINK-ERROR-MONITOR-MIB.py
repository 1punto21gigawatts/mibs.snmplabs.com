#
# PySNMP MIB module CISCO-LINK-ERROR-MONITOR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LINK-ERROR-MONITOR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:04:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Integer32, NotificationType, Unsigned32, iso, Counter64, MibIdentifier, IpAddress, ModuleIdentity, Gauge32, Bits, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "NotificationType", "Unsigned32", "iso", "Counter64", "MibIdentifier", "IpAddress", "ModuleIdentity", "Gauge32", "Bits", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
ciscoLinkErrorMonitorMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 426))
ciscoLinkErrorMonitorMIB.setRevisions(('2004-11-19 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoLinkErrorMonitorMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoLinkErrorMonitorMIB.setLastUpdated('200411190000Z')
if mibBuilder.loadTexts: ciscoLinkErrorMonitorMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoLinkErrorMonitorMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-lan-switch-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoLinkErrorMonitorMIB.setDescription('The MIB module for managing Link Error Monitoring Feature on devices. Link Error Monitoring Feature provides a mechanism to monitor a certain set of link error counters on an interface and take certain actions when the increase in the error counters between two consecutive samplings exceeds the configurable thresholds consecutively for a certain number of times.')
ciscoLinkErrMonMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 426, 0))
ciscoLinkErrMonMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 426, 1))
ciscoLinkErrMonMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 426, 2))
clemGlobalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 426, 1, 1))
clemInterfaceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 426, 1, 2))
class ClemCounterType(TextualConvention, Integer32):
    description = 'The link error counters on interfaces to be monitored by the Link Error Monitor feature. rxcrc - the counter on the number of received packets with CRC and alignment errors. txcrc - the counter on the number of transmitted packets with CRC errors. inerrors - the ifInErrors counter as defined in IF-MIB. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("rxcrc", 1), ("txcrc", 2), ("inerrors", 3))

clemEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 426, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clemEnabled.setStatus('current')
if mibBuilder.loadTexts: clemEnabled.setDescription('Specifies whether the Link Error Monitor Feature is enabled on the device or not.')
clemSamplingInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 426, 1, 1, 2), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clemSamplingInterval.setStatus('current')
if mibBuilder.loadTexts: clemSamplingInterval.setDescription("Specifies the sampling interval to sample the interfaces' monitored link error counters.")
clemSamplingTimes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 426, 1, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clemSamplingTimes.setStatus('current')
if mibBuilder.loadTexts: clemSamplingTimes.setDescription('Specifies the consecutive number of times with error counter increase over thresholds between two consecutive samplings before corresponding notifications can be sent and actions can be taken on an interface.')
clemAction = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 426, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("errdisable", 1), ("failover", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clemAction.setStatus('current')
if mibBuilder.loadTexts: clemAction.setDescription('Specifies the action to be taken on an interface when the increase in an error counter on that interface between two consecutive sampling exceeds the corresponding clemThresholdHigh for consecutive number of times as specified by clemSamplingTimes. errdisable -- the interface is disabled by forcing its link down. failover -- when the interface is a member of a channel and it is the only operational member in the channel, then no operation will be taken. Otherwise, disable the interface by forcing its link down, i.e., errdisable the interface. ')
clemThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 426, 1, 1, 5), )
if mibBuilder.loadTexts: clemThresholdTable.setStatus('current')
if mibBuilder.loadTexts: clemThresholdTable.setDescription('A table containing threshold configuration for the monitored link error counters.')
clemThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 426, 1, 1, 5, 1), ).setIndexNames((0, "CISCO-LINK-ERROR-MONITOR-MIB", "clemThresholdCounterType"))
if mibBuilder.loadTexts: clemThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: clemThresholdEntry.setDescription('An entry containing threshold configuration for each type of link error counter that can be monitored by this feature on the device.')
clemThresholdCounterType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 426, 1, 1, 5, 1, 1), ClemCounterType())
if mibBuilder.loadTexts: clemThresholdCounterType.setStatus('current')
if mibBuilder.loadTexts: clemThresholdCounterType.setDescription('Indicates the type of link error counter to be monitored.')
clemThresholdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 426, 1, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clemThresholdLow.setStatus('current')
if mibBuilder.loadTexts: clemThresholdLow.setDescription('Specifies the low threshold for an error counter type. When the increase in this error counter type on an interface between two consecutive sampling exceeds the instance value of clemThresholdLow for this error counter type consecutively for clemSamplingTimes number of times, a clemLowThresholdExceeded notification on that interface will be sent.')
clemThresholdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 426, 1, 1, 5, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clemThresholdHigh.setStatus('current')
if mibBuilder.loadTexts: clemThresholdHigh.setDescription('Specifies the high threshold for an error counter type. When the increase in this error counter type on an interface between two consecutive sampling exceeds the instance value of clemThresholdHigh for this error counter type consecutively for clemSamplingTimes number of times, a clemHighThresholdExceeded notification on that interface will be sent. And, the action specified by clemAction will be taken on that interface. The instance value of this clemThresholdHigh must be greater than the instance value of the clemThresholdLow of the same row.')
clemNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 426, 1, 1, 6), Bits().clone(namedValues=NamedValues(("lowThresholdExceeded", 0), ("highThresholdExceeded", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clemNotifEnable.setStatus('current')
if mibBuilder.loadTexts: clemNotifEnable.setDescription('Indicates whether the generation of a specified notification is enabled or not. If a bit corresponding to a notification is set to 1, then that notification can be generated. lowThresholdExcd -- the clemLowThresholdExceeded notification. highThresholdExcd -- the clemHighThresholdExceeded notification. ')
clemIfCounterTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 426, 1, 2, 1), )
if mibBuilder.loadTexts: clemIfCounterTable.setStatus('current')
if mibBuilder.loadTexts: clemIfCounterTable.setDescription('A table containing interface-specific link error monitoring information for each error counter type monitored by the feature.')
clemIfCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 426, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-LINK-ERROR-MONITOR-MIB", "clemIfCounterType"))
if mibBuilder.loadTexts: clemIfCounterEntry.setStatus('current')
if mibBuilder.loadTexts: clemIfCounterEntry.setDescription('An entry containing link error monitoring information on each capable interface for each error counter type monitored by the feature.')
clemIfCounterType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 426, 1, 2, 1, 1, 1), ClemCounterType())
if mibBuilder.loadTexts: clemIfCounterType.setStatus('current')
if mibBuilder.loadTexts: clemIfCounterType.setDescription('Indicates the type of link error counter to be monitored on an interface.')
clemIfCounterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 426, 1, 2, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clemIfCounterEnable.setStatus('current')
if mibBuilder.loadTexts: clemIfCounterEnable.setDescription('Specifies whether the sampling on the corresponding error counter type is enabled on an interface or not.')
clemLowThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 426, 0, 1)).setObjects(("CISCO-LINK-ERROR-MONITOR-MIB", "clemThresholdLow"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: clemLowThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: clemLowThresholdExceeded.setDescription("This notification will be sent when the increase in an error counter type on an interface between two consecutive sampling exceeds the error counter's clemThresholdLow consecutively for clemSamplingTimes number of times.")
clemHighThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 426, 0, 2)).setObjects(("CISCO-LINK-ERROR-MONITOR-MIB", "clemThresholdHigh"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: clemHighThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: clemHighThresholdExceeded.setDescription("This notification will be sent when the increase in an error counter type on an interface between two consecutive sampling exceeds the error counter's clemThresholdHigh consecutively for clemSamplingTimes number of times.")
ciscoLinkErrMonMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 426, 2, 1))
ciscoLinkErrMonMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 426, 2, 2))
ciscoLinkErrMonMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 426, 2, 1, 1)).setObjects(("CISCO-LINK-ERROR-MONITOR-MIB", "clemGlobalGroup"), ("CISCO-LINK-ERROR-MONITOR-MIB", "clemThresholdGroup"), ("CISCO-LINK-ERROR-MONITOR-MIB", "clemIfCounterGroup"), ("CISCO-LINK-ERROR-MONITOR-MIB", "clemNotificationGroup"), ("CISCO-LINK-ERROR-MONITOR-MIB", "clemNotificationControlGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLinkErrMonMIBCompliance = ciscoLinkErrMonMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoLinkErrMonMIBCompliance.setDescription('The compliance statement for CISCO-LINK-ERROR-MONITOR-MIB.')
clemGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 426, 2, 2, 1)).setObjects(("CISCO-LINK-ERROR-MONITOR-MIB", "clemEnabled"), ("CISCO-LINK-ERROR-MONITOR-MIB", "clemSamplingInterval"), ("CISCO-LINK-ERROR-MONITOR-MIB", "clemSamplingTimes"), ("CISCO-LINK-ERROR-MONITOR-MIB", "clemAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clemGlobalGroup = clemGlobalGroup.setStatus('current')
if mibBuilder.loadTexts: clemGlobalGroup.setDescription('A collection of objects to configure link error monitoring functionality globally for all interfaces on the device.')
clemThresholdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 426, 2, 2, 2)).setObjects(("CISCO-LINK-ERROR-MONITOR-MIB", "clemThresholdLow"), ("CISCO-LINK-ERROR-MONITOR-MIB", "clemThresholdHigh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clemThresholdGroup = clemThresholdGroup.setStatus('current')
if mibBuilder.loadTexts: clemThresholdGroup.setDescription('A collection of objects to configure the threshold for the monitored error counters by this feature.')
clemIfCounterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 426, 2, 2, 3)).setObjects(("CISCO-LINK-ERROR-MONITOR-MIB", "clemIfCounterEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clemIfCounterGroup = clemIfCounterGroup.setStatus('current')
if mibBuilder.loadTexts: clemIfCounterGroup.setDescription('A collection of objects to configure link error monitoring functionality at interface level on each error counter type.')
clemNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 426, 2, 2, 4)).setObjects(("CISCO-LINK-ERROR-MONITOR-MIB", "clemLowThresholdExceeded"), ("CISCO-LINK-ERROR-MONITOR-MIB", "clemHighThresholdExceeded"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clemNotificationGroup = clemNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: clemNotificationGroup.setDescription('A collection of notifications for link error monitoring feature.')
clemNotificationControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 426, 2, 2, 5)).setObjects(("CISCO-LINK-ERROR-MONITOR-MIB", "clemNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clemNotificationControlGroup = clemNotificationControlGroup.setStatus('current')
if mibBuilder.loadTexts: clemNotificationControlGroup.setDescription('A collection of objects to control the notification generation for link error monitoring feature.')
mibBuilder.exportSymbols("CISCO-LINK-ERROR-MONITOR-MIB", clemInterfaceObjects=clemInterfaceObjects, clemLowThresholdExceeded=clemLowThresholdExceeded, clemThresholdHigh=clemThresholdHigh, ciscoLinkErrMonMIBGroups=ciscoLinkErrMonMIBGroups, clemNotificationGroup=clemNotificationGroup, clemSamplingTimes=clemSamplingTimes, clemGlobalGroup=clemGlobalGroup, clemHighThresholdExceeded=clemHighThresholdExceeded, clemIfCounterEnable=clemIfCounterEnable, ciscoLinkErrMonMIBConform=ciscoLinkErrMonMIBConform, clemThresholdEntry=clemThresholdEntry, clemNotifEnable=clemNotifEnable, ciscoLinkErrorMonitorMIB=ciscoLinkErrorMonitorMIB, clemNotificationControlGroup=clemNotificationControlGroup, clemThresholdCounterType=clemThresholdCounterType, clemThresholdTable=clemThresholdTable, ClemCounterType=ClemCounterType, clemIfCounterTable=clemIfCounterTable, ciscoLinkErrMonMIBCompliance=ciscoLinkErrMonMIBCompliance, clemAction=clemAction, clemIfCounterEntry=clemIfCounterEntry, clemEnabled=clemEnabled, PYSNMP_MODULE_ID=ciscoLinkErrorMonitorMIB, clemIfCounterType=clemIfCounterType, clemThresholdGroup=clemThresholdGroup, clemThresholdLow=clemThresholdLow, clemSamplingInterval=clemSamplingInterval, clemGlobalObjects=clemGlobalObjects, clemIfCounterGroup=clemIfCounterGroup, ciscoLinkErrMonMIBObjects=ciscoLinkErrMonMIBObjects, ciscoLinkErrMonMIBCompliances=ciscoLinkErrMonMIBCompliances, ciscoLinkErrMonMIBNotifs=ciscoLinkErrMonMIBNotifs)
