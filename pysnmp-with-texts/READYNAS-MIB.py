#
# PySNMP MIB module READYNAS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/READYNAS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:55:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, NotificationType, Gauge32, NotificationType, enterprises, Bits, MibIdentifier, Counter32, IpAddress, Counter64, Unsigned32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Integer32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "NotificationType", "Gauge32", "NotificationType", "enterprises", "Bits", "MibIdentifier", "Counter32", "IpAddress", "Counter64", "Unsigned32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Integer32", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
netgear = MibIdentifier((1, 3, 6, 1, 4, 1, 4526))
productID = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 100))
readyNAS = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 100, 12))
nasManager = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 18))
nasMgrSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasMgrSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: nasMgrSoftwareVersion.setDescription('Version information for the ReadyNAS NAS Manager software.')
diskTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 18, 3), )
if mibBuilder.loadTexts: diskTable.setStatus('mandatory')
if mibBuilder.loadTexts: diskTable.setDescription('A table of physical disks attached to the NAS device.')
diskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 18, 3, 1), ).setIndexNames((0, "READYNAS-MIB", "diskNumber"))
if mibBuilder.loadTexts: diskEntry.setStatus('mandatory')
if mibBuilder.loadTexts: diskEntry.setDescription('An entry in the physical disk table.')
diskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 18, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskNumber.setStatus('mandatory')
if mibBuilder.loadTexts: diskNumber.setDescription('Instance number of the disk entry.')
diskChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 18, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskChannel.setStatus('mandatory')
if mibBuilder.loadTexts: diskChannel.setDescription('Channel number that the disk is connected to.')
diskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 18, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskModel.setStatus('mandatory')
if mibBuilder.loadTexts: diskModel.setDescription("The disk drive's model name.")
diskState = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 18, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskState.setStatus('mandatory')
if mibBuilder.loadTexts: diskState.setDescription('The current state of the Disk. Possible states: 0: Online 1: Offline')
diskTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 18, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: diskTemperature.setDescription('temperature of this disk.')
fanTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 18, 4), )
if mibBuilder.loadTexts: fanTable.setStatus('current')
fanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 18, 4, 1), ).setIndexNames((0, "READYNAS-MIB", "fanNumber"))
if mibBuilder.loadTexts: fanEntry.setStatus('current')
fanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 18, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanNumber.setStatus('mandatory')
if mibBuilder.loadTexts: fanNumber.setDescription('Instance number of this fan entry.')
fanRPM = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 18, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanRPM.setStatus('mandatory')
if mibBuilder.loadTexts: fanRPM.setDescription('The current speed of the fan.')
temperatureTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 18, 5), )
if mibBuilder.loadTexts: temperatureTable.setStatus('mandatory')
temperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 18, 5, 1), ).setIndexNames((0, "READYNAS-MIB", "temperatureNumber"))
if mibBuilder.loadTexts: temperatureEntry.setStatus('mandatory')
temperatureNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 18, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureNumber.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureNumber.setDescription('Instance number of this temperature probe entry.')
temperatureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 18, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureValue.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureValue.setDescription('The current temperature of this probe.')
temperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 18, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureStatus.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureStatus.setDescription('The current temperature status.')
volumeTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 18, 7), )
if mibBuilder.loadTexts: volumeTable.setStatus('mandatory')
if mibBuilder.loadTexts: volumeTable.setDescription('A table of active volumes on the NAS device.')
volumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 18, 7, 1), ).setIndexNames((0, "READYNAS-MIB", "volumeNumber"))
if mibBuilder.loadTexts: volumeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: volumeEntry.setDescription('An entry in the volume table.')
volumeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 18, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeNumber.setStatus('mandatory')
if mibBuilder.loadTexts: volumeNumber.setDescription('Instance number of the volume entry.')
volumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 18, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeName.setStatus('mandatory')
if mibBuilder.loadTexts: volumeName.setDescription('The name of the volume.')
volumeRAIDLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 18, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeRAIDLevel.setStatus('mandatory')
if mibBuilder.loadTexts: volumeRAIDLevel.setDescription('The RAID level of the volume.')
volumeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 18, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: volumeStatus.setDescription('The severity of the volume. Possible values: 1: Clean 2: Error 16: Initialized (Normal)')
volumeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 18, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeSize.setStatus('mandatory')
if mibBuilder.loadTexts: volumeSize.setDescription('The size of the volume in megabytes.')
volumeFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 18, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeFreeSpace.setStatus('mandatory')
if mibBuilder.loadTexts: volumeFreeSpace.setDescription('Free space on the volume in megabytes.')
aryMgrEvts = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 18, 200))
controllerNameEv = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 200, 201), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerNameEv.setStatus('mandatory')
if mibBuilder.loadTexts: controllerNameEv.setDescription('Controller Name for which trap is generated.')
channelNumberEv = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 200, 202), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelNumberEv.setStatus('mandatory')
if mibBuilder.loadTexts: channelNumberEv.setDescription('Channel Number for which trap is generated.')
targetIDEv = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 200, 203), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: targetIDEv.setStatus('mandatory')
if mibBuilder.loadTexts: targetIDEv.setDescription('SCSI ID of the device for which trap is generated.')
virtualDiskNameEv = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 200, 204), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskNameEv.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskNameEv.setDescription('Virtual Disk for which trap is generated.')
arrayDiskNameEv = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 200, 205), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskNameEv.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskNameEv.setDescription('Array Disk for which trap is generated.')
oldVDConfigEv = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 200, 206), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oldVDConfigEv.setStatus('mandatory')
if mibBuilder.loadTexts: oldVDConfigEv.setDescription('Current Virtual Disk configuration for which trap is generated')
newVDConfigEv = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 200, 207), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: newVDConfigEv.setStatus('mandatory')
if mibBuilder.loadTexts: newVDConfigEv.setDescription('New Virtual Disk configuration for which trap is generated.')
enclosureNumberEv = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 200, 208), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureNumberEv.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureNumberEv.setDescription('Enclosure Number for which trap is generated.')
unitNumberEv = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 200, 209), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitNumberEv.setStatus('mandatory')
if mibBuilder.loadTexts: unitNumberEv.setDescription('Unit Number for which trap is generated. (Fan, Power Supply, Temperature Probe)')
enclosureNameEv = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 200, 210), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureNameEv.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureNameEv.setDescription('Enclosure Name for which trap is generated.')
unitNameEv = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 200, 211), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitNameEv.setStatus('mandatory')
if mibBuilder.loadTexts: unitNameEv.setDescription('Unit Number for which trap is generated. (Fan, Power Supply, Temperature Probe)')
timeEv = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 200, 212), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeEv.setStatus('mandatory')
if mibBuilder.loadTexts: timeEv.setDescription('Amount of time specified in the trap message.')
volumeNameEv = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 200, 213), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeNameEv.setStatus('mandatory')
if mibBuilder.loadTexts: volumeNameEv.setDescription('Volume Drive Letter for which trap is generated.')
fanFailureMesg = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 400), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFailureMesg.setStatus('current')
if mibBuilder.loadTexts: fanFailureMesg.setDescription('Failure message for Fan')
tempFailureMesg = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 401), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempFailureMesg.setStatus('current')
if mibBuilder.loadTexts: tempFailureMesg.setDescription('Failure message for system temperature')
powerFailureMesg = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 402), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerFailureMesg.setStatus('current')
if mibBuilder.loadTexts: powerFailureMesg.setDescription('Failure message for system power')
raidMesg = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 403), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidMesg.setStatus('current')
if mibBuilder.loadTexts: raidMesg.setDescription('RAID hotplug event message')
snapshotMesg = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 404), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotMesg.setStatus('current')
if mibBuilder.loadTexts: snapshotMesg.setDescription('Snapshot messages')
upsMesg = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 405), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsMesg.setStatus('current')
if mibBuilder.loadTexts: upsMesg.setDescription('UPS status message')
sataMesg = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 406), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sataMesg.setStatus('current')
if mibBuilder.loadTexts: sataMesg.setDescription('SATA hotplug event messages')
volumeMesg = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 407), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeMesg.setStatus('current')
if mibBuilder.loadTexts: volumeMesg.setDescription('Disk usage warning')
diskTempWarningMesg = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 408), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskTempWarningMesg.setStatus('current')
if mibBuilder.loadTexts: diskTempWarningMesg.setDescription('Disk temperature warning messages')
backupMesg = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 409), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupMesg.setStatus('current')
if mibBuilder.loadTexts: backupMesg.setDescription('Backup job status messages')
nasTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 18, 300))
fanFailure = NotificationType((1, 3, 6, 1, 4, 1, 4526, 18, 300) + (0,10)).setObjects(("READYNAS-MIB", "fanFailureMesg"))
if mibBuilder.loadTexts: fanFailure.setDescription('Fan failure, fan speed is %s.')
tempFailure = NotificationType((1, 3, 6, 1, 4, 1, 4526, 18, 300) + (0,20)).setObjects(("READYNAS-MIB", "tempFailureMesg"))
if mibBuilder.loadTexts: tempFailure.setDescription('Temperature sensor reports out of normal range. ')
powerVoltage = NotificationType((1, 3, 6, 1, 4, 1, 4526, 18, 300) + (0,30)).setObjects(("READYNAS-MIB", "powerFailureMesg"))
if mibBuilder.loadTexts: powerVoltage.setDescription('System power is out of spec, please check system status! ')
raidEventNotice = NotificationType((1, 3, 6, 1, 4, 1, 4526, 18, 300) + (0,40)).setObjects(("READYNAS-MIB", "raidMesg"))
if mibBuilder.loadTexts: raidEventNotice.setDescription('RAID event detected! ')
snapshotEventNotice = NotificationType((1, 3, 6, 1, 4, 1, 4526, 18, 300) + (0,50)).setObjects(("READYNAS-MIB", "snapshotMesg"))
if mibBuilder.loadTexts: snapshotEventNotice.setDescription('Snapshot event detected! ')
hotplugDiskNotice = NotificationType((1, 3, 6, 1, 4, 1, 4526, 18, 300) + (0,60)).setObjects(("READYNAS-MIB", "sataMesg"))
if mibBuilder.loadTexts: hotplugDiskNotice.setDescription(' Hotplug disk event detected! ')
upsEventNotice = NotificationType((1, 3, 6, 1, 4, 1, 4526, 18, 300) + (0,70)).setObjects(("READYNAS-MIB", "upsMesg"))
if mibBuilder.loadTexts: upsEventNotice.setDescription('UPS status. ')
volumeNotice = NotificationType((1, 3, 6, 1, 4, 1, 4526, 18, 300) + (0,80)).setObjects(("READYNAS-MIB", "volumeMesg"))
if mibBuilder.loadTexts: volumeNotice.setDescription('Volume is approaching capacity. ')
diskTempWarning = NotificationType((1, 3, 6, 1, 4, 1, 4526, 18, 300) + (0,90)).setObjects(("READYNAS-MIB", "volumeMesg"))
if mibBuilder.loadTexts: diskTempWarning.setDescription('Disk temperature warning. ')
backupNotice = NotificationType((1, 3, 6, 1, 4, 1, 4526, 18, 300) + (0,100)).setObjects(("READYNAS-MIB", "backupMesg"))
if mibBuilder.loadTexts: backupNotice.setDescription('Backup job status. ')
mibBuilder.exportSymbols("READYNAS-MIB", raidEventNotice=raidEventNotice, productID=productID, hotplugDiskNotice=hotplugDiskNotice, temperatureValue=temperatureValue, tempFailure=tempFailure, powerFailureMesg=powerFailureMesg, temperatureStatus=temperatureStatus, fanFailureMesg=fanFailureMesg, readyNAS=readyNAS, snapshotMesg=snapshotMesg, volumeStatus=volumeStatus, volumeNumber=volumeNumber, diskNumber=diskNumber, controllerNameEv=controllerNameEv, nasManager=nasManager, volumeName=volumeName, volumeSize=volumeSize, arrayDiskNameEv=arrayDiskNameEv, fanTable=fanTable, fanFailure=fanFailure, volumeEntry=volumeEntry, aryMgrEvts=aryMgrEvts, diskTable=diskTable, temperatureEntry=temperatureEntry, volumeTable=volumeTable, upsEventNotice=upsEventNotice, diskModel=diskModel, temperatureTable=temperatureTable, channelNumberEv=channelNumberEv, diskChannel=diskChannel, volumeNameEv=volumeNameEv, diskTempWarningMesg=diskTempWarningMesg, volumeNotice=volumeNotice, volumeMesg=volumeMesg, virtualDiskNameEv=virtualDiskNameEv, unitNameEv=unitNameEv, targetIDEv=targetIDEv, backupMesg=backupMesg, volumeRAIDLevel=volumeRAIDLevel, oldVDConfigEv=oldVDConfigEv, powerVoltage=powerVoltage, diskTempWarning=diskTempWarning, newVDConfigEv=newVDConfigEv, snapshotEventNotice=snapshotEventNotice, volumeFreeSpace=volumeFreeSpace, backupNotice=backupNotice, diskTemperature=diskTemperature, nasTraps=nasTraps, nasMgrSoftwareVersion=nasMgrSoftwareVersion, diskEntry=diskEntry, fanNumber=fanNumber, unitNumberEv=unitNumberEv, tempFailureMesg=tempFailureMesg, temperatureNumber=temperatureNumber, fanEntry=fanEntry, raidMesg=raidMesg, sataMesg=sataMesg, upsMesg=upsMesg, enclosureNumberEv=enclosureNumberEv, enclosureNameEv=enclosureNameEv, netgear=netgear, fanRPM=fanRPM, diskState=diskState, timeEv=timeEv)
