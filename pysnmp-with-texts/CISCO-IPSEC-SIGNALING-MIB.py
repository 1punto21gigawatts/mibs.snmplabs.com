#
# PySNMP MIB module CISCO-IPSEC-SIGNALING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IPSEC-SIGNALING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:01:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
CIPsecPhase1TunnelIndex, CIPsecEncryptionKeySize, CIPsecTunnelStatus, CIPsecPhase1PeerIdentityType, CIPsecIkeHashAlgorithm, CIPsecIkeAuthMethod, CIPsecControlProtocol, CIPsecEncryptAlgorithm = mibBuilder.importSymbols("CISCO-IPSEC-TC", "CIPsecPhase1TunnelIndex", "CIPsecEncryptionKeySize", "CIPsecTunnelStatus", "CIPsecPhase1PeerIdentityType", "CIPsecIkeHashAlgorithm", "CIPsecIkeAuthMethod", "CIPsecControlProtocol", "CIPsecEncryptAlgorithm")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
NotificationType, TimeTicks, Counter32, Unsigned32, Bits, MibIdentifier, Counter64, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, IpAddress, iso, ObjectIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "TimeTicks", "Counter32", "Unsigned32", "Bits", "MibIdentifier", "Counter64", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "IpAddress", "iso", "ObjectIdentity", "Gauge32")
TextualConvention, TimeStamp, TruthValue, DisplayString, TimeInterval = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeStamp", "TruthValue", "DisplayString", "TimeInterval")
ciscoIPsecSignalingMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 438))
ciscoIPsecSignalingMIB.setRevisions(('2004-09-22 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoIPsecSignalingMIB.setRevisionsDescriptions((' Initial version of the MIB. ',))
if mibBuilder.loadTexts: ciscoIPsecSignalingMIB.setLastUpdated('200409220000Z')
if mibBuilder.loadTexts: ciscoIPsecSignalingMIB.setOrganization('Cisco Systems')
if mibBuilder.loadTexts: ciscoIPsecSignalingMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-ipsecmib@external.cisco.com ')
if mibBuilder.loadTexts: ciscoIPsecSignalingMIB.setDescription(" This MIB Module models status, performance and failures of a protocol with the generic characteristics of signalling protocols used with IPsec and FC-SP protocols. Examples of such protocols include IKE, KINK, etc. This MIB views the common attributes of such protocols. Signaling protocols are also referred in this document as 'Control Protocols', since they perform session control. This MIB is an attempt to capture the generic aspects of the signaling activity. The protocol-specific aspects of a signaling protocol still need to be captured in a protocol-specific MIB (e.g., CISCO-IKE-FLOW-MIB, etc.). Acronyms The following acronyms are used in this document: IPsec: Secure IP Protocol VPN: Virtual Private Network ISAKMP: Internet Security Association and Key Exchange Protocol IKE: Internet Key Exchange Protocol SA: Security Association (ref: rfc2408). Phase 1 Tunnel: An ISAKMP SA can be regarded as representing a flow of ISAKMP/IKE traffic. Hence an ISAKMP is referred to as a 'Phase 1 Tunnel' in this document. Control Tunnel: Another term for a Phase 1 Tunnel. Phase 2 Tunnel: An instance of a non-ISAKMP SA bundle in which all the SA share the same proxy identifiers (IDii,IDir) protect the same stream of application traffic. Such an SA bundle is termed a 'Phase 2 Tunnel'. Note that a Phase 2 tunnel may comprise different SA bundles and different number of SA bundles at different times (due to key refresh). History of the MIB A precursor to this MIB was the IPsec Flow Monitor MIB, which combined the objects pertaining to IKE and IPsec (Phase-2) into a single MIB module. Furthermore, the MIB supported only one signaling protocol, IKEv1, in addition to manual keying. The MIB was written by Tivoli and implemented in IBM Nways routers in 1999. During late 1999, Cisco adopted the MIB and together with Tivoli publised the IPsec Flow Monitor MIB in IETF IPsec WG in draft-ietf-ipsec-flow-monitoring-mib-00.txt. In 2000, the MIB was Cisco-ized and implemented as CISCO-IPSEC-FLOW-MONITOR-MIB in IOS and VPN3000 platforms. With the evolution of IKEv2, the MIB was modified and presented to the IPsec WG again in May 2003 in draft-ietf-ipsec-flow-monitoring-mib-02.txt. With the emergence to multiple signaling protocols, it has further evolved to define separate set of MIB modules to instrument IPsec signaling alone. Thus, this MIB module is now the generic IPsec signaling MIB. Overview of MIB The MIB contains major groups of objects which are used to manage the generic aspects of IPsec signaling. These groups include a global statistics, control tunnel table, Peer association group, control tunnel history group, signaling failure group and notification group. The global statistics, tunnel table and peer association groups aid in the real-time monitoring of IPsec signaling activity. The History group is to aid applications that do trending analysis. The Failure group is to enable an operator to do troubleshooting and debugging. Further, counters are supported to aid detection of potential security violations. The notifications are modeled as generic IPsec control notifications and are parameterized by the identity of the specific signaling protocol which caused the notification to be issued. ")
ciscoIPsecSigMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 438, 0))
ciscoIPsecSigMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 438, 1))
ciscoIPsecSigMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 438, 2))
cisgIpsSgCurrentActivity = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1))
cisgIpsSgPeerAssociations = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 2))
cisgIpsSgHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 3))
cisgIpsSgFailures = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 4))
cisgIpsSgNotificationCntl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 5))
cisgIpsSgGlobalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 1), )
if mibBuilder.loadTexts: cisgIpsSgGlobalStatsTable.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgGlobalStatsTable.setDescription(" This Signaling Protocol global statistics table. There is one row in the following table for each signaling protocol implemented by the managed entity. There is no row corresponding to the instance 'cpNone'. If the managed entity implements more than one signaling protocol, the aggregate statistics across all the supported signaling protocols must be computed by the network management station manually; in other words, there is no conceptual row in this table corresponding to 'all signaling protocols'. ")
cisgIpsSgGlobalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgProtocol"))
if mibBuilder.loadTexts: cisgIpsSgGlobalStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgGlobalStatsEntry.setDescription(' Each entry contains the global statistics pertaining to a specific signaling protocol. ')
cisgIpsSgProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 1, 1, 1), CIPsecControlProtocol())
if mibBuilder.loadTexts: cisgIpsSgProtocol.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgProtocol.setDescription(' The identity of the signaling protocol used by the control tunnel corresponding to this conceptual row. ')
cisgIpsSgGlobalActiveTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgGlobalActiveTunnels.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgGlobalActiveTunnels.setDescription(' The number of currently active Phase-1 control tunnels. ')
cisgIpsSgGlobalPreviousTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 1, 1, 3), Counter64()).setUnits('SAs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgGlobalPreviousTunnels.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgGlobalPreviousTunnels.setDescription(' High capacity counter to accumulate the total number of Phase-1 control tunnels that are no longer active. ')
cisgIpsSgGlobalInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 1, 1, 4), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgGlobalInOctets.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgGlobalInOctets.setDescription(' The total number of octets received by all currently and previously active Phase-1 Control Tunnels. ')
cisgIpsSgGlobalInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 1, 1, 5), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgGlobalInPkts.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgGlobalInPkts.setDescription(' The total number of packets received by all currently and previously active Phase-1 Control Tunnels. ')
cisgIpsSgGlobalInDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 1, 1, 6), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgGlobalInDropPkts.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgGlobalInDropPkts.setDescription(' The total number of packets which were dropped during receive processing by all currently and previously active Phase-1 Control Tunnels. ')
cisgIpsSgGlobalInNotifys = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 1, 1, 7), Counter64()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgGlobalInNotifys.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgGlobalInNotifys.setDescription(' The total number of notification payloads received by all currently and previously active Phase-1 Control Tunnels. ')
cisgIpsSgGlobalInP2SaDelReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 1, 1, 8), Counter64()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgGlobalInP2SaDelReqs.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgGlobalInP2SaDelReqs.setDescription(' The total number of Phase-2 security association delete requests received by all currently and previously active and Phase-1 Control Tunnels. ')
cisgIpsSgGlobalOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 1, 1, 9), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgGlobalOutOctets.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgGlobalOutOctets.setDescription(' The total number of octets sent by all currently and previously active and Phase-1 Control Tunnels. ')
cisgIpsSgGlobalOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 1, 1, 10), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgGlobalOutPkts.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgGlobalOutPkts.setDescription(' The total number of packets sent by all currently and previously active and Phase-1 Control Tunnels. ')
cisgIpsSgGlobalOutDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 1, 1, 11), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgGlobalOutDropPkts.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgGlobalOutDropPkts.setDescription(' The total number of packets which were dropped during send processing by all currently and previously active Phase-1 Control Tunnels. ')
cisgIpsSgGlobalOutNotifys = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 1, 1, 12), Counter64()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgGlobalOutNotifys.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgGlobalOutNotifys.setDescription(' The total number of notification payloads sent by all currently and previously active Phase-1 Control Tunnels. ')
cisgIpsSgGlobalOutP2SaDelReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 1, 1, 13), Counter64()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgGlobalOutP2SaDelReqs.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgGlobalOutP2SaDelReqs.setDescription(' The total number of Phase-2 tunnel delete requests sent by all currently and previously active Phase-1 Control Tunnels. ')
cisgIpsSgGlobalInitTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 1, 1, 14), Counter64()).setUnits('SAs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgGlobalInitTunnels.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgGlobalInitTunnels.setDescription(' The total number of Phase-1 currently and previously active Control Tunnels which were locally initiated. ')
cisgIpsSgGlobalInitTunnelFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 1, 1, 15), Counter64()).setUnits('SAs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgGlobalInitTunnelFails.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgGlobalInitTunnelFails.setDescription(' The total number of Phase-1 currently and previously active Control Tunnels which were locally initiated and failed to activate. ')
cisgIpsSgGlobalRespTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 1, 1, 16), Counter64()).setUnits('SAs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgGlobalRespTunnels.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgGlobalRespTunnels.setDescription(' The total number of Phase-1 currently and previously active Control Tunnels which were remotely initiated. ')
cisgIpsSgGlobalRespTunnelFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 1, 1, 17), Counter64()).setUnits('SAs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgGlobalRespTunnelFails.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgGlobalRespTunnelFails.setDescription(' The total number of Phase-1 currently and previously active Control Tunnels which were remotely initiated and failed to activate. ')
cisgIpsSgGlobalSysCapFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 1, 1, 18), Counter64()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgGlobalSysCapFails.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgGlobalSysCapFails.setDescription(' The total number of system capacity failures which occurred during processing of all current and previously active Phase-1 Control Tunnels. ')
cisgIpsSgGlobalAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 1, 1, 19), Counter64()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgGlobalAuthFails.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgGlobalAuthFails.setDescription(' The total number of authentications which ended in failure by all current and previous Phase-1 Control Tunnels. ')
cisgIpsSgGlobalDecryptFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 1, 1, 20), Counter64()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgGlobalDecryptFails.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgGlobalDecryptFails.setDescription(' The total number of decryption operations in all current and previous Phase-1 Control Tunnels which failed to yield the original payload. ')
cisgIpsSgGlobalHashValidFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 1, 1, 21), Counter64()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgGlobalHashValidFails.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgGlobalHashValidFails.setDescription(' The total number of hash validation operations in all current and previous Phase-1 Control Tunnels which resulted in failure. ')
cisgIpsSgGlobalBadTunnelRefs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 1, 1, 22), Counter64()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgGlobalBadTunnelRefs.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgGlobalBadTunnelRefs.setDescription(' The total number of incoming packets that refer to non-existent Phase-1 control tunnels which occurred during processing of all current and previous Phase-1 Control Tunnels. ')
cisgIpsSgGlobalInP1SaDelReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 1, 1, 23), Counter64()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgGlobalInP1SaDelReqs.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgGlobalInP1SaDelReqs.setDescription(' The total number of Phase-1 security association delete requests received by all currently and previously active and Phase-1 Control Tunnels. ')
cisgIpsSgGlobalOutP1SaDelReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 1, 1, 24), Counter64()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgGlobalOutP1SaDelReqs.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgGlobalOutP1SaDelReqs.setDescription(' The total number of Phase-1 security association delete requests sent by all currently and previously active and Phase-1 Control Tunnels. ')
cisgIpsSgTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 2), )
if mibBuilder.loadTexts: cisgIpsSgTunnelTable.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunnelTable.setDescription(' This table lists active Phase-1 control tunnels. There is one entry in this table for each active Control Tunnel. ')
cisgIpsSgTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgProtocol"), (0, "CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunIndex"))
if mibBuilder.loadTexts: cisgIpsSgTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunnelEntry.setDescription(' Each entry contains the attributes associated with an active Phase-1 control Tunnel. ')
cisgIpsSgTunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 2, 1, 1), CIPsecPhase1TunnelIndex())
if mibBuilder.loadTexts: cisgIpsSgTunIndex.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunIndex.setDescription(' The index of the Phase-1 Tunnel Table. The value of the index is a number which begins at 1 and is incremented with each tunnel that is created. The value of this object will wrap at 4,294,967,296. ')
cisgIpsSgTunLocalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 2, 1, 2), CIPsecPhase1PeerIdentityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunLocalType.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunLocalType.setDescription(' The type of the identity used by the managed entity authenticating itself to the peer in the setup of the tunnel corresponding to this conceptual row. ')
cisgIpsSgTunLocalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunLocalValue.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunLocalValue.setDescription(' The value of the local peer identity. ')
cisgIpsSgTunLocalAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 2, 1, 4), CIPsecPhase1PeerIdentityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunLocalAddressType.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunLocalAddressType.setDescription(' The type of the address of the local endpoint of the Phase-1 Tunnel. ')
cisgIpsSgTunLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 2, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunLocalAddress.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunLocalAddress.setDescription(' The address of the local endpoint for the Phase-1 Tunnel. ')
cisgIpsSgTunLocalName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 2, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunLocalName.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunLocalName.setDescription(' The DNS name of the local IP address for the Phase-1 Tunnel. If the DNS name associated with the local tunnel endpoint is not known, then the value of this object will be a zero-length string. ')
cisgIpsSgTunRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 2, 1, 7), CIPsecPhase1PeerIdentityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunRemoteType.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunRemoteType.setDescription(' The type of the identity used by the remote peer in authenticating itself to the local peer in the setup of the tunnel corresponding to this conceptual row. ')
cisgIpsSgTunRemoteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 2, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunRemoteValue.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunRemoteValue.setDescription(' The value of the remote peer identity. ')
cisgIpsSgTunRemoteAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 2, 1, 9), CIPsecPhase1PeerIdentityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunRemoteAddressType.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunRemoteAddressType.setDescription(' The type of the address of the remote endpoint for the Phase-1 Tunnel. ')
cisgIpsSgTunRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 2, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunRemoteAddress.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunRemoteAddress.setDescription(' The address of the remote endpoint of the Phase-1 Tunnel. ')
cisgIpsSgTunRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 2, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunRemoteName.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunRemoteName.setDescription(' The DNS name of the remote address of Phase-1 Tunnel. If the DNS name associated with the remote tunnel endpoint is not known, then the value of this object will be a zero-length string. ')
cisgIpsSgTunEncryptAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 2, 1, 12), CIPsecEncryptAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunEncryptAlgo.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunEncryptAlgo.setDescription(' The encryption algorithm used in Phase-1 negotiations on the control tunnel corresponding to this conceptual row. ')
cisgIpsSgTunEncryptKeySize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 2, 1, 13), CIPsecEncryptionKeySize()).setUnits('Bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunEncryptKeySize.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunEncryptKeySize.setDescription(' The size in bits of the key used for encrypting payloads by the tunnel corresponding to this conceptual row. ')
cisgIpsSgTunHashAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 2, 1, 14), CIPsecIkeHashAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunHashAlgo.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunHashAlgo.setDescription(' The hash algorithm used in Phase-1 negotiations on the control tunnel corresponding to this conceptual row. ')
cisgIpsSgTunAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 2, 1, 15), CIPsecIkeAuthMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunAuthMethod.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunAuthMethod.setDescription(' The authentication method used in Phase-1 negotiations on the control tunnel corresponding to this conceptual row. ')
cisgIpsSgTunLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 2, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunLifeTime.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunLifeTime.setDescription(' The negotiated LifeTime of the Phase-1 Tunnel in seconds. ')
cisgIpsSgTunActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 2, 1, 17), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunActiveTime.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunActiveTime.setDescription(' The length of time the Phase-1 tunnel has been active in hundredths of seconds. ')
cisgIpsSgTunInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 2, 1, 18), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunInOctets.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunInOctets.setDescription(' The total number of octets received by this Phase-1 Tunnel. ')
cisgIpsSgTunInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 2, 1, 19), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunInPkts.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunInPkts.setDescription(' The total number of packets received by this Phase-1 Tunnel. ')
cisgIpsSgTunInDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 2, 1, 20), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunInDropPkts.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunInDropPkts.setDescription(' The total number of packets dropped by this Phase-1 Tunnel during receive processing. ')
cisgIpsSgTunInNotifys = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 2, 1, 21), Counter32()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunInNotifys.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunInNotifys.setDescription(' The total number of notification payloads received by this Phase-1 Tunnel. ')
cisgIpsSgTunOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 2, 1, 22), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunOutOctets.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunOutOctets.setDescription(' The total number of octets sent by this Phase-1 Tunnel. ')
cisgIpsSgTunOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 2, 1, 23), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunOutPkts.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunOutPkts.setDescription(' The total number of packets sent by this Phase-1 Tunnel. ')
cisgIpsSgTunOutDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 2, 1, 24), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunOutDropPkts.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunOutDropPkts.setDescription(' The total number of packets dropped by this Phase-1 Tunnel during send processing. ')
cisgIpsSgTunOutNotifys = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 2, 1, 25), Counter32()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunOutNotifys.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunOutNotifys.setDescription(' The total number of notification payloads sent by this Phase-1 Tunnel. ')
cisgIpsSgTunOutP2SaDelReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 2, 1, 26), Counter32()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunOutP2SaDelReqs.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunOutP2SaDelReqs.setDescription(' The total number of Phase-2 security association delete requests sent by this Phase-1 Tunnel. ')
cisgIpsSgTunStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 2, 1, 27), CIPsecTunnelStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunStatus.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunStatus.setDescription(' The status of the MIB table row. ')
cisgIpsSgTunAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 1, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("clear", 2), ("rekey", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisgIpsSgTunAction.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunAction.setDescription("The action to be taken on this tunnel. If 'clear', then this tunnel is cleared. If 'rekey', then rekeying is forced on this tunnel. The value 'none' would be returned on doing read of this object. ")
cisgIpsSgHistGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 3, 1))
cisgIpsSgHistGlobalCntl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 3, 1, 1))
cisgIpsSgHistTableSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisgIpsSgHistTableSize.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgHistTableSize.setDescription(" The window size of the control tunnel History Tables. The control tunnel history table is implemented as a sliding window in which at most the last 'cisgIpsSgHistTableSize' entries are maintained. This object is, hence, used to control the size of the tunnel history table. An implementation may choose suitable values for this element based on the available resources. If an SNMP SET request specifies a value outside this window for this element, in appropriate SNMP error code should be returned. Setting this value to zero is equivalent to deleting all conceptual rows in the archiving table ('cisgIpsSgTunnelHistTable') and disabling the archiving of entries in the tables. ")
cisgIpsSgTunnelHistTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 3, 2), )
if mibBuilder.loadTexts: cisgIpsSgTunnelHistTable.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunnelHistTable.setDescription(" The control tunnel History Table. This table lists all instances of control tunnels that were successfully established but which are no longer in operation. An entry transitions to this table from the active tunnel table ('cisgIpsSgTunnelTable') into this table after it expires, is aborted or terminated. This table is conceptually a sliding window in which only the last 'N' entries are maintained, where 'N' is the value of the object 'cisgIpsSgHistTableSize'. If the value of 'cisgIpsSgHistTableSize' is 0, archiving of entries in this table is disabled. ")
cisgIpsSgTunnelHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgProtocol"), (0, "CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunHistIndex"))
if mibBuilder.loadTexts: cisgIpsSgTunnelHistEntry.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunnelHistEntry.setDescription(' Each entry contains the attributes associated with a previously active control Tunnel. ')
cisgIpsSgTunHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 3, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cisgIpsSgTunHistIndex.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunHistIndex.setDescription(' The index of the Phase-1 Control Tunnel History Table. This object has no relationship to the cisgIpsSgTunIndex of the tunnel when it was active. The value of the index is a number which begins at one and is incremented with each tunnel that ends. The value of this object will wrap at 4,294,967,296. ')
cisgIpsSgTunHistTermReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("operRequest", 3), ("peerDelRequest", 4), ("peerLost", 5), ("applicationInitiated", 6), ("userAuthFailure", 7), ("localFailure", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunHistTermReason.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunHistTermReason.setDescription(' The reason the Phase-1 Control Tunnel was terminated. Possible reasons include: 1 = other 2 = normal termination 3 = operator request 4 = peer delete request was received 5 = contact with peer was lost 6 = applicationInitiated (eg: L2TP requesting the termination) 7 = failure of extended user authentication 8 = local failure occurred. ')
cisgIpsSgTunHistActiveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 3, 2, 1, 3), CIPsecPhase1TunnelIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunHistActiveIndex.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunHistActiveIndex.setDescription(' The index of the previously active Control Tunnel. This object must correspond to an expired IKE tunnel. ')
cisgIpsSgTunHistPeerLocalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 3, 2, 1, 4), CIPsecPhase1PeerIdentityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunHistPeerLocalType.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunHistPeerLocalType.setDescription(' The type of local peer identity. ')
cisgIpsSgTunHistPeerLocalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 3, 2, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunHistPeerLocalValue.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunHistPeerLocalValue.setDescription(' The value of the local peer identity. ')
cisgIpsSgTunHistPeerIntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 3, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunHistPeerIntIndex.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunHistPeerIntIndex.setDescription(' The arbitrary index to keep local-remote peer association. This index is used to uniquely identify multiple associations between the local and remote peer. ')
cisgIpsSgTunHistPeerRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 3, 2, 1, 7), CIPsecPhase1PeerIdentityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunHistPeerRemoteType.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunHistPeerRemoteType.setDescription(' The type of remote peer identity. ')
cisgIpsSgTunHistPeerRemoteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 3, 2, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunHistPeerRemoteValue.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunHistPeerRemoteValue.setDescription(' The value of the remote peer identity. ')
cisgIpsSgTunHistLocalAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 3, 2, 1, 9), CIPsecPhase1PeerIdentityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunHistLocalAddrType.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunHistLocalAddrType.setDescription(' The type of the address of the local endpoint for the control tunnel. ')
cisgIpsSgTunHistLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 3, 2, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunHistLocalAddr.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunHistLocalAddr.setDescription(' The address of the local endpoint for the control tunnel. ')
cisgIpsSgTunHistLocalName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 3, 2, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunHistLocalName.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunHistLocalName.setDescription(' The DNS name of the local address for the control Tunnel. If the DNS name associated with the local tunnel endpoint is not known, then the value of this object will be a zero-length string. ')
cisgIpsSgTunHistRemoteAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 3, 2, 1, 12), CIPsecPhase1PeerIdentityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunHistRemoteAddrType.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunHistRemoteAddrType.setDescription(' The type of the address of the remote endpoint for the control Tunnel. ')
cisgIpsSgTunHistRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 3, 2, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunHistRemoteAddr.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunHistRemoteAddr.setDescription(' The address of the remote endpoint for the control Tunnel. ')
cisgIpsSgTunHistRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 3, 2, 1, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunHistRemoteName.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunHistRemoteName.setDescription(' The DNS name of the remote address of control Tunnel. If the DNS name associated with the remote tunnel endpoint is not known, then the value of this object will be a zero-length string. ')
cisgIpsSgTunHistEncryptAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 3, 2, 1, 15), CIPsecEncryptAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunHistEncryptAlgo.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunHistEncryptAlgo.setDescription(' The encryption algorithm used in control tunnel. ')
cisgIpsSgTunHistEncryptKeySize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 3, 2, 1, 16), CIPsecEncryptionKeySize()).setUnits('Bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunHistEncryptKeySize.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunHistEncryptKeySize.setDescription(" The size in bits of the key which was negotiated for the control tunnel to be used with the algorithm denoted by the column 'cisgIpsSgTunEncryptAlgo'. For DES and 3DES the key size is respectively 56 and 168. For AES, this will denote the negotiated key size. ")
cisgIpsSgTunHistHashAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 3, 2, 1, 17), CIPsecIkeHashAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunHistHashAlgo.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunHistHashAlgo.setDescription(' The hash algorithm used in control tunnel negotiations. ')
cisgIpsSgTunHistAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 3, 2, 1, 18), CIPsecIkeAuthMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunHistAuthMethod.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunHistAuthMethod.setDescription(' The authentication method used in control tunnel negotiations. ')
cisgIpsSgTunHistLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 3, 2, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunHistLifeTime.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunHistLifeTime.setDescription(' The negotiated LifeTime of the control tunnel in seconds. ')
cisgIpsSgTunHistStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 3, 2, 1, 20), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunHistStartTime.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunHistStartTime.setDescription(' The value of sysUpTime in hundredths of seconds when the control tunnel was started. ')
cisgIpsSgTunHistActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 3, 2, 1, 21), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunHistActiveTime.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunHistActiveTime.setDescription(' The length of time the control tunnel has been active in hundredths of seconds. ')
cisgIpsSgTunHistInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 3, 2, 1, 22), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunHistInOctets.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunHistInOctets.setDescription(' The total number of octets received by this control tunnel. ')
cisgIpsSgTunHistInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 3, 2, 1, 23), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunHistInPkts.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunHistInPkts.setDescription(' The total number of packets received by this Phase-1 control tunnel. ')
cisgIpsSgTunHistInDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 3, 2, 1, 24), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunHistInDropPkts.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunHistInDropPkts.setDescription(' The total number of packets dropped by this control Tunnel during receive processing. ')
cisgIpsSgTunHistInNotifys = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 3, 2, 1, 25), Counter64()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunHistInNotifys.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunHistInNotifys.setDescription(' The total number of notification payloads received by this control tunnel. ')
cisgIpsSgTunHistInP2SaDelReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 3, 2, 1, 26), Counter64()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunHistInP2SaDelReqs.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunHistInP2SaDelReqs.setDescription(' The total number of Phase-2 tunnel delete requests received by this control tunnel. ')
cisgIpsSgTunHistOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 3, 2, 1, 27), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunHistOutOctets.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunHistOutOctets.setDescription(' The total number of octets sent by this control Tunnel. ')
cisgIpsSgTunHistOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 3, 2, 1, 28), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunHistOutPkts.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunHistOutPkts.setDescription(' The total number of packets sent by this control Tunnel. ')
cisgIpsSgTunHistOutDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 3, 2, 1, 29), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunHistOutDropPkts.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunHistOutDropPkts.setDescription(' The total number of packets dropped by this control Tunnel during send processing. ')
cisgIpsSgTunHistOutNotifys = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 3, 2, 1, 30), Counter64()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunHistOutNotifys.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunHistOutNotifys.setDescription(' The total number of notification payloads sent by this control Tunnel. ')
cisgIpsSgTunHistOutP2SaDelReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 3, 2, 1, 31), Counter64()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgTunHistOutP2SaDelReqs.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgTunHistOutP2SaDelReqs.setDescription(' The total number of Phase-2 tunnel delete requests sent by this control tunnel. ')
cisgIpsSgFailGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 4, 1))
cisgIpsSgFailGlobalCntl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 4, 1, 1))
cisgIpsSgFailTableSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 4, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisgIpsSgFailTableSize.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgFailTableSize.setDescription(" The window size of the Internet Key Exchange Failure Tables. The Failure Table is implemented as a sliding window in which only the last 'cisgIpsSgFailTableSize' entries are maintained. This object is used specify the number of entries which will be maintained in the control tunnel Failure Table. An implementation may choose suitable minimum and maximum values for this element based on the local policy and available resources. If an SNMP SET request specifies a value outside this window for this element, an appropriate SNMP error code must be returned. Setting this value to zero is equivalent to deleting all conceptual rows in the archiving tables ('cisgIpsSgFailTable') and disabling the archiving of entries in this table. ")
cisgIpsSgFailTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 4, 2), )
if mibBuilder.loadTexts: cisgIpsSgFailTable.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgFailTable.setDescription(" This is the control tunnel Table and is implemented as a sliding window in which only the last 'N' entries are maintained. The maximum number of entries is specified by the object 'cisgIpsSgFailTableSize'. The failure records are catalogued under each signaling protocol type; that is, the first index of this table is the signaling protocol identifier ('cisgIpsSgProtocol'). The second index ('cisgIpsSgFailIndex') identifies the failure record uniquely in the subcategory. Should a failure be identified before the signaling protocol itself has been identified by the managed entity, the failure record will be classified under 'cpUnknown'. ")
cisgIpsSgFailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 4, 2, 1), ).setIndexNames((0, "CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgProtocol"), (0, "CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgFailIndex"))
if mibBuilder.loadTexts: cisgIpsSgFailEntry.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgFailEntry.setDescription(' Each entry contains the attributes associated with an Phase-1 failure. ')
cisgIpsSgFailIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 4, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cisgIpsSgFailIndex.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgFailIndex.setDescription(' The Phase-1 Failure Table index. This object has no relationship to the cisgIpsSgTunIndex of the tunnel when it was active. The value of the index is a number which begins at one and is incremented with each Phase-1 failure. The value of this object will wrap at 4,294,967,296. ')
cisgIpsSgFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("other", 1), ("peerDelRequest", 2), ("peerLost", 3), ("localFailure", 4), ("authFailure", 5), ("hashValidation", 6), ("encryptFailure", 7), ("internalError", 8), ("sysCapExceeded", 9), ("proposalFailure", 10), ("peerCertUnavailable", 11), ("peerCertNotValid", 12), ("localCertExpired", 13), ("crlFailure", 14), ("peerEncodingError", 15), ("nonExistentSa", 16), ("userAuthFailure", 17), ("operRequest", 18), ("deniedByAdmissionControl", 19), ("protocolSpecific", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgFailReason.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgFailReason.setDescription(" The reason for the failure. Possible reasons include: 1 = other 2 = peer delete request was received 3 = contact with peer was lost 4 = local failure occurred 5 = authentication failure 6 = hash validation failure 7 = encryption failure 8 = internal error occurred 9 = system capacity failure 10 = proposal failure 11 = peer's certificate is unavailable 12 = peer's certificate was found invalid 13 = local certificate expired 14 = certificate revoke list (crl) failure 15 = peer encoding error 16 = Reference to a non-existent control tunnel 17 = Extended User authentication failed 18 = operator requested termination. 19 = An attempt to establish a tunnel was aborted by the admission control policy (this could include a simple policy that limits the maximum active tunnels) 20 = A protocol specific reason (look in the protocol-specific MIB for more info). ")
cisgIpsSgFailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 4, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgFailTime.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgFailTime.setDescription(' The value of sysUpTime in hundredths of seconds at the time of the failure. ')
cisgIpsSgFailLocalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 4, 2, 1, 4), CIPsecPhase1PeerIdentityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgFailLocalType.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgFailLocalType.setDescription(' The type of local peer identity. ')
cisgIpsSgFailLocalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 4, 2, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgFailLocalValue.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgFailLocalValue.setDescription(' The value of the local peer identity. ')
cisgIpsSgFailRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 4, 2, 1, 6), CIPsecPhase1PeerIdentityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgFailRemoteType.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgFailRemoteType.setDescription(' The type of remote peer identity. ')
cisgIpsSgFailRemoteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 4, 2, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgFailRemoteValue.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgFailRemoteValue.setDescription(' The value of the remote peer identity. ')
cisgIpsSgFailLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 4, 2, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgFailLocalAddress.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgFailLocalAddress.setDescription(' The address of the local peer. The value of cisgIpsSgFailLocalType identifies the type of the address contained in this object. ')
cisgIpsSgFailRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 4, 2, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisgIpsSgFailRemoteAddress.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgFailRemoteAddress.setDescription(' The address of the remote peer. The value of cisgIpsSgFailLocalType identifies the type of the address contained in this object. ')
cisgIpsSgNotifCntlAllNotifs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 5, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisgIpsSgNotifCntlAllNotifs.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgNotifCntlAllNotifs.setDescription(" This object acts as the knob that controls the the administrative state of sending any notification defined in this MIB module. That is, a particular notification 'foo' defined in this MIB module is enabled if and only if the expression cisgIpsSgNotifCntlAllNotifs && cisgIpsSgNotifCntl<foo> evaluates to 'true'. ")
cisgIpsSgNotifCntlTunnelStart = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 5, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisgIpsSgNotifCntlTunnelStart.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgNotifCntlTunnelStart.setDescription(" This object defines the administrative state of sending the Control Tunnel Start notification. If the value of this object is 'true', the issuing of the notification 'cisgIpsSgTunnelStart' is enabled. ")
cisgIpsSgNotifCntlTunnelStop = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 5, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisgIpsSgNotifCntlTunnelStop.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgNotifCntlTunnelStop.setDescription(" This object defines the administrative state of sending the Control Tunnel Stop notification. If the value of this object is 'true', the issuing of the notification 'cisgIpsSgTunnelStop' is enabled. ")
cisgIpsSgNotifCntlSysFailure = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 5, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisgIpsSgNotifCntlSysFailure.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgNotifCntlSysFailure.setDescription(" This object defines the administrative state of sending the System Failure notification. If the value of this object is 'true', the issuing of the notification 'ciscoIpsSgSysFailure' is enabled. ")
cisgIpsSgNotifCntlCertCrlFail = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 438, 1, 5, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisgIpsSgNotifCntlCertCrlFail.setStatus('current')
if mibBuilder.loadTexts: cisgIpsSgNotifCntlCertCrlFail.setDescription(" This object defines the administrative state of sending the Certificate/CRL Failure notification. If the value of this object is 'true', the issuing of the notification 'ciscoIpsSgCertCrlFailure' is enabled. ")
ciscoIpsSgTunnelStart = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 438, 0, 1)).setObjects(("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunLocalAddressType"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunLocalAddress"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunRemoteAddressType"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunRemoteAddress"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunLifeTime"))
if mibBuilder.loadTexts: ciscoIpsSgTunnelStart.setStatus('current')
if mibBuilder.loadTexts: ciscoIpsSgTunnelStart.setDescription(' This notification is generated when an control tunnel becomes active. ')
ciscoIpsSgTunnelStop = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 438, 0, 2)).setObjects(("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunHistLocalAddrType"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunHistLocalAddr"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunHistRemoteAddrType"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunHistRemoteAddr"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunHistTermReason"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunHistActiveTime"))
if mibBuilder.loadTexts: ciscoIpsSgTunnelStop.setStatus('current')
if mibBuilder.loadTexts: ciscoIpsSgTunnelStop.setDescription(' This notification is generated when an control tunnel becomes inactive. ')
ciscoIpsSgSysFailure = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 438, 0, 3)).setObjects(("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgFailLocalAddress"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgFailRemoteAddress"))
if mibBuilder.loadTexts: ciscoIpsSgSysFailure.setStatus('current')
if mibBuilder.loadTexts: ciscoIpsSgSysFailure.setDescription(' This notification is generated when the processing for an control Tunnel experiences an system capacity error. ')
ciscoIpsSgCertCrlFailure = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 438, 0, 4)).setObjects(("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgFailLocalAddress"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgFailRemoteAddress"))
if mibBuilder.loadTexts: ciscoIpsSgCertCrlFailure.setStatus('current')
if mibBuilder.loadTexts: ciscoIpsSgCertCrlFailure.setDescription(' This notification is generated when the processing for an control Tunnel experiences a Certificate or a Certificate validation (CRL or OCSP) related error. ')
ciscoIpsSgMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 438, 2, 1))
ciscoIpsSgMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 438, 2, 2))
ciscoIpsSgMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 438, 2, 1, 1)).setObjects(("CISCO-IPSEC-SIGNALING-MIB", "ciscoIpsSgActivityGroup"), ("CISCO-IPSEC-SIGNALING-MIB", "ciscoIpsSgCoreHistoryGroup"), ("CISCO-IPSEC-SIGNALING-MIB", "ciscoIpsSgCoreFailureGroup"), ("CISCO-IPSEC-SIGNALING-MIB", "ciscoIpsSgHistoryGroup"), ("CISCO-IPSEC-SIGNALING-MIB", "ciscoIpsSgFailureGroup"), ("CISCO-IPSEC-SIGNALING-MIB", "ciscoIpsSgNotifcationGroup"), ("CISCO-IPSEC-SIGNALING-MIB", "ciscoIpsSgNotifCntlGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpsSgMIBCompliance = ciscoIpsSgMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoIpsSgMIBCompliance.setDescription('The compliance statement for SNMP entities the IPsec Signaling MIB.')
ciscoIpsSgActivityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 438, 2, 2, 1)).setObjects(("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgGlobalActiveTunnels"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgGlobalPreviousTunnels"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgGlobalInOctets"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgGlobalInPkts"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgGlobalInDropPkts"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgGlobalInNotifys"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgGlobalInP2SaDelReqs"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgGlobalOutOctets"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgGlobalOutPkts"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgGlobalOutDropPkts"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgGlobalOutNotifys"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgGlobalOutP2SaDelReqs"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgGlobalInitTunnels"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgGlobalInitTunnelFails"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgGlobalRespTunnels"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgGlobalRespTunnelFails"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgGlobalSysCapFails"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgGlobalAuthFails"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgGlobalDecryptFails"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgGlobalHashValidFails"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgGlobalBadTunnelRefs"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgGlobalInP1SaDelReqs"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgGlobalOutP1SaDelReqs"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunLocalType"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunLocalValue"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunLocalAddressType"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunLocalAddress"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunLocalName"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunRemoteType"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunRemoteValue"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunRemoteAddressType"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunRemoteAddress"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunRemoteName"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunEncryptAlgo"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunEncryptKeySize"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunHashAlgo"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunAuthMethod"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunLifeTime"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunActiveTime"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunInOctets"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunInPkts"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunInDropPkts"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunInNotifys"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunOutOctets"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunOutPkts"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunOutDropPkts"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunOutNotifys"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunOutP2SaDelReqs"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunStatus"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpsSgActivityGroup = ciscoIpsSgActivityGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIpsSgActivityGroup.setDescription(' This group consists of: 1) Signaling Global Objects 2) control Tunnel table. ')
ciscoIpsSgCoreHistoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 438, 2, 2, 2)).setObjects(("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgHistTableSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpsSgCoreHistoryGroup = ciscoIpsSgCoreHistoryGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIpsSgCoreHistoryGroup.setDescription(' This group consists of the core (mandatory) objects pertaining to maintaining history of signaling activity. ')
ciscoIpsSgHistoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 438, 2, 2, 3)).setObjects(("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunHistTermReason"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunHistActiveIndex"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunHistPeerLocalType"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunHistPeerLocalValue"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunHistPeerIntIndex"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunHistPeerRemoteType"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunHistPeerRemoteValue"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunHistLocalAddrType"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunHistLocalAddr"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunHistLocalName"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunHistRemoteAddrType"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunHistRemoteAddr"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunHistRemoteName"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunHistEncryptAlgo"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunHistEncryptKeySize"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunHistHashAlgo"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunHistAuthMethod"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunHistLifeTime"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunHistStartTime"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunHistActiveTime"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunHistInOctets"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunHistInPkts"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunHistInDropPkts"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunHistInNotifys"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunHistInP2SaDelReqs"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunHistOutOctets"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunHistOutPkts"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunHistOutDropPkts"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunHistOutNotifys"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunHistOutP2SaDelReqs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpsSgHistoryGroup = ciscoIpsSgHistoryGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIpsSgHistoryGroup.setDescription(' This group consists of objects that pertain to maintenance of history of signaling activity. ')
ciscoIpsSgCoreFailureGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 438, 2, 2, 4)).setObjects(("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgFailTableSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpsSgCoreFailureGroup = ciscoIpsSgCoreFailureGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIpsSgCoreFailureGroup.setDescription(' This group consists of the core (mandatory) objects pertaining to maintaining history of failure signaling activity. ')
ciscoIpsSgFailureGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 438, 2, 2, 5)).setObjects(("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgFailReason"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgFailTime"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgFailLocalType"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgFailLocalValue"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgFailRemoteType"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgFailRemoteValue"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgFailLocalAddress"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgFailRemoteAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpsSgFailureGroup = ciscoIpsSgFailureGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIpsSgFailureGroup.setDescription(' This group consists of objects that pertain to maintenance of history of failures associated with Ipsec signaling activity. ')
ciscoIpsSgNotifCntlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 438, 2, 2, 6)).setObjects(("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgNotifCntlAllNotifs"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgNotifCntlTunnelStart"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgNotifCntlTunnelStop"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgNotifCntlSysFailure"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgNotifCntlCertCrlFail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpsSgNotifCntlGroup = ciscoIpsSgNotifCntlGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIpsSgNotifCntlGroup.setDescription(' This group of objects controls the sending of notifications pertaining to signaling operations. ')
ciscoIpsSgNotifcationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 438, 2, 2, 7)).setObjects(("CISCO-IPSEC-SIGNALING-MIB", "ciscoIpsSgTunnelStart"), ("CISCO-IPSEC-SIGNALING-MIB", "ciscoIpsSgTunnelStop"), ("CISCO-IPSEC-SIGNALING-MIB", "ciscoIpsSgSysFailure"), ("CISCO-IPSEC-SIGNALING-MIB", "ciscoIpsSgCertCrlFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpsSgNotifcationGroup = ciscoIpsSgNotifcationGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIpsSgNotifcationGroup.setDescription(' This group contains the notifications pertaining to Ipsec signaling operations. ')
mibBuilder.exportSymbols("CISCO-IPSEC-SIGNALING-MIB", cisgIpsSgGlobalActiveTunnels=cisgIpsSgGlobalActiveTunnels, cisgIpsSgHistGlobal=cisgIpsSgHistGlobal, ciscoIpsSgTunnelStop=ciscoIpsSgTunnelStop, cisgIpsSgGlobalRespTunnelFails=cisgIpsSgGlobalRespTunnelFails, cisgIpsSgTunnelEntry=cisgIpsSgTunnelEntry, cisgIpsSgTunRemoteName=cisgIpsSgTunRemoteName, cisgIpsSgCurrentActivity=cisgIpsSgCurrentActivity, cisgIpsSgFailRemoteValue=cisgIpsSgFailRemoteValue, cisgIpsSgTunLifeTime=cisgIpsSgTunLifeTime, cisgIpsSgTunHistOutDropPkts=cisgIpsSgTunHistOutDropPkts, cisgIpsSgTunLocalAddress=cisgIpsSgTunLocalAddress, ciscoIPsecSigMIBNotifs=ciscoIPsecSigMIBNotifs, cisgIpsSgGlobalInP1SaDelReqs=cisgIpsSgGlobalInP1SaDelReqs, cisgIpsSgTunHistOutNotifys=cisgIpsSgTunHistOutNotifys, cisgIpsSgTunStatus=cisgIpsSgTunStatus, cisgIpsSgTunHistIndex=cisgIpsSgTunHistIndex, cisgIpsSgNotifCntlTunnelStart=cisgIpsSgNotifCntlTunnelStart, ciscoIpsSgNotifcationGroup=ciscoIpsSgNotifcationGroup, cisgIpsSgTunLocalAddressType=cisgIpsSgTunLocalAddressType, ciscoIpsSgCoreHistoryGroup=ciscoIpsSgCoreHistoryGroup, cisgIpsSgGlobalInOctets=cisgIpsSgGlobalInOctets, cisgIpsSgTunHistOutP2SaDelReqs=cisgIpsSgTunHistOutP2SaDelReqs, cisgIpsSgTunHistInOctets=cisgIpsSgTunHistInOctets, ciscoIpsSgHistoryGroup=ciscoIpsSgHistoryGroup, cisgIpsSgPeerAssociations=cisgIpsSgPeerAssociations, cisgIpsSgTunnelHistTable=cisgIpsSgTunnelHistTable, ciscoIpsSgCertCrlFailure=ciscoIpsSgCertCrlFailure, cisgIpsSgTunHistLocalAddrType=cisgIpsSgTunHistLocalAddrType, cisgIpsSgTunHistRemoteAddrType=cisgIpsSgTunHistRemoteAddrType, cisgIpsSgNotifCntlCertCrlFail=cisgIpsSgNotifCntlCertCrlFail, cisgIpsSgProtocol=cisgIpsSgProtocol, cisgIpsSgTunRemoteValue=cisgIpsSgTunRemoteValue, cisgIpsSgTunHistStartTime=cisgIpsSgTunHistStartTime, cisgIpsSgTunAuthMethod=cisgIpsSgTunAuthMethod, cisgIpsSgTunHistAuthMethod=cisgIpsSgTunHistAuthMethod, cisgIpsSgTunHistActiveTime=cisgIpsSgTunHistActiveTime, cisgIpsSgFailLocalAddress=cisgIpsSgFailLocalAddress, ciscoIpsSgTunnelStart=ciscoIpsSgTunnelStart, cisgIpsSgGlobalOutP1SaDelReqs=cisgIpsSgGlobalOutP1SaDelReqs, ciscoIPsecSignalingMIB=ciscoIPsecSignalingMIB, cisgIpsSgTunRemoteAddress=cisgIpsSgTunRemoteAddress, cisgIpsSgTunnelHistEntry=cisgIpsSgTunnelHistEntry, cisgIpsSgGlobalHashValidFails=cisgIpsSgGlobalHashValidFails, cisgIpsSgTunLocalType=cisgIpsSgTunLocalType, cisgIpsSgHistGlobalCntl=cisgIpsSgHistGlobalCntl, cisgIpsSgTunRemoteAddressType=cisgIpsSgTunRemoteAddressType, cisgIpsSgNotifCntlSysFailure=cisgIpsSgNotifCntlSysFailure, cisgIpsSgGlobalOutPkts=cisgIpsSgGlobalOutPkts, cisgIpsSgTunnelTable=cisgIpsSgTunnelTable, cisgIpsSgTunOutP2SaDelReqs=cisgIpsSgTunOutP2SaDelReqs, cisgIpsSgTunHistTermReason=cisgIpsSgTunHistTermReason, cisgIpsSgGlobalRespTunnels=cisgIpsSgGlobalRespTunnels, cisgIpsSgGlobalOutDropPkts=cisgIpsSgGlobalOutDropPkts, ciscoIPsecSigMIBConform=ciscoIPsecSigMIBConform, cisgIpsSgTunHistLocalAddr=cisgIpsSgTunHistLocalAddr, cisgIpsSgGlobalStatsEntry=cisgIpsSgGlobalStatsEntry, cisgIpsSgTunHistPeerRemoteType=cisgIpsSgTunHistPeerRemoteType, cisgIpsSgGlobalStatsTable=cisgIpsSgGlobalStatsTable, cisgIpsSgFailTable=cisgIpsSgFailTable, ciscoIpsSgMIBCompliance=ciscoIpsSgMIBCompliance, cisgIpsSgTunOutNotifys=cisgIpsSgTunOutNotifys, PYSNMP_MODULE_ID=ciscoIPsecSignalingMIB, cisgIpsSgFailures=cisgIpsSgFailures, ciscoIPsecSigMIBObjects=ciscoIPsecSigMIBObjects, cisgIpsSgTunRemoteType=cisgIpsSgTunRemoteType, cisgIpsSgHistTableSize=cisgIpsSgHistTableSize, cisgIpsSgTunHistRemoteAddr=cisgIpsSgTunHistRemoteAddr, ciscoIpsSgMIBCompliances=ciscoIpsSgMIBCompliances, cisgIpsSgFailLocalType=cisgIpsSgFailLocalType, cisgIpsSgFailRemoteAddress=cisgIpsSgFailRemoteAddress, cisgIpsSgTunHistPeerIntIndex=cisgIpsSgTunHistPeerIntIndex, cisgIpsSgTunLocalValue=cisgIpsSgTunLocalValue, cisgIpsSgGlobalOutOctets=cisgIpsSgGlobalOutOctets, cisgIpsSgTunHistLifeTime=cisgIpsSgTunHistLifeTime, cisgIpsSgGlobalAuthFails=cisgIpsSgGlobalAuthFails, cisgIpsSgTunIndex=cisgIpsSgTunIndex, cisgIpsSgTunHistLocalName=cisgIpsSgTunHistLocalName, cisgIpsSgFailEntry=cisgIpsSgFailEntry, cisgIpsSgTunHistPeerLocalType=cisgIpsSgTunHistPeerLocalType, cisgIpsSgTunHistInDropPkts=cisgIpsSgTunHistInDropPkts, cisgIpsSgFailGlobalCntl=cisgIpsSgFailGlobalCntl, cisgIpsSgFailIndex=cisgIpsSgFailIndex, cisgIpsSgGlobalInPkts=cisgIpsSgGlobalInPkts, cisgIpsSgTunInPkts=cisgIpsSgTunInPkts, cisgIpsSgTunHistHashAlgo=cisgIpsSgTunHistHashAlgo, cisgIpsSgTunLocalName=cisgIpsSgTunLocalName, cisgIpsSgGlobalSysCapFails=cisgIpsSgGlobalSysCapFails, cisgIpsSgTunOutOctets=cisgIpsSgTunOutOctets, cisgIpsSgTunHistInPkts=cisgIpsSgTunHistInPkts, cisgIpsSgTunHistPeerLocalValue=cisgIpsSgTunHistPeerLocalValue, cisgIpsSgGlobalInDropPkts=cisgIpsSgGlobalInDropPkts, cisgIpsSgTunInDropPkts=cisgIpsSgTunInDropPkts, cisgIpsSgFailReason=cisgIpsSgFailReason, ciscoIpsSgSysFailure=ciscoIpsSgSysFailure, ciscoIpsSgNotifCntlGroup=ciscoIpsSgNotifCntlGroup, cisgIpsSgTunHistInNotifys=cisgIpsSgTunHistInNotifys, ciscoIpsSgFailureGroup=ciscoIpsSgFailureGroup, ciscoIpsSgCoreFailureGroup=ciscoIpsSgCoreFailureGroup, cisgIpsSgGlobalOutNotifys=cisgIpsSgGlobalOutNotifys, ciscoIpsSgActivityGroup=ciscoIpsSgActivityGroup, cisgIpsSgTunEncryptAlgo=cisgIpsSgTunEncryptAlgo, cisgIpsSgHistory=cisgIpsSgHistory, cisgIpsSgNotifCntlAllNotifs=cisgIpsSgNotifCntlAllNotifs, cisgIpsSgGlobalOutP2SaDelReqs=cisgIpsSgGlobalOutP2SaDelReqs, cisgIpsSgGlobalInitTunnelFails=cisgIpsSgGlobalInitTunnelFails, cisgIpsSgTunHistInP2SaDelReqs=cisgIpsSgTunHistInP2SaDelReqs, cisgIpsSgNotificationCntl=cisgIpsSgNotificationCntl, cisgIpsSgTunHistActiveIndex=cisgIpsSgTunHistActiveIndex, cisgIpsSgFailGlobal=cisgIpsSgFailGlobal, cisgIpsSgTunHashAlgo=cisgIpsSgTunHashAlgo, cisgIpsSgFailLocalValue=cisgIpsSgFailLocalValue, cisgIpsSgTunOutDropPkts=cisgIpsSgTunOutDropPkts, ciscoIpsSgMIBGroups=ciscoIpsSgMIBGroups, cisgIpsSgTunOutPkts=cisgIpsSgTunOutPkts, cisgIpsSgTunEncryptKeySize=cisgIpsSgTunEncryptKeySize, cisgIpsSgFailRemoteType=cisgIpsSgFailRemoteType, cisgIpsSgTunAction=cisgIpsSgTunAction, cisgIpsSgFailTableSize=cisgIpsSgFailTableSize, cisgIpsSgTunInOctets=cisgIpsSgTunInOctets, cisgIpsSgTunActiveTime=cisgIpsSgTunActiveTime, cisgIpsSgTunHistEncryptKeySize=cisgIpsSgTunHistEncryptKeySize, cisgIpsSgGlobalDecryptFails=cisgIpsSgGlobalDecryptFails, cisgIpsSgTunInNotifys=cisgIpsSgTunInNotifys, cisgIpsSgFailTime=cisgIpsSgFailTime, cisgIpsSgNotifCntlTunnelStop=cisgIpsSgNotifCntlTunnelStop, cisgIpsSgGlobalInNotifys=cisgIpsSgGlobalInNotifys, cisgIpsSgGlobalInitTunnels=cisgIpsSgGlobalInitTunnels, cisgIpsSgTunHistEncryptAlgo=cisgIpsSgTunHistEncryptAlgo, cisgIpsSgGlobalPreviousTunnels=cisgIpsSgGlobalPreviousTunnels, cisgIpsSgTunHistPeerRemoteValue=cisgIpsSgTunHistPeerRemoteValue, cisgIpsSgGlobalBadTunnelRefs=cisgIpsSgGlobalBadTunnelRefs, cisgIpsSgTunHistRemoteName=cisgIpsSgTunHistRemoteName, cisgIpsSgTunHistOutPkts=cisgIpsSgTunHistOutPkts, cisgIpsSgTunHistOutOctets=cisgIpsSgTunHistOutOctets, cisgIpsSgGlobalInP2SaDelReqs=cisgIpsSgGlobalInP2SaDelReqs)
