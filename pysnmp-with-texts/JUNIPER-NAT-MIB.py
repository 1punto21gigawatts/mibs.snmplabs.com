#
# PySNMP MIB module JUNIPER-NAT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-NAT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:00:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddressType, InetAddress, InetAddressIPv4 = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress", "InetAddressIPv4")
jnxSvcsMibRoot, = mibBuilder.importSymbols("JUNIPER-SMI", "jnxSvcsMibRoot")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, ObjectIdentity, ModuleIdentity, Unsigned32, TimeTicks, Counter32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Gauge32, Counter64, IpAddress, NotificationType, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ObjectIdentity", "ModuleIdentity", "Unsigned32", "TimeTicks", "Counter32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Gauge32", "Counter64", "IpAddress", "NotificationType", "Bits")
TextualConvention, DateAndTime, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DateAndTime", "DisplayString")
jnxNatMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 59, 1))
jnxNatMIB.setRevisions(('2010-07-12 20:22',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxNatMIB.setRevisionsDescriptions(('Creation Date',))
if mibBuilder.loadTexts: jnxNatMIB.setLastUpdated('201007122022Z')
if mibBuilder.loadTexts: jnxNatMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxNatMIB.setContactInfo('Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net HTTP://www.juniper.net')
if mibBuilder.loadTexts: jnxNatMIB.setDescription('This module defines the object that are used to monitor network address translation attributes.')
jnxNatNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 59, 1, 0))
jnxNatObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 59, 1, 1))
jnxNatTrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 59, 1, 2))
jnxSrcNatStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 59, 1, 1, 1), )
if mibBuilder.loadTexts: jnxSrcNatStatsTable.setStatus('current')
if mibBuilder.loadTexts: jnxSrcNatStatsTable.setDescription('This table exposes the source NAT translation attributes of the translated addresses. When performing source IP address translation, the services pic translates the original source IP address and/or port number to different one. The resource, address source pools provide the service pic with a supply of addresses from which to draw when performing source network address translation. This table contains information on source IP address translation only.')
jnxSrcNatStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 59, 1, 1, 1, 1), ).setIndexNames((0, "JUNIPER-NAT-MIB", "jnxNatSrcPoolName"))
if mibBuilder.loadTexts: jnxSrcNatStatsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxSrcNatStatsEntry.setDescription('Source NAT address entries. It is indexed by the address pool table and the address allocated. ')
jnxNatSrcPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 59, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)))
if mibBuilder.loadTexts: jnxNatSrcPoolName.setStatus('current')
if mibBuilder.loadTexts: jnxNatSrcPoolName.setDescription('The name of dynamic source IP address pool. This is the address pool where the translated address is allocated from. ')
jnxNatSrcXlatedAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 59, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxNatSrcXlatedAddrType.setStatus('current')
if mibBuilder.loadTexts: jnxNatSrcXlatedAddrType.setDescription('The type of dynamic source IP address allocated from the address pool used in the NAT translation. For NAT MIB, supporting ipv4(1) and ipv6(2) only.')
jnxNatSrcPoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 59, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("static", 1), ("dynamic-napt", 2), ("dynamic-nat", 3), ("basic-nat44", 11), ("dynamic-nat44", 12), ("napt-44", 13), ("dnat-44", 14), ("stateful-nat64", 15), ("stateless-nat64", 16), ("basic-nat-pt", 17), ("napt-pt", 18), ("basic-nat66", 19), ("stateless-nat66", 20), ("napt-66", 21), ("twice-napt-44", 22), ("twice-basic-nat-44", 23), ("twice-dynamic-nat-44", 24), ("det-napt44", 25), ("sd-napt44", 26)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxNatSrcPoolType.setStatus('current')
if mibBuilder.loadTexts: jnxNatSrcPoolType.setDescription('Source NAT can do address translation with or without port translation. The source port pool type indicates whether the address translation is done with port or without the port, or if it is a static translation.')
jnxNatSrcNumPortAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 59, 1, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxNatSrcNumPortAvail.setStatus('current')
if mibBuilder.loadTexts: jnxNatSrcNumPortAvail.setDescription('The number of ports available with this pool.')
jnxNatSrcNumPortInuse = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 59, 1, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxNatSrcNumPortInuse.setStatus('current')
if mibBuilder.loadTexts: jnxNatSrcNumPortInuse.setDescription('The number of ports in use for this NAT address entry. This attribute is only applicable to translation with port translation.')
jnxNatSrcNumAddressAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 59, 1, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxNatSrcNumAddressAvail.setStatus('current')
if mibBuilder.loadTexts: jnxNatSrcNumAddressAvail.setDescription('The total number of addresses available in this pool.')
jnxNatSrcNumAddressInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 59, 1, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxNatSrcNumAddressInUse.setStatus('current')
if mibBuilder.loadTexts: jnxNatSrcNumAddressInUse.setDescription('The number of addresses in use from this pool. This attribute is only applicable to pools used with source dynamic translations.')
jnxNatSrcNumSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 59, 1, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxNatSrcNumSessions.setStatus('current')
if mibBuilder.loadTexts: jnxNatSrcNumSessions.setDescription('The number of sessions are in use based on this NAT address entry.')
jnxNatRuleTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 59, 1, 1, 2), )
if mibBuilder.loadTexts: jnxNatRuleTable.setStatus('current')
if mibBuilder.loadTexts: jnxNatRuleTable.setDescription('This table monitors NAT rule hits ')
jnxNatRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 59, 1, 1, 2, 1), ).setIndexNames((0, "JUNIPER-NAT-MIB", "jnxNatRuleName"))
if mibBuilder.loadTexts: jnxNatRuleEntry.setStatus('current')
if mibBuilder.loadTexts: jnxNatRuleEntry.setDescription('NAT rule hit entries. It is indexed by the rule index')
jnxNatRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 59, 1, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)))
if mibBuilder.loadTexts: jnxNatRuleName.setStatus('current')
if mibBuilder.loadTexts: jnxNatRuleName.setDescription('NAT rule name')
jnxNatRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 59, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("static-source", 1), ("static-destination", 2), ("dynamic-source", 3), ("napt", 4), ("basic-nat44", 11), ("dynamic-nat44", 12), ("napt-44", 13), ("dnat-44", 14), ("stateful-nat64", 15), ("stateless-nat64", 16), ("basic-nat-pt", 17), ("napt-pt", 18), ("basic-nat66", 19), ("stateless-nat66", 20), ("napt-66", 21), ("twice-napt-44", 22), ("twice-basic-nat-44", 23), ("twice-dynamic-nat-44", 24), ("det-napt44", 25), ("sd-napt44", 26)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxNatRuleType.setStatus('current')
if mibBuilder.loadTexts: jnxNatRuleType.setDescription('NAT types: Static Source, Static Destination, Dynamic Source and NAPT')
jnxNatRuleTransHits = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 59, 1, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxNatRuleTransHits.setStatus('current')
if mibBuilder.loadTexts: jnxNatRuleTransHits.setDescription('The number of hits on this NAT rule')
jnxNatPoolTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 59, 1, 1, 3), )
if mibBuilder.loadTexts: jnxNatPoolTable.setStatus('current')
if mibBuilder.loadTexts: jnxNatPoolTable.setDescription('This table monitors NAT pool hits ')
jnxNatPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 59, 1, 1, 3, 1), ).setIndexNames((0, "JUNIPER-NAT-MIB", "jnxNatPoolName"))
if mibBuilder.loadTexts: jnxNatPoolEntry.setStatus('current')
if mibBuilder.loadTexts: jnxNatPoolEntry.setDescription('NAT pool hit entries. It is indexed by the pool index')
jnxNatPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 59, 1, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)))
if mibBuilder.loadTexts: jnxNatPoolName.setStatus('current')
if mibBuilder.loadTexts: jnxNatPoolName.setDescription('NAT Pool name')
jnxNatPoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 59, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("static-source", 1), ("static-destination", 2), ("dynamic-source", 3), ("napt", 4), ("basic-nat44", 11), ("dynamic-nat44", 12), ("napt-44", 13), ("dnat-44", 14), ("stateful-nat64", 15), ("stateless-nat64", 16), ("basic-nat-pt", 17), ("napt-pt", 18), ("basic-nat66", 19), ("stateless-nat66", 20), ("napt-66", 21), ("twice-napt-44", 22), ("twice-basic-nat-44", 23), ("twice-dynamic-nat-44", 24), ("det-napt44", 25), ("sd-napt44", 26)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxNatPoolType.setStatus('current')
if mibBuilder.loadTexts: jnxNatPoolType.setDescription('NAT types: Static Source, Static Destination, Dynamic Source and NAPT')
jnxNatPoolTransHits = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 59, 1, 1, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxNatPoolTransHits.setStatus('current')
if mibBuilder.loadTexts: jnxNatPoolTransHits.setDescription('The number of hits on this NAT Pool')
jnxNatAddrPoolUtil = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 59, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxNatAddrPoolUtil.setStatus('current')
if mibBuilder.loadTexts: jnxNatAddrPoolUtil.setDescription('The dynamic address pool utilization in terms of number of ports utilized.')
jnxNatTrapSrcPoolName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 59, 1, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxNatTrapSrcPoolName.setStatus('current')
if mibBuilder.loadTexts: jnxNatTrapSrcPoolName.setDescription('Source NAT Pool name who issues trap')
jnxNatAddrPoolThresholdStatus = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 59, 1, 0, 1)).setObjects(("JUNIPER-NAT-MIB", "jnxNatTrapSrcPoolName"), ("JUNIPER-NAT-MIB", "jnxNatAddrPoolUtil"))
if mibBuilder.loadTexts: jnxNatAddrPoolThresholdStatus.setStatus('current')
if mibBuilder.loadTexts: jnxNatAddrPoolThresholdStatus.setDescription('The Source NAT address pool utilization threshold status trap signifies that the address pool utilization is either exceeds threshold value, or clear of that value. jnxNatTrapPoolName is the name of the resource pool jnxNatAddrPoolUtil is the number of ports utilized of the address pool.')
mibBuilder.exportSymbols("JUNIPER-NAT-MIB", jnxNatSrcNumAddressAvail=jnxNatSrcNumAddressAvail, jnxNatRuleName=jnxNatRuleName, jnxNatRuleType=jnxNatRuleType, jnxNatRuleTransHits=jnxNatRuleTransHits, jnxSrcNatStatsEntry=jnxSrcNatStatsEntry, jnxNatSrcPoolType=jnxNatSrcPoolType, jnxNatObjects=jnxNatObjects, jnxNatRuleTable=jnxNatRuleTable, jnxNatMIB=jnxNatMIB, jnxNatPoolTransHits=jnxNatPoolTransHits, jnxNatPoolTable=jnxNatPoolTable, jnxNatPoolType=jnxNatPoolType, jnxNatPoolName=jnxNatPoolName, jnxNatTrapVars=jnxNatTrapVars, jnxNatRuleEntry=jnxNatRuleEntry, jnxNatSrcNumAddressInUse=jnxNatSrcNumAddressInUse, jnxNatNotifications=jnxNatNotifications, jnxNatSrcNumSessions=jnxNatSrcNumSessions, jnxNatSrcPoolName=jnxNatSrcPoolName, jnxNatTrapSrcPoolName=jnxNatTrapSrcPoolName, jnxNatAddrPoolThresholdStatus=jnxNatAddrPoolThresholdStatus, jnxNatSrcXlatedAddrType=jnxNatSrcXlatedAddrType, PYSNMP_MODULE_ID=jnxNatMIB, jnxNatAddrPoolUtil=jnxNatAddrPoolUtil, jnxNatPoolEntry=jnxNatPoolEntry, jnxNatSrcNumPortAvail=jnxNatSrcNumPortAvail, jnxSrcNatStatsTable=jnxSrcNatStatsTable, jnxNatSrcNumPortInuse=jnxNatSrcNumPortInuse)
