#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-AlarmMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-AlarmMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:28:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
DateAndTime, RowPointer, Unsigned32, DisplayString = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "DateAndTime", "RowPointer", "Unsigned32", "DisplayString")
DigitString, HexString, AsciiString, Hex = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "DigitString", "HexString", "AsciiString", "Hex")
mscPassportMIBs, mscPassportTraps = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscPassportMIBs", "mscPassportTraps")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Counter32, ModuleIdentity, ObjectIdentity, TimeTicks, Bits, iso, NotificationType, Counter64, MibIdentifier, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Integer32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter32", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "Bits", "iso", "NotificationType", "Counter64", "MibIdentifier", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Integer32", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
alarmMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 4))
mscAlarmTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2))
mscMandatoryAlarmInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 7))
mscComponentRowPointer = MibScalar((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 7, 1), RowPointer())
if mibBuilder.loadTexts: mscComponentRowPointer.setStatus('mandatory')
if mibBuilder.loadTexts: mscComponentRowPointer.setDescription(' A pointer to the RowStatus variable of the component emitting the alarm.')
mscComponentName = MibScalar((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 7, 2), DisplayString())
if mibBuilder.loadTexts: mscComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscComponentName.setDescription(" The textual name of the component emitting the alarm in a format suitable for use in commands entered on the `console'. It includes the name of the node from which the alarm was sent, as specified in `ModuleData nodeName'.")
mscEventTime = MibScalar((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 7, 3), DateAndTime())
if mibBuilder.loadTexts: mscEventTime.setStatus('mandatory')
if mibBuilder.loadTexts: mscEventTime.setDescription(' The date and time at which the alarmed event occurred.')
mscActiveListStatus = MibScalar((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("message", 0), ("set", 1), ("clear", 2))))
if mibBuilder.loadTexts: mscActiveListStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscActiveListStatus.setDescription(' The active alarm list status. This may be used by the Manager to add (on receiving a set) and delete (on receiving a clear) alarms from the alarm displays.')
mscSeverity = MibScalar((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("indeterminate", 0), ("critical", 1), ("major", 2), ("minor", 3), ("warning", 4), ("cleared", 5))))
if mibBuilder.loadTexts: mscSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: mscSeverity.setDescription(' The severity of the alarm which should indicate what priority that fixing this problem should be given. All values are OSI-defined; refer to CCITT X.733/ISO 10164-4 for a more complete description.')
mscAlarmType = MibScalar((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("communications", 0), ("qualityOfService", 1), ("processing", 2), ("equipment", 3), ("environmental", 4), ("security", 5), ("operator", 6), ("debug", 7), ("unknown", 8))))
if mibBuilder.loadTexts: mscAlarmType.setStatus('mandatory')
if mibBuilder.loadTexts: mscAlarmType.setDescription(" The alarm type field as defined by OSI which is used to indicate a broad category of what is wrong. The first 6 values are OSI-defined; refer to CCITT X.733/ISO 10164-4 (for the first 5) and CCITT X.736/ISO 10164-4 (for the last) for a more complete description. The value 'operator' is used when an alarm is issued due to an operator command. The values 'debug' and 'unknown' are for compatibility with older switches and are used for debugging alarms and for those which do not fit any of the above, respectively.")
mscProbableCause = MibScalar((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 21, 22, 23, 24, 25, 26, 27, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 80, 81, 82, 83, 84, 90, 91, 92, 93, 100, 101, 102, 110, 111, 112, 113, 114, 120, 121, 122, 200, 201, 202, 203, 204))).clone(namedValues=NamedValues(("lossOfSignal", 0), ("lossOfFrame", 1), ("framingError", 2), ("localTransmissionError", 3), ("remoteTransmissionError", 4), ("callEstablishmentError", 5), ("degradedSignal", 6), ("commSubsystemFailure", 7), ("commProtocolError", 8), ("lanError", 9), ("dteDceInterfaceError", 10), ("responseTimeExcessive", 20), ("queueSizeExceeded", 21), ("bandwidthReduced", 22), ("retransmissionRateReduced", 23), ("thresholdCrossed", 24), ("performanceDegraded", 25), ("congestion", 26), ("atOrNearCapacity", 27), ("storageCapacityProblem", 40), ("versionMismatch", 41), ("corruptData", 42), ("cpuCyclesLimitExceeded", 43), ("softwareError", 44), ("softwareProgramError", 45), ("softwareProgramTermination", 46), ("fileError", 47), ("outOfMemory", 48), ("underlyingResourceUnavail", 49), ("applicationSubsystemFailure", 50), ("configurationError", 51), ("powerProblem", 60), ("timingProblem", 61), ("processorProblem", 62), ("datasetModemError", 63), ("multiplexorProblem", 64), ("receiverFailure", 65), ("transmitterFailure", 66), ("outputDeviceError", 67), ("inputDeviceError", 68), ("ioDeviceError", 69), ("equipmentFailure", 70), ("adapterError", 71), ("duplicateInfo", 80), ("infoMissing", 81), ("infoModification", 82), ("infoOutOfSequence", 83), ("unexpectedInfo", 84), ("denialOfService", 90), ("outOfService", 91), ("proceduralError", 92), ("otherOperational", 93), ("cableTamper", 100), ("intrusionDetection", 101), ("otherPhysical", 102), ("authenticationFailure", 110), ("breachOfConfidence", 111), ("nonRepudiationFailure", 112), ("unauthorizedAccess", 113), ("otherSecurityService", 114), ("delayedInfo", 120), ("keyExpired", 121), ("outOfHoursActivity", 122), ("operationalCondition", 200), ("debugging", 201), ("unknown", 202), ("inactiveVirtualCircuit", 203), ("networkServerIntervention", 204))))
if mibBuilder.loadTexts: mscProbableCause.setStatus('mandatory')
if mibBuilder.loadTexts: mscProbableCause.setDescription(' The probable cause for the alarm which usually qualifies the Alarm Type field. Most values are OSI-defined; refer refer to CCITT X.733 and X.736 (ISO 10164-4 and 10164-7) for a more complete description.')
mscNtpIndex = MibScalar((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 7, 8), DigitString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8))
if mibBuilder.loadTexts: mscNtpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscNtpIndex.setDescription(" An 8-digit code which is an index into an NTP to provide more description of the alarm and possible actions to take. The first 4 digits indicate a 'group' of alarms (belonging to a particular subsystem or component, etc.). The last 4 digits are a subindex arbitrarily assigned by the application which is responsible for them.")
mscCommentData = MibScalar((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 7, 9), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 750)))
if mibBuilder.loadTexts: mscCommentData.setStatus('mandatory')
if mibBuilder.loadTexts: mscCommentData.setDescription(' Additional textual information for the network operator to use. It contains only ASCII characters. Note: The total number of bytes in mscCommentData, mscOperatorData, and mscInternalData may not exceed 750 bytes.')
mscOptionalAlarmInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 8))
mscNotificationID = MibScalar((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 8, 1), Hex())
if mibBuilder.loadTexts: mscNotificationID.setStatus('mandatory')
if mibBuilder.loadTexts: mscNotificationID.setDescription(' The notification Id of the alarm. The high-order byte is the card number of the card from which this alarm originated. The low-order 24 bits contain a sequence number which increases each time an alarm is generated. Thus, this id provides a simple way of uniquely identifying an alarm as well as the order in which alarms are generated on a card. For cross-card ordering, one would have to look at the time stamp (see dateAndTime).')
mscLpForHierClear = MibScalar((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 8, 2), RowPointer())
if mibBuilder.loadTexts: mscLpForHierClear.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpForHierClear.setDescription(" A pointer to the RowStatus variable of the Logical Processor the component generating the alarm is running on. A component generating an Alarm with `mscActiveListStatus = set' can include this variable in the Alarm. If the identified Logical Processor generates a Hierarchical Clear Alarm, then it will clear the Set Alarm.")
mscOperatorData = MibScalar((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 8, 3), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 750)))
if mibBuilder.loadTexts: mscOperatorData.setStatus('mandatory')
if mibBuilder.loadTexts: mscOperatorData.setDescription(' Additional hexadecimal information for the network operator to use. Note: The total number of bytes in mscCommentData, mscOperatorData, and mscInternalData may not exceed 750 bytes.')
mscPid = MibScalar((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 8, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25)))
if mibBuilder.loadTexts: mscPid.setStatus('mandatory')
if mibBuilder.loadTexts: mscPid.setDescription(' A string representation of the internal process id (Pid) of the process which generated the alarm (for internal use only). Note that it may or may not map to the mscComponentName field. ')
mscFileName = MibScalar((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 8, 5), DisplayString())
if mibBuilder.loadTexts: mscFileName.setStatus('mandatory')
if mibBuilder.loadTexts: mscFileName.setDescription(' An internal filename (for internal use only).')
mscFileLineNumber = MibScalar((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 8, 6), Unsigned32())
if mibBuilder.loadTexts: mscFileLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mscFileLineNumber.setDescription(' An internal line number in the file (see filename) referred to above (for internal use only).')
mscFileVersion = MibScalar((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 8, 7), DisplayString())
if mibBuilder.loadTexts: mscFileVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mscFileVersion.setDescription(' A version indicator of the file (filename) referred to above (for internal use only).')
mscInternalData = MibScalar((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 8, 8), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 750)))
if mibBuilder.loadTexts: mscInternalData.setStatus('mandatory')
if mibBuilder.loadTexts: mscInternalData.setDescription(' An additional internal hexadecimal information for internal use only. Note: The total number of bytes in comment, operator, and internal data may not exceed 750 bytes.')
mscProvisionalAlarmInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 9))
mscCid = MibScalar((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 9, 1), Unsigned32())
if mibBuilder.loadTexts: mscCid.setStatus('mandatory')
if mibBuilder.loadTexts: mscCid.setDescription(' This is a Custom Identifier(CID) of the component which generated the alarm')
mscCriticalAlarm = NotificationType((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2) + (0,1)).setObjects(("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscComponentRowPointer"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscComponentName"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscEventTime"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscActiveListStatus"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscSeverity"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscAlarmType"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscProbableCause"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscNtpIndex"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscCommentData"))
if mibBuilder.loadTexts: mscCriticalAlarm.setDescription(" This trap is used to provide a real time indication of a critical Alarm condition. The variables listed in the VARIABLES clause, defined in the `mscMandatoryAlarmInfo' group are present in all critical alarms. Additional variables as defined in the 'mscOptionalAlarmInfo' group may be included if appropriate. ")
mscMajorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2) + (0,2)).setObjects(("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscComponentRowPointer"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscComponentName"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscEventTime"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscActiveListStatus"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscSeverity"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscAlarmType"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscProbableCause"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscNtpIndex"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscCommentData"))
if mibBuilder.loadTexts: mscMajorAlarm.setDescription(" This trap is used to provide a real time indication of a major Alarm condition. The variables listed in the VARIABLES clause, defined in the `mscMandatoryAlarmInfo' group are present in all major alarms. Additional variables as defined in the 'mscOptionalAlarmInfo' group may be included if appropriate. ")
mscMinorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2) + (0,3)).setObjects(("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscComponentRowPointer"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscComponentName"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscEventTime"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscActiveListStatus"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscSeverity"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscAlarmType"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscProbableCause"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscNtpIndex"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscCommentData"))
if mibBuilder.loadTexts: mscMinorAlarm.setDescription(" This trap is used to provide a real time indication of a minor Alarm condition. The variables listed in the VARIABLES clause, defined in the `mscMandatoryAlarmInfo' group are present in all minor alarms. Additional variables as defined in the 'mscOptionalAlarmInfo' group may be included if appropriate. ")
mscWarningAlarm = NotificationType((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2) + (0,4)).setObjects(("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscComponentRowPointer"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscComponentName"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscEventTime"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscActiveListStatus"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscSeverity"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscAlarmType"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscProbableCause"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscNtpIndex"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscCommentData"))
if mibBuilder.loadTexts: mscWarningAlarm.setDescription(" This trap is used to provide a real time indication of a warning Alarm condition. The variables listed in the VARIABLES clause, defined in the `mscMandatoryAlarmInfo' group are present in all warning alarms. Additional variables as defined in the 'mscOptionalAlarmInfo' group may be included if appropriate. ")
mscClearedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2) + (0,5)).setObjects(("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscComponentRowPointer"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscComponentName"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscEventTime"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscActiveListStatus"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscSeverity"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscAlarmType"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscProbableCause"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscNtpIndex"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscCommentData"))
if mibBuilder.loadTexts: mscClearedAlarm.setDescription(" This trap is used to provide a real time indication of a cleared Alarm. The variables listed in the VARIABLES clause, defined in the `mscMandatoryAlarmInfo' group are present in all cleared alarms. Additional variables as defined in the 'mscOptionalAlarmInfo' group may be included if appropriate. ")
mscIndeterminateAlarm = NotificationType((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2) + (0,6)).setObjects(("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscComponentRowPointer"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscComponentName"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscEventTime"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscActiveListStatus"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscSeverity"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscAlarmType"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscProbableCause"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscNtpIndex"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscCommentData"))
if mibBuilder.loadTexts: mscIndeterminateAlarm.setDescription(" This trap is used to provide a real time indication of an indeterminate Alarm condition. The variables listed in the VARIABLES clause, defined in the `mscMandatoryAlarmInfo' group are present in all indeterminate alarms. Additional variables as defined in the 'mscOptionalAlarmInfo' group may be included if appropriate. ")
alarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 4, 1))
alarmGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 4, 1, 1))
alarmGroupCA01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 4, 1, 1, 2))
alarmGroupCA01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 4, 1, 1, 2, 2))
alarmNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 4, 2))
alarmNotificationsGroupCA01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 4, 2, 1))
alarmCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 4, 3))
alarmCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 4, 3, 1))
alarmCapabilitiesCA01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 4, 3, 1, 2))
alarmCapabilitiesCA01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 4, 3, 1, 2, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-AlarmMIB", mscOperatorData=mscOperatorData, alarmGroupCA=alarmGroupCA, mscMandatoryAlarmInfo=mscMandatoryAlarmInfo, mscSeverity=mscSeverity, mscAlarmTrap=mscAlarmTrap, mscInternalData=mscInternalData, mscCid=mscCid, mscCriticalAlarm=mscCriticalAlarm, mscWarningAlarm=mscWarningAlarm, mscProbableCause=mscProbableCause, mscFileLineNumber=mscFileLineNumber, mscComponentName=mscComponentName, mscMajorAlarm=mscMajorAlarm, alarmCapabilitiesCA01A=alarmCapabilitiesCA01A, alarmMIB=alarmMIB, mscMinorAlarm=mscMinorAlarm, mscProvisionalAlarmInfo=mscProvisionalAlarmInfo, mscAlarmType=mscAlarmType, mscPid=mscPid, mscIndeterminateAlarm=mscIndeterminateAlarm, alarmNotificationsGroupCA01A=alarmNotificationsGroupCA01A, alarmGroupCA01A=alarmGroupCA01A, alarmCapabilities=alarmCapabilities, mscEventTime=mscEventTime, alarmGroupCA01=alarmGroupCA01, mscActiveListStatus=mscActiveListStatus, alarmGroup=alarmGroup, mscFileName=mscFileName, mscOptionalAlarmInfo=mscOptionalAlarmInfo, mscNotificationID=mscNotificationID, mscLpForHierClear=mscLpForHierClear, alarmCapabilitiesCA=alarmCapabilitiesCA, mscFileVersion=mscFileVersion, mscNtpIndex=mscNtpIndex, mscCommentData=mscCommentData, alarmNotifications=alarmNotifications, alarmCapabilitiesCA01=alarmCapabilitiesCA01, mscClearedAlarm=mscClearedAlarm, mscComponentRowPointer=mscComponentRowPointer)
