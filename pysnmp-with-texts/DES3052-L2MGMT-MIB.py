#
# PySNMP MIB module DES3052-L2MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DES3052-L2MGMT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:40:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, iso, Counter64, Counter32, ModuleIdentity, IpAddress, MibIdentifier, NotificationType, Bits, Integer32, Unsigned32, Gauge32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "iso", "Counter64", "Counter32", "ModuleIdentity", "IpAddress", "MibIdentifier", "NotificationType", "Bits", "Integer32", "Unsigned32", "Gauge32", "ObjectIdentity")
TextualConvention, TruthValue, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString", "RowStatus")
des3052, = mibBuilder.importSymbols("SWPRIMGMT-DES30XXP-MIB", "des3052")
swL2MgmtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2))
if mibBuilder.loadTexts: swL2MgmtMIB.setLastUpdated('1008030000Z')
if mibBuilder.loadTexts: swL2MgmtMIB.setOrganization('D-Link, Inc.')
if mibBuilder.loadTexts: swL2MgmtMIB.setContactInfo('http://support.dlink.com')
if mibBuilder.loadTexts: swL2MgmtMIB.setDescription('The Structure of Layer 2 Network Management Information for enterprise.')
class VlanId(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4094)

class PortList(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 127)

class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

swL2DevMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 1))
swL2PortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 2))
swL2QOSMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 3))
swL2TrunkMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 4))
swPortMirrorPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 6))
swIGMPPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7))
swL2TrafficSegMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 12))
swL2PortSecurityMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 15))
swL2CosMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 17))
swL2DhcpRelayMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 18))
swL2MgmtMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 20))
swL2LoopDetectMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 21))
swL2MultiFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 22))
swL2VlanMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 23))
swL2DhcpLocalRelayMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 24))
swL2FloodMAC = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 25))
swL2DevInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 1, 1))
swL2DevInfoFrontPanelLedStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2DevInfoFrontPanelLedStatus.setStatus('current')
if mibBuilder.loadTexts: swL2DevInfoFrontPanelLedStatus.setDescription('This object is a set of system LED indications. When log in system DES3028/DES3052 which do not support POE, the first two octets is defined as system LED. The first LED is power LED. The second LED is console LED. When log in system DES3028p/DES3052p which support POE, the first four octets are defined as system LED. The first octet is 0x02 and the second octet is 0x01 when in normal mode. Contrarily, the first octet is 0x01 and the second octet is 0x02 when in poe mode. The third octet indicates the power LED. The fourth octet indicates the console LED. The other octets are defined as follow: start on the third or fifth octets separately correspond to system support poe or system which does not support poe indicate the logical port LED (following swL2BasePort ordering). Every two bytes are presented to a port. The first byte is presentd to the Link/Activity LED. The second byte is presented to the Speed LED. Link/Activity LED : The most significant bit is used for blink/solid: 8 = The LED blinks. The second significant bit is used for link status: 1 = link fail. 2 = link pass. Speed LED : 01 = 10Mbps. 02 = 100Mbps. 03 = 1000Mbps. The four remaining bits are currently unused and must be 0.')
swL2DevCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 1, 2))
swL2DevCtrlSystemReboot = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("reboot", 2), ("save-config-and-reboot", 3), ("reboot-and-load-factory-default-config", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlSystemReboot.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlSystemReboot.setDescription('This object indicates the agent system reboot state. The agent always returns other(1) when this object is read.')
swL2DevCtrlSystemIP = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 1, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlSystemIP.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlSystemIP.setDescription('This object indicates system ip.')
swL2DevCtrlSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 1, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlSubnetMask.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlSubnetMask.setDescription('This object indicates system subnet mask.')
swL2DevCtrlDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 1, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlDefaultGateway.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlDefaultGateway.setDescription('This object indicates system default gateway.')
swL2DevCtrlManagementVlanId = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 1, 2, 5), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlManagementVlanId.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlManagementVlanId.setDescription('This object controls which Vlan includes system ip. And the Vlan should have been created.')
swL2DevCtrlIGMPSnooping = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlIGMPSnooping.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlIGMPSnooping.setDescription('This object indicates layer 2 Internet Group Management Protocol (IGMP) capture function is enabled or disabled .')
swL2DevCtrlCleanAllStatisticCounter = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 1, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlCleanAllStatisticCounter.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlCleanAllStatisticCounter.setDescription('As the object is set to active, all the statistic counters will be cleared. If set to normal, do nothing.')
swL2DevCtrlSnmpEnableAuthenTraps = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 1, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlSnmpEnableAuthenTraps.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlSnmpEnableAuthenTraps.setDescription('Indicates whether the SNMP entity is permitted to generate authenticationFailure traps. The value of this object overrides any configuration information; as such, it provides a means whereby all authenticationFailure traps may be disabled. Note that it is strongly recommended that this object be stored in non-volatile memory so that it remains constant across re-initializations of the network management system.')
swL2DevCtrlRmonState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 1, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlRmonState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlRmonState.setDescription('This object can be enabled or disabled RMON.')
swL2DevCtrlIpAutoConfig = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 1, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlIpAutoConfig.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlIpAutoConfig.setDescription('Indicates the status of automatically getting configuration from TFTP server on device')
swL2MACNotifyState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 1, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MACNotifyState.setStatus('current')
if mibBuilder.loadTexts: swL2MACNotifyState.setDescription('This object can enabled or disabled MAC Notification.')
swL2MACNotifyHistorySize = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 1, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MACNotifyHistorySize.setStatus('current')
if mibBuilder.loadTexts: swL2MACNotifyHistorySize.setDescription('This object indicates the history size of variation MAC in address table. The default value is 1 .')
swL2MACNotifyInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 1, 2, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MACNotifyInterval.setStatus('current')
if mibBuilder.loadTexts: swL2MACNotifyInterval.setDescription('This object indicates the time interval in second for trigger the MAC notify message. ')
swL2DevCtrlLLDPState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 1, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlLLDPState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlLLDPState.setDescription('Specifies the state of the LLDP function. When this function is enabled, the switch can start to transmit LLDP packets and receive and process the LLDP packets. The specific function of each port will depend on the per port LLDP setting. For the advertisement of LLDP packets, the switch announces the information to its neighbor through ports. For the receiving of LLDP packets, the switch will learn the information from the LLDP packets advertised from the neighbor in the neighbor table. ')
swL2DevCtrlLLDPForwardMessageState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 1, 2, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlLLDPForwardMessageState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlLLDPForwardMessageState.setDescription('When lldp is disabled and lldp forward_message is enabled, the received LLDP Data Units packet will be forwarded. ')
swL2DevCtrlAsymVlanState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 1, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlAsymVlanState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlAsymVlanState.setDescription('This object enables or disables the asymmetric VLAN feature of the device.')
swL2IGMPSnoopingMulticastVlanState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 1, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPSnoopingMulticastVlanState.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPSnoopingMulticastVlanState.setDescription('This indicates the global state of the igmp_snoop multicast_vlan.')
swL2DevCtrlVLANTrunkState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 1, 2, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlVLANTrunkState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlVLANTrunkState.setDescription('This indicates the global state of the VLAN trunking feature of the device.')
swL2DevCtrlWeb = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 1, 2, 27))
swL2DevCtrlWebState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 1, 2, 27, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlWebState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlWebState.setDescription('This object controls Web status.')
swL2DevCtrlTelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 1, 2, 28))
swL2DevCtrlTelnetState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 1, 2, 28, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlTelnetState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlTelnetState.setDescription('This object controls the Telnet status.')
swL2DevAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 1, 3))
swL2DevAlarmNewRoot = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmNewRoot.setStatus('current')
if mibBuilder.loadTexts: swL2DevAlarmNewRoot.setDescription('When the device has become the new root of the Spanning Tree, this object decides whether to send a new root trap.')
swL2DevAlarmTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmTopologyChange.setStatus('current')
if mibBuilder.loadTexts: swL2DevAlarmTopologyChange.setDescription('This object determines whether or not to send a trap message when the switch topology changes. If the object is enabled (3), the Topology Change trap is sent by the device when any of its configured ports transition from the Learning state to the Forwarding state, or from the Forwarding state to the Blocking state. For the same port transition, the device does not send the trap if this object value is disabled or in another state.')
swL2DevAlarmLinkChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmLinkChange.setStatus('current')
if mibBuilder.loadTexts: swL2DevAlarmLinkChange.setDescription('This object determines whether or not to send a trap message when the link changes. If the object is enabled (3), the Link Change trap is sent by the device when any of its port links change. The device does not send the trap if this object value is disabled or in another state.')
swL2PortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 2, 1), )
if mibBuilder.loadTexts: swL2PortInfoTable.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoTable.setDescription('A table that contains information about every port.')
swL2PortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 2, 1, 1), ).setIndexNames((0, "DES3052-L2MGMT-MIB", "swL2PortInfoPortIndex"), (0, "DES3052-L2MGMT-MIB", "swL2PortInfoMediumType"))
if mibBuilder.loadTexts: swL2PortInfoEntry.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoEntry.setDescription('A list of information for each port of the device.')
swL2PortInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoPortIndex.setDescription("This object indicates the module's port number.(1..Max port number in the module)")
swL2PortInfoMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(100, 101))).clone(namedValues=NamedValues(("copper", 100), ("fiber", 101)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoMediumType.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoMediumType.setDescription('This object indicates the port type: fiber or copper.')
swL2PortInfoLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("link-pass", 2), ("link-fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoLinkStatus.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoLinkStatus.setDescription('This object indicates the port link status.')
swL2PortInfoNwayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("auto", 1), ("half-10Mbps", 2), ("full-10Mbps", 3), ("half-100Mbps", 4), ("full-100Mbps", 5), ("half-1Gigabps", 6), ("full-1Gigabps", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoNwayStatus.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoNwayStatus.setDescription('This object indicates the port speed and duplex mode.')
swL2PortCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 2, 2), )
if mibBuilder.loadTexts: swL2PortCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlTable.setDescription('A table that contains control information about every port.')
swL2PortCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 2, 2, 1), ).setIndexNames((0, "DES3052-L2MGMT-MIB", "swL2PortCtrlPortIndex"), (0, "DES3052-L2MGMT-MIB", "swL2PortCtrlPortMediumType"))
if mibBuilder.loadTexts: swL2PortCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlEntry.setDescription('A list of control information for each port of the device.')
swL2PortCtrlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlPortIndex.setDescription("This object indicates the module's port number.(1..Max port number in the module)")
swL2PortCtrlPortMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(100, 101))).clone(namedValues=NamedValues(("copper", 100), ("fiber", 101)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlPortMediumType.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlPortMediumType.setDescription('This object indicates the port type: fiber or copper.')
swL2PortCtrlAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlAdminState.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlAdminState.setDescription('This object decides whether the port is enabled or disabled.')
swL2PortCtrlNwayState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 8, 9))).clone(namedValues=NamedValues(("nway-auto", 1), ("nway-disabled-10Mbps-Half", 2), ("nway-disabled-10Mbps-Full", 3), ("nway-disabled-100Mbps-Half", 4), ("nway-disabled-100Mbps-Full", 5), ("nway-disabled-1Gigabps-Full", 7), ("nway-disabled-1Gigabps-Full-Master", 8), ("nway-disabled-1Gigabps-Full-Slave", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlNwayState.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlNwayState.setDescription('Choose the port speed, duplex mode, and N-Way function mode.')
swL2PortCtrlFlowCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlFlowCtrlState.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlFlowCtrlState.setDescription('Set the flow control function as enabled or disabled.')
swL2PortCtrlDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlDescription.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlDescription.setDescription('The object describes the ports in text.')
swL2PortCtrlAddressLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlAddressLearning.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlAddressLearning.setDescription('This object decides whether the address learning is enabled or disabled.')
swL2PortCtrlMACNotifyState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlMACNotifyState.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlMACNotifyState.setDescription("This object sets each port's MAC notification state.")
swL2PortCtrlMulticastfilter = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("forward-unregistered-groups", 2), ("filter-unregistered-groups", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlMulticastfilter.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlMulticastfilter.setDescription('This object decides the multicast packet filtering mode on this port. ')
swL2PortCtrlMDIXState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 1), ("normal", 2), ("cross", 3), ("other", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlMDIXState.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlMDIXState.setDescription("This object configures the MDIX setting of the port. The value 'other' is for those entries in which MDIX is not applicable.")
swL2PortErrTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 2, 3), )
if mibBuilder.loadTexts: swL2PortErrTable.setStatus('current')
if mibBuilder.loadTexts: swL2PortErrTable.setDescription('A table that contains information about the Err port.')
swL2PortErrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 2, 3, 1), ).setIndexNames((0, "DES3052-L2MGMT-MIB", "swL2PortErrPortIndex"))
if mibBuilder.loadTexts: swL2PortErrEntry.setStatus('current')
if mibBuilder.loadTexts: swL2PortErrEntry.setDescription('A list of information for the err port of the device.')
swL2PortErrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortErrPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortErrPortIndex.setDescription("This object indicates the module's port number.(1..Max port number in the module)")
swL2PortErrPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortErrPortState.setStatus('current')
if mibBuilder.loadTexts: swL2PortErrPortState.setDescription('This object decides whether the port state is enabled or disabled.')
swL2PortErrPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("err-disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortErrPortStatus.setStatus('current')
if mibBuilder.loadTexts: swL2PortErrPortStatus.setDescription('This object decides whether the PortStatus is err-disabled.')
swL2PortErrPortReason = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("stp-lbd", 1), ("storm-control", 2), ("ddm", 3), ("duld", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortErrPortReason.setStatus('current')
if mibBuilder.loadTexts: swL2PortErrPortReason.setDescription('This object indicates the module which disabled the port.')
swL2PortErrDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 2, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortErrDescription.setStatus('current')
if mibBuilder.loadTexts: swL2PortErrDescription.setDescription('The object describes the ports in text.')
swL2QOSBandwidthControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 3, 1), )
if mibBuilder.loadTexts: swL2QOSBandwidthControlTable.setStatus('current')
if mibBuilder.loadTexts: swL2QOSBandwidthControlTable.setDescription('.')
swL2QOSBandwidthControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 3, 1, 1), ).setIndexNames((0, "DES3052-L2MGMT-MIB", "swL2QOSBandwidthPortIndex"))
if mibBuilder.loadTexts: swL2QOSBandwidthControlEntry.setStatus('current')
if mibBuilder.loadTexts: swL2QOSBandwidthControlEntry.setDescription('A list of information contained in swL2QOSBandwidthControlTable.')
swL2QOSBandwidthPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 650))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSBandwidthPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2QOSBandwidthPortIndex.setDescription('Indicates the port.')
swL2QOSBandwidthRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1024000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSBandwidthRxRate.setStatus('current')
if mibBuilder.loadTexts: swL2QOSBandwidthRxRate.setDescription('Indicates the RX Rate(Mbit/sec) of the specifed port. A value of 1024000 means no limit.')
swL2QOSBandwidthTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1024000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSBandwidthTxRate.setStatus('current')
if mibBuilder.loadTexts: swL2QOSBandwidthTxRate.setDescription('Indicates the TX Rate(Mbit/sec) of the specifed port. A value of 1024000 means no limit. ')
swL2QOSBandwidthRadiusRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSBandwidthRadiusRxRate.setStatus('current')
if mibBuilder.loadTexts: swL2QOSBandwidthRadiusRxRate.setDescription('The Rx Rate value comes from the RADIUS server, If an 802.1X port is authenticated, this value will overwrite the locally configured Rx Rate. ')
swL2QOSBandwidthRadiusTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSBandwidthRadiusTxRate.setStatus('current')
if mibBuilder.loadTexts: swL2QOSBandwidthRadiusTxRate.setDescription('The Tx Rate value comes from the RADIUS server, If an 802.1X port is authenticated, this value will overwrite the locally configured Tx Rate. ')
swL2QOSSchedulingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 3, 2), )
if mibBuilder.loadTexts: swL2QOSSchedulingTable.setStatus('current')
if mibBuilder.loadTexts: swL2QOSSchedulingTable.setDescription('.')
swL2QOSSchedulingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 3, 2, 1), ).setIndexNames((0, "DES3052-L2MGMT-MIB", "swL2QOSSchedulingClassIndex"))
if mibBuilder.loadTexts: swL2QOSSchedulingEntry.setStatus('current')
if mibBuilder.loadTexts: swL2QOSSchedulingEntry.setDescription('A list of information contained in the swL2QOSSchedulingTable.')
swL2QOSSchedulingClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSSchedulingClassIndex.setStatus('current')
if mibBuilder.loadTexts: swL2QOSSchedulingClassIndex.setDescription('Indicates the hardware queue number.')
swL2QOSSchedulingMaxWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 55))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSSchedulingMaxWeight.setStatus('current')
if mibBuilder.loadTexts: swL2QOSSchedulingMaxWeight.setDescription(' ')
swL2QOSSchedulingMechanism = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("strict", 1), ("roundrobin", 2), ("weightfair", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSSchedulingMechanism.setStatus('current')
if mibBuilder.loadTexts: swL2QOSSchedulingMechanism.setDescription('Indicates the mechanism of QOS scheduling.')
swL2QOSSchedulingMechanismCtrl = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("strict", 1), ("weightfair", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSSchedulingMechanismCtrl.setStatus('current')
if mibBuilder.loadTexts: swL2QOSSchedulingMechanismCtrl.setDescription('This object can control QOS scheduling Mechanism.')
swL2QOS8021pUserPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 3, 3), )
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityTable.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityTable.setDescription('.')
swL2QOS8021pUserPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 3, 3, 1), ).setIndexNames((0, "DES3052-L2MGMT-MIB", "swL2QOS8021pUserPriorityIndex"))
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityEntry.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityEntry.setDescription('A list of information contained in the swL2QOS8021pUserPriorityTable.')
swL2QOS8021pUserPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityIndex.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityIndex.setDescription('The 802.1p user priority.')
swL2QOS8021pUserPriorityClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityClass.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityClass.setDescription("The number of the switch's hardware priority queue. The switch has four hardware priority queues available. They are numbered between 0 (the lowest priority) and 3 (the highest priority).")
swL2QOS8021pDefaultPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 3, 4), )
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityTable.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityTable.setDescription('.')
swL2QOS8021pDefaultPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 3, 4, 1), ).setIndexNames((0, "DES3052-L2MGMT-MIB", "swL2QOS8021pDefaultPriorityIndex"))
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityEntry.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityEntry.setDescription('A list of information contained in the swL2QOS8021pDefaultPriorityTable.')
swL2QOS8021pDefaultPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 650))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityIndex.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityIndex.setDescription('Indicates the port number.')
swL2QOS8021pDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriority.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriority.setDescription('The priority value to assign to untagged packets received by the switch ports on the switch.')
swL2QOS8021pRadiusPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOS8021pRadiusPriority.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pRadiusPriority.setDescription('Indicates the value of 802.1p comes from RADIUS server. If an 802.1X port is authenticated, this value will overwrite the local configured value.')
swPortTrunkMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTrunkMaxEntries.setStatus('current')
if mibBuilder.loadTexts: swPortTrunkMaxEntries.setDescription('The max entries of the swPortTrunkTable')
swPortTrunkMaxPortMembers = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTrunkMaxPortMembers.setStatus('current')
if mibBuilder.loadTexts: swPortTrunkMaxPortMembers.setDescription('The max number of ports allowed in a trunk.')
swPortTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 4, 3), )
if mibBuilder.loadTexts: swPortTrunkTable.setStatus('current')
if mibBuilder.loadTexts: swPortTrunkTable.setDescription('This table specifies the port membership for each logical link.')
swPortTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 4, 3, 1), ).setIndexNames((0, "DES3052-L2MGMT-MIB", "swPortTrunkIndex"))
if mibBuilder.loadTexts: swPortTrunkEntry.setStatus('current')
if mibBuilder.loadTexts: swPortTrunkEntry.setDescription('A list of information that specifies which port group forms a single logical link.')
swPortTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTrunkIndex.setStatus('current')
if mibBuilder.loadTexts: swPortTrunkIndex.setDescription('The index of logical port trunk.')
swPortTrunkMasterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 4, 3, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPortTrunkMasterPort.setStatus('current')
if mibBuilder.loadTexts: swPortTrunkMasterPort.setDescription('The object indicates the master port number of the port trunk entry. The first port of the trunk is implicitly configured to be the master logical port. When using a Port Trunk, you can not configure the other ports of the group except the master port. Their configuration must be the same as the master port (e.g. speed, duplex, enabled/disabled, flow control, and so on).')
swPortTrunkPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 4, 3, 1, 3), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPortTrunkPortList.setStatus('current')
if mibBuilder.loadTexts: swPortTrunkPortList.setDescription('Indicate member ports of a logical trunk.')
swPortTrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("lacp", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPortTrunkType.setStatus('current')
if mibBuilder.loadTexts: swPortTrunkType.setDescription('This object indicates the type of this entry.')
swPortTrunkActivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 4, 3, 1, 5), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTrunkActivePort.setStatus('current')
if mibBuilder.loadTexts: swPortTrunkActivePort.setDescription('This object indicates the active ports of this entry.')
swPortTrunkState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 4, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPortTrunkState.setStatus('current')
if mibBuilder.loadTexts: swPortTrunkState.setDescription('This object indicates the status of this entry. when the state is CreatAndGo (4),the type of trunk is static (1); when the state is CreatAndWait (5), the type of trunk is lacp(2). ')
swPortTrunkFloodingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 4, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTrunkFloodingPort.setStatus('current')
if mibBuilder.loadTexts: swPortTrunkFloodingPort.setDescription('The flooding port of every trunk.')
swL2TrunkAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("mac-source", 2), ("mac-destination", 3), ("mac-source-dest", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkAlgorithm.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkAlgorithm.setDescription('This object configures part of the packet to be examined by the switch when selecting the egress port for transmitting load-sharing data.')
swL2TrunkLACPPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 4, 5), )
if mibBuilder.loadTexts: swL2TrunkLACPPortTable.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkLACPPortTable.setDescription('This table specifies which port group a set of ports (up to 8) is formed into a single logical link.')
swL2TrunkLACPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 4, 5, 1), ).setIndexNames((0, "DES3052-L2MGMT-MIB", "swL2TrunkLACPPortIndex"))
if mibBuilder.loadTexts: swL2TrunkLACPPortEntry.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkLACPPortEntry.setDescription('A list of information specifies which port group a set of ports (up to 8) is formed into a single logical link.')
swL2TrunkLACPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkLACPPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkLACPPortIndex.setDescription('The index of the logical port LACP. ')
swL2TrunkLACPPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkLACPPortState.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkLACPPortState.setDescription('The state of the logical port LACP.')
swL2TrunkVLANTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 4, 6), )
if mibBuilder.loadTexts: swL2TrunkVLANTable.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkVLANTable.setDescription('This table is used to manage the VLAN trunking feature of the device.')
swL2TrunkVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 4, 6, 1), ).setIndexNames((0, "DES3052-L2MGMT-MIB", "swL2TrunkVLANPort"))
if mibBuilder.loadTexts: swL2TrunkVLANEntry.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkVLANEntry.setDescription('This object is used to configure the VLAN trunking settings for each port.')
swL2TrunkVLANPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkVLANPort.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkVLANPort.setDescription('This object indicates the port being configured.')
swL2TrunkVLANState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkVLANState.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkVLANState.setDescription('The state of the logical port LACP.')
swPortMirrorRxPortList = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 6, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortMirrorRxPortList.setStatus('current')
if mibBuilder.loadTexts: swPortMirrorRxPortList.setDescription('This object indicates the Rx port list of ports to be sniffed.')
swPortMirrorTxPortList = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 6, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortMirrorTxPortList.setStatus('current')
if mibBuilder.loadTexts: swPortMirrorTxPortList.setDescription('This object indicates the Tx port list of ports to be sniffed.')
swPortMirrorTargetPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortMirrorTargetPort.setStatus('current')
if mibBuilder.loadTexts: swPortMirrorTargetPort.setDescription('This object indicates the switch whose port will sniff another port. A trunk port member cannot be configured as a target Snooping port. The port number is the sequential (logical) number which is also applied to the bridge MIB, etc. ')
swPortMirrorState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortMirrorState.setStatus('current')
if mibBuilder.loadTexts: swPortMirrorState.setDescription('This object indicates the status of this entry.')
swL2IGMPMaxSupportedVlans = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMaxSupportedVlans.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMaxSupportedVlans.setDescription('The maximum number of VLANs in the layer 2 IGMP control table (swL2IGMPCtrlTable).')
swL2IGMPMaxIpGroupNumPerVlan = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMaxIpGroupNumPerVlan.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMaxIpGroupNumPerVlan.setDescription('The maximum number of multicast IP groups per VLAN in the layer 2 IGMP information table (swL2IGMPQueryInfoTable).')
swL2IGMPCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 3), )
if mibBuilder.loadTexts: swL2IGMPCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPCtrlTable.setDescription("The table controls the VLAN's IGMP function. Its scale depends on the current VLAN state (swL2VlanInfoStatus). If the VLAN mode is disabled, there is only one entry in the table, with index 1. If VLAN is in Port-Based or 802.1q mode, the number of entries can be up to 12, with an index range from 1 to 12.")
swL2IGMPCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 3, 1), ).setIndexNames((0, "DES3052-L2MGMT-MIB", "swL2IGMPCtrlVid"))
if mibBuilder.loadTexts: swL2IGMPCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPCtrlEntry.setDescription('An entry in IGMP control table (swL2IGMPCtrlTable). The entry is effective only when IGMP captures the switch (swL2DevCtrlIGMPSnooping) is enabled.')
swL2IGMPCtrlVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPCtrlVid.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPCtrlVid.setDescription("This object indicates the IGMP control entry's VLAN ID. If VLAN is disabled, the VID is always 0 and cannot be changed by management users. If VLAN is in Port-Based mode, the VID is arranged from 1 to 12, fixed form. If VLAN is in 802.1q mode, the VID setting can vary from 1 to 4094 by management user, and the VID in each entry must be unique in the IGMP Control Table.")
swL2IGMPQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPQueryInterval.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPQueryInterval.setDescription('The frequency at which IGMP Host-Query packets are transmitted on this switch.')
swL2IGMPMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMaxResponseTime.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMaxResponseTime.setDescription('The maximum query response time on this switch.')
swL2IGMPRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPRobustness.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRobustness.setDescription('The Robustness Variable allows tuning for the expected packet loss on a subnet. If a subnet is expected to be lossy, the Robustness Variable may be increased. IGMP is robust to (Robustness Variable-1) packet losses.')
swL2IGMPLastMemberQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPLastMemberQueryInterval.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPLastMemberQueryInterval.setDescription('The Last Member Query Interval is the Max Response Time inserted into Group-Specific Queries sent in response to Leave Group messages, and is also the amount of time between Group-Specific Query messages.')
swL2IGMPHostTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16711450)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPHostTimeout.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPHostTimeout.setDescription('The timer value for sending IGMP query packets when none was sent by the host in the LAN. The timer works on a per-VLAN basis. Our device will be activated to send the query message if the timer expires. Please reference RFC2236-1997.')
swL2IGMPRouteTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16711450)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPRouteTimeout.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRouteTimeout.setDescription('The Router Timeout is how long a host must wait after hearing a Query before it may send any IGMPv2 messages.')
swL2IGMPLeaveTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16711450)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPLeaveTimer.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPLeaveTimer.setDescription('When a querier receives a Leave Group message for a group that has group members on the reception interface, it sends Group-Specific Queries every swL2IGMPLeaveTimer to the group being left.')
swL2IGMPQueryState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPQueryState.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPQueryState.setDescription('This object decides if the IGMP query is enabled or disabled.')
swL2IGMPCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("querier", 2), ("non-querier", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPCurrentState.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPCurrentState.setDescription('This object indicates the current IGMP query state.')
swL2IGMPCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPCtrlState.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPCtrlState.setDescription('This object indicates the status of this entry. other (1) - This entry is currently in use but the conditions under which it will remain so are different from each of the following values. disable (2) - IGMP function is disabled for this entry. enable (3) - IGMP function is enabled for this entry.')
swL2IGMPFastLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPFastLeave.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPFastLeave.setDescription(' ')
swL2IGMPDynIPMultVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPDynIPMultVlanState.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPDynIPMultVlanState.setDescription('This object is used to disable or enable the dynamic IP multicast feature in this VLAN.')
swL2IGMPDynIPMultVlanAge = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPDynIPMultVlanAge.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPDynIPMultVlanAge.setDescription('This object is used to enable or disable aging on the dynamic IP multicast entry in this VLAN.')
swL2IGMPQueryInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 4), )
if mibBuilder.loadTexts: swL2IGMPQueryInfoTable.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPQueryInfoTable.setDescription('The table contains the number of current IGMP query packets which are captured by this device, as well as the IGMP query packets sent by the device.')
swL2IGMPQueryInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 4, 1), ).setIndexNames((0, "DES3052-L2MGMT-MIB", "swL2IGMPInfoVid"))
if mibBuilder.loadTexts: swL2IGMPQueryInfoEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPQueryInfoEntry.setDescription('Information about current IGMP query information, provided that swL2DevCtrlIGMPSnooping and swL2IGMPCtrState of associated VLAN entry are all enabled.')
swL2IGMPInfoVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPInfoVid.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPInfoVid.setDescription('This object indicates the VID of the associated IGMP info table entry. It follows swL2IGMPCtrlVid in the associated entry of IGMP control table (swL2IGMPCtrlTable).')
swL2IGMPInfoQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPInfoQueryCount.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPInfoQueryCount.setDescription('This object indicates the number of query packets received since the IGMP function enabled, on a per-VLAN basis.')
swL2IGMPInfoTxQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPInfoTxQueryCount.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPInfoTxQueryCount.setDescription('This object indicates the send count of IGMP query messages, on a per-VLAN basis. In case of the IGMP timer expiring, the switch sends IGMP query packets to related VLAN member ports and increment this object by 1.')
swL2IGMPInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 5), )
if mibBuilder.loadTexts: swL2IGMPInfoTable.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPInfoTable.setDescription('The table containing current IGMP information which was captured by this device, provided that swL2DevCtrlIGMPSnooping and swL2IGMPCtrlState of associated VLAN entry are all enabled. Note that the priority of IGMP table entries is lower than Filtering Table, i.e. if there is a table hash collision between the entries of IGMP Table and Filtering Table inside the switch H/W address table, then Filtering Table entry overwrite the colliding entry of IGMP Table. Also see swL2FilterMgmt description.')
swL2IGMPInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 5, 1), ).setIndexNames((0, "DES3052-L2MGMT-MIB", "swL2IGMPVid"), (0, "DES3052-L2MGMT-MIB", "swL2IGMPGroupIpAddr"))
if mibBuilder.loadTexts: swL2IGMPInfoEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPInfoEntry.setDescription('Information about current IGMP information which was captured by this device, provided that swL2DevCtrlIGMPSnooping and swL2IGMPCtrlState of associated VLAN entry are all enabled.')
swL2IGMPVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPVid.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPVid.setDescription('This object indicates the VID of an individual IGMP table entry. It shows the VID of IGMP report information captured on the network.')
swL2IGMPGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPGroupIpAddr.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPGroupIpAddr.setDescription('This object is the identify group IP address which is captured from IGMP packet, on a per-VLAN basis.')
swL2IGMPMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 5, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMacAddr.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMacAddr.setDescription('This object identifies the MAC address which is corresponding to swL2IGMPGroupIpAddr, on a per-VLAN basis.')
swL2IGMPPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 5, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPPortMap.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPPortMap.setDescription("This object indicates which ports belong to the same multicast group, on a per-VLAN basis. Each multicast group has an octet string to indicate the port map. The most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the switch is represented by a single bit within the value of this object. If that bit has a value of '1' then that port is included in the set of ports; the port is not included if its bit has a value of '0' (Note that the setting of the bit corresponding to the port from which a frame is received is irrelevant). The 4 octets represent one unit port according to its logic port. If the unit is less than 32 ports, the other port will just fill this value with zeros.")
swL2IGMPIpGroupReportCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPIpGroupReportCount.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPIpGroupReportCount.setDescription('This object indicates how many report packets were received by our device corresponding with this entry that has the IGMP function enabled, on a per-VLAN basis.')
swL2IGMPRouterPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 6), )
if mibBuilder.loadTexts: swL2IGMPRouterPortTable.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRouterPortTable.setDescription('The information of the router port table.')
swL2IGMPRouterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 6, 1), ).setIndexNames((0, "DES3052-L2MGMT-MIB", "swL2IGMPRouterPortVlanid"))
if mibBuilder.loadTexts: swL2IGMPRouterPortEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRouterPortEntry.setDescription('The entry of the swL2IGMPRouterPortTable.')
swL2IGMPRouterPortVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPRouterPortVlanid.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRouterPortVlanid.setDescription('This object indicates the VLAN ID of the router port entry.')
swL2IGMPRouterPortVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 6, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPRouterPortVlanName.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRouterPortVlanName.setDescription('This object indicates the VLAN name of the router port entry.')
swL2IGMPRouterPortStaticPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 6, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPRouterPortStaticPortList.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRouterPortStaticPortList.setDescription('This object indicates the static portlist of the router port entry.')
swL2IGMPRouterPortDynamicPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 6, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPRouterPortDynamicPortList.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRouterPortDynamicPortList.setDescription('This object indicates the dynamic portlist of the router port entry.')
swL2IGMPRouterPortForbiddenPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 6, 1, 5), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPRouterPortForbiddenPortList.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRouterPortForbiddenPortList.setDescription('This object indicates the forbidden portlist of the router port entry.')
swL2IGMPAccessAuthTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 7), )
if mibBuilder.loadTexts: swL2IGMPAccessAuthTable.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPAccessAuthTable.setDescription('This table is used to manage the IGMP Access Authentication configurations of the device.')
swL2IGMPAccessAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 7, 1), ).setIndexNames((0, "DES3052-L2MGMT-MIB", "swL2IGMPAccessAuthPort"))
if mibBuilder.loadTexts: swL2IGMPAccessAuthEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPAccessAuthEntry.setDescription('A list of manageable entities for IGMP Access Authentication. The configuration is done per port.')
swL2IGMPAccessAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPAccessAuthPort.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPAccessAuthPort.setDescription('The index of the swL2IGMPAccessAuthTable. This object corresponds to the port being configured.')
swL2IGMPAccessAuthState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPAccessAuthState.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPAccessAuthState.setDescription('This object denotes the status of IGMP Access Authentication of the port.')
swL2IGMPMulticastVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 8), )
if mibBuilder.loadTexts: swL2IGMPMulticastVlanTable.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanTable.setDescription('Information about the IGMP snooping multicast VLAN table.')
swL2IGMPMulticastVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 8, 1), ).setIndexNames((0, "DES3052-L2MGMT-MIB", "swL2IGMPMulticastVlanid"))
if mibBuilder.loadTexts: swL2IGMPMulticastVlanEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanEntry.setDescription('The entry of swL2IGMPMulticastVlanTable.')
swL2IGMPMulticastVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanid.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanid.setDescription('This object indicates the VLAN ID of the IGMP snooping multicast VLAN entry.')
swL2IGMPMulticastVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanName.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanName.setDescription('This object indicates the VLAN name of the IGMP snooping multicast VLAN entry.')
swL2IGMPMulticastVlanSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 8, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanSourcePort.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanSourcePort.setDescription('This object indicates the port list of the source ports of the IGMP snooping multicast VLAN. The source ports will be set as tag ports of the VLAN entry and the IGMP control messages received from the member ports will be forwarded to the source ports.')
swL2IGMPMulticastVlanMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 8, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanMemberPort.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanMemberPort.setDescription('This object indicates the port list of the member ports of the IGMP snooping multicast VLAN. The source ports will be set as untagged ports of the VLAN entry and the IGMP control messages received from the member ports will be forwarded to the source ports.')
swL2IGMPMulticastVlanTagMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 8, 1, 5), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanTagMemberPort.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanTagMemberPort.setDescription('This object indicates the port list of the tag member ports of the IGMP snooping multicast VLAN.')
swL2IGMPMulticastVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanState.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanState.setDescription('This object can be used to enable or disable the IGMP snooping multicast VLAN.')
swL2IGMPMulticastVlanReplaceSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 8, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanReplaceSourceIp.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanReplaceSourceIp.setDescription('The replacement source IP of this multicast VLAN.')
swL2IGMPMulticastVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 8, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanRowStatus.setDescription('This object indicates the status of this entry.')
swL2IGMPMulticastVlanRemoveAllMcastAddrListAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanRemoveAllMcastAddrListAction.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanRemoveAllMcastAddrListAction.setDescription('This object indicates whether to remove all the multicast address lists from the IGMP multicast VLAN or not.')
swL2IGMPMulticastVlanUntagSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 8, 1, 10), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanUntagSourcePort.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanUntagSourcePort.setDescription('This object indicates the untagged member ports to add to the multicast VLAN.')
swL2IGMPMulticastVlanRemapPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 8, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)).clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanRemapPriority.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanRemapPriority.setDescription("The priority value (0 to 7) to be associated with the data traffic to be forwarded on the multicast VLAN. When set to 8, the packet's original priority will be used.")
swL2IGMPMulticastVlanReplacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanReplacePriority.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanReplacePriority.setDescription("Specifies that a packet's priority will be changed by the switch based on the remap priority. This flag will only take effect when remap priority is set.")
swL2IGMPMulticastVlanGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 9), )
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupTable.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupTable.setDescription('The table containing the IGMP snooping multicast VLAN group information')
swL2IGMPMulticastVlanGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 9, 1), ).setIndexNames((0, "DES3052-L2MGMT-MIB", "swL2IGMPMulticastVlanGroupVid"), (0, "DES3052-L2MGMT-MIB", "swL2IGMPMulticastVlanGroupFromIp"), (0, "DES3052-L2MGMT-MIB", "swL2IGMPMulticastVlanGroupToIp"))
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupEntry.setDescription('Information about the current IGMP snooping multicast VLAN group.')
swL2IGMPMulticastVlanGroupVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupVid.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupVid.setDescription('This object indicates the VID of the IGMP snooping multicast VLAN group.')
swL2IGMPMulticastVlanGroupFromIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupFromIp.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupFromIp.setDescription('Specifies the multicast address list for this VLAN.')
swL2IGMPMulticastVlanGroupToIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 9, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupToIp.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupToIp.setDescription('Specifies the multicast address list for this VLAN.')
swL2IGMPMulticastVlanGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 9, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupStatus.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupStatus.setDescription('This object indicates the status of this entry.')
swL2IGMPv3Table = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 10), )
if mibBuilder.loadTexts: swL2IGMPv3Table.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPv3Table.setDescription('This table contains the IGMP snooping V3 information.')
swL2IGMPv3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 10, 1), ).setIndexNames((0, "DES3052-L2MGMT-MIB", "swL2IGMPVid"), (0, "DES3052-L2MGMT-MIB", "swL2IGMPGroupIpAddr"), (0, "DES3052-L2MGMT-MIB", "swL2IGMPv3SourceIPAddr"))
if mibBuilder.loadTexts: swL2IGMPv3Entry.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPv3Entry.setDescription('Information about the current IGMP snooping V3.')
swL2IGMPv3SourceIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPv3SourceIPAddr.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPv3SourceIPAddr.setDescription('This object identifies the source IP addresses from the group where they were captured from. IGMP packets, on a per-VLAN basis.')
swL2IGMPv3Forwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPv3Forwarding.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPv3Forwarding.setDescription('This object identifies if the packets from the source IP addresses are forwarding or not.')
swL2IGMPv3ExpireTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPv3ExpireTimer.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPv3ExpireTimer.setDescription('This object identifies the leaving times of the source time.')
swIGMPSnoopingGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 11), )
if mibBuilder.loadTexts: swIGMPSnoopingGroupTable.setStatus('current')
if mibBuilder.loadTexts: swIGMPSnoopingGroupTable.setDescription('The table contains the current IGMP snooping group information captured by the device.')
swIGMPSnoopingGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 11, 1), ).setIndexNames((0, "DES3052-L2MGMT-MIB", "swIGMPSnoopingGroupVid"), (0, "DES3052-L2MGMT-MIB", "swIGMPSnoopingGroupGroupAddr"), (0, "DES3052-L2MGMT-MIB", "swIGMPSnoopingGroupSourceAddr"))
if mibBuilder.loadTexts: swIGMPSnoopingGroupEntry.setStatus('current')
if mibBuilder.loadTexts: swIGMPSnoopingGroupEntry.setDescription('Information about the current IGMP snooping group information which has been captured by the device.')
swIGMPSnoopingGroupVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPSnoopingGroupVid.setStatus('current')
if mibBuilder.loadTexts: swIGMPSnoopingGroupVid.setDescription('This object indicates the VID of the individual IGMP snooping group table entry.')
swIGMPSnoopingGroupGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 11, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPSnoopingGroupGroupAddr.setStatus('current')
if mibBuilder.loadTexts: swIGMPSnoopingGroupGroupAddr.setDescription('This object identifies the group IP address which has been captured from the IGMP packet, on a per-VLAN basis.')
swIGMPSnoopingGroupSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 11, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPSnoopingGroupSourceAddr.setStatus('current')
if mibBuilder.loadTexts: swIGMPSnoopingGroupSourceAddr.setDescription('This object identifies the source addresses.')
swIGMPSnoopingGroupIncludePortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 11, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPSnoopingGroupIncludePortMap.setStatus('current')
if mibBuilder.loadTexts: swIGMPSnoopingGroupIncludePortMap.setDescription('This object indicates the port list under INCLUDE mode.')
swIGMPSnoopingGroupExcludePortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 11, 1, 5), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPSnoopingGroupExcludePortMap.setStatus('current')
if mibBuilder.loadTexts: swIGMPSnoopingGroupExcludePortMap.setDescription('This object indicates the port list under EXCLUDE mode.')
swIGMPSnoopingGroupReportCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPSnoopingGroupReportCount.setStatus('current')
if mibBuilder.loadTexts: swIGMPSnoopingGroupReportCount.setDescription('This object indicates how many report packets were received by our device corresponding with this entry that has the IGMP function enabled, on a per-group basis.')
swIGMPSnoopingGroupUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 11, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPSnoopingGroupUpTime.setStatus('current')
if mibBuilder.loadTexts: swIGMPSnoopingGroupUpTime.setDescription('This object indicates how long since the group was detected.')
swIGMPSnoopingGroupExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 11, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPSnoopingGroupExpiryTime.setStatus('current')
if mibBuilder.loadTexts: swIGMPSnoopingGroupExpiryTime.setDescription('This object indicates the time left before this group will be aged out.')
swIGMPSnoopingGroupRouterPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 11, 1, 9), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPSnoopingGroupRouterPorts.setStatus('current')
if mibBuilder.loadTexts: swIGMPSnoopingGroupRouterPorts.setDescription('This object indicates the port number of the router ports.')
swL2IGMPDynIpMultMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 12))
swL2IGMPDynIPMultMaxEntry = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 12, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPDynIPMultMaxEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPDynIPMultMaxEntry.setDescription('This object specifies the maximum number of entries which can be learned by dynamic IP multicast.')
swL2IGMPSnoopingClearDynIpMult = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 12, 2))
swL2IGMPSnoopingClearDynIpMultVID = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 12, 2, 1), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPSnoopingClearDynIpMultVID.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPSnoopingClearDynIpMultVID.setDescription('This object indicates the VLAN identifier where the data driven entries will be removed from.')
swL2IGMPSnoopingClearDynIpMultIP = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 12, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPSnoopingClearDynIpMultIP.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPSnoopingClearDynIpMultIP.setDescription('This object indicates the IP address of the IGMP snooping group from which the data driven entries will be removed.')
swL2IGMPSnoopingClearDynIpMultAction = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 7, 12, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("all", 1), ("vlan", 2), ("group", 3), ("other", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPSnoopingClearDynIpMultAction.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPSnoopingClearDynIpMultAction.setDescription('Setting this object will clear the data driven entries. all - Remove all learned data driven groups. VLAN - Clear all data driven entries in the VLAN specified in swIGMPSnoopingClearDynIpMultVID. group - Clear the group with the address specified in swL2IGMPSnoopingClearDynIpMultIP in the VLAN specified in swIGMPSnoopingClearDynIpMultVID. ')
swL2TrafficSegTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 12, 1), )
if mibBuilder.loadTexts: swL2TrafficSegTable.setStatus('current')
if mibBuilder.loadTexts: swL2TrafficSegTable.setDescription('This table specifies the port just can forward traffic to the specific port list.')
swL2TrafficSegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 12, 1, 1), ).setIndexNames((0, "DES3052-L2MGMT-MIB", "swL2TrafficSegPort"))
if mibBuilder.loadTexts: swL2TrafficSegEntry.setStatus('current')
if mibBuilder.loadTexts: swL2TrafficSegEntry.setDescription('A list of information specifies the port with its traffic forward list.')
swL2TrafficSegPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrafficSegPort.setStatus('current')
if mibBuilder.loadTexts: swL2TrafficSegPort.setDescription('The port number of the logical port.')
swL2TrafficSegForwardPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 12, 1, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrafficSegForwardPorts.setStatus('current')
if mibBuilder.loadTexts: swL2TrafficSegForwardPorts.setDescription('The port list that the specific port can forward traffic.')
swL2PortSecurityControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 15, 1), )
if mibBuilder.loadTexts: swL2PortSecurityControlTable.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityControlTable.setDescription('The port security feature controls the address leaning capability and the traffic forwarding decision. Each port can have this function enabled or disabled. When it is enabled and a number is given said N, which allows N addresses to be learned at this port, the first N learned addresses are locked at this port as a static entry. When the learned address number reaches N, any incoming packet without learned source addresses are discarded (e.g. dropped) and no more new addresses can be learned at this port.')
swL2PortSecurityControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 15, 1, 1), ).setIndexNames((0, "DES3052-L2MGMT-MIB", "swL2PortSecurityPortIndex"))
if mibBuilder.loadTexts: swL2PortSecurityControlEntry.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityControlEntry.setDescription('A list of information contained in the swL2PortSecurityControlTable.')
swL2PortSecurityPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortSecurityPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityPortIndex.setDescription('Indicates a secured port to lock address learning.')
swL2PortSecurityMaxLernAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityMaxLernAddr.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityMaxLernAddr.setDescription('Indicates the allowable number of addresses to be learned at this port.')
swL2PortSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("permanent", 2), ("deleteOnTimeout", 3), ("deleteOnReset", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityMode.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityMode.setDescription('Indicates the mode of locking address. In deleteOnTimeout (3) mode - the locked addresses can be aged out after the aging timer expires. In this mode, when the locked address is aged out, the number of addresses that can be learned has to be increased by one. In deleteOnReset (4) mode - never age out the locked addresses unless restarting the system to prevent port movement or intrusion.')
swL2PortSecurityAdmState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityAdmState.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityAdmState.setDescription('Indicates an administration state of locking address.')
swL2PortSecurityTrapLogState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityTrapLogState.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityTrapLogState.setDescription("When enabled (2), whenever there's a new MAC that violates the pre-defined port security configuration, a trap will be sent out and the relevant information will be logged in the system.")
swL2PortSecurityDelCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 15, 3))
swL2PortSecurityDelVlanName = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 15, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityDelVlanName.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityDelVlanName.setDescription('Indicates the VLAN name.')
swL2PortSecurityDelPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 15, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 768))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityDelPort.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityDelPort.setDescription('Indicates the port. 0 means the function dose not work now.')
swL2PortSecurityDelMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 15, 3, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityDelMacAddress.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityDelMacAddress.setDescription('Specifies the MAC address.')
swL2PortSecurityDelActivity = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 15, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityDelActivity.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityDelActivity.setDescription('')
swL2CosPriorityCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 17, 3))
swL2CosPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 17, 3, 1), )
if mibBuilder.loadTexts: swL2CosPriorityTable.setStatus('current')
if mibBuilder.loadTexts: swL2CosPriorityTable.setDescription('Used to show and configure per port priority-based QoS features on the switch.')
swL2CosPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 17, 3, 1, 1), ).setIndexNames((0, "DES3052-L2MGMT-MIB", "swL2CosPriorityPort"))
if mibBuilder.loadTexts: swL2CosPriorityEntry.setStatus('current')
if mibBuilder.loadTexts: swL2CosPriorityEntry.setDescription('A list of information contained in the swL2CosPriorityTable.')
swL2CosPriorityPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 17, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2CosPriorityPort.setStatus('current')
if mibBuilder.loadTexts: swL2CosPriorityPort.setDescription('The port number of CoS Priority.')
swL2CosPriorityPortPRI = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 17, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2CosPriorityPortPRI.setStatus('current')
if mibBuilder.loadTexts: swL2CosPriorityPortPRI.setDescription('Indicates the port_priority state for CoS.')
swL2CosPriorityEtherPRI = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 17, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("ether8021p", 2), ("macBase", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2CosPriorityEtherPRI.setStatus('current')
if mibBuilder.loadTexts: swL2CosPriorityEtherPRI.setDescription('Enable Ethernet frame based priority. When set ether8021p (2), enable 802.1p QoS; When set macBase (3), enable MAC-based QoS; When set disable (1), disable Ethernet frame based priority.')
swL2CosPriorityIpPRI = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 17, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("tos", 2), ("dscp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2CosPriorityIpPRI.setStatus('current')
if mibBuilder.loadTexts: swL2CosPriorityIpPRI.setDescription('Enable IP priority QoS. When set tos (2), enable TOS based QoS; When set dscp (3), enable DSCP based QoS; When set disable (1), disable IP priority QoS.')
swL2CosPriorityNone = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 17, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2CosPriorityNone.setStatus('current')
if mibBuilder.loadTexts: swL2CosPriorityNone.setDescription('When read, it always returns invalid (2); when write valid (1), it disables all priority in this table.')
swL2CosPortPRITable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 17, 3, 2), )
if mibBuilder.loadTexts: swL2CosPortPRITable.setStatus('current')
if mibBuilder.loadTexts: swL2CosPortPRITable.setDescription('Used to show port-to-class mappings and map specific port to one of the hardware queues available on the switch.')
swL2CosPortPRIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 17, 3, 2, 1), ).setIndexNames((0, "DES3052-L2MGMT-MIB", "swL2CosPortPRIIndex"))
if mibBuilder.loadTexts: swL2CosPortPRIEntry.setStatus('current')
if mibBuilder.loadTexts: swL2CosPortPRIEntry.setDescription('A list of information contained in the swL2CosPortPRITable.')
swL2CosPortPRIIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 17, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2CosPortPRIIndex.setStatus('current')
if mibBuilder.loadTexts: swL2CosPortPRIIndex.setDescription('Indicates the CoS Priority PortPRI.')
swL2CosPortPRIClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 17, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2CosPortPRIClass.setStatus('current')
if mibBuilder.loadTexts: swL2CosPortPRIClass.setDescription("The number of the switch's hardware priority queue. The switch has 4 hardware priority queues available. They are numbered between 0 (the lowest priority queue) and 3 (the highest priority queue). If you want to set one, you must have administrator privileges. And you can set a value of 0 or 3 only, you can't set a value 1 or 2.")
swL2CosMacBasePRITable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 17, 3, 3), )
if mibBuilder.loadTexts: swL2CosMacBasePRITable.setStatus('current')
if mibBuilder.loadTexts: swL2CosMacBasePRITable.setDescription('Used to show MAC priority map to traffic class and map the destination MAC address in incoming packet to one of the hardware queues available on the switch.')
swL2CosMacBasePRIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 17, 3, 3, 1), ).setIndexNames((0, "DES3052-L2MGMT-MIB", "swL2CosMacBasePRIIndex"))
if mibBuilder.loadTexts: swL2CosMacBasePRIEntry.setStatus('current')
if mibBuilder.loadTexts: swL2CosMacBasePRIEntry.setDescription('A list of information contained in the swL2CosMacBasePRITable.')
swL2CosMacBasePRIIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 17, 3, 3, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2CosMacBasePRIIndex.setStatus('current')
if mibBuilder.loadTexts: swL2CosMacBasePRIIndex.setDescription('Indicates the CoS Priority MacBasePRI.')
swL2CosMacBasePRIClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 17, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2CosMacBasePRIClass.setStatus('current')
if mibBuilder.loadTexts: swL2CosMacBasePRIClass.setDescription("The number of the switch's hardware priority queue. The switch has 4 hardware priority queues available. They are numbered between 0 (the lowest priority queue) and 3 (the highest priority queue). If you want to set one, you must have administrator privileges.")
swL2CosTosPRITable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 17, 3, 4), )
if mibBuilder.loadTexts: swL2CosTosPRITable.setStatus('current')
if mibBuilder.loadTexts: swL2CosTosPRITable.setDescription('Used to show TOS value to traffic class mapping and map the TOS value in the IP header of incoming packet to one of the four hardware queues available on the switch.')
swL2CosTosPRIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 17, 3, 4, 1), ).setIndexNames((0, "DES3052-L2MGMT-MIB", "swL2CosTosPRIIndex"))
if mibBuilder.loadTexts: swL2CosTosPRIEntry.setStatus('current')
if mibBuilder.loadTexts: swL2CosTosPRIEntry.setDescription('A list of information contained in the swL2CosTosPRITable.')
swL2CosTosPRIIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 17, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2CosTosPRIIndex.setStatus('current')
if mibBuilder.loadTexts: swL2CosTosPRIIndex.setDescription('Indicates the CoS Priority TosPRI.')
swL2CosTosPRIClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 17, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2CosTosPRIClass.setStatus('current')
if mibBuilder.loadTexts: swL2CosTosPRIClass.setDescription("The number of the switch's hardware priority queue. The switch has 4 hardware priority queues available. They are numbered between 0 (the lowest priority queue) and 3 (the highest priority queue). If you want to set one, you must have administrator privileges.")
swL2CosDscpPRITable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 17, 3, 5), )
if mibBuilder.loadTexts: swL2CosDscpPRITable.setStatus('current')
if mibBuilder.loadTexts: swL2CosDscpPRITable.setDescription('Used to show DSCP value to traffic class mapping and map the DSCP value in the IP header of incoming packet to one of the hardware queues available on the switch.')
swL2CosDscpPRIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 17, 3, 5, 1), ).setIndexNames((0, "DES3052-L2MGMT-MIB", "swL2CosDscpPRIIndex"))
if mibBuilder.loadTexts: swL2CosDscpPRIEntry.setStatus('current')
if mibBuilder.loadTexts: swL2CosDscpPRIEntry.setDescription('A list of information contained in the swL2CosDscpPRITable.')
swL2CosDscpPRIIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 17, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2CosDscpPRIIndex.setStatus('current')
if mibBuilder.loadTexts: swL2CosDscpPRIIndex.setDescription('Indicates the CoS Priority DscpPRI.')
swL2CosDscpPRIClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 17, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2CosDscpPRIClass.setStatus('current')
if mibBuilder.loadTexts: swL2CosDscpPRIClass.setDescription("The number of the switch's hardware priority queue. The switch has 4 hardware priority queues available. They are numbered between 0 (the lowest priority queue) and 3 (the highest priority queue). If you want to set one, you must have administrator privileges.")
swL2DhcpRelayState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpRelayState.setStatus('obsolete')
if mibBuilder.loadTexts: swL2DhcpRelayState.setDescription('This object indicates whether the DHCP relay function is enabled or disabled.')
swL2DhcpRelayHopCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 18, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpRelayHopCount.setStatus('obsolete')
if mibBuilder.loadTexts: swL2DhcpRelayHopCount.setDescription('This object indicates the maximum number of router hops that the DHCP packets can cross.')
swL2DhcpRelayTimeThreshold = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 18, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpRelayTimeThreshold.setStatus('obsolete')
if mibBuilder.loadTexts: swL2DhcpRelayTimeThreshold.setDescription('This object indicates the minimum time in seconds within which the switch must relay the DHCP request. If this time is exceeded, the switch will drop the DHCP packet.')
swL2DhcpRelayOption82State = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 18, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpRelayOption82State.setStatus('obsolete')
if mibBuilder.loadTexts: swL2DhcpRelayOption82State.setDescription('This object indicates DHCP relay agent information option 82 function is enabled or disabled.')
swL2DhcpRelayOption82Check = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 18, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpRelayOption82Check.setStatus('obsolete')
if mibBuilder.loadTexts: swL2DhcpRelayOption82Check.setDescription('This object indicates the checking mechanism of DHCP relay agent information option 82 is enabled or disabled.')
swL2DhcpRelayOption82Policy = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 18, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("drop", 2), ("keep", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpRelayOption82Policy.setStatus('obsolete')
if mibBuilder.loadTexts: swL2DhcpRelayOption82Policy.setDescription('This object indicates the reforwarding policy of DHCP relay agent information option 82. replace (1) - Replace the exiting option 82 field in messages. drop (2) - Discard messages with existing option 82 field. keep (3) - Retain the existing option 82 field in messages.')
swL2DhcpRelayCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 18, 7), )
if mibBuilder.loadTexts: swL2DhcpRelayCtrlTable.setStatus('obsolete')
if mibBuilder.loadTexts: swL2DhcpRelayCtrlTable.setDescription('This table specifies the IP address as a destination to forward (relay) DHCP packets to.')
swL2DhcpRelayCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 18, 7, 1), ).setIndexNames((0, "DES3052-L2MGMT-MIB", "swL2DhcpRelayCtrlInterfaceName"), (0, "DES3052-L2MGMT-MIB", "swL2DhcpRelayCtrlServer"))
if mibBuilder.loadTexts: swL2DhcpRelayCtrlEntry.setStatus('obsolete')
if mibBuilder.loadTexts: swL2DhcpRelayCtrlEntry.setDescription('A list of information specifies the IP address as a destination to forward (relay) DHCP packets to.')
swL2DhcpRelayCtrlInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 18, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2DhcpRelayCtrlInterfaceName.setStatus('obsolete')
if mibBuilder.loadTexts: swL2DhcpRelayCtrlInterfaceName.setDescription('The name of the IP interface.')
swL2DhcpRelayCtrlServer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 18, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2DhcpRelayCtrlServer.setStatus('current')
if mibBuilder.loadTexts: swL2DhcpRelayCtrlServer.setDescription('The DHCP server IP address.')
swL2DhcpRelayCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 18, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("valid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpRelayCtrlState.setStatus('obsolete')
if mibBuilder.loadTexts: swL2DhcpRelayCtrlState.setDescription('This object indicates the status of this entry. other (1) - This entry is currently in use but the conditions under which it will remain so are different from each of the following values. invalid (2) - Writing this value to the object, and then the corresponding entry will be removed from the table. valid (3) - This entry resides in the table.')
swL2MgmtMIBTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 20, 0))
swL2PortSecurityViolationTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 20, 0, 1)).setObjects(("DES3052-L2MGMT-MIB", "swL2PortSecurityPortIndex"), ("DES3052-L2MGMT-MIB", "swL2PortSecurityViolationMac"))
if mibBuilder.loadTexts: swL2PortSecurityViolationTrap.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityViolationTrap.setDescription("When the port_security trap is enabled, if there's a new MAC that violates the pre-defined port security configuration, a trap will be sent out.")
swL2macNotification = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 20, 0, 2)).setObjects(("DES3052-L2MGMT-MIB", "swL2macNotifyInfo"))
if mibBuilder.loadTexts: swL2macNotification.setStatus('current')
if mibBuilder.loadTexts: swL2macNotification.setDescription(' This trap indicates the MAC address variations in the address table. ')
swL2FloodMacDetectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 20, 0, 3)).setObjects(("DES3052-L2MGMT-MIB", "swL2FloodMacDetectedMacVid"), ("DES3052-L2MGMT-MIB", "swL2FloodMacDetectedMacAddress"))
if mibBuilder.loadTexts: swL2FloodMacDetectedTrap.setStatus('current')
if mibBuilder.loadTexts: swL2FloodMacDetectedTrap.setDescription(' If theres a new flooding MAC is detected, a trap will be sent out.')
swL2PortLoopOccurred = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 20, 0, 4)).setObjects(("DES3052-L2MGMT-MIB", "swL2LoopDetectPortIndex"))
if mibBuilder.loadTexts: swL2PortLoopOccurred.setStatus('current')
if mibBuilder.loadTexts: swL2PortLoopOccurred.setDescription('The trap is sent when a Port loop occurs.')
swL2PortLoopRestart = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 20, 0, 5)).setObjects(("DES3052-L2MGMT-MIB", "swL2LoopDetectPortIndex"))
if mibBuilder.loadTexts: swL2PortLoopRestart.setStatus('current')
if mibBuilder.loadTexts: swL2PortLoopRestart.setDescription('The trap is sent when a Port loop restarts after the interval time.')
swl2PortSecurityBindings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 20, 1))
swL2PortSecurityViolationMac = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 20, 1, 1), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swL2PortSecurityViolationMac.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityViolationMac.setDescription('This object indicates the MAC address that violates the port security configuration.')
swl2NotificationBindings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 20, 2))
swL2macNotifyInfo = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 20, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2macNotifyInfo.setStatus('current')
if mibBuilder.loadTexts: swL2macNotifyInfo.setDescription('This object indicates the last time reboot information. ')
swL2FloodMacDetectedMacVid = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 20, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2FloodMacDetectedMacVid.setStatus('current')
if mibBuilder.loadTexts: swL2FloodMacDetectedMacVid.setDescription('This object indicates the VID of the flooding MAC.')
swL2FloodMacDetectedMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 20, 2, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2FloodMacDetectedMacAddress.setStatus('current')
if mibBuilder.loadTexts: swL2FloodMacDetectedMacAddress.setDescription('This object indicates the MAC address of the flooding MAC')
swL2LoopDetectCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 21, 1))
swL2LoopDetectAdminState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectAdminState.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectAdminState.setDescription('This object indicates the loopback detection status for the system.')
swL2LoopDetectInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 21, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectInterval.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectInterval.setDescription('This object indicates the interval value, the range is from 1 to 32767 seconds.')
swL2LoopDetectRecoverTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 21, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectRecoverTime.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectRecoverTime.setDescription('This object indicates the recover time, the range is from 60 to 1000000. The value of 0 disables the recover function.')
swL2LoopDetectTrapMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("loop_detected", 2), ("loop_cleared", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectTrapMode.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectTrapMode.setDescription('This object indicates the loopback detection trap mode for the system.')
swL2LoopDetectPortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 21, 2))
swL2LoopDetectPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 21, 2, 1), )
if mibBuilder.loadTexts: swL2LoopDetectPortTable.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectPortTable.setDescription('The table specifies the loopback detection function specified by port.')
swL2LoopDetectPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 21, 2, 1, 1), ).setIndexNames((0, "DES3052-L2MGMT-MIB", "swL2LoopDetectPortIndex"))
if mibBuilder.loadTexts: swL2LoopDetectPortEntry.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectPortEntry.setDescription('The table specifies the loopback detection function specified by port.')
swL2LoopDetectPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 21, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LoopDetectPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectPortIndex.setDescription("This object indicates the module's port number. The range is from 1 to the maximum port number specified in the module")
swL2LoopDetectPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 21, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectPortState.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectPortState.setDescription('This object indicates the loopback detection function state on the port.')
swL2LoopDetectPortLoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 21, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("loop", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LoopDetectPortLoopStatus.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectPortLoopStatus.setDescription('This object indicates the port status.')
swL2McastFilterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 22, 2), )
if mibBuilder.loadTexts: swL2McastFilterTable.setStatus('current')
if mibBuilder.loadTexts: swL2McastFilterTable.setDescription(' A table that contains information about the multicast filter address.')
swL2McastFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 22, 2, 1), ).setIndexNames((0, "DES3052-L2MGMT-MIB", "swL2McastFilterProfileIndex"))
if mibBuilder.loadTexts: swL2McastFilterEntry.setStatus('current')
if mibBuilder.loadTexts: swL2McastFilterEntry.setDescription('A list of multicast filter mode information for each profile ID. ')
swL2McastFilterProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 22, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2McastFilterProfileIndex.setStatus('current')
if mibBuilder.loadTexts: swL2McastFilterProfileIndex.setDescription(' index for each profile')
swL2McastFilterProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 22, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2McastFilterProfileName.setStatus('current')
if mibBuilder.loadTexts: swL2McastFilterProfileName.setDescription('The multicast filter description.')
swL2McastFilterAddOrDelState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 22, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("add", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2McastFilterAddOrDelState.setStatus('current')
if mibBuilder.loadTexts: swL2McastFilterAddOrDelState.setDescription('The control multicast filter address.')
swL2McastFilterGroupList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 22, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2McastFilterGroupList.setStatus('current')
if mibBuilder.loadTexts: swL2McastFilterGroupList.setDescription('The multicast filter address group list.')
swL2McastFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 22, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2McastFilterStatus.setStatus('current')
if mibBuilder.loadTexts: swL2McastFilterStatus.setDescription('This object indicates the status of this entry.')
swL2McastFilterPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 22, 3), )
if mibBuilder.loadTexts: swL2McastFilterPortTable.setStatus('current')
if mibBuilder.loadTexts: swL2McastFilterPortTable.setDescription(' A table that is used to bind port to profile ID.')
swL2McastFilterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 22, 3, 1), ).setIndexNames((0, "DES3052-L2MGMT-MIB", "swL2McastFilterPortGroupPortIndex"))
if mibBuilder.loadTexts: swL2McastFilterPortEntry.setStatus('current')
if mibBuilder.loadTexts: swL2McastFilterPortEntry.setDescription('A list of information that is used to bind port to profile ID. ')
swL2McastFilterPortGroupPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 22, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2McastFilterPortGroupPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2McastFilterPortGroupPortIndex.setDescription('The port index.')
swL2McastFilterPortProfileAddOrDelState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 22, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("add", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2McastFilterPortProfileAddOrDelState.setStatus('current')
if mibBuilder.loadTexts: swL2McastFilterPortProfileAddOrDelState.setDescription('The control multicast filter profile.')
swL2McastFilterPortProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 22, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2McastFilterPortProfileID.setStatus('current')
if mibBuilder.loadTexts: swL2McastFilterPortProfileID.setDescription('This object indicates the profile ID of this entry. When read, it is always 0. When set, 0 can not be set.')
swL2McastFilterPortMaxGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 22, 4), )
if mibBuilder.loadTexts: swL2McastFilterPortMaxGroupTable.setStatus('current')
if mibBuilder.loadTexts: swL2McastFilterPortMaxGroupTable.setDescription(' A table that contains information about the max group number based on port.')
swL2McastFilterPortMaxGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 22, 4, 1), ).setIndexNames((0, "DES3052-L2MGMT-MIB", "swL2McastFilterPortMaxGroupPortIndex"))
if mibBuilder.loadTexts: swL2McastFilterPortMaxGroupEntry.setStatus('current')
if mibBuilder.loadTexts: swL2McastFilterPortMaxGroupEntry.setDescription('A list of max group number information for each port.')
swL2McastFilterPortMaxGroupPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 22, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2McastFilterPortMaxGroupPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2McastFilterPortMaxGroupPortIndex.setDescription('The port index.')
swL2McastFilterPortMaxGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 22, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2McastFilterPortMaxGroup.setStatus('current')
if mibBuilder.loadTexts: swL2McastFilterPortMaxGroup.setDescription('The max group numbers. The default is 256.')
swL2McastFilterPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 22, 5), )
if mibBuilder.loadTexts: swL2McastFilterPortInfoTable.setStatus('current')
if mibBuilder.loadTexts: swL2McastFilterPortInfoTable.setDescription(' A table that contains information about all of the multicast groups for the ports.')
swL2McastFilterPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 22, 5, 1), ).setIndexNames((0, "DES3052-L2MGMT-MIB", "swL2McastFilterPortInfoPortIndex"))
if mibBuilder.loadTexts: swL2McastFilterPortInfoEntry.setStatus('current')
if mibBuilder.loadTexts: swL2McastFilterPortInfoEntry.setDescription('A list of information about all of the multicast groups for each port.')
swL2McastFilterPortInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 22, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2McastFilterPortInfoPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2McastFilterPortInfoPortIndex.setDescription('The port index.')
swL2McastFilterPortInfoProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 22, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2McastFilterPortInfoProfileName.setStatus('current')
if mibBuilder.loadTexts: swL2McastFilterPortInfoProfileName.setDescription('The multicast filter address profile Name.')
swL2VlanAdvertisementTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 23, 1), )
if mibBuilder.loadTexts: swL2VlanAdvertisementTable.setStatus('current')
if mibBuilder.loadTexts: swL2VlanAdvertisementTable.setDescription('A table containing the advertisement state for each VLAN configured into the device by (local or network) management.')
swL2VlanAdvertisementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 23, 1, 1), ).setIndexNames((0, "DES3052-L2MGMT-MIB", "swL2VlanIndex"))
if mibBuilder.loadTexts: swL2VlanAdvertisementEntry.setStatus('current')
if mibBuilder.loadTexts: swL2VlanAdvertisementEntry.setDescription('The advertisement state for each VLAN configured into the device.')
swL2VlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 23, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanIndex.setStatus('current')
if mibBuilder.loadTexts: swL2VlanIndex.setDescription('The VLAN-ID or other identifier referring to this VLAN.')
swL2VlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 23, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanName.setStatus('current')
if mibBuilder.loadTexts: swL2VlanName.setDescription('An administratively assigned string, which may be used to identify the VLAN.')
swL2VlanAdvertiseState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 23, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2VlanAdvertiseState.setStatus('current')
if mibBuilder.loadTexts: swL2VlanAdvertiseState.setDescription('This object indicates the advertise status of this VLAN entry.')
swL2VlanMultiplyMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 23, 2))
swL2VlanMultiplyVlanList = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 23, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2VlanMultiplyVlanList.setStatus('current')
if mibBuilder.loadTexts: swL2VlanMultiplyVlanList.setDescription('This object specifies the VLAN ID List.')
swL2VlanMultiplyAdvertisement = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 23, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2VlanMultiplyAdvertisement.setStatus('current')
if mibBuilder.loadTexts: swL2VlanMultiplyAdvertisement.setDescription('This object specifies the advertisement state.')
swL2VlanMultiplyPortList = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 23, 2, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2VlanMultiplyPortList.setStatus('current')
if mibBuilder.loadTexts: swL2VlanMultiplyPortList.setDescription('Specifies the port list.')
swL2VlanMultiplyPortListAction = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 23, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("add-tagged", 2), ("add-untagged", 3), ("add-forbidden", 4), ("delete", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2VlanMultiplyPortListAction.setStatus('current')
if mibBuilder.loadTexts: swL2VlanMultiplyPortListAction.setDescription('Specifies the action for the port list which specified by swL2VlanMultiplyPortList.')
swL2VlanMultiplyAction = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 23, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("create", 2), ("configure", 3), ("delete", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2VlanMultiplyAction.setStatus('current')
if mibBuilder.loadTexts: swL2VlanMultiplyAction.setDescription('Specifies the action for VLANs. other: no action. create: the VLANs specified by swL2VlanMultiplyVlanList would be created at a time. configure: the VLANs specified by swL2VlanMultiplyVlanList would be configured at a time. delete: the VLANs specified by swL2VlanMultiplyVlanList would be deleted at a time. ')
swL2DhcpLocalRelayState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 24, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpLocalRelayState.setStatus('current')
if mibBuilder.loadTexts: swL2DhcpLocalRelayState.setDescription('This object indicates the status of the DHCP local relay function of the switch.')
swL2DhcpLocalRelayVLANTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 24, 2), )
if mibBuilder.loadTexts: swL2DhcpLocalRelayVLANTable.setStatus('current')
if mibBuilder.loadTexts: swL2DhcpLocalRelayVLANTable.setDescription('This table is used to manage the DHCP local relay status for each VLAN.')
swL2DhcpLocalRelayVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 24, 2, 1), ).setIndexNames((0, "DES3052-L2MGMT-MIB", "swL2DhcpLocalRelayVLANID"))
if mibBuilder.loadTexts: swL2DhcpLocalRelayVLANEntry.setStatus('current')
if mibBuilder.loadTexts: swL2DhcpLocalRelayVLANEntry.setDescription('This object lists the current VLANs in the switch and their corresponding DHCP local relay status.')
swL2DhcpLocalRelayVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 24, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2DhcpLocalRelayVLANID.setStatus('current')
if mibBuilder.loadTexts: swL2DhcpLocalRelayVLANID.setDescription('This object shows the VIDs of the current VLANS in the switch.')
swL2DhcpLocalRelayVLANState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 24, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpLocalRelayVLANState.setStatus('current')
if mibBuilder.loadTexts: swL2DhcpLocalRelayVLANState.setDescription('This object indicates the status of the DHCP relay function of the VLAN.')
swL2FloodMACMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 25, 1))
swL2FloodMACGlobalSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 25, 1, 1))
swL2FloodMACState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 25, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2FloodMACState.setStatus('current')
if mibBuilder.loadTexts: swL2FloodMACState.setDescription('This object indicates the status of Flooding MAC function.')
swL2FloodMACLogState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 25, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2FloodMACLogState.setStatus('current')
if mibBuilder.loadTexts: swL2FloodMACLogState.setDescription('This object indicates whether logs are generated when a flooding MAC is detected.')
swL2FloodMACTrapState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 25, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2FloodMACTrapState.setStatus('current')
if mibBuilder.loadTexts: swL2FloodMACTrapState.setDescription('This object indicates whether traps are generated when a flooding MAC is detected.')
swL2FloodMACClearFDB = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 25, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-action", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2FloodMACClearFDB.setStatus('current')
if mibBuilder.loadTexts: swL2FloodMACClearFDB.setDescription('When set to start(2), this object will clear the entries of swL2FloodMACFDBTable. After the device finishes clearing the entries, it will return to its default value, no-action(1). Setting this object to no-action(1) will not have any effect.')
swL2FloodMACAutoFDBCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 25, 1, 2), )
if mibBuilder.loadTexts: swL2FloodMACAutoFDBCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swL2FloodMACAutoFDBCtrlTable.setDescription('A table containing a list of configured IP addresses to which the Auto FDB function will discover the corresponding VLAN, MAC address and port and have a corresponding static FDB entry created automatically.')
swL2FloodMACAutoFDBCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 25, 1, 2, 1), ).setIndexNames((0, "DES3052-L2MGMT-MIB", "swL2FloodMACAutoFDBIPAddress"))
if mibBuilder.loadTexts: swL2FloodMACAutoFDBCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swL2FloodMACAutoFDBCtrlEntry.setDescription('Information containing the configured Auto FDB IP address.')
swL2FloodMACAutoFDBIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 25, 1, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: swL2FloodMACAutoFDBIPAddress.setStatus('current')
if mibBuilder.loadTexts: swL2FloodMACAutoFDBIPAddress.setDescription('The Auto FDB IP address.')
swL2FloodMACAutoFDBRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 25, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2FloodMACAutoFDBRowStatus.setStatus('current')
if mibBuilder.loadTexts: swL2FloodMACAutoFDBRowStatus.setDescription('This object indicates the status of this entry.')
swL2FloodMACInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 25, 2))
swL2FloodMACFDBTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 25, 2, 1), )
if mibBuilder.loadTexts: swL2FloodMACFDBTable.setStatus('current')
if mibBuilder.loadTexts: swL2FloodMACFDBTable.setDescription('A table containing a list of current and historical flooding MAC entries.')
swL2FloodMACFDBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 25, 2, 1, 1), ).setIndexNames((0, "DES3052-L2MGMT-MIB", "swL2FloodMACFDBIndex"), (0, "DES3052-L2MGMT-MIB", "swL2FloodMACFDBVID"), (0, "DES3052-L2MGMT-MIB", "swL2FloodMACFDBMacAddress"))
if mibBuilder.loadTexts: swL2FloodMACFDBEntry.setStatus('current')
if mibBuilder.loadTexts: swL2FloodMACFDBEntry.setDescription('Information containing the flooding MAC address.')
swL2FloodMACFDBIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 25, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: swL2FloodMACFDBIndex.setStatus('current')
if mibBuilder.loadTexts: swL2FloodMACFDBIndex.setDescription('The hardware address table index of the flooding MAC entry.')
swL2FloodMACFDBVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 25, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: swL2FloodMACFDBVID.setStatus('current')
if mibBuilder.loadTexts: swL2FloodMACFDBVID.setDescription('The VLAN identifier of the flooding MAC entry.')
swL2FloodMACFDBMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 25, 2, 1, 1, 3), MacAddress())
if mibBuilder.loadTexts: swL2FloodMACFDBMacAddress.setStatus('current')
if mibBuilder.loadTexts: swL2FloodMACFDBMacAddress.setDescription('The MAC address of the flooding MAC entry.')
swL2FloodMACFDBStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 25, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2FloodMACFDBStatus.setStatus('current')
if mibBuilder.loadTexts: swL2FloodMACFDBStatus.setDescription("The status of the flooding MAC entry. When the value is 'active', this means the entry is currently present in the hardware address table, otherwise, the value is 'inactive'.")
swL2FloodMACFDBTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 25, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2FloodMACFDBTimestamp.setStatus('current')
if mibBuilder.loadTexts: swL2FloodMACFDBTimestamp.setDescription('A number that correlates to a relative time the entry was detected by the Flooding MAC function.')
swL2FloodMACAutoFDBTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 25, 2, 2), )
if mibBuilder.loadTexts: swL2FloodMACAutoFDBTable.setStatus('current')
if mibBuilder.loadTexts: swL2FloodMACAutoFDBTable.setDescription('A table containing the discovered VLAN, MAC address and port of the host with an IP address created in swL2FloodMACAutoFDBCtrlTable.')
swL2FloodMACAutoFDBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 25, 2, 2, 1), ).setIndexNames((0, "DES3052-L2MGMT-MIB", "swL2FloodMACAutoFDBIPAddress"))
if mibBuilder.loadTexts: swL2FloodMACAutoFDBEntry.setStatus('current')
if mibBuilder.loadTexts: swL2FloodMACAutoFDBEntry.setDescription('Information containing the discovered VLAN, MAC address and port of an Auto FDB entry.')
swL2FloodMACAutoFDBVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 25, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2FloodMACAutoFDBVID.setStatus('current')
if mibBuilder.loadTexts: swL2FloodMACAutoFDBVID.setDescription('The VLAN identifier of Auto FDB entry.')
swL2FloodMACAutoFDBMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 25, 2, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2FloodMACAutoFDBMacAddress.setStatus('current')
if mibBuilder.loadTexts: swL2FloodMACAutoFDBMacAddress.setDescription('The MAC address of the Auto FDB entry.')
swL2FloodMACAutoFDBPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 25, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2FloodMACAutoFDBPort.setStatus('current')
if mibBuilder.loadTexts: swL2FloodMACAutoFDBPort.setDescription('The port number of the Auto FDB entry.')
swL2FloodMACAutoFDBTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 63, 8, 2, 25, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2FloodMACAutoFDBTimestamp.setStatus('current')
if mibBuilder.loadTexts: swL2FloodMACAutoFDBTimestamp.setDescription('A number that represents the relative time when the Auto FDB learned this entry.')
mibBuilder.exportSymbols("DES3052-L2MGMT-MIB", swL2FloodMACState=swL2FloodMACState, swL2IGMPDynIPMultMaxEntry=swL2IGMPDynIPMultMaxEntry, swL2TrafficSegPort=swL2TrafficSegPort, swL2PortCtrlAddressLearning=swL2PortCtrlAddressLearning, swL2PortSecurityViolationTrap=swL2PortSecurityViolationTrap, swL2IGMPMulticastVlanState=swL2IGMPMulticastVlanState, swL2DevAlarmLinkChange=swL2DevAlarmLinkChange, swL2IGMPv3SourceIPAddr=swL2IGMPv3SourceIPAddr, swL2DevInfoFrontPanelLedStatus=swL2DevInfoFrontPanelLedStatus, swL2DevCtrlLLDPState=swL2DevCtrlLLDPState, swL2MgmtMIB=swL2MgmtMIB, swIGMPSnoopingGroupExpiryTime=swIGMPSnoopingGroupExpiryTime, swIGMPSnoopingGroupEntry=swIGMPSnoopingGroupEntry, swL2PortSecurityPortIndex=swL2PortSecurityPortIndex, swL2PortCtrlMDIXState=swL2PortCtrlMDIXState, swL2CosPriorityPortPRI=swL2CosPriorityPortPRI, swL2McastFilterPortMaxGroupEntry=swL2McastFilterPortMaxGroupEntry, swL2DevCtrlManagementVlanId=swL2DevCtrlManagementVlanId, swL2FloodMACAutoFDBPort=swL2FloodMACAutoFDBPort, swIGMPPackage=swIGMPPackage, swL2PortErrTable=swL2PortErrTable, swL2McastFilterPortMaxGroup=swL2McastFilterPortMaxGroup, swL2DhcpRelayOption82Check=swL2DhcpRelayOption82Check, swL2PortCtrlPortMediumType=swL2PortCtrlPortMediumType, swL2PortCtrlAdminState=swL2PortCtrlAdminState, swL2McastFilterPortInfoPortIndex=swL2McastFilterPortInfoPortIndex, swL2CosMacBasePRIEntry=swL2CosMacBasePRIEntry, swL2QOS8021pUserPriorityClass=swL2QOS8021pUserPriorityClass, swL2VlanMultiplyVlanList=swL2VlanMultiplyVlanList, swL2McastFilterEntry=swL2McastFilterEntry, swL2IGMPIpGroupReportCount=swL2IGMPIpGroupReportCount, swL2CosPortPRITable=swL2CosPortPRITable, swL2McastFilterPortEntry=swL2McastFilterPortEntry, swL2LoopDetectCtrl=swL2LoopDetectCtrl, swL2QOSBandwidthRadiusTxRate=swL2QOSBandwidthRadiusTxRate, swPortTrunkMaxPortMembers=swPortTrunkMaxPortMembers, swIGMPSnoopingGroupIncludePortMap=swIGMPSnoopingGroupIncludePortMap, swL2PortInfoMediumType=swL2PortInfoMediumType, swIGMPSnoopingGroupSourceAddr=swIGMPSnoopingGroupSourceAddr, swL2CosPriorityNone=swL2CosPriorityNone, swPortMirrorTxPortList=swPortMirrorTxPortList, swL2DevAlarmTopologyChange=swL2DevAlarmTopologyChange, swL2LoopDetectPortEntry=swL2LoopDetectPortEntry, swL2TrafficSegMgmt=swL2TrafficSegMgmt, swL2PortCtrlPortIndex=swL2PortCtrlPortIndex, swL2DevCtrlAsymVlanState=swL2DevCtrlAsymVlanState, swPortTrunkMasterPort=swPortTrunkMasterPort, swL2TrafficSegTable=swL2TrafficSegTable, swL2QOS8021pDefaultPriorityTable=swL2QOS8021pDefaultPriorityTable, swL2DhcpRelayCtrlInterfaceName=swL2DhcpRelayCtrlInterfaceName, swL2McastFilterGroupList=swL2McastFilterGroupList, swL2QOSSchedulingTable=swL2QOSSchedulingTable, swL2PortSecurityControlEntry=swL2PortSecurityControlEntry, swL2McastFilterPortInfoEntry=swL2McastFilterPortInfoEntry, swL2McastFilterPortMaxGroupPortIndex=swL2McastFilterPortMaxGroupPortIndex, swL2IGMPAccessAuthPort=swL2IGMPAccessAuthPort, swL2PortMgmt=swL2PortMgmt, swL2DhcpRelayOption82Policy=swL2DhcpRelayOption82Policy, swL2DevInfo=swL2DevInfo, swL2DevCtrlWeb=swL2DevCtrlWeb, swL2IGMPCtrlEntry=swL2IGMPCtrlEntry, swL2IGMPRouterPortDynamicPortList=swL2IGMPRouterPortDynamicPortList, swL2QOSBandwidthTxRate=swL2QOSBandwidthTxRate, swL2DhcpRelayCtrlState=swL2DhcpRelayCtrlState, swL2DhcpRelayMgmt=swL2DhcpRelayMgmt, swL2CosPortPRIClass=swL2CosPortPRIClass, swL2IGMPInfoVid=swL2IGMPInfoVid, swL2IGMPv3ExpireTimer=swL2IGMPv3ExpireTimer, swL2PortCtrlEntry=swL2PortCtrlEntry, swL2PortCtrlMulticastfilter=swL2PortCtrlMulticastfilter, swL2PortCtrlMACNotifyState=swL2PortCtrlMACNotifyState, swL2FloodMACAutoFDBEntry=swL2FloodMACAutoFDBEntry, swL2IGMPQueryInterval=swL2IGMPQueryInterval, swL2QOS8021pDefaultPriorityIndex=swL2QOS8021pDefaultPriorityIndex, VlanId=VlanId, swL2PortSecurityViolationMac=swL2PortSecurityViolationMac, swL2FloodMACLogState=swL2FloodMACLogState, swL2QOSSchedulingMechanism=swL2QOSSchedulingMechanism, swL2IGMPSnoopingClearDynIpMult=swL2IGMPSnoopingClearDynIpMult, swL2FloodMACGlobalSettings=swL2FloodMACGlobalSettings, swL2FloodMACFDBMacAddress=swL2FloodMACFDBMacAddress, PortList=PortList, swL2QOSSchedulingEntry=swL2QOSSchedulingEntry, swL2FloodMACClearFDB=swL2FloodMACClearFDB, swL2TrunkVLANState=swL2TrunkVLANState, swL2IGMPPortMap=swL2IGMPPortMap, swL2CosPriorityTable=swL2CosPriorityTable, swL2CosTosPRITable=swL2CosTosPRITable, swL2TrunkLACPPortEntry=swL2TrunkLACPPortEntry, swL2McastFilterProfileIndex=swL2McastFilterProfileIndex, swL2CosPriorityCtrl=swL2CosPriorityCtrl, swL2IGMPMulticastVlanUntagSourcePort=swL2IGMPMulticastVlanUntagSourcePort, swL2MgmtMIBTrapPrefix=swL2MgmtMIBTrapPrefix, swL2IGMPLeaveTimer=swL2IGMPLeaveTimer, swL2PortLoopOccurred=swL2PortLoopOccurred, swL2IGMPQueryInfoTable=swL2IGMPQueryInfoTable, swL2PortSecurityAdmState=swL2PortSecurityAdmState, swL2VlanMultiplyPortList=swL2VlanMultiplyPortList, swPortTrunkIndex=swPortTrunkIndex, swL2TrunkAlgorithm=swL2TrunkAlgorithm, swL2VlanMultiplyMgmt=swL2VlanMultiplyMgmt, swL2TrunkVLANTable=swL2TrunkVLANTable, swL2IGMPMulticastVlanSourcePort=swL2IGMPMulticastVlanSourcePort, swL2IGMPMulticastVlanGroupTable=swL2IGMPMulticastVlanGroupTable, swL2PortSecurityDelMacAddress=swL2PortSecurityDelMacAddress, swL2PortSecurityDelActivity=swL2PortSecurityDelActivity, swL2PortLoopRestart=swL2PortLoopRestart, swL2IGMPv3Table=swL2IGMPv3Table, swL2IGMPAccessAuthState=swL2IGMPAccessAuthState, swL2CosPortPRIIndex=swL2CosPortPRIIndex, swL2QOSBandwidthRxRate=swL2QOSBandwidthRxRate, swL2CosTosPRIIndex=swL2CosTosPRIIndex, swL2FloodMACAutoFDBVID=swL2FloodMACAutoFDBVID, swL2IGMPCtrlState=swL2IGMPCtrlState, swL2PortInfoTable=swL2PortInfoTable, swL2MACNotifyHistorySize=swL2MACNotifyHistorySize, swL2CosMgmt=swL2CosMgmt, swIGMPSnoopingGroupVid=swIGMPSnoopingGroupVid, swL2IGMPMulticastVlanEntry=swL2IGMPMulticastVlanEntry, swL2FloodMACAutoFDBMacAddress=swL2FloodMACAutoFDBMacAddress, swL2IGMPSnoopingClearDynIpMultIP=swL2IGMPSnoopingClearDynIpMultIP, swL2IGMPv3Forwarding=swL2IGMPv3Forwarding, swPortMirrorState=swPortMirrorState, swL2macNotifyInfo=swL2macNotifyInfo, swL2LoopDetectPortTable=swL2LoopDetectPortTable, swPortTrunkEntry=swPortTrunkEntry, swL2IGMPv3Entry=swL2IGMPv3Entry, swL2VlanMgmt=swL2VlanMgmt, swL2IGMPCtrlVid=swL2IGMPCtrlVid, swL2PortErrEntry=swL2PortErrEntry, swL2VlanMultiplyPortListAction=swL2VlanMultiplyPortListAction, swL2TrunkVLANPort=swL2TrunkVLANPort, swL2McastFilterPortTable=swL2McastFilterPortTable, swPortTrunkState=swPortTrunkState, swL2IGMPMulticastVlanGroupFromIp=swL2IGMPMulticastVlanGroupFromIp, swL2QOS8021pUserPriorityEntry=swL2QOS8021pUserPriorityEntry, swL2VlanMultiplyAction=swL2VlanMultiplyAction, swIGMPSnoopingGroupRouterPorts=swIGMPSnoopingGroupRouterPorts, swL2PortSecurityControlTable=swL2PortSecurityControlTable, swL2IGMPMulticastVlanid=swL2IGMPMulticastVlanid, swL2MACNotifyInterval=swL2MACNotifyInterval, swL2PortCtrlFlowCtrlState=swL2PortCtrlFlowCtrlState, swL2IGMPRouteTimeout=swL2IGMPRouteTimeout, swL2VlanAdvertisementEntry=swL2VlanAdvertisementEntry, swL2FloodMACAutoFDBTable=swL2FloodMACAutoFDBTable, swL2IGMPMulticastVlanRowStatus=swL2IGMPMulticastVlanRowStatus, swL2McastFilterAddOrDelState=swL2McastFilterAddOrDelState, swL2DevCtrlIpAutoConfig=swL2DevCtrlIpAutoConfig, swL2DhcpLocalRelayVLANID=swL2DhcpLocalRelayVLANID, swL2PortCtrlDescription=swL2PortCtrlDescription, swL2CosDscpPRITable=swL2CosDscpPRITable, swPortMirrorRxPortList=swPortMirrorRxPortList, swL2LoopDetectTrapMode=swL2LoopDetectTrapMode, swIGMPSnoopingGroupReportCount=swIGMPSnoopingGroupReportCount, swPortTrunkFloodingPort=swPortTrunkFloodingPort, swL2FloodMACTrapState=swL2FloodMACTrapState, swL2DevMgmt=swL2DevMgmt, swL2QOSBandwidthPortIndex=swL2QOSBandwidthPortIndex, swL2DevCtrl=swL2DevCtrl, swL2IGMPMulticastVlanReplaceSourceIp=swL2IGMPMulticastVlanReplaceSourceIp, swL2IGMPMulticastVlanName=swL2IGMPMulticastVlanName, swL2IGMPMaxIpGroupNumPerVlan=swL2IGMPMaxIpGroupNumPerVlan, swL2IGMPSnoopingClearDynIpMultAction=swL2IGMPSnoopingClearDynIpMultAction, swL2FloodMacDetectedMacAddress=swL2FloodMacDetectedMacAddress, swL2DevCtrlLLDPForwardMessageState=swL2DevCtrlLLDPForwardMessageState, swL2IGMPLastMemberQueryInterval=swL2IGMPLastMemberQueryInterval, swL2PortInfoLinkStatus=swL2PortInfoLinkStatus, swL2DevCtrlWebState=swL2DevCtrlWebState, swIGMPSnoopingGroupTable=swIGMPSnoopingGroupTable, swL2LoopDetectAdminState=swL2LoopDetectAdminState, swL2MgmtMIBTraps=swL2MgmtMIBTraps, swL2IGMPAccessAuthTable=swL2IGMPAccessAuthTable, swL2McastFilterPortGroupPortIndex=swL2McastFilterPortGroupPortIndex, swL2TrunkLACPPortTable=swL2TrunkLACPPortTable, swL2IGMPMulticastVlanRemapPriority=swL2IGMPMulticastVlanRemapPriority, swL2IGMPMulticastVlanTable=swL2IGMPMulticastVlanTable, swL2CosPriorityPort=swL2CosPriorityPort, swL2CosMacBasePRIClass=swL2CosMacBasePRIClass, swL2McastFilterPortInfoTable=swL2McastFilterPortInfoTable, swL2IGMPMaxResponseTime=swL2IGMPMaxResponseTime, swL2IGMPCtrlTable=swL2IGMPCtrlTable, swL2IGMPCurrentState=swL2IGMPCurrentState, swL2DhcpLocalRelayVLANEntry=swL2DhcpLocalRelayVLANEntry, swL2IGMPRouterPortVlanName=swL2IGMPRouterPortVlanName, swL2FloodMACFDBIndex=swL2FloodMACFDBIndex, swL2IGMPVid=swL2IGMPVid, swL2PortSecurityMode=swL2PortSecurityMode, swL2IGMPRouterPortForbiddenPortList=swL2IGMPRouterPortForbiddenPortList, swL2DevCtrlVLANTrunkState=swL2DevCtrlVLANTrunkState, swL2VlanIndex=swL2VlanIndex, swL2PortSecurityDelPort=swL2PortSecurityDelPort, swL2DhcpLocalRelayVLANState=swL2DhcpLocalRelayVLANState, swL2TrafficSegEntry=swL2TrafficSegEntry, swL2FloodMACAutoFDBCtrlEntry=swL2FloodMACAutoFDBCtrlEntry, swPortTrunkPortList=swPortTrunkPortList, swL2McastFilterPortInfoProfileName=swL2McastFilterPortInfoProfileName, swL2McastFilterPortMaxGroupTable=swL2McastFilterPortMaxGroupTable, swL2DevAlarm=swL2DevAlarm, swL2PortSecurityTrapLogState=swL2PortSecurityTrapLogState, swL2PortInfoNwayStatus=swL2PortInfoNwayStatus, swL2DevCtrlDefaultGateway=swL2DevCtrlDefaultGateway, swL2VlanName=swL2VlanName, swL2FloodMACAutoFDBTimestamp=swL2FloodMACAutoFDBTimestamp, swL2QOS8021pUserPriorityTable=swL2QOS8021pUserPriorityTable, swL2DevCtrlSystemReboot=swL2DevCtrlSystemReboot, swL2QOS8021pDefaultPriorityEntry=swL2QOS8021pDefaultPriorityEntry, swl2NotificationBindings=swl2NotificationBindings, swL2DevCtrlCleanAllStatisticCounter=swL2DevCtrlCleanAllStatisticCounter, swL2PortSecurityDelCtrl=swL2PortSecurityDelCtrl, swL2IGMPMaxSupportedVlans=swL2IGMPMaxSupportedVlans, swPortTrunkMaxEntries=swPortTrunkMaxEntries, swL2QOSMgmt=swL2QOSMgmt, swL2IGMPMulticastVlanGroupVid=swL2IGMPMulticastVlanGroupVid, swL2VlanMultiplyAdvertisement=swL2VlanMultiplyAdvertisement, swL2TrunkVLANEntry=swL2TrunkVLANEntry, swL2DevCtrlTelnetState=swL2DevCtrlTelnetState, swL2McastFilterPortProfileAddOrDelState=swL2McastFilterPortProfileAddOrDelState, swL2CosTosPRIEntry=swL2CosTosPRIEntry, swL2DevCtrlRmonState=swL2DevCtrlRmonState, swL2CosPortPRIEntry=swL2CosPortPRIEntry, swL2IGMPRobustness=swL2IGMPRobustness, swL2macNotification=swL2macNotification, swL2FloodMacDetectedTrap=swL2FloodMacDetectedTrap, swL2IGMPDynIpMultMgmt=swL2IGMPDynIpMultMgmt, swL2DhcpRelayState=swL2DhcpRelayState, swL2IGMPHostTimeout=swL2IGMPHostTimeout, swL2IGMPRouterPortStaticPortList=swL2IGMPRouterPortStaticPortList, swL2QOS8021pDefaultPriority=swL2QOS8021pDefaultPriority, swPortTrunkType=swPortTrunkType, swL2PortCtrlNwayState=swL2PortCtrlNwayState, swL2IGMPRouterPortVlanid=swL2IGMPRouterPortVlanid, swL2IGMPRouterPortEntry=swL2IGMPRouterPortEntry, swL2CosTosPRIClass=swL2CosTosPRIClass, swL2FloodMACFDBTimestamp=swL2FloodMACFDBTimestamp, swL2LoopDetectPortState=swL2LoopDetectPortState, swL2FloodMACAutoFDBCtrlTable=swL2FloodMACAutoFDBCtrlTable, swL2DevCtrlSubnetMask=swL2DevCtrlSubnetMask, swL2PortErrPortReason=swL2PortErrPortReason, swL2IGMPRouterPortTable=swL2IGMPRouterPortTable, swL2IGMPMulticastVlanGroupToIp=swL2IGMPMulticastVlanGroupToIp, swL2DevAlarmNewRoot=swL2DevAlarmNewRoot, swL2IGMPMacAddr=swL2IGMPMacAddr, swL2PortInfoEntry=swL2PortInfoEntry, swL2MACNotifyState=swL2MACNotifyState, swL2MultiFilter=swL2MultiFilter, swL2TrunkLACPPortState=swL2TrunkLACPPortState, swL2QOSBandwidthControlTable=swL2QOSBandwidthControlTable, swL2CosPriorityIpPRI=swL2CosPriorityIpPRI, swL2PortInfoPortIndex=swL2PortInfoPortIndex, swL2TrunkMgmt=swL2TrunkMgmt, swL2FloodMacDetectedMacVid=swL2FloodMacDetectedMacVid, swL2FloodMACFDBTable=swL2FloodMACFDBTable, swL2FloodMAC=swL2FloodMAC, swL2FloodMACFDBVID=swL2FloodMACFDBVID)
mibBuilder.exportSymbols("DES3052-L2MGMT-MIB", swL2DevCtrlTelnet=swL2DevCtrlTelnet, swL2DhcpRelayCtrlServer=swL2DhcpRelayCtrlServer, swl2PortSecurityBindings=swl2PortSecurityBindings, swL2PortErrDescription=swL2PortErrDescription, swL2IGMPGroupIpAddr=swL2IGMPGroupIpAddr, swL2QOSBandwidthControlEntry=swL2QOSBandwidthControlEntry, swL2IGMPQueryInfoEntry=swL2IGMPQueryInfoEntry, swIGMPSnoopingGroupUpTime=swIGMPSnoopingGroupUpTime, swL2IGMPAccessAuthEntry=swL2IGMPAccessAuthEntry, swL2DhcpRelayTimeThreshold=swL2DhcpRelayTimeThreshold, swL2LoopDetectRecoverTime=swL2LoopDetectRecoverTime, swL2QOSBandwidthRadiusRxRate=swL2QOSBandwidthRadiusRxRate, swL2DhcpRelayCtrlTable=swL2DhcpRelayCtrlTable, swL2IGMPMulticastVlanMemberPort=swL2IGMPMulticastVlanMemberPort, swL2CosDscpPRIEntry=swL2CosDscpPRIEntry, swL2IGMPSnoopingClearDynIpMultVID=swL2IGMPSnoopingClearDynIpMultVID, swL2IGMPMulticastVlanRemoveAllMcastAddrListAction=swL2IGMPMulticastVlanRemoveAllMcastAddrListAction, swPortMirrorTargetPort=swPortMirrorTargetPort, swL2DhcpLocalRelayVLANTable=swL2DhcpLocalRelayVLANTable, swL2FloodMACAutoFDBIPAddress=swL2FloodMACAutoFDBIPAddress, swL2IGMPMulticastVlanGroupStatus=swL2IGMPMulticastVlanGroupStatus, swL2FloodMACFDBStatus=swL2FloodMACFDBStatus, swL2QOSSchedulingMaxWeight=swL2QOSSchedulingMaxWeight, swL2McastFilterPortProfileID=swL2McastFilterPortProfileID, swL2DhcpLocalRelayMgmt=swL2DhcpLocalRelayMgmt, swL2IGMPDynIPMultVlanState=swL2IGMPDynIPMultVlanState, swL2VlanAdvertisementTable=swL2VlanAdvertisementTable, swL2McastFilterTable=swL2McastFilterTable, swL2IGMPDynIPMultVlanAge=swL2IGMPDynIPMultVlanAge, swL2McastFilterProfileName=swL2McastFilterProfileName, swL2DevCtrlSnmpEnableAuthenTraps=swL2DevCtrlSnmpEnableAuthenTraps, swL2QOS8021pRadiusPriority=swL2QOS8021pRadiusPriority, swL2CosMacBasePRIIndex=swL2CosMacBasePRIIndex, swL2IGMPInfoQueryCount=swL2IGMPInfoQueryCount, swL2CosMacBasePRITable=swL2CosMacBasePRITable, swL2DhcpRelayCtrlEntry=swL2DhcpRelayCtrlEntry, swL2IGMPInfoTable=swL2IGMPInfoTable, MacAddress=MacAddress, swL2IGMPInfoTxQueryCount=swL2IGMPInfoTxQueryCount, swL2IGMPMulticastVlanGroupEntry=swL2IGMPMulticastVlanGroupEntry, swL2CosPriorityEntry=swL2CosPriorityEntry, swL2DhcpLocalRelayState=swL2DhcpLocalRelayState, swL2FloodMACInfo=swL2FloodMACInfo, swL2LoopDetectPortMgmt=swL2LoopDetectPortMgmt, swL2IGMPMulticastVlanTagMemberPort=swL2IGMPMulticastVlanTagMemberPort, swIGMPSnoopingGroupGroupAddr=swIGMPSnoopingGroupGroupAddr, swL2TrafficSegForwardPorts=swL2TrafficSegForwardPorts, swL2LoopDetectPortLoopStatus=swL2LoopDetectPortLoopStatus, swL2IGMPFastLeave=swL2IGMPFastLeave, swL2McastFilterStatus=swL2McastFilterStatus, swL2QOSSchedulingMechanismCtrl=swL2QOSSchedulingMechanismCtrl, swPortTrunkActivePort=swPortTrunkActivePort, swL2DhcpRelayOption82State=swL2DhcpRelayOption82State, swL2DhcpRelayHopCount=swL2DhcpRelayHopCount, swL2LoopDetectPortIndex=swL2LoopDetectPortIndex, swL2PortCtrlTable=swL2PortCtrlTable, swL2PortErrPortStatus=swL2PortErrPortStatus, swL2IGMPQueryState=swL2IGMPQueryState, swPortMirrorPackage=swPortMirrorPackage, swL2CosPriorityEtherPRI=swL2CosPriorityEtherPRI, swL2QOS8021pUserPriorityIndex=swL2QOS8021pUserPriorityIndex, swPortTrunkTable=swPortTrunkTable, swL2FloodMACMgmt=swL2FloodMACMgmt, swL2CosDscpPRIIndex=swL2CosDscpPRIIndex, swL2VlanAdvertiseState=swL2VlanAdvertiseState, swL2FloodMACFDBEntry=swL2FloodMACFDBEntry, swL2IGMPInfoEntry=swL2IGMPInfoEntry, swL2DevCtrlIGMPSnooping=swL2DevCtrlIGMPSnooping, swL2PortErrPortState=swL2PortErrPortState, swL2IGMPSnoopingMulticastVlanState=swL2IGMPSnoopingMulticastVlanState, swL2PortSecurityDelVlanName=swL2PortSecurityDelVlanName, swL2QOSSchedulingClassIndex=swL2QOSSchedulingClassIndex, swL2PortSecurityMaxLernAddr=swL2PortSecurityMaxLernAddr, PYSNMP_MODULE_ID=swL2MgmtMIB, swL2PortErrPortIndex=swL2PortErrPortIndex, swL2FloodMACAutoFDBRowStatus=swL2FloodMACAutoFDBRowStatus, swL2TrunkLACPPortIndex=swL2TrunkLACPPortIndex, swL2IGMPMulticastVlanReplacePriority=swL2IGMPMulticastVlanReplacePriority, swL2LoopDetectInterval=swL2LoopDetectInterval, swL2LoopDetectMgmt=swL2LoopDetectMgmt, swL2CosDscpPRIClass=swL2CosDscpPRIClass, swIGMPSnoopingGroupExcludePortMap=swIGMPSnoopingGroupExcludePortMap, swL2PortSecurityMgmt=swL2PortSecurityMgmt, swL2DevCtrlSystemIP=swL2DevCtrlSystemIP)
