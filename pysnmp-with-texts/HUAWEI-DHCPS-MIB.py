#
# PySNMP MIB module HUAWEI-DHCPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-DHCPS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:44:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
hwDhcp, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDhcp")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibIdentifier, IpAddress, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, TimeTicks, Gauge32, Counter64, Integer32, Counter32, Bits, Unsigned32, NotificationType, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "IpAddress", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "TimeTicks", "Gauge32", "Counter64", "Integer32", "Counter32", "Bits", "Unsigned32", "NotificationType", "ObjectIdentity")
TruthValue, RowStatus, TextualConvention, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "TextualConvention", "MacAddress", "DisplayString")
hwDHCPServerMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2))
hwDHCPServerMib.setRevisions(('2015-03-05 00:00', '2014-08-25 00:00', '2014-03-17 00:00', '2013-07-04 00:00', '2013-06-19 00:00', '2013-05-17 00:00', '2003-02-12 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwDHCPServerMib.setRevisionsDescriptions(('This MIB describes objects used for managing DHCP server, including objects used for DHCP server global pool, interface pool and informations of ip address used and conflicted in DHCP server, some Statistic informations about DHCP server', 'This MIB describes objects used for managing DHCP server, including objects used for DHCP server global pool, interface pool and informations of ip address used and conflicted in DHCP server, some Statistic informations about DHCP server', 'This MIB describes objects used for managing DHCP server, including objects used for DHCP server global pool, interface pool and informations of ip address used and conflicted in DHCP server, some Statistic informations about DHCP server', 'This MIB describes objects used for managing DHCP server, including objects used for DHCP server global pool, interface pool and informations of ip address used and conflicted in DHCP server, some Statistic informations about DHCP server', 'This MIB describes objects used for managing DHCP server, including objects used for DHCP server global pool, interface pool and informations of ip address used and conflicted in DHCP server, some Statistic informations about DHCP server', 'The modify revision of this MIB module.', 'The initial revision of this MIB module.',))
if mibBuilder.loadTexts: hwDHCPServerMib.setLastUpdated('201503050000Z')
if mibBuilder.loadTexts: hwDHCPServerMib.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwDHCPServerMib.setContactInfo("Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com ")
if mibBuilder.loadTexts: hwDHCPServerMib.setDescription('Add node hwDHCPSGlobalPoolConflictRecycleTime hwDHCPSInterfacePoolConflictRecycleTime')
hwDHCPServerMibObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1))
hwDHCPSGlobalPoolTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 1), )
if mibBuilder.loadTexts: hwDHCPSGlobalPoolTable.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolTable.setDescription('DHCP Server Global Pool table for creating and deleting DHCP server global pool')
hwDHCPSGlobalPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 1, 1), ).setIndexNames((0, "HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolName"))
if mibBuilder.loadTexts: hwDHCPSGlobalPoolEntry.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolEntry.setDescription('An entry in DHCP Server Global Pool table containing objects for creating or deleting a global pool for the DHCP server')
hwDHCPSGlobalPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSGlobalPoolName.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolName.setDescription('DHCP server global pool name for creating or deleting DHCP server global pool ')
hwDHCPSGlobalPoolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDHCPSGlobalPoolRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolRowStatus.setDescription('This object is used to create new rows in this table, modify existing rows, and to delete existing rows.Only three actions are used: active(1), createAndGo(4), destroy(6).While the hwDHCPSGlobalPoolRowStatus object is in the `createAndGo(4),The DHCP server global pool to be deleted must be exist')
hwDHCPSGlobalPoolConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 2), )
if mibBuilder.loadTexts: hwDHCPSGlobalPoolConfigTable.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolConfigTable.setDescription('A table containing the configuration informations of DHCP server global pools, such as pool type, ip address, mask')
hwDHCPSGlobalPoolConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 2, 1), ).setIndexNames((0, "HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolName"))
if mibBuilder.loadTexts: hwDHCPSGlobalPoolConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolConfigEntry.setDescription('An entry containing the objects for configuring the network ip or host ip etc. to global pools for DHCP server')
hwDHCPSGlobalPoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("null", 0), ("host", 1), ("network", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSGlobalPoolType.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolType.setDescription('Type of a DHCP global pool. Any operations of this object will be bound with the operations of hwDHCPSGlobalPoolNetwork and hwDHCPSGlobalPoolNetworkMask or with the operations of hwDHCPSGlobalPoolHostIPAddr, hwDHCPSGlobalPoolMask and hwDHCPSGlobalPoolHostHAddr. That means any operation of this object alone will be regarded as invalid operation. The value means: null(0)- It is a pool without ip address, host(1)- It is a pool with manual allocation, network(2)- It is a pool with automatic allocation')
hwDHCPSGlobalPoolNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSGlobalPoolNetwork.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolNetwork.setDescription('Network ip address of a DHCP Server global pool. To delete a configured network ip, please set hwDHCPSGlobalPoolConfigUndoFlag to 1')
hwDHCPSGlobalPoolNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSGlobalPoolNetworkMask.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolNetworkMask.setDescription('Net mask of a DHCP Server global pool(network). The SET operation to this object ought to be with the SET of hwDHCPSGlobalPoolNetwork together, and any SET operation alone to this object will be regarded as an invalid operation. When a network ip of a DHCP server global pool was deleted, the net mask would also be deleted automatically, and no further operation needed')
hwDHCPSGlobalPoolHostIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSGlobalPoolHostIPAddr.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolHostIPAddr.setDescription('Host ip of a DHCP server global pool To detete a configured Host ip, please set hwDHCPSGlobalPoolConfigUndoFlag to 2')
hwDHCPSGlobalPoolHostMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSGlobalPoolHostMask.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolHostMask.setDescription('Host mask of a DHCP server global pool(host) The SET operation to this object ought to be with the SET of hwDHCPSGlobalPoolHostIPAddr together, and any SET operation alone to this object will be regarded as an invalid operation. When a host ip of a DHCP server global pool was deleted, the Host mask would also be deleted automatically, and no further operation needed')
hwDHCPSGlobalPoolHostHAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 2, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSGlobalPoolHostHAddr.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolHostHAddr.setDescription('Hardware address of a DHCP server global pool(host). To delete a configured hardware address, please set hwDHCPSGlobalPoolConfigUndoFlag to 3')
hwDHCPSGlobalPoolConfigUndoFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("undonetworkip", 1), ("undohostip", 2), ("undohosthaddr", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSGlobalPoolConfigUndoFlag.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolConfigUndoFlag.setDescription('Flag of undo operation for hwDHCPSGlobalPoolConfigTable Each value has the following meaning: undonetworkip(1): The value identifies the flag to delete a configured network ip undohostip(2): The value identifies the flag to delete a configured host ip undohosthaddr(3):The value identifies the flag to delete a configured hardware address invalid(4):The value is a default value,do nothing ')
hwDHCPSGlobalPoolParaTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 3), )
if mibBuilder.loadTexts: hwDHCPSGlobalPoolParaTable.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolParaTable.setDescription('A table for configuring parameters to DHCP server global pool, include lease, Domain name,GateWayIP,DNSIP and so on')
hwDHCPSGlobalPoolParaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 3, 1), ).setIndexNames((0, "HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolName"))
if mibBuilder.loadTexts: hwDHCPSGlobalPoolParaEntry.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolParaEntry.setDescription('An entry containing the objects for the configurations of parameters of DHCP server global pools')
hwDHCPSGlobalPoolLeaseDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 365)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSGlobalPoolLeaseDay.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolLeaseDay.setDescription("A value which indicates number of days of the lease, The period over which a network address is allocated to a client is referred to as a 'lease'.")
hwDHCPSGlobalPoolLeaseHour = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSGlobalPoolLeaseHour.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolLeaseHour.setDescription("A value which indicates number of hours of the lease, The period over which a network address is allocated to a client is referred to as a 'lease'.")
hwDHCPSGlobalPoolLeaseMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSGlobalPoolLeaseMinute.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolLeaseMinute.setDescription("A value which indicates number of minutes of the lease, The period over which a network address is allocated to a client is referred to as a 'lease'.")
hwDHCPSGlobalPoolLeaseUnlimited = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("invalid", 0), ("unlimited", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSGlobalPoolLeaseUnlimited.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolLeaseUnlimited.setDescription('A flag denoting if the lease of a pool is unlimited. The value means: invalid(0)- The lease of the network address that clients be assigned is finite, the period is decided by hwDHCPSGlobalPoolLeaseDay,hwDHCPSGlobalPoolLeaseHour and hwDHCPSGlobalPoolLeaseMinute unlimited(1)-The lease of the network address that clients be assigned is infinite')
hwDHCPSGlobalPoolDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSGlobalPoolDomainName.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolDomainName.setDescription('Domain name for DHCP Clients, the domain name that client should use when resolving hostnames via the Domain Name System.')
hwDHCPSGlobalPoolClientGatewayIPString = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSGlobalPoolClientGatewayIPString.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolClientGatewayIPString.setDescription('String of gateway ip addresses for DHCP clients. Since mostly 8 ip addresses can be configured for a pool totally, a string is defined to get or configure 8 ip addresses at a time')
hwDHCPSGlobalPoolClientGatewayIPUndo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 3, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSGlobalPoolClientGatewayIPUndo.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolClientGatewayIPUndo.setDescription('A gateway ip address to be deleted. This object is only for deleting a given ip address of gateway router')
hwDHCPSGlobalPoolClientDNSIPString = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSGlobalPoolClientDNSIPString.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolClientDNSIPString.setDescription('String of DNS server ip addresses for DHCP clients. Since mostly 8 ip addresses can be configured for a pool totally, a string is defined to get or configure 8 ip addresses at a time')
hwDHCPSGlobalPoolClientDNSIPUndo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 3, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSGlobalPoolClientDNSIPUndo.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolClientDNSIPUndo.setDescription('A DNS server ip address to be deleted. This object is only for deleting a given ip address of DNS server')
hwDHCPSGlobalPoolClientNetbiosType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 8))).clone(namedValues=NamedValues(("null", 0), ("bnode", 1), ("pnode", 2), ("mnode", 4), ("hnode", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSGlobalPoolClientNetbiosType.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolClientNetbiosType.setDescription("NetBios node type for DHCP Clients Each value has the following meaning: null(0)- no type designated bnode(1)- Broadcast ('B') nodes,Broadcast (or 'B') nodes communicate using a mix of UDP datagrams (both broadcast and directed) and TCP connections. pnode(2)- Point-to-point ('P') nodes,Point-to-point (or 'P') nodes communicate using only directed UDP datagrams and TCP sessions. mnode(4)- Mixed mode ('M') nodes,Mixed mode nodes (or 'M') nodes are P nodes which have been given certain B node characteristics. hnode(8)- Hybrid mode ('H') nodes. ")
hwDHCPSGlobalPoolClientNbnsIPString = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 3, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSGlobalPoolClientNbnsIPString.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolClientNbnsIPString.setDescription('String of NetBios server ip addresses for DHCP clients. Since mostly 8 ip addresses can be configured for a pool totally, so a string is defined to get or configure 8 ip addresses at a time')
hwDHCPSGlobalPoolClientNbnsIPUndo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 3, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSGlobalPoolClientNbnsIPUndo.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolClientNbnsIPUndo.setDescription('A NetBios server ip address to delete. This object is only for deleting a given ip address of NetBios server')
hwDHCPSGlobalPoolParaUndoFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("undoDomain", 1), ("undoLease", 2), ("undoGateway", 3), ("undoDns", 4), ("undoNbns", 5), ("undoNbType", 6), ("invalid", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSGlobalPoolParaUndoFlag.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolParaUndoFlag.setDescription('Flag of undo-operation for hwDHCPSGlobalPoolParaTable Each value has the following meaning: undoDomain(1) - It means to delete Domain, undoLease(2) - It means to delete lease of a given ip address, undoGateway(3) - It means to delete a given ip address of gateway router, undoDns(4) - It means to delete a given ip address of DNS server, undoNbns(5) - It means to deletd a given ip address of NetBios server, undoNbType(6) - It means to delete NetBios node type , invalid(7) - The value is a default value,do nothing')
hwDHCPSGlobalPoolIPInUseReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSGlobalPoolIPInUseReset.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolIPInUseReset.setDescription('Reset the auto binding ip of the given global pool for DHCP server. The invalid(2) is a default vlaue, do nothing')
hwDHCPSGlobalPoolLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSGlobalPoolLogging.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolLogging.setDescription('Log the assigning IP addresses information of the given global pool for DHCP server. ')
hwDHCPSGlobalPoolConflictRecycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1439999))).setUnits('minute').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSGlobalPoolConflictRecycleTime.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolConflictRecycleTime.setDescription('Description.')
hwDHCPSGlobalPoolOptionTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 4), )
if mibBuilder.loadTexts: hwDHCPSGlobalPoolOptionTable.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolOptionTable.setDescription('A table for configuring options to DHCP server global pools, include option code type and value and so on ')
hwDHCPSGlobalPoolOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 4, 1), ).setIndexNames((0, "HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolName"), (0, "HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolOptionCode"))
if mibBuilder.loadTexts: hwDHCPSGlobalPoolOptionEntry.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolOptionEntry.setDescription('An entry containing the objects for configuring options to DHCP global pools')
hwDHCPSGlobalPoolOptionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSGlobalPoolOptionCode.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolOptionCode.setDescription('Option code, All options begin with a tag octet, which uniquely identifies the option.')
hwDHCPSGlobalPoolOptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ascii", 1), ("hex", 2), ("ip", 3), ("cipher", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDHCPSGlobalPoolOptionType.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolOptionType.setDescription('The object means option type in DHCP server global pool The value means : ascii(1)- The option type is ascii string hex(2) - The option type is hex number ip(3) - The option type is ip address cipher(4) - The option type is cipher string')
hwDHCPSGlobalPoolOptionAscii = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDHCPSGlobalPoolOptionAscii.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolOptionAscii.setDescription('Ascii string of a option')
hwDHCPSGlobalPoolOptionHexString = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDHCPSGlobalPoolOptionHexString.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolOptionHexString.setDescription('Hex string of a option. 1 to 10 2 bytes or 4 bytes hex string can be configured at most simultaneously')
hwDHCPSGlobalPoolOptionIPString = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDHCPSGlobalPoolOptionIPString.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolOptionIPString.setDescription('Ip string of a option. 1 to 8 ip addresses can be configured at most simultaneously')
hwDHCPSGlobalPoolOptionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDHCPSGlobalPoolOptionRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolOptionRowStatus.setDescription('This object is used to configuration new rows in this table, modify existing rows, and to delete existing rows.Only three actions are used: active(1), createAndGo(4), destroy(6). while configuration new option, you must specify option type and value')
hwDHCPSGlobalPoolOptionCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 4, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 104))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDHCPSGlobalPoolOptionCipher.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolOptionCipher.setDescription('Cipher string of a option.')
hwDHCPSGlobalTreeTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 5), )
if mibBuilder.loadTexts: hwDHCPSGlobalTreeTable.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalTreeTable.setDescription('A table containing the information of the tree of DHCP global pools, and the relationship between the pools,')
hwDHCPSGlobalTreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 5, 1), ).setIndexNames((0, "HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolName"))
if mibBuilder.loadTexts: hwDHCPSGlobalTreeEntry.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalTreeEntry.setDescription('An entry of objects containing the information for displaying the tree of DHCP global pools')
hwDHCPSGlobalTreeParentNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSGlobalTreeParentNodeName.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalTreeParentNodeName.setDescription('Pool name of the parent node')
hwDHCPSGlobalTreeChildNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSGlobalTreeChildNodeName.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalTreeChildNodeName.setDescription('Pool name of the child node')
hwDHCPSGlobalTreePreSiblingNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSGlobalTreePreSiblingNodeName.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalTreePreSiblingNodeName.setDescription('Pool name of the presibling node')
hwDHCPSGlobalTreeSiblingNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSGlobalTreeSiblingNodeName.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalTreeSiblingNodeName.setDescription('Pool name of the sibling node')
hwDHCPSInterfacePoolParaTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 6), )
if mibBuilder.loadTexts: hwDHCPSInterfacePoolParaTable.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSInterfacePoolParaTable.setDescription('A table for configuring parameters to DHCP server interface pools, include lease, Domain Name, DNS and so on')
hwDHCPSInterfacePoolParaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hwDHCPSInterfacePoolParaEntry.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSInterfacePoolParaEntry.setDescription('An entry of objects for configuring parameters to DHCP interface pools. The index of this entry is the ifIndex of ethernet')
hwDHCPSInterfacePoolLeaseDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 365)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSInterfacePoolLeaseDay.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSInterfacePoolLeaseDay.setDescription("A value which indicates number of days of the lease, The period over which a network address is allocated to a client is referred to as a 'lease'.")
hwDHCPSInterfacePoolLeaseHour = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSInterfacePoolLeaseHour.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSInterfacePoolLeaseHour.setDescription("A value which indicates number of hours of the lease, The period over which a network address is allocated to a client is referred to as a 'lease'.")
hwDHCPSInterfacePoolLeaseMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSInterfacePoolLeaseMinute.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSInterfacePoolLeaseMinute.setDescription("A value which indicates number of minutes of the lease, The period over which a network address is allocated to a client is referred to as a 'lease'.")
hwDHCPSInterfacePoolLeaseUnlimited = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("invalid", 0), ("unlimited", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSInterfacePoolLeaseUnlimited.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSInterfacePoolLeaseUnlimited.setDescription('A flag denoting if the lease of a pool is unlimited. The value means: invalid(0)- The lease of the network address that clients be assigned is finite, the period is decided by hwDHCPSGlobalPoolLeaseDay,hwDHCPSGlobalPoolLeaseHour and hwDHCPSGlobalPoolLeaseMinute unlimited(1)-The lease of the network address that clients be assigned is infinite')
hwDHCPSInterfacePoolDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSInterfacePoolDomainName.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSInterfacePoolDomainName.setDescription('Domain name for DHCP Clients, the domain name that client should use when resolving hostnames via the Domain Name System.')
hwDHCPSInterfacePoolClientDNSIPString = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 6, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSInterfacePoolClientDNSIPString.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSInterfacePoolClientDNSIPString.setDescription('String of DNS server ip addresses for DHCP clients. Since mostly 8 ip can be configured for a pool totally, a string is defined to get or configure 8 ip at a time')
hwDHCPSInterfacePoolClientDNSIPUndo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 6, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSInterfacePoolClientDNSIPUndo.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSInterfacePoolClientDNSIPUndo.setDescription('A DNS server ip address to delete. This object is only for deleting a given ip of DNS server')
hwDHCPSInterfacePoolClientNetbiosType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 8))).clone(namedValues=NamedValues(("null", 0), ("bnode", 1), ("pnode", 2), ("mnode", 4), ("hnode", 8))).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSInterfacePoolClientNetbiosType.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSInterfacePoolClientNetbiosType.setDescription("NetBios node type for DHCP Clients Each value has the following meaning: null(0)- no type designated bnode(1)- Broadcast ('B') nodes,Broadcast (or 'B') nodes communicate using a mix of UDP datagrams (both broadcast and directed) and TCP connections. pnode(2)- Point-to-point ('P') nodes,Point-to-point (or 'P') nodes communicate using only directed UDP datagrams and TCP sessions. mnode(4)- Mixed mode ('M') nodes,Mixed mode nodes (or 'M') nodes are P nodes which have been given certain B node characteristics. hnode(8)- Hybrid mode ('H') nodes. ")
hwDHCPSInterfacePoolClientNbnsIPString = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 6, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSInterfacePoolClientNbnsIPString.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSInterfacePoolClientNbnsIPString.setDescription('String of NetBios server ip addresses for DHCP clients. Since mostly 8 ip can be configured for a pool totally, so a string is defined to get or configure 8 ip at a time')
hwDHCPSInterfacePoolClientNbnsIPUndo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 6, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSInterfacePoolClientNbnsIPUndo.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSInterfacePoolClientNbnsIPUndo.setDescription('A NetBios server ip address to delete. This object is only for deleting a given ip of NetBios server')
hwDHCPSInterfacePoolParaUndoFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 7))).clone(namedValues=NamedValues(("undoDomain", 1), ("undoLease", 2), ("undoDns", 4), ("undoNbns", 5), ("undoNbType", 6), ("invalid", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSInterfacePoolParaUndoFlag.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSInterfacePoolParaUndoFlag.setDescription('Flag of undo-operation for hwDHCPSInterfacePoolParaTable Each value has the following meaning: undoDomain(1) - It means to delete Domain, undoLease(2) - It means to delete lease of a given ip address, undoGateway(3) - It means to delete a given ip address of gateway router, undoDns(4) - It means to delete a given ip address of DNS server, undoNbns(5) - It means to deletd a given ip address of NetBios server, undoNbType(6) - It means to delete NetBios node type invalid(7) - The value is a default value,do nothing ')
hwDHCPSInterfacePoolIPInUseReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSInterfacePoolIPInUseReset.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSInterfacePoolIPInUseReset.setDescription('Reset the auto or manual binding ip of the given interface pool for DHCP server. The invalid(2) is a default vlaue, do nothing')
hwDHCPSInterfacePoolLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSInterfacePoolLogging.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSInterfacePoolLogging.setDescription('Log the assigning IP addresses information of the given interface pool for DHCP server. ')
hwDHCPSInterfacePoolConflictRecycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 6, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1439999))).setUnits('minute').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSInterfacePoolConflictRecycleTime.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSInterfacePoolConflictRecycleTime.setDescription('Description.')
hwDHCPSInterfacePoolOptionTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 7), )
if mibBuilder.loadTexts: hwDHCPSInterfacePoolOptionTable.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSInterfacePoolOptionTable.setDescription('A table for configuring options to DHCP interface pools, include option code type and value and so on')
hwDHCPSInterfacePoolOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HUAWEI-DHCPS-MIB", "hwDHCPSInterfacePoolOptionCode"))
if mibBuilder.loadTexts: hwDHCPSInterfacePoolOptionEntry.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSInterfacePoolOptionEntry.setDescription('An entry of objects for configuring options to DHCP interface pools. The index of this entry is the inIndex of ethernet')
hwDHCPSInterfacePoolOptionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSInterfacePoolOptionCode.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSInterfacePoolOptionCode.setDescription('Option Code,All options begin with a tag octet, which uniquely identifies the option.')
hwDHCPSInterfacePoolOptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ascii", 1), ("hex", 2), ("ip", 3), ("cipher", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDHCPSInterfacePoolOptionType.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSInterfacePoolOptionType.setDescription('The object means option type in DHCP server interface pool The value means : ascii(1)- The option type is ascii string hex(2) - The option type is hex number ip(3) - The option type is ip address cipher(4) - The option type is cipher string ')
hwDHCPSInterfacePoolOptionAscii = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDHCPSInterfacePoolOptionAscii.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSInterfacePoolOptionAscii.setDescription('Ascii string of an option')
hwDHCPSInterfacePoolOptionHexString = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 7, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDHCPSInterfacePoolOptionHexString.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSInterfacePoolOptionHexString.setDescription('Hex string of a option. 1 to 10 2 bytes or 4 bytes hex string can be configured at most simultaneously')
hwDHCPSInterfacePoolOptionIPString = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 7, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDHCPSInterfacePoolOptionIPString.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSInterfacePoolOptionIPString.setDescription('Ip string of a option. 1 to 8 ip addresses can be configured at most simultaneously')
hwDHCPSInterfacePoolOptionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 7, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDHCPSInterfacePoolOptionRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSInterfacePoolOptionRowStatus.setDescription('This object is used to configuration new rows in this table, modify existing rows, and to delete existing rows.Only three actions are used: active(1), createAndGo(4), destroy(6). while configuration new option, you must specify option type and value')
hwDHCPSInterfacePoolOptionCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 7, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 104))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDHCPSInterfacePoolOptionCipher.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSInterfacePoolOptionCipher.setDescription('Cipher string of an option')
hwDHCPSInterfacePoolStaticBindTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 8), )
if mibBuilder.loadTexts: hwDHCPSInterfacePoolStaticBindTable.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSInterfacePoolStaticBindTable.setDescription('A table for configuring static binding to DHCP interface pools,which manual binding ip address and Hardware address')
hwDHCPSInterfacePoolStaticBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HUAWEI-DHCPS-MIB", "hwDHCPSInterfacePoolStaticBindIP"))
if mibBuilder.loadTexts: hwDHCPSInterfacePoolStaticBindEntry.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSInterfacePoolStaticBindEntry.setDescription('An entry of objects for configuring static binding to DHCP interface pools. The index of this entry is the inIndex of ethernet')
hwDHCPSInterfacePoolStaticBindIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 8, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSInterfacePoolStaticBindIP.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSInterfacePoolStaticBindIP.setDescription('Ip address in static binding for DHCP interface pools')
hwDHCPSInterfacePoolStaticBindMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 8, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDHCPSInterfacePoolStaticBindMac.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSInterfacePoolStaticBindMac.setDescription('Hardware address in static binding for DHCP interface pools')
hwDHCPSInterfacePoolStaticBindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 8, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDHCPSInterfacePoolStaticBindRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSInterfacePoolStaticBindRowStatus.setDescription('This object is used to configuration new rows in this table, modify existing rows, and to delete existing rows.Only three actions are used: active(1), createAndGo(4), destroy(6). while configuration static binding, you must specify ip address and hardware address ')
hwDHCPSIPInUseTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 9), )
if mibBuilder.loadTexts: hwDHCPSIPInUseTable.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSIPInUseTable.setDescription('A table for displaying the information of ip allocation to clients for DHCP server pools')
hwDHCPSIPInUseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 9, 1), ).setIndexNames((0, "HUAWEI-DHCPS-MIB", "hwDHCPSIPInUseHAddr"))
if mibBuilder.loadTexts: hwDHCPSIPInUseEntry.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSIPInUseEntry.setDescription('An entry of objects for displaying information of ip in use for DHCP server pools')
hwDHCPSIPInUseHAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 9, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSIPInUseHAddr.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSIPInUseHAddr.setDescription('The MAC addreess of host use the ip address in DHCP pools')
hwDHCPSIPInUseIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSIPInUseIP.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSIPInUseIP.setDescription('Ip address allocation to clients in DHCP pools')
hwDHCPSIPInUseEndLease = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 9, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSIPInUseEndLease.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSIPInUseEndLease.setDescription('End time of ip address leasese. The structure of the OCTET STRING is year/month/day:hour:munite:second -- YYYY/MM/DD:hh:mm:ss')
hwDHCPSIPInUseType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("manual", 1), ("auto", 2), ("release", 3), ("offered", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSIPInUseType.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSIPInUseType.setDescription('Type of binding The value means manual(1) - manual allocation auto(2) - automatic allocation release(3)- The ip is automatic allocation,but it is already released offered(4)-The ip is offered to client ')
hwDHCPSIPInUsePoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 9, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSIPInUsePoolName.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSIPInUsePoolName.setDescription('Name of the DHCP server pool that allocated ip belongs to')
hwDHCPSIPInUseInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSIPInUseInterface.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSIPInUseInterface.setDescription('Interface index information that ip address belong to')
hwDHCPSIPInUseVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSIPInUseVlan.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSIPInUseVlan.setDescription('Vlan informationg that ip address belong to')
hwDHCPSIPInUseAtmpvc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSIPInUseAtmpvc.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSIPInUseAtmpvc.setDescription('ATM Pvc informationg that ip address belong to')
hwDHCPSForbiddenIPTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 10), )
if mibBuilder.loadTexts: hwDHCPSForbiddenIPTable.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSForbiddenIPTable.setDescription("A table for configuring forbidden ip to DHCP server, which don't allow to allocate to clients")
hwDHCPSForbiddenIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 10, 1), ).setIndexNames((0, "HUAWEI-DHCPS-MIB", "hwDHCPSForbiddenIPStart"), (0, "HUAWEI-DHCPS-MIB", "hwDHCPSForbiddenIPEnd"))
if mibBuilder.loadTexts: hwDHCPSForbiddenIPEntry.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSForbiddenIPEntry.setDescription('An entry for configuring forbidden ip to DHCP server')
hwDHCPSForbiddenIPStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSForbiddenIPStart.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSForbiddenIPStart.setDescription('Start ip address of forbidden ip')
hwDHCPSForbiddenIPEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 10, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSForbiddenIPEnd.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSForbiddenIPEnd.setDescription('End ip address of forbidden ip')
hwDHCPSForbiddenIPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 10, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDHCPSForbiddenIPRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSForbiddenIPRowStatus.setDescription('This object is used to configuration new rows in this table, modify existing rows, and to delete existing rows.Only three actions are used: active(1), createAndGo(4), destroy(6) ')
hwDHCPSConflictIPTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 11), )
if mibBuilder.loadTexts: hwDHCPSConflictIPTable.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSConflictIPTable.setDescription(' A table for displaying the information of conflict ip for DHCP server,ip address is uesed by others when allocate the address. ')
hwDHCPSConflictIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 11, 1), ).setIndexNames((0, "HUAWEI-DHCPS-MIB", "hwDHCPSConflictIP"))
if mibBuilder.loadTexts: hwDHCPSConflictIPEntry.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSConflictIPEntry.setDescription('An entry for displaying the information of conflict ip for DHCP server')
hwDHCPSConflictIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 11, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSConflictIP.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSConflictIP.setDescription('Conflict ip address')
hwDHCPSConflictIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ping", 1), ("arp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSConflictIPType.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSConflictIPType.setDescription('Type of the detection of conflict ip, As a consistency check, the allocating server SHOULD probe the reused address before allocating the address, e.g., with ping or ARP')
hwDHCPSConflictIPDetectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 11, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSConflictIPDetectTime.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSConflictIPDetectTime.setDescription('Time when the confict is detected. The structure of the OCTET STRING is year/month/day:hour:munite:second -- YYYY/MM/DD:hh:mm:ss')
hwDHCPSServiceStatus = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 12), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSServiceStatus.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSServiceStatus.setDescription('The status of DHCP service, The default value is disabled, which mean disabled the DHCP service; the other value is enabled, which mean enable the DHCP service')
hwDHCPSDetectingServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 13), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSDetectingServerStatus.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSDetectingServerStatus.setDescription('The status of DHCP servers detecting function. If the value is enabled, It will check whether have other DHCP Servers. The default value is disabled')
hwDHCPSPingNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSPingNum.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSPingNum.setDescription('The number of ping packets sent out when check address conflict,the default value is 2.')
hwDHCPSPingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSPingTimeout.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSPingTimeout.setDescription('The delay for the reply of a ping packet when check address conflict. Unit: millisecond, the default value is 500.')
hwDHCPSWriteDataStatus = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 16), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSWriteDataStatus.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSWriteDataStatus.setDescription('The status of the function writing data to the harddisk, It does not write data to the harddisk default, The information that written are the content that hwDHCPSConflictIPTable and hwDHCPSIPInUseTable, the default value is disable.')
hwDHCPSWriteDataDirection = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSWriteDataDirection.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSWriteDataDirection.setDescription('The directory of writing data to a harddisk, The format is directory and file name')
hwDHCPSWriteDataDelay = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSWriteDataDelay.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSWriteDataDelay.setDescription('The allowable delay of writing data to the harddisk. Unit: second,the default value is 300.')
hwDHCPSWriteDataRecover = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 19), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSWriteDataRecover.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSWriteDataRecover.setDescription('The flag used to recover DHCP data with the data on the harddisk,It means whether recover data from the data on the harddisk when system startup. The default value is disabled ')
hwDHCPSIPInUseResetIP = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSIPInUseResetIP.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSIPInUseResetIP.setDescription('An ip in use that will be cleared. 0 returned for SET operation')
hwDHCPSConflictIPResetIP = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSConflictIPResetIP.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSConflictIPResetIP.setDescription('An conflict ip that will be cleared. 0 returned for SET operation')
hwDHCPSIPResetFlag = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipInUse", 1), ("conflictIp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSIPResetFlag.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSIPResetFlag.setDescription('A flag that descript the reset operation, 1 means deleting ip in use 2 means deleting conflict ip addresses')
hwDHCPSGlobalPoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSGlobalPoolNumber.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolNumber.setDescription('The total number of DHCP server global pools')
hwDHCPSGlobalPoolAutoBindingNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSGlobalPoolAutoBindingNum.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolAutoBindingNum.setDescription('The total number of auto binding ip in DHCP server')
hwDHCPSGlobalPoolManualBindingNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSGlobalPoolManualBindingNum.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolManualBindingNum.setDescription('The total number of manual binding ip in DHCP server')
hwDHCPSGlobalPoolExpiredBindingNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSGlobalPoolExpiredBindingNum.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSGlobalPoolExpiredBindingNum.setDescription('The total number of expired binding ip in DHCP server')
hwDHCPSInterfacePoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSInterfacePoolNumber.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSInterfacePoolNumber.setDescription('The total number of DHCP server interface pools')
hwDHCPSInterfacePoolAutoBindingNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSInterfacePoolAutoBindingNum.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSInterfacePoolAutoBindingNum.setDescription('The total number of auto binding ip in DHCP server interface pools')
hwDHCPSInterfacePoolManualBindingNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSInterfacePoolManualBindingNum.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSInterfacePoolManualBindingNum.setDescription('The total number of manual binding ip in DHCP server interface pool')
hwDHCPSInterfacePoolExpiredBindingNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSInterfacePoolExpiredBindingNum.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSInterfacePoolExpiredBindingNum.setDescription('The total number of expired binding ip in DHCP server interface pool')
hwDHCPSBadPktNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSBadPktNum.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSBadPktNum.setDescription('The total number of the bad packets received by DHCP server')
hwDHCPSBootRequestPktNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSBootRequestPktNum.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSBootRequestPktNum.setDescription('The total number of the boot request packets recieved by DHCP Server from DHCP clients')
hwDHCPSDiscoverPktNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSDiscoverPktNum.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSDiscoverPktNum.setDescription('The total number of the DHCP Discover packets received from the DHCP clients')
hwDHCPSRequestPktNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSRequestPktNum.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSRequestPktNum.setDescription('The total number of the DHCP Request packets received from the DHCP clients')
hwDHCPSDeclinePktNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSDeclinePktNum.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSDeclinePktNum.setDescription('The total number of the DHCP Decline packets received from the DHCP clients')
hwDHCPSReleasePktNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSReleasePktNum.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSReleasePktNum.setDescription('The total number of the DHCP Release packets received from the DHCP clients')
hwDHCPSInformPktNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSInformPktNum.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSInformPktNum.setDescription('The total number of the DHCP Inform packets received from the DHCP clients')
hwDHCPSBootReplyPktNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSBootReplyPktNum.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSBootReplyPktNum.setDescription('The total number of the boot reply packets sent by DHCP server to DHCP clients')
hwDHCPSOfferPktNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSOfferPktNum.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSOfferPktNum.setDescription('The total number of the DHCP Offer packets sent by the DHCP server')
hwDHCPSAckPktNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSAckPktNum.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSAckPktNum.setDescription('The total number of the DHCP Ack packets sent by the DHCP server')
hwDHCPSNakPktNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSNakPktNum.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSNakPktNum.setDescription('The total number of the DHCP Nak packets sent by the DHCP server')
hwDHCPSStatisticsReset = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("invalid", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPSStatisticsReset.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSStatisticsReset.setDescription('Reset the above statictics information of packets received and sent by the DHCP server. The value 1 means clear the statictics information')
hwDHCPChastenTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 43), )
if mibBuilder.loadTexts: hwDHCPChastenTable.setStatus('current')
if mibBuilder.loadTexts: hwDHCPChastenTable.setDescription("A table for configuring parameters of chasten , which don't allow to deal with packet of clients")
hwDHCPChastenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 43, 1), ).setIndexNames((0, "HUAWEI-DHCPS-MIB", "hwDHCPChastenIndex"))
if mibBuilder.loadTexts: hwDHCPChastenEntry.setStatus('current')
if mibBuilder.loadTexts: hwDHCPChastenEntry.setDescription('An entry for configuring parameters of chasten')
hwDHCPChastenIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 43, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPChastenIndex.setStatus('current')
if mibBuilder.loadTexts: hwDHCPChastenIndex.setDescription('Slot of LPU')
hwDHCPChastenPktNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 43, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDHCPChastenPktNum.setStatus('current')
if mibBuilder.loadTexts: hwDHCPChastenPktNum.setDescription('The threshold number of DHCP Discover packet')
hwDHCPChastenAutenPktNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 43, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDHCPChastenAutenPktNum.setStatus('current')
if mibBuilder.loadTexts: hwDHCPChastenAutenPktNum.setDescription('The threshold number of DHCP Discover packet')
hwDHCPChastenCheckPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 43, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDHCPChastenCheckPeriod.setStatus('current')
if mibBuilder.loadTexts: hwDHCPChastenCheckPeriod.setDescription('The period of checking')
hwDHCPChastenChastenPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 43, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDHCPChastenChastenPeriod.setStatus('current')
if mibBuilder.loadTexts: hwDHCPChastenChastenPeriod.setDescription('The period of chasten')
hwDHCPChastenChastenRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 43, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDHCPChastenChastenRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwDHCPChastenChastenRowStatus.setDescription('This object is used to configuration new rows in this table, modify existing rows, and to delete existing rows.Only three actions are used: active(1), createAndGo(4), destroy(6). while configuration new suboption, you must specify suboption type and value')
hwDHCPSIPPOOLForbiddenIPTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 45), )
if mibBuilder.loadTexts: hwDHCPSIPPOOLForbiddenIPTable.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSIPPOOLForbiddenIPTable.setDescription("A table for configuring forbidden ip to DHCP server, which don't allow to allocate to clients")
hwDHCPSIPPOOLForbiddenIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 45, 1), ).setIndexNames((0, "HUAWEI-DHCPS-MIB", "hwDHCPSIPPOOLForbiddenIPStart"), (0, "HUAWEI-DHCPS-MIB", "hwDHCPSIPPOOLForbiddenIPEnd"), (0, "HUAWEI-DHCPS-MIB", "hwDHCPSIPPOOLForbiddenIPVRFName"))
if mibBuilder.loadTexts: hwDHCPSIPPOOLForbiddenIPEntry.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSIPPOOLForbiddenIPEntry.setDescription('An entry for configuring forbidden ip to DHCP server')
hwDHCPSIPPOOLForbiddenIPStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 45, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSIPPOOLForbiddenIPStart.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSIPPOOLForbiddenIPStart.setDescription('Start ip address of forbidden ip')
hwDHCPSIPPOOLForbiddenIPEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 45, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSIPPOOLForbiddenIPEnd.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSIPPOOLForbiddenIPEnd.setDescription('End ip address of forbidden ip')
hwDHCPSIPPOOLForbiddenIPVRFName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 45, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSIPPOOLForbiddenIPVRFName.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSIPPOOLForbiddenIPVRFName.setDescription('Index: the VRFNAME of forbidden ip.')
hwDHCPSIPPOOLForbiddenIPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 45, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDHCPSIPPOOLForbiddenIPRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSIPPOOLForbiddenIPRowStatus.setDescription('This object is used to configuration new rows in this table, modify existing rows, and to delete existing rows.Only three actions are used: active(1), createAndGo(4), destroy(6) ')
hwDHCPSIPPOOLConflictIPTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 46), )
if mibBuilder.loadTexts: hwDHCPSIPPOOLConflictIPTable.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSIPPOOLConflictIPTable.setDescription(' A table for displaying the information of conflict ip for DHCP server,ip address is uesed by others when allocate the address. ')
hwDHCPSIPPOOLConflictIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 46, 1), ).setIndexNames((0, "HUAWEI-DHCPS-MIB", "hwDHCPSIPPOOLConflictIP"), (0, "HUAWEI-DHCPS-MIB", "hwDHCPSIPPOOLConflictIPVRFName"))
if mibBuilder.loadTexts: hwDHCPSIPPOOLConflictIPEntry.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSIPPOOLConflictIPEntry.setDescription('An entry for displaying the information of conflict ip for DHCP server')
hwDHCPSIPPOOLConflictIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 46, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSIPPOOLConflictIP.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSIPPOOLConflictIP.setDescription('Conflict ip address')
hwDHCPSIPPOOLConflictIPVRFName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 46, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSIPPOOLConflictIPVRFName.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSIPPOOLConflictIPVRFName.setDescription('Index: the VRFNAME of conflict ip.')
hwDHCPSIPPOOLConflictIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 46, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ping", 1), ("arp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSIPPOOLConflictIPType.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSIPPOOLConflictIPType.setDescription('Type of the detection of conflict ip, As a consistency check, the allocating server SHOULD probe the reused address before allocating the address, e.g., with ping or ARP')
hwDHCPSIPPOOLConflictIPDetectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 46, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPSIPPOOLConflictIPDetectTime.setStatus('current')
if mibBuilder.loadTexts: hwDHCPSIPPOOLConflictIPDetectTime.setDescription('Time when the confict is detected. The structure of the OCTET STRING is year/month/day:hour:munite:second -- YYYY/MM/DD:hh:mm:ss')
hwDHCPThroughPacket = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 1, 47), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPThroughPacket.setStatus('current')
if mibBuilder.loadTexts: hwDHCPThroughPacket.setDescription('Set client request packet through')
hwDHCPServerMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 2))
hwDHCPServerMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 2, 1))
hwDHCPServerMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 2, 1, 1)).setObjects(("HUAWEI-DHCPS-MIB", "hwDHCPServerMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDHCPServerMIBCompliance = hwDHCPServerMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: hwDHCPServerMIBCompliance.setDescription('The compliance statement for systems supporting this module.')
hwDHCPServerMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 2, 2))
hwDHCPServerMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 7, 2, 2, 2, 1)).setObjects(("HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolName"), ("HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolRowStatus"), ("HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolType"), ("HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolNetwork"), ("HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolNetworkMask"), ("HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolHostIPAddr"), ("HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolHostMask"), ("HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolHostHAddr"), ("HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolConfigUndoFlag"), ("HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolLeaseDay"), ("HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolLeaseHour"), ("HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolLeaseMinute"), ("HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolLeaseUnlimited"), ("HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolDomainName"), ("HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolClientGatewayIPString"), ("HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolClientGatewayIPUndo"), ("HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolClientDNSIPString"), ("HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolClientDNSIPUndo"), ("HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolClientNetbiosType"), ("HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolClientNbnsIPString"), ("HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolClientNbnsIPUndo"), ("HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolParaUndoFlag"), ("HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolIPInUseReset"), ("HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolOptionCode"), ("HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolOptionType"), ("HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolOptionAscii"), ("HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolOptionHexString"), ("HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolOptionIPString"), ("HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolOptionRowStatus"), ("HUAWEI-DHCPS-MIB", "hwDHCPSGlobalTreeParentNodeName"), ("HUAWEI-DHCPS-MIB", "hwDHCPSGlobalTreeChildNodeName"), ("HUAWEI-DHCPS-MIB", "hwDHCPSGlobalTreePreSiblingNodeName"), ("HUAWEI-DHCPS-MIB", "hwDHCPSGlobalTreeSiblingNodeName"), ("HUAWEI-DHCPS-MIB", "hwDHCPSInterfacePoolLeaseDay"), ("HUAWEI-DHCPS-MIB", "hwDHCPSInterfacePoolLeaseHour"), ("HUAWEI-DHCPS-MIB", "hwDHCPSInterfacePoolLeaseMinute"), ("HUAWEI-DHCPS-MIB", "hwDHCPSInterfacePoolLeaseUnlimited"), ("HUAWEI-DHCPS-MIB", "hwDHCPSInterfacePoolDomainName"), ("HUAWEI-DHCPS-MIB", "hwDHCPSInterfacePoolClientDNSIPString"), ("HUAWEI-DHCPS-MIB", "hwDHCPSInterfacePoolClientDNSIPUndo"), ("HUAWEI-DHCPS-MIB", "hwDHCPSInterfacePoolClientNetbiosType"), ("HUAWEI-DHCPS-MIB", "hwDHCPSInterfacePoolClientNbnsIPString"), ("HUAWEI-DHCPS-MIB", "hwDHCPSInterfacePoolClientNbnsIPUndo"), ("HUAWEI-DHCPS-MIB", "hwDHCPSInterfacePoolParaUndoFlag"), ("HUAWEI-DHCPS-MIB", "hwDHCPSInterfacePoolIPInUseReset"), ("HUAWEI-DHCPS-MIB", "hwDHCPSInterfacePoolOptionCode"), ("HUAWEI-DHCPS-MIB", "hwDHCPSInterfacePoolOptionType"), ("HUAWEI-DHCPS-MIB", "hwDHCPSInterfacePoolOptionAscii"), ("HUAWEI-DHCPS-MIB", "hwDHCPSInterfacePoolOptionHexString"), ("HUAWEI-DHCPS-MIB", "hwDHCPSInterfacePoolOptionIPString"), ("HUAWEI-DHCPS-MIB", "hwDHCPSInterfacePoolOptionRowStatus"), ("HUAWEI-DHCPS-MIB", "hwDHCPSInterfacePoolStaticBindIP"), ("HUAWEI-DHCPS-MIB", "hwDHCPSInterfacePoolStaticBindMac"), ("HUAWEI-DHCPS-MIB", "hwDHCPSInterfacePoolStaticBindRowStatus"), ("HUAWEI-DHCPS-MIB", "hwDHCPSIPInUseHAddr"), ("HUAWEI-DHCPS-MIB", "hwDHCPSIPInUseIP"), ("HUAWEI-DHCPS-MIB", "hwDHCPSIPInUseEndLease"), ("HUAWEI-DHCPS-MIB", "hwDHCPSIPInUseType"), ("HUAWEI-DHCPS-MIB", "hwDHCPSIPInUsePoolName"), ("HUAWEI-DHCPS-MIB", "hwDHCPSIPInUseInterface"), ("HUAWEI-DHCPS-MIB", "hwDHCPSIPInUseVlan"), ("HUAWEI-DHCPS-MIB", "hwDHCPSIPInUseAtmpvc"), ("HUAWEI-DHCPS-MIB", "hwDHCPSForbiddenIPStart"), ("HUAWEI-DHCPS-MIB", "hwDHCPSForbiddenIPEnd"), ("HUAWEI-DHCPS-MIB", "hwDHCPSForbiddenIPRowStatus"), ("HUAWEI-DHCPS-MIB", "hwDHCPSConflictIP"), ("HUAWEI-DHCPS-MIB", "hwDHCPSConflictIPType"), ("HUAWEI-DHCPS-MIB", "hwDHCPSConflictIPDetectTime"), ("HUAWEI-DHCPS-MIB", "hwDHCPSServiceStatus"), ("HUAWEI-DHCPS-MIB", "hwDHCPSDetectingServerStatus"), ("HUAWEI-DHCPS-MIB", "hwDHCPSPingNum"), ("HUAWEI-DHCPS-MIB", "hwDHCPSPingTimeout"), ("HUAWEI-DHCPS-MIB", "hwDHCPSWriteDataStatus"), ("HUAWEI-DHCPS-MIB", "hwDHCPSWriteDataDirection"), ("HUAWEI-DHCPS-MIB", "hwDHCPSWriteDataDelay"), ("HUAWEI-DHCPS-MIB", "hwDHCPSWriteDataRecover"), ("HUAWEI-DHCPS-MIB", "hwDHCPSIPInUseResetIP"), ("HUAWEI-DHCPS-MIB", "hwDHCPSConflictIPResetIP"), ("HUAWEI-DHCPS-MIB", "hwDHCPSIPResetFlag"), ("HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolNumber"), ("HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolAutoBindingNum"), ("HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolManualBindingNum"), ("HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolExpiredBindingNum"), ("HUAWEI-DHCPS-MIB", "hwDHCPSInterfacePoolNumber"), ("HUAWEI-DHCPS-MIB", "hwDHCPSInterfacePoolAutoBindingNum"), ("HUAWEI-DHCPS-MIB", "hwDHCPSInterfacePoolManualBindingNum"), ("HUAWEI-DHCPS-MIB", "hwDHCPSInterfacePoolExpiredBindingNum"), ("HUAWEI-DHCPS-MIB", "hwDHCPSBadPktNum"), ("HUAWEI-DHCPS-MIB", "hwDHCPSBootRequestPktNum"), ("HUAWEI-DHCPS-MIB", "hwDHCPSDiscoverPktNum"), ("HUAWEI-DHCPS-MIB", "hwDHCPSRequestPktNum"), ("HUAWEI-DHCPS-MIB", "hwDHCPSDeclinePktNum"), ("HUAWEI-DHCPS-MIB", "hwDHCPSReleasePktNum"), ("HUAWEI-DHCPS-MIB", "hwDHCPSInformPktNum"), ("HUAWEI-DHCPS-MIB", "hwDHCPSBootReplyPktNum"), ("HUAWEI-DHCPS-MIB", "hwDHCPSOfferPktNum"), ("HUAWEI-DHCPS-MIB", "hwDHCPSAckPktNum"), ("HUAWEI-DHCPS-MIB", "hwDHCPSNakPktNum"), ("HUAWEI-DHCPS-MIB", "hwDHCPSStatisticsReset"), ("HUAWEI-DHCPS-MIB", "hwDHCPSIPPOOLForbiddenIPStart"), ("HUAWEI-DHCPS-MIB", "hwDHCPSIPPOOLForbiddenIPEnd"), ("HUAWEI-DHCPS-MIB", "hwDHCPSIPPOOLForbiddenIPVRFName"), ("HUAWEI-DHCPS-MIB", "hwDHCPSIPPOOLForbiddenIPRowStatus"), ("HUAWEI-DHCPS-MIB", "hwDHCPSIPPOOLConflictIP"), ("HUAWEI-DHCPS-MIB", "hwDHCPSIPPOOLConflictIPVRFName"), ("HUAWEI-DHCPS-MIB", "hwDHCPSIPPOOLConflictIPType"), ("HUAWEI-DHCPS-MIB", "hwDHCPSIPPOOLConflictIPDetectTime"), ("HUAWEI-DHCPS-MIB", "hwDHCPThroughPacket"), ("HUAWEI-DHCPS-MIB", "hwDHCPSGlobalPoolConflictRecycleTime"), ("HUAWEI-DHCPS-MIB", "hwDHCPSInterfacePoolConflictRecycleTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDHCPServerMIBGroup = hwDHCPServerMIBGroup.setStatus('current')
if mibBuilder.loadTexts: hwDHCPServerMIBGroup.setDescription('The basic collection of objects providing management of DHCP server.')
mibBuilder.exportSymbols("HUAWEI-DHCPS-MIB", hwDHCPSInterfacePoolClientNbnsIPUndo=hwDHCPSInterfacePoolClientNbnsIPUndo, hwDHCPChastenTable=hwDHCPChastenTable, hwDHCPSIPPOOLForbiddenIPTable=hwDHCPSIPPOOLForbiddenIPTable, hwDHCPSOfferPktNum=hwDHCPSOfferPktNum, hwDHCPSGlobalPoolOptionIPString=hwDHCPSGlobalPoolOptionIPString, hwDHCPSConflictIP=hwDHCPSConflictIP, hwDHCPSGlobalPoolConflictRecycleTime=hwDHCPSGlobalPoolConflictRecycleTime, hwDHCPSInterfacePoolStaticBindRowStatus=hwDHCPSInterfacePoolStaticBindRowStatus, hwDHCPSIPPOOLConflictIPEntry=hwDHCPSIPPOOLConflictIPEntry, hwDHCPServerMIBGroups=hwDHCPServerMIBGroups, hwDHCPSInterfacePoolOptionRowStatus=hwDHCPSInterfacePoolOptionRowStatus, hwDHCPServerMIBConformance=hwDHCPServerMIBConformance, hwDHCPSGlobalPoolClientNbnsIPString=hwDHCPSGlobalPoolClientNbnsIPString, hwDHCPSInterfacePoolStaticBindIP=hwDHCPSInterfacePoolStaticBindIP, hwDHCPSServiceStatus=hwDHCPSServiceStatus, hwDHCPChastenIndex=hwDHCPChastenIndex, hwDHCPSGlobalPoolTable=hwDHCPSGlobalPoolTable, hwDHCPSGlobalTreeChildNodeName=hwDHCPSGlobalTreeChildNodeName, hwDHCPSDetectingServerStatus=hwDHCPSDetectingServerStatus, hwDHCPSGlobalPoolConfigUndoFlag=hwDHCPSGlobalPoolConfigUndoFlag, hwDHCPSInterfacePoolClientDNSIPUndo=hwDHCPSInterfacePoolClientDNSIPUndo, hwDHCPSInterfacePoolOptionHexString=hwDHCPSInterfacePoolOptionHexString, hwDHCPSIPInUseTable=hwDHCPSIPInUseTable, hwDHCPSGlobalTreeSiblingNodeName=hwDHCPSGlobalTreeSiblingNodeName, hwDHCPSBadPktNum=hwDHCPSBadPktNum, hwDHCPSForbiddenIPEntry=hwDHCPSForbiddenIPEntry, hwDHCPSInterfacePoolLogging=hwDHCPSInterfacePoolLogging, hwDHCPSGlobalPoolRowStatus=hwDHCPSGlobalPoolRowStatus, hwDHCPSGlobalPoolDomainName=hwDHCPSGlobalPoolDomainName, hwDHCPSGlobalPoolOptionRowStatus=hwDHCPSGlobalPoolOptionRowStatus, hwDHCPSGlobalPoolHostMask=hwDHCPSGlobalPoolHostMask, hwDHCPSGlobalPoolClientGatewayIPUndo=hwDHCPSGlobalPoolClientGatewayIPUndo, hwDHCPSConflictIPDetectTime=hwDHCPSConflictIPDetectTime, hwDHCPSIPInUseHAddr=hwDHCPSIPInUseHAddr, hwDHCPSIPInUseVlan=hwDHCPSIPInUseVlan, hwDHCPSForbiddenIPStart=hwDHCPSForbiddenIPStart, hwDHCPSConflictIPEntry=hwDHCPSConflictIPEntry, hwDHCPSIPResetFlag=hwDHCPSIPResetFlag, hwDHCPSGlobalPoolParaEntry=hwDHCPSGlobalPoolParaEntry, hwDHCPSGlobalPoolHostIPAddr=hwDHCPSGlobalPoolHostIPAddr, hwDHCPSInterfacePoolAutoBindingNum=hwDHCPSInterfacePoolAutoBindingNum, hwDHCPSInterfacePoolOptionAscii=hwDHCPSInterfacePoolOptionAscii, hwDHCPSNakPktNum=hwDHCPSNakPktNum, hwDHCPSIPPOOLConflictIPType=hwDHCPSIPPOOLConflictIPType, hwDHCPSWriteDataStatus=hwDHCPSWriteDataStatus, hwDHCPSInterfacePoolOptionCipher=hwDHCPSInterfacePoolOptionCipher, hwDHCPSInterfacePoolOptionTable=hwDHCPSInterfacePoolOptionTable, hwDHCPSGlobalPoolOptionCode=hwDHCPSGlobalPoolOptionCode, hwDHCPSGlobalPoolAutoBindingNum=hwDHCPSGlobalPoolAutoBindingNum, hwDHCPSGlobalTreeEntry=hwDHCPSGlobalTreeEntry, hwDHCPSIPPOOLConflictIP=hwDHCPSIPPOOLConflictIP, hwDHCPServerMIBCompliance=hwDHCPServerMIBCompliance, hwDHCPSRequestPktNum=hwDHCPSRequestPktNum, hwDHCPSGlobalPoolOptionEntry=hwDHCPSGlobalPoolOptionEntry, hwDHCPSIPInUseType=hwDHCPSIPInUseType, hwDHCPChastenEntry=hwDHCPChastenEntry, hwDHCPThroughPacket=hwDHCPThroughPacket, hwDHCPSConflictIPType=hwDHCPSConflictIPType, hwDHCPChastenChastenPeriod=hwDHCPChastenChastenPeriod, hwDHCPSGlobalPoolOptionAscii=hwDHCPSGlobalPoolOptionAscii, hwDHCPSInterfacePoolParaEntry=hwDHCPSInterfacePoolParaEntry, hwDHCPSGlobalPoolIPInUseReset=hwDHCPSGlobalPoolIPInUseReset, hwDHCPSInterfacePoolExpiredBindingNum=hwDHCPSInterfacePoolExpiredBindingNum, hwDHCPSIPPOOLForbiddenIPVRFName=hwDHCPSIPPOOLForbiddenIPVRFName, hwDHCPServerMIBCompliances=hwDHCPServerMIBCompliances, hwDHCPServerMIBGroup=hwDHCPServerMIBGroup, hwDHCPSInterfacePoolIPInUseReset=hwDHCPSInterfacePoolIPInUseReset, hwDHCPServerMibObject=hwDHCPServerMibObject, hwDHCPSForbiddenIPEnd=hwDHCPSForbiddenIPEnd, hwDHCPChastenAutenPktNum=hwDHCPChastenAutenPktNum, hwDHCPSInterfacePoolNumber=hwDHCPSInterfacePoolNumber, hwDHCPSGlobalPoolConfigEntry=hwDHCPSGlobalPoolConfigEntry, hwDHCPSDiscoverPktNum=hwDHCPSDiscoverPktNum, hwDHCPSGlobalPoolLogging=hwDHCPSGlobalPoolLogging, hwDHCPSPingNum=hwDHCPSPingNum, hwDHCPSIPInUsePoolName=hwDHCPSIPInUsePoolName, hwDHCPSGlobalPoolLeaseUnlimited=hwDHCPSGlobalPoolLeaseUnlimited, hwDHCPSInterfacePoolLeaseUnlimited=hwDHCPSInterfacePoolLeaseUnlimited, hwDHCPSGlobalPoolManualBindingNum=hwDHCPSGlobalPoolManualBindingNum, hwDHCPSGlobalPoolExpiredBindingNum=hwDHCPSGlobalPoolExpiredBindingNum, hwDHCPSIPPOOLConflictIPTable=hwDHCPSIPPOOLConflictIPTable, hwDHCPSConflictIPResetIP=hwDHCPSConflictIPResetIP, hwDHCPSInterfacePoolClientDNSIPString=hwDHCPSInterfacePoolClientDNSIPString, hwDHCPSDeclinePktNum=hwDHCPSDeclinePktNum, hwDHCPSGlobalPoolEntry=hwDHCPSGlobalPoolEntry, hwDHCPSIPInUseIP=hwDHCPSIPInUseIP, hwDHCPSGlobalPoolLeaseMinute=hwDHCPSGlobalPoolLeaseMinute, hwDHCPSGlobalPoolLeaseDay=hwDHCPSGlobalPoolLeaseDay, hwDHCPSIPPOOLForbiddenIPEnd=hwDHCPSIPPOOLForbiddenIPEnd, hwDHCPSIPPOOLConflictIPVRFName=hwDHCPSIPPOOLConflictIPVRFName, hwDHCPSGlobalPoolLeaseHour=hwDHCPSGlobalPoolLeaseHour, hwDHCPSInterfacePoolClientNetbiosType=hwDHCPSInterfacePoolClientNetbiosType, hwDHCPSBootRequestPktNum=hwDHCPSBootRequestPktNum, hwDHCPSGlobalPoolHostHAddr=hwDHCPSGlobalPoolHostHAddr, hwDHCPSGlobalTreePreSiblingNodeName=hwDHCPSGlobalTreePreSiblingNodeName, hwDHCPSInterfacePoolParaUndoFlag=hwDHCPSInterfacePoolParaUndoFlag, hwDHCPSInterfacePoolStaticBindMac=hwDHCPSInterfacePoolStaticBindMac, hwDHCPSWriteDataDelay=hwDHCPSWriteDataDelay, hwDHCPSIPInUseAtmpvc=hwDHCPSIPInUseAtmpvc, hwDHCPSInterfacePoolOptionCode=hwDHCPSInterfacePoolOptionCode, hwDHCPSReleasePktNum=hwDHCPSReleasePktNum, hwDHCPSInterfacePoolStaticBindEntry=hwDHCPSInterfacePoolStaticBindEntry, hwDHCPSInterfacePoolDomainName=hwDHCPSInterfacePoolDomainName, hwDHCPSInterfacePoolLeaseDay=hwDHCPSInterfacePoolLeaseDay, hwDHCPSGlobalPoolClientNetbiosType=hwDHCPSGlobalPoolClientNetbiosType, hwDHCPSGlobalPoolClientGatewayIPString=hwDHCPSGlobalPoolClientGatewayIPString, hwDHCPSWriteDataRecover=hwDHCPSWriteDataRecover, hwDHCPSIPPOOLForbiddenIPEntry=hwDHCPSIPPOOLForbiddenIPEntry, hwDHCPSConflictIPTable=hwDHCPSConflictIPTable, hwDHCPSGlobalPoolConfigTable=hwDHCPSGlobalPoolConfigTable, hwDHCPChastenCheckPeriod=hwDHCPChastenCheckPeriod, hwDHCPSGlobalPoolOptionType=hwDHCPSGlobalPoolOptionType, hwDHCPSIPInUseEntry=hwDHCPSIPInUseEntry, hwDHCPSInterfacePoolStaticBindTable=hwDHCPSInterfacePoolStaticBindTable, hwDHCPSGlobalPoolName=hwDHCPSGlobalPoolName, hwDHCPSWriteDataDirection=hwDHCPSWriteDataDirection, hwDHCPServerMib=hwDHCPServerMib, hwDHCPSIPInUseEndLease=hwDHCPSIPInUseEndLease, hwDHCPSInterfacePoolParaTable=hwDHCPSInterfacePoolParaTable, hwDHCPSGlobalPoolParaUndoFlag=hwDHCPSGlobalPoolParaUndoFlag, hwDHCPSInterfacePoolClientNbnsIPString=hwDHCPSInterfacePoolClientNbnsIPString, PYSNMP_MODULE_ID=hwDHCPServerMib, hwDHCPChastenPktNum=hwDHCPChastenPktNum, hwDHCPChastenChastenRowStatus=hwDHCPChastenChastenRowStatus, hwDHCPSInformPktNum=hwDHCPSInformPktNum, hwDHCPSIPPOOLConflictIPDetectTime=hwDHCPSIPPOOLConflictIPDetectTime, hwDHCPSInterfacePoolLeaseHour=hwDHCPSInterfacePoolLeaseHour, hwDHCPSPingTimeout=hwDHCPSPingTimeout, hwDHCPSGlobalPoolOptionHexString=hwDHCPSGlobalPoolOptionHexString, hwDHCPSGlobalPoolNetworkMask=hwDHCPSGlobalPoolNetworkMask, hwDHCPSStatisticsReset=hwDHCPSStatisticsReset, hwDHCPSIPPOOLForbiddenIPRowStatus=hwDHCPSIPPOOLForbiddenIPRowStatus, hwDHCPSBootReplyPktNum=hwDHCPSBootReplyPktNum, hwDHCPSGlobalPoolClientDNSIPUndo=hwDHCPSGlobalPoolClientDNSIPUndo, hwDHCPSGlobalTreeTable=hwDHCPSGlobalTreeTable, hwDHCPSInterfacePoolOptionType=hwDHCPSInterfacePoolOptionType, hwDHCPSGlobalPoolOptionTable=hwDHCPSGlobalPoolOptionTable, hwDHCPSIPInUseInterface=hwDHCPSIPInUseInterface, hwDHCPSInterfacePoolOptionIPString=hwDHCPSInterfacePoolOptionIPString, hwDHCPSGlobalPoolNumber=hwDHCPSGlobalPoolNumber, hwDHCPSInterfacePoolOptionEntry=hwDHCPSInterfacePoolOptionEntry, hwDHCPSIPPOOLForbiddenIPStart=hwDHCPSIPPOOLForbiddenIPStart, hwDHCPSGlobalPoolClientNbnsIPUndo=hwDHCPSGlobalPoolClientNbnsIPUndo, hwDHCPSGlobalTreeParentNodeName=hwDHCPSGlobalTreeParentNodeName, hwDHCPSInterfacePoolManualBindingNum=hwDHCPSInterfacePoolManualBindingNum, hwDHCPSAckPktNum=hwDHCPSAckPktNum, hwDHCPSGlobalPoolOptionCipher=hwDHCPSGlobalPoolOptionCipher, hwDHCPSGlobalPoolClientDNSIPString=hwDHCPSGlobalPoolClientDNSIPString, hwDHCPSForbiddenIPRowStatus=hwDHCPSForbiddenIPRowStatus, hwDHCPSIPInUseResetIP=hwDHCPSIPInUseResetIP, hwDHCPSGlobalPoolNetwork=hwDHCPSGlobalPoolNetwork, hwDHCPSInterfacePoolLeaseMinute=hwDHCPSInterfacePoolLeaseMinute, hwDHCPSGlobalPoolParaTable=hwDHCPSGlobalPoolParaTable, hwDHCPSInterfacePoolConflictRecycleTime=hwDHCPSInterfacePoolConflictRecycleTime, hwDHCPSForbiddenIPTable=hwDHCPSForbiddenIPTable, hwDHCPSGlobalPoolType=hwDHCPSGlobalPoolType)
