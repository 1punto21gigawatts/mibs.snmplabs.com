#
# PySNMP MIB module SALIX-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SALIX-SYSTEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:00:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
atmfM4EquipHolderEntry, atmfM4CellProtoHistIndex, atmfM4TcAdaptorEntry, atmfM4PlugInUnitEntry, atmfM4TrapAlarmSeverity, atmfM4PlugInUnitAvailStatus = mibBuilder.importSymbols("ATM-FORUM-M4-MIB", "atmfM4EquipHolderEntry", "atmfM4CellProtoHistIndex", "atmfM4TcAdaptorEntry", "atmfM4PlugInUnitEntry", "atmfM4TrapAlarmSeverity", "atmfM4PlugInUnitAvailStatus")
TruthValue, = mibBuilder.importSymbols("ATM-FORUM-TC-MIB", "TruthValue")
entPhysicalParentRelPos, PhysicalIndex, entPhysicalIndex, entPhysicalClass, entPhysicalContainedIn = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalParentRelPos", "PhysicalIndex", "entPhysicalIndex", "entPhysicalClass", "entPhysicalContainedIn")
ifOperStatus, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifOperStatus", "InterfaceIndex")
salixGeneric, = mibBuilder.importSymbols("SALIX-MIB", "salixGeneric")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter32, ObjectIdentity, Bits, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Unsigned32, NotificationType, TimeTicks, Counter64, Gauge32, IpAddress, ModuleIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ObjectIdentity", "Bits", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Unsigned32", "NotificationType", "TimeTicks", "Counter64", "Gauge32", "IpAddress", "ModuleIdentity", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
salixSystemMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2158, 2, 3))
if mibBuilder.loadTexts: salixSystemMIB.setLastUpdated('9810130000Z')
if mibBuilder.loadTexts: salixSystemMIB.setOrganization('SALIX Technologies')
if mibBuilder.loadTexts: salixSystemMIB.setContactInfo('904 Wind River Lane Suite 101 Gaithersburg, MD 20878 (301)-417-0017')
if mibBuilder.loadTexts: salixSystemMIB.setDescription('The MIB describing System Objects for SALIX products. These objects include error reporting objects, and other system information objects')
salixSystemMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 2, 3, 1))
salixSystemMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 2, 3, 2))
salixSystemMIBCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 2, 3, 3))
salixSystemMIBTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 2, 3, 2, 0))
salixSystemSync = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 2, 3, 1, 5))
salixSystemHsf = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 2, 3, 1, 6))
salixSystemRsc = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 2, 3, 1, 7))
salixSysLastLogErrorNumber = MibScalar((1, 3, 6, 1, 4, 1, 2158, 2, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: salixSysLastLogErrorNumber.setStatus('current')
if mibBuilder.loadTexts: salixSysLastLogErrorNumber.setDescription('The error number that is associate with the last set request.')
salixSysLastLogErrorMessage = MibScalar((1, 3, 6, 1, 4, 1, 2158, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: salixSysLastLogErrorMessage.setStatus('current')
if mibBuilder.loadTexts: salixSysLastLogErrorMessage.setDescription('The error message that describes the error associated with the last set request.')
salixSysLastLogErrorOid = MibScalar((1, 3, 6, 1, 4, 1, 2158, 2, 3, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: salixSysLastLogErrorOid.setStatus('current')
if mibBuilder.loadTexts: salixSysLastLogErrorOid.setDescription('The last set request OID that produced an error.')
salixSysTemperature = MibScalar((1, 3, 6, 1, 4, 1, 2158, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: salixSysTemperature.setStatus('deprecated')
if mibBuilder.loadTexts: salixSysTemperature.setDescription('The temperature in degrees Celsius inside the chassis.')
salixSysLoginMessage = MibScalar((1, 3, 6, 1, 4, 1, 2158, 2, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 768))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: salixSysLoginMessage.setStatus('current')
if mibBuilder.loadTexts: salixSysLoginMessage.setDescription('The message is displayed every time a user logs into the CLI. It may be used to display legal warnings.')
salixSysSyncTimingMode = MibScalar((1, 3, 6, 1, 4, 1, 2158, 2, 3, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internal", 1), ("line", 2), ("external", 3))).clone('internal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: salixSysSyncTimingMode.setStatus('current')
if mibBuilder.loadTexts: salixSysSyncTimingMode.setDescription('An identification of the source from which timing is derived by the working sync module. Possible values are: internal(1) - the internal oscillator on the sync module will be used as the master clock for system synchronization. line(2) - the sync module is synchronizing with the receive line timing from a signal received by an LIU. external(3) - an external timing interface will be used as the master clock for system sychronization.')
salixSysSyncPrimaryRef = MibScalar((1, 3, 6, 1, 4, 1, 2158, 2, 3, 1, 5, 2), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: salixSysSyncPrimaryRef.setStatus('current')
if mibBuilder.loadTexts: salixSysSyncPrimaryRef.setDescription("The interface index of the primary reference line from which the sync module can derive timing. If the 'salixSysSyncTimingMode' is set to 'line' then this interface index should identify a physical line termination point. If the 'salixSysSyncTimingMode' is set to 'external' then this interface index should identify a external timing interface.")
salixSysSyncSecondaryRef = MibScalar((1, 3, 6, 1, 4, 1, 2158, 2, 3, 1, 5, 3), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: salixSysSyncSecondaryRef.setStatus('current')
if mibBuilder.loadTexts: salixSysSyncSecondaryRef.setDescription("The interface index of the secondary reference line from which the sync module can derive timing. If the 'salixSysSyncTimingMode' is set to 'line' then this interface index should identify a physical line termination point. If the 'salixSysSyncTimingMode' is set to 'external' then this interface index should identify an external timing interface. The secondary reference line is only used if the salixSysSyncTimingMode is set to 'line' or 'external' and the primary reference line identified by 'salixSysSyncPrimaryRef' has an oper status of 'down'.")
salixSysSyncRevertiveSwitch = MibScalar((1, 3, 6, 1, 4, 1, 2158, 2, 3, 1, 5, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: salixSysSyncRevertiveSwitch.setStatus('current')
if mibBuilder.loadTexts: salixSysSyncRevertiveSwitch.setDescription("Indication of whether or not the active interface for deriving timing should revert to the interface defined by the primary reference line 'salixSysSyncPrimaryRef' if the primary becomes available after a failure is cleared. This object is only valid if the 'salixSysSyncTimingMode' is configured as 'line' or 'external'. true(1) - reference switching is revertive false(2) - reference switching is non-revertive")
salixSysSyncClockMode = MibScalar((1, 3, 6, 1, 4, 1, 2158, 2, 3, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("freeRun", 1), ("normal", 2), ("holdover", 3), ("fastStart", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: salixSysSyncClockMode.setStatus('current')
if mibBuilder.loadTexts: salixSysSyncClockMode.setDescription("Indication of the clock mode of the 'working' sync module. freeRun(1) - mode in which the clock is synchronized to the module's internal oscillator. normal(2) - mode in which the clock is synchronized to an external reference. holdover(3) - mode in which the clock, after having been synchronized to an external reference, loses that reference and all other external references. fastStart(4) - mode in which the clock is in the process of synchronizing to a reference.")
salixSysSyncConfiguredActiveRef = MibScalar((1, 3, 6, 1, 4, 1, 2158, 2, 3, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: salixSysSyncConfiguredActiveRef.setStatus('current')
if mibBuilder.loadTexts: salixSysSyncConfiguredActiveRef.setDescription("The configured active reference line from which the sync module should deriving its timing. This object is relevant if the 'salixSysSyncTimingMode' is set to 'line' or 'external'. Writing a value that is different from its current value will force the Sync module to switch to using the specified managed object as the active reference line as indicated below: primary(1) - The salixSysSyncPrimaryRef is the active reference line secondary(2) - The salixSysSyncSecondaryRef is the active reference line")
salixSysSyncAutoRefSwitch = MibScalar((1, 3, 6, 1, 4, 1, 2158, 2, 3, 1, 5, 7), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: salixSysSyncAutoRefSwitch.setStatus('current')
if mibBuilder.loadTexts: salixSysSyncAutoRefSwitch.setDescription('Indication of automatic reference switching being enabled or disabled. true(1) - Auto reference switching is enabled false(2) - Auto reference switching is disabled')
salixSysSyncFreeRunAlarm = MibScalar((1, 3, 6, 1, 4, 1, 2158, 2, 3, 1, 5, 8), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: salixSysSyncFreeRunAlarm.setStatus('current')
if mibBuilder.loadTexts: salixSysSyncFreeRunAlarm.setDescription('Indication of alarm associated with free-run mode being enabled or disabled. true(1) - Alarm is enabled false(2) - Alarm is disabled')
salixSysSyncWorking = MibScalar((1, 3, 6, 1, 4, 1, 2158, 2, 3, 1, 5, 9), PhysicalIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: salixSysSyncWorking.setStatus('current')
if mibBuilder.loadTexts: salixSysSyncWorking.setDescription('The entPhysicalIndex of the sync module plug-in unit that is providing the system synchronizaton signal. Writing a new value to this object, a value not equal to the current value, will: - update the salixSysSyncProtect object with the current value of the salixSysSyncWorking object and - activate the specified sync module to start providing the system synchronization signal. A value of 0 indicates that there are no operational or not installed sync modules in the system. Writing zero, an invalid index, or the current value to this object will have no effect. If the working sync module fails, the system will automatically switch to the sync module specified in the salixSysSyncProtect object.')
salixSysSyncProtect = MibScalar((1, 3, 6, 1, 4, 1, 2158, 2, 3, 1, 5, 10), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: salixSysSyncProtect.setStatus('current')
if mibBuilder.loadTexts: salixSysSyncProtect.setDescription('The entPhysicalIndex of the sync module plug-in unit that is protecting or on standby to the working sync module. A value of 0 indicates that there is no redundant sync module available or provisioned as a protect module.')
salixSysSyncPrimaryRefState = MibScalar((1, 3, 6, 1, 4, 1, 2158, 2, 3, 1, 5, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("valid", 1), ("lossOfSignalError", 2), ("frequencyOffsetError", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: salixSysSyncPrimaryRefState.setStatus('current')
if mibBuilder.loadTexts: salixSysSyncPrimaryRefState.setDescription("This variable indicates the state of the primary reference line termination point to be used as a timing source by the sync module. This object is relevant if the salixSysSyncTimingMode is set to 'line' and the salixSysSyncPrimaryRef is configured. unknown(0) - the state of the line has not been determined. valid(1) - the line is operating within the frequency specification. lossOfSignalError - loss of signal was detected from the line and has failed the health check. frequencyOffsetError - frequency errors were detected from the line and has failed the health check")
salixSysSyncSecondaryRefState = MibScalar((1, 3, 6, 1, 4, 1, 2158, 2, 3, 1, 5, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("valid", 1), ("lossOfSignalError", 2), ("frequencyOffsetError", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: salixSysSyncSecondaryRefState.setStatus('current')
if mibBuilder.loadTexts: salixSysSyncSecondaryRefState.setDescription("This variable indicates the state of the secondary reference line termination point to be used as a timing source by the sync module. This object is relevant if the 'salixSysSyncTimingMode' is set to 'line' and the 'salixSysSyncPrimaryRef' is configured. unknown(0) - the state of the line has not been determined. valid(1) - the line is operating within frequency specification. lossOfSignalError - loss of signal was detected from the line and has failed the health check. frequencyOffsetError - frequency errors were detected from the line and has failed the health check")
salixSysSyncCurrentActiveRef = MibScalar((1, 3, 6, 1, 4, 1, 2158, 2, 3, 1, 5, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: salixSysSyncCurrentActiveRef.setStatus('current')
if mibBuilder.loadTexts: salixSysSyncCurrentActiveRef.setDescription("Indication of the active reference line from which the sync module is deriving its timing. This object is relevant if the salixSysSyncTimingMode is set to 'line' or 'external'. The value of this variable can differ from the 'salixSysSyncConfiguredActiveRef' if the sync module determines an error condition with the 'salixSysSyncConfiguredActiveRef' and has switched to using another line as the active reference. primary(1) - The salixSysSyncPrimaryRef is the current active reference line secondary(2) - The salixSysSyncSecondaryRef is the current active reference line")
salixSysSyncForcedState = MibScalar((1, 3, 6, 1, 4, 1, 2158, 2, 3, 1, 5, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("revertiveSwitchInhibit", 1), ("autoReferenceSwitchInhbit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: salixSysSyncForcedState.setStatus('current')
if mibBuilder.loadTexts: salixSysSyncForcedState.setDescription("This variable indicates the state of the sync module with regard to switching between the configured active reference, the value of the 'salixSysSyncConfiguredActiveRef' variable, and the alternate active reference. The alternate active reference is identified by the 'salixSysSyncPrimaryRef' or 'salixSysSyncSecondaryRef' that is not configured as the 'salixSysSyncConfiguredActiveRef'. none(0) - the sync module is in a state where it is free to switch between the configured active reference the alternate active reference. revertiveSwitchInhibit - the state of the sync module after switching from the 'salixSysSyncConfiguredActiveRef' to the 'salixSysSyncCurrentActiveRef' when the 'salixSysSyncRevertiveSwitch' is configured as 'false'. In this state the sync module will not revert back to using the 'salixSysSyncConfiguredActiveRef' unless the 'salixSysSyncCurrentActiveRef' has failed and the state of the active reference defined by the 'salixSysSyncConfiguredActiveRef' variable is 'valid'. autoReferenceSwitchInhibit - the state of the sync module when the 'salixSysSyncAutoReferenceSwitch' variable is configured as 'false'. In this state the sync module will not switch to using the alternate active reference unless the 'salixSysSyncCurrentActiveRef' has failed and the state of the alternate active reference is 'valid'.")
salixSysHsfWorking = MibScalar((1, 3, 6, 1, 4, 1, 2158, 2, 3, 1, 6, 1), PhysicalIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: salixSysHsfWorking.setStatus('current')
if mibBuilder.loadTexts: salixSysHsfWorking.setDescription('The PhysicalIndex of the Hybrid Switch Fabric (HSF) module plug-in unit that is performing switching in the SALIX. Writing a new value to this variable will: - update the salixHsfProtect object with the current value of the salixHsfWorking object and - activate the specified HSF module to start performing ATM and TDM switching in the system. A value of 0 indicates that there is no operational switch fabric installed. Writing zero, an invalid index, or the current value to this object will have no effect. If the working HSF module fails, the system will automatically switch to the HSF module specified in the salixHsfProtect object.')
salixSysHsfProtect = MibScalar((1, 3, 6, 1, 4, 1, 2158, 2, 3, 1, 6, 2), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: salixSysHsfProtect.setStatus('current')
if mibBuilder.loadTexts: salixSysHsfProtect.setDescription('The entPhysicalIndex of the Hybrid Switch Fabric (HSF) module plug-in unit that is protecting or on standby to the working HSF module, salixHSFWorking. A value of 0 indicates that there are no operational or no additional HSF modules present for redundancy.')
salixSysRscWorking = MibScalar((1, 3, 6, 1, 4, 1, 2158, 2, 3, 1, 7, 1), PhysicalIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: salixSysRscWorking.setStatus('current')
if mibBuilder.loadTexts: salixSysRscWorking.setDescription('The PhysicalIndex of the Redundant Shelf Controller (RSC) module plug-in unit that is performing shelf controller operations in the product (ie. talking with media controller, handling SNMP requests). Writing a new value to this variable will: - update the salixSysRscProtect object with the current value of the salixSysRscWorking object and - activate the specified RSC module to start performing shelf controller operations in the system. A value of 0 indicates that there is no operational shelf controller installed. Writing zero, an invalid index, or the current value to this object will have no effect. If the working RSC module fails, the system will automatically switch to the RSC module specified in the salixRscProtect object.')
salixSysRscProtect = MibScalar((1, 3, 6, 1, 4, 1, 2158, 2, 3, 1, 7, 2), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: salixSysRscProtect.setStatus('current')
if mibBuilder.loadTexts: salixSysRscProtect.setDescription('The entPhysicalIndex of the Redundant Shelf Controller (RSC) module plug-in unit that is protecting or on standby to the working RSC module, salixRscWorking. A value of 0 indicates that there are no operational or no additional RSC modules present for redundancy.')
salixSysSyncRefLineAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2158, 2, 3, 2, 0, 1)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalParentRelPos"), ("ENTITY-MIB", "entPhysicalClass"), ("IF-MIB", "ifOperStatus"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: salixSysSyncRefLineAlarm.setStatus('current')
if mibBuilder.loadTexts: salixSysSyncRefLineAlarm.setDescription("Indicates that the Sync plug-in unit associated with the specified physical entity detected an error condition with the interface configured as a reference. The default alarm severity for this alarm is 'minor'.")
salixSysSyncInvalidRefLineAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2158, 2, 3, 2, 0, 2)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalParentRelPos"), ("ENTITY-MIB", "entPhysicalClass"), ("SALIX-SYSTEM-MIB", "salixSysSyncPrimaryRef"), ("SALIX-SYSTEM-MIB", "salixSysSyncSecondaryRef"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: salixSysSyncInvalidRefLineAlarm.setStatus('current')
if mibBuilder.loadTexts: salixSysSyncInvalidRefLineAlarm.setDescription("Indicates that the Sync plug-in unit associated with the specified physical entity does not have a valid primary or secondary reference line for deriving timing. The default alarm severity for this alarm is 'major'.")
salixSysSyncClockModeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2158, 2, 3, 2, 0, 3)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4PlugInUnitAvailStatus"), ("SALIX-SYSTEM-MIB", "salixSysSyncClockMode"), ("SALIX-SYSTEM-MIB", "salixSysSyncWorking"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: salixSysSyncClockModeAlarm.setStatus('current')
if mibBuilder.loadTexts: salixSysSyncClockModeAlarm.setDescription("Indicates that the clock mode of the working or protect Sync plug-in unit associated with the specified physical entity, 'atmfM4PlugInUnitAvailStatus', changed to or from 'normal'. The default alarm severity for this alarm is 'major'.")
salixSysSyncClockModeStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2158, 2, 3, 2, 0, 4)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4PlugInUnitAvailStatus"), ("SALIX-SYSTEM-MIB", "salixSysSyncClockMode"), ("SALIX-SYSTEM-MIB", "salixSysSyncWorking"))
if mibBuilder.loadTexts: salixSysSyncClockModeStateChange.setStatus('current')
if mibBuilder.loadTexts: salixSysSyncClockModeStateChange.setDescription("Indicates that the clock mode of the working or protect Sync plug-in unit associated with the specified physical entity, 'atmfM4PlugInUnitAvailStatus', changed.")
salixSysFileSystemUnavailable = NotificationType((1, 3, 6, 1, 4, 1, 2158, 2, 3, 2, 0, 5)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: salixSysFileSystemUnavailable.setStatus('current')
if mibBuilder.loadTexts: salixSysFileSystemUnavailable.setDescription('Indicates the System Filesystem is no longer available. This can indicate the loss of connectivity to the NFS server, or loss of the hard disk in systems with a physical disk')
salixSystemGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 2, 3, 3, 1))
salixSystemCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 2, 3, 3, 2))
salixSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2158, 2, 3, 3, 1, 1)).setObjects(("SALIX-SYSTEM-MIB", "salixSysLastLogErrorNumber"), ("SALIX-SYSTEM-MIB", "salixSysLastLogErrorMessage"), ("SALIX-SYSTEM-MIB", "salixSysLastLogErrorOid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    salixSystemGroup = salixSystemGroup.setStatus('current')
if mibBuilder.loadTexts: salixSystemGroup.setDescription('Salix Error Objects Group')
salixSystemCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2158, 2, 3, 3, 2, 1)).setObjects(("SALIX-SYSTEM-MIB", "salixSystemGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    salixSystemCompliance = salixSystemCompliance.setStatus('current')
if mibBuilder.loadTexts: salixSystemCompliance.setDescription('The basic implementation requirements for the SALIX-ERROR-MIB.')
mibBuilder.exportSymbols("SALIX-SYSTEM-MIB", salixSysSyncSecondaryRef=salixSysSyncSecondaryRef, salixSysSyncWorking=salixSysSyncWorking, salixSystemGroup=salixSystemGroup, salixSysSyncClockMode=salixSysSyncClockMode, salixSysSyncPrimaryRefState=salixSysSyncPrimaryRefState, salixSysSyncTimingMode=salixSysSyncTimingMode, salixSystemMIBObjects=salixSystemMIBObjects, salixSystemHsf=salixSystemHsf, salixSysSyncClockModeStateChange=salixSysSyncClockModeStateChange, salixSysLoginMessage=salixSysLoginMessage, salixSystemSync=salixSystemSync, PYSNMP_MODULE_ID=salixSystemMIB, salixSysTemperature=salixSysTemperature, salixSysRscWorking=salixSysRscWorking, salixSysHsfProtect=salixSysHsfProtect, salixSystemMIBTraps=salixSystemMIBTraps, salixSysSyncAutoRefSwitch=salixSysSyncAutoRefSwitch, salixSysSyncFreeRunAlarm=salixSysSyncFreeRunAlarm, salixSysSyncSecondaryRefState=salixSysSyncSecondaryRefState, salixSysSyncProtect=salixSysSyncProtect, salixSysLastLogErrorMessage=salixSysLastLogErrorMessage, salixSysHsfWorking=salixSysHsfWorking, salixSysSyncRefLineAlarm=salixSysSyncRefLineAlarm, salixSystemCompliances=salixSystemCompliances, salixSysSyncConfiguredActiveRef=salixSysSyncConfiguredActiveRef, salixSysSyncRevertiveSwitch=salixSysSyncRevertiveSwitch, salixSysSyncClockModeAlarm=salixSysSyncClockModeAlarm, salixSysFileSystemUnavailable=salixSysFileSystemUnavailable, salixSystemMIBCompliance=salixSystemMIBCompliance, salixSysRscProtect=salixSysRscProtect, salixSystemMIB=salixSystemMIB, salixSysSyncCurrentActiveRef=salixSysSyncCurrentActiveRef, salixSysSyncInvalidRefLineAlarm=salixSysSyncInvalidRefLineAlarm, salixSysSyncPrimaryRef=salixSysSyncPrimaryRef, salixSysLastLogErrorOid=salixSysLastLogErrorOid, salixSystemRsc=salixSystemRsc, salixSysLastLogErrorNumber=salixSysLastLogErrorNumber, salixSysSyncForcedState=salixSysSyncForcedState, salixSystemGroups=salixSystemGroups, salixSystemMIBTrapPrefix=salixSystemMIBTrapPrefix, salixSystemCompliance=salixSystemCompliance)
