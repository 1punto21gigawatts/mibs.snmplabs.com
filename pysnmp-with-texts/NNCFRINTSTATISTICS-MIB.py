#
# PySNMP MIB module NNCFRINTSTATISTICS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NNCFRINTSTATISTICS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:23:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NncExtIntvlStateType, = mibBuilder.importSymbols("NNC-INTERVAL-STATISTICS-TC-MIB", "NncExtIntvlStateType")
nncExtensions, NncExtCounter64 = mibBuilder.importSymbols("NNCGNI0001-SMI", "nncExtensions", "NncExtCounter64")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
TimeTicks, Integer32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ObjectIdentity, Unsigned32, ModuleIdentity, MibIdentifier, NotificationType, Bits, Counter64, iso, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Integer32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ObjectIdentity", "Unsigned32", "ModuleIdentity", "MibIdentifier", "NotificationType", "Bits", "Counter64", "iso", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
nncFrIntStatistics = ModuleIdentity((1, 3, 6, 1, 4, 1, 123, 3, 30))
if mibBuilder.loadTexts: nncFrIntStatistics.setLastUpdated('9803031200Z')
if mibBuilder.loadTexts: nncFrIntStatistics.setOrganization('Newbridge Networks Corporation')
if mibBuilder.loadTexts: nncFrIntStatistics.setContactInfo('Newbridge Networks Corporation Postal: 600 March Road Kanata, Ontario Canada K2K 2E6 Phone: +1 613 591 3600 Fax: +1 613 591 3680')
if mibBuilder.loadTexts: nncFrIntStatistics.setDescription('This module contains definitions for performance monitoring of Frame Relay Streams')
nncFrIntStatisticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 30, 1))
nncFrIntStatisticsTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 30, 2))
nncFrIntStatisticsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 30, 3))
nncFrIntStatisticsCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 30, 4))
nncFrStrStatCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1), )
if mibBuilder.loadTexts: nncFrStrStatCurrentTable.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentTable.setDescription('The nncFrStrStatCurrentTable contains objects for monitoring the performance of a frame relay stream during the current 1hr interval.')
nncFrStrStatCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: nncFrStrStatCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentEntry.setDescription('An entry in the 1hr current statistics table. Each conceptual row contains current interval statistics for a particular frame relay stream.')
nncFrStrStatCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 1), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentState.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentState.setDescription('The state of the current interval. The object provides a status for those entries which have been reset by the user or have been subject to a wall-clock time change.')
nncFrStrStatCurrentAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncFrStrStatCurrentInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 3), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentInOctets.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentInOctets.setDescription('Number of bytes received on this stream.')
nncFrStrStatCurrentOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 4), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentOutOctets.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentOutOctets.setDescription('Number of bytes transmitted on this stream.')
nncFrStrStatCurrentInUCastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 5), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentInUCastPackets.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentInUCastPackets.setDescription('Number of unerrored, unicast frames received.')
nncFrStrStatCurrentOutUCastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 6), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentOutUCastPackets.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentOutUCastPackets.setDescription('Number of unerrored, unicast frames transmitted.')
nncFrStrStatCurrentInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 7), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentInDiscards.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentInDiscards.setDescription('Number of incoming frames discarded due to these reasons: policing, congestion.')
nncFrStrStatCurrentOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 8), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentOutDiscards.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentOutDiscards.setDescription('Number of outgoing frames discarded due to these reasons: policing, congestion.')
nncFrStrStatCurrentInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 9), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentInErrors.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentInErrors.setDescription('Number of incoming frames discarded due to errors: invalid lengths, non-integral bytes, CRC errors, bad encapsulation, invalid EA, reserved DLCI')
nncFrStrStatCurrentOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 10), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentOutErrors.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentOutErrors.setDescription('Number of outgoing frames discarded due to errors: eg. bad encapsulation.')
nncFrStrStatCurrentSigUserProtErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 11), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentSigUserProtErrors.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentSigUserProtErrors.setDescription('Number of user-side local in-channel signalling protocol errors (protocol discriminator, message type, call reference & mandatory information eleement errors) for this uni/nni stream. If the stream is not perfor- ming user-side procedures, this value is equal to noSuchName.')
nncFrStrStatCurrentSigNetProtErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 12), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentSigNetProtErrors.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentSigNetProtErrors.setDescription('Number of network-side local in-channel signalling protocol errors (protocol discriminator, message type, call reference & mandatory information eleement errors) for this uni/nni stream. If the stream is not perfor- ming network-side procedures, this value is equal to noSuchName.')
nncFrStrStatCurrentSigUserLinkRelErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 13), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentSigUserLinkRelErrors.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentSigUserLinkRelErrors.setDescription('Number of user-side local in-channel signalling link reliability errors (non receipt of Enq/Status messages or invalid sequence numbers in a link integrity verifi- cation information element) for this stream. If the stream is not performing user-side procedures, this value is equal to noSuchName.')
nncFrStrStatCurrentSigNetLinkRelErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 14), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentSigNetLinkRelErrors.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentSigNetLinkRelErrors.setDescription('Number of network-side local in-channel signalling link reliability errors (non receipt of Enq/Status messages or invalid sequence numbers in a link integrity verification information element) for this stream. If the stream is not performing network-side procedures, this value is equal to noSuchName.')
nncFrStrStatCurrentSigUserChanInactive = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 15), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentSigUserChanInactive.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentSigUserChanInactive.setDescription('Number of times the user-side channel was declared inactive (N2 errors in N3 events) for this stream. If the stream is not performing user-side procedures, this value is equal to noSuchName.')
nncFrStrStatCurrentSigNetChanInactive = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 16), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentSigNetChanInactive.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentSigNetChanInactive.setDescription('Number of times the network-side channel was declared inactive (N2 errors in N3 events) for this stream. If the stream is not performing network-side procedures, this value is equal to noSuchName.')
nncFrStrStatCurrentStSCAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentStSCAlarms.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentStSCAlarms.setDescription('Number of one second intervals for which the stream entered the severely congested state.')
nncFrStrStatCurrentStTimeSC = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentStTimeSC.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentStTimeSC.setDescription("Period of time the stream was in the severely congested state during the current interval (expressed in 10's of milliseconds). Divide into the entire length of the interval to get a ratio.")
nncFrStrStatCurrentStMaxDurationRED = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentStMaxDurationRED.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentStMaxDurationRED.setDescription('Longest period of time the stream spent in the Red (severely congested) state, expressed in seconds.')
nncFrStrStatCurrentStMCAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentStMCAlarms.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentStMCAlarms.setDescription('Number of one second intervals for which the stream entered the mildly congested state.')
nncFrStrStatCurrentStTimeMC = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentStTimeMC.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentStTimeMC.setDescription("Period of time the stream was in the mildly congested state during the current interval (expressed in 10's of milliseconds). Divide into the entire length of the interval to get a ratio.")
nncFrStrStatCurrentOutLinkUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 22), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentOutLinkUtilization.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentOutLinkUtilization.setDescription('The percentage utilization on the outgoing link during the current interval.')
nncFrStrStatCurrentInLinkUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 23), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentInLinkUtilization.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentInLinkUtilization.setDescription('The percentage utilization on the incoming link during the current interval.')
nncFrStrStatCurrentInInvdLength = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 24), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentInInvdLength.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentInInvdLength.setDescription('Number of frames discarded because there was no data in the frame, or because the frame exceeded the maximum allowed length.')
nncFrStrStatCurrentStLastErroredDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8388607))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentStLastErroredDLCI.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentStLastErroredDLCI.setDescription('DLCI of the most recent DLC to receive invalid frames on this frame stream.')
nncFrStrStatCurrentInDiscdOctetsCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 26), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentInDiscdOctetsCOS.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentInDiscdOctetsCOS.setDescription('Number of ingress bytes discarded due to receive Class-of-Service procedures.')
nncFrStrStatCurrentInDiscdCOSDESet = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 27), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentInDiscdCOSDESet.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentInDiscdCOSDESet.setDescription('Number of ingress frames discarded due to receive Class-of-Service procedures, in which the DE bit was set.')
nncFrStrStatCurrentInDiscdCOSDEClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 28), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentInDiscdCOSDEClr.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentInDiscdCOSDEClr.setDescription('Number of ingress frames discarded due to receive Class-of-Service procedures, in which the DE bit was not set.')
nncFrStrStatCurrentInDiscdBadEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 29), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentInDiscdBadEncaps.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentInDiscdBadEncaps.setDescription('Number of ingress frames discarded due to having a bad RFC1490 encapsulation header.')
nncFrStrStatCurrentOutDiscdBadEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 30), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentOutDiscdBadEncaps.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentOutDiscdBadEncaps.setDescription('Number of egress frames discarded due to having a bad RFC1483 encapsulation header.')
nncFrStrStatCurrentInDiscdUnsupEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 31), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentInDiscdUnsupEncaps.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentInDiscdUnsupEncaps.setDescription('Number of ingress frames discarded due to having an unsupported RFC1490 encapsulation header.')
nncFrStrStatCurrentOutDiscdUnsupEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 32), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentOutDiscdUnsupEncaps.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentOutDiscdUnsupEncaps.setDescription('Number of egress frames discarded due to having an unsupported RFC1483 encapsulation header.')
nncFrStrStatCurrentOutDiscdDESet = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 33), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentOutDiscdDESet.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentOutDiscdDESet.setDescription('Number of egress frames discarded due to transmit congestion procedures, in which the DE bit was set.')
nncFrStrStatCurrentOutDiscdDEClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 34), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentOutDiscdDEClr.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentOutDiscdDEClr.setDescription('Number of egress frames discarded due to transmit congestion procedures, in which the DE bit was not set.')
nncFrStrStatCurrentInDiscdDESet = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 35), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentInDiscdDESet.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentInDiscdDESet.setDescription('Number of ingress frames discarded due to receive congestion procedures, in which the DE bit was set.')
nncFrStrStatCurrentInDiscdDEClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 36), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentInDiscdDEClr.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentInDiscdDEClr.setDescription('Number of ingress frames discarded due to receive congestion procedures, in which the DE bit was not set.')
nncFrStrStatCurrentStLMSigInvldField = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 37), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentStLMSigInvldField.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentStLMSigInvldField.setDescription('Number of Status signalling frames with incorrect values for the Unnumbered Information Frame field, Protocol Discrimator field, or Call Reference Field.')
nncFrStrStatCurrentStLMSigUnsupMsgType = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 38), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentStLMSigUnsupMsgType.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentStLMSigUnsupMsgType.setDescription('Number of Status signalling frames that are not a Status or Status Enquiry messsage (Unsupported message type).')
nncFrStrStatCurrentStLMSigInvldEID = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 39), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentStLMSigInvldEID.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentStLMSigInvldEID.setDescription('Number of Status signalling frames with an IEID that is not a Report Type IEID, Keep Alive Sequence IEID, or a PVC Status IEID.')
nncFrStrStatCurrentStLMSigInvldIELen = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 40), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentStLMSigInvldIELen.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentStLMSigInvldIELen.setDescription('Number of Status signalling frames with an IE length field size that does not conform with the Frame Relay status signalling protocol.')
nncFrStrStatCurrentStLMSigInvldRepType = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 41), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentStLMSigInvldRepType.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentStLMSigInvldRepType.setDescription('Number of Status signalling frames with a Report Type IE that were not a Full Report Type or a Keep Alive Confirmation.')
nncFrStrStatCurrentStLMSigFrmWithNoIEs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 42), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentStLMSigFrmWithNoIEs.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentStLMSigFrmWithNoIEs.setDescription('Number of Status signalling frames that terminate before the IE appears.')
nncFrStrStatCurrentStUserSequenceErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 43), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentStUserSequenceErrs.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentStUserSequenceErrs.setDescription('Number of status signalling frames received with a Last Received Sequence number that is inconsistent with the expected value, the last transmitted Current Sequence Number. If the stream is not performing user-side procedures, this value is equal to noSuchName.')
nncFrStrStatCurrentStNetSequenceErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 44), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentStNetSequenceErrs.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentStNetSequenceErrs.setDescription('Number of status signalling frames received with a Last Received Sequence number that is inconsistent with the expected value, the last transmitted Current Sequence Number. If the stream is not performing network-side procedures, this value is equal to noSuchName.')
nncFrStrStatCurrentStLMUTimeoutsnT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 45), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentStLMUTimeoutsnT1.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentStLMUTimeoutsnT1.setDescription('Number of times the link integrity verification interval has been exceeded without receiving a Status message. If the stream is not performing user-side procedures, this value is equal to noSuchName.')
nncFrStrStatCurrentStLMUStatusMsgsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 46), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentStLMUStatusMsgsRcvd.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentStLMUStatusMsgsRcvd.setDescription('Number of Status messages received. If the stream is not performing user-side procedures, this value is equal to noSuchName.')
nncFrStrStatCurrentStLMUStatusENQMsgsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 47), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentStLMUStatusENQMsgsSent.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentStLMUStatusENQMsgsSent.setDescription('Number of Status Enquiry messages sent. If the stream is not performing user-side procedures, this value is equal to noSuchName.')
nncFrStrStatCurrentStLMUAsyncStatusRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 48), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentStLMUAsyncStatusRcvd.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentStLMUAsyncStatusRcvd.setDescription('Number of asynchronous Update Status messages received. If the stream is not performing user-side procedures, this value is equal to noSuchName.')
nncFrStrStatCurrentStLMNTimeoutsnT2 = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 49), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentStLMNTimeoutsnT2.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentStLMNTimeoutsnT2.setDescription('Number of times the polling verification interval was exceeded without receivung a Keep Alive Sequence. If the stream is not performing network-side procedures, this value is equal to noSuchName.')
nncFrStrStatCurrentStLMNStatusMsgsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 50), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentStLMNStatusMsgsSent.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentStLMNStatusMsgsSent.setDescription('Number of Status messages sent. If the stream is not performing network-side procedures, this value is equal to noSuchName.')
nncFrStrStatCurrentStLMNStatusENQMsgsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 51), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentStLMNStatusENQMsgsRcvd.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentStLMNStatusENQMsgsRcvd.setDescription('Number of Status Enquiry messages received. If the stream is not performing network-side procedures, this value is equal to noSuchName.')
nncFrStrStatCurrentStLMNAsyncStatusSent = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 52), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentStLMNAsyncStatusSent.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentStLMNAsyncStatusSent.setDescription('Number of asynchronous Update Status messages transmitted. If the stream is not performing network-side procedures, this value is equal to noSuchName.')
nncFrStrStatCurrentInCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 53), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentInCRCErrors.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentInCRCErrors.setDescription('Number of frames with an incorrect CRC-16 value.')
nncFrStrStatCurrentInNonIntegral = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 54), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentInNonIntegral.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentInNonIntegral.setDescription('Number of frames with a non-integral number of octets between the delimiting HDLC flags.')
nncFrStrStatCurrentInReservedDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 55), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentInReservedDLCI.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentInReservedDLCI.setDescription('Number of frames with a DLCI that cannot be assigned to user connections.')
nncFrStrStatCurrentInInvldEA = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 56), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentInInvldEA.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentInInvldEA.setDescription('Number of frames with the EA (extended address) bit incorrectly set.')
nncFrStrStatCurrentStFrmTooSmall = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 57), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentStFrmTooSmall.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentStFrmTooSmall.setDescription('Number of frames that are smaller than the allowed minimum size.')
nncFrStrStatCurrentInAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 58), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentInAborts.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentInAborts.setDescription('Number of aborted frames.')
nncFrStrStatCurrentInSumOfDisagremnts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 59), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentInSumOfDisagremnts.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentInSumOfDisagremnts.setDescription('Total number of frames discarded because: the frame relay UNI or ICI was unavailable to accept frame traffic, the frame had a DLCI not available for end-user connections, the DLCI was inactive, the frame exceeded the maximum configured frame length (but its length was legal within the frame relay protocol), the frame violated the configured address field size (but had a legal address field size with the frame relay protocol), or was an unexpected status signalling frame.')
nncFrStrStatCurrentInOverRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 60), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentInOverRuns.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentInOverRuns.setDescription('Number of times the receiver was forced to overrun.')
nncFrStrStatCurrentOutUnderRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 61), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentOutUnderRuns.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentOutUnderRuns.setDescription('Number of times the transmitter was forced to underrun.')
nncFrStrStatCurrentStIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentStIntervalDuration.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentStIntervalDuration.setDescription('Duration of the statistics accumulation interval.')
nncFrStrStatCurrentBestEffortPeakDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 63), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentBestEffortPeakDelay.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentBestEffortPeakDelay.setDescription('The largest delay experienced by any frame that was transmitted on the stream in service category Best Effort.')
nncFrStrStatCurrentCommittedPeakDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 64), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentCommittedPeakDelay.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentCommittedPeakDelay.setDescription('The largest delay experienced by any frame that was transmitted on the stream in service category: Committed Throughptut.')
nncFrStrStatCurrentLowDelayPeakDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 65), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentLowDelayPeakDelay.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentLowDelayPeakDelay.setDescription('The largest delay experienced by any frame that was transmitted on the stream in service category: Low Delay.')
nncFrStrStatCurrentRealTimePeakDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 66), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentRealTimePeakDelay.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentRealTimePeakDelay.setDescription('The largest delay experienced by any frame that was transmitted on the stream in service category Real Time.')
nncFrStrStatCurrentBestEffortAccDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 67), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentBestEffortAccDelay.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentBestEffortAccDelay.setDescription('The accumulated delay experienced by all frames in a stream transmitted in service category Best Effort. Combined with the Out Ucast Packets for service category Best Effort, the average delay per frame can be calculated.')
nncFrStrStatCurrentCommittedAccDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 68), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentCommittedAccDelay.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentCommittedAccDelay.setDescription('The accumulated delay experienced by all frames in a stream transmitted in service category Committed Throughput. Combined with the Out Ucast Packets for service category Committed Throughput, the average delay per frame can be calculated.')
nncFrStrStatCurrentLowDelayAccDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 69), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentLowDelayAccDelay.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentLowDelayAccDelay.setDescription('The accumulated delay experienced by all frames in a stream transmitted in service category Low Delay. Combined with the Out Ucast Packets for service category Low Delay, the average delay per frame can be calculated.')
nncFrStrStatCurrentRealTimeAccDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 70), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentRealTimeAccDelay.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentRealTimeAccDelay.setDescription('The accumulated delay experienced by all frames in a stream transmitted in service category Real Time. Combined with the Out Ucast Packets for service category Real Time, the average delay per frame can be calculated.')
nncFrStrStatCurrentBestEffortOutUCastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 71), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentBestEffortOutUCastPackets.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentBestEffortOutUCastPackets.setDescription('Number of unerrored, unicast frames transmitted in service category Best Effort.')
nncFrStrStatCurrentCommittedOutUCastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 72), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentCommittedOutUCastPackets.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentCommittedOutUCastPackets.setDescription('Number of unerrored, unicast frames transmitted in service category Committed Throughput.')
nncFrStrStatCurrentLowDelayOutUCastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 73), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentLowDelayOutUCastPackets.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentLowDelayOutUCastPackets.setDescription('Number of unerrored, unicast frames transmitted in service category Low Delay.')
nncFrStrStatCurrentRealTimeOutUCastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 74), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentRealTimeOutUCastPackets.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentRealTimeOutUCastPackets.setDescription('Number of unerrored, unicast frames transmitted in service category Real Time.')
nncFrStrStatCurrentBestEffortUCastPacketsDEClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 75), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentBestEffortUCastPacketsDEClr.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentBestEffortUCastPacketsDEClr.setDescription('Number of unerrored, unicast frames with the DE bit not set transmitted in service category Best Effort.')
nncFrStrStatCurrentCommittedUCastPacketsDEClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 76), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentCommittedUCastPacketsDEClr.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentCommittedUCastPacketsDEClr.setDescription('Number of unerrored, unicast frames with the DE bit not set transmitted in service category Committed Throughput.')
nncFrStrStatCurrentLowDelayUCastPacketsDEClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 77), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentLowDelayUCastPacketsDEClr.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentLowDelayUCastPacketsDEClr.setDescription('Number of unerrored, unicast frames with the DE bit not set transmitted in service category Low Delay.')
nncFrStrStatCurrentRealTimeUCastPacketsDEClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 78), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentRealTimeUCastPacketsDEClr.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentRealTimeUCastPacketsDEClr.setDescription('Number of unerrored, unicast frames with the DE bit not set, transmitted in service category Real Time.')
nncFrStrStatCurrentBestEffortDiscdDEClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 79), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentBestEffortDiscdDEClr.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentBestEffortDiscdDEClr.setDescription('Number of unerrored, unicast frames with the DE bit not set, discarded by QoS procedures in service category Best Effort.')
nncFrStrStatCurrentCommittedDiscdDEClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 80), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentCommittedDiscdDEClr.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentCommittedDiscdDEClr.setDescription('Number of unerrored, unicast frames with the DE bit not set, discarded by QoS procedures in service category Committed Throughput.')
nncFrStrStatCurrentLowDelayDiscdDEClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 81), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentLowDelayDiscdDEClr.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentLowDelayDiscdDEClr.setDescription('Number of unerrored, unicast frames with the DE bit not set, discarded by QoS procedures in service category Low Delay.')
nncFrStrStatCurrentRealTimeDiscdDEClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 1, 1, 82), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatCurrentRealTimeDiscdDEClr.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentRealTimeDiscdDEClr.setDescription('Number of unerrored, unicast frames with the DE bit not set, discarded by QoS procedures in service category Real Time.')
nncFrStrStatIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2), )
if mibBuilder.loadTexts: nncFrStrStatIntervalTable.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalTable.setDescription('The nncFrStrStatIntervalTable contains objects for monitoring the performance of a frame relay stream over M historical intervals of 1hr each.')
nncFrStrStatIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalNumber"))
if mibBuilder.loadTexts: nncFrStrStatIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalEntry.setDescription('An entry in the 1hr interval statistics table. Each conceptual row contains interval statistics for a par- ticular interval on a particular stream.')
nncFrStrStatIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: nncFrStrStatIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalNumber.setDescription('The interval number (N) of the statistics in this row.')
nncFrStrStatIntervalState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 2), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalState.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalState.setDescription('The state of the interval represented by this row. The object provides a status for those entries which have been reset by the user or subject to a wall-clock time change.')
nncFrStrStatIntervalAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96)))
if mibBuilder.loadTexts: nncFrStrStatIntervalAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncFrStrStatIntervalInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 4), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalInOctets.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalInOctets.setDescription('Number of bytes received on this stream.')
nncFrStrStatIntervalOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 5), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalOutOctets.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalOutOctets.setDescription('Number of bytes transmitted on this stream.')
nncFrStrStatIntervalInUCastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 6), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalInUCastPackets.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalInUCastPackets.setDescription('Number of unerrored, unicast frames received.')
nncFrStrStatIntervalOutUCastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 7), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalOutUCastPackets.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalOutUCastPackets.setDescription('Number of unerrored, unicast frames transmitted.')
nncFrStrStatIntervalInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 8), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalInDiscards.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalInDiscards.setDescription('Number of incoming frames discarded due to these reasons: policing, congestion.')
nncFrStrStatIntervalOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 9), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalOutDiscards.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalOutDiscards.setDescription('Number of outgoing frames discarded due to these reasons: policing, congestion.')
nncFrStrStatIntervalInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 10), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalInErrors.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalInErrors.setDescription('Number of incoming frames discarded due to errors: eg. invalid lengths, non-integral bytes...')
nncFrStrStatIntervalOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 11), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalOutErrors.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalOutErrors.setDescription('Number of outgoing frames discarded due to errors: eg. bad encapsulation.')
nncFrStrStatIntervalSigUserProtErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 12), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalSigUserProtErrors.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalSigUserProtErrors.setDescription('Number of user-side local in-channel signalling protocol errors (protocol discriminator, message type, call reference & mandatory information eleement errors) for this uni/nni stream. If the stream is not perfor- ming user-side procedures, this value is equal to noSuchName.')
nncFrStrStatIntervalSigNetProtErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 13), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalSigNetProtErrors.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalSigNetProtErrors.setDescription('Number of network-side local in-channel signalling protocol errors (protocol discriminator, message type, call reference & mandatory information eleement errors) for this uni/nni stream. If the stream is not perfor- ming network-side procedures, this value is equal to noSuchName.')
nncFrStrStatIntervalSigUserLinkRelErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 14), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalSigUserLinkRelErrors.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalSigUserLinkRelErrors.setDescription('Number of user-side local in-channel signalling link reliability errors (non receipt of Enq/Status messages or invalid sequence numbers in a link integrity verifi- cation information element) for this stream. If the stream is not performing user-side procedures, this value is equal to noSuchName.')
nncFrStrStatIntervalSigNetLinkRelErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 15), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalSigNetLinkRelErrors.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalSigNetLinkRelErrors.setDescription('Number of network-side local in-channel signalling link reliability errors (non receipt of Enq/Status messages or invalid sequence numbers in a link integrity verification information element) for this stream. If the stream is not performing network-side procedures, this value is equal to noSuchName.')
nncFrStrStatIntervalSigUserChanInactive = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 16), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalSigUserChanInactive.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalSigUserChanInactive.setDescription('Number of times the user-side channel was declared inactive (N2 errors in N3 events) for this stream. If the stream is not performing user-side procedures, this value is equal to noSuchName.')
nncFrStrStatIntervalSigNetChanInactive = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 17), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalSigNetChanInactive.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalSigNetChanInactive.setDescription('Number of times the network-side channel was declared inactive (N2 errors in N3 events) for this stream. If the stream is not performing network-side procedures, this value is equal to noSuchName.')
nncFrStrStatIntervalStSCAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalStSCAlarms.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalStSCAlarms.setDescription('Number of one second intervals for which the stream entered the severely congested state.')
nncFrStrStatIntervalStTimeSC = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalStTimeSC.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalStTimeSC.setDescription("Period of time the stream was in the severely congested state during the designated interval (expressed in 10's of milliseconds). Divide into the entire length of the interval to get a ratio.")
nncFrStrStatIntervalStMaxDurationRED = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalStMaxDurationRED.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalStMaxDurationRED.setDescription('Longest period of time the stream spent in the Red (severely congested) state, expressed in seconds.')
nncFrStrStatIntervalStMCAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalStMCAlarms.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalStMCAlarms.setDescription('Number of one second intervals for which the stream entered the mildly congested state.')
nncFrStrStatIntervalStTimeMC = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalStTimeMC.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalStTimeMC.setDescription("Period of time the stream was in the mildly congested state during the designated interval (expressed in 10's of milliseconds). Divide into the entire length of the interval to get a ratio.")
nncFrStrStatIntervalOutLinkUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 23), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalOutLinkUtilization.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalOutLinkUtilization.setDescription('The percentage utilization on the outgoing link during the designated interval.')
nncFrStrStatIntervalInLinkUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 24), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalInLinkUtilization.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalInLinkUtilization.setDescription('The percentage utilization on the incoming link during the designated interval.')
nncFrStrStatIntervalInInvdLength = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 25), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalInInvdLength.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalInInvdLength.setDescription('Number of frames discarded because there was no data in the frame, or because the frame exceeded the maximum allowed length.')
nncFrStrStatIntervalStLastErroredDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8388607))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalStLastErroredDLCI.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalStLastErroredDLCI.setDescription('DLCI of the most recent DLC to receive invalid frames on this frame stream.')
nncFrStrStatIntervalInDiscdOctetsCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 27), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalInDiscdOctetsCOS.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalInDiscdOctetsCOS.setDescription('Number of ingress bytes discarded due to receive Class-of-Service procedures.')
nncFrStrStatIntervalInDiscdCOSDESet = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 28), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalInDiscdCOSDESet.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalInDiscdCOSDESet.setDescription('Number of ingress frames discarded due to receive Class-of-Service procedures, in which the DE bit was set.')
nncFrStrStatIntervalInDiscdCOSDEClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 29), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalInDiscdCOSDEClr.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalInDiscdCOSDEClr.setDescription('Number of ingress frames discarded due to receive Class-of-Service procedures, in which the DE bit was not set.')
nncFrStrStatIntervalInDiscdBadEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 30), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalInDiscdBadEncaps.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalInDiscdBadEncaps.setDescription('Number of ingress frames discarded due to having a bad RFC1490 encapsulation header.')
nncFrStrStatIntervalOutDiscdBadEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 31), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalOutDiscdBadEncaps.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalOutDiscdBadEncaps.setDescription('Number of egress frames discarded due to having a bad RFC1483 encapsulation header.')
nncFrStrStatIntervalInDiscdUnsupEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 32), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalInDiscdUnsupEncaps.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalInDiscdUnsupEncaps.setDescription('Number of ingress frames discarded due to having an unsupported RFC1490 encapsulation header.')
nncFrStrStatIntervalOutDiscdUnsupEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 33), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalOutDiscdUnsupEncaps.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalOutDiscdUnsupEncaps.setDescription('Number of egress frames discarded due to having an unsupported RFC1483 encapsulation header.')
nncFrStrStatIntervalOutDiscdDESet = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 34), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalOutDiscdDESet.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalOutDiscdDESet.setDescription('Number of egress frames discarded due to transmit congestion procedures, in which the DE bit was set.')
nncFrStrStatIntervalOutDiscdDEClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 35), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalOutDiscdDEClr.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalOutDiscdDEClr.setDescription('Number of egress frames discarded due to transmit congestion procedures, in which the DE bit was not set.')
nncFrStrStatIntervalInDiscdDESet = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 36), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalInDiscdDESet.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalInDiscdDESet.setDescription('Number of ingress frames discarded due to receive congestion procedures, in which the DE bit was set.')
nncFrStrStatIntervalInDiscdDEClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 37), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalInDiscdDEClr.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalInDiscdDEClr.setDescription('Number of ingress frames discarded due to receive congestion procedures, in which the DE bit was not set.')
nncFrStrStatIntervalStLMSigInvldField = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 38), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalStLMSigInvldField.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalStLMSigInvldField.setDescription('Number of Status signalling frames with incorrect values for the Unnumbered Information Frame field, Protocol Discriminator field, or Call Reference Field.')
nncFrStrStatIntervalStLMSigUnsupMsgType = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 39), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalStLMSigUnsupMsgType.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalStLMSigUnsupMsgType.setDescription('Number of Status signalling frames that are not a Status or Status Enquiry messsage (Unsupported message type).')
nncFrStrStatIntervalStLMSigInvldEID = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 40), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalStLMSigInvldEID.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalStLMSigInvldEID.setDescription('Number of Status signalling frames with an IEID that is not a Report Type IEID, Keep Alive Sequence IEID, or a PVC Status IEID.')
nncFrStrStatIntervalStLMSigInvldIELen = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 41), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalStLMSigInvldIELen.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalStLMSigInvldIELen.setDescription('Number of Status signalling frames with an IE length field size that does not conform with the Frame Relay status signalling protocol.')
nncFrStrStatIntervalStLMSigInvldRepType = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 42), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalStLMSigInvldRepType.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalStLMSigInvldRepType.setDescription('Number of Status signalling frames with a Report Type IE that were not a Full Report Type or a Keep Alive Confirmation.')
nncFrStrStatIntervalStLMSigFrmWithNoIEs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 43), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalStLMSigFrmWithNoIEs.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalStLMSigFrmWithNoIEs.setDescription('Number of Status signalling frames that terminate before the IE appears.')
nncFrStrStatIntervalStUserSequenceErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 44), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalStUserSequenceErrs.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalStUserSequenceErrs.setDescription('Number of status signalling frames received with a Last Received Sequence number that is inconsistent with the expected value, the last transmitted Interval Sequence Number. If the stream is not performing user-side procedures, this value is equal to noSuchName.')
nncFrStrStatIntervalStNetSequenceErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 45), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalStNetSequenceErrs.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalStNetSequenceErrs.setDescription('Number of status signalling frames received with a Last Received Sequence number that is inconsistent with the expected value, the last transmitted Interval Sequence Number. If the stream is not performing network-side procedures, this value is equal to noSuchName.')
nncFrStrStatIntervalStLMUTimeoutsnT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 46), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalStLMUTimeoutsnT1.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalStLMUTimeoutsnT1.setDescription('Number of times the link integrity verification interval has been exceeded without receiving a Status message. If the stream is not performing user-side procedures, this value is equal to noSuchName.')
nncFrStrStatIntervalStLMUStatusMsgsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 47), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalStLMUStatusMsgsRcvd.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalStLMUStatusMsgsRcvd.setDescription('Number of Status messages received. If the stream is not performing user-side procedures, this value is equal to noSuchName.')
nncFrStrStatIntervalStLMUStatusENQMsgsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 48), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalStLMUStatusENQMsgsSent.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalStLMUStatusENQMsgsSent.setDescription('Number of Status Enquiry messages sent. If the stream is not performing user-side procedures, this value is equal to noSuchName.')
nncFrStrStatIntervalStLMUAsyncStatusRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 49), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalStLMUAsyncStatusRcvd.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalStLMUAsyncStatusRcvd.setDescription('Number of asynchronous Update Status messages received. If the stream is not performing user-side procedures, this value is equal to noSuchName.')
nncFrStrStatIntervalStLMNTimeoutsnT2 = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 50), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalStLMNTimeoutsnT2.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalStLMNTimeoutsnT2.setDescription('Number of times the polling verification interval was exceeded without receivung a Keep Alive Sequence. If the stream is not performing network-side procedures, this value is equal to noSuchName.')
nncFrStrStatIntervalStLMNStatusMsgsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 51), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalStLMNStatusMsgsSent.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalStLMNStatusMsgsSent.setDescription('Number of Status messages sent. If the stream is not performing network-side procedures, this value is equal to noSuchName.')
nncFrStrStatIntervalStLMNStatusENQMsgsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 52), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalStLMNStatusENQMsgsRcvd.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalStLMNStatusENQMsgsRcvd.setDescription('Number of Status Enquiry messages received. If the stream is not performing network-side procedures, this value is equal to noSuchName.')
nncFrStrStatIntervalStLMNAsyncStatusSent = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 53), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalStLMNAsyncStatusSent.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalStLMNAsyncStatusSent.setDescription('Number of asynchronous Update Status messages transmitted. If the stream is not performing network-side procedures, this value is equal to noSuchName.')
nncFrStrStatIntervalInCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 54), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalInCRCErrors.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalInCRCErrors.setDescription('Number of frames with an incorrect CRC-16 value.')
nncFrStrStatIntervalInNonIntegral = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 55), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalInNonIntegral.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalInNonIntegral.setDescription('Number of frames with a non-integral number of octets between the delimiting HDLC flags.')
nncFrStrStatIntervalInReservedDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 56), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalInReservedDLCI.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalInReservedDLCI.setDescription('Number of frames with a DLCI that cannot be assigned to user connections.')
nncFrStrStatIntervalInInvldEA = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 57), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalInInvldEA.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalInInvldEA.setDescription('Number of frames with the EA (extended address) bit incorrectly set.')
nncFrStrStatIntervalStFrmTooSmall = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 58), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalStFrmTooSmall.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalStFrmTooSmall.setDescription('Number of frames that are smaller than the allowed minimum size.')
nncFrStrStatIntervalInAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 59), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalInAborts.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalInAborts.setDescription('Number of aborted frames.')
nncFrStrStatIntervalInSumOfDisagremnts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 60), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalInSumOfDisagremnts.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalInSumOfDisagremnts.setDescription('Total number of frames discarded because: the frame relay UNI or ICI was unavailable to accept frame traffic, the frame had a DLCI not available for end-user connections, the DLCI was inactive, the frame exceeded the maximum configured frame length (but its length was legal within the frame relay protocol), the frame violated the configured address field size (but had a legal address field size with the frame relay protocol), or was an unexpected status signalling frame.')
nncFrStrStatIntervalInOverRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 61), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalInOverRuns.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalInOverRuns.setDescription('Number of times the receiver was forced to overrun.')
nncFrStrStatIntervalOutUnderRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 62), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalOutUnderRuns.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalOutUnderRuns.setDescription('Number of times the transmitter was forced to underrun.')
nncFrStrStatIntervalStIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalStIntervalDuration.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalStIntervalDuration.setDescription('Duration of the statistics accumulation interval.')
nncFrStrStatIntervalBestEffortPeakDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 64), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalBestEffortPeakDelay.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalBestEffortPeakDelay.setDescription('The largest delay experienced by any frame that was transmitted on the stream in service category Best Effort.')
nncFrStrStatIntervalCommittedPeakDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 65), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalCommittedPeakDelay.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalCommittedPeakDelay.setDescription('The largest delay experienced by any frame that was transmitted on the stream in service category: Committed Throughptut.')
nncFrStrStatIntervalLowDelayPeakDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 66), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalLowDelayPeakDelay.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalLowDelayPeakDelay.setDescription('The largest delay experienced by any frame that was transmitted on the stream in service category: Low Delay.')
nncFrStrStatIntervalRealTimePeakDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 67), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalRealTimePeakDelay.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalRealTimePeakDelay.setDescription('The largest delay experienced by any frame that was transmitted on the stream in service category Real Time.')
nncFrStrStatIntervalBestEffortAccDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 68), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalBestEffortAccDelay.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalBestEffortAccDelay.setDescription('The accumulated delay experienced by all frames in a stream transmitted in service category Best Effort. Combined with the Out Ucast Packets for service category Best Effort, the average delay per frame can be calculated.')
nncFrStrStatIntervalCommittedAccDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 69), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalCommittedAccDelay.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalCommittedAccDelay.setDescription('The accumulated delay experienced by all frames in a stream transmitted in service category Committed Throughput. Combined with the Out Ucast Packets for service category Committed Throughput, the average delay per frame can be calculated.')
nncFrStrStatIntervalLowDelayAccDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 70), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalLowDelayAccDelay.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalLowDelayAccDelay.setDescription('The accumulated delay experienced by all frames in a stream transmitted in service category Low Delay. Combined with the Out Ucast Packets for service category Low Delay, the average delay per frame can be calculated.')
nncFrStrStatIntervalRealTimeAccDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 71), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalRealTimeAccDelay.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalRealTimeAccDelay.setDescription('The accumulated delay experienced by all frames in a stream transmitted in service category Real Time. Combined with the Out Ucast Packets for service category Real Time, the average delay per frame can be calculated.')
nncFrStrStatIntervalBestEffortOutUCastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 72), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalBestEffortOutUCastPackets.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalBestEffortOutUCastPackets.setDescription('Number of unerrored, unicast frames transmitted in service category Best Effort.')
nncFrStrStatIntervalCommittedOutUCastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 73), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalCommittedOutUCastPackets.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalCommittedOutUCastPackets.setDescription('Number of unerrored, unicast frames transmitted in service category Committed Throughput.')
nncFrStrStatIntervalLowDelayOutUCastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 74), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalLowDelayOutUCastPackets.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalLowDelayOutUCastPackets.setDescription('Number of unerrored, unicast frames transmitted in service category Low Delay.')
nncFrStrStatIntervalRealTimeOutUCastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 75), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalRealTimeOutUCastPackets.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalRealTimeOutUCastPackets.setDescription('Number of unerrored, unicast frames transmitted in service category Real Time.')
nncFrStrStatIntervalBestEffortUCastPacketsDEClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 76), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalBestEffortUCastPacketsDEClr.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalBestEffortUCastPacketsDEClr.setDescription('Number of unerrored, unicast frames with the DE bit not set transmitted in service category Best Effort.')
nncFrStrStatIntervalCommittedUCastPacketsDEClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 77), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalCommittedUCastPacketsDEClr.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalCommittedUCastPacketsDEClr.setDescription('Number of unerrored, unicast frames with the DE bit not set transmitted in service category Committed Throughput.')
nncFrStrStatIntervalLowDelayUCastPacketsDEClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 78), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalLowDelayUCastPacketsDEClr.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalLowDelayUCastPacketsDEClr.setDescription('Number of unerrored, unicast frames with the DE bit not set transmitted in service category Low Delay.')
nncFrStrStatIntervalRealTimeUCastPacketsDEClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 79), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalRealTimeUCastPacketsDEClr.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalRealTimeUCastPacketsDEClr.setDescription('Number of unerrored, unicast frames with the DE bit not set, transmitted in service category Real Time.')
nncFrStrStatIntervalBestEffortDiscdDEClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 80), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalBestEffortDiscdDEClr.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalBestEffortDiscdDEClr.setDescription('Number of unerrored, unicast frames with the DE bit not set, discarded by QoS procedures in service category Best Effort.')
nncFrStrStatIntervalCommittedDiscdDEClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 81), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalCommittedDiscdDEClr.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalCommittedDiscdDEClr.setDescription('Number of unerrored, unicast frames with the DE bit not set, discarded by QoS procedures in service category Committed Throughput.')
nncFrStrStatIntervalLowDelayDiscdDEClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 82), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalLowDelayDiscdDEClr.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalLowDelayDiscdDEClr.setDescription('Number of unerrored, unicast frames with the DE bit not set, discarded by QoS procedures in service category Low Delay.')
nncFrStrStatIntervalRealTimeDiscdDEClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 2, 1, 83), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrStatIntervalRealTimeDiscdDEClr.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalRealTimeDiscdDEClr.setDescription('Number of unerrored, unicast frames with the DE bit not set, discarded by QoS procedures in service category Real Time.')
nncFrPVCEndptStatCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 3), )
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentTable.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentTable.setDescription('The nncFrPVCEndptStatCurrentTable contains objects for monitoring performance of a frame relay endpoint during the current 1hr interval.')
nncFrPVCEndptStatCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatCurrentDLCINumber"))
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentEntry.setDescription('An entry in the 1hr current statistics table. Each conceptual row contains current interval statistics for a particular PVC Endpoint.')
nncFrPVCEndptStatCurrentDLCINumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024)))
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentDLCINumber.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentDLCINumber.setDescription('The DLCI number of the stream to which statistics in this row belong.')
nncFrPVCEndptStatCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 3, 1, 2), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentState.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentState.setDescription('The state of the current interval. The object provides a status for those entries which have been reset by the user or have been subject to a wall-clock time change.')
nncFrPVCEndptStatCurrentAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96)))
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncFrPVCEndptStatCurrentInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 3, 1, 4), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentInFrames.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentInFrames.setDescription('Number of frames received on this PVC Endpoint.')
nncFrPVCEndptStatCurrentOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 3, 1, 5), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentOutFrames.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentOutFrames.setDescription('Number of frames transmitted on this PVC Endpoint.')
nncFrPVCEndptStatCurrentInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 3, 1, 6), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentInOctets.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentInOctets.setDescription('Number of bytes received on this PVC Endpoint.')
nncFrPVCEndptStatCurrentOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 3, 1, 7), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentOutOctets.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentOutOctets.setDescription('Number of bytes transmitted on this PVC Endpoint.')
nncFrPVCEndptStatCurrentInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 3, 1, 8), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentInDiscards.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentInDiscards.setDescription('Number of frames received by the network (ingress) that were discarded due to traffic enforcement for this PVC Endpoint.')
nncFrPVCEndptStatCurrentOutExcessFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 3, 1, 9), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentOutExcessFrames.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentOutExcessFrames.setDescription('Number of frames transmitted by the network (egress) for this PVC Endpoint that were treated as excess traffic (the DE bit may be set to one).')
nncFrPVCEndptStatCurrentInDEFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 3, 1, 10), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentInDEFrames.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentInDEFrames.setDescription('Number of frames received by the network (ingress) with the DE bit set to (1) for the PVC Endpoint.')
nncFrPVCEndptStatCurrentInCosTagDeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 3, 1, 11), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentInCosTagDeFrames.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentInCosTagDeFrames.setDescription('Number of frames received by the network (ingress) for this PVC Endpoint that were policed from normal to excess traffic (the DE bit was set to one) and transmitted.')
nncFrPVCEndptStatCurrentInOctetsDESet = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 3, 1, 12), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentInOctetsDESet.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentInOctetsDESet.setDescription('Number of bytes received on this PVC Endpoint with the DE bit set.')
nncFrPVCEndptStatCurrentInFramesBECNSet = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 3, 1, 13), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentInFramesBECNSet.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentInFramesBECNSet.setDescription('Number of frames received by the network (ingress) for this PVC Endpoint that had the BECN bit set.')
nncFrPVCEndptStatCurrentInFramesFECNSet = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 3, 1, 14), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentInFramesFECNSet.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentInFramesFECNSet.setDescription('Number of frames received by the network (ingress) for this PVC Endpoint that had the FECN bit set.')
nncFrPVCEndptStatCurrentInInvdLength = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 3, 1, 15), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentInInvdLength.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentInInvdLength.setDescription('Number of frames received by the network (ingress) for this PVC Endpoint that were discarded because the frame had no data, or the data exceeded the maximum allowed length.')
nncFrPVCEndptStatCurrentOutOctetsDESet = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 3, 1, 16), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentOutOctetsDESet.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentOutOctetsDESet.setDescription('Number of bytes transmitted on this PVC Endpoint with the DE bit set.')
nncFrPVCEndptStatCurrentOutFramesBECNSet = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 3, 1, 17), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentOutFramesBECNSet.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentOutFramesBECNSet.setDescription('Number of frames transmitted by the network (egress) for this PVC Endpoint that had the BECN bit set.')
nncFrPVCEndptStatCurrentOutFramesFECNSet = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 3, 1, 18), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentOutFramesFECNSet.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentOutFramesFECNSet.setDescription('Number of frames transmitted by the network (egress) for this PVC Endpoint that had the FECN bit set.')
nncFrPVCEndptStatCurrentOutFramesInRed = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 3, 1, 19), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentOutFramesInRed.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentOutFramesInRed.setDescription('Number of frames transmitted by the network (egress) for this PVC Endpoint when the frame stream was in Red State.')
nncFrPVCEndptStatCurrentInDiscdOctetsCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 3, 1, 20), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentInDiscdOctetsCOS.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentInDiscdOctetsCOS.setDescription('Number of bytes discarded because of receive class-of-service enforcement on the PVC Endpoint.')
nncFrPVCEndptStatCurrentInDiscdDESet = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 3, 1, 21), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentInDiscdDESet.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentInDiscdDESet.setDescription('Number of frames discarded because of receive congestion procedures, in which the DE bit was set.')
nncFrPVCEndptStatCurrentInDiscdDEClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 3, 1, 22), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentInDiscdDEClr.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentInDiscdDEClr.setDescription('Number of frames discarded because of receive congestion procedures, in which the DE bit was not set.')
nncFrPVCEndptStatCurrentInDiscdBadEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 3, 1, 23), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentInDiscdBadEncaps.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentInDiscdBadEncaps.setDescription('Number of frames discarded on this PVC Endpoint because of a bad receive RFC1490 encapsulation header.')
nncFrPVCEndptStatCurrentInDiscdUnsupEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 3, 1, 24), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentInDiscdUnsupEncaps.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentInDiscdUnsupEncaps.setDescription('Number of frames discarded on this PVC Endpoint because of an unsupported receive RFC1490 encapsulation header.')
nncFrPVCEndptStatCurrentInDiscdCOSDESet = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 3, 1, 25), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentInDiscdCOSDESet.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentInDiscdCOSDESet.setDescription('Number of frames discarded due to receive class of service procedures, in which the DE bit was set.')
nncFrPVCEndptStatCurrentInDiscdCOSDEClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 3, 1, 26), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentInDiscdCOSDEClr.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentInDiscdCOSDEClr.setDescription('Number of frames discarded for the PVC Endpoint due to receive class of service procedures, in which the DE bit was not set.')
nncFrPVCEndptStatCurrentOutDiscdDESet = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 3, 1, 27), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentOutDiscdDESet.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentOutDiscdDESet.setDescription('Number of frames discarded for the PVC Endpoint due to transmit congestion procedures, in which the DE bit was set.')
nncFrPVCEndptStatCurrentOutDiscdDEClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 3, 1, 28), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentOutDiscdDEClr.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentOutDiscdDEClr.setDescription('Number of frames discarded for the PVC Endpoint due to transmit congestion procedures, in which the DE bit was not set.')
nncFrPVCEndptStatCurrentOutDiscdBadEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 3, 1, 29), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentOutDiscdBadEncaps.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentOutDiscdBadEncaps.setDescription('Number of frames discarded for the PVC Endpoint due to having a bad RFC1483 encapsulation header.')
nncFrPVCEndptStatCurrentOutDiscdUnsupEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 3, 1, 30), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentOutDiscdUnsupEncaps.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentOutDiscdUnsupEncaps.setDescription('Number of frames discarded for the PVC Endpoint due to having an unsupported RFC1483 encapsulation header.')
nncFrPVCEndptStatCurrentStReasDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 3, 1, 31), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentStReasDiscards.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentStReasDiscards.setDescription('Number of frames discarded for the PVC Endpoint due to any reassembly errors.')
nncFrPVCEndptStatIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 4), )
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalTable.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalTable.setDescription('The nncFrPVCEndptStatIntervalTable contains objects for monitoring performance of a frame relay endpoint over M 1hr historical intervals.')
nncFrPVCEndptStatIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatIntervalDLCINumber"), (0, "NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatIntervalNumber"))
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalEntry.setDescription('An entry in the 1hr interval statistics table. Each conceptual row contains statistics for a particular PVC Endpoint and interval.')
nncFrPVCEndptStatIntervalDLCINumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024)))
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalDLCINumber.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalDLCINumber.setDescription('The DLCI number of the stream to which statistics in this row belong.')
nncFrPVCEndptStatIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalNumber.setDescription('The interval number (N) of the statistics in this row.')
nncFrPVCEndptStatIntervalState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 4, 1, 3), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalState.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalState.setDescription('The state of the interval represented by this row. The object provides a status for those entries which have been reset by the user or have been subject to a wall- clock time change.')
nncFrPVCEndptStatIntervalAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96)))
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncFrPVCEndptStatIntervalInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 4, 1, 5), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalInFrames.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalInFrames.setDescription('Number of frames received on this PVC Endpoint.')
nncFrPVCEndptStatIntervalOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 4, 1, 6), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalOutFrames.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalOutFrames.setDescription('Number of frames transmitted on this PVC Endpoint.')
nncFrPVCEndptStatIntervalInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 4, 1, 7), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalInOctets.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalInOctets.setDescription('Number of bytes received on this PVC Endpoint.')
nncFrPVCEndptStatIntervalOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 4, 1, 8), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalOutOctets.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalOutOctets.setDescription('Number of bytes transmitted on this PVC Endpoint.')
nncFrPVCEndptStatIntervalInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 4, 1, 9), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalInDiscards.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalInDiscards.setDescription('Number of frames received by the network (ingress) that were discarded due to traffic enforcement for this PVC Endpoint.')
nncFrPVCEndptStatIntervalOutExcessFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 4, 1, 10), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalOutExcessFrames.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalOutExcessFrames.setDescription('Number of frames transmitted by the network (egress) for this PVC Endpoint that were treated as excess traffic (the DE bit may be set to one).')
nncFrPVCEndptStatIntervalInDEFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 4, 1, 11), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalInDEFrames.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalInDEFrames.setDescription('Number of frames received by the network (ingress) with the DE bit set to (1) for the PVC Endpoint.')
nncFrPVCEndptStatIntervalInCosTagDeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 4, 1, 12), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalInCosTagDeFrames.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalInCosTagDeFrames.setDescription('Number of frames received by the network (ingress) for this PVC Endpoint that were policed to be excess traffic (the DE bit was set to one) and transmitted.')
nncFrPVCEndptStatIntervalInOctetsDESet = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 4, 1, 13), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalInOctetsDESet.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalInOctetsDESet.setDescription('Number of bytes received on this PVC Endpoint with the DE bit set.')
nncFrPVCEndptStatIntervalInFramesBECNSet = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 4, 1, 14), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalInFramesBECNSet.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalInFramesBECNSet.setDescription('Number of frames received by the network (ingress) for this PVC Endpoint that had the BECN bit set.')
nncFrPVCEndptStatIntervalInFramesFECNSet = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 4, 1, 15), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalInFramesFECNSet.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalInFramesFECNSet.setDescription('Number of frames received by the network (ingress) for this PVC Endpoint that had the FECN bit set.')
nncFrPVCEndptStatIntervalInInvdLength = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 4, 1, 16), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalInInvdLength.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalInInvdLength.setDescription('Number of frames received by the network (ingress) for this PVC Endpoint that were discarded because the frame had no data, or the data exceeded the maximum allowed length.')
nncFrPVCEndptStatIntervalOutOctetsDESet = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 4, 1, 17), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalOutOctetsDESet.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalOutOctetsDESet.setDescription('Number of bytes transmitted on this PVC Endpoint with the DE bit set.')
nncFrPVCEndptStatIntervalOutFramesBECNSet = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 4, 1, 18), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalOutFramesBECNSet.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalOutFramesBECNSet.setDescription('Number of frames transmitted by the network (egress) for this PVC Endpoint that had the BECN bit set.')
nncFrPVCEndptStatIntervalOutFramesFECNSet = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 4, 1, 19), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalOutFramesFECNSet.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalOutFramesFECNSet.setDescription('Number of frames transmitted by the network (egress) for this PVC Endpoint that had the FECN bit set.')
nncFrPVCEndptStatIntervalOutFramesInRed = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 4, 1, 20), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalOutFramesInRed.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalOutFramesInRed.setDescription('Number of frames transmitted by the network (egress) for this PVC Endpoint when the frame stream was in Red State.')
nncFrPVCEndptStatIntervalInDiscdOctetsCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 4, 1, 21), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalInDiscdOctetsCOS.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalInDiscdOctetsCOS.setDescription('Number of bytes discarded because of receive class-of-service enforcement on the PVC Endpoint.')
nncFrPVCEndptStatIntervalInDiscdDESet = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 4, 1, 22), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalInDiscdDESet.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalInDiscdDESet.setDescription('Number of frames discarded because of receive congestion procedures, in which the DE bit was set.')
nncFrPVCEndptStatIntervalInDiscdDEClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 4, 1, 23), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalInDiscdDEClr.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalInDiscdDEClr.setDescription('Number of frames discarded because of receive congestion procedures, in which the DE bit was not set.')
nncFrPVCEndptStatIntervalInDiscdBadEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 4, 1, 24), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalInDiscdBadEncaps.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalInDiscdBadEncaps.setDescription('Number of frames discarded on this PVC Endpoint because of a bad receive RFC1490 encapsulation header.')
nncFrPVCEndptStatIntervalInDiscdUnsupEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 4, 1, 25), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalInDiscdUnsupEncaps.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalInDiscdUnsupEncaps.setDescription('Number of frames discarded on this PVC Endpoint because of an unsupported receive RFC1490 encapsulation header.')
nncFrPVCEndptStatIntervalInDiscdCOSDESet = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 4, 1, 26), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalInDiscdCOSDESet.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalInDiscdCOSDESet.setDescription('Number of frames discarded due to receive class of service procedures, in which the DE bit was set.')
nncFrPVCEndptStatIntervalInDiscdCOSDEClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 4, 1, 27), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalInDiscdCOSDEClr.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalInDiscdCOSDEClr.setDescription('Number of frames discarded for the PVC Endpoint due to receive class of service procedures, in which the DE bit was not set.')
nncFrPVCEndptStatIntervalOutDiscdDESet = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 4, 1, 28), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalOutDiscdDESet.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalOutDiscdDESet.setDescription('Number of frames discarded for the PVC Endpoint due to transmit congestion procedures, in which the DE bit was set.')
nncFrPVCEndptStatIntervalOutDiscdDEClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 4, 1, 29), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalOutDiscdDEClr.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalOutDiscdDEClr.setDescription('Number of frames discarded for the PVC Endpoint due to transmit congestion procedures, in which the DE bit was not set.')
nncFrPVCEndptStatIntervalOutDiscdBadEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 4, 1, 30), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalOutDiscdBadEncaps.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalOutDiscdBadEncaps.setDescription('Number of frames discarded for the PVC Endpoint due to having a bad RFC1483 encapsulation header.')
nncFrPVCEndptStatIntervalOutDiscdUnsupEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 4, 1, 31), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalOutDiscdUnsupEncaps.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalOutDiscdUnsupEncaps.setDescription('Number of frames discarded for the PVC Endpoint due to having an unsupported RFC1483 encapsulation header.')
nncFrPVCEndptStatIntervalStReasDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 4, 1, 32), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalStReasDiscards.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalStReasDiscards.setDescription('Number of frames discarded for the PVC Endpoint due to any reassembly errors.')
nncFrDepthOfHistoricalStrata = MibScalar((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrDepthOfHistoricalStrata.setStatus('current')
if mibBuilder.loadTexts: nncFrDepthOfHistoricalStrata.setDescription('Depth of historical strata of FR interval statistics.')
nncFrStrBertStatTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 6), )
if mibBuilder.loadTexts: nncFrStrBertStatTable.setStatus('current')
if mibBuilder.loadTexts: nncFrStrBertStatTable.setDescription('The nncFrStrBertStatTable contains objects for reporting the current statistics of a BERT being performed on a frame relay stream. This feature is introduced in Rel 2.2 frame relay cards.')
nncFrStrBertStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: nncFrStrBertStatEntry.setStatus('current')
if mibBuilder.loadTexts: nncFrStrBertStatEntry.setDescription('An entry in the BERT statistics table. Each conceptual row contains statistics related to the BERT being performed on a specific DLCI within a particular frame relay stream.')
nncFrStrBertDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrBertDlci.setStatus('current')
if mibBuilder.loadTexts: nncFrStrBertDlci.setDescription('This object indicates if there is a BERT active on the frame relay stream, and when active on which DLCI the BERT is active on. WHERE: 0 = BERT not active, non-zero = DLCI')
nncFrStrBertStatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrBertStatStatus.setStatus('current')
if mibBuilder.loadTexts: nncFrStrBertStatStatus.setDescription('The current status of the BERT when the BERT is activated: where 0 = Loss of pattern sync. 1 = Pattern Sync.')
nncFrStrBertStatTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 6, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrBertStatTxFrames.setStatus('current')
if mibBuilder.loadTexts: nncFrStrBertStatTxFrames.setDescription('The number of Frames transmitted onto the stream by BERT Task. Each BERT Frame is of a fixed size and contains a fixed pattern.')
nncFrStrBertStatRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 6, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrBertStatRxFrames.setStatus('current')
if mibBuilder.loadTexts: nncFrStrBertStatRxFrames.setDescription('The number of Frames received while the BERT is in pattern sync. The Rx Frame count will only be incremented when in pattern sync and the received packet is the correct size and contains the DLCI being BERTED.')
nncFrStrBertStatRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 6, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrBertStatRxBytes.setStatus('current')
if mibBuilder.loadTexts: nncFrStrBertStatRxBytes.setDescription('The number of Bytes transmitted onto the stream by BERT Task. Each BERT packet is of a fixed size and contains a fixed pattern.')
nncFrStrBertStatTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 6, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrBertStatTxBytes.setStatus('current')
if mibBuilder.loadTexts: nncFrStrBertStatTxBytes.setDescription('The number of Bytes transmitted while the BERT is in pattern sync. The Tx Byte count will only be incremented when in pattern sync.')
nncFrStrBertStatRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 6, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrBertStatRxErrors.setStatus('current')
if mibBuilder.loadTexts: nncFrStrBertStatRxErrors.setDescription('The number of errors detected in the received packets while the BERT is in pattern sync. Packets flagged as having CRC errors that contain the DLCI being BERTED and the correct packet size being BERTED will be scanned for errors and the number of errors accumulated in this counter.')
nncFrStrBertStatEstErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 30, 1, 6, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrStrBertStatEstErrors.setStatus('current')
if mibBuilder.loadTexts: nncFrStrBertStatEstErrors.setDescription('The estimated number of errors encountered by the packets being transmitted while the BERT is in pattern sync based on the fact that the packets are not returned, and pattern sync is maintained.')
nncFrStrStatCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 30, 3, 1)).setObjects(("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentState"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentAbsoluteIntervalNumber"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentInOctets"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentOutOctets"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentInUCastPackets"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentOutUCastPackets"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentInDiscards"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentOutDiscards"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentInErrors"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentOutErrors"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentSigUserProtErrors"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentSigNetProtErrors"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentSigUserLinkRelErrors"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentSigNetLinkRelErrors"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentSigUserChanInactive"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentSigNetChanInactive"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentStSCAlarms"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentStTimeSC"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentStMaxDurationRED"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentStMCAlarms"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentStTimeMC"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentOutLinkUtilization"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentInLinkUtilization"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentInInvdLength"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentStLastErroredDLCI"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentInDiscdOctetsCOS"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentInDiscdCOSDESet"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentInDiscdCOSDEClr"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentInDiscdBadEncaps"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentOutDiscdBadEncaps"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentInDiscdUnsupEncaps"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentOutDiscdUnsupEncaps"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentOutDiscdDESet"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentOutDiscdDEClr"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentInDiscdDESet"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentInDiscdDEClr"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentStLMSigInvldField"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentStLMSigUnsupMsgType"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentStLMSigInvldEID"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentStLMSigInvldIELen"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentStLMSigInvldRepType"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentStLMSigFrmWithNoIEs"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentStUserSequenceErrs"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentStNetSequenceErrs"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentStLMUTimeoutsnT1"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentStLMUStatusMsgsRcvd"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentStLMUStatusENQMsgsSent"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentStLMUAsyncStatusRcvd"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentStLMNTimeoutsnT2"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentStLMNStatusMsgsSent"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentStLMNStatusENQMsgsRcvd"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentStLMNAsyncStatusSent"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentInCRCErrors"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentInNonIntegral"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentInReservedDLCI"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentInInvldEA"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentStFrmTooSmall"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentInAborts"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentInSumOfDisagremnts"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentInOverRuns"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentOutUnderRuns"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentStIntervalDuration"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentBestEffortPeakDelay"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentCommittedPeakDelay"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentLowDelayPeakDelay"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentRealTimePeakDelay"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentBestEffortAccDelay"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentCommittedAccDelay"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentLowDelayAccDelay"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentRealTimeAccDelay"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentBestEffortOutUCastPackets"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentCommittedOutUCastPackets"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentLowDelayOutUCastPackets"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentRealTimeOutUCastPackets"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentBestEffortUCastPacketsDEClr"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentCommittedUCastPacketsDEClr"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentLowDelayUCastPacketsDEClr"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentRealTimeUCastPacketsDEClr"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentBestEffortDiscdDEClr"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentCommittedDiscdDEClr"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentLowDelayDiscdDEClr"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentRealTimeDiscdDEClr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncFrStrStatCurrentGroup = nncFrStrStatCurrentGroup.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatCurrentGroup.setDescription('Collection of objects providing 1hr current statistics for a FR stream.')
nncFrStrStatIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 30, 3, 2)).setObjects(("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalNumber"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalState"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalAbsoluteIntervalNumber"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalInOctets"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalOutOctets"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalInUCastPackets"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalOutUCastPackets"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalInDiscards"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalOutDiscards"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalInErrors"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalOutErrors"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalSigUserProtErrors"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalSigNetProtErrors"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalSigUserLinkRelErrors"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalSigNetLinkRelErrors"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalSigUserChanInactive"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalSigNetChanInactive"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalStSCAlarms"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalStTimeSC"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalStMaxDurationRED"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalStMCAlarms"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalStTimeMC"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalOutLinkUtilization"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalInLinkUtilization"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalInInvdLength"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalStLastErroredDLCI"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalInDiscdOctetsCOS"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalInDiscdCOSDESet"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalInDiscdCOSDEClr"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalInDiscdBadEncaps"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalOutDiscdBadEncaps"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalInDiscdUnsupEncaps"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalOutDiscdUnsupEncaps"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalOutDiscdDESet"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalOutDiscdDEClr"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalInDiscdDESet"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalInDiscdDEClr"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalStLMSigInvldField"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalStLMSigUnsupMsgType"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalStLMSigInvldEID"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalStLMSigInvldIELen"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalStLMSigInvldRepType"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalStLMSigFrmWithNoIEs"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalStUserSequenceErrs"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalStNetSequenceErrs"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalStLMUTimeoutsnT1"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalStLMUStatusMsgsRcvd"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalStLMUStatusENQMsgsSent"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalStLMUAsyncStatusRcvd"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalStLMNTimeoutsnT2"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalStLMNStatusMsgsSent"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalStLMNStatusENQMsgsRcvd"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalStLMNAsyncStatusSent"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalInCRCErrors"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalInNonIntegral"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalInReservedDLCI"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalInInvldEA"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalStFrmTooSmall"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalInAborts"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalInSumOfDisagremnts"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalInOverRuns"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalOutUnderRuns"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalStIntervalDuration"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalBestEffortPeakDelay"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalCommittedPeakDelay"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalLowDelayPeakDelay"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalRealTimePeakDelay"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalBestEffortAccDelay"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalCommittedAccDelay"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalLowDelayAccDelay"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalRealTimeAccDelay"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalBestEffortOutUCastPackets"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalCommittedOutUCastPackets"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalLowDelayOutUCastPackets"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalRealTimeOutUCastPackets"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalBestEffortUCastPacketsDEClr"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalCommittedUCastPacketsDEClr"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalLowDelayUCastPacketsDEClr"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalRealTimeUCastPacketsDEClr"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalBestEffortDiscdDEClr"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalCommittedDiscdDEClr"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalLowDelayDiscdDEClr"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrStatIntervalRealTimeDiscdDEClr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncFrStrStatIntervalGroup = nncFrStrStatIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: nncFrStrStatIntervalGroup.setDescription('Collection of objects providing 1hr interval statistics for a FR stream.')
nncFrPVCEndptStatCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 30, 3, 3)).setObjects(("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatCurrentDLCINumber"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatCurrentState"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatCurrentAbsoluteIntervalNumber"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatCurrentInFrames"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatCurrentOutFrames"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatCurrentInOctets"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatCurrentOutOctets"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatCurrentInDiscards"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatCurrentOutExcessFrames"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatCurrentInDEFrames"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatCurrentInCosTagDeFrames"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatCurrentInOctetsDESet"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatCurrentInFramesBECNSet"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatCurrentInFramesFECNSet"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatCurrentInInvdLength"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatCurrentOutOctetsDESet"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatCurrentOutFramesBECNSet"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatCurrentOutFramesFECNSet"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatCurrentOutFramesInRed"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatCurrentInDiscdOctetsCOS"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatCurrentInDiscdDESet"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatCurrentInDiscdDEClr"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatCurrentInDiscdBadEncaps"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatCurrentInDiscdUnsupEncaps"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatCurrentInDiscdCOSDESet"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatCurrentInDiscdCOSDEClr"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatCurrentOutDiscdDESet"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatCurrentOutDiscdDEClr"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatCurrentOutDiscdBadEncaps"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatCurrentOutDiscdUnsupEncaps"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatCurrentStReasDiscards"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncFrPVCEndptStatCurrentGroup = nncFrPVCEndptStatCurrentGroup.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatCurrentGroup.setDescription('Collection of objects providing 1hr current statistics for a FR PVC Endpoint.')
nncFrPVCEndptStatIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 30, 3, 4)).setObjects(("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatIntervalDLCINumber"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatIntervalNumber"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatIntervalState"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatIntervalAbsoluteIntervalNumber"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatIntervalInFrames"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatIntervalOutFrames"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatIntervalInOctets"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatIntervalOutOctets"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatIntervalInDiscards"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatIntervalOutExcessFrames"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatIntervalInDEFrames"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatIntervalInCosTagDeFrames"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatIntervalInOctetsDESet"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatIntervalInFramesBECNSet"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatIntervalInFramesFECNSet"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatIntervalInInvdLength"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatIntervalOutOctetsDESet"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatIntervalOutFramesBECNSet"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatIntervalOutFramesFECNSet"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatIntervalOutFramesInRed"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatIntervalInDiscdOctetsCOS"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatIntervalInDiscdDESet"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatIntervalInDiscdDEClr"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatIntervalInDiscdBadEncaps"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatIntervalInDiscdUnsupEncaps"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatIntervalInDiscdCOSDESet"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatIntervalInDiscdCOSDEClr"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatIntervalOutDiscdDESet"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatIntervalOutDiscdDEClr"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatIntervalOutDiscdBadEncaps"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatIntervalOutDiscdUnsupEncaps"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatIntervalStReasDiscards"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncFrPVCEndptStatIntervalGroup = nncFrPVCEndptStatIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: nncFrPVCEndptStatIntervalGroup.setDescription('Collection of objects providing 1hr current statistics for a FR PVC Endpoint.')
nncFrStrBertStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 30, 3, 6)).setObjects(("NNCFRINTSTATISTICS-MIB", "nncFrStrBertDlci"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrBertStatStatus"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrBertStatTxFrames"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrBertStatRxFrames"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrBertStatTxBytes"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrBertStatRxBytes"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrBertStatRxErrors"), ("NNCFRINTSTATISTICS-MIB", "nncFrStrBertStatEstErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncFrStrBertStatGroup = nncFrStrBertStatGroup.setStatus('current')
if mibBuilder.loadTexts: nncFrStrBertStatGroup.setDescription('Collection of objects providing BERT statistics for a BERT performed on a Frame Relay stream.')
nncFrIntStatisticsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 123, 3, 30, 4, 1)).setObjects(("NNCFRINTSTATISTICS-MIB", "nncFrStrStatCurrentGroup"), ("NNCFRINTSTATISTICS-MIB", "nncFrPVCEndptStatCurrentGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncFrIntStatisticsCompliance = nncFrIntStatisticsCompliance.setStatus('current')
if mibBuilder.loadTexts: nncFrIntStatisticsCompliance.setDescription('The compliance statement for Newbridge SNMP entities which have FR streams and endpoints.')
mibBuilder.exportSymbols("NNCFRINTSTATISTICS-MIB", nncFrStrStatIntervalInDiscdOctetsCOS=nncFrStrStatIntervalInDiscdOctetsCOS, nncFrStrStatCurrentStMCAlarms=nncFrStrStatCurrentStMCAlarms, nncFrStrStatCurrentTable=nncFrStrStatCurrentTable, nncFrPVCEndptStatCurrentOutDiscdBadEncaps=nncFrPVCEndptStatCurrentOutDiscdBadEncaps, nncFrPVCEndptStatCurrentStReasDiscards=nncFrPVCEndptStatCurrentStReasDiscards, nncFrStrStatIntervalStLMUStatusENQMsgsSent=nncFrStrStatIntervalStLMUStatusENQMsgsSent, nncFrStrStatCurrentSigNetLinkRelErrors=nncFrStrStatCurrentSigNetLinkRelErrors, nncFrStrStatIntervalOutDiscdUnsupEncaps=nncFrStrStatIntervalOutDiscdUnsupEncaps, nncFrStrStatCurrentInDiscdOctetsCOS=nncFrStrStatCurrentInDiscdOctetsCOS, nncFrStrStatCurrentCommittedOutUCastPackets=nncFrStrStatCurrentCommittedOutUCastPackets, nncFrPVCEndptStatCurrentGroup=nncFrPVCEndptStatCurrentGroup, nncFrStrStatIntervalStTimeMC=nncFrStrStatIntervalStTimeMC, nncFrPVCEndptStatIntervalInOctets=nncFrPVCEndptStatIntervalInOctets, nncFrStrBertStatTxBytes=nncFrStrBertStatTxBytes, nncFrStrStatCurrentCommittedPeakDelay=nncFrStrStatCurrentCommittedPeakDelay, nncFrPVCEndptStatCurrentInFrames=nncFrPVCEndptStatCurrentInFrames, nncFrStrStatCurrentInInvldEA=nncFrStrStatCurrentInInvldEA, nncFrStrStatCurrentInOverRuns=nncFrStrStatCurrentInOverRuns, nncFrPVCEndptStatIntervalNumber=nncFrPVCEndptStatIntervalNumber, nncFrStrStatIntervalLowDelayOutUCastPackets=nncFrStrStatIntervalLowDelayOutUCastPackets, nncFrPVCEndptStatCurrentOutOctets=nncFrPVCEndptStatCurrentOutOctets, nncFrPVCEndptStatIntervalInInvdLength=nncFrPVCEndptStatIntervalInInvdLength, nncFrStrStatIntervalSigUserLinkRelErrors=nncFrStrStatIntervalSigUserLinkRelErrors, nncFrPVCEndptStatCurrentInFramesFECNSet=nncFrPVCEndptStatCurrentInFramesFECNSet, nncFrIntStatisticsGroups=nncFrIntStatisticsGroups, nncFrStrBertStatTxFrames=nncFrStrBertStatTxFrames, nncFrStrStatIntervalStUserSequenceErrs=nncFrStrStatIntervalStUserSequenceErrs, nncFrPVCEndptStatCurrentOutOctetsDESet=nncFrPVCEndptStatCurrentOutOctetsDESet, nncFrPVCEndptStatIntervalInDiscdOctetsCOS=nncFrPVCEndptStatIntervalInDiscdOctetsCOS, nncFrStrBertStatEstErrors=nncFrStrBertStatEstErrors, nncFrStrStatCurrentAbsoluteIntervalNumber=nncFrStrStatCurrentAbsoluteIntervalNumber, nncFrStrStatCurrentStLMSigInvldRepType=nncFrStrStatCurrentStLMSigInvldRepType, nncFrPVCEndptStatIntervalInOctetsDESet=nncFrPVCEndptStatIntervalInOctetsDESet, nncFrStrStatCurrentInDiscdUnsupEncaps=nncFrStrStatCurrentInDiscdUnsupEncaps, nncFrStrStatIntervalInDiscards=nncFrStrStatIntervalInDiscards, nncFrIntStatistics=nncFrIntStatistics, nncFrStrStatCurrentCommittedDiscdDEClr=nncFrStrStatCurrentCommittedDiscdDEClr, nncFrStrStatIntervalInDiscdCOSDESet=nncFrStrStatIntervalInDiscdCOSDESet, nncFrPVCEndptStatIntervalInFramesFECNSet=nncFrPVCEndptStatIntervalInFramesFECNSet, nncFrStrStatCurrentInSumOfDisagremnts=nncFrStrStatCurrentInSumOfDisagremnts, nncFrPVCEndptStatIntervalInDiscdCOSDESet=nncFrPVCEndptStatIntervalInDiscdCOSDESet, nncFrPVCEndptStatIntervalStReasDiscards=nncFrPVCEndptStatIntervalStReasDiscards, nncFrStrStatCurrentSigNetChanInactive=nncFrStrStatCurrentSigNetChanInactive, nncFrStrStatCurrentInInvdLength=nncFrStrStatCurrentInInvdLength, nncFrStrStatCurrentStTimeMC=nncFrStrStatCurrentStTimeMC, nncFrStrStatCurrentRealTimePeakDelay=nncFrStrStatCurrentRealTimePeakDelay, nncFrStrStatIntervalInDiscdUnsupEncaps=nncFrStrStatIntervalInDiscdUnsupEncaps, nncFrStrStatIntervalStIntervalDuration=nncFrStrStatIntervalStIntervalDuration, nncFrPVCEndptStatCurrentInDiscdOctetsCOS=nncFrPVCEndptStatCurrentInDiscdOctetsCOS, nncFrStrStatCurrentStUserSequenceErrs=nncFrStrStatCurrentStUserSequenceErrs, nncFrPVCEndptStatIntervalOutDiscdDESet=nncFrPVCEndptStatIntervalOutDiscdDESet, nncFrStrBertStatRxFrames=nncFrStrBertStatRxFrames, nncFrStrStatCurrentInErrors=nncFrStrStatCurrentInErrors, nncFrStrStatIntervalStLMSigUnsupMsgType=nncFrStrStatIntervalStLMSigUnsupMsgType, nncFrStrStatIntervalRealTimeOutUCastPackets=nncFrStrStatIntervalRealTimeOutUCastPackets, nncFrStrStatIntervalLowDelayUCastPacketsDEClr=nncFrStrStatIntervalLowDelayUCastPacketsDEClr, nncFrStrStatCurrentState=nncFrStrStatCurrentState, nncFrStrStatIntervalOutDiscards=nncFrStrStatIntervalOutDiscards, nncFrStrStatIntervalRealTimeDiscdDEClr=nncFrStrStatIntervalRealTimeDiscdDEClr, nncFrStrStatCurrentStLMUStatusENQMsgsSent=nncFrStrStatCurrentStLMUStatusENQMsgsSent, nncFrStrStatIntervalBestEffortOutUCastPackets=nncFrStrStatIntervalBestEffortOutUCastPackets, nncFrStrStatCurrentInDiscdDEClr=nncFrStrStatCurrentInDiscdDEClr, nncFrIntStatisticsCompliances=nncFrIntStatisticsCompliances, nncFrStrStatCurrentBestEffortPeakDelay=nncFrStrStatCurrentBestEffortPeakDelay, nncFrStrStatIntervalStTimeSC=nncFrStrStatIntervalStTimeSC, nncFrStrBertStatRxErrors=nncFrStrBertStatRxErrors, nncFrStrStatCurrentLowDelayOutUCastPackets=nncFrStrStatCurrentLowDelayOutUCastPackets, nncFrStrStatCurrentInUCastPackets=nncFrStrStatCurrentInUCastPackets, nncFrStrStatIntervalStLMSigInvldIELen=nncFrStrStatIntervalStLMSigInvldIELen, nncFrStrStatIntervalRealTimeAccDelay=nncFrStrStatIntervalRealTimeAccDelay, nncFrStrStatCurrentOutUnderRuns=nncFrStrStatCurrentOutUnderRuns, nncFrStrStatIntervalOutDiscdDESet=nncFrStrStatIntervalOutDiscdDESet, nncFrStrStatIntervalOutUnderRuns=nncFrStrStatIntervalOutUnderRuns, nncFrPVCEndptStatIntervalState=nncFrPVCEndptStatIntervalState, nncFrStrStatCurrentStLastErroredDLCI=nncFrStrStatCurrentStLastErroredDLCI, nncFrStrStatIntervalTable=nncFrStrStatIntervalTable, nncFrStrStatCurrentInCRCErrors=nncFrStrStatCurrentInCRCErrors, nncFrStrStatCurrentStLMUTimeoutsnT1=nncFrStrStatCurrentStLMUTimeoutsnT1, nncFrStrStatIntervalStMaxDurationRED=nncFrStrStatIntervalStMaxDurationRED, nncFrStrStatIntervalLowDelayAccDelay=nncFrStrStatIntervalLowDelayAccDelay, nncFrStrStatIntervalAbsoluteIntervalNumber=nncFrStrStatIntervalAbsoluteIntervalNumber, nncFrStrStatIntervalStNetSequenceErrs=nncFrStrStatIntervalStNetSequenceErrs, nncFrStrStatIntervalStFrmTooSmall=nncFrStrStatIntervalStFrmTooSmall, nncFrStrStatCurrentStLMUAsyncStatusRcvd=nncFrStrStatCurrentStLMUAsyncStatusRcvd, nncFrPVCEndptStatCurrentDLCINumber=nncFrPVCEndptStatCurrentDLCINumber, nncFrPVCEndptStatCurrentOutFramesBECNSet=nncFrPVCEndptStatCurrentOutFramesBECNSet, nncFrStrStatCurrentInAborts=nncFrStrStatCurrentInAborts, nncFrStrStatIntervalCommittedOutUCastPackets=nncFrStrStatIntervalCommittedOutUCastPackets, nncFrPVCEndptStatIntervalDLCINumber=nncFrPVCEndptStatIntervalDLCINumber, nncFrStrStatIntervalOutDiscdBadEncaps=nncFrStrStatIntervalOutDiscdBadEncaps, nncFrPVCEndptStatCurrentEntry=nncFrPVCEndptStatCurrentEntry, nncFrStrStatCurrentStLMNStatusENQMsgsRcvd=nncFrStrStatCurrentStLMNStatusENQMsgsRcvd, nncFrStrStatIntervalSigUserProtErrors=nncFrStrStatIntervalSigUserProtErrors, nncFrIntStatisticsObjects=nncFrIntStatisticsObjects, nncFrStrStatIntervalStLMNStatusENQMsgsRcvd=nncFrStrStatIntervalStLMNStatusENQMsgsRcvd, nncFrStrStatCurrentStIntervalDuration=nncFrStrStatCurrentStIntervalDuration, nncFrPVCEndptStatIntervalInDiscards=nncFrPVCEndptStatIntervalInDiscards, nncFrDepthOfHistoricalStrata=nncFrDepthOfHistoricalStrata, nncFrPVCEndptStatCurrentOutDiscdDESet=nncFrPVCEndptStatCurrentOutDiscdDESet, nncFrStrStatCurrentInDiscdCOSDESet=nncFrStrStatCurrentInDiscdCOSDESet, nncFrStrStatCurrentInNonIntegral=nncFrStrStatCurrentInNonIntegral, nncFrStrStatCurrentStLMSigInvldIELen=nncFrStrStatCurrentStLMSigInvldIELen, nncFrStrStatCurrentStFrmTooSmall=nncFrStrStatCurrentStFrmTooSmall, nncFrStrStatIntervalNumber=nncFrStrStatIntervalNumber, nncFrPVCEndptStatIntervalOutOctets=nncFrPVCEndptStatIntervalOutOctets, nncFrStrStatCurrentInDiscdDESet=nncFrStrStatCurrentInDiscdDESet, nncFrPVCEndptStatIntervalOutDiscdBadEncaps=nncFrPVCEndptStatIntervalOutDiscdBadEncaps, nncFrStrStatIntervalOutUCastPackets=nncFrStrStatIntervalOutUCastPackets, nncFrStrStatIntervalInDiscdDESet=nncFrStrStatIntervalInDiscdDESet, nncFrPVCEndptStatCurrentInDiscdCOSDESet=nncFrPVCEndptStatCurrentInDiscdCOSDESet, nncFrPVCEndptStatCurrentInCosTagDeFrames=nncFrPVCEndptStatCurrentInCosTagDeFrames, nncFrStrStatIntervalSigNetProtErrors=nncFrStrStatIntervalSigNetProtErrors, nncFrStrStatIntervalInCRCErrors=nncFrStrStatIntervalInCRCErrors, nncFrPVCEndptStatIntervalOutFramesFECNSet=nncFrPVCEndptStatIntervalOutFramesFECNSet, nncFrStrStatIntervalSigNetChanInactive=nncFrStrStatIntervalSigNetChanInactive, nncFrStrStatCurrentOutOctets=nncFrStrStatCurrentOutOctets, nncFrStrStatIntervalInDiscdDEClr=nncFrStrStatIntervalInDiscdDEClr, nncFrStrStatCurrentSigUserProtErrors=nncFrStrStatCurrentSigUserProtErrors, nncFrStrStatIntervalInNonIntegral=nncFrStrStatIntervalInNonIntegral, nncFrPVCEndptStatIntervalAbsoluteIntervalNumber=nncFrPVCEndptStatIntervalAbsoluteIntervalNumber, nncFrPVCEndptStatIntervalInDiscdDESet=nncFrPVCEndptStatIntervalInDiscdDESet, nncFrStrStatCurrentRealTimeAccDelay=nncFrStrStatCurrentRealTimeAccDelay, nncFrStrStatIntervalInDiscdBadEncaps=nncFrStrStatIntervalInDiscdBadEncaps, nncFrStrStatIntervalStLMUTimeoutsnT1=nncFrStrStatIntervalStLMUTimeoutsnT1, nncFrStrStatIntervalStLMUStatusMsgsRcvd=nncFrStrStatIntervalStLMUStatusMsgsRcvd, nncFrPVCEndptStatIntervalGroup=nncFrPVCEndptStatIntervalGroup, nncFrPVCEndptStatIntervalTable=nncFrPVCEndptStatIntervalTable, nncFrStrStatIntervalLowDelayPeakDelay=nncFrStrStatIntervalLowDelayPeakDelay, nncFrStrStatIntervalInLinkUtilization=nncFrStrStatIntervalInLinkUtilization, nncFrStrStatCurrentOutErrors=nncFrStrStatCurrentOutErrors, nncFrPVCEndptStatCurrentInDiscards=nncFrPVCEndptStatCurrentInDiscards, nncFrStrStatCurrentLowDelayPeakDelay=nncFrStrStatCurrentLowDelayPeakDelay, nncFrStrStatCurrentCommittedAccDelay=nncFrStrStatCurrentCommittedAccDelay, nncFrStrStatIntervalOutDiscdDEClr=nncFrStrStatIntervalOutDiscdDEClr, nncFrStrStatCurrentSigUserLinkRelErrors=nncFrStrStatCurrentSigUserLinkRelErrors, nncFrStrStatCurrentStLMSigInvldField=nncFrStrStatCurrentStLMSigInvldField, nncFrPVCEndptStatCurrentInFramesBECNSet=nncFrPVCEndptStatCurrentInFramesBECNSet, nncFrPVCEndptStatIntervalInCosTagDeFrames=nncFrPVCEndptStatIntervalInCosTagDeFrames, nncFrStrStatCurrentStTimeSC=nncFrStrStatCurrentStTimeSC, nncFrPVCEndptStatIntervalEntry=nncFrPVCEndptStatIntervalEntry, nncFrStrStatIntervalOutOctets=nncFrStrStatIntervalOutOctets, nncFrStrStatCurrentLowDelayUCastPacketsDEClr=nncFrStrStatCurrentLowDelayUCastPacketsDEClr, nncFrStrStatIntervalInSumOfDisagremnts=nncFrStrStatIntervalInSumOfDisagremnts, nncFrStrStatCurrentOutLinkUtilization=nncFrStrStatCurrentOutLinkUtilization, nncFrStrStatIntervalCommittedUCastPacketsDEClr=nncFrStrStatIntervalCommittedUCastPacketsDEClr, nncFrIntStatisticsCompliance=nncFrIntStatisticsCompliance, nncFrStrStatIntervalStLMSigInvldRepType=nncFrStrStatIntervalStLMSigInvldRepType, nncFrStrStatIntervalInReservedDLCI=nncFrStrStatIntervalInReservedDLCI, nncFrStrStatIntervalBestEffortUCastPacketsDEClr=nncFrStrStatIntervalBestEffortUCastPacketsDEClr, nncFrPVCEndptStatIntervalInFrames=nncFrPVCEndptStatIntervalInFrames, nncFrStrStatCurrentStLMSigFrmWithNoIEs=nncFrStrStatCurrentStLMSigFrmWithNoIEs, nncFrPVCEndptStatCurrentInDiscdCOSDEClr=nncFrPVCEndptStatCurrentInDiscdCOSDEClr, nncFrPVCEndptStatIntervalInFramesBECNSet=nncFrPVCEndptStatIntervalInFramesBECNSet, nncFrStrBertStatGroup=nncFrStrBertStatGroup, nncFrPVCEndptStatCurrentInDEFrames=nncFrPVCEndptStatCurrentInDEFrames, nncFrPVCEndptStatCurrentOutDiscdUnsupEncaps=nncFrPVCEndptStatCurrentOutDiscdUnsupEncaps, nncFrStrStatCurrentBestEffortOutUCastPackets=nncFrStrStatCurrentBestEffortOutUCastPackets, nncFrStrStatIntervalBestEffortDiscdDEClr=nncFrStrStatIntervalBestEffortDiscdDEClr, nncFrPVCEndptStatCurrentOutExcessFrames=nncFrPVCEndptStatCurrentOutExcessFrames, nncFrStrStatIntervalInDiscdCOSDEClr=nncFrStrStatIntervalInDiscdCOSDEClr, nncFrStrStatCurrentGroup=nncFrStrStatCurrentGroup, nncFrStrStatCurrentRealTimeDiscdDEClr=nncFrStrStatCurrentRealTimeDiscdDEClr, nncFrStrStatIntervalOutLinkUtilization=nncFrStrStatIntervalOutLinkUtilization, nncFrPVCEndptStatCurrentAbsoluteIntervalNumber=nncFrPVCEndptStatCurrentAbsoluteIntervalNumber, nncFrIntStatisticsTraps=nncFrIntStatisticsTraps, nncFrPVCEndptStatCurrentInInvdLength=nncFrPVCEndptStatCurrentInInvdLength, nncFrStrStatIntervalBestEffortPeakDelay=nncFrStrStatIntervalBestEffortPeakDelay, nncFrStrStatCurrentInDiscdBadEncaps=nncFrStrStatCurrentInDiscdBadEncaps, nncFrStrStatCurrentStLMSigUnsupMsgType=nncFrStrStatCurrentStLMSigUnsupMsgType, nncFrStrStatCurrentStNetSequenceErrs=nncFrStrStatCurrentStNetSequenceErrs, nncFrPVCEndptStatCurrentInDiscdUnsupEncaps=nncFrPVCEndptStatCurrentInDiscdUnsupEncaps, nncFrStrStatCurrentInDiscdCOSDEClr=nncFrStrStatCurrentInDiscdCOSDEClr, nncFrPVCEndptStatIntervalInDiscdDEClr=nncFrPVCEndptStatIntervalInDiscdDEClr, nncFrStrStatIntervalStLMSigFrmWithNoIEs=nncFrStrStatIntervalStLMSigFrmWithNoIEs, nncFrStrStatIntervalState=nncFrStrStatIntervalState, nncFrStrStatCurrentOutUCastPackets=nncFrStrStatCurrentOutUCastPackets, nncFrPVCEndptStatIntervalOutFramesBECNSet=nncFrPVCEndptStatIntervalOutFramesBECNSet, nncFrStrStatIntervalInInvldEA=nncFrStrStatIntervalInInvldEA, nncFrStrStatCurrentStLMUStatusMsgsRcvd=nncFrStrStatCurrentStLMUStatusMsgsRcvd, nncFrPVCEndptStatCurrentInOctets=nncFrPVCEndptStatCurrentInOctets, nncFrStrStatCurrentInDiscards=nncFrStrStatCurrentInDiscards, nncFrPVCEndptStatIntervalInDEFrames=nncFrPVCEndptStatIntervalInDEFrames, nncFrStrStatIntervalStLMSigInvldEID=nncFrStrStatIntervalStLMSigInvldEID, nncFrPVCEndptStatCurrentTable=nncFrPVCEndptStatCurrentTable, nncFrStrBertStatStatus=nncFrStrBertStatStatus, nncFrStrStatIntervalEntry=nncFrStrStatIntervalEntry, nncFrStrStatIntervalInUCastPackets=nncFrStrStatIntervalInUCastPackets, nncFrStrStatCurrentRealTimeOutUCastPackets=nncFrStrStatCurrentRealTimeOutUCastPackets, nncFrPVCEndptStatCurrentInOctetsDESet=nncFrPVCEndptStatCurrentInOctetsDESet, nncFrPVCEndptStatIntervalOutExcessFrames=nncFrPVCEndptStatIntervalOutExcessFrames, nncFrPVCEndptStatIntervalOutFramesInRed=nncFrPVCEndptStatIntervalOutFramesInRed, nncFrStrStatIntervalGroup=nncFrStrStatIntervalGroup, nncFrStrStatCurrentBestEffortUCastPacketsDEClr=nncFrStrStatCurrentBestEffortUCastPacketsDEClr, nncFrStrStatCurrentOutDiscdBadEncaps=nncFrStrStatCurrentOutDiscdBadEncaps, nncFrStrStatCurrentStLMSigInvldEID=nncFrStrStatCurrentStLMSigInvldEID, nncFrPVCEndptStatIntervalOutDiscdDEClr=nncFrPVCEndptStatIntervalOutDiscdDEClr, nncFrStrStatIntervalOutErrors=nncFrStrStatIntervalOutErrors, nncFrPVCEndptStatCurrentOutFramesFECNSet=nncFrPVCEndptStatCurrentOutFramesFECNSet, nncFrPVCEndptStatIntervalInDiscdCOSDEClr=nncFrPVCEndptStatIntervalInDiscdCOSDEClr, nncFrStrStatCurrentBestEffortAccDelay=nncFrStrStatCurrentBestEffortAccDelay, nncFrStrStatIntervalStLastErroredDLCI=nncFrStrStatIntervalStLastErroredDLCI, nncFrPVCEndptStatIntervalInDiscdUnsupEncaps=nncFrPVCEndptStatIntervalInDiscdUnsupEncaps, nncFrStrStatCurrentBestEffortDiscdDEClr=nncFrStrStatCurrentBestEffortDiscdDEClr, nncFrStrStatIntervalStLMSigInvldField=nncFrStrStatIntervalStLMSigInvldField, nncFrStrStatCurrentLowDelayAccDelay=nncFrStrStatCurrentLowDelayAccDelay, nncFrStrStatCurrentInReservedDLCI=nncFrStrStatCurrentInReservedDLCI, nncFrPVCEndptStatCurrentOutDiscdDEClr=nncFrPVCEndptStatCurrentOutDiscdDEClr, nncFrStrStatCurrentOutDiscdDESet=nncFrStrStatCurrentOutDiscdDESet, nncFrPVCEndptStatIntervalInDiscdBadEncaps=nncFrPVCEndptStatIntervalInDiscdBadEncaps, nncFrStrStatIntervalCommittedDiscdDEClr=nncFrStrStatIntervalCommittedDiscdDEClr, nncFrStrStatIntervalBestEffortAccDelay=nncFrStrStatIntervalBestEffortAccDelay, nncFrStrStatIntervalStMCAlarms=nncFrStrStatIntervalStMCAlarms, nncFrStrStatCurrentInOctets=nncFrStrStatCurrentInOctets, nncFrStrStatCurrentStLMNTimeoutsnT2=nncFrStrStatCurrentStLMNTimeoutsnT2, nncFrStrStatIntervalSigNetLinkRelErrors=nncFrStrStatIntervalSigNetLinkRelErrors, nncFrStrStatIntervalLowDelayDiscdDEClr=nncFrStrStatIntervalLowDelayDiscdDEClr, nncFrStrStatIntervalStLMUAsyncStatusRcvd=nncFrStrStatIntervalStLMUAsyncStatusRcvd, nncFrStrStatCurrentOutDiscards=nncFrStrStatCurrentOutDiscards, nncFrPVCEndptStatCurrentInDiscdBadEncaps=nncFrPVCEndptStatCurrentInDiscdBadEncaps, nncFrPVCEndptStatIntervalOutFrames=nncFrPVCEndptStatIntervalOutFrames, nncFrPVCEndptStatCurrentInDiscdDEClr=nncFrPVCEndptStatCurrentInDiscdDEClr, nncFrStrStatCurrentStLMNAsyncStatusSent=nncFrStrStatCurrentStLMNAsyncStatusSent, nncFrPVCEndptStatIntervalOutOctetsDESet=nncFrPVCEndptStatIntervalOutOctetsDESet, nncFrPVCEndptStatCurrentOutFramesInRed=nncFrPVCEndptStatCurrentOutFramesInRed, nncFrStrBertDlci=nncFrStrBertDlci, nncFrStrStatCurrentCommittedUCastPacketsDEClr=nncFrStrStatCurrentCommittedUCastPacketsDEClr, nncFrStrStatCurrentLowDelayDiscdDEClr=nncFrStrStatCurrentLowDelayDiscdDEClr, nncFrStrStatIntervalCommittedAccDelay=nncFrStrStatIntervalCommittedAccDelay, nncFrStrStatIntervalSigUserChanInactive=nncFrStrStatIntervalSigUserChanInactive, nncFrStrStatCurrentStSCAlarms=nncFrStrStatCurrentStSCAlarms, nncFrStrStatIntervalStLMNTimeoutsnT2=nncFrStrStatIntervalStLMNTimeoutsnT2, nncFrStrStatIntervalInErrors=nncFrStrStatIntervalInErrors, nncFrStrBertStatRxBytes=nncFrStrBertStatRxBytes, nncFrStrStatCurrentOutDiscdDEClr=nncFrStrStatCurrentOutDiscdDEClr, nncFrStrBertStatEntry=nncFrStrBertStatEntry, nncFrStrStatIntervalInOctets=nncFrStrStatIntervalInOctets, nncFrStrStatCurrentInLinkUtilization=nncFrStrStatCurrentInLinkUtilization, nncFrStrStatIntervalCommittedPeakDelay=nncFrStrStatIntervalCommittedPeakDelay, nncFrStrBertStatTable=nncFrStrBertStatTable, nncFrStrStatIntervalInOverRuns=nncFrStrStatIntervalInOverRuns, nncFrStrStatIntervalInInvdLength=nncFrStrStatIntervalInInvdLength, nncFrPVCEndptStatCurrentOutFrames=nncFrPVCEndptStatCurrentOutFrames, nncFrStrStatIntervalRealTimeUCastPacketsDEClr=nncFrStrStatIntervalRealTimeUCastPacketsDEClr, nncFrStrStatIntervalStLMNAsyncStatusSent=nncFrStrStatIntervalStLMNAsyncStatusSent, nncFrStrStatCurrentStMaxDurationRED=nncFrStrStatCurrentStMaxDurationRED, nncFrStrStatIntervalStLMNStatusMsgsSent=nncFrStrStatIntervalStLMNStatusMsgsSent, nncFrPVCEndptStatCurrentState=nncFrPVCEndptStatCurrentState, nncFrPVCEndptStatIntervalOutDiscdUnsupEncaps=nncFrPVCEndptStatIntervalOutDiscdUnsupEncaps, nncFrStrStatIntervalRealTimePeakDelay=nncFrStrStatIntervalRealTimePeakDelay, nncFrStrStatCurrentSigNetProtErrors=nncFrStrStatCurrentSigNetProtErrors, PYSNMP_MODULE_ID=nncFrIntStatistics, nncFrStrStatCurrentStLMNStatusMsgsSent=nncFrStrStatCurrentStLMNStatusMsgsSent, nncFrStrStatIntervalStSCAlarms=nncFrStrStatIntervalStSCAlarms, nncFrStrStatCurrentRealTimeUCastPacketsDEClr=nncFrStrStatCurrentRealTimeUCastPacketsDEClr)
mibBuilder.exportSymbols("NNCFRINTSTATISTICS-MIB", nncFrStrStatCurrentOutDiscdUnsupEncaps=nncFrStrStatCurrentOutDiscdUnsupEncaps, nncFrPVCEndptStatCurrentInDiscdDESet=nncFrPVCEndptStatCurrentInDiscdDESet, nncFrStrStatCurrentEntry=nncFrStrStatCurrentEntry, nncFrStrStatIntervalInAborts=nncFrStrStatIntervalInAborts, nncFrStrStatCurrentSigUserChanInactive=nncFrStrStatCurrentSigUserChanInactive)
