#
# PySNMP MIB module NBS-OSA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NBS-OSA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:17:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
ifAlias, = mibBuilder.importSymbols("IF-MIB", "ifAlias")
nbs, = mibBuilder.importSymbols("NBS-CMMC-MIB", "nbs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, TimeTicks, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, IpAddress, NotificationType, Counter64, ObjectIdentity, iso, Integer32, Gauge32, MibIdentifier, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "TimeTicks", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "IpAddress", "NotificationType", "Counter64", "ObjectIdentity", "iso", "Integer32", "Gauge32", "MibIdentifier", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
nbsOsaMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 629, 207))
if mibBuilder.loadTexts: nbsOsaMib.setLastUpdated('200912090000Z')
if mibBuilder.loadTexts: nbsOsaMib.setOrganization('NBS')
if mibBuilder.loadTexts: nbsOsaMib.setContactInfo('For technical support, please contact your service channel')
if mibBuilder.loadTexts: nbsOsaMib.setDescription('MIB for controlling and monitoring optical spectrum analyzers')
class InterfaceIndex(Integer32):
    pass

nbsOsaPortGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 207, 1))
if mibBuilder.loadTexts: nbsOsaPortGrp.setStatus('current')
if mibBuilder.loadTexts: nbsOsaPortGrp.setDescription('OSA Card information')
nbsOsaSpectrumGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 207, 2))
if mibBuilder.loadTexts: nbsOsaSpectrumGrp.setStatus('current')
if mibBuilder.loadTexts: nbsOsaSpectrumGrp.setDescription('Info and settings for channels')
nbsOsaChannelGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 207, 3))
if mibBuilder.loadTexts: nbsOsaChannelGrp.setStatus('current')
if mibBuilder.loadTexts: nbsOsaChannelGrp.setDescription('Info and settings for channels')
nbsOsaTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 207, 4))
if mibBuilder.loadTexts: nbsOsaTraps.setStatus('current')
if mibBuilder.loadTexts: nbsOsaTraps.setDescription('SNMP Traps or Notifications')
nbsOsaPortTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 207, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOsaPortTableSize.setStatus('current')
if mibBuilder.loadTexts: nbsOsaPortTableSize.setDescription('The number of entries in nbsOsaPortTable.')
nbsOsaPortTable = MibTable((1, 3, 6, 1, 4, 1, 629, 207, 1, 2), )
if mibBuilder.loadTexts: nbsOsaPortTable.setStatus('current')
if mibBuilder.loadTexts: nbsOsaPortTable.setDescription('')
nbsOsaPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 207, 1, 2, 1), ).setIndexNames((0, "NBS-OSA-MIB", "nbsOsaPortIfIndex"))
if mibBuilder.loadTexts: nbsOsaPortEntry.setStatus('current')
if mibBuilder.loadTexts: nbsOsaPortEntry.setDescription('')
nbsOsaPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 207, 1, 2, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: nbsOsaPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsOsaPortIfIndex.setDescription('The Mib2 ifIndex of the optical spectrum analyzer port')
nbsOsaPortAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 207, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100000, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsOsaPortAttenuation.setStatus('current')
if mibBuilder.loadTexts: nbsOsaPortAttenuation.setDescription('Attenuation subtracted from RxPower readings, in millidecibels (mdB). When SET, agent immediately clears nbsOsaChannelTable and nbsOsaSpectrumTable entries for this ifIndex.')
nbsOsaPortChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 207, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOsaPortChannels.setStatus('current')
if mibBuilder.loadTexts: nbsOsaPortChannels.setDescription('The number of nbsOsaChannelTable entries for this port.')
nbsOsaSpectrumTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 207, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOsaSpectrumTableSize.setStatus('current')
if mibBuilder.loadTexts: nbsOsaSpectrumTableSize.setDescription('The number of entries in nbsOsaSpectrumTable.')
nbsOsaSpectrumTable = MibTable((1, 3, 6, 1, 4, 1, 629, 207, 2, 2), )
if mibBuilder.loadTexts: nbsOsaSpectrumTable.setStatus('current')
if mibBuilder.loadTexts: nbsOsaSpectrumTable.setDescription('Table of supported channels, their signal strength, and user-configured thresholds.')
nbsOsaSpectrumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 207, 2, 2, 1), ).setIndexNames((0, "NBS-OSA-MIB", "nbsOsaSpectrumIfIndex"), (0, "NBS-OSA-MIB", "nbsOsaSpectrumWavelength"))
if mibBuilder.loadTexts: nbsOsaSpectrumEntry.setStatus('current')
if mibBuilder.loadTexts: nbsOsaSpectrumEntry.setDescription('Reports status of monitored frequencies.')
nbsOsaSpectrumIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 207, 2, 2, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: nbsOsaSpectrumIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsOsaSpectrumIfIndex.setDescription('The Mib2 ifIndex of the optical spectrum analyzer port')
nbsOsaSpectrumWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 207, 2, 2, 1, 3), Integer32())
if mibBuilder.loadTexts: nbsOsaSpectrumWavelength.setStatus('current')
if mibBuilder.loadTexts: nbsOsaSpectrumWavelength.setDescription('The measured wavelength, in picometers (pm).')
nbsOsaSpectrumTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 207, 2, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOsaSpectrumTimestamp.setStatus('current')
if mibBuilder.loadTexts: nbsOsaSpectrumTimestamp.setDescription('Value of sysUptime when this table row was last updated.')
nbsOsaSpectrumRxPowerOper = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 207, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOsaSpectrumRxPowerOper.setStatus('current')
if mibBuilder.loadTexts: nbsOsaSpectrumRxPowerOper.setDescription('The last known signal strength, in millidecibels (mdBm), of this channel.')
nbsOsaChannelTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 207, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOsaChannelTableSize.setStatus('current')
if mibBuilder.loadTexts: nbsOsaChannelTableSize.setDescription('The number of entries in nbsOsaChannelTable.')
nbsOsaChannelTable = MibTable((1, 3, 6, 1, 4, 1, 629, 207, 3, 2), )
if mibBuilder.loadTexts: nbsOsaChannelTable.setStatus('current')
if mibBuilder.loadTexts: nbsOsaChannelTable.setDescription('Table of supported channels, their signal strength, and user-configured thresholds.')
nbsOsaChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 207, 3, 2, 1), ).setIndexNames((0, "NBS-OSA-MIB", "nbsOsaChannelIfIndex"), (0, "NBS-OSA-MIB", "nbsOsaChannelFrequencyNominal"))
if mibBuilder.loadTexts: nbsOsaChannelEntry.setStatus('current')
if mibBuilder.loadTexts: nbsOsaChannelEntry.setDescription('Reports status of monitored frequencies.')
nbsOsaChannelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 207, 3, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: nbsOsaChannelIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsOsaChannelIfIndex.setDescription('The Mib2 ifIndex of the optical spectrum analyzer port')
nbsOsaChannelFrequencyNominal = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 207, 3, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: nbsOsaChannelFrequencyNominal.setStatus('current')
if mibBuilder.loadTexts: nbsOsaChannelFrequencyNominal.setDescription('The nominal frequency, in MHz, of this channel.')
nbsOsaChannelBand = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 207, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cBand", 1), ("hBand", 2), ("lBand", 3), ("qBand", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOsaChannelBand.setStatus('current')
if mibBuilder.loadTexts: nbsOsaChannelBand.setDescription("The ITU grid labels DWDM channels with a letter 'band' and a numeric channel. Within this mib, the band is indicated by this object, and the channel number is shown in the object nbsOsaChannelNumber. Frequencies of at least 180100 GHz but less than 190100 GHz are considered the L spectrum, and frequencies of at least 190100 but less than 200100 GHz are considered the C spectrum. Frequencies evenly divisible by 100 GHz are designated with a 'C' or 'L' prepended to the channel number. Frequencies that are offset by 50 GHz are designated 'H' within the C spectrum, and 'Q' within the L spectrum.")
nbsOsaChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 207, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOsaChannelNumber.setStatus('current')
if mibBuilder.loadTexts: nbsOsaChannelNumber.setDescription('The channel number can be derived by extracting the two middle digits from the six digit frequency in GHz.')
nbsOsaChannelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 207, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absent", 1), ("present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOsaChannelStatus.setStatus('current')
if mibBuilder.loadTexts: nbsOsaChannelStatus.setDescription('If the OSA thinks the channel is there or not.')
nbsOsaChannelTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 207, 3, 2, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOsaChannelTimestamp.setStatus('current')
if mibBuilder.loadTexts: nbsOsaChannelTimestamp.setDescription('Value of sysUptime when this table row was last updated.')
nbsOsaChannelFrequencyOper = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 207, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOsaChannelFrequencyOper.setStatus('current')
if mibBuilder.loadTexts: nbsOsaChannelFrequencyOper.setDescription('The measured frequency, in MHz, of this channel.')
nbsOsaChannelRxPowerOper = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 207, 3, 2, 1, 8), Integer32().clone(-100000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOsaChannelRxPowerOper.setStatus('current')
if mibBuilder.loadTexts: nbsOsaChannelRxPowerOper.setDescription('The last known signal strength, in millidecibels (mdBm), of this channel.')
nbsOsaChannelRxPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 207, 3, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsOsaChannelRxPowerMin.setStatus('current')
if mibBuilder.loadTexts: nbsOsaChannelRxPowerMin.setDescription('The user-specified minimum signal strength, in millidecibels (mdBm), of this channel.')
nbsOsaChannelRxPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 207, 3, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsOsaChannelRxPowerMax.setStatus('current')
if mibBuilder.loadTexts: nbsOsaChannelRxPowerMax.setDescription('The user-specified maximum signal strength, in millidecibels (mdBm), of this channel.')
nbsOsaChannelOSNROper = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 207, 3, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOsaChannelOSNROper.setStatus('current')
if mibBuilder.loadTexts: nbsOsaChannelOSNROper.setDescription('The last known OSNR, in permil, of this channel.')
nbsOsaChannelOSNRMin = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 207, 3, 2, 1, 12), Integer32().clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsOsaChannelOSNRMin.setStatus('current')
if mibBuilder.loadTexts: nbsOsaChannelOSNRMin.setDescription('The user-specified minimum OSNR of this channel')
nbsOsaChannelOSNRMax = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 207, 3, 2, 1, 13), Integer32().clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsOsaChannelOSNRMax.setStatus('current')
if mibBuilder.loadTexts: nbsOsaChannelOSNRMax.setDescription('The user-specified maximum OSNR of this channel')
nbsOsaTrapPortChannelAdded = NotificationType((1, 3, 6, 1, 4, 1, 629, 207, 4, 1)).setObjects(("NBS-OSA-MIB", "nbsOsaChannelIfIndex"), ("IF-MIB", "ifAlias"), ("NBS-OSA-MIB", "nbsOsaChannelBand"), ("NBS-OSA-MIB", "nbsOsaChannelNumber"), ("NBS-OSA-MIB", "nbsOsaChannelFrequencyNominal"))
if mibBuilder.loadTexts: nbsOsaTrapPortChannelAdded.setStatus('current')
if mibBuilder.loadTexts: nbsOsaTrapPortChannelAdded.setDescription('Sent when optical spectrum analyser first detects a channel. This Notification should be of Severity ERROR.')
nbsOsaTrapPortChannelDropped = NotificationType((1, 3, 6, 1, 4, 1, 629, 207, 4, 2)).setObjects(("NBS-OSA-MIB", "nbsOsaChannelIfIndex"), ("IF-MIB", "ifAlias"), ("NBS-OSA-MIB", "nbsOsaChannelBand"), ("NBS-OSA-MIB", "nbsOsaChannelNumber"), ("NBS-OSA-MIB", "nbsOsaChannelFrequencyNominal"))
if mibBuilder.loadTexts: nbsOsaTrapPortChannelDropped.setStatus('current')
if mibBuilder.loadTexts: nbsOsaTrapPortChannelDropped.setDescription('Sent when optical spectrum analyser stops detecting a channel. This Notification should be of Severity ERROR.')
nbsOsaTrapPortRxPowerTooLow = NotificationType((1, 3, 6, 1, 4, 1, 629, 207, 4, 3)).setObjects(("NBS-OSA-MIB", "nbsOsaChannelIfIndex"), ("IF-MIB", "ifAlias"), ("NBS-OSA-MIB", "nbsOsaChannelBand"), ("NBS-OSA-MIB", "nbsOsaChannelNumber"), ("NBS-OSA-MIB", "nbsOsaChannelRxPowerMin"), ("NBS-OSA-MIB", "nbsOsaChannelRxPowerOper"))
if mibBuilder.loadTexts: nbsOsaTrapPortRxPowerTooLow.setStatus('current')
if mibBuilder.loadTexts: nbsOsaTrapPortRxPowerTooLow.setDescription('Sent when RxPower is lower then the configured threshold. This Notification should be of Severity ERROR.')
nbsOsaTrapPortRxPowerOK = NotificationType((1, 3, 6, 1, 4, 1, 629, 207, 4, 4)).setObjects(("NBS-OSA-MIB", "nbsOsaChannelIfIndex"), ("IF-MIB", "ifAlias"), ("NBS-OSA-MIB", "nbsOsaChannelBand"), ("NBS-OSA-MIB", "nbsOsaChannelNumber"), ("NBS-OSA-MIB", "nbsOsaChannelRxPowerOper"))
if mibBuilder.loadTexts: nbsOsaTrapPortRxPowerOK.setStatus('current')
if mibBuilder.loadTexts: nbsOsaTrapPortRxPowerOK.setDescription('Sent when RxPower is OK. This Notification should be of Severity ERROR.')
nbsOsaTrapPortRxPowerTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 629, 207, 4, 5)).setObjects(("NBS-OSA-MIB", "nbsOsaChannelIfIndex"), ("IF-MIB", "ifAlias"), ("NBS-OSA-MIB", "nbsOsaChannelBand"), ("NBS-OSA-MIB", "nbsOsaChannelNumber"), ("NBS-OSA-MIB", "nbsOsaChannelRxPowerMax"), ("NBS-OSA-MIB", "nbsOsaChannelRxPowerOper"))
if mibBuilder.loadTexts: nbsOsaTrapPortRxPowerTooHigh.setStatus('current')
if mibBuilder.loadTexts: nbsOsaTrapPortRxPowerTooHigh.setDescription('Sent when RxPower is higher then the configured threshold. This Notification should be of Severity ERROR.')
nbsOsaTrapPortOSNRTooLow = NotificationType((1, 3, 6, 1, 4, 1, 629, 207, 4, 6)).setObjects(("NBS-OSA-MIB", "nbsOsaChannelIfIndex"), ("IF-MIB", "ifAlias"), ("NBS-OSA-MIB", "nbsOsaChannelBand"), ("NBS-OSA-MIB", "nbsOsaChannelNumber"), ("NBS-OSA-MIB", "nbsOsaChannelOSNRMin"), ("NBS-OSA-MIB", "nbsOsaChannelOSNROper"))
if mibBuilder.loadTexts: nbsOsaTrapPortOSNRTooLow.setStatus('current')
if mibBuilder.loadTexts: nbsOsaTrapPortOSNRTooLow.setDescription('Sent when OSNR is lower then the configured threshold. This Notification should be of Severity ERROR.')
nbsOsaTrapPortOSNROK = NotificationType((1, 3, 6, 1, 4, 1, 629, 207, 4, 7)).setObjects(("NBS-OSA-MIB", "nbsOsaChannelIfIndex"), ("IF-MIB", "ifAlias"), ("NBS-OSA-MIB", "nbsOsaChannelBand"), ("NBS-OSA-MIB", "nbsOsaChannelNumber"), ("NBS-OSA-MIB", "nbsOsaChannelOSNROper"))
if mibBuilder.loadTexts: nbsOsaTrapPortOSNROK.setStatus('current')
if mibBuilder.loadTexts: nbsOsaTrapPortOSNROK.setDescription('Sent when OSNR is ok. This Notification should be of Severity ERROR.')
nbsOsaTrapPortOSNRTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 629, 207, 4, 8)).setObjects(("NBS-OSA-MIB", "nbsOsaChannelIfIndex"), ("IF-MIB", "ifAlias"), ("NBS-OSA-MIB", "nbsOsaChannelBand"), ("NBS-OSA-MIB", "nbsOsaChannelNumber"), ("NBS-OSA-MIB", "nbsOsaChannelOSNRMax"), ("NBS-OSA-MIB", "nbsOsaChannelOSNROper"))
if mibBuilder.loadTexts: nbsOsaTrapPortOSNRTooHigh.setStatus('current')
if mibBuilder.loadTexts: nbsOsaTrapPortOSNRTooHigh.setDescription('Sent when OSNR is higher then the configured threshold. This Notification should be of Severity ERROR.')
mibBuilder.exportSymbols("NBS-OSA-MIB", nbsOsaSpectrumTableSize=nbsOsaSpectrumTableSize, nbsOsaChannelNumber=nbsOsaChannelNumber, nbsOsaChannelEntry=nbsOsaChannelEntry, nbsOsaSpectrumTimestamp=nbsOsaSpectrumTimestamp, nbsOsaPortGrp=nbsOsaPortGrp, nbsOsaPortTableSize=nbsOsaPortTableSize, nbsOsaTrapPortOSNRTooLow=nbsOsaTrapPortOSNRTooLow, nbsOsaPortIfIndex=nbsOsaPortIfIndex, nbsOsaMib=nbsOsaMib, PYSNMP_MODULE_ID=nbsOsaMib, nbsOsaChannelTable=nbsOsaChannelTable, nbsOsaPortTable=nbsOsaPortTable, nbsOsaTrapPortOSNRTooHigh=nbsOsaTrapPortOSNRTooHigh, nbsOsaSpectrumIfIndex=nbsOsaSpectrumIfIndex, nbsOsaChannelGrp=nbsOsaChannelGrp, nbsOsaTrapPortRxPowerOK=nbsOsaTrapPortRxPowerOK, nbsOsaTraps=nbsOsaTraps, nbsOsaTrapPortRxPowerTooHigh=nbsOsaTrapPortRxPowerTooHigh, nbsOsaChannelFrequencyOper=nbsOsaChannelFrequencyOper, InterfaceIndex=InterfaceIndex, nbsOsaPortAttenuation=nbsOsaPortAttenuation, nbsOsaChannelRxPowerMax=nbsOsaChannelRxPowerMax, nbsOsaSpectrumWavelength=nbsOsaSpectrumWavelength, nbsOsaChannelRxPowerMin=nbsOsaChannelRxPowerMin, nbsOsaChannelFrequencyNominal=nbsOsaChannelFrequencyNominal, nbsOsaTrapPortOSNROK=nbsOsaTrapPortOSNROK, nbsOsaSpectrumRxPowerOper=nbsOsaSpectrumRxPowerOper, nbsOsaTrapPortChannelAdded=nbsOsaTrapPortChannelAdded, nbsOsaChannelBand=nbsOsaChannelBand, nbsOsaChannelTimestamp=nbsOsaChannelTimestamp, nbsOsaSpectrumTable=nbsOsaSpectrumTable, nbsOsaChannelOSNROper=nbsOsaChannelOSNROper, nbsOsaTrapPortChannelDropped=nbsOsaTrapPortChannelDropped, nbsOsaChannelRxPowerOper=nbsOsaChannelRxPowerOper, nbsOsaTrapPortRxPowerTooLow=nbsOsaTrapPortRxPowerTooLow, nbsOsaChannelOSNRMax=nbsOsaChannelOSNRMax, nbsOsaChannelTableSize=nbsOsaChannelTableSize, nbsOsaChannelOSNRMin=nbsOsaChannelOSNRMin, nbsOsaChannelIfIndex=nbsOsaChannelIfIndex, nbsOsaPortEntry=nbsOsaPortEntry, nbsOsaSpectrumEntry=nbsOsaSpectrumEntry, nbsOsaSpectrumGrp=nbsOsaSpectrumGrp, nbsOsaChannelStatus=nbsOsaChannelStatus, nbsOsaPortChannels=nbsOsaPortChannels)
