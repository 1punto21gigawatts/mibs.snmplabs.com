#
# PySNMP MIB module WebGraph-AnalogIO-57661-US-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WebGraph-AnalogIO-57661-US-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:39:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, ObjectIdentity, IpAddress, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32, Unsigned32, enterprises, Gauge32, Counter32, iso, ModuleIdentity, NotificationType, MibIdentifier, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ObjectIdentity", "IpAddress", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32", "Unsigned32", "enterprises", "Gauge32", "Counter32", "iso", "ModuleIdentity", "NotificationType", "MibIdentifier", "TimeTicks")
TextualConvention, PhysAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "PhysAddress", "DisplayString")
wut = MibIdentifier((1, 3, 6, 1, 4, 1, 5040))
wtComServer = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1))
wtWebio = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2))
wtWebGraphAnalog57661 = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28))
wtWebGraphAnalog57661Inventory = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 1))
wtWebGraphAnalog57661SessCntrl = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 2))
wtWebGraphAnalog57661Config = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3))
wtWebGraphAnalog57661Diag = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 4))
wtWebGraphAnalog57661Device = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1))
wtWebGraphAnalog57661Ports = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 2))
wtWebGraphAnalog57661Manufact = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 3))
wtWebGraphAnalog57661Text = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 1))
wtWebGraphAnalog57661TimeDate = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 2))
wtWebGraphAnalog57661Basic = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3))
wtWebGraphAnalog57661Datalogger = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 4))
wtWebGraphAnalog57661Alarm = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5))
wtWebGraphAnalog57661Graphics = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 6))
wtWebGraphAnalog57661Report = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 7))
wtWebGraphAnalog57661TimeZone = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 2, 1))
wtWebGraphAnalog57661TimeServer = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 2, 2))
wtWebGraphAnalog57661DeviceClock = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 2, 3))
wtWebGraphAnalog57661Network = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 1))
wtWebGraphAnalog57661HTTP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 2))
wtWebGraphAnalog57661Mail = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 3))
wtWebGraphAnalog57661SNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 4))
wtWebGraphAnalog57661UDP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 5))
wtWebGraphAnalog57661Syslog = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 6))
wtWebGraphAnalog57661FTP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 7))
wtWebGraphAnalog57661Language = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 8))
wtWebGraphAnalog57661Binary = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 9))
wtWebGraphAnalog57661GraphicsBase = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 6, 1))
wtWebGraphAnalog57661GraphicsSelect = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 6, 2))
wtWebGraphAnalog57661GraphicsScale = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 6, 3))
wtWebGraphAnalog57661Sensors = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphAnalog57661Sensors.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661Sensors.setDescription('Number of sensors')
wtWebGraphAnalog57661SensorTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 1, 2), )
if mibBuilder.loadTexts: wtWebGraphAnalog57661SensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661SensorTable.setDescription('List of sensors.')
wtWebGraphAnalog57661SensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 1, 2, 1), ).setIndexNames((0, "WebGraph-AnalogIO-57661-US-MIB", "wtWebGraphAnalog57661SensorNo"))
if mibBuilder.loadTexts: wtWebGraphAnalog57661SensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661SensorEntry.setDescription('List of sensor numbers.')
wtWebGraphAnalog57661SensorNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphAnalog57661SensorNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661SensorNo.setDescription('Sensor number.')
wtWebGraphAnalog57661ValuesTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 1, 3), )
if mibBuilder.loadTexts: wtWebGraphAnalog57661ValuesTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661ValuesTable.setDescription('List of measurement values corresponding to the channel numbers.')
wtWebGraphAnalog57661ValuesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 1, 3, 1), ).setIndexNames((0, "WebGraph-AnalogIO-57661-US-MIB", "wtWebGraphAnalog57661SensorNo"))
if mibBuilder.loadTexts: wtWebGraphAnalog57661ValuesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661ValuesEntry.setDescription('Measurement values of the sensors.')
wtWebGraphAnalog57661Values = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 1, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661Values.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661Values.setDescription('Measurement value of the sensor, ASCII. This value will be translated according to the ports settings for the read and write operations.')
wtWebGraphAnalog57661BinaryValuesTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 1, 4), )
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryValuesTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryValuesTable.setDescription('List of binary measurement values corresponding to the channel numbers.')
wtWebGraphAnalog57661BinaryValuesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 1, 4, 1), ).setIndexNames((0, "WebGraph-AnalogIO-57661-US-MIB", "wtWebGraphAnalog57661SensorNo"))
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryValuesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryValuesEntry.setDescription('Binary measurement values of the sensors.')
wtWebGraphAnalog57661BinaryValues = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 1, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryValues.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryValues.setDescription('Binary measurement value of the sensor in 1/1000, signed number, 0x7FFFFFFF indicates an invalid value. This value will be translated according to the ports settings for the read and write operations.')
wtWebGraphAnalog57661SessCntrlPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661SessCntrlPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661SessCntrlPassword.setDescription('Entering this password opens a session which is ended by writing a 1 to wtWebGraphAnalog57661SessCntrlLogout. When read this variable provides a string of length zero.')
wtWebGraphAnalog57661SessCntrlConfigMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtWebGraphAnalog57661SessCntrl-NoSession", 0), ("wtWebGraphAnalog57661SessCntrl-Session", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphAnalog57661SessCntrlConfigMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661SessCntrlConfigMode.setDescription('When the device is in SNMP configuration mode, the value 1 is returned, otherwise 0. If the read value is 0 even though the password was written, the device is already in config mode and the variables can only be read.')
wtWebGraphAnalog57661SessCntrlLogout = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661SessCntrlLogout.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661SessCntrlLogout.setDescription('If the device is in configuration mode and the session was opened by this SNMP Manager, writing a 1 to this variable will end the session and all parameters are stored. Writing a 2 discards all entries again. When read this variable provides the value 0.')
wtWebGraphAnalog57661SessCntrlAdminPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 2, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661SessCntrlAdminPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661SessCntrlAdminPassword.setDescription('This password protects access to the variables with administrator rights. It can only be changed by the administrator. If no password was assigned, the valid password is public.')
wtWebGraphAnalog57661SessCntrlConfigPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 2, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661SessCntrlConfigPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661SessCntrlConfigPassword.setDescription('This password protects access to the variables with configurator rights. It can be changed by the administrator and by the configurator. If no password was assigned, the valid password is public. When read this variable provides a null-pointer.')
wtWebGraphAnalog57661DeviceName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661DeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661DeviceName.setDescription('Name of the Webio, which is user definable.')
wtWebGraphAnalog57661DeviceText = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661DeviceText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661DeviceText.setDescription('Description of the Webio, which is user definable.')
wtWebGraphAnalog57661DeviceLocation = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661DeviceLocation.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661DeviceLocation.setDescription('Description of the location of the Webio, which is user definable.')
wtWebGraphAnalog57661DeviceContact = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661DeviceContact.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661DeviceContact.setDescription('Contact address of the system operator of the Webio, which is user definable.')
wtWebGraphAnalog57661TzOffsetHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661TzOffsetHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661TzOffsetHrs.setDescription('Offset hours for the time zone (winter time) with respect to UTC.')
wtWebGraphAnalog57661TzOffsetMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661TzOffsetMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661TzOffsetMin.setDescription('Offset minutes for the time zone (winter time) with respect to UTC.')
wtWebGraphAnalog57661TzEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661TzEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661TzEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Timezone')
wtWebGraphAnalog57661StTzOffsetHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661StTzOffsetHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661StTzOffsetHrs.setDescription('Offset hours of the time zone (summer time) with respect to UTC.')
wtWebGraphAnalog57661StTzOffsetMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661StTzOffsetMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661StTzOffsetMin.setDescription('Offset minutes of the time zone (summer time) with respect to UTC.')
wtWebGraphAnalog57661StTzEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661StTzEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661StTzEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Summertime')
wtWebGraphAnalog57661StTzStartMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtWebGraphAnalog57661StartMonth-January", 1), ("wtWebGraphAnalog57661StartMonth-February", 2), ("wtWebGraphAnalog57661StartMonth-March", 3), ("wtWebGraphAnalog57661StartMonth-April", 4), ("wtWebGraphAnalog57661StartMonth-May", 5), ("wtWebGraphAnalog57661StartMonth-June", 6), ("wtWebGraphAnalog57661StartMonth-July", 7), ("wtWebGraphAnalog57661StartMonth-August", 8), ("wtWebGraphAnalog57661StartMonth-September", 9), ("wtWebGraphAnalog57661StartMonth-October", 10), ("wtWebGraphAnalog57661StartMonth-November", 11), ("wtWebGraphAnalog57661StartMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661StTzStartMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661StTzStartMonth.setDescription('Month in which the change is made from winter time to summer time.')
wtWebGraphAnalog57661StTzStartMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("wtWebGraphAnalog57661StartMode-first", 1), ("wtWebGraphAnalog57661StartMode-second", 2), ("wtWebGraphAnalog57661StartMode-third", 3), ("wtWebGraphAnalog57661StartMode-fourth", 4), ("wtWebGraphAnalog57661StartMode-last", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661StTzStartMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661StTzStartMode.setDescription('Mode of the day of the week for which the change is made from winter time to summer time.')
wtWebGraphAnalog57661StTzStartWday = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("wtWebGraphAnalog57661StartWday-Sunday", 1), ("wtWebGraphAnalog57661StartWday-Monday", 2), ("wtWebGraphAnalog57661StartWday-Tuesday", 3), ("wtWebGraphAnalog57661StartWday-Thursday", 4), ("wtWebGraphAnalog57661StartWday-Wednesday", 5), ("wtWebGraphAnalog57661StartWday-Friday", 6), ("wtWebGraphAnalog57661StartWday-Saturday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661StTzStartWday.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661StTzStartWday.setDescription('Day of the week on which the change is made from winter time to summer time')
wtWebGraphAnalog57661StTzStartHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661StTzStartHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661StTzStartHrs.setDescription('Hour in which the time zone is changed from winter to summer time with respect to UTC.')
wtWebGraphAnalog57661StTzStartMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661StTzStartMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661StTzStartMin.setDescription('Minute in which the time zone is changed from winter to summer time with respect to UTC.')
wtWebGraphAnalog57661StTzStopMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtWebGraphAnalog57661StopMonth-January", 1), ("wtWebGraphAnalog57661StopMonth-February", 2), ("wtWebGraphAnalog57661StopMonth-March", 3), ("wtWebGraphAnalog57661StopMonth-April", 4), ("wtWebGraphAnalog57661StopMonth-May", 5), ("wtWebGraphAnalog57661StopMonth-June", 6), ("wtWebGraphAnalog57661StopMonth-July", 7), ("wtWebGraphAnalog57661StopMonth-August", 8), ("wtWebGraphAnalog57661StopMonth-September", 9), ("wtWebGraphAnalog57661StopMonth-October", 10), ("wtWebGraphAnalog57661StopMonth-November", 11), ("wtWebGraphAnalog57661StopMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661StTzStopMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661StTzStopMonth.setDescription('Month in which the change is made from summer time to winter time.')
wtWebGraphAnalog57661StTzStopMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("wtWebGraphAnalog57661StopMode-first", 1), ("wtWebGraphAnalog57661StopMode-second", 2), ("wtWebGraphAnalog57661StopMode-third", 3), ("wtWebGraphAnalog57661StopMode-fourth", 4), ("wtWebGraphAnalog57661StopMode-last", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661StTzStopMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661StTzStopMode.setDescription('Mode of the week day on which the change is made from summer time to winter time.')
wtWebGraphAnalog57661StTzStopWday = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("wtWebGraphAnalog57661StopWday-Sunday", 1), ("wtWebGraphAnalog57661StopWday-Monday", 2), ("wtWebGraphAnalog57661StopWday-Tuesday", 3), ("wtWebGraphAnalog57661StopWday-Thursday", 4), ("wtWebGraphAnalog57661StopWday-Wednesday", 5), ("wtWebGraphAnalog57661StopWday-Friday", 6), ("wtWebGraphAnalog57661StopWday-Saturday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661StTzStopWday.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661StTzStopWday.setDescription('Day of the week on which the change is made from summer time to winter time.')
wtWebGraphAnalog57661StTzStopHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661StTzStopHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661StTzStopHrs.setDescription('Hour at which the time zone is changed from summer to winter time with respect to UTC.')
wtWebGraphAnalog57661StTzStopMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661StTzStopMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661StTzStopMin.setDescription('Minute at which the time zone is changed from summer to winter time with respect to UTC.')
wtWebGraphAnalog57661TimeServer1 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 2, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661TimeServer1.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661TimeServer1.setDescription('IP address or name of the 1st time server in ASCII')
wtWebGraphAnalog57661TimeServer2 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 2, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661TimeServer2.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661TimeServer2.setDescription('IP address or name of the 2nd time server in ASCII')
wtWebGraphAnalog57661TsEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 2, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661TsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661TsEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Time Server')
wtWebGraphAnalog57661TsSyncTime = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 2, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661TsSyncTime.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661TsSyncTime.setDescription('Daily synchronisation time with the time server (hour: 0-23).')
wtWebGraphAnalog57661ClockHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661ClockHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661ClockHrs.setDescription('Clock hours taking into account the time zone settings.')
wtWebGraphAnalog57661ClockMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661ClockMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661ClockMin.setDescription('Clock minutes taking into account the time zone settings.')
wtWebGraphAnalog57661ClockDay = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661ClockDay.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661ClockDay.setDescription('Date: Day of the month, taking into account the time zone settings.')
wtWebGraphAnalog57661ClockMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtWebGraphAnalog57661ClockMonth-January", 1), ("wtWebGraphAnalog57661ClockMonth-February", 2), ("wtWebGraphAnalog57661ClockMonth-March", 3), ("wtWebGraphAnalog57661ClockMonth-April", 4), ("wtWebGraphAnalog57661ClockMonth-May", 5), ("wtWebGraphAnalog57661ClockMonth-June", 6), ("wtWebGraphAnalog57661ClockMonth-July", 7), ("wtWebGraphAnalog57661ClockMonth-August", 8), ("wtWebGraphAnalog57661ClockMonth-September", 9), ("wtWebGraphAnalog57661ClockMonth-October", 10), ("wtWebGraphAnalog57661ClockMonth-November", 11), ("wtWebGraphAnalog57661ClockMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661ClockMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661ClockMonth.setDescription('Date: Month, taking into account the time zone settings.')
wtWebGraphAnalog57661ClockYear = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 2, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661ClockYear.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661ClockYear.setDescription('Date: Year, taking into account the time zone settings.')
wtWebGraphAnalog57661IpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661IpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661IpAddress.setDescription('IP address of the Webio')
wtWebGraphAnalog57661SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661SubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661SubnetMask.setDescription('Subnet mask of the Webio')
wtWebGraphAnalog57661Gateway = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661Gateway.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661Gateway.setDescription('Gateway of the Webio')
wtWebGraphAnalog57661DnsServer1 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661DnsServer1.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661DnsServer1.setDescription('IP address of the 1st DNS server in ASCII')
wtWebGraphAnalog57661DnsServer2 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661DnsServer2.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661DnsServer2.setDescription('IP address of the 2nd DNS server in ASCII')
wtWebGraphAnalog57661AddConfig = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661AddConfig.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AddConfig.setDescription('Additional configuration (1=ON): Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1: DHCP disable Bit 0: BOOTP disable ')
wtWebGraphAnalog57661Startup = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661Startup.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661Startup.setDescription('Binary coded start page: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1: Index.htm Bit 2: Home.htm Bit 3: User.htm Only one page may be selected at a time.')
wtWebGraphAnalog57661GetHeaderEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661GetHeaderEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661GetHeaderEnable.setDescription('If these bits are set, every answer of a short form GET question will be lead by the IP-address and name of the device and/or a HTTP header: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-6: unused Bit 1 : GET HTTP enable Bit 0 : GET Header enable')
wtWebGraphAnalog57661HttpPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661HttpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661HttpPort.setDescription('Definition of the standard HTML port (Default: 80).')
wtWebGraphAnalog57661MailAdName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661MailAdName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661MailAdName.setDescription('Device name for mail administration.')
wtWebGraphAnalog57661MailReply = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661MailReply.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661MailReply.setDescription('Reply address for the mail server.')
wtWebGraphAnalog57661MailServer = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661MailServer.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661MailServer.setDescription('Name or IP address of the mail server.')
wtWebioAn1MailEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioAn1MailEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioAn1MailEnable.setDescription('Set this bit to enable the sending of mails: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Mail enable')
wtWebGraphAnalog57661MailAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661MailAuthentication.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661MailAuthentication.setDescription('Selection of the authentication modi: The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : POP3 before SMTP Bit 1 : ESMTP, authentication Bit 0 : SMTP, no authentication')
wtWebGraphAnalog57661MailAuthUser = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 3, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661MailAuthUser.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661MailAuthUser.setDescription('Name of the user to be authenticated.')
wtWebGraphAnalog57661MailAuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 3, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661MailAuthPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661MailAuthPassword.setDescription('Authentication password.')
wtWebGraphAnalog57661MailPop3Server = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 3, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661MailPop3Server.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661MailPop3Server.setDescription('Name or Ip-address of the POP3 Servers.')
wtWebGraphAnalog57661SnmpCommunityStringRead = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 4, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661SnmpCommunityStringRead.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661SnmpCommunityStringRead.setDescription('Community string read only')
wtWebGraphAnalog57661SnmpCommunityStringReadWrite = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 4, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661SnmpCommunityStringReadWrite.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661SnmpCommunityStringReadWrite.setDescription('Community string read / write')
wtWebGraphAnalog57661SystemTrapManagerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 4, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661SystemTrapManagerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661SystemTrapManagerIP.setDescription('Name or IP address of the TCP server which accepts the system trap.')
wtWebGraphAnalog57661SystemTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 4, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661SystemTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661SystemTrapEnable.setDescription('Binary coded trigger conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: ColdStart Bit 1: WarmStart Bit 2-7: unused')
wtWebGraphAnalog57661SnmpEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 4, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661SnmpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661SnmpEnable.setDescription('Set bit 0 to enable SNMP. If disabled, the device did not respond to any SNMP requests. Bit 1 decided wether the community string of read operations is compared with the system password or not: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : SNMP enable')
wtWebGraphAnalog57661SnmpCommunityStringTrap = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 4, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661SnmpCommunityStringTrap.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661SnmpCommunityStringTrap.setDescription('Community string send within traps.')
wtWebGraphAnalog57661UdpPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661UdpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661UdpPort.setDescription('Udp port to which the Udp queries ( short form GET requests) can be sent. This port number must be unique within the device.')
wtWebGraphAnalog57661UdpEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 5, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661UdpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661UdpEnable.setDescription('Set this bit to enable UDP support: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : UDP enable')
wtWebGraphAnalog57661SyslogServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 6, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661SyslogServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661SyslogServerIP.setDescription('Name or IP address of the Syslog server, which accepts the Syslog messgaes.')
wtWebGraphAnalog57661SyslogServerPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661SyslogServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661SyslogServerPort.setDescription('Portnumber of the Syslog servers, default 514.')
wtWebGraphAnalog57661SyslogSystemMessagesEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 6, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661SyslogSystemMessagesEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661SyslogSystemMessagesEnable.setDescription('Binary coded trigger conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: ColdStart Bit 1: WarmStart Bit 2: Diag Messages Bit 3-7: unused')
wtWebGraphAnalog57661SyslogEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 6, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661SyslogEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661SyslogEnable.setDescription('Set bit 0to enable Syslog: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Syslog enable')
wtWebGraphAnalog57661FTPServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 7, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661FTPServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661FTPServerIP.setDescription('Name or IP address of the FTP server, which accepts the FTP messages.')
wtWebGraphAnalog57661FTPServerControlPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661FTPServerControlPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661FTPServerControlPort.setDescription('Portnumber of the control port of the FTP server, default 21.')
wtWebGraphAnalog57661FTPUserName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 7, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661FTPUserName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661FTPUserName.setDescription('FTP Loggin: user name.')
wtWebGraphAnalog57661FTPPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 7, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661FTPPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661FTPPassword.setDescription('FTP Loggin: user password.')
wtWebGraphAnalog57661FTPAccount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 7, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661FTPAccount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661FTPAccount.setDescription('FTP Loggin: name of account.')
wtWebGraphAnalog57661FTPOption = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 7, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661FTPOption.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661FTPOption.setDescription('Bit 0 switches the FTP Server in Passiv-Mode, the Client controls the data connection on its own: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : PASV enable')
wtWebGraphAnalog57661FTPEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 7, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661FTPEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661FTPEnable.setDescription('Set Bit 0 to enable FTP: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : FTP enable')
wtWebGraphAnalog57661LanguageSelect = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 8, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661LanguageSelect.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661LanguageSelect.setDescription('Language selection: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 2-7: unused Bit 1 : English Bit 0 : German')
wtWebGraphAnalog57661BinaryModeCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryModeCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryModeCount.setDescription('Number of independent binary channels.')
wtWebGraphAnalog57661BinaryIfTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 9, 2), )
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryIfTable.setDescription('Table of indices.')
wtWebGraphAnalog57661BinaryIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 9, 2, 1), ).setIndexNames((0, "WebGraph-AnalogIO-57661-US-MIB", "wtWebGraphAnalog57661BinaryModeNo"))
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryIfEntry.setDescription('Indices of the binary channels.')
wtWebGraphAnalog57661BinaryModeNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryModeNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryModeNo.setDescription('Number of the binary channel.')
wtWebGraphAnalog57661BinaryTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 9, 3), )
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryTable.setDescription('Table of properties of the binary mode.')
wtWebGraphAnalog57661BinaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 9, 3, 1), ).setIndexNames((0, "WebGraph-AnalogIO-57661-US-MIB", "wtWebGraphAnalog57661BinaryModeNo"))
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryEntry.setDescription('Binary properties.')
wtWebGraphAnalog57661BinaryOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 9, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryOperationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryOperationMode.setDescription('Selection of the operation mode: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : UDP Peer Bit 1 : TCP Client Bit 0 : TCP Server')
wtWebGraphAnalog57661BinaryTcpServerLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryTcpServerLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryTcpServerLocalPort.setDescription('Local TCP port for data exchange in this server mode. This port number must be unique within the device. Reserved port number must not be used (refere to the manual).')
wtWebGraphAnalog57661BinaryTcpServerInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 9, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryTcpServerInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryTcpServerInputTrigger.setDescription('Every change on the inputs causes their state to be transmitted to the remote device. To minimize data traffic, individual inputs may be exempted from this rule. Nevertheless every transmission will contain all input states. If a bit is set (1), a change of state on the corresponding input triggers a transmission. If the bit is not set (0), no transmission takes place. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 0-1: Analog inputs 0-1')
wtWebGraphAnalog57661BinaryTcpServerApplicationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 9, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryTcpServerApplicationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryTcpServerApplicationMode.setDescription('Selection of the application mode: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 4-7: unused Bit 3 : OPC Device Bit 2 : Box2Box Slave Bit 1 : Compatible 50xxx Bit 0 : Default')
wtWebGraphAnalog57661BinaryTcpClientLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryTcpClientLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryTcpClientLocalPort.setDescription('Local TCP port for data exchange in this client mode. This port number must be unique within the device. Reserved port number must not be used (refere to the manual).')
wtWebGraphAnalog57661BinaryTcpClientServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 9, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryTcpClientServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryTcpClientServerPort.setDescription('Port number of the server. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the server port to zero.')
wtWebGraphAnalog57661BinaryTcpClientServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 9, 3, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryTcpClientServerIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryTcpClientServerIpAddr.setDescription('Ip address of the server. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the server IP address to 0.0.0.0.')
wtWebGraphAnalog57661BinaryTcpClientServerPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 9, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryTcpClientServerPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryTcpClientServerPassword.setDescription('Building a connection may be protected by the administrator password of the server. Enter the server password to establish the connection, if a server administrator password exists.')
wtWebGraphAnalog57661BinaryTcpClientInactivity = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 9, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryTcpClientInactivity.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryTcpClientInactivity.setDescription('Connection timeout in 100ms. If no data are exchanged within the specified time, the device closes the connection to the server. The value 0 deactivates the timer. Using the Box2Box mode this function is disabled.')
wtWebGraphAnalog57661BinaryTcpClientInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 9, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryTcpClientInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryTcpClientInputTrigger.setDescription('Every change on the inputs causes their state to be transmitted to the remote device. To minimize data traffic, individual inputs may be exempted from this rule. Nevertheless every transmission will contain all input states. If a bit is set (1), a change of state on the corresponding input triggers a transmission. If the bit is not set (0), no transmission takes place. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 0-1: Analog inputs 0-1')
wtWebGraphAnalog57661BinaryTcpClientInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 9, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryTcpClientInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryTcpClientInterval.setDescription('Configurable interval with a 100ms base, in which the Webio device sends data to the configured application. A interval of zero stopps the periodical sending.')
wtWebGraphAnalog57661BinaryTcpClientApplicationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 9, 3, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryTcpClientApplicationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryTcpClientApplicationMode.setDescription('Selection of the application mode: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : Box2Box Slave Bit 1 : Compatible 50xxx Bit 0 : Default')
wtWebGraphAnalog57661BinaryUdpPeerLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 9, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryUdpPeerLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryUdpPeerLocalPort.setDescription('Local UDP port for data exchange in this peer to peer mode. This port number must be unique within the device. Reserved port number must not be used (refere to the manual).')
wtWebGraphAnalog57661BinaryUdpPeerRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 9, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryUdpPeerRemotePort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryUdpPeerRemotePort.setDescription('Port number of the remote device. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the remote port to zero.')
wtWebGraphAnalog57661BinaryUdpPeerRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 9, 3, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryUdpPeerRemoteIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryUdpPeerRemoteIpAddr.setDescription('Ip address of the remote device. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the remote device IP address to 0.0.0.0.')
wtWebGraphAnalog57661BinaryUdpPeerInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 9, 3, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryUdpPeerInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryUdpPeerInputTrigger.setDescription('Every change on the inputs causes their state to be transmitted to the remote device. To minimize data traffic, individual inputs may be exempted from this rule. Nevertheless every transmission will contain all input states. If a bit is set (1), a change of state on the corresponding input triggers a transmission. If the bit is not set (0), no transmission takes place. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 0-1: Analog inputs 0-1')
wtWebGraphAnalog57661BinaryUdpPeerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 9, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryUdpPeerInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryUdpPeerInterval.setDescription('Configurable interval with a 100ms base, in which the Webio device sends data to the configured remote device. A interval of zero stopps the periodical sending.')
wtWebGraphAnalog57661BinaryUdpPeerApplicationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 9, 3, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryUdpPeerApplicationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryUdpPeerApplicationMode.setDescription('Selection of the application mode: The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : Box2Box Slave Bit 1 : Compatible 50xxx Bit 0 : Default')
wtWebGraphAnalog57661BinaryConnectedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 9, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryConnectedPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryConnectedPort.setDescription('Port number of the remote device, after connection has been established. In case of no connection or missing port informations a zero will be read.')
wtWebGraphAnalog57661BinaryConnectedIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 9, 3, 1, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryConnectedIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryConnectedIpAddr.setDescription('IP address of the remote device, after connection has been established. In case of no connection or missing port informations 0.0.0.0 will be read.')
wtWebGraphAnalog57661BinaryTcpServerClientHttpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 9, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryTcpServerClientHttpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryTcpServerClientHttpPort.setDescription('HTTP port number of the remote device at TCP Server Mode. If an mailfunction occurs status informations will be send to this port. Not used at mode Compatible 50xxx.')
wtWebGraphAnalog57661BinaryTcpClientServerHttpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 9, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryTcpClientServerHttpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryTcpClientServerHttpPort.setDescription('HTTP port number of the remote device at TCP Client Mode. In the operating mode Box2Box connection status informations will be exchanged through this port.')
wtWebGraphAnalog57661BinaryTcpServerHysteresis1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 9, 3, 1, 23), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryTcpServerHysteresis1.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryTcpServerHysteresis1.setDescription('A change greater than this value initiate a transmission of the corresponding input value. The input 1 must be selected at wtWebGraphAnalog57661BinaryTcpServerInputTrigger. With a hysteresis of zero any change will be transmitted.')
wtWebGraphAnalog57661BinaryTcpServerHysteresis2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 9, 3, 1, 24), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryTcpServerHysteresis2.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryTcpServerHysteresis2.setDescription('A change greater than this value initiate a transmission of the corresponding input value. The input 2 must be selected at wtWebGraphAnalog57661BinaryTcpServerInputTrigger. With a hysteresis of zero any change will be transmitted.')
wtWebGraphAnalog57661BinaryTcpClientHysteresis1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 9, 3, 1, 25), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryTcpClientHysteresis1.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryTcpClientHysteresis1.setDescription('A change greater than this value initiate a transmission of the corresponding input value. The input 1 must be selected at wtWebGraphAnalog57661BinaryTcpClientInputTrigger. With a hysteresis of zero any change will be transmitted.')
wtWebGraphAnalog57661BinaryTcpClientHysteresis2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 9, 3, 1, 26), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryTcpClientHysteresis2.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryTcpClientHysteresis2.setDescription('A change greater than this value initiate a transmission of the corresponding input value. The input 2 must be selected at wtWebGraphAnalog57661BinaryTcpClientInputTrigger. With a hysteresis of zero any change will be transmitted.')
wtWebGraphAnalog57661BinaryUdpPeerHysteresis1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 9, 3, 1, 27), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryUdpPeerHysteresis1.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryUdpPeerHysteresis1.setDescription('A change greater than this value initiate a transmission of the corresponding input value. The input 1 must be selected at wtWebGraphAnalog57661BinaryUdpPeerInputTrigger. With a hysteresis of zero any change will be transmitted.')
wtWebGraphAnalog57661BinaryUdpPeerHysteresis2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 3, 9, 3, 1, 28), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryUdpPeerHysteresis2.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661BinaryUdpPeerHysteresis2.setDescription('A change greater than this value initiate a transmission of the corresponding input value. The input 2 must be selected at wtWebGraphAnalog57661BinaryUdpPeerInputTrigger. With a hysteresis of zero any change will be transmitted.')
wtWebGraphAnalog57661LoggerTimebase = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("wtWebGraphAnalog57661Datalogger-15Sec", 1), ("wtWebGraphAnalog57661Datalogger-30Sec", 2), ("wtWebGraphAnalog57661Datalogger-1Min", 3), ("wtWebGraphAnalog57661Datalogger-5Min", 4), ("wtWebGraphAnalog57661Datalogger-15Min", 5), ("wtWebGraphAnalog57661Datalogger-60Min", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661LoggerTimebase.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661LoggerTimebase.setDescription('Time base of the data logger')
wtWebGraphAnalog57661LoggerSensorSel = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 4, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661LoggerSensorSel.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661LoggerSensorSel.setDescription('Binary coded trigger conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: Sensor 1 Bit 1: Sensor 2 Bit 2-7: unused')
wtWebGraphAnalog57661DisplaySensorSel = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 4, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661DisplaySensorSel.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661DisplaySensorSel.setDescription('Binary coded sensor selection: only selected sensors will be shown in the graphical presentation: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: Sensor 1 Bit 1: Sensor 2 Bit 2-7: unused')
wtWebGraphAnalog57661SensorColorTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 4, 4), )
if mibBuilder.loadTexts: wtWebGraphAnalog57661SensorColorTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661SensorColorTable.setDescription('List of sensor colors for the praphical presentation.')
wtWebGraphAnalog57661SensorColorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 4, 4, 1), ).setIndexNames((0, "WebGraph-AnalogIO-57661-US-MIB", "wtWebGraphAnalog57661SensorNo"))
if mibBuilder.loadTexts: wtWebGraphAnalog57661SensorColorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661SensorColorEntry.setDescription('Index numbers of the sensors.')
wtWebGraphAnalog57661SensorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 4, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661SensorColor.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661SensorColor.setDescription('Color of the sensors at the praphical presention.')
wtWebGraphAnalog57661AutoScaleEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 4, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661AutoScaleEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AutoScaleEnable.setDescription('If bit 0 is set, vertical auto scale is enabled: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Auto Scale enable')
wtWebGraphAnalog57661VerticalUpperLimit = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 4, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661VerticalUpperLimit.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661VerticalUpperLimit.setDescription('This value defines the maximum temperature shown in the graphical presentation, if no auto scaling is selected. Temperature in degrees with maximum 2 decimal places.')
wtWebGraphAnalog57661VerticalLowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 4, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661VerticalLowerLimit.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661VerticalLowerLimit.setDescription('This value defines the minimum temperature shown in the graphical presentation, if no auto scaling is selected. Temperature in degrees with maximum 2 decimal places.')
wtWebGraphAnalog57661HorizontalZoom = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("wtWebGraphAnalog57661Zoom-25min", 1), ("wtWebGraphAnalog57661Zoom-75min", 2), ("wtWebGraphAnalog57661Zoom-5hrs", 3), ("wtWebGraphAnalog57661Zoom-30hrs", 4), ("wtWebGraphAnalog57661Zoom-5days", 5), ("wtWebGraphAnalog57661Zoom-25days", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661HorizontalZoom.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661HorizontalZoom.setDescription('Defines the default zoom stage, if no auto scaling is selected.')
wtWebGraphAnalog57661AlarmCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmCount.setDescription('Number of independent alarms.')
wtWebGraphAnalog57661AlarmIfTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5, 2), )
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmIfTable.setDescription('List of alarm indices.')
wtWebGraphAnalog57661AlarmIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5, 2, 1), ).setIndexNames((0, "WebGraph-AnalogIO-57661-US-MIB", "wtWebGraphAnalog57661AlarmNo"))
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmIfEntry.setDescription('Numbers of the alarms.')
wtWebGraphAnalog57661AlarmNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmNo.setDescription('Alarm number.')
wtWebGraphAnalog57661AlarmTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5, 3), )
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmTable.setDescription('List of settings depending on the alarm number.')
wtWebGraphAnalog57661AlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5, 3, 1), ).setIndexNames((0, "WebGraph-AnalogIO-57661-US-MIB", "wtWebGraphAnalog57661AlarmNo"))
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmEntry.setDescription('Alarm parameters of the individual alarms.')
wtWebGraphAnalog57661AlarmTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmTrigger.setDescription('Binary coded trigger conditions: Octet 1: unused Octet 2: unused Octet 3: Bit 0: Timer Bit 1: ColdStart Bit 2: WarmStart Octet 4: Bit 0: Sensor 1 Bit 1: Sensor 2 Bit 2-7: unused')
wtWebGraphAnalog57661AlarmMin1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5, 3, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmMin1.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmMin1.setDescription('Minimum sensor 1 with maximum 3 decimal places.')
wtWebGraphAnalog57661AlarmMax1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5, 3, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmMax1.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmMax1.setDescription('Maximum sensor 1 with maximum 3 decimal places.')
wtWebGraphAnalog57661AlarmHysteresis1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmHysteresis1.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmHysteresis1.setDescription('Reading changes of this size clears the alarm state (MAX-hyst, MIN+hyst.) with maximum 3 decimal places.')
wtWebGraphAnalog57661AlarmDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmDelay.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmDelay.setDescription('Alarm will be delayed by setting this time while stable alarm condition occur (time in minutes).')
wtWebGraphAnalog57661AlarmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5, 3, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmInterval.setDescription('Send interval for alarm messages.')
wtWebGraphAnalog57661AlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmEnable.setDescription('Binary coded alarm enable: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: Mail Enable Bit 1: SNMP Trap enable Bit 2: TCP Client enable Bit 3: Syslog enable Bit 4: FTP Client enable')
wtWebGraphAnalog57661AlarmEMailAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmEMailAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmEMailAddr.setDescription('E-Mail address for sending the alarm mail to.')
wtWebGraphAnalog57661AlarmMailSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5, 3, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmMailSubject.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmMailSubject.setDescription('Subject line for alarm mail.')
wtWebGraphAnalog57661AlarmMailText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5, 3, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmMailText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmMailText.setDescription('Alarm mail text: <Mn> provides the current temperature; n = 1..2. <Z> provides the current time.')
wtWebGraphAnalog57661AlarmManagerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5, 3, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmManagerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmManagerIP.setDescription('Name or IP address of the SNMP Manager which accepts the trap.')
wtWebGraphAnalog57661AlarmTrapText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5, 3, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmTrapText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmTrapText.setDescription('This text is sent in the trap body.')
wtWebGraphAnalog57661AlarmMailOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5, 3, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmMailOptions.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmMailOptions.setDescription('Binary coded options: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0 : Attach Logger.csv Enable Bit 1 : CSV-Data_since_last_report Bit 2-7: unused')
wtWebGraphAnalog57661AlarmTcpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5, 3, 1, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmTcpIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmTcpIpAddr.setDescription('Name or IP address of the TCP server which accepts the trap.')
wtWebGraphAnalog57661AlarmTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmTcpPort.setDescription('Port number of the TCP server which accepts the trap.')
wtWebGraphAnalog57661AlarmTcpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5, 3, 1, 16), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmTcpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmTcpText.setDescription('This text is sent in the TCP trap body.')
wtWebGraphAnalog57661AlarmClearMailSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5, 3, 1, 17), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmClearMailSubject.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmClearMailSubject.setDescription('Subject line for alarm clear mail.')
wtWebGraphAnalog57661AlarmClearMailText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5, 3, 1, 18), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmClearMailText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmClearMailText.setDescription('Alarm clear mail text: <Mn> provides the current temperature; n = 1..2. <Z> provides the current time.')
wtWebGraphAnalog57661AlarmClearTrapText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5, 3, 1, 19), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmClearTrapText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmClearTrapText.setDescription('This text is sent in the trap body.')
wtWebGraphAnalog57661AlarmClearTcpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5, 3, 1, 20), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmClearTcpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmClearTcpText.setDescription('This text is sent in the TCP trap body.')
wtWebGraphAnalog57661AlarmMin2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5, 3, 1, 21), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmMin2.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmMin2.setDescription('Minimum sensor 2 with maximum 3 decimal places.')
wtWebGraphAnalog57661AlarmMax2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5, 3, 1, 22), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmMax2.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmMax2.setDescription('Maximum sensor 2 with maximum 2 decimal places.')
wtWebGraphAnalog57661AlarmHysteresis2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5, 3, 1, 23), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmHysteresis2.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmHysteresis2.setDescription('Hysterese rel. sensor 2 with maximum 3 decimal places.')
wtWebGraphAnalog57661AlarmSyslogIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5, 3, 1, 24), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmSyslogIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmSyslogIpAddr.setDescription('IP address of the syslog server to which the Webio device should send syslog messages.')
wtWebGraphAnalog57661AlarmSyslogPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5, 3, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmSyslogPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmSyslogPort.setDescription('Port number of the syslog server to which the Webio device should send syslog messages.')
wtWebGraphAnalog57661AlarmSyslogText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5, 3, 1, 26), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmSyslogText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmSyslogText.setDescription('Every message starts with the priority key, a time stamp and the host ip address, according RFC3164. This text appears in the following syslog message body.')
wtWebGraphAnalog57661AlarmSyslogClearText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5, 3, 1, 27), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmSyslogClearText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmSyslogClearText.setDescription('Every message starts with the priority key, a time stamp and the host ip address, according RFC3164. This text appears in the following syslog message body of a alarm clear message.')
wtWebGraphAnalog57661AlarmFtpDataPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5, 3, 1, 28), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmFtpDataPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmFtpDataPort.setDescription('Local data port: 1..65535 or AUTO: the next free port will be assigned.')
wtWebGraphAnalog57661AlarmFtpFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5, 3, 1, 29), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmFtpFileName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmFtpFileName.setDescription('Name of the file including path informations.')
wtWebGraphAnalog57661AlarmFtpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5, 3, 1, 30), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmFtpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmFtpText.setDescription('Message text to store on the FTP server.')
wtWebGraphAnalog57661AlarmFtpClearText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5, 3, 1, 31), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmFtpClearText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmFtpClearText.setDescription('Alarm clear message to store on the FTP server.')
wtWebGraphAnalog57661AlarmFtpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5, 3, 1, 32), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmFtpOption.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmFtpOption.setDescription('Binary coded options, select only one option at the same time: STORE = replace file APPEND = append message at the end of the file Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0 : STORE Bit 1 : APPEND Bit 2-7: unused')
wtWebGraphAnalog57661AlarmTimerCron = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 5, 3, 1, 33), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmTimerCron.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlarmTimerCron.setDescription('This entry defines a time window for alarm 1-8 and a activation time for the report. A time window is definied by start and stop time stamp, seperated by a space or tab. The activation time of the report is defined by a single start time stamp. Each time stamp contains 5 space or tab seperated text fields for time trigger definition. Each field must match with the actual time to trigger an action, weekday and day of month are interpreted separatley. 1: Minutes Range 0-59 2. Hours Range 0-23, 0 is midnight 3: Day of month Range 1-31 4: Month Range 1-12 5: Weekday Range 0-6, 0 is sunday Syntax for every field: - an asterix (*) enables every possible setting of a field - single numbers seperated by commas (i.e.: 2,14,22) - a partition within the allowed range (i.e.: 1-5) - step size within a partition of the allowed range (i.e.: 0-59/2 every second minute).')
wtWebGraphAnalog57661GraphicsBaseEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 6, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661GraphicsBaseEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661GraphicsBaseEnable.setDescription('Defines the viewing options of the graphic: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0 : Auto scroll enable Bit 1 : Show table Bit 2 : Show graph Bit 3 : Show control buttons Bit 4 : Show config menu Bit 5-7: unused')
wtWebGraphAnalog57661GraphicsBaseWidth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 6, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661GraphicsBaseWidth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661GraphicsBaseWidth.setDescription('Defines the width of the graphic in pixels.')
wtWebGraphAnalog57661GraphicsBaseHeight = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661GraphicsBaseHeight.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661GraphicsBaseHeight.setDescription('Defines the height of the graphic in pixels.')
wtWebGraphAnalog57661GraphicsBaseFrameColor = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661GraphicsBaseFrameColor.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661GraphicsBaseFrameColor.setDescription('Frame color definition in RGB.')
wtWebGraphAnalog57661GraphicsBaseBackgroundColor = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661GraphicsBaseBackgroundColor.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661GraphicsBaseBackgroundColor.setDescription('Background color definition in RGB.')
wtWebGraphAnalog57661GraphicsBasePollingrate = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661GraphicsBasePollingrate.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661GraphicsBasePollingrate.setDescription('Defines the pollingrate in seconds, which defines the refreshing intervall of the graphic.')
wtWebGraphAnalog57661GraphicsSelectDisplaySensorSel = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 6, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661GraphicsSelectDisplaySensorSel.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661GraphicsSelectDisplaySensorSel.setDescription('Binary coded sensor selection: only selected sensors will be shown in the graphical presentation: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: Sensor 1 Bit 1: Sensor 2 Bit 2-7: unused')
wtWebGraphAnalog57661GraphicsSelectDisplayShowExtrem = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 6, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661GraphicsSelectDisplayShowExtrem.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661GraphicsSelectDisplayShowExtrem.setDescription('Binary coded sensor selection: only selected sensors will be shown with minima and maxima: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: Sensor 1 Bit 1: Sensor 2 Bit 2-7: unused')
wtWebGraphAnalog57661SensorColor2Table = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 6, 2, 3), )
if mibBuilder.loadTexts: wtWebGraphAnalog57661SensorColor2Table.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661SensorColor2Table.setDescription('List of sensor colors for the praphical presentation.')
wtWebGraphAnalog57661SensorColor2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 6, 2, 3, 1), ).setIndexNames((0, "WebGraph-AnalogIO-57661-US-MIB", "wtWebGraphAnalog57661SensorNo"))
if mibBuilder.loadTexts: wtWebGraphAnalog57661SensorColor2Entry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661SensorColor2Entry.setDescription('Numbers of the sensors.')
wtWebGraphAnalog57661GraphicsSensorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 6, 2, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661GraphicsSensorColor.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661GraphicsSensorColor.setDescription('Color of the sensors at the praphical presention.')
wtWebGraphAnalog57661GraphicsSelectScale = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 6, 2, 3, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661GraphicsSelectScale.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661GraphicsSelectScale.setDescription('Assignes one of 4 scales to a sensor: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0 : Use Scale 1 Bit 1 : Use Scale 2 Bit 2-7: unused')
wtWebGraphAnalog57661GraphicsScaleAutoScaleEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 6, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661GraphicsScaleAutoScaleEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661GraphicsScaleAutoScaleEnable.setDescription('Select the Auto Scale Mode: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0 : Scale 1 Auto scale enable Bit 1 : Scale 2 Auto scale enable Bit 2-7: unused')
wtWebGraphAnalog57661GraphicsScaleAutoFitEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 6, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661GraphicsScaleAutoFitEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661GraphicsScaleAutoFitEnable.setDescription('Select the Auto Fit Mode:: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0 : Scale 1 Auto fit enable Bit 1 : Scale 2 Auto fit enable Bit 2-7: unused')
wtWebGraphAnalog57661GraphicsScale1Min = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 6, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphAnalog57661GraphicsScale1Min.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661GraphicsScale1Min.setDescription('Scale 1: Minimum.')
wtWebGraphAnalog57661GraphicsScale2Min = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 6, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphAnalog57661GraphicsScale2Min.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661GraphicsScale2Min.setDescription('Scale 2: Minimum.')
wtWebGraphAnalog57661GraphicsScale1Max = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 6, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphAnalog57661GraphicsScale1Max.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661GraphicsScale1Max.setDescription('Scale 1: Maximum.')
wtWebGraphAnalog57661GraphicsScale2Max = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 6, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphAnalog57661GraphicsScale2Max.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661GraphicsScale2Max.setDescription('Scale 2: Maximum.')
wtWebGraphAnalog57661GraphicsScale1Unit = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 6, 3, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphAnalog57661GraphicsScale1Unit.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661GraphicsScale1Unit.setDescription('Scale 1: Unit.')
wtWebGraphAnalog57661GraphicsScale2Unit = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 6, 3, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphAnalog57661GraphicsScale2Unit.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661GraphicsScale2Unit.setDescription('Scale 2: Unit.')
wtWebGraphAnalog57661ReportCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportCount.setDescription('Number of independent Reports.')
wtWebGraphAnalog57661ReportIfTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 7, 2), )
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportIfTable.setDescription('List of Report indices.')
wtWebGraphAnalog57661ReportIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 7, 2, 1), ).setIndexNames((0, "WebGraph-AnalogIO-57661-US-MIB", "wtWebGraphAnalog57661ReportNo"))
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportIfEntry.setDescription('Numbers of the Reports.')
wtWebGraphAnalog57661ReportNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportNo.setDescription('Report number.')
wtWebGraphAnalog57661ReportTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 7, 3), )
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportTable.setDescription('List of settings depending on the Report number.')
wtWebGraphAnalog57661ReportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 7, 3, 1), ).setIndexNames((0, "WebGraph-AnalogIO-57661-US-MIB", "wtWebGraphAnalog57661ReportNo"))
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportEntry.setDescription('Report parameters of the individual Reports.')
wtWebGraphAnalog57661ReportEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 7, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportEnable.setDescription('Binr kodierte Triggerbedingungen: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: Report enable Bit 1-7: unused')
wtWebGraphAnalog57661ReportTimerCron = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 7, 3, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportTimerCron.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportTimerCron.setDescription('This entry defines a time window for alarm 1-8 and a activation time for the report. A time window is definied by start and stop time stamp, seperated by a space or tab. The activation time of the report is defined by a single start time stamp. Each time stamp contains 5 space or tab seperated text fields for time trigger definition. Each field must match with the actual time to trigger an action, weekday and day of month are interpreted separatley. 1: Minutes Range 0-59 2. Hours Range 0-23, 0 is midnight 3: Day of month Range 1-31 4: Month Range 1-12 5: Weekday Range 0-6, 0 is sunday Syntax for every field: - an asterix (*) enables every possible setting of a field - single numbers seperated by commas (i.e.: 2,14,22) - a partition within the allowed range (i.e.: 1-5) - step size within a partition of the allowed range (i.e.: 0-59/2 every second minute).')
wtWebGraphAnalog57661ReportMethodeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 7, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportMethodeEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportMethodeEnable.setDescription('Binary coded alarm enable: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: Mail Enable Bit 1: SNMP Trap enable Bit 2: TCP Client enable Bit 3: Syslog enable Bit 4: FTP Client enable')
wtWebGraphAnalog57661ReportEMailAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 7, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportEMailAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportEMailAddr.setDescription('E-Mail address for sending the alarm mail to.')
wtWebGraphAnalog57661ReportMailSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 7, 3, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportMailSubject.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportMailSubject.setDescription('Subject line for alarm mail.')
wtWebGraphAnalog57661ReportMailText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 7, 3, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportMailText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportMailText.setDescription('Report mail text: <Mn> provides the current temperature; n = 1..2. <Z> provides the current time.')
wtWebGraphAnalog57661ReportManagerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 7, 3, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportManagerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportManagerIP.setDescription('Name or IP address of the SNMP Manager which accepts the trap.')
wtWebGraphAnalog57661ReportTrapText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 7, 3, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportTrapText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportTrapText.setDescription('This text is sent in the trap body.')
wtWebGraphAnalog57661ReportMailOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 7, 3, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportMailOptions.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportMailOptions.setDescription('Binary coded options: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0 : Attach Logger.csv Enable Bit 1 : CSV-Data_since_last_report Bit 2-7: unused')
wtWebGraphAnalog57661ReportTcpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 7, 3, 1, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportTcpIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportTcpIpAddr.setDescription('Name or IP address of the TCP server which accepts the trap.')
wtWebGraphAnalog57661ReportTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 7, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportTcpPort.setDescription('Port number of the TCP server which accepts the trap.')
wtWebGraphAnalog57661ReportTcpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 7, 3, 1, 16), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportTcpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportTcpText.setDescription('This text is sent in the TCP trap body.')
wtWebGraphAnalog57661ReportClearMailSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 7, 3, 1, 17), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportClearMailSubject.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportClearMailSubject.setDescription('Subject line for alarm clear mail.')
wtWebGraphAnalog57661ReportClearMailText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 7, 3, 1, 18), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportClearMailText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportClearMailText.setDescription('Report clear mail text: <Mn> provides the current temperature; n = 1..2. <Z> provides the current time.')
wtWebGraphAnalog57661ReportClearTrapText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 7, 3, 1, 19), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportClearTrapText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportClearTrapText.setDescription('This text is sent in the trap body.')
wtWebGraphAnalog57661ReportClearTcpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 7, 3, 1, 20), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportClearTcpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportClearTcpText.setDescription('This text is sent in the TCP trap body.')
wtWebGraphAnalog57661ReportSyslogIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 7, 3, 1, 24), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportSyslogIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportSyslogIpAddr.setDescription('IP address of the syslog server to which the Webio device should send syslog messages.')
wtWebGraphAnalog57661ReportSyslogPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 7, 3, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportSyslogPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportSyslogPort.setDescription('Port number of the syslog server to which the Webio device should send syslog messages.')
wtWebGraphAnalog57661ReportSyslogText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 7, 3, 1, 26), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportSyslogText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportSyslogText.setDescription('Every message starts with the priority key, a time stamp and the host ip address, according RFC3164. This text appears in the following syslog message body.')
wtWebGraphAnalog57661ReportSyslogClearText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 7, 3, 1, 27), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportSyslogClearText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportSyslogClearText.setDescription('Every message starts with the priority key, a time stamp and the host ip address, according RFC3164. This text appears in the following syslog message body of a alarm clear message.')
wtWebGraphAnalog57661ReportFtpDataPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 7, 3, 1, 28), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportFtpDataPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportFtpDataPort.setDescription('Local data port: 1..65535 or AUTO: the next free port will be assigned.')
wtWebGraphAnalog57661ReportFtpFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 7, 3, 1, 29), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportFtpFileName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportFtpFileName.setDescription('Name of the file including path informations.')
wtWebGraphAnalog57661ReportFtpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 7, 3, 1, 30), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportFtpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportFtpText.setDescription('Message text to store on the FTP server.')
wtWebGraphAnalog57661ReportFtpClearText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 7, 3, 1, 31), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportFtpClearText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportFtpClearText.setDescription('Report clear message to store on the FTP server.')
wtWebGraphAnalog57661ReportFtpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 1, 7, 3, 1, 32), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportFtpOption.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661ReportFtpOption.setDescription('Binary coded options, select only one option at the same time: STORE = replace file APPEND = append message at the end of the file Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0 : STORE Bit 1 : APPEND Bit 2-7: unused')
wtWebGraphAnalog57661PortTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 2, 1), )
if mibBuilder.loadTexts: wtWebGraphAnalog57661PortTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661PortTable.setDescription('List of settings depending on the sensor number.')
wtWebGraphAnalog57661PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 2, 1, 1), ).setIndexNames((0, "WebGraph-AnalogIO-57661-US-MIB", "wtWebGraphAnalog57661SensorNo"))
if mibBuilder.loadTexts: wtWebGraphAnalog57661PortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661PortEntry.setDescription('Sensor parameters for the individual sensors.')
wtWebGraphAnalog57661PortName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 2, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661PortName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661PortName.setDescription('Name of the sensor.')
wtWebGraphAnalog57661PortText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 2, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661PortText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661PortText.setDescription('Description of the sensor.')
wtWebGraphAnalog57661PortOffset1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 2, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661PortOffset1.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661PortOffset1.setDescription('Offset calibration: Offset in degrees with maximum 3 decimal places at set point 1.')
wtWebGraphAnalog57661SetPoint1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 2, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661SetPoint1.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661SetPoint1.setDescription('Offset calibration: Reference set point 1 in degrees with maximum 3 decimal places.')
wtWebGraphAnalog57661PortOffset2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 2, 1, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661PortOffset2.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661PortOffset2.setDescription('Offset calibration: Offset in degrees with maximum 3 decimal places at set point 2.')
wtWebGraphAnalog57661SetPoint2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 2, 1, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661SetPoint2.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661SetPoint2.setDescription('Offset calibration: Reference set point 2 in degrees with maximum 3 decimal places.')
wtWebGraphAnalog57661PortComment = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 2, 1, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661PortComment.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661PortComment.setDescription('Offset calibration: informations of date, name of operator, reference devices.')
wtWebGraphAnalog57661PortSensorSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 2, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661PortSensorSelect.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661PortSensorSelect.setDescription('Binary coded options for sensor 1: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0 : 0-20mA (default) Bit 1 : 4-20mA Bit 2 : Disconnect Bit 3-7: unused')
wtWebGraphAnalog57661PortUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 2, 1, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661PortUnit.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661PortUnit.setDescription('User scale: displayed unit.')
wtWebGraphAnalog57661PortScale0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 2, 1, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661PortScale0.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661PortScale0.setDescription('User scale: displayed value in 1/1000 at 0% full scale range. Range: -999999.999 to 999999.999')
wtWebGraphAnalog57661PortScale100 = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 2, 1, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661PortScale100.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661PortScale100.setDescription('User scale: displayed value in 1/1000 at 100% full scale range. Range: -999999.999 to 999999.999')
wtWebGraphAnalog57661PortOutputMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 2, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661PortOutputMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661PortOutputMode.setDescription('This binary coded output mode defines the individual operation mode for any output. More than one mode must not be selected. If an output mode is selected, Bit 2 in wtWebGraphAnalog57661PortInputMode will be set automatically. The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 6-7: unused Bit 5 : Output OFF Bit 4 : Binary 2 Bit 3 : Binary 1 Bit 2 : SNMP Bit 1 : UDP ASCII Bit 0 : HTTP')
wtWebGraphAnalog57661PortInputMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 2, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661PortInputMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661PortInputMode.setDescription('This binary coded input mode defines the individual operation mode for any input. More than one mode must not be selected. If an input mode is selected, Bit 5 in wtWebGraphAnalog57661PortOutputMode will be set automatically. The OCTETS are interpreted bit-by-bit,Bit 0 corresponds to the LSB. OCTET 1: ungenutzt OCTET 2: ungenutzt OCTET 3: ungenutzt OCTET 4: Bit 3-7: unused Bit 2 : I-Output Bit 1 : I-Input, active Bit 0 : I-Input, passive')
wtWebGraphAnalog57661MfName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661MfName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661MfName.setDescription('Manufacturer company name')
wtWebGraphAnalog57661MfAddr = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661MfAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661MfAddr.setDescription('Manufacturer address.')
wtWebGraphAnalog57661MfHotline = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661MfHotline.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661MfHotline.setDescription('Manufacturer hotline.')
wtWebGraphAnalog57661MfInternet = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661MfInternet.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661MfInternet.setDescription('Manufacturer Internet address.')
wtWebGraphAnalog57661MfDeviceTyp = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 3, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661MfDeviceTyp.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661MfDeviceTyp.setDescription('Manufacturer device name (model number).')
wtWebGraphAnalog57661MfOrderNo = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 3, 3, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661MfOrderNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661MfOrderNo.setDescription('Manufacturer part number.')
wtWebGraphAnalog57661DiagErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphAnalog57661DiagErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661DiagErrorCount.setDescription('Number of entries in the error memory.')
wtWebGraphAnalog57661DiagBinaryError = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 4, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphAnalog57661DiagBinaryError.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661DiagBinaryError.setDescription('Error causes coded bit-by-bit.')
wtWebGraphAnalog57661DiagErrorIndex = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphAnalog57661DiagErrorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661DiagErrorIndex.setDescription('The value of this variable is used as an index to read an error massege from wtWebGraphAnalog57661DiagErrorMessage. Errors are numbered from 1 to wtWebGraphAnalog57661DiagErrorCount. Writing a valid value into this variable, making the appropriate message readable from wtWebGraphAnalog57661DiagErrorMessage.')
wtWebGraphAnalog57661DiagErrorMessage = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 4, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphAnalog57661DiagErrorMessage.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661DiagErrorMessage.setDescription('Using wtWebGraphAnalog57661DiagErrorIndex as an index, the appropriate message is available.')
wtWebGraphAnalog57661DiagErrorClear = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28, 4, 5), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: wtWebGraphAnalog57661DiagErrorClear.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphAnalog57661DiagErrorClear.setDescription('Writing 1 into this variable clears all diagnosis messages.')
wtWebGraphAnalog57661Alert1 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28) + (0,31)).setObjects(("WebGraph-AnalogIO-57661-US-MIB", "wtWebGraphAnalog57661AlarmTrapText"))
if mibBuilder.loadTexts: wtWebGraphAnalog57661Alert1.setDescription('This SNMP trap is generated when Alarm 1 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebGraphAnalog57661Alert2 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28) + (0,32)).setObjects(("WebGraph-AnalogIO-57661-US-MIB", "wtWebGraphAnalog57661AlarmTrapText"))
if mibBuilder.loadTexts: wtWebGraphAnalog57661Alert2.setDescription('This SNMP trap is generated when Alarm 2 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebGraphAnalog57661Alert3 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28) + (0,33)).setObjects(("WebGraph-AnalogIO-57661-US-MIB", "wtWebGraphAnalog57661AlarmTrapText"))
if mibBuilder.loadTexts: wtWebGraphAnalog57661Alert3.setDescription('This SNMP trap is generated when Alarm 3 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebGraphAnalog57661Alert4 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28) + (0,34)).setObjects(("WebGraph-AnalogIO-57661-US-MIB", "wtWebGraphAnalog57661AlarmTrapText"))
if mibBuilder.loadTexts: wtWebGraphAnalog57661Alert4.setDescription('This SNMP trap is generated when Alarm 4 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebGraphAnalog57661Alert5 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28) + (0,35)).setObjects(("WebGraph-AnalogIO-57661-US-MIB", "wtWebGraphAnalog57661AlarmTrapText"))
if mibBuilder.loadTexts: wtWebGraphAnalog57661Alert5.setDescription('This SNMP trap is generated when Alarm 5 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebGraphAnalog57661Alert6 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28) + (0,36)).setObjects(("WebGraph-AnalogIO-57661-US-MIB", "wtWebGraphAnalog57661AlarmTrapText"))
if mibBuilder.loadTexts: wtWebGraphAnalog57661Alert6.setDescription('This SNMP trap is generated when Alarm 6 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebGraphAnalog57661Alert7 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28) + (0,37)).setObjects(("WebGraph-AnalogIO-57661-US-MIB", "wtWebGraphAnalog57661AlarmTrapText"))
if mibBuilder.loadTexts: wtWebGraphAnalog57661Alert7.setDescription('This SNMP trap is generated when Alarm 7 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebGraphAnalog57661Alert8 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28) + (0,38)).setObjects(("WebGraph-AnalogIO-57661-US-MIB", "wtWebGraphAnalog57661AlarmTrapText"))
if mibBuilder.loadTexts: wtWebGraphAnalog57661Alert8.setDescription('This SNMP trap is generated when Alarm 8 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebGraphAnalog57661Alert9 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28) + (0,91)).setObjects(("WebGraph-AnalogIO-57661-US-MIB", "wtWebGraphAnalog57661AlarmClearTrapText"))
if mibBuilder.loadTexts: wtWebGraphAnalog57661Alert9.setDescription('This SNMP trap is generated when Alarm 1 was cleared, SNMP trap enable is set and SNMP is enabled.')
wtWebGraphAnalog57661Alert10 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28) + (0,92)).setObjects(("WebGraph-AnalogIO-57661-US-MIB", "wtWebGraphAnalog57661AlarmClearTrapText"))
if mibBuilder.loadTexts: wtWebGraphAnalog57661Alert10.setDescription('This SNMP trap is generated when Alarm 2 was cleared, SNMP trap enable is set and SNMP is enabled.')
wtWebGraphAnalog57661Alert11 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28) + (0,93)).setObjects(("WebGraph-AnalogIO-57661-US-MIB", "wtWebGraphAnalog57661AlarmClearTrapText"))
if mibBuilder.loadTexts: wtWebGraphAnalog57661Alert11.setDescription('This SNMP trap is generated when Alarm 3 was cleared, SNMP trap enable is set and SNMP is enabled.')
wtWebGraphAnalog57661Alert12 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28) + (0,94)).setObjects(("WebGraph-AnalogIO-57661-US-MIB", "wtWebGraphAnalog57661AlarmClearTrapText"))
if mibBuilder.loadTexts: wtWebGraphAnalog57661Alert12.setDescription('This SNMP trap is generated when Alarm 4 was cleared, SNMP trap enable is set and SNMP is enabled.')
wtWebGraphAnalog57661Alert13 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28) + (0,95)).setObjects(("WebGraph-AnalogIO-57661-US-MIB", "wtWebGraphAnalog57661AlarmClearTrapText"))
if mibBuilder.loadTexts: wtWebGraphAnalog57661Alert13.setDescription('This SNMP trap is generated when Alarm 5 was cleared, SNMP trap enable is set and SNMP is enabled.')
wtWebGraphAnalog57661Alert14 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28) + (0,96)).setObjects(("WebGraph-AnalogIO-57661-US-MIB", "wtWebGraphAnalog57661AlarmClearTrapText"))
if mibBuilder.loadTexts: wtWebGraphAnalog57661Alert14.setDescription('This SNMP trap is generated when Alarm 6 was cleared, SNMP trap enable is set and SNMP is enabled.')
wtWebGraphAnalog57661Alert15 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28) + (0,97)).setObjects(("WebGraph-AnalogIO-57661-US-MIB", "wtWebGraphAnalog57661AlarmClearTrapText"))
if mibBuilder.loadTexts: wtWebGraphAnalog57661Alert15.setDescription('This SNMP trap is generated when Alarm 7 was cleared, SNMP trap enable is set and SNMP is enabled.')
wtWebGraphAnalog57661Alert16 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28) + (0,98)).setObjects(("WebGraph-AnalogIO-57661-US-MIB", "wtWebGraphAnalog57661AlarmClearTrapText"))
if mibBuilder.loadTexts: wtWebGraphAnalog57661Alert16.setDescription('This SNMP trap is generated when Alarm 8 was cleared, SNMP trap enable is set and SNMP is enabled.')
wtWebGraphAnalog57661AlertReport = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28) + (0,39)).setObjects(("WebGraph-AnalogIO-57661-US-MIB", "wtWebGraphAnalog57661AlarmTrapText"))
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlertReport.setDescription('This SNMP trap is generated when the report was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebGraphAnalog57661AlertDiag = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 28) + (0,110)).setObjects(("WebGraph-AnalogIO-57661-US-MIB", "wtWebGraphAnalog57661DiagErrorIndex"), ("WebGraph-AnalogIO-57661-US-MIB", "wtWebGraphAnalog57661DiagErrorMessage"))
if mibBuilder.loadTexts: wtWebGraphAnalog57661AlertDiag.setDescription('This SNMP trap is generated when a diagnosis/error message was triggered, SNMP trap enable is set and SNMP is enabled.')
mibBuilder.exportSymbols("WebGraph-AnalogIO-57661-US-MIB", wtWebGraphAnalog57661DnsServer2=wtWebGraphAnalog57661DnsServer2, wtWebioAn1MailEnable=wtWebioAn1MailEnable, wtWebGraphAnalog57661BinaryTcpClientServerIpAddr=wtWebGraphAnalog57661BinaryTcpClientServerIpAddr, wtWebGraphAnalog57661AddConfig=wtWebGraphAnalog57661AddConfig, wtWebGraphAnalog57661GraphicsSelectDisplaySensorSel=wtWebGraphAnalog57661GraphicsSelectDisplaySensorSel, wtWebGraphAnalog57661BinaryTcpServerApplicationMode=wtWebGraphAnalog57661BinaryTcpServerApplicationMode, wtWebGraphAnalog57661BinaryOperationMode=wtWebGraphAnalog57661BinaryOperationMode, wtWebGraphAnalog57661GraphicsSensorColor=wtWebGraphAnalog57661GraphicsSensorColor, wtWebGraphAnalog57661ReportMailText=wtWebGraphAnalog57661ReportMailText, wtWebGraphAnalog57661DeviceName=wtWebGraphAnalog57661DeviceName, wtWebGraphAnalog57661AlarmFtpText=wtWebGraphAnalog57661AlarmFtpText, wtWebGraphAnalog57661GraphicsScale=wtWebGraphAnalog57661GraphicsScale, wtWebGraphAnalog57661AlarmManagerIP=wtWebGraphAnalog57661AlarmManagerIP, wtWebGraphAnalog57661AlarmMax2=wtWebGraphAnalog57661AlarmMax2, wtWebGraphAnalog57661AlarmClearTrapText=wtWebGraphAnalog57661AlarmClearTrapText, wtWebGraphAnalog57661Mail=wtWebGraphAnalog57661Mail, wtWebGraphAnalog57661ReportTimerCron=wtWebGraphAnalog57661ReportTimerCron, wtWebGraphAnalog57661ReportFtpDataPort=wtWebGraphAnalog57661ReportFtpDataPort, wut=wut, wtWebGraphAnalog57661ReportTrapText=wtWebGraphAnalog57661ReportTrapText, wtWebGraphAnalog57661ReportTcpText=wtWebGraphAnalog57661ReportTcpText, wtWebGraphAnalog57661SensorColorTable=wtWebGraphAnalog57661SensorColorTable, wtWebGraphAnalog57661UDP=wtWebGraphAnalog57661UDP, wtWebGraphAnalog57661SessCntrlPassword=wtWebGraphAnalog57661SessCntrlPassword, wtWebGraphAnalog57661=wtWebGraphAnalog57661, wtWebGraphAnalog57661ReportTable=wtWebGraphAnalog57661ReportTable, wtWebGraphAnalog57661TsSyncTime=wtWebGraphAnalog57661TsSyncTime, wtWebGraphAnalog57661Syslog=wtWebGraphAnalog57661Syslog, wtWebGraphAnalog57661SnmpCommunityStringReadWrite=wtWebGraphAnalog57661SnmpCommunityStringReadWrite, wtWebGraphAnalog57661GraphicsBaseBackgroundColor=wtWebGraphAnalog57661GraphicsBaseBackgroundColor, wtWebGraphAnalog57661GraphicsScale2Max=wtWebGraphAnalog57661GraphicsScale2Max, wtWebGraphAnalog57661ReportEMailAddr=wtWebGraphAnalog57661ReportEMailAddr, wtWebGraphAnalog57661ReportSyslogPort=wtWebGraphAnalog57661ReportSyslogPort, wtWebGraphAnalog57661ReportFtpText=wtWebGraphAnalog57661ReportFtpText, wtWebGraphAnalog57661FTPAccount=wtWebGraphAnalog57661FTPAccount, wtWebGraphAnalog57661StTzStartMonth=wtWebGraphAnalog57661StTzStartMonth, wtWebGraphAnalog57661SessCntrlConfigPassword=wtWebGraphAnalog57661SessCntrlConfigPassword, wtWebGraphAnalog57661DeviceText=wtWebGraphAnalog57661DeviceText, wtWebGraphAnalog57661StTzStopMonth=wtWebGraphAnalog57661StTzStopMonth, wtWebGraphAnalog57661MailAuthPassword=wtWebGraphAnalog57661MailAuthPassword, wtWebGraphAnalog57661Alert15=wtWebGraphAnalog57661Alert15, wtWebGraphAnalog57661Alert10=wtWebGraphAnalog57661Alert10, wtWebGraphAnalog57661Sensors=wtWebGraphAnalog57661Sensors, wtWebGraphAnalog57661AlarmInterval=wtWebGraphAnalog57661AlarmInterval, wtWebGraphAnalog57661AlarmSyslogPort=wtWebGraphAnalog57661AlarmSyslogPort, wtWebGraphAnalog57661FTP=wtWebGraphAnalog57661FTP, wtWebGraphAnalog57661GraphicsSelectDisplayShowExtrem=wtWebGraphAnalog57661GraphicsSelectDisplayShowExtrem, wtWebGraphAnalog57661ReportTcpPort=wtWebGraphAnalog57661ReportTcpPort, wtWebGraphAnalog57661TzEnable=wtWebGraphAnalog57661TzEnable, wtWebGraphAnalog57661Alert2=wtWebGraphAnalog57661Alert2, wtWebGraphAnalog57661GraphicsScaleAutoScaleEnable=wtWebGraphAnalog57661GraphicsScaleAutoScaleEnable, wtWebGraphAnalog57661DiagErrorClear=wtWebGraphAnalog57661DiagErrorClear, wtWebGraphAnalog57661Alert11=wtWebGraphAnalog57661Alert11, wtWebGraphAnalog57661BinaryTcpClientLocalPort=wtWebGraphAnalog57661BinaryTcpClientLocalPort, wtWebGraphAnalog57661TimeDate=wtWebGraphAnalog57661TimeDate, wtWebGraphAnalog57661SnmpCommunityStringTrap=wtWebGraphAnalog57661SnmpCommunityStringTrap, wtWebGraphAnalog57661AlarmMailSubject=wtWebGraphAnalog57661AlarmMailSubject, wtWebGraphAnalog57661TimeServer1=wtWebGraphAnalog57661TimeServer1, wtWebGraphAnalog57661MailAuthentication=wtWebGraphAnalog57661MailAuthentication, wtWebGraphAnalog57661Inventory=wtWebGraphAnalog57661Inventory, wtWebGraphAnalog57661FTPEnable=wtWebGraphAnalog57661FTPEnable, wtWebGraphAnalog57661GraphicsSelectScale=wtWebGraphAnalog57661GraphicsSelectScale, wtWebGraphAnalog57661ReportSyslogIpAddr=wtWebGraphAnalog57661ReportSyslogIpAddr, wtWebGraphAnalog57661ReportMethodeEnable=wtWebGraphAnalog57661ReportMethodeEnable, wtWebGraphAnalog57661PortUnit=wtWebGraphAnalog57661PortUnit, wtWebGraphAnalog57661Config=wtWebGraphAnalog57661Config, wtWebGraphAnalog57661BinaryUdpPeerRemotePort=wtWebGraphAnalog57661BinaryUdpPeerRemotePort, wtWebGraphAnalog57661BinaryValuesEntry=wtWebGraphAnalog57661BinaryValuesEntry, wtWebGraphAnalog57661BinaryTcpServerHysteresis2=wtWebGraphAnalog57661BinaryTcpServerHysteresis2, wtWebGraphAnalog57661AlarmTrigger=wtWebGraphAnalog57661AlarmTrigger, wtWebGraphAnalog57661MfAddr=wtWebGraphAnalog57661MfAddr, wtWebGraphAnalog57661AlarmFtpDataPort=wtWebGraphAnalog57661AlarmFtpDataPort, wtWebGraphAnalog57661BinaryModeNo=wtWebGraphAnalog57661BinaryModeNo, wtWebGraphAnalog57661AlarmMax1=wtWebGraphAnalog57661AlarmMax1, wtWebGraphAnalog57661ReportClearMailText=wtWebGraphAnalog57661ReportClearMailText, wtWebGraphAnalog57661AlertDiag=wtWebGraphAnalog57661AlertDiag, wtWebGraphAnalog57661Binary=wtWebGraphAnalog57661Binary, wtWebGraphAnalog57661GraphicsScaleAutoFitEnable=wtWebGraphAnalog57661GraphicsScaleAutoFitEnable, wtWebGraphAnalog57661SensorNo=wtWebGraphAnalog57661SensorNo, wtWebGraphAnalog57661PortInputMode=wtWebGraphAnalog57661PortInputMode, wtWebGraphAnalog57661Language=wtWebGraphAnalog57661Language, wtWebGraphAnalog57661ReportTcpIpAddr=wtWebGraphAnalog57661ReportTcpIpAddr, wtWebGraphAnalog57661GraphicsSelect=wtWebGraphAnalog57661GraphicsSelect, wtWebGraphAnalog57661AlertReport=wtWebGraphAnalog57661AlertReport, wtWebGraphAnalog57661AlarmClearTcpText=wtWebGraphAnalog57661AlarmClearTcpText, wtWebGraphAnalog57661SyslogServerIP=wtWebGraphAnalog57661SyslogServerIP, wtWebGraphAnalog57661ReportMailOptions=wtWebGraphAnalog57661ReportMailOptions, wtWebGraphAnalog57661PortOffset2=wtWebGraphAnalog57661PortOffset2, wtWebGraphAnalog57661ClockMonth=wtWebGraphAnalog57661ClockMonth, wtWebGraphAnalog57661BinaryTcpClientHysteresis2=wtWebGraphAnalog57661BinaryTcpClientHysteresis2, wtWebGraphAnalog57661LoggerSensorSel=wtWebGraphAnalog57661LoggerSensorSel, wtWebGraphAnalog57661AlarmFtpOption=wtWebGraphAnalog57661AlarmFtpOption, wtWebGraphAnalog57661SessCntrlAdminPassword=wtWebGraphAnalog57661SessCntrlAdminPassword, wtWebGraphAnalog57661SensorColor2Entry=wtWebGraphAnalog57661SensorColor2Entry, wtWebGraphAnalog57661LoggerTimebase=wtWebGraphAnalog57661LoggerTimebase, wtWebGraphAnalog57661SetPoint1=wtWebGraphAnalog57661SetPoint1, wtWebGraphAnalog57661MfDeviceTyp=wtWebGraphAnalog57661MfDeviceTyp, wtWebGraphAnalog57661Alert14=wtWebGraphAnalog57661Alert14, wtWebGraphAnalog57661PortScale0=wtWebGraphAnalog57661PortScale0, wtWebGraphAnalog57661StTzStopWday=wtWebGraphAnalog57661StTzStopWday, wtWebGraphAnalog57661ReportCount=wtWebGraphAnalog57661ReportCount, wtWebGraphAnalog57661StTzStopMode=wtWebGraphAnalog57661StTzStopMode, wtWebGraphAnalog57661DiagErrorCount=wtWebGraphAnalog57661DiagErrorCount, wtWebGraphAnalog57661DnsServer1=wtWebGraphAnalog57661DnsServer1, wtWebGraphAnalog57661MailAuthUser=wtWebGraphAnalog57661MailAuthUser, wtWebGraphAnalog57661SensorColor2Table=wtWebGraphAnalog57661SensorColor2Table, wtWebGraphAnalog57661PortComment=wtWebGraphAnalog57661PortComment, wtWebGraphAnalog57661PortScale100=wtWebGraphAnalog57661PortScale100, wtWebGraphAnalog57661Alert8=wtWebGraphAnalog57661Alert8, wtWebGraphAnalog57661UdpPort=wtWebGraphAnalog57661UdpPort, wtWebGraphAnalog57661HorizontalZoom=wtWebGraphAnalog57661HorizontalZoom, wtWebGraphAnalog57661AlarmHysteresis2=wtWebGraphAnalog57661AlarmHysteresis2, wtWebGraphAnalog57661PortEntry=wtWebGraphAnalog57661PortEntry, wtWebGraphAnalog57661SessCntrl=wtWebGraphAnalog57661SessCntrl, wtWebGraphAnalog57661AlarmFtpFileName=wtWebGraphAnalog57661AlarmFtpFileName, wtWebGraphAnalog57661ReportIfEntry=wtWebGraphAnalog57661ReportIfEntry, wtWebGraphAnalog57661FTPServerIP=wtWebGraphAnalog57661FTPServerIP, wtWebGraphAnalog57661TimeZone=wtWebGraphAnalog57661TimeZone, wtWebGraphAnalog57661ReportSyslogClearText=wtWebGraphAnalog57661ReportSyslogClearText, wtWebGraphAnalog57661Alert5=wtWebGraphAnalog57661Alert5, wtWebGraphAnalog57661GraphicsBase=wtWebGraphAnalog57661GraphicsBase, wtWebGraphAnalog57661SyslogEnable=wtWebGraphAnalog57661SyslogEnable, wtWebGraphAnalog57661BinaryTcpClientApplicationMode=wtWebGraphAnalog57661BinaryTcpClientApplicationMode, wtWebGraphAnalog57661GraphicsScale2Min=wtWebGraphAnalog57661GraphicsScale2Min, wtWebGraphAnalog57661StTzStartWday=wtWebGraphAnalog57661StTzStartWday, wtWebGraphAnalog57661AlarmHysteresis1=wtWebGraphAnalog57661AlarmHysteresis1, wtWebGraphAnalog57661Alert12=wtWebGraphAnalog57661Alert12, wtWebGraphAnalog57661SyslogServerPort=wtWebGraphAnalog57661SyslogServerPort, wtWebGraphAnalog57661ReportFtpFileName=wtWebGraphAnalog57661ReportFtpFileName, wtWebGraphAnalog57661VerticalLowerLimit=wtWebGraphAnalog57661VerticalLowerLimit, wtWebGraphAnalog57661AlarmMailOptions=wtWebGraphAnalog57661AlarmMailOptions, wtWebGraphAnalog57661ClockDay=wtWebGraphAnalog57661ClockDay, wtWebGraphAnalog57661BinaryTcpClientInactivity=wtWebGraphAnalog57661BinaryTcpClientInactivity, wtWebGraphAnalog57661Datalogger=wtWebGraphAnalog57661Datalogger, wtWebGraphAnalog57661Alert13=wtWebGraphAnalog57661Alert13, wtWebGraphAnalog57661Manufact=wtWebGraphAnalog57661Manufact, wtWebGraphAnalog57661GraphicsScale1Min=wtWebGraphAnalog57661GraphicsScale1Min, wtWebGraphAnalog57661AlarmMin2=wtWebGraphAnalog57661AlarmMin2, wtWebGraphAnalog57661PortOffset1=wtWebGraphAnalog57661PortOffset1, wtWebGraphAnalog57661FTPServerControlPort=wtWebGraphAnalog57661FTPServerControlPort, wtWebGraphAnalog57661TimeServer2=wtWebGraphAnalog57661TimeServer2, wtWebGraphAnalog57661BinaryTcpClientServerPassword=wtWebGraphAnalog57661BinaryTcpClientServerPassword, wtWebGraphAnalog57661BinaryUdpPeerLocalPort=wtWebGraphAnalog57661BinaryUdpPeerLocalPort, wtWebGraphAnalog57661SensorColorEntry=wtWebGraphAnalog57661SensorColorEntry, wtWebGraphAnalog57661GraphicsScale1Unit=wtWebGraphAnalog57661GraphicsScale1Unit, wtWebGraphAnalog57661SetPoint2=wtWebGraphAnalog57661SetPoint2, wtWebGraphAnalog57661BinaryTcpClientInputTrigger=wtWebGraphAnalog57661BinaryTcpClientInputTrigger, wtWebGraphAnalog57661MailPop3Server=wtWebGraphAnalog57661MailPop3Server, wtWebGraphAnalog57661MfOrderNo=wtWebGraphAnalog57661MfOrderNo, wtWebGraphAnalog57661AlarmFtpClearText=wtWebGraphAnalog57661AlarmFtpClearText, wtWebGraphAnalog57661MfInternet=wtWebGraphAnalog57661MfInternet, wtWebGraphAnalog57661SessCntrlLogout=wtWebGraphAnalog57661SessCntrlLogout, wtWebGraphAnalog57661BinaryTcpClientServerHttpPort=wtWebGraphAnalog57661BinaryTcpClientServerHttpPort, wtWebGraphAnalog57661DeviceClock=wtWebGraphAnalog57661DeviceClock, wtWebGraphAnalog57661Basic=wtWebGraphAnalog57661Basic, wtWebGraphAnalog57661FTPPassword=wtWebGraphAnalog57661FTPPassword, wtWebGraphAnalog57661BinaryModeCount=wtWebGraphAnalog57661BinaryModeCount, wtWebGraphAnalog57661ReportNo=wtWebGraphAnalog57661ReportNo, wtWebGraphAnalog57661BinaryTcpServerHysteresis1=wtWebGraphAnalog57661BinaryTcpServerHysteresis1, wtWebGraphAnalog57661AlarmMailText=wtWebGraphAnalog57661AlarmMailText, wtWebGraphAnalog57661Alert16=wtWebGraphAnalog57661Alert16, wtWebGraphAnalog57661Graphics=wtWebGraphAnalog57661Graphics, wtWebGraphAnalog57661StTzStartMode=wtWebGraphAnalog57661StTzStartMode, wtWebGraphAnalog57661BinaryIfTable=wtWebGraphAnalog57661BinaryIfTable, wtWebGraphAnalog57661BinaryUdpPeerInterval=wtWebGraphAnalog57661BinaryUdpPeerInterval, wtWebGraphAnalog57661SnmpCommunityStringRead=wtWebGraphAnalog57661SnmpCommunityStringRead, wtWebGraphAnalog57661BinaryTcpClientHysteresis1=wtWebGraphAnalog57661BinaryTcpClientHysteresis1, wtWebGraphAnalog57661VerticalUpperLimit=wtWebGraphAnalog57661VerticalUpperLimit, wtWebGraphAnalog57661AlarmDelay=wtWebGraphAnalog57661AlarmDelay, wtComServer=wtComServer, wtWebGraphAnalog57661GraphicsBaseEnable=wtWebGraphAnalog57661GraphicsBaseEnable, wtWebGraphAnalog57661GraphicsBasePollingrate=wtWebGraphAnalog57661GraphicsBasePollingrate, wtWebGraphAnalog57661SnmpEnable=wtWebGraphAnalog57661SnmpEnable, wtWebGraphAnalog57661TimeServer=wtWebGraphAnalog57661TimeServer, wtWebGraphAnalog57661ReportIfTable=wtWebGraphAnalog57661ReportIfTable, wtWebGraphAnalog57661AlarmNo=wtWebGraphAnalog57661AlarmNo, wtWebGraphAnalog57661AlarmMin1=wtWebGraphAnalog57661AlarmMin1, wtWebGraphAnalog57661SystemTrapManagerIP=wtWebGraphAnalog57661SystemTrapManagerIP, wtWebGraphAnalog57661Text=wtWebGraphAnalog57661Text, wtWebGraphAnalog57661AlarmEnable=wtWebGraphAnalog57661AlarmEnable, wtWebGraphAnalog57661SubnetMask=wtWebGraphAnalog57661SubnetMask, wtWebGraphAnalog57661GraphicsBaseWidth=wtWebGraphAnalog57661GraphicsBaseWidth, wtWebGraphAnalog57661StTzEnable=wtWebGraphAnalog57661StTzEnable, wtWebGraphAnalog57661AlarmTimerCron=wtWebGraphAnalog57661AlarmTimerCron, wtWebio=wtWebio, wtWebGraphAnalog57661AlarmEMailAddr=wtWebGraphAnalog57661AlarmEMailAddr, wtWebGraphAnalog57661AlarmTcpIpAddr=wtWebGraphAnalog57661AlarmTcpIpAddr, wtWebGraphAnalog57661BinaryTcpClientServerPort=wtWebGraphAnalog57661BinaryTcpClientServerPort, wtWebGraphAnalog57661AlarmSyslogClearText=wtWebGraphAnalog57661AlarmSyslogClearText, wtWebGraphAnalog57661DeviceLocation=wtWebGraphAnalog57661DeviceLocation, wtWebGraphAnalog57661AlarmTrapText=wtWebGraphAnalog57661AlarmTrapText, wtWebGraphAnalog57661ValuesTable=wtWebGraphAnalog57661ValuesTable, wtWebGraphAnalog57661GraphicsScale1Max=wtWebGraphAnalog57661GraphicsScale1Max, wtWebGraphAnalog57661Alert6=wtWebGraphAnalog57661Alert6, wtWebGraphAnalog57661AlarmClearMailText=wtWebGraphAnalog57661AlarmClearMailText, wtWebGraphAnalog57661BinaryConnectedIpAddr=wtWebGraphAnalog57661BinaryConnectedIpAddr, wtWebGraphAnalog57661ReportEntry=wtWebGraphAnalog57661ReportEntry, wtWebGraphAnalog57661HttpPort=wtWebGraphAnalog57661HttpPort, wtWebGraphAnalog57661AlarmTcpText=wtWebGraphAnalog57661AlarmTcpText, wtWebGraphAnalog57661SyslogSystemMessagesEnable=wtWebGraphAnalog57661SyslogSystemMessagesEnable, wtWebGraphAnalog57661SensorEntry=wtWebGraphAnalog57661SensorEntry, wtWebGraphAnalog57661ClockMin=wtWebGraphAnalog57661ClockMin, wtWebGraphAnalog57661MailReply=wtWebGraphAnalog57661MailReply, wtWebGraphAnalog57661DeviceContact=wtWebGraphAnalog57661DeviceContact, wtWebGraphAnalog57661ReportMailSubject=wtWebGraphAnalog57661ReportMailSubject, wtWebGraphAnalog57661Device=wtWebGraphAnalog57661Device, wtWebGraphAnalog57661Report=wtWebGraphAnalog57661Report, wtWebGraphAnalog57661StTzStopMin=wtWebGraphAnalog57661StTzStopMin, wtWebGraphAnalog57661DiagBinaryError=wtWebGraphAnalog57661DiagBinaryError, wtWebGraphAnalog57661GraphicsBaseHeight=wtWebGraphAnalog57661GraphicsBaseHeight, wtWebGraphAnalog57661LanguageSelect=wtWebGraphAnalog57661LanguageSelect, wtWebGraphAnalog57661ReportClearTcpText=wtWebGraphAnalog57661ReportClearTcpText, wtWebGraphAnalog57661FTPUserName=wtWebGraphAnalog57661FTPUserName, wtWebGraphAnalog57661PortOutputMode=wtWebGraphAnalog57661PortOutputMode, wtWebGraphAnalog57661BinaryTcpServerLocalPort=wtWebGraphAnalog57661BinaryTcpServerLocalPort, wtWebGraphAnalog57661Network=wtWebGraphAnalog57661Network, wtWebGraphAnalog57661GraphicsBaseFrameColor=wtWebGraphAnalog57661GraphicsBaseFrameColor, wtWebGraphAnalog57661Alert7=wtWebGraphAnalog57661Alert7, wtWebGraphAnalog57661Alarm=wtWebGraphAnalog57661Alarm, wtWebGraphAnalog57661AlarmClearMailSubject=wtWebGraphAnalog57661AlarmClearMailSubject, wtWebGraphAnalog57661PortText=wtWebGraphAnalog57661PortText, wtWebGraphAnalog57661ValuesEntry=wtWebGraphAnalog57661ValuesEntry, wtWebGraphAnalog57661BinaryUdpPeerInputTrigger=wtWebGraphAnalog57661BinaryUdpPeerInputTrigger, wtWebGraphAnalog57661BinaryValues=wtWebGraphAnalog57661BinaryValues, wtWebGraphAnalog57661GraphicsScale2Unit=wtWebGraphAnalog57661GraphicsScale2Unit, wtWebGraphAnalog57661AlarmEntry=wtWebGraphAnalog57661AlarmEntry, wtWebGraphAnalog57661BinaryUdpPeerApplicationMode=wtWebGraphAnalog57661BinaryUdpPeerApplicationMode, wtWebGraphAnalog57661PortTable=wtWebGraphAnalog57661PortTable, wtWebGraphAnalog57661MfName=wtWebGraphAnalog57661MfName, wtWebGraphAnalog57661Diag=wtWebGraphAnalog57661Diag, wtWebGraphAnalog57661ClockHrs=wtWebGraphAnalog57661ClockHrs, wtWebGraphAnalog57661BinaryEntry=wtWebGraphAnalog57661BinaryEntry, wtWebGraphAnalog57661Alert4=wtWebGraphAnalog57661Alert4, wtWebGraphAnalog57661Alert9=wtWebGraphAnalog57661Alert9, wtWebGraphAnalog57661SystemTrapEnable=wtWebGraphAnalog57661SystemTrapEnable, wtWebGraphAnalog57661AlarmSyslogIpAddr=wtWebGraphAnalog57661AlarmSyslogIpAddr, wtWebGraphAnalog57661GetHeaderEnable=wtWebGraphAnalog57661GetHeaderEnable, wtWebGraphAnalog57661SessCntrlConfigMode=wtWebGraphAnalog57661SessCntrlConfigMode, wtWebGraphAnalog57661ReportClearMailSubject=wtWebGraphAnalog57661ReportClearMailSubject, wtWebGraphAnalog57661Values=wtWebGraphAnalog57661Values, wtWebGraphAnalog57661BinaryUdpPeerRemoteIpAddr=wtWebGraphAnalog57661BinaryUdpPeerRemoteIpAddr, wtWebGraphAnalog57661DisplaySensorSel=wtWebGraphAnalog57661DisplaySensorSel, wtWebGraphAnalog57661ReportManagerIP=wtWebGraphAnalog57661ReportManagerIP, wtWebGraphAnalog57661HTTP=wtWebGraphAnalog57661HTTP, wtWebGraphAnalog57661AlarmCount=wtWebGraphAnalog57661AlarmCount, wtWebGraphAnalog57661StTzStartHrs=wtWebGraphAnalog57661StTzStartHrs, wtWebGraphAnalog57661StTzOffsetHrs=wtWebGraphAnalog57661StTzOffsetHrs, wtWebGraphAnalog57661Gateway=wtWebGraphAnalog57661Gateway, wtWebGraphAnalog57661BinaryConnectedPort=wtWebGraphAnalog57661BinaryConnectedPort, wtWebGraphAnalog57661PortSensorSelect=wtWebGraphAnalog57661PortSensorSelect, wtWebGraphAnalog57661BinaryTable=wtWebGraphAnalog57661BinaryTable, wtWebGraphAnalog57661IpAddress=wtWebGraphAnalog57661IpAddress, wtWebGraphAnalog57661BinaryIfEntry=wtWebGraphAnalog57661BinaryIfEntry, wtWebGraphAnalog57661TzOffsetMin=wtWebGraphAnalog57661TzOffsetMin)
mibBuilder.exportSymbols("WebGraph-AnalogIO-57661-US-MIB", wtWebGraphAnalog57661ReportClearTrapText=wtWebGraphAnalog57661ReportClearTrapText, wtWebGraphAnalog57661MfHotline=wtWebGraphAnalog57661MfHotline, wtWebGraphAnalog57661BinaryUdpPeerHysteresis1=wtWebGraphAnalog57661BinaryUdpPeerHysteresis1, wtWebGraphAnalog57661PortName=wtWebGraphAnalog57661PortName, wtWebGraphAnalog57661StTzStartMin=wtWebGraphAnalog57661StTzStartMin, wtWebGraphAnalog57661SensorTable=wtWebGraphAnalog57661SensorTable, wtWebGraphAnalog57661Alert3=wtWebGraphAnalog57661Alert3, wtWebGraphAnalog57661MailServer=wtWebGraphAnalog57661MailServer, wtWebGraphAnalog57661TzOffsetHrs=wtWebGraphAnalog57661TzOffsetHrs, wtWebGraphAnalog57661BinaryTcpServerInputTrigger=wtWebGraphAnalog57661BinaryTcpServerInputTrigger, wtWebGraphAnalog57661ReportEnable=wtWebGraphAnalog57661ReportEnable, wtWebGraphAnalog57661AlarmTable=wtWebGraphAnalog57661AlarmTable, wtWebGraphAnalog57661BinaryTcpServerClientHttpPort=wtWebGraphAnalog57661BinaryTcpServerClientHttpPort, wtWebGraphAnalog57661ReportSyslogText=wtWebGraphAnalog57661ReportSyslogText, wtWebGraphAnalog57661AlarmIfTable=wtWebGraphAnalog57661AlarmIfTable, wtWebGraphAnalog57661FTPOption=wtWebGraphAnalog57661FTPOption, wtWebGraphAnalog57661AlarmIfEntry=wtWebGraphAnalog57661AlarmIfEntry, wtWebGraphAnalog57661AutoScaleEnable=wtWebGraphAnalog57661AutoScaleEnable, wtWebGraphAnalog57661AlarmSyslogText=wtWebGraphAnalog57661AlarmSyslogText, wtWebGraphAnalog57661TsEnable=wtWebGraphAnalog57661TsEnable, wtWebGraphAnalog57661SNMP=wtWebGraphAnalog57661SNMP, wtWebGraphAnalog57661DiagErrorMessage=wtWebGraphAnalog57661DiagErrorMessage, wtWebGraphAnalog57661Alert1=wtWebGraphAnalog57661Alert1, wtWebGraphAnalog57661StTzStopHrs=wtWebGraphAnalog57661StTzStopHrs, wtWebGraphAnalog57661UdpEnable=wtWebGraphAnalog57661UdpEnable, wtWebGraphAnalog57661ReportFtpOption=wtWebGraphAnalog57661ReportFtpOption, wtWebGraphAnalog57661ReportFtpClearText=wtWebGraphAnalog57661ReportFtpClearText, wtWebGraphAnalog57661ClockYear=wtWebGraphAnalog57661ClockYear, wtWebGraphAnalog57661MailAdName=wtWebGraphAnalog57661MailAdName, wtWebGraphAnalog57661BinaryUdpPeerHysteresis2=wtWebGraphAnalog57661BinaryUdpPeerHysteresis2, wtWebGraphAnalog57661DiagErrorIndex=wtWebGraphAnalog57661DiagErrorIndex, wtWebGraphAnalog57661Ports=wtWebGraphAnalog57661Ports, wtWebGraphAnalog57661Startup=wtWebGraphAnalog57661Startup, wtWebGraphAnalog57661BinaryTcpClientInterval=wtWebGraphAnalog57661BinaryTcpClientInterval, wtWebGraphAnalog57661SensorColor=wtWebGraphAnalog57661SensorColor, wtWebGraphAnalog57661StTzOffsetMin=wtWebGraphAnalog57661StTzOffsetMin, wtWebGraphAnalog57661BinaryValuesTable=wtWebGraphAnalog57661BinaryValuesTable, wtWebGraphAnalog57661AlarmTcpPort=wtWebGraphAnalog57661AlarmTcpPort)
