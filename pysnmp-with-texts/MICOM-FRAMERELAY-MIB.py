#
# PySNMP MIB module MICOM-FRAMERELAY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MICOM-FRAMERELAY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:12:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
micom_oscar, = mibBuilder.importSymbols("MICOM-OSCAR-MIB", "micom-oscar")
mcmSysIfExtPPA, mcmSysIfExtModule, mcmSysAsciiTimeOfDay = mibBuilder.importSymbols("MICOM-SYS-MIB", "mcmSysIfExtPPA", "mcmSysIfExtModule", "mcmSysAsciiTimeOfDay")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Integer32, Counter64, IpAddress, Unsigned32, Counter32, NotificationType, iso, Gauge32, ModuleIdentity, TimeTicks, MibIdentifier, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Counter64", "IpAddress", "Unsigned32", "Counter32", "NotificationType", "iso", "Gauge32", "ModuleIdentity", "TimeTicks", "MibIdentifier", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class Index(Integer32):
    pass

micom_frame_relay = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 7)).setLabel("micom-frame-relay")
fr_configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1)).setLabel("fr-configuration")
fr_control = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 2)).setLabel("fr-control")
mcmFrGlobalGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 1))
mcmFrMaxDLCI = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrMaxDLCI.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrMaxDLCI.setDescription('NAME = ; DESC = The maximum number of DLCIs that \\ may be configured for the entire \\ box; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmFrMaxVirtualPorts = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrMaxVirtualPorts.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrMaxVirtualPorts.setDescription('NAME = ; DESC = The maximum number of Virtual Ports that \\ may be configured for the entire \\ box; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmFrMaxDlciPerLine = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrMaxDlciPerLine.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrMaxDlciPerLine.setDescription('NAME = ; DESC = The maximum number of DLCIs that may \\ be configured for a Frame Relay line; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmFrConnectTime = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrConnectTime.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrConnectTime.setDescription('NAME = ; DESC = The sysUpTime when the FR Driver was \\ initialized; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmFrOctetsSent = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrOctetsSent.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrOctetsSent.setDescription('NAME = ; DESC = Total number of Frame Relay Information \\ field octets that were sent out all FR \\ ports; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmFrOctetsReceived = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrOctetsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrOctetsReceived.setDescription('NAME = ; DESC = Total number of Frame Relay Information \\ Field octets that were received across all \\ FR ports; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmFrFramesSent = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrFramesSent.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrFramesSent.setDescription('NAME = ; DESC = Total number of Frame Relay Frames \\ sent out all FR ports; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmFrFramesReceived = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrFramesReceived.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrFramesReceived.setDescription('NAME = ; DESC = Total number of Frame Relay Frames \\ received in on all FR ports; HELP = CAPABILITIES = NET_CFG, VPN_DISP;')
mcmFrGlobalGroupCntrAction = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("other", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmFrGlobalGroupCntrAction.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrGlobalGroupCntrAction.setDescription('NAME = ; DESC = This object has been OBSOLETED for software \\ releases beginning with Release 3.0. \\ Setting this object to reset will reset \\ counters in this group; HELP = All objects will be reset in this group \\ except mcmFrMaxDLCI, mcmFrMaxVirtualPorts, \\ mcmFrMaxDlciPerLine and mcmFrConnectTime \\ which are not counters; CAPABILITIES = NET_CFG, VPN_CFG;')
mcmFrDNANumberingPlan = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("e164", 1), ("x121", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrDNANumberingPlan.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrDNANumberingPlan.setDescription('NAME = ; DESC = The value of this object designates the \\ numbering plan of the DNA; HELP = The number plan is used in conjunction \\ with a DNA. This object identifies the \\ type of call as E.164 or X.121 ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmFrActivePanlDlciSVCs = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrActivePanlDlciSVCs.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrActivePanlDlciSVCs.setDescription('NAME = ; DESC = The number of active PANL DLCI SVCs \\ for all FR ports.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmFrTotalTunnelingPVCs = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTotalTunnelingPVCs.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrTotalTunnelingPVCs.setDescription('NAME = ; DESC = The total number of tunneling PVCs configured.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmFrActiveTunnelingPVCs = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrActiveTunnelingPVCs.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrActiveTunnelingPVCs.setDescription('NAME = ; DESC = The number of active tunneling PVCs configured.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmFrPanlLmiTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPanlLmiTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPanlLmiTrapEnable.setDescription('NAME = ; DESC = This object indicates whether the generation of \\ Trap messages are enabled/disabled for the FR \\ PANL LMI module.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmFrMsmTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrMsmTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrMsmTrapEnable.setDescription('NAME = ; DESC = This object indicates whether the generation of \\ Trap messages are enabled/disabled for the FR \\ MSM module.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmFrCoreTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrCoreTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrCoreTrapEnable.setDescription('NAME = ; DESC = This object indicates whether the generation of \\ Trap messages are enabled/disabled for the FR \\ Core module.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmFrPlmTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPlmTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPlmTrapEnable.setDescription('NAME = ; DESC = This object indicates whether the generation of \\ Trap messages are enabled/disabled for the FR \\ Plm module.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmFrPhyPortTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2), )
if mibBuilder.loadTexts: mcmFrPhyPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortTable.setDescription('NAME = ; DESC = Table of physical port entries \\ containing flow control info \\ and statistics; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmFrPhyPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "mcmFrPhyPortExtIfIndex"))
if mibBuilder.loadTexts: mcmFrPhyPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortEntry.setDescription('NAME = ; DESC = Entry for a Frame Relay physical \\ port; HELP = Entry for a Frame Relay physical \\ port, containing flow control \\ information and statistics NOT \\ included in the RFC 1315 mib; CAPABILITIES = ;')
mcmFrPhyPortExtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortExtIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortExtIfIndex.setDescription('NAME = ; DESC = The ifIndex of the physical port; HELP = ; CAPABILITIES = ;')
mcmFrPhyPortFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortFlowControl.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortFlowControl.setDescription('NAME = ; DESC = Determines whether or not rate enforcement \\ based on congestion should be enforced; HELP = Enabling this feature will allow packets \\ exceeding the current allowable rate \\ to be dropped if congestion has been \\ detected on the network.; CAPABILITIES = ;')
mcmFrPhyPortThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortThroughput.setStatus('deprecated')
if mibBuilder.loadTexts: mcmFrPhyPortThroughput.setDescription('NAME = Frame Relay DLCI Throughput; DESC = This object has been DEPRECATED for software \\ releases beginning with Release 3.0, and replaced with \\ new objects TxThroughput, RxThroughput. \\ Default throughput for a PVC; HELP = Defalut throughput used for all \\ PVCs on the same frame relay \\ physical interface. Will be \\ assigned to a PVC when the PVC \\ is created. valid if flow cntl \\ is enabled. ; CAPABILITIES = ;')
mcmFrPhyPortDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortDelta.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortDelta.setDescription('NAME = Frame Relay Delta; DESC = Delta time interval to increase or \\ decrease the transmit rate by monitoring \\ the number of frames rcvd or txd with the \\ FECN bit cleared or set; HELP = Default used for adding PVCs. The \\ delta time interval to increase or \\ decrease the current transmit rate \\ based on then number of frames \\ received with the FECN bit cleared \\ or set. Typically 4 types end-to-end \\ transit delay. Used only if flow \\ control is enabled. (In 1 second \\ units.). Valid if flow cntl is enabled; CAPABILITIES = ;')
mcmFrPhyPortConsectiveFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortConsectiveFrames.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortConsectiveFrames.setDescription('NAME = ; DESC = Number of consecutive frames received \\ with the BECN bit set before reducing \\ the transmit rate; HELP = Number of consecutive frames that must \\ have BECN bit set before reducing \\ transmit rate. Transmit rate is \\ increased when S/2 consecutive frames \\ are received with teh BECN bit cleared. \\ Valid only when flow control is enabled.\\ See CCITT Q.922 Appendix I, for the \\ method to compute parameter S.\\ Valid if flow cntl is enabled; CAPABILITIES = ;')
mcmFrPhyPortMtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortMtuSize.setStatus('deprecated')
if mibBuilder.loadTexts: mcmFrPhyPortMtuSize.setDescription('NAME = ; DESC = This object has been DEPRECATED for software \\ releases beginning with Release 3.0, and replaced with \\ new objects TxMaxFrameSize, RxMaxFrameSize. \\ Maximum Transmission Unit Size; HELP = Maximum Packet size that can be \\ passed to Frame Relay and will \\ be sent across the Frame Relay \\ network.; CAPABILITIES = ;')
mcmFrPhyPortConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortConnectTime.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortConnectTime.setDescription('NAME = ; DESC = sysUpTime when the port was created; HELP = ; CAPABILITIES = ;')
mcmFrPhyPortLMISent = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortLMISent.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortLMISent.setDescription('NAME = ; DESC = Number of PVC LMI frames sent on \\ physical port (DLCI 0); HELP = ; CAPABILITIES = ;')
mcmFrPhyPortLMIReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortLMIReceived.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortLMIReceived.setDescription('NAME = ; DESC = Number of PVC LMI frames received \\ on this port (DLCI 0); HELP = ; CAPABILITIES = ;')
mcmFrPhyPortXIDSent = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortXIDSent.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortXIDSent.setDescription('NAME = ; DESC = Number of XID frames sent on \\ this interface; HELP = Valid only if packet negotiation is enabled. \\ Network must support XID frames; CAPABILITIES = ;')
mcmFrPhyPortXIDReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortXIDReceived.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortXIDReceived.setDescription('NAME = ; DESC = Number of XID frames received on \\ this interface; HELP = Valid only if packet negotiation is enabled. \\ Network must support XID frames; CAPABILITIES = ;')
mcmFrPhyPortCLLMSent = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortCLLMSent.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortCLLMSent.setDescription('NAME = ; DESC = Number of CLLM frames sent on \\ this interface; HELP = Network must support CLLM before \\ this feature is enabled; CAPABILITIES = ;')
mcmFrPhyPortCLLMReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortCLLMReceived.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortCLLMReceived.setDescription('NAME = ; DESC = Number of CLLM frames received on \\ this interface; HELP = Network must support CLLM before \\ this feature is enabled; CAPABILITIES = ;')
mcmFrPhyPortHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortHeaderErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortHeaderErrors.setDescription('NAME = ; DESC = Number of frames received with \\ incomplete or missing address \\ field; HELP = ; CAPABILITIES = ;')
mcmFrPhyPortInvalidDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortInvalidDLCI.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortInvalidDLCI.setDescription('NAME = ; DESC = Number of frames on an unassigned \\ or invalid number; HELP = ; CAPABILITIES = ;')
mcmFrPhyPortShortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortShortFrames.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortShortFrames.setDescription('NAME = ; DESC = Number of short frames received; HELP = ; CAPABILITIES = ;')
mcmFrPhyPortLongFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortLongFrames.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortLongFrames.setDescription('NAME = ; DESC = Number of long frames received that \\ were too long (larger than MTU); HELP = ; CAPABILITIES = ;')
mcmFrPhyPortIgnoredFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortIgnoredFrames.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortIgnoredFrames.setDescription('NAME = ; DESC = Number of frames received that were \\ ignored (no errors); HELP = ; CAPABILITIES = ;')
mcmFrPhyPortXIDExpirations = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortXIDExpirations.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortXIDExpirations.setDescription('NAME = ; DESC = Number of XID TM21 timer expirations; HELP = Valid only if MTU negotiation is \\ enabled; CAPABILITIES = ;')
mcmFrPhyPortTxExpirations = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortTxExpirations.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortTxExpirations.setDescription('NAME = ; DESC = Number of flow control (CLLM) timer \\ expirations; HELP = Valid only if flow control negotiation is configured; CAPABILITIES = ;')
mcmFrPhyPortPVCLMIStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortPVCLMIStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortPVCLMIStatus.setDescription('NAME = ; DESC = The status of the PVC LMI (up or down). ; HELP = ; CAPABILITIES = ;')
mcmFrPhyPortSVCLMIStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortSVCLMIStatus.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrPhyPortSVCLMIStatus.setDescription('NAME = ; DESC = This object has been OBSOLETED for software \\ releases beginning with Release 3.0. \\ The status of the SVC LMI (up or down). ; HELP = ; CAPABILITIES = ;')
mcmFrPhyPortActivePanlDlciSVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortActivePanlDlciSVCs.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortActivePanlDlciSVCs.setDescription('NAME = ; DESC = Number of active PANL DLCI SVCs on \\ this interface.; HELP =; CAPABILITIES = ;')
mcmFrPhyPortRxDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortRxDataFrames.setStatus('deprecated')
if mibBuilder.loadTexts: mcmFrPhyPortRxDataFrames.setDescription('NAME = ; DESC = This object has been DEPRECATED for software \\ releases beginning with Release 3.0, and replaced \\ with the new object mcmFrPhyPortDataFrames. \\ Number of data frames received on all assigned \\ DLCIs.; HELP =; CAPABILITIES = ;')
mcmFrPhyPortTxDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortTxDataFrames.setStatus('deprecated')
if mibBuilder.loadTexts: mcmFrPhyPortTxDataFrames.setDescription('NAME = ; DESC = This object has been DEPRECATED for software \\ releases beginning with Release 3.0, and replaced \\ with the new object mcmFrPhyPortDataFrames. \\ Number of data frames sent on all assigned \\ DLCIs.; HELP =; CAPABILITIES = ;')
mcmFrPhyPortRxActivations = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortRxActivations.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortRxActivations.setDescription('NAME = ; DESC = Number of activations received on this interface.; HELP =; CAPABILITIES = ;')
mcmFrPhyPortRxDeactivations = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortRxDeactivations.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortRxDeactivations.setDescription('NAME = ; DESC = Number of deactivations received on this interface.; HELP =; CAPABILITIES = ;')
mcmFrPhyPortRxOkAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortRxOkAcks.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortRxOkAcks.setDescription('NAME = ; DESC = Number of OK ACK messages received on this \\ interface.; HELP =; CAPABILITIES = ;')
mcmFrPhyPortRxErrAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortRxErrAcks.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortRxErrAcks.setDescription('NAME = ; DESC = Number of Error ACK messages received on this \\ interface.; HELP =; CAPABILITIES = ;')
mcmFrPhyPortRxUnknowns = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortRxUnknowns.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortRxUnknowns.setDescription('NAME = ; DESC = Number of Unknown messages received on this \\ interface.; HELP =; CAPABILITIES = ;')
mcmFrPhyPortRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortRxErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortRxErrors.setDescription('NAME = ; DESC = Number of Error messages received on this \\ interface.; HELP =; CAPABILITIES = ;')
mcmFrPhyPortRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortRxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortRxOctets.setDescription('NAME = ; DESC = Number of data bytes received.; HELP =; CAPABILITIES = ;')
mcmFrPhyPortTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortTxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortTxOctets.setDescription('NAME = ; DESC = Number of data bytes sent.; HELP =; CAPABILITIES = ;')
mcmFrPhyPortTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortTxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortTxThroughput.setDescription('NAME = Frame Relay DLCI Tx Throughput; DESC = The transmission CIR expressed in bits/sec.; HELP = ; CAPABILITIES = ;')
mcmFrPhyPortRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortRxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortRxThroughput.setDescription('NAME = Frame Relay DLCI Rx Throughput; DESC = The receive CIR expressed in bits/sec.; HELP = ; CAPABILITIES = ;')
mcmFrPhyPortTxMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortTxMaxFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortTxMaxFrameSize.setDescription('NAME = ; DESC = The maximum transmission FR packet size \\ expressed in bytes.; HELP = ; CAPABILITIES = ;')
mcmFrPhyPortRxMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortRxMaxFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortRxMaxFrameSize.setDescription('NAME = ; DESC = The maximum receive FR packet size \\ expressed in bytes.; HELP = ; CAPABILITIES = ;')
mcmFrPhyPortRateEnf = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortRateEnf.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortRateEnf.setDescription('NAME = ; DESC = The rate enforcement enabled or disabled \\ parameter for FR congestion management \\ processing.; HELP = ; CAPABILITIES = ;')
mcmFrPhyPortTxBc = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortTxBc.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortTxBc.setDescription('NAME = ; DESC = The transmission committed burst size \\ expressed in bits.; HELP = ; CAPABILITIES = ;')
mcmFrPhyPortRxBc = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortRxBc.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortRxBc.setDescription('NAME = ; DESC = The receive committed burst size \\ expressed in bits.; HELP = ; CAPABILITIES = ;')
mcmFrPhyPortTxBe = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortTxBe.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortTxBe.setDescription('NAME = ; DESC = The transmission excess burst size \\ expressed in bits.; HELP = ; CAPABILITIES = ;')
mcmFrPhyPortRxBe = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortRxBe.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortRxBe.setDescription('NAME = ; DESC = The receive excess burst size \\ expressed in bits.; HELP = ; CAPABILITIES = ;')
mcmFrPhyPortDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortDataFrames.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPhyPortDataFrames.setDescription('NAME = ; DESC = Total number of data frames on all assigned \\ DLCIs.; HELP =; CAPABILITIES = ;')
mcmFrPVCPhyTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 3), )
if mibBuilder.loadTexts: mcmFrPVCPhyTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPVCPhyTable.setDescription('NAME = ; DESC = Table that extends the RFC 1315 \\ DLCMI table contianing info \\ about the PVC LMI; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmFrPVCPhyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 3, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "mcmFrPVCPhyIfIndex"))
if mibBuilder.loadTexts: mcmFrPVCPhyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPVCPhyEntry.setDescription('NAME = ; DESC = Entry into the micom PVC LMI \\ configuration extensions; HELP = Entry in the PVC Phys Table. \\ Additional information required \\ (not in RFC 1315 DLCI table); CAPABILITIES = ;')
mcmFrPVCPhyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCPhyIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPVCPhyIfIndex.setDescription('NAME = ; DESC = IfIndex of the physical port; HELP = ; CAPABILITIES = ;')
mcmFrPVCLMIMode = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCLMIMode.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPVCLMIMode.setDescription('NAME = ; DESC = Indicates whether the local PVC \\ LMI is operating in the DTE or \\ DCE mode; HELP = In DTE mode the Status Enquiry messages \\ will be sent. In DCE mode, Status \\ Reports will be sent in response \\ to Status Enquiry mesages.; CAPABILITIES = ;')
mcmFrPVCBiDir = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCBiDir.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPVCBiDir.setDescription('NAME = ; DESC = Indicates whether the PVC LMI \\ should perform both the sending \\ of status enquiries and sending \\ of status reports; HELP = Must be with bilateral agreement \\ with the switch enabled. Switch \\ may send status enquiry messages \\ as defined for the DTEs and allows\\ the DTE to respond with a status \\ messages in the same way as switch \\ does (in this mode Status Enquiries \\ will still be transmitted normally; CAPABILITIES = ;')
mcmFrSVCPhyTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4), )
if mibBuilder.loadTexts: mcmFrSVCPhyTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCPhyTable.setDescription('NAME = ; DESC = Table containing the SVC default \\ parameters ; HELP = Table containing default SVC \\ parameters to be used if none \\ are specified when configuring \\ an SVC; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmFrSVCPhyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "mcmFrSVCPhyIfIndex"))
if mibBuilder.loadTexts: mcmFrSVCPhyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCPhyEntry.setDescription('NAME = ; DESC = Entry into the SVC Default\\ parameter table; HELP = Each entry contains the default \\ SVC parameters for the specified \\ interface; CAPABILITIES = ;')
mcmFrSVCPhyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCPhyIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCPhyIfIndex.setDescription('NAME = ; DESC = IfIndex of the physical port \\ the SVC information is \\ associated with; HELP = ; CAPABILITIES = ;')
mcmFrSVCState = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("q933svc", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCState.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCState.setDescription('NAME = ; DESC = SVC LMI Protocol to be used; HELP = All SVC connection setup must \\ use the same LMI protocol; CAPABILITIES = ;')
mcmFrSVCT303 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCT303.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCT303.setDescription('NAME = ; DESC = The duration, in seconds, \\ of the setup timer for SVCs.; HELP = Causes at most one Setup retransmission.\\ How long the SVC LMI will wait \\ for a response from the network \\ (e.g. call proceeding, connect) \\ before the setup message will be \\ retransmitted. In 1 second unit. \\ Q.931 recommends 4 seconds; CAPABILITIES = ;')
mcmFrSVCT305 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCT305.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCT305.setDescription('NAME = ; DESC = The duration of the Disconnect \\ timer (in seconds) for SVCs.; HELP = Causes at most one release \\ transmission. How long the SVC LMI will wait \\ for a release message from the \\ network before it will transmit \\ a release message. (The SVC LMI \\ will then wait for a release \\ message from the network.) In 1 second \\ unit. Q.931 recommends 30 seconds; CAPABILITIES = ;')
mcmFrSVCT308 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCT308.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCT308.setDescription('NAME = ; DESC = The duration of Release timer (in \\ seconds) for SVCs.; HELP = Causes at most one release transmission. \\ How long the SVC LMI will wait \\ for a response from the network \\ before the release message will \\ be retransmitted. (When the \\ second release is transmitted, \\ the local SVC LMI considers \\ the corresponding SVC to have \\ been released by the network \\ as well - even if no response \\ is received.) In 1 second units. \\ Q.931 recommends 4 seconds; CAPABILITIES = ;')
mcmFrSVCT310 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCT310.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCT310.setDescription('NAME = ; DESC = The duration of Connect Timer (in seconds) \\ for SVCs.; HELP = Causes connection disconnection. \\ How long the SVC LMI will wait \\ (in seconds) for a Connect message \\ (after receiving the Call Proceeding \\ message) before sending a Release \\ message. In 1 second units. Q.931 \\ recommends a duration between 30\\ to 120 seconds on the DTE side and \\ 10 seconds on the DC#E side; CAPABILITIES = ;')
mcmFrSVCMaxCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMaxCalls.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCMaxCalls.setDescription('NAME = ; DESC = Maximum number of SVC Connections; HELP = The sum of both the incoming and outgoing SVCs; CAPABILITIES = ;')
mcmFrSVCMaxTxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMaxTxSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCMaxTxSize.setDescription('NAME = ; DESC = Default Maximum transmit frame size, \\ in bytes, to negotiate with the remote; HELP = This value will be used only if a \\ specific value is not included in the \\ Connect Request primitive. A value of \\ 0 indicates the network default values \\ are to be used (unless it is passed down \\ at connect time). Expressed in bytes. CAPABILITIES = ;')
mcmFrSVCMaxRxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMaxRxSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCMaxRxSize.setDescription('NAME = ; DESC = Maximum receive frame size in bytes; HELP = Default value for the maximum receive \\ frame size to negotiate with the remote. \\ This value will be used only if a \\ specific value is not included in the \\ Connect Request primitive. A value of \\ 0 indicates the network default values \\ are to be used (unless it is passed down \\ at connect time). Expressed in bytes. CAPABILITIES = ;')
mcmFrSVCMinDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMinDLCI.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCMinDLCI.setDescription('NAME = ; DESC = Lowest DLCI value for SVCs on \\ this network link; HELP = This value applies only to SVC connections. \\ PVC DLCI connections may be established \\ above or below this value.; CAPABILITIES = ;')
mcmFrSVCMaxDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMaxDLCI.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCMaxDLCI.setDescription('NAME = ; DESC = Highest DLCI value for SVCs on \\ the this network; HELP = This value applies only to SVC connections. \\ PVC DLCI connections may be established \\ above or below this value.; CAPABILITIES = ;')
mcmFrSVCMinTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMinTxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCMinTxThroughput.setDescription('NAME = ; DESC = Minimum transmit throughput in \\ bits per seconds; HELP = To negotiate with the remote when used with the \\ maximum transmit throughput \\ unless overwritten at connect time. \\ A value of 0 indicates the network \\ default values are to be used; CAPABILITIES = ;')
mcmFrSVCMinRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMinRxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCMinRxThroughput.setDescription('NAME = ; DESC = Minimum receive throughput in \\ bits per seconds; HELP = To negotiate with the remote when used with the \\ maximum receive throughput \\ unless overwritten at connect time. \\ A value of 0 indicates the network \\ default values are to be used; CAPABILITIES = ;')
mcmFrSVCMaxTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMaxTxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCMaxTxThroughput.setDescription('NAME = ; DESC = Maximum transmit throughput in \\ bits per seconds; HELP = To negotiate with the remote when used with the \\ minimum transmit throughput \\ unless overwritten at connect time. \\ A value of 0 indicates the network \\ default values are to be used; CAPABILITIES = ;')
mcmFrSVCMaxRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMaxRxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCMaxRxThroughput.setDescription('NAME = ; DESC = Maximum receive throughput in \\ bits per seconds; HELP = To negotiate with the remote when used with the \\ minimum receive throughput \\ unless overwritten at connect time. \\ A value of 0 indicates the network \\ default values are to be used; CAPABILITIES = ;')
mcmFrSVCTxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCTxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCTxBurstSize.setDescription('NAME = ; DESC = Transmit burst size in bytes; HELP = Default Committed Transmit burst \\ size, in bytes, to negotiate with \\ the remote unless overwritten at \\ connect time. A value of 0 \\ indicates the network default \\ values are to be used; CAPABILITIES = ;')
mcmFrSVCRxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCRxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCRxBurstSize.setDescription('NAME = ; DESC = Receive burst size in bytes; HELP = Default Committed Receive burst \\ size, in bytes, to negotiate with \\ the remote unless overwritten at \\ connect time. A value of 0 \\ indicates the network default \\ values are to be used; CAPABILITIES = ;')
mcmFrSVCExcessTxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCExcessTxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCExcessTxBurstSize.setDescription('NAME = ; DESC = Excess transmit burst size in bytes; HELP = Default Uncommitted Transmit burst \\ size, in bytes, to negotiate with \\ the remote unless overwritten at \\ connect time. A value of 0 \\ indicates the network default \\ values are to be used; CAPABILITIES = ;')
mcmFrSVCExcessRxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCExcessRxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCExcessRxBurstSize.setDescription('NAME = ; DESC = Excess receive burst size in bytes; HELP = Default Uncommitted Receive burst \\ size, in bytes, to negotiate with \\ the remote unless overwritten at \\ connect time. A value of 0 \\ indicates the network default \\ values are to be used; CAPABILITIES = ;')
mcmFrVirtualPortTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 5), )
if mibBuilder.loadTexts: mcmFrVirtualPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrVirtualPortTable.setDescription('NAME = ; DESC = Table to define the virtual port; HELP = Table to provide the mapping between \\ virtual ports and physical ports \\ and to define the virtual port \\ parameters; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmFrVirtualPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 5, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "mcmFrVirtualPortIfIndex"))
if mibBuilder.loadTexts: mcmFrVirtualPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrVirtualPortEntry.setDescription('NAME = ; DESC = Entry into the Virtual port table; HELP = Each entry in this table contains \\ information to define a virtual \\ port; CAPABILITIES = ;')
mcmFrVirtualPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrVirtualPortIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrVirtualPortIfIndex.setDescription('NAME = Virtual Port Interface Number; DESC = IfIndex associated with this Virtual Port; HELP = ; CAPABILITIES = ;')
mcmFrVirtualPortPhyPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrVirtualPortPhyPortIfIndex.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrVirtualPortPhyPortIfIndex.setDescription('NAME = ; DESC = *******NOTE: THIS OBJECT IS OBSOLETE******* This information is no longer useful for \\ virtual ports. The virtual ports no longer \\ have an underlying network. Only SVC DNAs \\ and PVC DLCIs are associated with VPs now. \\ The underlying MPANL will take care of which \\ link the SVC is to be made on and a Physical \\ Line IfIndex has been added to the PVCs. VP \\ are no longer required to provide the backup \\ link support (MPANL now does that).\\ IfIndex of the Frame Relay physical \\ port for which the virtual port is \\ (or will be) linked to; HELP = ; CAPABILITIES = ;')
mcmFrVirtualPortPPA = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrVirtualPortPPA.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrVirtualPortPPA.setDescription('NAME = This object has been OBSOLETED for software \\ releases beginning with Release 3.0. \\ Virtual Port PPA Number ; DESC = Point of Physical attachment for \\ this Virtual Port; HELP = ; CAPABILITIES = ;')
mcmFrVirtualPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("basic", 1), ("easyRouting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrVirtualPortMode.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrVirtualPortMode.setDescription('NAME = Virtual Port Mode; HELP = Mode of the virtual port; DESC = Easy Routing requires that data \\ will be switched between the \\ Virtual Circuits on the this \\ virutal port. Basic mode turns \\ off the switching mode; CAPABILITIES = ;')
mcmFrVirtualPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("uninitialized", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrVirtualPortState.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrVirtualPortState.setDescription('NAME = Virtual Port State; DESC = State of the virtual port; HELP = ; CAPABILITIES = ;')
mcmFrVirtualPortEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrVirtualPortEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrVirtualPortEntryStatus.setDescription('NAME = ; DESC = Virtual port row status; HELP = Indicates whether or not this \\ entry is valid; CAPABILITIES = ;')
mcmFrVirtualPortProtocolBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ip-configured", 1), ("ipx-configured", 2), ("ip-and-ipx-configured", 3), ("bridge-configured", 4), ("ip-and-bridge-configured", 5), ("ipx-and-bridge-configured", 6), ("ip-and-ipx-and-bridge-configured", 7), ("sNA-configured", 8), ("x25-configured", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrVirtualPortProtocolBinding.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrVirtualPortProtocolBinding.setDescription('NAME = ; DESC = Bitmap that contains the protocols bound \\ to this Virtual Port.; HELP = ; CAPABILITIES = ;')
mcmFrVirtualPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrVirtualPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrVirtualPortNumber.setDescription('NAME = ; DESC = This object indicates the Virtual \\ Port Number used as an identifier \\ for a Virtual Port. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrSVCMapTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6), )
if mibBuilder.loadTexts: mcmFrSVCMapTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCMapTable.setDescription('NAME = ; DESC = Table for SVC to VP bindings; HELP = This table will give the SVC \\ DNA address to be bound to the \\ specified Virtual Port; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmFrSVCMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "mcmFrSVCMapVirtualPortIfIndex"), (0, "MICOM-FRAMERELAY-MIB", "mcmFrSVCMapDNA"))
if mibBuilder.loadTexts: mcmFrSVCMapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCMapEntry.setDescription('NAME = ; DESC = Entry in the SVC to VP binding \\ table; HELP = SVC/VP binding entry in the SVC \\ binding table. Multiple SVCS \\ (DNAs) may be bound to a single \\ VP (ifindex); CAPABILITIES = ;')
mcmFrSVCMapVirtualPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapVirtualPortIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCMapVirtualPortIfIndex.setDescription('NAME = ; DESC = Virtual Port ifIndex associated \\ with this DNA; HELP = ; CAPABILITIES = ;')
mcmFrSVCMapDNA = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapDNA.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCMapDNA.setDescription('NAME = ; DESC = Remote DNA to associate SVC with \\ the corresponding virtual port; HELP = DNA to be mapped to the \\ corresponding virtual port. \\ This will be used to create \\ an SVC to the corresponding \\ remote DNA; CAPABILITIES = ;')
mcmFrSVCMapDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapDLCI.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCMapDLCI.setDescription('NAME = ; DESC = DLCI for the connected SVC; HELP = Valid only when the SVC is up; CAPABILITIES = ;')
mcmFrSVCMapMaxTxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapMaxTxSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCMapMaxTxSize.setDescription('NAME = ; DESC = Maximum transmit frame size to \\ negotiate with the remote (in \\ bytes); HELP = This value will override the default values for \\ the physical interface. A value \\ of 0 indicates the networks default \\ values are to be used. Experessed in \\ bytes; CAPABILITIES = ;')
mcmFrSVCMapMaxRxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapMaxRxSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCMapMaxRxSize.setDescription('NAME = ; DESC = Maximum receive frame size to \\ negotiate with the remote (in \\ bytes); HELP = This value will override the default values for \\ the physical interface. A value \\ of 0 indicates the networks default \\ values are to be used. Experessed in \\ bytes; CAPABILITIES = ;')
mcmFrSVCMapMinTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapMinTxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCMapMinTxThroughput.setDescription('NAME = ; DESC = Minimum transmit throughput in \\ bits per second to negotiate with \\ the remote; HELP = Used with the maximum transmit throughput. \\ This value will override default \\ values given for this physical \\ interface. A value of 0 indicates \\ the network default values are to \\ be used; CAPABILITIES = ;')
mcmFrSVCMapMinRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapMinRxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCMapMinRxThroughput.setDescription('NAME = ; DESC = Minimum receive throughput in \\ bits per second to negotiate with \\ the remote; HELP = Used with the maximum receive throughput. \\ This value will override default \\ values given for this physical \\ interface. A value of 0 indicates \\ the network default values are to \\ be used; CAPABILITIES = ;')
mcmFrSVCMapMaxTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapMaxTxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCMapMaxTxThroughput.setDescription('NAME = ; DESC = Maximum transmit throughput in \\ bits per second to negotiate with \\ the remote; HELP = Used with the minimum transmit throughput. \\ This value will override default \\ values given for this physical \\ interface. A value of 0 indicates \\ the network default values are to \\ be used; CAPABILITIES = ;')
mcmFrSVCMapMaxRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapMaxRxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCMapMaxRxThroughput.setDescription('NAME = ; DESC = Maximum receive throughput in \\ bits per second to negotiate with \\ the remote; HELP = Used with the minimum receive throughput. \\ This value will override default \\ values given for this physical \\ interface. A value of 0 indicates \\ the network default values are to \\ be used; CAPABILITIES = ;')
mcmFrSVCMapTxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapTxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCMapTxBurstSize.setDescription('NAME = ; DESC = Transmit burst size in bytes; HELP = Committed transmit burst size, \\ in bytes, to negotiate with the \\ remote. This value will override \\ default values entered for the \\ network. A value of 0 indicates \\ the network default values are to \\ be used; CAPABILITIES = ;')
mcmFrSVCMapRxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapRxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCMapRxBurstSize.setDescription('NAME = ; DESC = Receive burst size in bytes; HELP = Committed receive burst size, \\ in bytes, to negotiate with the \\ remote. This value will override \\ default values entered for the \\ network. A value of 0 indicates \\ the network default values are to \\ be used; CAPABILITIES = ;')
mcmFrSVCMapExcessTxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapExcessTxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCMapExcessTxBurstSize.setDescription('NAME = ; DESC = Excess transmit burst size in bytes; HELP = Uncommitted transmit burst size, \\ in bytes, to negotiate with the \\ remote. This value will override \\ default values entered for the \\ network. A value of 0 indicates \\ the network default values are to \\ be used; CAPABILITIES = ;')
mcmFrSVCMapExcessRxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapExcessRxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCMapExcessRxBurstSize.setDescription('NAME = ; DESC = Excess receive burst size in bytes; HELP = Uncommitted transmit burst size, \\ in bytes, to negotiate with the \\ remote. This value will override \\ default values entered for the \\ network. A value of 0 indicates \\ the network default values are to \\ be used; CAPABILITIES = ;')
mcmFrSVCMapPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCMapPriority.setDescription('NAME = ; DESC = Transfer priority level for data on \\ this SVC; HELP = All data on this SVC will be sent \\ through the switches at \\ the requested transfer priority level; CAPABILITIES = ;')
mcmFrSVCMapEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCMapEntryStatus.setDescription('NAME = ; DESC = Indicates whether or not this entry is \\ enabled; HELP = Enabled indicates this entry will be used \\ to establish an SVC connection. Disabled \\ indicates this entry is to be ignored when \\ establishing SVC connections. This allows \\ these SVCs entries to be disabled/enabled \\ without having to reenter the entire entry; CAPABILITIES = ;')
mcmFrSVCMapTransferPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapTransferPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCMapTransferPriority.setDescription('NAME = ; DESC = The transfer priority for the corresponding \\ pass-through network connection.; HELP = ; CAPABILITIES = ;')
mcmFrSVCMapDisableCause = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 6, 7, 16, 17, 18, 21, 27, 28, 29, 30, 31, 34, 38, 39, 40, 41, 42, 43, 44, 47, 49, 50, 57, 58, 63, 65, 66, 70, 79, 81, 82, 87, 88, 90, 91, 95, 96, 97, 98, 99, 100, 101, 102, 111, 127, 128))).clone(namedValues=NamedValues(("the-PVC-does-not-exist-ie-unassigned", 1), ("no-route-to-specified-transit-network", 2), ("no-route-to-destination", 3), ("channel-unacceptable", 6), ("call-awarded-and-being-delivered-in-an-est-channel", 7), ("normal-call-clearing", 16), ("remote-PVC-already-connected-ie-busy", 17), ("no-user-present-in-call", 18), ("remote-PVC-down-ie-unavailable", 21), ("destination-out-of-order", 27), ("invalid-number-format", 28), ("facility-rejected", 29), ("response-to-status-inquiry", 30), ("normal-unspecified", 31), ("no-DLCI-available", 34), ("network-out-of-order", 38), ("permanent-frame-mode-connection-out-of-service", 39), ("permanent-frame-mode-connection-operational", 40), ("temporary-failure", 41), ("switching-equipment-congestion", 42), ("access-information-discarded", 43), ("specified-DLCI-unavailable", 44), ("resource-unavailable", 47), ("quality-of-service-not-available", 49), ("requested-facility-not-subscribed", 50), ("bearer-capability-not-authorized", 57), ("bearer-capability-not-presently-available", 58), ("service-or-option-not-available-unspecified", 63), ("bearer-capability-not-implemented", 65), ("channel-type-not-implemented", 66), ("only-restricted-digital-capability-is-available", 70), ("service-or-option-not-implemented-unspecified", 79), ("invalid-call-reference", 81), ("identified-channel-does-not-exist", 82), ("user-not-member-of-CUG", 87), ("incompatible-destination", 88), ("non-existent-CUG", 90), ("invalid-transit-network-selection", 91), ("invalid-message-unspecified", 95), ("missing-element", 96), ("message-type-unknown", 97), ("message-not-compatible", 98), ("element-non-existent-or-not-implemented", 99), ("invalid-element", 100), ("invalid-message-for-state", 101), ("timer-recovery", 102), ("protocol-error-unspecified", 111), ("interworking-unspecified", 127), ("normal-condition", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapDisableCause.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCMapDisableCause.setDescription('NAME = ; DESC = The cause code describing the reason that \\ the SVC was not established.; \\ HELP = ; CAPABILITIES = ;')
mcmFrSvcMapSvcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSvcMapSvcIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSvcMapSvcIfIndex.setDescription('NAME = ; DESC = For Software releases beginning with R3.0, \\ this object indicates the ifIndex of the tunneling \\ PVC in which the SVC is established. Prior to \\ R3.0, this object indicates the physical Interface \\ this SVC DLCI is associated with.; HELP = ; CAPABILITIES = ;')
mcmFrSVCMapDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low-discard-level", 1), ("medium-discard-level", 2), ("high-discard-level", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapDiscardPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCMapDiscardPriority.setDescription('NAME = ; DESC = The discard priority used for connection \\ setup of this SVC map.; HELP = ; CAPABILITIES = ;')
mcmFrSVCMapSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapSetupPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCMapSetupPriority.setDescription('NAME = ; DESC = This object indicates the priority of a path at \\ call-establishment time, and also determines \\ the potential for bumping established paths \\ to acquire their bandwidth. A value of 1 is \\ the highest priority, and 5 is the lowest.; HELP = ; CAPABILITIES = ;')
mcmFrSVCMapHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapHoldingPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCMapHoldingPriority.setDescription('NAME = ; DESC = This object indicates the priority that a path \\ maintains once the path is established, and \\ also determines the likelihood of being bumped \\ by a new path, thus losing the bandwidth. A value \\ of 1 is the highest priority, and 5 is the lowest.; HELP = ; CAPABILITIES = ;')
mcmFrPVCMapTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 7), )
if mibBuilder.loadTexts: mcmFrPVCMapTable.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrPVCMapTable.setDescription('NAME = ; DESC = This table has been OBSOLETED for software \\ releases beginning with Release 3.0. \\ Table for PVC to VP bindings; HELP = This table will give the PVC \\ DLCI address to be bound to the \\ specified Virtual Port; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmFrPVCMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 7, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "mcmFrPVCMapVirtualPortIfIndex"), (0, "MICOM-FRAMERELAY-MIB", "mcmFrPVCMapDLCI"))
if mibBuilder.loadTexts: mcmFrPVCMapEntry.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrPVCMapEntry.setDescription('NAME = ; DESC = Entry in the PVC to VP binding \\ table; HELP = PVC/VP binding entry in the PVC \\ binding table. Multiple PVCs \\ (DLCIs) may be bound to a single \\ VP (ifindex).; CAPABILITIES = ;')
mcmFrPVCMapVirtualPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCMapVirtualPortIfIndex.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrPVCMapVirtualPortIfIndex.setDescription('NAME = ; DESC = Virtual port ifIndex associated \\ with this PVC DLCI; HELP = ; CAPABILITIES = ;')
mcmFrPVCMapDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCMapDLCI.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrPVCMapDLCI.setDescription('NAME = ; DESC = Local DLCI to the remote that is \\ associated with the corresponding \\ virtual port; HELP = A DLCI for any given interface \\ may be bound to only one virtual \\ port; CAPABILITIES = ;')
mcmFrPVCMapState = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("active", 2), ("inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCMapState.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrPVCMapState.setDescription('NAME = ; DESC = Indicates the current state of \\ the PVC DLCI; HELP = States may be invalid, active or \\ inactive; CAPABILITIES = ;')
mcmFrPVCMapEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCMapEntryStatus.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrPVCMapEntryStatus.setDescription('NAME = ; DESC = Indicates whether or not this entry is \\ enabled; HELP = Enabled indicates this entry will be used \\ to associate a PVC DLCI with a virtual \\ port. Disable indicates this entry is to \\ be ignored when mapping PVC dlcis to \\ virtual ports. This allows the PVC map \\ entries to be disabled/enabled without \\ having to reenter the entire entry; CAPABILITIES = ;')
mcmFrPVCMapPhysIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCMapPhysIfIndex.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrPVCMapPhysIfIndex.setDescription('NAME = ; DESC = Physical interface this PVC \\ is associated with.; HELP = ; CAPABILITIES = ;')
mcmFrSVCCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8), )
if mibBuilder.loadTexts: mcmFrSVCCircuitTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCCircuitTable.setDescription('NAME = ; DESC = Table of entries for SVCs on this \\ access device; HELP = A table containing information \\ about specific SVC Data Link \\ Connection Identifiers; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmFrSVCCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "mcmFrSVCCircuitIfIndex"), (0, "MICOM-FRAMERELAY-MIB", "mcmFrSVCCircuitDNA"))
if mibBuilder.loadTexts: mcmFrSVCCircuitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCCircuitEntry.setDescription('NAME = ; DESC = The information regarding a \\ single SVC DLCI circuit; HELP = An entry into the SVC circuit \\ table; CAPABILITIES = ;')
mcmFrSVCCircuitIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCCircuitIfIndex.setDescription('NAME = ; DESC = The ifIndex Value of the ifEntry \\ this SVC virtual circuit is linked with; HELP = The ifIndex for the interface on \\ which this PVC belongs; CAPABILITIES = ;')
mcmFrSVCCircuitDNA = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitDNA.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCCircuitDNA.setDescription('NAME = ; DESC = The destination DNA for the SVC; HELP = ; CAPABILITIES = ;')
mcmFrSVCCircuitDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitDlci.setReference('Draft American National Standard T1.618-1991, Section 3.3.6')
if mibBuilder.loadTexts: mcmFrSVCCircuitDlci.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCCircuitDlci.setDescription('NAME = ; DESC = The Data Link Connection Identifier \\ for this virtual circuit; HELP = The local DLCI for this SVC, valid \\ only when the connection has been \\ established; CAPABILITIES = ;')
mcmFrSVCCircuitState = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("active", 2), ("inactive", 3))).clone('active')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitState.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCCircuitState.setDescription('NAME = ; DESC = Indication for the state of this SVC (active \\ or inactive). HELP = Only the configured SVCs can be in \\ the inactive state (all learned \\ SVCs will be deleted when the connection \\ has been released); CAPABILITIES = ;')
mcmFrSVCCircuitReceivedFECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitReceivedFECNs.setReference('Draft American National Standard T1.618-1991, Section 3.3.3')
if mibBuilder.loadTexts: mcmFrSVCCircuitReceivedFECNs.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCCircuitReceivedFECNs.setDescription('NAME = ; DESC = Number of frames received from \\ the network indicating forward \\ congestion.; HELP = Number of Frame Relay Packets \\ received on the corresponding \\ DLCI with the Forward congestion \\ bit set since this SVC was created; CAPABILITIES = ;')
mcmFrSVCCircuitReceivedBECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitReceivedBECNs.setReference('Draft American National Standard T1.618-1991, Section 3.3.4')
if mibBuilder.loadTexts: mcmFrSVCCircuitReceivedBECNs.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCCircuitReceivedBECNs.setDescription('NAME = ; DESC = Number of frames received from \\ the network indicating backward \\ congestion; HELP = Number of Frame Relay Packets received \\ on the corresponding interface with the \\ backwards congestion bit set since this \\ SVC was created.; CAPABILITIES = ;')
mcmFrSVCCircuitSentFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitSentFrames.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCCircuitSentFrames.setDescription('NAME = ; DESC = The number of frames sent from \\ this switched virtual circuit \\ since this was counter was last \\ reset; HELP = Number of Frame Relay Packets sent \\ on the corresponding SVC since this \\ counter was last reset (either by \\ reboot of access device or a counter reset \\ initiated by a user...Note that user initiated \\ counter resets have been OBSOLETED for \\ software releases beginning with Release 3.0.); CAPABILITIES = ;')
mcmFrSVCCircuitSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitSentOctets.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCCircuitSentOctets.setDescription('NAME = ; DESC = The number of octets sent from \\ this switched virtual circuit since \\ it was last created or reset; HELP = Number of bytes sent on the \\ corresponding SVC since this counter \\ was last reset (either by reboot of access device \\ or a counter reset initiated by a user...Note that \\ user initiated counter resets have been OBSOLETED \\ for software releases beginning with Release 3.0.); CAPABILITIES = ;')
mcmFrSVCCircuitReceivedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitReceivedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCCircuitReceivedFrames.setDescription('NAME = ; DESC = Number of frames received over \\ this virtual circuit since it \\ was created or the counter was \\ last reset; HELP = Number of Frame Relay Packets received \\ on the corresponding SVC since this \\ counter was last reset (either by reboot \\ or a counter reset initiated by a user...Note that \\ user initiated counter resets have been OBSOLETED \\ for software releases beginning with Release 3.0.); CAPABILITIES = ;')
mcmFrSVCCircuitReceivedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitReceivedOctets.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCCircuitReceivedOctets.setDescription('NAME = ; DESC = Number of octets received over \\ this virtual circuit since it \\ was created or the counter was \\ last reset; HELP = Number of octets received \\ on the corresponding SVC since this \\ counter was last reset (either by reboot \\ or a counter reset initiated by a user...Note that \\ user initiated counter resets have been OBSOLETED \\ for software releases beginning with Release 3.0.); CAPABILITIES = ;')
mcmFrSVCCircuitCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitCreationTime.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCCircuitCreationTime.setDescription('NAME = ; DESC = The value of sysUpTime when the \\ switched virtual circuit was \\ created.;; HELP = The sysUpTime when the SVC was created \\ either at bootup time or when the SVC \\ was set up through Q.933, whether by the \\ Data Link Connection Management Interface or \\ by a SetRequest; CAPABILITIES = ;')
mcmFrSVCCircuitCallOriginator = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitCallOriginator.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCCircuitCallOriginator.setDescription('NAME = ; DESC = DNA of the SVC call originator.; HELP = DNA of the node that originated \\ the call that resulted in \\ the establishment of the SVC; CAPABILITIES = ;')
mcmFrSVCCircuitLastTimeChange = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitLastTimeChange.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCCircuitLastTimeChange.setDescription('NAME = ; DESC = The value of sysUpTime when the state \\ of the SVC last changed.; HELP = The sysUpTime of the last status change \\ in the SVC. (For SVCs established by the \\ remote, the last time change should be \\ equal to the SVC creation time); CAPABILITIES = ;')
mcmFrSVCCircuitCommittedBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitCommittedBurst.setReference('Draft American National Standard T1.617-1991, Section 6.5.19')
if mibBuilder.loadTexts: mcmFrSVCCircuitCommittedBurst.setStatus('deprecated')
if mibBuilder.loadTexts: mcmFrSVCCircuitCommittedBurst.setDescription('NAME = ; DESC = *******NOTE: THIS OBJECT IS DEPRECATED******* \\ This information is redundant. It has been replaced by mcmFrSVCCircuitNedTxThroughput and mcmFrCircuitNexRxThroughput which are objects \\ from this same table(mcmFrSVCCircuitTable).;\\ Maximum amount of data that the network agrees \\ transfer under normal conditions over a set \\ measurement interval.; HELP = The maximum rate at which the network \\ agrees to transfer under normal (non- \\ congested) conditions (expressed in bits \\ per second).; CAPABILITIES = ;')
mcmFrSVCCircuitExcessBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitExcessBurst.setReference('Draft American National Standard T1.617-1991, Section 6.5.19')
if mibBuilder.loadTexts: mcmFrSVCCircuitExcessBurst.setStatus('deprecated')
if mibBuilder.loadTexts: mcmFrSVCCircuitExcessBurst.setDescription('NAME = ; DESC = *******NOTE: THIS OBJECT IS DEPRECATED*******\\ This information is redundant. It has been replaced by mcmFrSVCCircuitNegTxExceess and \\ and mcmFrSVCCircuitNegRxExceess which are objects \\ from this same table.(mcmFrSVCCircuitTable);\\ The maximum number of uncommited bits \\ that the frame relay network will attempt \\ to deliver (expressed in bits per second).; \\ HELP = This variable indicates the maximum \\ amount of uncommitted data bits \\ that the network will attempt to \\ deliver over the measurement interval. \\ By default, if not configured when \\ creating the entry, the Excess \\ information Burst Size is set \\ to the value of ifSpeed; CAPABILITIES = ;')
mcmFrSVCCircuitThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitThroughput.setReference('Draft American National Standard T1.617-1991, Section 6.5.19')
if mibBuilder.loadTexts: mcmFrSVCCircuitThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCCircuitThroughput.setDescription("NAME = ; DESC = The average number of 'Frame Relay \\ Information Field' bits transferred \\ per second across a physical frame relay \\ interface.; HELP = Throughput is the average number of \\ 'Frame Relay Information Field' \\ bits transferred per second across a \\ user network interface in one \\ direction, measured over the \\ measurement interval. If the configured \\ commited burst rate and throughput \\ are both non-zero, the measurement interval \\ T=mcmFrSVCCircuitCommittedBurst/mcmFrSVC- \\ CircuitThroughput. If the configured \\ committed burst rate and throughput are \\ both zero, the measurement interval\\ T=mcmFrSVCCircuitExcessBurst/ifSpeed; CAPABILITIES = ;")
mcmFrSVCCircuitNegMaxTxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitNegMaxTxSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCCircuitNegMaxTxSize.setDescription('NAME = ; DESC = The negotiated maximum Tx size to \\ be sent on this interface (in bytes).; HELP =; CAPABILITIES = ;')
mcmFrSVCCircuitNegMaxRxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitNegMaxRxSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCCircuitNegMaxRxSize.setDescription('NAME = ; DESC = The negotiated maximum Rx size to \\ be received on this interface (in bytes).; HELP =; CAPABILITIES = ;')
mcmFrSVCCircuitNegTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitNegTxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCCircuitNegTxThroughput.setDescription('NAME = ; DESC = The negotiated Tx throughput to \\ be sent on this interface (in bits/sec).; HELP =; CAPABILITIES = ;')
mcmFrSVCCircuitNegRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitNegRxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCCircuitNegRxThroughput.setDescription('NAME = ; DESC = The negotiated Rx throughput to \\ be received on this interface (in bits/sec).; HELP =; CAPABILITIES = ;')
mcmFrSVCCircuitNegTxBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitNegTxBurst.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCCircuitNegTxBurst.setDescription('NAME = ; DESC = The negotiated Tx committed burst to \\ be sent on this interface (in bits/sec).; HELP =; CAPABILITIES = ;')
mcmFrSVCCircuitNegRxBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitNegRxBurst.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCCircuitNegRxBurst.setDescription('NAME = ; DESC = The negotiated Rx committed burst to \\ be received on this interface (in bits/sec).; HELP =; CAPABILITIES = ;')
mcmFrSVCCircuitNegTxExcess = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitNegTxExcess.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCCircuitNegTxExcess.setDescription('NAME = ; DESC = The negotiated Tx excess burst to \\ be sent on this interface (in bits/sec).; HELP =; CAPABILITIES = ;')
mcmFrSVCCircuitNegRxExcess = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitNegRxExcess.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCCircuitNegRxExcess.setDescription('NAME = ; DESC = The negotiated Rx excess burst to \\ be received on this interface (in bits/sec).; HELP =; CAPABILITIES = ;')
mcmFrSVCCircuitTxDiscardCIRPolice = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitTxDiscardCIRPolice.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCCircuitTxDiscardCIRPolice.setDescription('NAME = ; DESC = The number of packets that have been discarded \\ due to policing of the CIR.; HELP =; CAPABILITIES = ;')
mcmFrSVCCircuitPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCCircuitPriority.setDescription('NAME = ; DESC = The transfer priority used for connection \\ setup of this SVC.; HELP =; CAPABILITIES = ;')
mcmFrSVCCircuitSvcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitSvcIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCCircuitSvcIfIndex.setDescription('NAME = ; DESC = For Software releases beginning with R3.0, \\ this object indicates the ifIndex of the tunneling \\ PVC in which the SVC is established. Prior to \\ R3.0, this object indicates the physical interface \\ this SVC DLCI is assoiciated with.; HELP = ; CAPABILITIES = ;')
mcmFrSVCCircuitDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low-discard-level", 1), ("medium-discard-level", 2), ("high-discard-level", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitDiscardPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCCircuitDiscardPriority.setDescription('NAME = ; DESC = The discard priority used for SVC circuit \\ connection setup of this SVC map.; HELP = ; CAPABILITIES = ;')
mcmFrSVCCircuitSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitSetupPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCCircuitSetupPriority.setDescription('NAME = ; DESC = This object indicates the priority of a path at \\ call-establishment time, and also determines \\ the potential for bumping established paths \\ to acquire their bandwidth. A value of 1 is \\ the highest priority, and 5 is the lowest.; HELP = ; CAPABILITIES = ;')
mcmFrSVCCircuitHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitHoldingPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrSVCCircuitHoldingPriority.setDescription('NAME = ; DESC = This object indicates the priority that a path \\ maintains once the path is established, and \\ also determines the likelihood of being bumped \\ by a new path, thus losing the bandwidth. A value \\ of 1 is the highest priority, and 5 is the lowest.; HELP = ; CAPABILITIES = ;')
mcmFrAllSVCCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17), )
if mibBuilder.loadTexts: mcmFrAllSVCCircuitTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrAllSVCCircuitTable.setDescription('NAME = ; DESC = Table of entries for all SVCs on this \\ access device.; HELP = A table containing information \\ about specific SVC DLCIs; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmFrAllSVCCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "mcmFrAllSVCCircuitIfIndex"), (0, "MICOM-FRAMERELAY-MIB", "mcmFrAllSVCCircuitDlci"))
if mibBuilder.loadTexts: mcmFrAllSVCCircuitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrAllSVCCircuitEntry.setDescription('NAME = ; DESC = The information regarding a \\ single, established SVC DLCI; HELP = ; CAPABILITIES = ;')
mcmFrAllSVCCircuitIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrAllSVCCircuitIfIndex.setDescription('NAME = ; DESC = The ifIndex Value of the ifEntry \\ this SVC virtual circuit is associated with; HELP = ; CAPABILITIES = ;')
mcmFrAllSVCCircuitDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitDlci.setReference('Draft American National Standard T1.618-1991, Section 3.3.6')
if mibBuilder.loadTexts: mcmFrAllSVCCircuitDlci.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrAllSVCCircuitDlci.setDescription('NAME = ; DESC = The local DLCI for this SVC, valid \\ only when the connection has been \\ established; HELP = ; CAPABILITIES = ;')
mcmFrAllSVCCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rfc1490", 1), ("voice", 2), ("switched", 3), ("rfc1490switched", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitType.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrAllSVCCircuitType.setDescription('NAME = ; DESC = The type of this SVC.; HELP = Valid types include voice, switched or \\ rfc1490; CAPABILITIES = ;')
mcmFrAllSVCCircuitDNA = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitDNA.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrAllSVCCircuitDNA.setDescription('NAME = ; DESC = DNA of the destination node associated \\ with the SVC; HELP = ; CAPABILITIES = ;')
mcmFrAllSVCCircuitState = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("active", 2), ("inactive", 3))).clone('active')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitState.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrAllSVCCircuitState.setDescription('NAME = ; DESC = Indication for the state of this SVC (active \\ or inactive).; HELP = Only the configured SVCs \\ can be in the inactive state (all learned \\ SVCs will be deleted when the connection \\ has been released); CAPABILITIES = ;')
mcmFrAllSVCCircuitReceivedFECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitReceivedFECNs.setReference('Draft American National Standard T1.618-1991, Section 3.3.3')
if mibBuilder.loadTexts: mcmFrAllSVCCircuitReceivedFECNs.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrAllSVCCircuitReceivedFECNs.setDescription('NAME = ; DESC = Number of frames received from \\ the network indicating forward \\ congestion since this switched \\ virtual circuit was created; HELP = Number of Frame Relay Packets \\ received on the corresponding \\ DLCI with the Forward congestion \\ bit set; CAPABILITIES = ;')
mcmFrAllSVCCircuitReceivedBECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitReceivedBECNs.setReference('Draft American National Standard T1.618-1991, Section 3.3.4')
if mibBuilder.loadTexts: mcmFrAllSVCCircuitReceivedBECNs.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrAllSVCCircuitReceivedBECNs.setDescription('NAME = ; DESC = Number of frames received from \\ the network indicating backward \\ congestion since this switched \\ virtual circuit was created; HELP = Number of Frame Relay Packets received \\ on the corresponding interface with the \\ backward congestion bit set.; CAPABILITIES = ;')
mcmFrAllSVCCircuitSentFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitSentFrames.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrAllSVCCircuitSentFrames.setDescription('NAME = ; DESC = The number of frames sent from \\ this switched virtual circuit \\ since this counter was last \\ reset; HELP = Number of Frame Relay Packets sent \\ on the corresponding SVC since this \\ counter was last reset (either by \\ reboot of access device or a counter reset \\ initiated by a user...Note that \\ user initiated counter resets have been OBSOLETED \\ for software releases beginning with Release 3.0.); CAPABILITIES = ;')
mcmFrAllSVCCircuitSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitSentOctets.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrAllSVCCircuitSentOctets.setDescription('NAME = ; DESC = The number of octets sent from \\ this switched virtual circuit since \\ it was last created or reset; HELP = Number of bytes sent on the \\ corresponding SVC since this counter \\ was last reset (either by reboot of access device \\ or a counter reset initiated by a user...Note that \\ user initiated counter resets have been OBSOLETED \\ for software releases beginning with Release 3.0.); CAPABILITIES = ;')
mcmFrAllSVCCircuitReceivedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitReceivedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrAllSVCCircuitReceivedFrames.setDescription('NAME = ; DESC = Number of frames received over \\ this virtual circuit since it \\ was created or the counter was \\ last reset; HELP = Reset may occur either by reboot \\ or a counter reset initiated by a user...Note that \\ user initiated counter resets have been OBSOLETED \\ for software releases beginning with Release 3.0.; CAPABILITIES = ;')
mcmFrAllSVCCircuitReceivedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitReceivedOctets.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrAllSVCCircuitReceivedOctets.setDescription('NAME = ; DESC = Number of octets received over \\ this virtual circuit since it \\ was created or the counter was \\ last reset; HELP = Reset may occur either by reboot \\ or a counter reset initiated by a user...Note that \\ user initiated counter resets have been OBSOLETED \\ for software releases beginning with Release 3.0.; CAPABILITIES = ;')
mcmFrAllSVCCircuitCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitCreationTime.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrAllSVCCircuitCreationTime.setDescription('NAME = ; DESC = The value of sysUpTime when the \\ switched virtual circuit was \\ created; HELP = The sysUpTime when the SVC was created \\ either at bootup time or when the SVC \\ was set up through Q.933, whether by the Data \\ Link Connection Management Interface or \\ by a SetRequest; CAPABILITIES = ;')
mcmFrAllSVCCircuitCallOriginator = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitCallOriginator.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrAllSVCCircuitCallOriginator.setDescription('NAME = ; DESC = DNA of the node that originated \\ the call that resulted in \\ the establishment of the SVC; HELP = ; CAPABILITIES = ;')
mcmFrAllSVCCircuitLastTimeChange = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitLastTimeChange.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrAllSVCCircuitLastTimeChange.setDescription('NAME = ; DESC = The value of sysUpTime when last there was a change in the SVC; HELP = SVCs established by the remote will set \\ the last time change to the creation time; CAPABILITIES = ;')
mcmFrAllSVCCircuitCommittedBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitCommittedBurst.setReference('Draft American National Standard T1.617-1991, Section 6.5.19')
if mibBuilder.loadTexts: mcmFrAllSVCCircuitCommittedBurst.setStatus('deprecated')
if mibBuilder.loadTexts: mcmFrAllSVCCircuitCommittedBurst.setDescription('NAME = ; DESC = *******NOTE: THIS OBJECT IS DEPRECATED******* \\ This information is redundant. This object has been \\ replaced by mcmFrAllSVCCircuitNedTxThroughput and \\ mcmAllFrCircuitNexRxThroughput which are objects \\ from this same table(mcmFrAllSVCCircuitTable).;\\ Maximum amount of data that the network agrees \\ transfer under normal conditions over a set \\ measurement interval.; HELP = The maximum rate at which the network \\ agrees to transfer under normal (non- \\ congested) conditions (expressed in bits \\ per second).; CAPABILITIES = ;')
mcmFrAllSVCCircuitExcessBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitExcessBurst.setReference('Draft American National Standard T1.617-1991, Section 6.5.19')
if mibBuilder.loadTexts: mcmFrAllSVCCircuitExcessBurst.setStatus('deprecated')
if mibBuilder.loadTexts: mcmFrAllSVCCircuitExcessBurst.setDescription('NAME = ; DESC = *******NOTE: THIS OBJECT IS DEPRECATED******* \\ This information is redundant. This object has been \\ replaced by mcmFrAllSVCCircuitNedTxThroughput and \\ mcmAllFrCircuitNexRxThroughput which are objects \\ from this same table(mcmFrAllSVCCircuitTable).;\\ The maximum number of uncommited bits \\ that the frame relay network will attempt \\ to deliver (expressed in bits per second).; \\ HELP = By default, if not configured when \\ creating the entry, the Excess \\ information Burst Size is set \\ to the value of ifSpeed; CAPABILITIES = ;')
mcmFrAllSVCCircuitThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitThroughput.setReference('Draft American National Standard T1.617-1991, Section 6.5.19')
if mibBuilder.loadTexts: mcmFrAllSVCCircuitThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrAllSVCCircuitThroughput.setDescription("NAME = ; DESC = The average number of 'Frame Relay \\ Information Field' bits transferred \\ per second across a physical frame relay \\ interface.; HELP = Throughput is the average number of \\ 'Frame Relay Information Field' \\ bits transferred per second across a \\ user network interface in one \\ direction, measured over the set \\ measurement interval. If the configured \\ commited burst rate and throughput \\ are both non-zero, the measurement interval \\ T=mcmFrAllSVCCircuitCommittedBurst/mcmFrSVC- \\ CircuitThroughput. If the configured \\ committed burst rate and throughput are \\ both zero, the measurement interval\\ T=mcmFrAllSVCCircuitExcessBurst/ifSpeed; CAPABILITIES = ;")
mcmFrAllSVCCircuitNegMaxTxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitNegMaxTxSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrAllSVCCircuitNegMaxTxSize.setDescription('NAME = ; DESC = The negotiated maximum Tx size to \\ be sent on this interface (in bytes).; HELP =; CAPABILITIES = ;')
mcmFrAllSVCCircuitNegMaxRxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitNegMaxRxSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrAllSVCCircuitNegMaxRxSize.setDescription('NAME = ; DESC = The negotiated maximum Rx size to \\ be received on this interface (in bytes).; HELP =; CAPABILITIES = ;')
mcmFrAllSVCCircuitNegTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitNegTxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrAllSVCCircuitNegTxThroughput.setDescription('NAME = ; DESC = The negotiated Tx throughput to \\ be sent on this interface (in bits/sec).; HELP =; CAPABILITIES = ;')
mcmFrAllSVCCircuitNegRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitNegRxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrAllSVCCircuitNegRxThroughput.setDescription('NAME = ; DESC = The negotiated Rx throughput to \\ be received on this interface (in bits/sec).; HELP =; CAPABILITIES = ;')
mcmFrAllSVCCircuitNegTxBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitNegTxBurst.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrAllSVCCircuitNegTxBurst.setDescription('NAME = ; DESC = The negotiated Tx committed burst to \\ be sent on this interface (in bits/sec).; HELP =; CAPABILITIES = ;')
mcmFrAllSVCCircuitNegRxBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitNegRxBurst.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrAllSVCCircuitNegRxBurst.setDescription('NAME = ; DESC = The negotiated Rx committed burst to \\ be received on this interface (in bits/sec).; HELP =; CAPABILITIES = ;')
mcmFrAllSVCCircuitNegTxExcess = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitNegTxExcess.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrAllSVCCircuitNegTxExcess.setDescription('NAME = ; DESC = The negotiated Tx excess burst to \\ be sent on this interface (in bits/sec).; HELP =; CAPABILITIES = ;')
mcmFrAllSVCCircuitNegRxExcess = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitNegRxExcess.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrAllSVCCircuitNegRxExcess.setDescription('NAME = ; DESC = The negotiated Rx excess burst to \\ be received on this interface (in bits/sec).; HELP =; CAPABILITIES = ;')
mcmFrAllSVCCircuitTxDiscardCIRPolice = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitTxDiscardCIRPolice.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrAllSVCCircuitTxDiscardCIRPolice.setDescription('NAME = ; DESC = The number of packets that have been discarded \\ due to policing of the CIR.; HELP =; CAPABILITIES = ;')
mcmFrAllSVCCircuitPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrAllSVCCircuitPriority.setDescription('NAME = ; DESC = The transfer priority used for connection \\ setup of this SVC.; HELP = Valid priorities are 0 (LAN), 6 (NMSNAS) \\ and 11 (voice); CAPABILITIES = ;')
mcmFrAllSVCCircuitSvcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitSvcIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrAllSVCCircuitSvcIfIndex.setDescription('NAME = ; DESC = For Software releases beginning with R3.0, \\ this object indicates the ifIndex of the tunneling \\ PVC in which the SVC is established. Prior to \\ R3.0, this object indicates the physical interface \\ this SVC DLCI is assoiciated with.; HELP = ; CAPABILITIES = ;')
mcmFrAllSVCCircuitDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low-discard-level", 1), ("medium-discard-level", 2), ("high-discard-level", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitDiscardPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrAllSVCCircuitDiscardPriority.setDescription('NAME = ; DESC = The discard priority used in \\ setting the SVC circuit.; HELP = ; CAPABILITIES = ;')
mcmFrAllSVCCircuitSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitSetupPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrAllSVCCircuitSetupPriority.setDescription('NAME = ; DESC = This object indicates the priority of a path at \\ call-establishment time, and also determines \\ the potential for bumping established paths \\ to acquire their bandwidth. A value of 1 is \\ the highest priority, and 5 is the lowest.; HELP = ; CAPABILITIES = ;')
mcmFrAllSVCCircuitHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitHoldingPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrAllSVCCircuitHoldingPriority.setDescription('NAME = ; DESC = This object indicates the priority that a path \\ maintains once the path is established, and \\ also determines the likelihood of being bumped \\ by a new path, thus losing the bandwidth. A value \\ of 1 is the highest priority, and 5 is the lowest.; HELP = ; CAPABILITIES = ;')
mcmFrLANSpvcTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 18), )
if mibBuilder.loadTexts: mcmFrLANSpvcTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLANSpvcTable.setDescription('NAME = ; DESC = The Frame Relay LAN SPVC Connections \\ table(Operational); HELP = ; CAPABILITIES =NET_CFG, VPN_CFG;')
mcmFrLANSpvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 18, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "mcmFrLANSpvcVirtualPortIfIndex"), (0, "MICOM-FRAMERELAY-MIB", "mcmFrLANSpvcRemoteDLCI"))
if mibBuilder.loadTexts: mcmFrLANSpvcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLANSpvcEntry.setDescription('NAME = ; DESC = An entry in the Frame Relay LAN SPVC \\ Connections table. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrLANSpvcVirtualPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcVirtualPortIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLANSpvcVirtualPortIfIndex.setDescription('NAME = ; DESC = The ifIndex of the local Virtual Port \\ (Analogous to the ifIndex pointer in the \\ MIB II Interfaces Group, but specific to \\ the FR End-to-End Connections table.) (Operationsl); HELP = ; CAPABILITIES = ;')
mcmFrLANSpvcRemoteDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcRemoteDLCI.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLANSpvcRemoteDLCI.setDescription('NAME = ; DESC = The DLCI value on the remote DCE interface. HELP = ; CAPABILITIES = ;')
mcmFrLANSpvcConnectId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 18, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcConnectId.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLANSpvcConnectId.setDescription('NAME = ; DESC = The connect ID of this SPVC mapping.\\ Used to associate SVCs and Connect \\ mappings.(Operational) HELP = ; CAPABILITIES = ;')
mcmFrLANSpvcRemoteDNA = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 18, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcRemoteDNA.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLANSpvcRemoteDNA.setDescription('NAME = ; DESC = The DNA of the remote node with which \\ the SVC will be established. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrLANSpvcDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 18, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcDLCI.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLANSpvcDLCI.setDescription('NAME = ; DESC = The DLCI value of the SVC once \\ the SVC has been established. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrLANSpvcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 18, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLANSpvcIfIndex.setDescription('NAME = ; DESC = For Software releases beginning with R3.0, \\ this object indicates the ifIndex of the tunneling \\ PVC in which the SVC is established. Prior to \\ R3.0, this object indicates the ifIndex used for the \\ SVC connection. (Operational) HELP = ; CAPABILITIES = ;')
mcmFrLANSpvcVPState = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 18, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcVPState.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLANSpvcVPState.setDescription('NAME = ; DESC = The value of this object indicates \\ whether the local Virtual Port with \\ this mapping is active or inactive. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmFrLANSpvcSVCState = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 18, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCState.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLANSpvcSVCState.setDescription('NAME = ; DESC = The value of this object indicates \\ whether the local DCE considers the \\ SVC associated with this mapping \\ active or inactive.(Operational); HELP = ; CAPABILITIES = ;')
mcmFrLANSpvcConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 18, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("slave", 1), ("master", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcConnType.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLANSpvcConnType.setDescription('NAME = ; DESC = The value of this object indicates \\ whether this end of the SPVC segment \\ initiated the SVC call.; HELP = ; CAPABILITIES = ;')
mcmFrLANSpvcLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 18, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLANSpvcLastChange.setDescription("NAME = ; DESC = The value of MIB II's sysUpTime at \\ the time this SVC mapping entered \\ its current operations state the \\ high to low direction; HELP = ; CAPABILITIES = ;")
mcmFrLANSpvcDisconnectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 18, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("local-VP-is-down", 1), ("local-SVC-LMI-is-Down", 2), ("remote-PVC-LMI-is-down", 3), ("the-SVC-connection-is-down", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcDisconnectReason.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLANSpvcDisconnectReason.setDescription('NAME = ; DESC = The value of this object indicates \\ the reason why the SPVC is not \\ active. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrLANSpvcSVCTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19), )
if mibBuilder.loadTexts: mcmFrLANSpvcSVCTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLANSpvcSVCTable.setDescription('NAME = ; DESC = The Frame Relay SVC Connect (Switched) \\ Segment Configuration table. HELP = ; CAPABILITIES =NET_CFG, VPN_CFG;')
mcmFrLANSpvcSVCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "mcmFrLANSpvcSVCConnectId"))
if mibBuilder.loadTexts: mcmFrLANSpvcSVCEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLANSpvcSVCEntry.setDescription('NAME = ; DESC = An entry in the Frame Relay LAN SPVC \\ Connections table.; HELP = ; CAPABILITIES = ;')
mcmFrLANSpvcSVCConnectId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCConnectId.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLANSpvcSVCConnectId.setDescription('NAME = ; DESC = The Connect Id of the Connection \\ group entry to which this SVC \\ belongs. HELP = ; CAPABILITIES = ;')
mcmFrLANSpvcSVCIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLANSpvcSVCIfIndex.setDescription('NAME = ; DESC = For Software releases beginning with R3.0, \\ this object indicates the ifIndex of the tunneling \\ PVC in which the SVC is established. Prior to \\ R3.0, this object indicates the ifIndex of the local \\ frame relay physical line interface. HELP = ; CAPABILITIES = ;')
mcmFrLANSpvcSVCDNA = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCDNA.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLANSpvcSVCDNA.setDescription('NAME = ; DESC = The DNA for the destination of \\ the virtual circuit.; HELP = ; CAPABILITIES = ;')
mcmFrLANSpvcSVCDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCDLCI.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLANSpvcSVCDLCI.setDescription('NAME = ; DESC = The local DLCI for this SVC. \\ Valid only when the SVC is \\ established. ; HELP = ; CAPABILITIES = ;')
mcmFrLANSpvcSVCMaxTxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCMaxTxSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLANSpvcSVCMaxTxSize.setDescription('NAME = ; DESC = The maximum transmission frame size. \\ This should be equal to (or greater \\ than) the Rx size for the corresponding \\ PVC. Expressed in bytes.; HELP = ; CAPABILITIES = ;')
mcmFrLANSpvcSVCMaxRxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCMaxRxSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLANSpvcSVCMaxRxSize.setDescription('NAME = ; DESC = The maximum receivable frame size. \\ This should be equal to (or less than) \\ the Tx size for the corresponding PVC. \\ Expressed in bytes.; HELP = ; CAPABILITIES = ;')
mcmFrLANSpvcSVCMinTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCMinTxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLANSpvcSVCMinTxThroughput.setDescription('NAME = ; DESC = The minimum transmission throughput. \\ This should be equal to (or greater than) \\ the Rx CIR for the corresponding PVC. \\ Expressed in bits/sec.; HELP = ; CAPABILITIES = ;')
mcmFrLANSpvcSVCMinRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCMinRxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLANSpvcSVCMinRxThroughput.setDescription('NAME = ; DESC = The minimum receive throughput.\\ This should be equal to (or less \\ than) the Tx CIR for the corresponding \\ PVC. Expressed in bits/sec. HELP = ; CAPABILITIES = ;')
mcmFrLANSpvcSVCMaxTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCMaxTxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLANSpvcSVCMaxTxThroughput.setDescription('NAME = ; DESC = The maximum transmission throughput.\\ Always set to the value of \\ mcmFrLANSpvcSVCMinTxThroughput.; HELP = ; CAPABILITIES = ;')
mcmFrLANSpvcSVCMaxRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCMaxRxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLANSpvcSVCMaxRxThroughput.setDescription('NAME = ; DESC = The maximum receive throughput. \\ Always set to the value of \\ mcmFrLANSpvcSVCMinRxThroughput.; HELP = ; CAPABILITIES = ;')
mcmFrLANSpvcSVCMaxTxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCMaxTxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLANSpvcSVCMaxTxBurstSize.setDescription('NAME = ; DESC = The maximum transmission burst size \\ Computation based on throughput and \\ Excess Burst. Expressed in bits/sec.; HELP = ; CAPABILITIES = ;')
mcmFrLANSpvcSVCMaxRxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCMaxRxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLANSpvcSVCMaxRxBurstSize.setDescription('NAME = ; DESC = The maximum receive burst size. \\ Computation based on throughput and \\ Excess Burst. Expressed in bits/sec.; HELP = ; CAPABILITIES = ;')
mcmFrLANSpvcSVCExcessTxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCExcessTxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLANSpvcSVCExcessTxBurstSize.setDescription('NAME = ; DESC = The maximum number of uncommitted \\ bits that the network will attempt \\ to accept. This should be equal to \\ (or greater than) the Rx Be configured for the corresponding PVC. Expressed in \\ bits/sec.; HELP = ; CAPABILITIES = ;')
mcmFrLANSpvcSVCExcessRxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCExcessRxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLANSpvcSVCExcessRxBurstSize.setDescription('NAME = ; DESC = The maximum number of uncommitted bits \\ that the network will attempt to deliver. \\ This should be equal to (or less than) the \\ Tx Be configured for the corresponding PVC \\ Expressed in bits/sec.; HELP = ; CAPABILITIES = ;')
mcmFrLANSpvcSVCTransferPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCTransferPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLANSpvcSVCTransferPriority.setDescription('NAME = ; DESC = The transfer priority for the corresponding \\ pass-through connection. HELP = ; CAPABILITIES = ;')
mcmFrLANSpvcSVCReasonForDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 6, 7, 16, 17, 18, 21, 27, 28, 29, 30, 31, 34, 38, 39, 40, 41, 42, 43, 44, 47, 49, 50, 57, 58, 63, 65, 66, 70, 79, 81, 82, 87, 88, 90, 91, 95, 96, 97, 98, 99, 100, 101, 102, 111, 127, 128))).clone(namedValues=NamedValues(("the-PVC-does-not-exist-ie-unassigned", 1), ("no-route-to-specified-transit-network", 2), ("no-route-to-destination", 3), ("channel-unacceptable", 6), ("call-awarded-and-being-delivered-in-an-est-channel", 7), ("normal-call-clearing", 16), ("remote-PVC-already-connected-ie-busy", 17), ("no-user-present-in-call", 18), ("remote-PVC-down-ie-unavailable", 21), ("destination-out-of-order", 27), ("invalid-number-format", 28), ("facility-rejected", 29), ("response-to-status-inquiry", 30), ("normal-unspecified", 31), ("no-DLCI-available", 34), ("network-out-of-order", 38), ("permanent-frame-mode-connection-out-of-service", 39), ("permanent-frame-mode-connection-operational", 40), ("temporary-failure", 41), ("switching-equipment-congestion", 42), ("access-information-discarded", 43), ("specified-DLCI-unavailable", 44), ("resource-unavailable", 47), ("quality-of-service-not-available", 49), ("requested-facility-not-subscribed", 50), ("bearer-capability-not-authorized", 57), ("bearer-capability-not-presently-available", 58), ("service-or-option-not-available-unspecified", 63), ("bearer-capability-not-implemented", 65), ("channel-type-not-implemented", 66), ("only-restricted-digital-capability-is-available", 70), ("service-or-option-not-implemented-unspecified", 79), ("invalid-call-reference", 81), ("identified-channel-does-not-exist", 82), ("user-not-member-of-CUG", 87), ("incompatible-destination", 88), ("non-existent-CUG", 90), ("invalid-transit-network-selection", 91), ("invalid-message-unspecified", 95), ("missing-element", 96), ("message-type-unknown", 97), ("message-not-compatible", 98), ("element-non-existent-or-not-implemented", 99), ("invalid-element", 100), ("invalid-message-for-state", 101), ("timer-recovery", 102), ("protocol-error-unspecified", 111), ("interworking-unspecified", 127), ("normal-condition", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCReasonForDisconnect.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLANSpvcSVCReasonForDisconnect.setDescription('NAME = ; DESC = The reason for the SVC Disconnect.; HELP = ; CAPABILITIES = ;')
mcmFrLANSpvcSVCDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low-discard-level", 1), ("medium-discard-level", 2), ("high-discard-level", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCDiscardPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLANSpvcSVCDiscardPriority.setDescription('NAME = ; DESC = The discard priority setup for \\ the LAN SPVC SVC.; HELP = ; CAPABILITIES = ;')
mcmFrLANSpvcSVCSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCSetupPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLANSpvcSVCSetupPriority.setDescription('NAME = ; DESC = This object indicates the priority of a path at \\ call-establishment time, and also determines \\ the potential for bumping established paths \\ to acquire their bandwidth. A value of 1 is \\ the highest priority, and 5 is the lowest.; HELP = ; CAPABILITIES = ;')
mcmFrLANSpvcSVCHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCHoldingPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLANSpvcSVCHoldingPriority.setDescription('NAME = ; DESC = This object indicates the priority that a path \\ maintains once the path is established, and \\ also determines the likelihood of being bumped \\ by a new path, thus losing the bandwidth. A value \\ of 1 is the highest priority, and 5 is the lowest.; HELP = ; CAPABILITIES = ;')
mcmFrDlcmiSVCStatusTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 22), )
if mibBuilder.loadTexts: mcmFrDlcmiSVCStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrDlcmiSVCStatusTable.setDescription('NAME = ; DESC = Table of entries for Frame Relay Dlcmi SVC \\ status for this access device. (Operational); HELP =; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmFrDlcmiSVCStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 22, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "mcmFrDlcmiSVCStatusIfIndex"), (0, "MICOM-FRAMERELAY-MIB", "mcmFrDlcmiSVCStatusDlci"))
if mibBuilder.loadTexts: mcmFrDlcmiSVCStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrDlcmiSVCStatusEntry.setDescription('NAME = ; DESC = A row or entry in the Frame Relay Dlcmi SVC \\ status Table. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrDlcmiSVCStatusIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrDlcmiSVCStatusIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrDlcmiSVCStatusIfIndex.setDescription('NAME = ; DESC = The ifIndex Value associated with the \\ netlink. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrDlcmiSVCStatusDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 22, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(17, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrDlcmiSVCStatusDlci.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrDlcmiSVCStatusDlci.setDescription('NAME = ; DESC = The SVC DLCI number associated with the \\ netlink. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrDlcmiSVCStatusCardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 22, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrDlcmiSVCStatusCardNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrDlcmiSVCStatusCardNumber.setDescription('NAME = ; DESC = The card number linked to this \\ netlink. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrDlcmiSVCStatusPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 22, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrDlcmiSVCStatusPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrDlcmiSVCStatusPortNumber.setDescription('NAME = ; DESC = The physical port number linked to this \\ netlink. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrDlcmiSVCStatusTunnelPvcDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 22, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrDlcmiSVCStatusTunnelPvcDlci.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrDlcmiSVCStatusTunnelPvcDlci.setDescription('NAME = ; DESC = The tunneling PVC DLCI number linked to \\ this netlink. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrDlcmiSVCStatusPeerCardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 22, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrDlcmiSVCStatusPeerCardNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrDlcmiSVCStatusPeerCardNumber.setDescription('NAME = ; DESC = The card number linked to this netlink \\ at the other side of the connection. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrDlcmiSVCStatusPeerPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 22, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrDlcmiSVCStatusPeerPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrDlcmiSVCStatusPeerPortNumber.setDescription('NAME = ; DESC = The physical port number linked to this netlink \\ at the other side of the connection. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrDlcmiSVCStatusPeerTunPvcDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 22, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrDlcmiSVCStatusPeerTunPvcDlci.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrDlcmiSVCStatusPeerTunPvcDlci.setDescription('NAME = ; DESC = The tunneling PVC DLCI number linked to this \\ netlink at the other side of the connection. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrDlcmiSVCStatusPeerSvcDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 22, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(17, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrDlcmiSVCStatusPeerSvcDlci.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrDlcmiSVCStatusPeerSvcDlci.setDescription('NAME = ; DESC = The SVC DLCI number linked to this netlink \\ at the other side of the connection. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrTunnelPvcTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23), )
if mibBuilder.loadTexts: mcmFrTunnelPvcTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrTunnelPvcTable.setDescription('NAME = ; DESC = Table of entries for Frame Relay Tunnel PVCs \\ for this access device. (Operational); HELP =; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmFrTunnelPvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "mcmFrTunnelPvcIfIndex"))
if mibBuilder.loadTexts: mcmFrTunnelPvcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrTunnelPvcEntry.setDescription('NAME = ; DESC = A row or entry in the Frame Relay Tunnel PVC \\ Table. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrTunnelPvcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrTunnelPvcIfIndex.setDescription('NAME = ; DESC = The ifIndex of the tunnel PVC itself. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmFrTunnelPvcDlciNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcDlciNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrTunnelPvcDlciNumber.setDescription('NAME = ; DESC = The DLCI number for this PVC tunnel. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmFrTunnelPvcPhysicalCard = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("limA", 1), ("lim1", 2), ("lim2", 3), ("lim3", 4), ("lim4", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcPhysicalCard.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrTunnelPvcPhysicalCard.setDescription('NAME = ; DESC = The Card (Logical Interface Module - LIM) \\ of the WAN port (physical FR link). \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmFrTunnelPvcPhysicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcPhysicalPort.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrTunnelPvcPhysicalPort.setDescription('NAME = ; DESC = The channel number of this WAN port. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmFrTunnelPvcType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dte-panl", 1), ("dce-panl", 2), ("standard", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcType.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrTunnelPvcType.setDescription('NAME = ; DESC = The FR tunnel PVC type. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrTunnelPvcPhysPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcPhysPortIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrTunnelPvcPhysPortIfIndex.setDescription('NAME = ; DESC = The ifIndex of the FR physical port. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmFrTunnelPvcMaxRxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcMaxRxFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrTunnelPvcMaxRxFrameSize.setDescription('NAME = ; DESC = The maximum receive frame size in \\ octets for this PVC tunnel data (sent into \\ this unit). (Operational); HELP = ; CAPABILITIES = ;')
mcmFrTunnelPvcRxBc = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcRxBc.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrTunnelPvcRxBc.setDescription('NAME = ; DESC = The receive committed burst size (Bc) in bits \\ for this PVC tunnel data (sent into this unit). \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmFrTunnelPvcRxBe = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcRxBe.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrTunnelPvcRxBe.setDescription('NAME = ; DESC = The receive excess burst size (Be) in bits \\ for this PVC tunnel data (sent into this unit). \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmFrTunnelPvcMaxRxCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcMaxRxCIR.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrTunnelPvcMaxRxCIR.setDescription('NAME = ; DESC = The maximum received throughput in \\ bits per second. Used for FECN/BECN \\ management. (Operation); HELP = ; CAPABILITIES = ;')
mcmFrTunnelPvcMaxTxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcMaxTxFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrTunnelPvcMaxTxFrameSize.setDescription('NAME = ; DESC = The maximum transmission frame size in \\ octets for this PVC tunnel data (sent out of \\ this unit). (Operational); HELP = ; CAPABILITIES = ;')
mcmFrTunnelPvcTxBc = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcTxBc.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrTunnelPvcTxBc.setDescription('NAME = ; DESC = The transmission committed burst size (Bc) in bits \\ for this PVC tunnel data (sent out of this unit). \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmFrTunnelPvcTxBe = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcTxBe.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrTunnelPvcTxBe.setDescription('NAME = ; DESC = The transmission excess burst size (Be) in bits \\ for this PVC tunnel data (sent out of this unit). \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmFrTunnelPvcMaxTxCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcMaxTxCIR.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrTunnelPvcMaxTxCIR.setDescription('NAME = ; DESC = The maximum transmit throughput in \\ bits per second. Used for FECN/BECN \\ management. (Operation); HELP = ; CAPABILITIES = ;')
mcmFrTunnelPvcState = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("active", 2), ("inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcState.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrTunnelPvcState.setDescription('NAME = ; DESC = This object indicates the current state \\ of the PVC DLCI. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrTunnelPvcRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcRxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrTunnelPvcRxFrames.setDescription('NAME = ; DESC = The number of frames received for this \\ PVC tunnel. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrTunnelPvcTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcTxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrTunnelPvcTxFrames.setDescription('NAME = ; DESC = The number of frames transmitted in this \\ PVC tunnel (regardless whether they are Bc \\ or Be frames). (Operational); HELP = ; CAPABILITIES = ;')
mcmFrTunnelPvcRxDeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcRxDeFrames.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrTunnelPvcRxDeFrames.setDescription('NAME = ; DESC = The number of frames received for this \\ PVC tunnel (ingress) with the DE bit set \\ to one. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrTunnelPvcRxExcessFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcRxExcessFrames.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrTunnelPvcRxExcessFrames.setDescription('NAME = ; DESC = The number of frames received for this \\ PVC tunnel (ingress) which were treated as \\ excess traffic. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrTunnelPvcTxExcessFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcTxExcessFrames.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrTunnelPvcTxExcessFrames.setDescription('NAME = ; DESC = The number of frames transmitted in this \\ PVC tunnel (egress) which were treated as \\ excess traffic. The DE bit may be set to one.\\ (Operational); HELP = ; CAPABILITIES = ;')
mcmFrTunnelPvcRxDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcRxDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrTunnelPvcRxDiscards.setDescription('NAME = ; DESC = The number of frames received for this \\ PVC tunnel (ingress) that were discarded due \\ to traffic enforcement. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrTunnelPvcRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcRxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrTunnelPvcRxOctets.setDescription('NAME = ; DESC = The number of octets received for this \\ PVC tunnel (ingress). (Operational); HELP = ; CAPABILITIES = ;')
mcmFrTunnelPvcTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcTxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrTunnelPvcTxOctets.setDescription('NAME = ; DESC = The number of octets transmitted in this \\ PVC tunnel (egress). (Operational); HELP = ; CAPABILITIES = ;')
mcmFrTunnelPvcConsecFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcConsecFrames.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrTunnelPvcConsecFrames.setDescription('NAME = ; DESC = The number of consecutive frames received\\ with the BECN bit set before reducing \\ the transmit rate. Used for FECN/BECN \\ management. (Operation); HELP = ; CAPABILITIES = ;')
mcmFrTunnelPvcMinTxCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcMinTxCIR.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrTunnelPvcMinTxCIR.setDescription('NAME = ; DESC = The minimum transmit throughput in \\ bits per second. Used for FECN/BECN \\ management. (Operation); HELP = ; CAPABILITIES = ;')
mcmFrNetlinkMapTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 25), )
if mibBuilder.loadTexts: mcmFrNetlinkMapTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrNetlinkMapTable.setDescription('NAME = ; DESC = Table for mapping Netlinks (Tunnel PVC ifIndex \\ values) to Virtual Ports. (Operational); HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmFrNetlinkMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 25, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "mcmFrNetlinkMapVPIfIndex"), (0, "MICOM-FRAMERELAY-MIB", "mcmFrNetlinkMapNetlinkIfIndex"))
if mibBuilder.loadTexts: mcmFrNetlinkMapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrNetlinkMapEntry.setDescription('NAME = ; DESC = Entry in the table for mapping Netlinks \\ (Tunnel PVC ifIndex values) to Virtual \\ Ports. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrNetlinkMapVPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrNetlinkMapVPIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrNetlinkMapVPIfIndex.setDescription('NAME = ; DESC = Virtual port ifIndex associated \\ with this Netlink (Tunnel PVC). \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmFrNetlinkMapNetlinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 25, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrNetlinkMapNetlinkIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrNetlinkMapNetlinkIfIndex.setDescription('NAME = ; DESC = Netlink (Tunnel PVC) ifIndex associated \\ with the specified Virtual Port. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmFrNetlinkMapOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 25, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrNetlinkMapOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrNetlinkMapOperStatus.setDescription('NAME = ; DESC = This object is used to indicate the operational \\ status of the Tunnel PVC. (Operational); HELP = ; CAPABILITIES = ;')
nvmFrGlobalGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 9))
nvmFrMaxDLCI = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrMaxDLCI.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrMaxDLCI.setDescription('NAME = ; DESC = The maximum number of DLCI that \\ may be configured for the entire \\ access device; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
nvmFrMaxVirtualPorts = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrMaxVirtualPorts.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrMaxVirtualPorts.setDescription('NAME = ; DESC = The maximum number of ports that \\ may be configured for the entire \\ access device; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
nvmFrMaxDlciPerLine = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrMaxDlciPerLine.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrMaxDlciPerLine.setDescription('NAME = ; DESC = The maximum number of DLCIs that may \\ be configured for a Frame Relay line; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
nvmFrDNANumberingPlan = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("e164", 1), ("x121", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrDNANumberingPlan.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrDNANumberingPlan.setDescription('NAME = ; DESC = The value of this object designates the \\ numbering plan of the DNA; HELP = The number plan is used in conjunction \\ with a DNA. This object identifies the \\ type of call as E.164 or X.121; CAPABILITIES = NET_CFG, VPN_DISP;')
nvmFrPanlLmiTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPanlLmiTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrPanlLmiTrapEnable.setDescription('NAME = ; DESC = This object specifies whether the generation of \\ Trap messages are enabled/disabled for the FR \\ PANL LMI module.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
nvmFrMsmTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrMsmTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrMsmTrapEnable.setDescription('NAME = ; DESC = This object specifies whether the generation of \\ Trap messages are enabled/disabled for the FR \\ MSM module.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
nvmFrCoreTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrCoreTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrCoreTrapEnable.setDescription('NAME = ; DESC = This object specifies whether the generation of \\ Trap messages are enabled/disabled for the FR \\ Core module.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
nvmFrPlmTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 9, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPlmTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrPlmTrapEnable.setDescription('NAME = ; DESC = This object specifies whether the generation of \\ Trap messages are enabled/disabled for the FR \\ Plm module.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
nvmFrPhyPortTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 10), )
if mibBuilder.loadTexts: nvmFrPhyPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrPhyPortTable.setDescription('NAME = ; DESC = Table of physical port entries \\ contianing flow control info and \\ statistics; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
nvmFrPhyPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 10, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "nvmFrPhyPortExtIfIndex"))
if mibBuilder.loadTexts: nvmFrPhyPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrPhyPortEntry.setDescription('NAME = ; DESC = Entry for a Frame Relay physical \\ port; HELP = Entry for a Frame Relay physical \\ port, containing flow control \\ information and statistics NOT \\ included in the RFC 1315 mib; CAPABILITIES = ;')
nvmFrPhyPortExtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrPhyPortExtIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrPhyPortExtIfIndex.setDescription('NAME = ; DESC = IfIndex of the physical port the \\ extention information (this entry) \\ is associated with; HELP = ; CAPABILITIES = ;')
nvmFrPhyPortFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPhyPortFlowControl.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrPhyPortFlowControl.setDescription('NAME = Frame Relay Flow Control; DESC = Whether or not policing, based on \\ congestion should be enforced; HELP = Enabling this feature will allow packets \\ exceeding the current allowable rate \\ to be dropped if congestion has been \\ detected on the network.; CAPABILITIES = ;')
nvmFrPhyPortThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPhyPortThroughput.setStatus('deprecated')
if mibBuilder.loadTexts: nvmFrPhyPortThroughput.setDescription('NAME = Frame Relay DLCI Throughput; DESC = This object has been DEPRECATED for software \\ releases beginning with Release 3.0, and replaced with \\ new objects TxThroughput, RxThroughput. \\ Default throughput for a PVC; HELP = Defalut throughput used for all \\ PVCs on the same frame relay \\ physical interface. Will be \\ assigned to a PVC when the PVC \\ is created. valid if flow cntl \\ is enabled ; CAPABILITIES = ;')
nvmFrPhyPortDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPhyPortDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrPhyPortDelta.setDescription('NAME = Frame Relay Delta; DESC = Delta time interval to increase or \\ decrease the transmit rate by \\ monitoring the number of frames \\ received with the FECN bit cleared \\ or set. Note that for software releases \\ beginning with R3.0, the range has been \\ expanded from (1..100) to (1..255).; HELP = Typically 4 types end-to-end \\ transit delay. Used only if flow \\ control is enabled. (In 1 second \\ units.) Valid if flow cntl is enabled; CAPABILITIES =;')
nvmFrPhyPortConsectiveFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPhyPortConsectiveFrames.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrPhyPortConsectiveFrames.setDescription('NAME = ; DESC = Number of consecutive frames received \\ with the BECN bit set before reducing \\ the transmit rate; HELP = Transmit rate is increased \\ when S/2 consecutive frames \\ are received with teh BECN bit cleared. \\ Valid only when flow control is enabled.\\ See CCITT Q.922 Appendix I, for the \\ method to compute parameter S.; CAPABILITIES = ;')
nvmFrPhyPortMtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 10, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPhyPortMtuSize.setStatus('deprecated')
if mibBuilder.loadTexts: nvmFrPhyPortMtuSize.setDescription('NAME = ; DESC = This object has been DEPRECATED for software \\ releases beginning with Release 3.0, and replaced with \\ new objects TxMaxFrameSize, RxMaxFrameSize. \\ Maximum Transmission Unit Size; HELP = Maximum Packet size that can be \\ passed to frame Relay and will \\ be sent across the Frame Relay \\ network.; CAPABILITIES = ;')
nvmFrPhyPortTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPhyPortTxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrPhyPortTxThroughput.setDescription('NAME = Frame Relay DLCI Tx Throughput; DESC = The transmission CIR expressed in bits/sec.; HELP = ; CAPABILITIES = ;')
nvmFrPhyPortRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPhyPortRxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrPhyPortRxThroughput.setDescription('NAME = Frame Relay DLCI Rx Throughput; DESC = The receive CIR expressed in bits/sec.; HELP = ; CAPABILITIES = ;')
nvmFrPhyPortTxMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)).clone(1604)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPhyPortTxMaxFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrPhyPortTxMaxFrameSize.setDescription('NAME = ; DESC = The maximum transmission FR packet size \\ expressed in bytes.; HELP = ; CAPABILITIES = ;')
nvmFrPhyPortRxMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)).clone(1604)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPhyPortRxMaxFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrPhyPortRxMaxFrameSize.setDescription('NAME = ; DESC = The maximum receive FR packet size \\ expressed in bytes.; HELP = ; CAPABILITIES = ;')
nvmFrPhyPortRateEnf = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPhyPortRateEnf.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrPhyPortRateEnf.setDescription('NAME = ; DESC = The rate enforcement enabled or disabled \\ parameter for FR congestion management \\ processing.; HELP = ; CAPABILITIES = ;')
nvmFrPhyPortTxBc = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 10, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPhyPortTxBc.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrPhyPortTxBc.setDescription('NAME = ; DESC = The transmission committed burst size \\ expressed in bits.; HELP = ; CAPABILITIES = ;')
nvmFrPhyPortRxBc = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 10, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPhyPortRxBc.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrPhyPortRxBc.setDescription('NAME = ; DESC = The receive committed burst size \\ expressed in bits.; HELP = ; CAPABILITIES = ;')
nvmFrPhyPortTxBe = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 10, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPhyPortTxBe.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrPhyPortTxBe.setDescription('NAME = ; DESC = The transmission excess burst size \\ expressed in bits.; HELP = ; CAPABILITIES = ;')
nvmFrPhyPortRxBe = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 10, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPhyPortRxBe.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrPhyPortRxBe.setDescription('NAME = ; DESC = The receive excess burst size \\ expressed in bits.; HELP = ; CAPABILITIES = ;')
nvmFrPVCPhyTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 11), )
if mibBuilder.loadTexts: nvmFrPVCPhyTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrPVCPhyTable.setDescription('NAME = ; DESC = Table that extends the RFC 1315 \\ DLCMI table contianing info \\ about the PVC LMI; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
nvmFrPVCPhyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 11, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "nvmFrPVCPhyIfIndex"))
if mibBuilder.loadTexts: nvmFrPVCPhyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrPVCPhyEntry.setDescription('NAME = ; DESC = Entry into the micom PVC LMI \\ configuration extensions; HELP = Entry in the PVC Phys Table. \\ Additional information required \\ (not in RFC 1315 DLCI table); CAPABILITIES = ;')
nvmFrPVCPhyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrPVCPhyIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrPVCPhyIfIndex.setDescription('NAME = ; DESC = IfIndex of the physical port \\ the extension information \\ is associated with; HELP = ; CAPABILITIES = ;')
nvmFrPVCLMIMode = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPVCLMIMode.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrPVCLMIMode.setDescription('NAME = ; DESC = Indicates whether the local PVC \\ LMI is performing in the DTE or \\ DCE mode; HELP = DTE or DCE mode of operation for \\ the Frame Relay PVC LMI. (In DTE \\ mode the Status Enquiry messages \\ will be sent. In DCE mode, Status \\ Reports will be sent in response \\ to Status Enquiry mesages.; CAPABILITIES = ;')
nvmFrPVCBiDir = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPVCBiDir.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrPVCBiDir.setDescription('NAME = ; DESC = Indicates whether the PVC LMI \\ should perform both sending \\ status enquiries and sending \\ status reports; HELP = Must be with bilateral agreement \\ with the switch enabled. Switch \\ may send status enquiry messages \\ as defined for the DTEs and allows \\ the DTE to respond with a status \\ messages in the same way as switch \\ does (in this mode Status Enquiries \\ will still be transmitted normally; CAPABILITIES = ;')
nvmFrSVCPhyTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12), )
if mibBuilder.loadTexts: nvmFrSVCPhyTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCPhyTable.setDescription('NAME = ; DESC = Table containing the SVC default \\ parameters ; HELP = Table containing default SVC \\ parameters to be used if none \\ are specified when configuring \\ an SVC; CAPABILITIES = NET_CFG, VPN_DISP;')
nvmFrSVCPhyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "nvmFrSVCPhyIfIndex"))
if mibBuilder.loadTexts: nvmFrSVCPhyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCPhyEntry.setDescription('NAME = ; DESC = Entry into the SVC Default\\ parameter table; HELP = Each entry contains the default \\ SVC parameters for the specified \\ interface; CAPABILITIES = ;')
nvmFrSVCPhyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrSVCPhyIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCPhyIfIndex.setDescription('NAME = ; DESC = IfIndex of the physical port \\ the SVC information is \\ associated with; HELP = ; CAPABILITIES = ;')
nvmFrSVCState = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("q933svc", 1))).clone('q933svc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCState.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCState.setDescription('NAME = ; DESC = SVC LMI Protocol to be used; HELP = SVC LMI Protocol to be used \\ on this interface. (All \\ SVC connection setup must \\ use the same protocol); CAPABILITIES = ;')
nvmFrSVCT303 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCT303.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCT303.setDescription('NAME = ; DESC = The duration, in seconds, \\ of the setup timer for SVCs. \\ ; HELP = How long the SVC LMI will wait \\ for a response from the network \\ (e.g. call proceeding, connect) \\ before the setup message will be \\ retransmitted. In 1 second unit. \\ Q.931 recommends 4 seconds. Causes at \\ most one Setup retransmission; CAPABILITIES = ;')
nvmFrSVCT305 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCT305.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCT305.setDescription('NAME = ; DESC = The duration of the Disconnect \\ timer (in seconds) for SVCs.; HELP = How long the SVC LMI will wait \\ for a release message from the \\ network before it will transmit \\ a release message. (The SVC LMI \\ will then wait for a release \\ message from the network.) In 1 second \\ unit. Q.931 recommends 30 seconds.\\ Causes at most one release \\ transmit; CAPABILITIES = ;')
nvmFrSVCT308 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCT308.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCT308.setDescription('NAME = ; DESC = The duration of Release timer. ; HELP = How long the SVC LMI will wait \\ for a response from the network \\ before the release message will \\ be retransmitted. (When the \\ second release is transmitted, \\ the local SVC LMI considers \\ the corresponding SVC to have \\ been released by the network \\ as well - even if no response \\ is received.) In 1 second unit. \\ Q.931 recommends 4 seconds. \\ Causes at most one release transmit; CAPABILITIES = ;')
nvmFrSVCT310 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCT310.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCT310.setDescription('NAME = ; DESC = The duration of Connect Timer.; HELP = How long the SVC LMI will wait \\ (in seconds) for a Connect message \\ (after receiving the Call Proceeding \\ message) before sending a Release \\ message. In 1 second units. Q.931 \\ recommends a duration between 30\\ to 120 seconds on the DTE side and \\ 10 seconds on the DCE side Causes connection disconnection; CAPABILITIES = ;')
nvmFrSVCMaxCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMaxCalls.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCMaxCalls.setDescription('NAME = ; DESC = Maximum number of SVC Connections; HELP = For all SVCs, including both \\ incoming and outgoing; CAPABILITIES = ;')
nvmFrSVCMaxTxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096)).clone(1604)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMaxTxSize.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCMaxTxSize.setDescription('NAME = ; DESC = Default Maximum transmit frame size, \\ in bytes, to negotiate with the remote; HELP = This value will be used only if a \\ specific value is not included in the \\ Connect Request primitive. A value of \\ 0 indicates the network default values \\ are to be used (unless it is passed down \\ at connect time). Expressed in bytes. CAPABILITIES = ;')
nvmFrSVCMaxRxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096)).clone(1604)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMaxRxSize.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCMaxRxSize.setDescription('NAME = ; DESC = Maximum receive frame size in bytes; HELP = Default value for the maximum receive \\ frame size to negotiate with the remote \\ This value will be used only if a \\ specific value is not included in the \\ Connect Request primitive. A value of \\ 0 indicates the network default values \\ are to be used (unless it is passed down \\ at connect time). Expressed in bytes. CAPABILITIES = ;')
nvmFrSVCMinDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(17, 991)).clone(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMinDLCI.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCMinDLCI.setDescription('NAME = ; DESC = Lowest DLCI value for SVCs on \\ this network; HELP = This value applies only to SVC connections. \\ PVC DLCI connections may be established \\ above or below this value.; CAPABILITIES = ;')
nvmFrSVCMaxDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(17, 991)).clone(991)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMaxDLCI.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCMaxDLCI.setDescription('NAME = ; DESC = Highest DLCI value for SVCs on \\ the this network; HELP = This value applies only to SVC connections. \\ PVC DLCI connections may be established \\ above or below this value.; CAPABILITIES = ;')
nvmFrSVCMinTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMinTxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCMinTxThroughput.setDescription('NAME = ; DESC = Minimum transmit throughput in \\ bits per seconds; HELP = Minimum transmit throughput in \\ bits per second, to negotiate with \\ the remote (used along with the \\ maximum transmit throughput) \\ unless overwritten at connect time. \\ A value of 0 indicates the network \\ default values are to be used; CAPABILITIES = ;')
nvmFrSVCMinRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMinRxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCMinRxThroughput.setDescription('NAME = ; DESC = Minimum receive throughput in \\ bits per seconds; HELP = To negotiate with the remote when used with the \\ maximum receive throughput \\ unless overwritten at connect time. \\ A value of 0 indicates the network \\ default values are to be used; CAPABILITIES = ;')
nvmFrSVCMaxTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMaxTxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCMaxTxThroughput.setDescription('NAME = ; DESC = Maximum transmit throughput in \\ bits per seconds; HELP = To negotiate with the remote when used with the \\ minimum transmit throughput \\ unless overwritten at connect time. \\ A value of 0 indicates the network \\ default values are to be use; CAPABILITIES = ;')
nvmFrSVCMaxRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMaxRxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCMaxRxThroughput.setDescription('NAME = ; DESC = Maximum receive throughput in \\ bits per seconds; HELP = To negotiate with the remote when used with the \\ minimum receive throughput \\ unless overwritten at connect time. \\ A value of 0 indicates the network \\ default values are to be used; CAPABILITIES = ;')
nvmFrSVCTxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCTxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCTxBurstSize.setDescription('NAME = ; DESC = Transmit burst size in bytes; HELP = Default Committed Transmit burst \\ size, in bytes, to negotiate with \\ the remote unless overwritten at \\ connect time. A value of 0 \\ indicates the network default \\ values are to be used; CAPABILITIES = ;')
nvmFrSVCRxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCRxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCRxBurstSize.setDescription('NAME = ; DESC = Receive burst size in bytes; HELP = Default Committed Receive burst \\ size, in bytes, to negotiate with \\ the remote unless overwritten at \\ connect time. A value of 0 \\ indicates the network default \\ values are to be used; CAPABILITIES = ;')
nvmFrSVCExcessTxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCExcessTxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCExcessTxBurstSize.setDescription('NAME = ; DESC = Excess transmit burst size in bytes; HELP = Default Uncommitted Transmit burst \\ size, in bytes, to negotiate with \\ the remote unless overwritten at \\ connect time. A value of 0 \\ indicates the network default \\ values are to be used; CAPABILITIES = ;')
nvmFrSVCExcessRxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCExcessRxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCExcessRxBurstSize.setDescription('NAME = ; DESC = Excess receive burst size in bytes; HELP = Default Uncommitted Receive burst \\ size, in bytes, to negotiate with \\ the remote unless overwritten at \\ connect time. A value of 0 \\ indicates the network default \\ values are to be used; CAPABILITIES = ;')
nvmFrVirtualPortTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 13), )
if mibBuilder.loadTexts: nvmFrVirtualPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrVirtualPortTable.setDescription('NAME = ; DESC = Table to provide the mapping between \\ virtual ports and physical ports \\ and to define the virtual port \\ parameters; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
nvmFrVirtualPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 13, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "nvmFrVirtualPortIfIndex"))
if mibBuilder.loadTexts: nvmFrVirtualPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrVirtualPortEntry.setDescription('NAME = ; DESC = Each entry in this table contains \\ information to define a virtual \\ port; HELP = ; CAPABILITIES = ;')
nvmFrVirtualPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrVirtualPortIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrVirtualPortIfIndex.setDescription('NAME = Virtual Port Interface Number; DESC = IfIndex associated with this port; HELP = ; CAPABILITIES = ;')
nvmFrVirtualPortPhyPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrVirtualPortPhyPortIfIndex.setStatus('obsolete')
if mibBuilder.loadTexts: nvmFrVirtualPortPhyPortIfIndex.setDescription('NAME = ; DESC = *******NOTE: THIS OBJECT IS OBSOLETE******* This information is no longer useful for \\ virtual ports. The virtual ports no longer \\ have an underlying network. Only SVC DNAs \\ and PVC DLCIs are associated with VPs now. \\ The underlying MPANL will take care of which \\ link the SVC is to be made on and a Physical \\ Line IfIndex has been added to the PVCs. VP \\ are no longer required to provide the backup \\ link support (MPANL now does that).\\ IfIndex of the Frame Relay physical \\ port for which the virtual port is \\ (or will be) linked to; HELP = ; CAPABILITIES = ;')
nvmFrVirtualPortPPA = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrVirtualPortPPA.setStatus('obsolete')
if mibBuilder.loadTexts: nvmFrVirtualPortPPA.setDescription('NAME = This object has been OBSOLETED for software \\ releases beginning with Release 3.0. \\ Virtual Port PPA Number; DESC = Point of Physical attachment for \\ this port; HELP = ; CAPABILITIES = ;')
nvmFrVirtualPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("basic", 1), ("easyRouting", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrVirtualPortMode.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrVirtualPortMode.setDescription('NAME = Virtual Port Mode; HELP = Mode of the virtual port; DESC = Easy Routing requires that data \\ will be switched between the \\ Virtual Circuits on the this \\ virutal port. Basic mode turns \\ off the switching mode; CAPABILITIES = ;')
nvmFrVirtualPortEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrVirtualPortEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrVirtualPortEntryStatus.setDescription('NAME = Virtual Port Mode; DESC = Virtual port row status; HELP = Indicates whether or not this \\ entry is valid; CAPABILITIES = ;')
nvmFrVirtualPortProtocolBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ip-configured", 1), ("ipx-configured", 2), ("ip-and-ipx-configured", 3), ("bridge-configured", 4), ("ip-and-bridge-configured", 5), ("ipx-and-bridge-configured", 6), ("ip-and-ipx-and-bridge-configured", 7), ("sNA-configured", 8), ("x25-configured", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrVirtualPortProtocolBinding.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrVirtualPortProtocolBinding.setDescription('NAME = ; DESC = Bitmap that contains the protocols bound. \\ to this Virtual Port; HELP = ; CAPABILITIES = ;')
nvmFrVirtualPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 13, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrVirtualPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrVirtualPortNumber.setDescription('NAME = ; DESC = This object specifies the Virtual \\ Port Number used as an identifier \\ for a Virtual Port. (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrSVCMapTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14), )
if mibBuilder.loadTexts: nvmFrSVCMapTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCMapTable.setDescription('NAME = ; DESC = Table for SVC to VP bindings; HELP = This table will give the SVC \\ DNA address to be bound to the \\ specified Virtual Port; CAPABILITIES = NET_CFG, VPN_DISP;')
nvmFrSVCMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "nvmFrSVCMapVirtualPortIfIndex"), (0, "MICOM-FRAMERELAY-MIB", "nvmFrSVCMapDNA"))
if mibBuilder.loadTexts: nvmFrSVCMapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCMapEntry.setDescription('NAME = ; DESC = Entry in the SVC to VP binding \\ table; HELP = SVC/VP binding entry in the SVC \\ binding table. Multiple SVCS \\ (DNAs) may be bound to a single \\ VP (ifindex); CAPABILITIES = ;')
nvmFrSVCMapVirtualPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMapVirtualPortIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCMapVirtualPortIfIndex.setDescription('NAME = ; DESC = Virtual Port ifIndex associated \\ with this DNA; HELP = ; CAPABILITIES = ;')
nvmFrSVCMapDNA = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 34))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMapDNA.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCMapDNA.setDescription('NAME = ; DESC = Remote DNA to associate with \\ the corresponding virtual port; HELP = DNA to be mapped to the \\ corresponding virtual port. \\ This will be used to create \\ an SVC to the corresponding \\ remote DNA; CAPABILITIES = ;')
nvmFrSVCMapMaxTxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMapMaxTxSize.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCMapMaxTxSize.setDescription('NAME = ; DESC = Maximum transmit frame size to \\ negotiate with the remote (in \\ bytes); HELP = This value will override the default values for \\ the physical interface. A value \\ of 0 indicates the networks default \\ values are to be used. Experessed in \\ bytes; CAPABILITIES = ;')
nvmFrSVCMapMaxRxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMapMaxRxSize.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCMapMaxRxSize.setDescription('NAME = ; DESC = Maximum receive frame size to \\ negotiate with the remote (in \\ bytes); HELP = This value will override the default values for \\ the physical interface. A value \\ of 0 indicates the networks default \\ values are to be used. Experessed in \\ bytes; CAPABILITIES = ;')
nvmFrSVCMapMinTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMapMinTxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCMapMinTxThroughput.setDescription('NAME = ; DESC = Minimum transmit throughput in \\ bits per second; HELP = Used with the maximum transmit throughput. \\ This value will override default \\ values given for this physical \\ interface. A value of 0 indicates \\ the network default values are to \\ be used; CAPABILITIES = ;')
nvmFrSVCMapMinRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMapMinRxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCMapMinRxThroughput.setDescription('NAME = ; DESC = Minimum receive throughput in \\ bits per second; HELP = Used with the maximum receive throughput. \\ This value will override default \\ values given for this physical \\ interface. A value of 0 indicates \\ the network default values are to \\ be used; CAPABILITIES = ;')
nvmFrSVCMapMaxTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMapMaxTxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCMapMaxTxThroughput.setDescription('NAME = ; DESC = Maximum transmit throughput in \\ bits per second; HELP = Used with the minimum transmit throughput. \\ This value will override default \\ values given for this physical \\ interface. A value of 0 indicates \\ the network default values are to \\ be used; CAPABILITIES = ;')
nvmFrSVCMapMaxRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMapMaxRxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCMapMaxRxThroughput.setDescription('NAME = ; DESC = Maximum receive throughput in \\ bits per second; HELP = Used with the minimum receive throughput. \\ This value will override default \\ values given for this physical \\ interface. A value of 0 indicates \\ the network default values are to \\ be used; CAPABILITIES = ;')
nvmFrSVCMapTxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMapTxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCMapTxBurstSize.setDescription('NAME = ; DESC = Transmit burst size in bytes; HELP = Committed transmit busrt size, \\ in bytes, to negotiate with the \\ remote. This value will override \\ default values entered for the \\ network. A value of 0 indicates \\ the network default values are to \\ be used; CAPABILITIES = ;')
nvmFrSVCMapRxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMapRxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCMapRxBurstSize.setDescription('NAME = ; DESC = Receive burst size in bytes; HELP = Committed receive busrt size, \\ in bytes, to negotiate with the \\ remote. This value will override \\ default values entered for the \\ network. A value of 0 indicates \\ the network default values are to \\ be used; CAPABILITIES = ;')
nvmFrSVCMapExcessTxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMapExcessTxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCMapExcessTxBurstSize.setDescription('NAME = ; DESC = Excess transmit burst size in bytes; HELP = Uncommitted transmit busrt size, \\ in bytes, to negotiate with the \\ remote. This value will override \\ default values entered for the \\ network. A value of 0 indicates \\ the network default values are to \\ be used; CAPABILITIES = ;')
nvmFrSVCMapExcessRxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMapExcessRxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCMapExcessRxBurstSize.setDescription('NAME = ; DESC = Excess receive burst size in bytes; HELP = Uncommitted transmit busrt size, \\ in bytes, to negotiate with the \\ remote. This value will override \\ default values entered for the \\ network. A value of 0 indicates \\ the network default values are to \\ be used; CAPABILITIES = ;')
nvmFrSVCMapPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMapPriority.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCMapPriority.setDescription('NAME = ; DESC = Transfer priority level for data on \\ this SVC; HELP = All data on this SVC will be sent \\ through the switches at \\ the requested transfer priority level; CAPABILITIES = ;')
nvmFrSVCMapEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMapEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCMapEntryStatus.setDescription('NAME = ; DESC = Indicates whether or not this entry is \\ enabled; HELP = Enabled indicates this entry will be used \\ to establish an SVC connection. Disabled \\ indicates this entry is to be ignored when \\ establishing SVC connections. This allows \\ these SVCs entries to be disabled/enabled \\ without having to reenter the entire entry; CAPABILITIES = ;')
nvmFrSVCMapTransferPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMapTransferPriority.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCMapTransferPriority.setDescription('NAME = ; DESC = The transfer priority for the corresponding \\ pass-through connection. (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrSVCMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMapRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCMapRowStatus.setDescription('NAME = ; DESC = This object is used to add new rows \\ in the SVC to VP bindings table, modify existing \\ rows,and to delete existing rows (Configuration); HELP = To add a new row, createAndGo (4) is used. \\ To modify an existing row, active (1) is \\ used. To delete an existing row, \\ destroy (6) is used. ; CAPABILITIES = ;')
nvmFrSVCMapDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low-discard-level", 1), ("medium-discard-level", 2), ("high-discard-level", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMapDiscardPriority.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCMapDiscardPriority.setDescription('NAME = ; DESC = The discard priority used for connection \\ setup of this SVC map.; HELP = ; CAPABILITIES = ;')
nvmFrSVCMapSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMapSetupPriority.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCMapSetupPriority.setDescription('NAME = ; DESC = This object specifies the priority of a path at \\ call-establishment time, and also determines \\ the potential for bumping established paths \\ to acquire their bandwidth. A value of 1 is \\ the highest priority, and 5 is the lowest.; HELP = ; CAPABILITIES = ;')
nvmFrSVCMapHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMapHoldingPriority.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrSVCMapHoldingPriority.setDescription('NAME = ; DESC = This object specifies the priority that a path \\ maintains once the path is established, and \\ also determines the likelihood of being bumped \\ by a new path, thus losing the bandwidth. A value \\ of 1 is the highest priority, and 5 is the lowest.; HELP = ; CAPABILITIES = ;')
nvmFrPVCMapTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 15), )
if mibBuilder.loadTexts: nvmFrPVCMapTable.setStatus('obsolete')
if mibBuilder.loadTexts: nvmFrPVCMapTable.setDescription('NAME = ; DESC = This table has been OBSOLETED for software \\ releases beginning with Release 3.0. \\ Table for PVC to VP bindings; HELP = This table will give the PVC \\ DLCI address to be bound to the \\ specified Virtual Port; CAPABILITIES = NET_CFG, VPN_DISP;')
nvmFrPVCMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 15, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "nvmFrPVCMapVirtualPortIfIndex"), (0, "MICOM-FRAMERELAY-MIB", "nvmFrPVCMapDLCI"))
if mibBuilder.loadTexts: nvmFrPVCMapEntry.setStatus('obsolete')
if mibBuilder.loadTexts: nvmFrPVCMapEntry.setDescription('NAME = ; DESC = Entry in the PVC to VP binding \\ table; HELP = PVC/VP binding entry in the PVC \\ binding table. Multiple PVCs \\ (DLCIs) may be bound to a single \\ VP (ifindex).; CAPABILITIES = ;')
nvmFrPVCMapVirtualPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 15, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPVCMapVirtualPortIfIndex.setStatus('obsolete')
if mibBuilder.loadTexts: nvmFrPVCMapVirtualPortIfIndex.setDescription('NAME = ; DESC = Virtual port ifIndex associated \\ with this PVC DLCI; HELP = ; CAPABILITIES = ;')
nvmFrPVCMapDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(17, 126975))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPVCMapDLCI.setStatus('obsolete')
if mibBuilder.loadTexts: nvmFrPVCMapDLCI.setDescription('NAME = ; DESC = Local DLCI to the remote that is \\ to be associated with the \\ corresponding virtual port; HELP = A DLCI for any given interface \\ may be bound to only one virtual \\ port; CAPABILITIES = ;')
nvmFrPVCMapEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPVCMapEntryStatus.setStatus('obsolete')
if mibBuilder.loadTexts: nvmFrPVCMapEntryStatus.setDescription('NAME = ; DESC = Indicates whether or not this entry is \\ enabled; HELP = Enabled indicates this entry will be used \\ to associate a PVC DLCI with a virtual \\ port. Disable indicates this entry is to \\ be ignored when mapping PVC dlcis to \\ virtual ports. This allows the PVC map \\ entries to be disabled/enabled without \\ having to reenter the entire entry; CAPABILITIES = ;')
nvmFrPVCMapPhysIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 15, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPVCMapPhysIfIndex.setStatus('obsolete')
if mibBuilder.loadTexts: nvmFrPVCMapPhysIfIndex.setDescription('NAME = ; DESC = Physical interface this PVC \\ is associated with.; HELP = ; CAPABILITIES = ;')
nvmFrDlcmiTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 16), )
if mibBuilder.loadTexts: nvmFrDlcmiTable.setReference('Draft American National Standard T1.617-1991, Annex D')
if mibBuilder.loadTexts: nvmFrDlcmiTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrDlcmiTable.setDescription('NAME = ; DESC = The Parameters for the Data Link Connection \\ Management Interface for the frame \\ relay service on this interface.; HELP = Table of standard RFC 1315 PVC LMI \\ Parameters per interface (physical \\ port); CAPABILITIES = NET_CFG, VPN_DISP;')
nvmFrDlcmiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 16, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "nvmFrDlcmiIfIndex"))
if mibBuilder.loadTexts: nvmFrDlcmiEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrDlcmiEntry.setDescription('NAME = ; DESC = The Parameters for a particular Data \\ Link Connection Management Interface.; HELP = Entry for the standard RFC 1315 PVC \\ LMI parameters for an interface \\ (physical port); CAPABILITIES = ;')
nvmFrDlcmiIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrDlcmiIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrDlcmiIfIndex.setDescription('NAME = ; DESC = The ifIndex of the physical interface \\ for the corresponding PVC LMI \\ parameters to be updated; HELP = ; CAPABILITIES = ;')
nvmFrDlcmiState = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6))).clone(namedValues=NamedValues(("noLmiConfigured", 1), ("lmi", 2), ("itut933A", 5), ("ansiT1617D1994", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrDlcmiState.setReference('Draft American National Standard T1.617-1991')
if mibBuilder.loadTexts: nvmFrDlcmiState.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrDlcmiState.setDescription("NAME = ; DESC = This variable states which Data Link \\ Connection Management scheme is \\ active (and by implication, what \\ DLCI it uses) on the Frame Relay \\ interface.; HELP = The type of PVC LMI active on this \\ interface. The PVC LMI selected \\ must be compatable with the network \\ PVC LMI running. (If no PVCs are to \\ be used, the 'noLmiConfigured' option \\ may be selected.); CAPABILITIES = ;")
nvmFrDlcmiAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("q921", 1), ("q922March90", 2), ("q922November90", 3), ("q922", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrDlcmiAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrDlcmiAddress.setDescription('NAME = ; DESC = This variable states which address \\ format is in use on the Frame Relay \\ interface.; HELP = Must match the address format used by the \\ network; CAPABILITIES = ;')
nvmFrDlcmiAddressLen = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("two-octets", 2), ("three-octets", 3), ("four-octets", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrDlcmiAddressLen.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrDlcmiAddressLen.setDescription('NAME = ; DESC = This variable states which address \\ length in octets.; HELP = In the case of \\ Q922 format, the length indicates the \\ entire length of the address including \\ the control portion. Used with \\ the address type to identify \\ a PVC. This value must match the \\ address length used by the network; CAPABILITIES = ;')
nvmFrDlcmiPollingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 16, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrDlcmiPollingInterval.setReference('Draft American National Standard T1.617-1991, Section D.7 Timer T391.')
if mibBuilder.loadTexts: nvmFrDlcmiPollingInterval.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrDlcmiPollingInterval.setDescription('NAME = ; DESC = This is the number of seconds between \\ successive status enquiry messages.; HELP = How often the PVC LMI status enquiry \\ messages will be sent on the \\ corresponding interface (measured \\ in seconds); CAPABILITIES = ;')
nvmFrDlcmiFullEnquiryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 16, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrDlcmiFullEnquiryInterval.setReference('Draft American National Standard T1.617-1991, Section D.7 Counter N391.')
if mibBuilder.loadTexts: nvmFrDlcmiFullEnquiryInterval.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrDlcmiFullEnquiryInterval.setDescription('NAME = ; DESC = Number of status enquiry intervals \\ that pass before issuance of a full \\ status enquiry message.; HELP = How often a full status enquiry message \\ will be sent. Measured in units of \\ status enquiry interval. (Every nth \\ status enquiry will be a full status \\ enquiry.); CAPABILITIES = ;')
nvmFrDlcmiErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 16, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrDlcmiErrorThreshold.setReference('Draft American National Standard T1.617-1991, Section D.5.1 Counter N392.')
if mibBuilder.loadTexts: nvmFrDlcmiErrorThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrDlcmiErrorThreshold.setDescription('NAME = ; DESC = This is the maximum number of \\ unanswered Status Enquiries the equipment \\ shall accept before declaring the LMI \\ down.; HELP = ; CAPABILITIES = ;')
nvmFrDlcmiMonitoredEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 16, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrDlcmiMonitoredEvents.setReference('Draft American National Standard T1.617-1991, Section D.5.2 Counter N393.')
if mibBuilder.loadTexts: nvmFrDlcmiMonitoredEvents.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrDlcmiMonitoredEvents.setDescription("NAME = ; DESC = This is the number of status polling \\ intervals over which the error threshold \\ is counted.; HELP = If within \\ 'MonitoredEvents' number of events \\ the station receives 'ErrorThreshold' \\ number of errors, the interface is \\ marked as down.; CAPABILITIES = ;")
nvmFrDlcmiMaxSupportedVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 16, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrDlcmiMaxSupportedVCs.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrDlcmiMaxSupportedVCs.setDescription("NAME = ; DESC = The maximum number of Virtual Circuits \\ allowed for this interface.; HELP = Dictated by the Frame Relay network. In \\ response to a SET, if a value less \\ than zero or higher than the agent's \\ maximal capability is configured, the \\ agent should respond bad- Value; CAPABILITIES = ;")
nvmFrDlcmiMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 16, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonBroadcast", 1), ("broadcast", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrDlcmiMulticast.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrDlcmiMulticast.setDescription('NAME = ; DESC = This indicates whether the Frame Relay \\ interface is using a multicast service.; HELP = The network \\ must support a multicast service; CAPABILITIES = ;')
nvmFrLANSpvcTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 20), )
if mibBuilder.loadTexts: nvmFrLANSpvcTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrLANSpvcTable.setDescription('NAME = ; DESC = The Frame Relay LAN SPVC Connections \\ table(Configurational); HELP = ; CAPABILITIES =NET_CFG, VPN_CFG;')
nvmFrLANSpvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 20, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "nvmFrLANSpvcVirtualPortIfIndex"), (0, "MICOM-FRAMERELAY-MIB", "nvmFrLANSpvcRemoteDLCI"))
if mibBuilder.loadTexts: nvmFrLANSpvcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrLANSpvcEntry.setDescription('NAME = ; DESC = An entry in the Frame Relay LAN SPVC \\ Connections table. (Configurational); HELP = ; CAPABILITIES = ;')
nvmFrLANSpvcVirtualPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcVirtualPortIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrLANSpvcVirtualPortIfIndex.setDescription('NAME = ; DESC = The ifIndex of the local Virtual Port \\ (Analogous to the ifIndex pointer in the \\ MIB II Interfaces Group, but specific to \\ the FR End-to-End Connections table.); HELP = ; CAPABILITIES = ;')
nvmFrLANSpvcRemoteDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcRemoteDLCI.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrLANSpvcRemoteDLCI.setDescription('NAME = ; DESC = The DLCI value on the remote DCE interface. HELP = ; CAPABILITIES = ;')
nvmFrLANSpvcConnectId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 20, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrLANSpvcConnectId.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrLANSpvcConnectId.setDescription('NAME = ; DESC = The connect ID of this SPVC mapping.\\ Used to associate SVCs and Connect \\ mappings.; HELP = ; CAPABILITIES = ;')
nvmFrLANSpvcRemoteDNA = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 20, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 34))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcRemoteDNA.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrLANSpvcRemoteDNA.setDescription('NAME = ; DESC = The DNA of the remote node with which \\ the SVC will be established.; HELP = ; CAPABILITIES = ;')
nvmFrLANSpvcConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("slave", 1), ("master", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcConnType.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrLANSpvcConnType.setDescription('NAME = ; DESC = The value of this object indicates \\ whether this end of the SPVC segment \\ initiated the SVC call.; HELP = ; CAPABILITIES = ;')
nvmFrLANSpvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 20, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrLANSpvcRowStatus.setDescription('NAME = ; DESC = This object is used to add new rows \\ in the connection table, modify \\ existing rows and to delete existing \\ rows.; HELP = ; CAPABILITIES = ;')
nvmFrLANSpvcSVCTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 21), )
if mibBuilder.loadTexts: nvmFrLANSpvcSVCTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrLANSpvcSVCTable.setDescription('NAME = ; DESC = The Frame Relay SVC Connect (Switched) \\ Segment Configuration table. HELP = ; CAPABILITIES =NET_CFG, VPN_CFG;')
nvmFrLANSpvcSVCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 21, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "nvmFrLANSpvcSVCConnectId"))
if mibBuilder.loadTexts: nvmFrLANSpvcSVCEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrLANSpvcSVCEntry.setDescription('NAME = ; DESC = An entry in the Frame Relay LAN SPVC \\ Connections table.; HELP = ; CAPABILITIES = ;')
nvmFrLANSpvcSVCConnectId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrLANSpvcSVCConnectId.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrLANSpvcSVCConnectId.setDescription('NAME = ; DESC = The Connect Id of the Connection \\ group entry to which this SVC \\ belongs. HELP = ; CAPABILITIES = ;')
nvmFrLANSpvcSVCDNA = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 21, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 34))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcSVCDNA.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrLANSpvcSVCDNA.setDescription('NAME = ; DESC = The DNA for the destination of \\ the virtual circuit.; HELP = ; CAPABILITIES = ;')
nvmFrLANSpvcSVCMaxTxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 21, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcSVCMaxTxSize.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrLANSpvcSVCMaxTxSize.setDescription('NAME = ; DESC = The maximum transmission frame size. \\ This should be equal to (or greater \\ than) the Rx size for the corresponding \\ PVC. Expressed in bytes.; HELP = ; CAPABILITIES = ;')
nvmFrLANSpvcSVCMaxRxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 21, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcSVCMaxRxSize.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrLANSpvcSVCMaxRxSize.setDescription('NAME = ; DESC = The maximum receivable frame size. \\ This should be equal to (or less than) \\ the Tx size for the corresponding PVC. \\ Expressed in bytes.; HELP = ; CAPABILITIES = ;')
nvmFrLANSpvcSVCMinTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 21, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcSVCMinTxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrLANSpvcSVCMinTxThroughput.setDescription('NAME = ; DESC = The minimum transmission throughput. \\ This should be equal to (or greater than) \\ the Rx CIR for the corresponding PVC. \\ Expressed in bits/sec.; HELP = ; CAPABILITIES = ;')
nvmFrLANSpvcSVCMinRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 21, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcSVCMinRxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrLANSpvcSVCMinRxThroughput.setDescription('NAME = ; DESC = The minimum receive throughput.\\ This should be equal to (or less \\ than) the Tx CIR for the corresponding \\ PVC. Expressed in bits/sec. HELP = ; CAPABILITIES = ;')
nvmFrLANSpvcSVCMaxTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 21, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcSVCMaxTxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrLANSpvcSVCMaxTxThroughput.setDescription('NAME = ; DESC = The maximum transmission throughput.\\ Always set to the value of \\ nvmFrLANSpvcSVCMinTxThroughput.; HELP = ; CAPABILITIES = ;')
nvmFrLANSpvcSVCMaxRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 21, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcSVCMaxRxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrLANSpvcSVCMaxRxThroughput.setDescription('NAME = ; DESC = The maximum receive throughput. \\ Always set to the value of \\ nvmFrLANSpvcSVCMinRxThroughput.; HELP = ; CAPABILITIES = ;')
nvmFrLANSpvcSVCMaxTxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 21, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcSVCMaxTxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrLANSpvcSVCMaxTxBurstSize.setDescription('NAME = ; DESC = The maximum transmission burst size \\ Computation based on throughput and \\ Excess Burst. Expressed in bits/sec.; HELP = ; CAPABILITIES = ;')
nvmFrLANSpvcSVCMaxRxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 21, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcSVCMaxRxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrLANSpvcSVCMaxRxBurstSize.setDescription('NAME = ; DESC = The maximum receive burst size. \\ Computation based on throughput and \\ Excess Burst. Expressed in bits/sec.; HELP = ; CAPABILITIES = ;')
nvmFrLANSpvcSVCExcessTxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 21, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcSVCExcessTxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrLANSpvcSVCExcessTxBurstSize.setDescription('NAME = ; DESC = The maximum number of uncommitted \\ bits that the network will attempt \\ to accept. This should be equal to \\ (or greater than) the Rx Be configured for the corresponding PVC. Expressed in \\ bits/sec.; HELP = ; CAPABILITIES = ;')
nvmFrLANSpvcSVCExcessRxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 21, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcSVCExcessRxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrLANSpvcSVCExcessRxBurstSize.setDescription('NAME = ; DESC = The maximum number of uncommitted bits \\ that the network will attempt to deliver. \\ This should be equal to (or less than) the \\ Tx Be configured for the corresponding PVC \\ Expressed in bits/sec.; HELP = ; CAPABILITIES = ;')
nvmFrLANSpvcSVCTransferPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 21, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcSVCTransferPriority.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrLANSpvcSVCTransferPriority.setDescription('NAME = ; DESC = The transfer priority for the corresponding \\ pass-through connection. HELP = ; CAPABILITIES = ;')
nvmFrLANSpvcSVCDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 21, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low-discard-level", 1), ("medium-discard-level", 2), ("high-discard-level", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcSVCDiscardPriority.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrLANSpvcSVCDiscardPriority.setDescription('NAME = ; DESC = The discard priority setup for \\ the LAN SPVC SVC.; HELP = ; CAPABILITIES = ;')
nvmFrLANSpvcSVCSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 21, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcSVCSetupPriority.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrLANSpvcSVCSetupPriority.setDescription('NAME = ; DESC = This object specifies the priority of a path at \\ call-establishment time, and also determines \\ the potential for bumping established paths \\ to acquire their bandwidth. A value of 1 is \\ the highest priority, and 5 is the lowest.; HELP = ; CAPABILITIES = ;')
nvmFrLANSpvcSVCHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 21, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcSVCHoldingPriority.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrLANSpvcSVCHoldingPriority.setDescription('NAME = ; DESC = This object specifies the priority that a path \\ maintains once the path is established, and \\ also determines the likelihood of being bumped \\ by a new path, thus losing the bandwidth. A value \\ of 1 is the highest priority, and 5 is the lowest.; HELP = ; CAPABILITIES = ;')
nvmFrTunnelPvcTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 24), )
if mibBuilder.loadTexts: nvmFrTunnelPvcTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrTunnelPvcTable.setDescription('NAME = ; DESC = Table of entries for Frame Relay Tunnel PVCs \\ for this access device. (Configuration); HELP =; CAPABILITIES = NET_CFG, VPN_DISP;')
nvmFrTunnelPvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 24, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "nvmFrTunnelPvcIfIndex"))
if mibBuilder.loadTexts: nvmFrTunnelPvcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrTunnelPvcEntry.setDescription('NAME = ; DESC = A row or entry in the Frame Relay Tunnel PVC \\ Table. (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrTunnelPvcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrTunnelPvcIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrTunnelPvcIfIndex.setDescription('NAME = ; DESC = The ifIndex of the tunnel PVC itself. \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrTunnelPvcDlciNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 24, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrTunnelPvcDlciNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrTunnelPvcDlciNumber.setDescription('NAME = ; DESC = The DLCI number for this PVC tunnel. \\ Note that this object may only be configured \\ during row creation. (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrTunnelPvcPhysicalCard = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("limA", 1), ("lim1", 2), ("lim2", 3), ("lim3", 4), ("lim4", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrTunnelPvcPhysicalCard.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrTunnelPvcPhysicalCard.setDescription('NAME = ; DESC = The Card (Logical Interface Module - LIM) \\ of the WAN port (physical FR link). \\ Note that this object may only be configured \\ during row creation. (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrTunnelPvcPhysicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 24, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrTunnelPvcPhysicalPort.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrTunnelPvcPhysicalPort.setDescription('NAME = ; DESC = The channel number of this WAN port. \\ Note that this object may only be configured \\ during row creation. (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrTunnelPvcType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 24, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dte-panl", 1), ("dce-panl", 2), ("standard", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrTunnelPvcType.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrTunnelPvcType.setDescription('NAME = ; DESC = The FR tunnel PVC type. \\ Note that this object may only be configured \\ during row creation. (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrTunnelPvcPhysPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 24, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrTunnelPvcPhysPortIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrTunnelPvcPhysPortIfIndex.setDescription('NAME = ; DESC = The ifIndex of the FR physical port. \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrTunnelPvcMaxRxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 24, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)).clone(1604)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrTunnelPvcMaxRxFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrTunnelPvcMaxRxFrameSize.setDescription('NAME = ; DESC = The maximum receive frame size in \\ octets for this PVC tunnel data (sent into \\ this unit). (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrTunnelPvcRxBc = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 24, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrTunnelPvcRxBc.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrTunnelPvcRxBc.setDescription('NAME = ; DESC = The receive committed burst size (Bc) in bits \\ for this PVC tunnel data (sent into this unit). \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrTunnelPvcRxBe = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 24, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrTunnelPvcRxBe.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrTunnelPvcRxBe.setDescription('NAME = ; DESC = The receive excess burst size (Be) in bits \\ for this PVC tunnel data (sent into this unit). \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrTunnelPvcMaxRxCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 24, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrTunnelPvcMaxRxCIR.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrTunnelPvcMaxRxCIR.setDescription('NAME = ; DESC = The maximum received throughput in \\ bits per second. Used for FECN/BECN \\ management. (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrTunnelPvcMaxTxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 24, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)).clone(1604)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrTunnelPvcMaxTxFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrTunnelPvcMaxTxFrameSize.setDescription('NAME = ; DESC = The maximum transmission frame size in \\ octets for this PVC tunnel data (sent out of \\ this unit). (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrTunnelPvcTxBc = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 24, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrTunnelPvcTxBc.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrTunnelPvcTxBc.setDescription('NAME = ; DESC = The transmission committed burst size (Bc) in bits \\ for this PVC tunnel data (sent out of this unit). \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrTunnelPvcTxBe = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 24, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrTunnelPvcTxBe.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrTunnelPvcTxBe.setDescription('NAME = ; DESC = The transmission excess burst size (Be) in bits \\ for this PVC tunnel data (sent out of this unit). \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrTunnelPvcMaxTxCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 24, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrTunnelPvcMaxTxCIR.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrTunnelPvcMaxTxCIR.setDescription('NAME = ; DESC = The maximum transmit throughput in \\ bits per second. Used for FECN/BECN \\ management. (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrTunnelPvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 24, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("delete", 2), ("active", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrTunnelPvcRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrTunnelPvcRowStatus.setDescription('NAME = ; DESC = This object is used to add new rows or delete \\ existing rows in this FR Tunneling PVC \\ table. (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrTunnelPvcConsecFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 24, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrTunnelPvcConsecFrames.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrTunnelPvcConsecFrames.setDescription('NAME = ; DESC = The number of consecutive frames received\\ with the BECN bit set before reducing \\ the transmit rate. Used for FECN/BECN \\ management. (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrTunnelPvcMinTxCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 24, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrTunnelPvcMinTxCIR.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrTunnelPvcMinTxCIR.setDescription('NAME = ; DESC = The minimum transmit throughput in \\ bits per second. Used for FECN/BECN \\ management. (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrNetlinkMapTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 26), )
if mibBuilder.loadTexts: nvmFrNetlinkMapTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrNetlinkMapTable.setDescription('NAME = ; DESC = Table for mapping Netlinks (Tunnel PVC ifIndex \\ values) to Virtual Ports. (Configuration); HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
nvmFrNetlinkMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 26, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "nvmFrNetlinkMapVPIfIndex"), (0, "MICOM-FRAMERELAY-MIB", "nvmFrNetlinkMapNetlinkIfIndex"))
if mibBuilder.loadTexts: nvmFrNetlinkMapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrNetlinkMapEntry.setDescription('NAME = ; DESC = Entry in the table for mapping Netlinks \\ (Tunnel PVC ifIndex values) to Virtual \\ Ports. (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrNetlinkMapVPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrNetlinkMapVPIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrNetlinkMapVPIfIndex.setDescription('NAME = ; DESC = Virtual port ifIndex associated \\ with this Netlink (Tunnel PVC). \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrNetlinkMapNetlinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 26, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrNetlinkMapNetlinkIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrNetlinkMapNetlinkIfIndex.setDescription('NAME = ; DESC = Netlink (Tunnel PVC) ifIndex associated \\ with the specified Virtual Port. \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrNetlinkMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 26, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("delete", 2), ("active", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrNetlinkMapRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrNetlinkMapRowStatus.setDescription('NAME = ; DESC = This object is used to add new rows or delete \\ existing rows in this Virtual Port to Netlink \\ Mapping table. (Configuration) ; HELP = ; CAPABILITIES = ;')
mcmFrPhyPortCntrTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 2, 1), )
if mibBuilder.loadTexts: mcmFrPhyPortCntrTable.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrPhyPortCntrTable.setDescription('NAME = ; DESC = This table has been OBSOLETED for software \\ releases beginning with Release 3.0. \\ Table to reset Frame Relay physical \\ port counters; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmFrPhyPortCntrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 2, 1, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "mcmFrPhyPortCntrIfIndex"))
if mibBuilder.loadTexts: mcmFrPhyPortCntrEntry.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrPhyPortCntrEntry.setDescription('NAME = ; DESC = Entry in the Frame Relay Physical \\ port counters table; HELP = ; CAPABILITIES = ;')
mcmFrPhyPortCntrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 2, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmFrPhyPortCntrIfIndex.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrPhyPortCntrIfIndex.setDescription('NAME = ; DESC = The ifIndex of the physical port whose \\ counters are to be reset; HELP = ; CAPABILITIES = ;')
mcmFrPhyPortCntrAction = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("other", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmFrPhyPortCntrAction.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrPhyPortCntrAction.setDescription('NAME = ; DESC = Action to be taken on counters (reset); HELP = When set to reset, the physical port \\ counters should be zeroed out for the \\ specified ifIndex; CAPABILITIES = ;')
mcmFrVirtualPortCntrTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 2, 2), )
if mibBuilder.loadTexts: mcmFrVirtualPortCntrTable.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrVirtualPortCntrTable.setDescription('NAME = ; DESC = This table has been OBSOLETED for software \\ releases beginning with Release 3.0. \\ Table to reset the Frame Relay \\ virtual port counters; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmFrVirtualPortCntrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 2, 2, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "mcmFrVirtualPortCntrIfIndex"))
if mibBuilder.loadTexts: mcmFrVirtualPortCntrEntry.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrVirtualPortCntrEntry.setDescription('NAME = ; DESC = Entry in the virtual port counter \\ table; HELP = ; CAPABILITIES = ;')
mcmFrVirtualPortCntrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 2, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmFrVirtualPortCntrIfIndex.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrVirtualPortCntrIfIndex.setDescription('NAME = ; DESC = The ifIndex of the virtual port whose \\ counters are to be reset; HELP = ; CAPABILITIES = ;')
mcmFrVirtualPortCntrAction = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("other", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmFrVirtualPortCntrAction.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrVirtualPortCntrAction.setDescription('NAME = ; DESC = Action to be taken on the counters (reset); HELP = When set to reset, the virtual port \\ counters should be zeroed out for the \\ specified ifIndex; CAPABILITIES = ;')
mcmFrPVCCntrTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 2, 3), )
if mibBuilder.loadTexts: mcmFrPVCCntrTable.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrPVCCntrTable.setDescription('NAME = ; DESC = This table has been OBSOLETED for software \\ releases beginning with Release 3.0. \\ Table used to reset counters \\ associated with the PVC; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmFrPVCCntrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 2, 3, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "mcmFrPVCCntrIfIndex"), (0, "MICOM-FRAMERELAY-MIB", "mcmFrPVCCntrDLCI"))
if mibBuilder.loadTexts: mcmFrPVCCntrEntry.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrPVCCntrEntry.setDescription('NAME = ; DESC = Entry in the PVC counter reset \\ table; HELP = ; CAPABILITIES = ;')
mcmFrPVCCntrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 2, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmFrPVCCntrIfIndex.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrPVCCntrIfIndex.setDescription('NAME = ; DESC = Ifindex associated with the pvc.; HELP = The ifIndex of the physical port \\ associated with the PVC whose \\ counters are to be reset; CAPABILITIES = ;')
mcmFrPVCCntrDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(17, 126975))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmFrPVCCntrDLCI.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrPVCCntrDLCI.setDescription('NAME = ; DESC = The DLCI number of the PVC whose \\ counters are to be reset; HELP = ; CAPABILITIES = ;')
mcmFrPVCCntrAction = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("other", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmFrPVCCntrAction.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrPVCCntrAction.setDescription('NAME = ; DESC = Action to be taken on the PVC \\ counter (reset); HELP = When set to reset, the PVC Counters \\ get reset; CAPABILITIES = ;')
mcmFrSVCCntrTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 2, 4), )
if mibBuilder.loadTexts: mcmFrSVCCntrTable.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrSVCCntrTable.setDescription('NAME = ; DESC = This table has been OBSOLETED for software \\ releases beginning with Release 3.0. \\ Table used to reset counters \\ associated with the SVC; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmFrSVCCntrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 2, 4, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "mcmFrSVCCntrIfIndex"), (0, "MICOM-FRAMERELAY-MIB", "mcmFrSVCCntrDNA"))
if mibBuilder.loadTexts: mcmFrSVCCntrEntry.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrSVCCntrEntry.setDescription('NAME = ; DESC = Entry int the SVC Counter table; HELP = ; CAPABILITIES = ;')
mcmFrSVCCntrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 2, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmFrSVCCntrIfIndex.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrSVCCntrIfIndex.setDescription('NAME = ; DESC = Ifindex associated with the SVC \\ for which the counters are to be\\ reset; HELP = ; CAPABILITIES = ;')
mcmFrSVCCntrDNA = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 2, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmFrSVCCntrDNA.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrSVCCntrDNA.setDescription('NAME = ; DESC = The DNA associated with the SVC \\ whose counters are to be reset; HELP = ; CAPABILITIES = ;')
mcmFrSVCCntrAction = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("other", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmFrSVCCntrAction.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrSVCCntrAction.setDescription('NAME = ; DESC = Action to take on the SVC \\ counters (reset); HELP = When set to reset, the SVC \\ counters should be reset; CAPABILITIES = ;')
mcmFrWanLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 7) + (0,1)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-SYS-MIB", "mcmSysIfExtModule"), ("MICOM-SYS-MIB", "mcmSysIfExtPPA"))
if mibBuilder.loadTexts: mcmFrWanLinkUp.setDescription('NAME = ; DESC = FR TRAP message: indication of WAN link \\ up.\\ Severity Level: INFORMATIVE.; HELP = The Frame Relay WAN LINK is up. \\ Normal status Indicator.;')
mcmFrWanLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 7) + (0,2)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-SYS-MIB", "mcmSysIfExtModule"), ("MICOM-SYS-MIB", "mcmSysIfExtPPA"))
if mibBuilder.loadTexts: mcmFrWanLinkDown.setDescription('NAME = ; DESC = FR TRAP message: indication of WAN link \\ down.\\ Severity Level: CRITICAL.; HELP = Loss of Physical connection, or LMI is dropped.\\ Please check the physical connection; the MPANL \\ LMI status, and provisioning on Passport. If \\ no change, contact Sys Admin., or Field \\ Personnel.;')
mibBuilder.exportSymbols("MICOM-FRAMERELAY-MIB", mcmFrDlcmiSVCStatusPortNumber=mcmFrDlcmiSVCStatusPortNumber, mcmFrTunnelPvcPhysicalPort=mcmFrTunnelPvcPhysicalPort, mcmFrActiveTunnelingPVCs=mcmFrActiveTunnelingPVCs, mcmFrTunnelPvcType=mcmFrTunnelPvcType, nvmFrDlcmiMonitoredEvents=nvmFrDlcmiMonitoredEvents, mcmFrPhyPortTxDataFrames=mcmFrPhyPortTxDataFrames, nvmFrPhyPortExtIfIndex=nvmFrPhyPortExtIfIndex, nvmFrSVCMapSetupPriority=nvmFrSVCMapSetupPriority, mcmFrPhyPortRxActivations=mcmFrPhyPortRxActivations, mcmFrAllSVCCircuitHoldingPriority=mcmFrAllSVCCircuitHoldingPriority, mcmFrAllSVCCircuitPriority=mcmFrAllSVCCircuitPriority, mcmFrLANSpvcEntry=mcmFrLANSpvcEntry, nvmFrLANSpvcSVCEntry=nvmFrLANSpvcSVCEntry, mcmFrSVCMapExcessRxBurstSize=mcmFrSVCMapExcessRxBurstSize, mcmFrPhyPortHeaderErrors=mcmFrPhyPortHeaderErrors, mcmFrAllSVCCircuitNegTxExcess=mcmFrAllSVCCircuitNegTxExcess, nvmFrTunnelPvcRowStatus=nvmFrTunnelPvcRowStatus, nvmFrTunnelPvcPhysicalCard=nvmFrTunnelPvcPhysicalCard, mcmFrSVCCircuitTable=mcmFrSVCCircuitTable, mcmFrPVCPhyTable=mcmFrPVCPhyTable, nvmFrSVCMapExcessRxBurstSize=nvmFrSVCMapExcessRxBurstSize, mcmFrSVCMaxTxSize=mcmFrSVCMaxTxSize, nvmFrLANSpvcSVCMaxTxSize=nvmFrLANSpvcSVCMaxTxSize, mcmFrPhyPortDataFrames=mcmFrPhyPortDataFrames, mcmFrPhyPortXIDExpirations=mcmFrPhyPortXIDExpirations, mcmFrMaxDLCI=mcmFrMaxDLCI, nvmFrVirtualPortProtocolBinding=nvmFrVirtualPortProtocolBinding, mcmFrAllSVCCircuitDlci=mcmFrAllSVCCircuitDlci, nvmFrPVCMapEntryStatus=nvmFrPVCMapEntryStatus, mcmFrSVCCircuitState=mcmFrSVCCircuitState, mcmFrVirtualPortCntrIfIndex=mcmFrVirtualPortCntrIfIndex, nvmFrLANSpvcSVCTransferPriority=nvmFrLANSpvcSVCTransferPriority, mcmFrLANSpvcSVCMaxTxSize=mcmFrLANSpvcSVCMaxTxSize, nvmFrLANSpvcSVCDNA=nvmFrLANSpvcSVCDNA, mcmFrSVCCircuitReceivedOctets=mcmFrSVCCircuitReceivedOctets, mcmFrSVCMaxCalls=mcmFrSVCMaxCalls, mcmFrPhyPortRxBc=mcmFrPhyPortRxBc, mcmFrDlcmiSVCStatusPeerSvcDlci=mcmFrDlcmiSVCStatusPeerSvcDlci, Index=Index, mcmFrPhyPortConsectiveFrames=mcmFrPhyPortConsectiveFrames, mcmFrAllSVCCircuitCallOriginator=mcmFrAllSVCCircuitCallOriginator, mcmFrVirtualPortPPA=mcmFrVirtualPortPPA, mcmFrVirtualPortMode=mcmFrVirtualPortMode, mcmFrPhyPortShortFrames=mcmFrPhyPortShortFrames, mcmFrSVCCircuitDlci=mcmFrSVCCircuitDlci, mcmFrOctetsSent=mcmFrOctetsSent, mcmFrAllSVCCircuitIfIndex=mcmFrAllSVCCircuitIfIndex, mcmFrOctetsReceived=mcmFrOctetsReceived, nvmFrLANSpvcConnectId=nvmFrLANSpvcConnectId, mcmFrAllSVCCircuitEntry=mcmFrAllSVCCircuitEntry, mcmFrTunnelPvcRxDiscards=mcmFrTunnelPvcRxDiscards, mcmFrGlobalGroup=mcmFrGlobalGroup, mcmFrMsmTrapEnable=mcmFrMsmTrapEnable, mcmFrSVCT308=mcmFrSVCT308, nvmFrPhyPortRxBc=nvmFrPhyPortRxBc, mcmFrTunnelPvcRxBc=mcmFrTunnelPvcRxBc, mcmFrLANSpvcSVCMaxRxThroughput=mcmFrLANSpvcSVCMaxRxThroughput, mcmFrPhyPortRxErrors=mcmFrPhyPortRxErrors, nvmFrTunnelPvcIfIndex=nvmFrTunnelPvcIfIndex, nvmFrSVCMapTable=nvmFrSVCMapTable, mcmFrDlcmiSVCStatusPeerPortNumber=mcmFrDlcmiSVCStatusPeerPortNumber, nvmFrMaxVirtualPorts=nvmFrMaxVirtualPorts, mcmFrSVCPhyEntry=mcmFrSVCPhyEntry, mcmFrSVCMaxDLCI=mcmFrSVCMaxDLCI, mcmFrSVCMapTransferPriority=mcmFrSVCMapTransferPriority, mcmFrLANSpvcConnType=mcmFrLANSpvcConnType, nvmFrLANSpvcSVCDiscardPriority=nvmFrLANSpvcSVCDiscardPriority, mcmFrTunnelPvcTxBe=mcmFrTunnelPvcTxBe, nvmFrLANSpvcSVCHoldingPriority=nvmFrLANSpvcSVCHoldingPriority, nvmFrTunnelPvcMaxRxCIR=nvmFrTunnelPvcMaxRxCIR, mcmFrTunnelPvcRxOctets=mcmFrTunnelPvcRxOctets, mcmFrPVCMapEntry=mcmFrPVCMapEntry, nvmFrSVCExcessRxBurstSize=nvmFrSVCExcessRxBurstSize, nvmFrSVCMapEntry=nvmFrSVCMapEntry, mcmFrVirtualPortCntrAction=mcmFrVirtualPortCntrAction, mcmFrPVCMapEntryStatus=mcmFrPVCMapEntryStatus, mcmFrSVCMapRxBurstSize=mcmFrSVCMapRxBurstSize, mcmFrSVCT303=mcmFrSVCT303, nvmFrSVCMapVirtualPortIfIndex=nvmFrSVCMapVirtualPortIfIndex, mcmFrAllSVCCircuitNegTxBurst=mcmFrAllSVCCircuitNegTxBurst, mcmFrSVCTxBurstSize=mcmFrSVCTxBurstSize, nvmFrTunnelPvcMinTxCIR=nvmFrTunnelPvcMinTxCIR, micom_frame_relay=micom_frame_relay, nvmFrTunnelPvcEntry=nvmFrTunnelPvcEntry, mcmFrTunnelPvcMaxRxFrameSize=mcmFrTunnelPvcMaxRxFrameSize, nvmFrSVCPhyEntry=nvmFrSVCPhyEntry, mcmFrLANSpvcSVCDNA=mcmFrLANSpvcSVCDNA, nvmFrSVCMapTransferPriority=nvmFrSVCMapTransferPriority, mcmFrLANSpvcSVCMaxTxBurstSize=mcmFrLANSpvcSVCMaxTxBurstSize, nvmFrTunnelPvcPhysicalPort=nvmFrTunnelPvcPhysicalPort, mcmFrSVCCircuitNegTxThroughput=mcmFrSVCCircuitNegTxThroughput, nvmFrTunnelPvcRxBe=nvmFrTunnelPvcRxBe, mcmFrLANSpvcVirtualPortIfIndex=mcmFrLANSpvcVirtualPortIfIndex, mcmFrSVCRxBurstSize=mcmFrSVCRxBurstSize, nvmFrLANSpvcSVCMaxTxBurstSize=nvmFrLANSpvcSVCMaxTxBurstSize, mcmFrSVCPhyTable=mcmFrSVCPhyTable, mcmFrSVCMapTxBurstSize=mcmFrSVCMapTxBurstSize, mcmFrFramesReceived=mcmFrFramesReceived, mcmFrSVCT305=mcmFrSVCT305, nvmFrPanlLmiTrapEnable=nvmFrPanlLmiTrapEnable, mcmFrAllSVCCircuitReceivedFECNs=mcmFrAllSVCCircuitReceivedFECNs, mcmFrSVCExcessTxBurstSize=mcmFrSVCExcessTxBurstSize, nvmFrPVCPhyIfIndex=nvmFrPVCPhyIfIndex, mcmFrTunnelPvcPhysicalCard=mcmFrTunnelPvcPhysicalCard, nvmFrSVCMapPriority=nvmFrSVCMapPriority, nvmFrPVCPhyEntry=nvmFrPVCPhyEntry, mcmFrSVCMinDLCI=mcmFrSVCMinDLCI, mcmFrMaxDlciPerLine=mcmFrMaxDlciPerLine, mcmFrLANSpvcRemoteDNA=mcmFrLANSpvcRemoteDNA, mcmFrDlcmiSVCStatusPeerTunPvcDlci=mcmFrDlcmiSVCStatusPeerTunPvcDlci, mcmFrSVCMinRxThroughput=mcmFrSVCMinRxThroughput, nvmFrDlcmiMaxSupportedVCs=nvmFrDlcmiMaxSupportedVCs, mcmFrLANSpvcSVCDiscardPriority=mcmFrLANSpvcSVCDiscardPriority, mcmFrSVCCircuitNegTxBurst=mcmFrSVCCircuitNegTxBurst, mcmFrDlcmiSVCStatusPeerCardNumber=mcmFrDlcmiSVCStatusPeerCardNumber, mcmFrTunnelPvcConsecFrames=mcmFrTunnelPvcConsecFrames, mcmFrSVCCircuitCommittedBurst=mcmFrSVCCircuitCommittedBurst, mcmFrPhyPortTxExpirations=mcmFrPhyPortTxExpirations, mcmFrSVCCntrDNA=mcmFrSVCCntrDNA, nvmFrLANSpvcVirtualPortIfIndex=nvmFrLANSpvcVirtualPortIfIndex, mcmFrAllSVCCircuitReceivedBECNs=mcmFrAllSVCCircuitReceivedBECNs, mcmFrLANSpvcSVCMaxRxSize=mcmFrLANSpvcSVCMaxRxSize, nvmFrVirtualPortMode=nvmFrVirtualPortMode, nvmFrSVCMapMinTxThroughput=nvmFrSVCMapMinTxThroughput, mcmFrGlobalGroupCntrAction=mcmFrGlobalGroupCntrAction, nvmFrCoreTrapEnable=nvmFrCoreTrapEnable, mcmFrDNANumberingPlan=mcmFrDNANumberingPlan, mcmFrPhyPortCntrAction=mcmFrPhyPortCntrAction, nvmFrSVCMaxRxSize=nvmFrSVCMaxRxSize, mcmFrPhyPortLMISent=mcmFrPhyPortLMISent, mcmFrSVCMapDNA=mcmFrSVCMapDNA, mcmFrSVCMapEntryStatus=mcmFrSVCMapEntryStatus, mcmFrLANSpvcIfIndex=mcmFrLANSpvcIfIndex, nvmFrVirtualPortPhyPortIfIndex=nvmFrVirtualPortPhyPortIfIndex, nvmFrSVCMapEntryStatus=nvmFrSVCMapEntryStatus, mcmFrVirtualPortNumber=mcmFrVirtualPortNumber, nvmFrDlcmiAddressLen=nvmFrDlcmiAddressLen, nvmFrSVCPhyTable=nvmFrSVCPhyTable, mcmFrLANSpvcSVCMaxRxBurstSize=mcmFrLANSpvcSVCMaxRxBurstSize, mcmFrSVCMapDiscardPriority=mcmFrSVCMapDiscardPriority, nvmFrGlobalGroup=nvmFrGlobalGroup, mcmFrVirtualPortCntrEntry=mcmFrVirtualPortCntrEntry, nvmFrPhyPortEntry=nvmFrPhyPortEntry, mcmFrSVCMaxTxThroughput=mcmFrSVCMaxTxThroughput, mcmFrSVCCircuitNegRxExcess=mcmFrSVCCircuitNegRxExcess, nvmFrPhyPortRxMaxFrameSize=nvmFrPhyPortRxMaxFrameSize, nvmFrLANSpvcSVCExcessTxBurstSize=nvmFrLANSpvcSVCExcessTxBurstSize, mcmFrPhyPortLongFrames=mcmFrPhyPortLongFrames, nvmFrSVCMapMinRxThroughput=nvmFrSVCMapMinRxThroughput, nvmFrSVCState=nvmFrSVCState, mcmFrNetlinkMapNetlinkIfIndex=mcmFrNetlinkMapNetlinkIfIndex, mcmFrSVCCircuitCallOriginator=mcmFrSVCCircuitCallOriginator, mcmFrPVCCntrDLCI=mcmFrPVCCntrDLCI, mcmFrAllSVCCircuitReceivedOctets=mcmFrAllSVCCircuitReceivedOctets, mcmFrSVCMapMinTxThroughput=mcmFrSVCMapMinTxThroughput, nvmFrLANSpvcEntry=nvmFrLANSpvcEntry, mcmFrSVCCircuitNegMaxRxSize=mcmFrSVCCircuitNegMaxRxSize, nvmFrVirtualPortEntry=nvmFrVirtualPortEntry, mcmFrLANSpvcSVCExcessRxBurstSize=mcmFrLANSpvcSVCExcessRxBurstSize, mcmFrPhyPortPVCLMIStatus=mcmFrPhyPortPVCLMIStatus, mcmFrAllSVCCircuitNegRxBurst=mcmFrAllSVCCircuitNegRxBurst, nvmFrPhyPortTxBe=nvmFrPhyPortTxBe, nvmFrTunnelPvcMaxTxFrameSize=nvmFrTunnelPvcMaxTxFrameSize, mcmFrWanLinkUp=mcmFrWanLinkUp, mcmFrPhyPortCntrEntry=mcmFrPhyPortCntrEntry, mcmFrSVCMaxRxThroughput=mcmFrSVCMaxRxThroughput, mcmFrPhyPortTable=mcmFrPhyPortTable, mcmFrPVCMapTable=mcmFrPVCMapTable, mcmFrSVCMapMaxTxSize=mcmFrSVCMapMaxTxSize, nvmFrVirtualPortEntryStatus=nvmFrVirtualPortEntryStatus, nvmFrSVCMinRxThroughput=nvmFrSVCMinRxThroughput, nvmFrPhyPortTxBc=nvmFrPhyPortTxBc, nvmFrPVCMapEntry=nvmFrPVCMapEntry, mcmFrPhyPortRxOkAcks=mcmFrPhyPortRxOkAcks, mcmFrSVCCircuitIfIndex=mcmFrSVCCircuitIfIndex, mcmFrSVCCntrIfIndex=mcmFrSVCCntrIfIndex, mcmFrConnectTime=mcmFrConnectTime, mcmFrSVCMapVirtualPortIfIndex=mcmFrSVCMapVirtualPortIfIndex, mcmFrAllSVCCircuitCommittedBurst=mcmFrAllSVCCircuitCommittedBurst, mcmFrSVCMapTable=mcmFrSVCMapTable, nvmFrSVCMapDNA=nvmFrSVCMapDNA, mcmFrPhyPortTxBc=mcmFrPhyPortTxBc, nvmFrPVCLMIMode=nvmFrPVCLMIMode, mcmFrAllSVCCircuitSvcIfIndex=mcmFrAllSVCCircuitSvcIfIndex, nvmFrMaxDLCI=nvmFrMaxDLCI, mcmFrSVCCircuitSetupPriority=mcmFrSVCCircuitSetupPriority, mcmFrLANSpvcLastChange=mcmFrLANSpvcLastChange, nvmFrSVCMinDLCI=nvmFrSVCMinDLCI, mcmFrPVCPhyEntry=mcmFrPVCPhyEntry, nvmFrLANSpvcSVCSetupPriority=nvmFrLANSpvcSVCSetupPriority, mcmFrPhyPortConnectTime=mcmFrPhyPortConnectTime, mcmFrSvcMapSvcIfIndex=mcmFrSvcMapSvcIfIndex, mcmFrSVCCntrAction=mcmFrSVCCntrAction, mcmFrSVCCircuitPriority=mcmFrSVCCircuitPriority, mcmFrSVCCircuitSentFrames=mcmFrSVCCircuitSentFrames, nvmFrPhyPortTable=nvmFrPhyPortTable, mcmFrTunnelPvcRxBe=mcmFrTunnelPvcRxBe, mcmFrSVCCircuitDiscardPriority=mcmFrSVCCircuitDiscardPriority, nvmFrDlcmiErrorThreshold=nvmFrDlcmiErrorThreshold, mcmFrAllSVCCircuitSentFrames=mcmFrAllSVCCircuitSentFrames, nvmFrNetlinkMapRowStatus=nvmFrNetlinkMapRowStatus, nvmFrSVCT303=nvmFrSVCT303, nvmFrLANSpvcSVCTable=nvmFrLANSpvcSVCTable, mcmFrSVCCircuitEntry=mcmFrSVCCircuitEntry, nvmFrPlmTrapEnable=nvmFrPlmTrapEnable, nvmFrLANSpvcSVCExcessRxBurstSize=nvmFrLANSpvcSVCExcessRxBurstSize, mcmFrDlcmiSVCStatusTunnelPvcDlci=mcmFrDlcmiSVCStatusTunnelPvcDlci, nvmFrSVCMapDiscardPriority=nvmFrSVCMapDiscardPriority, mcmFrPhyPortCLLMSent=mcmFrPhyPortCLLMSent, nvmFrPVCMapPhysIfIndex=nvmFrPVCMapPhysIfIndex, mcmFrAllSVCCircuitTable=mcmFrAllSVCCircuitTable, mcmFrSVCCircuitHoldingPriority=mcmFrSVCCircuitHoldingPriority, mcmFrSVCExcessRxBurstSize=mcmFrSVCExcessRxBurstSize, mcmFrTunnelPvcEntry=mcmFrTunnelPvcEntry, mcmFrPhyPortCntrTable=mcmFrPhyPortCntrTable, mcmFrSVCCircuitSentOctets=mcmFrSVCCircuitSentOctets, nvmFrSVCMapMaxTxSize=nvmFrSVCMapMaxTxSize, mcmFrSVCCircuitNegTxExcess=mcmFrSVCCircuitNegTxExcess, mcmFrVirtualPortTable=mcmFrVirtualPortTable, mcmFrVirtualPortIfIndex=mcmFrVirtualPortIfIndex, mcmFrAllSVCCircuitNegRxThroughput=mcmFrAllSVCCircuitNegRxThroughput, mcmFrDlcmiSVCStatusDlci=mcmFrDlcmiSVCStatusDlci, mcmFrLANSpvcSVCMaxTxThroughput=mcmFrLANSpvcSVCMaxTxThroughput, mcmFrLANSpvcSVCSetupPriority=mcmFrLANSpvcSVCSetupPriority, mcmFrSVCCircuitReceivedFECNs=mcmFrSVCCircuitReceivedFECNs, mcmFrPhyPortTxMaxFrameSize=mcmFrPhyPortTxMaxFrameSize, nvmFrLANSpvcSVCMinTxThroughput=nvmFrLANSpvcSVCMinTxThroughput, nvmFrDlcmiIfIndex=nvmFrDlcmiIfIndex, nvmFrDlcmiMulticast=nvmFrDlcmiMulticast, mcmFrPVCPhyIfIndex=mcmFrPVCPhyIfIndex, nvmFrTunnelPvcMaxTxCIR=nvmFrTunnelPvcMaxTxCIR, mcmFrLANSpvcSVCTransferPriority=mcmFrLANSpvcSVCTransferPriority, mcmFrPVCMapPhysIfIndex=mcmFrPVCMapPhysIfIndex, nvmFrPhyPortRxThroughput=nvmFrPhyPortRxThroughput, nvmFrSVCMapTxBurstSize=nvmFrSVCMapTxBurstSize, mcmFrSVCMapMaxRxSize=mcmFrSVCMapMaxRxSize, mcmFrTunnelPvcMaxRxCIR=mcmFrTunnelPvcMaxRxCIR, mcmFrNetlinkMapEntry=mcmFrNetlinkMapEntry, mcmFrLANSpvcSVCMinTxThroughput=mcmFrLANSpvcSVCMinTxThroughput, nvmFrSVCT305=nvmFrSVCT305, mcmFrVirtualPortEntry=mcmFrVirtualPortEntry, mcmFrSVCCircuitReceivedFrames=mcmFrSVCCircuitReceivedFrames, nvmFrDNANumberingPlan=nvmFrDNANumberingPlan, mcmFrAllSVCCircuitState=mcmFrAllSVCCircuitState, mcmFrTunnelPvcTxBc=mcmFrTunnelPvcTxBc, mcmFrLANSpvcDLCI=mcmFrLANSpvcDLCI, mcmFrSVCPhyIfIndex=mcmFrSVCPhyIfIndex, mcmFrLANSpvcTable=mcmFrLANSpvcTable, nvmFrLANSpvcRemoteDLCI=nvmFrLANSpvcRemoteDLCI, nvmFrLANSpvcSVCMaxRxBurstSize=nvmFrLANSpvcSVCMaxRxBurstSize, mcmFrPVCMapVirtualPortIfIndex=mcmFrPVCMapVirtualPortIfIndex, mcmFrPhyPortRxOctets=mcmFrPhyPortRxOctets, mcmFrPhyPortFlowControl=mcmFrPhyPortFlowControl, mcmFrSVCCircuitThroughput=mcmFrSVCCircuitThroughput)
mibBuilder.exportSymbols("MICOM-FRAMERELAY-MIB", mcmFrSVCCntrEntry=mcmFrSVCCntrEntry, nvmFrSVCMaxDLCI=nvmFrSVCMaxDLCI, nvmFrLANSpvcSVCMaxRxSize=nvmFrLANSpvcSVCMaxRxSize, nvmFrLANSpvcConnType=nvmFrLANSpvcConnType, mcmFrPVCMapDLCI=mcmFrPVCMapDLCI, nvmFrTunnelPvcPhysPortIfIndex=nvmFrTunnelPvcPhysPortIfIndex, mcmFrAllSVCCircuitNegMaxTxSize=mcmFrAllSVCCircuitNegMaxTxSize, mcmFrTunnelPvcTable=mcmFrTunnelPvcTable, mcmFrSVCMapExcessTxBurstSize=mcmFrSVCMapExcessTxBurstSize, mcmFrPanlLmiTrapEnable=mcmFrPanlLmiTrapEnable, mcmFrLANSpvcDisconnectReason=mcmFrLANSpvcDisconnectReason, mcmFrSVCCircuitSvcIfIndex=mcmFrSVCCircuitSvcIfIndex, mcmFrAllSVCCircuitDNA=mcmFrAllSVCCircuitDNA, nvmFrPVCBiDir=nvmFrPVCBiDir, nvmFrVirtualPortIfIndex=nvmFrVirtualPortIfIndex, mcmFrFramesSent=mcmFrFramesSent, nvmFrSVCMapExcessTxBurstSize=nvmFrSVCMapExcessTxBurstSize, nvmFrSVCMaxTxThroughput=nvmFrSVCMaxTxThroughput, mcmFrAllSVCCircuitNegMaxRxSize=mcmFrAllSVCCircuitNegMaxRxSize, mcmFrLANSpvcVPState=mcmFrLANSpvcVPState, mcmFrTunnelPvcRxExcessFrames=mcmFrTunnelPvcRxExcessFrames, mcmFrSVCCntrTable=mcmFrSVCCntrTable, nvmFrPhyPortMtuSize=nvmFrPhyPortMtuSize, mcmFrLANSpvcSVCTable=mcmFrLANSpvcSVCTable, nvmFrSVCMinTxThroughput=nvmFrSVCMinTxThroughput, mcmFrPhyPortRxUnknowns=mcmFrPhyPortRxUnknowns, nvmFrLANSpvcTable=nvmFrLANSpvcTable, nvmFrDlcmiPollingInterval=nvmFrDlcmiPollingInterval, mcmFrCoreTrapEnable=mcmFrCoreTrapEnable, mcmFrAllSVCCircuitThroughput=mcmFrAllSVCCircuitThroughput, nvmFrSVCMaxTxSize=nvmFrSVCMaxTxSize, mcmFrPhyPortRxDataFrames=mcmFrPhyPortRxDataFrames, mcmFrAllSVCCircuitTxDiscardCIRPolice=mcmFrAllSVCCircuitTxDiscardCIRPolice, nvmFrPhyPortTxThroughput=nvmFrPhyPortTxThroughput, mcmFrTunnelPvcTxExcessFrames=mcmFrTunnelPvcTxExcessFrames, mcmFrSVCMapMaxTxThroughput=mcmFrSVCMapMaxTxThroughput, mcmFrAllSVCCircuitExcessBurst=mcmFrAllSVCCircuitExcessBurst, mcmFrAllSVCCircuitSentOctets=mcmFrAllSVCCircuitSentOctets, mcmFrVirtualPortCntrTable=mcmFrVirtualPortCntrTable, nvmFrSVCMapMaxRxSize=nvmFrSVCMapMaxRxSize, nvmFrPVCMapDLCI=nvmFrPVCMapDLCI, nvmFrLANSpvcSVCMaxTxThroughput=nvmFrLANSpvcSVCMaxTxThroughput, mcmFrSVCMapEntry=mcmFrSVCMapEntry, nvmFrDlcmiEntry=nvmFrDlcmiEntry, mcmFrLANSpvcSVCConnectId=mcmFrLANSpvcSVCConnectId, mcmFrSVCMapDisableCause=mcmFrSVCMapDisableCause, mcmFrAllSVCCircuitLastTimeChange=mcmFrAllSVCCircuitLastTimeChange, mcmFrPVCLMIMode=mcmFrPVCLMIMode, nvmFrLANSpvcSVCConnectId=nvmFrLANSpvcSVCConnectId, mcmFrPhyPortInvalidDLCI=mcmFrPhyPortInvalidDLCI, mcmFrSVCMapDLCI=mcmFrSVCMapDLCI, mcmFrSVCMinTxThroughput=mcmFrSVCMinTxThroughput, mcmFrPhyPortRxBe=mcmFrPhyPortRxBe, mcmFrPhyPortTxBe=mcmFrPhyPortTxBe, mcmFrAllSVCCircuitDiscardPriority=mcmFrAllSVCCircuitDiscardPriority, mcmFrLANSpvcSVCState=mcmFrLANSpvcSVCState, mcmFrAllSVCCircuitCreationTime=mcmFrAllSVCCircuitCreationTime, mcmFrLANSpvcSVCDLCI=mcmFrLANSpvcSVCDLCI, nvmFrPhyPortConsectiveFrames=nvmFrPhyPortConsectiveFrames, nvmFrTunnelPvcConsecFrames=nvmFrTunnelPvcConsecFrames, mcmFrSVCT310=mcmFrSVCT310, mcmFrPVCCntrEntry=mcmFrPVCCntrEntry, mcmFrPhyPortMtuSize=mcmFrPhyPortMtuSize, mcmFrPhyPortLMIReceived=mcmFrPhyPortLMIReceived, mcmFrLANSpvcSVCEntry=mcmFrLANSpvcSVCEntry, nvmFrMsmTrapEnable=nvmFrMsmTrapEnable, mcmFrSVCMapPriority=mcmFrSVCMapPriority, nvmFrSVCT310=nvmFrSVCT310, mcmFrLANSpvcSVCMinRxThroughput=mcmFrLANSpvcSVCMinRxThroughput, mcmFrPhyPortCLLMReceived=mcmFrPhyPortCLLMReceived, mcmFrPhyPortRxThroughput=mcmFrPhyPortRxThroughput, nvmFrTunnelPvcTable=nvmFrTunnelPvcTable, mcmFrSVCState=mcmFrSVCState, nvmFrPVCMapTable=nvmFrPVCMapTable, mcmFrPVCMapState=mcmFrPVCMapState, nvmFrVirtualPortNumber=nvmFrVirtualPortNumber, mcmFrSVCCircuitTxDiscardCIRPolice=mcmFrSVCCircuitTxDiscardCIRPolice, nvmFrPhyPortThroughput=nvmFrPhyPortThroughput, mcmFrPhyPortTxOctets=mcmFrPhyPortTxOctets, mcmFrPhyPortEntry=mcmFrPhyPortEntry, mcmFrAllSVCCircuitNegRxExcess=mcmFrAllSVCCircuitNegRxExcess, nvmFrLANSpvcSVCMaxRxThroughput=nvmFrLANSpvcSVCMaxRxThroughput, mcmFrPhyPortDelta=mcmFrPhyPortDelta, nvmFrPhyPortTxMaxFrameSize=nvmFrPhyPortTxMaxFrameSize, mcmFrLANSpvcSVCReasonForDisconnect=mcmFrLANSpvcSVCReasonForDisconnect, nvmFrVirtualPortPPA=nvmFrVirtualPortPPA, mcmFrDlcmiSVCStatusTable=mcmFrDlcmiSVCStatusTable, nvmFrSVCTxBurstSize=nvmFrSVCTxBurstSize, mcmFrPhyPortSVCLMIStatus=mcmFrPhyPortSVCLMIStatus, mcmFrSVCMapMinRxThroughput=mcmFrSVCMapMinRxThroughput, nvmFrSVCMapMaxTxThroughput=nvmFrSVCMapMaxTxThroughput, mcmFrPhyPortXIDReceived=mcmFrPhyPortXIDReceived, nvmFrSVCMapHoldingPriority=nvmFrSVCMapHoldingPriority, nvmFrNetlinkMapNetlinkIfIndex=nvmFrNetlinkMapNetlinkIfIndex, nvmFrSVCExcessTxBurstSize=nvmFrSVCExcessTxBurstSize, mcmFrDlcmiSVCStatusIfIndex=mcmFrDlcmiSVCStatusIfIndex, mcmFrSVCMapSetupPriority=mcmFrSVCMapSetupPriority, mcmFrSVCMapMaxRxThroughput=mcmFrSVCMapMaxRxThroughput, mcmFrLANSpvcSVCExcessTxBurstSize=mcmFrLANSpvcSVCExcessTxBurstSize, mcmFrPhyPortTxThroughput=mcmFrPhyPortTxThroughput, mcmFrTunnelPvcMaxTxFrameSize=mcmFrTunnelPvcMaxTxFrameSize, mcmFrVirtualPortProtocolBinding=mcmFrVirtualPortProtocolBinding, mcmFrSVCCircuitCreationTime=mcmFrSVCCircuitCreationTime, mcmFrLANSpvcSVCIfIndex=mcmFrLANSpvcSVCIfIndex, nvmFrSVCMapRowStatus=nvmFrSVCMapRowStatus, mcmFrPhyPortRateEnf=mcmFrPhyPortRateEnf, mcmFrPhyPortCntrIfIndex=mcmFrPhyPortCntrIfIndex, nvmFrNetlinkMapTable=nvmFrNetlinkMapTable, mcmFrDlcmiSVCStatusEntry=mcmFrDlcmiSVCStatusEntry, mcmFrWanLinkDown=mcmFrWanLinkDown, mcmFrNetlinkMapTable=mcmFrNetlinkMapTable, nvmFrTunnelPvcRxBc=nvmFrTunnelPvcRxBc, mcmFrTunnelPvcRxDeFrames=mcmFrTunnelPvcRxDeFrames, nvmFrDlcmiState=nvmFrDlcmiState, mcmFrPVCBiDir=mcmFrPVCBiDir, nvmFrTunnelPvcMaxRxFrameSize=nvmFrTunnelPvcMaxRxFrameSize, nvmFrSVCT308=nvmFrSVCT308, mcmFrVirtualPortEntryStatus=mcmFrVirtualPortEntryStatus, mcmFrTunnelPvcDlciNumber=mcmFrTunnelPvcDlciNumber, mcmFrSVCCircuitLastTimeChange=mcmFrSVCCircuitLastTimeChange, mcmFrPhyPortRxMaxFrameSize=mcmFrPhyPortRxMaxFrameSize, mcmFrPVCCntrIfIndex=mcmFrPVCCntrIfIndex, mcmFrSVCMaxRxSize=mcmFrSVCMaxRxSize, nvmFrPVCMapVirtualPortIfIndex=nvmFrPVCMapVirtualPortIfIndex, mcmFrPhyPortExtIfIndex=mcmFrPhyPortExtIfIndex, mcmFrVirtualPortPhyPortIfIndex=mcmFrVirtualPortPhyPortIfIndex, nvmFrMaxDlciPerLine=nvmFrMaxDlciPerLine, nvmFrPVCPhyTable=nvmFrPVCPhyTable, mcmFrTunnelPvcIfIndex=mcmFrTunnelPvcIfIndex, mcmFrNetlinkMapOperStatus=mcmFrNetlinkMapOperStatus, mcmFrAllSVCCircuitSetupPriority=mcmFrAllSVCCircuitSetupPriority, nvmFrDlcmiFullEnquiryInterval=nvmFrDlcmiFullEnquiryInterval, fr_configuration=fr_configuration, nvmFrPhyPortRateEnf=nvmFrPhyPortRateEnf, mcmFrPVCCntrAction=mcmFrPVCCntrAction, mcmFrVirtualPortState=mcmFrVirtualPortState, mcmFrActivePanlDlciSVCs=mcmFrActivePanlDlciSVCs, nvmFrNetlinkMapVPIfIndex=nvmFrNetlinkMapVPIfIndex, mcmFrPlmTrapEnable=mcmFrPlmTrapEnable, mcmFrAllSVCCircuitType=mcmFrAllSVCCircuitType, mcmFrSVCCircuitNegMaxTxSize=mcmFrSVCCircuitNegMaxTxSize, mcmFrLANSpvcSVCHoldingPriority=mcmFrLANSpvcSVCHoldingPriority, mcmFrPhyPortIgnoredFrames=mcmFrPhyPortIgnoredFrames, mcmFrTunnelPvcMinTxCIR=mcmFrTunnelPvcMinTxCIR, fr_control=fr_control, nvmFrPhyPortRxBe=nvmFrPhyPortRxBe, nvmFrLANSpvcRemoteDNA=nvmFrLANSpvcRemoteDNA, mcmFrTunnelPvcMaxTxCIR=mcmFrTunnelPvcMaxTxCIR, nvmFrLANSpvcRowStatus=nvmFrLANSpvcRowStatus, nvmFrTunnelPvcType=nvmFrTunnelPvcType, nvmFrTunnelPvcTxBc=nvmFrTunnelPvcTxBc, nvmFrSVCRxBurstSize=nvmFrSVCRxBurstSize, mcmFrPhyPortRxDeactivations=mcmFrPhyPortRxDeactivations, nvmFrTunnelPvcDlciNumber=nvmFrTunnelPvcDlciNumber, mcmFrPhyPortActivePanlDlciSVCs=mcmFrPhyPortActivePanlDlciSVCs, nvmFrLANSpvcSVCMinRxThroughput=nvmFrLANSpvcSVCMinRxThroughput, nvmFrNetlinkMapEntry=nvmFrNetlinkMapEntry, mcmFrSVCCircuitExcessBurst=mcmFrSVCCircuitExcessBurst, mcmFrSVCCircuitDNA=mcmFrSVCCircuitDNA, mcmFrSVCMapHoldingPriority=mcmFrSVCMapHoldingPriority, nvmFrSVCMapRxBurstSize=nvmFrSVCMapRxBurstSize, mcmFrPhyPortThroughput=mcmFrPhyPortThroughput, mcmFrAllSVCCircuitNegTxThroughput=mcmFrAllSVCCircuitNegTxThroughput, mcmFrPVCCntrTable=mcmFrPVCCntrTable, mcmFrPhyPortXIDSent=mcmFrPhyPortXIDSent, mcmFrTunnelPvcTxOctets=mcmFrTunnelPvcTxOctets, nvmFrSVCPhyIfIndex=nvmFrSVCPhyIfIndex, nvmFrPhyPortDelta=nvmFrPhyPortDelta, mcmFrTunnelPvcRxFrames=mcmFrTunnelPvcRxFrames, mcmFrLANSpvcRemoteDLCI=mcmFrLANSpvcRemoteDLCI, mcmFrNetlinkMapVPIfIndex=mcmFrNetlinkMapVPIfIndex, nvmFrDlcmiTable=nvmFrDlcmiTable, nvmFrDlcmiAddress=nvmFrDlcmiAddress, mcmFrTunnelPvcPhysPortIfIndex=mcmFrTunnelPvcPhysPortIfIndex, nvmFrSVCMaxCalls=nvmFrSVCMaxCalls, nvmFrPhyPortFlowControl=nvmFrPhyPortFlowControl, mcmFrPhyPortRxErrAcks=mcmFrPhyPortRxErrAcks, mcmFrTunnelPvcState=mcmFrTunnelPvcState, mcmFrLANSpvcConnectId=mcmFrLANSpvcConnectId, mcmFrSVCCircuitNegRxThroughput=mcmFrSVCCircuitNegRxThroughput, mcmFrDlcmiSVCStatusCardNumber=mcmFrDlcmiSVCStatusCardNumber, mcmFrMaxVirtualPorts=mcmFrMaxVirtualPorts, mcmFrTotalTunnelingPVCs=mcmFrTotalTunnelingPVCs, nvmFrVirtualPortTable=nvmFrVirtualPortTable, nvmFrTunnelPvcTxBe=nvmFrTunnelPvcTxBe, nvmFrSVCMapMaxRxThroughput=nvmFrSVCMapMaxRxThroughput, mcmFrAllSVCCircuitReceivedFrames=mcmFrAllSVCCircuitReceivedFrames, mcmFrSVCCircuitReceivedBECNs=mcmFrSVCCircuitReceivedBECNs, mcmFrSVCCircuitNegRxBurst=mcmFrSVCCircuitNegRxBurst, mcmFrTunnelPvcTxFrames=mcmFrTunnelPvcTxFrames, nvmFrSVCMaxRxThroughput=nvmFrSVCMaxRxThroughput)
