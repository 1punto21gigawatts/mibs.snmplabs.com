#
# PySNMP MIB module HUAWEI-SSH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-SSH-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:48:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Unsigned32, Counter64, iso, NotificationType, MibIdentifier, Counter32, ModuleIdentity, TimeTicks, Bits, Gauge32, IpAddress, ObjectIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter64", "iso", "NotificationType", "MibIdentifier", "Counter32", "ModuleIdentity", "TimeTicks", "Bits", "Gauge32", "IpAddress", "ObjectIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
hwSSH = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118))
hwSSH.setRevisions(('2014-09-26 00:00', '2014-06-30 00:00', '2014-05-06 00:00', '2010-11-09 00:00', '2010-08-25 00:00', '2010-06-17 00:00', '2010-04-18 00:00', '2010-03-03 00:00', '2010-01-29 00:00', '2006-09-05 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwSSH.setRevisionsDescriptions(('V2.15, defect - DTS2014091709267 (default value in the description is updated).', "V2.14, 1. Modify the value range of the node hwSSHServerTimeOut, hwSSHServerPort,hwSftpMaxUserNum, hwSftpOnLineUserNum,hwSSHUserName,hwSSHUserSftpDirectory,hwSSHServerName,hwSSHServerAssignKey. 2. Modify the description of the node hwSSHServerTimeOut,hwSSHServerPort,hwSftpMaxUserNum,hwSSHUserName, hwSSHUserAuthorizationCMD,hwSSHSftpUserNumExceedMax. 3. Add the following enums of the hwSSHUserAuthType:authDSA(6),authDSAandPASSWORD(7),authAny(8),authECC(9), authECCandPASSWORD(10). 4. Add the following enums of the hwSSHUserServiceType:servicetypeSNetConf(5),servicetypeSftpSNetConf(6), servicetypeSTelnetSftp(7),servicetypeSTelnetSNetConf(8). 5. Add the following enums of the hwSSHSessionConnectType:none(0),vty15(16),vty16(17),vty17(18),vty18(19), vty19(20),vty20(21). 6. modified 'MAX-ACCESS read-only' to 'MAX-ACCESS read-write' of hwSftpMaxUserNum. 7. Add hwSSHUserAssignKeyType in hwSSHUserTable. 8. Add hwSSHSessionKeyType, hwSSHSessionConnectionIndex, hwSSHSessionCtosCompress, hwSSHSessionStocCompress in hwSSHServerSessionTable. 9. Add hwSNetConfMaxUserNum, hwSNetConfServerEnable, hwSSHKeepAliveEnable, hwSCPServerEnable, hwSCPMaxUserNum in hwSSHServer. 10. Add hwSSHServerAssignDSAKey and hwSSHServerAssignECCKey in hwSSHServerInfoTable. 11. Add hwSSHKeepAliveInterval and hwSSHKeepAliveMaxCount in hwSSHClient. ", 'V1.08, 1. Add hwRSAPublicKeyFingerprint in hwRSAPublicKeyTable. 2. Add hwRSALocalKeyTable.', 'V1.07, The description of this MIB is modified according to the tool.', 'V1.06, modified the contact-info and the revision history. Modified the description of leaves.', 'V1.05, the description of hwSSHServerTimeOut, hwSSHServerPort, hwSSHServerKeyTimeOut, hwSSHUserTable, hwSSHUserEntry, hwSSHUserAuthType and hwSSHUserServiceType were modified and supplemented.', 'V1.04, DT requirements were implemented and the syntax and semantics of SIMPLETEST were changed.', 'V1.03, DT requirements were implemented and the syntax and semantics of SIMPLETEST were changed.', 'V1.02, hwRSAPublicKeyTable was added.', 'V1.00, completed the draft.',))
if mibBuilder.loadTexts: hwSSH.setLastUpdated('201409260000Z')
if mibBuilder.loadTexts: hwSSH.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwSSH.setContactInfo("Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com ")
if mibBuilder.loadTexts: hwSSH.setDescription('This mib which contains objects manages the SSH server and SSH client configuration. ')
hwSSHServer = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1))
hwStelnetServerEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwStelnetServerEnable.setStatus('current')
if mibBuilder.loadTexts: hwStelnetServerEnable.setDescription(' The object specifies whether the SSH stelnet server is enable. Options: 1. enable(1) -The SSH stelnet server is enable. 2. disable(2)-The SSH stelnet server is disable. ')
hwSftpServerEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSftpServerEnable.setStatus('current')
if mibBuilder.loadTexts: hwSftpServerEnable.setDescription(' The object specifies whether the sftp server is enable. Options: 1.enable(1) -the sftp server is enable 2.disable(2)-the sftp server is disable. ')
hwSSHServerComp1x = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSSHServerComp1x.setStatus('current')
if mibBuilder.loadTexts: hwSSHServerComp1x.setDescription(' The object specifies whether the SSH server is compatible with SSH1.x. The default is 2. Options: 1. enable(1) -indicates that the version compatibility function of the SSH server is enabled so that the SSH server is compatible with the SSHv1.x client. 2. disable(2)-indicates that the version compatibility function of the SSH server is disabled and therefore the SSH server is incompatible with the SSHv1.x client. ')
hwSSHServerTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSSHServerTimeOut.setStatus('current')
if mibBuilder.loadTexts: hwSSHServerTimeOut.setDescription('The object specifies the time when SSH authentication times out. The unit is the second and the default is 60 seconds.')
hwSSHServerRetry = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSSHServerRetry.setStatus('current')
if mibBuilder.loadTexts: hwSSHServerRetry.setDescription(' The object specifies authentication-retry times for SSH user. Default: 3 ')
hwSSHServerPort = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(22, 22), ValueRangeConstraint(1025, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSSHServerPort.setStatus('current')
if mibBuilder.loadTexts: hwSSHServerPort.setDescription('The object specifies port number for SSH server supporting. The default value is 22.')
hwSSHServerKeyTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setUnits('hour').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSSHServerKeyTimeOut.setStatus('current')
if mibBuilder.loadTexts: hwSSHServerKeyTimeOut.setDescription(" The interval of updating the SSH server key pair. By default, value is 0 hour, which means server key can't be updated forever. Range: 0-24 Unit: hour ")
hwSSHServerAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSSHServerAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: hwSSHServerAlarmEnable.setDescription(' The object specifies whether send trap information to NMS. Options: 1.enable(1) -Only when its value enable, allowed to send trap informations to NMS. 2.disable(2)-Can not to send trap informations to NMS. ')
hwSftpMaxUserNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSftpMaxUserNum.setStatus('current')
if mibBuilder.loadTexts: hwSftpMaxUserNum.setDescription('The object specifies the max number of sftp user that sftp server supporting. The default is 5.')
hwSftpOnLineUserNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSftpOnLineUserNum.setStatus('current')
if mibBuilder.loadTexts: hwSftpOnLineUserNum.setDescription(' The object specifies the number of sftp user that has been connected to sftp server currently. ')
hwSSHUserTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 11), )
if mibBuilder.loadTexts: hwSSHUserTable.setStatus('current')
if mibBuilder.loadTexts: hwSSHUserTable.setDescription(' This table is used for querying and setting the information about SSH user. The index of this table is hwSSHUserIndex. ')
hwSSHUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 11, 1), ).setIndexNames((0, "HUAWEI-SSH-MIB", "hwSSHUserIndex"))
if mibBuilder.loadTexts: hwSSHUserEntry.setStatus('current')
if mibBuilder.loadTexts: hwSSHUserEntry.setDescription(' This table is used for querying and setting the information about SSH user. The index of this entry is hwSSHUserIndex. ')
hwSSHUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200)))
if mibBuilder.loadTexts: hwSSHUserIndex.setStatus('current')
if mibBuilder.loadTexts: hwSSHUserIndex.setDescription(' The object specifies the index of hwSSHUserTable. ')
hwSSHUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 11, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSSHUserName.setStatus('current')
if mibBuilder.loadTexts: hwSSHUserName.setDescription('The object specifies the name of a SSH user. The maximum length of the node is 85.')
hwSSHUserAssignKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 11, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSSHUserAssignKey.setStatus('current')
if mibBuilder.loadTexts: hwSSHUserAssignKey.setDescription(' The object specifies is a peer public key for a SSH user. This peer public key on the SSH server must exist and associate with hwRSAPublicKeyName. ')
hwSSHUserAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("authNULL", 1), ("authPASSWORD", 2), ("authRSA", 3), ("authRSAorPASSWORD", 4), ("authRSAandPASSWORD", 5), ("authDSA", 6), ("authDSAandPASSWORD", 7), ("authAny", 8), ("authECC", 9), ("authECCandPASSWORD", 10))).clone('authPASSWORD')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSSHUserAuthType.setStatus('current')
if mibBuilder.loadTexts: hwSSHUserAuthType.setDescription(' The object specifies the authentication type of SSH user. The default authentication type is authPASSWORD. Options: 1. authNULL(1) -No authenticate. 2. authPASSWORD(2) -Password authentication. 3. authRSA(3) -RSA key authentication. 4. authRSAorPASSWORD(4) -Password or RSA key authentication. 5. authRSAandPASSWORD(5) -Password and RSA key authentication. 6. authDSA(6), -DSA key authentication. 7. authDSAandPASSWORD(7), -Password or DSA key authentication. 8. authAny(8), -Any authentication. 9. authECC(9), -ECC key authentication. 10.authECCandPASSWORD(10) -Password and ECC key authentication. ')
hwSSHUserServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("servicetypeNULL", 1), ("servicetypeSTELNET", 2), ("servicetypeSFTP", 3), ("servicetypeALL", 4), ("servicetypeSNetConf", 5), ("servicetypeSftpSNetConf", 6), ("servicetypeSTelnetSftp", 7), ("servicetypeSTelnetSNetConf", 8))).clone('servicetypeNULL')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSSHUserServiceType.setStatus('current')
if mibBuilder.loadTexts: hwSSHUserServiceType.setDescription(' The object specifies the service type of SSH user. Options: 1. servicetypeNULL(1) -default service type. 2. servicetypeSTELNET(2) -The service type of the SSH user is STELNET. 3. servicetypeSFTP(3) -The service type of the SSH user is SFTP. 4. servicetypeALL(4) -The service type of the SSH user is all. 5. servicetypeSNetConf(5), -The service type of the SSH user is SNetConf. 6. servicetypeSftpSNetConf(6), -The service type of the SSH user is Sftp and SNetConf. 7. servicetypeSTelnetSftp(7), -The service type of the SSH user is STelnet and Sftp. 8. servicetypeSTelnetSNetConf(8) -The service type of the SSH user is STelnet and SNetConf.')
hwSSHUserSftpDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 11, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSSHUserSftpDirectory.setStatus('current')
if mibBuilder.loadTexts: hwSSHUserSftpDirectory.setDescription('The object specifies the working directory for the sftp user. The total length of absolute path is 128,the length of single directory is 128.')
hwSSHUserAuthorizationCMD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("authorizationNULL", 1), ("authorizationAAA", 2))).clone('authorizationNULL')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSSHUserAuthorizationCMD.setStatus('current')
if mibBuilder.loadTexts: hwSSHUserAuthorizationCMD.setDescription(" The object specifies the authorization type of SSH user. When authorizationAAA is specified, the SSH user will be authorizated by HWTACACS server. The default authorization is authorizationNULL, indicating SSH user doesn't need to be authorizated by HWTACACS server. Options: 1.authorizationNULL(1)-The default authorization is authorizationNULL,indicating SSH user doesn't need to be authorizated by HWTACACS server. 2.authorizationAAA(2) -When authorizationAAA is specified,the SSH user will be authorizated by HWTACACS server. ")
hwSSHUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 11, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSSHUserRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwSSHUserRowStatus.setDescription(" The object specifies the status of this entry. When the status is active(1), hwSSHUserAssignKey, hwSSHUserAuthType, hwSSHUserServiceType, hwSSHUserSftpDirectory, and hwSSHUserAuthorizationCMD's value in the entry are allowed to be modified. ")
hwSSHUserAssignKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("keyTypeNULL", 0), ("keyTypeRSA", 1), ("keyTypeDSA", 2), ("keyTypeECC", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSSHUserAssignKeyType.setStatus('current')
if mibBuilder.loadTexts: hwSSHUserAssignKeyType.setDescription('The object specifies the public key type of SSH user. ')
hwSSHServerSessionTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 12), )
if mibBuilder.loadTexts: hwSSHServerSessionTable.setStatus('current')
if mibBuilder.loadTexts: hwSSHServerSessionTable.setDescription(' The object shows current session information of the SSH server which includes username, version information, retry times of online users currently. The index of this table is hwSSHSessionIndex. ')
hwSSHServerSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 12, 1), ).setIndexNames((0, "HUAWEI-SSH-MIB", "hwSSHSessionIndex"))
if mibBuilder.loadTexts: hwSSHServerSessionEntry.setStatus('current')
if mibBuilder.loadTexts: hwSSHServerSessionEntry.setDescription(' The object shows current session information of the SSH server which includes username, version information, retry times of online users currently. The index of this entry is hwSSHSessionIndex. ')
hwSSHSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 12, 1, 1), Integer32())
if mibBuilder.loadTexts: hwSSHSessionIndex.setStatus('current')
if mibBuilder.loadTexts: hwSSHSessionIndex.setDescription(' The object specifies the index of hwSSHServerSessionTable. ')
hwSSHSessionUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSSHSessionUserName.setStatus('current')
if mibBuilder.loadTexts: hwSSHSessionUserName.setDescription(' The object specifies the name of a SSH user, which has started a session. ')
hwSSHSessionConnectType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("none", 0), ("vty0", 1), ("vty1", 2), ("vty2", 3), ("vty3", 4), ("vty4", 5), ("vty5", 6), ("vty6", 7), ("vty7", 8), ("vty8", 9), ("vty9", 10), ("vty10", 11), ("vty11", 12), ("vty12", 13), ("vty13", 14), ("vty14", 15), ("vty15", 16), ("vty16", 17), ("vty17", 18), ("vty18", 19), ("vty19", 20), ("vty20", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSSHSessionConnectType.setStatus('current')
if mibBuilder.loadTexts: hwSSHSessionConnectType.setDescription(' The object specifies the line number supports a connection of SSH user which is in connection with SSH server. ')
hwSSHSessionVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 12, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSSHSessionVer.setStatus('current')
if mibBuilder.loadTexts: hwSSHSessionVer.setDescription(' The object specifies the version information of a SSH user which is in connection with SSH server. ')
hwSSHSessionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("started", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSSHSessionState.setStatus('current')
if mibBuilder.loadTexts: hwSSHSessionState.setDescription(' The object specifies the state of a SSH user which is in connection with SSH server. Options: 1.started(1)-indicates the state is start. ')
hwSSHSessionRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 12, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSSHSessionRetry.setStatus('current')
if mibBuilder.loadTexts: hwSSHSessionRetry.setDescription(" The object specifies SSH user's retrying times in authentications. ")
hwSSHSessionCtosCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 12, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSSHSessionCtosCipher.setStatus('current')
if mibBuilder.loadTexts: hwSSHSessionCtosCipher.setDescription(' The object specifies the cipher of custom to server. ')
hwSSHSessionStocCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 12, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSSHSessionStocCipher.setStatus('current')
if mibBuilder.loadTexts: hwSSHSessionStocCipher.setDescription(' The object specifies the cipher of server to custom. ')
hwSSHSessionCtosHmac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 12, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSSHSessionCtosHmac.setStatus('current')
if mibBuilder.loadTexts: hwSSHSessionCtosHmac.setDescription(' The object specifies the hmac of custom to server. ')
hwSSHSessionStocHmac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 12, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSSHSessionStocHmac.setStatus('current')
if mibBuilder.loadTexts: hwSSHSessionStocHmac.setDescription(' The object specifies the hmac of server to custom. ')
hwSSHSessionKex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 12, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSSHSessionKex.setStatus('current')
if mibBuilder.loadTexts: hwSSHSessionKex.setDescription(' The object specifies the key exchange. ')
hwSSHSessionAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 12, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSSHSessionAuthType.setStatus('current')
if mibBuilder.loadTexts: hwSSHSessionAuthType.setDescription(' The object specifies the authentication type of SSH session. ')
hwSSHSessionServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 12, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSSHSessionServiceType.setStatus('current')
if mibBuilder.loadTexts: hwSSHSessionServiceType.setDescription(' The object specifies the service type of SSH session. ')
hwSSHSessionKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 12, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("keyTypeRSA", 1), ("keyTypeDSA", 2), ("keyTypeECC", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSSHSessionKeyType.setStatus('current')
if mibBuilder.loadTexts: hwSSHSessionKeyType.setDescription('The object specifies the public key type of SSH session.')
hwSSHSessionConnectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 12, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSSHSessionConnectionIndex.setStatus('current')
if mibBuilder.loadTexts: hwSSHSessionConnectionIndex.setDescription('The object specifies the line number supports a connection of SSH user which is in connection with SSH(STelnet/Sftp/SNetConf) server.')
hwSSHSessionCtosCompress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 12, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSSHSessionCtosCompress.setStatus('current')
if mibBuilder.loadTexts: hwSSHSessionCtosCompress.setDescription('The object specifies the Compression algorithm of SSH client to server.')
hwSSHSessionStocCompress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 12, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSSHSessionStocCompress.setStatus('current')
if mibBuilder.loadTexts: hwSSHSessionStocCompress.setDescription('The object specifies the Compression algorithm of SSH Server to client.')
hwRSAPublicKeyTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 13), )
if mibBuilder.loadTexts: hwRSAPublicKeyTable.setStatus('current')
if mibBuilder.loadTexts: hwRSAPublicKeyTable.setDescription(' A table of configuration about RSA Public Key. The index of this table is hwRSAPublicKeyName. hwRSAPublicKeyName is the name of RSA Public Key. ')
hwRSAPublicKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 13, 1), ).setIndexNames((0, "HUAWEI-SSH-MIB", "hwRSAPublicKeyName"))
if mibBuilder.loadTexts: hwRSAPublicKeyEntry.setStatus('current')
if mibBuilder.loadTexts: hwRSAPublicKeyEntry.setDescription(' A table of configuration about RSA Public Key. The index of this entry is hwRSAPublicKeyName. hwRSAPublicKeyName is the name of RSA Public Key. ')
hwRSAPublicKeyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 13, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 30)))
if mibBuilder.loadTexts: hwRSAPublicKeyName.setStatus('current')
if mibBuilder.loadTexts: hwRSAPublicKeyName.setDescription(' The object specifies the name of RSA Public Key. ')
hwRSAPublicKeyCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 13, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 2048))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRSAPublicKeyCode.setStatus('current')
if mibBuilder.loadTexts: hwRSAPublicKeyCode.setDescription(' The object specifies is RSA Public Key Code that in the format of ber, the maximum length of the node is 2048. When the RSA public key is created, the index value is the name of the public key, which uses the ASCII code. The public key value must be generated through a tool. Firstly, use the PUTTYGEN.EXE tool to generate the matching public key and private key. Then, use the sshkey.exe tool to convert the generated public key to the required public key value. ')
hwRSAPublicKeyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 13, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRSAPublicKeyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwRSAPublicKeyRowStatus.setDescription(" The object specifies the status of this table entry. When the status is active(1), hwRSAPublicKeyName, hwRSAPublicKeyCode's value in the entry are allowed to be modified. createAndGo(4) is supplied to create a new instance of a conceptual row. destroy(6) is supplied to delete the instances associated with an existing conceptual row. ")
hwRSAPublicKeyFingerprint = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 13, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRSAPublicKeyFingerprint.setStatus('current')
if mibBuilder.loadTexts: hwRSAPublicKeyFingerprint.setDescription(' The object specifies the fingerprint of RSA Public Key Code, that including the public key algorithm, length and fingerprint. ')
hwSNetConfMaxUserNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSNetConfMaxUserNum.setStatus('current')
if mibBuilder.loadTexts: hwSNetConfMaxUserNum.setDescription('The object specifies the max number of SNetConf user that SNetConf Server supporting. The default is 5.')
hwSNetConfServerEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSNetConfServerEnable.setStatus('current')
if mibBuilder.loadTexts: hwSNetConfServerEnable.setDescription('The object specifies whether the SSH SNetConf Server is enable. The default is 2.')
hwSSHKeepAliveEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSSHKeepAliveEnable.setStatus('current')
if mibBuilder.loadTexts: hwSSHKeepAliveEnable.setDescription('The object specifies whether the KeepAlive functionality on SSH Server is enable. The default is 1.')
hwSCPServerEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSCPServerEnable.setStatus('current')
if mibBuilder.loadTexts: hwSCPServerEnable.setDescription('The object specifies whether the SSH SCP Server is enable. The default is 2.')
hwSCPMaxUserNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSCPMaxUserNum.setStatus('current')
if mibBuilder.loadTexts: hwSCPMaxUserNum.setDescription('The object specifies the max number of SCP user that SCP Server supporting. The default is 2.')
hwSSHClient = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 2))
hwSSHFirstTimeAuthEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSSHFirstTimeAuthEnable.setStatus('current')
if mibBuilder.loadTexts: hwSSHFirstTimeAuthEnable.setDescription('The object specifies whether the SSH client supports first-time-authentication. Options: 1.enable(1) -indicates the SSH client supports first-time-authentication. 2.disable(2)-indicates the SSH client does not support first-time-authentication. ')
hwSSHServerInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 2, 2), )
if mibBuilder.loadTexts: hwSSHServerInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwSSHServerInfoTable.setDescription(' A table of configuration about the relation between the SSH server and the rsa peerkey. The index of this table is hwSSHServerIndex. ')
hwSSHServerInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 2, 2, 1), ).setIndexNames((0, "HUAWEI-SSH-MIB", "hwSSHServerIndex"))
if mibBuilder.loadTexts: hwSSHServerInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwSSHServerInfoEntry.setDescription(' A table of configuration about the relation between the SSH server and the rsa peerkey. The index of this entry is hwSSHServerIndex. ')
hwSSHServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: hwSSHServerIndex.setStatus('current')
if mibBuilder.loadTexts: hwSSHServerIndex.setDescription(' The object specifies the index of hwSSHServerInfoTable. ')
hwSSHServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSSHServerName.setStatus('current')
if mibBuilder.loadTexts: hwSSHServerName.setDescription(' The object specifies the name of a SSH server. ')
hwSSHServerAssignKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 2, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSSHServerAssignKey.setStatus('current')
if mibBuilder.loadTexts: hwSSHServerAssignKey.setDescription(' The object specifies a peer public key for a SSH server. This peer public key must exist. ')
hwSSHServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 2, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSSHServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwSSHServerRowStatus.setDescription(" The object specifies the status of this entry. When the status is active, hwSSHServerAssignKey's value in the entry is allowed to be modified. ")
hwSSHServerAssignDSAKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 2, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSSHServerAssignDSAKey.setStatus('current')
if mibBuilder.loadTexts: hwSSHServerAssignDSAKey.setDescription('The object specifies a DSA peer public key for a SSH server.This peer public key must exist.')
hwSSHServerAssignECCKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 2, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSSHServerAssignECCKey.setStatus('current')
if mibBuilder.loadTexts: hwSSHServerAssignECCKey.setDescription('The object specifies a ECC peer public key for a SSH server.This peer public key must exist.')
hwSSHKeepAliveInterval = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSSHKeepAliveInterval.setStatus('current')
if mibBuilder.loadTexts: hwSSHKeepAliveInterval.setDescription('The object specifies KeepAlive Timeout interval on SSH Client. The default is 0. 0 specify no KeepAlive packet should be sent to Server.')
hwSSHKeepAliveMaxCount = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSSHKeepAliveMaxCount.setStatus('current')
if mibBuilder.loadTexts: hwSSHKeepAliveMaxCount.setDescription('The object specifies maximum KeepAlive packet to send to SSH Server before disconnect. The default is 3.')
hwSSHNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 3))
hwSSHSftpUserNumExceedMax = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 3, 1)).setObjects(("HUAWEI-SSH-MIB", "hwSftpOnLineUserNum"), ("HUAWEI-SSH-MIB", "hwSftpMaxUserNum"))
if mibBuilder.loadTexts: hwSSHSftpUserNumExceedMax.setStatus('current')
if mibBuilder.loadTexts: hwSSHSftpUserNumExceedMax.setDescription('This notification was sent when the total number of sftp users requesting sftp service exceeds max user number configured.')
hwSSHMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 4))
hwSSHMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 4, 1))
hwSSHMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 4, 1, 1)).setObjects(("HUAWEI-SSH-MIB", "hwSSHServerGroup"), ("HUAWEI-SSH-MIB", "hwSSHUserGroup"), ("HUAWEI-SSH-MIB", "hwSSHServerSessionGroup"), ("HUAWEI-SSH-MIB", "hwSSHClientGroup"), ("HUAWEI-SSH-MIB", "hwSSHServerInfoGroup"), ("HUAWEI-SSH-MIB", "hwSSHNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSSHMIBCompliance = hwSSHMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: hwSSHMIBCompliance.setDescription(' The compliance statement for systems supporting the HUAWEI-SSH-MIB. ')
hwSSHMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 4, 2))
hwSSHServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 4, 2, 1)).setObjects(("HUAWEI-SSH-MIB", "hwStelnetServerEnable"), ("HUAWEI-SSH-MIB", "hwSftpServerEnable"), ("HUAWEI-SSH-MIB", "hwSSHServerComp1x"), ("HUAWEI-SSH-MIB", "hwSSHServerTimeOut"), ("HUAWEI-SSH-MIB", "hwSSHServerRetry"), ("HUAWEI-SSH-MIB", "hwSSHServerPort"), ("HUAWEI-SSH-MIB", "hwSSHServerKeyTimeOut"), ("HUAWEI-SSH-MIB", "hwSSHServerAlarmEnable"), ("HUAWEI-SSH-MIB", "hwSftpMaxUserNum"), ("HUAWEI-SSH-MIB", "hwSftpOnLineUserNum"), ("HUAWEI-SSH-MIB", "hwSNetConfMaxUserNum"), ("HUAWEI-SSH-MIB", "hwSNetConfServerEnable"), ("HUAWEI-SSH-MIB", "hwSSHKeepAliveEnable"), ("HUAWEI-SSH-MIB", "hwSCPServerEnable"), ("HUAWEI-SSH-MIB", "hwSCPMaxUserNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSSHServerGroup = hwSSHServerGroup.setStatus('current')
if mibBuilder.loadTexts: hwSSHServerGroup.setDescription(' The SSH server attribute group. ')
hwSSHUserGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 4, 2, 2)).setObjects(("HUAWEI-SSH-MIB", "hwSSHUserName"), ("HUAWEI-SSH-MIB", "hwSSHUserAssignKey"), ("HUAWEI-SSH-MIB", "hwSSHUserAuthType"), ("HUAWEI-SSH-MIB", "hwSSHUserServiceType"), ("HUAWEI-SSH-MIB", "hwSSHUserSftpDirectory"), ("HUAWEI-SSH-MIB", "hwSSHUserAuthorizationCMD"), ("HUAWEI-SSH-MIB", "hwSSHUserRowStatus"), ("HUAWEI-SSH-MIB", "hwSSHUserAssignKeyType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSSHUserGroup = hwSSHUserGroup.setStatus('current')
if mibBuilder.loadTexts: hwSSHUserGroup.setDescription(" The SSH user's group. ")
hwSSHServerSessionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 4, 2, 3)).setObjects(("HUAWEI-SSH-MIB", "hwSSHSessionUserName"), ("HUAWEI-SSH-MIB", "hwSSHSessionConnectType"), ("HUAWEI-SSH-MIB", "hwSSHSessionVer"), ("HUAWEI-SSH-MIB", "hwSSHSessionState"), ("HUAWEI-SSH-MIB", "hwSSHSessionRetry"), ("HUAWEI-SSH-MIB", "hwSSHSessionCtosCipher"), ("HUAWEI-SSH-MIB", "hwSSHSessionStocCipher"), ("HUAWEI-SSH-MIB", "hwSSHSessionCtosHmac"), ("HUAWEI-SSH-MIB", "hwSSHSessionStocHmac"), ("HUAWEI-SSH-MIB", "hwSSHSessionKex"), ("HUAWEI-SSH-MIB", "hwSSHSessionAuthType"), ("HUAWEI-SSH-MIB", "hwSSHSessionServiceType"), ("HUAWEI-SSH-MIB", "hwSSHSessionKeyType"), ("HUAWEI-SSH-MIB", "hwSSHSessionConnectionIndex"), ("HUAWEI-SSH-MIB", "hwSSHSessionCtosCompress"), ("HUAWEI-SSH-MIB", "hwSSHSessionStocCompress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSSHServerSessionGroup = hwSSHServerSessionGroup.setStatus('current')
if mibBuilder.loadTexts: hwSSHServerSessionGroup.setDescription(" The SSH server's session group. ")
hwSSHClientGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 4, 2, 4)).setObjects(("HUAWEI-SSH-MIB", "hwSSHFirstTimeAuthEnable"), ("HUAWEI-SSH-MIB", "hwSSHKeepAliveInterval"), ("HUAWEI-SSH-MIB", "hwSSHKeepAliveMaxCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSSHClientGroup = hwSSHClientGroup.setStatus('current')
if mibBuilder.loadTexts: hwSSHClientGroup.setDescription(" The SSH client's attribute group. ")
hwSSHServerInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 4, 2, 5)).setObjects(("HUAWEI-SSH-MIB", "hwSSHServerName"), ("HUAWEI-SSH-MIB", "hwSSHServerAssignKey"), ("HUAWEI-SSH-MIB", "hwSSHServerRowStatus"), ("HUAWEI-SSH-MIB", "hwSSHServerAssignDSAKey"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSSHServerInfoGroup = hwSSHServerInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwSSHServerInfoGroup.setDescription(" The SSH serverInfo's group. ")
hwSSHNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 4, 2, 6)).setObjects(("HUAWEI-SSH-MIB", "hwSSHSftpUserNumExceedMax"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSSHNotificationGroup = hwSSHNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hwSSHNotificationGroup.setDescription(' The SSH Notification group. ')
hwRSALocalKeyTable = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 5))
hwRSALocalHostPublicKeyCode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 5, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRSALocalHostPublicKeyCode.setStatus('current')
if mibBuilder.loadTexts: hwRSALocalHostPublicKeyCode.setDescription(' The object specifies the local host RSA Public Key Code in the format of ber. ')
hwRSALocalHostPublicKeyFingerprint = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 5, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRSALocalHostPublicKeyFingerprint.setStatus('current')
if mibBuilder.loadTexts: hwRSALocalHostPublicKeyFingerprint.setDescription(' The object specifies the fingerprint of the local host RSA Public Key Code, that including the public key algorithm, length and fingerprint. ')
hwRSALocalServerPublicKeyCode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 5, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRSALocalServerPublicKeyCode.setStatus('current')
if mibBuilder.loadTexts: hwRSALocalServerPublicKeyCode.setDescription(' The object specifies the local server RSA Public Key Code in the format of ber. ')
hwRSALocalServerPublicKeyFingerprint = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 118, 5, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRSALocalServerPublicKeyFingerprint.setStatus('current')
if mibBuilder.loadTexts: hwRSALocalServerPublicKeyFingerprint.setDescription(' The object specifies the fingerprint of the local server RSA Public Key Code, that including the public key algorithm, length and fingerprint. ')
mibBuilder.exportSymbols("HUAWEI-SSH-MIB", hwSSHClientGroup=hwSSHClientGroup, hwSSHServerInfoTable=hwSSHServerInfoTable, hwSSHServerName=hwSSHServerName, hwSNetConfServerEnable=hwSNetConfServerEnable, hwSftpMaxUserNum=hwSftpMaxUserNum, hwSSHServerAssignECCKey=hwSSHServerAssignECCKey, hwSSHServerRowStatus=hwSSHServerRowStatus, hwRSAPublicKeyFingerprint=hwRSAPublicKeyFingerprint, hwSNetConfMaxUserNum=hwSNetConfMaxUserNum, hwSSHSessionConnectType=hwSSHSessionConnectType, hwSSHUserAuthType=hwSSHUserAuthType, hwSSHSessionStocCipher=hwSSHSessionStocCipher, hwRSAPublicKeyRowStatus=hwRSAPublicKeyRowStatus, hwSSHFirstTimeAuthEnable=hwSSHFirstTimeAuthEnable, hwSSHServerAlarmEnable=hwSSHServerAlarmEnable, hwRSAPublicKeyCode=hwRSAPublicKeyCode, hwSSHServerSessionEntry=hwSSHServerSessionEntry, hwSSHSessionRetry=hwSSHSessionRetry, hwSSHClient=hwSSHClient, hwSSHUserEntry=hwSSHUserEntry, hwRSAPublicKeyName=hwRSAPublicKeyName, hwSSHServerInfoGroup=hwSSHServerInfoGroup, hwSCPMaxUserNum=hwSCPMaxUserNum, hwSSHServerInfoEntry=hwSSHServerInfoEntry, hwSSHServer=hwSSHServer, hwSSHSessionServiceType=hwSSHSessionServiceType, hwRSALocalHostPublicKeyFingerprint=hwRSALocalHostPublicKeyFingerprint, hwSSHServerIndex=hwSSHServerIndex, hwSSHSessionStocHmac=hwSSHSessionStocHmac, hwSSH=hwSSH, hwSSHServerSessionGroup=hwSSHServerSessionGroup, hwSSHKeepAliveEnable=hwSSHKeepAliveEnable, hwSSHUserAssignKeyType=hwSSHUserAssignKeyType, hwSSHUserSftpDirectory=hwSSHUserSftpDirectory, hwSSHSessionIndex=hwSSHSessionIndex, hwSSHMIBGroups=hwSSHMIBGroups, hwSSHUserGroup=hwSSHUserGroup, hwSCPServerEnable=hwSCPServerEnable, hwSSHMIBConformance=hwSSHMIBConformance, hwSSHUserRowStatus=hwSSHUserRowStatus, hwSSHNotificationGroup=hwSSHNotificationGroup, hwSSHUserIndex=hwSSHUserIndex, hwSSHServerSessionTable=hwSSHServerSessionTable, hwSSHServerKeyTimeOut=hwSSHServerKeyTimeOut, hwSSHServerAssignKey=hwSSHServerAssignKey, hwSSHSessionKeyType=hwSSHSessionKeyType, hwSftpServerEnable=hwSftpServerEnable, hwRSALocalServerPublicKeyFingerprint=hwRSALocalServerPublicKeyFingerprint, hwSSHNotifications=hwSSHNotifications, hwSSHServerTimeOut=hwSSHServerTimeOut, hwSSHServerPort=hwSSHServerPort, hwSSHMIBCompliances=hwSSHMIBCompliances, hwSSHServerAssignDSAKey=hwSSHServerAssignDSAKey, hwSSHSessionConnectionIndex=hwSSHSessionConnectionIndex, hwSSHSessionAuthType=hwSSHSessionAuthType, hwSSHKeepAliveMaxCount=hwSSHKeepAliveMaxCount, hwSSHSessionCtosCipher=hwSSHSessionCtosCipher, hwSSHServerRetry=hwSSHServerRetry, hwSSHMIBCompliance=hwSSHMIBCompliance, hwSftpOnLineUserNum=hwSftpOnLineUserNum, PYSNMP_MODULE_ID=hwSSH, hwStelnetServerEnable=hwStelnetServerEnable, hwSSHUserServiceType=hwSSHUserServiceType, hwSSHSessionCtosHmac=hwSSHSessionCtosHmac, hwRSALocalServerPublicKeyCode=hwRSALocalServerPublicKeyCode, hwSSHSftpUserNumExceedMax=hwSSHSftpUserNumExceedMax, hwSSHServerComp1x=hwSSHServerComp1x, hwSSHSessionState=hwSSHSessionState, hwSSHSessionUserName=hwSSHSessionUserName, hwSSHSessionVer=hwSSHSessionVer, hwSSHSessionCtosCompress=hwSSHSessionCtosCompress, hwRSALocalKeyTable=hwRSALocalKeyTable, hwSSHUserTable=hwSSHUserTable, hwSSHServerGroup=hwSSHServerGroup, hwSSHUserName=hwSSHUserName, hwSSHSessionStocCompress=hwSSHSessionStocCompress, hwSSHSessionKex=hwSSHSessionKex, hwRSAPublicKeyTable=hwRSAPublicKeyTable, hwSSHKeepAliveInterval=hwSSHKeepAliveInterval, hwSSHUserAssignKey=hwSSHUserAssignKey, hwRSAPublicKeyEntry=hwRSAPublicKeyEntry, hwRSALocalHostPublicKeyCode=hwRSALocalHostPublicKeyCode, hwSSHUserAuthorizationCMD=hwSSHUserAuthorizationCMD)
