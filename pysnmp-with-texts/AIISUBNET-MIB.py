#
# PySNMP MIB module AIISUBNET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AIISUBNET-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:16:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter64, enterprises, Counter32, Unsigned32, MibIdentifier, NotificationType, Gauge32, Integer32, iso, TimeTicks, Bits, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter64", "enterprises", "Counter32", "Unsigned32", "MibIdentifier", "NotificationType", "Gauge32", "Integer32", "iso", "TimeTicks", "Bits", "IpAddress")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
class SubnetIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 512)

aii = MibIdentifier((1, 3, 6, 1, 4, 1, 539))
aiSLC2 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 16))
aiiSubnet = ModuleIdentity((1, 3, 6, 1, 4, 1, 539, 16, 3))
if mibBuilder.loadTexts: aiiSubnet.setLastUpdated('9909141400Z')
if mibBuilder.loadTexts: aiiSubnet.setOrganization('Applied Innovation Inc.')
if mibBuilder.loadTexts: aiiSubnet.setContactInfo(' Engineering MIB Administrator Postal: Applied Innovation Inc. 5800 Innovation Drive Dublin, Ohio 43016-3271 Tel: 614-798-2000 Fax: 614-798-1770 E-mail: snmp@aiinet.com')
if mibBuilder.loadTexts: aiiSubnet.setDescription('This MIB provides configuration and status information for IP parameters not otherwise configurable by SNMP for the AII XIRB.')
aiiSubnetTable = MibTable((1, 3, 6, 1, 4, 1, 539, 16, 3, 1), )
if mibBuilder.loadTexts: aiiSubnetTable.setStatus('current')
if mibBuilder.loadTexts: aiiSubnetTable.setDescription('This table contains objects which specify the parameters for an IP subnet')
aiiSubnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 16, 3, 1, 1), ).setIndexNames((0, "AIISUBNET-MIB", "aiiSubnetIndex"))
if mibBuilder.loadTexts: aiiSubnetEntry.setStatus('current')
if mibBuilder.loadTexts: aiiSubnetEntry.setDescription('Configured parameters for a specific subnet')
aiiSubnetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 16, 3, 1, 1, 1), SubnetIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiiSubnetIndex.setStatus('current')
if mibBuilder.loadTexts: aiiSubnetIndex.setDescription('The index of this entry')
aiiSubnetEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 16, 3, 1, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiiSubnetEntryStatus.setStatus('current')
if mibBuilder.loadTexts: aiiSubnetEntryStatus.setDescription('The status of this subnet entry, as defined in RFC1443')
aiiSubnetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 16, 3, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiiSubnetAddr.setStatus('current')
if mibBuilder.loadTexts: aiiSubnetAddr.setDescription("The IP address to which this entry's addressing information pertains.")
aiiSubnetIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 16, 3, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiiSubnetIfIndex.setStatus('current')
if mibBuilder.loadTexts: aiiSubnetIfIndex.setDescription('The index value which identifies the physical interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex .')
aiiSubnetNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 16, 3, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiiSubnetNetMask.setStatus('current')
if mibBuilder.loadTexts: aiiSubnetNetMask.setDescription('The subnet mask associated with the IP address of this entry. The value of the mask is an IP address with all the network bits set to 1 and all the hosts bits set to 0.')
aiiSubnetBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 16, 3, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiiSubnetBcastAddr.setStatus('current')
if mibBuilder.loadTexts: aiiSubnetBcastAddr.setDescription('The value of the least-significant bit in the IP broadcast address used for sending datagrams on the (logical) interface associated with the IP address of this entry. For example, when the Internet standard all-ones broadcast address is used, the value will be 1. This value applies to both the subnet and network broadcasts addresses used by the entity on this (logical) interface.')
aiiSubnetType = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 16, 3, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiiSubnetType.setStatus('current')
if mibBuilder.loadTexts: aiiSubnetType.setDescription('The type of the interface over which this subnet is configured. Takes same values as IfType.')
aiiSubnetAdmnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 16, 3, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiiSubnetAdmnStatus.setStatus('current')
if mibBuilder.loadTexts: aiiSubnetAdmnStatus.setDescription('The operational state to be taken by this interface at the next system restart')
aiiSubnetTable2 = MibTable((1, 3, 6, 1, 4, 1, 539, 16, 3, 2), )
if mibBuilder.loadTexts: aiiSubnetTable2.setStatus('current')
if mibBuilder.loadTexts: aiiSubnetTable2.setDescription('This table contains objects which specify the parameters for multiple IP subnets')
aiiSubnetEntry2 = MibTableRow((1, 3, 6, 1, 4, 1, 539, 16, 3, 2, 1), ).setIndexNames((0, "AIISUBNET-MIB", "aiiSubnetIndex2"))
if mibBuilder.loadTexts: aiiSubnetEntry2.setStatus('current')
if mibBuilder.loadTexts: aiiSubnetEntry2.setDescription('Configured parameters for a specific subnet')
aiiSubnetIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 16, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiiSubnetIndex2.setStatus('current')
if mibBuilder.loadTexts: aiiSubnetIndex2.setDescription('The index of this entry')
aiiIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 16, 3, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiiIPAddr.setStatus('current')
if mibBuilder.loadTexts: aiiIPAddr.setDescription("The IP address to which this entry's addressing information pertains.")
aiiSubnetRange = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 16, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiiSubnetRange.setStatus('current')
if mibBuilder.loadTexts: aiiSubnetRange.setDescription('IP Address Range.')
aiiSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 16, 3, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiiSubnetMask.setStatus('current')
if mibBuilder.loadTexts: aiiSubnetMask.setDescription('The subnet mask associated with the IP address of this entry. The value of the mask is an IP address with all the network bits set to 1 and all the hosts bits set to 0.')
mibBuilder.exportSymbols("AIISUBNET-MIB", aiiSubnetBcastAddr=aiiSubnetBcastAddr, aiiSubnetTable2=aiiSubnetTable2, aiiSubnetTable=aiiSubnetTable, aii=aii, SubnetIndex=SubnetIndex, aiiSubnetMask=aiiSubnetMask, aiiSubnetAddr=aiiSubnetAddr, aiiSubnetNetMask=aiiSubnetNetMask, aiiSubnetIndex=aiiSubnetIndex, aiiSubnetEntryStatus=aiiSubnetEntryStatus, aiiSubnet=aiiSubnet, aiiSubnetEntry=aiiSubnetEntry, aiiSubnetIndex2=aiiSubnetIndex2, aiSLC2=aiSLC2, aiiSubnetRange=aiiSubnetRange, aiiIPAddr=aiiIPAddr, aiiSubnetType=aiiSubnetType, aiiSubnetAdmnStatus=aiiSubnetAdmnStatus, PYSNMP_MODULE_ID=aiiSubnet, aiiSubnetEntry2=aiiSubnetEntry2, aiiSubnetIfIndex=aiiSubnetIfIndex)
