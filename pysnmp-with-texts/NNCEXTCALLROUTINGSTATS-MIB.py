#
# PySNMP MIB module NNCEXTCALLROUTINGSTATS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NNCEXTCALLROUTINGSTATS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:22:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
NncExtIntvlStateType, = mibBuilder.importSymbols("NNC-INTERVAL-STATISTICS-TC-MIB", "NncExtIntvlStateType")
nncExtensions, = mibBuilder.importSymbols("NNCGNI0001-SMI", "nncExtensions")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
NotificationType, IpAddress, MibIdentifier, TimeTicks, Counter64, Unsigned32, Gauge32, ModuleIdentity, Counter32, Bits, ObjectIdentity, iso, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "IpAddress", "MibIdentifier", "TimeTicks", "Counter64", "Unsigned32", "Gauge32", "ModuleIdentity", "Counter32", "Bits", "ObjectIdentity", "iso", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
nncExtRoutingStats = ModuleIdentity((1, 3, 6, 1, 4, 1, 123, 3, 78))
if mibBuilder.loadTexts: nncExtRoutingStats.setLastUpdated('20000307000z')
if mibBuilder.loadTexts: nncExtRoutingStats.setOrganization('Newbridge Networks Corporation')
if mibBuilder.loadTexts: nncExtRoutingStats.setContactInfo('Newbridge Networks Corporation Postal: 600 March Road Kanata, Ontario Canada K2K 2E6 Phone: +1 613 591 3600 Fax: +1 613 591 3680')
if mibBuilder.loadTexts: nncExtRoutingStats.setDescription("This MIB module contains management information for performance monitoring of call routing statistics. Seven types of statistics are provided through 30 tables. Type 1: common stats for static and PNNI routing Type 2: static routing specific stats Type 3: non-border node PNNI routing per routing table stats Type 4: border node PNNI routing per routing table stats Type 5: total stats for non-border node PNNI routing table stats Type 6: total stats for border node PNNI routing table stats Type 7: raw stats for all stats in types 1-6. The statistics that are maintained are described below together with their definition. For each statistic, a call identifies a setup or an add party to a point to multipoint connection, as signaled by an entity originating the connection. A call does not include setup or add party events that are generated as a result of receiving a crankback during processing of the original setup or add party. For a call based statistic ( e.g. PNNI Stat 2- Calls Generating an Initial DTL), a call that is cranked back twice is considered as a single call, and not as three calls, as opposed to an event based statistic (e.g. Crankbacks Received as DTL Originator) where such a call is considered as one setup and two crankbacks. Note that these routing statistics are not maintained across a CallP card activity switch. i) Static & PNNI Routing Common Statistics: 1. Number of Successfully Routed Calls Originated from Local Subscribers: This statistic measures all the calls which are originated from subscribers at this node and are successfully routed to the called party regardless of whether a re-route attempt is involved. This statistic does not include those calls which are originated from a local subscriber and terminated to a local subscriber. It is incremented only when a call is accepted or alerted by the called party. 2. Successfully Routed Calls Transited via This Node: This statistic measures all the calls which are successfully routed via this node. The calls are neither originated from nor terminated to a subscriber at this node and are successfully routed to the called party. This includes cases where a crankback occurred and the call was successfully re-routed by this node. It is incremented only when a call is accepted or alerted by the called party. 3. Number of Successfully Routed Calls Terminated to Local Subscribers This statistic measures all the calls which are successfully terminated to a subscriber at this node. This does not include a call which is originated from a subscriber at this node. A terminating call is treated as successful if it is accepted by the called subscriber. It is incremented when the call is accepted or alerted by the local subscriber. 4. Successfully Routed Local Calls This statistic measures all the calls which are originated from subscribers at this node and are successfully terminated to subscribers at this node. A terminating call is treated as successful if it is accepted or alerted by the called subscriber. 5. Calls Originated from Local Subscribers This statistic measures all the calls which are originated from local subscribers or local subscriber equivalents, e.g., calls originated from SPVC connections, regardless of whether the calls are successfully routed or not. This statistic includes those calls which are terminated to local subscribers. If a call is re-routed by this node, the re-route attempts are not counted. 6. Calls Terminated to Local Subscribers This statistic measures all the calls which are terminated to a local subscriber or to an SPVC endpoint on this node regardless of whether the calls are successfully routed or not. This statistic includes those calls which are originated from local subscribers. 7. Local Call Attempts This statistic measures all the calls which are originated from subscribers at this node and are terminated to subscribers at this node regardless of whether the calls are successfully terminated or not. 8. Calls Cleared due to No Routing Table Entry This statistic measures all the calls which are cleared by this node due to lack of a routing table entry that matches the called party number. For static routing, this node could serve as an originating node, a transiting node or a terminating node. For PNNI routing, this node could serve as a DTL originator, or a DTL terminator. The called party numbers and calling party numbers of the last N cleared calls are made available for a user to display on NMTI screens. 9. Crankbacks Generated by This Node This statistic measures all the crankbacks which are generated by this node while routing calls either as a transiting node or a terminating node. The crankbacks which are generated due to signaling failures are not included in this statistic. The called party numbers and calling party numbers plus their failure causes and diagnostics of the last N cranked back calls are made available for a user to display on NMTI screens. 10. Failed Calls at Local Subscribers This statistic measures all the calls which are terminating to a local subscriber and fails at this node either because, e.g., the required bearer capability can not be allocated or the local subscriber rejects the call. This includes a call which is originated from a subscriber at this node. The called party numbers and calling party numbers plus their failure causes and diagnostics of the last N failed calls are made available for a user to display on NMTI screens. 11. Successfully Re-routed Calls This statistic counts all calls which were successfully setup after having been re-routed at least once by this node (as a result of receiving a crankback). This count is also incremented for entry border nodes that successfully reroute calls. The called party numbers and calling party numbers plus their failure causes and diagnostics of the last N failed calls are made available for a user to display on NMTI screens. 12. Calls Failed in Re-routing This statistic counts all calls which failed to be setup after having attempted re-routing at least once by this node (as a result of receiving a crankback). This count is also incremented for entry border nodes that failed to reroute calls. The called party numbers and calling party numbers plus their failure causes and diagnostics of the last N failed calls are made available for a user to display on NMTI screens. ii) Static Routing Specific Statistics: 1. Calls Statically Routed by This Node This statistic measures all the calls which are statically routed over an NNI by this node regardless of whether the calls are successfully routed or not. If a call is cranked back and re-routed by this node again, the re-route attempts are not counted. 2. Crankbacks Received by This Node This statistic measures all the static routing crankbacks which are received by this node either as an originating node, or as a transiting node. The called party numbers and calling party numbers plus their failure causes and diagnostics of the last N cranked back calls are made available for a user to display on NMTI screens. 3. Re-route Attempts This statistic measures the number of times static routing is used to re-route calls as a result of crankbacks. This node could be serving as a transiting node or an originating node. The called party numbers and calling party numbers plus their failure causes and diagnostics of the last N re-routed calls are made available for a user to display on NMTI screens. 4. Routing Loops Detected by This Node This statistic counts the number of routing loops which are detected by this node. The called party numbers and calling party numbers of the last N routing loops are made available for a user to display on NMTI screens. iii) PNNI Per Routing Table Statistics: The following statistics are gathered for each PNNI QoS routing table generated as a result of a configured PNNI Routing Table Descriptor. The PNNI Per Routing Table Statistics are divided into two subsets: a) Non Border Node Statistics These statistics are relevant for calls for which this node does not serve as a peer group border node. This node can serve as originator, transit, or terminator for such calls. b) Border Node Statistics These statistics are relevant for calls for which this node is a border node. The node can serve as an entry border, or an exit border for such calls. Note that a given node can increment both types of statistics, depending on the role it plays for a specific call. iiia)Non Border PNNI Per Routing Table Statistics: 1. Failed Calls Due to Initial DTL Not Generated This statistic measures the number of calls for which an initial DTL could not be generated by the originating node. This is the case where a routing table entry is found for the called party in the routing table but a path could not be built due to routing constraints (e.g. insufficient path bandwidth to the called party, path cost exceeding the configured Routing Table Descriptor maximum). Note that this is different from having no routing table entry for the called party. This statistic is not incremented in crank back cases. The called party numbers and calling party numbers plus their failure causes and diagnostics of the last N cranked back calls are made available for the user to display on NMTI. 2. Calls Generating an Initial DTL This statistic measures the number of DTLs which are generated initially by this node for calls which are originated from local subscribers, or from an SPVC source, or for calls which are received over an NNI from outside the PNNI domain. This statistic is incremented regardless of whether the calls are successfully routed or not. This count does not include the DTLs which are generated in order to re-route calls as a result of crankbacks. 3. DTL Originated Calls Successfully Established Without Re-routing This statistic measures the number of calls for which this node is the DTL Originator which were successfully established without being cranked back to this node. Note that this includes the case where a call has been rerouted in some other peer groups by the entry border nodes. 4. DTL Originated Calls Successfully Re-routed This statistic measures the number of calls for which this node is the DTL Originator which were successfully setup after having been re-routed at least once by this node (as a result of receiving a crankback). The called party numbers and calling party numbers plus their failure causes and diagnostics of the last N reroute attempts are made available for the user to display on NMTI. 5. DTL Originated Calls Failed in Re-routing This statistic measures the number of calls which failed to be setup after having attempted re-routing at least once by this node (as a result of receiving a crankback). The called party numbers and calling party numbers plus their failure causes and diagnostics of the last N failed calls are made available for the user to display on NMTI. 6. Successful Calls with Bandwidth Greater than Routing Table Descriptor Minimum Bandwidth This statistic measures the number of successfully established calls for which this node is the DTL originator, and which were routed using this routing table even though the call's requested bandwidth was greater than the Routing Table Descriptor's Minimum Trunk Available Bandwidth. This statistic indicates that no configured Routing Table Descriptor was configured to match the traffic descriptor of the call, and that this routing table was the best one to attempt to route the call. 7. Failed Calls with Bandwidth Greater than Routing Table Descriptor Minimum Bandwidth This statistic measures the number of failed calls for which this node is the DTL originator, and which were routed using this routing table even though the call's requested bandwidth is greater than the Routing Table Descriptor's Minimum Trunk Available Bandwidth. This statistic indicates that no configured Routing Table Descriptor was configured to match the traffic descriptor of the call, and that this routing table was the best one to attempt to route the call. The called party numbers and calling party numbers plus their failure causes and diagnostics of the last N failed calls are made available for the user to display on NMTI. 8. Crankbacks Received as DTL Originator This statistic measures the number of crankbacks which are received by this node for calls which are originated from local subscribers or from a local SPVC source or for calls which are from an NNI from outside the PNNI domain. It includes the crankbacks which are received on a re-route attempt. Note that a single call can receive many crankbacks and hence increment this statistic multiple times. The called party numbers and calling party numbers plus their failure causes and diagnostics of the last N cranked back calls are made available for the user to display on NMTI. 9. DTLs Generated as DTL Originator due to Crankback This statistic measures the number of DTLs which are generated by this node in order to re-route a call for which this is the originating node, as a result of receiving a crankback from a previous attempt to route the call. This count does not include the DTL which is generated initially to route a call. This count specifies the number of times the originating node generated DTLs for alternate paths. The called party numbers and calling party numbers plus their failure causes and diagnostics of the last N cranked back calls are made available for the user to display on NMTI. iiib) Border Node PNNI Per Routing Table Statistics: These statistics are only relevant for border nodes, that is nodes with at least one outside link crossing the peer group boundary. These statistics are incremented for calls for which this node serves as an entry border node or/and an exit border node. 1. Failed calls due to initial lower level DTLs not generated This statistic measures the number of calls from another peer group for which this node is an entry border node and for which a lower level DTL could not be initially generated. This can be due to different reasons, ( e.g., the destination address is not found, a path to the next peer group specified in the DTL is not found, insufficient path bandwidth to the called party number, ..). This count is not incremented in crankback cases. The called party numbers and calling party numbers plus their failure causes and diagnostics of the last N calls are made available for the user to display on NMTI. This statistic is equivalent to non-border node statistic 1. 2. Calls generating initial lower level DTLs This statistic measures the number of calls from another peer group for which this node is an entry border node, and for which lower level DTLs are generated and pushed by this node onto the received DTL stack. This statistic is incremented regardless of whether the call is successful or not. This count does not include the lower level DTLs that are generated as a result of crankbacks. This statistic is equivalent to non-border node statistic 2. 3. DTL generated calls successfully established, no reroute This statistic measures the number of calls for which this node is an entry border node, which were successfully established without being cranked back to this node. This statistic is equivalent to non-border node statistic 3. 4. DTL generated calls successfully established, with reroute This statistic measures the number of calls for which this node is an entry border node, which were successfully established after being rerouted at least once by this node. The called party numbers and calling party numbers plus their failure causes and diagnostics of the last N calls are made available for the user to display on NMTI. This statistic is equivalent to non-border node statistic 4. 5. DTL generated calls failed in rerouting This statistic measures the number of calls for which this node is an entry border node, which failed to be established after having attempted rerouting at least once by this node. In this case, a crankback is generated and forwarded by this node to the previous peer group. The called party numbers and calling party numbers plus their failure causes and diagnostics of the last N calls are made available for the user to display on NMTI. This statistic is equivalent to non-border node statistic 5. 6. Successful Calls with Bandwidth Greater than Routing Table Descriptor Minimum Bandwidth This statistic measures the number of successfully established calls for which this node is an entry border node, and which were routed using this routing table even though the call's requested bandwidth was greater than the Routing Table Descriptor's Minimum Trunk Available Bandwidth. This statistic indicates that no Routing Table Descriptor was configured to match the traffic descriptor of the call, and that this routing table was the best one to attempt to route the call. This statistic is equivalent to non-border node statistic 6. 7. Failed Calls with Bandwidth Greater than Routing Table Descriptor Minimum Bandwidth This statistic measures the number of failed calls for which this node is an entry border node, and which were routed using this routing table even though the call's requested bandwidth is greater than the Routing Table Descriptor's Minimum Trunk Available Bandwidth. This statistic indicates that no Routing Table Descriptor was configured to match the traffic descriptor of the call, and that this routing table was the best one to attempt to route the call. The called party numbers and calling party numbers plus their failure causes and diagnostics of the last N failed calls are made available for the user to display on NMTI. This statistic is equivalent to non-border node statistic 7. 8. Crankback received as an entry border node This statistic measures the number of crankbacks received for calls for which this node serves as an entry border node. This count is incremented only for crankbacks for which this entry border node is allowed to perform rerouting. This count includes the crankbacks which are received on a re-route attempt. The called party numbers and calling party numbers plus their failure causes and diagnostics of the last N calls are made available for the user to display on NMTI. This statistic is equivalent to non-border node statistic 8. 9. Lower level DTLs generated due to received crankback This statistic measures the number of lower level DTLs that are generated and pushed by this entry border node in order to re-route a call as a result of receiving a crankback from a previous attempt to route the call. This count does not include the lower level DTLs that are generated initially to route the call. The called party numbers and calling party numbers plus their failure causes and diagnostics of the last N cranked back calls are made available for the user to display on NMTI. This statistic is equivalent to non-border node statistic 9. iv) PNNI Routing Total Statistics: These statistics are totals for all QoS routing tables used to route calls.One routing table is generated for each QoS Routing Table Descriptor. These statistics are divided into two subsets: a) Non Border Node Statistics These statistics are relevant for calls for which this node does not serve as a border node. This node can serve as originator, transit, or terminator for such calls. b) Border Node Statistics These statistics are relevant for calls for which this node is a border node. The node can serve as an entry border, or an exit border for such calls. iv a) Non Border Node PNNI Routing Total Statistics These statistics include an aggregate for each statistic maintained per QoS routing table, in addition to some other PNNI statistics. The statistics 1 to 9 are the total values for all QoS routing tables. The statistics 10 to 12 are not maintained per routing table because they do not involve a DTL Originator node where a routing table lookup is required. 1. Failed Calls due to initial DTL Not Generated This statistic is the total value, for all routing tables, of the per routing table statistic 1 described in section iii a). No diagnostic info is available for this aggregate statistic. 2. Calls Generating an initial DTL This statistic is the total value, for all routing tables, of the per routing table statistic 2 described in section iii a). 3. DTL Originated Calls successfully established without Re-routing This statistic is the total value, for all routing tables, of the per routing table statistic 3 described in section iii a). 4. DTL Originated Calls successfully Re-routed This statistic is the total value, for all routing tables, of the per routing table statistic 4 described in section iii a). No diagnostic info is available for this aggregate statistic. 5. DTL Originated Calls Failed in Re-routing This statistic is the total value, for all routing tables, of the per routing table statistic 5 described in section iii a). No diagnostic info is available for this aggregate statistic. 6.Successful calls with bandwidth greater than routing table descriptor minimum bandwidth This statistic is the total value, for all routing tables, of the per routing table statistic 6 described in section iii a). 7.Failed calls with bandwidth greater than routing table descriptor minimum bandwidth This statistic is the total value, for all routing tables, of the per routing table statistic 7 described in section iii a). No diagnostic info is available for this aggregate statistic. 8. Crankbacks Received as DTL Originator This statistic is the total value, for all routing tables, of the per routing table statistic 8 described in section iii a). No diagnostic info is available for this aggregate statistic. Note that this statistic does not include statistic 12. 9. DTLs Generated as DTL Originator due to Crankbacks This statistic is the total value, for all routing tables, of the per routing table statistic 9 described in section iii a). No diagnostic info is available for this aggregate statistic. 10. Calls Received as Transit Node over Inside Links This statistic measures the number of calls received over a PNNI signaling link when this node is not the DTL terminator. This node serves as a PNNI transit node for such calls. Incrementing this statistic does not imply that the call was forwarded to the next node. Calls that fail CAC or that encounter other call processing failures are counted by this statistic. 11. Crankbacks Received as Transit Node over Inside Links This statistic measures the number of crankbacks which are received by this node over inside links, when this node serves as a PNNI transit node. This statistic does not include statistic 12, since in this case the 36170 passes on the crankback without making any alternate routing decisions while in the case of statistic 12, the 36170 may choose a parallel trunk group to route the call on. The called party numbers and calling party numbers plus their failure causes and diagnostics of the last N cranked back calls are made available for a user to display on NMTI screens. 12. Succeeding End Blocked Crankbacks Received over Inside Links This statistic measures the number of Succeeding End Blocked PNNI crankbacks received by this node over inside links, when this node serves as a DTL Originator or a PNNI transit node. This count specifies the number of times this node chose a trunk group to use to forward a call and the succeeding node could not admit the call on this trunk group (e.g., due to CAC failure, no VCIs available, etc.). In this case, if a parallel trunk group exists to this same succeeding node, the call may be retried by this node to the succeeding node using this parallel trunk group. The called party numbers and calling party numbers plus their failure causes and diagnostics of the last N cranked back calls are made available for a user to display on NMTI screens. iv b) Border Node PNNI Routing Total Statistics These statistics are only relevant for border nodes, that is nodes with at least one outside link crossing the peer group boundary. These counts are incremented for calls for which this node serves as an entry border node or/and an exit border node. These statistics include an aggregate for each border node statistic maintained per QoS routing table, in addition to some other border node statistics that are not maintained per QoS routing table since no routing table lookup is required. The statistics 1 to 9 are the total values for all QoS routing tables. The statistics 10 to 14 are not maintained per QoS routing table. 1. Failed calls due to initial lower level DTLs not generated This statistic is the total value, for all routing tables, of the per routing table border node statistic 1 described in section iii b). No diagnostic info is available for this aggregate statistic. 2. Calls generating initial lower level DTLs This statistic is the total value, for all routing tables, of the per routing table border node statistic 2 described in section iii b). 3. DTL generated calls successfully established, no reroute This statistic is the total value, for all routing tables, of the per routing table border node statistic 3 described in section iii b). 4. DTL generated calls successfully established, with reroute This statistic is the total value, for all routing tables, of the per routing table border node statistic 4 described in section iii b). No diagnostic info is available for this aggregate statistic. 5. DTL generated calls failed in rerouting This statistic is the total value, for all routing tables, of the per routing table border node statistic 5 described in section iii b). No diagnostic info is available for this aggregate statistic. 6. Successful Calls with Bandwidth Greater than Routing Table Descriptor Minimum Bandwidth This statistic is the total value, for all routing tables, of the per routing table border node statistic 6 described in section iii b). 7. Failed Calls with Bandwidth Greater than Routing Table Descriptor Minimum Bandwidth This statistic is the total value, for all routing tables, of the per routing table border node statistic 7 described in section iii b). No diagnostic info is available for this aggregate statistic. 8. Crankback received as an entry border node This statistic is the total value, for all routing tables, of the per routing table border node statistic 8 described in section iii b). No diagnostic info is available for this aggregate statistic. 9. Lower level DTLs generated due to received crankback This statistic is the total value, for all routing tables, of the per routing table border node statistic 9 described in section iii b). No diagnostic info is available for this aggregate statistic. 10. Calls received over an outside link This statistic measures the total number of calls received at this entry border node from a node in a different peer group over an outside link. This count is incremented regardless of whether the call is successful or not. 11. Calls transmitted over an outside link This statistic measures the total number of calls transmitted by this exit border node over an outside link to a node in a different peer group. This count is incremented regardless of whether the call is successful or not. 12. Crankback received over an outside link This statistic measures the number of crankbacks that are received at this exit border node from a node in a different peer group over an outside link. This statistic does not include statistic 13 below. The called party numbers and calling party numbers plus their failure causes and diagnostics of the last N cranked back calls are made available for the user to display on NMTI. 13. Succeeding End Blocked crankback received over an outside link This statistic measures the number of succeeding end blocked crankbacks received at this exit border node from a node in a different peer group over an outside link. In this case, the exit border node tries to reroute the call to the same neighbor peer group using a parallel trunk group if one exists. The called party numbers and calling party numbers plus their failure causes and diagnostics of the last N cranked back calls are made available for the user to display on NMTI. 14. Crankback forwarded to previous PG, crankback level too high This statistic measures the crankbacks that are passed on to the previous node in a different peer group, when this entry border node receives crankbacks for calls for which it did not generate any DTLs of equal or higher level than the crankback level. In this case, this node is not allowed to re-route the call, and the crankback is forwarded unchanged to the previous peer group. The called party numbers and calling party numbers plus their failure causes and diagnostics of the last N cranked back calls are made available for the user to display on NMTI. The call routing stats are intervalized with 15-minutes and 24-hour intervals. In addition to the intervals, the raw cpunter of the stats are also provided. The 15-minute intervals include the current interval and the last 4 intervals.The 24-hour intervals include the current interval and the last 1 interval. All tables use one or all of the three indices, namely, nncExtCallControlGroupNumber, nncExtNBPerTbl15MinIntervalNumber, nncExtTableDescriptor. (1) nncExtCallControlGroupNumber contains information about Shelf, Slot No. etc. It uniquely identifies the slot number associated with call routing stats. (2) nncExtNBPerTbl15MinIntervalNumber or nncExtNBPerTbl24HourIntervalNumber identifies at which interval the stats should be retrieved. (3) nncExtTableDescriptor determines a routing table number whose stats are to be displayed. ")
nncRoutingStatsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 78, 1))
nncRoutingStatsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 78, 3))
nncRoutingStatsCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 78, 4))
nncRoutingStatsCommon15MinCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 1), )
if mibBuilder.loadTexts: nncRoutingStatsCommon15MinCurrentTable.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsCommon15MinCurrentTable.setDescription('The nncRoutingStatsCommon15MinCurrentTable contains objects for monitoring the static and PNNI routing common stats during the current 15 minute interval.')
nncRoutingStatsCommon15MinCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 1, 1), ).setIndexNames((0, "NNCEXTCALLROUTINGSTATS-MIB", "nncCallControlGroupNumber"))
if mibBuilder.loadTexts: nncRoutingStatsCommon15MinCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsCommon15MinCurrentEntry.setDescription('An entry in the 15 minute current statistics table. Each conceptual row contains current common statistics for static and PNNI routing.')
nncCallControlGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: nncCallControlGroupNumber.setStatus('current')
if mibBuilder.loadTexts: nncCallControlGroupNumber.setDescription('The call control group number. The object represents one active call processing service card. There is a one-to-one mapping between a call control group number and the set of stats associated with the call control group number.')
nncCommon15MinCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 1, 1, 2), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon15MinCurrentState.setStatus('current')
if mibBuilder.loadTexts: nncCommon15MinCurrentState.setDescription('The state of the current interval. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change')
nncCommon15MinCurrentAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon15MinCurrentAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncCommon15MinCurrentAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncCommon15MinCurrentSuccessRoutedCallsOrigFromLocalSubs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon15MinCurrentSuccessRoutedCallsOrigFromLocalSubs.setStatus('current')
if mibBuilder.loadTexts: nncCommon15MinCurrentSuccessRoutedCallsOrigFromLocalSubs.setDescription('Number of successfully routed calls originated from local subscribers.')
nncCommon15MinCurrentSuccessRoutedCallsTransitedViaThisNode = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon15MinCurrentSuccessRoutedCallsTransitedViaThisNode.setStatus('current')
if mibBuilder.loadTexts: nncCommon15MinCurrentSuccessRoutedCallsTransitedViaThisNode.setDescription('Number of successfully routed calls transited via this node.')
nncCommon15MinCurrentSuccessRoutedCallsTermToLocalSubs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon15MinCurrentSuccessRoutedCallsTermToLocalSubs.setStatus('current')
if mibBuilder.loadTexts: nncCommon15MinCurrentSuccessRoutedCallsTermToLocalSubs.setDescription('Number of successfully routed calls terminated to local subscribers.')
nncCommon15MinCurrentSuccessRoutedLocalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon15MinCurrentSuccessRoutedLocalCalls.setStatus('current')
if mibBuilder.loadTexts: nncCommon15MinCurrentSuccessRoutedLocalCalls.setDescription('Number of successfully routed local calls.')
nncCommon15MinCurrentCallsOrigFromLocalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon15MinCurrentCallsOrigFromLocalCalls.setStatus('current')
if mibBuilder.loadTexts: nncCommon15MinCurrentCallsOrigFromLocalCalls.setDescription('Number of calls originated from local calls.')
nncCommon15MinCurrentCallsTermToLocalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon15MinCurrentCallsTermToLocalCalls.setStatus('current')
if mibBuilder.loadTexts: nncCommon15MinCurrentCallsTermToLocalCalls.setDescription('Number of calls terminated to local subscribers.')
nncCommon15MinCurrentLocalCallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon15MinCurrentLocalCallAttempts.setStatus('current')
if mibBuilder.loadTexts: nncCommon15MinCurrentLocalCallAttempts.setDescription('Number of local call attempts.')
nncCommon15MinCurrentCallsClearedDueToNoRoutingTabEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon15MinCurrentCallsClearedDueToNoRoutingTabEntry.setStatus('current')
if mibBuilder.loadTexts: nncCommon15MinCurrentCallsClearedDueToNoRoutingTabEntry.setDescription('Number of calls cleared due to no routing table entry.')
nncCommon15MinCurrentCrankbacksGeneratedByThisNode = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon15MinCurrentCrankbacksGeneratedByThisNode.setStatus('current')
if mibBuilder.loadTexts: nncCommon15MinCurrentCrankbacksGeneratedByThisNode.setDescription('Number of crankbacks generated by this node.')
nncCommon15MinCurrentFailedCallsAtLocalSubs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon15MinCurrentFailedCallsAtLocalSubs.setStatus('current')
if mibBuilder.loadTexts: nncCommon15MinCurrentFailedCallsAtLocalSubs.setDescription('Number of failed calls at local subscribers.')
nncCommon15MinCurrentCallsSuccessRerouted = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon15MinCurrentCallsSuccessRerouted.setStatus('current')
if mibBuilder.loadTexts: nncCommon15MinCurrentCallsSuccessRerouted.setDescription('Number of calls successfully rerouted.')
nncCommon15MinCurrentCallsFailedInRerouting = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon15MinCurrentCallsFailedInRerouting.setStatus('current')
if mibBuilder.loadTexts: nncCommon15MinCurrentCallsFailedInRerouting.setDescription('Number of calls failed in rerouting.')
nncRoutingStatsCommon15MinIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 2), )
if mibBuilder.loadTexts: nncRoutingStatsCommon15MinIntervalTable.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsCommon15MinIntervalTable.setDescription('The nncRoutingStatsCommon15MinIntervalTable contains objects for monitoring the static and PNNI routing common stats over a historical stratum of 15 minute intervals.')
nncRoutingStatsCommon15MinIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 2, 1), ).setIndexNames((0, "NNCEXTCALLROUTINGSTATS-MIB", "nncCallControlGroupNumber"), (0, "NNCEXTCALLROUTINGSTATS-MIB", "nncCommon15MinIntervalNumber"))
if mibBuilder.loadTexts: nncRoutingStatsCommon15MinIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsCommon15MinIntervalEntry.setDescription('An entry in the 15 minute interval statistics table. Each conceptual row contains interval common statistics for static and PNNI routing.')
nncCommon15MinIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: nncCommon15MinIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncCommon15MinIntervalNumber.setDescription('The interval number of the statistics in this row.')
nncCommon15MinIntervalState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 2, 1, 3), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon15MinIntervalState.setStatus('current')
if mibBuilder.loadTexts: nncCommon15MinIntervalState.setDescription('The state of the interval represented by this row. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change.')
nncCommon15MinIntervalAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon15MinIntervalAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncCommon15MinIntervalAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncCommon15MinIntervalSuccessRoutedCallsOrigFromLocalSubs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon15MinIntervalSuccessRoutedCallsOrigFromLocalSubs.setStatus('current')
if mibBuilder.loadTexts: nncCommon15MinIntervalSuccessRoutedCallsOrigFromLocalSubs.setDescription('Number of successfully routed calls originated from local subscribers.')
nncCommon15MinIntervalSuccessRoutedCallsTransitedViaThisNode = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon15MinIntervalSuccessRoutedCallsTransitedViaThisNode.setStatus('current')
if mibBuilder.loadTexts: nncCommon15MinIntervalSuccessRoutedCallsTransitedViaThisNode.setDescription('Number of successfully routed calls transited via this node.')
nncCommon15MinIntervalSuccessRoutedCallsTermToLocalSubs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon15MinIntervalSuccessRoutedCallsTermToLocalSubs.setStatus('current')
if mibBuilder.loadTexts: nncCommon15MinIntervalSuccessRoutedCallsTermToLocalSubs.setDescription('Number of successfully routed calls terminated to local subscribers.')
nncCommon15MinIntervalSuccessRoutedLocalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon15MinIntervalSuccessRoutedLocalCalls.setStatus('current')
if mibBuilder.loadTexts: nncCommon15MinIntervalSuccessRoutedLocalCalls.setDescription('Number of successfully routed local calls.')
nncCommon15MinIntervalCallsOrigFromLocalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon15MinIntervalCallsOrigFromLocalCalls.setStatus('current')
if mibBuilder.loadTexts: nncCommon15MinIntervalCallsOrigFromLocalCalls.setDescription('Number of calls originated from local calls.')
nncCommon15MinIntervalCallsTermToLocalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon15MinIntervalCallsTermToLocalCalls.setStatus('current')
if mibBuilder.loadTexts: nncCommon15MinIntervalCallsTermToLocalCalls.setDescription('Number of calls terminated to local subscribers.')
nncCommon15MinIntervalLocalCallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon15MinIntervalLocalCallAttempts.setStatus('current')
if mibBuilder.loadTexts: nncCommon15MinIntervalLocalCallAttempts.setDescription('Number of local call attempts.')
nncCommon15MinIntervalCallsClearedDueToNoRoutingTabEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon15MinIntervalCallsClearedDueToNoRoutingTabEntry.setStatus('current')
if mibBuilder.loadTexts: nncCommon15MinIntervalCallsClearedDueToNoRoutingTabEntry.setDescription('Number of calls cleared due to no routing table entry.')
nncCommon15MinIntervalCrankbacksGeneratedByThisNode = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon15MinIntervalCrankbacksGeneratedByThisNode.setStatus('current')
if mibBuilder.loadTexts: nncCommon15MinIntervalCrankbacksGeneratedByThisNode.setDescription('Number of crankbacks generated by this node.')
nncCommon15MinIntervalFailedCallsAtLocalSubs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon15MinIntervalFailedCallsAtLocalSubs.setStatus('current')
if mibBuilder.loadTexts: nncCommon15MinIntervalFailedCallsAtLocalSubs.setDescription('Number of failed calls at local subscribers.')
nncCommon15MinIntervalCallsSuccessRerouted = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon15MinIntervalCallsSuccessRerouted.setStatus('current')
if mibBuilder.loadTexts: nncCommon15MinIntervalCallsSuccessRerouted.setDescription('Number of calls successfully rerouted.')
nncCommon15MinIntervalCallsFailedInRerouting = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon15MinIntervalCallsFailedInRerouting.setStatus('current')
if mibBuilder.loadTexts: nncCommon15MinIntervalCallsFailedInRerouting.setDescription('Number of calls failed in rerouting.')
nncRoutingStatsCommon24HourCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 3), )
if mibBuilder.loadTexts: nncRoutingStatsCommon24HourCurrentTable.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsCommon24HourCurrentTable.setDescription('The nncRoutingStatsCommon15MinCurrentTable contains objects for monitoring the static and PNNI routing common stats during the current 24 hour interval.')
nncRoutingStatsCommon24HourCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 3, 1), ).setIndexNames((0, "NNCEXTCALLROUTINGSTATS-MIB", "nncCallControlGroupNumber"))
if mibBuilder.loadTexts: nncRoutingStatsCommon24HourCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsCommon24HourCurrentEntry.setDescription('An entry in the 24 current statistics table. Each conceptual row contains current common statistics for static and PNNI routing.')
nncCommon24HourCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 3, 1, 2), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon24HourCurrentState.setStatus('current')
if mibBuilder.loadTexts: nncCommon24HourCurrentState.setDescription('The state of the current interval. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change')
nncCommon24HourCurrentAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon24HourCurrentAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncCommon24HourCurrentAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncCommon24HourCurrentSuccessRoutedCallsOrigFromLocalSubs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon24HourCurrentSuccessRoutedCallsOrigFromLocalSubs.setStatus('current')
if mibBuilder.loadTexts: nncCommon24HourCurrentSuccessRoutedCallsOrigFromLocalSubs.setDescription('Number of successfully routed calls originated from local subscribers.')
nncCommon24HourCurrentSuccessRoutedCallsTransitedViaThisNode = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon24HourCurrentSuccessRoutedCallsTransitedViaThisNode.setStatus('current')
if mibBuilder.loadTexts: nncCommon24HourCurrentSuccessRoutedCallsTransitedViaThisNode.setDescription('Number of successfully routed calls transited via this node.')
nncCommon24HourCurrentSuccessRoutedCallsTermToLocalSubs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon24HourCurrentSuccessRoutedCallsTermToLocalSubs.setStatus('current')
if mibBuilder.loadTexts: nncCommon24HourCurrentSuccessRoutedCallsTermToLocalSubs.setDescription('Number of successfully routed calls terminated to local subscribers.')
nncCommon24HourCurrentSuccessRoutedLocalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon24HourCurrentSuccessRoutedLocalCalls.setStatus('current')
if mibBuilder.loadTexts: nncCommon24HourCurrentSuccessRoutedLocalCalls.setDescription('Number of successfully routed local calls.')
nncCommon24HourCurrentCallsOrigFromLocalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon24HourCurrentCallsOrigFromLocalCalls.setStatus('current')
if mibBuilder.loadTexts: nncCommon24HourCurrentCallsOrigFromLocalCalls.setDescription('Number of calls originated from local calls.')
nncCommon24HourCurrentCallsTermToLocalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon24HourCurrentCallsTermToLocalCalls.setStatus('current')
if mibBuilder.loadTexts: nncCommon24HourCurrentCallsTermToLocalCalls.setDescription('Number of calls terminated to local subscribers.')
nncCommon24HourCurrentLocalCallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon24HourCurrentLocalCallAttempts.setStatus('current')
if mibBuilder.loadTexts: nncCommon24HourCurrentLocalCallAttempts.setDescription('Number of local call attempts.')
nncCommon24HourCurrentCallsClearedDueToNoRoutingTabEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon24HourCurrentCallsClearedDueToNoRoutingTabEntry.setStatus('current')
if mibBuilder.loadTexts: nncCommon24HourCurrentCallsClearedDueToNoRoutingTabEntry.setDescription('Number of calls cleared due to no routing table entry.')
nncCommon24HourCurrentCrankbacksGeneratedByThisNode = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon24HourCurrentCrankbacksGeneratedByThisNode.setStatus('current')
if mibBuilder.loadTexts: nncCommon24HourCurrentCrankbacksGeneratedByThisNode.setDescription('Number of crankbacks generated by this node.')
nncCommon24HourCurrentFailedCallsAtLocalSubs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon24HourCurrentFailedCallsAtLocalSubs.setStatus('current')
if mibBuilder.loadTexts: nncCommon24HourCurrentFailedCallsAtLocalSubs.setDescription('Number of failed calls at local subscribers.')
nncCommon24HourCurrentCallsSuccessRerouted = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon24HourCurrentCallsSuccessRerouted.setStatus('current')
if mibBuilder.loadTexts: nncCommon24HourCurrentCallsSuccessRerouted.setDescription('Number of calls successfully rerouted.')
nncCommon24HourCurrentCallsFailedInRerouting = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon24HourCurrentCallsFailedInRerouting.setStatus('current')
if mibBuilder.loadTexts: nncCommon24HourCurrentCallsFailedInRerouting.setDescription('Number of calls failed in rerouting.')
nncRoutingStatsCommon24HourIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 4), )
if mibBuilder.loadTexts: nncRoutingStatsCommon24HourIntervalTable.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsCommon24HourIntervalTable.setDescription('The nncRoutingStatsCommon24HourIntervalTable contains objects for monitoring the static and PNNI routing common stats over a historical stratum of 24 hour intervals.')
nncRoutingStatsCommon24HourIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 4, 1), ).setIndexNames((0, "NNCEXTCALLROUTINGSTATS-MIB", "nncCallControlGroupNumber"), (0, "NNCEXTCALLROUTINGSTATS-MIB", "nncCommon24HourIntervalNumber"))
if mibBuilder.loadTexts: nncRoutingStatsCommon24HourIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsCommon24HourIntervalEntry.setDescription('An entry in the 24 hour interval statistics table. Each conceptual row contains interval common statistics for static and PNNI routing.')
nncCommon24HourIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 4, 1, 2), Integer32())
if mibBuilder.loadTexts: nncCommon24HourIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncCommon24HourIntervalNumber.setDescription('The interval number of the statistics in this row.')
nncCommon24HourIntervalState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 4, 1, 3), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon24HourIntervalState.setStatus('current')
if mibBuilder.loadTexts: nncCommon24HourIntervalState.setDescription('The state of the interval represented by this row. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change.')
nncCommon24HourIntervalAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon24HourIntervalAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncCommon24HourIntervalAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncCommon24HourIntervalSuccessRoutedCallsOrigFromLocalSubs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon24HourIntervalSuccessRoutedCallsOrigFromLocalSubs.setStatus('current')
if mibBuilder.loadTexts: nncCommon24HourIntervalSuccessRoutedCallsOrigFromLocalSubs.setDescription('Number of successfully routed calls originated from local subscribers.')
nncCommon24HourIntervalSuccessRoutedCallsTransitedViaThisNode = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon24HourIntervalSuccessRoutedCallsTransitedViaThisNode.setStatus('current')
if mibBuilder.loadTexts: nncCommon24HourIntervalSuccessRoutedCallsTransitedViaThisNode.setDescription('Number of successfully routed calls transited via this node.')
nncCommon24HourIntervalSuccessRoutedCallsTermToLocalSubs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon24HourIntervalSuccessRoutedCallsTermToLocalSubs.setStatus('current')
if mibBuilder.loadTexts: nncCommon24HourIntervalSuccessRoutedCallsTermToLocalSubs.setDescription('Number of successfully routed calls terminated to local subscribers.')
nncCommon24HourIntervalSuccessRoutedLocalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon24HourIntervalSuccessRoutedLocalCalls.setStatus('current')
if mibBuilder.loadTexts: nncCommon24HourIntervalSuccessRoutedLocalCalls.setDescription('Number of successfully routed local calls.')
nncCommon24HourIntervalCallsOrigFromLocalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon24HourIntervalCallsOrigFromLocalCalls.setStatus('current')
if mibBuilder.loadTexts: nncCommon24HourIntervalCallsOrigFromLocalCalls.setDescription('Number of calls originated from local calls.')
nncCommon24HourIntervalCallsTermToLocalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon24HourIntervalCallsTermToLocalCalls.setStatus('current')
if mibBuilder.loadTexts: nncCommon24HourIntervalCallsTermToLocalCalls.setDescription('Number of calls terminated to local subscribers.')
nncCommon24HourIntervalLocalCallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon24HourIntervalLocalCallAttempts.setStatus('current')
if mibBuilder.loadTexts: nncCommon24HourIntervalLocalCallAttempts.setDescription('Number of local call attempts.')
nncCommon24HourIntervalCallsClearedDueToNoRoutingTabEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon24HourIntervalCallsClearedDueToNoRoutingTabEntry.setStatus('current')
if mibBuilder.loadTexts: nncCommon24HourIntervalCallsClearedDueToNoRoutingTabEntry.setDescription('Number of calls cleared due to no routing table entry.')
nncCommon24HourIntervalCrankbacksGeneratedByThisNode = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon24HourIntervalCrankbacksGeneratedByThisNode.setStatus('current')
if mibBuilder.loadTexts: nncCommon24HourIntervalCrankbacksGeneratedByThisNode.setDescription('Number of crankbacks generated by this node.')
nncCommon24HourIntervalFailedCallsAtLocalSubs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon24HourIntervalFailedCallsAtLocalSubs.setStatus('current')
if mibBuilder.loadTexts: nncCommon24HourIntervalFailedCallsAtLocalSubs.setDescription('Number of failed calls at local subscribers.')
nncCommon24HourIntervalCallsSuccessRerouted = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon24HourIntervalCallsSuccessRerouted.setStatus('current')
if mibBuilder.loadTexts: nncCommon24HourIntervalCallsSuccessRerouted.setDescription('Number of calls successfully rerouted.')
nncCommon24HourIntervalCallsFailedInRerouting = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCommon24HourIntervalCallsFailedInRerouting.setStatus('current')
if mibBuilder.loadTexts: nncCommon24HourIntervalCallsFailedInRerouting.setDescription('Number of calls failed in rerouting.')
nncRoutingStatsSpecific15MinCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 5), )
if mibBuilder.loadTexts: nncRoutingStatsSpecific15MinCurrentTable.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsSpecific15MinCurrentTable.setDescription('The nncRoutingStatsSpecific15MinCurrentTable contains objects for monitoring the static routing specific stats during the current 15 minute interval.')
nncRoutingStatsSpecific15MinCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 5, 1), ).setIndexNames((0, "NNCEXTCALLROUTINGSTATS-MIB", "nncCallControlGroupNumber"))
if mibBuilder.loadTexts: nncRoutingStatsSpecific15MinCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsSpecific15MinCurrentEntry.setDescription('An entry in the 15 minute current statistics table. Each conceptual row contains current static routing specific statistics.')
nncSpecific15MinCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 5, 1, 2), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSpecific15MinCurrentState.setStatus('current')
if mibBuilder.loadTexts: nncSpecific15MinCurrentState.setDescription('The state of the interval represented by this row. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change.')
nncSpecific15MinCurrentAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSpecific15MinCurrentAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncSpecific15MinCurrentAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncSpecific15MinCurrentCallsStaticallyRoutedByThisNode = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSpecific15MinCurrentCallsStaticallyRoutedByThisNode.setStatus('current')
if mibBuilder.loadTexts: nncSpecific15MinCurrentCallsStaticallyRoutedByThisNode.setDescription('The number of calls statically routed by this node.')
nncSpecific15MinCurrentCrankbacksReceivedByThisNode = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSpecific15MinCurrentCrankbacksReceivedByThisNode.setStatus('current')
if mibBuilder.loadTexts: nncSpecific15MinCurrentCrankbacksReceivedByThisNode.setDescription('The number ofcrankbacks received by this node.')
nncSpecific15MinCurrentRerouteAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSpecific15MinCurrentRerouteAttempts.setStatus('current')
if mibBuilder.loadTexts: nncSpecific15MinCurrentRerouteAttempts.setDescription('The number of rerouted attempts.')
nncSpecific15MinCurrentRoutingLoopsDetectedByThisNode = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSpecific15MinCurrentRoutingLoopsDetectedByThisNode.setStatus('current')
if mibBuilder.loadTexts: nncSpecific15MinCurrentRoutingLoopsDetectedByThisNode.setDescription('The number of routing loops detected by this node.')
nncRoutingStatsSpecific15MinIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 6), )
if mibBuilder.loadTexts: nncRoutingStatsSpecific15MinIntervalTable.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsSpecific15MinIntervalTable.setDescription('The nncRoutingStatsSpecific15MinCurrentTable contains objects for monitoring the static routing specific stats over a 15 minute interval.')
nncRoutingStatsSpecific15MinIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 6, 1), ).setIndexNames((0, "NNCEXTCALLROUTINGSTATS-MIB", "nncCallControlGroupNumber"), (0, "NNCEXTCALLROUTINGSTATS-MIB", "nncSpecific15MinIntervalNumber"))
if mibBuilder.loadTexts: nncRoutingStatsSpecific15MinIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsSpecific15MinIntervalEntry.setDescription('An entry in the 15 minute inteval statistics table. Each conceptual row contains interval statisticst for static routing specific statistics.')
nncSpecific15MinIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: nncSpecific15MinIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncSpecific15MinIntervalNumber.setDescription('The interval number of the statistics in this row.')
nncSpecific15MinIntervalState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 6, 1, 3), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSpecific15MinIntervalState.setStatus('current')
if mibBuilder.loadTexts: nncSpecific15MinIntervalState.setDescription('The state of the interval represented by this row. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change.')
nncSpecific15MinIntervalAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSpecific15MinIntervalAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncSpecific15MinIntervalAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncSpecific15MinIntervalCallsStaticallyRoutedByThisNode = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSpecific15MinIntervalCallsStaticallyRoutedByThisNode.setStatus('current')
if mibBuilder.loadTexts: nncSpecific15MinIntervalCallsStaticallyRoutedByThisNode.setDescription('The number of calls statically routed by this node.')
nncSpecific15MinIntervalCrankbacksReceivedByThisNode = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSpecific15MinIntervalCrankbacksReceivedByThisNode.setStatus('current')
if mibBuilder.loadTexts: nncSpecific15MinIntervalCrankbacksReceivedByThisNode.setDescription('The number ofcrankbacks received by this node.')
nncSpecific15MinIntervalRerouteAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSpecific15MinIntervalRerouteAttempts.setStatus('current')
if mibBuilder.loadTexts: nncSpecific15MinIntervalRerouteAttempts.setDescription('The number of rerouted attempts.')
nncSpecific15MinIntervalRoutingLoopsDetectedByThisNode = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSpecific15MinIntervalRoutingLoopsDetectedByThisNode.setStatus('current')
if mibBuilder.loadTexts: nncSpecific15MinIntervalRoutingLoopsDetectedByThisNode.setDescription('The number of routing loops detected by this node.')
nncRoutingStatsSpecific24HourCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 7), )
if mibBuilder.loadTexts: nncRoutingStatsSpecific24HourCurrentTable.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsSpecific24HourCurrentTable.setDescription('The nncRoutingStatsSpecific15MinCurrentTable contains objects for monitoring the static routing specific stats during the current 24 hour interval.')
nncRoutingStatsSpecific24HourCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 7, 1), ).setIndexNames((0, "NNCEXTCALLROUTINGSTATS-MIB", "nncCallControlGroupNumber"))
if mibBuilder.loadTexts: nncRoutingStatsSpecific24HourCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsSpecific24HourCurrentEntry.setDescription('An entry in the 24 hour current statistics table. Each conceptual row contains current static routing specific statistics.')
nncSpecific24HourCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 7, 1, 2), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSpecific24HourCurrentState.setStatus('current')
if mibBuilder.loadTexts: nncSpecific24HourCurrentState.setDescription('The state of the interval represented by this row. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change.')
nncSpecific24HourCurrentAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSpecific24HourCurrentAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncSpecific24HourCurrentAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncSpecific24HourCurrentCallsStaticallyRoutedByThisNode = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSpecific24HourCurrentCallsStaticallyRoutedByThisNode.setStatus('current')
if mibBuilder.loadTexts: nncSpecific24HourCurrentCallsStaticallyRoutedByThisNode.setDescription('The number of calls statically routed by this node.')
nncSpecific24HourCurrentCrankbacksReceivedByThisNode = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSpecific24HourCurrentCrankbacksReceivedByThisNode.setStatus('current')
if mibBuilder.loadTexts: nncSpecific24HourCurrentCrankbacksReceivedByThisNode.setDescription('The number ofcrankbacks received by this node.')
nncSpecific24HourCurrentRerouteAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSpecific24HourCurrentRerouteAttempts.setStatus('current')
if mibBuilder.loadTexts: nncSpecific24HourCurrentRerouteAttempts.setDescription('The number of rerouted attempts.')
nncSpecific24HourCurrentRoutingLoopsDetectedByThisNode = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSpecific24HourCurrentRoutingLoopsDetectedByThisNode.setStatus('current')
if mibBuilder.loadTexts: nncSpecific24HourCurrentRoutingLoopsDetectedByThisNode.setDescription('The number of routing loops detected by this node.')
nncRoutingStatsSpecific24HourIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 8), )
if mibBuilder.loadTexts: nncRoutingStatsSpecific24HourIntervalTable.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsSpecific24HourIntervalTable.setDescription('The nncRoutingStatsSpecific24HourCurrentTable contains objects for monitoring the static routing specific stats during the current 24 hour interval.')
nncRoutingStatsSpecific24HourIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 8, 1), ).setIndexNames((0, "NNCEXTCALLROUTINGSTATS-MIB", "nncCallControlGroupNumber"), (0, "NNCEXTCALLROUTINGSTATS-MIB", "nncSpecific24HourIntervalNumber"))
if mibBuilder.loadTexts: nncRoutingStatsSpecific24HourIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsSpecific24HourIntervalEntry.setDescription('An entry in the 24 hour interval statistics table. Each conceptual row contains current static routing specific statistics.')
nncSpecific24HourIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 8, 1, 2), Integer32())
if mibBuilder.loadTexts: nncSpecific24HourIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncSpecific24HourIntervalNumber.setDescription('The interval number of the statistics in this row.')
nncSpecific24HourIntervalState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 8, 1, 3), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSpecific24HourIntervalState.setStatus('current')
if mibBuilder.loadTexts: nncSpecific24HourIntervalState.setDescription('The state of the interval represented by this row. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change.')
nncSpecific24HourIntervalAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSpecific24HourIntervalAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncSpecific24HourIntervalAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncSpecific24HourIntervalCallsStaticallyRoutedByThisNode = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSpecific24HourIntervalCallsStaticallyRoutedByThisNode.setStatus('current')
if mibBuilder.loadTexts: nncSpecific24HourIntervalCallsStaticallyRoutedByThisNode.setDescription('The number of calls statically routed by this node.')
nncSpecific24HourIntervalCrankbacksReceivedByThisNode = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSpecific24HourIntervalCrankbacksReceivedByThisNode.setStatus('current')
if mibBuilder.loadTexts: nncSpecific24HourIntervalCrankbacksReceivedByThisNode.setDescription('The number ofcrankbacks received by this node.')
nncSpecific24HourIntervalRerouteAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSpecific24HourIntervalRerouteAttempts.setStatus('current')
if mibBuilder.loadTexts: nncSpecific24HourIntervalRerouteAttempts.setDescription('The number of rerouted attempts.')
nncSpecific24HourIntervalRoutingLoopsDetectedByThisNode = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSpecific24HourIntervalRoutingLoopsDetectedByThisNode.setStatus('current')
if mibBuilder.loadTexts: nncSpecific24HourIntervalRoutingLoopsDetectedByThisNode.setDescription('The number of routing loops detected by this node.')
nncRoutingStatsNonBorderPerTbl15MinCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 9), )
if mibBuilder.loadTexts: nncRoutingStatsNonBorderPerTbl15MinCurrentTable.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsNonBorderPerTbl15MinCurrentTable.setDescription('The nncRoutingStatsNonBorderPerTbl15MinCurrentTable contains objects for monitoring the non-border node PNNI routing per routing table stats during the current 15 minute interval.')
nncRoutingStatsNonBorderPerTbl15MinCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 9, 1), ).setIndexNames((0, "NNCEXTCALLROUTINGSTATS-MIB", "nncCallControlGroupNumber"), (0, "NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl15MinCurrentTableDescriptor"))
if mibBuilder.loadTexts: nncRoutingStatsNonBorderPerTbl15MinCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsNonBorderPerTbl15MinCurrentEntry.setDescription('An entry in the 15 minute current statistics table. Each conceptual row contains current statistics for the non-border node PNNI routing per routing table.')
nncNBPerTbl15MinCurrentTableDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6)))
if mibBuilder.loadTexts: nncNBPerTbl15MinCurrentTableDescriptor.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl15MinCurrentTableDescriptor.setDescription('nncTableDescriptor determines a routing table number whose stats are to be displayed.')
nncNBPerTbl15MinCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 9, 1, 3), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl15MinCurrentState.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl15MinCurrentState.setDescription('The state of the current interval. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change.')
nncNBPerTbl15MinCurrentAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl15MinCurrentAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl15MinCurrentAbsoluteIntervalNumber.setDescription('The interval number of the statistics in this row.')
nncNBPerTbl15MinCurrentFailedCallsDueToInitDTLNotGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl15MinCurrentFailedCallsDueToInitDTLNotGenerated.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl15MinCurrentFailedCallsDueToInitDTLNotGenerated.setDescription('The number of failed calls due to initial DTL not generated.')
nncNBPerTbl15MinCurrentCallsGeneratingAnInitDTL = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl15MinCurrentCallsGeneratingAnInitDTL.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl15MinCurrentCallsGeneratingAnInitDTL.setDescription('The number of calls generating an initial DTL.')
nncNBPerTble15MinCurrentDTLOrigCallsSuccessEstWithoutReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTble15MinCurrentDTLOrigCallsSuccessEstWithoutReroute.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTble15MinCurrentDTLOrigCallsSuccessEstWithoutReroute.setDescription('The number of DTL originated calls successfully established without reroute.')
nncNBPerTbl15MinCurrentDTLOrigCallsSuccessEstWithReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl15MinCurrentDTLOrigCallsSuccessEstWithReroute.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl15MinCurrentDTLOrigCallsSuccessEstWithReroute.setDescription('The number of DTL originated calls successfully established with reroute.')
nncNBPerTbl15MinCurrentDTLOrigCallsFailedInReRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 9, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl15MinCurrentDTLOrigCallsFailedInReRouting.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl15MinCurrentDTLOrigCallsFailedInReRouting.setDescription('The number of DTL originated calls failed in reRouting.')
nncNBPerTbl15MinCurrentSuccessCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 9, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl15MinCurrentSuccessCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl15MinCurrentSuccessCallsBdwGreaterThanRTDMinBdw.setDescription('The number of successful calls with bandwidth greater than RTD min bandwidth.')
nncNBPerTbl15MinCurrentFailedCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 9, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl15MinCurrentFailedCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl15MinCurrentFailedCallsBdwGreaterThanRTDMinBdw.setDescription('The number of failed calls with bandwidth greater than RTD min bandwidth.')
nncNBPerTbl15MinCurrentCrankbackReceivedAsDTLOriginator = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 9, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl15MinCurrentCrankbackReceivedAsDTLOriginator.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl15MinCurrentCrankbackReceivedAsDTLOriginator.setDescription('The number of crankback received as DTL originator.')
nncNBPerTbl15MinCurrentDTLsGeneratedDueToCrankback = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 9, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl15MinCurrentDTLsGeneratedDueToCrankback.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl15MinCurrentDTLsGeneratedDueToCrankback.setDescription('The number of DTLs generated due to crankback.')
nncRoutingStatsNonBorderPerTbl15MinIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 10), )
if mibBuilder.loadTexts: nncRoutingStatsNonBorderPerTbl15MinIntervalTable.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsNonBorderPerTbl15MinIntervalTable.setDescription('The nncRoutingStatsNonBorderPerTbl15MinIntervalTable contains objects for monitoring the non-border node PNNI routing per routing table stats over a 15 minute interval.')
nncRoutingStatsNonBorderPerTbl15MinIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 10, 1), ).setIndexNames((0, "NNCEXTCALLROUTINGSTATS-MIB", "nncCallControlGroupNumber"), (0, "NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl15MinIntervalNumber"), (0, "NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl15MinIntervalTableDescriptor"))
if mibBuilder.loadTexts: nncRoutingStatsNonBorderPerTbl15MinIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsNonBorderPerTbl15MinIntervalEntry.setDescription('An entry in the 15 minute inteval statistics table. Each conceptual row contains interval statistics for the non-border node PNNI routing per routing table.')
nncNBPerTbl15MinIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: nncNBPerTbl15MinIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl15MinIntervalNumber.setDescription('The interval number of the statistics in this row.')
nncNBPerTbl15MinIntervalTableDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6)))
if mibBuilder.loadTexts: nncNBPerTbl15MinIntervalTableDescriptor.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl15MinIntervalTableDescriptor.setDescription('nncTableDescriptor determines a routing table number whose stats are to be displayed.')
nncNBPerTbl15MinIntervalState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 10, 1, 4), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl15MinIntervalState.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl15MinIntervalState.setDescription('The state of the interval represented by this row. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change.')
nncNBPerTbl15MinIntervalAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl15MinIntervalAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl15MinIntervalAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncNBPerTbl15MinIntervalFailedCallsDueToInitDTLNotGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl15MinIntervalFailedCallsDueToInitDTLNotGenerated.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl15MinIntervalFailedCallsDueToInitDTLNotGenerated.setDescription('The number of failed calls due to initial DTL not generated.')
nncNBPerTbl15MinIntervalCallsGeneratingAnInitDTL = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl15MinIntervalCallsGeneratingAnInitDTL.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl15MinIntervalCallsGeneratingAnInitDTL.setDescription('The number of calls generating an initial DTL.')
nncNBPerTbl15MinIntervalDTLOrigCallsSuccessEstWithoutReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl15MinIntervalDTLOrigCallsSuccessEstWithoutReroute.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl15MinIntervalDTLOrigCallsSuccessEstWithoutReroute.setDescription('The number of DTL originated calls successfully established without reroute.')
nncNBPerTbl15MinIntervalDTLOrigCallsSuccessEstWithReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 10, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl15MinIntervalDTLOrigCallsSuccessEstWithReroute.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl15MinIntervalDTLOrigCallsSuccessEstWithReroute.setDescription('The number of DTL originated calls successfully established with reroute.')
nncNBPerTbl15MinIntervalDTLOrigCallsFailedInReRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl15MinIntervalDTLOrigCallsFailedInReRouting.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl15MinIntervalDTLOrigCallsFailedInReRouting.setDescription('The number of DTL originated calls failed in reRouting.')
nncNBPerTbl15MinIntervalSuccessCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 10, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl15MinIntervalSuccessCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl15MinIntervalSuccessCallsBdwGreaterThanRTDMinBdw.setDescription('The number of successful calls with bandwidth greater than RTD min bandwidth.')
nncNBPerTbl15MinIntervalFailedCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 10, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl15MinIntervalFailedCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl15MinIntervalFailedCallsBdwGreaterThanRTDMinBdw.setDescription('The number of failed calls with bandwidth greater than RTD min bandwidth.')
nncNBPerTbl15MinIntervalCrankbackReceivedAsDTLOriginator = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 10, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl15MinIntervalCrankbackReceivedAsDTLOriginator.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl15MinIntervalCrankbackReceivedAsDTLOriginator.setDescription('The number of crankback received as DTL originator.')
nncNBPerTbl15MinIntervalDTLsGeneratedDueToCrankback = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 10, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl15MinIntervalDTLsGeneratedDueToCrankback.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl15MinIntervalDTLsGeneratedDueToCrankback.setDescription('The number of DTLs generated due to crankback.')
nncRoutingStatsNonBorderPerTbl24HourCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 11), )
if mibBuilder.loadTexts: nncRoutingStatsNonBorderPerTbl24HourCurrentTable.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsNonBorderPerTbl24HourCurrentTable.setDescription('The nncRoutingStatsNonBorderPerTbl15MinCurrentTable contains objects for monitoring the non-border node PNNI routing per routing table stats during the current 24 hour interval.')
nncRoutingStatsNonBorderPerTbl24HourCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 11, 1), ).setIndexNames((0, "NNCEXTCALLROUTINGSTATS-MIB", "nncCallControlGroupNumber"), (0, "NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl24HourCurrentTableDescriptor"))
if mibBuilder.loadTexts: nncRoutingStatsNonBorderPerTbl24HourCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsNonBorderPerTbl24HourCurrentEntry.setDescription('An entry in the 24 hour current statistics table. Each conceptual row contains current statistics for the non-border node PNNI routing per routing table.')
nncNBPerTbl24HourCurrentTableDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6)))
if mibBuilder.loadTexts: nncNBPerTbl24HourCurrentTableDescriptor.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl24HourCurrentTableDescriptor.setDescription('nncTableDescriptor determines a routing table number whose stats are to be displayed.')
nncNBPerTbl24HourCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 11, 1, 3), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl24HourCurrentState.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl24HourCurrentState.setDescription('The state of the current interval. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change')
nncNBPerTbl24HourCurrentAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl24HourCurrentAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl24HourCurrentAbsoluteIntervalNumber.setDescription('The interval number of the statistics in this row.')
nncNBPerTbl24HourCurrentFailedCallsDueToInitDTLNotGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl24HourCurrentFailedCallsDueToInitDTLNotGenerated.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl24HourCurrentFailedCallsDueToInitDTLNotGenerated.setDescription('The number of failed calls due to initial DTL not generated.')
nncNBPerTbl24HourCurrentCallsGeneratingAnInitDTL = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl24HourCurrentCallsGeneratingAnInitDTL.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl24HourCurrentCallsGeneratingAnInitDTL.setDescription('The number of calls generating an initial DTL.')
nncNBPerTbl24HourCurrentDTLOrigCallsSuccessEstWithoutReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl24HourCurrentDTLOrigCallsSuccessEstWithoutReroute.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl24HourCurrentDTLOrigCallsSuccessEstWithoutReroute.setDescription('The number of DTL originated calls successfully established without reroute.')
nncNBPerTbl24HourCurrentDTLOrigCallsSuccessEstWithReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl24HourCurrentDTLOrigCallsSuccessEstWithReroute.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl24HourCurrentDTLOrigCallsSuccessEstWithReroute.setDescription('The number of DTL originated calls successfully established with reroute.')
nncNBPerTbl24HourCurrentDTLOrigCallsFailedInReRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl24HourCurrentDTLOrigCallsFailedInReRouting.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl24HourCurrentDTLOrigCallsFailedInReRouting.setDescription('The number of DTL originated calls failed in reRouting.')
nncNBPerTbl24HourCurrentSuccessCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl24HourCurrentSuccessCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl24HourCurrentSuccessCallsBdwGreaterThanRTDMinBdw.setDescription('The number of successful calls with bandwidth greater than RTD min bandwidth.')
nncNBPerTbl24HourCurrentFailedCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl24HourCurrentFailedCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl24HourCurrentFailedCallsBdwGreaterThanRTDMinBdw.setDescription('The number of failed calls with bandwidth greater than RTD min bandwidth.')
nncNBPerTbl24HourCurrentCrankbackReceivedAsDTLOriginator = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 11, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl24HourCurrentCrankbackReceivedAsDTLOriginator.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl24HourCurrentCrankbackReceivedAsDTLOriginator.setDescription('The number of crankback received as DTL originator.')
nncNBPerTbl24HourCurrentDTLsGeneratedDueToCrankback = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 11, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl24HourCurrentDTLsGeneratedDueToCrankback.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl24HourCurrentDTLsGeneratedDueToCrankback.setDescription('The number of DTLs generated due to crankback.')
nncRoutingStatsNonBorderPerTbl24HourIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 12), )
if mibBuilder.loadTexts: nncRoutingStatsNonBorderPerTbl24HourIntervalTable.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsNonBorderPerTbl24HourIntervalTable.setDescription('The nncRoutingStatsNonBorderPerTbl15MinIntervalTable contains objects for monitoring the non-border node PNNI routing per routing table stats over a 24 hour interval.')
nncRoutingStatsNonBorderPerTbl24HourIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 12, 1), ).setIndexNames((0, "NNCEXTCALLROUTINGSTATS-MIB", "nncCallControlGroupNumber"), (0, "NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl24HourIntervalNumber"), (0, "NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl24HourIntervalTableDescriptor"))
if mibBuilder.loadTexts: nncRoutingStatsNonBorderPerTbl24HourIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsNonBorderPerTbl24HourIntervalEntry.setDescription('An entry in the 24 hour inteval statistics table. Each conceptual row contains interval statistics for the non-border node PNNI routing per routing table.')
nncNBPerTbl24HourIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 12, 1, 2), Integer32())
if mibBuilder.loadTexts: nncNBPerTbl24HourIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl24HourIntervalNumber.setDescription('The interval number of the statistics in this row.')
nncNBPerTbl24HourIntervalTableDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6)))
if mibBuilder.loadTexts: nncNBPerTbl24HourIntervalTableDescriptor.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl24HourIntervalTableDescriptor.setDescription('nncTableDescriptor determines a routing table number whose stats are to be displayed.')
nncNBPerTbl24HourIntervalState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 12, 1, 4), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl24HourIntervalState.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl24HourIntervalState.setDescription('The state of the interval represented by this row. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change.')
nncNBPerTbl24HourIntervalAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl24HourIntervalAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl24HourIntervalAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncNBPerTbl24HourIntervalFailedCallsDueToInitDTLNotGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl24HourIntervalFailedCallsDueToInitDTLNotGenerated.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl24HourIntervalFailedCallsDueToInitDTLNotGenerated.setDescription('The number of failed calls due to initial DTL not generated.')
nncNBPerTbl24HourIntervalCallsGeneratingAnInitDTL = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 12, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl24HourIntervalCallsGeneratingAnInitDTL.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl24HourIntervalCallsGeneratingAnInitDTL.setDescription('The number of calls generating an initial DTL.')
nncNBPerTbl24HourIntervalDTLOrigCallsSuccessEstWithoutReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl24HourIntervalDTLOrigCallsSuccessEstWithoutReroute.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl24HourIntervalDTLOrigCallsSuccessEstWithoutReroute.setDescription('The number of DTL originated calls successfully established without reroute.')
nncNBPerTbl24HourIntervalDTLOrigCallsSuccessEstWithReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 12, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl24HourIntervalDTLOrigCallsSuccessEstWithReroute.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl24HourIntervalDTLOrigCallsSuccessEstWithReroute.setDescription('The number of DTL originated calls successfully established with reroute.')
nncNBPerTbl24HourIntervalDTLOrigCallsFailedInReRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 12, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl24HourIntervalDTLOrigCallsFailedInReRouting.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl24HourIntervalDTLOrigCallsFailedInReRouting.setDescription('The number of DTL originated calls failed in reRouting.')
nncNBPerTbl24HourIntervalSuccessCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 12, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl24HourIntervalSuccessCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl24HourIntervalSuccessCallsBdwGreaterThanRTDMinBdw.setDescription('The number of successful calls with bandwidth greater than RTD min bandwidth.')
nncNBPerTbl24HourIntervalFailedCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 12, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl24HourIntervalFailedCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl24HourIntervalFailedCallsBdwGreaterThanRTDMinBdw.setDescription('The number of failed calls with bandwidth greater than RTD min bandwidth.')
nncNBPerTbl24HourIntervalCrankbackReceivedAsDTLOriginator = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 12, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl24HourIntervalCrankbackReceivedAsDTLOriginator.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl24HourIntervalCrankbackReceivedAsDTLOriginator.setDescription('The number of crankback received as DTL originator.')
nncNBPerTbl24HourIntervalDTLsGeneratedDueToCrankback = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 12, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBPerTbl24HourIntervalDTLsGeneratedDueToCrankback.setStatus('current')
if mibBuilder.loadTexts: nncNBPerTbl24HourIntervalDTLsGeneratedDueToCrankback.setDescription('The number of DTLs generated due to crankback.')
nncRoutingStatsBorderPerTbl15MinCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 13), )
if mibBuilder.loadTexts: nncRoutingStatsBorderPerTbl15MinCurrentTable.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsBorderPerTbl15MinCurrentTable.setDescription('The nncRoutingStatsBorderPerTbl15MinCurrentTable contains objects for monitoring the border node PNNI routing per routing table stats during the current 15 minute interval.')
nncRoutingStatsBorderPerTbl15MinCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 13, 1), ).setIndexNames((0, "NNCEXTCALLROUTINGSTATS-MIB", "nncCallControlGroupNumber"), (0, "NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl15MinCurrentTableDescriptor"))
if mibBuilder.loadTexts: nncRoutingStatsBorderPerTbl15MinCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsBorderPerTbl15MinCurrentEntry.setDescription('An entry in the 15 minute current statistics table. Each conceptual row contains current statistics for the border node PNNI routing per routing table.')
nncBPerTbl15MinCurrentTableDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6)))
if mibBuilder.loadTexts: nncBPerTbl15MinCurrentTableDescriptor.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl15MinCurrentTableDescriptor.setDescription('nncTableDescriptor determines a routing table number whose stats are to be displayed.')
nncBPerTbl15MinCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 13, 1, 3), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl15MinCurrentState.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl15MinCurrentState.setDescription('The state of the current interval. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change')
nncBPerTbl15MinCurrentAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl15MinCurrentAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl15MinCurrentAbsoluteIntervalNumber.setDescription('The interval number of the statistics in this row.')
nncBPerTbl15MinCurrentFailedCallsDueInitLowerLvlDTLsNotGen = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl15MinCurrentFailedCallsDueInitLowerLvlDTLsNotGen.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl15MinCurrentFailedCallsDueInitLowerLvlDTLsNotGen.setDescription('The number of failed calls generating initial lower level DTLs.')
nncBPerTbl15MinCurrentCallsGeneratingInitLowerLvlDTLs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl15MinCurrentCallsGeneratingInitLowerLvlDTLs.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl15MinCurrentCallsGeneratingInitLowerLvlDTLs.setDescription('The number of calls generating initial lower level DTLs.')
nncBPerTbl15MinCurrentDTLGenCallsSuccessEstWithoutReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl15MinCurrentDTLGenCallsSuccessEstWithoutReroute.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl15MinCurrentDTLGenCallsSuccessEstWithoutReroute.setDescription('The number of DTL generated calls successfully established without reroute.')
nncBPerTbl15MinCurrentDTLGenCallsSuccessEstWithReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl15MinCurrentDTLGenCallsSuccessEstWithReroute.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl15MinCurrentDTLGenCallsSuccessEstWithReroute.setDescription('The number of DTL generated calls successfully established with reroute.')
nncBPerTbl15MinCurrentDTLGenCallsFailedInReRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl15MinCurrentDTLGenCallsFailedInReRouting.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl15MinCurrentDTLGenCallsFailedInReRouting.setDescription('The number of DTL generated calls failed in rerouting.')
nncBPerTbl15MinCurrentSuccessCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 13, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl15MinCurrentSuccessCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl15MinCurrentSuccessCallsBdwGreaterThanRTDMinBdw.setDescription('The number of successful calls with bandwidth greater than RTD min bandwidth.')
nncBPerTbl15MinCurrentFailedCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 13, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl15MinCurrentFailedCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl15MinCurrentFailedCallsBdwGreaterThanRTDMinBdw.setDescription('The number of failed calls with bandwidth greater than RTD min bandwidth.')
nncBPerTbl15MinCurrentCrankbackReceivedAsAnEntryBorderNode = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 13, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl15MinCurrentCrankbackReceivedAsAnEntryBorderNode.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl15MinCurrentCrankbackReceivedAsAnEntryBorderNode.setDescription('The number of crankback received as an entry border node.')
nncBPerTbl15MinCurrentLowerLvlDTLsGenDueToRecdCrankback = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 13, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl15MinCurrentLowerLvlDTLsGenDueToRecdCrankback.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl15MinCurrentLowerLvlDTLsGenDueToRecdCrankback.setDescription('The number of lower Level DTLs generated due to received crankback.')
nncRoutingStatsBorderPerTbl15MinIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 14), )
if mibBuilder.loadTexts: nncRoutingStatsBorderPerTbl15MinIntervalTable.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsBorderPerTbl15MinIntervalTable.setDescription('The nncRoutingStatsBorderPerTbl15MinIntervalTable contains objects for monitoring the border node PNNI routing per routing table stats over a 15 minute interval.')
nncRoutingStatsBorderPerTbl15MinIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 14, 1), ).setIndexNames((0, "NNCEXTCALLROUTINGSTATS-MIB", "nncCallControlGroupNumber"), (0, "NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl15MinIntervalNumber"), (0, "NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl15MinIntervalTableDescriptor"))
if mibBuilder.loadTexts: nncRoutingStatsBorderPerTbl15MinIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsBorderPerTbl15MinIntervalEntry.setDescription('An entry in the 15 minute interval statistics table. Each conceptual row contains interval statistics for the border node PNNI routing per routing table.')
nncBPerTbl15MinIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: nncBPerTbl15MinIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl15MinIntervalNumber.setDescription('The interval number of the statistics in this row.')
nncBPerTbl15MinIntervalTableDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6)))
if mibBuilder.loadTexts: nncBPerTbl15MinIntervalTableDescriptor.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl15MinIntervalTableDescriptor.setDescription('nncTableDescriptor determines a routing table number whose stats are to be displayed.')
nncBPerTbl15MinIntervalState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 14, 1, 4), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl15MinIntervalState.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl15MinIntervalState.setDescription('The state of the interval represented by this row. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change.')
nncBPerTbl15MinIntervalAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 14, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl15MinIntervalAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl15MinIntervalAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncBPerTbl15MinIntervalFailedCallsDueInitLowerLvlDTLsNotGen = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 14, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl15MinIntervalFailedCallsDueInitLowerLvlDTLsNotGen.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl15MinIntervalFailedCallsDueInitLowerLvlDTLsNotGen.setDescription('The number of failed calls generating initial lower level DTLs.')
nncBPerTbl15MinIntervalCallsGeneratingInitLowerLvlDTLs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 14, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl15MinIntervalCallsGeneratingInitLowerLvlDTLs.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl15MinIntervalCallsGeneratingInitLowerLvlDTLs.setDescription('The number of calls generating initial lower level DTLs.')
nncBPerTbl15MinIntervalDTLGenCallsSuccessEstWithoutReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 14, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl15MinIntervalDTLGenCallsSuccessEstWithoutReroute.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl15MinIntervalDTLGenCallsSuccessEstWithoutReroute.setDescription('The number of DTL generated calls successfully established without reroute.')
nncBPerTbl15MinIntervalDTLGenCallsSuccessEstWithReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 14, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl15MinIntervalDTLGenCallsSuccessEstWithReroute.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl15MinIntervalDTLGenCallsSuccessEstWithReroute.setDescription('The number of DTL generated calls successfully established with reroute.')
nncBPerTbl15MinIntervalDTLGenCallsFailedInReRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 14, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl15MinIntervalDTLGenCallsFailedInReRouting.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl15MinIntervalDTLGenCallsFailedInReRouting.setDescription('The number of DTL generated calls failed in rerouting.')
nncBPerTbl15MinIntervalSuccessCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 14, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl15MinIntervalSuccessCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl15MinIntervalSuccessCallsBdwGreaterThanRTDMinBdw.setDescription('The number of successful calls with bandwidth greater than RTD min bandwidth.')
nncBPerTbl15MinIntervalFailedCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 14, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl15MinIntervalFailedCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl15MinIntervalFailedCallsBdwGreaterThanRTDMinBdw.setDescription('The number of failed calls with bandwidth greater than RTD min bandwidth.')
nncBPerTbl15MinIntervalCrankbackReceivedAsAnEntryBorderNode = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 14, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl15MinIntervalCrankbackReceivedAsAnEntryBorderNode.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl15MinIntervalCrankbackReceivedAsAnEntryBorderNode.setDescription('The number of crankback received as an entry border node.')
nncBPerTbl15MinIntervalLowerLvlDTLsGenDueToRecdCrankback = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 14, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl15MinIntervalLowerLvlDTLsGenDueToRecdCrankback.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl15MinIntervalLowerLvlDTLsGenDueToRecdCrankback.setDescription('The number of lower Level DTLs generated due to received crankback.')
nncRoutingStatsBorderPerTbl24HourCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 15), )
if mibBuilder.loadTexts: nncRoutingStatsBorderPerTbl24HourCurrentTable.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsBorderPerTbl24HourCurrentTable.setDescription('The nncRoutingStatsBorderPerTbl15MinCurrentTable contains objects for monitoring the border node PNNI routing per routing table stats during the current 24 hour interval.')
nncRoutingStatsBorderPerTbl24HourCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 15, 1), ).setIndexNames((0, "NNCEXTCALLROUTINGSTATS-MIB", "nncCallControlGroupNumber"), (0, "NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl24HourCurrentTableDescriptor"))
if mibBuilder.loadTexts: nncRoutingStatsBorderPerTbl24HourCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsBorderPerTbl24HourCurrentEntry.setDescription('An entry in the 24 hour current statistics table. Each conceptual row contains current statistics for the border node PNNI routing per routing table.')
nncBPerTbl24HourCurrentTableDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6)))
if mibBuilder.loadTexts: nncBPerTbl24HourCurrentTableDescriptor.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl24HourCurrentTableDescriptor.setDescription('nncTableDescriptor determines a routing table number whose stats are to be displayed.')
nncBPerTbl24HourCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 15, 1, 3), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl24HourCurrentState.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl24HourCurrentState.setDescription('The state of the current interval. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change')
nncBPerTbl24HourCurrentAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 15, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl24HourCurrentAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl24HourCurrentAbsoluteIntervalNumber.setDescription('The interval number of the statistics in this row.')
nncBPerTbl24HourCurrentFailedCallsDueInitLowerLvlDTLsNotGen = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 15, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl24HourCurrentFailedCallsDueInitLowerLvlDTLsNotGen.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl24HourCurrentFailedCallsDueInitLowerLvlDTLsNotGen.setDescription('The number of failed calls generating initial lower level DTLs.')
nncBPerTbl24HourCurrentCallsGeneratingInitLowerLvlDTLs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 15, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl24HourCurrentCallsGeneratingInitLowerLvlDTLs.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl24HourCurrentCallsGeneratingInitLowerLvlDTLs.setDescription('The number of calls generating initial lower level DTLs.')
nncBPerTbl24HourCurrentDTLGenCallsSuccessEstWithoutReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 15, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl24HourCurrentDTLGenCallsSuccessEstWithoutReroute.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl24HourCurrentDTLGenCallsSuccessEstWithoutReroute.setDescription('The number of DTL generated calls successfully established without reroute.')
nncBPerTbl24HourCurrentDTLGenCallsSuccessEstWithReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 15, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl24HourCurrentDTLGenCallsSuccessEstWithReroute.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl24HourCurrentDTLGenCallsSuccessEstWithReroute.setDescription('The number of DTL generated calls successfully established with reroute.')
nncBPerTbl24HourCurrentDTLGenCallsFailedInReRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 15, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl24HourCurrentDTLGenCallsFailedInReRouting.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl24HourCurrentDTLGenCallsFailedInReRouting.setDescription('The number of DTL generated calls failed in rerouting.')
nncBPerTbl24HourCurrentSuccessCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 15, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl24HourCurrentSuccessCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl24HourCurrentSuccessCallsBdwGreaterThanRTDMinBdw.setDescription('The number of successful calls with bandwidth greater than RTD min bandwidth.')
nncBPerTbl24HourCurrentFailedCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 15, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl24HourCurrentFailedCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl24HourCurrentFailedCallsBdwGreaterThanRTDMinBdw.setDescription('The number of failed calls with bandwidth greater than RTD min bandwidth.')
nncBPerTbl24HourCurrentCrankbackReceivedAsAnEntryBorderNode = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 15, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl24HourCurrentCrankbackReceivedAsAnEntryBorderNode.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl24HourCurrentCrankbackReceivedAsAnEntryBorderNode.setDescription('The number of crankback received as an entry border node.')
nncBPerTbl24HourCurrentLowerLvlDTLsGenDueToRecdCrankback = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 15, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl24HourCurrentLowerLvlDTLsGenDueToRecdCrankback.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl24HourCurrentLowerLvlDTLsGenDueToRecdCrankback.setDescription('The number of lower Level DTLs generated due to received crankback.')
nncRoutingStatsBorderPerTbl24HourIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 16), )
if mibBuilder.loadTexts: nncRoutingStatsBorderPerTbl24HourIntervalTable.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsBorderPerTbl24HourIntervalTable.setDescription('The nncRoutingStatsBorderPerTbl24HourIntervalTable contains objects for monitoring the border node PNNI routing per routing table stats over a 24 hour interval.')
nncRoutingStatsBorderPerTbl24HourIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 16, 1), ).setIndexNames((0, "NNCEXTCALLROUTINGSTATS-MIB", "nncCallControlGroupNumber"), (0, "NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl24HourIntervalNumber"), (0, "NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl24HourIntervalTableDescriptor"))
if mibBuilder.loadTexts: nncRoutingStatsBorderPerTbl24HourIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsBorderPerTbl24HourIntervalEntry.setDescription('An entry in the 24 hour interval statistics table. Each conceptual row contains interval statistics for the border node PNNI routing per routing table.')
nncBPerTbl24HourIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 16, 1, 2), Integer32())
if mibBuilder.loadTexts: nncBPerTbl24HourIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl24HourIntervalNumber.setDescription('The interval number of the statistics in this row.')
nncBPerTbl24HourIntervalTableDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 16, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6)))
if mibBuilder.loadTexts: nncBPerTbl24HourIntervalTableDescriptor.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl24HourIntervalTableDescriptor.setDescription('nncTableDescriptor determines a routing table number whose stats are to be displayed.')
nncBPerTbl24HourIntervalState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 16, 1, 4), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl24HourIntervalState.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl24HourIntervalState.setDescription('The state of the interval represented by this row. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change.')
nncBPerTbl24HourIntervalAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 16, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl24HourIntervalAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl24HourIntervalAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncBPerTbl24HourIntervalFailedCallsDueInitLowerLvlDTLsNotGen = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 16, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl24HourIntervalFailedCallsDueInitLowerLvlDTLsNotGen.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl24HourIntervalFailedCallsDueInitLowerLvlDTLsNotGen.setDescription('The number of failed calls generating initial lower level DTLs.')
nncBPerTbl24HourIntervalCallsGeneratingInitLowerLvlDTLs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 16, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl24HourIntervalCallsGeneratingInitLowerLvlDTLs.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl24HourIntervalCallsGeneratingInitLowerLvlDTLs.setDescription('The number of calls generating initial lower level DTLs.')
nncBPerTbl24HourIntervalDTLGenCallsSuccessEstWithoutReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 16, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl24HourIntervalDTLGenCallsSuccessEstWithoutReroute.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl24HourIntervalDTLGenCallsSuccessEstWithoutReroute.setDescription('The number of DTL generated calls successfully established without reroute.')
nncBPerTbl24HourIntervalDTLGenCallsSuccessEstWithReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 16, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl24HourIntervalDTLGenCallsSuccessEstWithReroute.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl24HourIntervalDTLGenCallsSuccessEstWithReroute.setDescription('The number of DTL generated calls successfully established with reroute.')
nncBPerTbl24HourIntervalDTLGenCallsFailedInReRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 16, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl24HourIntervalDTLGenCallsFailedInReRouting.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl24HourIntervalDTLGenCallsFailedInReRouting.setDescription('The number of DTL generated calls failed in rerouting.')
nncBPerTbl24HourIntervalSuccessCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 16, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl24HourIntervalSuccessCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl24HourIntervalSuccessCallsBdwGreaterThanRTDMinBdw.setDescription('The number of successful calls with bandwidth greater than RTD min bandwidth.')
nncBPerTbl24HourIntervalFailedCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 16, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl24HourIntervalFailedCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl24HourIntervalFailedCallsBdwGreaterThanRTDMinBdw.setDescription('The number of failed calls with bandwidth greater than RTD min bandwidth.')
nncBPerTbl24HourIntervalCrankbackReceivedAsAnEntryBorderNode = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 16, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl24HourIntervalCrankbackReceivedAsAnEntryBorderNode.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl24HourIntervalCrankbackReceivedAsAnEntryBorderNode.setDescription('The number of crankback received as an entry border node.')
nncBPerTbl24HourIntervalLowerLvlDTLsGenDueToRecdCrankback = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 16, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBPerTbl24HourIntervalLowerLvlDTLsGenDueToRecdCrankback.setStatus('current')
if mibBuilder.loadTexts: nncBPerTbl24HourIntervalLowerLvlDTLsGenDueToRecdCrankback.setDescription('The number of lower Level DTLs generated due to received crankback.')
nncRoutingStatsNonBorderTotal15MinCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 17), )
if mibBuilder.loadTexts: nncRoutingStatsNonBorderTotal15MinCurrentTable.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsNonBorderTotal15MinCurrentTable.setDescription('The nncRoutingStatsNonBorderTotal15MinCurrentTable contains objects for monitoring the non-border node PNNI routing total stats during the current 15 minute interval.')
nncRoutingStatsNonBorderTotal15MinCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 17, 1), ).setIndexNames((0, "NNCEXTCALLROUTINGSTATS-MIB", "nncCallControlGroupNumber"))
if mibBuilder.loadTexts: nncRoutingStatsNonBorderTotal15MinCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsNonBorderTotal15MinCurrentEntry.setDescription('An entry in the 15 minute current statistics table. Each conceptual row contains current total for the non-border node PNNI routing stats.')
nncNBTotal15MinCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 17, 1, 2), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal15MinCurrentState.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal15MinCurrentState.setDescription('The state of the current interval. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change.')
nncNBTotal15MinCurrentAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 17, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal15MinCurrentAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal15MinCurrentAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncNBTotal15MinCurrentFailedCallsDueToInitDTLNotGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 17, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal15MinCurrentFailedCallsDueToInitDTLNotGenerated.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal15MinCurrentFailedCallsDueToInitDTLNotGenerated.setDescription('The number of failed calls due to initial DTL not generated.')
nncNBTotal15MinCurrentCallsGeneratingAnInitDTL = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 17, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal15MinCurrentCallsGeneratingAnInitDTL.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal15MinCurrentCallsGeneratingAnInitDTL.setDescription('The number of calls generating an initial DTL.')
nncNBTotal15MinCurrentDTLOrigCallsSuccessEstWithoutReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal15MinCurrentDTLOrigCallsSuccessEstWithoutReroute.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal15MinCurrentDTLOrigCallsSuccessEstWithoutReroute.setDescription('The number of DTL originated calls successfully established without reroute.')
nncNBTotal15MinCurrentDTLOrigCallsSuccessEstWithReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 17, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal15MinCurrentDTLOrigCallsSuccessEstWithReroute.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal15MinCurrentDTLOrigCallsSuccessEstWithReroute.setDescription('The number of DTL originated calls successfully established with reroute.')
nncNBTotal15MinCurrentDTLOrigCallsFailedInReRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 17, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal15MinCurrentDTLOrigCallsFailedInReRouting.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal15MinCurrentDTLOrigCallsFailedInReRouting.setDescription('The number of DTL originated calls failed in rerouting.')
nncNBTotal15MinCurrentSuccessCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 17, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal15MinCurrentSuccessCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal15MinCurrentSuccessCallsBdwGreaterThanRTDMinBdw.setDescription('The number of successful calls with bandwidth greater than RTD min bandwidth.')
nncNBTotal15MinCurrentFailedCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 17, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal15MinCurrentFailedCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal15MinCurrentFailedCallsBdwGreaterThanRTDMinBdw.setDescription('The number of failed calls with bandwidth greater than RTD min bandwidth.')
nncNBTotal15MinCurrentCrankbackReceivedAsDTLOriginator = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 17, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal15MinCurrentCrankbackReceivedAsDTLOriginator.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal15MinCurrentCrankbackReceivedAsDTLOriginator.setDescription('The number of crankback received as DTL originator.')
nncNBTotal15MinCurrentDTLsGeneratedDueToCrankback = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 17, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal15MinCurrentDTLsGeneratedDueToCrankback.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal15MinCurrentDTLsGeneratedDueToCrankback.setDescription('The number of DTLs generated due to crankback.')
nncNBTotal15MinCurrentCallsRecdAsTransitNodeOverInsideLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 17, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal15MinCurrentCallsRecdAsTransitNodeOverInsideLinks.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal15MinCurrentCallsRecdAsTransitNodeOverInsideLinks.setDescription('The number of calls received as transit node over inside links.')
nncNBTotal15MinCurrentCrnkbksRecdAsTransitNodeOvInsideLnks = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 17, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal15MinCurrentCrnkbksRecdAsTransitNodeOvInsideLnks.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal15MinCurrentCrnkbksRecdAsTransitNodeOvInsideLnks.setDescription('The number of crankbacks received as transit node over inside links.')
nncNBTotal15MinCurrentSucdEndBlocCrnkbksRecdOvInsideLnks = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 17, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal15MinCurrentSucdEndBlocCrnkbksRecdOvInsideLnks.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal15MinCurrentSucdEndBlocCrnkbksRecdOvInsideLnks.setDescription('The number of succeeding end blocked crankbacks received over inside links.')
nncRoutingStatsNonBorderTotal15MinIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 18), )
if mibBuilder.loadTexts: nncRoutingStatsNonBorderTotal15MinIntervalTable.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsNonBorderTotal15MinIntervalTable.setDescription('The nncRoutingStatsNonBorderTotal15MinIntervalTable contains objects for monitoring the non-border node PNNI routing total stats during the current 15 minute interval.')
nncRoutingStatsNonBorderTotal15MinIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 18, 1), ).setIndexNames((0, "NNCEXTCALLROUTINGSTATS-MIB", "nncCallControlGroupNumber"), (0, "NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal15MinIntervalNumber"))
if mibBuilder.loadTexts: nncRoutingStatsNonBorderTotal15MinIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsNonBorderTotal15MinIntervalEntry.setDescription('An entry in the 15 minute current statistics table. Each conceptual row contains current total for the non-border node PNNI routing stats.')
nncNBTotal15MinIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: nncNBTotal15MinIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal15MinIntervalNumber.setDescription('The interval number of the statistics in this row.')
nncNBTotal15MinIntervalState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 18, 1, 3), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal15MinIntervalState.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal15MinIntervalState.setDescription('The state of the interval represented by this row. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change.')
nncNBTotal15MinIntervalAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 18, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal15MinIntervalAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal15MinIntervalAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncNBTotal15MinIntervalFailedCallsDueToInitDTLNotGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 18, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal15MinIntervalFailedCallsDueToInitDTLNotGenerated.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal15MinIntervalFailedCallsDueToInitDTLNotGenerated.setDescription('The number of failed calls due to initial DTL not generated.')
nncNBTotal15MinIntervalCallsGeneratingAnInitDTL = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 18, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal15MinIntervalCallsGeneratingAnInitDTL.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal15MinIntervalCallsGeneratingAnInitDTL.setDescription('The number of calls generating an initial DTL.')
nncNBTotal15MinIntervalDTLOrigCallsSuccessEstWithoutReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 18, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal15MinIntervalDTLOrigCallsSuccessEstWithoutReroute.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal15MinIntervalDTLOrigCallsSuccessEstWithoutReroute.setDescription('The number of DTL originated calls successfully established without reroute.')
nncNBTotal15MinIntervalDTLOrigCallsSuccessEstWithReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 18, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal15MinIntervalDTLOrigCallsSuccessEstWithReroute.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal15MinIntervalDTLOrigCallsSuccessEstWithReroute.setDescription('The number of DTL originated calls successfully established with reroute.')
nncNBTotal15MinIntervalDTLOrigCallsFailedInReRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 18, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal15MinIntervalDTLOrigCallsFailedInReRouting.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal15MinIntervalDTLOrigCallsFailedInReRouting.setDescription('The number of DTL originated calls failed in rerouting.')
nncNBTotal15MinIntervalSuccessCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 18, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal15MinIntervalSuccessCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal15MinIntervalSuccessCallsBdwGreaterThanRTDMinBdw.setDescription('The number of successful calls with bandwidth greater than RTD min bandwidth.')
nncNBTotal15MinIntervalFailedCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 18, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal15MinIntervalFailedCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal15MinIntervalFailedCallsBdwGreaterThanRTDMinBdw.setDescription('The number of failed calls with bandwidth greater than RTD min bandwidth.')
nncNBTotal15MinIntervalCrankbackReceivedAsDTLOriginator = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 18, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal15MinIntervalCrankbackReceivedAsDTLOriginator.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal15MinIntervalCrankbackReceivedAsDTLOriginator.setDescription('The number of crankback received as DTL originator.')
nncNBTotal15MinIntervalDTLsGeneratedDueToCrankback = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 18, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal15MinIntervalDTLsGeneratedDueToCrankback.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal15MinIntervalDTLsGeneratedDueToCrankback.setDescription('The number of DTLs generated due to crankback.')
nncNBTotal15MinIntervalCallsRecdAsTransitNodeOverInsideLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 18, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal15MinIntervalCallsRecdAsTransitNodeOverInsideLinks.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal15MinIntervalCallsRecdAsTransitNodeOverInsideLinks.setDescription('The number of calls received as transit node over inside links.')
nncNBTotal15MinIntervalCrnkbksRecdAsTransitNodeOvInsideLnks = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 18, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal15MinIntervalCrnkbksRecdAsTransitNodeOvInsideLnks.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal15MinIntervalCrnkbksRecdAsTransitNodeOvInsideLnks.setDescription('The number of calls received as transit node over inside links.')
nncNBTotal15MinIntervalSucdEndBlocCrnkbksRecdOvInsideLnks = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 18, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal15MinIntervalSucdEndBlocCrnkbksRecdOvInsideLnks.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal15MinIntervalSucdEndBlocCrnkbksRecdOvInsideLnks.setDescription('The number of succeeding end blocked crankbacks received over inside links.')
nncRoutingStatsNonBorderTotal24HourCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 19), )
if mibBuilder.loadTexts: nncRoutingStatsNonBorderTotal24HourCurrentTable.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsNonBorderTotal24HourCurrentTable.setDescription('The nncRoutingStatsNonBorderTotal24HourCurrentTable contains objects for monitoring the non-border node PNNI routing total stats during the current 24 hour interval.')
nncRoutingStatsNonBorderTotal24HourCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 19, 1), ).setIndexNames((0, "NNCEXTCALLROUTINGSTATS-MIB", "nncCallControlGroupNumber"))
if mibBuilder.loadTexts: nncRoutingStatsNonBorderTotal24HourCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsNonBorderTotal24HourCurrentEntry.setDescription('An entry in the 24 hour current statistics table. Each conceptual row contains current total for the non-border node PNNI routing stats.')
nncNBTotal24HourCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 19, 1, 2), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal24HourCurrentState.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal24HourCurrentState.setDescription('The state of the current interval. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change.')
nncNBTotal24HourCurrentAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 19, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal24HourCurrentAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal24HourCurrentAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncNBTotal24HourCurrentFailedCallsDueToInitDTLNotGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 19, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal24HourCurrentFailedCallsDueToInitDTLNotGenerated.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal24HourCurrentFailedCallsDueToInitDTLNotGenerated.setDescription('The number of failed calls due to initial DTL not generated.')
nncNBTotal24HourCurrentCallsGeneratingAnInitDTL = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 19, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal24HourCurrentCallsGeneratingAnInitDTL.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal24HourCurrentCallsGeneratingAnInitDTL.setDescription('The number of calls generating an initial DTL.')
nncNBTotal24HourCurrentDTLOrigCallsSuccessEstWithoutReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 19, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal24HourCurrentDTLOrigCallsSuccessEstWithoutReroute.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal24HourCurrentDTLOrigCallsSuccessEstWithoutReroute.setDescription('The number of DTL originated calls successfully established without reroute.')
nncNBTotal24HourCurrentDTLOrigCallsSuccessEstWithReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 19, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal24HourCurrentDTLOrigCallsSuccessEstWithReroute.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal24HourCurrentDTLOrigCallsSuccessEstWithReroute.setDescription('The number of DTL originated calls successfully established with reroute.')
nncNBTotal24HourCurrentDTLOrigCallsFailedInReRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 19, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal24HourCurrentDTLOrigCallsFailedInReRouting.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal24HourCurrentDTLOrigCallsFailedInReRouting.setDescription('The number of DTL originated calls failed in rerouting.')
nncNBTotal24HourCurrentSuccessCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 19, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal24HourCurrentSuccessCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal24HourCurrentSuccessCallsBdwGreaterThanRTDMinBdw.setDescription('The number of successful calls with bandwidth greater than RTD min bandwidth.')
nncNBTotal24HourCurrentFailedCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 19, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal24HourCurrentFailedCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal24HourCurrentFailedCallsBdwGreaterThanRTDMinBdw.setDescription('The number of failed calls with bandwidth greater than RTD min bandwidth.')
nncNBTotal24HourCurrentCrankbackReceivedAsDTLOriginator = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 19, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal24HourCurrentCrankbackReceivedAsDTLOriginator.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal24HourCurrentCrankbackReceivedAsDTLOriginator.setDescription('The number of crankback received as DTL originator.')
nncNBTotal24HourCurrentDTLsGeneratedDueToCrankback = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 19, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal24HourCurrentDTLsGeneratedDueToCrankback.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal24HourCurrentDTLsGeneratedDueToCrankback.setDescription('The number of DTLs generated due to crankback.')
nncNBTotal24HourCurrentCallsRecdAsTransitNodeOverInsideLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 19, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal24HourCurrentCallsRecdAsTransitNodeOverInsideLinks.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal24HourCurrentCallsRecdAsTransitNodeOverInsideLinks.setDescription('The number of calls received as transit node over inside links.')
nncNBTotal24HourCurrentCrnkbksRecdAsTransNodeOvInsideLnks = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 19, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal24HourCurrentCrnkbksRecdAsTransNodeOvInsideLnks.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal24HourCurrentCrnkbksRecdAsTransNodeOvInsideLnks.setDescription('The number of calls received as transit node over inside links.')
nncNBTotal24HourCurrentSucdEndBlocCrnkbksRecdOverInsideLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 19, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal24HourCurrentSucdEndBlocCrnkbksRecdOverInsideLinks.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal24HourCurrentSucdEndBlocCrnkbksRecdOverInsideLinks.setDescription('The number of succeeding end blocked crankbacks received over inside links.')
nncRoutingStatsNonBorderTotal24HourIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 20), )
if mibBuilder.loadTexts: nncRoutingStatsNonBorderTotal24HourIntervalTable.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsNonBorderTotal24HourIntervalTable.setDescription('The nncRoutingStatsNonBorderTotal24HourIntervalTable contains objects for monitoring the non-border node PNNI routing total stats during the 24 hour interval.')
nncRoutingStatsNonBorderTotal24HourIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 20, 1), ).setIndexNames((0, "NNCEXTCALLROUTINGSTATS-MIB", "nncCallControlGroupNumber"), (0, "NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourIntervalNumber"))
if mibBuilder.loadTexts: nncRoutingStatsNonBorderTotal24HourIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsNonBorderTotal24HourIntervalEntry.setDescription('An entry in the 24 hour interval statistics table. Each conceptual row contains current total for the non-border node PNNI routing stats.')
nncNBTotal24HourIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 20, 1, 2), Integer32())
if mibBuilder.loadTexts: nncNBTotal24HourIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal24HourIntervalNumber.setDescription('The interval number of the statistics in this row.')
nncNBTotal24HourIntervalState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 20, 1, 3), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal24HourIntervalState.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal24HourIntervalState.setDescription('The state of the interval represented by this row. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change.')
nncNBTotal24HourIntervalAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 20, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal24HourIntervalAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal24HourIntervalAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncNBTotal24HourIntervalFailedCallsDueToInitDTLNotGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 20, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal24HourIntervalFailedCallsDueToInitDTLNotGenerated.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal24HourIntervalFailedCallsDueToInitDTLNotGenerated.setDescription('The number of failed calls due to initial DTL not generated.')
nncNBTotal24HourIntervalCallsGeneratingAnInitDTL = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 20, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal24HourIntervalCallsGeneratingAnInitDTL.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal24HourIntervalCallsGeneratingAnInitDTL.setDescription('The number of calls generating an initial DTL.')
nncNBTotal24HourIntervalDTLOrigCallsSuccessEstWithoutReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 20, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal24HourIntervalDTLOrigCallsSuccessEstWithoutReroute.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal24HourIntervalDTLOrigCallsSuccessEstWithoutReroute.setDescription('The number of DTL originated calls successfully established without reroute.')
nncNBTotal24HourIntervalDTLOrigCallsSuccessEstWithReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 20, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal24HourIntervalDTLOrigCallsSuccessEstWithReroute.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal24HourIntervalDTLOrigCallsSuccessEstWithReroute.setDescription('The number of DTL originated calls successfully established with reroute.')
nncNBTotal24HourIntervalDTLOrigCallsFailedInReRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 20, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal24HourIntervalDTLOrigCallsFailedInReRouting.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal24HourIntervalDTLOrigCallsFailedInReRouting.setDescription('The number of DTL originated calls failed in rerouting.')
nncNBTotal24HourIntervalSuccessCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 20, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal24HourIntervalSuccessCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal24HourIntervalSuccessCallsBdwGreaterThanRTDMinBdw.setDescription('The number of successful calls with bandwidth greater than RTD min bandwidth.')
nncNBTotal24HourIntervalFailedCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 20, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal24HourIntervalFailedCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal24HourIntervalFailedCallsBdwGreaterThanRTDMinBdw.setDescription('The number of failed calls with bandwidth greater than RTD min bandwidth.')
nncNBTotal24HourIntervalCrankbackReceivedAsDTLOriginator = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 20, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal24HourIntervalCrankbackReceivedAsDTLOriginator.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal24HourIntervalCrankbackReceivedAsDTLOriginator.setDescription('The number of crankback received as DTL originator.')
nncNBTotal24HourIntervalDTLsGeneratedDueToCrankback = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 20, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal24HourIntervalDTLsGeneratedDueToCrankback.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal24HourIntervalDTLsGeneratedDueToCrankback.setDescription('The number of DTLs generated due to crankback.')
nncNBTotal24HourIntervalCallsRecdAsTransitNodeOverInsideLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 20, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal24HourIntervalCallsRecdAsTransitNodeOverInsideLinks.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal24HourIntervalCallsRecdAsTransitNodeOverInsideLinks.setDescription('The number of calls received as transit node over inside links.')
nncNBTotal24HourIntervalCrnkbksRecdAsTransNodeOverInsideLnks = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 20, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal24HourIntervalCrnkbksRecdAsTransNodeOverInsideLnks.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal24HourIntervalCrnkbksRecdAsTransNodeOverInsideLnks.setDescription('The number of calls received as transit node over inside links.')
nncNBTotal24HourIntervalSucdEndBlocCrnkbksRecdOverInsideLnks = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 20, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNBTotal24HourIntervalSucdEndBlocCrnkbksRecdOverInsideLnks.setStatus('current')
if mibBuilder.loadTexts: nncNBTotal24HourIntervalSucdEndBlocCrnkbksRecdOverInsideLnks.setDescription('The number of succeeding end blocked crankbacks received over inside links.')
nncRoutingStatsBorderTotal15MinCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 21), )
if mibBuilder.loadTexts: nncRoutingStatsBorderTotal15MinCurrentTable.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsBorderTotal15MinCurrentTable.setDescription('The nncRoutingStatsBorderTotal15MinCurrentTable contains objects for monitoring the border node PNNI routing total stats during the current 15 minute interval.')
nncRoutingStatsBorderTotal15MinCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 21, 1), ).setIndexNames((0, "NNCEXTCALLROUTINGSTATS-MIB", "nncCallControlGroupNumber"))
if mibBuilder.loadTexts: nncRoutingStatsBorderTotal15MinCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsBorderTotal15MinCurrentEntry.setDescription('An entry in the 15 minute current statistics table. Each conceptual row contains current total for the border node PNNI routing stats.')
nncBTotal15MinCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 21, 1, 2), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal15MinCurrentState.setStatus('current')
if mibBuilder.loadTexts: nncBTotal15MinCurrentState.setDescription('The state of the current interval. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change.')
nncBTotal15MinCurrentAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 21, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal15MinCurrentAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncBTotal15MinCurrentAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncBTotal15MinCurrentFailedCallsDueToInitLowerLvlDTLNotGen = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 21, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal15MinCurrentFailedCallsDueToInitLowerLvlDTLNotGen.setStatus('current')
if mibBuilder.loadTexts: nncBTotal15MinCurrentFailedCallsDueToInitLowerLvlDTLNotGen.setDescription('The number of failed calls due to initial lower level DTL not generated.')
nncBTotal15MinCurrentCallsGeneratingInitLowerLvlDTLs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 21, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal15MinCurrentCallsGeneratingInitLowerLvlDTLs.setStatus('current')
if mibBuilder.loadTexts: nncBTotal15MinCurrentCallsGeneratingInitLowerLvlDTLs.setDescription('The number of calls generating initial lower level DTLs.')
nncBTotal15MinCurrentDTLGenCallsSuccessEstWithoutReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 21, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal15MinCurrentDTLGenCallsSuccessEstWithoutReroute.setStatus('current')
if mibBuilder.loadTexts: nncBTotal15MinCurrentDTLGenCallsSuccessEstWithoutReroute.setDescription('The number of DTL generated calls successfully established without reroute.')
nncBTotal15MinCurrentDTLGenCallsSuccessEstWithReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 21, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal15MinCurrentDTLGenCallsSuccessEstWithReroute.setStatus('current')
if mibBuilder.loadTexts: nncBTotal15MinCurrentDTLGenCallsSuccessEstWithReroute.setDescription('The number of DTL generated calls successfully established with reroute.')
nncBTotal15MinCurrentDTLGenCallsFailedInReRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 21, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal15MinCurrentDTLGenCallsFailedInReRouting.setStatus('current')
if mibBuilder.loadTexts: nncBTotal15MinCurrentDTLGenCallsFailedInReRouting.setDescription('The number of DTL generated calls failed in rerouting.')
nncBTotal15MinCurrentSuccessCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 21, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal15MinCurrentSuccessCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncBTotal15MinCurrentSuccessCallsBdwGreaterThanRTDMinBdw.setDescription('The number of successful calls with bandwidth greater than RTD min bandwidth.')
nncBTotal15MinCurrentFailedCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 21, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal15MinCurrentFailedCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncBTotal15MinCurrentFailedCallsBdwGreaterThanRTDMinBdw.setDescription('The number of failed calls with bandwidth greater than RTD min bandwidth.')
nncBTotal15MinCurrentCrankbackReceivedAsAnEntryBorderNode = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 21, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal15MinCurrentCrankbackReceivedAsAnEntryBorderNode.setStatus('current')
if mibBuilder.loadTexts: nncBTotal15MinCurrentCrankbackReceivedAsAnEntryBorderNode.setDescription('The number of crankback received as an entry border node.')
nncBTotal15MinCurrentLowerLvlDTLsGenDueToRecdCrankback = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 21, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal15MinCurrentLowerLvlDTLsGenDueToRecdCrankback.setStatus('current')
if mibBuilder.loadTexts: nncBTotal15MinCurrentLowerLvlDTLsGenDueToRecdCrankback.setDescription('The number of lower level DTLs generated due to received crankback.')
nncBTotal15MinCurrentCallsRecdOverAnOutsideLink = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 21, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal15MinCurrentCallsRecdOverAnOutsideLink.setStatus('current')
if mibBuilder.loadTexts: nncBTotal15MinCurrentCallsRecdOverAnOutsideLink.setDescription('The number of calls received over an outside link.')
nncBTotal15MinCurrentCallsTransmittedOverAnOutsideLink = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 21, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal15MinCurrentCallsTransmittedOverAnOutsideLink.setStatus('current')
if mibBuilder.loadTexts: nncBTotal15MinCurrentCallsTransmittedOverAnOutsideLink.setDescription('The number of calls transmitted over an outside link.')
nncBTotal15MinCurrentCrankbksRecdOverAnOutsideLink = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 21, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal15MinCurrentCrankbksRecdOverAnOutsideLink.setStatus('current')
if mibBuilder.loadTexts: nncBTotal15MinCurrentCrankbksRecdOverAnOutsideLink.setDescription('The number of crankbacks received over an outside link.')
nncBTotal15MinCurreSucdEndBlocCrankbksRecdOverOutsideLink = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 21, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal15MinCurreSucdEndBlocCrankbksRecdOverOutsideLink.setStatus('current')
if mibBuilder.loadTexts: nncBTotal15MinCurreSucdEndBlocCrankbksRecdOverOutsideLink.setDescription('The number of succeeding end blocked crankbacks received over an outside links.')
nncBTotal15MinCurrentCrankbkForwdedToPrevPGCrankbkLvlTooHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 21, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal15MinCurrentCrankbkForwdedToPrevPGCrankbkLvlTooHigh.setStatus('current')
if mibBuilder.loadTexts: nncBTotal15MinCurrentCrankbkForwdedToPrevPGCrankbkLvlTooHigh.setDescription('The number of crankback forwarded to previous PG, crankback level too high.')
nncRoutingStatsBorderTotal15MinIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 22), )
if mibBuilder.loadTexts: nncRoutingStatsBorderTotal15MinIntervalTable.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsBorderTotal15MinIntervalTable.setDescription('The nncRoutingStatsBorderTotal15MinIntervalTable contains objects for monitoring the border node PNNI routing total stats during the current 15 minute interval.')
nncRoutingStatsBorderTotal15MinIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 22, 1), ).setIndexNames((0, "NNCEXTCALLROUTINGSTATS-MIB", "nncCallControlGroupNumber"), (0, "NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal15MinIntervalNumber"))
if mibBuilder.loadTexts: nncRoutingStatsBorderTotal15MinIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsBorderTotal15MinIntervalEntry.setDescription('An entry in the 15 minute current statistics table. Each conceptual row contains current total for the border node PNNI routing stats.')
nncBTotal15MinIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 22, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: nncBTotal15MinIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncBTotal15MinIntervalNumber.setDescription('The interval number of the statistics in this row.')
nncBTotal15MinIntervalState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 22, 1, 3), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal15MinIntervalState.setStatus('current')
if mibBuilder.loadTexts: nncBTotal15MinIntervalState.setDescription('The state of the interval represented by this row. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change.')
nncBTotal15MinIntervalAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 22, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal15MinIntervalAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncBTotal15MinIntervalAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncBTotal15MinIntervalFailedCallsDueToInitLowerLvlDTLNotGen = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 22, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal15MinIntervalFailedCallsDueToInitLowerLvlDTLNotGen.setStatus('current')
if mibBuilder.loadTexts: nncBTotal15MinIntervalFailedCallsDueToInitLowerLvlDTLNotGen.setDescription('The number of failed calls due to initial lower level DTL not generated.')
nncBTotal15MinIntervalCallsGeneratingInitLowerLvlDTLs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 22, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal15MinIntervalCallsGeneratingInitLowerLvlDTLs.setStatus('current')
if mibBuilder.loadTexts: nncBTotal15MinIntervalCallsGeneratingInitLowerLvlDTLs.setDescription('The number of calls generating initial lower level DTLs.')
nncBTotal15MinIntervalDTLGenCallsSuccessEstWithoutReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 22, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal15MinIntervalDTLGenCallsSuccessEstWithoutReroute.setStatus('current')
if mibBuilder.loadTexts: nncBTotal15MinIntervalDTLGenCallsSuccessEstWithoutReroute.setDescription('The number of DTL generated calls successfully established without reroute.')
nncBTotal15MinIntervalDTLGenCallsSuccessEstWithReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 22, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal15MinIntervalDTLGenCallsSuccessEstWithReroute.setStatus('current')
if mibBuilder.loadTexts: nncBTotal15MinIntervalDTLGenCallsSuccessEstWithReroute.setDescription('The number of DTL generated calls successfully established with reroute.')
nncBTotal15MinIntervalDTLGenCallsFailedInReRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 22, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal15MinIntervalDTLGenCallsFailedInReRouting.setStatus('current')
if mibBuilder.loadTexts: nncBTotal15MinIntervalDTLGenCallsFailedInReRouting.setDescription('The number of DTL generated calls failed in rerouting.')
nncBTotal15MinIntervalSuccessCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 22, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal15MinIntervalSuccessCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncBTotal15MinIntervalSuccessCallsBdwGreaterThanRTDMinBdw.setDescription('The number of successful calls with bandwidth greater than RTD min bandwidth.')
nncBTotal15MinIntervalFailedCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 22, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal15MinIntervalFailedCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncBTotal15MinIntervalFailedCallsBdwGreaterThanRTDMinBdw.setDescription('The number of failed calls with bandwidth greater than RTD min bandwidth.')
nncBTotal15MinIntervalCrankbackReceivedAsAnEntryBorderNode = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 22, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal15MinIntervalCrankbackReceivedAsAnEntryBorderNode.setStatus('current')
if mibBuilder.loadTexts: nncBTotal15MinIntervalCrankbackReceivedAsAnEntryBorderNode.setDescription('The number of crankback received as an entry border node.')
nncBTotal15MinIntervalLowerLvlDTLsGenDueToRecdCrankback = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 22, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal15MinIntervalLowerLvlDTLsGenDueToRecdCrankback.setStatus('current')
if mibBuilder.loadTexts: nncBTotal15MinIntervalLowerLvlDTLsGenDueToRecdCrankback.setDescription('The number of lower level DTLs generated due to received crankback.')
nncBTotal15MinIntervalCallsRecdOverAnOutsideLink = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 22, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal15MinIntervalCallsRecdOverAnOutsideLink.setStatus('current')
if mibBuilder.loadTexts: nncBTotal15MinIntervalCallsRecdOverAnOutsideLink.setDescription('The number of calls received over an outside link.')
nncBTotal15MinIntervalCallsTransmittedOverAnOutsideLink = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 22, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal15MinIntervalCallsTransmittedOverAnOutsideLink.setStatus('current')
if mibBuilder.loadTexts: nncBTotal15MinIntervalCallsTransmittedOverAnOutsideLink.setDescription('The number of calls transmitted over an outside link.')
nncBTotal15MinIntervalCrankbksRecdOverAnOutsideLink = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 22, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal15MinIntervalCrankbksRecdOverAnOutsideLink.setStatus('current')
if mibBuilder.loadTexts: nncBTotal15MinIntervalCrankbksRecdOverAnOutsideLink.setDescription('The number of crankbacks received over an outside link.')
nncBTotal15MinIntervalSucdEndBlocCrankbksRecdOverOutsideLink = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 22, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal15MinIntervalSucdEndBlocCrankbksRecdOverOutsideLink.setStatus('current')
if mibBuilder.loadTexts: nncBTotal15MinIntervalSucdEndBlocCrankbksRecdOverOutsideLink.setDescription('The number of succeeding end blocked crankbacks received over an outside link.')
nncBTotal15MinIntervalCrankbkForwdedToPrevPGCrankbkLvlTooHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 22, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal15MinIntervalCrankbkForwdedToPrevPGCrankbkLvlTooHigh.setStatus('current')
if mibBuilder.loadTexts: nncBTotal15MinIntervalCrankbkForwdedToPrevPGCrankbkLvlTooHigh.setDescription('The number of crankback forwarded to previous PG, crankback level too high.')
nncRoutingStatsBorderTotal24HourCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 23), )
if mibBuilder.loadTexts: nncRoutingStatsBorderTotal24HourCurrentTable.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsBorderTotal24HourCurrentTable.setDescription('The nncRoutingStatsBorderTotal24HourCurrentTable contains objects for monitoring the border node PNNI routing total stats during the current 24 hour interval.')
nncRoutingStatsBorderTotal24HourCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 23, 1), ).setIndexNames((0, "NNCEXTCALLROUTINGSTATS-MIB", "nncCallControlGroupNumber"))
if mibBuilder.loadTexts: nncRoutingStatsBorderTotal24HourCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsBorderTotal24HourCurrentEntry.setDescription('An entry in the 24 hour current statistics table. Each conceptual row contains current total for the border node PNNI routing stats.')
nncBTotal24HourCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 23, 1, 2), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal24HourCurrentState.setStatus('current')
if mibBuilder.loadTexts: nncBTotal24HourCurrentState.setDescription('The state of the current interval. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change.')
nncBTotal24HourCurrentAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 23, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal24HourCurrentAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncBTotal24HourCurrentAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncBTotal24HourCurrentFailedCallsDueToInitLowerLvlDTLNotGen = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 23, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal24HourCurrentFailedCallsDueToInitLowerLvlDTLNotGen.setStatus('current')
if mibBuilder.loadTexts: nncBTotal24HourCurrentFailedCallsDueToInitLowerLvlDTLNotGen.setDescription('The number of failed calls due to initial lower level DTL not generated.')
nncBTotal24HourCurrentCallsGeneratingInitLowerLvlDTLs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 23, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal24HourCurrentCallsGeneratingInitLowerLvlDTLs.setStatus('current')
if mibBuilder.loadTexts: nncBTotal24HourCurrentCallsGeneratingInitLowerLvlDTLs.setDescription('The number of calls generating initial lower level DTLs.')
nncBTotal24HourCurrentDTLGenCallsSuccessEstWithoutReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 23, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal24HourCurrentDTLGenCallsSuccessEstWithoutReroute.setStatus('current')
if mibBuilder.loadTexts: nncBTotal24HourCurrentDTLGenCallsSuccessEstWithoutReroute.setDescription('The number of DTL generated calls successfully established without reroute.')
nncBTotal24HourCurrentDTLGenCallsSuccessEstWithReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 23, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal24HourCurrentDTLGenCallsSuccessEstWithReroute.setStatus('current')
if mibBuilder.loadTexts: nncBTotal24HourCurrentDTLGenCallsSuccessEstWithReroute.setDescription('The number of DTL generated calls successfully established with reroute.')
nncBTotal24HourCurrentDTLGenCallsFailedInReRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 23, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal24HourCurrentDTLGenCallsFailedInReRouting.setStatus('current')
if mibBuilder.loadTexts: nncBTotal24HourCurrentDTLGenCallsFailedInReRouting.setDescription('The number of DTL generated calls failed in rerouting.')
nncBTotal24HourCurrentSuccessCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 23, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal24HourCurrentSuccessCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncBTotal24HourCurrentSuccessCallsBdwGreaterThanRTDMinBdw.setDescription('The number of successful calls with bandwidth greater than RTD min bandwidth.')
nncBTotal24HourCurrentFailedCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 23, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal24HourCurrentFailedCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncBTotal24HourCurrentFailedCallsBdwGreaterThanRTDMinBdw.setDescription('The number of failed calls with bandwidth greater than RTD min bandwidth.')
nncBTotal24HourCurrentCrankbackReceivedAsAnEntryBorderNode = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 23, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal24HourCurrentCrankbackReceivedAsAnEntryBorderNode.setStatus('current')
if mibBuilder.loadTexts: nncBTotal24HourCurrentCrankbackReceivedAsAnEntryBorderNode.setDescription('The number of crankback received as an entry border node.')
nncBTotal24HourCurrentLowerLvlDTLsGenDueToRecdCrankback = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 23, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal24HourCurrentLowerLvlDTLsGenDueToRecdCrankback.setStatus('current')
if mibBuilder.loadTexts: nncBTotal24HourCurrentLowerLvlDTLsGenDueToRecdCrankback.setDescription('The number of lower level DTLs generated due to received crankback.')
nncBTotal24HourCurrentCallsRecdOverAnOutsideLink = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 23, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal24HourCurrentCallsRecdOverAnOutsideLink.setStatus('current')
if mibBuilder.loadTexts: nncBTotal24HourCurrentCallsRecdOverAnOutsideLink.setDescription('The number of calls received over an outside link.')
nncBTotal24HourCurrentCallsTransmittedOverAnOutsideLink = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 23, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal24HourCurrentCallsTransmittedOverAnOutsideLink.setStatus('current')
if mibBuilder.loadTexts: nncBTotal24HourCurrentCallsTransmittedOverAnOutsideLink.setDescription('The number of calls transmitted over an outside link.')
nncBTotal24HourCurrentCrankbksRecdOverAnOutsideLink = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 23, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal24HourCurrentCrankbksRecdOverAnOutsideLink.setStatus('current')
if mibBuilder.loadTexts: nncBTotal24HourCurrentCrankbksRecdOverAnOutsideLink.setDescription('The number of crankbacks received over an outside link.')
nncBTotal24HourCurrentSucdEndBlocCrankbksRecdOverOutsideLink = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 23, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal24HourCurrentSucdEndBlocCrankbksRecdOverOutsideLink.setStatus('current')
if mibBuilder.loadTexts: nncBTotal24HourCurrentSucdEndBlocCrankbksRecdOverOutsideLink.setDescription('The number of succeeding end blocked crankbacks received over an outside link.')
nncBTotal24HourCurrentCrankbkForwdedToPrevPGCrankbkLvlTooHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 23, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal24HourCurrentCrankbkForwdedToPrevPGCrankbkLvlTooHigh.setStatus('current')
if mibBuilder.loadTexts: nncBTotal24HourCurrentCrankbkForwdedToPrevPGCrankbkLvlTooHigh.setDescription('The number of crankback forwarded to previous PG, crankback level too high.')
nncRoutingStatsBorderTotal24HourIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 24), )
if mibBuilder.loadTexts: nncRoutingStatsBorderTotal24HourIntervalTable.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsBorderTotal24HourIntervalTable.setDescription('The nncRoutingStatsBorderTotal24HourIntervalTable contains objects for monitoring the border node PNNI routing total stats during the 24 hour interval.')
nncRoutingStatsBorderTotal24HourIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 24, 1), ).setIndexNames((0, "NNCEXTCALLROUTINGSTATS-MIB", "nncCallControlGroupNumber"), (0, "NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal24HourIntervalNumber"))
if mibBuilder.loadTexts: nncRoutingStatsBorderTotal24HourIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsBorderTotal24HourIntervalEntry.setDescription('An entry in the 24 hour interval statistics table. Each conceptual row contains current total for the border node PNNI routing stats.')
nncBTotal24HourIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 24, 1, 2), Integer32())
if mibBuilder.loadTexts: nncBTotal24HourIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncBTotal24HourIntervalNumber.setDescription('The interval number of the statistics in this row.')
nncBTotal24HourIntervalState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 24, 1, 3), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal24HourIntervalState.setStatus('current')
if mibBuilder.loadTexts: nncBTotal24HourIntervalState.setDescription('The state of the interval represented by this row. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change.')
nncBTotal24HourIntervalAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 24, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal24HourIntervalAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncBTotal24HourIntervalAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncBTotal24HourIntervalFailedCallsDueToInitLowerLvlDTLNotGen = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 24, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal24HourIntervalFailedCallsDueToInitLowerLvlDTLNotGen.setStatus('current')
if mibBuilder.loadTexts: nncBTotal24HourIntervalFailedCallsDueToInitLowerLvlDTLNotGen.setDescription('The number of failed calls due to initial lower level DTL not generated.')
nncBTotal24HourIntervalCallsGeneratingInitLowerLvlDTLs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 24, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal24HourIntervalCallsGeneratingInitLowerLvlDTLs.setStatus('current')
if mibBuilder.loadTexts: nncBTotal24HourIntervalCallsGeneratingInitLowerLvlDTLs.setDescription('The number of calls generating initial lower level DTLs.')
nncBTotal24HourIntervalDTLGenCallsSuccessEstWithoutReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 24, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal24HourIntervalDTLGenCallsSuccessEstWithoutReroute.setStatus('current')
if mibBuilder.loadTexts: nncBTotal24HourIntervalDTLGenCallsSuccessEstWithoutReroute.setDescription('The number of DTL generated calls successfully established without reroute.')
nncBTotal24HourIntervalDTLGenCallsSuccessEstWithReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 24, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal24HourIntervalDTLGenCallsSuccessEstWithReroute.setStatus('current')
if mibBuilder.loadTexts: nncBTotal24HourIntervalDTLGenCallsSuccessEstWithReroute.setDescription('The number of DTL generated calls successfully established with reroute.')
nncBTotal24HourIntervalDTLGenCallsFailedInReRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 24, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal24HourIntervalDTLGenCallsFailedInReRouting.setStatus('current')
if mibBuilder.loadTexts: nncBTotal24HourIntervalDTLGenCallsFailedInReRouting.setDescription('The number of DTL generated calls failed in rerouting.')
nncBTotal24HourIntervalSuccessCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 24, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal24HourIntervalSuccessCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncBTotal24HourIntervalSuccessCallsBdwGreaterThanRTDMinBdw.setDescription('The number of successful calls with bandwidth greater than RTD min bandwidth.')
nncBTotal24HourIntervalFailedCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 24, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal24HourIntervalFailedCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncBTotal24HourIntervalFailedCallsBdwGreaterThanRTDMinBdw.setDescription('The number of failed calls with bandwidth greater than RTD min bandwidth.')
nncBTotal24HourIntervalCrankbackReceivedAsAnEntryBorderNode = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 24, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal24HourIntervalCrankbackReceivedAsAnEntryBorderNode.setStatus('current')
if mibBuilder.loadTexts: nncBTotal24HourIntervalCrankbackReceivedAsAnEntryBorderNode.setDescription('The number of crankback received as an entry border node.')
nncBTotal24HourIntervalLowerLvlDTLsGenDueToRecdCrankback = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 24, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal24HourIntervalLowerLvlDTLsGenDueToRecdCrankback.setStatus('current')
if mibBuilder.loadTexts: nncBTotal24HourIntervalLowerLvlDTLsGenDueToRecdCrankback.setDescription('The number of lower level DTLs generated due to received crankback.')
nncBTotal24HourIntervalCallsRecdOverAnOutsideLink = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 24, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal24HourIntervalCallsRecdOverAnOutsideLink.setStatus('current')
if mibBuilder.loadTexts: nncBTotal24HourIntervalCallsRecdOverAnOutsideLink.setDescription('The number of calls received over an outside link.')
nncBTotal24HourIntervalCallsTransmittedOverAnOutsideLink = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 24, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal24HourIntervalCallsTransmittedOverAnOutsideLink.setStatus('current')
if mibBuilder.loadTexts: nncBTotal24HourIntervalCallsTransmittedOverAnOutsideLink.setDescription('The number of calls transmitted over an outside link.')
nncBTotal24HourIntervalCrankbksRecdOverAnOutsideLink = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 24, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal24HourIntervalCrankbksRecdOverAnOutsideLink.setStatus('current')
if mibBuilder.loadTexts: nncBTotal24HourIntervalCrankbksRecdOverAnOutsideLink.setDescription('The number of crankbacks received over an outside link.')
nncBTotal24HourIntervalSucdEndBlocCrankbksRecdOverOutsideLink = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 24, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal24HourIntervalSucdEndBlocCrankbksRecdOverOutsideLink.setStatus('current')
if mibBuilder.loadTexts: nncBTotal24HourIntervalSucdEndBlocCrankbksRecdOverOutsideLink.setDescription('The number of succeeding end blocked crankbacks received over an outside link.')
nncBTotal24HourIntervalCrankbkFwdToPrevPGCrankbkLvlTooHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 24, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncBTotal24HourIntervalCrankbkFwdToPrevPGCrankbkLvlTooHigh.setStatus('current')
if mibBuilder.loadTexts: nncBTotal24HourIntervalCrankbkFwdToPrevPGCrankbkLvlTooHigh.setDescription('The number of crankback forwarded to previous PG, crankback level too high.')
nncRoutingStatsRawCommonTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 25), )
if mibBuilder.loadTexts: nncRoutingStatsRawCommonTable.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsRawCommonTable.setDescription('The nncRoutingStatsRawCommonTable contains objects for monitoring the raw counters for static and PNNI routing common stats.')
nncRoutingStatsRawCommonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 25, 1), ).setIndexNames((0, "NNCEXTCALLROUTINGSTATS-MIB", "nncCallControlGroupNumber"))
if mibBuilder.loadTexts: nncRoutingStatsRawCommonEntry.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsRawCommonEntry.setDescription('An entry in the nncRoutingStatsRawCommonTable. Each conceptual row contains the raw counter for static and PNNI routing common stats.')
nncRoutingStatsRawCommonSuccessRoutedCallsOrigFromLocalSubs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 25, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRoutingStatsRawCommonSuccessRoutedCallsOrigFromLocalSubs.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsRawCommonSuccessRoutedCallsOrigFromLocalSubs.setDescription('Raw counter for the number of successfully routed calls originated from local subscribers.')
nncRoutingStatsRawCommonSuccessRtedCallsTransitedViaThisNode = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 25, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRoutingStatsRawCommonSuccessRtedCallsTransitedViaThisNode.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsRawCommonSuccessRtedCallsTransitedViaThisNode.setDescription('Raw counter for the number of successfully routed calls transited via this node.')
nncRoutingStatsRawCommonSuccessRoutedCallsTermToLocalSubs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 25, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRoutingStatsRawCommonSuccessRoutedCallsTermToLocalSubs.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsRawCommonSuccessRoutedCallsTermToLocalSubs.setDescription('Raw counter for the number of successfully routed calls terminated to local subscribers.')
nncRoutingStatsRawCommonSuccessRoutedLocalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 25, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRoutingStatsRawCommonSuccessRoutedLocalCalls.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsRawCommonSuccessRoutedLocalCalls.setDescription('Raw counter for the number of successfully routed local calls.')
nncRoutingStatsRawCommonCallsOrigFromLocalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 25, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRoutingStatsRawCommonCallsOrigFromLocalCalls.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsRawCommonCallsOrigFromLocalCalls.setDescription('Raw counter for the number of calls originated from local calls.')
nncRoutingStatsRawCommonCallsTermToLocalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 25, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRoutingStatsRawCommonCallsTermToLocalCalls.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsRawCommonCallsTermToLocalCalls.setDescription('Raw counters for the number of calls terminated to local subscribers.')
nncRoutingStatsRawCommonLocalCallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 25, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRoutingStatsRawCommonLocalCallAttempts.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsRawCommonLocalCallAttempts.setDescription('Raw counter for the number of local call attempts.')
nncRoutingStatsRawCommonCallsClearedDueToNoRoutingTabEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 25, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRoutingStatsRawCommonCallsClearedDueToNoRoutingTabEntry.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsRawCommonCallsClearedDueToNoRoutingTabEntry.setDescription('Raw counter for the number of calls cleared due to no routing table entry.')
nncRoutingStatsRawCommonCrankbacksGeneratedByThisNode = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 25, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRoutingStatsRawCommonCrankbacksGeneratedByThisNode.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsRawCommonCrankbacksGeneratedByThisNode.setDescription('Raw counter for the number of crankbacks generated by this node.')
nncRoutingStatsRawCommonFailedCallsAtLocalSubs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 25, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRoutingStatsRawCommonFailedCallsAtLocalSubs.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsRawCommonFailedCallsAtLocalSubs.setDescription('Raw counter for the number of failed calls at local subscribers.')
nncRoutingStatsRawCommonCallsSuccessRerouted = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 25, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRoutingStatsRawCommonCallsSuccessRerouted.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsRawCommonCallsSuccessRerouted.setDescription('Raw counter for the number of calls successfully rerouted.')
nncRoutingStatsRawCommonCallsFailedInRerouting = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 25, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRoutingStatsRawCommonCallsFailedInRerouting.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsRawCommonCallsFailedInRerouting.setDescription('Raw counter for the number of calls failed in rerouting.')
nncRoutingStatsRawSpecificTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 26), )
if mibBuilder.loadTexts: nncRoutingStatsRawSpecificTable.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsRawSpecificTable.setDescription('The nncRoutingStatsRawSpecificTable contains objects for monitoring the raw counters for static routing specific stats.')
nncRoutingStatsRawSpecificEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 26, 1), ).setIndexNames((0, "NNCEXTCALLROUTINGSTATS-MIB", "nncCallControlGroupNumber"))
if mibBuilder.loadTexts: nncRoutingStatsRawSpecificEntry.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsRawSpecificEntry.setDescription('An entry in the nncRoutingStatsRawSpecificTable. Each conceptual row contains the raw counter for static routing specific stats.')
nncRoutingStatsRawSpecificCallsStaticallyRoutedByThisNode = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 26, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRoutingStatsRawSpecificCallsStaticallyRoutedByThisNode.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsRawSpecificCallsStaticallyRoutedByThisNode.setDescription('Raw counter for the nhe number of calls statically routed by this node.')
nncRoutingStatsRawSpecificCrankbacksReceivedByThisNode = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 26, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRoutingStatsRawSpecificCrankbacksReceivedByThisNode.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsRawSpecificCrankbacksReceivedByThisNode.setDescription('Raw counter for the number ofcrankbacks received by this node.')
nncRoutingStatsRawSpecificRerouteAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 26, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRoutingStatsRawSpecificRerouteAttempts.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsRawSpecificRerouteAttempts.setDescription('Raw counter for the number of rerouted attempts.')
nncRoutingStatsRawSpecificRoutingLoopsDetectedByThisNode = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 26, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRoutingStatsRawSpecificRoutingLoopsDetectedByThisNode.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsRawSpecificRoutingLoopsDetectedByThisNode.setDescription('Raw counter for the number of routing loops detected by this node.')
nncRoutingStatsRawNonBorderPerTblTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 27), )
if mibBuilder.loadTexts: nncRoutingStatsRawNonBorderPerTblTable.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsRawNonBorderPerTblTable.setDescription('The nncRoutingStatsRawNonBorderPerTblTable contains objects for monitoring the raw counters for non border node PNNI per routing table stats.')
nncRoutingStatsRawNonBorderPerTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 27, 1), ).setIndexNames((0, "NNCEXTCALLROUTINGSTATS-MIB", "nncCallControlGroupNumber"), (0, "NNCEXTCALLROUTINGSTATS-MIB", "nncRawNBPerTbleTableDescriptor"))
if mibBuilder.loadTexts: nncRoutingStatsRawNonBorderPerTblEntry.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsRawNonBorderPerTblEntry.setDescription('An entry in the nncRoutingStatsRawNonBorderPerTblEntry. Each conceptual row contains the raw counter for non border node PNNI per routing table stats.')
nncRawNBPerTbleTableDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 27, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6)))
if mibBuilder.loadTexts: nncRawNBPerTbleTableDescriptor.setStatus('current')
if mibBuilder.loadTexts: nncRawNBPerTbleTableDescriptor.setDescription('nncTableDescriptor determines a routing table number whose stats are to be displayed.')
nncRawNBPerTbleFailedCallsDueToInitDTLNotGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 27, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawNBPerTbleFailedCallsDueToInitDTLNotGenerated.setStatus('current')
if mibBuilder.loadTexts: nncRawNBPerTbleFailedCallsDueToInitDTLNotGenerated.setDescription('Raw counter for the number of failed calls due to initial DTL not generated.')
nncRawNBPerTbleCallsGeneratingAnInitDTL = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 27, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawNBPerTbleCallsGeneratingAnInitDTL.setStatus('current')
if mibBuilder.loadTexts: nncRawNBPerTbleCallsGeneratingAnInitDTL.setDescription('Raw counter for The number of calls generating an initial DTL.')
nncRawNBPerTbleDTLOrigCallsSuccessEstWithoutReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 27, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawNBPerTbleDTLOrigCallsSuccessEstWithoutReroute.setStatus('current')
if mibBuilder.loadTexts: nncRawNBPerTbleDTLOrigCallsSuccessEstWithoutReroute.setDescription('Raw counter for the number of DTL originated calls successfully established without reroute.')
nncRawNBPerTbleDTLOrigCallsSuccessEstWithReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 27, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawNBPerTbleDTLOrigCallsSuccessEstWithReroute.setStatus('current')
if mibBuilder.loadTexts: nncRawNBPerTbleDTLOrigCallsSuccessEstWithReroute.setDescription('Raw counter for the number of DTL originated calls successfully established with reroute.')
nncRawNBPerTbleDTLOrigCallsFailedInReRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 27, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawNBPerTbleDTLOrigCallsFailedInReRouting.setStatus('current')
if mibBuilder.loadTexts: nncRawNBPerTbleDTLOrigCallsFailedInReRouting.setDescription('Raw counter for the number of DTL originated calls failed in rerouting.')
nncRawNBPerTbleSuccessCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 27, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawNBPerTbleSuccessCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncRawNBPerTbleSuccessCallsBdwGreaterThanRTDMinBdw.setDescription('Raw counter for the number of successful calls with bandwidth greater than RTD min bandwidth.')
nncRawNBPerTbleFailedCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 27, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawNBPerTbleFailedCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncRawNBPerTbleFailedCallsBdwGreaterThanRTDMinBdw.setDescription('Raw counter for the number of failed calls with bandwidth greater than RTD min bandwidth.')
nncRawNBPerTbleCrankbackReceivedAsDTLOriginator = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 27, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawNBPerTbleCrankbackReceivedAsDTLOriginator.setStatus('current')
if mibBuilder.loadTexts: nncRawNBPerTbleCrankbackReceivedAsDTLOriginator.setDescription('Raw counter for the number of crankback received as DTL originator.')
nncRawNBPerTbleDTLsGeneratedDueToCrankback = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 27, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawNBPerTbleDTLsGeneratedDueToCrankback.setStatus('current')
if mibBuilder.loadTexts: nncRawNBPerTbleDTLsGeneratedDueToCrankback.setDescription('Raw counter for the number of DTSs generated due to crankback.')
nncRoutingStatsRawBorderPerTblTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 28), )
if mibBuilder.loadTexts: nncRoutingStatsRawBorderPerTblTable.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsRawBorderPerTblTable.setDescription('The nncRoutingStatsRawBorderPerTblTable contains objects for monitoring the raw counters for border node PNNI per routing table stats.')
nncRoutingStatsRawBorderPerTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 28, 1), ).setIndexNames((0, "NNCEXTCALLROUTINGSTATS-MIB", "nncCallControlGroupNumber"), (0, "NNCEXTCALLROUTINGSTATS-MIB", "nncRawBPerTblTableDescriptor"))
if mibBuilder.loadTexts: nncRoutingStatsRawBorderPerTblEntry.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsRawBorderPerTblEntry.setDescription('An entry in the nncRoutingStatsRawNonBorderPerTblEntry. Each conceptual row contains the raw counter for border node PNNI per routing table stats.')
nncRawBPerTblTableDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 28, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6)))
if mibBuilder.loadTexts: nncRawBPerTblTableDescriptor.setStatus('current')
if mibBuilder.loadTexts: nncRawBPerTblTableDescriptor.setDescription('nncTableDescriptor determines a routing table number whose stats are to be displayed.')
nncRawBPerTblFailedCallsDueInitLowerLvlDTLsNotGen = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 28, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawBPerTblFailedCallsDueInitLowerLvlDTLsNotGen.setStatus('current')
if mibBuilder.loadTexts: nncRawBPerTblFailedCallsDueInitLowerLvlDTLsNotGen.setDescription('Raw counter for the number of failed calls generating initial lower level DTLs.')
nncRawBPerTblCallsGeneratingInitLowerLvlDTLs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 28, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawBPerTblCallsGeneratingInitLowerLvlDTLs.setStatus('current')
if mibBuilder.loadTexts: nncRawBPerTblCallsGeneratingInitLowerLvlDTLs.setDescription('Raw counter for the number of calls generating initial lower level DTLs.')
nncRawBPerTblDTLGenCallsSuccessEstWithoutReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 28, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawBPerTblDTLGenCallsSuccessEstWithoutReroute.setStatus('current')
if mibBuilder.loadTexts: nncRawBPerTblDTLGenCallsSuccessEstWithoutReroute.setDescription('Raw counter for the number of DTL generated calls successfully established without reroute.')
nncRawBPerTblDTLGenCallsSuccessEstWithReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 28, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawBPerTblDTLGenCallsSuccessEstWithReroute.setStatus('current')
if mibBuilder.loadTexts: nncRawBPerTblDTLGenCallsSuccessEstWithReroute.setDescription('Raw counter for the number of DTL generated calls successfully established with reroute.')
nncRawBPerTblDTLGenCallsFailedInReRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 28, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawBPerTblDTLGenCallsFailedInReRouting.setStatus('current')
if mibBuilder.loadTexts: nncRawBPerTblDTLGenCallsFailedInReRouting.setDescription('Raw counter for the number of DTL generated calls failed in rerouting.')
nncRawBPerTblSuccessCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 28, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawBPerTblSuccessCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncRawBPerTblSuccessCallsBdwGreaterThanRTDMinBdw.setDescription('Raw counter for the number of successful calls with bandwidth greater than RTD min bandwidth.')
nncRawBPerTblFailedCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 28, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawBPerTblFailedCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncRawBPerTblFailedCallsBdwGreaterThanRTDMinBdw.setDescription('Raw counter for the number of failed calls with bandwidth greater than RTD min bandwidth.')
nncRawBPerTblCrankbackReceivedAsAnEntryBorderNode = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 28, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawBPerTblCrankbackReceivedAsAnEntryBorderNode.setStatus('current')
if mibBuilder.loadTexts: nncRawBPerTblCrankbackReceivedAsAnEntryBorderNode.setDescription('Raw counter for the number of crankback received as an entry border node.')
nncRawBPerTblLowerLvlDTLsGenDueToRecdCrankback = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 28, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawBPerTblLowerLvlDTLsGenDueToRecdCrankback.setStatus('current')
if mibBuilder.loadTexts: nncRawBPerTblLowerLvlDTLsGenDueToRecdCrankback.setDescription('Raw counters for the number of lower level DTLs generated due to received crankback.')
nncRoutingStatsRawNonBorderTotalTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 29), )
if mibBuilder.loadTexts: nncRoutingStatsRawNonBorderTotalTable.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsRawNonBorderTotalTable.setDescription('The nncRoutingStatsRawNonBorderTotalTable contains objects for monitoring the raw counters for non border node PNNI routing total stats.')
nncRoutingStatsRawNonBorderTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 29, 1), ).setIndexNames((0, "NNCEXTCALLROUTINGSTATS-MIB", "nncCallControlGroupNumber"))
if mibBuilder.loadTexts: nncRoutingStatsRawNonBorderTotalEntry.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsRawNonBorderTotalEntry.setDescription('An entry in the nncRoutingStatsRawNonBorderTotalTable. Each conceptual row contains the raw counter for non border node PNNI routing total stats.')
nncRawNBTotalFailedCallsDueToInitDTLNotGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 29, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawNBTotalFailedCallsDueToInitDTLNotGenerated.setStatus('current')
if mibBuilder.loadTexts: nncRawNBTotalFailedCallsDueToInitDTLNotGenerated.setDescription('Raw counter for the total number of failed calls due to initial DTL not generated.')
nncRawNBTotalCallsGeneratingAnInitDTL = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 29, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawNBTotalCallsGeneratingAnInitDTL.setStatus('current')
if mibBuilder.loadTexts: nncRawNBTotalCallsGeneratingAnInitDTL.setDescription('Raw counter for the total number of calls generating an initail DTL.')
nncRawNBTotalDTLOrigCallsSuccessEstWithoutReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 29, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawNBTotalDTLOrigCallsSuccessEstWithoutReroute.setStatus('current')
if mibBuilder.loadTexts: nncRawNBTotalDTLOrigCallsSuccessEstWithoutReroute.setDescription('Raw counter for the total number of DTL originated calls successfully established without reroute.')
nncRawNBTotalDTLOrigCallsSuccessEstWithReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 29, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawNBTotalDTLOrigCallsSuccessEstWithReroute.setStatus('current')
if mibBuilder.loadTexts: nncRawNBTotalDTLOrigCallsSuccessEstWithReroute.setDescription('Raw counter for the total number of DTL originated calls successfully established with reroute.')
nncRawNBTotalDTLOrigCallsFailedInReRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 29, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawNBTotalDTLOrigCallsFailedInReRouting.setStatus('current')
if mibBuilder.loadTexts: nncRawNBTotalDTLOrigCallsFailedInReRouting.setDescription('Raw counter for the total number of DTL originated calls failed in rerouting.')
nncRawNBTotalSuccessCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 29, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawNBTotalSuccessCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncRawNBTotalSuccessCallsBdwGreaterThanRTDMinBdw.setDescription('Raw counter for the total number of of successful calls with bandwidth greater than RTD min bandwidth.')
nncRawNBTotalFailedCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 29, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawNBTotalFailedCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncRawNBTotalFailedCallsBdwGreaterThanRTDMinBdw.setDescription('Raw counter for the total number of of failed calls with bandwidth greater than RTD min bandwidth.')
nncRawNBTotalCrankbackReceivedAsDTLOriginator = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 29, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawNBTotalCrankbackReceivedAsDTLOriginator.setStatus('current')
if mibBuilder.loadTexts: nncRawNBTotalCrankbackReceivedAsDTLOriginator.setDescription('Raw counter for the number of crankback received as DTL originator.')
nncRawNBTotalDTLsGeneratedDueToCrankback = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 29, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawNBTotalDTLsGeneratedDueToCrankback.setStatus('current')
if mibBuilder.loadTexts: nncRawNBTotalDTLsGeneratedDueToCrankback.setDescription('Raw counter for the total number of of DTLs generated due to crankback.')
nncRawNBTotalCallsRecdAsTransitNodeOverInsideLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 29, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawNBTotalCallsRecdAsTransitNodeOverInsideLinks.setStatus('current')
if mibBuilder.loadTexts: nncRawNBTotalCallsRecdAsTransitNodeOverInsideLinks.setDescription('Raw counter for the total number of of calls received as transit node over inside links.')
nncRawNBTotalCrnkbksRecdAsTransitNodeOvInsideLnks = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 29, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawNBTotalCrnkbksRecdAsTransitNodeOvInsideLnks.setStatus('current')
if mibBuilder.loadTexts: nncRawNBTotalCrnkbksRecdAsTransitNodeOvInsideLnks.setDescription('Raw counter for the number of calls received as transit node over inside links.')
nncRawNBTotalSucdEndBlocCrnkbksRecdOvInsideLnks = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 29, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawNBTotalSucdEndBlocCrnkbksRecdOvInsideLnks.setStatus('current')
if mibBuilder.loadTexts: nncRawNBTotalSucdEndBlocCrnkbksRecdOvInsideLnks.setDescription('Raw counter for the number of succeeding end blocked crankbacks received over inside links.')
nncRoutingStatsRawBorderTotalTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 30), )
if mibBuilder.loadTexts: nncRoutingStatsRawBorderTotalTable.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsRawBorderTotalTable.setDescription('The nncRoutingStatsRawNonBorderTotalTable contains objects for monitoring the raw counters for border node PNNI routing total stats.')
nncRoutingStatsRawBorderTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 30, 1), ).setIndexNames((0, "NNCEXTCALLROUTINGSTATS-MIB", "nncCallControlGroupNumber"))
if mibBuilder.loadTexts: nncRoutingStatsRawBorderTotalEntry.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsRawBorderTotalEntry.setDescription('An entry in the nncRoutingStatsRawBorderTotalTable. Each conceptual row contains the raw counter for border node PNNI routing total stats.')
nncRawBTotalFailedCallsDueToInitLowerLvlDTLNotGen = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 30, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawBTotalFailedCallsDueToInitLowerLvlDTLNotGen.setStatus('current')
if mibBuilder.loadTexts: nncRawBTotalFailedCallsDueToInitLowerLvlDTLNotGen.setDescription('Raw counter for the total number of of failed calls due to initial lower level DTL not generated.')
nncRawBTotalCallsGeneratingInitLowerLvlDTLs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 30, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawBTotalCallsGeneratingInitLowerLvlDTLs.setStatus('current')
if mibBuilder.loadTexts: nncRawBTotalCallsGeneratingInitLowerLvlDTLs.setDescription('Raw counter for the total number of calls generating initial lower level DTLs.')
nncRawBTotalDTLGenCallsSuccessEstWithoutReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 30, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawBTotalDTLGenCallsSuccessEstWithoutReroute.setStatus('current')
if mibBuilder.loadTexts: nncRawBTotalDTLGenCallsSuccessEstWithoutReroute.setDescription('Raw counter for the total number of DTL generated calls successfully established without reroute.')
nncRawBTotalDTLGenCallsSuccessEstWithReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 30, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawBTotalDTLGenCallsSuccessEstWithReroute.setStatus('current')
if mibBuilder.loadTexts: nncRawBTotalDTLGenCallsSuccessEstWithReroute.setDescription('Raw counter for the total number of DTL generated calls successfully established with reroute.')
nncRawBTotalDTLGenCallsFailedInReRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 30, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawBTotalDTLGenCallsFailedInReRouting.setStatus('current')
if mibBuilder.loadTexts: nncRawBTotalDTLGenCallsFailedInReRouting.setDescription('Raw counter for the total number of DTL generated calls failed in rerouting.')
nncRawBTotalSuccessCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 30, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawBTotalSuccessCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncRawBTotalSuccessCallsBdwGreaterThanRTDMinBdw.setDescription('Raw counter for the total number of of successful calls with bandwidth greater than RTD min bandwidth.')
nncRawBTotalFailedCallsBdwGreaterThanRTDMinBdw = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 30, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawBTotalFailedCallsBdwGreaterThanRTDMinBdw.setStatus('current')
if mibBuilder.loadTexts: nncRawBTotalFailedCallsBdwGreaterThanRTDMinBdw.setDescription('Raw counter for the total number of failed calls with bandwidth greater than RTD min bandwidth.')
nncRawBTotalCrankbackReceivedAsAnEntryBorderNode = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 30, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawBTotalCrankbackReceivedAsAnEntryBorderNode.setStatus('current')
if mibBuilder.loadTexts: nncRawBTotalCrankbackReceivedAsAnEntryBorderNode.setDescription('Raw counter for the total number of crankback received as an entry border node..')
nncRawBTotalLowerLvlDTLsGenDueToRecdCrankback = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 30, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawBTotalLowerLvlDTLsGenDueToRecdCrankback.setStatus('current')
if mibBuilder.loadTexts: nncRawBTotalLowerLvlDTLsGenDueToRecdCrankback.setDescription('Raw counter for the total number of lower level DTLs generated due to received crankback.')
nncRawBTotalCallsRecdOverAnOutsideLink = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 30, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawBTotalCallsRecdOverAnOutsideLink.setStatus('current')
if mibBuilder.loadTexts: nncRawBTotalCallsRecdOverAnOutsideLink.setDescription('Raw counter for the total number of calls received over an outside link.')
nncRawBTotalCallsTransmittedOverAnOutsideLink = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 30, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawBTotalCallsTransmittedOverAnOutsideLink.setStatus('current')
if mibBuilder.loadTexts: nncRawBTotalCallsTransmittedOverAnOutsideLink.setDescription('Raw counter for the total number of calls transmitted over an outside link.')
nncRawBTotalCrankbksRecdOverAnOutsideLink = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 30, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawBTotalCrankbksRecdOverAnOutsideLink.setStatus('current')
if mibBuilder.loadTexts: nncRawBTotalCrankbksRecdOverAnOutsideLink.setDescription('Raw counter for the total counter for the crankbacks received over an outside link.')
nncRawBTotalSucdEndBlocCrankbksRecdOverOutsideLink = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 30, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawBTotalSucdEndBlocCrankbksRecdOverOutsideLink.setStatus('current')
if mibBuilder.loadTexts: nncRawBTotalSucdEndBlocCrankbksRecdOverOutsideLink.setDescription('Raw counter for the total number of succeeding end blocked crankbacks received over an outside link.')
nncRawBTotalCrankbkForwdedToPrevPGCrankbkLvlTooHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 78, 1, 30, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncRawBTotalCrankbkForwdedToPrevPGCrankbkLvlTooHigh.setStatus('current')
if mibBuilder.loadTexts: nncRawBTotalCrankbkForwdedToPrevPGCrankbkLvlTooHigh.setDescription('Raw counter for the total number of of crankback forwarded to previous PG, crankback level too high.')
nncRoutingStatsCommon15MinCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 78, 3, 1)).setObjects(("NNCEXTCALLROUTINGSTATS-MIB", "nncCallControlGroupNumber"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon15MinCurrentAbsoluteIntervalNumber"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon15MinCurrentSuccessRoutedCallsOrigFromLocalSubs"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon15MinCurrentSuccessRoutedCallsTransitedViaThisNode"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon15MinCurrentSuccessRoutedCallsTermToLocalSubs"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon15MinCurrentSuccessRoutedLocalCalls"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon15MinCurrentCallsOrigFromLocalCalls"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon15MinCurrentCallsTermToLocalCalls"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon15MinCurrentLocalCallAttempts"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon15MinCurrentCallsClearedDueToNoRoutingTabEntry"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon15MinCurrentCrankbacksGeneratedByThisNode"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon15MinCurrentFailedCallsAtLocalSubs"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon15MinCurrentCallsSuccessRerouted"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon15MinCurrentCallsFailedInRerouting"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncRoutingStatsCommon15MinCurrentGroup = nncRoutingStatsCommon15MinCurrentGroup.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsCommon15MinCurrentGroup.setDescription('A collection of objects providing 15 minute current statistics for static and PNNI routing common stats.')
nncRoutingStatsCommon15MinIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 78, 3, 2)).setObjects(("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon15MinIntervalAbsoluteIntervalNumber"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon15MinIntervalSuccessRoutedCallsOrigFromLocalSubs"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon15MinIntervalSuccessRoutedCallsTransitedViaThisNode"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon15MinIntervalSuccessRoutedCallsTermToLocalSubs"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon15MinIntervalSuccessRoutedLocalCalls"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon15MinIntervalCallsOrigFromLocalCalls"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon15MinIntervalCallsTermToLocalCalls"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon15MinIntervalLocalCallAttempts"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon15MinIntervalCallsClearedDueToNoRoutingTabEntry"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon15MinIntervalCrankbacksGeneratedByThisNode"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon15MinIntervalFailedCallsAtLocalSubs"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon15MinIntervalCallsSuccessRerouted"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon15MinIntervalCallsFailedInRerouting"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncRoutingStatsCommon15MinIntervalGroup = nncRoutingStatsCommon15MinIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsCommon15MinIntervalGroup.setDescription('A collection of objects providing 15 minute interval statistics for static and PNNI routing common stats.')
nncRoutingStatsCommon24HourCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 78, 3, 3)).setObjects(("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon24HourCurrentAbsoluteIntervalNumber"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon24HourCurrentSuccessRoutedCallsOrigFromLocalSubs"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon24HourCurrentSuccessRoutedCallsTransitedViaThisNode"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon24HourCurrentSuccessRoutedCallsTermToLocalSubs"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon24HourCurrentSuccessRoutedLocalCalls"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon24HourCurrentCallsOrigFromLocalCalls"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon24HourCurrentCallsTermToLocalCalls"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon24HourCurrentLocalCallAttempts"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon24HourCurrentCallsClearedDueToNoRoutingTabEntry"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon24HourCurrentCrankbacksGeneratedByThisNode"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon24HourCurrentFailedCallsAtLocalSubs"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon24HourCurrentCallsSuccessRerouted"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon24HourCurrentCallsFailedInRerouting"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncRoutingStatsCommon24HourCurrentGroup = nncRoutingStatsCommon24HourCurrentGroup.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsCommon24HourCurrentGroup.setDescription('A collection of objects providing 24 hour current statistics for static and PNNI routing common stats.')
nncRoutingStatsCommon24HourIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 78, 3, 4)).setObjects(("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon24HourIntervalAbsoluteIntervalNumber"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon24HourIntervalSuccessRoutedCallsOrigFromLocalSubs"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon24HourIntervalSuccessRoutedCallsTransitedViaThisNode"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon24HourIntervalSuccessRoutedCallsTermToLocalSubs"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon24HourIntervalSuccessRoutedLocalCalls"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon24HourIntervalCallsOrigFromLocalCalls"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon24HourIntervalCallsTermToLocalCalls"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon24HourIntervalLocalCallAttempts"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon24HourIntervalCallsClearedDueToNoRoutingTabEntry"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon24HourIntervalCrankbacksGeneratedByThisNode"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon24HourIntervalFailedCallsAtLocalSubs"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon24HourIntervalCallsSuccessRerouted"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncCommon24HourIntervalCallsFailedInRerouting"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncRoutingStatsCommon24HourIntervalGroup = nncRoutingStatsCommon24HourIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsCommon24HourIntervalGroup.setDescription('A collection of objects providing 24 hour interval statistics for static and PNNI routing common stats.')
nncRoutingStatsSpecific15MinCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 78, 3, 5)).setObjects(("NNCEXTCALLROUTINGSTATS-MIB", "nncSpecific15MinCurrentAbsoluteIntervalNumber"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncSpecific15MinCurrentCallsStaticallyRoutedByThisNode"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncSpecific15MinCurrentCrankbacksReceivedByThisNode"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncSpecific15MinCurrentRerouteAttempts"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncSpecific15MinCurrentRoutingLoopsDetectedByThisNode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncRoutingStatsSpecific15MinCurrentGroup = nncRoutingStatsSpecific15MinCurrentGroup.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsSpecific15MinCurrentGroup.setDescription('A collection of objects providing 15 minute current statistics for static specific stats.')
nncRoutingStatsSpecific15MinIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 78, 3, 6)).setObjects(("NNCEXTCALLROUTINGSTATS-MIB", "nncSpecific15MinIntervalAbsoluteIntervalNumber"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncSpecific15MinIntervalCallsStaticallyRoutedByThisNode"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncSpecific15MinIntervalCrankbacksReceivedByThisNode"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncSpecific15MinIntervalRerouteAttempts"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncSpecific15MinIntervalRoutingLoopsDetectedByThisNode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncRoutingStatsSpecific15MinIntervalGroup = nncRoutingStatsSpecific15MinIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsSpecific15MinIntervalGroup.setDescription('A collection of objects providing 15 minute interval statistics for static specific stats.')
nncRoutingStatsSpecific24HourCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 78, 3, 7)).setObjects(("NNCEXTCALLROUTINGSTATS-MIB", "nncSpecific24HourCurrentAbsoluteIntervalNumber"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncSpecific24HourCurrentCallsStaticallyRoutedByThisNode"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncSpecific24HourCurrentCrankbacksReceivedByThisNode"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncSpecific24HourCurrentRerouteAttempts"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncSpecific24HourCurrentRoutingLoopsDetectedByThisNode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncRoutingStatsSpecific24HourCurrentGroup = nncRoutingStatsSpecific24HourCurrentGroup.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsSpecific24HourCurrentGroup.setDescription('A collection of objects providing 24 hour current statistics for static specific stats.')
nncRoutingStatsSpecific24HourIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 78, 3, 8)).setObjects(("NNCEXTCALLROUTINGSTATS-MIB", "nncSpecific24HourIntervalAbsoluteIntervalNumber"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncSpecific24HourIntervalCallsStaticallyRoutedByThisNode"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncSpecific24HourIntervalCrankbacksReceivedByThisNode"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncSpecific24HourIntervalRerouteAttempts"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncSpecific24HourIntervalRoutingLoopsDetectedByThisNode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncRoutingStatsSpecific24HourIntervalGroup = nncRoutingStatsSpecific24HourIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsSpecific24HourIntervalGroup.setDescription('A collection of objects providing 24 hour interval statistics for static specific stats.')
nncRoutingStatsNonBorderPerTbl15MinCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 78, 3, 9)).setObjects(("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl15MinCurrentTableDescriptor"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl15MinCurrentAbsoluteIntervalNumber"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl15MinCurrentFailedCallsDueToInitDTLNotGenerated"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl15MinCurrentCallsGeneratingAnInitDTL"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTble15MinCurrentDTLOrigCallsSuccessEstWithoutReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl15MinCurrentDTLOrigCallsSuccessEstWithReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl15MinCurrentDTLOrigCallsFailedInReRouting"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl15MinCurrentSuccessCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl15MinCurrentFailedCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl15MinCurrentCrankbackReceivedAsDTLOriginator"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl15MinCurrentDTLsGeneratedDueToCrankback"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncRoutingStatsNonBorderPerTbl15MinCurrentGroup = nncRoutingStatsNonBorderPerTbl15MinCurrentGroup.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsNonBorderPerTbl15MinCurrentGroup.setDescription('A collection of objects providing 15 minute current statistics for Non-border per routing table stats.')
nncRoutingStatsNonBorderPerTbl15MinIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 78, 3, 10)).setObjects(("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl15MinIntervalTableDescriptor"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl15MinIntervalAbsoluteIntervalNumber"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl15MinIntervalFailedCallsDueToInitDTLNotGenerated"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl15MinIntervalCallsGeneratingAnInitDTL"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl15MinIntervalDTLOrigCallsSuccessEstWithoutReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl15MinIntervalDTLOrigCallsSuccessEstWithReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl15MinIntervalDTLOrigCallsFailedInReRouting"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl15MinIntervalSuccessCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl15MinIntervalFailedCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl15MinIntervalCrankbackReceivedAsDTLOriginator"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl15MinIntervalDTLsGeneratedDueToCrankback"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncRoutingStatsNonBorderPerTbl15MinIntervalGroup = nncRoutingStatsNonBorderPerTbl15MinIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsNonBorderPerTbl15MinIntervalGroup.setDescription('A collection of objects providing 15 minute interval statistics for Non-border per routing table stats.')
nncRoutingStatsNonBorderPerTbl24HourCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 78, 3, 11)).setObjects(("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl24HourCurrentTableDescriptor"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl24HourCurrentAbsoluteIntervalNumber"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl24HourCurrentFailedCallsDueToInitDTLNotGenerated"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl24HourCurrentCallsGeneratingAnInitDTL"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl24HourCurrentDTLOrigCallsSuccessEstWithoutReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl24HourCurrentDTLOrigCallsSuccessEstWithReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl24HourCurrentDTLOrigCallsFailedInReRouting"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl24HourCurrentSuccessCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl24HourCurrentFailedCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl24HourCurrentCrankbackReceivedAsDTLOriginator"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl24HourCurrentDTLsGeneratedDueToCrankback"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncRoutingStatsNonBorderPerTbl24HourCurrentGroup = nncRoutingStatsNonBorderPerTbl24HourCurrentGroup.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsNonBorderPerTbl24HourCurrentGroup.setDescription('A collection of objects providing 24 hour current statistics for Non-border per routing table stats.')
nncRoutingStatsNonBorderPerTbl24HourIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 78, 3, 12)).setObjects(("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl24HourIntervalTableDescriptor"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl24HourIntervalAbsoluteIntervalNumber"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl24HourIntervalFailedCallsDueToInitDTLNotGenerated"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl24HourIntervalCallsGeneratingAnInitDTL"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl24HourIntervalDTLOrigCallsSuccessEstWithoutReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl24HourIntervalDTLOrigCallsSuccessEstWithReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl24HourIntervalDTLOrigCallsFailedInReRouting"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl24HourIntervalSuccessCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl24HourIntervalFailedCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl24HourIntervalCrankbackReceivedAsDTLOriginator"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBPerTbl24HourIntervalDTLsGeneratedDueToCrankback"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncRoutingStatsNonBorderPerTbl24HourIntervalGroup = nncRoutingStatsNonBorderPerTbl24HourIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsNonBorderPerTbl24HourIntervalGroup.setDescription('A collection of objects providing 24 hour interval statistics for Non-border per routing table stats.')
nncRoutingStatsBorderPerTbl15MinCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 78, 3, 13)).setObjects(("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl15MinCurrentTableDescriptor"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl15MinCurrentAbsoluteIntervalNumber"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl15MinCurrentFailedCallsDueInitLowerLvlDTLsNotGen"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl15MinCurrentCallsGeneratingInitLowerLvlDTLs"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl15MinCurrentDTLGenCallsSuccessEstWithoutReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl15MinCurrentDTLGenCallsSuccessEstWithReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl15MinCurrentDTLGenCallsFailedInReRouting"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl15MinCurrentSuccessCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl15MinCurrentFailedCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl15MinCurrentCrankbackReceivedAsAnEntryBorderNode"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl15MinCurrentLowerLvlDTLsGenDueToRecdCrankback"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncRoutingStatsBorderPerTbl15MinCurrentGroup = nncRoutingStatsBorderPerTbl15MinCurrentGroup.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsBorderPerTbl15MinCurrentGroup.setDescription('A collection of objects providing 15 minute current statistics for border per routing table stats.')
nncRoutingStatsBorderPerTbl15MinIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 78, 3, 14)).setObjects(("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl15MinIntervalTableDescriptor"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl15MinIntervalAbsoluteIntervalNumber"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl15MinIntervalFailedCallsDueInitLowerLvlDTLsNotGen"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl15MinIntervalCallsGeneratingInitLowerLvlDTLs"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl15MinIntervalDTLGenCallsSuccessEstWithoutReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl15MinIntervalDTLGenCallsSuccessEstWithReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl15MinIntervalDTLGenCallsFailedInReRouting"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl15MinIntervalSuccessCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl15MinIntervalFailedCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl15MinIntervalCrankbackReceivedAsAnEntryBorderNode"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl15MinIntervalLowerLvlDTLsGenDueToRecdCrankback"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncRoutingStatsBorderPerTbl15MinIntervalGroup = nncRoutingStatsBorderPerTbl15MinIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsBorderPerTbl15MinIntervalGroup.setDescription('A collection of objects providing 15 minute interval statistics for border per routing table stats.')
nncRoutingStatsBorderPerTbl24HourCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 78, 3, 15)).setObjects(("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl24HourCurrentTableDescriptor"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl24HourCurrentState"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl24HourCurrentAbsoluteIntervalNumber"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl24HourCurrentFailedCallsDueInitLowerLvlDTLsNotGen"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl24HourCurrentCallsGeneratingInitLowerLvlDTLs"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl24HourCurrentDTLGenCallsSuccessEstWithoutReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl24HourCurrentDTLGenCallsSuccessEstWithReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl24HourCurrentDTLGenCallsFailedInReRouting"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl24HourCurrentSuccessCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl24HourCurrentFailedCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl24HourCurrentCrankbackReceivedAsAnEntryBorderNode"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl24HourCurrentLowerLvlDTLsGenDueToRecdCrankback"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncRoutingStatsBorderPerTbl24HourCurrentGroup = nncRoutingStatsBorderPerTbl24HourCurrentGroup.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsBorderPerTbl24HourCurrentGroup.setDescription('A collection of objects providing 24 hour current statistics for border per routing table stats.')
nncRoutingStatsBorderPerTbl24HourIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 78, 3, 16)).setObjects(("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl24HourIntervalTableDescriptor"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl24HourIntervalAbsoluteIntervalNumber"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl24HourIntervalFailedCallsDueInitLowerLvlDTLsNotGen"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl24HourIntervalCallsGeneratingInitLowerLvlDTLs"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl24HourIntervalDTLGenCallsSuccessEstWithoutReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl24HourIntervalDTLGenCallsSuccessEstWithReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl24HourIntervalDTLGenCallsFailedInReRouting"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl24HourIntervalSuccessCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl24HourIntervalFailedCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl24HourIntervalCrankbackReceivedAsAnEntryBorderNode"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBPerTbl24HourIntervalLowerLvlDTLsGenDueToRecdCrankback"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncRoutingStatsBorderPerTbl24HourIntervalGroup = nncRoutingStatsBorderPerTbl24HourIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsBorderPerTbl24HourIntervalGroup.setDescription('A collection of objects providing 24 hour interval statistics for border per routing table stats.')
nncPNNIStatNonBorderTotal15MinCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 78, 3, 17)).setObjects(("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal15MinCurrentAbsoluteIntervalNumber"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal15MinCurrentFailedCallsDueToInitDTLNotGenerated"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal15MinCurrentCallsGeneratingAnInitDTL"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal15MinCurrentDTLOrigCallsSuccessEstWithoutReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal15MinCurrentDTLOrigCallsSuccessEstWithReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal15MinCurrentDTLOrigCallsFailedInReRouting"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal15MinCurrentSuccessCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal15MinCurrentFailedCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal15MinCurrentCrankbackReceivedAsDTLOriginator"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal15MinCurrentDTLsGeneratedDueToCrankback"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal15MinCurrentCallsRecdAsTransitNodeOverInsideLinks"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal15MinCurrentCrnkbksRecdAsTransitNodeOvInsideLnks"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal15MinCurrentSucdEndBlocCrnkbksRecdOvInsideLnks"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncPNNIStatNonBorderTotal15MinCurrentGroup = nncPNNIStatNonBorderTotal15MinCurrentGroup.setStatus('current')
if mibBuilder.loadTexts: nncPNNIStatNonBorderTotal15MinCurrentGroup.setDescription('A collection of objects providing 15 minute current statistics for non-border total stats.')
nncPNNIStatNonBorderTotal15MinIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 78, 3, 18)).setObjects(("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal15MinIntervalAbsoluteIntervalNumber"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal15MinIntervalFailedCallsDueToInitDTLNotGenerated"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal15MinIntervalCallsGeneratingAnInitDTL"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal15MinIntervalDTLOrigCallsSuccessEstWithoutReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal15MinIntervalDTLOrigCallsSuccessEstWithReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal15MinIntervalDTLOrigCallsFailedInReRouting"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal15MinIntervalSuccessCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal15MinIntervalFailedCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal15MinIntervalCrankbackReceivedAsDTLOriginator"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal15MinIntervalDTLsGeneratedDueToCrankback"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal15MinIntervalCallsRecdAsTransitNodeOverInsideLinks"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal15MinIntervalCrnkbksRecdAsTransitNodeOvInsideLnks"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal15MinIntervalSucdEndBlocCrnkbksRecdOvInsideLnks"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncPNNIStatNonBorderTotal15MinIntervalGroup = nncPNNIStatNonBorderTotal15MinIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: nncPNNIStatNonBorderTotal15MinIntervalGroup.setDescription('A collection of objects providing 15 minute interval statistics for non-border total stats.')
nncPNNIStatNonBorderTotal24HourCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 78, 3, 19)).setObjects(("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourCurrentAbsoluteIntervalNumber"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourCurrentFailedCallsDueToInitDTLNotGenerated"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourCurrentCallsGeneratingAnInitDTL"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourCurrentDTLOrigCallsSuccessEstWithoutReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourCurrentDTLOrigCallsSuccessEstWithReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourCurrentDTLOrigCallsFailedInReRouting"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourCurrentSuccessCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourCurrentFailedCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourCurrentCrankbackReceivedAsDTLOriginator"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourCurrentDTLsGeneratedDueToCrankback"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourCurrentCallsRecdAsTransitNodeOverInsideLinks"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourCurrentCrnkbksRecdAsTransNodeOvInsideLnks"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourCurrentSucdEndBlocCrnkbksRecdOverInsideLinks"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncPNNIStatNonBorderTotal24HourCurrentGroup = nncPNNIStatNonBorderTotal24HourCurrentGroup.setStatus('current')
if mibBuilder.loadTexts: nncPNNIStatNonBorderTotal24HourCurrentGroup.setDescription('A collection of objects providing 24 hour current statistics for non-border total stats.')
nncPNNIStatNonBorderTotal24HourIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 78, 3, 20)).setObjects(("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourIntervalAbsoluteIntervalNumber"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourIntervalFailedCallsDueToInitDTLNotGenerated"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourIntervalCallsGeneratingAnInitDTL"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourIntervalDTLOrigCallsSuccessEstWithoutReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourIntervalDTLOrigCallsSuccessEstWithReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourIntervalDTLOrigCallsFailedInReRouting"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourIntervalSuccessCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourIntervalFailedCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourIntervalCrankbackReceivedAsDTLOriginator"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourIntervalDTLsGeneratedDueToCrankback"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourIntervalCallsRecdAsTransitNodeOverInsideLinks"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourIntervalCrnkbksRecdAsTransNodeOverInsideLnks"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourIntervalSucdEndBlocCrnkbksRecdOverInsideLnks"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncPNNIStatNonBorderTotal24HourIntervalGroup = nncPNNIStatNonBorderTotal24HourIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: nncPNNIStatNonBorderTotal24HourIntervalGroup.setDescription('A collection of objects providing 24 hour interval statistics for non-border total stats.')
nncPNNIStatBorderTotal15MinCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 78, 3, 21)).setObjects(("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal15MinCurrentAbsoluteIntervalNumber"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal15MinCurrentFailedCallsDueToInitLowerLvlDTLNotGen"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal15MinCurrentCallsGeneratingInitLowerLvlDTLs"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal15MinCurrentDTLGenCallsSuccessEstWithoutReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal15MinCurrentDTLGenCallsSuccessEstWithReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal15MinCurrentDTLGenCallsFailedInReRouting"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal15MinCurrentSuccessCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal15MinCurrentFailedCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal15MinCurrentCrankbackReceivedAsAnEntryBorderNode"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal15MinCurrentLowerLvlDTLsGenDueToRecdCrankback"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal15MinCurrentCallsRecdOverAnOutsideLink"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal15MinCurrentCallsTransmittedOverAnOutsideLink"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal15MinCurrentCrankbksRecdOverAnOutsideLink"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal15MinCurreSucdEndBlocCrankbksRecdOverOutsideLink"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal15MinCurrentCrankbkForwdedToPrevPGCrankbkLvlTooHigh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncPNNIStatBorderTotal15MinCurrentGroup = nncPNNIStatBorderTotal15MinCurrentGroup.setStatus('current')
if mibBuilder.loadTexts: nncPNNIStatBorderTotal15MinCurrentGroup.setDescription('A collection of objects providing 15 minute current statistics for border total stats.')
nncPNNIStatBorderTotal15MinIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 78, 3, 22)).setObjects(("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal15MinIntervalAbsoluteIntervalNumber"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal15MinIntervalFailedCallsDueToInitLowerLvlDTLNotGen"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal15MinIntervalCallsGeneratingInitLowerLvlDTLs"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal15MinIntervalDTLGenCallsSuccessEstWithoutReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal15MinIntervalDTLGenCallsSuccessEstWithReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal15MinIntervalDTLGenCallsFailedInReRouting"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal15MinIntervalSuccessCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal15MinIntervalFailedCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal15MinIntervalCrankbackReceivedAsAnEntryBorderNode"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal15MinIntervalLowerLvlDTLsGenDueToRecdCrankback"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal15MinIntervalCallsRecdOverAnOutsideLink"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal15MinIntervalCallsTransmittedOverAnOutsideLink"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal15MinIntervalCrankbksRecdOverAnOutsideLink"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal15MinIntervalSucdEndBlocCrankbksRecdOverOutsideLink"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal15MinIntervalCrankbkForwdedToPrevPGCrankbkLvlTooHigh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncPNNIStatBorderTotal15MinIntervalGroup = nncPNNIStatBorderTotal15MinIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: nncPNNIStatBorderTotal15MinIntervalGroup.setDescription('A collection of objects providing 15 minute interval statistics for border total stats.')
nncPNNIStatBorderTotal24HourCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 78, 3, 23)).setObjects(("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourCurrentAbsoluteIntervalNumber"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourCurrentFailedCallsDueToInitDTLNotGenerated"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourCurrentCallsGeneratingAnInitDTL"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourCurrentDTLOrigCallsSuccessEstWithoutReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourCurrentDTLOrigCallsSuccessEstWithReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourCurrentDTLOrigCallsFailedInReRouting"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourCurrentSuccessCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourCurrentFailedCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourCurrentCrankbackReceivedAsDTLOriginator"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourCurrentDTLsGeneratedDueToCrankback"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourCurrentCallsRecdAsTransitNodeOverInsideLinks"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourCurrentCrnkbksRecdAsTransNodeOvInsideLnks"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncNBTotal24HourCurrentSucdEndBlocCrnkbksRecdOverInsideLinks"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncPNNIStatBorderTotal24HourCurrentGroup = nncPNNIStatBorderTotal24HourCurrentGroup.setStatus('current')
if mibBuilder.loadTexts: nncPNNIStatBorderTotal24HourCurrentGroup.setDescription('A collection of objects providing 24 hour current statistics for border total stats.')
nncPNNIStatBorderTotal24HourIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 78, 3, 24)).setObjects(("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal24HourIntervalAbsoluteIntervalNumber"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal24HourIntervalFailedCallsDueToInitLowerLvlDTLNotGen"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal24HourIntervalCallsGeneratingInitLowerLvlDTLs"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal24HourIntervalDTLGenCallsSuccessEstWithoutReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal24HourIntervalDTLGenCallsSuccessEstWithReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal24HourIntervalDTLGenCallsFailedInReRouting"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal24HourIntervalSuccessCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal24HourIntervalFailedCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal24HourIntervalCrankbackReceivedAsAnEntryBorderNode"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal24HourIntervalLowerLvlDTLsGenDueToRecdCrankback"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal24HourIntervalCallsRecdOverAnOutsideLink"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal24HourIntervalCallsTransmittedOverAnOutsideLink"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal24HourIntervalCrankbksRecdOverAnOutsideLink"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal24HourCurrentSucdEndBlocCrankbksRecdOverOutsideLink"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncBTotal24HourIntervalCrankbkFwdToPrevPGCrankbkLvlTooHigh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncPNNIStatBorderTotal24HourIntervalGroup = nncPNNIStatBorderTotal24HourIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: nncPNNIStatBorderTotal24HourIntervalGroup.setDescription('A collection of objects providing 24 hour interval statistics for border total stats.')
nncRoutingStatsRawCommonGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 78, 3, 25)).setObjects(("NNCEXTCALLROUTINGSTATS-MIB", "nncRoutingStatsRawCommonSuccessRoutedCallsOrigFromLocalSubs"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRoutingStatsRawCommonSuccessRtedCallsTransitedViaThisNode"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRoutingStatsRawCommonSuccessRoutedCallsTermToLocalSubs"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRoutingStatsRawCommonSuccessRoutedLocalCalls"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRoutingStatsRawCommonCallsOrigFromLocalCalls"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRoutingStatsRawCommonCallsTermToLocalCalls"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRoutingStatsRawCommonLocalCallAttempts"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRoutingStatsRawCommonCallsClearedDueToNoRoutingTabEntry"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRoutingStatsRawCommonCrankbacksGeneratedByThisNode"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRoutingStatsRawCommonFailedCallsAtLocalSubs"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRoutingStatsRawCommonCallsSuccessRerouted"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRoutingStatsRawCommonCallsFailedInRerouting"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncRoutingStatsRawCommonGroup = nncRoutingStatsRawCommonGroup.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsRawCommonGroup.setDescription('A collection of objects providing raw counters for static and PNNI routing common stats.')
ncExtRoutingStatsRawSpecificGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 78, 3, 26)).setObjects(("NNCEXTCALLROUTINGSTATS-MIB", "nncRoutingStatsRawSpecificCallsStaticallyRoutedByThisNode"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRoutingStatsRawSpecificCrankbacksReceivedByThisNode"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRoutingStatsRawSpecificRerouteAttempts"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRoutingStatsRawSpecificRoutingLoopsDetectedByThisNode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ncExtRoutingStatsRawSpecificGroup = ncExtRoutingStatsRawSpecificGroup.setStatus('current')
if mibBuilder.loadTexts: ncExtRoutingStatsRawSpecificGroup.setDescription('A collection of objects providing raw counters for static routing specific stats.')
nncRoutingStatsRawNonBorderPerTblGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 78, 3, 27)).setObjects(("NNCEXTCALLROUTINGSTATS-MIB", "nncRawNBPerTbleTableDescriptor"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawNBPerTbleFailedCallsDueToInitDTLNotGenerated"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawNBPerTbleCallsGeneratingAnInitDTL"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawNBPerTbleDTLOrigCallsSuccessEstWithoutReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawNBPerTbleDTLOrigCallsSuccessEstWithReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawNBPerTbleDTLOrigCallsFailedInReRouting"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawNBPerTbleSuccessCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawNBPerTbleFailedCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawNBPerTbleCrankbackReceivedAsDTLOriginator"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawNBPerTbleDTLsGeneratedDueToCrankback"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncRoutingStatsRawNonBorderPerTblGroup = nncRoutingStatsRawNonBorderPerTblGroup.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsRawNonBorderPerTblGroup.setDescription('A collection of objects providing raw counters for non-border node per table stats.')
nncRoutingStatsRawBorderPerTblGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 78, 3, 28)).setObjects(("NNCEXTCALLROUTINGSTATS-MIB", "nncRawBPerTblTableDescriptor"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawBPerTblFailedCallsDueInitLowerLvlDTLsNotGen"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawBPerTblCallsGeneratingInitLowerLvlDTLs"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawBPerTblDTLGenCallsSuccessEstWithoutReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawBPerTblDTLGenCallsSuccessEstWithReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawBPerTblDTLGenCallsFailedInReRouting"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawBPerTblSuccessCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawBPerTblFailedCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawBPerTblCrankbackReceivedAsAnEntryBorderNode"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawBPerTblLowerLvlDTLsGenDueToRecdCrankback"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncRoutingStatsRawBorderPerTblGroup = nncRoutingStatsRawBorderPerTblGroup.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsRawBorderPerTblGroup.setDescription('A collection of objects providing raw counters for border node per table stats.')
nncPNNIStatRawNonBorderTotalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 78, 3, 29)).setObjects(("NNCEXTCALLROUTINGSTATS-MIB", "nncRawNBTotalFailedCallsDueToInitDTLNotGenerated"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawNBTotalCallsGeneratingAnInitDTL"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawNBTotalDTLOrigCallsSuccessEstWithoutReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawNBTotalDTLOrigCallsSuccessEstWithReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawNBTotalDTLOrigCallsFailedInReRouting"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawNBTotalSuccessCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawNBTotalFailedCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawNBTotalCrankbackReceivedAsDTLOriginator"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawNBTotalDTLsGeneratedDueToCrankback"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawNBTotalCallsRecdAsTransitNodeOverInsideLinks"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawNBTotalCrnkbksRecdAsTransitNodeOvInsideLnks"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawNBTotalSucdEndBlocCrnkbksRecdOvInsideLnks"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncPNNIStatRawNonBorderTotalGroup = nncPNNIStatRawNonBorderTotalGroup.setStatus('current')
if mibBuilder.loadTexts: nncPNNIStatRawNonBorderTotalGroup.setDescription('A collection of objects providing raw counters for non-border node total stats.')
nncRoutingStatsRawBorderTotalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 78, 3, 30)).setObjects(("NNCEXTCALLROUTINGSTATS-MIB", "nncRawBTotalFailedCallsDueToInitLowerLvlDTLNotGen"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawBTotalCallsGeneratingInitLowerLvlDTLs"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawBTotalDTLGenCallsSuccessEstWithoutReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawBTotalDTLGenCallsSuccessEstWithReroute"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawBTotalDTLGenCallsFailedInReRouting"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawBTotalSuccessCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawBTotalFailedCallsBdwGreaterThanRTDMinBdw"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawBTotalCrankbackReceivedAsAnEntryBorderNode"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawBTotalLowerLvlDTLsGenDueToRecdCrankback"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawBTotalCallsRecdOverAnOutsideLink"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawBTotalCallsTransmittedOverAnOutsideLink"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawBTotalCrankbksRecdOverAnOutsideLink"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawBTotalSucdEndBlocCrankbksRecdOverOutsideLink"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRawBTotalCrankbkForwdedToPrevPGCrankbkLvlTooHigh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncRoutingStatsRawBorderTotalGroup = nncRoutingStatsRawBorderTotalGroup.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsRawBorderTotalGroup.setDescription('A collection of objects providing raw counters for border node total stats.')
nncRoutingStatsCompliances1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 123, 3, 78, 4, 1)).setObjects(("NNCEXTCALLROUTINGSTATS-MIB", "nncRoutingStatsCommon15MinCurrentGroup"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRoutingStatsCommon24HourCurrentGroup"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRoutingStatsSpecific15MinCurrentGroup"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRoutingStatsSpecific24HourCurrentGroup"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRoutingStatsNonBorderPerTbl15MinCurrentGroup"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRoutingStatsNonBorderPerTbl24HourCurrentGroup"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRoutingStatsBorderPerTbl15MinCurrentGroup"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRoutingStatsBorderPerTbl24HourCurrentGroup"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncPNNIStatNonBorderTotal15MinCurrentGroup"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncPNNIStatNonBorderTotal24HourCurrentGroup"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncPNNIStatBorderTotal15MinCurrentGroup"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncPNNIStatBorderTotal24HourCurrentGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncRoutingStatsCompliances1 = nncRoutingStatsCompliances1.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsCompliances1.setDescription('The compliance statement for Newbridge SNMP entities which PNNI stats.')
nncRoutingStatsCompliances2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 123, 3, 78, 4, 2)).setObjects(("NNCEXTCALLROUTINGSTATS-MIB", "nncRoutingStatsCommon15MinIntervalGroup"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRoutingStatsCommon24HourIntervalGroup"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRoutingStatsSpecific15MinIntervalGroup"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRoutingStatsSpecific24HourIntervalGroup"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRoutingStatsNonBorderPerTbl15MinIntervalGroup"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRoutingStatsNonBorderPerTbl24HourIntervalGroup"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRoutingStatsBorderPerTbl15MinIntervalGroup"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRoutingStatsBorderPerTbl24HourIntervalGroup"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncPNNIStatNonBorderTotal15MinIntervalGroup"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncPNNIStatNonBorderTotal24HourIntervalGroup"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncPNNIStatBorderTotal15MinIntervalGroup"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncPNNIStatBorderTotal24HourIntervalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncRoutingStatsCompliances2 = nncRoutingStatsCompliances2.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsCompliances2.setDescription('The compliance statement for Newbridge SNMP entities which PNNI stats.')
nncRoutingStatsCompliances3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 123, 3, 78, 4, 3)).setObjects(("NNCEXTCALLROUTINGSTATS-MIB", "nncRoutingStatsRawCommonGroup"), ("NNCEXTCALLROUTINGSTATS-MIB", "ncExtRoutingStatsRawSpecificGroup"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRoutingStatsRawNonBorderPerTblGroup"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRoutingStatsRawBorderPerTblGroup"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncPNNIStatRawNonBorderTotalGroup"), ("NNCEXTCALLROUTINGSTATS-MIB", "nncRoutingStatsRawBorderTotalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncRoutingStatsCompliances3 = nncRoutingStatsCompliances3.setStatus('current')
if mibBuilder.loadTexts: nncRoutingStatsCompliances3.setDescription('The compliance statement for Newbridge SNMP entities which PNNI stats.')
mibBuilder.exportSymbols("NNCEXTCALLROUTINGSTATS-MIB", nncRawBPerTblSuccessCallsBdwGreaterThanRTDMinBdw=nncRawBPerTblSuccessCallsBdwGreaterThanRTDMinBdw, nncRawNBPerTbleCrankbackReceivedAsDTLOriginator=nncRawNBPerTbleCrankbackReceivedAsDTLOriginator, nncNBTotal24HourIntervalNumber=nncNBTotal24HourIntervalNumber, nncRoutingStatsSpecific24HourIntervalGroup=nncRoutingStatsSpecific24HourIntervalGroup, nncRoutingStatsCommon15MinIntervalEntry=nncRoutingStatsCommon15MinIntervalEntry, nncNBPerTbl15MinCurrentSuccessCallsBdwGreaterThanRTDMinBdw=nncNBPerTbl15MinCurrentSuccessCallsBdwGreaterThanRTDMinBdw, nncNBTotal15MinIntervalFailedCallsBdwGreaterThanRTDMinBdw=nncNBTotal15MinIntervalFailedCallsBdwGreaterThanRTDMinBdw, nncBPerTbl15MinIntervalSuccessCallsBdwGreaterThanRTDMinBdw=nncBPerTbl15MinIntervalSuccessCallsBdwGreaterThanRTDMinBdw, nncBTotal15MinIntervalCrankbksRecdOverAnOutsideLink=nncBTotal15MinIntervalCrankbksRecdOverAnOutsideLink, nncNBPerTbl15MinIntervalDTLOrigCallsFailedInReRouting=nncNBPerTbl15MinIntervalDTLOrigCallsFailedInReRouting, nncExtRoutingStats=nncExtRoutingStats, nncBTotal24HourCurrentFailedCallsDueToInitLowerLvlDTLNotGen=nncBTotal24HourCurrentFailedCallsDueToInitLowerLvlDTLNotGen, nncRoutingStatsBorderPerTbl24HourIntervalTable=nncRoutingStatsBorderPerTbl24HourIntervalTable, nncBTotal24HourIntervalCrankbksRecdOverAnOutsideLink=nncBTotal24HourIntervalCrankbksRecdOverAnOutsideLink, nncCommon15MinCurrentSuccessRoutedCallsOrigFromLocalSubs=nncCommon15MinCurrentSuccessRoutedCallsOrigFromLocalSubs, nncBPerTbl24HourCurrentLowerLvlDTLsGenDueToRecdCrankback=nncBPerTbl24HourCurrentLowerLvlDTLsGenDueToRecdCrankback, nncRoutingStatsNonBorderPerTbl24HourIntervalEntry=nncRoutingStatsNonBorderPerTbl24HourIntervalEntry, nncBPerTbl24HourIntervalDTLGenCallsFailedInReRouting=nncBPerTbl24HourIntervalDTLGenCallsFailedInReRouting, nncRoutingStatsRawSpecificTable=nncRoutingStatsRawSpecificTable, nncBPerTbl24HourCurrentTableDescriptor=nncBPerTbl24HourCurrentTableDescriptor, nncRawNBTotalSuccessCallsBdwGreaterThanRTDMinBdw=nncRawNBTotalSuccessCallsBdwGreaterThanRTDMinBdw, nncNBTotal15MinIntervalCrankbackReceivedAsDTLOriginator=nncNBTotal15MinIntervalCrankbackReceivedAsDTLOriginator, nncSpecific15MinCurrentCrankbacksReceivedByThisNode=nncSpecific15MinCurrentCrankbacksReceivedByThisNode, nncNBTotal15MinIntervalCallsGeneratingAnInitDTL=nncNBTotal15MinIntervalCallsGeneratingAnInitDTL, nncRawBTotalFailedCallsBdwGreaterThanRTDMinBdw=nncRawBTotalFailedCallsBdwGreaterThanRTDMinBdw, nncRawNBPerTbleDTLOrigCallsSuccessEstWithReroute=nncRawNBPerTbleDTLOrigCallsSuccessEstWithReroute, nncBPerTbl24HourIntervalDTLGenCallsSuccessEstWithoutReroute=nncBPerTbl24HourIntervalDTLGenCallsSuccessEstWithoutReroute, nncRoutingStatsRawCommonSuccessRoutedCallsTermToLocalSubs=nncRoutingStatsRawCommonSuccessRoutedCallsTermToLocalSubs, nncBPerTbl15MinCurrentFailedCallsDueInitLowerLvlDTLsNotGen=nncBPerTbl15MinCurrentFailedCallsDueInitLowerLvlDTLsNotGen, nncCommon15MinIntervalState=nncCommon15MinIntervalState, nncCommon24HourIntervalCallsSuccessRerouted=nncCommon24HourIntervalCallsSuccessRerouted, nncRoutingStatsBorderTotal24HourCurrentTable=nncRoutingStatsBorderTotal24HourCurrentTable, nncCommon24HourIntervalCallsOrigFromLocalCalls=nncCommon24HourIntervalCallsOrigFromLocalCalls, nncBTotal24HourCurrentCrankbksRecdOverAnOutsideLink=nncBTotal24HourCurrentCrankbksRecdOverAnOutsideLink, nncRoutingStatsCommon15MinIntervalTable=nncRoutingStatsCommon15MinIntervalTable, nncRoutingStatsSpecific15MinIntervalGroup=nncRoutingStatsSpecific15MinIntervalGroup, nncRoutingStatsCompliances2=nncRoutingStatsCompliances2, nncBPerTbl24HourCurrentSuccessCallsBdwGreaterThanRTDMinBdw=nncBPerTbl24HourCurrentSuccessCallsBdwGreaterThanRTDMinBdw, nncBTotal24HourCurrentFailedCallsBdwGreaterThanRTDMinBdw=nncBTotal24HourCurrentFailedCallsBdwGreaterThanRTDMinBdw, nncNBTotal15MinCurrentCrankbackReceivedAsDTLOriginator=nncNBTotal15MinCurrentCrankbackReceivedAsDTLOriginator, nncBPerTbl15MinIntervalAbsoluteIntervalNumber=nncBPerTbl15MinIntervalAbsoluteIntervalNumber, nncNBPerTbl24HourIntervalAbsoluteIntervalNumber=nncNBPerTbl24HourIntervalAbsoluteIntervalNumber, nncNBPerTbl24HourIntervalDTLsGeneratedDueToCrankback=nncNBPerTbl24HourIntervalDTLsGeneratedDueToCrankback, nncBTotal24HourCurrentLowerLvlDTLsGenDueToRecdCrankback=nncBTotal24HourCurrentLowerLvlDTLsGenDueToRecdCrankback, nncRoutingStatsBorderTotal15MinCurrentTable=nncRoutingStatsBorderTotal15MinCurrentTable, nncNBTotal15MinCurrentFailedCallsBdwGreaterThanRTDMinBdw=nncNBTotal15MinCurrentFailedCallsBdwGreaterThanRTDMinBdw, nncNBTotal24HourIntervalFailedCallsDueToInitDTLNotGenerated=nncNBTotal24HourIntervalFailedCallsDueToInitDTLNotGenerated, nncSpecific24HourIntervalCrankbacksReceivedByThisNode=nncSpecific24HourIntervalCrankbacksReceivedByThisNode, nncBPerTbl15MinIntervalFailedCallsDueInitLowerLvlDTLsNotGen=nncBPerTbl15MinIntervalFailedCallsDueInitLowerLvlDTLsNotGen, nncSpecific24HourCurrentRerouteAttempts=nncSpecific24HourCurrentRerouteAttempts, nncNBTotal24HourIntervalState=nncNBTotal24HourIntervalState, nncBTotal15MinCurrentCallsGeneratingInitLowerLvlDTLs=nncBTotal15MinCurrentCallsGeneratingInitLowerLvlDTLs, nncNBTotal15MinIntervalNumber=nncNBTotal15MinIntervalNumber, nncNBPerTbl15MinIntervalDTLOrigCallsSuccessEstWithReroute=nncNBPerTbl15MinIntervalDTLOrigCallsSuccessEstWithReroute, nncCommon24HourCurrentSuccessRoutedCallsOrigFromLocalSubs=nncCommon24HourCurrentSuccessRoutedCallsOrigFromLocalSubs, nncSpecific24HourIntervalState=nncSpecific24HourIntervalState, nncNBPerTbl15MinIntervalDTLsGeneratedDueToCrankback=nncNBPerTbl15MinIntervalDTLsGeneratedDueToCrankback, nncRawNBPerTbleDTLsGeneratedDueToCrankback=nncRawNBPerTbleDTLsGeneratedDueToCrankback, nncRawBTotalCrankbkForwdedToPrevPGCrankbkLvlTooHigh=nncRawBTotalCrankbkForwdedToPrevPGCrankbkLvlTooHigh, nncNBPerTbl24HourCurrentCrankbackReceivedAsDTLOriginator=nncNBPerTbl24HourCurrentCrankbackReceivedAsDTLOriginator, nncBPerTbl24HourCurrentFailedCallsBdwGreaterThanRTDMinBdw=nncBPerTbl24HourCurrentFailedCallsBdwGreaterThanRTDMinBdw, nncRoutingStatsRawSpecificCrankbacksReceivedByThisNode=nncRoutingStatsRawSpecificCrankbacksReceivedByThisNode, nncBTotal15MinCurrentSuccessCallsBdwGreaterThanRTDMinBdw=nncBTotal15MinCurrentSuccessCallsBdwGreaterThanRTDMinBdw, nncNBTotal24HourIntervalDTLsGeneratedDueToCrankback=nncNBTotal24HourIntervalDTLsGeneratedDueToCrankback, nncRawBTotalCallsGeneratingInitLowerLvlDTLs=nncRawBTotalCallsGeneratingInitLowerLvlDTLs, nncBPerTbl15MinCurrentCrankbackReceivedAsAnEntryBorderNode=nncBPerTbl15MinCurrentCrankbackReceivedAsAnEntryBorderNode, nncNBPerTbl15MinCurrentDTLOrigCallsFailedInReRouting=nncNBPerTbl15MinCurrentDTLOrigCallsFailedInReRouting, nncNBPerTbl24HourIntervalFailedCallsBdwGreaterThanRTDMinBdw=nncNBPerTbl24HourIntervalFailedCallsBdwGreaterThanRTDMinBdw, nncNBTotal24HourIntervalCallsRecdAsTransitNodeOverInsideLinks=nncNBTotal24HourIntervalCallsRecdAsTransitNodeOverInsideLinks, nncRoutingStatsCommon24HourCurrentTable=nncRoutingStatsCommon24HourCurrentTable, nncBPerTbl24HourCurrentState=nncBPerTbl24HourCurrentState, nncBTotal15MinIntervalNumber=nncBTotal15MinIntervalNumber, nncRoutingStatsNonBorderPerTbl24HourCurrentGroup=nncRoutingStatsNonBorderPerTbl24HourCurrentGroup, nncRawBPerTblDTLGenCallsSuccessEstWithoutReroute=nncRawBPerTblDTLGenCallsSuccessEstWithoutReroute, nncRoutingStatsCompliances1=nncRoutingStatsCompliances1, nncBTotal24HourIntervalAbsoluteIntervalNumber=nncBTotal24HourIntervalAbsoluteIntervalNumber, nncNBTotal15MinCurrentFailedCallsDueToInitDTLNotGenerated=nncNBTotal15MinCurrentFailedCallsDueToInitDTLNotGenerated, nncNBPerTbl15MinIntervalCrankbackReceivedAsDTLOriginator=nncNBPerTbl15MinIntervalCrankbackReceivedAsDTLOriginator, nncRawNBTotalCallsRecdAsTransitNodeOverInsideLinks=nncRawNBTotalCallsRecdAsTransitNodeOverInsideLinks, nncRawBPerTblCallsGeneratingInitLowerLvlDTLs=nncRawBPerTblCallsGeneratingInitLowerLvlDTLs, nncNBPerTbl15MinIntervalTableDescriptor=nncNBPerTbl15MinIntervalTableDescriptor, nncCommon24HourCurrentLocalCallAttempts=nncCommon24HourCurrentLocalCallAttempts, nncNBTotal15MinCurrentState=nncNBTotal15MinCurrentState, nncNBTotal24HourIntervalCrnkbksRecdAsTransNodeOverInsideLnks=nncNBTotal24HourIntervalCrnkbksRecdAsTransNodeOverInsideLnks, nncSpecific15MinIntervalState=nncSpecific15MinIntervalState, nncNBPerTbl15MinIntervalState=nncNBPerTbl15MinIntervalState, nncBTotal15MinCurrentFailedCallsBdwGreaterThanRTDMinBdw=nncBTotal15MinCurrentFailedCallsBdwGreaterThanRTDMinBdw, nncRawNBTotalDTLsGeneratedDueToCrankback=nncRawNBTotalDTLsGeneratedDueToCrankback, nncCommon15MinIntervalCallsFailedInRerouting=nncCommon15MinIntervalCallsFailedInRerouting, nncRoutingStatsNonBorderPerTbl15MinIntervalTable=nncRoutingStatsNonBorderPerTbl15MinIntervalTable, nncRoutingStatsSpecific15MinCurrentEntry=nncRoutingStatsSpecific15MinCurrentEntry, nncRawNBTotalFailedCallsDueToInitDTLNotGenerated=nncRawNBTotalFailedCallsDueToInitDTLNotGenerated, nncSpecific24HourIntervalRerouteAttempts=nncSpecific24HourIntervalRerouteAttempts, nncRoutingStatsNonBorderPerTbl15MinIntervalEntry=nncRoutingStatsNonBorderPerTbl15MinIntervalEntry, nncNBTotal24HourIntervalDTLOrigCallsFailedInReRouting=nncNBTotal24HourIntervalDTLOrigCallsFailedInReRouting, nncRoutingStatsSpecific24HourIntervalEntry=nncRoutingStatsSpecific24HourIntervalEntry, nncNBTotal24HourIntervalDTLOrigCallsSuccessEstWithoutReroute=nncNBTotal24HourIntervalDTLOrigCallsSuccessEstWithoutReroute, nncRoutingStatsCommon24HourIntervalGroup=nncRoutingStatsCommon24HourIntervalGroup, nncBPerTbl15MinIntervalDTLGenCallsFailedInReRouting=nncBPerTbl15MinIntervalDTLGenCallsFailedInReRouting, nncRawNBPerTbleDTLOrigCallsSuccessEstWithoutReroute=nncRawNBPerTbleDTLOrigCallsSuccessEstWithoutReroute, nncRoutingStatsRawBorderPerTblTable=nncRoutingStatsRawBorderPerTblTable, nncPNNIStatNonBorderTotal24HourCurrentGroup=nncPNNIStatNonBorderTotal24HourCurrentGroup, nncBPerTbl15MinCurrentCallsGeneratingInitLowerLvlDTLs=nncBPerTbl15MinCurrentCallsGeneratingInitLowerLvlDTLs, nncNBPerTbl24HourCurrentDTLOrigCallsSuccessEstWithoutReroute=nncNBPerTbl24HourCurrentDTLOrigCallsSuccessEstWithoutReroute, nncCommon24HourIntervalSuccessRoutedLocalCalls=nncCommon24HourIntervalSuccessRoutedLocalCalls, nncNBTotal15MinIntervalCallsRecdAsTransitNodeOverInsideLinks=nncNBTotal15MinIntervalCallsRecdAsTransitNodeOverInsideLinks, nncBPerTbl24HourIntervalTableDescriptor=nncBPerTbl24HourIntervalTableDescriptor, nncBPerTbl24HourCurrentCallsGeneratingInitLowerLvlDTLs=nncBPerTbl24HourCurrentCallsGeneratingInitLowerLvlDTLs, nncCommon15MinIntervalSuccessRoutedCallsOrigFromLocalSubs=nncCommon15MinIntervalSuccessRoutedCallsOrigFromLocalSubs, nncBTotal15MinIntervalSuccessCallsBdwGreaterThanRTDMinBdw=nncBTotal15MinIntervalSuccessCallsBdwGreaterThanRTDMinBdw, nncSpecific24HourIntervalRoutingLoopsDetectedByThisNode=nncSpecific24HourIntervalRoutingLoopsDetectedByThisNode, nncRoutingStatsBorderTotal24HourIntervalEntry=nncRoutingStatsBorderTotal24HourIntervalEntry, nncBPerTbl15MinCurrentDTLGenCallsSuccessEstWithoutReroute=nncBPerTbl15MinCurrentDTLGenCallsSuccessEstWithoutReroute, nncPNNIStatBorderTotal15MinCurrentGroup=nncPNNIStatBorderTotal15MinCurrentGroup, nncSpecific15MinCurrentRerouteAttempts=nncSpecific15MinCurrentRerouteAttempts, nncBPerTbl24HourIntervalSuccessCallsBdwGreaterThanRTDMinBdw=nncBPerTbl24HourIntervalSuccessCallsBdwGreaterThanRTDMinBdw, nncRoutingStatsSpecific15MinCurrentTable=nncRoutingStatsSpecific15MinCurrentTable, nncRoutingStatsNonBorderTotal24HourCurrentEntry=nncRoutingStatsNonBorderTotal24HourCurrentEntry, nncCommon24HourIntervalSuccessRoutedCallsTransitedViaThisNode=nncCommon24HourIntervalSuccessRoutedCallsTransitedViaThisNode, nncCommon24HourIntervalSuccessRoutedCallsTermToLocalSubs=nncCommon24HourIntervalSuccessRoutedCallsTermToLocalSubs, nncNBTotal24HourCurrentDTLOrigCallsSuccessEstWithoutReroute=nncNBTotal24HourCurrentDTLOrigCallsSuccessEstWithoutReroute, nncRoutingStatsNonBorderTotal24HourCurrentTable=nncRoutingStatsNonBorderTotal24HourCurrentTable, nncRawNBTotalCallsGeneratingAnInitDTL=nncRawNBTotalCallsGeneratingAnInitDTL, nncRoutingStatsRawSpecificCallsStaticallyRoutedByThisNode=nncRoutingStatsRawSpecificCallsStaticallyRoutedByThisNode, nncRoutingStatsNonBorderTotal15MinIntervalEntry=nncRoutingStatsNonBorderTotal15MinIntervalEntry, ncExtRoutingStatsRawSpecificGroup=ncExtRoutingStatsRawSpecificGroup, nncNBTotal15MinCurrentDTLOrigCallsSuccessEstWithReroute=nncNBTotal15MinCurrentDTLOrigCallsSuccessEstWithReroute, nncBPerTbl15MinCurrentAbsoluteIntervalNumber=nncBPerTbl15MinCurrentAbsoluteIntervalNumber, nncCommon24HourIntervalCallsClearedDueToNoRoutingTabEntry=nncCommon24HourIntervalCallsClearedDueToNoRoutingTabEntry, nncBPerTbl24HourIntervalFailedCallsDueInitLowerLvlDTLsNotGen=nncBPerTbl24HourIntervalFailedCallsDueInitLowerLvlDTLsNotGen, nncRoutingStatsNonBorderPerTbl24HourCurrentTable=nncRoutingStatsNonBorderPerTbl24HourCurrentTable, nncNBTotal15MinIntervalSucdEndBlocCrnkbksRecdOvInsideLnks=nncNBTotal15MinIntervalSucdEndBlocCrnkbksRecdOvInsideLnks, nncCommon15MinCurrentCallsFailedInRerouting=nncCommon15MinCurrentCallsFailedInRerouting, nncNBTotal24HourCurrentCrankbackReceivedAsDTLOriginator=nncNBTotal24HourCurrentCrankbackReceivedAsDTLOriginator, nncRawBPerTblFailedCallsBdwGreaterThanRTDMinBdw=nncRawBPerTblFailedCallsBdwGreaterThanRTDMinBdw, nncRoutingStatsSpecific15MinCurrentGroup=nncRoutingStatsSpecific15MinCurrentGroup, nncRoutingStatsCommon24HourCurrentGroup=nncRoutingStatsCommon24HourCurrentGroup, nncSpecific24HourIntervalNumber=nncSpecific24HourIntervalNumber, nncRoutingStatsRawBorderTotalTable=nncRoutingStatsRawBorderTotalTable, nncCommon24HourIntervalCallsTermToLocalCalls=nncCommon24HourIntervalCallsTermToLocalCalls, nncBPerTbl24HourCurrentAbsoluteIntervalNumber=nncBPerTbl24HourCurrentAbsoluteIntervalNumber, nncNBTotal15MinIntervalState=nncNBTotal15MinIntervalState, nncBTotal24HourCurrentSuccessCallsBdwGreaterThanRTDMinBdw=nncBTotal24HourCurrentSuccessCallsBdwGreaterThanRTDMinBdw, nncRoutingStatsRawCommonCallsClearedDueToNoRoutingTabEntry=nncRoutingStatsRawCommonCallsClearedDueToNoRoutingTabEntry, nncNBPerTbl24HourCurrentCallsGeneratingAnInitDTL=nncNBPerTbl24HourCurrentCallsGeneratingAnInitDTL, nncRoutingStatsRawCommonCallsTermToLocalCalls=nncRoutingStatsRawCommonCallsTermToLocalCalls, nncCommon15MinIntervalCallsTermToLocalCalls=nncCommon15MinIntervalCallsTermToLocalCalls, nncRoutingStatsSpecific24HourCurrentGroup=nncRoutingStatsSpecific24HourCurrentGroup, nncPNNIStatBorderTotal24HourCurrentGroup=nncPNNIStatBorderTotal24HourCurrentGroup, nncBPerTbl15MinCurrentDTLGenCallsFailedInReRouting=nncBPerTbl15MinCurrentDTLGenCallsFailedInReRouting, nncNBPerTbl24HourCurrentState=nncNBPerTbl24HourCurrentState, nncNBTotal15MinIntervalDTLsGeneratedDueToCrankback=nncNBTotal15MinIntervalDTLsGeneratedDueToCrankback, nncNBTotal24HourCurrentCallsRecdAsTransitNodeOverInsideLinks=nncNBTotal24HourCurrentCallsRecdAsTransitNodeOverInsideLinks, nncBPerTbl24HourIntervalState=nncBPerTbl24HourIntervalState, nncBTotal15MinCurrentLowerLvlDTLsGenDueToRecdCrankback=nncBTotal15MinCurrentLowerLvlDTLsGenDueToRecdCrankback, nncRoutingStatsBorderTotal24HourCurrentEntry=nncRoutingStatsBorderTotal24HourCurrentEntry, nncBTotal24HourCurrentDTLGenCallsFailedInReRouting=nncBTotal24HourCurrentDTLGenCallsFailedInReRouting, nncRawBPerTblFailedCallsDueInitLowerLvlDTLsNotGen=nncRawBPerTblFailedCallsDueInitLowerLvlDTLsNotGen, nncRawBTotalLowerLvlDTLsGenDueToRecdCrankback=nncRawBTotalLowerLvlDTLsGenDueToRecdCrankback, nncNBTotal24HourIntervalFailedCallsBdwGreaterThanRTDMinBdw=nncNBTotal24HourIntervalFailedCallsBdwGreaterThanRTDMinBdw, nncRoutingStatsCommon24HourCurrentEntry=nncRoutingStatsCommon24HourCurrentEntry, nncBPerTbl15MinIntervalCrankbackReceivedAsAnEntryBorderNode=nncBPerTbl15MinIntervalCrankbackReceivedAsAnEntryBorderNode, nncNBTotal15MinCurrentCrnkbksRecdAsTransitNodeOvInsideLnks=nncNBTotal15MinCurrentCrnkbksRecdAsTransitNodeOvInsideLnks, nncRoutingStatsBorderTotal15MinIntervalTable=nncRoutingStatsBorderTotal15MinIntervalTable, nncRawNBPerTbleTableDescriptor=nncRawNBPerTbleTableDescriptor, nncNBPerTbl24HourIntervalCallsGeneratingAnInitDTL=nncNBPerTbl24HourIntervalCallsGeneratingAnInitDTL, nncBPerTbl15MinIntervalCallsGeneratingInitLowerLvlDTLs=nncBPerTbl15MinIntervalCallsGeneratingInitLowerLvlDTLs, nncCommon15MinCurrentAbsoluteIntervalNumber=nncCommon15MinCurrentAbsoluteIntervalNumber, nncCommon15MinCurrentSuccessRoutedCallsTransitedViaThisNode=nncCommon15MinCurrentSuccessRoutedCallsTransitedViaThisNode, nncNBTotal24HourCurrentDTLOrigCallsSuccessEstWithReroute=nncNBTotal24HourCurrentDTLOrigCallsSuccessEstWithReroute, nncRoutingStatsNonBorderPerTbl24HourIntervalGroup=nncRoutingStatsNonBorderPerTbl24HourIntervalGroup, nncRawBTotalFailedCallsDueToInitLowerLvlDTLNotGen=nncRawBTotalFailedCallsDueToInitLowerLvlDTLNotGen, nncSpecific24HourCurrentState=nncSpecific24HourCurrentState, nncCommon15MinCurrentCrankbacksGeneratedByThisNode=nncCommon15MinCurrentCrankbacksGeneratedByThisNode, nncRoutingStatsNonBorderPerTbl15MinIntervalGroup=nncRoutingStatsNonBorderPerTbl15MinIntervalGroup, nncRoutingStatsSpecific24HourCurrentEntry=nncRoutingStatsSpecific24HourCurrentEntry, nncCommon15MinIntervalFailedCallsAtLocalSubs=nncCommon15MinIntervalFailedCallsAtLocalSubs, nncBPerTbl15MinIntervalDTLGenCallsSuccessEstWithReroute=nncBPerTbl15MinIntervalDTLGenCallsSuccessEstWithReroute, nncNBTotal15MinIntervalSuccessCallsBdwGreaterThanRTDMinBdw=nncNBTotal15MinIntervalSuccessCallsBdwGreaterThanRTDMinBdw, nncRawNBTotalDTLOrigCallsFailedInReRouting=nncRawNBTotalDTLOrigCallsFailedInReRouting, nncRoutingStatsSpecific24HourCurrentTable=nncRoutingStatsSpecific24HourCurrentTable, nncRoutingStatsBorderTotal24HourIntervalTable=nncRoutingStatsBorderTotal24HourIntervalTable, nncBTotal24HourIntervalSucdEndBlocCrankbksRecdOverOutsideLink=nncBTotal24HourIntervalSucdEndBlocCrankbksRecdOverOutsideLink, nncRawNBTotalCrankbackReceivedAsDTLOriginator=nncRawNBTotalCrankbackReceivedAsDTLOriginator, nncNBTotal24HourCurrentCrnkbksRecdAsTransNodeOvInsideLnks=nncNBTotal24HourCurrentCrnkbksRecdAsTransNodeOvInsideLnks, nncRoutingStatsRawNonBorderPerTblGroup=nncRoutingStatsRawNonBorderPerTblGroup, nncRoutingStatsCommon15MinCurrentTable=nncRoutingStatsCommon15MinCurrentTable, nncSpecific15MinCurrentState=nncSpecific15MinCurrentState, nncRoutingStatsRawSpecificEntry=nncRoutingStatsRawSpecificEntry, nncBPerTbl15MinCurrentSuccessCallsBdwGreaterThanRTDMinBdw=nncBPerTbl15MinCurrentSuccessCallsBdwGreaterThanRTDMinBdw, nncRawBPerTblCrankbackReceivedAsAnEntryBorderNode=nncRawBPerTblCrankbackReceivedAsAnEntryBorderNode, nncBPerTbl24HourIntervalNumber=nncBPerTbl24HourIntervalNumber, nncPNNIStatNonBorderTotal15MinCurrentGroup=nncPNNIStatNonBorderTotal15MinCurrentGroup, nncNBTotal24HourCurrentAbsoluteIntervalNumber=nncNBTotal24HourCurrentAbsoluteIntervalNumber, nncBTotal24HourIntervalSuccessCallsBdwGreaterThanRTDMinBdw=nncBTotal24HourIntervalSuccessCallsBdwGreaterThanRTDMinBdw, nncNBTotal15MinIntervalAbsoluteIntervalNumber=nncNBTotal15MinIntervalAbsoluteIntervalNumber, nncRawNBPerTbleFailedCallsDueToInitDTLNotGenerated=nncRawNBPerTbleFailedCallsDueToInitDTLNotGenerated, nncCommon15MinIntervalAbsoluteIntervalNumber=nncCommon15MinIntervalAbsoluteIntervalNumber, nncNBPerTbl15MinCurrentState=nncNBPerTbl15MinCurrentState, nncRoutingStatsBorderPerTbl24HourCurrentGroup=nncRoutingStatsBorderPerTbl24HourCurrentGroup, nncBTotal15MinCurreSucdEndBlocCrankbksRecdOverOutsideLink=nncBTotal15MinCurreSucdEndBlocCrankbksRecdOverOutsideLink, nncSpecific24HourCurrentRoutingLoopsDetectedByThisNode=nncSpecific24HourCurrentRoutingLoopsDetectedByThisNode, nncNBTotal24HourIntervalCrankbackReceivedAsDTLOriginator=nncNBTotal24HourIntervalCrankbackReceivedAsDTLOriginator, nncRoutingStatsSpecific15MinIntervalEntry=nncRoutingStatsSpecific15MinIntervalEntry, nncRoutingStatsRawCommonTable=nncRoutingStatsRawCommonTable, nncNBPerTbl24HourIntervalNumber=nncNBPerTbl24HourIntervalNumber, nncNBTotal15MinCurrentSuccessCallsBdwGreaterThanRTDMinBdw=nncNBTotal15MinCurrentSuccessCallsBdwGreaterThanRTDMinBdw, nncBPerTbl15MinIntervalLowerLvlDTLsGenDueToRecdCrankback=nncBPerTbl15MinIntervalLowerLvlDTLsGenDueToRecdCrankback, nncCommon24HourCurrentCallsClearedDueToNoRoutingTabEntry=nncCommon24HourCurrentCallsClearedDueToNoRoutingTabEntry, nncBTotal24HourCurrentCallsTransmittedOverAnOutsideLink=nncBTotal24HourCurrentCallsTransmittedOverAnOutsideLink, nncRoutingStatsRawCommonCallsOrigFromLocalCalls=nncRoutingStatsRawCommonCallsOrigFromLocalCalls, nncNBTotal24HourIntervalCallsGeneratingAnInitDTL=nncNBTotal24HourIntervalCallsGeneratingAnInitDTL, nncNBPerTbl15MinCurrentFailedCallsDueToInitDTLNotGenerated=nncNBPerTbl15MinCurrentFailedCallsDueToInitDTLNotGenerated, nncNBPerTble15MinCurrentDTLOrigCallsSuccessEstWithoutReroute=nncNBPerTble15MinCurrentDTLOrigCallsSuccessEstWithoutReroute, nncBTotal15MinIntervalDTLGenCallsFailedInReRouting=nncBTotal15MinIntervalDTLGenCallsFailedInReRouting, nncRoutingStatsRawCommonSuccessRtedCallsTransitedViaThisNode=nncRoutingStatsRawCommonSuccessRtedCallsTransitedViaThisNode, nncRoutingStatsBorderPerTbl24HourCurrentEntry=nncRoutingStatsBorderPerTbl24HourCurrentEntry, nncCommon24HourCurrentAbsoluteIntervalNumber=nncCommon24HourCurrentAbsoluteIntervalNumber, nncNBTotal24HourIntervalAbsoluteIntervalNumber=nncNBTotal24HourIntervalAbsoluteIntervalNumber, nncBTotal15MinIntervalLowerLvlDTLsGenDueToRecdCrankback=nncBTotal15MinIntervalLowerLvlDTLsGenDueToRecdCrankback, nncRoutingStatsNonBorderPerTbl15MinCurrentGroup=nncRoutingStatsNonBorderPerTbl15MinCurrentGroup, nncPNNIStatBorderTotal15MinIntervalGroup=nncPNNIStatBorderTotal15MinIntervalGroup, nncSpecific15MinIntervalCrankbacksReceivedByThisNode=nncSpecific15MinIntervalCrankbacksReceivedByThisNode, nncRawBTotalDTLGenCallsSuccessEstWithReroute=nncRawBTotalDTLGenCallsSuccessEstWithReroute, nncNBPerTbl15MinIntervalFailedCallsDueToInitDTLNotGenerated=nncNBPerTbl15MinIntervalFailedCallsDueToInitDTLNotGenerated, nncRoutingStatsCommon15MinCurrentGroup=nncRoutingStatsCommon15MinCurrentGroup, nncRoutingStatsBorderPerTbl15MinCurrentTable=nncRoutingStatsBorderPerTbl15MinCurrentTable, nncRoutingStatsRawCommonCrankbacksGeneratedByThisNode=nncRoutingStatsRawCommonCrankbacksGeneratedByThisNode, nncBTotal24HourCurrentAbsoluteIntervalNumber=nncBTotal24HourCurrentAbsoluteIntervalNumber, nncBPerTbl15MinIntervalFailedCallsBdwGreaterThanRTDMinBdw=nncBPerTbl15MinIntervalFailedCallsBdwGreaterThanRTDMinBdw, nncBTotal24HourIntervalDTLGenCallsSuccessEstWithReroute=nncBTotal24HourIntervalDTLGenCallsSuccessEstWithReroute, nncBPerTbl15MinIntervalNumber=nncBPerTbl15MinIntervalNumber, nncBTotal24HourIntervalDTLGenCallsFailedInReRouting=nncBTotal24HourIntervalDTLGenCallsFailedInReRouting, nncRoutingStatsRawCommonEntry=nncRoutingStatsRawCommonEntry, nncBTotal15MinIntervalState=nncBTotal15MinIntervalState, nncCommon24HourIntervalFailedCallsAtLocalSubs=nncCommon24HourIntervalFailedCallsAtLocalSubs, nncNBPerTbl24HourCurrentDTLOrigCallsSuccessEstWithReroute=nncNBPerTbl24HourCurrentDTLOrigCallsSuccessEstWithReroute, nncRoutingStatsNonBorderTotal24HourIntervalTable=nncRoutingStatsNonBorderTotal24HourIntervalTable, nncRawBTotalDTLGenCallsSuccessEstWithoutReroute=nncRawBTotalDTLGenCallsSuccessEstWithoutReroute, nncCommon24HourIntervalNumber=nncCommon24HourIntervalNumber, nncBPerTbl15MinIntervalDTLGenCallsSuccessEstWithoutReroute=nncBPerTbl15MinIntervalDTLGenCallsSuccessEstWithoutReroute, nncRoutingStatsCommon15MinCurrentEntry=nncRoutingStatsCommon15MinCurrentEntry, nncRawNBTotalDTLOrigCallsSuccessEstWithoutReroute=nncRawNBTotalDTLOrigCallsSuccessEstWithoutReroute, nncRawBTotalCrankbackReceivedAsAnEntryBorderNode=nncRawBTotalCrankbackReceivedAsAnEntryBorderNode, nncNBPerTbl24HourIntervalDTLOrigCallsSuccessEstWithoutReroute=nncNBPerTbl24HourIntervalDTLOrigCallsSuccessEstWithoutReroute, nncNBPerTbl24HourCurrentDTLOrigCallsFailedInReRouting=nncNBPerTbl24HourCurrentDTLOrigCallsFailedInReRouting, nncCommon15MinIntervalCallsSuccessRerouted=nncCommon15MinIntervalCallsSuccessRerouted, nncSpecific15MinIntervalRerouteAttempts=nncSpecific15MinIntervalRerouteAttempts, nncCommon24HourCurrentCallsTermToLocalCalls=nncCommon24HourCurrentCallsTermToLocalCalls, nncNBPerTbl15MinIntervalCallsGeneratingAnInitDTL=nncNBPerTbl15MinIntervalCallsGeneratingAnInitDTL, nncRoutingStatsRawNonBorderPerTblEntry=nncRoutingStatsRawNonBorderPerTblEntry, nncCommon24HourCurrentSuccessRoutedCallsTermToLocalSubs=nncCommon24HourCurrentSuccessRoutedCallsTermToLocalSubs, nncRoutingStatsCommon24HourIntervalTable=nncRoutingStatsCommon24HourIntervalTable, nncNBTotal15MinCurrentCallsGeneratingAnInitDTL=nncNBTotal15MinCurrentCallsGeneratingAnInitDTL)
mibBuilder.exportSymbols("NNCEXTCALLROUTINGSTATS-MIB", nncBTotal15MinIntervalDTLGenCallsSuccessEstWithReroute=nncBTotal15MinIntervalDTLGenCallsSuccessEstWithReroute, nncCommon15MinIntervalCallsOrigFromLocalCalls=nncCommon15MinIntervalCallsOrigFromLocalCalls, nncRawBTotalSucdEndBlocCrankbksRecdOverOutsideLink=nncRawBTotalSucdEndBlocCrankbksRecdOverOutsideLink, nncBPerTbl15MinIntervalState=nncBPerTbl15MinIntervalState, nncSpecific24HourCurrentCallsStaticallyRoutedByThisNode=nncSpecific24HourCurrentCallsStaticallyRoutedByThisNode, nncNBPerTbl15MinCurrentAbsoluteIntervalNumber=nncNBPerTbl15MinCurrentAbsoluteIntervalNumber, nncNBTotal15MinCurrentCallsRecdAsTransitNodeOverInsideLinks=nncNBTotal15MinCurrentCallsRecdAsTransitNodeOverInsideLinks, nncRoutingStatsBorderPerTbl15MinCurrentEntry=nncRoutingStatsBorderPerTbl15MinCurrentEntry, nncRoutingStatsRawCommonCallsSuccessRerouted=nncRoutingStatsRawCommonCallsSuccessRerouted, nncBTotal15MinCurrentDTLGenCallsSuccessEstWithoutReroute=nncBTotal15MinCurrentDTLGenCallsSuccessEstWithoutReroute, nncBTotal15MinIntervalFailedCallsBdwGreaterThanRTDMinBdw=nncBTotal15MinIntervalFailedCallsBdwGreaterThanRTDMinBdw, nncNBTotal15MinCurrentDTLOrigCallsSuccessEstWithoutReroute=nncNBTotal15MinCurrentDTLOrigCallsSuccessEstWithoutReroute, nncRoutingStatsBorderTotal15MinCurrentEntry=nncRoutingStatsBorderTotal15MinCurrentEntry, nncBTotal15MinCurrentCrankbksRecdOverAnOutsideLink=nncBTotal15MinCurrentCrankbksRecdOverAnOutsideLink, nncBTotal15MinIntervalFailedCallsDueToInitLowerLvlDTLNotGen=nncBTotal15MinIntervalFailedCallsDueToInitLowerLvlDTLNotGen, nncBTotal24HourCurrentCrankbackReceivedAsAnEntryBorderNode=nncBTotal24HourCurrentCrankbackReceivedAsAnEntryBorderNode, nncNBTotal15MinCurrentDTLsGeneratedDueToCrankback=nncNBTotal15MinCurrentDTLsGeneratedDueToCrankback, nncNBTotal24HourCurrentDTLOrigCallsFailedInReRouting=nncNBTotal24HourCurrentDTLOrigCallsFailedInReRouting, nncBPerTbl15MinIntervalTableDescriptor=nncBPerTbl15MinIntervalTableDescriptor, nncNBTotal15MinCurrentSucdEndBlocCrnkbksRecdOvInsideLnks=nncNBTotal15MinCurrentSucdEndBlocCrnkbksRecdOvInsideLnks, nncBTotal15MinCurrentCallsRecdOverAnOutsideLink=nncBTotal15MinCurrentCallsRecdOverAnOutsideLink, nncBTotal24HourIntervalFailedCallsBdwGreaterThanRTDMinBdw=nncBTotal24HourIntervalFailedCallsBdwGreaterThanRTDMinBdw, nncNBPerTbl24HourIntervalCrankbackReceivedAsDTLOriginator=nncNBPerTbl24HourIntervalCrankbackReceivedAsDTLOriginator, nncNBPerTbl24HourIntervalState=nncNBPerTbl24HourIntervalState, nncBTotal15MinCurrentAbsoluteIntervalNumber=nncBTotal15MinCurrentAbsoluteIntervalNumber, nncNBTotal15MinIntervalCrnkbksRecdAsTransitNodeOvInsideLnks=nncNBTotal15MinIntervalCrnkbksRecdAsTransitNodeOvInsideLnks, nncBPerTbl24HourIntervalCallsGeneratingInitLowerLvlDTLs=nncBPerTbl24HourIntervalCallsGeneratingInitLowerLvlDTLs, nncBTotal15MinIntervalCallsRecdOverAnOutsideLink=nncBTotal15MinIntervalCallsRecdOverAnOutsideLink, nncCommon15MinCurrentState=nncCommon15MinCurrentState, nncCommon15MinIntervalCallsClearedDueToNoRoutingTabEntry=nncCommon15MinIntervalCallsClearedDueToNoRoutingTabEntry, nncNBTotal24HourCurrentSuccessCallsBdwGreaterThanRTDMinBdw=nncNBTotal24HourCurrentSuccessCallsBdwGreaterThanRTDMinBdw, nncRawBPerTblDTLGenCallsFailedInReRouting=nncRawBPerTblDTLGenCallsFailedInReRouting, nncNBTotal24HourIntervalDTLOrigCallsSuccessEstWithReroute=nncNBTotal24HourIntervalDTLOrigCallsSuccessEstWithReroute, nncCommon15MinIntervalSuccessRoutedCallsTransitedViaThisNode=nncCommon15MinIntervalSuccessRoutedCallsTransitedViaThisNode, nncBTotal15MinIntervalCallsTransmittedOverAnOutsideLink=nncBTotal15MinIntervalCallsTransmittedOverAnOutsideLink, nncNBTotal24HourCurrentFailedCallsDueToInitDTLNotGenerated=nncNBTotal24HourCurrentFailedCallsDueToInitDTLNotGenerated, nncNBTotal15MinIntervalFailedCallsDueToInitDTLNotGenerated=nncNBTotal15MinIntervalFailedCallsDueToInitDTLNotGenerated, nncBTotal24HourCurrentState=nncBTotal24HourCurrentState, nncNBPerTbl24HourIntervalSuccessCallsBdwGreaterThanRTDMinBdw=nncNBPerTbl24HourIntervalSuccessCallsBdwGreaterThanRTDMinBdw, nncRawNBTotalFailedCallsBdwGreaterThanRTDMinBdw=nncRawNBTotalFailedCallsBdwGreaterThanRTDMinBdw, nncRoutingStatsNonBorderPerTbl24HourCurrentEntry=nncRoutingStatsNonBorderPerTbl24HourCurrentEntry, nncCommon15MinIntervalSuccessRoutedCallsTermToLocalSubs=nncCommon15MinIntervalSuccessRoutedCallsTermToLocalSubs, nncNBTotal24HourCurrentState=nncNBTotal24HourCurrentState, nncBPerTbl24HourIntervalCrankbackReceivedAsAnEntryBorderNode=nncBPerTbl24HourIntervalCrankbackReceivedAsAnEntryBorderNode, nncSpecific24HourCurrentAbsoluteIntervalNumber=nncSpecific24HourCurrentAbsoluteIntervalNumber, nncNBPerTbl24HourIntervalFailedCallsDueToInitDTLNotGenerated=nncNBPerTbl24HourIntervalFailedCallsDueToInitDTLNotGenerated, nncRoutingStatsCommon15MinIntervalGroup=nncRoutingStatsCommon15MinIntervalGroup, nncSpecific15MinCurrentAbsoluteIntervalNumber=nncSpecific15MinCurrentAbsoluteIntervalNumber, nncRawBPerTblDTLGenCallsSuccessEstWithReroute=nncRawBPerTblDTLGenCallsSuccessEstWithReroute, nncBTotal24HourCurrentDTLGenCallsSuccessEstWithReroute=nncBTotal24HourCurrentDTLGenCallsSuccessEstWithReroute, nncCommon24HourIntervalSuccessRoutedCallsOrigFromLocalSubs=nncCommon24HourIntervalSuccessRoutedCallsOrigFromLocalSubs, nncRoutingStatsCompliances=nncRoutingStatsCompliances, nncCommon24HourCurrentCallsFailedInRerouting=nncCommon24HourCurrentCallsFailedInRerouting, nncRawNBPerTbleFailedCallsBdwGreaterThanRTDMinBdw=nncRawNBPerTbleFailedCallsBdwGreaterThanRTDMinBdw, nncBTotal24HourIntervalCrankbkFwdToPrevPGCrankbkLvlTooHigh=nncBTotal24HourIntervalCrankbkFwdToPrevPGCrankbkLvlTooHigh, nncRoutingStatsBorderPerTbl15MinIntervalGroup=nncRoutingStatsBorderPerTbl15MinIntervalGroup, nncRoutingStatsRawBorderPerTblEntry=nncRoutingStatsRawBorderPerTblEntry, nncCommon15MinCurrentFailedCallsAtLocalSubs=nncCommon15MinCurrentFailedCallsAtLocalSubs, nncRoutingStatsNonBorderPerTbl24HourIntervalTable=nncRoutingStatsNonBorderPerTbl24HourIntervalTable, nncNBPerTbl24HourCurrentFailedCallsDueToInitDTLNotGenerated=nncNBPerTbl24HourCurrentFailedCallsDueToInitDTLNotGenerated, nncRoutingStatsNonBorderPerTbl15MinCurrentEntry=nncRoutingStatsNonBorderPerTbl15MinCurrentEntry, nncRawBTotalCrankbksRecdOverAnOutsideLink=nncRawBTotalCrankbksRecdOverAnOutsideLink, nncRoutingStatsNonBorderTotal15MinCurrentEntry=nncRoutingStatsNonBorderTotal15MinCurrentEntry, nncRoutingStatsBorderPerTbl15MinIntervalEntry=nncRoutingStatsBorderPerTbl15MinIntervalEntry, nncCallControlGroupNumber=nncCallControlGroupNumber, nncBTotal24HourCurrentDTLGenCallsSuccessEstWithoutReroute=nncBTotal24HourCurrentDTLGenCallsSuccessEstWithoutReroute, nncRoutingStatsNonBorderTotal24HourIntervalEntry=nncRoutingStatsNonBorderTotal24HourIntervalEntry, nncBTotal24HourIntervalCallsGeneratingInitLowerLvlDTLs=nncBTotal24HourIntervalCallsGeneratingInitLowerLvlDTLs, nncRoutingStatsRawCommonSuccessRoutedLocalCalls=nncRoutingStatsRawCommonSuccessRoutedLocalCalls, nncNBTotal24HourCurrentCallsGeneratingAnInitDTL=nncNBTotal24HourCurrentCallsGeneratingAnInitDTL, nncBPerTbl15MinCurrentFailedCallsBdwGreaterThanRTDMinBdw=nncBPerTbl15MinCurrentFailedCallsBdwGreaterThanRTDMinBdw, nncRoutingStatsRawCommonSuccessRoutedCallsOrigFromLocalSubs=nncRoutingStatsRawCommonSuccessRoutedCallsOrigFromLocalSubs, nncBTotal15MinCurrentDTLGenCallsFailedInReRouting=nncBTotal15MinCurrentDTLGenCallsFailedInReRouting, nncCommon24HourIntervalCrankbacksGeneratedByThisNode=nncCommon24HourIntervalCrankbacksGeneratedByThisNode, nncNBPerTbl15MinIntervalDTLOrigCallsSuccessEstWithoutReroute=nncNBPerTbl15MinIntervalDTLOrigCallsSuccessEstWithoutReroute, nncNBPerTbl15MinIntervalNumber=nncNBPerTbl15MinIntervalNumber, nncBPerTbl24HourCurrentDTLGenCallsSuccessEstWithoutReroute=nncBPerTbl24HourCurrentDTLGenCallsSuccessEstWithoutReroute, nncRawNBTotalDTLOrigCallsSuccessEstWithReroute=nncRawNBTotalDTLOrigCallsSuccessEstWithReroute, nncBTotal24HourCurrentCallsRecdOverAnOutsideLink=nncBTotal24HourCurrentCallsRecdOverAnOutsideLink, nncRoutingStatsNonBorderTotal15MinCurrentTable=nncRoutingStatsNonBorderTotal15MinCurrentTable, nncNBTotal15MinCurrentDTLOrigCallsFailedInReRouting=nncNBTotal15MinCurrentDTLOrigCallsFailedInReRouting, nncNBPerTbl15MinCurrentDTLsGeneratedDueToCrankback=nncNBPerTbl15MinCurrentDTLsGeneratedDueToCrankback, nncRawBTotalCallsTransmittedOverAnOutsideLink=nncRawBTotalCallsTransmittedOverAnOutsideLink, nncRawNBPerTbleDTLOrigCallsFailedInReRouting=nncRawNBPerTbleDTLOrigCallsFailedInReRouting, nncBTotal24HourIntervalState=nncBTotal24HourIntervalState, nncRoutingStatsRawCommonFailedCallsAtLocalSubs=nncRoutingStatsRawCommonFailedCallsAtLocalSubs, nncRawNBPerTbleCallsGeneratingAnInitDTL=nncRawNBPerTbleCallsGeneratingAnInitDTL, nncNBPerTbl15MinIntervalFailedCallsBdwGreaterThanRTDMinBdw=nncNBPerTbl15MinIntervalFailedCallsBdwGreaterThanRTDMinBdw, nncRoutingStatsBorderPerTbl15MinCurrentGroup=nncRoutingStatsBorderPerTbl15MinCurrentGroup, nncNBPerTbl24HourCurrentDTLsGeneratedDueToCrankback=nncNBPerTbl24HourCurrentDTLsGeneratedDueToCrankback, nncNBPerTbl15MinIntervalAbsoluteIntervalNumber=nncNBPerTbl15MinIntervalAbsoluteIntervalNumber, nncBTotal24HourCurrentSucdEndBlocCrankbksRecdOverOutsideLink=nncBTotal24HourCurrentSucdEndBlocCrankbksRecdOverOutsideLink, nncRoutingStatsNonBorderPerTbl15MinCurrentTable=nncRoutingStatsNonBorderPerTbl15MinCurrentTable, nncBTotal15MinCurrentFailedCallsDueToInitLowerLvlDTLNotGen=nncBTotal15MinCurrentFailedCallsDueToInitLowerLvlDTLNotGen, nncNBTotal24HourCurrentFailedCallsBdwGreaterThanRTDMinBdw=nncNBTotal24HourCurrentFailedCallsBdwGreaterThanRTDMinBdw, nncBPerTbl15MinCurrentTableDescriptor=nncBPerTbl15MinCurrentTableDescriptor, nncBPerTbl15MinCurrentDTLGenCallsSuccessEstWithReroute=nncBPerTbl15MinCurrentDTLGenCallsSuccessEstWithReroute, nncBTotal15MinCurrentCrankbkForwdedToPrevPGCrankbkLvlTooHigh=nncBTotal15MinCurrentCrankbkForwdedToPrevPGCrankbkLvlTooHigh, nncBPerTbl24HourCurrentCrankbackReceivedAsAnEntryBorderNode=nncBPerTbl24HourCurrentCrankbackReceivedAsAnEntryBorderNode, nncNBTotal24HourCurrentSucdEndBlocCrnkbksRecdOverInsideLinks=nncNBTotal24HourCurrentSucdEndBlocCrnkbksRecdOverInsideLinks, nncNBTotal24HourCurrentDTLsGeneratedDueToCrankback=nncNBTotal24HourCurrentDTLsGeneratedDueToCrankback, nncBTotal24HourIntervalDTLGenCallsSuccessEstWithoutReroute=nncBTotal24HourIntervalDTLGenCallsSuccessEstWithoutReroute, nncNBPerTbl15MinCurrentFailedCallsBdwGreaterThanRTDMinBdw=nncNBPerTbl15MinCurrentFailedCallsBdwGreaterThanRTDMinBdw, nncCommon24HourCurrentCrankbacksGeneratedByThisNode=nncCommon24HourCurrentCrankbacksGeneratedByThisNode, nncNBPerTbl24HourIntervalDTLOrigCallsSuccessEstWithReroute=nncNBPerTbl24HourIntervalDTLOrigCallsSuccessEstWithReroute, nncRoutingStatsRawNonBorderTotalTable=nncRoutingStatsRawNonBorderTotalTable, nncBTotal24HourIntervalCallsRecdOverAnOutsideLink=nncBTotal24HourIntervalCallsRecdOverAnOutsideLink, nncNBPerTbl15MinCurrentTableDescriptor=nncNBPerTbl15MinCurrentTableDescriptor, nncRawBPerTblLowerLvlDTLsGenDueToRecdCrankback=nncRawBPerTblLowerLvlDTLsGenDueToRecdCrankback, nncRawBPerTblTableDescriptor=nncRawBPerTblTableDescriptor, nncRoutingStatsGroups=nncRoutingStatsGroups, nncCommon15MinCurrentSuccessRoutedLocalCalls=nncCommon15MinCurrentSuccessRoutedLocalCalls, nncBTotal24HourIntervalCrankbackReceivedAsAnEntryBorderNode=nncBTotal24HourIntervalCrankbackReceivedAsAnEntryBorderNode, nncCommon24HourIntervalState=nncCommon24HourIntervalState, nncPNNIStatBorderTotal24HourIntervalGroup=nncPNNIStatBorderTotal24HourIntervalGroup, nncCommon24HourIntervalLocalCallAttempts=nncCommon24HourIntervalLocalCallAttempts, nncBPerTbl24HourCurrentDTLGenCallsFailedInReRouting=nncBPerTbl24HourCurrentDTLGenCallsFailedInReRouting, nncCommon15MinIntervalNumber=nncCommon15MinIntervalNumber, nncCommon15MinCurrentCallsTermToLocalCalls=nncCommon15MinCurrentCallsTermToLocalCalls, nncBTotal15MinIntervalAbsoluteIntervalNumber=nncBTotal15MinIntervalAbsoluteIntervalNumber, nncBPerTbl24HourIntervalAbsoluteIntervalNumber=nncBPerTbl24HourIntervalAbsoluteIntervalNumber, nncBTotal15MinIntervalCrankbkForwdedToPrevPGCrankbkLvlTooHigh=nncBTotal15MinIntervalCrankbkForwdedToPrevPGCrankbkLvlTooHigh, nncNBPerTbl15MinIntervalSuccessCallsBdwGreaterThanRTDMinBdw=nncNBPerTbl15MinIntervalSuccessCallsBdwGreaterThanRTDMinBdw, nncRoutingStatsRawCommonCallsFailedInRerouting=nncRoutingStatsRawCommonCallsFailedInRerouting, nncNBTotal24HourIntervalSucdEndBlocCrnkbksRecdOverInsideLnks=nncNBTotal24HourIntervalSucdEndBlocCrnkbksRecdOverInsideLnks, nncBTotal15MinIntervalSucdEndBlocCrankbksRecdOverOutsideLink=nncBTotal15MinIntervalSucdEndBlocCrankbksRecdOverOutsideLink, nncBTotal24HourCurrentCrankbkForwdedToPrevPGCrankbkLvlTooHigh=nncBTotal24HourCurrentCrankbkForwdedToPrevPGCrankbkLvlTooHigh, nncRoutingStatsBorderTotal15MinIntervalEntry=nncRoutingStatsBorderTotal15MinIntervalEntry, nncRoutingStatsBorderPerTbl24HourCurrentTable=nncRoutingStatsBorderPerTbl24HourCurrentTable, nncSpecific15MinIntervalAbsoluteIntervalNumber=nncSpecific15MinIntervalAbsoluteIntervalNumber, nncBPerTbl24HourCurrentDTLGenCallsSuccessEstWithReroute=nncBPerTbl24HourCurrentDTLGenCallsSuccessEstWithReroute, nncRoutingStatsObjects=nncRoutingStatsObjects, nncNBTotal15MinIntervalDTLOrigCallsSuccessEstWithReroute=nncNBTotal15MinIntervalDTLOrigCallsSuccessEstWithReroute, nncCommon15MinCurrentLocalCallAttempts=nncCommon15MinCurrentLocalCallAttempts, nncBTotal15MinCurrentDTLGenCallsSuccessEstWithReroute=nncBTotal15MinCurrentDTLGenCallsSuccessEstWithReroute, nncSpecific15MinIntervalCallsStaticallyRoutedByThisNode=nncSpecific15MinIntervalCallsStaticallyRoutedByThisNode, nncRawNBTotalCrnkbksRecdAsTransitNodeOvInsideLnks=nncRawNBTotalCrnkbksRecdAsTransitNodeOvInsideLnks, nncRoutingStatsRawSpecificRoutingLoopsDetectedByThisNode=nncRoutingStatsRawSpecificRoutingLoopsDetectedByThisNode, nncPNNIStatNonBorderTotal24HourIntervalGroup=nncPNNIStatNonBorderTotal24HourIntervalGroup, nncBTotal15MinIntervalCrankbackReceivedAsAnEntryBorderNode=nncBTotal15MinIntervalCrankbackReceivedAsAnEntryBorderNode, nncRoutingStatsRawBorderPerTblGroup=nncRoutingStatsRawBorderPerTblGroup, nncSpecific15MinIntervalRoutingLoopsDetectedByThisNode=nncSpecific15MinIntervalRoutingLoopsDetectedByThisNode, nncBPerTbl24HourIntervalDTLGenCallsSuccessEstWithReroute=nncBPerTbl24HourIntervalDTLGenCallsSuccessEstWithReroute, nncRoutingStatsBorderPerTbl15MinIntervalTable=nncRoutingStatsBorderPerTbl15MinIntervalTable, nncNBTotal15MinCurrentAbsoluteIntervalNumber=nncNBTotal15MinCurrentAbsoluteIntervalNumber, nncNBTotal24HourIntervalSuccessCallsBdwGreaterThanRTDMinBdw=nncNBTotal24HourIntervalSuccessCallsBdwGreaterThanRTDMinBdw, nncRoutingStatsBorderPerTbl24HourIntervalEntry=nncRoutingStatsBorderPerTbl24HourIntervalEntry, nncRawNBTotalSucdEndBlocCrnkbksRecdOvInsideLnks=nncRawNBTotalSucdEndBlocCrnkbksRecdOvInsideLnks, nncNBPerTbl24HourCurrentFailedCallsBdwGreaterThanRTDMinBdw=nncNBPerTbl24HourCurrentFailedCallsBdwGreaterThanRTDMinBdw, nncCommon24HourCurrentCallsSuccessRerouted=nncCommon24HourCurrentCallsSuccessRerouted, nncNBPerTbl24HourIntervalDTLOrigCallsFailedInReRouting=nncNBPerTbl24HourIntervalDTLOrigCallsFailedInReRouting, nncBPerTbl15MinCurrentLowerLvlDTLsGenDueToRecdCrankback=nncBPerTbl15MinCurrentLowerLvlDTLsGenDueToRecdCrankback, nncRoutingStatsCompliances3=nncRoutingStatsCompliances3, nncRoutingStatsSpecific15MinIntervalTable=nncRoutingStatsSpecific15MinIntervalTable, nncSpecific24HourIntervalCallsStaticallyRoutedByThisNode=nncSpecific24HourIntervalCallsStaticallyRoutedByThisNode, nncCommon15MinIntervalCrankbacksGeneratedByThisNode=nncCommon15MinIntervalCrankbacksGeneratedByThisNode, nncRoutingStatsCommon24HourIntervalEntry=nncRoutingStatsCommon24HourIntervalEntry, nncNBPerTbl15MinCurrentCallsGeneratingAnInitDTL=nncNBPerTbl15MinCurrentCallsGeneratingAnInitDTL, nncBPerTbl24HourIntervalFailedCallsBdwGreaterThanRTDMinBdw=nncBPerTbl24HourIntervalFailedCallsBdwGreaterThanRTDMinBdw, nncBTotal24HourIntervalCallsTransmittedOverAnOutsideLink=nncBTotal24HourIntervalCallsTransmittedOverAnOutsideLink, nncNBTotal15MinIntervalDTLOrigCallsFailedInReRouting=nncNBTotal15MinIntervalDTLOrigCallsFailedInReRouting, nncCommon15MinCurrentSuccessRoutedCallsTermToLocalSubs=nncCommon15MinCurrentSuccessRoutedCallsTermToLocalSubs, nncBPerTbl24HourCurrentFailedCallsDueInitLowerLvlDTLsNotGen=nncBPerTbl24HourCurrentFailedCallsDueInitLowerLvlDTLsNotGen, nncCommon15MinIntervalLocalCallAttempts=nncCommon15MinIntervalLocalCallAttempts, nncCommon15MinCurrentCallsOrigFromLocalCalls=nncCommon15MinCurrentCallsOrigFromLocalCalls, nncNBPerTbl24HourCurrentSuccessCallsBdwGreaterThanRTDMinBdw=nncNBPerTbl24HourCurrentSuccessCallsBdwGreaterThanRTDMinBdw, nncRoutingStatsSpecific24HourIntervalTable=nncRoutingStatsSpecific24HourIntervalTable, nncNBTotal15MinIntervalDTLOrigCallsSuccessEstWithoutReroute=nncNBTotal15MinIntervalDTLOrigCallsSuccessEstWithoutReroute, nncBTotal15MinCurrentCallsTransmittedOverAnOutsideLink=nncBTotal15MinCurrentCallsTransmittedOverAnOutsideLink, nncRoutingStatsRawSpecificRerouteAttempts=nncRoutingStatsRawSpecificRerouteAttempts, nncRawBTotalCallsRecdOverAnOutsideLink=nncRawBTotalCallsRecdOverAnOutsideLink, PYSNMP_MODULE_ID=nncExtRoutingStats, nncCommon24HourCurrentFailedCallsAtLocalSubs=nncCommon24HourCurrentFailedCallsAtLocalSubs, nncSpecific15MinCurrentCallsStaticallyRoutedByThisNode=nncSpecific15MinCurrentCallsStaticallyRoutedByThisNode, nncRoutingStatsRawNonBorderPerTblTable=nncRoutingStatsRawNonBorderPerTblTable, nncRoutingStatsRawNonBorderTotalEntry=nncRoutingStatsRawNonBorderTotalEntry, nncBPerTbl15MinCurrentState=nncBPerTbl15MinCurrentState, nncBTotal15MinIntervalCallsGeneratingInitLowerLvlDTLs=nncBTotal15MinIntervalCallsGeneratingInitLowerLvlDTLs, nncSpecific24HourIntervalAbsoluteIntervalNumber=nncSpecific24HourIntervalAbsoluteIntervalNumber, nncCommon15MinIntervalSuccessRoutedLocalCalls=nncCommon15MinIntervalSuccessRoutedLocalCalls, nncCommon24HourCurrentState=nncCommon24HourCurrentState, nncBPerTbl24HourIntervalLowerLvlDTLsGenDueToRecdCrankback=nncBPerTbl24HourIntervalLowerLvlDTLsGenDueToRecdCrankback, nncRawBTotalSuccessCallsBdwGreaterThanRTDMinBdw=nncRawBTotalSuccessCallsBdwGreaterThanRTDMinBdw, nncNBPerTbl24HourCurrentAbsoluteIntervalNumber=nncNBPerTbl24HourCurrentAbsoluteIntervalNumber, nncCommon15MinCurrentCallsSuccessRerouted=nncCommon15MinCurrentCallsSuccessRerouted, nncNBPerTbl24HourIntervalTableDescriptor=nncNBPerTbl24HourIntervalTableDescriptor, nncRoutingStatsNonBorderTotal15MinIntervalTable=nncRoutingStatsNonBorderTotal15MinIntervalTable, nncSpecific15MinCurrentRoutingLoopsDetectedByThisNode=nncSpecific15MinCurrentRoutingLoopsDetectedByThisNode, nncNBPerTbl15MinCurrentCrankbackReceivedAsDTLOriginator=nncNBPerTbl15MinCurrentCrankbackReceivedAsDTLOriginator, nncCommon15MinCurrentCallsClearedDueToNoRoutingTabEntry=nncCommon15MinCurrentCallsClearedDueToNoRoutingTabEntry, nncRoutingStatsRawBorderTotalGroup=nncRoutingStatsRawBorderTotalGroup, nncRoutingStatsRawCommonLocalCallAttempts=nncRoutingStatsRawCommonLocalCallAttempts, nncPNNIStatNonBorderTotal15MinIntervalGroup=nncPNNIStatNonBorderTotal15MinIntervalGroup, nncCommon24HourCurrentSuccessRoutedLocalCalls=nncCommon24HourCurrentSuccessRoutedLocalCalls, nncRoutingStatsBorderPerTbl24HourIntervalGroup=nncRoutingStatsBorderPerTbl24HourIntervalGroup, nncSpecific15MinIntervalNumber=nncSpecific15MinIntervalNumber, nncBTotal15MinIntervalDTLGenCallsSuccessEstWithoutReroute=nncBTotal15MinIntervalDTLGenCallsSuccessEstWithoutReroute, nncRawBTotalDTLGenCallsFailedInReRouting=nncRawBTotalDTLGenCallsFailedInReRouting, nncNBPerTbl24HourCurrentTableDescriptor=nncNBPerTbl24HourCurrentTableDescriptor, nncBTotal24HourIntervalNumber=nncBTotal24HourIntervalNumber, nncRoutingStatsRawBorderTotalEntry=nncRoutingStatsRawBorderTotalEntry, nncCommon24HourCurrentCallsOrigFromLocalCalls=nncCommon24HourCurrentCallsOrigFromLocalCalls, nncCommon24HourIntervalAbsoluteIntervalNumber=nncCommon24HourIntervalAbsoluteIntervalNumber, nncSpecific24HourCurrentCrankbacksReceivedByThisNode=nncSpecific24HourCurrentCrankbacksReceivedByThisNode, nncBTotal15MinCurrentCrankbackReceivedAsAnEntryBorderNode=nncBTotal15MinCurrentCrankbackReceivedAsAnEntryBorderNode, nncBTotal15MinCurrentState=nncBTotal15MinCurrentState, nncCommon24HourCurrentSuccessRoutedCallsTransitedViaThisNode=nncCommon24HourCurrentSuccessRoutedCallsTransitedViaThisNode, nncRoutingStatsRawCommonGroup=nncRoutingStatsRawCommonGroup, nncBTotal24HourIntervalFailedCallsDueToInitLowerLvlDTLNotGen=nncBTotal24HourIntervalFailedCallsDueToInitLowerLvlDTLNotGen, nncPNNIStatRawNonBorderTotalGroup=nncPNNIStatRawNonBorderTotalGroup, nncBTotal24HourIntervalLowerLvlDTLsGenDueToRecdCrankback=nncBTotal24HourIntervalLowerLvlDTLsGenDueToRecdCrankback, nncNBPerTbl15MinCurrentDTLOrigCallsSuccessEstWithReroute=nncNBPerTbl15MinCurrentDTLOrigCallsSuccessEstWithReroute, nncCommon24HourIntervalCallsFailedInRerouting=nncCommon24HourIntervalCallsFailedInRerouting, nncRawNBPerTbleSuccessCallsBdwGreaterThanRTDMinBdw=nncRawNBPerTbleSuccessCallsBdwGreaterThanRTDMinBdw, nncBTotal24HourCurrentCallsGeneratingInitLowerLvlDTLs=nncBTotal24HourCurrentCallsGeneratingInitLowerLvlDTLs)
