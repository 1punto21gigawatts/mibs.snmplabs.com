#
# PySNMP MIB module ASCEND-MIBSYS1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-MIBSYS1-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:28:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
configuration, = mibBuilder.importSymbols("ASCEND-MIB", "configuration")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Integer32, ModuleIdentity, iso, MibIdentifier, IpAddress, Counter32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter64, Bits, Gauge32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Integer32", "ModuleIdentity", "iso", "MibIdentifier", "IpAddress", "Counter32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter64", "Bits", "Gauge32", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DisplayString(OctetString):
    pass

mibsystemProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 125))
mibsystemProfileTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 125, 1), )
if mibBuilder.loadTexts: mibsystemProfileTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibsystemProfileTable.setDescription('A list of mibsystemProfile profile entries.')
mibsystemProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1), ).setIndexNames((0, "ASCEND-MIBSYS1-MIB", "systemProfile-Index-o"))
if mibBuilder.loadTexts: mibsystemProfileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibsystemProfileEntry.setDescription('A mibsystemProfile entry containing objects that maps to the parameters of mibsystemProfile profile.')
systemProfile_Index_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 1), Integer32()).setLabel("systemProfile-Index-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: systemProfile_Index_o.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_Index_o.setDescription('')
systemProfile_Name = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 2), DisplayString()).setLabel("systemProfile-Name").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_Name.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_Name.setDescription('The name of the system given by the user, a standard null terminated ASCII string.')
systemProfile_Contact = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 3), DisplayString()).setLabel("systemProfile-Contact").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_Contact.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_Contact.setDescription('The name of the contact for this device. SNMP readable.')
systemProfile_Location = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 4), DisplayString()).setLabel("systemProfile-Location").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_Location.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_Location.setDescription('The location of this device. SNMP readable.')
systemProfile_TermRate = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("n-300Bps", 1), ("n-1200Bps", 2), ("n-2400Bps", 3), ("n-4800Bps", 4), ("n-9600Bps", 5), ("n-19200Bps", 6), ("n-38400Bps", 7), ("n-57600Bps", 8), ("n-115200Bps", 9)))).setLabel("systemProfile-TermRate").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_TermRate.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_TermRate.setDescription('The bit rate of the management terminal port, as given above.')
systemProfile_Console = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standard", 1), ("limited", 2), ("mif", 3)))).setLabel("systemProfile-Console").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_Console.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_Console.setDescription('A MenuType specifying the type of interface to use on the console port.')
systemProfile_ConsoleSecurity = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("consoleSecurityNone", 1), ("consoleSecurityProfile", 2), ("consoleSecurityAuthSetting", 3)))).setLabel("systemProfile-ConsoleSecurity").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_ConsoleSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_ConsoleSecurity.setDescription('Serial console security for the control port.')
systemProfile_SystemRmtMgmt = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("systemProfile-SystemRmtMgmt").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_SystemRmtMgmt.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_SystemRmtMgmt.setDescription('Set true if this system allows remote management. ')
systemProfile_SubAddressMode = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noSubaddress", 1), ("routingSubaddress", 2), ("termselSubaddress", 3)))).setLabel("systemProfile-SubAddressMode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_SubAddressMode.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_SubAddressMode.setDescription('Selects system wide sub-address support. See mibglob.mdf for details.')
systemProfile_SerialSubaddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 10), Integer32()).setLabel("systemProfile-SerialSubaddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_SerialSubaddress.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_SerialSubaddress.setDescription('sub-address assigned to serial port connections.')
systemProfile_LanSubaddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 11), Integer32()).setLabel("systemProfile-LanSubaddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_LanSubaddress.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_LanSubaddress.setDescription('sub-address assigned to sync lan connections.')
systemProfile_DmSubaddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 12), Integer32()).setLabel("systemProfile-DmSubaddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_DmSubaddress.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_DmSubaddress.setDescription('sub-address assigned to digital modem connections.')
systemProfile_V110Subaddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 13), Integer32()).setLabel("systemProfile-V110Subaddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_V110Subaddress.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_V110Subaddress.setDescription('sub-address assigned to V.110 rate adaption connections')
systemProfile_UseTrunkGroups = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("systemProfile-UseTrunkGroups").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_UseTrunkGroups.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_UseTrunkGroups.setDescription('Enables TrunkGroups for all network lines.')
systemProfile_NumDigitsTrunkGroups = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 15), Integer32()).setLabel("systemProfile-NumDigitsTrunkGroups").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_NumDigitsTrunkGroups.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_NumDigitsTrunkGroups.setDescription('Specify number of digits TrunkGroups support.')
systemProfile_AutoLogout = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("systemProfile-AutoLogout").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_AutoLogout.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_AutoLogout.setDescription('When TRUE select the default security profile on loss of CD/DTR from the main console port.')
systemProfile_IdleLogout = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 17), Integer32()).setLabel("systemProfile-IdleLogout").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_IdleLogout.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_IdleLogout.setDescription('When non-zero select the default security profile after this value of minutes with no keyboard activity.')
systemProfile_P50SwitchUsage = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("switchUnused", 1), ("switchSerialWan", 2), ("switchNumberOfUses", 3)))).setLabel("systemProfile-P50SwitchUsage").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_P50SwitchUsage.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_P50SwitchUsage.setDescription('What the P50 switch does.')
systemProfile_oDS0MinRst = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("daily", 2), ("monthly", 3)))).setLabel("systemProfile-oDS0MinRst").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_oDS0MinRst.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_oDS0MinRst.setDescription('Has three choices: Off, 24Hr or Monthly. When enabled, the following maxSystemDS0Mins is the high water mark at which all switched connections originating on the system will be taken down.')
systemProfile_MaxSystemDS0Mins = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 20), Integer32()).setLabel("systemProfile-MaxSystemDS0Mins").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_MaxSystemDS0Mins.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_MaxSystemDS0Mins.setDescription('Sets the high water billing mark at which all originating switched connections are brought down.')
systemProfile_MaxDialoutTime = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 21), Integer32()).setLabel("systemProfile-MaxDialoutTime").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_MaxDialoutTime.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_MaxDialoutTime.setDescription('The max time in Sec, system will wait for Call Setup Complete')
systemProfile_ParallelDialing = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 22), Integer32()).setLabel("systemProfile-ParallelDialing").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_ParallelDialing.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_ParallelDialing.setDescription('The number of simultaneous DS0 channel outdials the switch allows.')
systemProfile_SingleFileIncoming = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("systemProfile-SingleFileIncoming").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_SingleFileIncoming.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_SingleFileIncoming.setDescription('Should the calls be treated as a single-file list, or in parallel. PictureTel wants parallel others want single-file.')
systemProfile_DelayDualPortDialing = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("systemProfile-DelayDualPortDialing").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_DelayDualPortDialing.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_DelayDualPortDialing.setDescription('TRUE if we should delay between dual port calls, FALSE if they should be placed at the same time.')
systemProfile_EditNumber = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 25), DisplayString()).setLabel("systemProfile-EditNumber").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_EditNumber.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_EditNumber.setDescription('The menu number of the default edit screen.')
systemProfile_AnalogEncoding = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uLaw", 1), ("aLaw", 2)))).setLabel("systemProfile-AnalogEncoding").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_AnalogEncoding.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_AnalogEncoding.setDescription('Sets the encoding standard for digitized analog data to either u-Law or A-Law. Universally sets all codecs on the unit to the value selected. Defaults to u-Law for T1, A-Law for E1 interfaces.')
systemProfile_SessionidBase = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 27), Integer32()).setLabel("systemProfile-SessionidBase").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_SessionidBase.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_SessionidBase.setDescription('The base session ID value')
systemProfile_TOnline = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("systemProfile-TOnline").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_TOnline.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_TOnline.setDescription('TRUE if we should route calls to T-Online, FALSE if not.')
systemProfile_TOnlineMostAvailChan = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("systemProfile-TOnlineMostAvailChan").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_TOnlineMostAvailChan.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_TOnlineMostAvailChan.setDescription('TRUE if T-Online calls are to be routed to NT line with the most available B-channels FALSE if it is based on circular basis.')
systemProfile_T302Timer = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 30), Integer32()).setLabel("systemProfile-T302Timer").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_T302Timer.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_T302Timer.setDescription('Number of milliseconds to wait for additional called number information elements for an incoming T-Online call. Defaults to 1500.')
systemProfile_CallRoutingSortMethod = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("itemFirst", 1), ("slotFirst", 2)))).setLabel("systemProfile-CallRoutingSortMethod").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_CallRoutingSortMethod.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_CallRoutingSortMethod.setDescription('How to sort the Call Routing table for analog calls.')
systemProfile_DigitalCallRoutingSortMethod = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("itemFirst", 1), ("slotFirst", 2)))).setLabel("systemProfile-DigitalCallRoutingSortMethod").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_DigitalCallRoutingSortMethod.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_DigitalCallRoutingSortMethod.setDescription('How to sort the Call Routing table for digital calls.')
systemProfile_ExactMatchCallRouting = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("systemProfile-ExactMatchCallRouting").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_ExactMatchCallRouting.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_ExactMatchCallRouting.setDescription('If yes, the system will search for an exact match of call-route profile parameters when selecting devices. Wildcard matches will be accepted only after all 4 quadrants have been searched. (APX only)')
systemProfile_ShelfControllerType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standalone", 1), ("master", 2), ("slave", 3)))).setLabel("systemProfile-ShelfControllerType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_ShelfControllerType.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_ShelfControllerType.setDescription('Used to define the role of this controller in a single-shelf or multi-shelf system. Note: This variable is not applicable to the APX 8000.')
systemProfile_MasterShelfController = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 35), Integer32()).setLabel("systemProfile-MasterShelfController").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_MasterShelfController.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_MasterShelfController.setDescription('Master shelf controller number. This attribute exists only when the shelf-controller-type is SLAVE. Note: This variable is not applicable to the APX 8000.')
systemProfile_NewNasPortIdFormat = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("systemProfile-NewNasPortIdFormat").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_NewNasPortIdFormat.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_NewNasPortIdFormat.setDescription("Field is deprecated; use the 'nas-port-format' field to specify the NAS port format. Will be used only if 'nas-port-format' is set to 'not-applicable'. TRUE if new NAS port ID format is used, FALSE if old NAS Port ID is used. On the TNT product family the new NAS port ID format is used by default. The old format cannot be used for multi-shelf systems or if any line cards are in a slot greater than the twelfth position.")
systemProfile_NasPortFormat = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("n-2455", 2), ("n-655", 3), ("n-122", 4), ("n-1233", 5)))).setLabel("systemProfile-NasPortFormat").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_NasPortFormat.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_NasPortFormat.setDescription("Specifies NAS-Port-Format used to calculate the NAS-Port-ID. When set to 'not-applicable', indicates that the NAS Port Format is determined by the settings in the 'new-nas-port-id-format' field. Defaults to 'not-applicable'.")
systemProfile_ModemPriTypeOfNumber = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 37), Integer32()).setLabel("systemProfile-ModemPriTypeOfNumber").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_ModemPriTypeOfNumber.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_ModemPriTypeOfNumber.setDescription("PRI Called Party element's Type-Of-Number value for outgoing modem calls.")
systemProfile_ModemPriNumberingPlanId = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 38), Integer32()).setLabel("systemProfile-ModemPriNumberingPlanId").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_ModemPriNumberingPlanId.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_ModemPriNumberingPlanId.setDescription("PRI Called Party element's Numbering-Plan-ID value for outgoing modem calls.")
systemProfile_WanInterface = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wanT1", 1), ("wanSwan", 2)))).setLabel("systemProfile-WanInterface").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_WanInterface.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_WanInterface.setDescription('Sets the type of WAN interface supported: T1-CSU or Serial WAN.')
systemProfile_PermConnUpdMode = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("all", 1), ("changed", 2)))).setLabel("systemProfile-PermConnUpdMode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_PermConnUpdMode.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_PermConnUpdMode.setDescription("Enables nonintrusive remote update of permanent connections' configurations. 'Changed' means that only changed connections will be torn down and reestablished, 'All' means all existing permanent connections will be turn down and then reestablished only if they are fetched from the RADIUS server again")
systemProfile_UserstatFormat = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 41), DisplayString()).setLabel("systemProfile-UserstatFormat").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_UserstatFormat.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_UserstatFormat.setDescription("Defines the output format of the session listing command 'userstat' and the remote user information protocol 'finger'. The following special characters will be converted to their values for each listed session. The width of each field is indicated in []. %i [10] SessionID, Unique ID assigned to the session. %l [10] Line/Chan, Physical address (shelf.slot.line/chan). %s [11] Slot:Item, shelf:slot:item/logical-item of the host port. %r [11] Tx/Rx Rate, Transmit and receive rates. %d [ 3] Svc, A three-letter code showing the type of service. %a [15] Address, IP address. %u [14] Username, Connection profile name. %c [10] ConnTime, Ammount of time connected in hours:minutes:seconds. %t [10] IdleTime, Ammount of time idle in hours:minutes:seconds. %n [24] Dialed#, Number dialed if known. %f [24] Calling#, Number calling from if known. For example set userstat-format = '%i %l %s %r %d %a %u %c %t %n' would set the format to the factory default value.")
systemProfile_ControlBusType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dpram", 1), ("pbus", 2)))).setLabel("systemProfile-ControlBusType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_ControlBusType.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_ControlBusType.setDescription('How to send control bus messages. This attribute exists only when the shelf-controller-type is not SLAVE.')
systemProfile_BootSrVersion = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 43), DisplayString()).setLabel("systemProfile-BootSrVersion").setMaxAccess("readonly")
if mibBuilder.loadTexts: systemProfile_BootSrVersion.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_BootSrVersion.setDescription('Place for tntsrb, the shelf controller boot loader, to provide its version. Boot loader updates the field with its version on every system reset')
systemProfile_SysModemProfile_oATAnswerString = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 44), DisplayString()).setLabel("systemProfile-SysModemProfile-oATAnswerString").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_SysModemProfile_oATAnswerString.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_SysModemProfile_oATAnswerString.setDescription('Allows the user to enter any additional AT commands in the modem answer string.')
systemProfile_CallByCall = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 45), Integer32()).setLabel("systemProfile-CallByCall").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_CallByCall.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_CallByCall.setDescription("PRI Called Party element's Network Specific Facility for Call-by-Call.")
systemProfile_Country = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 23, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("argentina", 2), ("australia", 3), ("belgium", 4), ("brazil", 23), ("china", 5), ("costaRica", 6), ("finland", 7), ("france", 8), ("germany", 9), ("hongKong", 10), ("italy", 11), ("japan", 12), ("korea", 13), ("mexico", 14), ("netherlands", 15), ("newZealand", 16), ("singapore", 17), ("spain", 18), ("sweden", 19), ("switzerland", 20), ("uk", 21), ("us", 22)))).setLabel("systemProfile-Country").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_Country.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_Country.setDescription('Country in which the system is located.')
systemProfile_PotsDigitTimeout = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 47), Integer32()).setLabel("systemProfile-PotsDigitTimeout").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_PotsDigitTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_PotsDigitTimeout.setDescription('POTS interdigit timeout.')
systemProfile_System8kClock = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("controller", 2), ("limOrTrunkModule", 3), ("bits", 4), ("ami8k", 5)))).setLabel("systemProfile-System8kClock").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_System8kClock.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_System8kClock.setDescription('8KHz clock source for Stinger-10.')
systemProfile_SupportDbcs = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("systemProfile-SupportDbcs").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_SupportDbcs.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_SupportDbcs.setDescription('TRUE if we should support DBCS character set, FALSE if not.')
systemProfile_IncCallDistrib = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("firstAvailable", 2), ("fairShare", 3)))).setLabel("systemProfile-IncCallDistrib").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_IncCallDistrib.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_IncCallDistrib.setDescription('Route incoming calls to first available valid port or the least used among a set of ports.')
systemProfile_IgnoreLineup = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("systemProfile-IgnoreLineup").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_IgnoreLineup.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_IgnoreLineup.setDescription('If ignore-lineup in line config profile is set to SYSTEM DEFINED, then this will take precedence.')
systemProfile_JamFileComponents_JamFile1 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 53), DisplayString()).setLabel("systemProfile-JamFileComponents-JamFile1").setMaxAccess("readonly")
if mibBuilder.loadTexts: systemProfile_JamFileComponents_JamFile1.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_JamFileComponents_JamFile1.setDescription("File name of the first JAM file's component")
systemProfile_JamFileComponents_JamFile2 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 54), DisplayString()).setLabel("systemProfile-JamFileComponents-JamFile2").setMaxAccess("readonly")
if mibBuilder.loadTexts: systemProfile_JamFileComponents_JamFile2.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_JamFileComponents_JamFile2.setDescription("File name of the second JAM file's component")
systemProfile_JamFileComponents_JamFile3 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 55), DisplayString()).setLabel("systemProfile-JamFileComponents-JamFile3").setMaxAccess("readonly")
if mibBuilder.loadTexts: systemProfile_JamFileComponents_JamFile3.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_JamFileComponents_JamFile3.setDescription("File name of the third JAM file's component")
systemProfile_JamFileComponents_JamFile4 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 56), DisplayString()).setLabel("systemProfile-JamFileComponents-JamFile4").setMaxAccess("readonly")
if mibBuilder.loadTexts: systemProfile_JamFileComponents_JamFile4.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_JamFileComponents_JamFile4.setDescription("File name of the fourth JAM file's component")
systemProfile_JamFileComponents_JamFile5 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 57), DisplayString()).setLabel("systemProfile-JamFileComponents-JamFile5").setMaxAccess("readonly")
if mibBuilder.loadTexts: systemProfile_JamFileComponents_JamFile5.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_JamFileComponents_JamFile5.setDescription("File name of the fifth JAM file's component")
systemProfile_JamFileComponents_JamFile6 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 58), DisplayString()).setLabel("systemProfile-JamFileComponents-JamFile6").setMaxAccess("readonly")
if mibBuilder.loadTexts: systemProfile_JamFileComponents_JamFile6.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_JamFileComponents_JamFile6.setDescription("File name of the sixth JAM file's component")
systemProfile_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("systemProfile-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_Action_o.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_Action_o.setDescription('')
mibsystemProfile_StatusNumberTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 125, 2), ).setLabel("mibsystemProfile-StatusNumberTable")
if mibBuilder.loadTexts: mibsystemProfile_StatusNumberTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibsystemProfile_StatusNumberTable.setDescription('A list of mibsystemProfile__status_number profile entries.')
mibsystemProfile_StatusNumberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 125, 2, 1), ).setLabel("mibsystemProfile-StatusNumberEntry").setIndexNames((0, "ASCEND-MIBSYS1-MIB", "systemProfile-StatusNumber-Index-o"), (0, "ASCEND-MIBSYS1-MIB", "systemProfile-StatusNumber-Index1-o"))
if mibBuilder.loadTexts: mibsystemProfile_StatusNumberEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibsystemProfile_StatusNumberEntry.setDescription('A mibsystemProfile__status_number entry containing objects that maps to the parameters of mibsystemProfile__status_number profile.')
systemProfile_StatusNumber_Index_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 2, 1, 1), Integer32()).setLabel("systemProfile-StatusNumber-Index-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: systemProfile_StatusNumber_Index_o.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_StatusNumber_Index_o.setDescription('')
systemProfile_StatusNumber_Index1_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 2, 1, 2), Integer32()).setLabel("systemProfile-StatusNumber-Index1-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: systemProfile_StatusNumber_Index1_o.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_StatusNumber_Index1_o.setDescription('')
systemProfile_StatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 125, 2, 1, 3), DisplayString()).setLabel("systemProfile-StatusNumber").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProfile_StatusNumber.setStatus('mandatory')
if mibBuilder.loadTexts: systemProfile_StatusNumber.setDescription('An array of status screen number entries used to specify the default status screen layout.')
mibBuilder.exportSymbols("ASCEND-MIBSYS1-MIB", mibsystemProfileTable=mibsystemProfileTable, systemProfile_T302Timer=systemProfile_T302Timer, systemProfile_TOnlineMostAvailChan=systemProfile_TOnlineMostAvailChan, systemProfile_SerialSubaddress=systemProfile_SerialSubaddress, systemProfile_SupportDbcs=systemProfile_SupportDbcs, systemProfile_Console=systemProfile_Console, systemProfile_StatusNumber_Index1_o=systemProfile_StatusNumber_Index1_o, systemProfile_MaxSystemDS0Mins=systemProfile_MaxSystemDS0Mins, systemProfile_SingleFileIncoming=systemProfile_SingleFileIncoming, systemProfile_ModemPriNumberingPlanId=systemProfile_ModemPriNumberingPlanId, systemProfile_IdleLogout=systemProfile_IdleLogout, systemProfile_Index_o=systemProfile_Index_o, systemProfile_EditNumber=systemProfile_EditNumber, systemProfile_BootSrVersion=systemProfile_BootSrVersion, systemProfile_TOnline=systemProfile_TOnline, systemProfile_SubAddressMode=systemProfile_SubAddressMode, systemProfile_JamFileComponents_JamFile2=systemProfile_JamFileComponents_JamFile2, systemProfile_JamFileComponents_JamFile4=systemProfile_JamFileComponents_JamFile4, systemProfile_ConsoleSecurity=systemProfile_ConsoleSecurity, mibsystemProfile_StatusNumberTable=mibsystemProfile_StatusNumberTable, systemProfile_System8kClock=systemProfile_System8kClock, systemProfile_Name=systemProfile_Name, systemProfile_IncCallDistrib=systemProfile_IncCallDistrib, systemProfile_StatusNumber=systemProfile_StatusNumber, systemProfile_ControlBusType=systemProfile_ControlBusType, systemProfile_JamFileComponents_JamFile6=systemProfile_JamFileComponents_JamFile6, systemProfile_IgnoreLineup=systemProfile_IgnoreLineup, systemProfile_Location=systemProfile_Location, systemProfile_JamFileComponents_JamFile5=systemProfile_JamFileComponents_JamFile5, systemProfile_Contact=systemProfile_Contact, systemProfile_oDS0MinRst=systemProfile_oDS0MinRst, systemProfile_NumDigitsTrunkGroups=systemProfile_NumDigitsTrunkGroups, mibsystemProfile=mibsystemProfile, DisplayString=DisplayString, systemProfile_DigitalCallRoutingSortMethod=systemProfile_DigitalCallRoutingSortMethod, systemProfile_ModemPriTypeOfNumber=systemProfile_ModemPriTypeOfNumber, systemProfile_NewNasPortIdFormat=systemProfile_NewNasPortIdFormat, systemProfile_SysModemProfile_oATAnswerString=systemProfile_SysModemProfile_oATAnswerString, systemProfile_DmSubaddress=systemProfile_DmSubaddress, systemProfile_JamFileComponents_JamFile1=systemProfile_JamFileComponents_JamFile1, systemProfile_StatusNumber_Index_o=systemProfile_StatusNumber_Index_o, systemProfile_SessionidBase=systemProfile_SessionidBase, systemProfile_P50SwitchUsage=systemProfile_P50SwitchUsage, systemProfile_MaxDialoutTime=systemProfile_MaxDialoutTime, systemProfile_ShelfControllerType=systemProfile_ShelfControllerType, systemProfile_JamFileComponents_JamFile3=systemProfile_JamFileComponents_JamFile3, systemProfile_NasPortFormat=systemProfile_NasPortFormat, systemProfile_V110Subaddress=systemProfile_V110Subaddress, systemProfile_TermRate=systemProfile_TermRate, systemProfile_AnalogEncoding=systemProfile_AnalogEncoding, systemProfile_AutoLogout=systemProfile_AutoLogout, mibsystemProfile_StatusNumberEntry=mibsystemProfile_StatusNumberEntry, systemProfile_PotsDigitTimeout=systemProfile_PotsDigitTimeout, systemProfile_Action_o=systemProfile_Action_o, mibsystemProfileEntry=mibsystemProfileEntry, systemProfile_MasterShelfController=systemProfile_MasterShelfController, systemProfile_ParallelDialing=systemProfile_ParallelDialing, systemProfile_DelayDualPortDialing=systemProfile_DelayDualPortDialing, systemProfile_Country=systemProfile_Country, systemProfile_LanSubaddress=systemProfile_LanSubaddress, systemProfile_CallRoutingSortMethod=systemProfile_CallRoutingSortMethod, systemProfile_ExactMatchCallRouting=systemProfile_ExactMatchCallRouting, systemProfile_UseTrunkGroups=systemProfile_UseTrunkGroups, systemProfile_PermConnUpdMode=systemProfile_PermConnUpdMode, systemProfile_UserstatFormat=systemProfile_UserstatFormat, systemProfile_WanInterface=systemProfile_WanInterface, systemProfile_CallByCall=systemProfile_CallByCall, systemProfile_SystemRmtMgmt=systemProfile_SystemRmtMgmt)
