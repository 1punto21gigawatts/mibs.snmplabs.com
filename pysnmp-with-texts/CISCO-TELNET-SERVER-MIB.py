#
# PySNMP MIB module CISCO-TELNET-SERVER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-TELNET-SERVER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:14:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetPortNumber, InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
iso, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, NotificationType, Counter32, ObjectIdentity, MibIdentifier, Unsigned32, Integer32, Gauge32, TimeTicks, Counter64, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "NotificationType", "Counter32", "ObjectIdentity", "MibIdentifier", "Unsigned32", "Integer32", "Gauge32", "TimeTicks", "Counter64", "ModuleIdentity")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
ciscoTelnetServerMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 630))
ciscoTelnetServerMIB.setRevisions(('2007-05-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoTelnetServerMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoTelnetServerMIB.setLastUpdated('200705080000Z')
if mibBuilder.loadTexts: ciscoTelnetServerMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoTelnetServerMIB.setContactInfo('Cisco Systems Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 -NETS E-mail: cs-san@cisco.com, cs-lan-switch-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoTelnetServerMIB.setDescription('MIB module for displaying and configuring Telnet related features in a device. Telnet is a program to log into another computer over a network, to execute commands in a remote machine.')
ciscoTelnetServerMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 630, 0))
ciscoTelnetServerMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 630, 1))
ciscoTelnetServerMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 630, 2))
ciscoTelnetServerMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 630, 2, 1))
ciscoTelnetServerConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 630, 1, 1))
ciscoTelnetServerStatusObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 630, 1, 2))
ctsTelnetActivation = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 630, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsTelnetActivation.setStatus('current')
if mibBuilder.loadTexts: ctsTelnetActivation.setDescription('This object specifies whether the Telnet access service on the device is enabled.')
ctsSessionEndedNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 630, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsSessionEndedNotifEnable.setStatus('current')
if mibBuilder.loadTexts: ctsSessionEndedNotifEnable.setDescription("This object controls whether the system produces ctsSessionEnded notifications. A 'false' value will prevent ctsSessionEnded notifications from being generated by this system.")
ctsSessionStartedNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 630, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsSessionStartedNotifEnable.setStatus('current')
if mibBuilder.loadTexts: ctsSessionStartedNotifEnable.setDescription("This object controls whether the system produces ctsSessionStarted notifications. A 'false' value will prevent ctsSessionStarted notifications from being generated by this system.")
ctsSessionDeniedNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 630, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsSessionDeniedNotifEnable.setStatus('current')
if mibBuilder.loadTexts: ctsSessionDeniedNotifEnable.setDescription("This object controls whether the system produces ctsSessionDenied notifications. A 'false' value will prevent ctsSessionDenied notifications from being generated by this system.")
ctsSessionFailureNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 630, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsSessionFailureNotifEnable.setStatus('current')
if mibBuilder.loadTexts: ctsSessionFailureNotifEnable.setDescription("This object controls whether the system produces ctsSessionLoginFailure notifications. A 'false' value will prevent ctsSessionLoginFailure notifications from being generated by this system.")
ctsSessionsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 630, 1, 2, 1), )
if mibBuilder.loadTexts: ctsSessionsTable.setStatus('current')
if mibBuilder.loadTexts: ctsSessionsTable.setDescription('This table provides data for each telnet session on an entity capable of running telnet server.')
ctsSessionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 630, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-TELNET-SERVER-MIB", "ctsSessionID"))
if mibBuilder.loadTexts: ctsSessionsEntry.setStatus('current')
if mibBuilder.loadTexts: ctsSessionsEntry.setDescription('An entry (conceptual row) in the ctsSessionsTable. This entry lists the data for the telnet session on the entity running the telnet server. An entry in the ctsSessionTable, that provides detailed information about all the existing telnet sessions on the device. An entry will be created for every telnet session established on the device. The entry will be removed upon termination of the telnet session.')
ctsSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 630, 1, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ctsSessionID.setStatus('current')
if mibBuilder.loadTexts: ctsSessionID.setDescription('An arbitrary index that uniquely identifies a Telnet Session.')
ctsSessionDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 630, 1, 2, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsSessionDescription.setStatus('current')
if mibBuilder.loadTexts: ctsSessionDescription.setDescription('Human readable description about the session.')
ctsSessionClientAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 630, 1, 2, 1, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsSessionClientAddressType.setStatus('current')
if mibBuilder.loadTexts: ctsSessionClientAddressType.setDescription('The type of Internet address of the client that requested this session.')
ctsSessionsClientAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 630, 1, 2, 1, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsSessionsClientAddress.setStatus('current')
if mibBuilder.loadTexts: ctsSessionsClientAddress.setDescription('The Internet address of the client that requested this session. The type of this address is determined by the value of the ctsSessionClientAddressType object.')
ctsSessionPID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 630, 1, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsSessionPID.setStatus('current')
if mibBuilder.loadTexts: ctsSessionPID.setDescription('The object indicates the process ID of the process serving this telnet session on the device.')
ctsSessionUserID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 630, 1, 2, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsSessionUserID.setStatus('current')
if mibBuilder.loadTexts: ctsSessionUserID.setDescription('The object indicates user name associated with this telnet session.')
ctsSessionTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 630, 1, 2, 1, 1, 7), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsSessionTcpPort.setStatus('current')
if mibBuilder.loadTexts: ctsSessionTcpPort.setDescription('The TCP source port number of the remote client.')
ctsSessionEnded = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 630, 0, 1)).setObjects(("CISCO-TELNET-SERVER-MIB", "ctsSessionClientAddressType"), ("CISCO-TELNET-SERVER-MIB", "ctsSessionsClientAddress"), ("CISCO-TELNET-SERVER-MIB", "ctsSessionUserID"), ("CISCO-TELNET-SERVER-MIB", "ctsSessionTcpPort"))
if mibBuilder.loadTexts: ctsSessionEnded.setStatus('current')
if mibBuilder.loadTexts: ctsSessionEnded.setDescription('This notification signifies that the agent entity has detected end of a telnet session.')
ctsSessionStarted = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 630, 0, 2)).setObjects(("CISCO-TELNET-SERVER-MIB", "ctsSessionClientAddressType"), ("CISCO-TELNET-SERVER-MIB", "ctsSessionsClientAddress"), ("CISCO-TELNET-SERVER-MIB", "ctsSessionUserID"))
if mibBuilder.loadTexts: ctsSessionStarted.setStatus('current')
if mibBuilder.loadTexts: ctsSessionStarted.setDescription('This notification is sent when the agent entity has accepted a new telnet session.')
ctsSessionDenied = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 630, 0, 3)).setObjects(("CISCO-TELNET-SERVER-MIB", "ctsSessionClientAddressType"), ("CISCO-TELNET-SERVER-MIB", "ctsSessionsClientAddress"), ("CISCO-TELNET-SERVER-MIB", "ctsSessionTcpPort"))
if mibBuilder.loadTexts: ctsSessionDenied.setStatus('current')
if mibBuilder.loadTexts: ctsSessionDenied.setDescription('This notification signifies that the agent has refused a telnet session.')
ctsSessionLoginFailure = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 630, 0, 4)).setObjects(("CISCO-TELNET-SERVER-MIB", "ctsSessionClientAddressType"), ("CISCO-TELNET-SERVER-MIB", "ctsSessionsClientAddress"), ("CISCO-TELNET-SERVER-MIB", "ctsSessionUserID"), ("CISCO-TELNET-SERVER-MIB", "ctsSessionTcpPort"))
if mibBuilder.loadTexts: ctsSessionLoginFailure.setStatus('current')
if mibBuilder.loadTexts: ctsSessionLoginFailure.setDescription('This notification is sent when the agent entity has detected attempt to login with wrong credentials.')
ciscoTelnetServerMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 630, 2, 2))
ciscoTelnetServerMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 630, 2, 1, 1)).setObjects(("CISCO-TELNET-SERVER-MIB", "ctsMIBSessionsObjectGroup"), ("CISCO-TELNET-SERVER-MIB", "ctsMIBNotificationGroup"), ("CISCO-TELNET-SERVER-MIB", "ctsSessionNotifsControlGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTelnetServerMIBCompliance = ciscoTelnetServerMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoTelnetServerMIBCompliance.setDescription('The compliance statement for SNMP Agents which implement this MIB.')
ctsMIBSessionsObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 630, 2, 2, 1)).setObjects(("CISCO-TELNET-SERVER-MIB", "ctsSessionDescription"), ("CISCO-TELNET-SERVER-MIB", "ctsSessionClientAddressType"), ("CISCO-TELNET-SERVER-MIB", "ctsSessionsClientAddress"), ("CISCO-TELNET-SERVER-MIB", "ctsTelnetActivation"), ("CISCO-TELNET-SERVER-MIB", "ctsSessionPID"), ("CISCO-TELNET-SERVER-MIB", "ctsSessionUserID"), ("CISCO-TELNET-SERVER-MIB", "ctsSessionTcpPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctsMIBSessionsObjectGroup = ctsMIBSessionsObjectGroup.setStatus('current')
if mibBuilder.loadTexts: ctsMIBSessionsObjectGroup.setDescription('This group of objects maintains informative data for each Telnet session on a device that runs Telnet Server.')
ctsMIBNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 630, 2, 2, 2)).setObjects(("CISCO-TELNET-SERVER-MIB", "ctsSessionEnded"), ("CISCO-TELNET-SERVER-MIB", "ctsSessionStarted"), ("CISCO-TELNET-SERVER-MIB", "ctsSessionDenied"), ("CISCO-TELNET-SERVER-MIB", "ctsSessionLoginFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctsMIBNotificationGroup = ctsMIBNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: ctsMIBNotificationGroup.setDescription('This group contains notifications for this MIB.')
ctsSessionNotifsControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 630, 2, 2, 3)).setObjects(("CISCO-TELNET-SERVER-MIB", "ctsSessionEndedNotifEnable"), ("CISCO-TELNET-SERVER-MIB", "ctsSessionStartedNotifEnable"), ("CISCO-TELNET-SERVER-MIB", "ctsSessionDeniedNotifEnable"), ("CISCO-TELNET-SERVER-MIB", "ctsSessionFailureNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctsSessionNotifsControlGroup = ctsSessionNotifsControlGroup.setStatus('current')
if mibBuilder.loadTexts: ctsSessionNotifsControlGroup.setDescription('A collection of objects providing configuration information applicable to all session notifications.')
mibBuilder.exportSymbols("CISCO-TELNET-SERVER-MIB", ciscoTelnetServerMIBObjects=ciscoTelnetServerMIBObjects, ctsSessionsClientAddress=ctsSessionsClientAddress, ctsSessionTcpPort=ctsSessionTcpPort, ciscoTelnetServerMIBNotifs=ciscoTelnetServerMIBNotifs, ciscoTelnetServerMIBCompliance=ciscoTelnetServerMIBCompliance, ciscoTelnetServerStatusObjects=ciscoTelnetServerStatusObjects, ciscoTelnetServerMIBGroups=ciscoTelnetServerMIBGroups, ciscoTelnetServerMIBCompliances=ciscoTelnetServerMIBCompliances, ctsSessionFailureNotifEnable=ctsSessionFailureNotifEnable, ctsTelnetActivation=ctsTelnetActivation, ctsSessionStarted=ctsSessionStarted, ciscoTelnetServerMIBConform=ciscoTelnetServerMIBConform, ctsSessionNotifsControlGroup=ctsSessionNotifsControlGroup, ctsSessionsTable=ctsSessionsTable, ciscoTelnetServerMIB=ciscoTelnetServerMIB, ctsSessionLoginFailure=ctsSessionLoginFailure, ctsSessionEndedNotifEnable=ctsSessionEndedNotifEnable, ctsSessionDeniedNotifEnable=ctsSessionDeniedNotifEnable, ctsMIBSessionsObjectGroup=ctsMIBSessionsObjectGroup, ctsSessionDescription=ctsSessionDescription, ctsSessionEnded=ctsSessionEnded, ctsSessionID=ctsSessionID, ctsSessionPID=ctsSessionPID, ctsSessionStartedNotifEnable=ctsSessionStartedNotifEnable, ctsSessionClientAddressType=ctsSessionClientAddressType, ctsSessionUserID=ctsSessionUserID, ctsSessionsEntry=ctsSessionsEntry, ctsSessionDenied=ctsSessionDenied, ctsMIBNotificationGroup=ctsMIBNotificationGroup, PYSNMP_MODULE_ID=ciscoTelnetServerMIB, ciscoTelnetServerConfigObjects=ciscoTelnetServerConfigObjects)
