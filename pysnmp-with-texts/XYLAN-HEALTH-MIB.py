#
# PySNMP MIB module XYLAN-HEALTH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XYLAN-HEALTH-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:45:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, IpAddress, Bits, Unsigned32, ModuleIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Gauge32, Counter64, ObjectIdentity, MibIdentifier, TimeTicks, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "IpAddress", "Bits", "Unsigned32", "ModuleIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Gauge32", "Counter64", "ObjectIdentity", "MibIdentifier", "TimeTicks", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
xylanHealthArch, = mibBuilder.importSymbols("XYLAN-BASE-MIB", "xylanHealthArch")
healthDeviceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 18, 1))
healthModuleInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 18, 2))
healthPortInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 18, 3))
healthGroupInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 18, 4))
healthControlInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 18, 5))
healthThreshInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 18, 6))
health2DeviceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 18, 7))
health2ModuleInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 18, 8))
health2PortInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 18, 9))
healthDeviceRxData = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthDeviceRxData.setStatus('mandatory')
if mibBuilder.loadTexts: healthDeviceRxData.setDescription('Device-level input utilization information. Octet 0: average input utilization over the latest sample period (percent) Octet 1: average input utilization over the latest minute (percent) Octet 2: average input utilization over the latest hour (percent) Octet 3: maximum input utilization over the latest hour (percent) input utilization = total octets input / device capacity.')
healthDeviceRxTimeDelta = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthDeviceRxTimeDelta.setStatus('mandatory')
if mibBuilder.loadTexts: healthDeviceRxTimeDelta.setDescription('Time since input usage updated. Units are 1/100 second.')
healthDeviceRxTxData = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthDeviceRxTxData.setStatus('mandatory')
if mibBuilder.loadTexts: healthDeviceRxTxData.setDescription('Device-level i/o utilization information. Octet 0: average i/o utilization over the latest sample period (percent) Octet 1: average i/o utilization over the latest minute (percent) Octet 2: average i/o utilization over the latest hour (percent) Octet 3: maximum i/o utilization over the latest hour (percent) i/o utilization = (total octets input + total octets output) / device capacity.')
healthDeviceRxTxTimeDelta = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthDeviceRxTxTimeDelta.setStatus('mandatory')
if mibBuilder.loadTexts: healthDeviceRxTxTimeDelta.setDescription('Time since i/o usage updated. Units are 1/100 second.')
healthDeviceBackplaneData = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthDeviceBackplaneData.setStatus('mandatory')
if mibBuilder.loadTexts: healthDeviceBackplaneData.setDescription('Device-level backplane utilization information. Octet 0: average backplane utilization over the latest sample period (percent) Octet 1: average backplane utilization over the latest minute (percent) Octet 2: average backplane utilization over the latest hour (percent) Octet 3: maximum backplane utilization over the latest hour (percent).')
healthDeviceBackplaneTimeDelta = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthDeviceBackplaneTimeDelta.setStatus('mandatory')
if mibBuilder.loadTexts: healthDeviceBackplaneTimeDelta.setDescription('Time since backplane usage updated. Units are 1/100 second.')
healthDeviceCamData = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthDeviceCamData.setStatus('mandatory')
if mibBuilder.loadTexts: healthDeviceCamData.setDescription('Device-level CAM utilization information. Octet 0: average MPM CAM utilization over the latest sample period (percent) Octet 1: average MPM CAM utilization over the latest minute (percent) Octet 2: average MPM CAM utilization over the latest hour (percent) Octet 3: maximum MPM CAM utilization over the latest hour (percent) Octet 4: average HRE CAM utilization over the latest minute (percent) Octet 5: average HRE CAM utilization over the latest minute (percent) Octet 6: average HRE CAM utilization over the latest hour (percent) Octet 7: maximum HRE CAM utilization over the latest hour (percent) Octet 8: average HRE collision utilization over the latest minute (percent) Octet 9: average HRE collision utilization over the latest minute (percent) Octet 10: average HRE collision utilization over the latest hour (percent) Octet 11: maximum HRE collision utilization over the latest hour (percent).')
healthDeviceCamTimeDelta = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthDeviceCamTimeDelta.setStatus('mandatory')
if mibBuilder.loadTexts: healthDeviceCamTimeDelta.setDescription('Time since CAM usage updated. Units are 1/100 second.')
healthDeviceMemoryData = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthDeviceMemoryData.setStatus('mandatory')
if mibBuilder.loadTexts: healthDeviceMemoryData.setDescription('Device-level memory utilization information. Octet 0: average memory utilization over the latest sample period (percent) Octet 1: average memory utilization over the latest minute (percent) Octet 2: average memory utilization over the latest hour (percent) Octet 3: maximum memory utilization over the latest hour (percent).')
healthDeviceMemoryTimeDelta = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthDeviceMemoryTimeDelta.setStatus('mandatory')
if mibBuilder.loadTexts: healthDeviceMemoryTimeDelta.setDescription('Time since memory usage updated. Units are 1/100 second.')
healthDeviceCpuData = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthDeviceCpuData.setStatus('mandatory')
if mibBuilder.loadTexts: healthDeviceCpuData.setDescription('Device-level cpu utilization information. Octet 0: average cpu #1 utilization over the latest sample period (percent) Octet 1: average cpu #1 utilization over the latest minute (percent) Octet 2: average cpu #1 utilization over the latest hour (percent) Octet 3: maximum cpu #1 utilization over the latest hour (percent) Octet 4: average cpu #2 utilization over the latest sample period (percent) Octet 5: average cpu #2 utilization over the latest minute (percent) Octet 6: average cpu #2 utilization over the latest hour (percent) Octet 7: maximum cpu #2 utilization over the latest hour (percent) Octet 8: average cpu #3 utilization over the latest sample period (percent) Octet 9: average cpu #3 utilization over the latest minute (percent) Octet 10: average cpu #3 utilization over the latest hour (percent) Octet 11: maximum cpu #3 utilization over the latest hour (percent) Octet 12: average cpu #4 utilization over the latest sample period (percent) Octet 13: average cpu #4 utilization over the latest minute (percent) Octet 14: average cpu #4 utilization over the latest hour (percent) Octet 15: maximum cpu #4 utilization over the latest hour (percent).')
healthDeviceCpuTimeDelta = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthDeviceCpuTimeDelta.setStatus('mandatory')
if mibBuilder.loadTexts: healthDeviceCpuTimeDelta.setDescription('Time since cpu usage updated. Units are 1/100 second.')
healthDeviceNumCpus = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthDeviceNumCpus.setStatus('mandatory')
if mibBuilder.loadTexts: healthDeviceNumCpus.setDescription('Number of CPUs on MPM.')
healthDeviceMemoryTotal = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthDeviceMemoryTotal.setStatus('mandatory')
if mibBuilder.loadTexts: healthDeviceMemoryTotal.setDescription('Total memory available (octets).')
healthDeviceMemoryFree = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthDeviceMemoryFree.setStatus('mandatory')
if mibBuilder.loadTexts: healthDeviceMemoryFree.setDescription('Total memory free (octets).')
healthDeviceMpmCamTotal = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthDeviceMpmCamTotal.setStatus('mandatory')
if mibBuilder.loadTexts: healthDeviceMpmCamTotal.setDescription('Total entries in MPM CAM.')
healthDeviceMpmCamFree = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthDeviceMpmCamFree.setStatus('mandatory')
if mibBuilder.loadTexts: healthDeviceMpmCamFree.setDescription('Free entries in MPM CAM.')
healthDeviceHreCamTotal = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthDeviceHreCamTotal.setStatus('mandatory')
if mibBuilder.loadTexts: healthDeviceHreCamTotal.setDescription('Total entries in HRE CAM.')
healthDeviceHreCamFree = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthDeviceHreCamFree.setStatus('mandatory')
if mibBuilder.loadTexts: healthDeviceHreCamFree.setDescription('Free entries in HRE CAM.')
healthDeviceTemp = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthDeviceTemp.setStatus('mandatory')
if mibBuilder.loadTexts: healthDeviceTemp.setDescription('Current temperature of switch in degrees C x 10.')
healthDeviceIPRouteCacheFlushCount = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthDeviceIPRouteCacheFlushCount.setStatus('mandatory')
if mibBuilder.loadTexts: healthDeviceIPRouteCacheFlushCount.setDescription('Number of times IP route cache has been flushed.')
healthDeviceIPXRouteCacheFlushCount = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthDeviceIPXRouteCacheFlushCount.setStatus('mandatory')
if mibBuilder.loadTexts: healthDeviceIPXRouteCacheFlushCount.setDescription('Number of times IPX route cache has been flushed.')
healthDeviceMpmRxOverrunCount = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthDeviceMpmRxOverrunCount.setStatus('mandatory')
if mibBuilder.loadTexts: healthDeviceMpmRxOverrunCount.setDescription('Number of MPM receive overruns.')
healthDeviceMpmTxOverrunCount = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthDeviceMpmTxOverrunCount.setStatus('mandatory')
if mibBuilder.loadTexts: healthDeviceMpmTxOverrunCount.setDescription('Number of MPM transmit overruns.')
healthDeviceVccData = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthDeviceVccData.setStatus('mandatory')
if mibBuilder.loadTexts: healthDeviceVccData.setDescription('Device-level Vcc utilization information. Octet 0: average Vcc utilization over the latest sample period (percent) Octet 1: average Vcc utilization over the latest minute (percent) Octet 2: average Vcc utilization over the latest hour (percent) Octet 3: maximum Vcc utilization over the latest hour (percent) Vcc utilization = total active Vccs / device Vcc capacity.')
healthDeviceVccTimeDelta = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthDeviceVccTimeDelta.setStatus('mandatory')
if mibBuilder.loadTexts: healthDeviceVccTimeDelta.setDescription('Time since Vcc usage updated. Units are 1/100 second.')
healthDeviceTemperatureData = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthDeviceTemperatureData.setStatus('mandatory')
if mibBuilder.loadTexts: healthDeviceTemperatureData.setDescription('Device-level temperature information. Octet 0: average temperature over the latest sample period (degrees Centigrade) Octet 1: average temperature over the latest minute (degrees Centigrade) Octet 2: average temperature over the latest hour (degrees Centigrade) Octet 3: maximum temperature over the latest hour (degrees centigrade).')
healthDeviceTemperatureTimeDelta = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthDeviceTemperatureTimeDelta.setStatus('mandatory')
if mibBuilder.loadTexts: healthDeviceTemperatureTimeDelta.setDescription('Time since temperature updated. Units are 1/100 second.')
healthDeviceVpData = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 1, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthDeviceVpData.setStatus('mandatory')
if mibBuilder.loadTexts: healthDeviceVpData.setDescription('Device-level virtual port utilization information. Octet 0: average virtual port utilization over the latest sample period (percent) Octet 1: average virtual port utilization over the latest minute (percent) Octet 2: average virtual port utilization over the latest hour (percent) Octet 3: maximum virtual port utilization over the latest hour (percent) virtual port utilization = total active virtual ports / device virtual port capacity.')
healthDeviceVpTimeDelta = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthDeviceVpTimeDelta.setStatus('mandatory')
if mibBuilder.loadTexts: healthDeviceVpTimeDelta.setDescription('Time since virtual port usage updated. Units are 1/100 second.')
healthDeviceHreCollisionTotal = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthDeviceHreCollisionTotal.setStatus('mandatory')
if mibBuilder.loadTexts: healthDeviceHreCollisionTotal.setDescription('Total collision entries available in HRE CAM.')
healthDeviceHreCollisionFree = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthDeviceHreCollisionFree.setStatus('mandatory')
if mibBuilder.loadTexts: healthDeviceHreCollisionFree.setDescription('Free collision entries in HRE CAM.')
healthModuleTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 18, 2, 1), )
if mibBuilder.loadTexts: healthModuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: healthModuleTable.setDescription('A list of installed modules in this chassis.')
healthModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 18, 2, 1, 1), ).setIndexNames((0, "XYLAN-HEALTH-MIB", "healthModuleSlot"))
if mibBuilder.loadTexts: healthModuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: healthModuleEntry.setDescription("A module entry containing objects for a module in a specific 'slot'.")
healthModuleSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthModuleSlot.setStatus('mandatory')
if mibBuilder.loadTexts: healthModuleSlot.setDescription('The (one-based) front slot number within the chassis.')
healthModuleRxData = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthModuleRxData.setStatus('mandatory')
if mibBuilder.loadTexts: healthModuleRxData.setDescription('Module-level input utilization information. Octet 0: average input utilization over the latest sample period (percent) Octet 1: average input utilization over the latest minute (percent) Octet 2: average input utilization over the latest hour (percent) Octet 3: maximum input utilization over the latest hour (percent) input utilization = total octets input / module capacity.')
healthModuleRxTimeDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthModuleRxTimeDelta.setStatus('mandatory')
if mibBuilder.loadTexts: healthModuleRxTimeDelta.setDescription('Time since input usage updated. Units are 1/100 second.')
healthModuleRxTxData = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthModuleRxTxData.setStatus('mandatory')
if mibBuilder.loadTexts: healthModuleRxTxData.setDescription('Module-level i/o utilization information. Octet 0: average i/o utilization over the latest sample period (percent) Octet 1: average i/o utilization over the latest minute (percent) Octet 2: average i/o utilization over the latest hour (percent) Octet 3: maximum i/o utilization over the latest hour (percent) i/o utilization = (total octets input + total octets output) / module capacity.')
healthModuleRxTxTimeDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthModuleRxTxTimeDelta.setStatus('mandatory')
if mibBuilder.loadTexts: healthModuleRxTxTimeDelta.setDescription('Time since i/o usage updated. Units are 1/100 second.')
healthModuleBackplaneData = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 2, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthModuleBackplaneData.setStatus('mandatory')
if mibBuilder.loadTexts: healthModuleBackplaneData.setDescription('Module-level backplane utilization information. Octet 0: average backplane utilization over the latest sample period (percent) Octet 1: average backplane utilization over the latest minute (percent) Octet 2: average backplane utilization over the latest hour (percent) Octet 3: maximum backplane utilization over the latest hour (percent).')
healthModuleBackplaneTimeDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthModuleBackplaneTimeDelta.setStatus('mandatory')
if mibBuilder.loadTexts: healthModuleBackplaneTimeDelta.setDescription('Time since backplane usage updated. Units are 1/100 second.')
healthModuleCamData = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 2, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthModuleCamData.setStatus('mandatory')
if mibBuilder.loadTexts: healthModuleCamData.setDescription('Module-level CAM utilization information. Octet 0: average CAM utilization over the latest sample period (percent) Octet 1: average CAM utilization over the latest minute (percent) Octet 2: average CAM utilization over the latest hour (percent) Octet 3: maximum CAM utilization over the latest hour (percent).')
healthModuleCamTimeDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthModuleCamTimeDelta.setStatus('mandatory')
if mibBuilder.loadTexts: healthModuleCamTimeDelta.setDescription('Time since CAM usage updated. Units are 1/100 second.')
healthModuleCamNumInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthModuleCamNumInstalled.setStatus('mandatory')
if mibBuilder.loadTexts: healthModuleCamNumInstalled.setDescription('The number of CAMs installed on the device.')
healthModuleCamConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthModuleCamConfigured.setStatus('mandatory')
if mibBuilder.loadTexts: healthModuleCamConfigured.setDescription('The number of CAM entries configured.')
healthModuleCamAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthModuleCamAvail.setStatus('mandatory')
if mibBuilder.loadTexts: healthModuleCamAvail.setDescription('The number of CAM entries available.')
healthModuleCamAvailNonIntern = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthModuleCamAvailNonIntern.setStatus('mandatory')
if mibBuilder.loadTexts: healthModuleCamAvailNonIntern.setDescription('The number of CAM entries available for caching non-internal MAC Addresses.')
healthModuleCamFree = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthModuleCamFree.setStatus('mandatory')
if mibBuilder.loadTexts: healthModuleCamFree.setDescription('The number of free CAM entries.')
healthModuleVccData = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 2, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthModuleVccData.setStatus('mandatory')
if mibBuilder.loadTexts: healthModuleVccData.setDescription('Module-level Vcc utilization information. Octet 0: average Vcc utilization over the latest sample period (percent) Octet 1: average Vcc utilization over the latest minute (percent) Octet 2: average Vcc utilization over the latest hour (percent) Octet 3: maximum Vcc utilization over the latest hour (percent) Vcc utilization = total active Vccs / module Vcc capacity.')
healthModuleVccTimeDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthModuleVccTimeDelta.setStatus('mandatory')
if mibBuilder.loadTexts: healthModuleVccTimeDelta.setDescription('Time since Vcc usage updated. Units are 1/100 second.')
healthSamplingInterval = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: healthSamplingInterval.setStatus('mandatory')
if mibBuilder.loadTexts: healthSamplingInterval.setDescription('Time interval between consecutive samples of resources. Units are seconds. Legal values are: 1,2,3,4,5,6,10,12,15,20,30. Default is 5.')
healthSamplingReset = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 5, 2), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: healthSamplingReset.setStatus('mandatory')
if mibBuilder.loadTexts: healthSamplingReset.setDescription('Any set of this variable causes all health counters to reset to zero and a restart of sampling.')
healthThreshDeviceRxLimit = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: healthThreshDeviceRxLimit.setStatus('mandatory')
if mibBuilder.loadTexts: healthThreshDeviceRxLimit.setDescription('Device input threshold value. Units are percent. Default is 80.')
healthThreshDeviceRxTxLimit = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: healthThreshDeviceRxTxLimit.setStatus('mandatory')
if mibBuilder.loadTexts: healthThreshDeviceRxTxLimit.setDescription('Device input/output threshold value. Units are percent. Default is 80.')
healthThreshDeviceBackplaneLimit = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: healthThreshDeviceBackplaneLimit.setStatus('mandatory')
if mibBuilder.loadTexts: healthThreshDeviceBackplaneLimit.setDescription('Device backplane threshold value. Units are percent. Default is 80.')
healthThreshDeviceCamLimit = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: healthThreshDeviceCamLimit.setStatus('mandatory')
if mibBuilder.loadTexts: healthThreshDeviceCamLimit.setDescription('Device Cam threshold value. Units are percent. Default is 80.')
healthThreshDeviceMemoryLimit = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: healthThreshDeviceMemoryLimit.setStatus('mandatory')
if mibBuilder.loadTexts: healthThreshDeviceMemoryLimit.setDescription('Device memory threshold value. Units are percent. Default is 80.')
healthThreshDeviceCpuLimit = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: healthThreshDeviceCpuLimit.setStatus('mandatory')
if mibBuilder.loadTexts: healthThreshDeviceCpuLimit.setDescription('Device Cpu threshold value. Units are percent. Default is 80.')
healthThreshDeviceSummary = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 6, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(27, 27)).setFixedLength(27)).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthThreshDeviceSummary.setStatus('mandatory')
if mibBuilder.loadTexts: healthThreshDeviceSummary.setDescription('Summary of current device thresholds. Octet 0 contains the device threshold-exceeded flag non-zero if any device threshold exceeded Octet 1 contains the device Rx threshold-exceeded flag non-zero if device Rx threshold exceeded Octet 2 contains the device RxTx threshold-exceeded flag non-zero if device RxTx threshold exceeded Octet 3 contains the device backplane threshold-exceeded flag non-zero if device backplane threshold exceeded Octet 4 contains the device CAM threshold-exceeded flag non-zero if device CAM threshold exceeded Octet 5 contains the device memory threshold-exceeded flag non-zero if device memory threshold exceeded Octet 6 contains the device CPU threshold-exceeded flag non-zero if device memory threshold exceeded Octet 7 contains the device VCC threshold-exceeded flag non-zero if device VCC threshold exceeded All the following values are percentages. Octet 8 contains device Rx threshold Octet 9 contains device Rx usage Octet 10 contains device RxTx threshold Octet 11 contains device RxTx usage Octet 12 contains device backplane threshold Octet 13 contains device backplane usage Octet 14 contains device CAM threshold Octet 15 contains device MPM CAM usage Octet 16 contains device HRE CAM usage Octet 17 contains device memory threshold Octet 18 contains device memory usage Octet 19 contains device CPU threshold Octet 20 contains device CPU#1 usage Octet 21 contains device CPU#2 usage Octet 22 contains device CPU#3 usage Octet 23 contains device CPU#4 usage Octet 24 contains device VCC threshold Octet 25 contains device VCC usage Octet 26 contains device HRE collision usage.')
healthThreshModuleSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 18, 6, 8), )
if mibBuilder.loadTexts: healthThreshModuleSummaryTable.setStatus('mandatory')
if mibBuilder.loadTexts: healthThreshModuleSummaryTable.setDescription('A list of installed modules in this chassis.')
healthThreshModuleSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 18, 6, 8, 1), ).setIndexNames((0, "XYLAN-HEALTH-MIB", "healthThreshModuleSummarySlot"))
if mibBuilder.loadTexts: healthThreshModuleSummaryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: healthThreshModuleSummaryEntry.setDescription("A module entry containing a summary of resource usage in a specific 'slot'.")
healthThreshModuleSummarySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 6, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthThreshModuleSummarySlot.setStatus('mandatory')
if mibBuilder.loadTexts: healthThreshModuleSummarySlot.setDescription('The (one-based) front slot number within the chassis.')
healthThreshModuleSummaryData = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 6, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthThreshModuleSummaryData.setStatus('mandatory')
if mibBuilder.loadTexts: healthThreshModuleSummaryData.setDescription('Summary of current module thresholds. Octet 0 contains the module threshold-exceeded flag non-zero if any module threshold exceeded Octet 1 contains the module Rx threshold-exceeded flag non-zero if module Rx threshold exceeded Octet 2 contains the module RxTx threshold-exceeded flag non-zero if module RxTx threshold exceeded Octet 3 contains the module backplane threshold-exceeded flag non-zero if module backplane threshold exceeded Octet 4 contains the module VCC threshold-exceeded flag non-zero if module VCC threshold exceeded Octet 5 contains the module CAM threshold-exceeded flag non-zero if module CAM threshold exceeded All the following values are percentages. Octet 6 contains module Rx threshold Octet 7 contains module Rx usage Octet 8 contains module RxTx threshold Octet 9 contains module RxTx usage Octet 10 contains module backplane threshold Octet 11 contains module backplane usage Octet 12 contains module VCC threshold Octet 13 contains module VCC usage Octet 14 contains module CAM threshold Octet 15 contains module CAM usage.')
healthThreshDevTrapData = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 6, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 21)))
if mibBuilder.loadTexts: healthThreshDevTrapData.setStatus('mandatory')
if mibBuilder.loadTexts: healthThreshDevTrapData.setDescription('Contents of device-level rising/falling threshold trap. The format is as follows: Octet 1: length including this octet (L) Octet 2: number of threshold type/change pairs Octets 3 - L: type/change pairs each pair consists of one octet identifying the threshold type and one octet identifying the change type. Threshold type values: Rx threshold = 1 RxTx threshold = 2 Backplane threshold = 3 VCC threshold = 4 HRE CAM threshold = 5 MPM CAM threshold = 6 Memory threshold = 7 CPUn threshold = 7 + n (1 <= n <= 4) HRE collision threshold = 12 Change type values: falling threshold change = 1 rising threshold change = 2 Only those thresholds for which a threshold crossing event is detected will be present. This object is not intended to be accessed directly. It is defined for use in device-level rising/falling threshold traps.')
healthThreshModTrapCount = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 6, 10), Integer32())
if mibBuilder.loadTexts: healthThreshModTrapCount.setStatus('mandatory')
if mibBuilder.loadTexts: healthThreshModTrapCount.setDescription('Number of modules with threshold crossing data in module-level rising/falling threshold trap. This object is not intended to be accessed directly. It is defined for use in module-level rising/falling threshold traps.')
healthThreshModTrapData = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 6, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)))
if mibBuilder.loadTexts: healthThreshModTrapData.setStatus('mandatory')
if mibBuilder.loadTexts: healthThreshModTrapData.setDescription("Contents of module-level rising/falling threshold trap. The format is as follows: Octet 1: length including this octet (L) Octets 2 - L: module threshold trap data Within each module's data, the format is as follows: Octet 1: length including this octet Octet 2: number of threshold type/change pairs Octet 3: module slot number Octets 4 and following: type/change pairs each pair consists of one octet identifying the threshold type and one octet identifying the change type. Threshold type values: Rx threshold = 1 RxTx threshold = 2 Backplane threshold = 3 VCC threshold = 4 CAM threshold = 5 Change type values: falling threshold change = 1 rising threshold change = 2 Only those thresholds for which a threshold crossing event is detected will be present. This object is not intended to be accessed directly. It is defined for use in module-level rising/falling threshold traps.")
healthThreshPortSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 18, 6, 12), )
if mibBuilder.loadTexts: healthThreshPortSummaryTable.setStatus('mandatory')
if mibBuilder.loadTexts: healthThreshPortSummaryTable.setDescription('A list of port in this chassis.')
healthThreshPortSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 18, 6, 12, 1), ).setIndexNames((0, "XYLAN-HEALTH-MIB", "healthThreshPortSummarySlot"), (0, "XYLAN-HEALTH-MIB", "healthThreshPortSummaryIF"))
if mibBuilder.loadTexts: healthThreshPortSummaryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: healthThreshPortSummaryEntry.setDescription("A module entry containing a summary of resource usage in a specific 'slot/port'.")
healthThreshPortSummarySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 6, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthThreshPortSummarySlot.setStatus('mandatory')
if mibBuilder.loadTexts: healthThreshPortSummarySlot.setDescription('The (one-based) front slot number within the chassis.')
healthThreshPortSummaryIF = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 6, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthThreshPortSummaryIF.setStatus('mandatory')
if mibBuilder.loadTexts: healthThreshPortSummaryIF.setDescription('The on-board interface number.')
healthThreshPortSummaryData = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 6, 12, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthThreshPortSummaryData.setStatus('mandatory')
if mibBuilder.loadTexts: healthThreshPortSummaryData.setDescription('Summary of current port thresholds. Octet 0 contains the port threshold-exceeded flag non-zero if any port threshold exceeded Octet 1 contains the port Rx threshold-exceeded flag non-zero if port Rx threshold exceeded Octet 2 contains the port RxTx threshold-exceeded flag non-zero if port RxTx threshold exceeded Octet 3 contains the port backplane threshold-exceeded flag non-zero if port backplane threshold exceeded Octet 4 contains the port VCC threshold-exceeded flag non-zero if port VCC threshold exceeded All the following values are percentages. Octet 5 contains port Rx threshold Octet 6 contains port Rx usage Octet 7 contains port RxTx threshold Octet 8 contains port RxTx usage Octet 9 contains port backplane threshold Octet 10 contains port backplane usage Octet 11 contains port VCC threshold Octet 12 contains port VCC usage.')
healthThreshPortTrapSlot = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 6, 13), Integer32())
if mibBuilder.loadTexts: healthThreshPortTrapSlot.setStatus('mandatory')
if mibBuilder.loadTexts: healthThreshPortTrapSlot.setDescription('Number of the slot with threshold crossing data in port-level rising/falling threshold trap. This object is not intended to be accessed directly. It is defined for use in module-level rising/falling threshold traps.')
healthThreshPortTrapCount = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 6, 14), Integer32())
if mibBuilder.loadTexts: healthThreshPortTrapCount.setStatus('mandatory')
if mibBuilder.loadTexts: healthThreshPortTrapCount.setDescription('Number of threshold crossing entries in port-level rising/falling threshold trap. This object is not intended to be accessed directly. It is defined for use in port-level rising/falling threshold traps.')
healthThreshPortTrapData = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 6, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: healthThreshPortTrapData.setStatus('mandatory')
if mibBuilder.loadTexts: healthThreshPortTrapData.setDescription('Contents of port-level rising/falling threshold trap. The format is as follows: Octet 1: length including this octet (L) Octets 2 - L: port threshold trap data, consisting of threshold crossing entries Within each threshold crossing entry, the format is as follows: Octet 1: length including this octet (l) Octet 2: type of threshold crossing Threshold crossing types are: Rx rising threshold = 1 Rx falling threshold = 2 RxTx rising threshold = 3 RxTx falling threshold = 4 Bkpl rising threshold = 5 Bkpl falling threshold = 6 Vcc rising threshold = 7 Vcc falling threshold = 8 Octets 3 - l: port bit mask This bit mask is ((N-1)/8)+1 octets long, where N is the number of ports on the module. Each port is represented by one bit in the mask. The bit for port 1 is the leftmost bit in octet 1 of the bit mask. The bit for port 8 is the rightmost bit in octet 1 of the bit mask. The bit for port 9 is the leftmost bit in octet 2 of the bit mask, and so on. Only those thresholds for which a threshold crossing event is detected will be present. This object is not intended to be accessed directly. It is defined for use in port-level rising/falling threshold traps.')
healthThreshDeviceVccLimit = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 6, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: healthThreshDeviceVccLimit.setStatus('mandatory')
if mibBuilder.loadTexts: healthThreshDeviceVccLimit.setDescription('Device VCC threshold value. Units are percent.')
healthThreshDeviceTemperatureLimit = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 6, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: healthThreshDeviceTemperatureLimit.setStatus('mandatory')
if mibBuilder.loadTexts: healthThreshDeviceTemperatureLimit.setDescription('Device temperature threshold value. Units are degrees Centigrade.')
healthThreshDeviceVpLimit = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 6, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: healthThreshDeviceVpLimit.setStatus('mandatory')
if mibBuilder.loadTexts: healthThreshDeviceVpLimit.setDescription('Device virtual port threshold value. Units are percent.')
healthPortMax = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(21, 21)).setFixedLength(21)).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthPortMax.setStatus('mandatory')
if mibBuilder.loadTexts: healthPortMax.setDescription('Maximum port utilization information. Octets 1 - 7: information for last cycle Octets 8 - 14: information for last minute Octets 15 - 21: information for last hour Within each group: first octet = slot second octet = interface third octet = percentage utlilization fourth through seventh octets = timestamp Timestamp value = octet 4 * 256**3 + octet 5 * 256**2 + octet 6 * 256 + octet 7. Timestamp units are 1/100 second.')
class HealthPortUpDownStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("healthPortDn", 1), ("healthPortUp", 2))

healthPortTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 18, 3, 2), )
if mibBuilder.loadTexts: healthPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: healthPortTable.setDescription('A list of Physical Port health instances.')
healthPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 18, 3, 2, 1), ).setIndexNames((0, "XYLAN-HEALTH-MIB", "healthPortSlot"), (0, "XYLAN-HEALTH-MIB", "healthPortIF"))
if mibBuilder.loadTexts: healthPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: healthPortEntry.setDescription('A Physical Port health entry.')
healthPortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthPortSlot.setStatus('mandatory')
if mibBuilder.loadTexts: healthPortSlot.setDescription('The physical slot number for this port.')
healthPortIF = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthPortIF.setStatus('mandatory')
if mibBuilder.loadTexts: healthPortIF.setDescription('The on-board interface number.')
healthPortUpDn = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 3, 2, 1, 3), HealthPortUpDownStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthPortUpDn.setStatus('mandatory')
if mibBuilder.loadTexts: healthPortUpDn.setDescription('The status of this port.')
healthPortRxData = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 3, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthPortRxData.setStatus('mandatory')
if mibBuilder.loadTexts: healthPortRxData.setDescription('Port-level input utilization information. Octet 0: average input utilization over the latest sample period (percent) Octet 1: average input utilization over the latest minute (percent) Octet 2: average input utilization over the latest hour (percent) Octet 3: maximum input utilization over the latest hour (percent) input utilization = total octets input / module capacity.')
healthPortRxTimeDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthPortRxTimeDelta.setStatus('mandatory')
if mibBuilder.loadTexts: healthPortRxTimeDelta.setDescription('Time since input usage updated. Units are 1/100 second.')
healthPortRxTxData = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 3, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthPortRxTxData.setStatus('mandatory')
if mibBuilder.loadTexts: healthPortRxTxData.setDescription('Port-level i/o utilization information. Octet 0: average i/o utilization over the latest sample period (percent) Octet 1: average i/o utilization over the latest minute (percent) Octet 2: average i/o utilization over the latest hour (percent) Octet 3: maximum i/o utilization over the latest hour (percent) i/o utilization = (total octets input + total octets output) / module capacity.')
healthPortRxTxTimeDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthPortRxTxTimeDelta.setStatus('mandatory')
if mibBuilder.loadTexts: healthPortRxTxTimeDelta.setDescription('Time since i/o usage updated. Units are 1/100 second.')
healthPortBackplaneData = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 3, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthPortBackplaneData.setStatus('mandatory')
if mibBuilder.loadTexts: healthPortBackplaneData.setDescription('Port-level backplane utilization information. Octet 0: average backplane utilization over the latest sample period (percent) Octet 1: average backplane utilization over the latest minute (percent) Octet 2: average backplane utilization over the latest hour (percent) Octet 3: maximum backplane utilization over the latest hour (percent).')
healthPortBackplaneTimeDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthPortBackplaneTimeDelta.setStatus('mandatory')
if mibBuilder.loadTexts: healthPortBackplaneTimeDelta.setDescription('Time since backplane usage updated. Units are 1/100 second.')
healthPortVccData = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 3, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthPortVccData.setStatus('mandatory')
if mibBuilder.loadTexts: healthPortVccData.setDescription('Port-level Vcc utilization information. Octet 0: average Vcc utilization over the latest sample period (percent) Octet 1: average Vcc utilization over the latest minute (percent) Octet 2: average Vcc utilization over the latest hour (percent) Octet 3: maximum Vcc utilization over the latest hour (percent) Vcc utilization = Vccs in use / port Vcc capacity.')
healthPortVccTimeDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 3, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthPortVccTimeDelta.setStatus('mandatory')
if mibBuilder.loadTexts: healthPortVccTimeDelta.setDescription('Time since Vcc usage updated. Units are 1/100 second.')
health2DeviceRxLatest = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceRxLatest.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceRxLatest.setDescription('Average device-level input utilization over the latest sample period (percent).')
health2DeviceRx1MinAvg = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceRx1MinAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceRx1MinAvg.setDescription('Average device-level input utilization over the last minute (percent).')
health2DeviceRx1HrAvg = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceRx1HrAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceRx1HrAvg.setDescription('Average device-level input utilization over the last hour (percent).')
health2DeviceRx1HrMax = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceRx1HrMax.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceRx1HrMax.setDescription('Maximum device-level input utilization over the last hour (percent).')
health2DeviceRxTxLatest = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceRxTxLatest.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceRxTxLatest.setDescription('Average device-level i/o utilization over the latest sample period (percent).')
health2DeviceRxTx1MinAvg = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceRxTx1MinAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceRxTx1MinAvg.setDescription('Average device-level i/o utilization over the last minute (percent).')
health2DeviceRxTx1HrAvg = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceRxTx1HrAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceRxTx1HrAvg.setDescription('Average device-level i/o utilization over the last hour (percent).')
health2DeviceRxTx1HrMax = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceRxTx1HrMax.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceRxTx1HrMax.setDescription('Maximum device-level i/o utilization over the last hour (percent).')
health2DeviceBackplaneLatest = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceBackplaneLatest.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceBackplaneLatest.setDescription('Average device-level backplane utilization over the latest sample period (percent).')
health2DeviceBackplane1MinAvg = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceBackplane1MinAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceBackplane1MinAvg.setDescription('Average device-level backplane utilization over the last minute (percent).')
health2DeviceBackplane1HrAvg = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceBackplane1HrAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceBackplane1HrAvg.setDescription('Average device-level backplane utilization over the last hour (percent).')
health2DeviceBackplane1HrMax = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceBackplane1HrMax.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceBackplane1HrMax.setDescription('Maximum device-level backplane utilization over the last hour (percent).')
health2DeviceMpmCamLatest = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceMpmCamLatest.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceMpmCamLatest.setDescription('Average MPM CAM utilization over the latest sample period (percent).')
health2DeviceMpmCam1MinAvg = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceMpmCam1MinAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceMpmCam1MinAvg.setDescription('Average MPM CAM utilization over the last minute (percent).')
health2DeviceMpmCam1HrAvg = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceMpmCam1HrAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceMpmCam1HrAvg.setDescription('Average MPM CAM utilization over the last hour (percent).')
health2DeviceMpmCam1HrMax = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceMpmCam1HrMax.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceMpmCam1HrMax.setDescription('Maximum MPM CAM utilization over the last hour (percent).')
health2DeviceHreCamLatest = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceHreCamLatest.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceHreCamLatest.setDescription('Average HRE CAM utilization over the latest sample period (percent).')
health2DeviceHreCam1MinAvg = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceHreCam1MinAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceHreCam1MinAvg.setDescription('Average HRE CAM utilization over the last minute (percent).')
health2DeviceHreCam1HrAvg = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceHreCam1HrAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceHreCam1HrAvg.setDescription('Average HRE CAM utilization over the last hour (percent).')
health2DeviceHreCam1HrMax = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceHreCam1HrMax.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceHreCam1HrMax.setDescription('Maximum HRE CAM utilization over the last hour (percent).')
health2DeviceMemoryLatest = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceMemoryLatest.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceMemoryLatest.setDescription('Average device-level memory utilization over the latest sample period (percent).')
health2DeviceMemory1MinAvg = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceMemory1MinAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceMemory1MinAvg.setDescription('Average device-level memory utilization over the last minute (percent).')
health2DeviceMemory1HrAvg = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceMemory1HrAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceMemory1HrAvg.setDescription('Average device-level memory utilization over the last hour (percent).')
health2DeviceMemory1HrMax = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceMemory1HrMax.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceMemory1HrMax.setDescription('Maximum device-level memory utilization over the last hour (percent).')
health2DeviceNumCpus = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceNumCpus.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceNumCpus.setDescription('Number of CPUs on MPM.')
health2DeviceCpuTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 26), )
if mibBuilder.loadTexts: health2DeviceCpuTable.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceCpuTable.setDescription('A list of device-level CPU utilization data.')
health2DeviceCpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 26, 1), ).setIndexNames((0, "XYLAN-HEALTH-MIB", "health2DeviceCpuNum"))
if mibBuilder.loadTexts: health2DeviceCpuEntry.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceCpuEntry.setDescription('A device-level CPU utilization entry.')
health2DeviceCpuNum = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 26, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceCpuNum.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceCpuNum.setDescription('MPM CPU number.')
health2DeviceCpuLatest = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 26, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceCpuLatest.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceCpuLatest.setDescription('Average device-level CPU utilization over the latest sample period (percent).')
health2DeviceCpu1MinAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 26, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceCpu1MinAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceCpu1MinAvg.setDescription('Average device-level CPU utilization over the last minute (percent).')
health2DeviceCpu1HrAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 26, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceCpu1HrAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceCpu1HrAvg.setDescription('Average device-level CPU utilization over the last hour (percent).')
health2DeviceCpu1HrMax = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 26, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceCpu1HrMax.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceCpu1HrMax.setDescription('Maximum device-level CPU utilization over the last hour (percent).')
health2DeviceVccLatest = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceVccLatest.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceVccLatest.setDescription('Average device-level VCC utilization over the latest sample period (percent).')
health2DeviceVcc1MinAvg = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceVcc1MinAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceVcc1MinAvg.setDescription('Average device-level VCC utilization over the last minute (percent).')
health2DeviceVcc1HrAvg = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceVcc1HrAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceVcc1HrAvg.setDescription('Average device-level VCC utilization over the last hour (percent).')
health2DeviceVcc1HrMax = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceVcc1HrMax.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceVcc1HrMax.setDescription('Maximum device-level VCC utilization over the last hour (percent).')
health2DeviceTemperatureLatest = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceTemperatureLatest.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceTemperatureLatest.setDescription('Average device temperature over the latest sample period (degrees Centigrade).')
health2DeviceTemperature1MinAvg = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceTemperature1MinAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceTemperature1MinAvg.setDescription('Average device temperature over the last minute (degrees Centigrade).')
health2DeviceTemperature1HrAvg = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceTemperature1HrAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceTemperature1HrAvg.setDescription('Average device temperature over the last hour (degrees centigrade).')
health2DeviceTemperature1HrMax = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceTemperature1HrMax.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceTemperature1HrMax.setDescription('Maximum device temperature over the last hour (degrees Centigrade).')
health2DeviceVpLatest = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceVpLatest.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceVpLatest.setDescription('Average device-level virtual port utilization over the latest sample period (percent).')
health2DeviceVp1MinAvg = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceVp1MinAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceVp1MinAvg.setDescription('Average device-level virtual port utilization over the last minute (percent).')
health2DeviceVp1HrAvg = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceVp1HrAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceVp1HrAvg.setDescription('Average device-level virtual port utilization over the last hour (percent).')
health2DeviceVp1HrMax = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceVp1HrMax.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceVp1HrMax.setDescription('Maximum device-level virtual port utilization over the last hour (percent).')
health2DeviceHreCollisionLatest = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceHreCollisionLatest.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceHreCollisionLatest.setDescription('Average HRE Collision utilization over the latest sample period (percent).')
health2DeviceHreCollision1MinAvg = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceHreCollision1MinAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceHreCollision1MinAvg.setDescription('Average HRE Collision utilization over the last minute (percent).')
health2DeviceHreCollision1HrAvg = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceHreCollision1HrAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceHreCollision1HrAvg.setDescription('Average HRE Collision utilization over the last hour (percent).')
health2DeviceHreCollision1HrMax = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 18, 7, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2DeviceHreCollision1HrMax.setStatus('mandatory')
if mibBuilder.loadTexts: health2DeviceHreCollision1HrMax.setDescription('Maximum HRE Collision utilization over the last hour (percent).')
health2ModuleTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 18, 8, 1), )
if mibBuilder.loadTexts: health2ModuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: health2ModuleTable.setDescription('A list of installed modules in this chassis.')
health2ModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 18, 8, 1, 1), ).setIndexNames((0, "XYLAN-HEALTH-MIB", "health2ModuleSlot"))
if mibBuilder.loadTexts: health2ModuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: health2ModuleEntry.setDescription("A module entry containing objects for a module in a specific 'slot'.")
health2ModuleSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2ModuleSlot.setStatus('mandatory')
if mibBuilder.loadTexts: health2ModuleSlot.setDescription('The (one-based) front slot number within the chassis.')
health2ModuleRxLatest = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2ModuleRxLatest.setStatus('mandatory')
if mibBuilder.loadTexts: health2ModuleRxLatest.setDescription('Average module-level input utilization over the latest sample period (percent).')
health2ModuleRx1MinAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2ModuleRx1MinAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2ModuleRx1MinAvg.setDescription('Average module-level input utilization over the last minute (percent).')
health2ModuleRx1HrAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2ModuleRx1HrAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2ModuleRx1HrAvg.setDescription('Average module-level input utilization over the last hour (percent).')
health2ModuleRx1HrMax = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2ModuleRx1HrMax.setStatus('mandatory')
if mibBuilder.loadTexts: health2ModuleRx1HrMax.setDescription('Maximum module-level input utilization over the last hour (percent).')
health2ModuleRxTxLatest = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2ModuleRxTxLatest.setStatus('mandatory')
if mibBuilder.loadTexts: health2ModuleRxTxLatest.setDescription('Average module-level i/o utilization over the latest sample period (percent).')
health2ModuleRxTx1MinAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2ModuleRxTx1MinAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2ModuleRxTx1MinAvg.setDescription('Average module-level i/o utilization over the last minute (percent).')
health2ModuleRxTx1HrAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2ModuleRxTx1HrAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2ModuleRxTx1HrAvg.setDescription('Average module-level i/o utilization over the last hour (percent).')
health2ModuleRxTx1HrMax = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2ModuleRxTx1HrMax.setStatus('mandatory')
if mibBuilder.loadTexts: health2ModuleRxTx1HrMax.setDescription('Maximum module-level i/o utilization over the last hour (percent).')
health2ModuleBackplaneLatest = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2ModuleBackplaneLatest.setStatus('mandatory')
if mibBuilder.loadTexts: health2ModuleBackplaneLatest.setDescription('Average module-level backplane utilization over the latest sample period (percent).')
health2ModuleBackplane1MinAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 8, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2ModuleBackplane1MinAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2ModuleBackplane1MinAvg.setDescription('Average module-level backplane utilization over the last minute (percent).')
health2ModuleBackplane1HrAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 8, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2ModuleBackplane1HrAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2ModuleBackplane1HrAvg.setDescription('Average module-level backplane utilization over the last hour (percent).')
health2ModuleBackplane1HrMax = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 8, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2ModuleBackplane1HrMax.setStatus('mandatory')
if mibBuilder.loadTexts: health2ModuleBackplane1HrMax.setDescription('Maximum module-level backplane utilization over the last hour (percent).')
health2ModuleCamLatest = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 8, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2ModuleCamLatest.setStatus('mandatory')
if mibBuilder.loadTexts: health2ModuleCamLatest.setDescription('Average module-level CAM utilization over the latest sample period (percent).')
health2ModuleCam1MinAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 8, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2ModuleCam1MinAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2ModuleCam1MinAvg.setDescription('Average module-level CAM utilization over the last minute (percent).')
health2ModuleCam1HrAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 8, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2ModuleCam1HrAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2ModuleCam1HrAvg.setDescription('Average module-level CAM utilization over the last hour (percent).')
health2ModuleCam1HrMax = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 8, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2ModuleCam1HrMax.setStatus('mandatory')
if mibBuilder.loadTexts: health2ModuleCam1HrMax.setDescription('Maximum module-level CAM utilization over the last hour (percent).')
health2ModuleVccLatest = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 8, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2ModuleVccLatest.setStatus('mandatory')
if mibBuilder.loadTexts: health2ModuleVccLatest.setDescription('Average module-level VCC utilization over the latest sample period (percent).')
health2ModuleVcc1MinAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 8, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2ModuleVcc1MinAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2ModuleVcc1MinAvg.setDescription('Average module-level VCC utilization over the last minute (percent).')
health2ModuleVcc1HrAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 8, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2ModuleVcc1HrAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2ModuleVcc1HrAvg.setDescription('Average module-level VCC utilization over the last hour (percent).')
health2ModuleVcc1HrMax = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 8, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2ModuleVcc1HrMax.setStatus('mandatory')
if mibBuilder.loadTexts: health2ModuleVcc1HrMax.setDescription('Maximum module-level VCC utilization over the last hour (percent).')
health2PortTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 18, 9, 1), )
if mibBuilder.loadTexts: health2PortTable.setStatus('mandatory')
if mibBuilder.loadTexts: health2PortTable.setDescription('A list of Physical Port health instances.')
health2PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 18, 9, 1, 1), ).setIndexNames((0, "XYLAN-HEALTH-MIB", "health2PortSlot"), (0, "XYLAN-HEALTH-MIB", "health2PortIF"))
if mibBuilder.loadTexts: health2PortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: health2PortEntry.setDescription('A Physical Port health entry.')
health2PortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2PortSlot.setStatus('mandatory')
if mibBuilder.loadTexts: health2PortSlot.setDescription('The physical slot number for this port.')
health2PortIF = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2PortIF.setStatus('mandatory')
if mibBuilder.loadTexts: health2PortIF.setDescription('The on-board interface number.')
health2PortRxLatest = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2PortRxLatest.setStatus('mandatory')
if mibBuilder.loadTexts: health2PortRxLatest.setDescription('Average port-level input utilization over the latest sample period (percent).')
health2PortRx1MinAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2PortRx1MinAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2PortRx1MinAvg.setDescription('Average port-level input utilization over the last minute (percent).')
health2PortRx1HrAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2PortRx1HrAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2PortRx1HrAvg.setDescription('Average port-level input utilization over the last hour (percent).')
health2PortRx1HrMax = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2PortRx1HrMax.setStatus('mandatory')
if mibBuilder.loadTexts: health2PortRx1HrMax.setDescription('Maximum port-level input utilization over the last hour (percent).')
health2PortRxTxLatest = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2PortRxTxLatest.setStatus('mandatory')
if mibBuilder.loadTexts: health2PortRxTxLatest.setDescription('Average port-level i/o utilization over the latest sample period (percent).')
health2PortRxTx1MinAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2PortRxTx1MinAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2PortRxTx1MinAvg.setDescription('Average port-level i/o utilization over the last minute (percent).')
health2PortRxTx1HrAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 9, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2PortRxTx1HrAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2PortRxTx1HrAvg.setDescription('Average port-level i/o utilization over the last hour (percent).')
health2PortRxTx1HrMax = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 9, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2PortRxTx1HrMax.setStatus('mandatory')
if mibBuilder.loadTexts: health2PortRxTx1HrMax.setDescription('Maximum port-level i/o utilization over the last hour (percent).')
health2PortBackplaneLatest = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 9, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2PortBackplaneLatest.setStatus('mandatory')
if mibBuilder.loadTexts: health2PortBackplaneLatest.setDescription('Average port-level backplane utilization over the latest sample period (percent).')
health2PortBackplane1MinAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 9, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2PortBackplane1MinAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2PortBackplane1MinAvg.setDescription('Average port-level backplane utilization over the last minute (percent).')
health2PortBackplane1HrAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 9, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2PortBackplane1HrAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2PortBackplane1HrAvg.setDescription('Average port-level backplane utilization over the last hour (percent).')
health2PortBackplane1HrMax = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 9, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2PortBackplane1HrMax.setStatus('mandatory')
if mibBuilder.loadTexts: health2PortBackplane1HrMax.setDescription('Maximum port-level backplane utilization over the last hour (percent).')
health2PortVccLatest = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 9, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2PortVccLatest.setStatus('mandatory')
if mibBuilder.loadTexts: health2PortVccLatest.setDescription('Average port-level VCC utilization over the latest sample period (percent).')
health2PortVcc1MinAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 9, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2PortVcc1MinAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2PortVcc1MinAvg.setDescription('Average port-level VCC utilization over the last minute (percent).')
health2PortVcc1HrAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 9, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2PortVcc1HrAvg.setStatus('mandatory')
if mibBuilder.loadTexts: health2PortVcc1HrAvg.setDescription('Average port-level VCC utilization over the last hour (percent).')
health2PortVcc1HrMax = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 18, 9, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: health2PortVcc1HrMax.setStatus('mandatory')
if mibBuilder.loadTexts: health2PortVcc1HrMax.setDescription('Maximum port-level VCC utilization over the last hour (percent).')
mibBuilder.exportSymbols("XYLAN-HEALTH-MIB", healthDeviceInfo=healthDeviceInfo, healthModuleCamAvail=healthModuleCamAvail, healthThreshDevTrapData=healthThreshDevTrapData, healthDeviceHreCollisionFree=healthDeviceHreCollisionFree, healthPortRxData=healthPortRxData, healthDeviceRxTimeDelta=healthDeviceRxTimeDelta, healthThreshPortTrapData=healthThreshPortTrapData, health2PortSlot=health2PortSlot, healthDeviceMemoryFree=healthDeviceMemoryFree, healthDeviceVccTimeDelta=healthDeviceVccTimeDelta, healthDeviceMemoryData=healthDeviceMemoryData, healthThreshDeviceCamLimit=healthThreshDeviceCamLimit, health2DeviceRxLatest=health2DeviceRxLatest, healthThreshPortSummaryData=healthThreshPortSummaryData, healthThreshModTrapData=healthThreshModTrapData, healthPortRxTxTimeDelta=healthPortRxTxTimeDelta, healthDeviceCamTimeDelta=healthDeviceCamTimeDelta, healthDeviceHreCamTotal=healthDeviceHreCamTotal, health2DeviceHreCam1HrAvg=health2DeviceHreCam1HrAvg, health2DeviceRx1HrAvg=health2DeviceRx1HrAvg, healthThreshDeviceRxTxLimit=healthThreshDeviceRxTxLimit, healthThreshPortTrapCount=healthThreshPortTrapCount, healthPortUpDn=healthPortUpDn, health2PortBackplane1HrMax=health2PortBackplane1HrMax, healthDeviceMpmTxOverrunCount=healthDeviceMpmTxOverrunCount, health2ModuleBackplane1MinAvg=health2ModuleBackplane1MinAvg, healthDeviceMpmRxOverrunCount=healthDeviceMpmRxOverrunCount, health2DeviceHreCam1MinAvg=health2DeviceHreCam1MinAvg, health2DeviceHreCollision1HrMax=health2DeviceHreCollision1HrMax, health2PortRxTxLatest=health2PortRxTxLatest, healthPortBackplaneTimeDelta=healthPortBackplaneTimeDelta, health2ModuleRxTx1HrMax=health2ModuleRxTx1HrMax, healthDeviceHreCamFree=healthDeviceHreCamFree, health2DeviceRxTxLatest=health2DeviceRxTxLatest, healthModuleInfo=healthModuleInfo, health2DeviceCpuNum=health2DeviceCpuNum, health2DeviceRx1MinAvg=health2DeviceRx1MinAvg, healthDeviceTemp=healthDeviceTemp, healthThreshModuleSummaryData=healthThreshModuleSummaryData, health2PortEntry=health2PortEntry, health2PortIF=health2PortIF, health2DeviceVp1HrMax=health2DeviceVp1HrMax, healthThreshPortSummarySlot=healthThreshPortSummarySlot, health2DeviceVcc1HrMax=health2DeviceVcc1HrMax, health2DeviceHreCam1HrMax=health2DeviceHreCam1HrMax, health2DeviceCpuEntry=health2DeviceCpuEntry, health2ModuleBackplane1HrAvg=health2ModuleBackplane1HrAvg, health2PortInfo=health2PortInfo, healthPortVccData=healthPortVccData, healthModuleCamData=healthModuleCamData, healthThreshModuleSummarySlot=healthThreshModuleSummarySlot, health2DeviceRxTx1HrMax=health2DeviceRxTx1HrMax, health2ModuleCam1HrMax=health2ModuleCam1HrMax, healthPortTable=healthPortTable, healthModuleRxTimeDelta=healthModuleRxTimeDelta, health2ModuleVcc1HrAvg=health2ModuleVcc1HrAvg, health2DeviceMemory1HrAvg=health2DeviceMemory1HrAvg, healthModuleRxData=healthModuleRxData, healthPortBackplaneData=healthPortBackplaneData, healthDeviceCpuTimeDelta=healthDeviceCpuTimeDelta, healthDeviceVccData=healthDeviceVccData, healthModuleBackplaneTimeDelta=healthModuleBackplaneTimeDelta, health2DeviceVcc1HrAvg=health2DeviceVcc1HrAvg, health2ModuleTable=health2ModuleTable, health2DeviceVp1HrAvg=health2DeviceVp1HrAvg, healthDeviceMpmCamTotal=healthDeviceMpmCamTotal, health2ModuleRxTx1HrAvg=health2ModuleRxTx1HrAvg, healthThreshDeviceVccLimit=healthThreshDeviceVccLimit, healthThreshPortSummaryEntry=healthThreshPortSummaryEntry, healthSamplingInterval=healthSamplingInterval, healthPortSlot=healthPortSlot, healthThreshDeviceMemoryLimit=healthThreshDeviceMemoryLimit, healthDeviceMpmCamFree=healthDeviceMpmCamFree, health2PortRx1MinAvg=health2PortRx1MinAvg, healthModuleCamFree=healthModuleCamFree, health2ModuleVccLatest=health2ModuleVccLatest, health2DeviceMpmCam1HrAvg=health2DeviceMpmCam1HrAvg, health2PortVcc1HrMax=health2PortVcc1HrMax, healthThreshDeviceSummary=healthThreshDeviceSummary, health2ModuleVcc1MinAvg=health2ModuleVcc1MinAvg, health2DeviceTemperature1MinAvg=health2DeviceTemperature1MinAvg, healthDeviceMemoryTotal=healthDeviceMemoryTotal, health2ModuleRxTxLatest=health2ModuleRxTxLatest, healthModuleCamConfigured=healthModuleCamConfigured, health2ModuleInfo=health2ModuleInfo, health2ModuleEntry=health2ModuleEntry, healthDeviceMemoryTimeDelta=healthDeviceMemoryTimeDelta, health2DeviceTemperature1HrMax=health2DeviceTemperature1HrMax, healthDeviceBackplaneData=healthDeviceBackplaneData, health2ModuleRxTx1MinAvg=health2ModuleRxTx1MinAvg, healthThreshDeviceVpLimit=healthThreshDeviceVpLimit, health2DeviceRxTx1MinAvg=health2DeviceRxTx1MinAvg, healthModuleTable=healthModuleTable, healthPortInfo=healthPortInfo, healthThreshDeviceRxLimit=healthThreshDeviceRxLimit, healthPortVccTimeDelta=healthPortVccTimeDelta, health2ModuleSlot=health2ModuleSlot, health2DeviceBackplane1MinAvg=health2DeviceBackplane1MinAvg, healthPortRxTxData=healthPortRxTxData, health2DeviceMpmCam1HrMax=health2DeviceMpmCam1HrMax, healthModuleRxTxTimeDelta=healthModuleRxTxTimeDelta, health2DeviceHreCollision1MinAvg=health2DeviceHreCollision1MinAvg, health2DeviceInfo=health2DeviceInfo, healthPortEntry=healthPortEntry, health2DeviceCpu1HrAvg=health2DeviceCpu1HrAvg, healthDeviceTemperatureData=healthDeviceTemperatureData, healthThreshDeviceCpuLimit=healthThreshDeviceCpuLimit, healthThreshPortSummaryIF=healthThreshPortSummaryIF, healthDeviceTemperatureTimeDelta=healthDeviceTemperatureTimeDelta, health2DeviceCpu1MinAvg=health2DeviceCpu1MinAvg, healthPortMax=healthPortMax, health2PortRxTx1HrAvg=health2PortRxTx1HrAvg, health2ModuleRx1HrMax=health2ModuleRx1HrMax, health2PortRxTx1HrMax=health2PortRxTx1HrMax, health2DeviceBackplane1HrMax=health2DeviceBackplane1HrMax, health2DeviceMemoryLatest=health2DeviceMemoryLatest, health2DeviceVcc1MinAvg=health2DeviceVcc1MinAvg, health2PortRxTx1MinAvg=health2PortRxTx1MinAvg, health2PortBackplane1MinAvg=health2PortBackplane1MinAvg, health2ModuleRx1HrAvg=health2ModuleRx1HrAvg, healthDeviceCamData=healthDeviceCamData, HealthPortUpDownStatus=HealthPortUpDownStatus, healthModuleBackplaneData=healthModuleBackplaneData, health2DeviceVpLatest=health2DeviceVpLatest, health2PortTable=health2PortTable, health2ModuleCam1HrAvg=health2ModuleCam1HrAvg, healthModuleVccData=healthModuleVccData, health2DeviceHreCamLatest=health2DeviceHreCamLatest, health2DeviceMemory1MinAvg=health2DeviceMemory1MinAvg, health2DeviceVp1MinAvg=health2DeviceVp1MinAvg, healthDeviceNumCpus=healthDeviceNumCpus, healthModuleVccTimeDelta=healthModuleVccTimeDelta, health2DeviceTemperatureLatest=health2DeviceTemperatureLatest, healthThreshDeviceBackplaneLimit=healthThreshDeviceBackplaneLimit, healthDeviceIPRouteCacheFlushCount=healthDeviceIPRouteCacheFlushCount, health2DeviceTemperature1HrAvg=health2DeviceTemperature1HrAvg, healthModuleCamAvailNonIntern=healthModuleCamAvailNonIntern, health2ModuleCamLatest=health2ModuleCamLatest, health2PortVccLatest=health2PortVccLatest, healthDeviceBackplaneTimeDelta=healthDeviceBackplaneTimeDelta, healthThreshModuleSummaryTable=healthThreshModuleSummaryTable, healthSamplingReset=healthSamplingReset, health2DeviceHreCollision1HrAvg=health2DeviceHreCollision1HrAvg, healthDeviceIPXRouteCacheFlushCount=healthDeviceIPXRouteCacheFlushCount, healthThreshDeviceTemperatureLimit=healthThreshDeviceTemperatureLimit, healthModuleSlot=healthModuleSlot, healthDeviceRxTxData=healthDeviceRxTxData, health2DeviceBackplane1HrAvg=health2DeviceBackplane1HrAvg, health2DeviceVccLatest=health2DeviceVccLatest, health2DeviceCpu1HrMax=health2DeviceCpu1HrMax, healthThreshInfo=healthThreshInfo, healthDeviceVpData=healthDeviceVpData, health2PortVcc1MinAvg=health2PortVcc1MinAvg, healthDeviceCpuData=healthDeviceCpuData, healthThreshModuleSummaryEntry=healthThreshModuleSummaryEntry, healthModuleCamTimeDelta=healthModuleCamTimeDelta, healthDeviceVpTimeDelta=healthDeviceVpTimeDelta, healthModuleEntry=healthModuleEntry, healthModuleRxTxData=healthModuleRxTxData, health2ModuleBackplane1HrMax=health2ModuleBackplane1HrMax, health2ModuleRxLatest=health2ModuleRxLatest, healthThreshPortTrapSlot=healthThreshPortTrapSlot, healthDeviceHreCollisionTotal=healthDeviceHreCollisionTotal, healthGroupInfo=healthGroupInfo, healthDeviceRxData=healthDeviceRxData, health2DeviceMpmCam1MinAvg=health2DeviceMpmCam1MinAvg, health2DeviceMemory1HrMax=health2DeviceMemory1HrMax, health2ModuleBackplaneLatest=health2ModuleBackplaneLatest, healthPortRxTimeDelta=healthPortRxTimeDelta, health2ModuleCam1MinAvg=health2ModuleCam1MinAvg, health2ModuleRx1MinAvg=health2ModuleRx1MinAvg, health2PortVcc1HrAvg=health2PortVcc1HrAvg, health2DeviceHreCollisionLatest=health2DeviceHreCollisionLatest, healthPortIF=healthPortIF, health2DeviceRx1HrMax=health2DeviceRx1HrMax, health2DeviceBackplaneLatest=health2DeviceBackplaneLatest, healthThreshPortSummaryTable=healthThreshPortSummaryTable, health2PortRxLatest=health2PortRxLatest, health2PortRx1HrMax=health2PortRx1HrMax, health2ModuleVcc1HrMax=health2ModuleVcc1HrMax, healthControlInfo=healthControlInfo, health2DeviceRxTx1HrAvg=health2DeviceRxTx1HrAvg, health2PortBackplane1HrAvg=health2PortBackplane1HrAvg, healthDeviceRxTxTimeDelta=healthDeviceRxTxTimeDelta, health2PortRx1HrAvg=health2PortRx1HrAvg, health2PortBackplaneLatest=health2PortBackplaneLatest, health2DeviceNumCpus=health2DeviceNumCpus, health2DeviceCpuTable=health2DeviceCpuTable, healthModuleCamNumInstalled=healthModuleCamNumInstalled, health2DeviceCpuLatest=health2DeviceCpuLatest, healthThreshModTrapCount=healthThreshModTrapCount, health2DeviceMpmCamLatest=health2DeviceMpmCamLatest)
