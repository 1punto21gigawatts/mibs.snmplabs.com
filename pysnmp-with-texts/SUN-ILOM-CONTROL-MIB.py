#
# PySNMP MIB module SUN-ILOM-CONTROL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SUN-ILOM-CONTROL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:12:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, ModuleIdentity, Bits, Integer32, NotificationType, Gauge32, Counter32, MibIdentifier, Unsigned32, enterprises, iso, Counter64, IpAddress, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "ModuleIdentity", "Bits", "Integer32", "NotificationType", "Gauge32", "Counter32", "MibIdentifier", "Unsigned32", "enterprises", "iso", "Counter64", "IpAddress", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TruthValue, RowStatus, DateAndTime, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "DateAndTime", "TextualConvention", "DisplayString")
sun = MibIdentifier((1, 3, 6, 1, 4, 1, 42))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2))
ilom = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175))
ilomCtrlMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 42, 2, 175, 102))
ilomCtrlMIB.setRevisions(('2010-06-11 00:00', '2010-06-08 00:00', '2009-03-30 00:00', '2009-03-03 00:00', '2008-05-15 00:00', '2008-04-11 00:00', '2007-02-20 00:00', '2006-12-15 00:00', '2005-12-19 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ilomCtrlMIB.setRevisionsDescriptions(("Add support for the SPARC diagnostic 'HW change' trigger", 'Add ActiveDirectory parameter ilomCtrlActiveDirStrictCredentialErrorEnabled', 'Add LdapSsl optional User Mapping parameters.', 'Add ActiveDirectory parameter ilomCtrlActiveDirExpSearchEnabled.', "Version 3.0 Released with ILOM version 3.0 Added alert event class/type filtering Added Telemetry Harness Daemon (THD) Added dns-locator objects and certificate params for ActiveDirectory Added ilomCtrlLdapSsl Unify POST knobs for Volume and Enterprise Products Added BackupAndRestore configuration XML file support Added DNS configuration support Added factory to ILOMCtrlResetToDefaultsAction Added 'other' values to several TCs Added ilomCtrlSPARCHostHypervisorVersion Added ilomCtrlSPARCHostSysFwVersion Added ilomCtrlSPARCHostSendBreakAction Added sideband management support", 'Add destinationport for use with trap type alerts. Remove range from ilomCtrlEventLogRecordID.', 'Version 2.0', 'Version: 1.1 Released with ILOM version 1.1.5', 'Version: 0.7 Initial Release',))
if mibBuilder.loadTexts: ilomCtrlMIB.setLastUpdated('201006110000Z')
if mibBuilder.loadTexts: ilomCtrlMIB.setOrganization('Oracle Corporation')
if mibBuilder.loadTexts: ilomCtrlMIB.setContactInfo('Oracle Corporation 500 Oracle Parkway Redwood Shores, CA 95065 U.S.A. http://www.oracle.com')
if mibBuilder.loadTexts: ilomCtrlMIB.setDescription('SUN-ILOM-CONTROL-MIB.mib Version 3.0 Copyright (c) 2005, 2010, Oracle and/or its affiliates. All rights reserved. This MIB controls all Sun Integrated Lights Out Management devices.')
ilomCtrlClients = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1))
ilomCtrlServices = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 2))
ilomCtrlNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 3))
ilomCtrlUsers = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 4))
ilomCtrlSessions = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 5))
ilomCtrlFirmwareMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 6))
ilomCtrlLogs = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 7))
ilomCtrlAlerts = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 8))
ilomCtrlClock = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 9))
ilomCtrlSerial = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 10))
ilomCtrlPowerReset = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 11))
ilomCtrlRedundancy = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 12))
ilomCtrlPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 13))
ilomCtrlConfigMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 14))
ilomCtrlSPARC = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15))
ilomCtrlIdentification = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 16))
ilomCtrlThd = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 17))
ilomCtrlConformances = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 18))
ilomCtrlNtp = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 1))
ilomCtrlLdap = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 2))
ilomCtrlRadius = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 3))
ilomCtrlRemoteSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 4))
ilomCtrlActiveDirectory = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5))
ilomCtrlSMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 6))
ilomCtrlLdapSsl = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7))
ilomCtrlDNS = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 8))
ilomCtrlHttp = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 2, 1))
ilomCtrlHttps = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 2, 2))
ilomCtrlSsh = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 2, 3))
ilomCtrlSingleSignon = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 2, 4))
ilomCtrlEventLog = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 7, 1))
ilomCtrlPowerControl = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 11, 1))
ilomCtrlResetControl = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 11, 2))
ilomCtrlBackupAndRestore = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 14, 2))
ilomCtrlSPARCDiags = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15, 1))
ilomCtrlSPARCHostControl = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15, 2))
ilomCtrlSPARCBootMode = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15, 3))
ilomCtrlSPARCKeySwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15, 4))
ilomCtrlCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 18, 1))
ilomCtrlGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 18, 2))
class ILOMCtrlTargetIndex(TextualConvention, OctetString):
    description = 'A string that is short enough to be used properly as an index without overflowing the maximum number of subOIDs.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 110)

class ILOMCtrlModTargetIndex(TextualConvention, OctetString):
    description = 'A string that is short enough to be used properly along with ILOMCtrlInstanceTargetIndex as a pair of indexes without overflowing the maximum number of subOIDs.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 12)

class ILOMCtrlInstanceTargetIndex(TextualConvention, OctetString):
    description = 'A string that is short enough to be used properly along with ILOMCtrlModTargetIndex as a pair of indexes without overflowing the maximum number of subOIDs.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 100)

class ILOMCtrlSessionsConnectionType(TextualConvention, Integer32):
    description = 'An enumerated value which describes possible connection types by which a user can be log in.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("shell", 1), ("web", 2), ("other", 3), ("snmp", 4))

class ILOMCtrlLocalUserUsername(TextualConvention, OctetString):
    description = "A local user username. This must start with an alphabetical letter and may contain alphabetical letters, digits, hyphens and underscores. This can not be 'password'. This can not contain spaces."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 16)

class ILOMCtrlLocalUserPassword(TextualConvention, OctetString):
    description = 'A local user password.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 16)

class ILOMCtrlUserRole(TextualConvention, Integer32):
    description = 'An enumerated value which describes possible privilege levels (also known as roles) a user can have. ***NOTE: this textual-convention is deprecated and replaced by ILOMCtrlUserRoles.'
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("administrator", 1), ("operator", 2), ("none", 3), ("other", 4))

class ILOMCtrlUserRoles(TextualConvention, OctetString):
    description = "A set of role-IDs which describe the possible privilege levels (also known as roles) for a user. This property supports the legacy roles of 'Administrator' or 'Operator', or any of the individual role ID combinations of 'a', 'u', 'c', 'r', 'o' and 's' (like 'aucro') where a-admin, u-user, c-console, r-reset, s-service and o-readOnly."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 13)

class ILOMCtrlLocalUserAuthCLIMode(TextualConvention, Integer32):
    description = "An enumerated value which describes the possible CLI modes. The 'default' mode corresponds to the ILOM DMTF CLP. The 'alom' mode corresponds to the ALOM CMT."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("default", 1), ("alom", 2))

class ILOMCtrlPowerAction(TextualConvention, Integer32):
    description = 'An enumerated value which describes possible actions that can applied to a power control target.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("powerOn", 1), ("powerOff", 2), ("powerCycle", 3), ("powerSoft", 4))

class ILOMCtrlResetAction(TextualConvention, Integer32):
    description = 'An enumerated value which describes possible actions that can applied to a reset control target.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("reset", 1), ("resetNonMaskableInterrupt", 2), ("force", 3))

class ILOMCtrlNetworkIpDiscovery(TextualConvention, Integer32):
    description = 'An enumerated value which determines whether the IP settings should static or dynamic (DHCP).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("static", 1), ("dynamic", 2), ("other", 3))

class ILOMCtrlEventLogType(TextualConvention, Integer32):
    description = 'An enumerated value which describes the possible event log type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("log", 1), ("action", 2), ("fault", 3), ("state", 4), ("repair", 5), ("other", 6))

class ILOMCtrlEventLogClass(TextualConvention, Integer32):
    description = 'An enumerated value which describes the possible event log class.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("audit", 1), ("ipmi", 2), ("chassis", 3), ("fma", 4), ("system", 5), ("pcm", 6), ("other", 7))

class ILOMCtrlEventSeverity(TextualConvention, Integer32):
    description = 'An enumerated value which describes the possible event severities.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("disable", 1), ("critical", 2), ("major", 3), ("minor", 4), ("down", 5), ("other", 6))

class ILOMCtrlAlertType(TextualConvention, Integer32):
    description = 'An enumerated value which describes the possible alert notification types.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("email", 1), ("snmptrap", 2), ("ipmipet", 3))

class ILOMCtrlAlertSNMPVersion(TextualConvention, Integer32):
    description = 'An enumeration of the possible SNMP versions for traps generated by configuring alert rules.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("v1", 1), ("v2c", 2), ("v3", 3))

class ILOMCtrlBaudRate(TextualConvention, Integer32):
    description = 'An enumerated value which describes the possible baud rates for serial ports.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("baud9600", 1), ("baud19200", 2), ("baud38400", 3), ("baud57600", 4), ("baud115200", 5))

class ILOMCtrlFlowControl(TextualConvention, Integer32):
    description = 'An enumerated value which describes the possible flowcontrol settings for serial ports.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 1), ("hardware", 2), ("software", 3), ("none", 4))

class ILOMCtrlFirmwareUpdateStatus(TextualConvention, Integer32):
    description = 'An enumerated value which contains all the possible status values during a firmware update.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("tftpError", 1), ("imageVerificationFailed", 2), ("inProgress", 3), ("success", 4), ("other", 5))

class ILOMCtrlFirmwareUpdateAction(TextualConvention, Integer32):
    description = 'An enumerated value which contains all the possible firmware management actions.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("clearProperties", 1), ("initiate", 2))

class ILOMCtrlResetToDefaultsAction(TextualConvention, Integer32):
    description = 'An enumerated value indicating possible actions for resetting the SP back to factory defaults.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("all", 2), ("factory", 3))

class ILOMCtrlRedundancyStatus(TextualConvention, Integer32):
    description = 'An enumerated value which contains all the possible states a device can have in a redundant configuration.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("initializing", 1), ("active", 2), ("standby", 3), ("standAlone", 4), ("other", 5))

class ILOMCtrlRedundancyAction(TextualConvention, Integer32):
    description = 'Setting the redundancy action to initiateFailover will cause the current SC to switch mastership. i.e., it will initiate actions to become master if it is standby or to become standby if it is master. No action is taken if the SC is initializing or running in standalone mode.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ready", 1), ("initiateFailover", 2))

class ILOMCtrlSPARCDiagsLevel(TextualConvention, Integer32):
    description = "An enumerated value which contains all the possible states for embedded diagnostics for the host. The min value is the same as the 'enabled' value on some platforms and the max value is the same as the 'extended' value. ***NOTE: this textual-convention is deprecated and replaced with ILOMCtrlSPARCDiagsLevelAdv."
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("min", 1), ("max", 2), ("advsettings", 3))

class ILOMCtrlSPARCDiagsLevelAdv(TextualConvention, Integer32):
    description = "An enumerated value which contains all the possible states for embedded diagnostics for the host. The min value is the same as the 'enabled' value on some platforms and the max value is the same as the 'extended' value."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("init", 1), ("minimum", 2), ("normal", 3), ("maximum", 4), ("other", 5))

class ILOMCtrlSPARCDiagsTrigger(TextualConvention, Integer32):
    description = "An enumerated value which contains all the possible states for the trigger for embedded diagnostics on the host. x64 platforms with embedded diagnostics only support 'all-resets' and 'none' as possible states."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("allResets", 1), ("none", 2), ("userReset", 3), ("powerOnReset", 4), ("errorTest", 5), ("userResetandpowerOnReset", 6), ("userResetanderrorTest", 7), ("userTestandpowerOnReset", 8), ("hwChange", 9), ("hwChangeandpowerOnReset", 10), ("hwChangeanderrorTest", 11))

class ILOMCtrlSPARCDiagsMode(TextualConvention, Integer32):
    description = 'An enumerated value which contains all the possible OPS modes specified to POST.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("off", 1), ("normal", 2), ("service", 3), ("unknown", 4))

class ILOMCtrlSPARCDiagsVerbosity(TextualConvention, Integer32):
    description = 'An enumerated value which contains all the possible states for the verbosity level for embedded diagnostics on the host. ***NOTE: this textual-convention is deprecated and replaced with ILOMCtrlSPARCDiagsVerbosityAdv.'
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("min", 1), ("max", 2), ("advsettings", 3))

class ILOMCtrlSPARCDiagsVerbosityAdv(TextualConvention, Integer32):
    description = 'An enumerated value which contains all the possible states for the verbosity level for embedded diagnostics on the host.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("none", 1), ("minimum", 2), ("normal", 3), ("maximum", 4), ("debug", 5))

class ILOMCtrlSPARCHostAutoRestartPolicy(TextualConvention, Integer32):
    description = 'An enumerated value which contains all the possible actions to perform when the SP determines that the host has hung.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("reset", 2), ("dumpcore", 3))

class ILOMCtrlSPARCHostBootRestart(TextualConvention, Integer32):
    description = 'An enumerated value which contains all the possible actions to perform when the boot timer expires.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("none", 1), ("reset", 2))

class ILOMCtrlSPARCHostBootFailRecovery(TextualConvention, Integer32):
    description = 'An enumerated value which contains all the possible actions to perform when the max boot failures allowed is reached.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("powercycle", 2), ("poweroff", 3))

class ILOMCtrlSPARCHostSendBreakAction(TextualConvention, Integer32):
    description = 'Send Break Action to Host.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("nop", 1), ("break", 2), ("dumpcore", 3))

class ILOMCtrlSPARCHostIoReconfigurePolicy(TextualConvention, Integer32):
    description = 'An enumerated value which contains all the possible states for the host IO reconfiguration policy that is applied at next host power-on.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("false", 1), ("nextboot", 2), ("true", 3))

class ILOMCtrlSPARCBootModeState(TextualConvention, Integer32):
    description = 'An enumerated value which contains all the possible states for the boot mode state.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("normal", 1), ("resetNvram", 2))

class ILOMCtrlSPARCKeySwitchState(TextualConvention, Integer32):
    description = 'An enumerated value which contains all the possible states for the key switch.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("normal", 1), ("standby", 2), ("diag", 3), ("locked", 4))

class ILOMCtrlSPARCDiagsAction(TextualConvention, Integer32):
    description = 'An action to take to control POST running on the host.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("stop", 1), ("start", 2))

class ILOMCtrlSshKeyGenType(TextualConvention, Integer32):
    description = 'An enumerated value which contains all the possible key types for ssh.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("rsa", 2), ("dsa", 3))

class ILOMCtrlThdAction(TextualConvention, Integer32):
    description = 'An enumerated value which contains all the possible control actions for a THD module.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("suspend", 1), ("resume", 2), ("nop", 3))

class ILOMCtrlBackupAndRestoreAction(TextualConvention, Integer32):
    description = 'An action to start Backup or Restore operation.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("backup", 1), ("restore", 2))

ilomCtrlDeviceNTPServerOneIP = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlDeviceNTPServerOneIP.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlDeviceNTPServerOneIP.setDescription('The IP address of the first NTP server used by the device. This property is ignored if NTP is not enabled.')
ilomCtrlDeviceNTPServerTwoIP = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlDeviceNTPServerTwoIP.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlDeviceNTPServerTwoIP.setDescription('The IP address of the second NTP server used by the device. This property is ignored if NTP is not enabled.')
ilomCtrlLdapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlLdapEnabled.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapEnabled.setDescription('Specifies whether or not the LDAP client is enabled.')
ilomCtrlLdapServerIP = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlLdapServerIP.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapServerIP.setDescription('The IP address of the LDAP server used as a name service for user accounts.')
ilomCtrlLdapPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlLdapPortNumber.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapPortNumber.setDescription('Specifies the port number for the LDAP client.')
ilomCtrlLdapBindDn = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 2, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlLdapBindDn.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapBindDn.setDescription('The distinguished name (DN) for the read-only proxy user used to bind to the LDAP server. Example: cn=proxyuser,ou=people,dc=sun,dc=com')
ilomCtrlLdapBindPassword = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 2, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlLdapBindPassword.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapBindPassword.setDescription('The password of a read-only proxy user which is used to bind to the LDAP server. This property is essentially write-only. The write-only access level is no longer supported as of SNMPv2. This property must return a null value when read.')
ilomCtrlLdapSearchBase = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 2, 6), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlLdapSearchBase.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSearchBase.setDescription('A search base in the LDAP database below which to find users. Example: ou=people,dc=sun,dc=com')
ilomCtrlLdapDefaultRole = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 2, 7), ILOMCtrlUserRole()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlLdapDefaultRole.setStatus('deprecated')
if mibBuilder.loadTexts: ilomCtrlLdapDefaultRole.setDescription('Specifies the role that a user authenticated via LDAP should have. ***NOTE: this object is deprecated and replaced by ilomCtrlLdapDefaultRoles.')
ilomCtrlLdapDefaultRoles = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 2, 8), ILOMCtrlUserRoles()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlLdapDefaultRoles.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapDefaultRoles.setDescription("Specifies the role that a user authenticated via LDAP should have. This property supports the legacy roles of 'Administrator' or 'Operator', or any of the individual role ID combinations of 'a', 'u', 'c', 'r', 'o' and 's' (like 'aucro') where a-admin, u-user, c-console, r-reset, s-service and o-readOnly.")
ilomCtrlRadiusEnabled = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 3, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlRadiusEnabled.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlRadiusEnabled.setDescription('Specifies whether or not the RADIUS client is enabled.')
ilomCtrlRadiusServerIP = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlRadiusServerIP.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlRadiusServerIP.setDescription('The IP address of the RADIUS server used as a name service for user accounts.')
ilomCtrlRadiusPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlRadiusPortNumber.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlRadiusPortNumber.setDescription('Specifies the port number for the RADIUS client.')
ilomCtrlRadiusSecret = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 3, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlRadiusSecret.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlRadiusSecret.setDescription('The shared secret encryption key that is used to encypt traffic between the RADIUS client and server.')
ilomCtrlRadiusDefaultRole = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 3, 5), ILOMCtrlUserRole()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlRadiusDefaultRole.setStatus('deprecated')
if mibBuilder.loadTexts: ilomCtrlRadiusDefaultRole.setDescription('Specifies the role that a user authenticated via RADIUS should have. ***NOTE: this object is deprecated and replaced by ILOMCtrlUserRoles.')
ilomCtrlRadiusDefaultRoles = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 3, 6), ILOMCtrlUserRoles()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlRadiusDefaultRoles.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlRadiusDefaultRoles.setDescription("Specifies the role that a user authenticated via RADIUS should have. This property supports the legacy roles of 'Administrator' or 'Operator', or any of the individual role ID combinations of 'a', 'u', 'c', 'r', 'o' and 's' (like 'aucro') where a-admin, u-user, c-console, r-reset, s-service and o-readOnly.")
ilomCtrlRemoteSyslogDest1 = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 4, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlRemoteSyslogDest1.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlRemoteSyslogDest1.setDescription('The IP address of the first remote syslog destination (log host).')
ilomCtrlRemoteSyslogDest2 = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlRemoteSyslogDest2.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlRemoteSyslogDest2.setDescription('The IP address of the second remote syslog destination (log host).')
ilomCtrlHttpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 2, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlHttpEnabled.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlHttpEnabled.setDescription('Specifies whether or not the embedded web server should be running and listening on the HTTP port.')
ilomCtrlHttpPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlHttpPortNumber.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlHttpPortNumber.setDescription('Specifies the port number that the embedded web server should listen to for HTTP requests.')
ilomCtrlHttpSecureRedirect = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 2, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlHttpSecureRedirect.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlHttpSecureRedirect.setDescription('Specifies whether or not the embedded web server should redirect HTTP connections to HTTPS.')
ilomCtrlHttpsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 2, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlHttpsEnabled.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlHttpsEnabled.setDescription('Specifies whether or not the embedded web server should be running and listening on the HTTPS port.')
ilomCtrlHttpsPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 2, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlHttpsPortNumber.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlHttpsPortNumber.setDescription('Specifies the port number that the embedded web server should listen to for HTTPS requests.')
ilomCtrlSshRsaKeyFingerprint = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 2, 3, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlSshRsaKeyFingerprint.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSshRsaKeyFingerprint.setDescription('The fingerprint of the RSA key used for the SSH protocol.')
ilomCtrlSshRsaKeyLength = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 2, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlSshRsaKeyLength.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSshRsaKeyLength.setDescription('The length of the RSA key used for the SSH protocol.')
ilomCtrlSshDsaKeyFingerprint = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 2, 3, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlSshDsaKeyFingerprint.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSshDsaKeyFingerprint.setDescription('The fingerprint of the DSA key used for the SSH protocol.')
ilomCtrlSshDsaKeyLength = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 2, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlSshDsaKeyLength.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSshDsaKeyLength.setDescription('The length of the DSA key used for the SSH protocol.')
ilomCtrlSshGenerateNewKeyAction = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 2, 3, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlSshGenerateNewKeyAction.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSshGenerateNewKeyAction.setDescription('This property is used to initiate a new public key generation.')
ilomCtrlSshGenerateNewKeyType = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 2, 3, 6), ILOMCtrlSshKeyGenType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlSshGenerateNewKeyType.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSshGenerateNewKeyType.setDescription('SSH new key type. The possible type are rsa(2), dsa(3).')
ilomCtrlSshRestartSshdAction = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 2, 3, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlSshRestartSshdAction.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSshRestartSshdAction.setDescription('This property is used to initiate sshd restart.')
ilomCtrlSshEnabled = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 2, 3, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlSshEnabled.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSshEnabled.setDescription('Speicfies whether or not the SSHD is enabled.')
ilomCtrlSingleSignonEnabled = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 2, 4, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlSingleSignonEnabled.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSingleSignonEnabled.setDescription('Specified whether single sign-on authentication should be enabled on the device. Single sign-on allows tokens to be passed around so that it is not necessary to re-enter passwords between different applications. This would allow single sign-on between the SC web interface and the SP web interface, between the SC command-line interface and the SP command-line interface, and between the SC and SP interfaces and the Java Remote Console application.')
ilomCtrlNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 3, 1), )
if mibBuilder.loadTexts: ilomCtrlNetworkTable.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlNetworkTable.setDescription('A table listing all targets whose networks can be controlled.')
ilomCtrlNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 3, 1, 1), ).setIndexNames((0, "SUN-ILOM-CONTROL-MIB", "ilomCtrlNetworkTarget"))
if mibBuilder.loadTexts: ilomCtrlNetworkEntry.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlNetworkEntry.setDescription('An entry for a target which can be reset.')
ilomCtrlNetworkTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 3, 1, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: ilomCtrlNetworkTarget.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlNetworkTarget.setDescription("This is the nomenclature name for a target which has a configurable network. On some systems, there are multiple targets which have networks. On a traditional, non-blade system, this table will contain only one row for the network configuration of the service processor, which has a nomenclature name of '/SP'. On blade systems, this table will contain multiple rows. There will be a row for '/SC' which allows for configuration of the system controller's network settings. In addition, there will be rows for each blade's service processor. For example, a blade's service processor nomenclature takes the form of '/CH/BL0/SP', '/CH/BL1/SP' and so on. This will allow for the configuration of the service processors from the system controller. In the case of redundant system controllers, the floating master IP addressed can be configured using a name of /MASTERSC.")
ilomCtrlNetworkMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 3, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlNetworkMacAddress.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlNetworkMacAddress.setDescription('Specifies the MAC address of the service processor or system controller.')
ilomCtrlNetworkIpDiscovery = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 3, 1, 1, 3), ILOMCtrlNetworkIpDiscovery()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlNetworkIpDiscovery.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlNetworkIpDiscovery.setDescription('Specifies whether the current target is configured to have static IP settings or whether these settings are retrieved dynamically from DHCP.')
ilomCtrlNetworkIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 3, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlNetworkIpAddress.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlNetworkIpAddress.setDescription('Indicates the current IP address for the given target.')
ilomCtrlNetworkIpGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 3, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlNetworkIpGateway.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlNetworkIpGateway.setDescription('Indicates the current IP gateway for the given target.')
ilomCtrlNetworkIpNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 3, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlNetworkIpNetmask.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlNetworkIpNetmask.setDescription('Indicates the current IP netmask for the given target.')
ilomCtrlNetworkPendingIpDiscovery = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 3, 1, 1, 7), ILOMCtrlNetworkIpDiscovery()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlNetworkPendingIpDiscovery.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlNetworkPendingIpDiscovery.setDescription('This property is used to set the pending value for the mode of IP discovery for the given target. The possible values are static(1) or dynamic(2). Static values can be specified by setting the other pending properties in this table: ilomCtrlNetworkPendingIpAddress, ilomCtrlNetworkPendingIpGateway, and ilomCtrlNetworkPendingIpNetmask. If dynamic is specified, the other pending properties should not be set. This property does not take effect until the ilomCtrlNetworkCommitPending property is set to true for the given row.')
ilomCtrlNetworkPendingIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 3, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlNetworkPendingIpAddress.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlNetworkPendingIpAddress.setDescription('This property is used to set the pending IP address for the given target. This property does not take effect until the ilomCtrlNetworkCommitPending property is set to true for the given row.')
ilomCtrlNetworkPendingIpGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 3, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlNetworkPendingIpGateway.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlNetworkPendingIpGateway.setDescription('This property is used to set the pending IP gateway for the given target. This property does not take effect until the ilomCtrlNetworkCommitPending property is set to true for the given row.')
ilomCtrlNetworkPendingIpNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 3, 1, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlNetworkPendingIpNetmask.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlNetworkPendingIpNetmask.setDescription('This property is used to set the pending IP netmask for the given target. This property does not take effect until the ilomCtrlNetworkCommitPending property is set to true for the given row.')
ilomCtrlNetworkCommitPending = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 3, 1, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlNetworkCommitPending.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlNetworkCommitPending.setDescription('This property is used to commit pending properties for the given row. Settings this property to true(1) will cause the network to be reconfigured according to the values specified in the other pending properties.')
ilomCtrlNetworkOutOfBandMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 3, 1, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlNetworkOutOfBandMacAddress.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlNetworkOutOfBandMacAddress.setDescription('Specifies the MAC address of the out of band management interface (where applicable)')
ilomCtrlNetworkSidebandMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 3, 1, 1, 13), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlNetworkSidebandMacAddress.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlNetworkSidebandMacAddress.setDescription('Specifies the MAC address of the sideband management interface (where applicable)')
ilomCtrlNetworkPendingManagementPort = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 3, 1, 1, 14), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlNetworkPendingManagementPort.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlNetworkPendingManagementPort.setDescription('This property is used to set the pending management port for the giventarget. This property does not take effect until the ilomCtrlNetworkCommitPending property is set to true for the given row.')
ilomCtrlNetworkManagementPort = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 3, 1, 1, 15), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlNetworkManagementPort.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlNetworkManagementPort.setDescription('Indicates the current managment port for the given target')
ilomCtrlNetworkDHCPServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 3, 1, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlNetworkDHCPServerAddr.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlNetworkDHCPServerAddr.setDescription('The address of the DHCP server for this row.')
ilomCtrlNetworkState = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 3, 1, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlNetworkState.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlNetworkState.setDescription('Specifies whether or not the row is enabled.')
ilomCtrlLocalUserAuthTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 4, 1), )
if mibBuilder.loadTexts: ilomCtrlLocalUserAuthTable.setStatus('deprecated')
if mibBuilder.loadTexts: ilomCtrlLocalUserAuthTable.setDescription('This table provides a listing of the current local users on a system along with their password state. ***NOTE: this table is deprecated and replaced with ilomCtrlLocalUserTable.')
ilomCtrlLocalUserAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 4, 1, 1), ).setIndexNames((0, "SUN-ILOM-CONTROL-MIB", "ilomCtrlLocalUserAuthUsername"))
if mibBuilder.loadTexts: ilomCtrlLocalUserAuthEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ilomCtrlLocalUserAuthEntry.setDescription('An entry containing objects for a local user in the database. ***NOTE: this object is deprecated and replaced with ilomCtrlLocalUserEntry.')
ilomCtrlLocalUserAuthUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 4, 1, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: ilomCtrlLocalUserAuthUsername.setStatus('deprecated')
if mibBuilder.loadTexts: ilomCtrlLocalUserAuthUsername.setDescription('The username of a local user on the device. ***NOTE: this object is deprecated and replaced with ilomCtrlLocalUserUsername.')
ilomCtrlLocalUserAuthPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 4, 1, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ilomCtrlLocalUserAuthPassword.setStatus('deprecated')
if mibBuilder.loadTexts: ilomCtrlLocalUserAuthPassword.setDescription('The password of a local user on the device. This property is essentially write-only. The write-only access level is no longer supported as of SNMPv2. This property must return a null value when read. ***NOTE: this object is deprecated and replaced with ilomCtrlLocalUserPassword.')
ilomCtrlLocalUserAuthRole = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 4, 1, 1, 3), ILOMCtrlUserRole()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlLocalUserAuthRole.setStatus('deprecated')
if mibBuilder.loadTexts: ilomCtrlLocalUserAuthRole.setDescription("Specifies whether a user's password is assigned or unassigned. ***NOTE: this object is deprecated and replaced with ilomCtrlLocalUserRoles.")
ilomCtrlLocalUserAuthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 4, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ilomCtrlLocalUserAuthRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: ilomCtrlLocalUserAuthRowStatus.setDescription('This object is used to create a new row or to delete an existing row in the table. This property can be set to either createAndWait(5) or destroy(6), to create and remove a user respectively. ***NOTE: this object is deprecated and replaced with ilomCtrlLocalUserRowStatus.')
ilomCtrlLocalUserAuthCLIMode = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 4, 1, 1, 5), ILOMCtrlLocalUserAuthCLIMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlLocalUserAuthCLIMode.setStatus('deprecated')
if mibBuilder.loadTexts: ilomCtrlLocalUserAuthCLIMode.setDescription("Allows the CLI mode to be configured on a per-user basis. The CLI mode determines which shell the user will interact with. If the 'default' mode is select, the user will see the DMTF CLP after logging in via ssh or the console. If the 'alom' mode is selected, the user will see the ALOM CMT shell after logging in via ssh or the console. ***NOTE: this object is deprecated and replaced with ilomCtrlLocalUserCLIMode.")
ilomCtrlLocalUserTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 4, 2), )
if mibBuilder.loadTexts: ilomCtrlLocalUserTable.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLocalUserTable.setDescription('This table provides a listing of the current local users on a system along with their password state.')
ilomCtrlLocalUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 4, 2, 1), ).setIndexNames((0, "SUN-ILOM-CONTROL-MIB", "ilomCtrlLocalUserUsername"))
if mibBuilder.loadTexts: ilomCtrlLocalUserEntry.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLocalUserEntry.setDescription('An entry containing objects for a local user in the database.')
ilomCtrlLocalUserUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 4, 2, 1, 1), ILOMCtrlLocalUserUsername())
if mibBuilder.loadTexts: ilomCtrlLocalUserUsername.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLocalUserUsername.setDescription('The username of a local user on the device.')
ilomCtrlLocalUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 4, 2, 1, 2), ILOMCtrlLocalUserPassword()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ilomCtrlLocalUserPassword.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLocalUserPassword.setDescription('The password of a local user on the device. This property is essentially write-only. The write-only access level is no longer supported as of SNMPv2. This property must return a null value when read.')
ilomCtrlLocalUserRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 4, 2, 1, 3), ILOMCtrlUserRoles()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlLocalUserRoles.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLocalUserRoles.setDescription("Specifies the role that is associated with a user. The roles can be assigned for the legacy roles of 'Administrator' or 'Operator', or any of the individual role IDs of 'a', 'u', 'c', 'r', 'o' and 's'. The role IDs can be joined together 'aucros' where a-admin, u-user, c-console, r-reset, s-service and o-readOnly.")
ilomCtrlLocalUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 4, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ilomCtrlLocalUserRowStatus.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLocalUserRowStatus.setDescription('This object is used to create a new row or to delete an existing row in the table. This property can be set to either createAndWait(5) or destroy(6), to create and remove a user respectively.')
ilomCtrlLocalUserCLIMode = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 4, 2, 1, 5), ILOMCtrlLocalUserAuthCLIMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlLocalUserCLIMode.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLocalUserCLIMode.setDescription("Allows the CLI mode to be configured on a per-user basis. The CLI mode determines which shell the user will interact with. If the 'default' mode is select, the user will see the DMTF CLP after logging in via ssh or the console. If the 'alom' mode is selected, the user will see the ALOM CMT shell after logging in via ssh or the console.")
ilomCtrlSessionsTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 5, 1), )
if mibBuilder.loadTexts: ilomCtrlSessionsTable.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSessionsTable.setDescription('A table listing the current user sessions.')
ilomCtrlSessionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 5, 1, 1), ).setIndexNames((0, "SUN-ILOM-CONTROL-MIB", "ilomCtrlSessionsId"))
if mibBuilder.loadTexts: ilomCtrlSessionsEntry.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSessionsEntry.setDescription('An entry for a current session.')
ilomCtrlSessionsId = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ilomCtrlSessionsId.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSessionsId.setDescription('The instance number of a given logged-in user. This property is necessary since the same user can be logged in multiple times.')
ilomCtrlSessionsUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 5, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlSessionsUsername.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSessionsUsername.setDescription('The username of the user associated with the session.')
ilomCtrlSessionsConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 5, 1, 1, 3), ILOMCtrlSessionsConnectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlSessionsConnectionType.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSessionsConnectionType.setDescription('The type of connection that the given user is using to access the device.')
ilomCtrlSessionsLoginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 5, 1, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlSessionsLoginTime.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSessionsLoginTime.setDescription('The date and time that the logged into the device.')
ilomCtrlFirmwareMgmtVersion = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 6, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlFirmwareMgmtVersion.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlFirmwareMgmtVersion.setDescription('The version of the current firmware image.')
ilomCtrlFirmwareBuildNumber = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlFirmwareBuildNumber.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlFirmwareBuildNumber.setDescription('The build number of the current firmware image.')
ilomCtrlFirmwareBuildDate = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 6, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlFirmwareBuildDate.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlFirmwareBuildDate.setDescription('The build date and time of the current firmware image.')
ilomCtrlFirmwareTFTPServerIP = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 6, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlFirmwareTFTPServerIP.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlFirmwareTFTPServerIP.setDescription('The IP address of the TFTP server which will be used to download the the firmware image.')
ilomCtrlFirmwareTFTPFileName = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 6, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlFirmwareTFTPFileName.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlFirmwareTFTPFileName.setDescription('The relative path of the new firmware image file on the TFTP server.')
ilomCtrlFirmwarePreserveConfig = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 6, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlFirmwarePreserveConfig.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlFirmwarePreserveConfig.setDescription('This property determines whether the previous configuration of the device should be preserved after a firmware update. The configuration data includes all users information, configuration of clients and services, and any logs. The default value of this property is true.')
ilomCtrlFirmwareMgmtStatus = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 6, 7), ILOMCtrlFirmwareUpdateStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlFirmwareMgmtStatus.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlFirmwareMgmtStatus.setDescription('This property indicates the status of a firmware update. If a TFTP error occurred while attempting to upload a new firmware image, the value of this property will be tftpError(1). If the image was uploaded correctly but it did not pass verification, the value of this property will be imageVerificationFailed(2). Otherwise, the status will indicate that the update is inProgress(3) or is a success(4). A firmware update could take as long as 20 minutes. During this time, no other operations should be performed on the device. Upon success, the device will be reset.')
ilomCtrlFirmwareMgmtAction = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 6, 8), ILOMCtrlFirmwareUpdateAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlFirmwareMgmtAction.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlFirmwareMgmtAction.setDescription('This property is used to initiate a firmware update using the values of the other firmware management properties as parameters. It can also clear the values of those parameters. To initiate a firmware update, set the value of this property to initate(2). To clear the values of the writeable firmware management properties, set this propery to clearProperties(1). Before initiating a firmware update, the ilomCtrlFirmwareTFTPServerIP, ilomCtrlFirmwareTFTPFileName, and ilomCtrlFirmwarePreserveConfig properties must be set. After intiating a firmware update, the ilomCtrlFirmwareMgmtStatus property can be used to determine if the operation was successful. This is effectively a write-only property.')
ilomCtrlFirmwareMgmtFilesystemVersion = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 6, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlFirmwareMgmtFilesystemVersion.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlFirmwareMgmtFilesystemVersion.setDescription('The version of the current file system.')
ilomCtrlFirmwareDelayBIOS = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 6, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlFirmwareDelayBIOS.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlFirmwareDelayBIOS.setDescription("On servers that support a BIOS, this property is used to postpone the BIOS upgrade until the next server poweroff. Setting this property to 'false' will cause the server to be forced off if a BIOS upgrade is necessary. The default value of this property is false.")
ilomCtrlEventLogTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 7, 1, 1), )
if mibBuilder.loadTexts: ilomCtrlEventLogTable.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlEventLogTable.setDescription('This table provides a list of the current entries in the event log.')
ilomCtrlEventLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 7, 1, 1, 1), ).setIndexNames((0, "SUN-ILOM-CONTROL-MIB", "ilomCtrlEventLogRecordID"))
if mibBuilder.loadTexts: ilomCtrlEventLogEntry.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlEventLogEntry.setDescription('An entry in the event logs table.')
ilomCtrlEventLogRecordID = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 7, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ilomCtrlEventLogRecordID.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlEventLogRecordID.setDescription('The record number for a given the event log entry.')
ilomCtrlEventLogType = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 7, 1, 1, 1, 2), ILOMCtrlEventLogType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlEventLogType.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlEventLogType.setDescription('An integer representing the type of event.')
ilomCtrlEventLogTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 7, 1, 1, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlEventLogTimestamp.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlEventLogTimestamp.setDescription('The date and time that the event log entry was recorded.')
ilomCtrlEventLogClass = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 7, 1, 1, 1, 4), ILOMCtrlEventLogClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlEventLogClass.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlEventLogClass.setDescription('An integer representing the class of event.')
ilomCtrlEventLogSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 7, 1, 1, 1, 5), ILOMCtrlEventSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlEventLogSeverity.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlEventLogSeverity.setDescription('The event severity corresponding to the given log entry.')
ilomCtrlEventLogDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 7, 1, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlEventLogDescription.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlEventLogDescription.setDescription('A textual description of the event.')
ilomCtrlEventLogClear = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 7, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlEventLogClear.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlEventLogClear.setDescription("When set to 'true' clears the event log.")
ilomCtrlAlertsTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 8, 1), )
if mibBuilder.loadTexts: ilomCtrlAlertsTable.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlAlertsTable.setDescription('This table is used to view and add alert rules.')
ilomCtrlAlertsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 8, 1, 1), ).setIndexNames((0, "SUN-ILOM-CONTROL-MIB", "ilomCtrlAlertID"))
if mibBuilder.loadTexts: ilomCtrlAlertsEntry.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlAlertsEntry.setDescription('An entry containing objects for an alert rule.')
ilomCtrlAlertID = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ilomCtrlAlertID.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlAlertID.setDescription('An integer ID associated with a given alert rule.')
ilomCtrlAlertSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 8, 1, 1, 2), ILOMCtrlEventSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlAlertSeverity.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlAlertSeverity.setDescription('This property specifies the mininum event severity which should trigger an alert, for a given class.')
ilomCtrlAlertType = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 8, 1, 1, 3), ILOMCtrlAlertType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlAlertType.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlAlertType.setDescription('This property specifies the type of notification for a given alert. If the type is snmptrap(2) or ipmipet(3), the ilomCtrlAlertDestinationIP must be specified. If the type is email(1), the ilomCtrlAlertDestinationEmail must be specified.')
ilomCtrlAlertDestinationIP = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 8, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlAlertDestinationIP.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlAlertDestinationIP.setDescription('This property species the IP address to send alert notifications when the alert type is snmptrap(2), ipmipet(3), or remotesyslog(4).')
ilomCtrlAlertDestinationEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 8, 1, 1, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlAlertDestinationEmail.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlAlertDestinationEmail.setDescription('This property species the email address to send alert notifications when the alert type is email(1).')
ilomCtrlAlertSNMPVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 8, 1, 1, 6), ILOMCtrlAlertSNMPVersion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlAlertSNMPVersion.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlAlertSNMPVersion.setDescription('The version of SNMP trap that should be used for the given alert rule.')
ilomCtrlAlertSNMPCommunityOrUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 8, 1, 1, 7), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlAlertSNMPCommunityOrUsername.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlAlertSNMPCommunityOrUsername.setDescription("This string specifies the community string to be used when the ilomCtrlAlertSNMPVersion property is set to 'v1' or 'v2c'. Alternatively, this string specifies the SNMP username to use when the ilomCtrlAlertSNMPVersion is set to 'v3'.")
ilomCtrlAlertDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlAlertDestinationPort.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlAlertDestinationPort.setDescription('Destination port for SNMP traps, 0 maps to the default')
ilomCtrlAlertEmailEventClassFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 8, 1, 1, 9), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlAlertEmailEventClassFilter.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlAlertEmailEventClassFilter.setDescription("A class name or 'all' to filter emailed alerts on.")
ilomCtrlAlertEmailEventTypeFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 8, 1, 1, 10), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlAlertEmailEventTypeFilter.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlAlertEmailEventTypeFilter.setDescription("A type name or 'all' to filter emailed alerts on.")
ilomCtrlAlertEmailCustomSender = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 8, 1, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlAlertEmailCustomSender.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlAlertEmailCustomSender.setDescription("An optional format to identify the sender or the 'from' address. Customizing this string allows the user to specify the exact contents (up to 80 chars) of the 'from' field in the email message. Either one of the substitution strings '<IPADDRESS>' or '<HOSTNAME>' can be used as needed. By default, this parameter is an empty string, which results in the standard ILOM formatted originator for the alerts. e.g., ilom-sp@sp1302.dev.sun.com, sun-ilom@[<IPADDRESS>], or ilom-alert@<HOSTNAME>.abc.com")
ilomCtrlAlertEmailMessagePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 8, 1, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlAlertEmailMessagePrefix.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlAlertEmailMessagePrefix.setDescription('An optional string that can be added to the beginning of the message body. The prefix size can be up to 80 characters.')
ilomCtrlDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 9, 1), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlDateAndTime.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlDateAndTime.setDescription('The date and time of the device.')
ilomCtrlNTPEnabled = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 9, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlNTPEnabled.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlNTPEnabled.setDescription('Specifies whether or not Network Time Protocol is enabled.')
ilomCtrlTimezone = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 9, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlTimezone.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlTimezone.setDescription('The configured timezone string.')
ilomCtrlSerialInternalPortPresent = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 10, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlSerialInternalPortPresent.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSerialInternalPortPresent.setDescription('Indicates whether the given device has an internal serial port that is configurable. The internal serial port is the connection between the host server and the service processor that allows the SP to access the host serial console.')
ilomCtrlSerialInternalPortBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 10, 2), ILOMCtrlBaudRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlSerialInternalPortBaudRate.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSerialInternalPortBaudRate.setDescription('Specifies the current baud rate setting for the internal serial port. This is only readable/settable if ilomCtrlSerialInternalPortPresent is true.')
ilomCtrlSerialExternalPortPresent = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 10, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlSerialExternalPortPresent.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSerialExternalPortPresent.setDescription('Indicates whether the given device has an external serial port that is configurable.')
ilomCtrlSerialExternalPortBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 10, 4), ILOMCtrlBaudRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlSerialExternalPortBaudRate.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSerialExternalPortBaudRate.setDescription('Specifies the current baud rate setting for the external serial port. This is only readable/settable if ilomCtrlSerialExternalPortPresent is true.')
ilomCtrlSerialExternalPortFlowControl = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 10, 5), ILOMCtrlFlowControl()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlSerialExternalPortFlowControl.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSerialExternalPortFlowControl.setDescription('Specifies the current flowcontrol setting for the external serial port. This is only readable/settable if ilomCtrlSerialExternalPortPresent is true.')
ilomCtrlPowerTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 11, 1, 1), )
if mibBuilder.loadTexts: ilomCtrlPowerTable.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlPowerTable.setDescription('A table listing all targets whose power can be controlled.')
ilomCtrlPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 11, 1, 1, 1), ).setIndexNames((0, "SUN-ILOM-CONTROL-MIB", "ilomCtrlPowerTarget"))
if mibBuilder.loadTexts: ilomCtrlPowerEntry.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlPowerEntry.setDescription('An entry for a power-controllable target.')
ilomCtrlPowerTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 11, 1, 1, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: ilomCtrlPowerTarget.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlPowerTarget.setDescription("This is the nomenclature name for a target which supports power control. On some systems, there are multiple targets which support power control. On a traditional, non-blade system, this table will contain only one row. The nomenclature name for a traditional server is '/SYS'. On blade systems, this table will contain multiple rows. There will be a row for '/CH' which allows for power control of the entire chassis. In addition, there will be rows for each blade. Blade nomenclature takes the form of '/CH/BL0/SYS', '/CH/BL1/SYS', and so on.")
ilomCtrlPowerAction = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 11, 1, 1, 1, 2), ILOMCtrlPowerAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlPowerAction.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlPowerAction.setDescription('The action to apply to the given power control target. The possible actions are powerOn(1), powerOff(2), powerCycle(3), and powerSoft(4). When this value is read, it returns a null value.')
ilomCtrlResetTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 11, 2, 1), )
if mibBuilder.loadTexts: ilomCtrlResetTable.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlResetTable.setDescription('A table listing all targets which can be reset.')
ilomCtrlResetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 11, 2, 1, 1), ).setIndexNames((0, "SUN-ILOM-CONTROL-MIB", "ilomCtrlResetTarget"))
if mibBuilder.loadTexts: ilomCtrlResetEntry.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlResetEntry.setDescription('An entry for a target which can be reset.')
ilomCtrlResetTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 11, 2, 1, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: ilomCtrlResetTarget.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlResetTarget.setDescription("This is the nomenclature name for a target which supports reset capabilities. On some systems, there are multiple targets which support reset. On most systems, only system controllers and service processors support reset. On a traditional, non-blade system, this table will contain only one row, representing its service processor. The nomenclature name for a traditional server's service processor is '/SP'. On blade systems, this table will contain multiple rows. There will be a row for '/SC' which allows for reset of the system controller. In addition, there will be rows for each blade's service processor. For example, a blade's service processor nomenclature takes the form of '/CH/BL0/SP', '/CH/BL1/SP' and so on.")
ilomCtrlResetAction = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 11, 2, 1, 1, 2), ILOMCtrlResetAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlResetAction.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlResetAction.setDescription('The action to apply to the given reset control target. The possible actions are reset(1), which is a normal reset, resetNonMaskableInterrupt(2) which is a forced reset, and force(3) which is a forced reset for platforms that do not support NMI. When this value is read, it returns a null value.')
ilomCtrlRedundancyStatus = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 12, 1), ILOMCtrlRedundancyStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlRedundancyStatus.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlRedundancyStatus.setDescription('This property indicates the status of the device in a redundant configuration. It may be active(2) or standby(3) when configured as a redundant pair or standAlone(4) if it does not have a peer. In addition, it may be in a state called initializing(1) if it is in a transitional state.')
ilomCtrlRedundancyAction = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 12, 2), ILOMCtrlRedundancyAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlRedundancyAction.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlRedundancyAction.setDescription('This action is used to promote or demote this device from active or standy status.')
ilomCtrlRedundancyFRUName = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 12, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlRedundancyFRUName.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlRedundancyFRUName.setDescription('FRU Name of the CMM on which this agent is running.')
ilomCtrlPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 13, 1), )
if mibBuilder.loadTexts: ilomCtrlPolicyTable.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlPolicyTable.setDescription('A table listing all policies that can be administered.')
ilomCtrlPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 13, 1, 1), ).setIndexNames((0, "SUN-ILOM-CONTROL-MIB", "ilomCtrlPolicyId"))
if mibBuilder.loadTexts: ilomCtrlPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlPolicyEntry.setDescription('An entry for a policy which can be enabled or disabled.')
ilomCtrlPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ilomCtrlPolicyId.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlPolicyId.setDescription('An integer identifier of the policy.')
ilomCtrlPolicyShortStr = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 13, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlPolicyShortStr.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlPolicyShortStr.setDescription('A short description of the policy.')
ilomCtrlPolicyLongStr = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 13, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlPolicyLongStr.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlPolicyLongStr.setDescription('A verbose description of the policy.')
ilomCtrlPolicyEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 13, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlPolicyEnabled.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlPolicyEnabled.setDescription('Indicates the status of the policy.')
ilomCtrlResetToDefaultsAction = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 14, 1), ILOMCtrlResetToDefaultsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlResetToDefaultsAction.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlResetToDefaultsAction.setDescription('This property is used to initiate the action of restoring the configuration on the SP to the original factory default state.')
ilomCtrlBackupAndRestoreTargetURI = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 14, 2, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlBackupAndRestoreTargetURI.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlBackupAndRestoreTargetURI.setDescription('This property is used to set target destination of configuration xml file during backup and restore. The syntax is {protocol}://[user:passwword]@]host[/][path/][file] for example tftp://10.8.136.154/remotedir/config_backup.xml currently, the supported protocols are: scp, tftp. for certain protocol which needs password field, please use ilomCtrlBackupAndRestoreProtocolPassword to set password.')
ilomCtrlBackupAndRestorePassphrase = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 14, 2, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlBackupAndRestorePassphrase.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlBackupAndRestorePassphrase.setDescription('This property is used to set passphrase for encrypt/decrypt sensitive data during backup and restore. For snmpget, it returns null as value. ')
ilomCtrlBackupAndRestoreAction = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 14, 2, 3), ILOMCtrlBackupAndRestoreAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlBackupAndRestoreAction.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlBackupAndRestoreAction.setDescription('This property is used to issue a action, either backup or restore. ')
ilomCtrlBackupAndRestoreActionStatus = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 14, 2, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlBackupAndRestoreActionStatus.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlBackupAndRestoreActionStatus.setDescription('This property is used to monitor the current status of backup/restore. ')
ilomCtrlSPARCDiagsLevel = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15, 1, 1), ILOMCtrlSPARCDiagsLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlSPARCDiagsLevel.setStatus('deprecated')
if mibBuilder.loadTexts: ilomCtrlSPARCDiagsLevel.setDescription('Indicates the level of embedded diagnostics that should be run on the host during a boot. ***NOTE: this object is deprecated and replaced with these: ilomCtrlSPARCDiagsPowerOnLevel, ilomCtrlSPARCDiagsUserResetLevel, ilomCtrlSPARCDiagsErrorResetLevel While deprecated, this object will display advsettings(3), unless: - all 3 of the above are currently set to init(1), in which case this object will display min(1) - all 3 of the above are currently set to maximum(3), in which case this object will display max(2).')
ilomCtrlSPARCDiagsTrigger = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15, 1, 2), ILOMCtrlSPARCDiagsTrigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlSPARCDiagsTrigger.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSPARCDiagsTrigger.setDescription('Indicates the triggers of embedded diagnostics for the host.')
ilomCtrlSPARCDiagsVerbosity = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15, 1, 3), ILOMCtrlSPARCDiagsVerbosity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlSPARCDiagsVerbosity.setStatus('deprecated')
if mibBuilder.loadTexts: ilomCtrlSPARCDiagsVerbosity.setDescription('Indicates the verbosity level of embedded diagnostics that should be run on the host during a boot. ***NOTE: this object is deprecated and replaced with these: ilomCtrlSPARCDiagsPowerOnVerbosity, ilomCtrlSPARCDiagsUserResetVerbosity, ilomCtrlSPARCDiagsErrorResetVerbosity. While deprecated, this object will display advsettings(3), unless: - all 3 of the above are currently set to minimum(1), in which case this object will display min(1) - all 3 of the above are currently set to maximum(3), in which case this object will display max(2).')
ilomCtrlSPARCDiagsMode = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15, 1, 4), ILOMCtrlSPARCDiagsMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlSPARCDiagsMode.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSPARCDiagsMode.setDescription('Indicates the modes for POST. POST will stop at the mode specified by this property.')
ilomCtrlSPARCDiagsPowerOnLevel = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15, 1, 5), ILOMCtrlSPARCDiagsLevelAdv()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlSPARCDiagsPowerOnLevel.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSPARCDiagsPowerOnLevel.setDescription('Indicates the level of embedded diagnostics that should be run on the host during a boot for the power-on-reset trigger.')
ilomCtrlSPARCDiagsUserResetLevel = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15, 1, 6), ILOMCtrlSPARCDiagsLevelAdv()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlSPARCDiagsUserResetLevel.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSPARCDiagsUserResetLevel.setDescription('Indicates the level of embedded diagnostics that should be run on the host during a boot for the user-reset trigger.')
ilomCtrlSPARCDiagsErrorResetLevel = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15, 1, 7), ILOMCtrlSPARCDiagsLevelAdv()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlSPARCDiagsErrorResetLevel.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSPARCDiagsErrorResetLevel.setDescription('Indicates the level of embedded diagnostics that should be run on the host during a boot for the error-reset trigger.')
ilomCtrlSPARCDiagsPowerOnVerbosity = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15, 1, 8), ILOMCtrlSPARCDiagsVerbosityAdv()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlSPARCDiagsPowerOnVerbosity.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSPARCDiagsPowerOnVerbosity.setDescription('Indicates the verbosity level of embedded diagnostics that should be run on the host during a boot for power-on-reset trigger.')
ilomCtrlSPARCDiagsUserResetVerbosity = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15, 1, 9), ILOMCtrlSPARCDiagsVerbosityAdv()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlSPARCDiagsUserResetVerbosity.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSPARCDiagsUserResetVerbosity.setDescription('Indicates the verbosity level of embedded diagnostics that should be run on the host during a boot for user-reset trigger.')
ilomCtrlSPARCDiagsErrorResetVerbosity = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15, 1, 10), ILOMCtrlSPARCDiagsVerbosityAdv()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlSPARCDiagsErrorResetVerbosity.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSPARCDiagsErrorResetVerbosity.setDescription('Indicates the verbosity level of embedded diagnostics that should be run on the host during a boot for error-reset trigger.')
ilomCtrlSPARCDiagsStatus = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlSPARCDiagsStatus.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSPARCDiagsStatus.setDescription('Indicates the progress of POST diagnostics on the host, expressed as a percentage.')
ilomCtrlSPARCDiagsAction = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15, 1, 12), ILOMCtrlSPARCDiagsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlSPARCDiagsAction.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSPARCDiagsAction.setDescription('An action to take to control POST running on the host.')
ilomCtrlSPARCDiagsHwChangeLevel = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15, 1, 13), ILOMCtrlSPARCDiagsLevelAdv()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlSPARCDiagsHwChangeLevel.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSPARCDiagsHwChangeLevel.setDescription('Indicates the level of embedded diagnostics that should be run on the host during a boot for the hw-change trigger.')
ilomCtrlSPARCDiagsHwChangeVerbosity = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15, 1, 14), ILOMCtrlSPARCDiagsVerbosityAdv()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlSPARCDiagsHwChangeVerbosity.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSPARCDiagsHwChangeVerbosity.setDescription('Indicates the verbosity level of embedded diagnostics that should be run on the host during a boot for hw-change trigger.')
ilomCtrlSPARCHostMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15, 2, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlSPARCHostMACAddress.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSPARCHostMACAddress.setDescription('Displays the starting MAC address for the host.')
ilomCtrlSPARCHostOBPVersion = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15, 2, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlSPARCHostOBPVersion.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSPARCHostOBPVersion.setDescription('Displays the version string for OBP.')
ilomCtrlSPARCHostPOSTVersion = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15, 2, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlSPARCHostPOSTVersion.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSPARCHostPOSTVersion.setDescription('Displays the version string for POST.')
ilomCtrlSPARCHostAutoRunOnError = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15, 2, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlSPARCHostAutoRunOnError.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSPARCHostAutoRunOnError.setDescription('This option determines whether the host should continue to boot in the event of a non-fatal POST error.')
ilomCtrlSPARCHostPOSTStatus = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15, 2, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlSPARCHostPOSTStatus.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSPARCHostPOSTStatus.setDescription('A string that describes the status of POST. ***NOTE: OS Boot status is ilomCtrlSPARCHostOSBootStatus.')
ilomCtrlSPARCHostAutoRestartPolicy = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15, 2, 8), ILOMCtrlSPARCHostAutoRestartPolicy()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlSPARCHostAutoRestartPolicy.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSPARCHostAutoRestartPolicy.setDescription('This determines what action the SP should take when it discovers that the host is hung.')
ilomCtrlSPARCHostOSBootStatus = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15, 2, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlSPARCHostOSBootStatus.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSPARCHostOSBootStatus.setDescription('A string that describes the boot status of host OS.')
ilomCtrlSPARCHostBootTimeout = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 36000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlSPARCHostBootTimeout.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSPARCHostBootTimeout.setDescription('This is the boot timer time out value.')
ilomCtrlSPARCHostBootRestart = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15, 2, 11), ILOMCtrlSPARCHostBootRestart()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlSPARCHostBootRestart.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSPARCHostBootRestart.setDescription('This determines what action the SP should take when the boot timer expires.')
ilomCtrlSPARCHostMaxBootFail = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlSPARCHostMaxBootFail.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSPARCHostMaxBootFail.setDescription('This is the number of max boot failures allowed.')
ilomCtrlSPARCHostBootFailRecovery = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15, 2, 13), ILOMCtrlSPARCHostBootFailRecovery()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlSPARCHostBootFailRecovery.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSPARCHostBootFailRecovery.setDescription('This determines what action the SP should take when the max boot failures are reached.')
ilomCtrlSPARCHostHypervisorVersion = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15, 2, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlSPARCHostHypervisorVersion.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSPARCHostHypervisorVersion.setDescription('Displays the version string for Hypervisor.')
ilomCtrlSPARCHostSysFwVersion = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15, 2, 15), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlSPARCHostSysFwVersion.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSPARCHostSysFwVersion.setDescription('Displays the version string for SysFw.')
ilomCtrlSPARCHostSendBreakAction = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15, 2, 16), ILOMCtrlSPARCHostSendBreakAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlSPARCHostSendBreakAction.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSPARCHostSendBreakAction.setDescription('Send Break Action to Host')
ilomCtrlSPARCHostIoReconfigurePolicy = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15, 2, 17), ILOMCtrlSPARCHostIoReconfigurePolicy()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlSPARCHostIoReconfigurePolicy.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSPARCHostIoReconfigurePolicy.setDescription('This determines the host IO reconfiguration policy to apply on next host power-on.')
ilomCtrlSPARCHostGMVersion = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15, 2, 18), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlSPARCHostGMVersion.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSPARCHostGMVersion.setDescription('Displays the version string for Guest Manager.')
ilomCtrlSPARCBootModeState = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15, 3, 1), ILOMCtrlSPARCBootModeState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlSPARCBootModeState.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSPARCBootModeState.setDescription("Configures the boot mode state for the host. Specifying 'normal' means that the host retains current NVRAM variable settings. Specifying 'resetNvram' means that all NVRAM settings will be reset to their default values.")
ilomCtrlSPARCBootModeScript = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15, 3, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlSPARCBootModeScript.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSPARCBootModeScript.setDescription('Specifies the script to run when host boots.')
ilomCtrlSPARCBootModeExpires = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15, 3, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlSPARCBootModeExpires.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSPARCBootModeExpires.setDescription('Displays the date and time for when the boot mode configuration should expire.')
ilomCtrlSPARCBootModeLDOMConfig = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15, 3, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlSPARCBootModeLDOMConfig.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSPARCBootModeLDOMConfig.setDescription("This string refers to the config name value that must either be 'default' or match a named LDOM configuration downloaded to the service processor using the LDOM Manager.")
ilomCtrlSPARCKeySwitchState = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 15, 4, 1), ILOMCtrlSPARCKeySwitchState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlSPARCKeySwitchState.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSPARCKeySwitchState.setDescription('Specifies the current state of the virtual key switch.')
ilomCtrlSystemIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 16, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlSystemIdentifier.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSystemIdentifier.setDescription('This string, which is often the host name of the server associated with ILOM, will be sent out in the varbind for all traps that ILOM generates.')
ilomCtrlHostName = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 16, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlHostName.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlHostName.setDescription('This string is the hostname for ILOM.')
ilomCtrlActiveDirectoryEnabled = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlActiveDirectoryEnabled.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirectoryEnabled.setDescription('Specifies whether or not the Active Directory client is enabled.')
ilomCtrlActiveDirectoryIP = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlActiveDirectoryIP.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirectoryIP.setDescription('The IP address of the Active Directory server used as a name service for user accounts.')
ilomCtrlActiveDirectoryPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlActiveDirectoryPortNumber.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirectoryPortNumber.setDescription('Specifies the port number for the Active Directory client. Specifying 0 as the port means auto-select while specifying 1-65535 configures the actual port.')
ilomCtrlActiveDirectoryDefaultRole = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 4), ILOMCtrlUserRole()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlActiveDirectoryDefaultRole.setStatus('deprecated')
if mibBuilder.loadTexts: ilomCtrlActiveDirectoryDefaultRole.setDescription("Specifies the role that a user authenticated via Active Directory should have. Setting this property to 'Administrator' or 'Operator' will cause the Active Directory client to ignore the schema stored on the AD server. Setting this to 'none' clears the value and indicates that the native Active Directory schema should be used. ***NOTE: this object is deprecated and replaced with ilomCtrlActiveDirectoryDefaultRoles.")
ilomCtrlActiveDirectoryCertFileURI = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlActiveDirectoryCertFileURI.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirectoryCertFileURI.setDescription('This is the URI of a certificate file needed when Strict Cert Mode is enabled. Setting the URI causes the tranfer of the file, making the certificate available immediately for certificate authentication.')
ilomCtrlActiveDirectoryTimeout = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlActiveDirectoryTimeout.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirectoryTimeout.setDescription('Specifies the number of seconds to wait before timing out if the Active Directory Server is not responding.')
ilomCtrlActiveDirectoryStrictCertEnabled = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlActiveDirectoryStrictCertEnabled.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirectoryStrictCertEnabled.setDescription('Specifies whether or not the Strict Cert Mode is enabled for the Active Directory Client. If enabled, the Active Directory certificate must be uploaded to the SP so that certificate validation can be performed when communicating with the Active Directory server.')
ilomCtrlActiveDirectoryCertFileStatus = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlActiveDirectoryCertFileStatus.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirectoryCertFileStatus.setDescription('A string indicating the status of the certificate file. This is useful in determining whether a certificate file is present or not.')
ilomCtrlActiveDirUserDomainTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 9), )
if mibBuilder.loadTexts: ilomCtrlActiveDirUserDomainTable.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirUserDomainTable.setDescription('This table is used to configure domain information required for configuring the Active Directory client.')
ilomCtrlActiveDirUserDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 9, 1), ).setIndexNames((0, "SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirUserDomainId"))
if mibBuilder.loadTexts: ilomCtrlActiveDirUserDomainEntry.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirUserDomainEntry.setDescription('An entry for an Active Directory user domain.')
ilomCtrlActiveDirUserDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: ilomCtrlActiveDirUserDomainId.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirUserDomainId.setDescription('An integer identifier of the Active Directory domain.')
ilomCtrlActiveDirUserDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 9, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlActiveDirUserDomain.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirUserDomain.setDescription("This string should match exactly with an authentication domain on the Active Directory server. This string should contain a substitution string '<USERNAME>' which will be replaced with the user's login name during authentication. Either the principle or distinguished name format is allowed.")
ilomCtrlActiveDirAdminGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 10), )
if mibBuilder.loadTexts: ilomCtrlActiveDirAdminGroupsTable.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirAdminGroupsTable.setDescription('This table is used to configure admin group information required for configuring the Active Directory client.')
ilomCtrlActiveDirAdminGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 10, 1), ).setIndexNames((0, "SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirAdminGroupId"))
if mibBuilder.loadTexts: ilomCtrlActiveDirAdminGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirAdminGroupsEntry.setDescription('An entry for an Active Directory admin group.')
ilomCtrlActiveDirAdminGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: ilomCtrlActiveDirAdminGroupId.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirAdminGroupId.setDescription('An integer identifier of the Active Directory admin group entry.')
ilomCtrlActiveDirAdminGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 10, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlActiveDirAdminGroupName.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirAdminGroupName.setDescription('This string should contain a distinguished name that exactly matches one of the group names on the ActiveDirectory server. Any user belonging to one of these groups in this table will be assigned the ILOM role of Administrator.')
ilomCtrlActiveDirOperatorGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 11), )
if mibBuilder.loadTexts: ilomCtrlActiveDirOperatorGroupsTable.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirOperatorGroupsTable.setDescription('This table is used to configure operator group information required for configuring the Active Directory client.')
ilomCtrlActiveDirOperatorGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 11, 1), ).setIndexNames((0, "SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirOperatorGroupId"))
if mibBuilder.loadTexts: ilomCtrlActiveDirOperatorGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirOperatorGroupsEntry.setDescription('An entry for an Active Directory operator group.')
ilomCtrlActiveDirOperatorGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: ilomCtrlActiveDirOperatorGroupId.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirOperatorGroupId.setDescription('An integer identifier of the Active Directory operator group entry.')
ilomCtrlActiveDirOperatorGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 11, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlActiveDirOperatorGroupName.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirOperatorGroupName.setDescription('This string should contain a distinguished name that exactly matches one of the group names on the ActiveDirectory server. Any user belonging to one of these groups in this table will be assigned the ILOM role of Operator.')
ilomCtrlActiveDirAlternateServerTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 12), )
if mibBuilder.loadTexts: ilomCtrlActiveDirAlternateServerTable.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirAlternateServerTable.setDescription('This table is used to view and configure alternate server information for the Active Directory client.')
ilomCtrlActiveDirAlternateServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 12, 1), ).setIndexNames((0, "SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirAlternateServerId"))
if mibBuilder.loadTexts: ilomCtrlActiveDirAlternateServerEntry.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirAlternateServerEntry.setDescription('An entry for an Active Directory alternate server.')
ilomCtrlActiveDirAlternateServerId = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: ilomCtrlActiveDirAlternateServerId.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirAlternateServerId.setDescription('An integer identifier of the Active Directory alternate server table.')
ilomCtrlActiveDirAlternateServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 12, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlActiveDirAlternateServerIp.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirAlternateServerIp.setDescription('The IP address of the Active Directory alternate server used as a name service for user accounts.')
ilomCtrlActiveDirAlternateServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlActiveDirAlternateServerPort.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirAlternateServerPort.setDescription('Specifies the port number for the Active Directory alternate server. Specifying 0 as the port indicates that auto-select will use the well known port number. Specifying 1-65535 is used to explicitly set the port number.')
ilomCtrlActiveDirAlternateServerCertStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 12, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlActiveDirAlternateServerCertStatus.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirAlternateServerCertStatus.setDescription('A string indicating the status of the certificate file. This is useful in determining whether a certificate file is present or not.')
ilomCtrlActiveDirAlternateServerCertURI = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 12, 1, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlActiveDirAlternateServerCertURI.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirAlternateServerCertURI.setDescription("This is the URI of a certificate file needed when Strict Cert Mode is enabled. Setting the URI causes the tranfer of the file, making the certificate available immediately for certificate authentication. Additionally, either 'remove' or 'restore' are supported for direct certificate manipulation.")
ilomCtrlActiveDirAlternateServerCertClear = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 12, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlActiveDirAlternateServerCertClear.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirAlternateServerCertClear.setDescription('A variable that will clear the certificate info associated with the server when it is set to true.')
ilomCtrlActiveDirAlternateServerCertVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 12, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlActiveDirAlternateServerCertVersion.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirAlternateServerCertVersion.setDescription('A string indicating the certificate version of the alternate server certificate file.')
ilomCtrlActiveDirAlternateServerCertSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 12, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlActiveDirAlternateServerCertSerialNo.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirAlternateServerCertSerialNo.setDescription('A string showing the serial number of the alternate server certificate file.')
ilomCtrlActiveDirAlternateServerCertIssuer = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 12, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlActiveDirAlternateServerCertIssuer.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirAlternateServerCertIssuer.setDescription('A string showing the issuer of the alternate server certificate file.')
ilomCtrlActiveDirAlternateServerCertSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 12, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlActiveDirAlternateServerCertSubject.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirAlternateServerCertSubject.setDescription('A string showing the subject of the alternate server certificate file.')
ilomCtrlActiveDirAlternateServerCertValidBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 12, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlActiveDirAlternateServerCertValidBegin.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirAlternateServerCertValidBegin.setDescription('A string showing the valid start date of the alternate server certificate file.')
ilomCtrlActiveDirAlternateServerCertValidEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 12, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlActiveDirAlternateServerCertValidEnd.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirAlternateServerCertValidEnd.setDescription('A string showing the valid end date of the alternate server certificate file.')
ilomCtrlActiveDirectoryLogDetail = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("high", 2), ("medium", 3), ("low", 4), ("trace", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlActiveDirectoryLogDetail.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirectoryLogDetail.setDescription("Controls the amount of messages sent to the event log. The high priority has the least number of messages going to the log, while the lowest priority 'trace' has the most messages logged. When this object is set to 'none', no messages are logged.")
ilomCtrlActiveDirectoryDefaultRoles = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 14), ILOMCtrlUserRoles()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlActiveDirectoryDefaultRoles.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirectoryDefaultRoles.setDescription("Specifies the role that a user authenticated via Active Directory should have. Setting this property to legacy roles of 'Administrator' or 'Operator', or any of the individual role IDs of 'a', 'u', 'c', 'r', 'o' and 's' will cause the Active Directory client to ignore the schema stored on the AD server. Setting this to 'none' clears the value and indicates that the native Active Directory schema should be used. The role IDs can be joined together 'aucros' where a-admin, u-user, c-console, r-reset, s-service and o-readOnly.")
ilomCtrlActiveDirCustomGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 15), )
if mibBuilder.loadTexts: ilomCtrlActiveDirCustomGroupsTable.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirCustomGroupsTable.setDescription('This table is used to configure custom group information required for configuring the Active Directory client.')
ilomCtrlActiveDirCustomGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 15, 1), ).setIndexNames((0, "SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirCustomGroupId"))
if mibBuilder.loadTexts: ilomCtrlActiveDirCustomGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirCustomGroupsEntry.setDescription('An entry for an Active Directory custom group.')
ilomCtrlActiveDirCustomGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: ilomCtrlActiveDirCustomGroupId.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirCustomGroupId.setDescription('An integer identifier of the Active Directory custom group entry.')
ilomCtrlActiveDirCustomGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 15, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlActiveDirCustomGroupName.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirCustomGroupName.setDescription("This string should contain a distinguished name that exactly matches one of the group names on the ActiveDirectory server. Any user belonging to one of these groups in this table will be assigned the ILOM role based on the entry's configuration for roles.")
ilomCtrlActiveDirCustomGroupRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 15, 1, 3), ILOMCtrlUserRoles()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlActiveDirCustomGroupRoles.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirCustomGroupRoles.setDescription("Specifies the role that a user authenticated via Active Directory should have. Setting this property to legacy roles of 'Administrator' or 'Operator', or any of the individual role IDs of 'a', 'u', 'c', 'r', 'o' and 's' will cause the Active Directory client to ignore the schema stored on the AD server. Setting this to 'none' clears the value and indicates that the native Active Directory schema should be used. The role IDs can be joined together 'aucros' where a-admin, u-user, c-console, r-reset, s-service and o-readOnly.")
ilomCtrlActiveDirectoryCertClear = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlActiveDirectoryCertClear.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirectoryCertClear.setDescription('A variable that will clear the certificate info associated with the server when it is set to true.')
ilomCtrlActiveDirectoryCertVersion = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlActiveDirectoryCertVersion.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirectoryCertVersion.setDescription('A string indicating the certificate version of the certificate file.')
ilomCtrlActiveDirectoryCertSerialNo = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlActiveDirectoryCertSerialNo.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirectoryCertSerialNo.setDescription('A string showing the serial number of the certificate file.')
ilomCtrlActiveDirectoryCertIssuer = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlActiveDirectoryCertIssuer.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirectoryCertIssuer.setDescription('A string showing the issuer of the certificate file.')
ilomCtrlActiveDirectoryCertSubject = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlActiveDirectoryCertSubject.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirectoryCertSubject.setDescription('A string showing the subject of the certificate file.')
ilomCtrlActiveDirectoryCertValidBegin = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlActiveDirectoryCertValidBegin.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirectoryCertValidBegin.setDescription('A string showing the valid start date of the certificate file.')
ilomCtrlActiveDirectoryCertValidEnd = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlActiveDirectoryCertValidEnd.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirectoryCertValidEnd.setDescription('A string showing the valid end date of the certificate file.')
ilomCtrlActiveDirDnsLocatorEnabled = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlActiveDirDnsLocatorEnabled.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirDnsLocatorEnabled.setDescription('Specifies whether or not the Active Directory DNS Locator functionality is enabled.')
ilomCtrlActiveDirDnsLocatorQueryTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 24), )
if mibBuilder.loadTexts: ilomCtrlActiveDirDnsLocatorQueryTable.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirDnsLocatorQueryTable.setDescription('This table is used to configure DNS Locator search queries used to locate the Active Directory server.')
ilomCtrlActiveDirDnsLocatorQueryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 24, 1), ).setIndexNames((0, "SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirDnsLocatorQueryId"))
if mibBuilder.loadTexts: ilomCtrlActiveDirDnsLocatorQueryEntry.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirDnsLocatorQueryEntry.setDescription('An entry for an Active Directory DNS Locator search query.')
ilomCtrlActiveDirDnsLocatorQueryId = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: ilomCtrlActiveDirDnsLocatorQueryId.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirDnsLocatorQueryId.setDescription('An integer identifier of the Active Directory DNS Locator Query entry.')
ilomCtrlActiveDirDnsLocatorQueryService = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 24, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlActiveDirDnsLocatorQueryService.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirDnsLocatorQueryService.setDescription("This string should contain the service name that will be used to perform the DNS query. The name may contain '<DOMAIN>' as a substitution marker, being replaced by the domain information associated for the user at the time of authentication. Also, the optional '<PORT: >' (ie <PORT:636> for standard LDAP/SSL port 636) can be used to override any learned port information if necessary.")
ilomCtrlActiveDirExpSearchEnabled = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 25), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlActiveDirExpSearchEnabled.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirExpSearchEnabled.setDescription('Specifies whether or not the Active Directory expanded search query functionality is enabled.')
ilomCtrlActiveDirStrictCredentialErrorEnabled = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 5, 26), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlActiveDirStrictCredentialErrorEnabled.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlActiveDirStrictCredentialErrorEnabled.setDescription('Specifies whether or not user credential errors for Active Directory cause the user credentials to be completely errored out, or if the credential validation is attempted using any alternate server. When the parameter is true, the first user credential violation takes effect, but when the mode is false, the same user credentionals can be presented to other servers for authentication.')
ilomCtrlSMTPEnabled = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 6, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlSMTPEnabled.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSMTPEnabled.setDescription('Specifies whether or not the SMTP client is enabled.')
ilomCtrlSMTPServerIP = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 6, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlSMTPServerIP.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSMTPServerIP.setDescription('The IP address of the SMTP server used as a name service for user accounts.')
ilomCtrlSMTPPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlSMTPPortNumber.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSMTPPortNumber.setDescription('Specifies the port number for the SMTP client.')
ilomCtrlSMTPCustomSender = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 6, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlSMTPCustomSender.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlSMTPCustomSender.setDescription("An optional format to identify the sender or the 'from' address. Customizing this string allows the user to specify the exact contents (up to 80 chars) of the 'from' field in the email message. Either one of the substitution strings '<IPADDRESS>' or '<HOSTNAME>' can be used as needed. e.g., ilom-sp@sp1302.dev.sun.com, sun-ilom@[<IPADDRESS>], or ilom-alert@<HOSTNAME>.abc.com. By default, this parameter is an empty string. The 'from' field is formatted by either: 1) alert-rule custom-sender, 2) smtp custom-sender, or 3) the standard ILOM originator.")
ilomCtrlThdState = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 17, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlThdState.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlThdState.setDescription('The state of the THD daemon.')
ilomCtrlThdAction = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 17, 2), ILOMCtrlThdAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlThdAction.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlThdAction.setDescription('Control action for THD daemon, either suspend or resume.')
ilomCtrlThdModulesTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 17, 3), )
if mibBuilder.loadTexts: ilomCtrlThdModulesTable.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlThdModulesTable.setDescription('A table listing the currently loaded THD modules.')
ilomCtrlThdModulesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 17, 3, 1), ).setIndexNames((0, "SUN-ILOM-CONTROL-MIB", "ilomCtrlThdModuleName"))
if mibBuilder.loadTexts: ilomCtrlThdModulesEntry.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlThdModulesEntry.setDescription('An entry for a currently loaded THD module.')
ilomCtrlThdModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 17, 3, 1, 1), ILOMCtrlTargetIndex())
if mibBuilder.loadTexts: ilomCtrlThdModuleName.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlThdModuleName.setDescription('The name of the THD module.')
ilomCtrlThdModuleDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 17, 3, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlThdModuleDesc.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlThdModuleDesc.setDescription('The description of the THD module.')
ilomCtrlThdModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 17, 3, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlThdModuleState.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlThdModuleState.setDescription('The state of the THD module.')
ilomCtrlThdModuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 17, 3, 1, 4), ILOMCtrlThdAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlThdModuleAction.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlThdModuleAction.setDescription('The control action for the THD module.')
ilomCtrlThdInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 17, 4), )
if mibBuilder.loadTexts: ilomCtrlThdInstanceTable.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlThdInstanceTable.setDescription('A table listing instances of currently loaded THD modules.')
ilomCtrlThdInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 17, 4, 1), ).setIndexNames((0, "SUN-ILOM-CONTROL-MIB", "ilomCtrlThdModName"), (0, "SUN-ILOM-CONTROL-MIB", "ilomCtrlThdInstanceName"))
if mibBuilder.loadTexts: ilomCtrlThdInstanceEntry.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlThdInstanceEntry.setDescription('An entry for a currently loaded THD module.')
ilomCtrlThdModName = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 17, 4, 1, 1), ILOMCtrlModTargetIndex())
if mibBuilder.loadTexts: ilomCtrlThdModName.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlThdModName.setDescription('The name of the THD class of the instance.')
ilomCtrlThdInstanceName = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 17, 4, 1, 2), ILOMCtrlInstanceTargetIndex())
if mibBuilder.loadTexts: ilomCtrlThdInstanceName.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlThdInstanceName.setDescription('The name of the instance.')
ilomCtrlThdInstanceState = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 17, 4, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlThdInstanceState.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlThdInstanceState.setDescription('The state of the instance.')
ilomCtrlThdInstanceAction = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 17, 4, 1, 4), ILOMCtrlThdAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlThdInstanceAction.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlThdInstanceAction.setDescription('The control action for instance.')
ilomCtrlLdapSslGlobalObj = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 1))
ilomCtrlLdapSslEnabled = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlLdapSslEnabled.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslEnabled.setDescription('Specifies whether or not the LDAP/SSL client is enabled.')
ilomCtrlLdapSslIP = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlLdapSslIP.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslIP.setDescription('The IP address of the LDAP/SSL server used as a directory service for user accounts.')
ilomCtrlLdapSslPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlLdapSslPortNumber.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslPortNumber.setDescription('Specifies the port number for the LDAP/SSL client. Specifying 0 as the port means auto-select while specifying 1-65535 configures the actual port value.')
ilomCtrlLdapSslDefaultRole = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 1, 4), ILOMCtrlUserRole()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlLdapSslDefaultRole.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslDefaultRole.setDescription("Specifies the role that a user authenticated via LDAP/SSL should have. Setting this property to 'Administrator' or 'Operator' will cause the LDAP/SSL client to ignore the schema stored on the server. The user will be granted the corresponding access level. Setting this to an empty string, or 'none' clears the value and indicates that the native LDAP/SSL schema should be used.")
ilomCtrlLdapSslCertFileURI = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 1, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlLdapSslCertFileURI.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslCertFileURI.setDescription("The tftp URI of the LDAP/SSL server's certificate file that should be uploaded in order to perform certificate validation. Setting the URI causes the tranfer of the specified file, making the certificate available immediately for certificate authentication. The server certificate file is needed when Strict Cert Mode is enabled. Additionally, either 'remove' or 'restore' are supported for direct certificate manipulation.")
ilomCtrlLdapSslTimeout = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlLdapSslTimeout.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslTimeout.setDescription('Specifies the number of seconds to wait before timing out if the LDAP/SSL Server is not responding.')
ilomCtrlLdapSslStrictCertEnabled = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlLdapSslStrictCertEnabled.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslStrictCertEnabled.setDescription("Specifies whether or not the Strict Cert Mode is enabled for the LDAP/SSL Client. If enabled, the LDAP/SSL server's certificate must be uploaded to the SP so that certificate validation can be performed when communicating with the LDAP/SSL server.")
ilomCtrlLdapSslCertFileStatus = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlLdapSslCertFileStatus.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslCertFileStatus.setDescription('A string indicating the status of the certificate file. This is useful in determining whether a certificate file is present or not.')
ilomCtrlLdapSslLogDetail = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("high", 2), ("medium", 3), ("low", 4), ("trace", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlLdapSslLogDetail.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslLogDetail.setDescription("Controls the amount of messages sent to the event log. The high priority has the least number of messages going to the log, while the lowest priority 'trace' has the most messages logged. When this object is set to 'none', no messages are logged.")
ilomCtrlLdapSslDefaultRoles = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 1, 10), ILOMCtrlUserRoles()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlLdapSslDefaultRoles.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslDefaultRoles.setDescription("Specifies the role that a user authenticated via LDAP/SSL should have. Setting this property to legacy roles of 'Administrator' or 'Operator', or any of the individual role IDs of 'a', 'u', 'c', 'r', 'o' and 's' will cause the LDAP/SSL client to ignore the schema stored on the LDAP server. Setting this to 'none' clears the value and indicates that the native LDAP/SSL schema should be used. The role IDs can be joined together 'aucros' where a-admin, u-user, c-console, r-reset, s-service and o-readOnly.")
ilomCtrlLdapSslCertFileClear = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlLdapSslCertFileClear.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslCertFileClear.setDescription('A variable that will clear the certificate info associated with the server when it is set to true.')
ilomCtrlLdapSslCertFileVersion = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlLdapSslCertFileVersion.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslCertFileVersion.setDescription('A string indicating the certificate version of the certificate file.')
ilomCtrlLdapSslCertFileSerialNo = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlLdapSslCertFileSerialNo.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslCertFileSerialNo.setDescription('A string showing the serial number of the certificate file.')
ilomCtrlLdapSslCertFileIssuer = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlLdapSslCertFileIssuer.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslCertFileIssuer.setDescription('A string showing the issuer of the certificate file.')
ilomCtrlLdapSslCertFileSubject = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlLdapSslCertFileSubject.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslCertFileSubject.setDescription('A string showing the subject of the certificate file.')
ilomCtrlLdapSslCertFileValidBegin = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlLdapSslCertFileValidBegin.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslCertFileValidBegin.setDescription('A string showing the valid start date of the certificate file.')
ilomCtrlLdapSslCertFileValidEnd = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlLdapSslCertFileValidEnd.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslCertFileValidEnd.setDescription('A string showing the valid end date of the certificate file.')
ilomCtrlLdapSslOptUsrMappingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlLdapSslOptUsrMappingEnabled.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslOptUsrMappingEnabled.setDescription("Specifies whether or not the optional UserMapping feature is enabled. When this feature is enabled, a typical Manager style ldap bind is done first using the specified credentials for the bindDn and bindPw. Then, the user's login name is used as part of the search/filter criteria defined in the attribute-info to obtain the user's official Distinguished Name.")
ilomCtrlLdapSslOptUsrMappingAttrInfo = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 1, 19), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlLdapSslOptUsrMappingAttrInfo.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslOptUsrMappingAttrInfo.setDescription("The attribute information used to lookup the user login name to the user's Distinguished Name (DN). Typically, it looks very much like a standard LDAP query or filter. The <USERNAME> prefix will be replaced with the login name as part of the query eg: (&(objectclass=person)(uid=<USERNAME>)).")
ilomCtrlLdapSslOptUsrMappingBindDn = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 1, 20), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlLdapSslOptUsrMappingBindDn.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslOptUsrMappingBindDn.setDescription('The Distinguished Name used for the manager style ldap bind so that user lookups can be done.')
ilomCtrlLdapSslOptUsrMappingBindPw = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 1, 21), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlLdapSslOptUsrMappingBindPw.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslOptUsrMappingBindPw.setDescription('The password string used for the manager style ldap bind.')
ilomCtrlLdapSslOptUsrMappingSearchBase = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 1, 22), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlLdapSslOptUsrMappingSearchBase.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslOptUsrMappingSearchBase.setDescription('The search based used to attempt the user name look up as defined in the attribute information above.')
ilomCtrlLdapSslUserDomainTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 2), )
if mibBuilder.loadTexts: ilomCtrlLdapSslUserDomainTable.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslUserDomainTable.setDescription('This table is used to configure domain information required for configuring the LDAP/SSL client.')
ilomCtrlLdapSslUserDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 2, 1), ).setIndexNames((0, "SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslUserDomainId"))
if mibBuilder.loadTexts: ilomCtrlLdapSslUserDomainEntry.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslUserDomainEntry.setDescription('An entry for an LDAP/SSL user domain.')
ilomCtrlLdapSslUserDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: ilomCtrlLdapSslUserDomainId.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslUserDomainId.setDescription('An integer identifier of the LDAP/SSL domain.')
ilomCtrlLdapSslUserDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 2, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlLdapSslUserDomain.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslUserDomain.setDescription("This string should match exactly with an authentication domain on the LDAP/SSL server. This string should contain a substitution string '<USERNAME>' which will be replaced with the user's login name during authentication. Either the principle or distinguished name format is allowed.")
ilomCtrlLdapSslAdminGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 3), )
if mibBuilder.loadTexts: ilomCtrlLdapSslAdminGroupsTable.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslAdminGroupsTable.setDescription('This table is used to configure Admin Group information required for configuring the LDAP/SSL client.')
ilomCtrlLdapSslAdminGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 3, 1), ).setIndexNames((0, "SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslAdminGroupId"))
if mibBuilder.loadTexts: ilomCtrlLdapSslAdminGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslAdminGroupsEntry.setDescription('An entry for an LDAP/SSL Admin Group.')
ilomCtrlLdapSslAdminGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: ilomCtrlLdapSslAdminGroupId.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslAdminGroupId.setDescription('An integer identifier of the LDAP/SSL AdminGroup entry.')
ilomCtrlLdapSslAdminGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 3, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlLdapSslAdminGroupName.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslAdminGroupName.setDescription('This string should contain a distinguished name that exactly matches one of the group names on the LDAP/SSL server. Any user belonging to one of these groups in this table will be assigned the ILOM role of Administrator.')
ilomCtrlLdapSslOperatorGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 4), )
if mibBuilder.loadTexts: ilomCtrlLdapSslOperatorGroupsTable.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslOperatorGroupsTable.setDescription('This table is used to configure Operator Group information required for configuring the LDAP/SSL client.')
ilomCtrlLdapSslOperatorGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 4, 1), ).setIndexNames((0, "SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslOperatorGroupId"))
if mibBuilder.loadTexts: ilomCtrlLdapSslOperatorGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslOperatorGroupsEntry.setDescription('An entry for an LDAP/SSL Operator Group.')
ilomCtrlLdapSslOperatorGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: ilomCtrlLdapSslOperatorGroupId.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslOperatorGroupId.setDescription('An integer identifier of the LDAP/SSL Operator Group entry.')
ilomCtrlLdapSslOperatorGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 4, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlLdapSslOperatorGroupName.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslOperatorGroupName.setDescription('This string should contain a distinguished name that exactly matches one of the group names on the LDAP/SSL server. Any user belonging to one of these groups in this table will be assigned the ILOM role of Operator.')
ilomCtrlLdapSslAlternateServerTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 5), )
if mibBuilder.loadTexts: ilomCtrlLdapSslAlternateServerTable.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslAlternateServerTable.setDescription('This table is used to view and configure alternate server information for the LDAP/SSL client.')
ilomCtrlLdapSslAlternateServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 5, 1), ).setIndexNames((0, "SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslAlternateServerId"))
if mibBuilder.loadTexts: ilomCtrlLdapSslAlternateServerEntry.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslAlternateServerEntry.setDescription('An entry for an LDAP/SSL alternate server table.')
ilomCtrlLdapSslAlternateServerId = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: ilomCtrlLdapSslAlternateServerId.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslAlternateServerId.setDescription('An integer identifier of the LDAP/SSL alternate server table.')
ilomCtrlLdapSslAlternateServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlLdapSslAlternateServerIp.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslAlternateServerIp.setDescription('The IP address of the LDAP/SSL alternate server used as directory server for user accounts.')
ilomCtrlLdapSslAlternateServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlLdapSslAlternateServerPort.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslAlternateServerPort.setDescription('Specifies the port number for the LDAP/SSL alternate server. Specifying 0 as the port indicates that auto-select will use the well known port number. Specifying 1-65535 is used to explicitly set the port number.')
ilomCtrlLdapSslAlternateServerCertStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlLdapSslAlternateServerCertStatus.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslAlternateServerCertStatus.setDescription('A string indicating the status of the certificate file. This is useful in determining whether a certificate file is present or not.')
ilomCtrlLdapSslAlternateServerCertURI = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 5, 1, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlLdapSslAlternateServerCertURI.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslAlternateServerCertURI.setDescription("This is the URI of a certificate file needed when Strict Cert Mode is enabled. Setting the URI causes the tranfer of the file, making the certificate available immediately for certificate authentication. Additionally, either 'remove' or 'restore' are supported for direct certificate manipulation.")
ilomCtrlLdapSslAlternateServerCertClear = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 5, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlLdapSslAlternateServerCertClear.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslAlternateServerCertClear.setDescription('A variable that will clear the certificate info associated with the server when it is set to true.')
ilomCtrlLdapSslAlternateServerCertVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 5, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlLdapSslAlternateServerCertVersion.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslAlternateServerCertVersion.setDescription('A string indicating the certificate version of the alternate server certificate file.')
ilomCtrlLdapSslAlternateServerCertSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 5, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlLdapSslAlternateServerCertSerialNo.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslAlternateServerCertSerialNo.setDescription('A string showing the serial number of the alternate server certificate file.')
ilomCtrlLdapSslAlternateServerCertIssuer = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 5, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlLdapSslAlternateServerCertIssuer.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslAlternateServerCertIssuer.setDescription('A string showing the issuer of the alternate server certificate file.')
ilomCtrlLdapSslAlternateServerCertSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 5, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlLdapSslAlternateServerCertSubject.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslAlternateServerCertSubject.setDescription('A string showing the subject of the alternate server certificate file.')
ilomCtrlLdapSslAlternateServerCertValidBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 5, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlLdapSslAlternateServerCertValidBegin.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslAlternateServerCertValidBegin.setDescription('A string showing the valid start date of the alternate server certificate file.')
ilomCtrlLdapSslAlternateServerCertValidEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 5, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilomCtrlLdapSslAlternateServerCertValidEnd.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslAlternateServerCertValidEnd.setDescription('A string showing the valid end date of the alternate server certificate file.')
ilomCtrlLdapSslCustomGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 6), )
if mibBuilder.loadTexts: ilomCtrlLdapSslCustomGroupsTable.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslCustomGroupsTable.setDescription('This table is used to configure custom group information required for configuring the LDAP/SSL client.')
ilomCtrlLdapSslCustomGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 6, 1), ).setIndexNames((0, "SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslCustomGroupId"))
if mibBuilder.loadTexts: ilomCtrlLdapSslCustomGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslCustomGroupsEntry.setDescription('An entry for an LDAP/SSLcustom group.')
ilomCtrlLdapSslCustomGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: ilomCtrlLdapSslCustomGroupId.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslCustomGroupId.setDescription('An integer identifier of the LDAP/SSL custom group entry.')
ilomCtrlLdapSslCustomGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 6, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlLdapSslCustomGroupName.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslCustomGroupName.setDescription("This string should contain a distinguished name that exactly matches one of the group names on the LDAP/SSL server. Any user belonging to one of these groups in this table will be assigned the ILOM role based on the entry's configuration for roles.")
ilomCtrlLdapSslCustomGroupRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 7, 6, 1, 3), ILOMCtrlUserRoles()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlLdapSslCustomGroupRoles.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlLdapSslCustomGroupRoles.setDescription("Specifies the role that a user authenticated via LDAP/SSL should have. Setting this property to legacy roles of 'Administrator' or 'Operator', or any of the individual role IDs of 'a', 'u', 'c', 'r', 'o' and 's' will cause the LDAP/SSL client to ignore the schema stored on the LDAP/SSL server. Setting this to 'none' clears the value and indicates that the native LDAP/SSL schema should be used. The role IDs can be joined together 'aucros' where a-admin, u-user, c-console, r-reset, s-service and o-readOnly.")
ilomCtrlDNSNameServers = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 8, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlDNSNameServers.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlDNSNameServers.setDescription('Specifies the nameserver for DNS.')
ilomCtrlDNSSearchPath = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 8, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlDNSSearchPath.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlDNSSearchPath.setDescription('Specifies the searchpath for DNS.')
ilomCtrlDNSdhcpAutoDns = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 8, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlDNSdhcpAutoDns.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlDNSdhcpAutoDns.setDescription('Specifies whether or not DHCP autodns is enabled.')
ilomCtrlDNSTimeout = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlDNSTimeout.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlDNSTimeout.setDescription('Specifies the number of seconds to wait before timing out if the server does not respond.')
ilomCtrlDNSRetries = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 1, 8, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilomCtrlDNSRetries.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlDNSRetries.setDescription('Specifies the number of times a request is attempted again, after a timeout.')
ilomCtrlObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 18, 2, 2)).setObjects(("SUN-ILOM-CONTROL-MIB", "ilomCtrlDeviceNTPServerOneIP"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlDeviceNTPServerTwoIP"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapEnabled"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapServerIP"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapPortNumber"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapBindDn"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapBindPassword"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSearchBase"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapDefaultRoles"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlRadiusEnabled"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlRadiusServerIP"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlRadiusPortNumber"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlRadiusSecret"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlRadiusDefaultRoles"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlRemoteSyslogDest1"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlRemoteSyslogDest2"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirectoryEnabled"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirectoryIP"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirectoryPortNumber"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirectoryCertFileURI"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirectoryTimeout"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirectoryStrictCertEnabled"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirectoryCertFileStatus"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirUserDomain"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirAdminGroupName"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirOperatorGroupName"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirCustomGroupName"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirCustomGroupRoles"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirAlternateServerIp"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirAlternateServerPort"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirAlternateServerCertStatus"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirAlternateServerCertURI"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirAlternateServerCertClear"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirAlternateServerCertVersion"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirAlternateServerCertSerialNo"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirAlternateServerCertIssuer"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirAlternateServerCertSubject"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirAlternateServerCertValidBegin"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirAlternateServerCertValidEnd"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirectoryLogDetail"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirectoryDefaultRoles"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirectoryCertClear"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirectoryCertVersion"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirectoryCertSerialNo"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirectoryCertIssuer"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirectoryCertSubject"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirectoryCertValidBegin"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirectoryCertValidEnd"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirDnsLocatorEnabled"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirDnsLocatorQueryService"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirExpSearchEnabled"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirStrictCredentialErrorEnabled"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSMTPEnabled"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSMTPServerIP"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSMTPPortNumber"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSMTPCustomSender"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslEnabled"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslIP"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslPortNumber"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslDefaultRole"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslCertFileURI"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslTimeout"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslStrictCertEnabled"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslCertFileStatus"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslLogDetail"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslDefaultRoles"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslCertFileClear"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslCertFileVersion"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslCertFileSerialNo"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslCertFileIssuer"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslCertFileSubject"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslCertFileValidBegin"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslCertFileValidEnd"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslOptUsrMappingEnabled"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslOptUsrMappingAttrInfo"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslOptUsrMappingBindDn"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslOptUsrMappingBindPw"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslOptUsrMappingSearchBase"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslUserDomain"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslAdminGroupName"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslOperatorGroupName"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslCustomGroupName"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslCustomGroupRoles"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslAlternateServerIp"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslAlternateServerPort"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslAlternateServerCertStatus"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslAlternateServerCertURI"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslAlternateServerCertClear"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslAlternateServerCertVersion"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslAlternateServerCertSerialNo"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslAlternateServerCertIssuer"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslAlternateServerCertSubject"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslAlternateServerCertValidBegin"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapSslAlternateServerCertValidEnd"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlHttpEnabled"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlHttpPortNumber"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlHttpSecureRedirect"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlHttpsEnabled"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlHttpsPortNumber"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSshRsaKeyFingerprint"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSshRsaKeyLength"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSshDsaKeyFingerprint"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSshDsaKeyLength"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSshGenerateNewKeyAction"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSshGenerateNewKeyType"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSshRestartSshdAction"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSshEnabled"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSingleSignonEnabled"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlNetworkMacAddress"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlNetworkIpDiscovery"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlNetworkIpAddress"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlNetworkIpGateway"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlNetworkIpNetmask"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlNetworkPendingIpDiscovery"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlNetworkPendingIpAddress"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlNetworkPendingIpGateway"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlNetworkPendingIpNetmask"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlNetworkCommitPending"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlNetworkDHCPServerAddr"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlNetworkPendingManagementPort"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlNetworkManagementPort"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlNetworkOutOfBandMacAddress"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlNetworkSidebandMacAddress"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlNetworkState"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLocalUserPassword"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLocalUserRoles"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLocalUserRowStatus"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLocalUserCLIMode"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSessionsUsername"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSessionsConnectionType"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSessionsLoginTime"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlFirmwareMgmtVersion"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlFirmwareBuildNumber"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlFirmwareBuildDate"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlFirmwareTFTPServerIP"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlFirmwareTFTPFileName"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlFirmwarePreserveConfig"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlFirmwareMgmtStatus"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlFirmwareMgmtAction"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlFirmwareMgmtFilesystemVersion"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlFirmwareDelayBIOS"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlEventLogType"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlEventLogTimestamp"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlEventLogClass"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlEventLogSeverity"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlEventLogDescription"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlEventLogClear"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlAlertSeverity"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlAlertType"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlAlertDestinationIP"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlAlertDestinationPort"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlAlertDestinationEmail"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlAlertSNMPVersion"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlAlertSNMPCommunityOrUsername"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlAlertEmailEventClassFilter"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlAlertEmailEventTypeFilter"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlAlertEmailCustomSender"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlAlertEmailMessagePrefix"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlDateAndTime"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlNTPEnabled"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlTimezone"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSerialInternalPortPresent"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSerialInternalPortBaudRate"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSerialExternalPortPresent"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSerialExternalPortBaudRate"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSerialExternalPortFlowControl"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlPowerAction"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlResetAction"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlRedundancyStatus"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlRedundancyAction"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlRedundancyFRUName"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlPolicyShortStr"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlPolicyLongStr"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlPolicyEnabled"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlResetToDefaultsAction"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSPARCDiagsTrigger"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSPARCDiagsMode"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSPARCDiagsPowerOnLevel"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSPARCDiagsUserResetLevel"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSPARCDiagsErrorResetLevel"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSPARCDiagsPowerOnVerbosity"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSPARCDiagsUserResetVerbosity"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSPARCDiagsErrorResetVerbosity"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSPARCDiagsStatus"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSPARCDiagsAction"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSPARCDiagsHwChangeLevel"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSPARCDiagsHwChangeVerbosity"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSPARCHostMACAddress"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSPARCHostOBPVersion"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSPARCHostPOSTVersion"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSPARCHostAutoRunOnError"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSPARCHostPOSTStatus"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSPARCHostAutoRestartPolicy"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSPARCHostIoReconfigurePolicy"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSPARCHostOSBootStatus"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSPARCHostBootTimeout"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSPARCHostBootRestart"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSPARCHostMaxBootFail"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSPARCHostBootFailRecovery"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSPARCHostHypervisorVersion"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSPARCHostSysFwVersion"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSPARCHostGMVersion"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSPARCHostSendBreakAction"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSPARCBootModeState"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSPARCBootModeScript"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSPARCBootModeExpires"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSPARCBootModeLDOMConfig"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSPARCKeySwitchState"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSystemIdentifier"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlHostName"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlThdState"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlThdAction"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlThdModuleDesc"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlThdModuleState"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlThdModuleAction"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlThdInstanceState"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlThdInstanceAction"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlBackupAndRestoreTargetURI"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlBackupAndRestorePassphrase"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlBackupAndRestoreAction"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlBackupAndRestoreActionStatus"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlDNSNameServers"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlDNSSearchPath"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlDNSdhcpAutoDns"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlDNSTimeout"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlDNSRetries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ilomCtrlObjectsGroup = ilomCtrlObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: ilomCtrlObjectsGroup.setDescription('The group of current objects.')
ilomCtrlDeprecatedObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 175, 102, 18, 2, 1)).setObjects(("SUN-ILOM-CONTROL-MIB", "ilomCtrlLdapDefaultRole"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlRadiusDefaultRole"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLocalUserAuthPassword"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLocalUserAuthRole"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLocalUserAuthRowStatus"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlLocalUserAuthCLIMode"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSPARCDiagsLevel"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlSPARCDiagsVerbosity"), ("SUN-ILOM-CONTROL-MIB", "ilomCtrlActiveDirectoryDefaultRole"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ilomCtrlDeprecatedObjectsGroup = ilomCtrlDeprecatedObjectsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ilomCtrlDeprecatedObjectsGroup.setDescription('The objects that have been deprecated.')
mibBuilder.exportSymbols("SUN-ILOM-CONTROL-MIB", ilomCtrlNetworkOutOfBandMacAddress=ilomCtrlNetworkOutOfBandMacAddress, ilomCtrlActiveDirUserDomainEntry=ilomCtrlActiveDirUserDomainEntry, ilomCtrlAlertDestinationEmail=ilomCtrlAlertDestinationEmail, ilomCtrlLdapSslCustomGroupRoles=ilomCtrlLdapSslCustomGroupRoles, ilomCtrlAlertDestinationIP=ilomCtrlAlertDestinationIP, ilomCtrlActiveDirOperatorGroupsTable=ilomCtrlActiveDirOperatorGroupsTable, ilomCtrlRemoteSyslog=ilomCtrlRemoteSyslog, ilomCtrlActiveDirAlternateServerCertSerialNo=ilomCtrlActiveDirAlternateServerCertSerialNo, ilomCtrlSingleSignonEnabled=ilomCtrlSingleSignonEnabled, sun=sun, ilomCtrlActiveDirectoryCertValidEnd=ilomCtrlActiveDirectoryCertValidEnd, ilomCtrlSPARCHostAutoRunOnError=ilomCtrlSPARCHostAutoRunOnError, ilomCtrlActiveDirectoryCertSubject=ilomCtrlActiveDirectoryCertSubject, ilomCtrlActiveDirectoryDefaultRoles=ilomCtrlActiveDirectoryDefaultRoles, ilomCtrlNetworkPendingIpAddress=ilomCtrlNetworkPendingIpAddress, ilomCtrlActiveDirAlternateServerPort=ilomCtrlActiveDirAlternateServerPort, ilomCtrlSerialExternalPortPresent=ilomCtrlSerialExternalPortPresent, ilomCtrlActiveDirAdminGroupName=ilomCtrlActiveDirAdminGroupName, ilomCtrlActiveDirectoryCertVersion=ilomCtrlActiveDirectoryCertVersion, ilomCtrlThdModuleState=ilomCtrlThdModuleState, ilomCtrlSPARC=ilomCtrlSPARC, ilomCtrlActiveDirectoryCertClear=ilomCtrlActiveDirectoryCertClear, ilomCtrlThdState=ilomCtrlThdState, ilomCtrlActiveDirOperatorGroupName=ilomCtrlActiveDirOperatorGroupName, ilomCtrlAlertSNMPVersion=ilomCtrlAlertSNMPVersion, ilomCtrlSPARCDiagsStatus=ilomCtrlSPARCDiagsStatus, ILOMCtrlSPARCBootModeState=ILOMCtrlSPARCBootModeState, ilomCtrlSPARCBootModeExpires=ilomCtrlSPARCBootModeExpires, ilomCtrlLocalUserRowStatus=ilomCtrlLocalUserRowStatus, ilomCtrlAlertSeverity=ilomCtrlAlertSeverity, ILOMCtrlLocalUserAuthCLIMode=ILOMCtrlLocalUserAuthCLIMode, ilomCtrlPolicyShortStr=ilomCtrlPolicyShortStr, ilomCtrlConfigMgmt=ilomCtrlConfigMgmt, ilomCtrlRadiusPortNumber=ilomCtrlRadiusPortNumber, ilomCtrlSerialExternalPortFlowControl=ilomCtrlSerialExternalPortFlowControl, ilomCtrlFirmwareDelayBIOS=ilomCtrlFirmwareDelayBIOS, ilomCtrlLdapSslAlternateServerCertURI=ilomCtrlLdapSslAlternateServerCertURI, ilomCtrlSPARCDiagsPowerOnVerbosity=ilomCtrlSPARCDiagsPowerOnVerbosity, ilomCtrlSessionsLoginTime=ilomCtrlSessionsLoginTime, ilomCtrlDNS=ilomCtrlDNS, ilomCtrlLdapSslTimeout=ilomCtrlLdapSslTimeout, ilomCtrlCompliances=ilomCtrlCompliances, ilomCtrlLdapSslAlternateServerCertValidEnd=ilomCtrlLdapSslAlternateServerCertValidEnd, ilomCtrlDNSSearchPath=ilomCtrlDNSSearchPath, ILOMCtrlFirmwareUpdateAction=ILOMCtrlFirmwareUpdateAction, ilomCtrlActiveDirectoryStrictCertEnabled=ilomCtrlActiveDirectoryStrictCertEnabled, ilomCtrlSPARCDiagsErrorResetLevel=ilomCtrlSPARCDiagsErrorResetLevel, ilomCtrlFirmwareMgmtStatus=ilomCtrlFirmwareMgmtStatus, ilomCtrlActiveDirOperatorGroupId=ilomCtrlActiveDirOperatorGroupId, ilomCtrlResetTarget=ilomCtrlResetTarget, ilomCtrlBackupAndRestore=ilomCtrlBackupAndRestore, ILOMCtrlSPARCDiagsAction=ILOMCtrlSPARCDiagsAction, ilomCtrlThdInstanceAction=ilomCtrlThdInstanceAction, ilomCtrlNetworkEntry=ilomCtrlNetworkEntry, ilomCtrlActiveDirAlternateServerTable=ilomCtrlActiveDirAlternateServerTable, ilomCtrlSPARCKeySwitchState=ilomCtrlSPARCKeySwitchState, ilomCtrlSPARCDiagsAction=ilomCtrlSPARCDiagsAction, ilomCtrlSMTPPortNumber=ilomCtrlSMTPPortNumber, ilomCtrlPolicyEntry=ilomCtrlPolicyEntry, ilomCtrlSshRestartSshdAction=ilomCtrlSshRestartSshdAction, ILOMCtrlLocalUserPassword=ILOMCtrlLocalUserPassword, ilomCtrlLdapSslCertFileIssuer=ilomCtrlLdapSslCertFileIssuer, ilomCtrlNetworkTable=ilomCtrlNetworkTable, ilomCtrlLdapDefaultRole=ilomCtrlLdapDefaultRole, ilomCtrlLdapSslCustomGroupsEntry=ilomCtrlLdapSslCustomGroupsEntry, ilomCtrlNetworkIpGateway=ilomCtrlNetworkIpGateway, ilomCtrlSPARCBootModeLDOMConfig=ilomCtrlSPARCBootModeLDOMConfig, ilomCtrlNtp=ilomCtrlNtp, ilomCtrlSPARCKeySwitch=ilomCtrlSPARCKeySwitch, ilomCtrlPowerTarget=ilomCtrlPowerTarget, ilomCtrlNetworkTarget=ilomCtrlNetworkTarget, ILOMCtrlSPARCKeySwitchState=ILOMCtrlSPARCKeySwitchState, ilomCtrlLdapSslLogDetail=ilomCtrlLdapSslLogDetail, ilomCtrlActiveDirCustomGroupId=ilomCtrlActiveDirCustomGroupId, ilomCtrlActiveDirectoryCertIssuer=ilomCtrlActiveDirectoryCertIssuer, ilomCtrlDNSRetries=ilomCtrlDNSRetries, ilomCtrlActiveDirAlternateServerCertURI=ilomCtrlActiveDirAlternateServerCertURI, ilomCtrlSPARCHostSysFwVersion=ilomCtrlSPARCHostSysFwVersion, ilomCtrlLdapSslOperatorGroupId=ilomCtrlLdapSslOperatorGroupId, ILOMCtrlResetToDefaultsAction=ILOMCtrlResetToDefaultsAction, ilomCtrlRedundancyFRUName=ilomCtrlRedundancyFRUName, ilomCtrlLdapSslAdminGroupName=ilomCtrlLdapSslAdminGroupName, ilomCtrlLocalUserRoles=ilomCtrlLocalUserRoles, ilomCtrlLdapPortNumber=ilomCtrlLdapPortNumber, ilomCtrlLdapSearchBase=ilomCtrlLdapSearchBase, ilomCtrlServices=ilomCtrlServices, ilomCtrlNetwork=ilomCtrlNetwork, ilomCtrlHttps=ilomCtrlHttps, ilomCtrlActiveDirectoryCertFileStatus=ilomCtrlActiveDirectoryCertFileStatus, ILOMCtrlPowerAction=ILOMCtrlPowerAction, ilomCtrlRadiusServerIP=ilomCtrlRadiusServerIP, ilomCtrlAlertEmailCustomSender=ilomCtrlAlertEmailCustomSender, ilomCtrlLocalUserAuthEntry=ilomCtrlLocalUserAuthEntry, ilomCtrlLdapSslCertFileValidEnd=ilomCtrlLdapSslCertFileValidEnd, ilomCtrlActiveDirAlternateServerCertVersion=ilomCtrlActiveDirAlternateServerCertVersion, ilomCtrlSPARCDiagsErrorResetVerbosity=ilomCtrlSPARCDiagsErrorResetVerbosity, ILOMCtrlInstanceTargetIndex=ILOMCtrlInstanceTargetIndex, ilomCtrlAlertEmailEventClassFilter=ilomCtrlAlertEmailEventClassFilter, ilomCtrlObjectsGroup=ilomCtrlObjectsGroup, ilomCtrlAlerts=ilomCtrlAlerts, ilomCtrlLdapSslStrictCertEnabled=ilomCtrlLdapSslStrictCertEnabled, ILOMCtrlSshKeyGenType=ILOMCtrlSshKeyGenType, products=products, ilomCtrlSMTPServerIP=ilomCtrlSMTPServerIP, ilomCtrlActiveDirectoryEnabled=ilomCtrlActiveDirectoryEnabled, ilomCtrlThdInstanceName=ilomCtrlThdInstanceName, ilomCtrlRedundancy=ilomCtrlRedundancy, ilomCtrlNTPEnabled=ilomCtrlNTPEnabled, ilomCtrlHttpsPortNumber=ilomCtrlHttpsPortNumber, ilomCtrlFirmwareBuildDate=ilomCtrlFirmwareBuildDate, ilomCtrlLdapSslAlternateServerCertSerialNo=ilomCtrlLdapSslAlternateServerCertSerialNo, ilomCtrlLocalUserAuthCLIMode=ilomCtrlLocalUserAuthCLIMode, ilomCtrlLdapSslUserDomainId=ilomCtrlLdapSslUserDomainId, ilomCtrlSPARCDiagsHwChangeLevel=ilomCtrlSPARCDiagsHwChangeLevel, ilomCtrlSPARCHostAutoRestartPolicy=ilomCtrlSPARCHostAutoRestartPolicy, ilomCtrlSshDsaKeyFingerprint=ilomCtrlSshDsaKeyFingerprint, ilomCtrlPowerAction=ilomCtrlPowerAction, ilomCtrlSerialInternalPortBaudRate=ilomCtrlSerialInternalPortBaudRate, ilomCtrlAlertsEntry=ilomCtrlAlertsEntry, ilomCtrlActiveDirectoryCertFileURI=ilomCtrlActiveDirectoryCertFileURI, ilomCtrlSessionsTable=ilomCtrlSessionsTable, ilomCtrlActiveDirectoryCertSerialNo=ilomCtrlActiveDirectoryCertSerialNo, ilomCtrlLdapSslOperatorGroupName=ilomCtrlLdapSslOperatorGroupName, ilomCtrlResetControl=ilomCtrlResetControl, ilomCtrlRadiusEnabled=ilomCtrlRadiusEnabled, ilomCtrlLdapSslOptUsrMappingBindPw=ilomCtrlLdapSslOptUsrMappingBindPw, ilomCtrlActiveDirUserDomain=ilomCtrlActiveDirUserDomain, ilomCtrlActiveDirOperatorGroupsEntry=ilomCtrlActiveDirOperatorGroupsEntry, ilomCtrlLdapSslAdminGroupId=ilomCtrlLdapSslAdminGroupId, ilomCtrlLdapSslAlternateServerPort=ilomCtrlLdapSslAlternateServerPort, ilomCtrlLdapSslAdminGroupsEntry=ilomCtrlLdapSslAdminGroupsEntry, ilomCtrlRadius=ilomCtrlRadius, ilomCtrlPowerEntry=ilomCtrlPowerEntry, ilomCtrlBackupAndRestoreActionStatus=ilomCtrlBackupAndRestoreActionStatus, ilomCtrlSessions=ilomCtrlSessions, ilomCtrlActiveDirDnsLocatorQueryId=ilomCtrlActiveDirDnsLocatorQueryId, ilomCtrlThdModulesEntry=ilomCtrlThdModulesEntry, ilomCtrlSystemIdentifier=ilomCtrlSystemIdentifier, ILOMCtrlBackupAndRestoreAction=ILOMCtrlBackupAndRestoreAction, ilomCtrlPowerTable=ilomCtrlPowerTable, ilomCtrlSPARCDiagsLevel=ilomCtrlSPARCDiagsLevel, ilomCtrlLdapSsl=ilomCtrlLdapSsl, ilomCtrlLdapSslCustomGroupId=ilomCtrlLdapSslCustomGroupId, ilomCtrlActiveDirDnsLocatorQueryService=ilomCtrlActiveDirDnsLocatorQueryService, ilomCtrlThdInstanceState=ilomCtrlThdInstanceState, ilomCtrlSerialInternalPortPresent=ilomCtrlSerialInternalPortPresent, ilomCtrlAlertEmailEventTypeFilter=ilomCtrlAlertEmailEventTypeFilter, ilomCtrlEventLog=ilomCtrlEventLog, ILOMCtrlFirmwareUpdateStatus=ILOMCtrlFirmwareUpdateStatus, ilomCtrlSPARCHostBootRestart=ilomCtrlSPARCHostBootRestart, ilomCtrlLdapSslUserDomainTable=ilomCtrlLdapSslUserDomainTable, ilomCtrlBackupAndRestoreAction=ilomCtrlBackupAndRestoreAction, ilomCtrlFirmwareBuildNumber=ilomCtrlFirmwareBuildNumber, ilomCtrlSPARCHostPOSTVersion=ilomCtrlSPARCHostPOSTVersion, ilomCtrlEventLogDescription=ilomCtrlEventLogDescription, ilomCtrlLocalUserEntry=ilomCtrlLocalUserEntry, ilomCtrlConformances=ilomCtrlConformances, ilomCtrlPowerReset=ilomCtrlPowerReset, ilomCtrlSessionsUsername=ilomCtrlSessionsUsername, ilomCtrlFirmwareMgmtFilesystemVersion=ilomCtrlFirmwareMgmtFilesystemVersion, ILOMCtrlTargetIndex=ILOMCtrlTargetIndex, ilomCtrlDeprecatedObjectsGroup=ilomCtrlDeprecatedObjectsGroup, ilomCtrlActiveDirAdminGroupId=ilomCtrlActiveDirAdminGroupId, ilomCtrlActiveDirectoryCertValidBegin=ilomCtrlActiveDirectoryCertValidBegin, ilomCtrlSingleSignon=ilomCtrlSingleSignon, ilomCtrlNetworkPendingIpGateway=ilomCtrlNetworkPendingIpGateway, ilomCtrlSPARCBootMode=ilomCtrlSPARCBootMode, ilomCtrlThdModuleName=ilomCtrlThdModuleName, ilomCtrlSPARCDiags=ilomCtrlSPARCDiags, ilomCtrlEventLogTable=ilomCtrlEventLogTable, ilomCtrlUsers=ilomCtrlUsers, ilomCtrlRemoteSyslogDest2=ilomCtrlRemoteSyslogDest2, ilomCtrlSPARCHostControl=ilomCtrlSPARCHostControl, ilomCtrlSshRsaKeyLength=ilomCtrlSshRsaKeyLength, ilomCtrlDeviceNTPServerOneIP=ilomCtrlDeviceNTPServerOneIP, ilomCtrlRadiusSecret=ilomCtrlRadiusSecret, ilomCtrlSshRsaKeyFingerprint=ilomCtrlSshRsaKeyFingerprint, ilomCtrlDNSNameServers=ilomCtrlDNSNameServers, ilomCtrlNetworkState=ilomCtrlNetworkState, ilomCtrlThdInstanceTable=ilomCtrlThdInstanceTable, ilomCtrlSPARCHostSendBreakAction=ilomCtrlSPARCHostSendBreakAction, ilomCtrlActiveDirDnsLocatorEnabled=ilomCtrlActiveDirDnsLocatorEnabled, ilomCtrlPolicy=ilomCtrlPolicy, ilomCtrlFirmwareTFTPFileName=ilomCtrlFirmwareTFTPFileName, ilomCtrlSshGenerateNewKeyType=ilomCtrlSshGenerateNewKeyType, ilomCtrlLdapBindPassword=ilomCtrlLdapBindPassword, ilomCtrlRedundancyStatus=ilomCtrlRedundancyStatus, ilomCtrlSPARCHostHypervisorVersion=ilomCtrlSPARCHostHypervisorVersion, ilomCtrlLdapSslAlternateServerCertValidBegin=ilomCtrlLdapSslAlternateServerCertValidBegin, ilomCtrlSsh=ilomCtrlSsh, ilomCtrlSPARCHostMACAddress=ilomCtrlSPARCHostMACAddress, ilomCtrlLdapSslUserDomainEntry=ilomCtrlLdapSslUserDomainEntry, ilomCtrlRadiusDefaultRoles=ilomCtrlRadiusDefaultRoles, ilomCtrlNetworkCommitPending=ilomCtrlNetworkCommitPending, ilomCtrlActiveDirectoryLogDetail=ilomCtrlActiveDirectoryLogDetail, ilomCtrlActiveDirUserDomainTable=ilomCtrlActiveDirUserDomainTable, ilomCtrlSPARCHostBootFailRecovery=ilomCtrlSPARCHostBootFailRecovery, ilomCtrlActiveDirUserDomainId=ilomCtrlActiveDirUserDomainId, ilomCtrlActiveDirStrictCredentialErrorEnabled=ilomCtrlActiveDirStrictCredentialErrorEnabled, ilomCtrlSMTPCustomSender=ilomCtrlSMTPCustomSender, ilomCtrlLocalUserAuthTable=ilomCtrlLocalUserAuthTable, ilomCtrlLdapEnabled=ilomCtrlLdapEnabled, ilomCtrlThdModuleDesc=ilomCtrlThdModuleDesc, ilomCtrlLocalUserPassword=ilomCtrlLocalUserPassword, ilomCtrlAlertID=ilomCtrlAlertID, ilomCtrlLdap=ilomCtrlLdap, ILOMCtrlSPARCDiagsTrigger=ILOMCtrlSPARCDiagsTrigger, ilomCtrlAlertEmailMessagePrefix=ilomCtrlAlertEmailMessagePrefix, ILOMCtrlRedundancyAction=ILOMCtrlRedundancyAction, ilomCtrlLdapSslCertFileVersion=ilomCtrlLdapSslCertFileVersion, ilomCtrlActiveDirAlternateServerId=ilomCtrlActiveDirAlternateServerId, ILOMCtrlEventLogClass=ILOMCtrlEventLogClass, ILOMCtrlSPARCHostSendBreakAction=ILOMCtrlSPARCHostSendBreakAction, ilomCtrlAlertsTable=ilomCtrlAlertsTable, ilomCtrlActiveDirAlternateServerEntry=ilomCtrlActiveDirAlternateServerEntry, ilomCtrlResetAction=ilomCtrlResetAction, ilomCtrlThdModName=ilomCtrlThdModName, ilomCtrlActiveDirectoryDefaultRole=ilomCtrlActiveDirectoryDefaultRole, ilomCtrlLdapSslCertFileURI=ilomCtrlLdapSslCertFileURI, ilomCtrlLdapSslCustomGroupName=ilomCtrlLdapSslCustomGroupName, PYSNMP_MODULE_ID=ilomCtrlMIB, ilomCtrlSPARCHostIoReconfigurePolicy=ilomCtrlSPARCHostIoReconfigurePolicy, ilomCtrlLdapDefaultRoles=ilomCtrlLdapDefaultRoles, ilomCtrlLdapSslEnabled=ilomCtrlLdapSslEnabled, ilomCtrlActiveDirDnsLocatorQueryTable=ilomCtrlActiveDirDnsLocatorQueryTable, ILOMCtrlSPARCHostBootFailRecovery=ILOMCtrlSPARCHostBootFailRecovery, ilomCtrlThdModuleAction=ilomCtrlThdModuleAction, ilomCtrlSPARCHostMaxBootFail=ilomCtrlSPARCHostMaxBootFail, ilomCtrlActiveDirCustomGroupName=ilomCtrlActiveDirCustomGroupName, ilomCtrlSPARCHostPOSTStatus=ilomCtrlSPARCHostPOSTStatus, ilomCtrlClients=ilomCtrlClients, ilom=ilom, ilomCtrlHttpEnabled=ilomCtrlHttpEnabled, ilomCtrlSPARCHostBootTimeout=ilomCtrlSPARCHostBootTimeout, ilomCtrlLdapSslCertFileClear=ilomCtrlLdapSslCertFileClear, ilomCtrlLdapSslAlternateServerCertClear=ilomCtrlLdapSslAlternateServerCertClear, ILOMCtrlThdAction=ILOMCtrlThdAction, ilomCtrlSessionsId=ilomCtrlSessionsId, ilomCtrlLdapSslGlobalObj=ilomCtrlLdapSslGlobalObj, ILOMCtrlModTargetIndex=ILOMCtrlModTargetIndex, ILOMCtrlSPARCHostIoReconfigurePolicy=ILOMCtrlSPARCHostIoReconfigurePolicy, ilomCtrlRedundancyAction=ilomCtrlRedundancyAction, ilomCtrlSPARCDiagsVerbosity=ilomCtrlSPARCDiagsVerbosity, ilomCtrlLdapSslOperatorGroupsEntry=ilomCtrlLdapSslOperatorGroupsEntry, ilomCtrlFirmwarePreserveConfig=ilomCtrlFirmwarePreserveConfig, ilomCtrlAlertSNMPCommunityOrUsername=ilomCtrlAlertSNMPCommunityOrUsername, ilomCtrlActiveDirAlternateServerCertStatus=ilomCtrlActiveDirAlternateServerCertStatus, ilomCtrlFirmwareMgmt=ilomCtrlFirmwareMgmt, ilomCtrlSPARCDiagsHwChangeVerbosity=ilomCtrlSPARCDiagsHwChangeVerbosity, ilomCtrlLdapSslIP=ilomCtrlLdapSslIP, ILOMCtrlAlertSNMPVersion=ILOMCtrlAlertSNMPVersion, ILOMCtrlEventSeverity=ILOMCtrlEventSeverity, ilomCtrlThdModulesTable=ilomCtrlThdModulesTable, ilomCtrlActiveDirectoryPortNumber=ilomCtrlActiveDirectoryPortNumber)
mibBuilder.exportSymbols("SUN-ILOM-CONTROL-MIB", ilomCtrlActiveDirectory=ilomCtrlActiveDirectory, ilomCtrlPolicyTable=ilomCtrlPolicyTable, ilomCtrlLdapSslCertFileSubject=ilomCtrlLdapSslCertFileSubject, ilomCtrlLocalUserUsername=ilomCtrlLocalUserUsername, ilomCtrlEventLogClass=ilomCtrlEventLogClass, ilomCtrlSPARCBootModeState=ilomCtrlSPARCBootModeState, ilomCtrlRemoteSyslogDest1=ilomCtrlRemoteSyslogDest1, ilomCtrlEventLogType=ilomCtrlEventLogType, ilomCtrlLdapBindDn=ilomCtrlLdapBindDn, ilomCtrlActiveDirAlternateServerIp=ilomCtrlActiveDirAlternateServerIp, ILOMCtrlNetworkIpDiscovery=ILOMCtrlNetworkIpDiscovery, ilomCtrlActiveDirectoryIP=ilomCtrlActiveDirectoryIP, ilomCtrlThdAction=ilomCtrlThdAction, ilomCtrlLdapSslAlternateServerIp=ilomCtrlLdapSslAlternateServerIp, ilomCtrlEventLogEntry=ilomCtrlEventLogEntry, ilomCtrlThd=ilomCtrlThd, ilomCtrlLdapSslAlternateServerTable=ilomCtrlLdapSslAlternateServerTable, ilomCtrlTimezone=ilomCtrlTimezone, ilomCtrlPolicyId=ilomCtrlPolicyId, ilomCtrlNetworkIpAddress=ilomCtrlNetworkIpAddress, ilomCtrlNetworkPendingIpDiscovery=ilomCtrlNetworkPendingIpDiscovery, ilomCtrlDateAndTime=ilomCtrlDateAndTime, ilomCtrlLdapSslAlternateServerCertIssuer=ilomCtrlLdapSslAlternateServerCertIssuer, ILOMCtrlSPARCDiagsVerbosityAdv=ILOMCtrlSPARCDiagsVerbosityAdv, ilomCtrlSMTPEnabled=ilomCtrlSMTPEnabled, ilomCtrlActiveDirAlternateServerCertValidEnd=ilomCtrlActiveDirAlternateServerCertValidEnd, ilomCtrlClock=ilomCtrlClock, ilomCtrlSMTP=ilomCtrlSMTP, ilomCtrlLocalUserTable=ilomCtrlLocalUserTable, ilomCtrlDNSdhcpAutoDns=ilomCtrlDNSdhcpAutoDns, ilomCtrlSPARCHostGMVersion=ilomCtrlSPARCHostGMVersion, ilomCtrlLogs=ilomCtrlLogs, ilomCtrlEventLogRecordID=ilomCtrlEventLogRecordID, ilomCtrlSPARCDiagsTrigger=ilomCtrlSPARCDiagsTrigger, ilomCtrlActiveDirAdminGroupsTable=ilomCtrlActiveDirAdminGroupsTable, ilomCtrlFirmwareTFTPServerIP=ilomCtrlFirmwareTFTPServerIP, ILOMCtrlSPARCHostBootRestart=ILOMCtrlSPARCHostBootRestart, ILOMCtrlSessionsConnectionType=ILOMCtrlSessionsConnectionType, ilomCtrlNetworkManagementPort=ilomCtrlNetworkManagementPort, ilomCtrlPolicyEnabled=ilomCtrlPolicyEnabled, ilomCtrlActiveDirCustomGroupsEntry=ilomCtrlActiveDirCustomGroupsEntry, ilomCtrlLdapServerIP=ilomCtrlLdapServerIP, ilomCtrlLdapSslAlternateServerId=ilomCtrlLdapSslAlternateServerId, ilomCtrlHttpSecureRedirect=ilomCtrlHttpSecureRedirect, ilomCtrlLdapSslCertFileStatus=ilomCtrlLdapSslCertFileStatus, ilomCtrlLdapSslDefaultRole=ilomCtrlLdapSslDefaultRole, ilomCtrlLdapSslCertFileValidBegin=ilomCtrlLdapSslCertFileValidBegin, ilomCtrlSPARCHostOSBootStatus=ilomCtrlSPARCHostOSBootStatus, ilomCtrlActiveDirAlternateServerCertValidBegin=ilomCtrlActiveDirAlternateServerCertValidBegin, ilomCtrlFirmwareMgmtAction=ilomCtrlFirmwareMgmtAction, ilomCtrlEventLogTimestamp=ilomCtrlEventLogTimestamp, ilomCtrlLdapSslAdminGroupsTable=ilomCtrlLdapSslAdminGroupsTable, ilomCtrlLdapSslOptUsrMappingAttrInfo=ilomCtrlLdapSslOptUsrMappingAttrInfo, ILOMCtrlAlertType=ILOMCtrlAlertType, ilomCtrlResetToDefaultsAction=ilomCtrlResetToDefaultsAction, ilomCtrlLdapSslOperatorGroupsTable=ilomCtrlLdapSslOperatorGroupsTable, ilomCtrlEventLogClear=ilomCtrlEventLogClear, ilomCtrlNetworkIpNetmask=ilomCtrlNetworkIpNetmask, ilomCtrlBackupAndRestoreTargetURI=ilomCtrlBackupAndRestoreTargetURI, ilomCtrlLdapSslCustomGroupsTable=ilomCtrlLdapSslCustomGroupsTable, ilomCtrlSshEnabled=ilomCtrlSshEnabled, ILOMCtrlSPARCDiagsLevelAdv=ILOMCtrlSPARCDiagsLevelAdv, ILOMCtrlSPARCDiagsLevel=ILOMCtrlSPARCDiagsLevel, ilomCtrlNetworkIpDiscovery=ilomCtrlNetworkIpDiscovery, ilomCtrlLdapSslDefaultRoles=ilomCtrlLdapSslDefaultRoles, ilomCtrlActiveDirAlternateServerCertIssuer=ilomCtrlActiveDirAlternateServerCertIssuer, ilomCtrlLdapSslUserDomain=ilomCtrlLdapSslUserDomain, ilomCtrlLocalUserAuthRowStatus=ilomCtrlLocalUserAuthRowStatus, ilomCtrlLdapSslOptUsrMappingBindDn=ilomCtrlLdapSslOptUsrMappingBindDn, ilomCtrlSshDsaKeyLength=ilomCtrlSshDsaKeyLength, ilomCtrlGroups=ilomCtrlGroups, ilomCtrlNetworkSidebandMacAddress=ilomCtrlNetworkSidebandMacAddress, ilomCtrlLdapSslPortNumber=ilomCtrlLdapSslPortNumber, ilomCtrlPowerControl=ilomCtrlPowerControl, ilomCtrlAlertDestinationPort=ilomCtrlAlertDestinationPort, ILOMCtrlSPARCDiagsVerbosity=ILOMCtrlSPARCDiagsVerbosity, ilomCtrlResetTable=ilomCtrlResetTable, ILOMCtrlUserRole=ILOMCtrlUserRole, ilomCtrlResetEntry=ilomCtrlResetEntry, ilomCtrlIdentification=ilomCtrlIdentification, ilomCtrlHostName=ilomCtrlHostName, ilomCtrlHttpPortNumber=ilomCtrlHttpPortNumber, ILOMCtrlRedundancyStatus=ILOMCtrlRedundancyStatus, ilomCtrlLdapSslAlternateServerCertVersion=ilomCtrlLdapSslAlternateServerCertVersion, ilomCtrlLdapSslOptUsrMappingSearchBase=ilomCtrlLdapSslOptUsrMappingSearchBase, ilomCtrlNetworkMacAddress=ilomCtrlNetworkMacAddress, ilomCtrlActiveDirExpSearchEnabled=ilomCtrlActiveDirExpSearchEnabled, ILOMCtrlUserRoles=ILOMCtrlUserRoles, ilomCtrlHttp=ilomCtrlHttp, ilomCtrlAlertType=ilomCtrlAlertType, ilomCtrlPolicyLongStr=ilomCtrlPolicyLongStr, ilomCtrlSPARCHostOBPVersion=ilomCtrlSPARCHostOBPVersion, ilomCtrlLocalUserCLIMode=ilomCtrlLocalUserCLIMode, ilomCtrlActiveDirCustomGroupsTable=ilomCtrlActiveDirCustomGroupsTable, ILOMCtrlFlowControl=ILOMCtrlFlowControl, ilomCtrlActiveDirAlternateServerCertClear=ilomCtrlActiveDirAlternateServerCertClear, ILOMCtrlEventLogType=ILOMCtrlEventLogType, ilomCtrlSerial=ilomCtrlSerial, ilomCtrlLdapSslAlternateServerCertSubject=ilomCtrlLdapSslAlternateServerCertSubject, ilomCtrlEventLogSeverity=ilomCtrlEventLogSeverity, ilomCtrlLocalUserAuthUsername=ilomCtrlLocalUserAuthUsername, ilomCtrlSessionsEntry=ilomCtrlSessionsEntry, ilomCtrlNetworkPendingManagementPort=ilomCtrlNetworkPendingManagementPort, ilomCtrlSessionsConnectionType=ilomCtrlSessionsConnectionType, ilomCtrlActiveDirDnsLocatorQueryEntry=ilomCtrlActiveDirDnsLocatorQueryEntry, ilomCtrlSPARCDiagsUserResetLevel=ilomCtrlSPARCDiagsUserResetLevel, ilomCtrlSshGenerateNewKeyAction=ilomCtrlSshGenerateNewKeyAction, ilomCtrlLdapSslAlternateServerEntry=ilomCtrlLdapSslAlternateServerEntry, ILOMCtrlSPARCHostAutoRestartPolicy=ILOMCtrlSPARCHostAutoRestartPolicy, ILOMCtrlBaudRate=ILOMCtrlBaudRate, ilomCtrlSPARCDiagsPowerOnLevel=ilomCtrlSPARCDiagsPowerOnLevel, ilomCtrlHttpsEnabled=ilomCtrlHttpsEnabled, ilomCtrlDeviceNTPServerTwoIP=ilomCtrlDeviceNTPServerTwoIP, ILOMCtrlResetAction=ILOMCtrlResetAction, ilomCtrlLocalUserAuthPassword=ilomCtrlLocalUserAuthPassword, ilomCtrlFirmwareMgmtVersion=ilomCtrlFirmwareMgmtVersion, ilomCtrlLdapSslCertFileSerialNo=ilomCtrlLdapSslCertFileSerialNo, ilomCtrlActiveDirCustomGroupRoles=ilomCtrlActiveDirCustomGroupRoles, ILOMCtrlLocalUserUsername=ILOMCtrlLocalUserUsername, ilomCtrlLdapSslOptUsrMappingEnabled=ilomCtrlLdapSslOptUsrMappingEnabled, ilomCtrlSPARCDiagsMode=ilomCtrlSPARCDiagsMode, ilomCtrlLocalUserAuthRole=ilomCtrlLocalUserAuthRole, ilomCtrlBackupAndRestorePassphrase=ilomCtrlBackupAndRestorePassphrase, ilomCtrlDNSTimeout=ilomCtrlDNSTimeout, ilomCtrlNetworkDHCPServerAddr=ilomCtrlNetworkDHCPServerAddr, ilomCtrlMIB=ilomCtrlMIB, ILOMCtrlSPARCDiagsMode=ILOMCtrlSPARCDiagsMode, ilomCtrlNetworkPendingIpNetmask=ilomCtrlNetworkPendingIpNetmask, ilomCtrlActiveDirectoryTimeout=ilomCtrlActiveDirectoryTimeout, ilomCtrlActiveDirAlternateServerCertSubject=ilomCtrlActiveDirAlternateServerCertSubject, ilomCtrlSPARCBootModeScript=ilomCtrlSPARCBootModeScript, ilomCtrlThdInstanceEntry=ilomCtrlThdInstanceEntry, ilomCtrlSPARCDiagsUserResetVerbosity=ilomCtrlSPARCDiagsUserResetVerbosity, ilomCtrlLdapSslAlternateServerCertStatus=ilomCtrlLdapSslAlternateServerCertStatus, ilomCtrlActiveDirAdminGroupsEntry=ilomCtrlActiveDirAdminGroupsEntry, ilomCtrlSerialExternalPortBaudRate=ilomCtrlSerialExternalPortBaudRate, ilomCtrlRadiusDefaultRole=ilomCtrlRadiusDefaultRole)
