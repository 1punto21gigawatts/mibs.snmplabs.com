#
# PySNMP MIB module CONFIG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CONFIG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:26:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
dot1dStpPortState, dot1dStpPortDesignatedPort, dot1dStpPortDesignatedBridge = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dStpPortState", "dot1dStpPortDesignatedPort", "dot1dStpPortDesignatedBridge")
Dscp, = mibBuilder.importSymbols("DIFFSERV-DSCP-TC", "Dscp")
HpPartnerDeviceTypeList, HpPartnerDeviceType = mibBuilder.importSymbols("HP-ICF-DEV-CONF-MIB", "HpPartnerDeviceTypeList", "HpPartnerDeviceType")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
ConfigStatus, HpSwitchIfMauAutoNegCapAdvertisedBits, HpSwitchIfMauAutoNegCapabilityBits, HpSwitchPortType, HpSwitchIfMauAutoNegCapReceivedBits, HpSwitchIfMauTypeListBits = mibBuilder.importSymbols("HP-ICF-TC", "ConfigStatus", "HpSwitchIfMauAutoNegCapAdvertisedBits", "HpSwitchIfMauAutoNegCapabilityBits", "HpSwitchPortType", "HpSwitchIfMauAutoNegCapReceivedBits", "HpSwitchIfMauTypeListBits")
InetAddressType, InetAddressPrefixLength, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddressPrefixLength", "InetAddress")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, Counter64, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, NotificationType, NotificationType, Gauge32, Counter32, ObjectIdentity, iso, Integer32, Bits, Unsigned32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter64", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "NotificationType", "NotificationType", "Gauge32", "Counter32", "ObjectIdentity", "iso", "Integer32", "Bits", "Unsigned32", "ModuleIdentity")
TextualConvention, DisplayString, TimeStamp, RowStatus, TruthValue, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TimeStamp", "RowStatus", "TruthValue", "MacAddress")
hpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7))
class VlanID(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 65535)

class Timeout(Integer32):
    pass

class HpicfUsrProfilePortSpeed(TextualConvention, Integer32):
    description = 'An enumerated value for the Port Speed'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("speed10HDX", 1), ("speed100HDX", 2), ("speed10FDx", 3), ("speed100FDx", 4), ("speedAuto", 5), ("speed1000FDx", 6), ("speedAuto10Mbits", 7), ("speedAuto100Mbits", 8), ("speedAuto1000Mbits", 9), ("speedAuto-10Gbits", 10), ("speedAuto10or100Mbits", 11))

hpSwitchConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1))
hpSwitchSystemConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1))
hpSwitchAutoReboot = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("useHw", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAutoReboot.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchAutoReboot.setDescription('When set to yes(1), the switch will automatically reboot on crash. When set to no(2), the switch will halt on crash and wait until power cycled. When set to useHw(3), physical jumper is used to determine the behavior of the switch. The default value is useHw(3).')
hpSwitchTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-720, 840))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchTimeZone.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchTimeZone.setDescription('The number of minutes to the east of Greenwich Mean Time(GMT). For a location west of GMT, use a negative integer.')
hpSwitchDaylightTimeRule = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("alaska", 2), ("canadaAndContinentalUS", 3), ("middleEuropeAndPortugal", 4), ("southernHemisphere", 5), ("westernEurop", 6), ("userDefined", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchDaylightTimeRule.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchDaylightTimeRule.setDescription("The daylight savings time rule for use by the Internet's RFC 868 Time protocol.")
hpSwitchDaylightBeginningMonth = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchDaylightBeginningMonth.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchDaylightBeginningMonth.setDescription('The month that daylight saving time starts if DaylightTimeRule is set to userDefined.')
hpSwitchDaylightBeginningDay = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchDaylightBeginningDay.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchDaylightBeginningDay.setDescription('The day of the month that daylight saving time starts if DaylightTimeRule is set to userDefined.')
hpSwitchDaylightEndingMonth = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchDaylightEndingMonth.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchDaylightEndingMonth.setDescription('The month that daylight saving time ends if DaylightTimeRule is set to userDefined.')
hpSwitchDaylightEndingDay = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchDaylightEndingDay.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchDaylightEndingDay.setDescription('The day of the month that daylight saving time emds if DaylightTimeRule is set to userDefined.')
hpSwitchSystemConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 8), ConfigStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchSystemConfigStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchSystemConfigStatus.setDescription('The configuration status of this group of objects. If one or more variables in this group were reconfigured since last reboot and required reboot to take effect, the value of this variable will be set to notInService.')
hpSwitchSystemPortLEDMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("link-activity", 1), ("link-only", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSystemPortLEDMode.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchSystemPortLEDMode.setDescription('The mode of the port LED can be either link/activity (link for 3 seconds then activity thereafter) or link-only.')
hpSwitchControlUnknownIPMulticast = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchControlUnknownIPMulticast.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchControlUnknownIPMulticast.setDescription('When enabled along with IGMP, any IP Multicast packets that are not already controlled by IGMP will be restricted to ports that have detected a multicast router or ports configured to always forward IP multicast. When set to disabled or when IGMP is disabled, the unknown IP Multicast packets will be flooded out all ports in the VLAN')
hpSwitchIgmpDelayedGroupFlushTimer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchIgmpDelayedGroupFlushTimer.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchIgmpDelayedGroupFlushTimer.setDescription('This feature is disabled by default, which is indicated by a timer value of 0 seconds. When IGMP is enabled and the value of the Delayed Group Flush Timer is not zero, traffic filters for any previously-joined IGMP groups which no longer have active members will persist for the number of seconds indicated by the timer. This has the effect of dropping any additional unjoined traffic for an empty group until the Delayed Group Flush Timer expires, at which time the traffic filter is then removed.')
hpSwitchMaxFrameSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchMaxFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchMaxFrameSize.setDescription('This is the value of the global jumbos max-frame-size supported by the switch. The default value for this is set to 9216, in order to make it compatible with previous versions of software. This configuration does not take a reboot to take effect.')
hpSwitchIpMTU = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchIpMTU.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchIpMTU.setDescription('This is the value of the global jumbos IP MTU or L3 MTU supported by the switch. The default value for this is set to 9198, in order to make it compatible with previous versions of software. This configuration does not take a reboot to take effect.')
hpSwitchAllowV1Modules = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAllowV1Modules.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchAllowV1Modules.setDescription("This object enables or disables V1 module compatibility. When set to 'enable', V1 modules are enabled and V2 modules operate in V1-compatibility mode. When set to 'disable', V1 modules are disabled and V2 modules have full functionality. Changing the value of this object to 'enable' erases the current configuration of the device and reboots it.")
hpSwitchAllowV2Modules = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("erase", 3))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAllowV2Modules.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchAllowV2Modules.setDescription("This object enables or disables V2 interface module support. When enabled, the ports of V2 modules operate normally and any V3 modules in the system operate in V2-compatibility mode. When disabled, V3 modules have full functionality and any V2 modules in the system are completely disabled. Changing the value of this object results in an immediate reboot of the system to apply the new mode. The special value 'erase' enables V2 module support such as 'enable', but also erases the switch configuration. It can be used to clear all configuration settings when changing the mode from 'disable' to 'enable'. Normally, V2 module support cannot be enabled if there are any configuration settings that are specific to V3 modules. This object returns a value of 'enable' after being set to 'erase' and reboots the device.")
hpicfPrivateVlanPromiscuousPorts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 16), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfPrivateVlanPromiscuousPorts.setStatus('optional')
if mibBuilder.loadTexts: hpicfPrivateVlanPromiscuousPorts.setDescription('This object refers to the list of Promiscuous ports. By default all the ports on the switch are promiscuous ports. The promiscuous characteristics will be applied when port becomes a member of private primary VLAN.')
hpSwitchPreviewMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchPreviewMode.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPreviewMode.setDescription("This object enables or disables preview mode support. When set to 'enable', preview mdoe is enabled and the user can configure the features available in the preview mode. When set to 'disable', preview mode is disabled and the user cannot configure any feature available in preview mode. Changing the value of this object from 'enable' to 'disable' reboots the device. The default value is disable.")
hpSwitchHibernate = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchHibernate.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchHibernate.setDescription('When set to a non-zero value, this object puts the system into hibernation mode for the specified period. During hibernation, the system does not respond to any network traffic and the console is inaccessible. When hibernation ends, the system will reboot. The only way to reboot the switch before the hibernation period ends is to press the Mode button on the front panel or cycle power. Hibernation is only available on switch models that have the necessary hardware support and is not available when stacking is enabled. When read, this object always returns zero.')
hpSwitchMacDelimiter = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("default", 1), ("colon", 2), ("hyphen", 3), ("ouinic", 4), ("none", 5))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchMacDelimiter.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchMacDelimiter.setDescription("This object configures MAC delimiter type to be used globally. The 'default' is the legacy behaviour. The 'colon' type means MAC address should be in xx:xx:xx:xx:xx:xx format. The 'hyphen'type means MAC address should be in xx-xx-xx-xx-xx-xx format. The 'ouinic' type means MAC address should be in xxxxxx-xxxxxx format. The 'none' type means MAC address should be in xxxxxxxxxxxx format.")
hpicfSwitchCLIOptimization = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfSwitchCLIOptimization.setStatus('mandatory')
if mibBuilder.loadTexts: hpicfSwitchCLIOptimization.setDescription('Enable optimization for CLI show commands.')
hpSwitchConsoleConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 2))
hpSwitchTelnetAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchTelnetAdminStatus.setStatus('obsolete')
if mibBuilder.loadTexts: hpSwitchTelnetAdminStatus.setDescription('The status of the console telnet operation.')
hpSwitchTerminalType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4))).clone(namedValues=NamedValues(("vt100", 2), ("ansi", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchTerminalType.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchTerminalType.setDescription('Terminal type of the console device.')
hpSwitchConsoleRefRate = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5, 10, 20, 30, 45, 60))).clone(namedValues=NamedValues(("refRate1", 1), ("refRate3", 3), ("refRate5", 5), ("refRate10", 10), ("refRate20", 20), ("refRate30", 30), ("refRate45", 45), ("refRate", 60)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchConsoleRefRate.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchConsoleRefRate.setDescription('The rate, in second per cycle, at which the display of various switch measurements.')
hpSwitchDisplayedEvent = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("major", 2), ("notInfo", 3), ("all", 4), ("debug", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchDisplayedEvent.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchDisplayedEvent.setDescription('The type of event messages to display on the console.')
hpSwitchConsoleConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 2, 5), ConfigStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchConsoleConfigStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchConsoleConfigStatus.setDescription('The configuration status of this group of objects. If one or more variables in this group were reconfigured since last reboot and required reboot to take effect, the value of this variable will be set to notInService.')
hpSwitchConsoleConfigLogoutPrompt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 2, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchConsoleConfigLogoutPrompt.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchConsoleConfigLogoutPrompt.setDescription('When this object is set to true (1), console/telnet/SSH logout confirmation prompt will be shown. This is the default behavior. When this object is set to false (2), logout confirmation prompt will not be shown.')
hpSwitchUsbConsoleAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchUsbConsoleAdminStatus.setStatus('optional')
if mibBuilder.loadTexts: hpSwitchUsbConsoleAdminStatus.setDescription('The status of the USB console port.')
hpSwitchSessionGlobalIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSessionGlobalIdleTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchSessionGlobalIdleTimeout.setDescription('The number of seconds to wait after no character was input to log out of a session. Valid values are 0 (no timeout) through 7200 (two hours).')
hpSwitchSessionConsoleIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7200)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSessionConsoleIdleTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchSessionConsoleIdleTimeout.setDescription('The number of seconds to wait after no character was input to log out of a serial or USB console session. This value takes precedence over hpSwitchSessionGlobalIdleTimeout for the serial or USB console. Valid values are -1 (no override), or 0 (no timeout) through 7200 (two hours).')
hpSwitchMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchMaxSessions.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchMaxSessions.setDescription('Specifies the maximum number of concurrent sessions supported by the device.')
hpSwitchMaxUserSessions = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchMaxUserSessions.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchMaxUserSessions.setDescription('Specifies the maximum number of concurrent sessions allowed per user.')
hpSwitchPortConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3))
hpSwitchPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1), )
if mibBuilder.loadTexts: hpSwitchPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPortTable.setDescription('A table that contains information about the current port status in this device.')
hpSwitchPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchPortIndex"))
if mibBuilder.loadTexts: hpSwitchPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPortEntry.setDescription('Information about a specific port status in this device.')
hpSwitchPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPortIndex.setDescription('The ifIndex value which uniquely identifies a row in the Interfaces Table.')
hpSwitchPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 2), HpSwitchPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortType.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPortType.setDescription('The type of port.')
hpSwitchPortDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortDescr.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPortDescr.setDescription('A textual string containing information about the interface.')
hpSwitchPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchPortAdminStatus.setStatus('obsolete')
if mibBuilder.loadTexts: hpSwitchPortAdminStatus.setDescription('The desired state of the interface. This variable is similar to the ifAdminStatus but instead of keeping the operational status, this variable maintain the desired state in the configuration data base.')
hpSwitchPortEtherMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half-duplex", 1), ("full-duplex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchPortEtherMode.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPortEtherMode.setDescription('The type of transmission on this port. This variable is valid only if the hpSwitchPortType was Ethernet.')
hpSwitchPortVgMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("endNode", 2), ("autoDetect", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchPortVgMode.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPortVgMode.setDescription('The type of transmission on this port. This variable is valid only if the hpSwitchPortType was VG.')
hpSwitchPortLinkbeat = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchPortLinkbeat.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPortLinkbeat.setDescription('The linkbeat status of this port.')
hpSwitchPortTrunkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchPortTrunkGroup.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPortTrunkGroup.setDescription('The trunk group this port belong to.')
hpSwitchPortBcastLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchPortBcastLimit.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPortBcastLimit.setDescription('The percentage of network bandwidth consumed by broadcast traffic through this port. If the value of this variable is 0, there will be no broadcast limit.')
hpSwitchPortFastEtherMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("half-duplex-10Mbits", 1), ("half-duplex-100Mbits", 2), ("full-duplex-10Mbits", 3), ("full-duplex-100Mbits", 4), ("auto-neg", 5), ("full-duplex-1000Mbits", 6), ("auto-10Mbits", 7), ("auto-100Mbits", 8), ("auto-1000Mbits", 9), ("auto-10Gbits", 10), ("auto-10-100Mbits", 11), ("auto-40Gbits", 12), ("auto-2500Mbits", 13), ("auto-5000Mbits", 14), ("auto-2500-5000Mbits", 15), ("auto-1000-2500Mbits", 16), ("auto-1000-2500-5000Mbits", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchPortFastEtherMode.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPortFastEtherMode.setDescription('This object provides the mode of data transfer operation on a port. The port can transfer the data either in full-duplex or in half-duplex mode. In full-duplex mode, the port can send and receive the data simultaneously. In half-duplex mode, the port can either send or receive data at any given time. In auto mode, the port negotiates the duplex mode with the port at the other end of the link. When configured in auto mode at both ends of the link, the port conforms to the following duplex modes for different Ethernet types: Ethernet (10 Mbps) - Half-duplex Fast Ethernet (100 Mbps) - Half-duplex Gigabit Ethernet (1 Gbps) - Full-duplex 10 Gigabit Ethernet (10 Gbps) - Full-duplex 40 Gigabit Ethernet (40 Gbps) - Full-duplex .')
hpSwitchPortFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchPortFlowControl.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPortFlowControl.setDescription('The Flow Control of this port.')
hpSwitchPortTrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("trunk", 1), ("fecAuto", 2), ("saTrunk", 3), ("lacpTrk", 4), ("none", 5), ("dtLacpTrk", 6), ("dtTrunk", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchPortTrunkType.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPortTrunkType.setDescription("Used in conjunction with hpSwitchPortTrunkGroup to determine what type of trunk and which group it belongs to. If hpSwitchPortTrunkGroup is set to 0, trunking is disabled on the port and this variable becomes a 'don't care'")
hpSwitchPortTrunkLACPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("active", 2), ("passive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchPortTrunkLACPStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPortTrunkLACPStatus.setDescription('Used in conjunction with hpSwitchPortTrunkType. When the trunk is a LACP trunk, this variable defines its administrative status')
hpSwitchPortMDIXStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-applicable", 1), ("mdi", 2), ("mdix", 3), ("automdix", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortMDIXStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPortMDIXStatus.setDescription("Shows the MDI/MDIX setting for an RJ-45 port. Returns a value of 'not-applicable' for all ports except RJ-45 ports.")
hpSwitchPortAutoMDIX = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-applicable", 1), ("mdi", 2), ("mdix", 3), ("automdix", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchPortAutoMDIX.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPortAutoMDIX.setDescription("Sets the MDI/MDIX value for an RJ-45 port. Negates need for crossover cables. 'automdix', 'mdi', or 'mdix' may be set when the port configuration is set to any auto-negotiation mode, for example 'auto' or 'auto-100', or to any of the fixed-configuration modes, for example '100-full'. The MDI/MDIX value is maintained across port configuration mode changes.")
hpSwitchPortLACPKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchPortLACPKey.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPortLACPKey.setDescription('This is the key associated with the port. The user can configure this key to control the dynamic link aggregation. The ports with the same key can be aggregated in the single trunk. The key can also be configured with dot3adAggPortActorAdminKey mib but it will be created only when the LACP is enabled on the port.')
hpSwitchPortTrafficTemplateName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortTrafficTemplateName.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPortTrafficTemplateName.setDescription('The name of Traffic template that is applied to this port defining the priority to queue mapping.')
hpSwitchPortEEEAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchPortEEEAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPortEEEAdminStatus.setDescription('This indicates the Admin status of the port EEE. This says whether energy-efficient-ethernet is enabled or disabled on the port.')
hpSwitchPortEEEOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("active", 2), ("inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortEEEOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPortEEEOperStatus.setDescription('This indicates the current operational status of the port EEE. NotSupported indicates that the local PHY do not have EEE capability. Active indicates that the port is operating in EEE mode. Inactive indicates that EEE is disabled on the port or EEE is disabled on the remote end port.')
hpSwitchPortEEECurrentTwSysTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortEEECurrentTwSysTx.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchPortEEECurrentTwSysTx.setDescription('This indicates the current period of time the system has to wait between a request to transmit and its readiness to transmit.')
hpSwitchPortEEEMinTwSysTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortEEEMinTwSysTx.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchPortEEEMinTwSysTx.setDescription('This indicates the minimum period of time the system has to wait between a request to transmit and its readiness to transmit.')
hpSwitchPortEEEMaxTwSysTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortEEEMaxTwSysTx.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchPortEEEMaxTwSysTx.setDescription('This indicates the maximum period of time the system has to wait between a request to transmit and its readiness to transmit.')
hpSwitchPortPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortPvid.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPortPvid.setDescription('This indicates the vlan in which the given port is untagged in.')
hpSwitchPortTaggedVlanMap1k = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortTaggedVlanMap1k.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPortTaggedVlanMap1k.setDescription('A string of octets containing one bit per VLAN ID in the range 1 through 1024. The first octet corresponds to VLAN IDs 1 through 8, the second octet to VLAN IDs 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered VLAN ID, and the least significant bit represents the highest numbered VLAN ID. If a bit is set to 1, then the given port is tagged in the corresponding VLAN .')
hpSwitchPortTaggedVlanMap2k = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortTaggedVlanMap2k.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPortTaggedVlanMap2k.setDescription('A string of octets containing one bit per VLAN ID in the range 1025 through 2048. The first octet corresponds to VLAN IDs 1025 through 1032, the second octet to VLAN IDs 1033 through 1040, etc. Within each octet, the most significant bit represents the lowest numbered VLAN ID, and the least significant bit represents the highest numbered VLAN ID.If a bit is set to 1, then the given port is tagged in the corresponding VLAN .')
hpSwitchPortTaggedVlanMap3k = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortTaggedVlanMap3k.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPortTaggedVlanMap3k.setDescription('A string of octets containing one bit per VLAN ID in the range 2049 through 3072. The first octet corresponds to VLAN IDs 2049 through 2056, the second octet to VLAN IDs 2057 through 2064, etc. Within each octet, the most significant bit represents the lowest numbered VLAN ID, and the least significant bit represents the highest numbered VLAN ID.If a bit is set to 1, then the given port is tagged in the corresponding VLAN .')
hpSwitchPortTaggedVlanMap4k = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortTaggedVlanMap4k.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPortTaggedVlanMap4k.setDescription('A string of octets containing one bit per VLAN ID in the range 3073 through 4096. The first octet corresponds to VLAN IDs 3073 through 3080, the second octet to VLAN IDs 3081 through 3088, etc. Within each octet, the most significant bit represents the lowest numbered VLAN ID, and the least significant bit represents the highest numbered VLAN ID. If a bit is set to 1, then the given port is tagged in the corresponding VLAN .')
hpSwitchPortEEECurrentTwSysTx1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortEEECurrentTwSysTx1.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPortEEECurrentTwSysTx1.setDescription('This indicates the current period of time the system has to wait between a request to transmit and its readiness to transmit.')
hpSwitchPortEEEMinTwSysTx1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortEEEMinTwSysTx1.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPortEEEMinTwSysTx1.setDescription('This indicates the minimum period of time the system has to wait between a request to transmit and its readiness to transmit.')
hpSwitchPortEEEMaxTwSysTx1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortEEEMaxTwSysTx1.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPortEEEMaxTwSysTx1.setDescription('This indicates the maximum period of time the system has to wait between a request to transmit and its readiness to transmit.')
hpSwitchPortPtpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchPortPtpAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPortPtpAdminStatus.setDescription('The administrative status of IEEE 1588 transparent mode on this port. When enabled, the port will operate in IEEE 1588 end-to-end transparent mode where the correction field of PTP packets egressing this port will be updated with the elapsed time since the packet entered the switch. This object can only be enabled on ports that support IEEE 1588 and cannot be enabled when stacking is enabled.')
hpSwitchPortPtpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("active", 2), ("inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortPtpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPortPtpOperStatus.setDescription('The operational status of IEEE 1588 transparent mode on this port. notSupported(1) - indicates the port is not capable of supporting IEEE 1588 active(2) - indicates IEEE 1588 is enabled on the port inactive(3) - indicates the port is capable of supporting IEEE 1588, but it is administratively disabled.')
hpSwitchPortPtpRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortPtpRxCount.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPortPtpRxCount.setDescription('The number of IEEE 1588 PTP Sync and Delay Request packets received by this port. Packets are counted even when PTP is administratively disabled on the port.')
hpSwitchPortPtpTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortPtpTxCount.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPortPtpTxCount.setDescription('The number of IEEE 1588 PTP Sync and Delay Request packets sent by this port. Packets are counted even when PTP is administratively disabled on the port.')
hpSwitchPortNetworkDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchPortNetworkDevice.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPortNetworkDevice.setDescription('This object marks a port being connected with a network infra device (switch / AP / router).')
hpSwitchPortConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 2), ConfigStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortConfigStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPortConfigStatus.setDescription('The configuration status of this group of objects. If one or more variables in this group were reconfigured since last reboot and required reboot to take effect, the value of this variable will be set to notInService.')
hpSwitchLinkUpDownTrapAllPortsStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchLinkUpDownTrapAllPortsStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchLinkUpDownTrapAllPortsStatus.setDescription('Used to either enable/disable the Link Up/Link Down traps for all the ports.')
hpSwitchIpxConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 4))
hpSwitchIpxConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 4, 2), ConfigStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchIpxConfigStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchIpxConfigStatus.setDescription('The status of the IPX configuration table.')
hpSwitchIpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 5))
hpSwitchIpTimepAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("disable", 2), ("dhcp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchIpTimepAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchIpTimepAdminStatus.setDescription('The operational status of the Time protocol.')
hpSwitchIpTimepServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 5, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchIpTimepServerAddr.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchIpTimepServerAddr.setDescription('### deprecated ### The IP address of the Time server.')
hpSwitchIpTimepPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchIpTimepPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchIpTimepPollInterval.setDescription('The client poll interval of the Time server in minutes.')
hpSwitchIpConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 5, 5), ConfigStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchIpConfigStatus.setStatus('obsolete')
if mibBuilder.loadTexts: hpSwitchIpConfigStatus.setDescription('The configuration status of the Timep and IP related objects.')
hpSwitchIpTftpMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("secure", 1), ("unsecure", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchIpTftpMode.setStatus('obsolete')
if mibBuilder.loadTexts: hpSwitchIpTftpMode.setDescription('The operational mode of the Tftp protocol. This object is obsoleted by hpicfDownloadTftpServerConfig.')
hpSwitchIpTimepInetServerAddrType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 5, 7), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchIpTimepInetServerAddrType.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchIpTimepInetServerAddrType.setDescription('The IP address type of the Time server.')
hpSwitchIpTimepInetServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 5, 8), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchIpTimepInetServerAddr.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchIpTimepInetServerAddr.setDescription("The IP address (of the Time server)to which this entry's addressing information pertains. hpSwitchIpTimepInetServerAddr is always interpreted within the context of hpSwitchIpTimepInetServerAddrType.")
hpSwitchIpTimepIsOobm = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 5, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchIpTimepIsOobm.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchIpTimepIsOobm.setDescription('This object indicates whether this TIMEP Server is reachable over OOBM (Out Of Band Management) interface or not. This mib object will be applicable only if there is a physical OOBM port on the device.')
hpSwitchSerialLinkConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 6))
hpSwitchSLinkBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("speedSense", 1), ("baudRate300", 2), ("baudRate600", 3), ("baudRate1200", 4), ("baudRate2400", 5), ("baudRate4800", 6), ("baudRate9600", 7), ("baudRate19200", 8), ("baudRate38400", 9), ("baudRate57600", 10), ("baudRate115200", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSLinkBaudRate.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchSLinkBaudRate.setDescription('The rate of data transfer between the console and the node. baudRate1 is speed sense.')
hpSwitchSLinkFlowCtrl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("xonXoff", 2), ("robustXonXoff", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSLinkFlowCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchSLinkFlowCtrl.setDescription('The flow-control mechanism between the console and the switch.')
hpSwitchSLinkConnInactTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSLinkConnInactTime.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchSLinkConnInactTime.setDescription('The number of minutes to wait after no character was input to log out the console. Valid values are 0 (not to log out of the console for inactivity) through 120 (two hours).')
hpSwitchSLinkModemConnTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSLinkModemConnTime.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchSLinkModemConnTime.setDescription('The number of seconds to wait for data mode and clear to send and receive ready signals after asserting request to send and terminal ready signals. Valid values are 0 (switch will wait forever for the modem) through 300 (5 minutes).')
hpSwitchSLinkModemLostRecvTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSLinkModemLostRecvTime.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchSLinkModemLostRecvTime.setDescription('The number of milliseconds the receiver ready signal is allowed to drop before the switch will disconnect the modem. Valid values are 0 (the switch will wait forever) through 5000 (5 seconds).')
hpSwitchSLinkModemDisConnTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSLinkModemDisConnTime.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchSLinkModemDisConnTime.setDescription('The number of seconds to wait after the modem is disconnected before allowing the modem to be reconnected. Valid values are 0 (allow a connection as soon as possible, the default) through 60 (1 minute).')
hpSwitchSLinkParity = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("parityNone", 1), ("parityOdd", 2), ("parityEven", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchSLinkParity.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchSLinkParity.setDescription('The type of parity to use between the console and the node.')
hpSwitchSLinkCharBits = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("char8Bits", 1), ("char7Bits", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchSLinkCharBits.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchSLinkCharBits.setDescription('The number of bits per character to use between the console and the node.')
hpSwitchSLinkStopBits = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stop1Bits", 1), ("stop1andHalfBits", 2), ("stop2Bits", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchSLinkStopBits.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchSLinkStopBits.setDescription('The number of stop bots to use when communicating between the console and the node.')
hpSwitchSLinkConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 6, 10), ConfigStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchSLinkConfigStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchSLinkConfigStatus.setDescription('The configuration status of this group of objects. If one or more variables in this group were reconfigured since last reboot and required reboot to take effect, the value of this variable will be set to notInService.')
hpSwitchFilterConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 8))
hpSwitchFilterConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 8, 1), )
if mibBuilder.loadTexts: hpSwitchFilterConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchFilterConfigTable.setDescription('A table that contains information about the traffic filter configuration in this device.')
hpSwitchFilterConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 8, 1, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchFilterIndex"))
if mibBuilder.loadTexts: hpSwitchFilterConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchFilterConfigEntry.setDescription('Information about a traffic filter configuration in this device.')
hpSwitchFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFilterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchFilterIndex.setDescription('An index that uniquely identifies a traffic filter for which this entry contains information.')
hpSwitchFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("multicast", 1), ("level-3", 2), ("port", 3), ("unicast", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchFilterType.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchFilterType.setDescription('The type of filter.')
hpSwitchFilterSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchFilterSrcPort.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchFilterSrcPort.setDescription('This variable is required when a port filter or unicast filter was configured. It will be ignored otherwise.')
hpSwitchFilterMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 8, 1, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchFilterMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchFilterMacAddr.setDescription('This variable is valid only if a unicast or multicast filter was defined. It will be ignored otherwise.')
hpSwitchFilterProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchFilterProtocolType.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchFilterProtocolType.setDescription('This variable is valid only if a level-3 filter was defined. It will be ignored otherwise. This variable will contain either a etherType (DIX Ethernet) or SAP(IEEE 802) value of the level-3 protocol.')
hpSwitchFilterPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 8, 1, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchFilterPortMask.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchFilterPortMask.setDescription('This variable specifies a group of ports whose traffic will be filtered. Each octet within the value of this object specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the switch is represented by a single bit within the value of this object.')
hpSwitchFilterEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 8, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchFilterEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchFilterEntryStatus.setDescription('The status of a filter entry.')
hpSwitchFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 8, 1, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchFilterName.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchFilterName.setDescription("This variable applies only when 'hpSwitchFilterType' is port. This variable specifies the filter name and can only be specified for named filters. Filter name can be upto 20 characters long and cannot contain tilde (~). when a entry is created without specifying this variable, port-name will be assumed as filter-name (unnamed-filter). Filter-name for named filter should be present in 'hpicfBridgeFilterName' before a port can be mapped to it.")
hpSwitchProbeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 9))
hpSwitchProbeType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ports", 1), ("vlan", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchProbeType.setStatus('obsolete')
if mibBuilder.loadTexts: hpSwitchProbeType.setDescription('If the value of this variable is equal to 1, the probe will monitor those ports specified by hpSwitchProbedPortMask, otherwise all of the port belong to the virtual LAN specified by hpSwitchProbedVlanId will be monitored.')
hpSwitchProbedVlanId = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 9, 2), VlanID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchProbedVlanId.setStatus('obsolete')
if mibBuilder.loadTexts: hpSwitchProbedVlanId.setDescription('The probed virtual LAN.')
hpSwitchProbePort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchProbePort.setStatus('obsolete')
if mibBuilder.loadTexts: hpSwitchProbePort.setDescription('The port that every packet passes through those probed ports will be copied to.')
hpSwitchProbeAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchProbeAdminStatus.setStatus('obsolete')
if mibBuilder.loadTexts: hpSwitchProbeAdminStatus.setDescription('The operational status of the probing function')
hpSwitchProbedPortMask = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 9, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchProbedPortMask.setStatus('obsolete')
if mibBuilder.loadTexts: hpSwitchProbedPortMask.setDescription('This variable specifies a group of ports which will be probed. Each octet within the value of this object specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the switch is represented by a single bit within the value of this object.')
hpSwitchFddiIpFragConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 11))
hpSwitchFddiIpFragConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 11, 1), )
if mibBuilder.loadTexts: hpSwitchFddiIpFragConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchFddiIpFragConfigTable.setDescription('A list of IP fragmentation configuration parameters for the FDDI cards in the switch.')
hpSwitchFddiIpFragConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 11, 1, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchFddiIpFragConfigIndex"))
if mibBuilder.loadTexts: hpSwitchFddiIpFragConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchFddiIpFragConfigEntry.setDescription('An Fddi IP fragmentation entry which is containing configurable options for the FDDI cards in the switch.')
hpSwitchFddiIpFragConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFddiIpFragConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchFddiIpFragConfigIndex.setDescription("A unique value for each FDDI Card. The value for each FDDI card must remain constant at least from one re-initialization of the entity's network management system to the next re-initialization.")
hpSwitchFddiIpFragConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchFddiIpFragConfigStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchFddiIpFragConfigStatus.setDescription('The operational status of FDDI IP fragmentation for each FDDI card. enable(1): FDDI card will fragment all packets which are bigger than the Ethernet packet size limitation, 1518 Bytes. disable(2): FDDI card will drop all packets which are bigger than the Ethernet packet size limitation, 1518 Bytes.')
hpSwitchABCConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 12))
hpSwitchABCConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 12, 1), )
if mibBuilder.loadTexts: hpSwitchABCConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchABCConfigTable.setDescription('A list of Automatic Broadcast Control (ABC disable/enable entries for each VLAN on the switch.')
hpSwitchABCConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 12, 1, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchABCConfigVlan"))
if mibBuilder.loadTexts: hpSwitchABCConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchABCConfigEntry.setDescription('Contains the ABC status for each VLAN on the switch, including IP RIP control and IPX RIP/SAP control.')
hpSwitchABCConfigVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 12, 1, 1, 1), VlanID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchABCConfigVlan.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchABCConfigVlan.setDescription('The user is able to enable/disable ABC on a per VLAN basis, so the VLAN serves as an index into the ABC configuration table.')
hpSwitchABCConfigControl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ipipx", 1), ("ip", 2), ("ipx", 3), ("disable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchABCConfigControl.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchABCConfigControl.setDescription('ABC control is either IP&IPX or IP or IPX or disabled for each VLAN on the switch.')
hpSwitchABCConfigIpRipControl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchABCConfigIpRipControl.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchABCConfigIpRipControl.setDescription('IP RIP control. If this feature is enabled then IP RIP packets will only be forwarded on ports, within its VLAN domain, that have heard RIPs before. If this feature is disabled then IP RIP packets seen by a given port will be forwarded to all ports within its VLAN domain.')
hpSwitchABCConfigIpxRipSapControl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchABCConfigIpxRipSapControl.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchABCConfigIpxRipSapControl.setDescription('IPX RIP/SAP control. If this feature is enabled then IPX RIP/SAP packets will only be forwarded on ports, within its VLAN domain, that have previously seen RIP/SAP packets. If this feature is disabled then IPX RIP and SAP packets seen by a given port will be forwarded to all ports within its VLAN domain.')
hpSwitchABCConfigVlanBcastLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchABCConfigVlanBcastLimit.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchABCConfigVlanBcastLimit.setDescription('The percentage of network bandwidth consumed by broadcast traffic through VLAN. If the value of this variable is 0, there will be no broadcast limit. There is a default value chosen when ABC is enabled.')
hpSwitchABCConfigAutoGatewayConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchABCConfigAutoGatewayConfig.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchABCConfigAutoGatewayConfig.setDescription('If this feature is enabled then DHCP packets both ucast and bcast with UDP destination port 68 will be intercepted. DHCP packets with the router option in the options field in the DHCP message will be modified so that the first daddress in the router option is the same as the clients address. Thus the client will be its own default gateway. If this feature is disabled DHCP packets will be forwarded as usual.')
hpSwitchStpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14))
hpSwitchStpVlanTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 1), )
if mibBuilder.loadTexts: hpSwitchStpVlanTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchStpVlanTable.setDescription('A table that contains vlan-specific information for the Spanning Tree Protocol.')
hpSwitchStpVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 1, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchStpVlan"))
if mibBuilder.loadTexts: hpSwitchStpVlanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchStpVlanEntry.setDescription('A list of information maintained by every port about the Spanning Tree Protocol state for that port.')
hpSwitchStpVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 1, 1, 1), VlanID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchStpVlan.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchStpVlan.setDescription('The VLAN ID for which this entry contains STP configuration.')
hpSwitchStpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchStpAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchStpAdminStatus.setDescription('The admin status of the spanning tree protocol.')
hpSwitchStpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchStpPriority.setReference('IEEE 802.1D-1990: Section 4.5.3.7')
if mibBuilder.loadTexts: hpSwitchStpPriority.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchStpPriority.setDescription('The value of the write-able portion of the Bridge ID, i.e., the first two octets of the (8 octet long) Bridge ID. The other (last) 6 octets of the Bridge ID are given by the value of dot1dBaseBridgeAddress.')
hpSwitchStpMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 1, 1, 4), Timeout()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchStpMaxAge.setReference('IEEE 802.1D-1990: Section 4.5.3.4')
if mibBuilder.loadTexts: hpSwitchStpMaxAge.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchStpMaxAge.setDescription('The maximum age of Spanning Tree Protocol information learned from the network on any port before it is discarded, in units of hundredths of a second. This is the actual value that this bridge is currently using.')
hpSwitchStpHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 1, 1, 5), Timeout()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchStpHelloTime.setReference('IEEE 802.1D-1990: Section 4.5.3.5')
if mibBuilder.loadTexts: hpSwitchStpHelloTime.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchStpHelloTime.setDescription('The amount of time between the transmission of Configuration bridge PDUs by this node on any port when it is the root of the spanning tree or trying to become so, in units of hundredths of a second. This is the actual value that this bridge is currently using.')
hpSwitchStpForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 1, 1, 6), Timeout()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchStpForwardDelay.setReference('IEEE 802.1D-1990: Section 4.5.3.6')
if mibBuilder.loadTexts: hpSwitchStpForwardDelay.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchStpForwardDelay.setDescription('This time value, measured in units of hundredths of a second, controls how fast a port changes its spanning state when moving towards the Forwarding state. The value determines how long the port stays in each of the Listening and Learning states, which precede the Forwarding state. This value is also used, when a topology change has been detected and is underway, to age all dynamic entries in the Forwarding Database. [Note that this value is the one that this bridge is currently using, in contrast to dot1dBridgeForwardDelay which is the value that this bridge and all others would start using if/when this bridge were to become the root.]')
hpSwitchStpPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 2), )
if mibBuilder.loadTexts: hpSwitchStpPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchStpPortTable.setDescription('A table that contains port-specific information for the Spanning Tree Protocol.')
hpSwitchStpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 2, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchStpPort"))
if mibBuilder.loadTexts: hpSwitchStpPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchStpPortEntry.setDescription('A list of information maintained by every port about the Spanning Tree Protocol state for that port.')
hpSwitchStpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchStpPort.setReference('IEEE 802.1D-1990: Section 6.8.2.1.2')
if mibBuilder.loadTexts: hpSwitchStpPort.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchStpPort.setDescription('The port number of the port for which this entry contains Spanning Tree Protocol management information.')
hpSwitchStpPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 2, 1, 2), HpSwitchPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchStpPortType.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchStpPortType.setDescription('The type of port.')
hpSwitchStpPortSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 2, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchStpPortSrcMac.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchStpPortSrcMac.setDescription('The source MAC address used by the spanning tree protocol.')
hpSwitchStpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchStpPortPriority.setReference('IEEE 802.1D-1990: Section 4.5.5.1')
if mibBuilder.loadTexts: hpSwitchStpPortPriority.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchStpPortPriority.setDescription('The value of the priority field which is contained in the first (in network byte order) octet of the (2 octet long) Port ID. The other octet of the Port ID is given by the value of dot1dStpPort.')
hpSwitchStpPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchStpPortPathCost.setReference('IEEE 802.1D-1990: Section 4.5.5.3')
if mibBuilder.loadTexts: hpSwitchStpPortPathCost.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchStpPortPathCost.setDescription('The contribution of this port to the path cost of paths towards the spanning tree root which include this port. 802.1D-1990 recommends that the default value of this parameter be in inverse proportion to the speed of the attached LAN.')
hpSwitchStpPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("fast", 2), ("uplink", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchStpPortMode.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchStpPortMode.setDescription('If the value of this variable is set to fast(2), the port will go directly into the Forwarding State when a device is connected to it. Use this feature only on ports that are connected to an individual PC or Workstation, to allow these ports to come up and move quickly to the Forwarding State instead of going through the normal STP initialization process. Caution: Changing the value of this variable to fast(2) on ports connected to a hub or switch may cause loops in your network.')
hpSwitchStpPortBpduFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchStpPortBpduFilter.setStatus('optional')
if mibBuilder.loadTexts: hpSwitchStpPortBpduFilter.setDescription('Setting True will cause port to ignore ingress BPDUs and not generate egress BPDUs, as the result the port will stay in forwarding state. Default is False.')
hpSwitchStpPortBpduProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchStpPortBpduProtection.setStatus('optional')
if mibBuilder.loadTexts: hpSwitchStpPortBpduProtection.setDescription('Setting True indicates that no BPDUs are expected to be received on this port. At the reception of BPDUs the BPDU protection mechanism will disable this port and port will transition into bpduError state. Default is False.')
hpSwitchStpPortErrantBpduCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchStpPortErrantBpduCounter.setStatus('optional')
if mibBuilder.loadTexts: hpSwitchStpPortErrantBpduCounter.setDescription('Counts the number of BPDUs that were not expected to be received on this port. This counter gets incremented only if hpSwitchStpPortBpduProtection, hpSwitchStpPortBpduFilter, hpSwitchStpPortPvstFilter, or hpSwitchStpPvstProtection is True for the port, otherwise it is cleared to zero.')
hpSwitchStpPortPvstFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 2, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchStpPortPvstFilter.setStatus('optional')
if mibBuilder.loadTexts: hpSwitchStpPortPvstFilter.setDescription('Setting True will cause the port to ignore incoming PVST BPDUs. Default is False.')
hpSwitchStpPortPvstProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 2, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchStpPortPvstProtection.setStatus('optional')
if mibBuilder.loadTexts: hpSwitchStpPortPvstProtection.setDescription('Setting True indicates that any PVST BPDUs arriving on this port should be discarded and that this will cause the port to be disabled. The port will remain disabled for the time period indicated by hpSwitchStpBpduProtectionTimeout. Default is False.')
hpSwitchStpTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 3), Bits().clone(namedValues=NamedValues(("errantBpdu", 0), ("newRoot", 1), ("rootGuard", 2), ("loopGuard", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchStpTrapCntl.setStatus('optional')
if mibBuilder.loadTexts: hpSwitchStpTrapCntl.setDescription("Controls generation of SNMP traps by STP-enabled switch for events defined in this MIB. The set bit means 'enabled'. - errantBpdu(0) The state of this bit specifies whether the notification trap allowed to be send when unexpected (errant) BPDU is received on a port. - newRoot(1): The state of this bit specifies whether the trap is allowed to be send when sending agent has become the new root. Currently, it is only supported in RPVST mode. - rootGuard(2): The state of this bit specifies whether the trap is allowed to be send when Root-Guard enabled port receives superior BPDUs on its interface. Currently, it is only supported in RPVST mode. - loopGuard(3): The state of this bit specifies whether the trap is allowed to be send when a Loop Guard enabled port stops receiving BPDUs from its designated port. Currently, it is only supported in RPVST mode.")
hpSwitchStpBpduProtectionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchStpBpduProtectionTimeout.setStatus('optional')
if mibBuilder.loadTexts: hpSwitchStpBpduProtectionTimeout.setDescription('The duration of time in seconds when a protected port affected by receiving of an unauthorized BPDU will remain in down state. The zero value means infinity.')
hpSwitchSTPAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSTPAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchSTPAdminStatus.setDescription("The administrative status of STP in the switch. The value 'enabled' denotes that the STP is active; 'disabled' disables it. ")
hpicfSwitchSTPVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 14, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("mstp", 3), ("rapidPvst", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfSwitchSTPVersion.setStatus('mandatory')
if mibBuilder.loadTexts: hpicfSwitchSTPVersion.setDescription('The version of Spanning Tree Protocol the bridge is currently running. ')
hpSwitchIgmpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15))
hpSwitchIgmpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 1), )
if mibBuilder.loadTexts: hpSwitchIgmpConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchIgmpConfigTable.setDescription('A table that contains information about the IGMP Querier capacity or High Priority Forward configuration on any given vlan on the switch.')
hpSwitchIgmpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 1, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchIgmpVlanIndex"))
if mibBuilder.loadTexts: hpSwitchIgmpConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchIgmpConfigEntry.setDescription('Information about the IGMP Querier feature associated with a specific virtual LAN in this device.')
hpSwitchIgmpVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 1, 1, 1), VlanID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchIgmpVlanIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchIgmpVlanIndex.setDescription('An index that uniquely identifies the IGMP configuration of a virtual LAN for which this entry contains information.')
hpSwitchIgmpState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchIgmpState.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchIgmpState.setDescription('The operational status of the IGMP support for this virtual LAN.')
hpSwitchIgmpQuerierState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchIgmpQuerierState.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchIgmpQuerierState.setDescription('The operational status of the IGMP Querier functionality for this virtual LAN.')
hpSwitchIgmpPriorityState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchIgmpPriorityState.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchIgmpPriorityState.setDescription('The operational status of the IGMP Forward with High Priority mode for this virtual LAN. This feature is now deprecated since the functionality is not supported by IGMP.')
hpSwitchIgmpQuerierInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchIgmpQuerierInterval.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchIgmpQuerierInterval.setDescription('The time (in seconds) to wait between Querier election cycles for this virtual LAN.')
hpSwitchIgmpProxyDomainMap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchIgmpProxyDomainMap.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchIgmpProxyDomainMap.setDescription('Denotes the IGMP proxy domains that are associated with this VLAN. Only IGMP proxy domains that already exist can be associated.')
hpSwitchIgmpPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 2), )
if mibBuilder.loadTexts: hpSwitchIgmpPortConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchIgmpPortConfigTable.setDescription('A table that contains information about the IGMP port configurations on this switch.')
hpSwitchIgmpPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 2, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchIgmpPortIndex"))
if mibBuilder.loadTexts: hpSwitchIgmpPortConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchIgmpPortConfigEntry.setDescription('The information associated with each IGMP port configuration.')
hpSwitchIgmpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchIgmpPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchIgmpPortIndex.setDescription('The ifIndex value which uniquely identifies a row in the Interfaces Table.')
hpSwitchIgmpPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 2, 1, 2), HpSwitchPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchIgmpPortType.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchIgmpPortType.setDescription('The type of port.')
hpSwitchIgmpIpMcastState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("blocked", 2), ("forward", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchIgmpIpMcastState.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchIgmpIpMcastState.setDescription('The operational status of the IGMP feature for this port or trunk. 1 implies that all IP Multicast traffic will be monitored on the port, 2 implies that IP Multicast traffic will be dropped on the port, and 3 implies that all IP Multicast traffic will be forwarded without the switch examining it.')
hpSwitchIgmpPortConfigTable2 = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 3), )
if mibBuilder.loadTexts: hpSwitchIgmpPortConfigTable2.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchIgmpPortConfigTable2.setDescription('A table that contains information about the IGMP port configurations on this switch. This table supersedes hpSwitchIgmpPortConfigTable for products which support multiple VLANs on each port.')
hpSwitchIgmpPortConfigEntry2 = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 3, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchIgmpPortVlanIndex2"), (0, "CONFIG-MIB", "hpSwitchIgmpPortIndex2"))
if mibBuilder.loadTexts: hpSwitchIgmpPortConfigEntry2.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchIgmpPortConfigEntry2.setDescription('The information associated with each IGMP port configuration.')
hpSwitchIgmpPortVlanIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchIgmpPortVlanIndex2.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchIgmpPortVlanIndex2.setDescription('The Vlan Index value which uniquely identifies a row in the Interfaces Table.')
hpSwitchIgmpPortIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchIgmpPortIndex2.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchIgmpPortIndex2.setDescription('The ifIndex value which uniquely identifies a row in the Interfaces Table.')
hpSwitchIgmpPortType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 3, 1, 3), HpSwitchPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchIgmpPortType2.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchIgmpPortType2.setDescription('The type of port.')
hpSwitchIgmpIpMcastState2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("blocked", 2), ("forward", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchIgmpIpMcastState2.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchIgmpIpMcastState2.setDescription('The operational status of the IGMP feature for this port or trunk. 1 implies that all IP Multicast traffic will be monitored on the port, 2 implies that IP Multicast traffic will be dropped on the port, and 3 implies that all IP Multicast traffic will be forwarded without the switch examining it.')
hpSwitchIgmpPortForcedLeaveState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchIgmpPortForcedLeaveState.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchIgmpPortForcedLeaveState.setDescription("The operational status of the IGMP feature for this port or trunk indicates whether any IGMP V2 Leaves received for an IP Multicast group will cause the group to be deleted after the hpSwitchIgmpForcedLeaveInterval if no new IGMP V2 Reports are received for that group. Normal behavior is for a group issuing a Leave to be deleted after the Querier's Maximum Response time if no IGMP V2 Report is received.")
hpSwitchIgmpPortFastLeaveState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchIgmpPortFastLeaveState.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchIgmpPortFastLeaveState.setDescription("The operational status of the IGMP feature for this port or trunk indicates whether any IGMP V2 Leaves received for an IP Multicast group will cause the group to be deleted immediately on single- connection ports. Normal behavior is for a group issuing a Leave to be deleted after the Querier's Maximum Response time if no IGMP V2 Report is received.")
hpSwitchIgmpForcedLeaveInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchIgmpForcedLeaveInterval.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchIgmpForcedLeaveInterval.setDescription("When a port's hpSwitchIgmpPortForcedLeaveState is enabled, this is the amount of time allowed for an IGMP V2 Report to arrive and cancel deletion of a multicast group requested by a previous IGMP V2 Leave request.")
hpSwitchCosConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17))
hpSwitchCosPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 1), )
if mibBuilder.loadTexts: hpSwitchCosPortConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosPortConfigTable.setDescription('A table that contains information about the CoS port configurations on this switch.')
hpSwitchCosPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 1, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchCosPortIndex"))
if mibBuilder.loadTexts: hpSwitchCosPortConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosPortConfigEntry.setDescription('The information associated with each CoS port configuration.')
hpSwitchCosPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchCosPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosPortIndex.setDescription('The ifIndex value which uniquely identifies a row in the Interfaces Table.')
hpSwitchCosPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 1, 1, 2), HpSwitchPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchCosPortType.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchCosPortType.setDescription('The type of port.')
hpSwitchCosPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosPortPriority.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosPortPriority.setDescription('The 802.1p priority value to assign to packets received on the specified port. This value will be inserted in the 802.1Q tag and the packet will be placed in the appropriate outbound port queue. The value of 255 is used to indicate No Override.')
hpSwitchCosPortDSCPPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosPortDSCPPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosPortDSCPPolicy.setDescription('The DSCP Policy to assign to packets received on the specified Port. This is an index into the hpSwitchCosDSCPPolicy table, or the value 255 indicating no DSCP Policy exists. This policy is associated with an 802.1p priority value, which will be inserted in the 802.1Q tag and will cause the packet to be placed in the appropriate outbound port queue. When the packet is IP protocol type, the DSCP policy value (a Differentiated Services codepoint) will also be written into the Differentiated-Services field of the IP Type-of-Service byte.')
hpSwitchCosPortResolvedPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchCosPortResolvedPriority.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosPortResolvedPriority.setDescription('The 802.1p priority that will be applied to packets received on the specified port. This value represents the actual operating value for this CoS port entry. A value of 255 represents no override of the incoming priority.')
hpSwitchCosPortApplyPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noPolicyOverride", 1), ("applyHpSwitchCosPortPriority", 2), ("applyHpSwitchCosPortDSCPPolicy", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosPortApplyPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosPortApplyPolicy.setDescription('This object determines which configuration policy, noPolicyOverride, hpSwitchCosPortPriority or hpSwitchCosPortDSCPPolicy, applies for the given Port CoS entry. These configuration policies are mutually exclusive of one another.')
hpSwitchCosPortTrustMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("trustNone", 1), ("trust8021pCos", 2), ("trustTosIpPrecedence", 3), ("trustTosDiffserv", 4), ("trustAll", 5), ("trustPartnerDevice", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosPortTrustMode.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosPortTrustMode.setDescription('This object determines which trust mode, trustNone, trust802.1pCos, trustTosIpPrecedence, trustTosDffserv, trustAll or trustPartnerDevice applies for the given Port CoS entry. When the trust-mode is anything other than trustNone, the inbound QoS values for the trusted fields will be preserved and any associated inbound queuing will occur. For all configurations, any inbound values NOT specifically included in the trust-mode will be cleared. The default setting is trustAll. These configuration modes are mutually exclusive of one another.')
hpSwitchCosPortPartnerDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 1, 1, 8), HpPartnerDeviceTypeList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosPortPartnerDevice.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosPortPartnerDevice.setDescription('This object lists the device-types for which DSCP priority is trusted when hpSwitchCosPortTrustMode is set to trustPartnerDevice.')
hpSwitchCosPortTrustedPartnerState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("untrusted", 1), ("trusted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchCosPortTrustedPartnerState.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosPortTrustedPartnerState.setDescription("This object is set to 'trusted' when an approved device is detected. The default value is 'untrusted'.")
hpSwitchCosVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 2), )
if mibBuilder.loadTexts: hpSwitchCosVlanConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosVlanConfigTable.setDescription('A table that contains information about the CoS Vlan configurations on this switch.')
hpSwitchCosVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 2, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchCosVlanIndex"))
if mibBuilder.loadTexts: hpSwitchCosVlanConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosVlanConfigEntry.setDescription('The information associated with each CoS Vlan configuration.')
hpSwitchCosVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 2, 1, 1), VlanID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchCosVlanIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosVlanIndex.setDescription('The index that uniquely identifies the CoS configuration of a virtual LAN for which this entry contains information.')
hpSwitchCosVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosVlanPriority.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosVlanPriority.setDescription('The 802.1p priority value to assign to packets received on the specified Vlan. This value will be inserted in the 802.1Q tag and the packet will be placed in the appropriate outbound port queue. The value of 255 is used to indicate No Override.')
hpSwitchCosVlanDSCPPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosVlanDSCPPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosVlanDSCPPolicy.setDescription('The DSCP Policy to assign to packets received on the specified Vlan. This is an index into the hpSwitchCosDSCPPolicy table, or the value 255 indicating no DSCP Policy exists. This policy is associated with an 802.1p priority value, which will be inserted in the 802.1Q tag and will cause the packet to be placed in the appropriate outbound port queue. When the packet is IP protocol type, the DSCP policy value (a Differentiated Services codepoint) will also be written into the Differentiated-Services field of the IP Type-of-Service byte.')
hpSwitchCosVlanResolvedPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchCosVlanResolvedPriority.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosVlanResolvedPriority.setDescription('The 802.1p priority that will be applied to packets received on the specified VLAN. This value represents the actual operating value for this CoS vlan entry. A value of 255 represents no override of the incoming priority .')
hpSwitchCosVlanApplyPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noPolicyOverride", 1), ("applyHpSwitchCosVlanPriority", 2), ("applyHpSwitchCosVlanDSCPPolicy", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosVlanApplyPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosVlanApplyPolicy.setDescription('This object determines which configuration policy, noPolicyOverride, hpSwitchCosVlanPriority or hpSwitchCosDSCPPolicy, applies for this given Vlan CoS entry. These configuration policies are mutually exclusive of one another.')
hpSwitchCosProtocolConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 3), )
if mibBuilder.loadTexts: hpSwitchCosProtocolConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosProtocolConfigTable.setDescription('A table that contains information about the CoS protocol type configurations on this switch.')
hpSwitchCosProtocolConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 3, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchCosProtocolType"))
if mibBuilder.loadTexts: hpSwitchCosProtocolConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosProtocolConfigEntry.setDescription('The information associated with each CoS protocol configuration.')
hpSwitchCosProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ip", 1), ("ipx", 2), ("arp", 3), ("decnet", 4), ("appletalk", 5), ("sna", 6), ("netbios", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchCosProtocolType.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosProtocolType.setDescription('Packets with this protocol type will receive the new priority value.')
hpSwitchCosProtocolPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosProtocolPriority.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosProtocolPriority.setDescription('The 802.1p priority value to assign to packets received for the specified protocol. This value will be inserted in the 802.1Q tag and the packet will be placed in the appropriate outbound port queue. The value of 255 is used to indicate No Override.')
hpSwitchCosAddressConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 4), )
if mibBuilder.loadTexts: hpSwitchCosAddressConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosAddressConfigTable.setDescription('A table that contains information about the CoS address configurations on this switch.')
hpSwitchCosAddressConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 4, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchCosAddressIndex"))
if mibBuilder.loadTexts: hpSwitchCosAddressConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosAddressConfigEntry.setDescription('The information associated with each CoS address configuration.')
hpSwitchCosAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchCosAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosAddressIndex.setDescription('The index that uniquely identifies the CoS configuration for an address for which this entry contains information.')
hpSwitchCosAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip", 1), ("ipv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosAddressType.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosAddressType.setDescription('The type of address to configure. Default is ip (IPv4). This field indicates which of the other address fields must be configured for this table entry. ')
hpSwitchCosAddressIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 4, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosAddressIp.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosAddressIp.setDescription('This variable is valid only if an IPv4 CoS configuration was defined. It will be ignored otherwise. Packets with this IPv4 address as a source or destination will receive the new priority value.')
hpSwitchCosAddressPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosAddressPriority.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosAddressPriority.setDescription('The 802.1p priority value to assign to packets received for the specified address. This value will be inserted in the 802.1Q tag and the packet will be placed in the appropriate outbound port queue.')
hpSwitchCosAddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 4, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosAddressStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosAddressStatus.setDescription('The status of a Cos Address entry.')
hpSwitchCosAddressDSCPPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosAddressDSCPPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosAddressDSCPPolicy.setDescription('The DSCP Policy to assign to packets received for the specified address. This is an index into the hpSwitchCosDSCPPolicy table, or the value 255 indicating no DSCP Policy exists. This policy is associated with an 802.1p priority value, which will be inserted in the 802.1Q tag and will cause the packet to be placed in the appropriate outbound port queue. The DSCP policy value (a Differentiated Services codepoint) will also be written into the Differentiated-Services field of the IP Type-of-Service byte.')
hpSwitchCosAddressResolvedPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchCosAddressResolvedPriority.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosAddressResolvedPriority.setDescription('The 802.1p priority that will be applied to packets received for the specified address. This value represents the actual operating value for this given address entry. A value of 255 represents no override.')
hpSwitchCosAddressApplyPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("applyHpSwitchCosAddressPriority", 1), ("applyHpSwitchCosAddressDSCPPolicy", 2))).clone('applyHpSwitchCosAddressPriority')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosAddressApplyPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosAddressApplyPolicy.setDescription('This object determines which configuration policy, hpSwitchCosAddressPriority or hpSwitchCosDSCPPolicy, applies for the given Address CoS entry. These configuration policies are mutually exclusive of one another.')
hpSwitchCosIpv4AddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 4, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosIpv4AddressMask.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosIpv4AddressMask.setDescription('This value is applied as a direct IPv4-address mask when an IPv4 CoS configuration is defined for this table entry. It will be ignored otherwise. The default mask value is 255.255.255.255, which specifies the exact IPv4 address defined in hpSwitchCosAddressIp (i.e., no subnet-masking is performed).')
hpSwitchCosAddressIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 4, 1, 10), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosAddressIpv6.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosAddressIpv6.setDescription('This variable is valid only if an IPv6 CoS configuration was defined. It will be ignored otherwise. Packets with this IPv6 address as a source or destination will receive the new priority value.')
hpSwitchCosAddressIpv6PrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 4, 1, 11), InetAddressPrefixLength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosAddressIpv6PrefixLength.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosAddressIpv6PrefixLength.setDescription('The prefix length associated with the hpSwitchCosAddressIpv6 object, if an IPv6 CoS configuration is valid and hpSwitchCosAddressType is type ipv6. This variable will otherwise be ignored. The prefix length for an IPv6 entry functions in the same way as an address mask for an IPv4 entry. The default value of this object is 128, which specifies the exact IPv6 address defined in hpSwitchCosAddressIpv6 (i.e., no subnet-masking is performed).')
hpSwitchCosTosConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 5))
hpSwitchCosTosConfigMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("ipprecedence", 2), ("diffserv", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosTosConfigMode.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosTosConfigMode.setDescription('The operational status of Type of Service based Class of Service.')
hpSwitchCosTosConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 5, 2), )
if mibBuilder.loadTexts: hpSwitchCosTosConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosTosConfigTable.setDescription('A table that contains information about the CoS Type of Service configurations on this switch. This table is used only when the hpSwitchCosTosConfigMode is set to diffserv.')
hpSwitchCosTosConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 5, 2, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchCosTosIndex"))
if mibBuilder.loadTexts: hpSwitchCosTosConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosTosConfigEntry.setDescription('The information associated with each CoS TOS configuration.')
hpSwitchCosTosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchCosTosIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosTosIndex.setDescription('Packets with this value in the upper bits of the Type of Service field of the IP protocol header will receive the new priority value. For Differentiated Services the upper 6 bits of the TOS field are used.')
hpSwitchCosTosPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosTosPriority.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchCosTosPriority.setDescription('The 802.1p priority value to assign to packets received for the specified TOS. This value will be inserted in the 802.1Q tag and the packet will be placed in the appropriate outbound port queue. The value of 255 is used to indicate No Override.')
hpSwitchCosTosDSCPPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosTosDSCPPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosTosDSCPPolicy.setDescription('The DSCP Policy to assign to packets received for the specified ToS codepoint. This is an index into the hpSwitchCosDSCPPolicy table, or the value 255 indicating no DSCP Policy exists. The DSCP policy is associated with an 802.1p priority value, which will be inserted in the 802.1Q tag and will cause the packet to be placed in the appropriate outbound port queue. The DSCP policy value (a Differentiated Services codepoint) will also replace the incoming value of the Differentiated Services field of the IP Type-of-Service byte.')
hpSwitchCosTosResolvedPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchCosTosResolvedPriority.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosTosResolvedPriority.setDescription('The 802.1p priority that will be applied to packets received for the specified ToS. This value represents the actual operating value for this given ToS entry. A value of 255 represents no override of the incoming priority. If hpSwitchCosTosApplyPolicy is set to applyInheritedPriority, the parallel codepoint in the hpSwitchCosDSCPPolicyConfigTable is used to determine the operating priority. Otherwise if set to applyHpSwitchCosTosDSCPPolicy, the priority for the codepoint that the hpSwitchCosTosDSCPPolicy is indexing will be used.')
hpSwitchCosTosApplyPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("applyInheritedPriority", 1), ("applyHpSwitchCosTosDSCPPolicy", 2))).clone('applyInheritedPriority')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosTosApplyPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosTosApplyPolicy.setDescription('This object determines which configuration policy, applyInheritedPriority or hpSwitchCosTosDSCPPolicy, applies for the given Tos CoS entry.')
hpSwitchCosDSCPPolicyConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 6), )
if mibBuilder.loadTexts: hpSwitchCosDSCPPolicyConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosDSCPPolicyConfigTable.setDescription('A table that contains information about the priority applied to each of the Differentiated Services Code Points.')
hpSwitchCosDSCPPolicyConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 6, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchCosDSCPPolicyIndex"))
if mibBuilder.loadTexts: hpSwitchCosDSCPPolicyConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosDSCPPolicyConfigEntry.setDescription('A list of objects describing a DiffServe Codepoint (DSCP), and the 802.1p priority to apply for that DSCP.')
hpSwitchCosDSCPPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: hpSwitchCosDSCPPolicyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosDSCPPolicyIndex.setDescription('An index to uniquely identify each row in the hpSwitchCosDSCPPolicyConfigTable.')
hpSwitchCosDSCPPolicyPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosDSCPPolicyPriority.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosDSCPPolicyPriority.setDescription('The 802.1p priority value to assign to packets with a given DSCP. This value will be inserted in the 802.1Q tag and the packet will be placed in the appropriate outbound port queue. The value of 255 is used to indicate no override of the incoming priority.')
hpSwitchCosDSCPPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosDSCPPolicyName.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosDSCPPolicyName.setDescription('A user settable name describing a DSCP policy table entry.')
hpSwitchCosAppTypeConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 7), )
if mibBuilder.loadTexts: hpSwitchCosAppTypeConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosAppTypeConfigTable.setDescription('A table that contains information about the CoS Application type configurations on the switch. An application is determined by its network source and/or destination port number.')
hpSwitchCosAppTypeConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 7, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchCosAppTypeConfigIndex"))
if mibBuilder.loadTexts: hpSwitchCosAppTypeConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosAppTypeConfigEntry.setDescription('An entry in the switch hpSwitchCosAppTypeConfigEntry Table.')
hpSwitchCosAppTypeConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpSwitchCosAppTypeConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosAppTypeConfigIndex.setDescription('An index to uniquely identify this hpSwitchCosAppType row.')
hpSwitchCosAppTypeConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("udpSrcPortConfig", 1), ("udpDestPortConfig", 2), ("udpBothPortsConfig", 3), ("tcpSrcPortConfig", 4), ("tcpDestPortConfig", 5), ("tcpBothPortsConfig", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosAppTypeConfigType.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosAppTypeConfigType.setDescription('This signifies which network port number to apply to the given CoS Application policy.')
hpSwitchCosAppTypeSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosAppTypeSrcPort.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosAppTypeSrcPort.setDescription('This object represents the source network port that this policy applies to.')
hpSwitchCosAppTypeDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosAppTypeDestPort.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosAppTypeDestPort.setDescription('This object represents the destination network port that this policy applies to.')
hpSwitchCosAppTypePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosAppTypePriority.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosAppTypePriority.setDescription('The 802.1p priority that should be applied to packets containing the particular configured source and/or destination port number in this entry. A value of 255 represents that no priority override should take place.')
hpSwitchCosAppTypeDSCPPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosAppTypeDSCPPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosAppTypeDSCPPolicy.setDescription('The DSCP Policy to assign to packets received for the specified application. This is an index into the hpSwitchCosDSCPPolicy table, or the value 255 indicating no DSCP Policy exists. This policy is associated with an 802.1p priority value, which will be inserted in the 802.1Q tag and will cause the packet to be placed in the appropriate outbound port queue. The DSCP policy value (a Differentiated Services codepoint) will also be written into the Differentiated-Services field of the IP Type-of-Service byte. The value of 255 is used to indicate No Override.')
hpSwitchCosAppTypeResolvedPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchCosAppTypeResolvedPriority.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosAppTypeResolvedPriority.setDescription('The 802.1p priority that will be applied to packets received on the specified application. This value represents the actual operating value for this CoS application entry. A value of 255 represents no override of the incoming priority')
hpSwitchCosAppTypeApplyPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("applyHpSwitchCosAppTypePriority", 1), ("applyHpSwitchCosAppTypeDSCPPolicy", 2))).clone('applyHpSwitchCosAppTypePriority')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosAppTypeApplyPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosAppTypeApplyPolicy.setDescription('This object determines which configuration policy, hpSwitchCosAppTypePriority or hpSwitchCosAppTypeDSCPPolicy, applies for the given AppType CoS entry. These configuration policies are mutually exclusive of one another.')
hpSwitchCosAppTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 7, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosAppTypeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosAppTypeStatus.setDescription('This object is used to create and delete in the hpSwitchCosAppType table.')
hpSwitchCosAppTypeMaxSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosAppTypeMaxSrcPort.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosAppTypeMaxSrcPort.setDescription('This object represents the maximum source network port that this policy applies to. If a single, specific port is being used and not a range, then value of this object is zero.')
hpSwitchCosAppTypeMaxDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 7, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosAppTypeMaxDestPort.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosAppTypeMaxDestPort.setDescription('This object represents the maximum destination network port that this policy applies to. If a single, specific port is being used and not a range, then value of this object is zero.')
hpSwitchCosAppTypeIpPacketType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipv4PacketsOnly", 1), ("ipv6PacketsOnly", 2), ("ipv4AndIpv6Packets", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCosAppTypeIpPacketType.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosAppTypeIpPacketType.setDescription('This object represents the type of IP packet for which this TCP and/or UDP application QoS will apply. The default is IPv4.')
hpSwitchCosLastChange = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchCosLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchCosLastChange.setDescription("The value of the agent's sysUptime when the last time this device experienced a change in the Class of Service configuration.")
hpSwitchConfigCosLastConfigError = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("aclQosNoError", 1), ("aclQosTooManyRulesError", 2), ("aclQosTooManyMasksError", 3), ("aclQosTooManyRangesError", 4), ("aclQosTooManyMetersError", 5), ("aclQosTooManyLookupsError", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchConfigCosLastConfigError.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchConfigCosLastConfigError.setDescription('The type of the last QoS configuration result or error. This object is updated for each new QoS configuration. It is reset upon reboot.')
hpSwitchQueueWatchTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 10), )
if mibBuilder.loadTexts: hpSwitchQueueWatchTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchQueueWatchTable.setDescription('A table that contains port-specific information for queue monitoring.')
hpSwitchQueueWatchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 10, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchQueueWatchPort"))
if mibBuilder.loadTexts: hpSwitchQueueWatchEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchQueueWatchEntry.setDescription('A list of information maintained by every port about queue monitoring for that port.')
hpSwitchQueueWatchPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchQueueWatchPort.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchQueueWatchPort.setDescription('The port number of the port for which this entry contains Queue monitoring information.')
hpSwitchQueueWatchState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 17, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("outbound", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchQueueWatchState.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchQueueWatchState.setDescription('If configured for outbound, egress queues for the corresponding port will be monitored for drops.')
hpSwitchMeshConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 18))
hpSwitchMeshMulticastAgingMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aging", 1), ("nonaging", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchMeshMulticastAgingMode.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchMeshMulticastAgingMode.setDescription('With meshing active, a value of aging will cause learned multicast addresses to be aged out within the required address aging interval. A setting of non-aging will prevent learned multicast addresses from being removed from the switch. Multicast addresses learned while in non-aging mode are not removed until the switch is rebooted.')
hpSwitchMeshBackwardCompatibility = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 18, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchMeshBackwardCompatibility.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchMeshBackwardCompatibility.setDescription('Due to some hardware differences, the Series 1600/24xx/4000/8000 switches cannot be used directly in a mesh environment with Series 5300XL switches. Series 5300XL switches need to emulate the operation of Series 1600/24xx/4000/8000 switches in order to have a heterogeneous mesh working properly. Meshing backward-compatibility feature allows Series 5300XL switches to operate in a compatible mode in which the operation of Series 1600/24xx/4000/8000 switches are emulated. When backward-compatibility is enabled, meshing software will establish connections with Series 1600/24xx/4000/8000 switches and emulate their operation. When backward-compatibility disabled, Series 1600/24xx/4000/8000 switches in the mesh will be ignored by the Series 5300XL switches.')
hpSwitchMeshConfiguredId = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 18, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchMeshConfiguredId.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchMeshConfiguredId.setDescription('Specify a mesh id for this member. The mesh id is an optional parameter that, if specified should be unique for each switch participating in the mesh. Specifying unique IDs will improve performance by eliminating a costly mesh election process each time a participating switch is brought online. Default value of mesh configured id returns to default behavior of auto-negotiation. Mesh configured id take effect only after reboot.')
hpSwitchMeshActualId = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 18, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchMeshActualId.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchMeshActualId.setDescription('This object is a mesh id that the switches in a mesh are using currently. If mesh configured id is not specified or if it is not unique then the switches in the mesh will auto-negotiate unique IDs. Mesh Actual id is not necessary to be same as mesh configured id. Actual mesh id may differ from mesh configured id if switches in a mesh auto-negotiate unique IDs.')
hpSwitchPortIsolationConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 19))
hpSwitchPortIsolationMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 19, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchPortIsolationMode.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPortIsolationMode.setDescription('This enables the port isolation feature on the device. Note: Enabling this feature may require VLANS to be configured properly.')
hpSwitchPortIsolationConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 19, 2), )
if mibBuilder.loadTexts: hpSwitchPortIsolationConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPortIsolationConfigTable.setDescription('A table that contains information about the CoS Application type configurations on the switch. An application is determined by its network source and/or destination port number.')
hpSwitchPortIsolationConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 19, 2, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchPortIsolationPort"))
if mibBuilder.loadTexts: hpSwitchPortIsolationConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPortIsolationConfigEntry.setDescription('An entry in the switch hpSwitchPortIsolationConfigEntry Table.')
hpSwitchPortIsolationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 19, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpSwitchPortIsolationPort.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPortIsolationPort.setDescription('An entry in the IfIndex table representing a logical port on this switch.')
hpSwitchPortIsolationPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 19, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("uplink", 1), ("public", 2), ("private", 3), ("local", 4), ("group1", 5), ("group2", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchPortIsolationPortMode.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPortIsolationPortMode.setDescription('Defines the operational mode of a port when Port Isolation feature is enabled.')
hpSwitchSshConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 20))
hpSwitchSshAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSshAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchSshAdminStatus.setDescription('The status of the SSH operation.')
hpSwitchSshVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 20, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("version1", 1), ("version2", 2), ("version1or2", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSshVersion.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchSshVersion.setDescription("The version of the SSH protocol to run. 'version1' will accept connections from v1.3 or v1.5 clients. 'version2' will accept connections only from v2.0 clients. The default is 'version1_or_2' which will accept any connection which can be successfully negotiated.")
hpSwitchSshTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 20, 3), Timeout().subtype(subtypeSpec=ValueRangeConstraint(5, 120)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSshTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchSshTimeout.setDescription('The maximum length of time (in seconds) between the wakeup of SSH task and successful protocol negotiation and authentication. The default is 120 seconds.')
hpSwitchSshPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 20, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(22)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSshPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchSshPortNumber.setDescription('The port number on which SSH daemon should listen for connection requests.')
hpSwitchSshServerKeySize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 20, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bits512", 1), ("bits768", 2), ("bits1024", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSshServerKeySize.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchSshServerKeySize.setDescription('Specifies the key size (in bits) of version 1 SSH host rsa key')
hpSwitchSshFileServerAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 20, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSshFileServerAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchSshFileServerAdminStatus.setDescription('Specifies whether or not the SSH daemon will accept and process file transfer requests.')
hpSwitchSshIpVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 20, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2), ("ipv4or6", 3))).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSshIpVersion.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchSshIpVersion.setDescription("#### THIS OBJECT IS DEPRECATED #### The types of IP connections SSH will support. 'ipv4' will accept connections from Ipv4 clients. 'ipv6' will accept connections only from ipv6 clients. The default is 'ipv4or6' which will accept Connections from both ipv4 and ipv6 clients.")
hpSwitchSshReKeyStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 20, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSshReKeyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchSshReKeyStatus.setDescription('Specifies whether or not the SSH session key re-exchange is enabled. By default, SSH session key re-exchange is disabled. When this MIB is set, the switch will initiate SSH key re-exchange if the number of encrypted packets reaches 268435456. This is to comply with RFC 4251.')
hpSwitchSshReKeyTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 20, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 60)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSshReKeyTime.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchSshReKeyTime.setDescription('Specifies the session duration after which SSH session key re-exchange will be initiated. The default value of this object is 60 minutes.')
hpSwitchSshReKeyVolume = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 20, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1048576)).clone(1048576)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSshReKeyVolume.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchSshReKeyVolume.setDescription('Specifies the volume of data exchanged after which SSH session key re-exchange will be initiated. The default value of this object is 1048576 KB (1GB).')
hpSwitchPendingConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 21))
hpSwitchPendingConfigControl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 21, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("applyMstp", 1), ("resetMstp", 2), ("noAction", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchPendingConfigControl.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchPendingConfigControl.setDescription("The object controls switch pending configuration. If set to the 'applyMstp' value the object applies pending Multiple Spanning Tree Protocol (MSTP) configuration. The 'resetMstp' value, if set, triggers copying of the active MSTP configuration to the pending one. Before the pending configuration is applied its consistency is verified and the request fails if errors are detected. The value the object returns is undefined.")
hpSwitchBWMinConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 22))
hpSwitchBWMinEgressPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 22, 1), )
if mibBuilder.loadTexts: hpSwitchBWMinEgressPortConfigTable.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchBWMinEgressPortConfigTable.setDescription("New definitions under HP-ICF-RATE-LIMIT-MIB. A table that contains information about the port's egress Guaranteed Minimum Bandwidth configurations on this switch.")
hpSwitchBWMinEgressPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 22, 1, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchBWMinEgressPortIndex"))
if mibBuilder.loadTexts: hpSwitchBWMinEgressPortConfigEntry.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchBWMinEgressPortConfigEntry.setDescription("New definitions under HP-ICF-RATE-LIMIT-MIB. The information associated with each port's egress Guaranteed Minimum Bandwidth configuration.")
hpSwitchBWMinEgressPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 22, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchBWMinEgressPortIndex.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchBWMinEgressPortIndex.setDescription('New definitions under HP-ICF-RATE-LIMIT-MIB. The ifIndex value which uniquely identifies a row in the Interfaces Table.')
hpSwitchBWMinEgressPortPrctLowPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 22, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchBWMinEgressPortPrctLowPriority.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchBWMinEgressPortPrctLowPriority.setDescription('New definitions under HP-ICF-RATE-LIMIT-MIB. The percentage of Guaranteed Minimum bandwidth to be assigned to the egress Low-Priority queue for this port. Total values for all four queues must not exceed 100 percent.')
hpSwitchBWMinEgressPortPrctNormalPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 22, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchBWMinEgressPortPrctNormalPriority.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchBWMinEgressPortPrctNormalPriority.setDescription('New definitions under HP-ICF-RATE-LIMIT-MIB. The percentage of Guaranteed Minimum bandwidth to be assigned to the egress Normal-Priority queue for this port. Total values for all four queues must not exceed 100 percent.')
hpSwitchBWMinEgressPortPrctMedPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 22, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchBWMinEgressPortPrctMedPriority.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchBWMinEgressPortPrctMedPriority.setDescription('New definitions under HP-ICF-RATE-LIMIT-MIB. The percentage of Guaranteed Minimum bandwidth to be assigned to the egress Medium-Priority queue for this port. Total values for all four queues must not exceed 100 percent.')
hpSwitchBWMinEgressPortPrctHighPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 22, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchBWMinEgressPortPrctHighPriority.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchBWMinEgressPortPrctHighPriority.setDescription('New definitions under HP-ICF-RATE-LIMIT-MIB. The percentage of Guaranteed Minimum bandwidth to be assigned to the egress High-Priority queue for this port. Total values for all four queues must not exceed 100 percent.')
hpSwitchRateLimitPortConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 23))
hpSwitchRateLimitPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 23, 1), )
if mibBuilder.loadTexts: hpSwitchRateLimitPortConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchRateLimitPortConfigTable.setDescription('A table that contains information about the port Rate-Limiting configurations on this switch.')
hpSwitchRateLimitPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 23, 1, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchRateLimitPortIndex"))
if mibBuilder.loadTexts: hpSwitchRateLimitPortConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchRateLimitPortConfigEntry.setDescription("The information associated with each port's Rate-Limiting configuration.")
hpSwitchRateLimitPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 23, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchRateLimitPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchRateLimitPortIndex.setDescription('The ifIndex value which uniquely identifies a row in the Interfaces Table.')
hpSwitchRateLimitPortControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 23, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("rateLimitPerPortOnly", 2), ("rateLimitPerQueue", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchRateLimitPortControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchRateLimitPortControlMode.setDescription('The mode by which this port will be Rate-Limited on ingress. If rateLimitPerPortOnly is configured, there will be a single maximum rate for the entire port. If rateLimitPerQueue is configured, the values for each of the four queues indicate the maximum percentage of port traffic that may be received by that queue (the sum of these values must not exceed 100). When rate-limiting is disabled, there are no maximum controls on ingress for this port.')
hpSwitchRateLimitPortSingleControlPrct = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 23, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchRateLimitPortSingleControlPrct.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchRateLimitPortSingleControlPrct.setDescription('When hpSwitchRateLimitPortControlMode is configured for rateLimitPerPortOnly, this value is the maximum percentage of traffic that may be received by this port on ingress.')
hpSwitchRateLimitPortPrctLowPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 23, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchRateLimitPortPrctLowPriority.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchRateLimitPortPrctLowPriority.setDescription("The maximum percentage of traffic that may be received by this port's Low-Priority queue on ingress. hpSwitchRateLimitPortControlMode must be configured to use rateLimitPerQueue for this to take effect. A value of 0-percent for any queue means that no traffic will ever be received on this port for that ingress queue. Total values for all four queues must not exceed 100 percent.")
hpSwitchRateLimitPortPrctNormalPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 23, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchRateLimitPortPrctNormalPriority.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchRateLimitPortPrctNormalPriority.setDescription("The maximum percentage of traffic that may be received by this port's Normal-Priority queue on ingress. hpSwitchRateLimitPortControlMode must be configured to use rateLimitPerQueue for this to take effect. A value of 0-percent for any queue means that no traffic will ever be received on this port for that ingress queue. Total values for all four queues must not exceed 100 percent.")
hpSwitchRateLimitPortPrctMedPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 23, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchRateLimitPortPrctMedPriority.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchRateLimitPortPrctMedPriority.setDescription("The maximum percentage of traffic that may be received by this port's Medium-Priority queue on ingress. hpSwitchRateLimitPortControlMode must be configured to use rateLimitPerQueue for this to take effect. A value of 0-percent for any queue means that no traffic will ever be received on this port for that ingress queue. Total values for all four queues must not exceed 100 percent.")
hpSwitchRateLimitPortPrctHighPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 23, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchRateLimitPortPrctHighPriority.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchRateLimitPortPrctHighPriority.setDescription("The maximum percentage of traffic that may be received by this port's High-Priority queue on ingress. hpSwitchRateLimitPortControlMode must be configured to use rateLimitPerQueue for this to take effect. A value of 0-percent for any queue means that no traffic will ever be received on this port for that ingress queue. Total values for all four queues must not exceed 100 percent.")
hpSwitchQosPassThroughMode = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 24))
hpSwitchQosPassThroughModeConfig = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 24, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("optimized", 1), ("typical", 2), ("balanced", 3), ("onequeue", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchQosPassThroughModeConfig.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchQosPassThroughModeConfig.setDescription('Specify the queue configuration mode for the switch. While changing the queue configuration mode this feature momentarily require to bring down the logical port and after the initialization of the queues the ports are brought up.')
hpSwitchReboot = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 25))
hpSwitchRebootConfig = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchRebootConfig.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchRebootConfig.setDescription('This tells the status of the switch whether it requires reboot for some variable to get effective. The value of this variable can be yes (1) reboot is required. no (2) reboot is not required.')
hpSwitchRebootFastBoot = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 25, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchRebootFastBoot.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchRebootFastBoot.setDescription('Specifies whether fastboot is enabled or not on the switch.')
hpSwitchProtectedPortsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 26))
hpSwitchProtectedPortsMask = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 26, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchProtectedPortsMask.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchProtectedPortsMask.setDescription('This variable specifies a group of ports that are not allowed to communicate to each-other. Each octet within the value of this object specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the switch is represented by a single bit within the value of this object.')
hpSwitchLACPConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 28))
hpSwitchLACPAllPortsStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 28, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("active", 2), ("passive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchLACPAllPortsStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchLACPAllPortsStatus.setDescription('Used to set administrative status of LACP on all the ports. A Port can have one of the three administrative status of LACP. Active/Passive/Disabled are the three states. ')
hpSwitchDSCPRateLimitConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 31))
hpSwitchDSCPRateLimitConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 31, 1), )
if mibBuilder.loadTexts: hpSwitchDSCPRateLimitConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchDSCPRateLimitConfigTable.setDescription('A table containing information about DSCP-based rate limits and ports on which they are applied.')
hpSwitchDSCPRateLimitConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 31, 1, 1), ).setIndexNames((0, "CONFIG-MIB", "hpSwitchDSCPRateLimitIndex"))
if mibBuilder.loadTexts: hpSwitchDSCPRateLimitConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchDSCPRateLimitConfigEntry.setDescription('Information about a single DSCP-based rate limit.')
hpSwitchDSCPRateLimitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 31, 1, 1, 1), Dscp())
if mibBuilder.loadTexts: hpSwitchDSCPRateLimitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchDSCPRateLimitIndex.setDescription('An index into the DSCP rate limit table. The value is a DSCP codepoint.')
hpSwitchDSCPRateLimitKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 31, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchDSCPRateLimitKbps.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchDSCPRateLimitKbps.setDescription('The rate limit in kilobits per second for a row of the DSCP rate limit table. Incoming traffic with the DSCP field of the IP header matching the index of the row will be limited to this rate and excess traffic will be dropped. On some devices, the actual traffic rate allowed may be slightly higher or lower due to hardware limitations. A value of -1 indicates no limit and is the default. Setting a value of -1 will clear all rate limits for the codepoint. The rate limit is only applied on the ports set in the hpSwitchDSCPRateLimitPorts column of the row.')
hpSwitchDSCPRateLimitPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 31, 1, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchDSCPRateLimitPorts.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchDSCPRateLimitPorts.setDescription('The applied ports for a row of the DSCP rate limit table. The rate limit from the hpSwitchDSCPRateLimitKbps column of the row will be applied on the logical ports specified. A rate limit may not be applied to individual ports that are members of a trunk, but must be applied to the entire trunk instead. It is an error to apply a DSCP rate limit to any ports before setting hpSwitchDSCPRateLimitKbps to a value other than -1. When the port list for a row is cleared, the hpSwitchDSCPRateLimitKbps column is set to the default of -1.')
hpSwitchTcpPushPreserve = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 33))
hpSwitchTcpPushPreserveConfig = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 33, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchTcpPushPreserveConfig.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchTcpPushPreserveConfig.setDescription('This object is used to enable the TCP Push Preserve functionality on the device. The TCP Push Preserve functionality determines the flow of the TCP packets with the push flag set. When this feature is enabled and the egress queue is full, the TCP packets with the push flag set are lined up at the head of the ingress queue for egress queue space. This might delay the subsequent incoming packets in the same queue. When this feature is disabled and the egress queue is full, the TCP packets with the push flag set placed in the ingress queue are dropped from the head of the ingress queue. By default, the TCP Push Preserve functionality is disabled on the device.')
hpSwitchIfMau = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 34))
hpSwitchIfMauTypeListBits = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 34, 1), HpSwitchIfMauTypeListBits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchIfMauTypeListBits.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchIfMauTypeListBits.setDescription('This object is used to generate the MauType values for 2.5G and 5G port speed.')
hpSwitchIfMauAutoNegCapabilityBits = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 34, 2), HpSwitchIfMauAutoNegCapabilityBits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchIfMauAutoNegCapabilityBits.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchIfMauAutoNegCapabilityBits.setDescription('This object is used to generate the MauAutoNegCapBits values for 2.5G and 5G port speed.')
hpSwitchIfMauAutoNegCapAdvertisedBits = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 34, 3), HpSwitchIfMauAutoNegCapAdvertisedBits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchIfMauAutoNegCapAdvertisedBits.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchIfMauAutoNegCapAdvertisedBits.setDescription('This object is used to generate the MauAutoNegCapBits values for 2.5G and 5G port speed.')
hpSwitchIfMauAutoNegCapReceivedBits = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 34, 4), HpSwitchIfMauAutoNegCapReceivedBits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchIfMauAutoNegCapReceivedBits.setStatus('mandatory')
if mibBuilder.loadTexts: hpSwitchIfMauAutoNegCapReceivedBits.setDescription('This object is used to generate the MauAutoNegCapBits values for 2.5G and 5G port speed.')
hpSwitchTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 0))
hpSwitchTrapsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 0, 1))
hpSwitchStpErrantBpduDetector = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 0, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bpduFilter", 1), ("bpduProtection", 2), ("pvstFilter", 3), ("pvstProtection", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpSwitchStpErrantBpduDetector.setStatus('optional')
if mibBuilder.loadTexts: hpSwitchStpErrantBpduDetector.setDescription('The identifier of the feature generating Errant BPDU trap.')
hpSwitchStpErrantBpduSrcMac = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 0, 1, 2), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpSwitchStpErrantBpduSrcMac.setStatus('optional')
if mibBuilder.loadTexts: hpSwitchStpErrantBpduSrcMac.setDescription('The source MAC address of the port sending Errant STP BPDU.')
hpSwitchStpErrantBpduReceived = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 0) + (0,1)).setObjects(("CONFIG-MIB", "hpSwitchStpPort"), ("CONFIG-MIB", "hpSwitchStpPortErrantBpduCounter"), ("BRIDGE-MIB", "dot1dStpPortState"), ("BRIDGE-MIB", "dot1dStpPortDesignatedBridge"), ("BRIDGE-MIB", "dot1dStpPortDesignatedPort"), ("CONFIG-MIB", "hpSwitchStpErrantBpduSrcMac"), ("CONFIG-MIB", "hpSwitchStpErrantBpduDetector"))
if mibBuilder.loadTexts: hpSwitchStpErrantBpduReceived.setDescription("This trap indicates that unexpected (errant) STP BPDU has been received on a port (e.g. on a port that is connected to non-STP device). This notification trap is controlled by the state of 'hpSwitchStpTrapCntl' object. Implementation of this trap is optional.")
mibBuilder.exportSymbols("CONFIG-MIB", hpSwitchHibernate=hpSwitchHibernate, hpSwitchCosDSCPPolicyIndex=hpSwitchCosDSCPPolicyIndex, hpSwitchPortConfig=hpSwitchPortConfig, hpSwitchSLinkParity=hpSwitchSLinkParity, hpSwitchABCConfigTable=hpSwitchABCConfigTable, Timeout=Timeout, hpSwitchCosAppTypeConfigType=hpSwitchCosAppTypeConfigType, hpSwitchCosVlanApplyPolicy=hpSwitchCosVlanApplyPolicy, hpSwitchCosAddressIpv6PrefixLength=hpSwitchCosAddressIpv6PrefixLength, hpSwitchRebootConfig=hpSwitchRebootConfig, hpSwitchIgmpPriorityState=hpSwitchIgmpPriorityState, hpSwitchRateLimitPortConfig=hpSwitchRateLimitPortConfig, hpSwitchPendingConfig=hpSwitchPendingConfig, hpSwitchABCConfigIpxRipSapControl=hpSwitchABCConfigIpxRipSapControl, hpSwitchRateLimitPortPrctNormalPriority=hpSwitchRateLimitPortPrctNormalPriority, hpSwitchSystemConfig=hpSwitchSystemConfig, hpSwitchIpTimepInetServerAddr=hpSwitchIpTimepInetServerAddr, hpSwitchIpTimepAdminStatus=hpSwitchIpTimepAdminStatus, hpSwitchPortVgMode=hpSwitchPortVgMode, hpSwitchStpHelloTime=hpSwitchStpHelloTime, hpSwitchIpTimepServerAddr=hpSwitchIpTimepServerAddr, hpSwitchPortNetworkDevice=hpSwitchPortNetworkDevice, hpSwitchStpPortType=hpSwitchStpPortType, hpSwitchABCConfig=hpSwitchABCConfig, hpSwitchSshConfig=hpSwitchSshConfig, hpSwitchCosVlanDSCPPolicy=hpSwitchCosVlanDSCPPolicy, hpSwitchCosAddressType=hpSwitchCosAddressType, hpSwitchTraps=hpSwitchTraps, hpSwitchABCConfigVlanBcastLimit=hpSwitchABCConfigVlanBcastLimit, hpSwitchIfMauAutoNegCapAdvertisedBits=hpSwitchIfMauAutoNegCapAdvertisedBits, hpSwitchPortIndex=hpSwitchPortIndex, hpSwitchSshReKeyStatus=hpSwitchSshReKeyStatus, hpSwitchRebootFastBoot=hpSwitchRebootFastBoot, hpSwitchDaylightBeginningDay=hpSwitchDaylightBeginningDay, hpSwitchCosTosApplyPolicy=hpSwitchCosTosApplyPolicy, hpSwitchIgmpDelayedGroupFlushTimer=hpSwitchIgmpDelayedGroupFlushTimer, hpSwitchIgmpQuerierInterval=hpSwitchIgmpQuerierInterval, hpSwitchSLinkConfigStatus=hpSwitchSLinkConfigStatus, hpicfSwitchCLIOptimization=hpicfSwitchCLIOptimization, hpSwitchPortAutoMDIX=hpSwitchPortAutoMDIX, hpSwitchStpErrantBpduReceived=hpSwitchStpErrantBpduReceived, hpSwitchIpxConfigStatus=hpSwitchIpxConfigStatus, hpSwitchPortTable=hpSwitchPortTable, hpSwitchRateLimitPortPrctLowPriority=hpSwitchRateLimitPortPrctLowPriority, hpSwitchPortIsolationConfig=hpSwitchPortIsolationConfig, hpSwitchStpPortMode=hpSwitchStpPortMode, hpSwitchIgmpProxyDomainMap=hpSwitchIgmpProxyDomainMap, hpSwitchDSCPRateLimitConfig=hpSwitchDSCPRateLimitConfig, hpSwitchIgmpForcedLeaveInterval=hpSwitchIgmpForcedLeaveInterval, hpSwitchMeshConfiguredId=hpSwitchMeshConfiguredId, hpSwitchTerminalType=hpSwitchTerminalType, hpSwitchAutoReboot=hpSwitchAutoReboot, hpSwitchSshPortNumber=hpSwitchSshPortNumber, hpSwitchQueueWatchState=hpSwitchQueueWatchState, hpSwitchPortTrunkType=hpSwitchPortTrunkType, hpSwitchIgmpConfig=hpSwitchIgmpConfig, hpSwitchSessionGlobalIdleTimeout=hpSwitchSessionGlobalIdleTimeout, hpSwitchCosVlanIndex=hpSwitchCosVlanIndex, hpSwitchSLinkModemConnTime=hpSwitchSLinkModemConnTime, hpSwitchCosProtocolConfigEntry=hpSwitchCosProtocolConfigEntry, hpSwitchCosTosResolvedPriority=hpSwitchCosTosResolvedPriority, hpSwitchPortFlowControl=hpSwitchPortFlowControl, hpSwitchPortPtpOperStatus=hpSwitchPortPtpOperStatus, hpSwitchCosPortConfigTable=hpSwitchCosPortConfigTable, hpSwitchQosPassThroughMode=hpSwitchQosPassThroughMode, hpSwitchABCConfigControl=hpSwitchABCConfigControl, hpSwitchDSCPRateLimitIndex=hpSwitchDSCPRateLimitIndex, hpSwitchIgmpConfigTable=hpSwitchIgmpConfigTable, hpSwitchConsoleConfig=hpSwitchConsoleConfig, hpSwitchCosTosPriority=hpSwitchCosTosPriority, hpSwitchPortEEEOperStatus=hpSwitchPortEEEOperStatus, hpSwitchCosPortPriority=hpSwitchCosPortPriority, hpSwitchPortPtpAdminStatus=hpSwitchPortPtpAdminStatus, hpSwitchPortTaggedVlanMap1k=hpSwitchPortTaggedVlanMap1k, hpSwitchConfigCosLastConfigError=hpSwitchConfigCosLastConfigError, hpSwitchPortIsolationConfigEntry=hpSwitchPortIsolationConfigEntry, hpSwitchFddiIpFragConfigTable=hpSwitchFddiIpFragConfigTable, hpSwitchStpVlanEntry=hpSwitchStpVlanEntry, hpSwitchStpAdminStatus=hpSwitchStpAdminStatus, hpSwitchMacDelimiter=hpSwitchMacDelimiter, hpSwitchTcpPushPreserve=hpSwitchTcpPushPreserve, hpSwitchTcpPushPreserveConfig=hpSwitchTcpPushPreserveConfig, hpSwitchStpPortPathCost=hpSwitchStpPortPathCost, hpSwitchBWMinEgressPortPrctHighPriority=hpSwitchBWMinEgressPortPrctHighPriority, hpSwitchCosAppTypeDestPort=hpSwitchCosAppTypeDestPort, hpSwitchCosAppTypeMaxDestPort=hpSwitchCosAppTypeMaxDestPort, hpSwitchDisplayedEvent=hpSwitchDisplayedEvent, hpSwitchPortTrafficTemplateName=hpSwitchPortTrafficTemplateName, hpSwitchPortEtherMode=hpSwitchPortEtherMode, hpSwitchMeshActualId=hpSwitchMeshActualId, hpSwitchConfig=hpSwitchConfig, hpSwitchSerialLinkConfig=hpSwitchSerialLinkConfig, hpSwitchCosProtocolPriority=hpSwitchCosProtocolPriority, hpSwitchMeshBackwardCompatibility=hpSwitchMeshBackwardCompatibility, hpSwitchPortLinkbeat=hpSwitchPortLinkbeat, hpSwitchPortEEEMinTwSysTx1=hpSwitchPortEEEMinTwSysTx1, hpSwitchBWMinEgressPortPrctNormalPriority=hpSwitchBWMinEgressPortPrctNormalPriority, hpSwitchProbeAdminStatus=hpSwitchProbeAdminStatus, hpSwitchFilterConfigTable=hpSwitchFilterConfigTable, hpSwitchProbedVlanId=hpSwitchProbedVlanId, hpSwitchIpTimepInetServerAddrType=hpSwitchIpTimepInetServerAddrType, hpSwitchIgmpPortType=hpSwitchIgmpPortType, hpSwitchCosAddressIpv6=hpSwitchCosAddressIpv6, hpSwitchABCConfigEntry=hpSwitchABCConfigEntry, hpSwitchStpPort=hpSwitchStpPort, hpSwitchMaxFrameSize=hpSwitchMaxFrameSize, hpSwitchIgmpPortIndex=hpSwitchIgmpPortIndex, hpSwitchSshTimeout=hpSwitchSshTimeout, hpSwitchFilterConfig=hpSwitchFilterConfig, hpSwitchIgmpIpMcastState2=hpSwitchIgmpIpMcastState2, hpSwitchRateLimitPortConfigEntry=hpSwitchRateLimitPortConfigEntry, hpSwitchRateLimitPortConfigTable=hpSwitchRateLimitPortConfigTable, hpSwitchCosDSCPPolicyPriority=hpSwitchCosDSCPPolicyPriority, hpSwitchCosAddressDSCPPolicy=hpSwitchCosAddressDSCPPolicy, hpSwitchStpPortTable=hpSwitchStpPortTable, hpSwitchIgmpPortConfigEntry=hpSwitchIgmpPortConfigEntry, hpSwitchCosTosConfig=hpSwitchCosTosConfig, hpSwitchCosConfig=hpSwitchCosConfig, hpSwitchABCConfigAutoGatewayConfig=hpSwitchABCConfigAutoGatewayConfig, VlanID=VlanID, hpSwitchProbeConfig=hpSwitchProbeConfig, hpSwitchSLinkStopBits=hpSwitchSLinkStopBits, hpSwitchIpTftpMode=hpSwitchIpTftpMode, hpSwitchCosDSCPPolicyConfigEntry=hpSwitchCosDSCPPolicyConfigEntry, hpSwitchDSCPRateLimitPorts=hpSwitchDSCPRateLimitPorts, hpSwitchCosDSCPPolicyName=hpSwitchCosDSCPPolicyName, hpSwitchPortEEEMinTwSysTx=hpSwitchPortEEEMinTwSysTx, hpSwitchCosAppTypeConfigTable=hpSwitchCosAppTypeConfigTable, hpSwitchLinkUpDownTrapAllPortsStatus=hpSwitchLinkUpDownTrapAllPortsStatus, hpSwitchPortTrunkGroup=hpSwitchPortTrunkGroup, hpSwitchFilterIndex=hpSwitchFilterIndex, hpSwitchCosPortType=hpSwitchCosPortType, hpSwitchMeshConfig=hpSwitchMeshConfig, hpSwitchMaxUserSessions=hpSwitchMaxUserSessions, hpSwitchCosAppTypeDSCPPolicy=hpSwitchCosAppTypeDSCPPolicy, hpSwitchUsbConsoleAdminStatus=hpSwitchUsbConsoleAdminStatus, hpSwitchStpErrantBpduDetector=hpSwitchStpErrantBpduDetector, hpSwitchLACPConfig=hpSwitchLACPConfig, hpSwitchPortPtpRxCount=hpSwitchPortPtpRxCount, hpSwitchSshIpVersion=hpSwitchSshIpVersion, hpSwitchPortLACPKey=hpSwitchPortLACPKey, hpSwitchBWMinEgressPortConfigEntry=hpSwitchBWMinEgressPortConfigEntry, hpSwitchIgmpPortFastLeaveState=hpSwitchIgmpPortFastLeaveState, hpSwitchCosAppTypeStatus=hpSwitchCosAppTypeStatus, hpSwitchQueueWatchPort=hpSwitchQueueWatchPort, hpSwitchIgmpVlanIndex=hpSwitchIgmpVlanIndex, hpSwitchFddiIpFragConfigEntry=hpSwitchFddiIpFragConfigEntry, hpSwitchCosPortDSCPPolicy=hpSwitchCosPortDSCPPolicy, hpSwitchCosAppTypeConfigEntry=hpSwitchCosAppTypeConfigEntry, hpSwitchStpPortErrantBpduCounter=hpSwitchStpPortErrantBpduCounter, hpSwitchCosPortPartnerDevice=hpSwitchCosPortPartnerDevice, hpSwitchLACPAllPortsStatus=hpSwitchLACPAllPortsStatus, hpSwitchStpPortBpduFilter=hpSwitchStpPortBpduFilter, hpSwitchSessionConsoleIdleTimeout=hpSwitchSessionConsoleIdleTimeout, hpSwitchSystemConfigStatus=hpSwitchSystemConfigStatus, hpSwitchFddiIpFragConfig=hpSwitchFddiIpFragConfig, hpSwitchRateLimitPortSingleControlPrct=hpSwitchRateLimitPortSingleControlPrct, hpSwitchSshReKeyTime=hpSwitchSshReKeyTime, hpSwitchSshReKeyVolume=hpSwitchSshReKeyVolume, hpSwitchStpVlanTable=hpSwitchStpVlanTable, hpSwitchPortIsolationMode=hpSwitchPortIsolationMode, hpSwitchPortIsolationConfigTable=hpSwitchPortIsolationConfigTable, hpSwitchPortIsolationPortMode=hpSwitchPortIsolationPortMode, hpSwitchStpPortEntry=hpSwitchStpPortEntry, hpSwitchIgmpPortConfigEntry2=hpSwitchIgmpPortConfigEntry2, hpSwitchIpMTU=hpSwitchIpMTU, hpSwitchIgmpPortVlanIndex2=hpSwitchIgmpPortVlanIndex2, hpSwitchSLinkFlowCtrl=hpSwitchSLinkFlowCtrl, hpSwitchTrapsObjects=hpSwitchTrapsObjects, hpSwitchBWMinEgressPortConfigTable=hpSwitchBWMinEgressPortConfigTable, hpSwitchFilterName=hpSwitchFilterName, hpicfPrivateVlanPromiscuousPorts=hpicfPrivateVlanPromiscuousPorts, hpSwitchQueueWatchTable=hpSwitchQueueWatchTable, hpSwitchConsoleConfigLogoutPrompt=hpSwitchConsoleConfigLogoutPrompt, hpSwitchPortPtpTxCount=hpSwitchPortPtpTxCount, hpSwitchCosPortIndex=hpSwitchCosPortIndex, hpSwitchIpConfig=hpSwitchIpConfig, hpSwitchRateLimitPortPrctHighPriority=hpSwitchRateLimitPortPrctHighPriority, hpSwitchCosDSCPPolicyConfigTable=hpSwitchCosDSCPPolicyConfigTable, hpSwitchCosLastChange=hpSwitchCosLastChange, hpSwitchRateLimitPortControlMode=hpSwitchRateLimitPortControlMode, hpSwitchIpConfigStatus=hpSwitchIpConfigStatus, hpSwitchStpForwardDelay=hpSwitchStpForwardDelay, hpSwitchSTPAdminStatus=hpSwitchSTPAdminStatus, hpSwitchStpBpduProtectionTimeout=hpSwitchStpBpduProtectionTimeout, hpSwitchPortEEECurrentTwSysTx1=hpSwitchPortEEECurrentTwSysTx1, hpSwitchPortEntry=hpSwitchPortEntry, hpSwitchPortBcastLimit=hpSwitchPortBcastLimit, hpSwitchFilterPortMask=hpSwitchFilterPortMask, hpSwitchCosAppTypeResolvedPriority=hpSwitchCosAppTypeResolvedPriority, hpSwitchPortEEECurrentTwSysTx=hpSwitchPortEEECurrentTwSysTx, hpSwitchCosAppTypeApplyPolicy=hpSwitchCosAppTypeApplyPolicy, hpSwitchCosAddressIndex=hpSwitchCosAddressIndex, hpSwitchControlUnknownIPMulticast=hpSwitchControlUnknownIPMulticast, hpSwitchCosAddressIp=hpSwitchCosAddressIp, hpSwitchSshAdminStatus=hpSwitchSshAdminStatus, hpSwitchPortEEEAdminStatus=hpSwitchPortEEEAdminStatus, hpSwitchFddiIpFragConfigIndex=hpSwitchFddiIpFragConfigIndex, hpSwitchPortTaggedVlanMap2k=hpSwitchPortTaggedVlanMap2k, hpSwitchRateLimitPortPrctMedPriority=hpSwitchRateLimitPortPrctMedPriority, hpSwitchStpPortPvstFilter=hpSwitchStpPortPvstFilter, hpSwitchSLinkModemLostRecvTime=hpSwitchSLinkModemLostRecvTime, hpSwitchIfMau=hpSwitchIfMau, hpSwitchPortDescr=hpSwitchPortDescr, hpSwitchFilterMacAddr=hpSwitchFilterMacAddr, hpSwitchMeshMulticastAgingMode=hpSwitchMeshMulticastAgingMode, hpSwitchCosPortTrustMode=hpSwitchCosPortTrustMode, hpSwitchCosVlanConfigTable=hpSwitchCosVlanConfigTable, hpSwitchCosVlanConfigEntry=hpSwitchCosVlanConfigEntry, hpSwitchProbedPortMask=hpSwitchProbedPortMask, hpSwitchSLinkModemDisConnTime=hpSwitchSLinkModemDisConnTime, hpSwitchCosAddressStatus=hpSwitchCosAddressStatus, hpConfig=hpConfig, hpSwitchBWMinEgressPortPrctMedPriority=hpSwitchBWMinEgressPortPrctMedPriority, hpSwitchCosAppTypeMaxSrcPort=hpSwitchCosAppTypeMaxSrcPort, hpSwitchRateLimitPortIndex=hpSwitchRateLimitPortIndex, hpSwitchIgmpPortForcedLeaveState=hpSwitchIgmpPortForcedLeaveState, hpSwitchCosPortTrustedPartnerState=hpSwitchCosPortTrustedPartnerState, hpSwitchIgmpIpMcastState=hpSwitchIgmpIpMcastState, hpSwitchPortEEEMaxTwSysTx1=hpSwitchPortEEEMaxTwSysTx1, hpSwitchIfMauAutoNegCapReceivedBits=hpSwitchIfMauAutoNegCapReceivedBits, hpSwitchSystemPortLEDMode=hpSwitchSystemPortLEDMode, hpSwitchSLinkBaudRate=hpSwitchSLinkBaudRate, hpSwitchBWMinConfig=hpSwitchBWMinConfig, hpSwitchPortMDIXStatus=hpSwitchPortMDIXStatus, hpSwitchPortTaggedVlanMap4k=hpSwitchPortTaggedVlanMap4k, hpSwitchABCConfigVlan=hpSwitchABCConfigVlan, hpSwitchProtectedPortsMask=hpSwitchProtectedPortsMask, hpSwitchPreviewMode=hpSwitchPreviewMode, hpSwitchPortIsolationPort=hpSwitchPortIsolationPort, hpSwitchCosAppTypePriority=hpSwitchCosAppTypePriority, hpSwitchCosTosConfigTable=hpSwitchCosTosConfigTable, hpSwitchDSCPRateLimitConfigEntry=hpSwitchDSCPRateLimitConfigEntry, hpSwitchCosProtocolConfigTable=hpSwitchCosProtocolConfigTable, hpSwitchIgmpPortIndex2=hpSwitchIgmpPortIndex2, hpSwitchIgmpPortType2=hpSwitchIgmpPortType2, hpSwitchPortEEEMaxTwSysTx=hpSwitchPortEEEMaxTwSysTx, hpSwitchPendingConfigControl=hpSwitchPendingConfigControl, hpSwitchIgmpState=hpSwitchIgmpState, hpSwitchCosTosDSCPPolicy=hpSwitchCosTosDSCPPolicy, hpSwitchIfMauTypeListBits=hpSwitchIfMauTypeListBits, hpSwitchPortType=hpSwitchPortType, hpSwitchIpTimepIsOobm=hpSwitchIpTimepIsOobm, hpSwitchCosPortResolvedPriority=hpSwitchCosPortResolvedPriority, hpSwitchProtectedPortsConfig=hpSwitchProtectedPortsConfig, hpSwitchCosPortApplyPolicy=hpSwitchCosPortApplyPolicy, hpSwitchSLinkConnInactTime=hpSwitchSLinkConnInactTime, hpSwitchStpVlan=hpSwitchStpVlan, hpSwitchPortConfigStatus=hpSwitchPortConfigStatus, hpSwitchStpPortPriority=hpSwitchStpPortPriority, hpSwitchSshFileServerAdminStatus=hpSwitchSshFileServerAdminStatus, hpSwitchDaylightEndingMonth=hpSwitchDaylightEndingMonth, hpSwitchConsoleRefRate=hpSwitchConsoleRefRate, hpSwitchCosAddressApplyPolicy=hpSwitchCosAddressApplyPolicy)
mibBuilder.exportSymbols("CONFIG-MIB", hpSwitchPortAdminStatus=hpSwitchPortAdminStatus, hpSwitchFddiIpFragConfigStatus=hpSwitchFddiIpFragConfigStatus, hpSwitchProbePort=hpSwitchProbePort, hpSwitchReboot=hpSwitchReboot, hpSwitchSshVersion=hpSwitchSshVersion, hpSwitchCosVlanPriority=hpSwitchCosVlanPriority, hpSwitchCosTosConfigEntry=hpSwitchCosTosConfigEntry, hpSwitchQosPassThroughModeConfig=hpSwitchQosPassThroughModeConfig, hpSwitchPortPvid=hpSwitchPortPvid, hpSwitchDaylightBeginningMonth=hpSwitchDaylightBeginningMonth, hpSwitchIgmpQuerierState=hpSwitchIgmpQuerierState, hpSwitchCosAddressResolvedPriority=hpSwitchCosAddressResolvedPriority, hpSwitchTelnetAdminStatus=hpSwitchTelnetAdminStatus, hpSwitchPortTrunkLACPStatus=hpSwitchPortTrunkLACPStatus, hpSwitchStpPortPvstProtection=hpSwitchStpPortPvstProtection, hpSwitchSLinkCharBits=hpSwitchSLinkCharBits, hpSwitchIpTimepPollInterval=hpSwitchIpTimepPollInterval, hpSwitchStpPriority=hpSwitchStpPriority, hpSwitchAllowV1Modules=hpSwitchAllowV1Modules, hpSwitchFilterConfigEntry=hpSwitchFilterConfigEntry, HpicfUsrProfilePortSpeed=HpicfUsrProfilePortSpeed, hpSwitchCosAddressConfigTable=hpSwitchCosAddressConfigTable, hpSwitchCosProtocolType=hpSwitchCosProtocolType, hpSwitchIgmpPortConfigTable=hpSwitchIgmpPortConfigTable, hpSwitchCosAddressConfigEntry=hpSwitchCosAddressConfigEntry, hpSwitchStpPortBpduProtection=hpSwitchStpPortBpduProtection, hpSwitchQueueWatchEntry=hpSwitchQueueWatchEntry, hpSwitchTimeZone=hpSwitchTimeZone, hpSwitchCosTosIndex=hpSwitchCosTosIndex, hpSwitchBWMinEgressPortPrctLowPriority=hpSwitchBWMinEgressPortPrctLowPriority, hpSwitchCosAppTypeIpPacketType=hpSwitchCosAppTypeIpPacketType, hpSwitchDSCPRateLimitConfigTable=hpSwitchDSCPRateLimitConfigTable, hpSwitchFilterProtocolType=hpSwitchFilterProtocolType, hpSwitchStpTrapCntl=hpSwitchStpTrapCntl, hpSwitchFilterSrcPort=hpSwitchFilterSrcPort, hpSwitchProbeType=hpSwitchProbeType, hpSwitchMaxSessions=hpSwitchMaxSessions, hpSwitchCosAppTypeSrcPort=hpSwitchCosAppTypeSrcPort, hpSwitchCosVlanResolvedPriority=hpSwitchCosVlanResolvedPriority, hpicfSwitchSTPVersion=hpicfSwitchSTPVersion, hpSwitchFilterEntryStatus=hpSwitchFilterEntryStatus, hpSwitchAllowV2Modules=hpSwitchAllowV2Modules, hpSwitchDaylightEndingDay=hpSwitchDaylightEndingDay, hpSwitchSshServerKeySize=hpSwitchSshServerKeySize, hpSwitchCosPortConfigEntry=hpSwitchCosPortConfigEntry, hpSwitchStpMaxAge=hpSwitchStpMaxAge, hpSwitchIgmpPortConfigTable2=hpSwitchIgmpPortConfigTable2, hpSwitchIgmpConfigEntry=hpSwitchIgmpConfigEntry, hpSwitchCosTosConfigMode=hpSwitchCosTosConfigMode, hpSwitchPortFastEtherMode=hpSwitchPortFastEtherMode, hpSwitchCosAddressPriority=hpSwitchCosAddressPriority, hpSwitchCosIpv4AddressMask=hpSwitchCosIpv4AddressMask, hpSwitchCosAppTypeConfigIndex=hpSwitchCosAppTypeConfigIndex, hpSwitchConsoleConfigStatus=hpSwitchConsoleConfigStatus, hpSwitchDaylightTimeRule=hpSwitchDaylightTimeRule, hpSwitchPortTaggedVlanMap3k=hpSwitchPortTaggedVlanMap3k, hpSwitchBWMinEgressPortIndex=hpSwitchBWMinEgressPortIndex, hpSwitchStpConfig=hpSwitchStpConfig, hpSwitchIfMauAutoNegCapabilityBits=hpSwitchIfMauAutoNegCapabilityBits, hpSwitchDSCPRateLimitKbps=hpSwitchDSCPRateLimitKbps, hpSwitchABCConfigIpRipControl=hpSwitchABCConfigIpRipControl, hpSwitchStpErrantBpduSrcMac=hpSwitchStpErrantBpduSrcMac, hpSwitchFilterType=hpSwitchFilterType, hpSwitchIpxConfig=hpSwitchIpxConfig, hpSwitchStpPortSrcMac=hpSwitchStpPortSrcMac)
