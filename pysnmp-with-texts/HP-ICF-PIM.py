#
# PySNMP MIB module HP-ICF-PIM (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-PIM
# Produced by pysmi-0.3.4 at Wed May  1 13:34:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddressType, InetAddressPrefixLength, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddressPrefixLength", "InetAddress")
ipMRouteGroup, ipMRouteEntry, ipMRouteSource = mibBuilder.importSymbols("IPMROUTE-STD-MIB", "ipMRouteGroup", "ipMRouteEntry", "ipMRouteSource")
pimNeighborEntry, pimRPSetComponent, pimInterfaceEntry, pimRPSetEntry, pimComponentEntry, pimInterfaceIfIndex = mibBuilder.importSymbols("PIM-MIB", "pimNeighborEntry", "pimRPSetComponent", "pimInterfaceEntry", "pimRPSetEntry", "pimComponentEntry", "pimInterfaceIfIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
IpAddress, ObjectIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter64, Counter32, ModuleIdentity, Unsigned32, Bits, NotificationType, Integer32, TimeTicks, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ObjectIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter64", "Counter32", "ModuleIdentity", "Unsigned32", "Bits", "NotificationType", "Integer32", "TimeTicks", "MibIdentifier")
RowStatus, TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "TextualConvention", "DisplayString")
hpicfPimMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20))
hpicfPimMIB.setRevisions(('2012-04-12 00:00', '2010-10-04 00:00', '2010-09-01 00:00', '2005-08-04 16:19', '2004-06-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfPimMIB.setRevisionsDescriptions(('Added hpicfPimScalars to provide global counter data for PIM-SM Register messages and hpicfPimIfMessageCounterTable to provide per-interface totals for received, transmitted and dropped PIM protocol packets. Extended hpicfPimIfTable to provide more detail on PIM enabled interfaces. Extended hpicfPimComponentTable to indicate next scheduled C-RP Advertisement message time. Extended hpicfPimStatRpfTable to provide more detail on RPF Overrides/Multicast Static Routes. Added hpicfPimVersion to provide the Version number of PIM on the router. Added hpicfPimStarGEntries and hpicfPimSGEntries to provide a count of the number of (*,G) and (S,G) entries in their respective tables. Added hpicfPimMRouteTable to extend ipMRouteTable (RFC 2932) to provide more detail on multicast forwarding table entries. Added hpicfPimNeighborTable, which extends pimNeighborTable (RFC 2934) to provide more detail on known PIM neighbor routers. Added hpicfPimTotalNeighborCount to provide a count of all known PIM neighbors. Added hpicfPimUcastRouteTable to provide information on unicast routing information used by PIM. Added hpicfPimJoinPruneTable to provide information on Join-Prune protocol messages to be sent across the routers PIM interfaces. Added hpicfPimRPSetTable, which extends pimRPSetEntry (RFC 2934) to provide more detail on PIM-SM RP->Group mappings. Added hpicfPimUnackGraftsTable to provide information on sent-but-unacknowledged PIM-DM Graft messages.', 'Added hpicfPimStaticRpfTable to statically configure reverse path forwarding (RPF) override entries. This information is currently used in the PIM sparse mode only.', 'Added hpicfPimRemoveConfig to disable PIM and remove its entire config schema from the switch. hpicfPimRemoveConfig to the hpicfhpicfPim object', 'Added PIM-SM objects.', 'Initial revision.',))
if mibBuilder.loadTexts: hpicfPimMIB.setLastUpdated('201204120000Z')
if mibBuilder.loadTexts: hpicfPimMIB.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfPimMIB.setContactInfo('Hewlett-Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfPimMIB.setDescription('This MIB module contains HP proprietary extensions to the standard PIM MIB (RFC 2934).')
hpicfPimObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1))
hpicfPimTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 0))
hpicfPim = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1))
hpicfPimScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 2))
hpicfPimConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 2))
hpicfPimGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 2, 1))
hpicfPimCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 2, 2))
hpicfPimAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfPimAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfPimAdminStatus.setDescription('The operational status of the PIM routing protocol on this router. Default is disabled.')
hpicfPimStateRefreshInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfPimStateRefreshInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfPimStateRefreshInterval.setDescription('The interval between successive State Refresh messages originated by this router. Its default value is 60 seconds. The maximum value allowed in PIM for State Refresh interval will be 100.')
hpicfPimSPTThreshold = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 3), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfPimSPTThreshold.setStatus('current')
if mibBuilder.loadTexts: hpicfPimSPTThreshold.setDescription('Specifies a threshold for switching to the Shortest Path Tree (SPT) on this router. If the object has the special value of -1, the Shared Tree rooted to the Rendezvous Point (RP) will be used indefinitely on the router. Default is -1.')
hpicfPimTrapControl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 4), Bits().clone(namedValues=NamedValues(("neighborLoss", 0), ("hardMrtFull", 1), ("softMrtFull", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfPimTrapControl.setStatus('current')
if mibBuilder.loadTexts: hpicfPimTrapControl.setDescription("Indicates whether the PIM-enabled router will generate SNMP traps for PIM events. The set bit means 'enabled'. - neighborLoss(0) This bit controls whether the notification trap is allowed to be sent when the neighbor timer expires and the router has no other neighbors on the same interface with a lower IP address than itself. - hardMrtFull(1) This bit controls whether the notification trap is allowed to be sent when the MRT table is full and the error has been originated by hardware. - softMrtFull(2) This bit controls whether the notification trap is allowed to be sent when the MRT table is full and the error has been originated by software.")
hpicfPimStaticRPSetTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 5), )
if mibBuilder.loadTexts: hpicfPimStaticRPSetTable.setStatus('current')
if mibBuilder.loadTexts: hpicfPimStaticRPSetTable.setDescription('The (conceptual) table containing statically configured Rendezvous Points (RPs) for IP multicast group mappings. This information is being used in the PIM Sparse mode only.')
hpicfPimStaticRPSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 5, 1), ).setIndexNames((0, "PIM-MIB", "pimRPSetComponent"), (0, "HP-ICF-PIM", "hpicfPimStaticRPSetGroupAddress"), (0, "HP-ICF-PIM", "hpicfPimStaticRPSetGroupMask"), (0, "HP-ICF-PIM", "hpicfPimStaticRPSetAddress"))
if mibBuilder.loadTexts: hpicfPimStaticRPSetEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfPimStaticRPSetEntry.setDescription('An entry (row) in the hpicfPimStaticRPSetTable. NOTE: the pimRPSetComponent is an index that uniquely identifies the component. Each protocol instance connected to a separate domain should have a different index value.')
hpicfPimStaticRPSetGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 5, 1, 1), IpAddress())
if mibBuilder.loadTexts: hpicfPimStaticRPSetGroupAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfPimStaticRPSetGroupAddress.setDescription('The IP multicast group address which, when combined with hpicfPimStaticRPSetGroupMask, gives the group prefix for which this entry contains information about the statically configured RP.')
hpicfPimStaticRPSetGroupMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 5, 1, 2), IpAddress())
if mibBuilder.loadTexts: hpicfPimStaticRPSetGroupMask.setStatus('current')
if mibBuilder.loadTexts: hpicfPimStaticRPSetGroupMask.setDescription('The multicast group address mask which, when combined with hpicfPimStaticRPSetGroupAddress, gives the group prefix for which this entry contains information about the statically configured RP.')
hpicfPimStaticRPSetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 5, 1, 3), IpAddress())
if mibBuilder.loadTexts: hpicfPimStaticRPSetAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfPimStaticRPSetAddress.setDescription('The IP address of statically configured RP for the given IP multicast group(s).')
hpicfPimStaticRPSetOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 5, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPimStaticRPSetOverride.setStatus('current')
if mibBuilder.loadTexts: hpicfPimStaticRPSetOverride.setDescription('If true, indicates that the router should ignore the information learned by a BSR if there is a conflict between the information this static entry contains and the information that is learned by the BSR. Default is false.')
hpicfPimStaticRPSetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPimStaticRPSetRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfPimStaticRPSetRowStatus.setDescription('The status of this row, by which new entries may be created, or old entries deleted from this table.')
hpicfPimIfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 6), )
if mibBuilder.loadTexts: hpicfPimIfTable.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfTable.setDescription('HP extensions to the pimInterfaceTable.')
hpicfPimIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 6, 1), )
pimInterfaceEntry.registerAugmentions(("HP-ICF-PIM", "hpicfPimIfEntry"))
hpicfPimIfEntry.setIndexNames(*pimInterfaceEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfPimIfEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfEntry.setDescription('HP extensions for an entry in the pimInterfaceTable.')
hpicfPimIfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 6, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPimIfAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfAddress.setDescription('This is copy of pimInterfaceAddress with read-create access. PIM uses this source address to send its protocol packets out on this interface. This address can be set to one of IP addresses of the interface or 255.255.255.255 if the address is determined dynamically based on the current IP configuration. The currently used source address is value of pimInterfaceAddress in the latter case.')
hpicfPimIfTrigHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)).clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPimIfTrigHelloInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfTrigHelloInterval.setDescription('The maximum time before a triggered PIM Hello message is transmitted on this interface. Default is 5 seconds.')
hpicfPimIfHelloHoldtime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(17, 1050)).clone(105)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPimIfHelloHoldtime.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfHelloHoldtime.setDescription('The value set in the Holdtime field of Hello messages transmitted on this interface. This should be 3.5 times the value of pimInterfaceHelloInterval. Default is 105 seconds.')
hpicfPimIfLanPruneDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 6, 1, 4), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPimIfLanPruneDelay.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfLanPruneDelay.setDescription('Turns the LAN Prune Delay options ON and OFF, on this interface. Default is true.')
hpicfPimIfPropagationDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(250, 2000)).clone(500)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPimIfPropagationDelay.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfPropagationDelay.setDescription('The value inserted into the LAN Prune Delay field of a LAN Prune Delay option on this interface. Default is 500 milliseconds.')
hpicfPimIfOverrideInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 6000)).clone(2500)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPimIfOverrideInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfOverrideInterval.setDescription('The value inserted into the Override Interval field of a LAN Prune Delay option on this interface. Default is 2500 milliseconds.')
hpicfPimIfGenerationID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 6, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPimIfGenerationID.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfGenerationID.setDescription('Turns the Generation ID option ON and OFF, on this interface. Default is false.')
hpicfPimIfJoinPruneHoldtime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 6, 1, 8), Unsigned32().clone(210)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPimIfJoinPruneHoldtime.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfJoinPruneHoldtime.setDescription('The value inserted into the Holdtime field of a Join/ Prune message sent on this interface. The value should be 3.5 times pimInterfaceJoinPruneInterval. Default is 210 seconds.')
hpicfPimIfGraftRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPimIfGraftRetryInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfGraftRetryInterval.setDescription('The interval a PIM router waits for a Graft Ack before re-sending a Graft on this interface. Default is 3 seconds.')
hpicfPimIfMaxGraftRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPimIfMaxGraftRetries.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfMaxGraftRetries.setDescription('The maximum number of times this router will re-send a Graft on this interface. Default is 2.')
hpicfPimIfSRTTLThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 6, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPimIfSRTTLThreshold.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfSRTTLThreshold.setDescription('The Time To Live in a PIM-DM State Refresh message at which it is not forwarded on this interface. Default is 0.')
hpicfPimIfLanDelayEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 6, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimIfLanDelayEnabled.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfLanDelayEnabled.setDescription('Evaluates to TRUE if all routers on this interface are using the LAN Prune Delay Option.')
hpicfPimIfSRCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 6, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimIfSRCapable.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfSRCapable.setDescription('Evaluates to TRUE if all routers on this interface are using the State Refresh Capable Option.')
hpicfPimIfDRPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 6, 1, 14), Unsigned32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPimIfDRPriority.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfDRPriority.setDescription('The Designated Router Priority inserted into the DR priority option on this interface. Default is 1.')
hpicfPimIfNBRTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 6, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 8000)).clone(180)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPimIfNBRTimeout.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfNBRTimeout.setDescription('Time interval after which the router will consider a neighbor to not be present, if no PIM Hello messages arrived on the interface. Default is 180 seconds.')
hpicfPimIfNBRCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimIfNBRCount.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfNBRCount.setDescription('PIM Neighbor Count.')
hpicfPimIfNegotiatedPropagationDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 6, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimIfNegotiatedPropagationDelay.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfNegotiatedPropagationDelay.setDescription('Negotiated PIM LAN/Propagation Delay (ms).')
hpicfPimIfNegotiatedOverrideInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 6, 1, 18), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimIfNegotiatedOverrideInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfNegotiatedOverrideInterval.setDescription('Negotiated PIM Override Interval (ms).')
hpicfPimIfAssertHoldInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimIfAssertHoldInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfAssertHoldInterval.setDescription('PIM Assert Hold Interval (s).')
hpicfPimIfNumRoutersNotUsingDRPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimIfNumRoutersNotUsingDRPriority.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfNumRoutersNotUsingDRPriority.setDescription('Number of routers on network not using DR priority.')
hpicfPimIfNumRoutersNotUsingLanDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimIfNumRoutersNotUsingLanDelay.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfNumRoutersNotUsingLanDelay.setDescription('Number of routers on network not using LAN Delay.')
hpicfPimComponentTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 7), )
if mibBuilder.loadTexts: hpicfPimComponentTable.setStatus('current')
if mibBuilder.loadTexts: hpicfPimComponentTable.setDescription('HP extensions to the pimComponentTable - the (conceptual) table containing objects specific to a PIM domain. One row exists for each domain to which the router is connected. Typically, a PIM-SM router will be a member of exactly one domain, however, the table also supports routers which may form a border between two PIM-SM domains and do not forward Bootstrap messages between them.')
hpicfPimComponentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 7, 1), )
pimComponentEntry.registerAugmentions(("HP-ICF-PIM", "hpicfPimComponentEntry"))
hpicfPimComponentEntry.setIndexNames(*pimComponentEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfPimComponentEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfPimComponentEntry.setDescription('HP extensions for an entry in the pimComponentTable.')
hpicfPimComponentCBSRAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPimComponentCBSRAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfPimComponentCBSRAdminStatus.setDescription('This objects specifies whether or not the router configured to be a Candidate BSR for the local PIM region. Default is disabled.')
hpicfPimComponentCBSRAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 7, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPimComponentCBSRAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfPimComponentCBSRAddress.setDescription('The IP address the Candidate BSR router will advertise for the local PIM region.')
hpicfPimComponentCBSRPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPimComponentCBSRPriority.setStatus('current')
if mibBuilder.loadTexts: hpicfPimComponentCBSRPriority.setDescription('The priority for Candidate BSR router. In BSR election process the candidate BSR with the highest (numerically bigger) priority becomes the BSR. If the priority values are the same, the router with the larger IP address is the BSR. Default is 0.')
hpicfPimComponentCBSRHashMaskLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)).clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPimComponentCBSRHashMaskLength.setStatus('current')
if mibBuilder.loadTexts: hpicfPimComponentCBSRHashMaskLength.setDescription('Specifies the length (in bits) of a multicast group address to use when mapping a group to one of the candidate RPs from the RP-Set whose group-prefix includes the group. The recommended value for IPv4 is 30, for IPv6 is 126. Default is 30.')
hpicfPimComponentCBSRMessageInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 65535)).clone(60)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPimComponentCBSRMessageInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfPimComponentCBSRMessageInterval.setDescription('If this router is the elected BSR, this object is the interval for sending (multicast out) periodic Bootstrap (RP-Set) messages on all PIM SM interfaces. The acceptable range is 5-300. The default value of this object is 60 seconds.')
hpicfPimComponentCRPPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(192)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPimComponentCRPPriority.setStatus('current')
if mibBuilder.loadTexts: hpicfPimComponentCRPPriority.setDescription('The priority for the Candidate RP for the local PIM domain. Determines which Candidate RPs get selected by the BSR to be in the RP Set. The smaller value means the higher priority (a value of zero is the highest possible priority). Default is 192.')
hpicfPimComponentCRPAdvInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 7, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimComponentCRPAdvInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfPimComponentCRPAdvInterval.setDescription('The interval at which the Candidate RP transmits (unicast to the elected BSR) advertise messages in the local PIM domain.')
hpicfPimComponentBSRPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 7, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimComponentBSRPriority.setStatus('current')
if mibBuilder.loadTexts: hpicfPimComponentBSRPriority.setDescription('The priority of the Bootstrap Router (BSR) elected for the local PIM region.')
hpicfPimComponentBSRHashMaskLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 7, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimComponentBSRHashMaskLength.setStatus('current')
if mibBuilder.loadTexts: hpicfPimComponentBSRHashMaskLength.setDescription('The hash mask length of the elected Bootstrap Router (BSR).')
hpicfPimComponentBSRUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 7, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimComponentBSRUpTime.setStatus('current')
if mibBuilder.loadTexts: hpicfPimComponentBSRUpTime.setDescription('Length of time that the elected Bootstrap Router (BSR) has been up.')
hpicfPimComponentBSRNextMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 7, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimComponentBSRNextMessage.setStatus('current')
if mibBuilder.loadTexts: hpicfPimComponentBSRNextMessage.setDescription('Time in which the next bootstrap message is due from the elected Bootstrap Router (BSR).')
hpicfPimComponentCRPAdvTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 7, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimComponentCRPAdvTimer.setStatus('current')
if mibBuilder.loadTexts: hpicfPimComponentCRPAdvTimer.setDescription('Next scheduled Candidate RP Advertisement.')
hpicfPimRemoveConfig = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfPimRemoveConfig.setStatus('current')
if mibBuilder.loadTexts: hpicfPimRemoveConfig.setDescription('PIM is halted. This objects clears all existing PIM configuration, intializes the pim config to the default state. SnmpGet on this will always return false. An SnmpSet of false has no effect.')
hpicfPimStaticRpfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 9), )
if mibBuilder.loadTexts: hpicfPimStaticRpfTable.setStatus('current')
if mibBuilder.loadTexts: hpicfPimStaticRpfTable.setDescription('The (conceptual) table containing statically configured reverse path forwarding (RPF) source address to interface mappings. This information is currently used in the PIM sparse mode only.')
hpicfPimStaticRpfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 9, 1), ).setIndexNames((0, "HP-ICF-PIM", "hpicfPimStaticRpfSourceAddressType"), (0, "HP-ICF-PIM", "hpicfPimStaticRpfSourceAddress"), (0, "HP-ICF-PIM", "hpicfPimStaticRpfSourcePrefixLength"), (0, "HP-ICF-PIM", "hpicfPimStaticRpfAddressType"), (0, "HP-ICF-PIM", "hpicfPimStaticRpfAddress"))
if mibBuilder.loadTexts: hpicfPimStaticRpfEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfPimStaticRpfEntry.setDescription('A row in the hpicfPimStaticRpfTable.')
hpicfPimStaticRpfSourceAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 9, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hpicfPimStaticRpfSourceAddressType.setStatus('current')
if mibBuilder.loadTexts: hpicfPimStaticRpfSourceAddressType.setDescription('The IP address type of the statically configured multicast source.')
hpicfPimStaticRpfSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 9, 1, 2), InetAddress())
if mibBuilder.loadTexts: hpicfPimStaticRpfSourceAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfPimStaticRpfSourceAddress.setDescription('The IP address of the statically configured multicast source.')
hpicfPimStaticRpfSourcePrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 9, 1, 3), InetAddressPrefixLength())
if mibBuilder.loadTexts: hpicfPimStaticRpfSourcePrefixLength.setStatus('current')
if mibBuilder.loadTexts: hpicfPimStaticRpfSourcePrefixLength.setDescription('The prefix length of the statically configured multicast source.')
hpicfPimStaticRpfAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 9, 1, 4), InetAddressType())
if mibBuilder.loadTexts: hpicfPimStaticRpfAddressType.setStatus('current')
if mibBuilder.loadTexts: hpicfPimStaticRpfAddressType.setDescription('The type of RPF address for this route. The value of this object must be equal to a value appropriate for the corresponding instance of the hpicfPimStaticRpfSourceAddressType object.')
hpicfPimStaticRpfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 9, 1, 5), InetAddress())
if mibBuilder.loadTexts: hpicfPimStaticRpfAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfPimStaticRpfAddress.setDescription('The IP address of the interface to use for RPF checks.')
hpicfPimStaticRpfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 9, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPimStaticRpfRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfPimStaticRpfRowStatus.setDescription('The status of this row, by which new entries may be created, or old entries deleted from this table.')
hpicfPimStaticRpfOverrideState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inActive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimStaticRpfOverrideState.setStatus('current')
if mibBuilder.loadTexts: hpicfPimStaticRpfOverrideState.setDescription('The state of this RPF override entry.')
hpicfPimStaticRpfIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 9, 1, 8), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimStaticRpfIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfPimStaticRpfIfIndex.setDescription('Index of the Interface towards the RPF neighbor.')
hpicfPimStaticRpfNeighborAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 9, 1, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimStaticRpfNeighborAddressType.setStatus('current')
if mibBuilder.loadTexts: hpicfPimStaticRpfNeighborAddressType.setDescription('The IP address type of the statically configured RPF neighbor.')
hpicfPimStaticRpfNeighborAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 9, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimStaticRpfNeighborAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfPimStaticRpfNeighborAddress.setDescription('The IP address of the static RPF Neighbor.')
hpicfPimNumStaticRpfEntries = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimNumStaticRpfEntries.setStatus('current')
if mibBuilder.loadTexts: hpicfPimNumStaticRpfEntries.setDescription('Total number of Static RPF entries.')
hpicfPimVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimVersion.setStatus('current')
if mibBuilder.loadTexts: hpicfPimVersion.setDescription('Currently running PIM Version.')
hpicfPimStarGEntries = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimStarGEntries.setStatus('current')
if mibBuilder.loadTexts: hpicfPimStarGEntries.setDescription('Total number of entries in the (*,G) table')
hpicfPimSGEntries = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimSGEntries.setStatus('current')
if mibBuilder.loadTexts: hpicfPimSGEntries.setDescription('Total number of entries in the (S,G) table.')
hpicfPimMRouteTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 14), )
if mibBuilder.loadTexts: hpicfPimMRouteTable.setStatus('current')
if mibBuilder.loadTexts: hpicfPimMRouteTable.setDescription("HP extensions to rfc2932's ipMRouteEntry table.")
hpicfPimMRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 14, 1), )
ipMRouteEntry.registerAugmentions(("HP-ICF-PIM", "hpicfPimMRouteEntry"))
hpicfPimMRouteEntry.setIndexNames(*ipMRouteEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfPimMRouteEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfPimMRouteEntry.setDescription('HP extensions for an entry in ipMRouteEntry.')
hpicfPimSendRegStop = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 14, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimSendRegStop.setStatus('current')
if mibBuilder.loadTexts: hpicfPimSendRegStop.setDescription('Indicates that a register-stop message must be sent.')
hpicfPimSGSourceIsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 14, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimSGSourceIsActive.setStatus('current')
if mibBuilder.loadTexts: hpicfPimSGSourceIsActive.setDescription('Indicates whether the multicast source corresponding to the (S,G) is active.')
hpicfPimOutgoingRegisterIfAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 14, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimOutgoingRegisterIfAvailable.setStatus('current')
if mibBuilder.loadTexts: hpicfPimOutgoingRegisterIfAvailable.setDescription('Indicates that a register outgoing interface is available.')
hpicfPimEntryAddSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 14, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimEntryAddSuccess.setStatus('current')
if mibBuilder.loadTexts: hpicfPimEntryAddSuccess.setDescription('Indicates that an entry has been successfully added.')
hpicfPimNumOutgoingInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 14, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimNumOutgoingInterfaces.setStatus('current')
if mibBuilder.loadTexts: hpicfPimNumOutgoingInterfaces.setDescription('List of outgoing interfaces.')
hpicfPimDirectlyConnectedSource = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 14, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimDirectlyConnectedSource.setStatus('current')
if mibBuilder.loadTexts: hpicfPimDirectlyConnectedSource.setDescription('Specifies PIM routing entries on routers directly connecting to the same subnet with the multicast source.')
hpicfPimNeighborSearchFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 14, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimNeighborSearchFailure.setStatus('current')
if mibBuilder.loadTexts: hpicfPimNeighborSearchFailure.setDescription('Specifies PIM routing entries with PIM neighbor searching failure.')
hpicfPimRPTreePruneSent = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 14, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimRPTreePruneSent.setStatus('current')
if mibBuilder.loadTexts: hpicfPimRPTreePruneSent.setDescription('Specifies PIM routing entries on RPT branches where (S, G) prunes have been sent to the RP.')
hpicfPimOnSPTree = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 14, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimOnSPTree.setStatus('current')
if mibBuilder.loadTexts: hpicfPimOnSPTree.setDescription('Specifies PIM routing entries on the SPT.')
hpicfPimRPToSPTreeSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 14, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimRPToSPTreeSwitching.setStatus('current')
if mibBuilder.loadTexts: hpicfPimRPToSPTreeSwitching.setDescription('Specifies PIM routing entries in the process of RPT-to-SPT switchover.')
hpicfPimWildcardEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 14, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimWildcardEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfPimWildcardEntry.setDescription('Specifies wildcard routing entries.')
hpicfPimRPFPrimeNeighborAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 14, 1, 12), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimRPFPrimeNeighborAddressType.setStatus('current')
if mibBuilder.loadTexts: hpicfPimRPFPrimeNeighborAddressType.setDescription('RPF Prime Neighbor address type')
hpicfPimRPFPrimeNeighborAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 14, 1, 13), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimRPFPrimeNeighborAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfPimRPFPrimeNeighborAddress.setDescription('RPF Prime Neighbor address')
hpicfPimNumDownstreams = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 14, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimNumDownstreams.setStatus('current')
if mibBuilder.loadTexts: hpicfPimNumDownstreams.setDescription('Total number of downstreams.')
hpicfPimTotalNeighborCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimTotalNeighborCount.setStatus('current')
if mibBuilder.loadTexts: hpicfPimTotalNeighborCount.setDescription('PIM Neighbor Count.')
hpicfPimNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 16), )
if mibBuilder.loadTexts: hpicfPimNeighborTable.setStatus('current')
if mibBuilder.loadTexts: hpicfPimNeighborTable.setDescription('HP extensions to the pimNeighborTable.')
hpicfPimNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 16, 1), )
pimNeighborEntry.registerAugmentions(("HP-ICF-PIM", "hpicfPimNeighborEntry"))
hpicfPimNeighborEntry.setIndexNames(*pimNeighborEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfPimNeighborEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfPimNeighborEntry.setDescription('HP extensions for an entry in the pimNeighborTable.')
hpicfPimNeighborDRPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 16, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimNeighborDRPriority.setStatus('current')
if mibBuilder.loadTexts: hpicfPimNeighborDRPriority.setDescription("PIM Neighbor Router's Designated Router Priority value.")
hpicfPimNeighborGenerationIDValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 16, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimNeighborGenerationIDValue.setStatus('current')
if mibBuilder.loadTexts: hpicfPimNeighborGenerationIDValue.setDescription("PIM Neighbor Router's Generation ID value.")
hpicfPimNeighborHoldtime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 16, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimNeighborHoldtime.setStatus('current')
if mibBuilder.loadTexts: hpicfPimNeighborHoldtime.setDescription("PIM Neighbor Router's Hold Time value.")
hpicfPimNeighborPropagationDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 16, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimNeighborPropagationDelay.setStatus('current')
if mibBuilder.loadTexts: hpicfPimNeighborPropagationDelay.setDescription("PIM Neighbor Router's LAN Delay value.")
hpicfPimNeighborOverrideInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 16, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimNeighborOverrideInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfPimNeighborOverrideInterval.setDescription("PIM Neighbor Router's Override Interval value.")
hpicfPimNeighborStateRefreshInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 16, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimNeighborStateRefreshInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfPimNeighborStateRefreshInterval.setDescription("PIM Neighbor Router's State Refresh Interval value.")
hpicfPimUcastRouteTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 17), )
if mibBuilder.loadTexts: hpicfPimUcastRouteTable.setStatus('current')
if mibBuilder.loadTexts: hpicfPimUcastRouteTable.setDescription('Cached Unicast Route related to PIM.')
hpicfPimUcastRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 17, 1), ).setIndexNames((0, "HP-ICF-PIM", "hpicfPimUcastRouteAddressType"), (0, "HP-ICF-PIM", "hpicfPimUcastRouteAddress"), (0, "HP-ICF-PIM", "hpicfPimUcastRoutePrefix"))
if mibBuilder.loadTexts: hpicfPimUcastRouteEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfPimUcastRouteEntry.setDescription('An entry in pimUcastRouteTable.')
hpicfPimUcastRouteAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 17, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hpicfPimUcastRouteAddressType.setStatus('current')
if mibBuilder.loadTexts: hpicfPimUcastRouteAddressType.setDescription('Address family of a Unicast IP Address of a Source or network.')
hpicfPimUcastRouteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 17, 1, 2), InetAddress())
if mibBuilder.loadTexts: hpicfPimUcastRouteAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfPimUcastRouteAddress.setDescription('Unicast IP Address of a Source or network.')
hpicfPimUcastRoutePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 17, 1, 3), Unsigned32())
if mibBuilder.loadTexts: hpicfPimUcastRoutePrefix.setStatus('current')
if mibBuilder.loadTexts: hpicfPimUcastRoutePrefix.setDescription('Network Prefix length in bits of the address.')
hpicfPimUcastRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 17, 1, 4), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimUcastRouteIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfPimUcastRouteIfIndex.setDescription('Index of the Interface towards the source/network.')
hpicfPimUcastRouteUpstreamNbrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 17, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimUcastRouteUpstreamNbrType.setStatus('current')
if mibBuilder.loadTexts: hpicfPimUcastRouteUpstreamNbrType.setDescription('Address type of the PIM neighbor on Interface towards the source/network.')
hpicfPimUcastRouteUpstreamNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 17, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimUcastRouteUpstreamNbr.setStatus('current')
if mibBuilder.loadTexts: hpicfPimUcastRouteUpstreamNbr.setDescription('Address of the PIM neighbor on the Interface towards the source/network.')
hpicfPimUcastRouteProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 17, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimUcastRouteProtocol.setStatus('current')
if mibBuilder.loadTexts: hpicfPimUcastRouteProtocol.setDescription('Unicast routing protocol through which the route was learned.')
hpicfPimJoinPruneTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 18), )
if mibBuilder.loadTexts: hpicfPimJoinPruneTable.setStatus('current')
if mibBuilder.loadTexts: hpicfPimJoinPruneTable.setDescription('Info on Join-Prune messages to send')
hpicfPimJoinPruneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 18, 1), ).setIndexNames((0, "HP-ICF-PIM", "hpicfPimJoinPruneInterface"), (0, "HP-ICF-PIM", "hpicfPimJoinPruneInterfaceState"), (0, "HP-ICF-PIM", "hpicfPimJoinPruneSourceType"), (0, "HP-ICF-PIM", "hpicfPimJoinPruneSourceAddress"), (0, "HP-ICF-PIM", "hpicfPimJoinPruneGroupType"), (0, "HP-ICF-PIM", "hpicfPimJoinPruneGroupAddress"))
if mibBuilder.loadTexts: hpicfPimJoinPruneEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfPimJoinPruneEntry.setDescription('An entry in hpicfPimJoinPruneTable.')
hpicfPimJoinPruneInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 18, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hpicfPimJoinPruneInterface.setStatus('current')
if mibBuilder.loadTexts: hpicfPimJoinPruneInterface.setDescription('Interface on which Join-Prune messages will be sent.')
hpicfPimJoinPruneInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("join", 1), ("prune", 2))))
if mibBuilder.loadTexts: hpicfPimJoinPruneInterfaceState.setStatus('current')
if mibBuilder.loadTexts: hpicfPimJoinPruneInterfaceState.setDescription('Flag indicating a (S,G)/(*,G) join or (S,G,Rpt) prune.')
hpicfPimJoinPruneSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 18, 1, 3), InetAddressType())
if mibBuilder.loadTexts: hpicfPimJoinPruneSourceType.setStatus('current')
if mibBuilder.loadTexts: hpicfPimJoinPruneSourceType.setDescription('Flow source address type for a (S,G) join or (S,G,Rpt) prune.')
hpicfPimJoinPruneSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 18, 1, 4), InetAddress())
if mibBuilder.loadTexts: hpicfPimJoinPruneSourceAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfPimJoinPruneSourceAddress.setDescription('Flow source address for a (S,G) join or (S,G,Rpt) prune.')
hpicfPimJoinPruneGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 18, 1, 5), InetAddressType())
if mibBuilder.loadTexts: hpicfPimJoinPruneGroupType.setStatus('current')
if mibBuilder.loadTexts: hpicfPimJoinPruneGroupType.setDescription('Flow group address type for a (S,G)/(*,G) join or (S,G,Rpt) prune.')
hpicfPimJoinPruneGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 18, 1, 6), InetAddress())
if mibBuilder.loadTexts: hpicfPimJoinPruneGroupAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfPimJoinPruneGroupAddress.setDescription('Flow group address for a (S,G)/(*,G) join or (S,G,Rpt) prune.')
hpicfPimJoinPruneNeighborAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 18, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimJoinPruneNeighborAddressType.setStatus('current')
if mibBuilder.loadTexts: hpicfPimJoinPruneNeighborAddressType.setDescription('PIM neighbor router address type towards the source/RP to which Join-Prune messages are sent.')
hpicfPimJoinPruneNeighborAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 18, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimJoinPruneNeighborAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfPimJoinPruneNeighborAddress.setDescription('PIM neighbor router address towards the source/RP to which Join-Prune messages are sent.')
hpicfPimJoinPruneExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 18, 1, 9), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimJoinPruneExpiryTime.setStatus('current')
if mibBuilder.loadTexts: hpicfPimJoinPruneExpiryTime.setDescription('Expiry time of sending Join-Prune messages.')
hpicfPimRPSetTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 19), )
if mibBuilder.loadTexts: hpicfPimRPSetTable.setStatus('current')
if mibBuilder.loadTexts: hpicfPimRPSetTable.setDescription("Extensions to rfc2943's pimRPSetTable.")
hpicfPimRPSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 19, 1), )
pimRPSetEntry.registerAugmentions(("HP-ICF-PIM", "hpicfPimRPSetEntry"))
hpicfPimRPSetEntry.setIndexNames(*pimRPSetEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfPimRPSetEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfPimRPSetEntry.setDescription('An entry in pimUcastRouteTable.')
hpicfPimRPSetPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 19, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimRPSetPriority.setStatus('current')
if mibBuilder.loadTexts: hpicfPimRPSetPriority.setDescription('RP Set Priority.')
hpicfPimRPSetUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 19, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimRPSetUptime.setStatus('current')
if mibBuilder.loadTexts: hpicfPimRPSetUptime.setDescription('Time RP has been up.')
hpicfPimIfMessageCounterTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 20), )
if mibBuilder.loadTexts: hpicfPimIfMessageCounterTable.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfMessageCounterTable.setDescription('Table of per-interface message counters.')
hpicfPimIfMessageCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 20, 1), ).setIndexNames((0, "PIM-MIB", "pimInterfaceIfIndex"))
if mibBuilder.loadTexts: hpicfPimIfMessageCounterEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfMessageCounterEntry.setDescription('An entry in hpicfPimIfMessageCounterTable.')
hpicfPimIfMsgCountAssertReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 20, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimIfMsgCountAssertReceive.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfMsgCountAssertReceive.setDescription('Per-interface count of received Assert messages.')
hpicfPimIfMsgCountAssertTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 20, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimIfMsgCountAssertTransmit.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfMsgCountAssertTransmit.setDescription('Per-interface count of transmitted Assert messages.')
hpicfPimIfMsgCountAssertInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 20, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimIfMsgCountAssertInvalid.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfMsgCountAssertInvalid.setDescription('Per-interface count of invalid Assert messages received.')
hpicfPimIfMsgCountGraftReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 20, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimIfMsgCountGraftReceive.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfMsgCountGraftReceive.setDescription('Per-interface count of received Graft messages.')
hpicfPimIfMsgCountGraftTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 20, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimIfMsgCountGraftTransmit.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfMsgCountGraftTransmit.setDescription('Per-interface count of transmitted Graft messages.')
hpicfPimIfMsgCountGraftInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 20, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimIfMsgCountGraftInvalid.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfMsgCountGraftInvalid.setDescription('Per-interface count of invalid Graft messages received.')
hpicfPimIfMsgCountGraftAckReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 20, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimIfMsgCountGraftAckReceive.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfMsgCountGraftAckReceive.setDescription('Per-interface count of received Graft-Ack messages.')
hpicfPimIfMsgCountGraftAckTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 20, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimIfMsgCountGraftAckTransmit.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfMsgCountGraftAckTransmit.setDescription('Per-interface count of transmitted Graft-Ack messages.')
hpicfPimIfMsgCountGraftAckInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 20, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimIfMsgCountGraftAckInvalid.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfMsgCountGraftAckInvalid.setDescription('Per-interface count of invalid Graft-Ack messages received.')
hpicfPimIfMsgCountHelloReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 20, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimIfMsgCountHelloReceive.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfMsgCountHelloReceive.setDescription('Per-interface count of received HELLO messages.')
hpicfPimIfMsgCountHelloTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 20, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimIfMsgCountHelloTransmit.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfMsgCountHelloTransmit.setDescription('Per-interface count of transmitted HELLO messages.')
hpicfPimIfMsgCountHelloInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 20, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimIfMsgCountHelloInvalid.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfMsgCountHelloInvalid.setDescription('Per-interface count of invalid HELLO messages received.')
hpicfPimIfMsgCountJPReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 20, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimIfMsgCountJPReceive.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfMsgCountJPReceive.setDescription('Per-interface count of received Join-Prune messages.')
hpicfPimIfMsgCountJPTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 20, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimIfMsgCountJPTransmit.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfMsgCountJPTransmit.setDescription('Per-interface count of transmitted Join-Prune messages.')
hpicfPimIfMsgCountJPInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 20, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimIfMsgCountJPInvalid.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfMsgCountJPInvalid.setDescription('Per-interface count of invalid Join-Prune messages received.')
hpicfPimIfMsgCountSRReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 20, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimIfMsgCountSRReceive.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfMsgCountSRReceive.setDescription('Per-interface count of received State-Refresh messages.')
hpicfPimIfMsgCountSRTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 20, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimIfMsgCountSRTransmit.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfMsgCountSRTransmit.setDescription('Per-interface count of transmitted State-Refresh messages.')
hpicfPimIfMsgCountSRInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 20, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimIfMsgCountSRInvalid.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfMsgCountSRInvalid.setDescription('Per-interface count of invalid State-Refresh messages received.')
hpicfPimIfMsgCountBSRReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 20, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimIfMsgCountBSRReceive.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfMsgCountBSRReceive.setDescription('Per-interface count of received BSR messages.')
hpicfPimIfMsgCountBSRTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 20, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimIfMsgCountBSRTransmit.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfMsgCountBSRTransmit.setDescription('Per-interface count of transmitted BSR messages.')
hpicfPimIfMsgCountBSRInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 20, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimIfMsgCountBSRInvalid.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfMsgCountBSRInvalid.setDescription('Per-interface count of invalid BSR messages received.')
hpicfPimIfMsgCountCRPReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 20, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimIfMsgCountCRPReceive.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfMsgCountCRPReceive.setDescription('Per-interface count of received Candidate-RP messages.')
hpicfPimIfMsgCountCRPTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 20, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimIfMsgCountCRPTransmit.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfMsgCountCRPTransmit.setDescription('Per-interface count of transmitted Candidate-RP messages.')
hpicfPimIfMsgCountCRPInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 20, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimIfMsgCountCRPInvalid.setStatus('current')
if mibBuilder.loadTexts: hpicfPimIfMsgCountCRPInvalid.setDescription('Per-interface count of invalid Candidate-RP messages received.')
hpicfPimUnackGraftsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 21), )
if mibBuilder.loadTexts: hpicfPimUnackGraftsTable.setStatus('current')
if mibBuilder.loadTexts: hpicfPimUnackGraftsTable.setDescription('Information about unacknowledged graft messages on the network.')
hpicfPimUnackGraftsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 21, 1), ).setIndexNames((0, "HP-ICF-PIM", "hpicfPimUnackGraftSourceType"), (0, "HP-ICF-PIM", "hpicfPimUnackGraftSource"), (0, "HP-ICF-PIM", "hpicfPimUnackGraftGroupType"), (0, "HP-ICF-PIM", "hpicfPimUnackGraftGroup"))
if mibBuilder.loadTexts: hpicfPimUnackGraftsEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfPimUnackGraftsEntry.setDescription('An entry in hpicfPimUnackGraftsTable.')
hpicfPimUnackGraftSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 21, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hpicfPimUnackGraftSourceType.setStatus('current')
if mibBuilder.loadTexts: hpicfPimUnackGraftSourceType.setDescription('Flow Source address type for an unacknowledged Graft message on the network.')
hpicfPimUnackGraftSource = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 21, 1, 2), InetAddress())
if mibBuilder.loadTexts: hpicfPimUnackGraftSource.setStatus('current')
if mibBuilder.loadTexts: hpicfPimUnackGraftSource.setDescription('Flow Source address for an unacknowledged Graft message on the network.')
hpicfPimUnackGraftGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 21, 1, 3), InetAddressType())
if mibBuilder.loadTexts: hpicfPimUnackGraftGroupType.setStatus('current')
if mibBuilder.loadTexts: hpicfPimUnackGraftGroupType.setDescription('Flow Group address type for an unacknowledged Graft message on the network.')
hpicfPimUnackGraftGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 21, 1, 4), InetAddress())
if mibBuilder.loadTexts: hpicfPimUnackGraftGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfPimUnackGraftGroup.setDescription('Flow Group address for an unacknowledged graft message on the network.')
hpicfPimUnackGraftAge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 21, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimUnackGraftAge.setStatus('current')
if mibBuilder.loadTexts: hpicfPimUnackGraftAge.setDescription('Time in which the graft message will be timed-out.')
hpicfPimUnackGraftRetransIn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 1, 21, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimUnackGraftRetransIn.setStatus('current')
if mibBuilder.loadTexts: hpicfPimUnackGraftRetransIn.setDescription('Time in which the graft message will be retransmitted.')
hpicfPimMsgCountRegisterReceive = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimMsgCountRegisterReceive.setStatus('current')
if mibBuilder.loadTexts: hpicfPimMsgCountRegisterReceive.setDescription('Global count of received Register messages.')
hpicfPimMsgCountRegisterTransmit = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimMsgCountRegisterTransmit.setStatus('current')
if mibBuilder.loadTexts: hpicfPimMsgCountRegisterTransmit.setDescription('Global count of transmitted Register messages.')
hpicfPimMsgCountRegisterInvalid = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimMsgCountRegisterInvalid.setStatus('current')
if mibBuilder.loadTexts: hpicfPimMsgCountRegisterInvalid.setDescription('Global count of invalid Register messages received.')
hpicfPimMsgCountRegStopReceive = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimMsgCountRegStopReceive.setStatus('current')
if mibBuilder.loadTexts: hpicfPimMsgCountRegStopReceive.setDescription('Global count of received Register-stop messages.')
hpicfPimMsgCountRegStopTransmit = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimMsgCountRegStopTransmit.setStatus('current')
if mibBuilder.loadTexts: hpicfPimMsgCountRegStopTransmit.setDescription('Global count of transmitted Register-stop messages.')
hpicfPimMsgCountRegStopInvalid = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPimMsgCountRegStopInvalid.setStatus('current')
if mibBuilder.loadTexts: hpicfPimMsgCountRegStopInvalid.setDescription('Global count of invalid Register-stop messages received.')
hpicfPimHardMRTFull = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 0, 1))
if mibBuilder.loadTexts: hpicfPimHardMRTFull.setStatus('current')
if mibBuilder.loadTexts: hpicfPimHardMRTFull.setDescription('This notification signifies that the MRT table is full and the error has been originated by hardware. This trap should be generated whenever a multicast flow or MRT entry cannot be added.')
hpicfPimSoftMRTFull = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 1, 0, 2))
if mibBuilder.loadTexts: hpicfPimSoftMRTFull.setStatus('current')
if mibBuilder.loadTexts: hpicfPimSoftMRTFull.setDescription('This notification signifies that the MRT table is full and the error has been originated by software. This trap should be generated whenever a multicast flow or MRT entry cannot be added.')
hpicfPimNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 2, 1, 1)).setObjects(("HP-ICF-PIM", "hpicfPimHardMRTFull"), ("HP-ICF-PIM", "hpicfPimSoftMRTFull"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPimNotificationGroup = hpicfPimNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfPimNotificationGroup.setDescription('A collection of notifications that extends notifications defined in RFC 2934 - used for signaling important PIM events.')
hpicfPimBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 2, 1, 2)).setObjects(("HP-ICF-PIM", "hpicfPimAdminStatus"), ("HP-ICF-PIM", "hpicfPimStateRefreshInterval"), ("HP-ICF-PIM", "hpicfPimSPTThreshold"), ("HP-ICF-PIM", "hpicfPimTrapControl"), ("HP-ICF-PIM", "hpicfPimRemoveConfig"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPimBaseGroup = hpicfPimBaseGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfPimBaseGroup.setDescription('A collection of objects to support basic PIM configuration information on HP routers.')
hpicfPimStaticRPSetMappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 2, 1, 3)).setObjects(("HP-ICF-PIM", "hpicfPimStaticRPSetOverride"), ("HP-ICF-PIM", "hpicfPimStaticRPSetRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPimStaticRPSetMappingGroup = hpicfPimStaticRPSetMappingGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfPimStaticRPSetMappingGroup.setDescription('A collection of objects to support management of static Rendezvous Point (RP) to IP multicast group mappings.')
hpicfPimSparseIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 2, 1, 4)).setObjects(("HP-ICF-PIM", "hpicfPimIfAddress"), ("HP-ICF-PIM", "hpicfPimIfTrigHelloInterval"), ("HP-ICF-PIM", "hpicfPimIfHelloHoldtime"), ("HP-ICF-PIM", "hpicfPimIfLanPruneDelay"), ("HP-ICF-PIM", "hpicfPimIfPropagationDelay"), ("HP-ICF-PIM", "hpicfPimIfOverrideInterval"), ("HP-ICF-PIM", "hpicfPimIfGenerationID"), ("HP-ICF-PIM", "hpicfPimIfJoinPruneHoldtime"), ("HP-ICF-PIM", "hpicfPimIfLanDelayEnabled"), ("HP-ICF-PIM", "hpicfPimIfDRPriority"), ("HP-ICF-PIM", "hpicfPimIfNBRTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPimSparseIfGroup = hpicfPimSparseIfGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfPimSparseIfGroup.setDescription('A collection of objects that extends objects defined in pimInterfaceTable and used to support management of interfaces operating in PIM Sparse Mode.')
hpicfPimDenseIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 2, 1, 5)).setObjects(("HP-ICF-PIM", "hpicfPimIfAddress"), ("HP-ICF-PIM", "hpicfPimIfTrigHelloInterval"), ("HP-ICF-PIM", "hpicfPimIfHelloHoldtime"), ("HP-ICF-PIM", "hpicfPimIfLanPruneDelay"), ("HP-ICF-PIM", "hpicfPimIfPropagationDelay"), ("HP-ICF-PIM", "hpicfPimIfOverrideInterval"), ("HP-ICF-PIM", "hpicfPimIfGenerationID"), ("HP-ICF-PIM", "hpicfPimIfJoinPruneHoldtime"), ("HP-ICF-PIM", "hpicfPimIfGraftRetryInterval"), ("HP-ICF-PIM", "hpicfPimIfMaxGraftRetries"), ("HP-ICF-PIM", "hpicfPimIfSRTTLThreshold"), ("HP-ICF-PIM", "hpicfPimIfLanDelayEnabled"), ("HP-ICF-PIM", "hpicfPimIfSRCapable"), ("HP-ICF-PIM", "hpicfPimIfDRPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPimDenseIfGroup = hpicfPimDenseIfGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfPimDenseIfGroup.setDescription('A collection of objects that extends objects defined in pimInterfaceTable and used to support management of interfaces operating in PIM Dense Mode.')
hpicfPimComponentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 2, 1, 6)).setObjects(("HP-ICF-PIM", "hpicfPimComponentCBSRAdminStatus"), ("HP-ICF-PIM", "hpicfPimComponentCBSRAddress"), ("HP-ICF-PIM", "hpicfPimComponentCBSRPriority"), ("HP-ICF-PIM", "hpicfPimComponentCBSRHashMaskLength"), ("HP-ICF-PIM", "hpicfPimComponentCBSRMessageInterval"), ("HP-ICF-PIM", "hpicfPimComponentCRPPriority"), ("HP-ICF-PIM", "hpicfPimComponentCRPAdvInterval"), ("HP-ICF-PIM", "hpicfPimComponentBSRPriority"), ("HP-ICF-PIM", "hpicfPimComponentBSRHashMaskLength"), ("HP-ICF-PIM", "hpicfPimComponentBSRUpTime"), ("HP-ICF-PIM", "hpicfPimComponentBSRNextMessage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPimComponentGroup = hpicfPimComponentGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfPimComponentGroup.setDescription('A collection of objects that extends objects defined in pimComponentTable (RFC 2934).')
hpicfPimStaticRpfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 2, 1, 7)).setObjects(("HP-ICF-PIM", "hpicfPimStaticRpfOverrideState"), ("HP-ICF-PIM", "hpicfPimStaticRpfRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPimStaticRpfGroup = hpicfPimStaticRpfGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfPimStaticRpfGroup.setDescription('A collection of objects defined in hpicfPimStaticRpfTable.')
hpicfPimInterfaceExtensionsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 2, 1, 8)).setObjects(("HP-ICF-PIM", "hpicfPimVersion"), ("HP-ICF-PIM", "hpicfPimIfNBRCount"), ("HP-ICF-PIM", "hpicfPimIfNegotiatedPropagationDelay"), ("HP-ICF-PIM", "hpicfPimIfNegotiatedOverrideInterval"), ("HP-ICF-PIM", "hpicfPimIfAssertHoldInterval"), ("HP-ICF-PIM", "hpicfPimIfNumRoutersNotUsingDRPriority"), ("HP-ICF-PIM", "hpicfPimIfNumRoutersNotUsingLanDelay"), ("HP-ICF-PIM", "hpicfPimIfMsgCountGraftReceive"), ("HP-ICF-PIM", "hpicfPimIfMsgCountGraftTransmit"), ("HP-ICF-PIM", "hpicfPimIfMsgCountGraftInvalid"), ("HP-ICF-PIM", "hpicfPimIfMsgCountGraftAckReceive"), ("HP-ICF-PIM", "hpicfPimIfMsgCountGraftAckTransmit"), ("HP-ICF-PIM", "hpicfPimIfMsgCountGraftAckInvalid"), ("HP-ICF-PIM", "hpicfPimIfMsgCountSRReceive"), ("HP-ICF-PIM", "hpicfPimIfMsgCountSRTransmit"), ("HP-ICF-PIM", "hpicfPimIfMsgCountSRInvalid"), ("HP-ICF-PIM", "hpicfPimIfMsgCountBSRReceive"), ("HP-ICF-PIM", "hpicfPimIfMsgCountBSRTransmit"), ("HP-ICF-PIM", "hpicfPimIfMsgCountBSRInvalid"), ("HP-ICF-PIM", "hpicfPimIfMsgCountCRPReceive"), ("HP-ICF-PIM", "hpicfPimIfMsgCountCRPTransmit"), ("HP-ICF-PIM", "hpicfPimIfMsgCountCRPInvalid"), ("HP-ICF-PIM", "hpicfPimIfMsgCountJPReceive"), ("HP-ICF-PIM", "hpicfPimIfMsgCountJPTransmit"), ("HP-ICF-PIM", "hpicfPimIfMsgCountJPInvalid"), ("HP-ICF-PIM", "hpicfPimIfMsgCountAssertReceive"), ("HP-ICF-PIM", "hpicfPimIfMsgCountAssertTransmit"), ("HP-ICF-PIM", "hpicfPimIfMsgCountAssertInvalid"), ("HP-ICF-PIM", "hpicfPimIfMsgCountHelloReceive"), ("HP-ICF-PIM", "hpicfPimIfMsgCountHelloTransmit"), ("HP-ICF-PIM", "hpicfPimIfMsgCountHelloInvalid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPimInterfaceExtensionsGroup = hpicfPimInterfaceExtensionsGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfPimInterfaceExtensionsGroup.setDescription('A collection of objects that extends objects defined in pimInterfaceTable.')
hpicfPimStaticRpfExtensionsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 2, 1, 9)).setObjects(("HP-ICF-PIM", "hpicfPimStaticRpfIfIndex"), ("HP-ICF-PIM", "hpicfPimStaticRpfNeighborAddressType"), ("HP-ICF-PIM", "hpicfPimStaticRpfNeighborAddress"), ("HP-ICF-PIM", "hpicfPimNumStaticRpfEntries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPimStaticRpfExtensionsGroup = hpicfPimStaticRpfExtensionsGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfPimStaticRpfExtensionsGroup.setDescription('A collection of objects that extend hpicfPimStaticRpfTable.')
hpicfPimNeighborGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 2, 1, 10)).setObjects(("HP-ICF-PIM", "hpicfPimNeighborDRPriority"), ("HP-ICF-PIM", "hpicfPimNeighborGenerationIDValue"), ("HP-ICF-PIM", "hpicfPimNeighborHoldtime"), ("HP-ICF-PIM", "hpicfPimNeighborPropagationDelay"), ("HP-ICF-PIM", "hpicfPimNeighborOverrideInterval"), ("HP-ICF-PIM", "hpicfPimNeighborStateRefreshInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPimNeighborGroup = hpicfPimNeighborGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfPimNeighborGroup.setDescription('A collection of objects defined in hpicfPimNeighborTable.')
hpicfPimMRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 2, 1, 11)).setObjects(("HP-ICF-PIM", "hpicfPimSendRegStop"), ("HP-ICF-PIM", "hpicfPimSGSourceIsActive"), ("HP-ICF-PIM", "hpicfPimOutgoingRegisterIfAvailable"), ("HP-ICF-PIM", "hpicfPimEntryAddSuccess"), ("HP-ICF-PIM", "hpicfPimNumOutgoingInterfaces"), ("HP-ICF-PIM", "hpicfPimDirectlyConnectedSource"), ("HP-ICF-PIM", "hpicfPimNeighborSearchFailure"), ("HP-ICF-PIM", "hpicfPimRPTreePruneSent"), ("HP-ICF-PIM", "hpicfPimOnSPTree"), ("HP-ICF-PIM", "hpicfPimRPToSPTreeSwitching"), ("HP-ICF-PIM", "hpicfPimWildcardEntry"), ("HP-ICF-PIM", "hpicfPimRPFPrimeNeighborAddressType"), ("HP-ICF-PIM", "hpicfPimRPFPrimeNeighborAddress"), ("HP-ICF-PIM", "hpicfPimNumDownstreams"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPimMRouteGroup = hpicfPimMRouteGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfPimMRouteGroup.setDescription('A collection of objects defined in hpicfMRouteTable.')
hpicfPimUcastRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 2, 1, 12)).setObjects(("HP-ICF-PIM", "hpicfPimUcastRouteIfIndex"), ("HP-ICF-PIM", "hpicfPimUcastRouteUpstreamNbrType"), ("HP-ICF-PIM", "hpicfPimUcastRouteUpstreamNbr"), ("HP-ICF-PIM", "hpicfPimUcastRouteProtocol"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPimUcastRouteGroup = hpicfPimUcastRouteGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfPimUcastRouteGroup.setDescription('A collection of objects defined in hpicfUcastRouteTable.')
hpicfPimUnackGraftsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 2, 1, 13)).setObjects(("HP-ICF-PIM", "hpicfPimUnackGraftAge"), ("HP-ICF-PIM", "hpicfPimUnackGraftRetransIn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPimUnackGraftsGroup = hpicfPimUnackGraftsGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfPimUnackGraftsGroup.setDescription('A collection of objects defined in hpicfUnackGraftTable.')
hpicfPimGlobalCounterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 2, 1, 14)).setObjects(("HP-ICF-PIM", "hpicfPimMsgCountRegisterReceive"), ("HP-ICF-PIM", "hpicfPimMsgCountRegisterTransmit"), ("HP-ICF-PIM", "hpicfPimMsgCountRegisterInvalid"), ("HP-ICF-PIM", "hpicfPimMsgCountRegStopReceive"), ("HP-ICF-PIM", "hpicfPimMsgCountRegStopTransmit"), ("HP-ICF-PIM", "hpicfPimMsgCountRegStopInvalid"), ("HP-ICF-PIM", "hpicfPimStarGEntries"), ("HP-ICF-PIM", "hpicfPimSGEntries"), ("HP-ICF-PIM", "hpicfPimTotalNeighborCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPimGlobalCounterGroup = hpicfPimGlobalCounterGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfPimGlobalCounterGroup.setDescription('A collection of global PIM counter objects.')
hpicfPimRPSetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 2, 1, 15)).setObjects(("HP-ICF-PIM", "hpicfPimRPSetPriority"), ("HP-ICF-PIM", "hpicfPimRPSetUptime"), ("HP-ICF-PIM", "hpicfPimComponentCRPAdvTimer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPimRPSetGroup = hpicfPimRPSetGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfPimRPSetGroup.setDescription('A collection of additional RP & BSR objects.')
hpicfPimJoinPruneGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 2, 1, 17)).setObjects(("HP-ICF-PIM", "hpicfPimJoinPruneNeighborAddressType"), ("HP-ICF-PIM", "hpicfPimJoinPruneNeighborAddress"), ("HP-ICF-PIM", "hpicfPimJoinPruneExpiryTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPimJoinPruneGroup = hpicfPimJoinPruneGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfPimJoinPruneGroup.setDescription('A collection of objects defined in hpicfPimJoinPruneTable.')
hpicfPimSparseMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 2, 2, 1)).setObjects(("HP-ICF-PIM", "hpicfPimBaseGroup"), ("HP-ICF-PIM", "hpicfPimStaticRPSetMappingGroup"), ("HP-ICF-PIM", "hpicfPimSparseIfGroup"), ("HP-ICF-PIM", "hpicfPimComponentGroup"), ("HP-ICF-PIM", "hpicfPimStaticRpfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPimSparseMIBCompliance = hpicfPimSparseMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfPimSparseMIBCompliance.setDescription('The compliance statement for HP routers running PIM Sparse Mode and implementing the HP-ICF-PIM MIB.')
hpicfPimDenseMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 2, 2, 2)).setObjects(("HP-ICF-PIM", "hpicfPimBaseGroup"), ("HP-ICF-PIM", "hpicfPimDenseIfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPimDenseMIBCompliance = hpicfPimDenseMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfPimDenseMIBCompliance.setDescription('The compliance statement for HP routers running PIM Dense Mode and implementing the HP-ICF-PIM MIB.')
hpicfPimNotificationCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 2, 2, 3)).setObjects(("HP-ICF-PIM", "hpicfPimNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPimNotificationCompliance = hpicfPimNotificationCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfPimNotificationCompliance.setDescription('The collection of notifications that extends notifications defined in RFC 2934 - used for signalling important PIM events.')
hpicfPimUcastRoutingCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 2, 2, 4)).setObjects(("HP-ICF-PIM", "hpicfPimStaticRpfExtensionsGroup"), ("HP-ICF-PIM", "hpicfPimUcastRouteGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPimUcastRoutingCompliance = hpicfPimUcastRoutingCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfPimUcastRoutingCompliance.setDescription('The compliance statement for HP routers running PIM and related Unicast routing info.')
hpicfPimMcastRoutingCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 2, 2, 5)).setObjects(("HP-ICF-PIM", "hpicfPimMRouteGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPimMcastRoutingCompliance = hpicfPimMcastRoutingCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfPimMcastRoutingCompliance.setDescription('The compliance statement for HP routers running PIM and related multicast forwarding info.')
hpicfPimInterfaceInfoCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 2, 2, 6)).setObjects(("HP-ICF-PIM", "hpicfPimNeighborGroup"), ("HP-ICF-PIM", "hpicfPimInterfaceExtensionsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPimInterfaceInfoCompliance = hpicfPimInterfaceInfoCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfPimInterfaceInfoCompliance.setDescription('The compliance statement for HP routers running PIM and related interface and neighbor info.')
hpicfPimProtoMessageCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 2, 2, 7)).setObjects(("HP-ICF-PIM", "hpicfPimUnackGraftsGroup"), ("HP-ICF-PIM", "hpicfPimJoinPruneGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPimProtoMessageCompliance = hpicfPimProtoMessageCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfPimProtoMessageCompliance.setDescription('The compliance statement for HP routers running PIM and certain protocol packet info.')
hpicfPimGlobalCountersCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 2, 2, 8)).setObjects(("HP-ICF-PIM", "hpicfPimGlobalCounterGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPimGlobalCountersCompliance = hpicfPimGlobalCountersCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfPimGlobalCountersCompliance.setDescription('The compliance statement for HP routers running PIM and related global statistics data.')
hpicfPimRPSetExtensionsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 20, 2, 2, 9)).setObjects(("HP-ICF-PIM", "hpicfPimRPSetGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPimRPSetExtensionsCompliance = hpicfPimRPSetExtensionsCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfPimRPSetExtensionsCompliance.setDescription('The compliance statement for HP routers running PIM Sparse Mode and further RP set info.')
mibBuilder.exportSymbols("HP-ICF-PIM", hpicfPimStaticRpfEntry=hpicfPimStaticRpfEntry, hpicfPimIfMsgCountJPTransmit=hpicfPimIfMsgCountJPTransmit, hpicfPimUnackGraftSourceType=hpicfPimUnackGraftSourceType, hpicfPimSendRegStop=hpicfPimSendRegStop, hpicfPimStaticRpfNeighborAddressType=hpicfPimStaticRpfNeighborAddressType, hpicfPimNotificationGroup=hpicfPimNotificationGroup, hpicfPimUnackGraftAge=hpicfPimUnackGraftAge, hpicfPimRPFPrimeNeighborAddressType=hpicfPimRPFPrimeNeighborAddressType, hpicfPimJoinPruneNeighborAddressType=hpicfPimJoinPruneNeighborAddressType, hpicfPimJoinPruneTable=hpicfPimJoinPruneTable, hpicfPimJoinPruneEntry=hpicfPimJoinPruneEntry, hpicfPimComponentTable=hpicfPimComponentTable, hpicfPimIfMsgCountGraftReceive=hpicfPimIfMsgCountGraftReceive, hpicfPimIfPropagationDelay=hpicfPimIfPropagationDelay, hpicfPimNeighborHoldtime=hpicfPimNeighborHoldtime, hpicfPimNumStaticRpfEntries=hpicfPimNumStaticRpfEntries, hpicfPimGlobalCounterGroup=hpicfPimGlobalCounterGroup, hpicfPimMcastRoutingCompliance=hpicfPimMcastRoutingCompliance, hpicfPimIfMsgCountGraftInvalid=hpicfPimIfMsgCountGraftInvalid, hpicfPimIfMsgCountHelloReceive=hpicfPimIfMsgCountHelloReceive, hpicfPimIfNBRTimeout=hpicfPimIfNBRTimeout, hpicfPimJoinPruneGroup=hpicfPimJoinPruneGroup, hpicfPimIfMsgCountSRReceive=hpicfPimIfMsgCountSRReceive, hpicfPimUcastRouteAddress=hpicfPimUcastRouteAddress, hpicfPimAdminStatus=hpicfPimAdminStatus, hpicfPimRPSetEntry=hpicfPimRPSetEntry, hpicfPimSparseIfGroup=hpicfPimSparseIfGroup, hpicfPimIfMsgCountSRTransmit=hpicfPimIfMsgCountSRTransmit, hpicfPimWildcardEntry=hpicfPimWildcardEntry, hpicfPimJoinPruneSourceAddress=hpicfPimJoinPruneSourceAddress, hpicfPimNeighborTable=hpicfPimNeighborTable, hpicfPimIfMsgCountBSRTransmit=hpicfPimIfMsgCountBSRTransmit, hpicfPimRemoveConfig=hpicfPimRemoveConfig, hpicfPimUnackGraftsTable=hpicfPimUnackGraftsTable, hpicfPimIfMsgCountGraftTransmit=hpicfPimIfMsgCountGraftTransmit, hpicfPimConformance=hpicfPimConformance, hpicfPimTraps=hpicfPimTraps, hpicfPimSGSourceIsActive=hpicfPimSGSourceIsActive, hpicfPimMsgCountRegStopInvalid=hpicfPimMsgCountRegStopInvalid, hpicfPimIfMsgCountHelloTransmit=hpicfPimIfMsgCountHelloTransmit, hpicfPimMsgCountRegStopTransmit=hpicfPimMsgCountRegStopTransmit, hpicfPimMsgCountRegisterInvalid=hpicfPimMsgCountRegisterInvalid, hpicfPimUcastRouteTable=hpicfPimUcastRouteTable, hpicfPimMsgCountRegisterTransmit=hpicfPimMsgCountRegisterTransmit, hpicfPimIfNumRoutersNotUsingLanDelay=hpicfPimIfNumRoutersNotUsingLanDelay, hpicfPimComponentGroup=hpicfPimComponentGroup, hpicfPimOutgoingRegisterIfAvailable=hpicfPimOutgoingRegisterIfAvailable, hpicfPimUnackGraftsGroup=hpicfPimUnackGraftsGroup, hpicfPimUcastRouteUpstreamNbrType=hpicfPimUcastRouteUpstreamNbrType, hpicfPimRPSetGroup=hpicfPimRPSetGroup, hpicfPimCompliances=hpicfPimCompliances, hpicfPimComponentCBSRAdminStatus=hpicfPimComponentCBSRAdminStatus, hpicfPimIfEntry=hpicfPimIfEntry, hpicfPimStaticRPSetMappingGroup=hpicfPimStaticRPSetMappingGroup, hpicfPimIfMsgCountGraftAckTransmit=hpicfPimIfMsgCountGraftAckTransmit, hpicfPimComponentCBSRAddress=hpicfPimComponentCBSRAddress, hpicfPimStaticRPSetTable=hpicfPimStaticRPSetTable, hpicfPimUcastRouteProtocol=hpicfPimUcastRouteProtocol, hpicfPimIfMsgCountGraftAckInvalid=hpicfPimIfMsgCountGraftAckInvalid, hpicfPimIfNBRCount=hpicfPimIfNBRCount, hpicfPimMIB=hpicfPimMIB, hpicfPimStaticRpfTable=hpicfPimStaticRpfTable, hpicfPimJoinPruneSourceType=hpicfPimJoinPruneSourceType, hpicfPimIfMsgCountGraftAckReceive=hpicfPimIfMsgCountGraftAckReceive, hpicfPimStaticRpfSourcePrefixLength=hpicfPimStaticRpfSourcePrefixLength, hpicfPimIfTrigHelloInterval=hpicfPimIfTrigHelloInterval, hpicfPimIfMsgCountCRPReceive=hpicfPimIfMsgCountCRPReceive, hpicfPimGroups=hpicfPimGroups, hpicfPimIfGraftRetryInterval=hpicfPimIfGraftRetryInterval, hpicfPimComponentCBSRPriority=hpicfPimComponentCBSRPriority, hpicfPimIfMessageCounterTable=hpicfPimIfMessageCounterTable, hpicfPimIfMessageCounterEntry=hpicfPimIfMessageCounterEntry, hpicfPimIfMsgCountJPReceive=hpicfPimIfMsgCountJPReceive, hpicfPimTrapControl=hpicfPimTrapControl, hpicfPimRPSetUptime=hpicfPimRPSetUptime, hpicfPimStaticRPSetRowStatus=hpicfPimStaticRPSetRowStatus, hpicfPimIfMsgCountJPInvalid=hpicfPimIfMsgCountJPInvalid, hpicfPimIfNegotiatedOverrideInterval=hpicfPimIfNegotiatedOverrideInterval, hpicfPimComponentBSRHashMaskLength=hpicfPimComponentBSRHashMaskLength, hpicfPimComponentCRPAdvInterval=hpicfPimComponentCRPAdvInterval, hpicfPimUnackGraftsEntry=hpicfPimUnackGraftsEntry, hpicfPimSPTThreshold=hpicfPimSPTThreshold, hpicfPimDenseIfGroup=hpicfPimDenseIfGroup, hpicfPimIfNegotiatedPropagationDelay=hpicfPimIfNegotiatedPropagationDelay, hpicfPimScalars=hpicfPimScalars, hpicfPimJoinPruneInterface=hpicfPimJoinPruneInterface, hpicfPim=hpicfPim, hpicfPimIfMaxGraftRetries=hpicfPimIfMaxGraftRetries, hpicfPimJoinPruneGroupType=hpicfPimJoinPruneGroupType, hpicfPimNotificationCompliance=hpicfPimNotificationCompliance, hpicfPimRPSetTable=hpicfPimRPSetTable, hpicfPimNeighborGroup=hpicfPimNeighborGroup, hpicfPimIfMsgCountAssertReceive=hpicfPimIfMsgCountAssertReceive, hpicfPimUcastRouteGroup=hpicfPimUcastRouteGroup, hpicfPimRPSetPriority=hpicfPimRPSetPriority, hpicfPimComponentCBSRMessageInterval=hpicfPimComponentCBSRMessageInterval, hpicfPimBaseGroup=hpicfPimBaseGroup, hpicfPimNeighborSearchFailure=hpicfPimNeighborSearchFailure, hpicfPimNeighborOverrideInterval=hpicfPimNeighborOverrideInterval, hpicfPimDirectlyConnectedSource=hpicfPimDirectlyConnectedSource, hpicfPimStaticRpfSourceAddress=hpicfPimStaticRpfSourceAddress, hpicfPimJoinPruneNeighborAddress=hpicfPimJoinPruneNeighborAddress, hpicfPimInterfaceExtensionsGroup=hpicfPimInterfaceExtensionsGroup, hpicfPimStaticRpfAddress=hpicfPimStaticRpfAddress, hpicfPimSoftMRTFull=hpicfPimSoftMRTFull, hpicfPimStateRefreshInterval=hpicfPimStateRefreshInterval, hpicfPimJoinPruneInterfaceState=hpicfPimJoinPruneInterfaceState, hpicfPimStaticRpfExtensionsGroup=hpicfPimStaticRpfExtensionsGroup, hpicfPimUcastRouteUpstreamNbr=hpicfPimUcastRouteUpstreamNbr, hpicfPimIfLanDelayEnabled=hpicfPimIfLanDelayEnabled, hpicfPimNeighborDRPriority=hpicfPimNeighborDRPriority, hpicfPimNeighborPropagationDelay=hpicfPimNeighborPropagationDelay, hpicfPimJoinPruneGroupAddress=hpicfPimJoinPruneGroupAddress, hpicfPimHardMRTFull=hpicfPimHardMRTFull, hpicfPimComponentBSRPriority=hpicfPimComponentBSRPriority, hpicfPimRPSetExtensionsCompliance=hpicfPimRPSetExtensionsCompliance, hpicfPimIfSRCapable=hpicfPimIfSRCapable, hpicfPimUcastRouteAddressType=hpicfPimUcastRouteAddressType, hpicfPimUnackGraftSource=hpicfPimUnackGraftSource, hpicfPimStaticRPSetEntry=hpicfPimStaticRPSetEntry, hpicfPimComponentBSRUpTime=hpicfPimComponentBSRUpTime, hpicfPimStaticRpfSourceAddressType=hpicfPimStaticRpfSourceAddressType, hpicfPimMRouteEntry=hpicfPimMRouteEntry, hpicfPimDenseMIBCompliance=hpicfPimDenseMIBCompliance, hpicfPimNumOutgoingInterfaces=hpicfPimNumOutgoingInterfaces, hpicfPimIfTable=hpicfPimIfTable, hpicfPimMRouteTable=hpicfPimMRouteTable, hpicfPimObjects=hpicfPimObjects, hpicfPimStarGEntries=hpicfPimStarGEntries, hpicfPimIfDRPriority=hpicfPimIfDRPriority, hpicfPimStaticRPSetAddress=hpicfPimStaticRPSetAddress, hpicfPimVersion=hpicfPimVersion, hpicfPimNeighborStateRefreshInterval=hpicfPimNeighborStateRefreshInterval, hpicfPimIfMsgCountAssertInvalid=hpicfPimIfMsgCountAssertInvalid, hpicfPimNeighborGenerationIDValue=hpicfPimNeighborGenerationIDValue, hpicfPimMsgCountRegisterReceive=hpicfPimMsgCountRegisterReceive, hpicfPimJoinPruneExpiryTime=hpicfPimJoinPruneExpiryTime, hpicfPimIfGenerationID=hpicfPimIfGenerationID, hpicfPimUnackGraftRetransIn=hpicfPimUnackGraftRetransIn, hpicfPimComponentEntry=hpicfPimComponentEntry, hpicfPimIfMsgCountCRPTransmit=hpicfPimIfMsgCountCRPTransmit, hpicfPimNumDownstreams=hpicfPimNumDownstreams, hpicfPimGlobalCountersCompliance=hpicfPimGlobalCountersCompliance, hpicfPimUcastRoutingCompliance=hpicfPimUcastRoutingCompliance, hpicfPimComponentCRPPriority=hpicfPimComponentCRPPriority, hpicfPimIfSRTTLThreshold=hpicfPimIfSRTTLThreshold, hpicfPimSGEntries=hpicfPimSGEntries, hpicfPimStaticRpfAddressType=hpicfPimStaticRpfAddressType, hpicfPimInterfaceInfoCompliance=hpicfPimInterfaceInfoCompliance, hpicfPimIfOverrideInterval=hpicfPimIfOverrideInterval, hpicfPimRPTreePruneSent=hpicfPimRPTreePruneSent, hpicfPimSparseMIBCompliance=hpicfPimSparseMIBCompliance, hpicfPimUnackGraftGroupType=hpicfPimUnackGraftGroupType, hpicfPimProtoMessageCompliance=hpicfPimProtoMessageCompliance, hpicfPimUnackGraftGroup=hpicfPimUnackGraftGroup, hpicfPimMsgCountRegStopReceive=hpicfPimMsgCountRegStopReceive, hpicfPimMRouteGroup=hpicfPimMRouteGroup, hpicfPimTotalNeighborCount=hpicfPimTotalNeighborCount, hpicfPimIfMsgCountBSRReceive=hpicfPimIfMsgCountBSRReceive, hpicfPimIfMsgCountHelloInvalid=hpicfPimIfMsgCountHelloInvalid, hpicfPimStaticRpfOverrideState=hpicfPimStaticRpfOverrideState, hpicfPimComponentBSRNextMessage=hpicfPimComponentBSRNextMessage, hpicfPimIfJoinPruneHoldtime=hpicfPimIfJoinPruneHoldtime, hpicfPimIfLanPruneDelay=hpicfPimIfLanPruneDelay, hpicfPimStaticRpfGroup=hpicfPimStaticRpfGroup, hpicfPimRPFPrimeNeighborAddress=hpicfPimRPFPrimeNeighborAddress, hpicfPimUcastRoutePrefix=hpicfPimUcastRoutePrefix, hpicfPimUcastRouteIfIndex=hpicfPimUcastRouteIfIndex, hpicfPimIfHelloHoldtime=hpicfPimIfHelloHoldtime, hpicfPimStaticRPSetOverride=hpicfPimStaticRPSetOverride, hpicfPimComponentCRPAdvTimer=hpicfPimComponentCRPAdvTimer, hpicfPimRPToSPTreeSwitching=hpicfPimRPToSPTreeSwitching, hpicfPimEntryAddSuccess=hpicfPimEntryAddSuccess, hpicfPimStaticRPSetGroupAddress=hpicfPimStaticRPSetGroupAddress, hpicfPimIfMsgCountAssertTransmit=hpicfPimIfMsgCountAssertTransmit, hpicfPimStaticRPSetGroupMask=hpicfPimStaticRPSetGroupMask, hpicfPimOnSPTree=hpicfPimOnSPTree, hpicfPimComponentCBSRHashMaskLength=hpicfPimComponentCBSRHashMaskLength, hpicfPimStaticRpfRowStatus=hpicfPimStaticRpfRowStatus, hpicfPimUcastRouteEntry=hpicfPimUcastRouteEntry, hpicfPimIfMsgCountSRInvalid=hpicfPimIfMsgCountSRInvalid, hpicfPimIfNumRoutersNotUsingDRPriority=hpicfPimIfNumRoutersNotUsingDRPriority, hpicfPimIfMsgCountCRPInvalid=hpicfPimIfMsgCountCRPInvalid, hpicfPimIfAssertHoldInterval=hpicfPimIfAssertHoldInterval, hpicfPimIfAddress=hpicfPimIfAddress, PYSNMP_MODULE_ID=hpicfPimMIB, hpicfPimStaticRpfIfIndex=hpicfPimStaticRpfIfIndex, hpicfPimNeighborEntry=hpicfPimNeighborEntry, hpicfPimIfMsgCountBSRInvalid=hpicfPimIfMsgCountBSRInvalid, hpicfPimStaticRpfNeighborAddress=hpicfPimStaticRpfNeighborAddress)
