#
# PySNMP MIB module CISCO-SWITCH-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SWITCH-QOS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:13:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
QosLayer2Cos, Percent = mibBuilder.importSymbols("CISCO-QOS-PIB-MIB", "QosLayer2Cos", "Percent")
QosQueueNumber, QosMutationMapName, QosMutationMapNameOrEmpty, QosPolicerType, QosThresholdNumber, QosIpPrecedence, QosMplsExpValue = mibBuilder.importSymbols("CISCO-QOS-TC-MIB", "QosQueueNumber", "QosMutationMapName", "QosMutationMapNameOrEmpty", "QosPolicerType", "QosThresholdNumber", "QosIpPrecedence", "QosMplsExpValue")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
Dscp, = mibBuilder.importSymbols("DIFFSERV-DSCP-TC", "Dscp")
IfDirection, = mibBuilder.importSymbols("DIFFSERV-MIB", "IfDirection")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Bits, Integer32, Gauge32, MibIdentifier, Counter64, TimeTicks, ModuleIdentity, ObjectIdentity, NotificationType, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Gauge32", "MibIdentifier", "Counter64", "TimeTicks", "ModuleIdentity", "ObjectIdentity", "NotificationType", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter32", "IpAddress")
TextualConvention, RowStatus, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "TruthValue", "DisplayString")
ciscoSwitchQosMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 580))
ciscoSwitchQosMIB.setRevisions(('2016-06-30 00:00', '2014-09-19 00:00', '2013-09-26 00:00', '2013-04-22 00:00', '2010-11-17 00:00', '2009-07-20 00:00', '2009-02-23 00:00', '2006-11-20 00:00', '2006-09-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoSwitchQosMIB.setRevisionsDescriptions(('Updated QosStatsType to add new value ucastWatchdogDroppedPkts(20). Added ciscoSwitchQosHwServicePoolUsageGroup and ciscoSwitchQosServicePoolUsageTxGroup.', 'Updated csqIfQosGroupInfoScheduling to add new values dwrr(3) and notApplicable(4). Updated csqIfQosGroupInfoBandwidthUnits to add new value notApplicable(3). Updated csqIfQosGroupInfoShapeUnits to add new value notApplicable(3). Updated csqIfQosGroupInfoDropType to add new value notApplicable(3). Updated QosStatsType to add new values ucastSentOobfcPkts(16), ucastSentOobfcBytes(17), ucastDroppedOobfcPkts(18), ucastDroppedOobfcBytes(19). Added ciscoSwitchQosIfQosGroupInfoShapeGroup. Modified the description of the following objects to add more information: csqIfQosGroupInfoQueueSize, csqIfQosGroupInfoHwMTU, csqIfQosGroupInfoMTU, csqIfQosGroupInfoResumeThresh, csqIfQosGroupInfoPauseThresh, csqIfQosGroupInfoBandwidth.', 'Add ciscoSwitchQosIfPriGrpInBufUsageGroup, ciscoSwitchQosServicePoolUsageGroup, ciscoSwitchQosServicePoolCellSizeGroup.', 'Add ciscoSwitchQosIfQosGroupInfoGroup, ciscoSwitchQosIfQosGroupStatsGroup.', 'Add ciscoSwitchQosModuleClassChangedGroup, ciscoSwitchQosTenGOnlyModeGroup, ciscoSwitchQosIfQueueModeGroup, ciscoSwitchQosIfQueueSchedulingGroup, ciscoSwitchQosIfQueueingGroup, ciscoSwitchQosIfLanQueuingGroup and ciscoSwitchQosIfQueueBufferGroup.', 'Add ciscoSwitchQosModuleDscpRewriteGroup.', 'Add ciscoSwitchQosModuleStatsExtGroup and ciscoSwitchQosIfStatsExtGroup.', 'Add ciscoSwitchQosPolicerUsageGroup.', 'Initial revision of this MIB module.',))
if mibBuilder.loadTexts: ciscoSwitchQosMIB.setLastUpdated('201606300000Z')
if mibBuilder.loadTexts: ciscoSwitchQosMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoSwitchQosMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-lan-switch-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoSwitchQosMIB.setDescription("This MIB module extends the CISCO-CLASS-BASED-QOS-MIB by defining configuration and statistics information specific to the quality of service (QoS) features of Layer2/3 switch functionality implemented in Cisco devices. It is applicable to a device which is fully within a single QoS domain, although one or more boundaries with other QoS domains can be immediately adjacent to this device. Configuration information available through this MIB includes: + Mappings between CoS, IP Precedence, MPLS-EXP value to DSCP value and vice versa for classification purpose. + Device level QoS configuration for DSCP rewrite, policing of ACL-redirected traffic, QoS port-queueing mode, statistics collection for policy that sets a trust state. + CoS, MPLS-EXP and DSCP mutation map name and mappings. These mutations can be configured so that they change the content of packets which cross QoS boundaries, either as they enter or leave this device. + Interface QoS configuration such as default CoS value, trust state, packet assignment to queue and threshold based on CoS or DSCP value, drop algorithm and corresponding parameters, queue scheduling parameter such as WRR (Weighted Round Robin) weights, queue size allocation weight. Statistics available through this MIB includes: + Per module Multi-Layer Switching QoS statistics. + Per interface QoS queueing statistics. The following terms are used throughout this MIB: DSCP (Differentiated Services Code Point) is the six most significant bits of the ToS field in a IP packet header. DSCP Mutation: when a packet is being forwarded across an IP network, the previous hop(s) and the following hop(s) of a device may reside in a different QoS domain. A QoS domain refers to the set of QoS rules and conventions adopted by an administrative entity. For instance, a set of DSCP values may have a different meaning in different domains. DSCP mutation allows a DSCP set to be mutated or transformed in order to maintain semantic compatibility between adjacent domains. The mutation is done via mapping tables which maps the old DSCP value from one domain to a new DSCP value in the other domain. DSCP Mutation is applied to egress traffic. IP precedence is the three most significant bits of the ToS field in a IP packet header. CoS (Class of Service) is the three bits in the layer 2 header that indicates user priority value assigned to this packet. Trust state is a parameter configured at an interface to specify which QoS markings in packets arriving at that interface are acceptable as-is, rather than needing to be ignored/overwritten due to an 'untrusted' source or previous hop. BPDU (Bridge Protocol Data Unit) is used by bridges in a network to exchange information regarding their status. The Spanning Tree Protocol uses the BPDU information to elect the root switch and root port for the switched network. MPLS-EXP: MPLS experimental field in MPLS label. MTU: Maximum Transmission Unit.")
ciscoSwitchQosMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 580, 0))
ciscoSwitchQosMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 580, 1))
ciscoSwitchQosMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 580, 2))
csqGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 1))
csqMappings = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2))
csqMutations = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3))
csqInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4))
csqStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5))
csqPolicerUsage = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 6))
csqModule = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 7))
class QosStatsType(TextualConvention, Integer32):
    description = 'An integer indicating a specific statistics. ucastSentPkts(1): Unicast packets sent ucastSentBytes(2): Unicast bytes sent mcastSentPkts(3): Multicast packets sent mcastSentBytes(4): Multicast bytes sent ucastDroppedPkts(5): Unicast packets dropped ucastDroppedBytes(6): Unicast bytes dropped mcastDroppedPkts(7): Multicast packets dropped mcastDroppedBytes(8): Multicast bytes dropped sentPkts(9): Packets sent receivedPkts(10): Packets received droppedIngressPkts(11): Packets discarded on ingress ucastSentXbarPkts(12): Unicast packets sent to the cross-bar ucastRecvXbarPkts(13): Unicast packets received from the cross-bar mcastSentXbarPkts(14): Multicast packets sent to the cross-bar mcastRecvXbarPkts(15): Multicast packets received from the cross-bar ucastSentOobfcPkts(16): Unicast packets sent on OOBFC ucastSentOobfcBytes(17): Unicast bytes sent on OOBFC ucastDroppedOobfcPkts(18): Unicast packets dropped on OOBFC ucastDroppedOobfcBytes(19): Unicast bytes dropped on OOBFC ucastWatchdogDroppedPkts(20): Unicast packets dropped after watchdog triggered'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))
    namedValues = NamedValues(("ucastSentPkts", 1), ("ucastSentBytes", 2), ("mcastSentPkts", 3), ("mcastSentBytes", 4), ("ucastDroppedPkts", 5), ("ucastDroppedBytes", 6), ("mcastDroppedPkts", 7), ("mcastDroppedBytes", 8), ("sentPkts", 9), ("receivedPkts", 10), ("droppedIngressPkts", 11), ("ucastSentXbarPkts", 12), ("ucastRecvXbarPkts", 13), ("mcastSentXbarPkts", 14), ("mcastRecvXbarPkts", 15), ("ucastSentOobfcPkts", 16), ("ucastSentOobfcBytes", 17), ("ucastDroppedOobfcPkts", 18), ("ucastDroppedOobfcBytes", 19), ("ucastWatchdogDroppedPkts", 20))

csqDscpRewriteEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqDscpRewriteEnable.setStatus('current')
if mibBuilder.loadTexts: csqDscpRewriteEnable.setDescription("This object specifies whether DSCP rewrite is enabled at a device-level of granularity, i.e., 'true' = enabled and 'false' = disabled. If no other objects specify whether DSCP rewrite is enabled at any different level of granularity, then this object's value is not subject to any modifiers. However, some devices might support other object(s) which specify whether DSCP rewrite is enabled at different level(s) of granularity. For such devices, the value of this object takes precedence over the values of such other object(s) when the value of this object is 'false'; in contrast, when the value of this object is 'true', the values of such other objects take precedence over the value of this object. if 'true', all outgoing packets will have their DSCP value rewritten based on the result of classification, policing or DSCP mutation configured in the device. if 'false', all outgoing packets will have their DSCP values unchanged from they arrived.")
csqPoliceRedirectedTrafficEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqPoliceRedirectedTrafficEnable.setStatus('current')
if mibBuilder.loadTexts: csqPoliceRedirectedTrafficEnable.setDescription("This object specifies whether ACL-redirected traffic policing is enabled at a device-level of granularity, i.e., 'true' = enabled and 'false' = disabled. If no other objects specify whether ACL-redirected traffic is enabled at any different level of granularity, then this object's value is not subject to any modifiers. However, some devices might support other object(s) which specify whether ACL-redirected traffic policing is enabled at different level(s) of granularity. For such devices, the value of this object takes precedence over the values of such other object(s) when the value of this object is 'false'; in contrast, when the value of this object is 'true', the values of such other objects take precedence over the value of this object. if 'true', ACL-redirected traffic is subject to policing. if 'false', ACL-redirected traffic is not policed.")
csqPortQueueingModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqPortQueueingModeEnable.setStatus('current')
if mibBuilder.loadTexts: csqPortQueueingModeEnable.setDescription("This object specifies whether port-queueing mode is enabled at a device-level of granularity, i.e., 'true' = enabled and 'false' = disabled. If no other objects specify whether port-queueing mode is enabled at any different level of granularity, then this object's value is not subject to any modifiers. However, some devices might support other object(s) which specify whether port-queueing mode is enabled at different level(s) of granularity. For such devices, the value of this object takes precedence over the values of such other object(s) when the value of this object is 'false'; in contrast, when the value of this object is 'true', the values of such other objects take precedence over the value of this object. if 'true', port-queueing mode is enabled. In port-queueing mode, marking and policing is disabled. All queueing on receiving and transmitting is based on QoS tag in the incoming packet. For 802.1Q or ISL-encapsulated packets, queueing is based on the CoS value. Otherwise, queueing is based on the default interface CoS value denoted by csqIfDefaultCos object. if 'false', port-queueing mode is disabled.")
csqMarkingStatisticsEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqMarkingStatisticsEnable.setStatus('current')
if mibBuilder.loadTexts: csqMarkingStatisticsEnable.setDescription("This object specifies whether statistics collection for policy that sets a trust state is enabled at a device-level of granularity, i.e., 'true' = enabled and 'false' = disabled. If no other objects specify whether statistics collection for policy that sets a trust state is enabled at any different level of granularity, then this object's value is not subject to any modifiers. However, some devices might support other object(s) which specify whether statistics collection for policy that sets a trust state is enabled at different level(s) of granularity. For such devices, the value of this object takes precedence over the values of such other object(s) when the value of this object is 'false'; in contrast, when the value of this object is 'true', the values of such other objects take precedence over the value of this object. if 'true', statistics collection is enabled. if 'false', statistics collection is disabled.")
csqTenGOnlyMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqTenGOnlyMode.setStatus('current')
if mibBuilder.loadTexts: csqTenGOnlyMode.setDescription("This object specifies whether only 10-Gigabit Ethernet uplink interfaces are used exclusively. 'true' indicates that only the 10-Gigabit Ethernet uplink interfaces are used. The other uplink interfaces which are not of 10-Gigabit capacity will be in administratively down state. 'false' indicates otherwise.")
csqServicePoolCellSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqServicePoolCellSize.setStatus('current')
if mibBuilder.loadTexts: csqServicePoolCellSize.setDescription('This object indicates the number of bytes for a service pool cell.')
csqCosToDscpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2, 1), )
if mibBuilder.loadTexts: csqCosToDscpTable.setStatus('current')
if mibBuilder.loadTexts: csqCosToDscpTable.setDescription("This table contains the mapping of CoS values to DSCP values. This mapping table consist of eight CoS values (0 through 7) and their corresponding DSCP values. The mapping given by this table is used for all packets received on an interface if and only if that interface has a trust state, as given by the value of csqIfTrustState for the interface, of 'trustCoS'.")
csqCosToDscpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-SWITCH-QOS-MIB", "csqCosToDscpCos"))
if mibBuilder.loadTexts: csqCosToDscpEntry.setStatus('current')
if mibBuilder.loadTexts: csqCosToDscpEntry.setDescription('Each row contains the mapping from a CoS value to a DSCP value.')
csqCosToDscpCos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2, 1, 1, 1), QosLayer2Cos())
if mibBuilder.loadTexts: csqCosToDscpCos.setStatus('current')
if mibBuilder.loadTexts: csqCosToDscpCos.setDescription('The CoS value being mapped to the DSCP value.')
csqCosToDscpDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2, 1, 1, 2), Dscp()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqCosToDscpDscp.setStatus('current')
if mibBuilder.loadTexts: csqCosToDscpDscp.setDescription('The DSCP value which the CoS value maps to.')
csqIpPrecToDscpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2, 2), )
if mibBuilder.loadTexts: csqIpPrecToDscpTable.setStatus('current')
if mibBuilder.loadTexts: csqIpPrecToDscpTable.setDescription("This table contains the mapping of IP Precedence to DSCP. This mapping table consist of eight IpPrecedence values (0 through 7) and their corresponding DSCP values. The mapping given by this table is used for all packets received on an interface if and only if that interface has a trust state, as given by the value of csqIfTrustState for the interface, of 'trustIpPrec'.")
csqIpPrecToDscpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-SWITCH-QOS-MIB", "csqIpPrecToDscpIpPrec"))
if mibBuilder.loadTexts: csqIpPrecToDscpEntry.setStatus('current')
if mibBuilder.loadTexts: csqIpPrecToDscpEntry.setDescription('Each row contains the mapping from an IP Precedence value to a DSCP value.')
csqIpPrecToDscpIpPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2, 2, 1, 1), QosIpPrecedence())
if mibBuilder.loadTexts: csqIpPrecToDscpIpPrec.setStatus('current')
if mibBuilder.loadTexts: csqIpPrecToDscpIpPrec.setDescription('The IP Precedence value being mapped to the DSCP value.')
csqIpPrecToDscpDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2, 2, 1, 2), Dscp()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIpPrecToDscpDscp.setStatus('current')
if mibBuilder.loadTexts: csqIpPrecToDscpDscp.setDescription('The DSCP value which the IP Precedence value maps to.')
csqExpToDscpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2, 3), )
if mibBuilder.loadTexts: csqExpToDscpTable.setStatus('current')
if mibBuilder.loadTexts: csqExpToDscpTable.setDescription('This table contains the mapping of MPLS-EXP values to DSCP values. This mapping table consist of eight MPLS-EXP values (0 through 7) and their corresponding DSCP values.')
csqExpToDscpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-SWITCH-QOS-MIB", "csqExpToDscpExp"))
if mibBuilder.loadTexts: csqExpToDscpEntry.setStatus('current')
if mibBuilder.loadTexts: csqExpToDscpEntry.setDescription('Each row contains the mapping from a EXP value to a DSCP value.')
csqExpToDscpExp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2, 3, 1, 1), QosMplsExpValue())
if mibBuilder.loadTexts: csqExpToDscpExp.setStatus('current')
if mibBuilder.loadTexts: csqExpToDscpExp.setDescription('The EXP value being mapped to the DSCP value.')
csqExpToDscpDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2, 3, 1, 2), Dscp()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqExpToDscpDscp.setStatus('current')
if mibBuilder.loadTexts: csqExpToDscpDscp.setDescription('The DSCP value which the EXP value maps to.')
csqDscpMappingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2, 4), )
if mibBuilder.loadTexts: csqDscpMappingTable.setStatus('current')
if mibBuilder.loadTexts: csqDscpMappingTable.setDescription("This table always has 64 entries, one for each DSCP value. The table contains four mappings from the DSCP value assigned to a packet. One mapping is to the egress CoS to be stored in the layer-2 frame headers for output on 802.1Q or ISL interfaces. Another mapping is to the EXP value to be stored in MPLS label. The other two mappings are to the remarked (or 'marked down') DSCP values which are used when a policer requires that a packet's DSCP value to be modified. Of these two mappings, one is for a normal burst, and the other is for maximum burst.")
csqDscpMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2, 4, 1), ).setIndexNames((0, "CISCO-SWITCH-QOS-MIB", "csqDscpMappingDscp"))
if mibBuilder.loadTexts: csqDscpMappingEntry.setStatus('current')
if mibBuilder.loadTexts: csqDscpMappingEntry.setDescription('Each row contains the mapping from DSCP value to CoS value, MPLS-EXP value and policed DSCP.')
csqDscpMappingDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2, 4, 1, 1), Dscp())
if mibBuilder.loadTexts: csqDscpMappingDscp.setStatus('current')
if mibBuilder.loadTexts: csqDscpMappingDscp.setDescription('The DSCP value being mapped to the CoS, EXP and policed DSCP value.')
csqDscpMappingCos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2, 4, 1, 2), QosLayer2Cos()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqDscpMappingCos.setStatus('current')
if mibBuilder.loadTexts: csqDscpMappingCos.setDescription('The CoS value which the DSCP values maps to.')
csqDscpMappingExp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2, 4, 1, 3), QosMplsExpValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqDscpMappingExp.setStatus('current')
if mibBuilder.loadTexts: csqDscpMappingExp.setDescription('The MPLS-EXP value which the DSCP values maps to.')
csqDscpMappingNormalBurstDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2, 4, 1, 4), Dscp()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqDscpMappingNormalBurstDscp.setStatus('current')
if mibBuilder.loadTexts: csqDscpMappingNormalBurstDscp.setDescription('The normal burst policed DSCP value which the DSCP values maps to.')
csqDscpMappingMaxBurstDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2, 4, 1, 5), Dscp()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqDscpMappingMaxBurstDscp.setStatus('current')
if mibBuilder.loadTexts: csqDscpMappingMaxBurstDscp.setDescription('The maximum burst policed DSCP value which the DSCP values maps to.')
csqMaxCosMutationMap = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqMaxCosMutationMap.setStatus('current')
if mibBuilder.loadTexts: csqMaxCosMutationMap.setDescription('The maximum number of CoS mutation map that can be supported in the device.')
csqCosMutationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 2), )
if mibBuilder.loadTexts: csqCosMutationTable.setStatus('current')
if mibBuilder.loadTexts: csqCosMutationTable.setDescription('This table indicates CoS mutation maps in the device.')
csqCosMutationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 2, 1), ).setIndexNames((1, "CISCO-SWITCH-QOS-MIB", "csqCosMutationMapName"))
if mibBuilder.loadTexts: csqCosMutationEntry.setStatus('current')
if mibBuilder.loadTexts: csqCosMutationEntry.setDescription('Each row contains the status of this instance. A row instance can be created or removed by setting the appropriate value of its RowStatus object. Once the number of entries in this table reaches the maximum number of CoS mutation map supported in the device denoted by csqMaxCosMutationMap object, user must delete an existing entry in this table in order to create a new entry.')
csqCosMutationMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 2, 1, 1), QosMutationMapName())
if mibBuilder.loadTexts: csqCosMutationMapName.setStatus('current')
if mibBuilder.loadTexts: csqCosMutationMapName.setDescription('The name of the CoS mutation map.')
csqCosMutationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csqCosMutationRowStatus.setStatus('current')
if mibBuilder.loadTexts: csqCosMutationRowStatus.setDescription('This object is used to manage the creation and deletion of rows in this table.')
csqCosMutationMappingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 3), )
if mibBuilder.loadTexts: csqCosMutationMappingTable.setStatus('current')
if mibBuilder.loadTexts: csqCosMutationMappingTable.setDescription('This table provides management information for CoS mutation mapping. CoS mutation is applied to ingress traffic. This mutation occurs before the CoS to DSCP mapping for applicable traffic as specified in csqCosToDscpTable.')
csqCosMutationMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 3, 1), ).setIndexNames((0, "CISCO-SWITCH-QOS-MIB", "csqCosMutationMapName"), (0, "CISCO-SWITCH-QOS-MIB", "csqCosMutationFromCos"))
if mibBuilder.loadTexts: csqCosMutationMappingEntry.setStatus('current')
if mibBuilder.loadTexts: csqCosMutationMappingEntry.setDescription('Each row contains the mapping from a CoS value to another CoS value. When the entry for csqCosMutationMapName in the csqCosMutationTable is created, corresponding entries in this table are initialized with a default mapping which is the identity function. When the entry for csqCosMutationMapName in the csqCosMutationTable is removed, corresponding entries in this table will also be deleted.')
csqCosMutationFromCos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 3, 1, 1), QosLayer2Cos())
if mibBuilder.loadTexts: csqCosMutationFromCos.setStatus('current')
if mibBuilder.loadTexts: csqCosMutationFromCos.setDescription('The input CoS value being mapped to the output CoS value in this mutation map.')
csqCosMutationToCos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 3, 1, 2), QosLayer2Cos()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqCosMutationToCos.setStatus('current')
if mibBuilder.loadTexts: csqCosMutationToCos.setDescription('The output CoS value which the input CoS value maps to.')
csqMaxDscpMutationMap = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqMaxDscpMutationMap.setStatus('current')
if mibBuilder.loadTexts: csqMaxDscpMutationMap.setDescription('The maximum number of DSCP mutation map that can be supported in the device.')
csqDscpMutationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 5), )
if mibBuilder.loadTexts: csqDscpMutationTable.setStatus('current')
if mibBuilder.loadTexts: csqDscpMutationTable.setDescription('This table indicates DSCP mutation maps in the device.')
csqDscpMutationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 5, 1), ).setIndexNames((1, "CISCO-SWITCH-QOS-MIB", "csqDscpMutationMapName"))
if mibBuilder.loadTexts: csqDscpMutationEntry.setStatus('current')
if mibBuilder.loadTexts: csqDscpMutationEntry.setDescription('Each row contains the status of this instance. A row instance can be created or removed by setting the appropriate value of its RowStatus object. Once the number of entries in this table reaches the maximum number of DSCP mutation map supported in the device denoted by csqMaxDscpMutationMap object, user must delete an existing entry in this table in order to create a new entry.')
csqDscpMutationMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 5, 1, 1), QosMutationMapName())
if mibBuilder.loadTexts: csqDscpMutationMapName.setStatus('current')
if mibBuilder.loadTexts: csqDscpMutationMapName.setDescription('The name of the DSCP mutation map.')
csqDscpMutationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csqDscpMutationRowStatus.setStatus('current')
if mibBuilder.loadTexts: csqDscpMutationRowStatus.setDescription('This object is used to manage the creation and deletion of rows in this table.')
csqDscpMutationMappingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 6), )
if mibBuilder.loadTexts: csqDscpMutationMappingTable.setStatus('current')
if mibBuilder.loadTexts: csqDscpMutationMappingTable.setDescription('This table provides management information for DSCP mutation mapping. DSCP mutation is applied to egress traffic. This mutation occurs after the mappings specified in csqDscpMappingTable.')
csqDscpMutationMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 6, 1), ).setIndexNames((0, "CISCO-SWITCH-QOS-MIB", "csqDscpMutationMapName"), (0, "CISCO-SWITCH-QOS-MIB", "csqDscpMutationFromDscp"))
if mibBuilder.loadTexts: csqDscpMutationMappingEntry.setStatus('current')
if mibBuilder.loadTexts: csqDscpMutationMappingEntry.setDescription('Each row contains the mapping from an input DSCP value to an output DSCP value. When the entry for csqDscpMutationMapName in the csqDscpMutationTable is created, corresponding entries in this table are initialized with a default mapping which is the identity function. When the entry for csqDscpMutationMapName in the csqDscpMutationTable is removed, corresponding entries in this table will also be deleted.')
csqDscpMutationFromDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 6, 1, 1), Dscp())
if mibBuilder.loadTexts: csqDscpMutationFromDscp.setStatus('current')
if mibBuilder.loadTexts: csqDscpMutationFromDscp.setDescription('The input DSCP value being mapped to the output DSCP value in this mutation map.')
csqDscpMutationToDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 6, 1, 2), Dscp()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqDscpMutationToDscp.setStatus('current')
if mibBuilder.loadTexts: csqDscpMutationToDscp.setDescription('The output DSCP value which the input DSCP value maps to.')
csqMaxExpMutationMap = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqMaxExpMutationMap.setStatus('current')
if mibBuilder.loadTexts: csqMaxExpMutationMap.setDescription('The maximum number of EXP mutation can be supported in the device.')
csqExpMutationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 8), )
if mibBuilder.loadTexts: csqExpMutationTable.setStatus('current')
if mibBuilder.loadTexts: csqExpMutationTable.setDescription('This table indicates EXP mutation maps in the device.')
csqExpMutationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 8, 1), ).setIndexNames((1, "CISCO-SWITCH-QOS-MIB", "csqExpMutationMapName"))
if mibBuilder.loadTexts: csqExpMutationEntry.setStatus('current')
if mibBuilder.loadTexts: csqExpMutationEntry.setDescription('Each row contains the status of this instance. A row instance can be created or removed by setting the appropriate value of its RowStatus object. Once the number of entries in this table reaches the maximum number of EXP mutation map supported in the device denoted by csqMaxExpMutationMap object, user must delete an existing entry in this table in order to create a new entry.')
csqExpMutationMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 8, 1, 1), QosMutationMapName())
if mibBuilder.loadTexts: csqExpMutationMapName.setStatus('current')
if mibBuilder.loadTexts: csqExpMutationMapName.setDescription('The name of the EXP mutation map.')
csqExpMutationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 8, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csqExpMutationRowStatus.setStatus('current')
if mibBuilder.loadTexts: csqExpMutationRowStatus.setDescription('This object is used to manage the creation and deletion of rows in this table.')
csqExpMutationMappingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 9), )
if mibBuilder.loadTexts: csqExpMutationMappingTable.setStatus('current')
if mibBuilder.loadTexts: csqExpMutationMappingTable.setDescription('This table provides management information for EXP mutation mapping. EXP mutation is applied to egress traffic. This mutation occurs after the mapping specified in csqExpToDscpTable.')
csqExpMutationMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 9, 1), ).setIndexNames((0, "CISCO-SWITCH-QOS-MIB", "csqExpMutationMapName"), (0, "CISCO-SWITCH-QOS-MIB", "csqExpMutationFromExp"))
if mibBuilder.loadTexts: csqExpMutationMappingEntry.setStatus('current')
if mibBuilder.loadTexts: csqExpMutationMappingEntry.setDescription('Each row contains the mapping from input EXP to output EXP value. When the entry for csqExpMutationMapName in the csqExpMutationTable is created, corresponding entries in this table are initialized with a default mapping which is the identity function. When the entry for csqExpMutationMapName in the csqExpMutationTable is removed, corresponding entries in this table will also be deleted.')
csqExpMutationFromExp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 9, 1, 1), QosMplsExpValue())
if mibBuilder.loadTexts: csqExpMutationFromExp.setStatus('current')
if mibBuilder.loadTexts: csqExpMutationFromExp.setDescription('The input EXP value being mapped to the output EXP value in this mutation map.')
csqExpMutationToExp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 9, 1, 2), QosMplsExpValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqExpMutationToExp.setStatus('current')
if mibBuilder.loadTexts: csqExpMutationToExp.setDescription('The output EXP value which the input EXP value maps to.')
csqIfMutationConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 10), )
if mibBuilder.loadTexts: csqIfMutationConfigTable.setStatus('current')
if mibBuilder.loadTexts: csqIfMutationConfigTable.setDescription('A table containing the mutation configuration for mutation capable interface in the device. If a mutation capable interface does not have a row in this table, there is no mutation performed at such interface.')
csqIfMutationConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: csqIfMutationConfigEntry.setStatus('current')
if mibBuilder.loadTexts: csqIfMutationConfigEntry.setDescription('A row instance contains the name of CoS, DSCP and EXP mutation map and RowStatus object.')
csqIfCosMutationMap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 10, 1, 1), QosMutationMapNameOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csqIfCosMutationMap.setStatus('current')
if mibBuilder.loadTexts: csqIfCosMutationMap.setDescription('This object specifies the name of CoS mutation map applied at this interface. If CoS mutation is not performed at the interface, then the value of this object is the zero-length string; otherwise, the value of this object must be the name of a row in the csqCosMutationTable. If a row in the csqCosMutationTable is deleted, all instances of this object which referenced the deleted row get changed to the zero-length string.')
csqIfDscpMutationMap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 10, 1, 2), QosMutationMapNameOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csqIfDscpMutationMap.setStatus('current')
if mibBuilder.loadTexts: csqIfDscpMutationMap.setDescription('This object specifies the name of DSCP mutation map applied at this interface. If DSCP mutation is not performed at the interface, then the value of this object is the zero-length string; otherwise, the value of this object must be the name of a row in the csqDscpMutationTable. If a row in the csqDscpMutationTable is deleted, all instances of this object which referenced the deleted row get changed to the zero-length string.')
csqIfExpMutationMap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 10, 1, 3), QosMutationMapNameOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csqIfExpMutationMap.setStatus('current')
if mibBuilder.loadTexts: csqIfExpMutationMap.setDescription('This object specifies the name of EXP mutation map applied at this interface. If EXP mutation is not performed at the interface, then the value of this object is the zero-length string; otherwise, the value of this object must be the name of a row in the csqExpMutationTable. If a row in the csqExpMutationTable is deleted, all instances of this object which referenced the deleted row get changed to the zero-length string.')
csqIfMutationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 10, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csqIfMutationRowStatus.setStatus('current')
if mibBuilder.loadTexts: csqIfMutationRowStatus.setDescription('This object is used to manage the creation, and deletion of rows in the table.')
csqIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 1), )
if mibBuilder.loadTexts: csqIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: csqIfConfigTable.setDescription('This table provides QoS configuration for QoS manageable interface in the device.')
csqIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: csqIfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: csqIfConfigEntry.setDescription('A row instance contains the default CoS value and trust state of a Qos manageable interface.')
csqIfDefaultCos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 1, 1, 1), QosLayer2Cos()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfDefaultCos.setStatus('current')
if mibBuilder.loadTexts: csqIfDefaultCos.setDescription("This object specifies the default CoS value configured at this physical interface. This default value will be assigned to packet which does not have a CoS value in its layer-2 header when the packet arrives at this interface or if the value of csqIfTrustState object for this physical interface is 'untrusted'.")
csqIfTrustState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("untrusted", 1), ("trustCoS", 2), ("trustIpPrec", 3), ("trustDscp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfTrustState.setStatus('current')
if mibBuilder.loadTexts: csqIfTrustState.setDescription('This object is used to set the trust state of an interface. (whether the packets arriving at an interface are trusted to carry the correct data for classification.) If the object is untrusted(1), then the DSCP assigned to the packet is the layer2 CoS value denoted by csqIfDefaultCos object mapped to a DSCP by the CoS-to-DSCP mapping defined in object csqCosToDscpDscp. If this object is trustCoS(2), then the DSCP assigned to the packet is the layer2 CoS of the packet mapped to a DSCP by the CoS-to-DSCP mapping defined in object csqCosToDscpDscp. When this object is trustIpPrec(3), a DSCP is assigned to an IP packet according to the IP-Precedence-to-DSCP mapping defined by the values contained in csqIpPrecToDscpTable. For non-IP packets, trustIpPrec(3) has identical behavior as trustCoS(2). When this object is trustDscp(4), the DSCP contained in an IP packet is trusted as being the correct value to assign to it. For non-IP packets, trustDscp(4) has identical behavior as trustCoS(2).')
csqIfQueueModeCpb = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 1, 1, 3), Bits().clone(namedValues=NamedValues(("cos", 0), ("dscp", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfQueueModeCpb.setStatus('current')
if mibBuilder.loadTexts: csqIfQueueModeCpb.setDescription("This object indicates the queue mode capability at this interface. 'cos' indicates that the interface is capable of queueing a packet based on the CoS value of the packet. 'dscp' indicates that the interface is capable of queueing a packet based on the DSCP value of the packet.")
csqIfConfigQueueMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cos", 1), ("dscp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfConfigQueueMode.setStatus('current')
if mibBuilder.loadTexts: csqIfConfigQueueMode.setDescription("Specifies the queueing mode at this interface. 'cos' indicates that the interface is queueing a packet based on the CoS value of the packet. This value can only be set if the 'cos' bit of csqIfQueueModeCpb is set. 'dscp' indicates that the interface is queueing a packet based on the DSCP value of the packet. This value can only be set if the 'dscp' bit of csqIfQueueModeCpb is set.")
csqIfIngressPolicyMap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 1, 1, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfIngressPolicyMap.setStatus('current')
if mibBuilder.loadTexts: csqIfIngressPolicyMap.setDescription('Specifies the name of an existing policy-map attached to this interface in ingress direction. If there is no such policy-map attached, the value of this object is zero-length string.')
csqIfEgressPolicyMap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 1, 1, 6), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfEgressPolicyMap.setStatus('current')
if mibBuilder.loadTexts: csqIfEgressPolicyMap.setDescription('Specifies the name of an existing policy-map attached to this interface in egress direction. If there is no such policy-map attached, the value of this object is zero-length string.')
csqIfIngressQueueingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfIngressQueueingEnable.setStatus('current')
if mibBuilder.loadTexts: csqIfIngressQueueingEnable.setDescription("This object indicates if ingress queueing is enabled at this interface. 'true' indicates ingress queueing is enabled. 'false' indicates ingress queueing is disabled.")
csqIfEgressQueueingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfEgressQueueingEnable.setStatus('current')
if mibBuilder.loadTexts: csqIfEgressQueueingEnable.setDescription("This object indicates if egress queueing is enabled at this interface. 'true' indicates egress queueing is enabled. 'false' indicates egress queueing is disabled.")
csqIfQueueingTrustState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("untrusted", 1), ("trustCoS", 2), ("trustIpPrec", 3), ("trustDscp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfQueueingTrustState.setStatus('current')
if mibBuilder.loadTexts: csqIfQueueingTrustState.setDescription('This object indicates the queueing trust state of an interface. If the object is untrusted(1), then the DSCP assigned to the packet is the layer2 CoS value denoted by csqIfDefaultCos object mapped to a DSCP by the CoS-to-DSCP mapping defined in object csqCosToDscpDscp. If this object is trustCoS(2), then the DSCP assigned to the packet is the layer2 CoS of the packet mapped to a DSCP by the CoS-to-DSCP mapping defined in object csqCosToDscpDscp. When this object is trustIpPrec(3), a DSCP is assigned to an IP packet according to the IP-Precedence-to-DSCP mapping defined by the values contained in csqIpPrecToDscpTable. For non-IP packets, trustIpPrec(3) has identical behavior as trustCoS(2). When this object is trustDscp(4), the DSCP contained in an IP packet is trusted as being the correct value to assign to it. For non-IP packets, trustDscp(4) has identical behavior as trustCoS(2).')
csqIfCosToQueueTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 2), )
if mibBuilder.loadTexts: csqIfCosToQueueTable.setStatus('current')
if mibBuilder.loadTexts: csqIfCosToQueueTable.setDescription('This table provides the information for and configuration of assigning packets to queues and thresholds based on their CoS value.')
csqIfCosToQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SWITCH-QOS-MIB", "csqIfCosToQueueDirection"), (0, "CISCO-SWITCH-QOS-MIB", "csqIfCosToQueueCos"))
if mibBuilder.loadTexts: csqIfCosToQueueEntry.setStatus('current')
if mibBuilder.loadTexts: csqIfCosToQueueEntry.setDescription('The assignment of packets at an interface to a pair of queue and threshold based on their CoS value and traffic direction.')
csqIfCosToQueueDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 2, 1, 1), IfDirection())
if mibBuilder.loadTexts: csqIfCosToQueueDirection.setStatus('current')
if mibBuilder.loadTexts: csqIfCosToQueueDirection.setDescription('The traffic direction of a packet.')
csqIfCosToQueueCos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 2, 1, 2), QosLayer2Cos())
if mibBuilder.loadTexts: csqIfCosToQueueCos.setStatus('current')
if mibBuilder.loadTexts: csqIfCosToQueueCos.setDescription('The CoS value of the packet which the queue and threshold assignment is based on.')
csqIfCosToQueueQueueNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 2, 1, 3), QosQueueNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfCosToQueueQueueNumber.setStatus('current')
if mibBuilder.loadTexts: csqIfCosToQueueQueueNumber.setDescription('The queue number where packet whose CoS value denoted by csqIfCosToQueueCos will be assigned to.')
csqIfCosToQueueThresholdNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 2, 1, 4), QosThresholdNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfCosToQueueThresholdNumber.setStatus('current')
if mibBuilder.loadTexts: csqIfCosToQueueThresholdNumber.setDescription('The threshold number where packet whose CoS value denoted by csqIfCosToQueueCos will be assigned to.')
csqIfDscpToQueueTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 3), )
if mibBuilder.loadTexts: csqIfDscpToQueueTable.setStatus('current')
if mibBuilder.loadTexts: csqIfDscpToQueueTable.setDescription('This table provides the information for and configuration of assigning packets to queues and thresholds based on their DSCP value and traffic direction.')
csqIfDscpToQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SWITCH-QOS-MIB", "csqIfDscpToQueueDirection"), (0, "CISCO-SWITCH-QOS-MIB", "csqIfDscpToQueueDscp"))
if mibBuilder.loadTexts: csqIfDscpToQueueEntry.setStatus('current')
if mibBuilder.loadTexts: csqIfDscpToQueueEntry.setDescription('The assignment of packets at an interface to a pair of queue and threshold based on their DSCP value and packets traffic direction.')
csqIfDscpToQueueDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 3, 1, 1), IfDirection())
if mibBuilder.loadTexts: csqIfDscpToQueueDirection.setStatus('current')
if mibBuilder.loadTexts: csqIfDscpToQueueDirection.setDescription('The traffic direction of a packet.')
csqIfDscpToQueueDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 3, 1, 2), Dscp())
if mibBuilder.loadTexts: csqIfDscpToQueueDscp.setStatus('current')
if mibBuilder.loadTexts: csqIfDscpToQueueDscp.setDescription('The DSCP value of the packet which the queue and threshold assignment is based on.')
csqIfDscpToQueueQueueNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 3, 1, 3), QosQueueNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfDscpToQueueQueueNumber.setStatus('current')
if mibBuilder.loadTexts: csqIfDscpToQueueQueueNumber.setDescription('The queue number where packet whose DSCP value denoted by csqIfDscpToQueueDscp will be assigned to.')
csqIfDscpToQueueThresholdNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 3, 1, 4), QosThresholdNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfDscpToQueueThresholdNumber.setStatus('current')
if mibBuilder.loadTexts: csqIfDscpToQueueThresholdNumber.setDescription('The threshold number where packet whose DSCP value denoted by csqIfDscpToQueueDscp will be assigned to.')
csqIfDropConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 4), )
if mibBuilder.loadTexts: csqIfDropConfigTable.setStatus('current')
if mibBuilder.loadTexts: csqIfDropConfigTable.setDescription('This table maintains threshold parameters for the specified queue number and threshold number of an interface.')
csqIfDropConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SWITCH-QOS-MIB", "csqIfDropConfigDirection"), (0, "CISCO-SWITCH-QOS-MIB", "csqIfDropConfigQueueIndex"), (0, "CISCO-SWITCH-QOS-MIB", "csqIfDropConfigThresholdIndex"))
if mibBuilder.loadTexts: csqIfDropConfigEntry.setStatus('current')
if mibBuilder.loadTexts: csqIfDropConfigEntry.setDescription('For each threshold of a queue, there are parameters to set on the threshold. This entry contains the parameters.')
csqIfDropConfigDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 4, 1, 1), IfDirection())
if mibBuilder.loadTexts: csqIfDropConfigDirection.setStatus('current')
if mibBuilder.loadTexts: csqIfDropConfigDirection.setDescription('Indicates the queue direction.')
csqIfDropConfigQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 4, 1, 2), QosQueueNumber())
if mibBuilder.loadTexts: csqIfDropConfigQueueIndex.setStatus('current')
if mibBuilder.loadTexts: csqIfDropConfigQueueIndex.setDescription('Indicates queue number.')
csqIfDropConfigThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 4, 1, 3), QosThresholdNumber())
if mibBuilder.loadTexts: csqIfDropConfigThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: csqIfDropConfigThresholdIndex.setDescription('Indicates threshold number.')
csqIfDropConfigDropAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tailDrop", 1), ("wred", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfDropConfigDropAlgorithm.setStatus('current')
if mibBuilder.loadTexts: csqIfDropConfigDropAlgorithm.setDescription("Specifies the drop algorithm running at this queue and threshold. 'tailDrop' indicates that this queue and threshold drops packet using tail-drop algorithm. This value is configurable only if 'tailDrop' bit in the value of qosIfCapabilities object for the same ifIndex and traffic direction is set. 'wred' indicates that WRED algorithm is used. This value is configurable only if 'wred' bit in the value of qosIfCapabilities object for the same ifIndex and traffic direction is set.")
csqIfDropConfigDropThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 4, 1, 5), Percent().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfDropConfigDropThreshold.setStatus('current')
if mibBuilder.loadTexts: csqIfDropConfigDropThreshold.setDescription("This object specifies the drop threshold parameter for a pair of queue and threshold of an interface when the drop algorithm is tail drop. Once the packets in the buffer is more than the value of this object, the incoming packets of the buffer are dropped. The value is a percentage of the full buffer. This object is configurable only if 'tailDrop' bit in the value of qosIfCapabilities for the same ifIndex and traffic direction is set. If value of csqIfDropConfigAlgorithm is not 'tailDrop', this object value has no effect. If value of csqIfDropConfigQueueBuffer is not 'percent', this object value has no effect.")
csqIfDropConfigMinWredThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 4, 1, 6), Percent()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfDropConfigMinWredThreshold.setStatus('current')
if mibBuilder.loadTexts: csqIfDropConfigMinWredThreshold.setDescription("This object specifies the min WRED threshold parameter of a threshold number for the specific interface when WRED drop algorithm is used. WRED (Weighted Random Early Detect) is a mechanism which drops packets fairly during congestion so that adaptive applications can react to congestion. This object specifies a percentage of the buffer size. This object is configurable only if 'wred' bit in the value of qosIfCapabilities object for the same ifIndex and traffic direction is set. If value of csqIfDropConfigAlgorithm is not 'wred', this object value has no effect.")
csqIfDropConfigMaxWredThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 4, 1, 7), Percent().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfDropConfigMaxWredThreshold.setStatus('current')
if mibBuilder.loadTexts: csqIfDropConfigMaxWredThreshold.setDescription("This object specifies the max WRED threshold parameter of a threshold number for the specific interface when WRED drop algorithm is used. This object is configurable only if 'wred' bit in the value of qosIfCapabilities object for the same ifIndex and traffic direction is set. If value of csqIfDropConfigAlgorithm is not 'wred', this object value has no effect.")
csqIfDropConfigQueueBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("shared", 1), ("dedicated", 2), ("percent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfDropConfigQueueBuffer.setStatus('current')
if mibBuilder.loadTexts: csqIfDropConfigQueueBuffer.setDescription("This object specifies how the queue buffer behaves when the drop algorithm is tail drop. 'shared' indicates that the queue buffer is shared among all queues at the interface. 'dedicated' indicates that each queue will be assigned a dedicated portion of the queue buffer. 'percent' indicates that a percentage of the queue buffer can be configured for each queue. The percentage value can be configured via csqIfDropConfigDropThreshold object. This object is configurable only if 'tailDrop' bit in the value of qosIfCapabilities for the same ifIndex and traffic direction is set. If value of csqIfDropConfigAlgorithm is not 'tailDrop', this object value has no effect.")
csqIfQueueTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 5), )
if mibBuilder.loadTexts: csqIfQueueTable.setStatus('current')
if mibBuilder.loadTexts: csqIfQueueTable.setDescription('A table containing configuration parameter for each queue on a QOS managable interface.')
csqIfQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SWITCH-QOS-MIB", "csqIfQueueDirection"), (0, "CISCO-SWITCH-QOS-MIB", "csqIfQueueNumber"))
if mibBuilder.loadTexts: csqIfQueueEntry.setStatus('current')
if mibBuilder.loadTexts: csqIfQueueEntry.setDescription('A set of WRR weight and queue size allocation weight for ingress or egress of a specific queue.')
csqIfQueueDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 5, 1, 1), IfDirection())
if mibBuilder.loadTexts: csqIfQueueDirection.setStatus('current')
if mibBuilder.loadTexts: csqIfQueueDirection.setDescription('Indicates the queue direction.')
csqIfQueueNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 5, 1, 2), QosQueueNumber())
if mibBuilder.loadTexts: csqIfQueueNumber.setStatus('current')
if mibBuilder.loadTexts: csqIfQueueNumber.setDescription('Indicates queue number.')
csqIfQueueWrrWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 5, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfQueueWrrWeight.setStatus('current')
if mibBuilder.loadTexts: csqIfQueueWrrWeight.setDescription("Specifies the WRR weight. This object is configurable only if the value of csqIfQueueScheduling is 'wrr'. When the value of csqIfQueueScheduling is not 'wrr', the value of this object has no effect.")
csqIfQueueSizeWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 5, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfQueueSizeWeight.setStatus('current')
if mibBuilder.loadTexts: csqIfQueueSizeWeight.setDescription('Specifies the queue size weight.')
csqIfQueueStatsGranularity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("perQueue", 1), ("perQueueThresh", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfQueueStatsGranularity.setStatus('current')
if mibBuilder.loadTexts: csqIfQueueStatsGranularity.setDescription("Indicates whether QoS statistics is maintained per queue or per queue per threshold. 'perQueue' indicates that QoS statistics is maintained per queue. 'perQueueThresh' indicates that QoS statistics is maintained per queue per threshold.")
csqIfQueueClassMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 5, 1, 6), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfQueueClassMapName.setStatus('current')
if mibBuilder.loadTexts: csqIfQueueClassMapName.setDescription('Specifies the name of an existing class-map attached at this interface for a queue in the specified direction. If there is no such class-map attached, the value of this object is zero-length string.')
csqIfQueueScheduling = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wrr", 1), ("srr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfQueueScheduling.setStatus('current')
if mibBuilder.loadTexts: csqIfQueueScheduling.setDescription("Specifies the queue scheduling method. 'wrr' indicates that the queue scheduling method is Weight Round Robin. 'srr' indicates that the queue scheduling method is Shaped Round Robin.")
csqIfQueueSrrWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 5, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfQueueSrrWeight.setStatus('current')
if mibBuilder.loadTexts: csqIfQueueSrrWeight.setDescription("Specifies the SRR weight. This object is configurable only if the value of csqIfQueueScheduling is 'srr'. When the value of csqIfQueueScheduling is not 'srr', the value of this object has no effect.")
csqIfModeConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 6), )
if mibBuilder.loadTexts: csqIfModeConfigTable.setStatus('current')
if mibBuilder.loadTexts: csqIfModeConfigTable.setDescription('A table used to configure the QoS mode for layer-2 interface.')
csqIfModeConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: csqIfModeConfigEntry.setStatus('current')
if mibBuilder.loadTexts: csqIfModeConfigEntry.setDescription('An entry containing QoS mode information of layer-2 interface.')
csqIfVlanBasedQosModeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 6, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfVlanBasedQosModeEnable.setStatus('current')
if mibBuilder.loadTexts: csqIfVlanBasedQosModeEnable.setDescription("Specifies if VLAN-based mode is enabled or disabled at the specified interface. If 'true', policy map that is attached to this interface has no effect, and QoS is driven by the policy map that is attached to the corresponding VLAN interface that this interface belongs to. Otherwise, the value of this object is 'false'.")
csqIfConsistencyCheckTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 7), )
if mibBuilder.loadTexts: csqIfConsistencyCheckTable.setStatus('current')
if mibBuilder.loadTexts: csqIfConsistencyCheckTable.setDescription('A table used to configure the QoS-port attribute consistency check for Port Channel interface identified by ifIndex. QoS-port attribute consistency check consists of but not limited to checking for members of a Port Channel interface having the same queue type.')
csqIfConsistencyCheckEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: csqIfConsistencyCheckEntry.setStatus('current')
if mibBuilder.loadTexts: csqIfConsistencyCheckEntry.setDescription('An entry containing QoS-port attribute consistency check information of Port Channel interface.')
csqIfConsistencyCheckEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 7, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfConsistencyCheckEnable.setStatus('current')
if mibBuilder.loadTexts: csqIfConsistencyCheckEnable.setDescription("Specifies if QoS-port attribute consitency check is enabled or disabled at the specified channel interface. If 'true', QoS-port attribute consistency check is enabled. If 'false', QoS-port attribute consistency check is disabled.")
csqIfQosGroupInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 8), )
if mibBuilder.loadTexts: csqIfQosGroupInfoTable.setStatus('current')
if mibBuilder.loadTexts: csqIfQosGroupInfoTable.setDescription('This table provides QoS group information for QoS manageable interfaces in the device.')
csqIfQosGroupInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SWITCH-QOS-MIB", "csqIfQosGroupInfoDirection"), (0, "CISCO-SWITCH-QOS-MIB", "csqIfQosGroupInfoGroupNumber"))
if mibBuilder.loadTexts: csqIfQosGroupInfoEntry.setStatus('current')
if mibBuilder.loadTexts: csqIfQosGroupInfoEntry.setDescription('A row instance contains Qos group information, which are per interface (ifIndex), per traffic direction, per QoS group.')
csqIfQosGroupInfoDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 8, 1, 1), IfDirection())
if mibBuilder.loadTexts: csqIfQosGroupInfoDirection.setStatus('current')
if mibBuilder.loadTexts: csqIfQosGroupInfoDirection.setDescription('This object indicates traffic direction.')
csqIfQosGroupInfoGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 8, 1, 2), Unsigned32())
if mibBuilder.loadTexts: csqIfQosGroupInfoGroupNumber.setStatus('current')
if mibBuilder.loadTexts: csqIfQosGroupInfoGroupNumber.setDescription('This object indicates a specific QoS group.')
csqIfQosGroupInfoQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfQosGroupInfoQueueSize.setStatus('current')
if mibBuilder.loadTexts: csqIfQosGroupInfoQueueSize.setDescription("This object indicates the ingress queue size. Value 0 indicates it's not applicable for this direction.")
csqIfQosGroupInfoHwMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 8, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfQosGroupInfoHwMTU.setStatus('current')
if mibBuilder.loadTexts: csqIfQosGroupInfoHwMTU.setDescription("This object indicates the hardware MTU. Value 0 indicates it's not applicable for this direction.")
csqIfQosGroupInfoMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 8, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfQosGroupInfoMTU.setStatus('current')
if mibBuilder.loadTexts: csqIfQosGroupInfoMTU.setDescription("This object indicates the MTU applied via QoS policy. Value 0 indicates it's not applicable for this direction.")
csqIfQosGroupInfoDropType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("drop", 1), ("noDrop", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfQosGroupInfoDropType.setStatus('current')
if mibBuilder.loadTexts: csqIfQosGroupInfoDropType.setDescription('This object indicates the drop type.')
csqIfQosGroupInfoResumeThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 8, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfQosGroupInfoResumeThresh.setStatus('current')
if mibBuilder.loadTexts: csqIfQosGroupInfoResumeThresh.setDescription("This object indicates the buffer limit (In Bytes) at which the port resumes the peer. Value 0 indicates it's not applicable for this direction.")
csqIfQosGroupInfoPauseThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 8, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfQosGroupInfoPauseThresh.setStatus('current')
if mibBuilder.loadTexts: csqIfQosGroupInfoPauseThresh.setDescription("This object indicates the buffer limit (In Bytes) at which the port pauses the peer. Value 0 indicates it's not applicable for this direction.")
csqIfQosGroupInfoScheduling = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("wrr", 1), ("priority", 2), ("dwrr", 3), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfQosGroupInfoScheduling.setStatus('current')
if mibBuilder.loadTexts: csqIfQosGroupInfoScheduling.setDescription('This object indicates the scheduling type applied via QoS policy.')
csqIfQosGroupInfoBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 8, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfQosGroupInfoBandwidth.setStatus('current')
if mibBuilder.loadTexts: csqIfQosGroupInfoBandwidth.setDescription("This object indicates the bandwidth. Value 0 indicates it's not applicable for this direction.")
csqIfQosGroupInfoBandwidthUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("kbps", 1), ("percentage", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfQosGroupInfoBandwidthUnits.setStatus('current')
if mibBuilder.loadTexts: csqIfQosGroupInfoBandwidthUnits.setDescription('This object indicates the unit of csqIfQosGroupInfoBandwidth.')
csqIfQosGroupInfoShapeMinThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 8, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfQosGroupInfoShapeMinThresh.setStatus('current')
if mibBuilder.loadTexts: csqIfQosGroupInfoShapeMinThresh.setDescription("This object indicates the shape minimum threshold. Value 0 indicates it's not applicable for this direction.")
csqIfQosGroupInfoShapeMaxThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 8, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfQosGroupInfoShapeMaxThresh.setStatus('current')
if mibBuilder.loadTexts: csqIfQosGroupInfoShapeMaxThresh.setDescription("This object indicates the shape maximum threshold. Value 0 indicates it's not applicable for this direction.")
csqIfQosGroupInfoShapeUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 8, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("kbps", 1), ("percentage", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfQosGroupInfoShapeUnits.setStatus('current')
if mibBuilder.loadTexts: csqIfQosGroupInfoShapeUnits.setDescription('This object indicates the unit of csqIfQosGroupInfoShapeMinThresh and csqIfQosGroupInfoShapeMaxThresh.')
csqIfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 1), )
if mibBuilder.loadTexts: csqIfStatsTable.setStatus('current')
if mibBuilder.loadTexts: csqIfStatsTable.setDescription('A table containing QoS statistics counters per QoS manageable interface.')
csqIfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SWITCH-QOS-MIB", "csqIfStatsDirection"), (0, "CISCO-SWITCH-QOS-MIB", "csqIfStatsQueueNumber"), (0, "CISCO-SWITCH-QOS-MIB", "csqIfStatsThresholdNumber"))
if mibBuilder.loadTexts: csqIfStatsEntry.setStatus('current')
if mibBuilder.loadTexts: csqIfStatsEntry.setDescription('An entry contains statistics, such as a drop packet counter, which are per interface (ifIndex), per direction, per queue and per threshold.')
csqIfStatsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 1, 1, 1), IfDirection())
if mibBuilder.loadTexts: csqIfStatsDirection.setStatus('current')
if mibBuilder.loadTexts: csqIfStatsDirection.setDescription('Indicates traffic direction of an interface.')
csqIfStatsQueueNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 1, 1, 2), QosQueueNumber())
if mibBuilder.loadTexts: csqIfStatsQueueNumber.setStatus('current')
if mibBuilder.loadTexts: csqIfStatsQueueNumber.setDescription('Indicates the queue number of the interface for which statistics are collected. For example : if the interface has a queue type of oneP2Q2t, this index value can be 1, 2, 3.')
csqIfStatsThresholdNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 1, 1, 3), QosThresholdNumber())
if mibBuilder.loadTexts: csqIfStatsThresholdNumber.setStatus('current')
if mibBuilder.loadTexts: csqIfStatsThresholdNumber.setDescription("Indicates the threshold number of a queue on the interface for which statistics are collected. For example : if the interface has a queue type of oneP2Q2t, this index value can be 1, 2. If the value of the corresponding csqIfQueueStatsGranularity for the queue that this csqIfStatsThresholdNumber belongs to is 'perQueue', this csqIfStatsThresholdNumber index value is always 1.")
csqIfStatsDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfStatsDropPkts.setStatus('current')
if mibBuilder.loadTexts: csqIfStatsDropPkts.setDescription('The number of packets that have been received then dropped from the interface because they exceeded the threshold value configured at this queue and threshold of this interface.')
csqModuleStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 2), )
if mibBuilder.loadTexts: csqModuleStatsTable.setStatus('current')
if mibBuilder.loadTexts: csqModuleStatsTable.setDescription('A table decribes QoS statistics counters per module that is capable of providing this information. Such module is identified by the entPhysicalIndex in ENTITY-MIB.')
csqModuleStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: csqModuleStatsEntry.setStatus('current')
if mibBuilder.loadTexts: csqModuleStatsEntry.setDescription('An entry contains per-module (entPhysicalIndex) statistics such as the number of dropped packets due to policing, number of IP packets with their ToS and CoS value changed, number of non IP packets with their CoS value changed, and number of MPLS packets with their EXP value changed.')
csqModuleDropByPolicingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleDropByPolicingPackets.setStatus('current')
if mibBuilder.loadTexts: csqModuleDropByPolicingPackets.setDescription('The number of packets that have been dropped due to policing.')
csqModuleTosChangedIpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleTosChangedIpPackets.setStatus('current')
if mibBuilder.loadTexts: csqModuleTosChangedIpPackets.setDescription('The number of IP packets that have the ToS value changed due to policing.')
csqModuleCosChangedIpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleCosChangedIpPackets.setStatus('current')
if mibBuilder.loadTexts: csqModuleCosChangedIpPackets.setDescription('The number of IP packets that have the CoS value changed due to policing.')
csqModuleCosChangedNonIpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleCosChangedNonIpPackets.setStatus('current')
if mibBuilder.loadTexts: csqModuleCosChangedNonIpPackets.setDescription('The number of non IP packets that have the CoS value changed due to policing.')
csqModuleExpChangedMplsPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleExpChangedMplsPackets.setStatus('current')
if mibBuilder.loadTexts: csqModuleExpChangedMplsPackets.setDescription('The number of MPLS packets have the EXP value change due to policing.')
csqModuleStatsExtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3), )
if mibBuilder.loadTexts: csqModuleStatsExtTable.setStatus('current')
if mibBuilder.loadTexts: csqModuleStatsExtTable.setDescription('This table describes additional QoS statistics counters per module that is capable of providing this information. Such module is identified by the entPhysicalIndex in ENTITY-MIB.')
csqModuleStatsExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: csqModuleStatsExtEntry.setStatus('current')
if mibBuilder.loadTexts: csqModuleStatsExtEntry.setDescription('Each entry contains additional per-module (entPhysicalIndex) QoS statistics.')
csqModuleTunnelEncapPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleTunnelEncapPackets.setStatus('current')
if mibBuilder.loadTexts: csqModuleTunnelEncapPackets.setDescription('The total number of tunnel encapsulated packets.')
csqModuleTunnelDecapPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleTunnelDecapPackets.setStatus('current')
if mibBuilder.loadTexts: csqModuleTunnelDecapPackets.setDescription('The total number of tunnel decapsulated packets.')
csqModuleDropByPolicingInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleDropByPolicingInOctets.setStatus('current')
if mibBuilder.loadTexts: csqModuleDropByPolicingInOctets.setDescription('The total number of ingress octets which are dropped due to policing.')
csqModuleDropByPolicingOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleDropByPolicingOutOctets.setStatus('current')
if mibBuilder.loadTexts: csqModuleDropByPolicingOutOctets.setDescription('The total number of egress octets which are dropped due to policing.')
csqModuleFwdByPolicingInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleFwdByPolicingInPackets.setStatus('current')
if mibBuilder.loadTexts: csqModuleFwdByPolicingInPackets.setDescription('The total number of policed ingress packets which are forwarded.')
csqModuleFwdByPolicingInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleFwdByPolicingInOctets.setStatus('current')
if mibBuilder.loadTexts: csqModuleFwdByPolicingInOctets.setDescription('The total number of policed ingress octets which are forwarded.')
csqModuleFwdByPolicingOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleFwdByPolicingOutPackets.setStatus('current')
if mibBuilder.loadTexts: csqModuleFwdByPolicingOutPackets.setDescription('The total number of policed egress packets which are forwarded.')
csqModuleFwdByPolicingOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleFwdByPolicingOutOctets.setStatus('current')
if mibBuilder.loadTexts: csqModuleFwdByPolicingOutOctets.setDescription('The total number of policed egress octets which are forwarded.')
csqModuleHighExceedInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleHighExceedInPackets.setStatus('current')
if mibBuilder.loadTexts: csqModuleHighExceedInPackets.setDescription('The total number of ingress packets exceeding the high level policing rate.')
csqModuleHighExceedInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleHighExceedInOctets.setStatus('current')
if mibBuilder.loadTexts: csqModuleHighExceedInOctets.setDescription('The total number of ingress octets exceeding the high level policing rate.')
csqModuleHighExceedOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleHighExceedOutPackets.setStatus('current')
if mibBuilder.loadTexts: csqModuleHighExceedOutPackets.setDescription('The total number of egress packets exceeding the high level policing rate.')
csqModuleHighExceedOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleHighExceedOutOctets.setStatus('current')
if mibBuilder.loadTexts: csqModuleHighExceedOutOctets.setDescription('The total number of egress octets exceeding the high level policing rate.')
csqModuleLowExceedInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleLowExceedInPackets.setStatus('current')
if mibBuilder.loadTexts: csqModuleLowExceedInPackets.setDescription('The total number of ingress packets exceeding the low level policing rate.')
csqModuleLowExceedInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleLowExceedInOctets.setStatus('current')
if mibBuilder.loadTexts: csqModuleLowExceedInOctets.setDescription('The total number of ingress octets exceeding the low level policing rate.')
csqModuleLowExceedOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleLowExceedOutPackets.setStatus('current')
if mibBuilder.loadTexts: csqModuleLowExceedOutPackets.setDescription('The total number of egress packets exceeding the low level policing rate.')
csqModuleLowExceedOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleLowExceedOutOctets.setStatus('current')
if mibBuilder.loadTexts: csqModuleLowExceedOutOctets.setDescription('The total number of egress octets exceeding the low level policing rate.')
csqModuleDropByAggPolicerInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleDropByAggPolicerInPackets.setStatus('current')
if mibBuilder.loadTexts: csqModuleDropByAggPolicerInPackets.setDescription('The total number of ingress packets which are dropped by aggregate policers.')
csqModuleDropByAggPolicerInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleDropByAggPolicerInOctets.setStatus('current')
if mibBuilder.loadTexts: csqModuleDropByAggPolicerInOctets.setDescription('The total number of ingress octets which are dropped by aggregate policer.')
csqModuleDropByAggPolicerOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleDropByAggPolicerOutPackets.setStatus('current')
if mibBuilder.loadTexts: csqModuleDropByAggPolicerOutPackets.setDescription('The total number of egress packets which are dropped by aggregate policers.')
csqModuleDropByAggPolicerOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleDropByAggPolicerOutOctets.setStatus('current')
if mibBuilder.loadTexts: csqModuleDropByAggPolicerOutOctets.setDescription('The total number of egress octets which are dropped by aggregate policers.')
csqModuleFwdByAggPolicerInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleFwdByAggPolicerInPackets.setStatus('current')
if mibBuilder.loadTexts: csqModuleFwdByAggPolicerInPackets.setDescription('The total number of ingress packets which are forwarded by aggregate policers.')
csqModuleFwdByAggPolicerInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleFwdByAggPolicerInOctets.setStatus('current')
if mibBuilder.loadTexts: csqModuleFwdByAggPolicerInOctets.setDescription('The total number of ingress octets which are forwarded by aggregate policers.')
csqModuleFwdByAggPolicerOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleFwdByAggPolicerOutPackets.setStatus('current')
if mibBuilder.loadTexts: csqModuleFwdByAggPolicerOutPackets.setDescription('The total number of egress packets which are forwarded by aggregate policers.')
csqModuleFwdByAggPolicerOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleFwdByAggPolicerOutOctets.setStatus('current')
if mibBuilder.loadTexts: csqModuleFwdByAggPolicerOutOctets.setDescription('The total number of egress octets which are forwarded by aggregate policers.')
csqModuleAggHighExceedInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleAggHighExceedInPackets.setStatus('current')
if mibBuilder.loadTexts: csqModuleAggHighExceedInPackets.setDescription('The total number of ingress packets (policed by aggregate policers) exceeding the high level policing rate.')
csqModuleAggHighExceedInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleAggHighExceedInOctets.setStatus('current')
if mibBuilder.loadTexts: csqModuleAggHighExceedInOctets.setDescription('The total number of ingress octets (policed by aggregate policers) exceeding the high level policing rate.')
csqModuleAggHighExceedOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleAggHighExceedOutPackets.setStatus('current')
if mibBuilder.loadTexts: csqModuleAggHighExceedOutPackets.setDescription('The total number of egress packets (policed by aggregate policers) exceeding the high level policing rate.')
csqModuleAggHighExceedOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleAggHighExceedOutOctets.setStatus('current')
if mibBuilder.loadTexts: csqModuleAggHighExceedOutOctets.setDescription('The total number of egress octets (policed by aggregate policers) exceeding the high level policing rate.')
csqModuleAggLowExceedInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleAggLowExceedInPackets.setStatus('current')
if mibBuilder.loadTexts: csqModuleAggLowExceedInPackets.setDescription('The total number of ingress packets (policed by aggregate policers) exceeding the low level policing rate.')
csqModuleAggLowExceedInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleAggLowExceedInOctets.setStatus('current')
if mibBuilder.loadTexts: csqModuleAggLowExceedInOctets.setDescription('The total number of ingress octets (policed by aggregate policers) exceeding the low level policing rate.')
csqModuleAggLowExceedOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleAggLowExceedOutPackets.setStatus('current')
if mibBuilder.loadTexts: csqModuleAggLowExceedOutPackets.setDescription('The total number of egress packets (policed by aggregate policers) exceeding the low level policing rate.')
csqModuleAggLowExceedOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleAggLowExceedOutOctets.setStatus('current')
if mibBuilder.loadTexts: csqModuleAggLowExceedOutOctets.setDescription('The total number of egress octets (policed by aggregate policers) exceeding the low level policing rate.')
csqModuleDropByNetflowInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleDropByNetflowInPackets.setStatus('current')
if mibBuilder.loadTexts: csqModuleDropByNetflowInPackets.setDescription('The total number of ingress packets which are dropped by the netflow feature.')
csqModuleDropByNetflowInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleDropByNetflowInOctets.setStatus('current')
if mibBuilder.loadTexts: csqModuleDropByNetflowInOctets.setDescription('The total number of ingress octets which are dropped by the netflow feature.')
csqModuleDropByNetflowOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleDropByNetflowOutPackets.setStatus('current')
if mibBuilder.loadTexts: csqModuleDropByNetflowOutPackets.setDescription('The total number of egress packets which are dropped by the netflow feature.')
csqModuleDropByNetflowOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleDropByNetflowOutOctets.setStatus('current')
if mibBuilder.loadTexts: csqModuleDropByNetflowOutOctets.setDescription('The total number of egress octets which are dropped by the netflow feature.')
csqModuleFwdByNetflowInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleFwdByNetflowInPackets.setStatus('current')
if mibBuilder.loadTexts: csqModuleFwdByNetflowInPackets.setDescription('The total number of ingress packets which are forwarded by the netflow feature.')
csqModuleFwdByNetflowInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleFwdByNetflowInOctets.setStatus('current')
if mibBuilder.loadTexts: csqModuleFwdByNetflowInOctets.setDescription('The total number of ingress octets which are forwarded by the netflow feature.')
csqModuleFwdByNetflowOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleFwdByNetflowOutPackets.setStatus('current')
if mibBuilder.loadTexts: csqModuleFwdByNetflowOutPackets.setDescription('The total number of egress packets which are forwarded by the netflow feature.')
csqModuleFwdByNetflowOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleFwdByNetflowOutOctets.setStatus('current')
if mibBuilder.loadTexts: csqModuleFwdByNetflowOutOctets.setDescription('The total number of egress octets which are forwarded by the netflow feature.')
csqModuleNetflowExceedInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleNetflowExceedInPackets.setStatus('current')
if mibBuilder.loadTexts: csqModuleNetflowExceedInPackets.setDescription('The total number of ingress packets exceeding the netflow policing rate.')
csqModuleNetflowExceedInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleNetflowExceedInOctets.setStatus('current')
if mibBuilder.loadTexts: csqModuleNetflowExceedInOctets.setDescription('The total number of ingress octets exceeding the netflow policing rate.')
csqModuleNetflowExceedOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleNetflowExceedOutPackets.setStatus('current')
if mibBuilder.loadTexts: csqModuleNetflowExceedOutPackets.setDescription('The total number of egress packets exceeding the netflow policing rate.')
csqModuleNetflowExceedOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleNetflowExceedOutOctets.setStatus('current')
if mibBuilder.loadTexts: csqModuleNetflowExceedOutOctets.setDescription('The total number of egress octets exceeding the netflow policing rate.')
csqModuleCosChangedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleCosChangedPackets.setStatus('current')
if mibBuilder.loadTexts: csqModuleCosChangedPackets.setDescription('The number of packets (IP and non-IP) that have the CoS value changed due to policing.')
csqModuleTrafficClassChangedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleTrafficClassChangedPackets.setStatus('current')
if mibBuilder.loadTexts: csqModuleTrafficClassChangedPackets.setDescription('The number of packets that have the Traffic Class changed due to policing')
csqIfStatsExtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 4), )
if mibBuilder.loadTexts: csqIfStatsExtTable.setStatus('current')
if mibBuilder.loadTexts: csqIfStatsExtTable.setDescription('A table containing QoS statistics counters per QoS manageable interface.')
csqIfStatsExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SWITCH-QOS-MIB", "csqIfStatsDirection"))
if mibBuilder.loadTexts: csqIfStatsExtEntry.setStatus('current')
if mibBuilder.loadTexts: csqIfStatsExtEntry.setDescription('Each entry contains statistics, such as a drop BPDU packet counter, which are per interface (ifIndex), per direction.')
csqIfBpduDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfBpduDropPkts.setStatus('current')
if mibBuilder.loadTexts: csqIfBpduDropPkts.setDescription('The total number of dropped BPDU packets.')
csqIfQosGroupStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 5), )
if mibBuilder.loadTexts: csqIfQosGroupStatsTable.setStatus('current')
if mibBuilder.loadTexts: csqIfQosGroupStatsTable.setDescription('A table containing QoS statistics counters on QoS manageable interfaces.')
csqIfQosGroupStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SWITCH-QOS-MIB", "csqIfQosGroupStatsDirection"), (0, "CISCO-SWITCH-QOS-MIB", "csqIfQosGroupStatsGroupNumber"), (0, "CISCO-SWITCH-QOS-MIB", "csqIfQosGroupStatsType"))
if mibBuilder.loadTexts: csqIfQosGroupStatsEntry.setStatus('current')
if mibBuilder.loadTexts: csqIfQosGroupStatsEntry.setDescription('An entry contains a specific statistics, which are per interface (ifIndex), per traffic direction, per QoS group.')
csqIfQosGroupStatsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 5, 1, 1), IfDirection())
if mibBuilder.loadTexts: csqIfQosGroupStatsDirection.setStatus('current')
if mibBuilder.loadTexts: csqIfQosGroupStatsDirection.setDescription('This object indicates traffic direction.')
csqIfQosGroupStatsGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 5, 1, 2), Unsigned32())
if mibBuilder.loadTexts: csqIfQosGroupStatsGroupNumber.setStatus('current')
if mibBuilder.loadTexts: csqIfQosGroupStatsGroupNumber.setDescription('This object indicates a specific QoS group on the interface.')
csqIfQosGroupStatsType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 5, 1, 3), QosStatsType())
if mibBuilder.loadTexts: csqIfQosGroupStatsType.setStatus('current')
if mibBuilder.loadTexts: csqIfQosGroupStatsType.setDescription('This object indicates a specific statistics counter type.')
csqIfQosGroupStatsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfQosGroupStatsValue.setStatus('current')
if mibBuilder.loadTexts: csqIfQosGroupStatsValue.setDescription('This object indicates the value of the specific statistics counter.')
csqIfPriGrpInBufUsageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 6), )
if mibBuilder.loadTexts: csqIfPriGrpInBufUsageTable.setStatus('current')
if mibBuilder.loadTexts: csqIfPriGrpInBufUsageTable.setDescription('A table contains the utilization of the buffer allocated for a specific priority group on the ingress of the QoS manageable interfaces.')
csqIfPriGrpInBufUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SWITCH-QOS-MIB", "csqIfPriGrpInBufUsageGrpNo"))
if mibBuilder.loadTexts: csqIfPriGrpInBufUsageEntry.setStatus('current')
if mibBuilder.loadTexts: csqIfPriGrpInBufUsageEntry.setDescription('An entry indicates the per interface per priority group buffer utilization on ingress direction. The unit of the value of each object is cell. A cell represents the number of bytes, which is indicated by scalar object csqServicePoolCellSize.')
csqIfPriGrpInBufUsageGrpNo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: csqIfPriGrpInBufUsageGrpNo.setStatus('current')
if mibBuilder.loadTexts: csqIfPriGrpInBufUsageGrpNo.setDescription('This object indicates a specific priority group on the interface.')
csqIfPriGrpInBufUsageMinCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 6, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfPriGrpInBufUsageMinCount.setStatus('current')
if mibBuilder.loadTexts: csqIfPriGrpInBufUsageMinCount.setDescription('This object indicates the current usage of cells used out of the minimum reserved buffer.')
csqIfPriGrpInBufUsageSharedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 6, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfPriGrpInBufUsageSharedCount.setStatus('current')
if mibBuilder.loadTexts: csqIfPriGrpInBufUsageSharedCount.setDescription('This object indicates the current usage of cells used out of the shared pool.')
csqIfPriGrpInBufUsageHeadroomCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 6, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfPriGrpInBufUsageHeadroomCount.setStatus('current')
if mibBuilder.loadTexts: csqIfPriGrpInBufUsageHeadroomCount.setDescription('This object indicates current usage of cells out of the reserved headroom buffer. Headroom buffer is reserved to account for PFC control frame round trip delays.')
csqIfPriGrpInBufUsageGlobalHeadroomCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfPriGrpInBufUsageGlobalHeadroomCount.setStatus('current')
if mibBuilder.loadTexts: csqIfPriGrpInBufUsageGlobalHeadroomCount.setDescription('This object indicates current usage of cells out of the global headroom buffer. Global headroom buffer is reserved and shared across all interfaces.')
csqIfPriGrpInBufUsageSharedPeekCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 6, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfPriGrpInBufUsageSharedPeekCount.setStatus('current')
if mibBuilder.loadTexts: csqIfPriGrpInBufUsageSharedPeekCount.setDescription('This object indicates peak usage of cells out of the shared pool.')
csqIfPriGrpInBufUsageHeadroomPeekCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 6, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfPriGrpInBufUsageHeadroomPeekCount.setStatus('current')
if mibBuilder.loadTexts: csqIfPriGrpInBufUsageHeadroomPeekCount.setDescription('This object indicates peak usage of cells out of the reserved headroom buffer.')
csqSharedPoolUsageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 7), )
if mibBuilder.loadTexts: csqSharedPoolUsageTable.setStatus('current')
if mibBuilder.loadTexts: csqSharedPoolUsageTable.setDescription('A table contains the utilization of the shared service pool in the system.')
csqSharedPoolUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 7, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-SWITCH-QOS-MIB", "csqSharedPoolUsageInstNo"), (0, "CISCO-SWITCH-QOS-MIB", "csqSharedPoolUsagePoolNo"))
if mibBuilder.loadTexts: csqSharedPoolUsageEntry.setStatus('current')
if mibBuilder.loadTexts: csqSharedPoolUsageEntry.setDescription('An entry indicates the utilization of an shared service pool on a particular physical device, which is identified by a specific module(indicated by entPhysicalIndex in ENTITY-MIB) and instance (indicated by csqSharedPoolUsageInstNo). The unit of the value of the objects is cell. A cell represents the number of bytes, which is indicated by scalar object csqServicePoolCellSize.')
csqSharedPoolUsageInstNo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: csqSharedPoolUsageInstNo.setStatus('current')
if mibBuilder.loadTexts: csqSharedPoolUsageInstNo.setDescription('This object indicates an arbitrary number which uniquely identifies the instance number of a specific internal device.')
csqSharedPoolUsagePoolNo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 7, 1, 2), Unsigned32())
if mibBuilder.loadTexts: csqSharedPoolUsagePoolNo.setStatus('current')
if mibBuilder.loadTexts: csqSharedPoolUsagePoolNo.setDescription('This object indicates the service pool number.')
csqSharedPoolUsageUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 7, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqSharedPoolUsageUsed.setStatus('current')
if mibBuilder.loadTexts: csqSharedPoolUsageUsed.setDescription('This object indicates the number of used cells in a shared pool.')
csqSharedPoolUsageRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 7, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqSharedPoolUsageRemain.setStatus('current')
if mibBuilder.loadTexts: csqSharedPoolUsageRemain.setDescription('This object indicates the remaining cells in a shared pool.')
csqSharedPoolUsagePeak = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 7, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqSharedPoolUsagePeak.setStatus('current')
if mibBuilder.loadTexts: csqSharedPoolUsagePeak.setDescription('This object indicates the peak used cells in a shared pool.')
csqSharedPoolUsageTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 7, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqSharedPoolUsageTotal.setStatus('current')
if mibBuilder.loadTexts: csqSharedPoolUsageTotal.setDescription('This object indicates the total cells in a shared pool.')
csqSharedPoolUsageUsedTx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 7, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqSharedPoolUsageUsedTx.setStatus('current')
if mibBuilder.loadTexts: csqSharedPoolUsageUsedTx.setDescription('This object indicates the number of used cells in a output shared pool.')
csqSharedPoolUsageRemainTx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 7, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqSharedPoolUsageRemainTx.setStatus('current')
if mibBuilder.loadTexts: csqSharedPoolUsageRemainTx.setDescription('This object indicates the remaining cells in a output shared pool.')
csqSharedPoolUsagePeakTx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 7, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqSharedPoolUsagePeakTx.setStatus('current')
if mibBuilder.loadTexts: csqSharedPoolUsagePeakTx.setDescription('This object indicates the peak used cells in a output shared pool.')
csqSharedPoolUsageTotalTx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 7, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqSharedPoolUsageTotalTx.setStatus('current')
if mibBuilder.loadTexts: csqSharedPoolUsageTotalTx.setDescription('This object indicates the total cells in a output shared pool.')
csqSharedPoolUsageNameTx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 7, 1, 11), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqSharedPoolUsageNameTx.setStatus('current')
if mibBuilder.loadTexts: csqSharedPoolUsageNameTx.setDescription('Indicates the name of output shared pool.')
csqHwSharedPoolUsageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 8), )
if mibBuilder.loadTexts: csqHwSharedPoolUsageTable.setStatus('current')
if mibBuilder.loadTexts: csqHwSharedPoolUsageTable.setDescription('A table contains the utilization of the shared service pool for internal devices of a specific physical entity that is capable of providing this information.')
csqHwSharedPoolUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 8, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-SWITCH-QOS-MIB", "csqHwSharedPoolDeviceId"), (0, "CISCO-SWITCH-QOS-MIB", "csqHwSharedPoolUsageInstNo"), (0, "CISCO-SWITCH-QOS-MIB", "csqHwSharedPoolStatsDirection"), (0, "CISCO-SWITCH-QOS-MIB", "csqHwSharedPoolStatsType"))
if mibBuilder.loadTexts: csqHwSharedPoolUsageEntry.setStatus('current')
if mibBuilder.loadTexts: csqHwSharedPoolUsageEntry.setDescription('An entry indicates the utilization of an shared service pool for an internal device on a particular physical device, which is identified by a specific module(indicated by entPhysicalIndex in ENTITY-MIB), device ID (indicated by csqHwSharedPoolDeviceId), traffic direction (indicated by csqHwSharedPoolStatsDirection), instance (indicated by csqHwSharedPoolUsageInstNo) and statistic type (indicated by csqHwSharedPoolStatsType). The unit of the value of the objects is cell. A cell represents the number of bytes, which is indicated by scalar object csqServicePoolCellSize.')
csqHwSharedPoolDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("northStar", 1))))
if mibBuilder.loadTexts: csqHwSharedPoolDeviceId.setStatus('current')
if mibBuilder.loadTexts: csqHwSharedPoolDeviceId.setDescription('This object indicates an arbitrary number which uniquely identifies a specific internal device.')
csqHwSharedPoolUsageInstNo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 8, 1, 2), Unsigned32())
if mibBuilder.loadTexts: csqHwSharedPoolUsageInstNo.setStatus('current')
if mibBuilder.loadTexts: csqHwSharedPoolUsageInstNo.setDescription('This object indicates an arbitrary number which uniquely identifies the instance number of a specific internal device.')
csqHwSharedPoolStatsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inputStats_ingressStraight", 1), ("inputStats_ingressHairpin", 2), ("inputStats_egress", 3), ("outputStats_ingressStraight", 4), ("outputStats_ingressHairpin", 5), ("outputStats_egress", 6))))
if mibBuilder.loadTexts: csqHwSharedPoolStatsDirection.setStatus('current')
if mibBuilder.loadTexts: csqHwSharedPoolStatsDirection.setDescription('This object indicates the flow direction of a specific traffic statistics.')
csqHwSharedPoolStatsType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("drop", 1), ("nodrop", 2), ("span", 3), ("sup", 4))))
if mibBuilder.loadTexts: csqHwSharedPoolStatsType.setStatus('current')
if mibBuilder.loadTexts: csqHwSharedPoolStatsType.setDescription('This object indicates the specific traffic classification type for hardware shared pool. drop - droppable traffic class nodrop - no drop traffic class span - span traffic class sup - sup traffic class.')
csqHwSharedPoolUsageUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 8, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqHwSharedPoolUsageUsed.setStatus('current')
if mibBuilder.loadTexts: csqHwSharedPoolUsageUsed.setDescription('This object indicates the number of used cells in a hardware shared pool.')
csqHwSharedPoolUsageRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 8, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqHwSharedPoolUsageRemain.setStatus('current')
if mibBuilder.loadTexts: csqHwSharedPoolUsageRemain.setDescription('This object indicates the remaining cells in a hardware shared pool.')
csqHwSharedPoolUsageShared = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 8, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqHwSharedPoolUsageShared.setStatus('current')
if mibBuilder.loadTexts: csqHwSharedPoolUsageShared.setDescription('This object indicates the shared used cells in a hardware shared pool.')
csqHwSharedPoolUsageTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 8, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqHwSharedPoolUsageTotal.setStatus('current')
if mibBuilder.loadTexts: csqHwSharedPoolUsageTotal.setDescription('This object indicates the total cells in a hardware shared pool.')
csqPolicerUsageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 6, 1), )
if mibBuilder.loadTexts: csqPolicerUsageTable.setStatus('current')
if mibBuilder.loadTexts: csqPolicerUsageTable.setDescription('This table contains the usage of policers in the device.')
csqPolicerUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 6, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-SWITCH-QOS-MIB", "csqPolicerType"))
if mibBuilder.loadTexts: csqPolicerUsageEntry.setStatus('current')
if mibBuilder.loadTexts: csqPolicerUsageEntry.setDescription('Each row contains the policer usage information for every module, denoted by its entPhysicalIndex, which is capable of providing this information.')
csqPolicerType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 6, 1, 1, 1), QosPolicerType())
if mibBuilder.loadTexts: csqPolicerType.setStatus('current')
if mibBuilder.loadTexts: csqPolicerType.setDescription('This object indicates the policer type.')
csqPolicerUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 6, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqPolicerUsed.setStatus('current')
if mibBuilder.loadTexts: csqPolicerUsed.setDescription('The number of policers that are currently used.')
csqPolicerTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 6, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqPolicerTotal.setStatus('current')
if mibBuilder.loadTexts: csqPolicerTotal.setDescription('The total number of policers.')
csqModuleDscpRewriteEnableTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 7, 1), )
if mibBuilder.loadTexts: csqModuleDscpRewriteEnableTable.setStatus('current')
if mibBuilder.loadTexts: csqModuleDscpRewriteEnableTable.setDescription('The table containing information of DSCP Rewrite Enable for each module. Such module is identified by the entPhysicalIndex in ENTITY-MIB. The value of each entry needs to be viewed in association with the global value, csqDscpRewriteEnable.')
csqModuleDscpRewriteEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 7, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: csqModuleDscpRewriteEnableEntry.setStatus('current')
if mibBuilder.loadTexts: csqModuleDscpRewriteEnableEntry.setDescription('An entry contains the configuration of DSCP Rewrite Enable Status for a DSCP Rewrite managable module. such module is of type entPhysicalClass module(9) in ENTITY-MIB. Entries are created by the agent at the system power-up or module insertion. Entries are deleted by the agent upon module removal.')
csqModuleDscpRewriteEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 7, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqModuleDscpRewriteEnable.setStatus('current')
if mibBuilder.loadTexts: csqModuleDscpRewriteEnable.setDescription("This object specifies whether DSCP rewrite is enabled on a particular module when the value of csqDscpRewriteEnable is set to 'true'. The value of this object has no effect (DSCP rewrite will be disabled on this module) when the value of csqDscpRewriteEnable is set to 'false'.")
ciscoSwitchQosMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 1))
ciscoSwitchQosMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2))
ciscoSwitchQosMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 1, 1)).setObjects(("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosPortQueueingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosRedirectPolicingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosDscpRewriteGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMappingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMutationGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfCosToQueueGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfDscpAssignGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfDropConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMarkingStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfModeConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfCCGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosMIBCompliance = ciscoSwitchQosMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSwitchQosMIBCompliance.setDescription('The compliance statement for the CISCO-SWITCH-QOS-MIB. This compliance is superceded by ciscoSwitchQosMIBComplianceRev2.')
ciscoSwitchQosMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 1, 2)).setObjects(("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosPortQueueingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosRedirectPolicingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosDscpRewriteGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMappingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMutationGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfCosToQueueGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfDscpAssignGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfDropConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMarkingStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfModeConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfCCGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosPolicerUsageGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosMIBComplianceRev2 = ciscoSwitchQosMIBComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSwitchQosMIBComplianceRev2.setDescription('The compliance statement for the CISCO-SWITCH-QOS-MIB. This compliance is superceded by ciscoSwitchQosMIBComplianceRev3.')
ciscoSwitchQosMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 1, 3)).setObjects(("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosPortQueueingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosRedirectPolicingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosDscpRewriteGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMappingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMutationGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfCosToQueueGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfDscpAssignGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfDropConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMarkingStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfModeConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfCCGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosPolicerUsageGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleStatsExtGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfStatsExtGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosMIBComplianceRev3 = ciscoSwitchQosMIBComplianceRev3.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSwitchQosMIBComplianceRev3.setDescription('The compliance statement for the CISCO-SWITCH-QOS-MIB. This compliance is superceded by ciscoSwitchQosMIBComplianceRev4.')
ciscoSwitchQosMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 1, 4)).setObjects(("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosPortQueueingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosRedirectPolicingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosDscpRewriteGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMappingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMutationGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfCosToQueueGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfDscpAssignGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfDropConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMarkingStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfModeConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfCCGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosPolicerUsageGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleStatsExtGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfStatsExtGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleDscpRewriteGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosMIBComplianceRev4 = ciscoSwitchQosMIBComplianceRev4.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSwitchQosMIBComplianceRev4.setDescription('The compliance statement for the CISCO-SWITCH-QOS-MIB. This compliance is deprecated and superceded by ciscoSwitchQosMIBComplianceRev5.')
ciscoSwitchQosMIBComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 1, 5)).setObjects(("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosPortQueueingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosRedirectPolicingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosDscpRewriteGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMappingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMutationGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfCosToQueueGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfDscpAssignGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfDropConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMarkingStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfModeConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfCCGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosPolicerUsageGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleStatsExtGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfStatsExtGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleDscpRewriteGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleClassChangedGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosTenGOnlyModeGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueModeGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfLanQueuingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueBufferGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueSchedulingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosMIBComplianceRev5 = ciscoSwitchQosMIBComplianceRev5.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSwitchQosMIBComplianceRev5.setDescription('The compliance statement for the CISCO-SWITCH-QOS-MIB.')
ciscoSwitchQosMIBComplianceRev6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 1, 6)).setObjects(("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosPortQueueingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosRedirectPolicingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosDscpRewriteGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMappingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMutationGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfCosToQueueGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfDscpAssignGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfDropConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMarkingStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfModeConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfCCGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosPolicerUsageGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleStatsExtGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfStatsExtGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleDscpRewriteGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleClassChangedGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosTenGOnlyModeGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueModeGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfLanQueuingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueBufferGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueSchedulingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQosGroupInfoGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQosGroupStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosMIBComplianceRev6 = ciscoSwitchQosMIBComplianceRev6.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSwitchQosMIBComplianceRev6.setDescription('The compliance statement for the CISCO-SWITCH-QOS-MIB.')
ciscoSwitchQosMIBComplianceRev7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 1, 7)).setObjects(("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosPortQueueingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosRedirectPolicingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosDscpRewriteGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMappingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMutationGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfCosToQueueGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfDscpAssignGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfDropConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMarkingStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfModeConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfCCGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosPolicerUsageGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleStatsExtGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfStatsExtGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleDscpRewriteGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleClassChangedGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosTenGOnlyModeGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueModeGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfLanQueuingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueBufferGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueSchedulingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQosGroupInfoGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQosGroupStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfPriGrpInBufUsageGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosServicePoolUsageGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosServicePoolCellSizeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosMIBComplianceRev7 = ciscoSwitchQosMIBComplianceRev7.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSwitchQosMIBComplianceRev7.setDescription('The compliance statement for the CISCO-SWITCH-QOS-MIB.')
ciscoSwitchQosMIBComplianceRev8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 1, 8)).setObjects(("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosPortQueueingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosRedirectPolicingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosDscpRewriteGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMappingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMutationGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfCosToQueueGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfDscpAssignGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfDropConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMarkingStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfModeConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfCCGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosPolicerUsageGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleStatsExtGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfStatsExtGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleDscpRewriteGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleClassChangedGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosTenGOnlyModeGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueModeGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfLanQueuingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueBufferGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueSchedulingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQosGroupInfoGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQosGroupStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfPriGrpInBufUsageGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosServicePoolUsageGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosServicePoolCellSizeGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQosGroupInfoShapeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosMIBComplianceRev8 = ciscoSwitchQosMIBComplianceRev8.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchQosMIBComplianceRev8.setDescription('The compliance statement for the CISCO-SWITCH-QOS-MIB.')
ciscoSwitchQosMappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 1)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqCosToDscpDscp"), ("CISCO-SWITCH-QOS-MIB", "csqIpPrecToDscpDscp"), ("CISCO-SWITCH-QOS-MIB", "csqExpToDscpDscp"), ("CISCO-SWITCH-QOS-MIB", "csqDscpMappingCos"), ("CISCO-SWITCH-QOS-MIB", "csqDscpMappingExp"), ("CISCO-SWITCH-QOS-MIB", "csqDscpMappingNormalBurstDscp"), ("CISCO-SWITCH-QOS-MIB", "csqDscpMappingMaxBurstDscp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosMappingGroup = ciscoSwitchQosMappingGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchQosMappingGroup.setDescription('A collection of objects which provides the QoS mapping information in the device.')
ciscoSwitchQosMutationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 2)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqMaxCosMutationMap"), ("CISCO-SWITCH-QOS-MIB", "csqMaxDscpMutationMap"), ("CISCO-SWITCH-QOS-MIB", "csqMaxExpMutationMap"), ("CISCO-SWITCH-QOS-MIB", "csqCosMutationRowStatus"), ("CISCO-SWITCH-QOS-MIB", "csqDscpMutationRowStatus"), ("CISCO-SWITCH-QOS-MIB", "csqExpMutationRowStatus"), ("CISCO-SWITCH-QOS-MIB", "csqCosMutationToCos"), ("CISCO-SWITCH-QOS-MIB", "csqDscpMutationToDscp"), ("CISCO-SWITCH-QOS-MIB", "csqExpMutationToExp"), ("CISCO-SWITCH-QOS-MIB", "csqIfCosMutationMap"), ("CISCO-SWITCH-QOS-MIB", "csqIfDscpMutationMap"), ("CISCO-SWITCH-QOS-MIB", "csqIfExpMutationMap"), ("CISCO-SWITCH-QOS-MIB", "csqIfMutationRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosMutationGroup = ciscoSwitchQosMutationGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchQosMutationGroup.setDescription('A collection of objects which provides the QoS mutation information in the device.')
ciscoSwitchQosIfConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 3)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqIfDefaultCos"), ("CISCO-SWITCH-QOS-MIB", "csqIfTrustState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosIfConfigGroup = ciscoSwitchQosIfConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchQosIfConfigGroup.setDescription('A collection of object which provides QoS configuration at an interface.')
ciscoSwitchQosIfCosToQueueGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 4)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqIfCosToQueueQueueNumber"), ("CISCO-SWITCH-QOS-MIB", "csqIfCosToQueueThresholdNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosIfCosToQueueGroup = ciscoSwitchQosIfCosToQueueGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchQosIfCosToQueueGroup.setDescription('A collection of objects which provides CoS assignment information at an interface.')
ciscoSwitchQosIfDropConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 5)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqIfDropConfigDropAlgorithm"), ("CISCO-SWITCH-QOS-MIB", "csqIfDropConfigDropThreshold"), ("CISCO-SWITCH-QOS-MIB", "csqIfDropConfigMinWredThreshold"), ("CISCO-SWITCH-QOS-MIB", "csqIfDropConfigMaxWredThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosIfDropConfigGroup = ciscoSwitchQosIfDropConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchQosIfDropConfigGroup.setDescription('A collection of objects which provides drop threshold information at an interface.')
ciscoSwitchQosIfQueueGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 6)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqIfQueueWrrWeight"), ("CISCO-SWITCH-QOS-MIB", "csqIfQueueSizeWeight"), ("CISCO-SWITCH-QOS-MIB", "csqIfQueueStatsGranularity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosIfQueueGroup = ciscoSwitchQosIfQueueGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchQosIfQueueGroup.setDescription('A collection of objects which provides queue information at an interface.')
ciscoSwitchQosIfStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 7)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqIfStatsDropPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosIfStatsGroup = ciscoSwitchQosIfStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchQosIfStatsGroup.setDescription('A collection of object which provides drop packets information at an interface.')
ciscoSwitchQosModuleStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 8)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqModuleDropByPolicingPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleTosChangedIpPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleCosChangedIpPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleCosChangedNonIpPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleExpChangedMplsPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosModuleStatsGroup = ciscoSwitchQosModuleStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchQosModuleStatsGroup.setDescription('A collection of object which provides QoS statistics information at each QoS capable module.')
ciscoSwitchQosIfDscpAssignGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 9)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqIfDscpToQueueQueueNumber"), ("CISCO-SWITCH-QOS-MIB", "csqIfDscpToQueueThresholdNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosIfDscpAssignGroup = ciscoSwitchQosIfDscpAssignGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchQosIfDscpAssignGroup.setDescription('A collection of objects which provides DSCP to queue assignment information at an interface.')
ciscoSwitchQosDscpRewriteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 10)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqDscpRewriteEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosDscpRewriteGroup = ciscoSwitchQosDscpRewriteGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchQosDscpRewriteGroup.setDescription('A collection of object which provides DSCP rewrite information.')
ciscoSwitchQosRedirectPolicingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 11)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqPoliceRedirectedTrafficEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosRedirectPolicingGroup = ciscoSwitchQosRedirectPolicingGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchQosRedirectPolicingGroup.setDescription('A collection of object which provides information on policing of ACL-redirected traffic.')
ciscoSwitchQosPortQueueingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 12)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqPortQueueingModeEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosPortQueueingGroup = ciscoSwitchQosPortQueueingGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchQosPortQueueingGroup.setDescription('A collection of object which provides information on port-queuing mode.')
ciscoSwitchQosMarkingStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 13)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqMarkingStatisticsEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosMarkingStatsGroup = ciscoSwitchQosMarkingStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchQosMarkingStatsGroup.setDescription('A collection of object which provides information on marking statistics configuration.')
ciscoSwitchQosIfCCGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 14)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqIfConsistencyCheckEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosIfCCGroup = ciscoSwitchQosIfCCGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchQosIfCCGroup.setDescription('A collection of object which provides information on interface consistency check configuration.')
ciscoSwitchQosIfModeConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 15)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqIfVlanBasedQosModeEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosIfModeConfigGroup = ciscoSwitchQosIfModeConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchQosIfModeConfigGroup.setDescription('A collection of object which provides information on QoS mode configuration.')
ciscoSwitchQosPolicerUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 16)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqPolicerUsed"), ("CISCO-SWITCH-QOS-MIB", "csqPolicerTotal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosPolicerUsageGroup = ciscoSwitchQosPolicerUsageGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchQosPolicerUsageGroup.setDescription('A collection of objects which provides information on QoS policer usage.')
ciscoSwitchQosModuleStatsExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 17)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqModuleTunnelEncapPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleTunnelDecapPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleDropByPolicingInOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleDropByPolicingOutOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleFwdByPolicingInPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleFwdByPolicingOutPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleFwdByPolicingInOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleFwdByPolicingOutOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleHighExceedInPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleHighExceedOutPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleHighExceedInOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleHighExceedOutOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleLowExceedOutPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleLowExceedInPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleLowExceedInOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleLowExceedOutOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleDropByAggPolicerInPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleDropByAggPolicerOutPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleDropByAggPolicerInOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleDropByAggPolicerOutOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleFwdByAggPolicerInPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleFwdByAggPolicerOutPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleFwdByAggPolicerInOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleFwdByAggPolicerOutOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleAggHighExceedInPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleAggHighExceedOutPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleAggHighExceedInOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleAggHighExceedOutOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleAggLowExceedInPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleAggLowExceedOutPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleAggLowExceedInOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleAggLowExceedOutOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleDropByNetflowInPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleDropByNetflowOutPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleDropByNetflowInOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleDropByNetflowOutOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleFwdByNetflowInPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleFwdByNetflowOutPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleFwdByNetflowInOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleFwdByNetflowOutOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleNetflowExceedInPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleNetflowExceedOutPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleNetflowExceedInOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleNetflowExceedOutOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosModuleStatsExtGroup = ciscoSwitchQosModuleStatsExtGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchQosModuleStatsExtGroup.setDescription('A collection of object which provides additional QoS statistics information at each QoS capable module.')
ciscoSwitchQosIfStatsExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 18)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqIfBpduDropPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosIfStatsExtGroup = ciscoSwitchQosIfStatsExtGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchQosIfStatsExtGroup.setDescription('A collection of objects which provides additional interface QoS statistics information.')
ciscoSwitchQosModuleDscpRewriteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 19)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqModuleDscpRewriteEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosModuleDscpRewriteGroup = ciscoSwitchQosModuleDscpRewriteGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchQosModuleDscpRewriteGroup.setDescription('A collection of object which provides DSCP rewrite information for each module.')
ciscoSwitchQosModuleClassChangedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 20)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqModuleCosChangedPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleTrafficClassChangedPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosModuleClassChangedGroup = ciscoSwitchQosModuleClassChangedGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchQosModuleClassChangedGroup.setDescription('A collection of object which provides CoS/Traffic Class changed packets count information for each module.')
ciscoSwitchQosTenGOnlyModeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 21)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqTenGOnlyMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosTenGOnlyModeGroup = ciscoSwitchQosTenGOnlyModeGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchQosTenGOnlyModeGroup.setDescription('A collection of object which provides 10Gigabit Ethernet only mode information.')
ciscoSwitchQosIfQueueModeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 22)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqIfQueueModeCpb"), ("CISCO-SWITCH-QOS-MIB", "csqIfConfigQueueMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosIfQueueModeGroup = ciscoSwitchQosIfQueueModeGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchQosIfQueueModeGroup.setDescription('A collection of object which provides queue mode information for each QoS capable interface.')
ciscoSwitchQosIfLanQueuingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 23)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqIfQueueClassMapName"), ("CISCO-SWITCH-QOS-MIB", "csqIfIngressPolicyMap"), ("CISCO-SWITCH-QOS-MIB", "csqIfEgressPolicyMap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosIfLanQueuingGroup = ciscoSwitchQosIfLanQueuingGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchQosIfLanQueuingGroup.setDescription('A collection of object which provides LAN queueing mapping information for each QoS capable interface.')
ciscoSwitchQosIfQueueBufferGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 24)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqIfDropConfigQueueBuffer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosIfQueueBufferGroup = ciscoSwitchQosIfQueueBufferGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchQosIfQueueBufferGroup.setDescription('A collection of object which provides tail drop queue buffer information for each QoS capable interface.')
ciscoSwitchQosIfQueueSchedulingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 25)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqIfQueueScheduling"), ("CISCO-SWITCH-QOS-MIB", "csqIfQueueSrrWeight"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosIfQueueSchedulingGroup = ciscoSwitchQosIfQueueSchedulingGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchQosIfQueueSchedulingGroup.setDescription('A collection of object which provides queue scheduling information for each QoS capable interface.')
ciscoSwitchQosIfQueueingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 26)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqIfIngressQueueingEnable"), ("CISCO-SWITCH-QOS-MIB", "csqIfEgressQueueingEnable"), ("CISCO-SWITCH-QOS-MIB", "csqIfQueueingTrustState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosIfQueueingGroup = ciscoSwitchQosIfQueueingGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchQosIfQueueingGroup.setDescription('A collection of object which provides queueing information for each QoS capable interface.')
ciscoSwitchQosIfQosGroupInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 27)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqIfQosGroupInfoQueueSize"), ("CISCO-SWITCH-QOS-MIB", "csqIfQosGroupInfoHwMTU"), ("CISCO-SWITCH-QOS-MIB", "csqIfQosGroupInfoMTU"), ("CISCO-SWITCH-QOS-MIB", "csqIfQosGroupInfoDropType"), ("CISCO-SWITCH-QOS-MIB", "csqIfQosGroupInfoResumeThresh"), ("CISCO-SWITCH-QOS-MIB", "csqIfQosGroupInfoPauseThresh"), ("CISCO-SWITCH-QOS-MIB", "csqIfQosGroupInfoScheduling"), ("CISCO-SWITCH-QOS-MIB", "csqIfQosGroupInfoBandwidth"), ("CISCO-SWITCH-QOS-MIB", "csqIfQosGroupInfoBandwidthUnits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosIfQosGroupInfoGroup = ciscoSwitchQosIfQosGroupInfoGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchQosIfQosGroupInfoGroup.setDescription('A collection of object which provides information for each QoS group on an interface.')
ciscoSwitchQosIfQosGroupStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 28)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqIfQosGroupStatsValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosIfQosGroupStatsGroup = ciscoSwitchQosIfQosGroupStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchQosIfQosGroupStatsGroup.setDescription('A collection of object which provides the statistics of each QoS group on an interface.')
ciscoSwitchQosIfPriGrpInBufUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 29)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqIfPriGrpInBufUsageMinCount"), ("CISCO-SWITCH-QOS-MIB", "csqIfPriGrpInBufUsageSharedCount"), ("CISCO-SWITCH-QOS-MIB", "csqIfPriGrpInBufUsageHeadroomCount"), ("CISCO-SWITCH-QOS-MIB", "csqIfPriGrpInBufUsageGlobalHeadroomCount"), ("CISCO-SWITCH-QOS-MIB", "csqIfPriGrpInBufUsageSharedPeekCount"), ("CISCO-SWITCH-QOS-MIB", "csqIfPriGrpInBufUsageHeadroomPeekCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosIfPriGrpInBufUsageGroup = ciscoSwitchQosIfPriGrpInBufUsageGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchQosIfPriGrpInBufUsageGroup.setDescription('A collection of object which provides the statistics of each priority group on the interface.')
ciscoSwitchQosServicePoolUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 30)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqSharedPoolUsageUsed"), ("CISCO-SWITCH-QOS-MIB", "csqSharedPoolUsageRemain"), ("CISCO-SWITCH-QOS-MIB", "csqSharedPoolUsagePeak"), ("CISCO-SWITCH-QOS-MIB", "csqSharedPoolUsageTotal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosServicePoolUsageGroup = ciscoSwitchQosServicePoolUsageGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchQosServicePoolUsageGroup.setDescription('A collection of object which provides the statistics of each service pool.')
ciscoSwitchQosServicePoolCellSizeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 31)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqServicePoolCellSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosServicePoolCellSizeGroup = ciscoSwitchQosServicePoolCellSizeGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchQosServicePoolCellSizeGroup.setDescription('A collection of object which indicates the number of bytes for a service pool cell.')
ciscoSwitchQosIfQosGroupInfoShapeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 32)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqIfQosGroupInfoShapeMinThresh"), ("CISCO-SWITCH-QOS-MIB", "csqIfQosGroupInfoShapeMaxThresh"), ("CISCO-SWITCH-QOS-MIB", "csqIfQosGroupInfoShapeUnits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosIfQosGroupInfoShapeGroup = ciscoSwitchQosIfQosGroupInfoShapeGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchQosIfQosGroupInfoShapeGroup.setDescription('A collection of object which provides shape information for each QoS group on an interface.')
ciscoSwitchQosHwServicePoolUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 33)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqHwSharedPoolUsageUsed"), ("CISCO-SWITCH-QOS-MIB", "csqHwSharedPoolUsageRemain"), ("CISCO-SWITCH-QOS-MIB", "csqHwSharedPoolUsageShared"), ("CISCO-SWITCH-QOS-MIB", "csqHwSharedPoolUsageTotal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosHwServicePoolUsageGroup = ciscoSwitchQosHwServicePoolUsageGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchQosHwServicePoolUsageGroup.setDescription('A collection of object which provides the statistics of each hardware service pool.')
ciscoSwitchQosServicePoolUsageTxGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 34)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqSharedPoolUsageUsedTx"), ("CISCO-SWITCH-QOS-MIB", "csqSharedPoolUsageRemainTx"), ("CISCO-SWITCH-QOS-MIB", "csqSharedPoolUsagePeakTx"), ("CISCO-SWITCH-QOS-MIB", "csqSharedPoolUsageTotalTx"), ("CISCO-SWITCH-QOS-MIB", "csqSharedPoolUsageNameTx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosServicePoolUsageTxGroup = ciscoSwitchQosServicePoolUsageTxGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchQosServicePoolUsageTxGroup.setDescription('A collection of object which provides the statistics of each output service pool.')
mibBuilder.exportSymbols("CISCO-SWITCH-QOS-MIB", csqModuleAggHighExceedInPackets=csqModuleAggHighExceedInPackets, csqIfMutationConfigEntry=csqIfMutationConfigEntry, csqIfQosGroupInfoResumeThresh=csqIfQosGroupInfoResumeThresh, csqDscpMappingDscp=csqDscpMappingDscp, csqDscpMappingNormalBurstDscp=csqDscpMappingNormalBurstDscp, csqModuleHighExceedOutOctets=csqModuleHighExceedOutOctets, csqMaxExpMutationMap=csqMaxExpMutationMap, ciscoSwitchQosIfQueueBufferGroup=ciscoSwitchQosIfQueueBufferGroup, ciscoSwitchQosHwServicePoolUsageGroup=ciscoSwitchQosHwServicePoolUsageGroup, csqIfDropConfigMaxWredThreshold=csqIfDropConfigMaxWredThreshold, ciscoSwitchQosIfConfigGroup=ciscoSwitchQosIfConfigGroup, csqSharedPoolUsageNameTx=csqSharedPoolUsageNameTx, csqIfDscpToQueueTable=csqIfDscpToQueueTable, csqIfMutationConfigTable=csqIfMutationConfigTable, csqIfDropConfigQueueIndex=csqIfDropConfigQueueIndex, csqIfStatsEntry=csqIfStatsEntry, csqModuleDropByPolicingOutOctets=csqModuleDropByPolicingOutOctets, csqModuleDropByAggPolicerInPackets=csqModuleDropByAggPolicerInPackets, csqIfQosGroupStatsTable=csqIfQosGroupStatsTable, csqModuleFwdByPolicingInOctets=csqModuleFwdByPolicingInOctets, csqHwSharedPoolUsageTable=csqHwSharedPoolUsageTable, ciscoSwitchQosPolicerUsageGroup=ciscoSwitchQosPolicerUsageGroup, ciscoSwitchQosMIBComplianceRev4=ciscoSwitchQosMIBComplianceRev4, csqModuleFwdByNetflowOutOctets=csqModuleFwdByNetflowOutOctets, ciscoSwitchQosMarkingStatsGroup=ciscoSwitchQosMarkingStatsGroup, csqServicePoolCellSize=csqServicePoolCellSize, csqHwSharedPoolStatsDirection=csqHwSharedPoolStatsDirection, csqExpToDscpDscp=csqExpToDscpDscp, csqIfCosToQueueCos=csqIfCosToQueueCos, ciscoSwitchQosModuleClassChangedGroup=ciscoSwitchQosModuleClassChangedGroup, ciscoSwitchQosIfCosToQueueGroup=ciscoSwitchQosIfCosToQueueGroup, ciscoSwitchQosModuleStatsExtGroup=ciscoSwitchQosModuleStatsExtGroup, csqIfQueueEntry=csqIfQueueEntry, csqExpMutationRowStatus=csqExpMutationRowStatus, csqModuleStatsExtTable=csqModuleStatsExtTable, csqPolicerTotal=csqPolicerTotal, ciscoSwitchQosMIBComplianceRev7=ciscoSwitchQosMIBComplianceRev7, csqModuleDropByAggPolicerInOctets=csqModuleDropByAggPolicerInOctets, csqIfDscpToQueueEntry=csqIfDscpToQueueEntry, csqIfCosToQueueThresholdNumber=csqIfCosToQueueThresholdNumber, csqModuleFwdByAggPolicerOutPackets=csqModuleFwdByAggPolicerOutPackets, csqModuleLowExceedOutOctets=csqModuleLowExceedOutOctets, csqModuleAggHighExceedInOctets=csqModuleAggHighExceedInOctets, csqPolicerType=csqPolicerType, csqIfQosGroupStatsEntry=csqIfQosGroupStatsEntry, ciscoSwitchQosMIBConformance=ciscoSwitchQosMIBConformance, csqMaxDscpMutationMap=csqMaxDscpMutationMap, csqIfConfigQueueMode=csqIfConfigQueueMode, csqModuleAggLowExceedOutOctets=csqModuleAggLowExceedOutOctets, ciscoSwitchQosPortQueueingGroup=ciscoSwitchQosPortQueueingGroup, csqIfQueueStatsGranularity=csqIfQueueStatsGranularity, csqIfQueueWrrWeight=csqIfQueueWrrWeight, csqDscpMutationEntry=csqDscpMutationEntry, csqIpPrecToDscpIpPrec=csqIpPrecToDscpIpPrec, csqIfStatsThresholdNumber=csqIfStatsThresholdNumber, csqMutations=csqMutations, csqIfCosToQueueQueueNumber=csqIfCosToQueueQueueNumber, csqCosMutationFromCos=csqCosMutationFromCos, csqModuleExpChangedMplsPackets=csqModuleExpChangedMplsPackets, csqMarkingStatisticsEnable=csqMarkingStatisticsEnable, csqIfQosGroupInfoGroupNumber=csqIfQosGroupInfoGroupNumber, csqIfCosMutationMap=csqIfCosMutationMap, csqIfConsistencyCheckEntry=csqIfConsistencyCheckEntry, csqModuleDropByPolicingInOctets=csqModuleDropByPolicingInOctets, csqModuleFwdByNetflowOutPackets=csqModuleFwdByNetflowOutPackets, csqModuleDropByPolicingPackets=csqModuleDropByPolicingPackets, csqModule=csqModule, csqIfQosGroupInfoDirection=csqIfQosGroupInfoDirection, csqDscpMutationRowStatus=csqDscpMutationRowStatus, csqIfQosGroupInfoBandwidth=csqIfQosGroupInfoBandwidth, csqIfStatsQueueNumber=csqIfStatsQueueNumber, csqModuleDropByAggPolicerOutOctets=csqModuleDropByAggPolicerOutOctets, csqIfVlanBasedQosModeEnable=csqIfVlanBasedQosModeEnable, csqModuleDropByNetflowOutPackets=csqModuleDropByNetflowOutPackets, csqModuleAggLowExceedInOctets=csqModuleAggLowExceedInOctets, ciscoSwitchQosMIBNotifs=ciscoSwitchQosMIBNotifs, csqDscpMutationFromDscp=csqDscpMutationFromDscp, csqIfQosGroupInfoScheduling=csqIfQosGroupInfoScheduling, csqIfPriGrpInBufUsageGlobalHeadroomCount=csqIfPriGrpInBufUsageGlobalHeadroomCount, csqModuleCosChangedNonIpPackets=csqModuleCosChangedNonIpPackets, csqSharedPoolUsageUsed=csqSharedPoolUsageUsed, csqModuleDscpRewriteEnableEntry=csqModuleDscpRewriteEnableEntry, csqModuleFwdByAggPolicerOutOctets=csqModuleFwdByAggPolicerOutOctets, ciscoSwitchQosIfQueueGroup=ciscoSwitchQosIfQueueGroup, PYSNMP_MODULE_ID=ciscoSwitchQosMIB, csqSharedPoolUsageTotalTx=csqSharedPoolUsageTotalTx, ciscoSwitchQosServicePoolUsageGroup=ciscoSwitchQosServicePoolUsageGroup, csqIfDscpToQueueDscp=csqIfDscpToQueueDscp, csqIfDscpMutationMap=csqIfDscpMutationMap, csqModuleTunnelDecapPackets=csqModuleTunnelDecapPackets, ciscoSwitchQosMIBComplianceRev8=ciscoSwitchQosMIBComplianceRev8, csqIpPrecToDscpTable=csqIpPrecToDscpTable, csqIfQosGroupStatsValue=csqIfQosGroupStatsValue, csqSharedPoolUsageTotal=csqSharedPoolUsageTotal, ciscoSwitchQosIfCCGroup=ciscoSwitchQosIfCCGroup, csqDscpMappingExp=csqDscpMappingExp, csqPoliceRedirectedTrafficEnable=csqPoliceRedirectedTrafficEnable, csqDscpMutationTable=csqDscpMutationTable, csqModuleStatsExtEntry=csqModuleStatsExtEntry, csqExpMutationTable=csqExpMutationTable, ciscoSwitchQosServicePoolCellSizeGroup=ciscoSwitchQosServicePoolCellSizeGroup, csqIfQosGroupInfoBandwidthUnits=csqIfQosGroupInfoBandwidthUnits, csqIfDscpToQueueQueueNumber=csqIfDscpToQueueQueueNumber, csqModuleLowExceedInOctets=csqModuleLowExceedInOctets, csqExpToDscpTable=csqExpToDscpTable, csqModuleDropByAggPolicerOutPackets=csqModuleDropByAggPolicerOutPackets, csqExpToDscpExp=csqExpToDscpExp, csqModuleAggHighExceedOutOctets=csqModuleAggHighExceedOutOctets, csqTenGOnlyMode=csqTenGOnlyMode, csqIfDropConfigQueueBuffer=csqIfDropConfigQueueBuffer, csqModuleDropByNetflowInOctets=csqModuleDropByNetflowInOctets, csqExpMutationEntry=csqExpMutationEntry, csqCosMutationTable=csqCosMutationTable, csqModuleFwdByNetflowInOctets=csqModuleFwdByNetflowInOctets, csqModuleLowExceedInPackets=csqModuleLowExceedInPackets, csqIfIngressQueueingEnable=csqIfIngressQueueingEnable, csqExpMutationMapName=csqExpMutationMapName, csqIfQueueTable=csqIfQueueTable, csqIfPriGrpInBufUsageSharedCount=csqIfPriGrpInBufUsageSharedCount, csqIfPriGrpInBufUsageHeadroomCount=csqIfPriGrpInBufUsageHeadroomCount, QosStatsType=QosStatsType, csqIpPrecToDscpDscp=csqIpPrecToDscpDscp, csqIfDropConfigDirection=csqIfDropConfigDirection, csqIfDscpToQueueThresholdNumber=csqIfDscpToQueueThresholdNumber, csqExpMutationMappingTable=csqExpMutationMappingTable, csqIfQosGroupStatsType=csqIfQosGroupStatsType, csqSharedPoolUsageUsedTx=csqSharedPoolUsageUsedTx, csqIfModeConfigTable=csqIfModeConfigTable, ciscoSwitchQosModuleStatsGroup=ciscoSwitchQosModuleStatsGroup, csqIfQueueingTrustState=csqIfQueueingTrustState, ciscoSwitchQosMappingGroup=ciscoSwitchQosMappingGroup, ciscoSwitchQosMIBComplianceRev2=ciscoSwitchQosMIBComplianceRev2, csqCosMutationMappingEntry=csqCosMutationMappingEntry, csqDscpMappingCos=csqDscpMappingCos, csqIfStatsTable=csqIfStatsTable, csqIfQosGroupInfoShapeMinThresh=csqIfQosGroupInfoShapeMinThresh, csqHwSharedPoolDeviceId=csqHwSharedPoolDeviceId, ciscoSwitchQosIfLanQueuingGroup=ciscoSwitchQosIfLanQueuingGroup, csqIfQosGroupInfoEntry=csqIfQosGroupInfoEntry, csqIfQosGroupInfoPauseThresh=csqIfQosGroupInfoPauseThresh, csqCosMutationMapName=csqCosMutationMapName, ciscoSwitchQosIfQosGroupInfoGroup=ciscoSwitchQosIfQosGroupInfoGroup, ciscoSwitchQosModuleDscpRewriteGroup=ciscoSwitchQosModuleDscpRewriteGroup, csqIfPriGrpInBufUsageHeadroomPeekCount=csqIfPriGrpInBufUsageHeadroomPeekCount, csqCosToDscpCos=csqCosToDscpCos, csqCosMutationEntry=csqCosMutationEntry, ciscoSwitchQosIfStatsGroup=ciscoSwitchQosIfStatsGroup, csqIfConsistencyCheckEnable=csqIfConsistencyCheckEnable, csqDscpMutationMappingTable=csqDscpMutationMappingTable, csqModuleNetflowExceedOutOctets=csqModuleNetflowExceedOutOctets, csqIfQosGroupStatsGroupNumber=csqIfQosGroupStatsGroupNumber, csqIfStatsExtTable=csqIfStatsExtTable, csqIfPriGrpInBufUsageGrpNo=csqIfPriGrpInBufUsageGrpNo, csqHwSharedPoolStatsType=csqHwSharedPoolStatsType, csqHwSharedPoolUsageEntry=csqHwSharedPoolUsageEntry, ciscoSwitchQosIfQueueingGroup=ciscoSwitchQosIfQueueingGroup, csqExpToDscpEntry=csqExpToDscpEntry, csqHwSharedPoolUsageUsed=csqHwSharedPoolUsageUsed, csqIfDropConfigDropAlgorithm=csqIfDropConfigDropAlgorithm, csqCosMutationRowStatus=csqCosMutationRowStatus, csqModuleTosChangedIpPackets=csqModuleTosChangedIpPackets, ciscoSwitchQosIfQueueModeGroup=ciscoSwitchQosIfQueueModeGroup, csqIfCosToQueueEntry=csqIfCosToQueueEntry, csqIfQosGroupInfoShapeUnits=csqIfQosGroupInfoShapeUnits, csqIfCosToQueueDirection=csqIfCosToQueueDirection, csqIfDropConfigDropThreshold=csqIfDropConfigDropThreshold, csqModuleDropByNetflowInPackets=csqModuleDropByNetflowInPackets, ciscoSwitchQosMIBComplianceRev6=ciscoSwitchQosMIBComplianceRev6, csqIfExpMutationMap=csqIfExpMutationMap, csqIfCosToQueueTable=csqIfCosToQueueTable, csqModuleCosChangedPackets=csqModuleCosChangedPackets, csqIfStatsExtEntry=csqIfStatsExtEntry, csqCosMutationToCos=csqCosMutationToCos, csqIfTrustState=csqIfTrustState, csqIfDropConfigTable=csqIfDropConfigTable, csqIfPriGrpInBufUsageTable=csqIfPriGrpInBufUsageTable, csqModuleLowExceedOutPackets=csqModuleLowExceedOutPackets, csqModuleFwdByPolicingOutPackets=csqModuleFwdByPolicingOutPackets, csqIfBpduDropPkts=csqIfBpduDropPkts, csqStatistics=csqStatistics, csqIfDefaultCos=csqIfDefaultCos, csqModuleDscpRewriteEnable=csqModuleDscpRewriteEnable, csqIfQueueDirection=csqIfQueueDirection, csqIfMutationRowStatus=csqIfMutationRowStatus, csqIfPriGrpInBufUsageMinCount=csqIfPriGrpInBufUsageMinCount, csqGlobals=csqGlobals, csqIfEgressQueueingEnable=csqIfEgressQueueingEnable, csqIfStatsDirection=csqIfStatsDirection, ciscoSwitchQosIfQosGroupStatsGroup=ciscoSwitchQosIfQosGroupStatsGroup, csqIfQosGroupInfoHwMTU=csqIfQosGroupInfoHwMTU, csqIfQosGroupInfoMTU=csqIfQosGroupInfoMTU, csqModuleNetflowExceedOutPackets=csqModuleNetflowExceedOutPackets, csqIfStatsDropPkts=csqIfStatsDropPkts, csqSharedPoolUsagePoolNo=csqSharedPoolUsagePoolNo, csqIfConfigTable=csqIfConfigTable, csqModuleTunnelEncapPackets=csqModuleTunnelEncapPackets, csqDscpMutationToDscp=csqDscpMutationToDscp, csqModuleHighExceedOutPackets=csqModuleHighExceedOutPackets, csqModuleTrafficClassChangedPackets=csqModuleTrafficClassChangedPackets, csqModuleFwdByPolicingInPackets=csqModuleFwdByPolicingInPackets, ciscoSwitchQosDscpRewriteGroup=ciscoSwitchQosDscpRewriteGroup, csqInterface=csqInterface, csqExpMutationMappingEntry=csqExpMutationMappingEntry, csqModuleAggLowExceedOutPackets=csqModuleAggLowExceedOutPackets, csqModuleFwdByNetflowInPackets=csqModuleFwdByNetflowInPackets, ciscoSwitchQosMIB=ciscoSwitchQosMIB, csqIfQueueModeCpb=csqIfQueueModeCpb, csqSharedPoolUsageEntry=csqSharedPoolUsageEntry, csqIfQueueSizeWeight=csqIfQueueSizeWeight, csqIfDropConfigEntry=csqIfDropConfigEntry, csqSharedPoolUsagePeak=csqSharedPoolUsagePeak, csqHwSharedPoolUsageShared=csqHwSharedPoolUsageShared, csqHwSharedPoolUsageTotal=csqHwSharedPoolUsageTotal, csqPolicerUsageEntry=csqPolicerUsageEntry, ciscoSwitchQosIfQosGroupInfoShapeGroup=ciscoSwitchQosIfQosGroupInfoShapeGroup, csqModuleNetflowExceedInOctets=csqModuleNetflowExceedInOctets, csqCosMutationMappingTable=csqCosMutationMappingTable, csqPolicerUsageTable=csqPolicerUsageTable, csqDscpMappingTable=csqDscpMappingTable, csqModuleNetflowExceedInPackets=csqModuleNetflowExceedInPackets, csqModuleDscpRewriteEnableTable=csqModuleDscpRewriteEnableTable, csqIfConsistencyCheckTable=csqIfConsistencyCheckTable, ciscoSwitchQosMIBCompliances=ciscoSwitchQosMIBCompliances, csqPortQueueingModeEnable=csqPortQueueingModeEnable, csqCosToDscpEntry=csqCosToDscpEntry, csqDscpMappingEntry=csqDscpMappingEntry, csqIfPriGrpInBufUsageEntry=csqIfPriGrpInBufUsageEntry, csqIfDscpToQueueDirection=csqIfDscpToQueueDirection, csqExpMutationToExp=csqExpMutationToExp, csqDscpRewriteEnable=csqDscpRewriteEnable, csqIfModeConfigEntry=csqIfModeConfigEntry, csqMaxCosMutationMap=csqMaxCosMutationMap, csqIfQueueSrrWeight=csqIfQueueSrrWeight, csqIfQosGroupInfoDropType=csqIfQosGroupInfoDropType, csqHwSharedPoolUsageInstNo=csqHwSharedPoolUsageInstNo, csqCosToDscpDscp=csqCosToDscpDscp, ciscoSwitchQosIfQueueSchedulingGroup=ciscoSwitchQosIfQueueSchedulingGroup, csqModuleStatsTable=csqModuleStatsTable, csqModuleCosChangedIpPackets=csqModuleCosChangedIpPackets, csqSharedPoolUsagePeakTx=csqSharedPoolUsagePeakTx, csqIfQosGroupInfoShapeMaxThresh=csqIfQosGroupInfoShapeMaxThresh, csqIfQueueClassMapName=csqIfQueueClassMapName, csqModuleStatsEntry=csqModuleStatsEntry, csqHwSharedPoolUsageRemain=csqHwSharedPoolUsageRemain, ciscoSwitchQosIfPriGrpInBufUsageGroup=ciscoSwitchQosIfPriGrpInBufUsageGroup, csqPolicerUsed=csqPolicerUsed, csqSharedPoolUsageInstNo=csqSharedPoolUsageInstNo, ciscoSwitchQosMutationGroup=ciscoSwitchQosMutationGroup, csqIfPriGrpInBufUsageSharedPeekCount=csqIfPriGrpInBufUsageSharedPeekCount, csqDscpMutationMappingEntry=csqDscpMutationMappingEntry, csqExpMutationFromExp=csqExpMutationFromExp, csqModuleFwdByAggPolicerInOctets=csqModuleFwdByAggPolicerInOctets, ciscoSwitchQosMIBCompliance=ciscoSwitchQosMIBCompliance, csqCosToDscpTable=csqCosToDscpTable)
mibBuilder.exportSymbols("CISCO-SWITCH-QOS-MIB", csqIfEgressPolicyMap=csqIfEgressPolicyMap, csqDscpMappingMaxBurstDscp=csqDscpMappingMaxBurstDscp, csqIfQosGroupStatsDirection=csqIfQosGroupStatsDirection, csqPolicerUsage=csqPolicerUsage, ciscoSwitchQosMIBGroups=ciscoSwitchQosMIBGroups, csqModuleDropByNetflowOutOctets=csqModuleDropByNetflowOutOctets, ciscoSwitchQosMIBComplianceRev3=ciscoSwitchQosMIBComplianceRev3, csqMappings=csqMappings, csqIfQueueNumber=csqIfQueueNumber, ciscoSwitchQosIfStatsExtGroup=ciscoSwitchQosIfStatsExtGroup, ciscoSwitchQosTenGOnlyModeGroup=ciscoSwitchQosTenGOnlyModeGroup, csqIfIngressPolicyMap=csqIfIngressPolicyMap, csqIfDropConfigThresholdIndex=csqIfDropConfigThresholdIndex, csqIpPrecToDscpEntry=csqIpPrecToDscpEntry, ciscoSwitchQosIfModeConfigGroup=ciscoSwitchQosIfModeConfigGroup, csqModuleHighExceedInOctets=csqModuleHighExceedInOctets, ciscoSwitchQosServicePoolUsageTxGroup=ciscoSwitchQosServicePoolUsageTxGroup, ciscoSwitchQosRedirectPolicingGroup=ciscoSwitchQosRedirectPolicingGroup, csqIfQueueScheduling=csqIfQueueScheduling, csqIfQosGroupInfoTable=csqIfQosGroupInfoTable, csqSharedPoolUsageRemain=csqSharedPoolUsageRemain, csqDscpMutationMapName=csqDscpMutationMapName, csqModuleFwdByPolicingOutOctets=csqModuleFwdByPolicingOutOctets, ciscoSwitchQosIfDscpAssignGroup=ciscoSwitchQosIfDscpAssignGroup, csqIfDropConfigMinWredThreshold=csqIfDropConfigMinWredThreshold, ciscoSwitchQosMIBObjects=ciscoSwitchQosMIBObjects, csqIfConfigEntry=csqIfConfigEntry, csqModuleHighExceedInPackets=csqModuleHighExceedInPackets, csqModuleAggHighExceedOutPackets=csqModuleAggHighExceedOutPackets, csqIfQosGroupInfoQueueSize=csqIfQosGroupInfoQueueSize, csqSharedPoolUsageTable=csqSharedPoolUsageTable, ciscoSwitchQosMIBComplianceRev5=ciscoSwitchQosMIBComplianceRev5, ciscoSwitchQosIfDropConfigGroup=ciscoSwitchQosIfDropConfigGroup, csqSharedPoolUsageRemainTx=csqSharedPoolUsageRemainTx, csqModuleAggLowExceedInPackets=csqModuleAggLowExceedInPackets, csqModuleFwdByAggPolicerInPackets=csqModuleFwdByAggPolicerInPackets)
