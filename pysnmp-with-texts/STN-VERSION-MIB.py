#
# PySNMP MIB module STN-VERSION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/STN-VERSION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:11:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Integer32, Counter64, Bits, ModuleIdentity, NotificationType, Unsigned32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ObjectIdentity, Gauge32, IpAddress, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Integer32", "Counter64", "Bits", "ModuleIdentity", "NotificationType", "Unsigned32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ObjectIdentity", "Gauge32", "IpAddress", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
stnSystems, stnNotification = mibBuilder.importSymbols("SPRING-TIDE-NETWORKS-SMI", "stnSystems", "stnNotification")
StnHardwareModuleType, = mibBuilder.importSymbols("SPRING-TIDE-NETWORKS-TC", "StnHardwareModuleType")
stnEngineSlot, stnEngineCpu, stnEngineIndex = mibBuilder.importSymbols("STN-CHASSIS-MIB", "stnEngineSlot", "stnEngineCpu", "stnEngineIndex")
stnVersion = ModuleIdentity((1, 3, 6, 1, 4, 1, 3551, 2, 2))
if mibBuilder.loadTexts: stnVersion.setLastUpdated('0002160000Z')
if mibBuilder.loadTexts: stnVersion.setOrganization('Spring Tide Networks, Inc.')
if mibBuilder.loadTexts: stnVersion.setContactInfo(' Spring Tide Networks, Inc. Customer Service Postal: 3 Clock Tower Place Maynard, MA 01754 Tel: 1 888-786-4357 Email: stncs@springtidenet.com ')
if mibBuilder.loadTexts: stnVersion.setDescription('This MIB module describes the Spring Tide Networks software and hardware versions.')
stnVersionObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1))
stnVersionMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 2, 2))
stnSwVersions = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1, 1))
stnHwVersions = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1, 2))
stnSwVersionTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1, 1, 1), )
if mibBuilder.loadTexts: stnSwVersionTable.setStatus('current')
if mibBuilder.loadTexts: stnSwVersionTable.setDescription('A list of system software and gateware version entries.')
stnSwVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1, 1, 1, 1), ).setIndexNames((0, "STN-VERSION-MIB", "stnSwImage"))
if mibBuilder.loadTexts: stnSwVersionEntry.setStatus('current')
if mibBuilder.loadTexts: stnSwVersionEntry.setDescription('Entry contains information about a particular system software or gateware version.')
stnSwImage = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("bootstrap", 1), ("cpmSwitch", 2), ("cpmRoute", 3), ("tsmECF", 4), ("cpmSwitchRecv", 5), ("cpmRouteRecv", 6), ("tsmECFRecv", 7), ("cpmKing", 8), ("cpmBlue", 9), ("cpmHermit", 10), ("cpmSwcPipeline", 11), ("cpmRpePipeline", 12), ("cpmSpider", 13), ("cpmSand", 14), ("tsmBlue", 15), ("tsmHermit", 16), ("tsmPipeline", 17), ("tsmBridge", 18), ("tsmSoldier", 19), ("swfmHorseshoe", 20), ("atmOC3Stone", 21), ("enetMud", 22), ("rmFiddler", 23), ("atmOC12Golden", 24), ("ds3Green", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSwImage.setStatus('current')
if mibBuilder.loadTexts: stnSwImage.setDescription('Indicates the software image type.')
stnSwVersionPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSwVersionPrefix.setStatus('current')
if mibBuilder.loadTexts: stnSwVersionPrefix.setDescription('The software image version prefix.')
stnSwMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSwMajorVersion.setStatus('current')
if mibBuilder.loadTexts: stnSwMajorVersion.setDescription('The software image major version.')
stnSwMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSwMinorVersion.setStatus('current')
if mibBuilder.loadTexts: stnSwMinorVersion.setDescription('The software image minor version.')
stnSwMaintenanceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSwMaintenanceVersion.setStatus('current')
if mibBuilder.loadTexts: stnSwMaintenanceVersion.setDescription('The software image maintenance version.')
stnSwPatchVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSwPatchVersion.setStatus('current')
if mibBuilder.loadTexts: stnSwPatchVersion.setDescription('The software image patch version.')
stnSwVersionDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSwVersionDescr.setStatus('current')
if mibBuilder.loadTexts: stnSwVersionDescr.setDescription('A descriptive string used to describe the software type and version.')
stnHwVersionTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1, 2, 1), )
if mibBuilder.loadTexts: stnHwVersionTable.setStatus('current')
if mibBuilder.loadTexts: stnHwVersionTable.setDescription('A list of system hardware version entries.')
stnHwVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1, 2, 1, 1), ).setIndexNames((0, "STN-VERSION-MIB", "stnHwSlotIndex"))
if mibBuilder.loadTexts: stnHwVersionEntry.setStatus('current')
if mibBuilder.loadTexts: stnHwVersionEntry.setDescription('Entry contains information about all hardware versions and identification information.')
stnHwSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: stnHwSlotIndex.setStatus('current')
if mibBuilder.loadTexts: stnHwSlotIndex.setDescription('A sequence number that identifies a particular slot in the chassis.')
stnHwType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1, 2, 1, 1, 2), StnHardwareModuleType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnHwType.setStatus('current')
if mibBuilder.loadTexts: stnHwType.setDescription('Indicates the hardware type located in the specific slot.')
stnHwMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnHwMajorVersion.setStatus('current')
if mibBuilder.loadTexts: stnHwMajorVersion.setDescription('The hardware major version of the module.')
stnHwMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnHwMinorVersion.setStatus('current')
if mibBuilder.loadTexts: stnHwMinorVersion.setDescription('The hardware minor version of the module.')
stnHwVersionDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnHwVersionDescr.setStatus('current')
if mibBuilder.loadTexts: stnHwVersionDescr.setDescription('A descriptive string used to describe the hardware type and version.')
stnHwSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 2, 1, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnHwSerialNumber.setStatus('current')
if mibBuilder.loadTexts: stnHwSerialNumber.setDescription('The serial number of the hardware module.')
stnSwImageUpgraded = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 51)).setObjects(("STN-VERSION-MIB", "stnSwImage"))
if mibBuilder.loadTexts: stnSwImageUpgraded.setStatus('current')
if mibBuilder.loadTexts: stnSwImageUpgraded.setDescription('A stnSwImageUpgraded trap signifies that the agent entity has detected that the indicated software image has been successfully upgraded to all appropriate engines. The generation of this trap can be controlled by the SwUpgradeTraps configuration object.')
stnSwImageUpgradeFailure = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 52)).setObjects(("STN-VERSION-MIB", "stnSwImage"), ("STN-CHASSIS-MIB", "stnEngineIndex"), ("STN-CHASSIS-MIB", "stnEngineSlot"), ("STN-CHASSIS-MIB", "stnEngineCpu"))
if mibBuilder.loadTexts: stnSwImageUpgradeFailure.setStatus('current')
if mibBuilder.loadTexts: stnSwImageUpgradeFailure.setDescription('A stnSwImageUpgradeFailure trap signifies that the agent entity has detected that the indicated software image has failed to load into all appropriate engines. The generation of this trap can be controlled by the SwUpgradeTraps configuration object.')
stnSwImageNotFound = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 53)).setObjects(("STN-VERSION-MIB", "stnSwImage"))
if mibBuilder.loadTexts: stnSwImageNotFound.setStatus('current')
if mibBuilder.loadTexts: stnSwImageNotFound.setDescription('A stnSwImageNotFound trap signifies that the agent entity has detected that the indicated software image cannot be found. The generation of this trap can be controlled by the SwUpgradeTraps configuration object.')
stnSwImageAutoDowngraded = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 54)).setObjects(("STN-VERSION-MIB", "stnSwImage"), ("STN-VERSION-MIB", "stnSwVersionDescr"), ("STN-VERSION-MIB", "stnSwVersionDescr"))
if mibBuilder.loadTexts: stnSwImageAutoDowngraded.setStatus('current')
if mibBuilder.loadTexts: stnSwImageAutoDowngraded.setDescription('A stnSwImageAutoDowngraded trap signifies that the agent entity has detected that the indicated software image cannot successfully execute on the system and has been automatically downgraded. The first stnSwVersionDescr associated with this notification is the current operational image, while the second stnSwVersionDescr is the failed image. The generation of this trap can be controlled by the SwUpgradeTraps configuration object.')
mibBuilder.exportSymbols("STN-VERSION-MIB", stnSwVersionEntry=stnSwVersionEntry, PYSNMP_MODULE_ID=stnVersion, stnHwVersionDescr=stnHwVersionDescr, stnHwVersions=stnHwVersions, stnSwVersionTable=stnSwVersionTable, stnSwImage=stnSwImage, stnHwVersionTable=stnHwVersionTable, stnSwImageAutoDowngraded=stnSwImageAutoDowngraded, stnSwMinorVersion=stnSwMinorVersion, stnHwSlotIndex=stnHwSlotIndex, stnVersionMibConformance=stnVersionMibConformance, stnHwType=stnHwType, stnVersion=stnVersion, stnSwVersions=stnSwVersions, stnSwPatchVersion=stnSwPatchVersion, stnHwSerialNumber=stnHwSerialNumber, stnSwImageUpgraded=stnSwImageUpgraded, stnSwImageUpgradeFailure=stnSwImageUpgradeFailure, stnHwMajorVersion=stnHwMajorVersion, stnHwVersionEntry=stnHwVersionEntry, stnSwVersionDescr=stnSwVersionDescr, stnVersionObjects=stnVersionObjects, stnHwMinorVersion=stnHwMinorVersion, stnSwImageNotFound=stnSwImageNotFound, stnSwMajorVersion=stnSwMajorVersion, stnSwVersionPrefix=stnSwVersionPrefix, stnSwMaintenanceVersion=stnSwMaintenanceVersion)
