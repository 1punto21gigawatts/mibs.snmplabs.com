#
# PySNMP MIB module WATCHGUARD-IPSEC-SA-MON-MIB-EXT (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WATCHGUARD-IPSEC-SA-MON-MIB-EXT
# Produced by pysmi-0.3.4 at Wed May  1 15:36:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
IpsecDoiEspTransform, IpsecDoiAhTransform, IpsecDoiSecProtocolId, IpsecDoiIpcompTransform, IpsecDoiIdentType, IpsecDoiEncapsulationMode, IpsecDoiAuthAlgorithm = mibBuilder.importSymbols("IPSEC-ISAKMP-IKE-DOI-TC", "IpsecDoiEspTransform", "IpsecDoiAhTransform", "IpsecDoiSecProtocolId", "IpsecDoiIpcompTransform", "IpsecDoiIdentType", "IpsecDoiEncapsulationMode", "IpsecDoiAuthAlgorithm")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, TimeTicks, Bits, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType, IpAddress, Integer32, Unsigned32, enterprises, MibIdentifier, ModuleIdentity, Gauge32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "TimeTicks", "Bits", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType", "IpAddress", "Integer32", "Unsigned32", "enterprises", "MibIdentifier", "ModuleIdentity", "Gauge32", "ObjectIdentity")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
watchguard, = mibBuilder.importSymbols("WATCHGUARD-MIB", "watchguard")
wgIpsecSaMonModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3097, 3))
wgIpsecSaMonModule.setRevisions(('2007-01-25 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wgIpsecSaMonModule.setRevisionsDescriptions(('Initial revision.',))
if mibBuilder.loadTexts: wgIpsecSaMonModule.setLastUpdated('200701251200Z')
if mibBuilder.loadTexts: wgIpsecSaMonModule.setOrganization('WatchGuard Technologies, Inc.')
if mibBuilder.loadTexts: wgIpsecSaMonModule.setContactInfo(' Ella Yu WatchGuard Technologies, Inc. 1841 Zanker Road San Jose, CA 95112 USA 408-519-4888 ella.yu@watchguard.com ')
if mibBuilder.loadTexts: wgIpsecSaMonModule.setDescription("The MIB module describes generic IPSec objects defined in IETF working draft 'draft-ieft-ipsec-monitor-mib-01' and WatchGuard's extension.")
class IpsecSaCreatorIdent(TextualConvention, Integer32):
    description = 'A value indicating how an SA was created.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("unknown", 0), ("static", 1), ("ike", 2), ("other", 3))

class IpsecIpv6Address(TextualConvention, OctetString):
    description = 'This data type is used to model IPv6 address prefixes. This is a binary string of 16 octets in network byte-order.'
    status = 'current'
    displayHint = '2x:2x:2x:2x:2x:2x:1d.1d.1d.1d'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

wgIpsecSaMonitorMIB = ObjectIdentity((1, 3, 6, 1, 4, 1, 3097, 3, 1))
if mibBuilder.loadTexts: wgIpsecSaMonitorMIB.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaMonitorMIB.setDescription('This is the base object identifier for all IPSec branches.')
wgSaTables = ObjectIdentity((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1))
if mibBuilder.loadTexts: wgSaTables.setStatus('current')
if mibBuilder.loadTexts: wgSaTables.setDescription('This is the base object identifier for all SA tables.')
wgSaStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 3097, 3, 1, 2))
if mibBuilder.loadTexts: wgSaStatistics.setStatus('current')
if mibBuilder.loadTexts: wgSaStatistics.setDescription('This is the base object identifier for all objects which are global counters for IPSec security associations.')
wgSaErrors = ObjectIdentity((1, 3, 6, 1, 4, 1, 3097, 3, 1, 3))
if mibBuilder.loadTexts: wgSaErrors.setStatus('current')
if mibBuilder.loadTexts: wgSaErrors.setDescription('This is the base object identifier for all objects which are global error counters for IPSec security associations.')
wgIpsecSaEspInTable = MibTable((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 1), )
if mibBuilder.loadTexts: wgIpsecSaEspInTable.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspInTable.setDescription('The (conceptual) table containing information on IPSec inbound ESP SAs. There should be one row for every inbound ESP security association that exists in the entity. The maximum number of rows is implementation dependent.')
wgIpsecSaEspInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 1, 1), ).setIndexNames((0, "WATCHGUARD-IPSEC-SA-MON-MIB-EXT", "wgIpsecSaEspInAddress"), (0, "WATCHGUARD-IPSEC-SA-MON-MIB-EXT", "wgIpsecSaEspInSpi"))
if mibBuilder.loadTexts: wgIpsecSaEspInEntry.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspInEntry.setDescription('An entry (conceptual row) containing the information on a particular IPSec inbound ESP SA. A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
wgIpsecSaEspInAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspInAddress.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspInAddress.setDescription("The destination address of the SA. For implementations that do not support IPv6, this address should appear as one of the IPv4-mapped IPv6 addresses as defined in Section 2.5.4 of [IPV6AA]. Specifically, the prefix '0000:0000:0000:0000:0000:FFFF:' is used for IPv4 only nodes, while the prefix '0000:0000:0000:0000:0000:0000:' is used for bi-lingual nodes.")
wgIpsecSaEspInSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspInSpi.setReference('RFC 2406 Section 2.1')
if mibBuilder.loadTexts: wgIpsecSaEspInSpi.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspInSpi.setDescription('The security parameters index of the SA.')
wgIpsecSaEspInDestId = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspInDestId.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspInDestId.setDescription('The destination identifier of the SA, or 0 if unknown or if the SA uses transport mode encapsulation. This value is taken directly from the optional ID payloads that are exchanged during SA creation negotiation.')
wgIpsecSaEspInDestIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 1, 1, 4), IpsecDoiIdentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspInDestIdType.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspInDestIdType.setDescription("The type of identifier presented by 'wgIpsecSaEspInDestId', or 0 if unknown or if the SA uses transport mode encapsulation.")
wgIpsecSaEspInSourceId = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspInSourceId.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspInSourceId.setDescription('The source identifier of the SA, or 0 if unknown or if the SA uses transport mode encapsulation. This value is taken directly from the optional ID payloads that are exchange during SA creation negotiation.')
wgIpsecSaEspInSourceIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 1, 1, 6), IpsecDoiIdentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspInSourceIdType.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspInSourceIdType.setDescription("The type of identifier presented by 'wgIpsecSaEspInSourceId', or 0 if unknown or if the SA uses transport mode encapsulation.")
wgIpsecSaEspInProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspInProtocol.setReference('RFC2401 section 4.4.2')
if mibBuilder.loadTexts: wgIpsecSaEspInProtocol.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspInProtocol.setDescription('The transport-layer protocol number that this SA carries, or 0 if it carries any protocol.')
wgIpsecSaEspInDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspInDestPort.setReference('RFC2401 section 4.4.2')
if mibBuilder.loadTexts: wgIpsecSaEspInDestPort.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspInDestPort.setDescription('The destination port number of the protocol that this SA carries, or 0 if it carries any port number.')
wgIpsecSaEspInSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspInSourcePort.setReference('RFC2401 section 4.4.2')
if mibBuilder.loadTexts: wgIpsecSaEspInSourcePort.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspInSourcePort.setDescription('The source port number of the protocol that this SA carries, or 0 if it carries any port number.')
wgIpsecSaEspInCreator = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 1, 1, 10), IpsecSaCreatorIdent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspInCreator.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspInCreator.setDescription('The creator of this SA. This MIB makes no assumptions about how the SAs are created. They may be created statically, or by a key exchange protocol such as IKE, or by some other method.')
wgIpsecSaEspInEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 1, 1, 11), IpsecDoiEncapsulationMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspInEncapsulation.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspInEncapsulation.setDescription('The type of encapsulation used by this SA.')
wgIpsecSaEspInEncAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 1, 1, 12), IpsecDoiEspTransform()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspInEncAlg.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspInEncAlg.setDescription('A unique value representing the encryption algorithm applied to traffic or 0 if there is no encryption used.')
wgIpsecSaEspInEncKeyLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65531))).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspInEncKeyLength.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspInEncKeyLength.setDescription("The length of the encryption key in bits used for the algorithm specified in the 'wgIpsecSaEspInEncAlg' object, or 0 if the key length is implicit in the specified algorithm or there is no encryption specified.")
wgIpsecSaEspInAuthAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 1, 1, 14), IpsecDoiAuthAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspInAuthAlg.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspInAuthAlg.setDescription('A unique value representing the hash algorithm applied to traffic or 0 if there is no authentication used.')
wgIpsecSaEspInLimitSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 1, 1, 15), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspInLimitSeconds.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspInLimitSeconds.setDescription('The maximum lifetime in seconds of the SA, or 0 if there is no time constraint on its expiration. The display value is limited to 4294967295 seconds (more than 136 years); values greater than that value will be truncated.')
wgIpsecSaEspInLimitKbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 1, 1, 16), Integer32()).setUnits('kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspInLimitKbytes.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspInLimitKbytes.setDescription('The maximum traffic in kilobytes that the SA is allowed to support, or 0 if there is no traffic constraint on its expiration. The display value is limited to 4294967295 kilobytes; values greater than that value will be truncated.')
wgIpsecSaEspInAccSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 1, 1, 17), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspInAccSeconds.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspInAccSeconds.setDescription("The number of seconds accumulated against the SA's expiration by time. This is also the number of seconds that the SA has existed.")
wgIpsecSaEspInAccKbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 1, 1, 18), Counter32()).setUnits('kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspInAccKbytes.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspInAccKbytes.setDescription("The amount of traffic accumulated that counts against the SA's expiration by traffic limitation, measured in Kbytes. This value may be 0 if the SA does not expire based on traffic.")
wgIpsecSaEspInUserOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 1, 1, 19), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspInUserOctets.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspInUserOctets.setDescription('The amount of user level traffic measured in bytes handled by the SA. This is not necessarily the same as the amount of traffic applied against the traffic expiration limit.')
wgIpsecSaEspInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspInPackets.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspInPackets.setDescription('The number of packets handled by the SA.')
wgIpsecSaEspInDecryptErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspInDecryptErrors.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspInDecryptErrors.setDescription('The number of packets discarded by the SA due to decryption errors.')
wgIpsecSaEspInAuthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspInAuthErrors.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspInAuthErrors.setDescription('The number of packets discarded by the SA due to authentication errors.')
wgIpsecSaEspInReplayErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspInReplayErrors.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspInReplayErrors.setDescription('The number of packets discarded by the SA due to replay errors.')
wgIpsecSaEspInPolicyErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspInPolicyErrors.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspInPolicyErrors.setDescription('The number of packets discarded by the SA due to policy errors. This includes packets where the next protocol is invalid.')
wgIpsecSaEspInPadErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspInPadErrors.setReference('RFC 2406 section 2.4')
if mibBuilder.loadTexts: wgIpsecSaEspInPadErrors.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspInPadErrors.setDescription('The number of packets discarded by the SA due to pad value errors. Implementations that do not check this must not support this object.')
wgIpsecSaEspInOtherReceiveErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspInOtherReceiveErrors.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspInOtherReceiveErrors.setDescription('The number of packets discarded by the SA due to errors other than decryption, authentication or replay errors. This may include packets dropped due to a lack of receive buffers, and may include packets dropped due to congestion at the decryption element.')
wgIpsecSaAhInTable = MibTable((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 2), )
if mibBuilder.loadTexts: wgIpsecSaAhInTable.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhInTable.setDescription('The (conceptual) table containing information on IPSec inbound AH SAs. There should be one row for every inbound AH security association that exists in the entity. The maximum number of rows is implementation dependent.')
wgIpsecSaAhInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 2, 1), ).setIndexNames((0, "WATCHGUARD-IPSEC-SA-MON-MIB-EXT", "wgIpsecSaAhInAddress"), (0, "WATCHGUARD-IPSEC-SA-MON-MIB-EXT", "wgIpsecSaAhInSpi"))
if mibBuilder.loadTexts: wgIpsecSaAhInEntry.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhInEntry.setDescription('An entry (conceptual row) containing the information on a particular IPSec inbound AH SA. A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
wgIpsecSaAhInAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhInAddress.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhInAddress.setDescription("The destination address of the SA. For implementations that do not support IPv6, this address should appear as one of the IPv4-mapped IPv6 addresses as defined in Section 2.5.4 of [IPV6AA]. Specifically, the prefix '0000:0000:0000:0000:0000:FFFF:' is used for IPv4 only nodes, while the prefix '0000:0000:0000:0000:0000:0000:' is used for bi-lingual nodes.")
wgIpsecSaAhInSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhInSpi.setReference('RFC 2402 Section 2.4')
if mibBuilder.loadTexts: wgIpsecSaAhInSpi.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhInSpi.setDescription('The security parameters index of the SA.')
wgIpsecSaAhInDestId = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhInDestId.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhInDestId.setDescription('The destination identifier of the SA, or 0 if unknown or if the SA uses transport mode encapsulation. This value is taken directly from the optional ID payloads that are exchange during SA creation negotiation.')
wgIpsecSaAhInDestIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 2, 1, 4), IpsecDoiIdentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhInDestIdType.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhInDestIdType.setDescription("The type of identifier presented by 'wgIpsecSaAhInDestId', or 0 if unknown or if the SA uses transport mode encapsulation.")
wgIpsecSaAhInSourceId = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhInSourceId.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhInSourceId.setDescription('The source identifier of the SA, or 0 if unknown or if the SA uses transport mode encapsulation. This value is taken directly from the optional ID payloads that are exchange during SA creation negotiation.')
wgIpsecSaAhInSourceIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 2, 1, 6), IpsecDoiIdentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhInSourceIdType.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhInSourceIdType.setDescription("The type of identifier presented by 'wgIpsecSaAhInSourceId', or 0 if unknown or if the SA uses transport mode encapsulation.")
wgIpsecSaAhInProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhInProtocol.setReference('RFC2401 section 4.4.2')
if mibBuilder.loadTexts: wgIpsecSaAhInProtocol.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhInProtocol.setDescription('The transport-layer protocol number that this SA carries, or 0 if it carries any protocol.')
wgIpsecSaAhInDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhInDestPort.setReference('RFC2401 section 4.4.2')
if mibBuilder.loadTexts: wgIpsecSaAhInDestPort.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhInDestPort.setDescription('The destination port number of the protocol that this SA carries, or 0 if it carries any port number.')
wgIpsecSaAhInSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhInSourcePort.setReference('RFC2401 section 4.4.2')
if mibBuilder.loadTexts: wgIpsecSaAhInSourcePort.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhInSourcePort.setDescription('The source port number of the protocol that this SA carries, or 0 if it carries any port number.')
wgIpsecSaAhInCreator = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 2, 1, 10), IpsecSaCreatorIdent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhInCreator.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhInCreator.setDescription('The creator of this SA. This MIB makes no assumptions about how the SAs are created. They may be created statically, or by a key exchange protocol such as IKE, or by some other method.')
wgIpsecSaAhInEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 2, 1, 11), IpsecDoiEncapsulationMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhInEncapsulation.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhInEncapsulation.setDescription('The type of encapsulation used by this SA.')
wgIpsecSaAhInAuthAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 2, 1, 12), IpsecDoiAhTransform()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhInAuthAlg.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhInAuthAlg.setDescription('A unique value representing the hash algorithm applied to traffic carried by this SA if it uses ESP or 0 if there is no authentication applied by ESP.')
wgIpsecSaAhInLimitSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 2, 1, 13), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhInLimitSeconds.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhInLimitSeconds.setDescription('The maximum lifetime in seconds of the SA, or 0 if there is no time constraint on its expiration. The display value is limited to 4294967295 seconds (more than 136 years); values greater than that value will be truncated.')
wgIpsecSaAhInLimitKbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 2, 1, 14), Integer32()).setUnits('kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhInLimitKbytes.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhInLimitKbytes.setDescription('The maximum traffic in Kbytes that the SA is allowed to support, or 0 if there is no traffic constraint on its expiration. The display value is limited to 4294967295 kilobytes; values greater than that value will be truncated.')
wgIpsecSaAhInAccSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 2, 1, 15), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhInAccSeconds.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhInAccSeconds.setDescription("The number of seconds accumulated against the SA's expiration by time. This is also the number of seconds that the SA has existed.")
wgIpsecSaAhInAccKbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 2, 1, 16), Counter32()).setUnits('kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhInAccKbytes.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhInAccKbytes.setDescription("The amount of traffic accumulated that counts against the SA's expiration by traffic limitation, measured in Kbytes. This value may be 0 if the SA does not expire based on traffic.")
wgIpsecSaAhInUserOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 2, 1, 17), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhInUserOctets.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhInUserOctets.setDescription('The amount of user level traffic measured in bytes handled by the SA. This is not necessarily the same as the amount of traffic applied against the traffic expiration limit.')
wgIpsecSaAhInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhInPackets.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhInPackets.setDescription('The number of packets handled by the SA.')
wgIpsecSaAhInAuthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhInAuthErrors.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhInAuthErrors.setDescription('The number of packets discarded by the SA due to authentication errors.')
wgIpsecSaAhInReplayErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhInReplayErrors.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhInReplayErrors.setDescription('The number of packets discarded by the SA due to replay errors.')
wgIpsecSaAhInPolicyErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhInPolicyErrors.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhInPolicyErrors.setDescription('The number of packets discarded by the SA due to policy errors. This includes packets where the next protocol is invalid.')
wgIpsecSaAhInOtherReceiveErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhInOtherReceiveErrors.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhInOtherReceiveErrors.setDescription('The number of packets discarded by the SA due to errors other than decryption, authentication or replay errors. This may include packets dropped due to a lack of receive buffers, and may include packets dropped due to congestion at the authentication element.')
wgIpsecSaIpcompInTable = MibTable((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 3), )
if mibBuilder.loadTexts: wgIpsecSaIpcompInTable.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaIpcompInTable.setDescription('The (conceptual) table containing information on IPSec inbound IPCOMP SAs. There should be one row for every inbound IPCOMP (security) association that exists in the entity. The maximum number of rows is implementation dependent.')
wgIpsecSaIpcompInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 3, 1), ).setIndexNames((0, "WATCHGUARD-IPSEC-SA-MON-MIB-EXT", "wgIpsecSaIpcompInAddress"), (0, "WATCHGUARD-IPSEC-SA-MON-MIB-EXT", "wgIpsecSaIpcompInCpi"))
if mibBuilder.loadTexts: wgIpsecSaIpcompInEntry.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaIpcompInEntry.setDescription('An entry (conceptual row) containing the information on a particular IPSec inbound IPCOMP SA. A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
wgIpsecSaIpcompInAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaIpcompInAddress.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaIpcompInAddress.setDescription("The destination address of the SA. For implementations that do not support IPv6, this address should appear as one of the IPv4-mapped IPv6 addresses as defined in Section 2.5.4 of [IPV6AA]. Specifically, the prefix '0000:0000:0000:0000:0000:FFFF:' is used for IPv4 only nodes, while the prefix '0000:0000:0000:0000:0000:0000:' is used for bi-lingual nodes.")
wgIpsecSaIpcompInCpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 3, 1, 2), IpsecDoiIpcompTransform()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaIpcompInCpi.setReference('RFC 2393 Section 3.3')
if mibBuilder.loadTexts: wgIpsecSaIpcompInCpi.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaIpcompInCpi.setDescription('The CPI of the SA. Since the lower values of CPIs are reserved to be the same as the algorithm, the syntax for this object is the same as the transform.')
wgIpsecSaIpcompInDestId = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaIpcompInDestId.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaIpcompInDestId.setDescription('The destination identifier of the SA, or 0 if unknown or if the SA uses transport mode, or 0 if this SA is used with multiple SAs in protection suites. This value, if non-zero, is taken directly from the optional ID payloads that are exchange during SA creation negotiation.')
wgIpsecSaIpcompInDestIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 3, 1, 4), IpsecDoiIdentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaIpcompInDestIdType.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaIpcompInDestIdType.setDescription("The type of identifier presented by 'wgIpsecSaIpcompInDestId', or 0 if unknown or if the SA uses transport mode, or 0 if this SA is used with multiple SAs in protection suites.")
wgIpsecSaIpcompInSourceId = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaIpcompInSourceId.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaIpcompInSourceId.setDescription('The source identifier of the SA, or 0 if unknown or if the SA uses transport mode encapsulation, or 0 if this SA is used with multiple SAs in protection suites. This value, if non-zero, is taken directly from the optional ID payloads that are exchange during SA creation negotiation.')
wgIpsecSaIpcompInSourceIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 3, 1, 6), IpsecDoiIdentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaIpcompInSourceIdType.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaIpcompInSourceIdType.setDescription("The type of identifier presented by 'wgIpsecSaIpcompInSourceId', or 0 if unknown or if the SA uses transport mode encapsulation, or 0 if this SA is used with multiple SAs in protection suites.")
wgIpsecSaIpcompInProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaIpcompInProtocol.setReference('RFC2401 section 4.4.2')
if mibBuilder.loadTexts: wgIpsecSaIpcompInProtocol.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaIpcompInProtocol.setDescription('The transport-layer protocol number that this SA carries, or 0 if it carries any protocol.')
wgIpsecSaIpcompInDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaIpcompInDestPort.setReference('RFC2401 section 4.4.2')
if mibBuilder.loadTexts: wgIpsecSaIpcompInDestPort.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaIpcompInDestPort.setDescription('The destination port number of the protocol that this SA carries, or 0 if it carries any port number.')
wgIpsecSaIpcompInSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaIpcompInSourcePort.setReference('RFC2401 section 4.4.2')
if mibBuilder.loadTexts: wgIpsecSaIpcompInSourcePort.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaIpcompInSourcePort.setDescription('The source port number of the protocol that this SA carries, or 0 if it carries any port number.')
wgIpsecSaIpcompInCreator = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 3, 1, 10), IpsecSaCreatorIdent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaIpcompInCreator.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaIpcompInCreator.setDescription('The creator of this SA. This MIB makes no assumptions about how the SAs are created. They may be created statically, or by a key exchange protocol such as IKE, or by some other method.')
wgIpsecSaIpcompInEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 3, 1, 11), IpsecDoiEncapsulationMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaIpcompInEncapsulation.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaIpcompInEncapsulation.setDescription('The type of encapsulation used by this SA.')
wgIpsecSaIpcompInDecompAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 3, 1, 12), IpsecDoiIpcompTransform()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaIpcompInDecompAlg.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaIpcompInDecompAlg.setDescription('A unique value representing the decompression algorithm applied to traffic.')
wgIpsecSaIpcompInSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 3, 1, 13), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaIpcompInSeconds.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaIpcompInSeconds.setDescription('The number of seconds that the SA has existed.')
wgIpsecSaIpcompInUserOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 3, 1, 14), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaIpcompInUserOctets.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaIpcompInUserOctets.setDescription('The amount of user level traffic measured in bytes handled by the SA.')
wgIpsecSaIpcompInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaIpcompInPackets.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaIpcompInPackets.setDescription('The number of packets handled by the SA.')
wgIpsecSaIpcompInDecompErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaIpcompInDecompErrors.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaIpcompInDecompErrors.setDescription('The number of packets discarded by the SA due to decompression errors.')
wgIpsecSaIpcompInOtherReceiveErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaIpcompInOtherReceiveErrors.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaIpcompInOtherReceiveErrors.setDescription('The number of packets discarded by the SA due to errors other than decompression errors. This may include packets dropped due to a lack of receive buffers, and packets dropped due to congestion at the decompression element.')
wgIpsecSaEspOutTable = MibTable((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 4), )
if mibBuilder.loadTexts: wgIpsecSaEspOutTable.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspOutTable.setDescription('The (conceptual) table containing information on IPSec Outbound ESP SAs. There should be one row for every outbound ESP security association that exists in the entity. The maximum number of rows is implementation dependent.')
wgIpsecSaEspOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 4, 1), ).setIndexNames((0, "WATCHGUARD-IPSEC-SA-MON-MIB-EXT", "wgIpsecSaEspOutAddress"), (0, "WATCHGUARD-IPSEC-SA-MON-MIB-EXT", "wgIpsecSaEspOutSpi"))
if mibBuilder.loadTexts: wgIpsecSaEspOutEntry.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspOutEntry.setDescription('An entry (conceptual row) containing the information on a particular IPSec Outbound ESP SA. A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
wgIpsecSaEspOutAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspOutAddress.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspOutAddress.setDescription("The destination address of the SA. For implementations that do not support IPv6, this address should appear as one of the IPv4-mapped IPv6 addresses as defined in Section 2.5.4 of [IPV6AA]. Specifically, the prefix '0000:0000:0000:0000:0000:FFFF:' is used for IPv4 only nodes, while the prefix '0000:0000:0000:0000:0000:0000:' is used for bi-lingual nodes.")
wgIpsecSaEspOutSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspOutSpi.setReference('RFC 2406 Section 2.1')
if mibBuilder.loadTexts: wgIpsecSaEspOutSpi.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspOutSpi.setDescription('The security parameters index of the SA.')
wgIpsecSaEspOutSourceId = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspOutSourceId.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspOutSourceId.setDescription('The source identifier of the SA, or 0 if unknown or if the SA uses transport mode encapsulation. This value is taken directly from the optional ID payloads that are exchange during phase 2 negotiations.')
wgIpsecSaEspOutSourceIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 4, 1, 4), IpsecDoiIdentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspOutSourceIdType.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspOutSourceIdType.setDescription("The type of identifier presented by 'wgIpsecSaEspOutSourceId', or 0 if unknown or if the SA uses transport mode encapsulation.")
wgIpsecSaEspOutDestId = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspOutDestId.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspOutDestId.setDescription('The destination identifier of the SA, or 0 if unknown or if the SA uses transport mode encapsulation. This value is taken directly from the optional ID payloads that are exchange during phase 2 negotiations.')
wgIpsecSaEspOutDestIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 4, 1, 6), IpsecDoiIdentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspOutDestIdType.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspOutDestIdType.setDescription("The type of identifier presented by 'wgIpsecSaEspOutDestId', or 0 if unknown or if the SA uses transport mode encapsulation.")
wgIpsecSaEspOutProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspOutProtocol.setReference('RFC2401 section 4.4.2')
if mibBuilder.loadTexts: wgIpsecSaEspOutProtocol.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspOutProtocol.setDescription('The transport-layer protocol number that this SA carries, or 0 if it carries any protocol.')
wgIpsecSaEspOutSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspOutSourcePort.setReference('RFC2401 section 4.4.2')
if mibBuilder.loadTexts: wgIpsecSaEspOutSourcePort.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspOutSourcePort.setDescription('The source port number of the protocol that this SA carries, or 0 if it carries any port number.')
wgIpsecSaEspOutDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspOutDestPort.setReference('RFC2401 section 4.4.2')
if mibBuilder.loadTexts: wgIpsecSaEspOutDestPort.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspOutDestPort.setDescription('The destination port number of the protocol that this SA carries, or 0 if it carries any port number.')
wgIpsecSaEspOutCreator = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 4, 1, 10), IpsecSaCreatorIdent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspOutCreator.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspOutCreator.setDescription('The creator of this SA. This MIB makes no assumptions about how the SAs are created. They may be created statically, or by a key exchange protocol such as IKE, or by some other method.')
wgIpsecSaEspOutEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 4, 1, 11), IpsecDoiEncapsulationMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspOutEncapsulation.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspOutEncapsulation.setDescription('The type of encapsulation used by this SA.')
wgIpsecSaEspOutEncAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 4, 1, 12), IpsecDoiEspTransform()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspOutEncAlg.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspOutEncAlg.setDescription('A unique value representing the encryption algorithm applied to traffic or 0 if there is no encryption used.')
wgIpsecSaEspOutEncKeyLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65531))).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspOutEncKeyLength.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspOutEncKeyLength.setDescription("The length of the encryption key in bits used for the algorithm specified in the 'wgIpsecSaEspOutEncAlg' object, or 0 if the key length is implicit in the specified algorithm or there is no encryption specified.")
wgIpsecSaEspOutAuthAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 4, 1, 14), IpsecDoiAuthAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspOutAuthAlg.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspOutAuthAlg.setDescription('A unique value representing the hash algorithm applied to traffic or 0 if there is no authentication used.')
wgIpsecSaEspOutLimitSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 4, 1, 15), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspOutLimitSeconds.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspOutLimitSeconds.setDescription('The maximum lifetime in seconds of the SA, or 0 if there is no time constraint on its expiration. The display value is limited to 4294967295 seconds (more than 136 years); values greater than that value will be truncated.')
wgIpsecSaEspOutLimitKbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 4, 1, 16), Integer32()).setUnits('kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspOutLimitKbytes.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspOutLimitKbytes.setDescription('The maximum traffic in kbytes that the SA is allowed to support, or 0 if there is no traffic constraint on its expiration. The display value is limited to 4294967295 kilobytes; values greater than that value will be truncated.')
wgIpsecSaEspOutAccSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 4, 1, 17), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspOutAccSeconds.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspOutAccSeconds.setDescription("The number of seconds accumulated against the SA's expiration by time. This is also the number of seconds that the SA has existed.")
wgIpsecSaEspOutAccKbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 4, 1, 18), Counter32()).setUnits('kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspOutAccKbytes.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspOutAccKbytes.setDescription("The amount of traffic accumulated that counts against the SA's expiration by traffic limitation, measured in Kbytes. This value may be 0 if the SA does not expire based on traffic.")
wgIpsecSaEspOutUserOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 4, 1, 19), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspOutUserOctets.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspOutUserOctets.setDescription('The amount of user level traffic measured in bytes handled by the SA. This is not necessarily the same as the amount of traffic applied against the traffic expiration limit.')
wgIpsecSaEspOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspOutPackets.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspOutPackets.setDescription('The number of packets handled by the SA.')
wgIpsecSaEspOutSendErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaEspOutSendErrors.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaEspOutSendErrors.setDescription('The number of packets discarded by the SA due to any error. This may include errors due to a lack of transmit buffers.')
wgIpsecSaAhOutTable = MibTable((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 5), )
if mibBuilder.loadTexts: wgIpsecSaAhOutTable.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhOutTable.setDescription('The (conceptual) table containing information on IPSec Outbound AH SAs. There should be one row for every outbound AH security association that exists in the entity. The maximum number of rows is implementation dependent.')
wgIpsecSaAhOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 5, 1), ).setIndexNames((0, "WATCHGUARD-IPSEC-SA-MON-MIB-EXT", "wgIpsecSaAhOutAddress"), (0, "WATCHGUARD-IPSEC-SA-MON-MIB-EXT", "wgIpsecSaAhOutSpi"))
if mibBuilder.loadTexts: wgIpsecSaAhOutEntry.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhOutEntry.setDescription('An entry (conceptual row) containing the information on a particular IPSec Outbound AH SA. A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
wgIpsecSaAhOutAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhOutAddress.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhOutAddress.setDescription("The destination address of the SA. For implementations that do not support IPv6, this address should appear as one of the IPv4-mapped IPv6 addresses as defined in Section 2.5.4 of [IPV6AA]. Specifically, the prefix '0000:0000:0000:0000:0000:FFFF:' is used for IPv4 only nodes, while the prefix '0000:0000:0000:0000:0000:0000:' is used for bi-lingual nodes.")
wgIpsecSaAhOutSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhOutSpi.setReference('RFC 2402 Section 2.4')
if mibBuilder.loadTexts: wgIpsecSaAhOutSpi.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhOutSpi.setDescription('The security parameters index of the SA.')
wgIpsecSaAhOutSourceId = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhOutSourceId.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhOutSourceId.setDescription('The source identifier of the SA, or 0 if unknown or if the SA uses transport mode encapsulation. This value is taken directly from the optional ID payloads that are exchange during phase 2 negotiations.')
wgIpsecSaAhOutSourceIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 5, 1, 4), IpsecDoiIdentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhOutSourceIdType.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhOutSourceIdType.setDescription("The type of identifier presented by 'wgIpsecSaAhOutSourceId', or 0 if unknown or if the SA uses transport mode encapsulation.")
wgIpsecSaAhOutDestId = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhOutDestId.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhOutDestId.setDescription('The destination identifier of the SA, or 0 if unknown or if the SA uses transport mode encapsulation. This value is taken directly from the optional ID payloads that are exchange during phase 2 negotiations.')
wgIpsecSaAhOutDestIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 5, 1, 6), IpsecDoiIdentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhOutDestIdType.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhOutDestIdType.setDescription("The type of identifier presented by 'wgIpsecSaAhOutDestId', or 0 if unknown or if the SA uses transport mode encapsulation.")
wgIpsecSaAhOutProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhOutProtocol.setReference('RFC2401 section 4.4.2')
if mibBuilder.loadTexts: wgIpsecSaAhOutProtocol.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhOutProtocol.setDescription('The transport-layer protocol number that this SA carries, or 0 if it carries any protocol.')
wgIpsecSaAhOutSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhOutSourcePort.setReference('RFC2401 section 4.4.2')
if mibBuilder.loadTexts: wgIpsecSaAhOutSourcePort.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhOutSourcePort.setDescription('The source port number of the protocol that this SA carries, or 0 if it carries any port number.')
wgIpsecSaAhOutDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhOutDestPort.setReference('RFC2401 section 4.4.2')
if mibBuilder.loadTexts: wgIpsecSaAhOutDestPort.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhOutDestPort.setDescription('The destination port number of the protocol that this SA carries, or 0 if it carries any port number.')
wgIpsecSaAhOutCreator = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 5, 1, 10), IpsecSaCreatorIdent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhOutCreator.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhOutCreator.setDescription('The creator of this SA. This MIB makes no assumptions about how the SAs are created. They may be created statically, or by a key exchange protocol such as IKE, or by some other method.')
wgIpsecSaAhOutEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 5, 1, 11), IpsecDoiEncapsulationMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhOutEncapsulation.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhOutEncapsulation.setDescription('The type of encapsulation used by this SA.')
wgIpsecSaAhOutAuthAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 5, 1, 12), IpsecDoiAhTransform()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhOutAuthAlg.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhOutAuthAlg.setDescription('A unique value representing the hash algorithm applied to traffic or 0 if there is no authentication used.')
wgIpsecSaAhOutLimitSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 5, 1, 13), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhOutLimitSeconds.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhOutLimitSeconds.setDescription('The maximum lifetime in seconds of the SA, or 0 if there is no time constraint on its expiration. The display value is limited to 4294967295 seconds (more than 136 years); values greater than that value will be truncated.')
wgIpsecSaAhOutLimitKbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 5, 1, 14), Integer32()).setUnits('kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhOutLimitKbytes.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhOutLimitKbytes.setDescription('The maximum traffic in Kbytes that the SA is allowed to support, or 0 if there is no traffic constraint on its expiration. The display value is limited to 4294967295 kilobytes; values greater than that value will be truncated.')
wgIpsecSaAhOutAccSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 5, 1, 15), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhOutAccSeconds.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhOutAccSeconds.setDescription("The number of seconds accumulated against the SA's expiration by time. This is also the number of seconds that the SA has existed.")
wgIpsecSaAhOutAccKbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 5, 1, 16), Counter32()).setUnits('kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhOutAccKbytes.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhOutAccKbytes.setDescription("The amount of traffic accumulated that counts against the SA's expiration by traffic limitation, measured in Kbytes. This value may be 0 if the SA does not expire based on traffic.")
wgIpsecSaAhOutUserOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 5, 1, 17), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhOutUserOctets.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhOutUserOctets.setDescription('The amount of user level traffic measured in bytes handled by the SA. This is not necessarily the same as the amount of traffic applied against the traffic expiration limit.')
wgIpsecSaAhOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhOutPackets.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhOutPackets.setDescription('The number of packets handled by the SA.')
wgIpsecSaAhOutSendErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaAhOutSendErrors.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaAhOutSendErrors.setDescription('The number of packets discarded by the SA due to any error. This may include errors due to a lack of transmit buffers.')
wgIpsecSaIpcompOutTable = MibTable((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 6), )
if mibBuilder.loadTexts: wgIpsecSaIpcompOutTable.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaIpcompOutTable.setDescription('The (conceptual) table containing information on IPSec Outbound IPCOMP SAs. There should be one row for every outbound IPCOMP (security) association that exists in the entity. The maximum number of rows is implementation dependent.')
wgIpsecSaIpcompOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 6, 1), ).setIndexNames((0, "WATCHGUARD-IPSEC-SA-MON-MIB-EXT", "wgIpsecSaIpcompOutAddress"), (0, "WATCHGUARD-IPSEC-SA-MON-MIB-EXT", "wgIpsecSaIpcompOutCpi"))
if mibBuilder.loadTexts: wgIpsecSaIpcompOutEntry.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaIpcompOutEntry.setDescription('An entry (conceptual row) containing the information on a particular IPSec Outbound IPCOMP SA. A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
wgIpsecSaIpcompOutAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaIpcompOutAddress.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaIpcompOutAddress.setDescription("The destination address of the SA. If the IPCOMP SA is shared across multiple SAs in protection suites, this value may be 0. For implementations that do not support IPv6, this address should appear as one of the IPv4-mapped IPv6 addresses as defined in Section 2.5.4 of [IPV6AA]. Specifically, the prefix '0000:0000:0000:0000:0000:FFFF:' is used for IPv4 only nodes, while the prefix '0000:0000:0000:0000:0000:0000:' is used for bi-lingual nodes.")
wgIpsecSaIpcompOutCpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 6, 1, 2), IpsecDoiIpcompTransform()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaIpcompOutCpi.setReference('RFC 2393 Section 3.3')
if mibBuilder.loadTexts: wgIpsecSaIpcompOutCpi.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaIpcompOutCpi.setDescription('The CPI of the SA. Since the lower values of CPIs are reserved to be the same as the algorithm, the syntax for this object is the same as the transform.')
wgIpsecSaIpcompOutSourceId = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaIpcompOutSourceId.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaIpcompOutSourceId.setDescription('The source identifier of the SA, or 0 if unknown or if the SA uses transport mode encapsulation, or 0 if this SA is used with multiple SAs in protection suites. This value, if non-zero, is taken directly from the optional ID payloads that are exchange during phase 2 negotiations.')
wgIpsecSaIpcompOutSourceIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 6, 1, 4), IpsecDoiIdentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaIpcompOutSourceIdType.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaIpcompOutSourceIdType.setDescription("The type of identifier presented by 'wgIpsecSaIpcompOutSourceId', or 0 if unknown or if the SA uses transport mode encapsulation, or 0 if this SA is used with multiple SAs in protection suites.")
wgIpsecSaIpcompOutDestId = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaIpcompOutDestId.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaIpcompOutDestId.setDescription('The destination identifier of the SA, or 0 if unknown or if the SA uses transport mode encapsulation, or 0 if this SA is used with multiple SAs in protection suites. This value, if non-zero, is taken directly from the optional ID payloads that are exchange during phase 2 negotiations.')
wgIpsecSaIpcompOutDestIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 6, 1, 6), IpsecDoiIdentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaIpcompOutDestIdType.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaIpcompOutDestIdType.setDescription("The type of identifier presented by 'wgIpsecSaIpcompOutDestId', or 0 if unknown or if the SA uses transport mode encapsulation, or 0 if this SA is used with multiple SAs in protection suites.")
wgIpsecSaIpcompOutProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaIpcompOutProtocol.setReference('RFC2401 section 4.4.2')
if mibBuilder.loadTexts: wgIpsecSaIpcompOutProtocol.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaIpcompOutProtocol.setDescription('The transport-layer protocol number that this SA carries, or 0 if it carries any protocol.')
wgIpsecSaIpcompOutSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaIpcompOutSourcePort.setReference('RFC2401 section 4.4.2')
if mibBuilder.loadTexts: wgIpsecSaIpcompOutSourcePort.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaIpcompOutSourcePort.setDescription('The source port number of the protocol that this SA carries, or 0 if it carries any port number.')
wgIpsecSaIpcompOutDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaIpcompOutDestPort.setReference('RFC2401 section 4.4.2')
if mibBuilder.loadTexts: wgIpsecSaIpcompOutDestPort.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaIpcompOutDestPort.setDescription('The destination port number of the protocol that this SA carries, or 0 if it carries any port number.')
wgIpsecSaIpcompOutCreator = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 6, 1, 10), IpsecSaCreatorIdent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaIpcompOutCreator.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaIpcompOutCreator.setDescription('The creator of this SA. This MIB makes no assumptions about how the SAs are created. They may be created statically, or by a key exchange protocol such as IKE, or by some other method.')
wgIpsecSaIpcompOutEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 6, 1, 11), IpsecDoiEncapsulationMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaIpcompOutEncapsulation.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaIpcompOutEncapsulation.setDescription('The type of encapsulation used by this SA.')
wgIpsecSaIpcompOutCompAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 6, 1, 12), IpsecDoiIpcompTransform()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaIpcompOutCompAlg.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaIpcompOutCompAlg.setDescription('A unique value representing the compression algorithm applied to traffic.')
wgIpsecSaIpcompOutSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 6, 1, 13), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaIpcompOutSeconds.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaIpcompOutSeconds.setDescription('The number of seconds that the SA has existed.')
wgIpsecSaIpcompOutUserOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 6, 1, 14), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaIpcompOutUserOctets.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaIpcompOutUserOctets.setDescription('The amount of user level traffic measured in bytes handled by the SA. This is not necessarily the same as the amount of traffic applied against the traffic expiration limit.')
wgIpsecSaIpcompOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 3, 1, 1, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSaIpcompOutPackets.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSaIpcompOutPackets.setDescription('The number of packets handled by the SA.')
wgIpsecEspCurrentInboundSAs = MibScalar((1, 3, 6, 1, 4, 1, 3097, 3, 1, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecEspCurrentInboundSAs.setStatus('current')
if mibBuilder.loadTexts: wgIpsecEspCurrentInboundSAs.setDescription('The current number of inbound ESP SAs in the entity.')
wgIpsecEspTotalInboundSAs = MibScalar((1, 3, 6, 1, 4, 1, 3097, 3, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecEspTotalInboundSAs.setStatus('current')
if mibBuilder.loadTexts: wgIpsecEspTotalInboundSAs.setDescription('The total number of inbound ESP SAs created in the entity since boot time.')
wgIpsecEspCurrentOutboundSAs = MibScalar((1, 3, 6, 1, 4, 1, 3097, 3, 1, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecEspCurrentOutboundSAs.setStatus('current')
if mibBuilder.loadTexts: wgIpsecEspCurrentOutboundSAs.setDescription('The current number of outbound ESP SAs in the entity.')
wgIpsecEspTotalOutboundSAs = MibScalar((1, 3, 6, 1, 4, 1, 3097, 3, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecEspTotalOutboundSAs.setStatus('current')
if mibBuilder.loadTexts: wgIpsecEspTotalOutboundSAs.setDescription('The total number of outbound ESP SAs created in the entity since boot time.')
wgIpsecAhCurrentInboundSAs = MibScalar((1, 3, 6, 1, 4, 1, 3097, 3, 1, 2, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecAhCurrentInboundSAs.setStatus('current')
if mibBuilder.loadTexts: wgIpsecAhCurrentInboundSAs.setDescription('The current number of inbound AH SAs in the entity.')
wgIpsecAhTotalInboundSAs = MibScalar((1, 3, 6, 1, 4, 1, 3097, 3, 1, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecAhTotalInboundSAs.setStatus('current')
if mibBuilder.loadTexts: wgIpsecAhTotalInboundSAs.setDescription('The total number of inbound AH SAs created in the entity since boot time.')
wgIpsecAhCurrentOutboundSAs = MibScalar((1, 3, 6, 1, 4, 1, 3097, 3, 1, 2, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecAhCurrentOutboundSAs.setStatus('current')
if mibBuilder.loadTexts: wgIpsecAhCurrentOutboundSAs.setDescription('The current number of outbound AH SAs in the entity.')
wgIpsecAhTotalOutboundSAs = MibScalar((1, 3, 6, 1, 4, 1, 3097, 3, 1, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecAhTotalOutboundSAs.setStatus('current')
if mibBuilder.loadTexts: wgIpsecAhTotalOutboundSAs.setDescription('The total number of outbound AH SAs created in the entity since boot time.')
wgIpsecIpcompCurrentInboundSAs = MibScalar((1, 3, 6, 1, 4, 1, 3097, 3, 1, 2, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecIpcompCurrentInboundSAs.setStatus('current')
if mibBuilder.loadTexts: wgIpsecIpcompCurrentInboundSAs.setDescription('The current number of inbound IPCOMP SAs in the entity.')
wgIpsecIpcompTotalInboundSAs = MibScalar((1, 3, 6, 1, 4, 1, 3097, 3, 1, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecIpcompTotalInboundSAs.setStatus('current')
if mibBuilder.loadTexts: wgIpsecIpcompTotalInboundSAs.setDescription('The total number of inbound IPCOMP SAs created in the entity since boot time.')
wgIpsecIpcompCurrentOutboundSAs = MibScalar((1, 3, 6, 1, 4, 1, 3097, 3, 1, 2, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecIpcompCurrentOutboundSAs.setStatus('current')
if mibBuilder.loadTexts: wgIpsecIpcompCurrentOutboundSAs.setDescription('The current number of outbound IPCOMP SAs in the entity.')
wgIpsecIpcompTotalOutboundSAs = MibScalar((1, 3, 6, 1, 4, 1, 3097, 3, 1, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecIpcompTotalOutboundSAs.setStatus('current')
if mibBuilder.loadTexts: wgIpsecIpcompTotalOutboundSAs.setDescription('The total number of outbound IPCOMP SAs created in the entity since boot time.')
wgIpsecDecryptionErrors = MibScalar((1, 3, 6, 1, 4, 1, 3097, 3, 1, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecDecryptionErrors.setStatus('current')
if mibBuilder.loadTexts: wgIpsecDecryptionErrors.setDescription('The total number of packets received by the entity in SAs since boot time with decryption errors.')
wgIpsecAuthenticationErrors = MibScalar((1, 3, 6, 1, 4, 1, 3097, 3, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecAuthenticationErrors.setStatus('current')
if mibBuilder.loadTexts: wgIpsecAuthenticationErrors.setDescription('The total number of packets received by the entity in SAs since boot time with authentication errors. This includes all packets in which the hash value is determined to be invalid, for both ESP and AH SAs.')
wgIpsecReplayErrors = MibScalar((1, 3, 6, 1, 4, 1, 3097, 3, 1, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecReplayErrors.setStatus('current')
if mibBuilder.loadTexts: wgIpsecReplayErrors.setDescription('The total number of packets received by the entity in SAs since boot time with replay errors.')
wgIpsecPolicyErrors = MibScalar((1, 3, 6, 1, 4, 1, 3097, 3, 1, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecPolicyErrors.setStatus('current')
if mibBuilder.loadTexts: wgIpsecPolicyErrors.setDescription('The total number of packets received by the entity in SAs since boot time and discarded due to policy errors. This includes packets that had selectors that were invalid for the SA that carried them.')
wgIpsecOtherReceiveErrors = MibScalar((1, 3, 6, 1, 4, 1, 3097, 3, 1, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecOtherReceiveErrors.setStatus('current')
if mibBuilder.loadTexts: wgIpsecOtherReceiveErrors.setDescription('The total number of packets received by the entity in SAs since boot time and discarded due to errors not due to decryption, authentication, replay or policy.')
wgIpsecSendErrors = MibScalar((1, 3, 6, 1, 4, 1, 3097, 3, 1, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecSendErrors.setStatus('current')
if mibBuilder.loadTexts: wgIpsecSendErrors.setDescription('The total number of packets to be sent by the entity in SAs since boot time and discarded due to errors.')
wgIpsecUnknownSpiErrors = MibScalar((1, 3, 6, 1, 4, 1, 3097, 3, 1, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecUnknownSpiErrors.setStatus('current')
if mibBuilder.loadTexts: wgIpsecUnknownSpiErrors.setDescription('The total number of packets received by the entity since boot time with SPIs or CPIs that were not valid.')
mibBuilder.exportSymbols("WATCHGUARD-IPSEC-SA-MON-MIB-EXT", wgIpsecIpcompCurrentInboundSAs=wgIpsecIpcompCurrentInboundSAs, wgIpsecSaMonModule=wgIpsecSaMonModule, wgIpsecDecryptionErrors=wgIpsecDecryptionErrors, wgIpsecSaEspInAccSeconds=wgIpsecSaEspInAccSeconds, wgIpsecSaEspOutEncAlg=wgIpsecSaEspOutEncAlg, wgIpsecSaAhOutLimitKbytes=wgIpsecSaAhOutLimitKbytes, wgIpsecSaAhInProtocol=wgIpsecSaAhInProtocol, wgIpsecSaEspInEntry=wgIpsecSaEspInEntry, wgIpsecSaIpcompOutSourcePort=wgIpsecSaIpcompOutSourcePort, wgIpsecSaAhInSourceIdType=wgIpsecSaAhInSourceIdType, wgIpsecSaEspInAccKbytes=wgIpsecSaEspInAccKbytes, wgIpsecOtherReceiveErrors=wgIpsecOtherReceiveErrors, wgIpsecSaAhInAccSeconds=wgIpsecSaAhInAccSeconds, wgIpsecSaEspOutSourcePort=wgIpsecSaEspOutSourcePort, wgIpsecSaIpcompInUserOctets=wgIpsecSaIpcompInUserOctets, IpsecIpv6Address=IpsecIpv6Address, wgIpsecSaEspInTable=wgIpsecSaEspInTable, wgIpsecSaEspInUserOctets=wgIpsecSaEspInUserOctets, wgIpsecSaAhInUserOctets=wgIpsecSaAhInUserOctets, wgIpsecSaAhOutLimitSeconds=wgIpsecSaAhOutLimitSeconds, wgIpsecSaEspOutPackets=wgIpsecSaEspOutPackets, wgIpsecSaEspInPolicyErrors=wgIpsecSaEspInPolicyErrors, wgIpsecSaEspOutSendErrors=wgIpsecSaEspOutSendErrors, wgIpsecSaIpcompInTable=wgIpsecSaIpcompInTable, wgIpsecSaEspInAuthErrors=wgIpsecSaEspInAuthErrors, wgIpsecSaAhInPolicyErrors=wgIpsecSaAhInPolicyErrors, wgIpsecSaEspInSourceIdType=wgIpsecSaEspInSourceIdType, wgIpsecAuthenticationErrors=wgIpsecAuthenticationErrors, wgIpsecSaEspInAddress=wgIpsecSaEspInAddress, wgIpsecSaIpcompOutAddress=wgIpsecSaIpcompOutAddress, wgIpsecSaIpcompInAddress=wgIpsecSaIpcompInAddress, wgIpsecSaIpcompInSourceIdType=wgIpsecSaIpcompInSourceIdType, wgIpsecSaAhInAccKbytes=wgIpsecSaAhInAccKbytes, wgIpsecSaEspOutEncKeyLength=wgIpsecSaEspOutEncKeyLength, wgIpsecSaEspInProtocol=wgIpsecSaEspInProtocol, wgIpsecSaEspOutAccKbytes=wgIpsecSaEspOutAccKbytes, wgIpsecSaAhOutEntry=wgIpsecSaAhOutEntry, wgIpsecSendErrors=wgIpsecSendErrors, wgIpsecAhCurrentOutboundSAs=wgIpsecAhCurrentOutboundSAs, wgIpsecSaAhOutSourceIdType=wgIpsecSaAhOutSourceIdType, wgIpsecSaAhInTable=wgIpsecSaAhInTable, wgIpsecSaAhOutSendErrors=wgIpsecSaAhOutSendErrors, wgIpsecSaAhInAuthErrors=wgIpsecSaAhInAuthErrors, wgIpsecSaEspInReplayErrors=wgIpsecSaEspInReplayErrors, wgIpsecSaEspInDestId=wgIpsecSaEspInDestId, wgIpsecSaEspOutEntry=wgIpsecSaEspOutEntry, wgIpsecSaAhOutAuthAlg=wgIpsecSaAhOutAuthAlg, wgIpsecSaEspOutDestId=wgIpsecSaEspOutDestId, wgIpsecSaAhInLimitSeconds=wgIpsecSaAhInLimitSeconds, wgIpsecSaEspInEncapsulation=wgIpsecSaEspInEncapsulation, wgIpsecSaEspOutTable=wgIpsecSaEspOutTable, wgIpsecSaIpcompInSeconds=wgIpsecSaIpcompInSeconds, wgIpsecSaAhOutDestId=wgIpsecSaAhOutDestId, wgIpsecAhCurrentInboundSAs=wgIpsecAhCurrentInboundSAs, wgIpsecSaEspInSourcePort=wgIpsecSaEspInSourcePort, wgIpsecSaAhInSourceId=wgIpsecSaAhInSourceId, wgIpsecSaAhInEncapsulation=wgIpsecSaAhInEncapsulation, wgIpsecSaEspInDestPort=wgIpsecSaEspInDestPort, wgIpsecSaAhInPackets=wgIpsecSaAhInPackets, wgIpsecSaIpcompInDestPort=wgIpsecSaIpcompInDestPort, wgIpsecSaAhOutTable=wgIpsecSaAhOutTable, wgIpsecSaIpcompOutPackets=wgIpsecSaIpcompOutPackets, wgIpsecSaEspOutUserOctets=wgIpsecSaEspOutUserOctets, wgIpsecSaAhOutSourceId=wgIpsecSaAhOutSourceId, wgIpsecSaIpcompOutSeconds=wgIpsecSaIpcompOutSeconds, wgIpsecSaAhOutUserOctets=wgIpsecSaAhOutUserOctets, wgIpsecSaAhInDestIdType=wgIpsecSaAhInDestIdType, wgIpsecSaAhInAuthAlg=wgIpsecSaAhInAuthAlg, wgIpsecSaIpcompInPackets=wgIpsecSaIpcompInPackets, wgIpsecSaEspOutEncapsulation=wgIpsecSaEspOutEncapsulation, wgIpsecSaAhInCreator=wgIpsecSaAhInCreator, wgIpsecSaEspOutDestPort=wgIpsecSaEspOutDestPort, wgIpsecSaEspOutLimitKbytes=wgIpsecSaEspOutLimitKbytes, wgIpsecSaEspOutAddress=wgIpsecSaEspOutAddress, wgIpsecSaIpcompInSourcePort=wgIpsecSaIpcompInSourcePort, wgIpsecEspCurrentOutboundSAs=wgIpsecEspCurrentOutboundSAs, wgIpsecSaEspInEncAlg=wgIpsecSaEspInEncAlg, wgIpsecSaAhInAddress=wgIpsecSaAhInAddress, wgIpsecSaIpcompOutDestId=wgIpsecSaIpcompOutDestId, wgIpsecSaAhOutAddress=wgIpsecSaAhOutAddress, wgIpsecSaAhInEntry=wgIpsecSaAhInEntry, wgIpsecSaEspInCreator=wgIpsecSaEspInCreator, wgIpsecSaIpcompOutEntry=wgIpsecSaIpcompOutEntry, wgSaStatistics=wgSaStatistics, wgIpsecSaIpcompInSourceId=wgIpsecSaIpcompInSourceId, wgSaErrors=wgSaErrors, wgIpsecSaEspOutDestIdType=wgIpsecSaEspOutDestIdType, wgIpsecEspCurrentInboundSAs=wgIpsecEspCurrentInboundSAs, wgIpsecSaAhOutDestPort=wgIpsecSaAhOutDestPort, wgIpsecSaEspInEncKeyLength=wgIpsecSaEspInEncKeyLength, wgIpsecSaAhInSpi=wgIpsecSaAhInSpi, wgIpsecSaEspInSpi=wgIpsecSaEspInSpi, wgIpsecPolicyErrors=wgIpsecPolicyErrors, wgIpsecSaAhOutSpi=wgIpsecSaAhOutSpi, wgIpsecSaEspInPackets=wgIpsecSaEspInPackets, wgIpsecSaEspInDecryptErrors=wgIpsecSaEspInDecryptErrors, wgIpsecSaIpcompOutCpi=wgIpsecSaIpcompOutCpi, wgIpsecSaEspOutProtocol=wgIpsecSaEspOutProtocol, wgIpsecSaIpcompInEncapsulation=wgIpsecSaIpcompInEncapsulation, wgIpsecSaAhOutDestIdType=wgIpsecSaAhOutDestIdType, wgIpsecReplayErrors=wgIpsecReplayErrors, wgIpsecSaEspOutLimitSeconds=wgIpsecSaEspOutLimitSeconds, wgIpsecSaEspOutAuthAlg=wgIpsecSaEspOutAuthAlg, wgIpsecIpcompTotalOutboundSAs=wgIpsecIpcompTotalOutboundSAs, wgSaTables=wgSaTables, wgIpsecAhTotalOutboundSAs=wgIpsecAhTotalOutboundSAs, wgIpsecSaIpcompOutUserOctets=wgIpsecSaIpcompOutUserOctets, wgIpsecSaIpcompInCreator=wgIpsecSaIpcompInCreator, wgIpsecSaEspInLimitSeconds=wgIpsecSaEspInLimitSeconds, wgIpsecSaAhInDestPort=wgIpsecSaAhInDestPort, wgIpsecSaAhInLimitKbytes=wgIpsecSaAhInLimitKbytes, wgIpsecSaIpcompOutCreator=wgIpsecSaIpcompOutCreator, wgIpsecSaMonitorMIB=wgIpsecSaMonitorMIB, wgIpsecSaIpcompOutDestPort=wgIpsecSaIpcompOutDestPort, wgIpsecSaEspInSourceId=wgIpsecSaEspInSourceId, wgIpsecEspTotalInboundSAs=wgIpsecEspTotalInboundSAs, wgIpsecSaIpcompInDecompAlg=wgIpsecSaIpcompInDecompAlg, wgIpsecSaEspOutSpi=wgIpsecSaEspOutSpi, wgIpsecSaIpcompInOtherReceiveErrors=wgIpsecSaIpcompInOtherReceiveErrors, wgIpsecSaAhOutAccSeconds=wgIpsecSaAhOutAccSeconds, wgIpsecSaAhOutPackets=wgIpsecSaAhOutPackets, wgIpsecIpcompCurrentOutboundSAs=wgIpsecIpcompCurrentOutboundSAs, wgIpsecSaIpcompOutProtocol=wgIpsecSaIpcompOutProtocol, wgIpsecSaEspInPadErrors=wgIpsecSaEspInPadErrors, wgIpsecSaEspOutSourceIdType=wgIpsecSaEspOutSourceIdType, wgIpsecAhTotalInboundSAs=wgIpsecAhTotalInboundSAs, wgIpsecSaIpcompInEntry=wgIpsecSaIpcompInEntry, wgIpsecSaAhInDestId=wgIpsecSaAhInDestId, wgIpsecUnknownSpiErrors=wgIpsecUnknownSpiErrors, wgIpsecSaEspInLimitKbytes=wgIpsecSaEspInLimitKbytes, wgIpsecSaAhInOtherReceiveErrors=wgIpsecSaAhInOtherReceiveErrors, wgIpsecSaIpcompOutCompAlg=wgIpsecSaIpcompOutCompAlg, wgIpsecSaEspInOtherReceiveErrors=wgIpsecSaEspInOtherReceiveErrors, wgIpsecSaEspOutAccSeconds=wgIpsecSaEspOutAccSeconds, wgIpsecSaAhOutAccKbytes=wgIpsecSaAhOutAccKbytes, wgIpsecSaIpcompInDecompErrors=wgIpsecSaIpcompInDecompErrors, wgIpsecSaIpcompOutSourceId=wgIpsecSaIpcompOutSourceId, wgIpsecSaAhInSourcePort=wgIpsecSaAhInSourcePort, wgIpsecSaIpcompOutSourceIdType=wgIpsecSaIpcompOutSourceIdType, PYSNMP_MODULE_ID=wgIpsecSaMonModule, wgIpsecEspTotalOutboundSAs=wgIpsecEspTotalOutboundSAs, wgIpsecSaAhOutEncapsulation=wgIpsecSaAhOutEncapsulation, wgIpsecSaIpcompInDestIdType=wgIpsecSaIpcompInDestIdType, wgIpsecSaIpcompInDestId=wgIpsecSaIpcompInDestId, wgIpsecSaEspOutSourceId=wgIpsecSaEspOutSourceId, IpsecSaCreatorIdent=IpsecSaCreatorIdent, wgIpsecSaEspInDestIdType=wgIpsecSaEspInDestIdType, wgIpsecSaAhOutProtocol=wgIpsecSaAhOutProtocol, wgIpsecSaEspInAuthAlg=wgIpsecSaEspInAuthAlg, wgIpsecSaAhOutCreator=wgIpsecSaAhOutCreator, wgIpsecSaIpcompInCpi=wgIpsecSaIpcompInCpi, wgIpsecSaEspOutCreator=wgIpsecSaEspOutCreator, wgIpsecSaIpcompOutDestIdType=wgIpsecSaIpcompOutDestIdType, wgIpsecSaAhOutSourcePort=wgIpsecSaAhOutSourcePort, wgIpsecSaAhInReplayErrors=wgIpsecSaAhInReplayErrors, wgIpsecIpcompTotalInboundSAs=wgIpsecIpcompTotalInboundSAs, wgIpsecSaIpcompOutEncapsulation=wgIpsecSaIpcompOutEncapsulation, wgIpsecSaIpcompInProtocol=wgIpsecSaIpcompInProtocol, wgIpsecSaIpcompOutTable=wgIpsecSaIpcompOutTable)
