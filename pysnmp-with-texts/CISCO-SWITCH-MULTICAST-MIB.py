#
# PySNMP MIB module CISCO-SWITCH-MULTICAST-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SWITCH-MULTICAST-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:13:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
EntPhysicalIndexOrZero, CiscoInterfaceIndexList = mibBuilder.importSymbols("CISCO-TC", "EntPhysicalIndexOrZero", "CiscoInterfaceIndexList")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
InetAddressPrefixLength, InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressPrefixLength", "InetAddressType", "InetAddress")
MplsVpnId, = mibBuilder.importSymbols("MPLS-VPN-MIB", "MplsVpnId")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter32, Integer32, Bits, Unsigned32, NotificationType, ObjectIdentity, IpAddress, MibIdentifier, Counter64, iso, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Integer32", "Bits", "Unsigned32", "NotificationType", "ObjectIdentity", "IpAddress", "MibIdentifier", "Counter64", "iso", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ModuleIdentity")
StorageType, TimeStamp, DisplayString, RowStatus, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "StorageType", "TimeStamp", "DisplayString", "RowStatus", "TextualConvention", "TruthValue")
ciscoSwitchMulticastMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 504))
ciscoSwitchMulticastMIB.setRevisions(('2010-05-27 00:01', '2008-03-20 00:00', '2006-01-06 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoSwitchMulticastMIB.setRevisionsDescriptions(('Added the following groups: cswmGlobalReplicationGroup cswmMvrfBiDirPimDfUsageGroup cswmForwardingGroup cswmFlowQueryResultGroup', "Added cswmBiDirPimDfUsageGroup. Added cswmLtlUsageGroup. Corrected the enum value of cswmReplConfigCurMode: From 'egress' to 'egressAndIngress'.", 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoSwitchMulticastMIB.setLastUpdated('201005270001Z')
if mibBuilder.loadTexts: ciscoSwitchMulticastMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoSwitchMulticastMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-lan-switch-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoSwitchMulticastMIB.setDescription('This MIB module defines management objects for the Multicast Switching features on Cisco Layer 2/3 devices. Definition of some of the terms used in this MIB: Multicast Replication - The mechanism by which a system creates one or more copies of a multicast packet for forwarding. Ingress Multicast Replication - A type of multicast replication where the replication engine on the ingress module always performs the whole replication. Egress Multicast Replication - A type of multicast replication where the replication engines on both the ingress and egress modules perform the replication. VPN - Virtual private network. A secure IP-based network that shares resources with one or more physical networks. VRF - VPN Routing and Forwarding instance Consists of an IP routing table, a derived forwarding table, a set of interfaces that use the forwarding table, and a set of rules and routing protocols that determine what goes into the forwarding table. MVPN - Multicast VPN MVRF - Multicast VRF A VRF which has multicast routing enabled. VRF-lite - A feature that enables a service provider to support two or more VPNs, where IP addresses can be overlapped among the VPNs. LTL - Local Target Logic A hardware resource table to aid in switching. OIF - Outgoing Interface The interface through which packets are forwarded out. DF - Designated Forwarder.')
cswmMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 504, 0))
cswmMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 504, 1))
cswmMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 504, 2))
cswmGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 1))
cswmReplication = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 2))
cswmMvrfStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 3))
cswmBiDirPimDfStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 4))
cswmLtlStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 5))
cswmForwarding = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 6))
cswmFlowQueryResult = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7))
cswmMvpnHwSwitchingStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notCapable", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswmMvpnHwSwitchingStatus.setStatus('current')
if mibBuilder.loadTexts: cswmMvpnHwSwitchingStatus.setDescription("Indicates the MVPN hardware switching status. 'notCapable' - This device is not capable of MVPN hardware switching 'enable' - MVPN hardware switching is enabled. 'disable' - MVPN hardware switching is disabled.")
cswmVrfLiteStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notCapable", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswmVrfLiteStatus.setStatus('current')
if mibBuilder.loadTexts: cswmVrfLiteStatus.setDescription("Indicates the VRF-Lite switching status. 'notCapable' - This device is not capable of VRF-Lite switching. 'enable' - VRF-Lite switching is enabled. 'disable' - VRF-Lite switching is disabled.")
cswmMRouteConsistCheck = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notCapable", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cswmMRouteConsistCheck.setStatus('current')
if mibBuilder.loadTexts: cswmMRouteConsistCheck.setDescription("Specifies the Multicast Routing(mroute) Table consistency checker support mode. The consistency checker scans the mroute table and assures that multicast-hardware entries are consistent with mroute table. 'notCapable' - This device is not capable of mroute consistency checker 'enable' - mroute consistency checker is enabled. 'disable' - mroute consistency checker is disabled. When the value of this object is 'notCapable' the object value is not writable. The value 'notCapable' can not be set.")
cswmProcessorConsistCheck = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notCapable", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cswmProcessorConsistCheck.setStatus('current')
if mibBuilder.loadTexts: cswmProcessorConsistCheck.setDescription("Specifies the Processor consistency checker support mode. In a multiple processor device, the consistency checker assures that multicast flow entries are consistent across processors. Example: In a Catalyst 6000 series device, which has a Route Processor (RP) and a Switch Processor (SP), the consistency checker assures that multicast flow entries on the Route Processor and the Switch Processor are consistent. 'notCapable' - This device is not capable of processor consistency checker 'enable' - processor consistency checker is enabled. 'disable' - processor consistency checker is disabled. When the value of this object is 'notCapable' the object value is not writable. The value 'notCapable' can not be set.")
cswmReplCapabilityTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 2, 1), )
if mibBuilder.loadTexts: cswmReplCapabilityTable.setStatus('current')
if mibBuilder.loadTexts: cswmReplCapabilityTable.setDescription('A table containing multicast replication capability information.')
cswmReplCapabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 2, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-SWITCH-MULTICAST-MIB", "cswmReplConfigAddrType"))
if mibBuilder.loadTexts: cswmReplCapabilityEntry.setStatus('current')
if mibBuilder.loadTexts: cswmReplCapabilityEntry.setDescription('A conceptual row of cswmReplCapabilityTable, containing the multicast replication capability information for per module (identified by entPhysicalIndex) per Internet address type supported on the managed system. An entry is created by the agent at the system power-up or module insertion.')
cswmReplCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 2, 1, 1, 1), Bits().clone(namedValues=NamedValues(("ingress", 0), ("egress", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswmReplCapability.setStatus('current')
if mibBuilder.loadTexts: cswmReplCapability.setDescription('Indicates the multicast replication capability. The replication capability of a module for a particular address type is dependent on the hardware and software capabilities of the module.')
cswmReplConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 2, 2), )
if mibBuilder.loadTexts: cswmReplConfigTable.setStatus('current')
if mibBuilder.loadTexts: cswmReplConfigTable.setDescription('A table containing multicast flow replication information for the device.')
cswmReplConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-SWITCH-MULTICAST-MIB", "cswmReplConfigAddrType"))
if mibBuilder.loadTexts: cswmReplConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cswmReplConfigEntry.setDescription('A conceptual row of cswmReplConfigTable, containing multicast flow replication information.')
cswmReplConfigAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 2, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cswmReplConfigAddrType.setStatus('current')
if mibBuilder.loadTexts: cswmReplConfigAddrType.setDescription('The Internet address type supporting multicast flow replication.')
cswmReplConfigCurMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notCapable", 1), ("ingress", 2), ("egressAndIngress", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cswmReplConfigCurMode.setStatus('current')
if mibBuilder.loadTexts: cswmReplConfigCurMode.setDescription("Specifies the current mode of multicast flow replication for this address type. 'notCapable' - This device is not capable of Multicast flow replication for this address type. 'ingress' - The current mode of replication is ingress. 'egressAndIngress' - The current mode of replication is egress and ingress. When the value of this object is 'notCapable' the object value is not writable. The value 'notCapable' can not be set. The values of cswmReplCapability for the modules on the system should be considered when setting the value for this object. Certain systems may not be fully operational in a particular replication mode if there is an inconsistency between this object and the values of cswmReplCapability.")
cswmReplConfigAutoDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notCapable", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cswmReplConfigAutoDetect.setStatus('current')
if mibBuilder.loadTexts: cswmReplConfigAutoDetect.setDescription("Specifies the auto-detection of multicast replication mode for this address type. 'notCapable' - This device is not capable of Auto-detection of multicast replication mode for this address type. 'enable' - The auto-detection of multicast replication mode is enabled. 'disable' - The auto-detection of multicast replication mode is disabled. When the value of this object is 'notCapable' the object value is not writable. The value 'notCapable' can not be set.")
cswmGlobalReplcationMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notCapable", 1), ("ingress", 2), ("egress", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cswmGlobalReplcationMode.setStatus('current')
if mibBuilder.loadTexts: cswmGlobalReplcationMode.setDescription("Specifies the current mode of multicast flow replication for all Internet address types supporting multicast flow replication. 'notCapable' - This device is not capable of Multicast flow replication. 'ingress' - The current mode of replication is ingress. 'egress' - The current mode of replication is egress. When the value of this object is 'notCapable' the object value is not writable. The value 'notCapable' can not be set. The values of cswmReplCapability for the modules on the system should be considered when setting the value for this object. Certain systems may not be fully operational in a particular replication mode if there is an inconsistency between this object and the values of cswmReplCapability.")
cswmMvrfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 3, 1), )
if mibBuilder.loadTexts: cswmMvrfStatsTable.setStatus('current')
if mibBuilder.loadTexts: cswmMvrfStatsTable.setDescription('A table containing multicast flow statistics information on each Multicast VPN routing/forwarding instance (MVRF).')
cswmMvrfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-SWITCH-MULTICAST-MIB", "cswmMvrfName"))
if mibBuilder.loadTexts: cswmMvrfStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cswmMvrfStatsEntry.setDescription('A conceptual row of cswmMvrfStatsTable, containing multicast flow statistics for each MVRF.')
cswmMvrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 3, 1, 1, 1), MplsVpnId())
if mibBuilder.loadTexts: cswmMvrfName.setStatus('current')
if mibBuilder.loadTexts: cswmMvrfName.setDescription('The human-readable name of this VPN.')
cswmMvrfTotalFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 3, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswmMvrfTotalFlows.setStatus('current')
if mibBuilder.loadTexts: cswmMvrfTotalFlows.setDescription('Indicates the total number of multicast flow entries installed for this MVRF.')
cswmMvrfPartialFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 3, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswmMvrfPartialFlows.setStatus('current')
if mibBuilder.loadTexts: cswmMvrfPartialFlows.setDescription('Indicates the total number of multicast partial short cut flow entries installed for this MVRF.')
cswmMvrfRpfMfdFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 3, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswmMvrfRpfMfdFlows.setStatus('current')
if mibBuilder.loadTexts: cswmMvrfRpfMfdFlows.setDescription('Indicates the total number of Reverse Path Forwarding(RPF) Multicast Fast Drop(MFD) flow entries installed for this MVRF.')
cswmBiDirPimDfUsed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 4, 1), Unsigned32()).setUnits('entries').setMaxAccess("readonly")
if mibBuilder.loadTexts: cswmBiDirPimDfUsed.setStatus('current')
if mibBuilder.loadTexts: cswmBiDirPimDfUsed.setDescription('The number of Bi-directional PIM Designated Forwarder entries currently in use by the default MVRF on the device.')
cswmBiDirPimDfTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 4, 2), Unsigned32()).setUnits('entries').setMaxAccess("readonly")
if mibBuilder.loadTexts: cswmBiDirPimDfTotal.setStatus('current')
if mibBuilder.loadTexts: cswmBiDirPimDfTotal.setDescription('The total number of Bi-directional PIM Designated Forwarder entries for the default MVRF on the device.')
cswmMvrfBiDirPimDfUsageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 4, 3), )
if mibBuilder.loadTexts: cswmMvrfBiDirPimDfUsageTable.setStatus('current')
if mibBuilder.loadTexts: cswmMvrfBiDirPimDfUsageTable.setDescription('A table containing multicast Bi-directional PIM Designated Forwarder usage information on each Multicast VPN routing/forwarding instance (MVRF) for every Internet address type supported.')
cswmMvrfBiDirPimDfUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 4, 3, 1), ).setIndexNames((0, "CISCO-SWITCH-MULTICAST-MIB", "cswmMvrfName"), (0, "CISCO-SWITCH-MULTICAST-MIB", "cswmMvrfBiDirPimDfAddrType"))
if mibBuilder.loadTexts: cswmMvrfBiDirPimDfUsageEntry.setStatus('current')
if mibBuilder.loadTexts: cswmMvrfBiDirPimDfUsageEntry.setDescription('A conceptual row of cswmMvrfBiDirPimDfUsageTable, containing multicast Bi-directional PIM Designated Forwarder usage information on each MVRF per Internet address type.')
cswmMvrfBiDirPimDfAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 4, 3, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cswmMvrfBiDirPimDfAddrType.setStatus('current')
if mibBuilder.loadTexts: cswmMvrfBiDirPimDfAddrType.setDescription('This object indicates the internet address type for which the multicast Bi-directional PIM Designated Forwarder usage information is collected.')
cswmMvrfBiDirPimDfUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 4, 3, 1, 2), Unsigned32()).setUnits('entries').setMaxAccess("readonly")
if mibBuilder.loadTexts: cswmMvrfBiDirPimDfUsed.setStatus('current')
if mibBuilder.loadTexts: cswmMvrfBiDirPimDfUsed.setDescription('The number of Bi-directional PIM Designated Forwarder entries currently in use.')
cswmMvrfBiDirPimDfTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 4, 3, 1, 3), Unsigned32()).setUnits('entries').setMaxAccess("readonly")
if mibBuilder.loadTexts: cswmMvrfBiDirPimDfTotal.setStatus('current')
if mibBuilder.loadTexts: cswmMvrfBiDirPimDfTotal.setDescription('The total number of Bi-directional PIM Designated Forwarder entries.')
cswmLtlUsed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 5, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswmLtlUsed.setStatus('current')
if mibBuilder.loadTexts: cswmLtlUsed.setDescription('This object indicates the number of Multicast LTL entries currently used by this device.')
cswmLtlTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 5, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswmLtlTotal.setStatus('current')
if mibBuilder.loadTexts: cswmLtlTotal.setDescription('This object indicates the total number of Multicast LTL entries available for this device.')
cswmForwardingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 6, 1), )
if mibBuilder.loadTexts: cswmForwardingTable.setStatus('current')
if mibBuilder.loadTexts: cswmForwardingTable.setDescription('A table containing multicast forwarding information.')
cswmForwardingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 6, 1, 1), ).setIndexNames((0, "CISCO-SWITCH-MULTICAST-MIB", "cswmInterfaceIndex"), (0, "CISCO-SWITCH-MULTICAST-MIB", "cswmForwardingAddrType"))
if mibBuilder.loadTexts: cswmForwardingEntry.setStatus('current')
if mibBuilder.loadTexts: cswmForwardingEntry.setDescription('A conceptual row of cswmForwardingTable, containing multicast forwarding information on a particular interface for every Internet address type supported.')
cswmInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 6, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cswmInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: cswmInterfaceIndex.setDescription('This object specifies the ifIndex for interface capable of performing forwarding.')
cswmForwardingAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 6, 1, 1, 2), InetAddressType())
if mibBuilder.loadTexts: cswmForwardingAddrType.setStatus('current')
if mibBuilder.loadTexts: cswmForwardingAddrType.setDescription('This object specifies the internet address type of the multicast forwarding.')
cswmForwardingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notCapable", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cswmForwardingEnabled.setStatus('current')
if mibBuilder.loadTexts: cswmForwardingEnabled.setDescription("This object specifies whether multicast forwarding is supported on this interface for a particular internet address type. 'notCapable' - A read-only value which indicates that this interface is not capable of multicast forwarding for this internet address type. This value cannot be used in SET operation. 'enable' - multicast forwarding is enabled. 'disable' - multicast forwarding is disabled. This object is not writable if the value of this object is 'notCapable'.")
cswmFlowMaxQueries = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswmFlowMaxQueries.setStatus('current')
if mibBuilder.loadTexts: cswmFlowMaxQueries.setDescription('Maximum number of query entries allowed to be outstanding at any time, in the cswmFlowQueryTable. The typical value for this object is 5.')
cswmFlowQueryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 2), )
if mibBuilder.loadTexts: cswmFlowQueryTable.setStatus('current')
if mibBuilder.loadTexts: cswmFlowQueryTable.setDescription("A control table used to query the switching engine by specifying retrieval criteria for IP multicast L3 flows. Each row instance in the table represents a query with its parameters. The resulting per-flow data if requested for each instance of a query in this table is returned in the cswmFlowResultTable. A row in this table can be created by setting the corresponding instance of cswmFlowQueryStatus to 'createAndGo'. A row can be deleted by setting the corresponding instance of cswmFlowQueryStatus to 'destroy'. The maximum number of entries (rows) in this table cannot exceed the value of cswmFlowMaxQueries object.")
cswmFlowQueryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 2, 1), ).setIndexNames((0, "CISCO-SWITCH-MULTICAST-MIB", "cswmFlowQueryIndex"))
if mibBuilder.loadTexts: cswmFlowQueryEntry.setStatus('current')
if mibBuilder.loadTexts: cswmFlowQueryEntry.setDescription('A conceptual row of the cswmFlowQueryTable used to setup retrieval criteria to search for IP multicast L3 flows on a switching engine entity in the device.')
cswmFlowQueryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cswmFlowQueryIndex.setStatus('current')
if mibBuilder.loadTexts: cswmFlowQueryIndex.setDescription('An arbitrary integer in the range of 1 to cswmFlowMaxQueries to identify this control query.')
cswmFlowQueryMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 2, 1, 2), Bits().clone(namedValues=NamedValues(("vrf", 0), ("group", 1), ("groupmask", 2), ("source", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cswmFlowQueryMask.setStatus('current')
if mibBuilder.loadTexts: cswmFlowQueryMask.setDescription("This object is used to set up the query criteria for the multicast flows of interest. If any one of the defined BITs is set, then the objects(s) corresponding to the BITS in the same row instance will be used for the search. Specifically, if the 'vrf' BIT is set, then the cswmFlowQueryMvrf object will be included in the search criteria. The 'vrf' BIT can be set in combination with any other BIT for the search. If the 'group' BIT is set, then the cswmFlowQueryGroup object will be used as the search criteria. If the 'groupmask' BIT is set, then the cswmFlowQueryGroup and cswmFlowQueryGroupMask objects will be used as the search criteria. If the 'source' BIT is set, then the cswmFlowQuerySource and cswmFlowQueryGroup objects will be used as the search criteria. It is SNMP managers' responsibility to turn on certain bits on in this object instance, if necessary, and the corresponding flow parameter variables to the appropriate values in order to setup the desired query criteria.")
cswmFlowQueryMvrf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 2, 1, 3), MplsVpnId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cswmFlowQueryMvrf.setStatus('current')
if mibBuilder.loadTexts: cswmFlowQueryMvrf.setDescription("The human-readable name of the Multicast Virtual Private Network (MVPN) routing/forwarding instance (MVRF). When the 'mvrf' bit of cswmFlowQueryMask object in the same row is on, an appropriate value should be specified and only flows with the specified MVRF name will be contained in the result table. If the 'mvrf' bit in the associated cswmFlowQueryMask is cleared, this object is ignored during the query, and all the flows corresponding to the default MVRF will be considered.")
cswmFlowQueryAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 2, 1, 4), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cswmFlowQueryAddrType.setStatus('current')
if mibBuilder.loadTexts: cswmFlowQueryAddrType.setDescription('The Internet address type for this multicast search query.')
cswmFlowQuerySource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 2, 1, 5), InetAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cswmFlowQuerySource.setStatus('current')
if mibBuilder.loadTexts: cswmFlowQuerySource.setDescription("The source Internet address of the IP multicast layer 3 flows. When the 'source' BIT of cswmFlowQueryMask object in the same row is on, an appropriate value should be specified and only flows with the specified source address will be contained in the result table. If the 'source' bit in the associated cswmFlowQueryMask is off, this object is ignored during the query. The type of this address is determined by the value of the cswmFlowQueryAddrType object. The default value of this object is all zeros.")
cswmFlowQueryGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 2, 1, 6), InetAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cswmFlowQueryGroup.setStatus('current')
if mibBuilder.loadTexts: cswmFlowQueryGroup.setDescription("The multicast group Internet address of the queried flows. When the 'group' or 'groupmask' bit of cswmFlowQueryMask object in the same row is on, an appropriate value should be specified and only flows with the specified group address will be contained in the result table. If the 'group' and 'groupmask' bits in the associated cswmFlowQueryMask are both off, this object is ignored during the query. The type of this address is determined by the value of the cswmFlowQueryAddrType object. The default value of this object is all zeros.")
cswmFlowQueryGroupMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 2, 1, 7), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cswmFlowQueryGroupMask.setStatus('current')
if mibBuilder.loadTexts: cswmFlowQueryGroupMask.setDescription("The length of the Prefix associated with cswmFlowQueryGroup. When the 'groupmask' bit of cswmFlowQueryMask object in the same row is on, an appropriate value should be specified and only rows with the specied group address prefix will be returned in the result table. If the 'groupmask' bit in the associated cswmFlowQueryMask is off, this object is ignored during the query. A value of zero causes all addresses to match. This prefix length will be consistent with the type specified in cswmFlowQueryAddrType.")
cswmFlowQueryType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 2, 1, 8), Bits().clone(namedValues=NamedValues(("perFlow", 0), ("oifList", 1), ("dfList", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cswmFlowQueryType.setStatus('current')
if mibBuilder.loadTexts: cswmFlowQueryType.setDescription("This object is used to set up the query type for the multicast flows of interest. If the 'perFlow' BIT is set, then, the entries matching this query will be returned in in cswmFlowResultTable. If the 'perFlow' BIT is not set, then only the total number of flows matching this query are computed and returned in cswmFlowQueryTotalFlows, and there will be no entries matching this query in cswmFlowResultTable. If the 'oifList' BIT is set, then the Outgoing Interface (OIF) list is generated for each flow and populated in cswmFlowResultTable. If the 'dfList' BIT is set, then the Designated Forwarder (DF) interfaces list is generated for each flow and populated in cswmFlowResultTable.")
cswmFlowQueryEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 2, 1, 9), EntPhysicalIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cswmFlowQueryEntityIndex.setStatus('current')
if mibBuilder.loadTexts: cswmFlowQueryEntityIndex.setDescription('This object identifies the switching engine for which the query is issued. When the value of this object is 0, the query is performed on the switching engine of the active supervisor.')
cswmFlowQuerySkipNFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cswmFlowQuerySkipNFlows.setStatus('current')
if mibBuilder.loadTexts: cswmFlowQuerySkipNFlows.setDescription("The number of searched flows to be skipped before storing any multicast flows in cswmFlowResultTable, when the 'perFlow' bit is set in cswmFlowQueryType. This object can be used along with cswmFlowMcastQueryMoreRows object to skip previously found flows and only query the remaining flows in the table. Note that due to the dynamical nature of the L3 flows, the queried flows may be missed or repeated by setting this object.")
cswmFlowQueryTotalFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswmFlowQueryTotalFlows.setStatus('current')
if mibBuilder.loadTexts: cswmFlowQueryTotalFlows.setDescription("The number of flows matching the query criteria. The value of this object will be zero when the 'perFlow' bit is set in cswmFlowQueryType.")
cswmFlowMcastQueryRows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswmFlowMcastQueryRows.setStatus('current')
if mibBuilder.loadTexts: cswmFlowMcastQueryRows.setDescription('Indicating the status of the query by following values: -1 - Either the query has not been started or the agent is still processing this query instance. It is the default value when the row is instantiated. 0..2147483647 - The search has ended and this is the number of rows in the cswmFlowResultTable, resulting from this query.')
cswmFlowMcastQueryMoreRows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 2, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswmFlowMcastQueryMoreRows.setStatus('current')
if mibBuilder.loadTexts: cswmFlowMcastQueryMoreRows.setDescription('If the value of the object is true when there are more entries available matching this query criteria, than the ones returned in cswmFlowResultTable.')
cswmFlowQueryOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 2, 1, 14), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cswmFlowQueryOwner.setStatus('current')
if mibBuilder.loadTexts: cswmFlowQueryOwner.setDescription("The manager entity that configured this entry and is therefore using the resources assigned to it. It is used to model an administratively assigned name of the owner of a resource. It is recommended that this object have one or more the following information: IP address, management station name, network manager's name, location, or phone number.")
cswmFlowQueryCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 2, 1, 15), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswmFlowQueryCreateTime.setStatus('current')
if mibBuilder.loadTexts: cswmFlowQueryCreateTime.setDescription('Time when this query was created.')
cswmFlowQueryStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 2, 1, 16), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cswmFlowQueryStorage.setStatus('current')
if mibBuilder.loadTexts: cswmFlowQueryStorage.setDescription('The storage type for this conceptual row.')
cswmFlowQueryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 2, 1, 17), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cswmFlowQueryStatus.setStatus('current')
if mibBuilder.loadTexts: cswmFlowQueryStatus.setDescription("The status object used to manage rows in this table. When set to 'active', the query to search for l3 multicast flows is initiated. Once a row becomes active, values within the row cannot be modified, except by deleting and re-creating the row.")
cswmFlowResultTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 3), )
if mibBuilder.loadTexts: cswmFlowResultTable.setStatus('current')
if mibBuilder.loadTexts: cswmFlowResultTable.setDescription("A table containing current IP multicast flow information corresponding to all the completed queries set up in the cswmFlowQueryTable, that were initiated on the switch engine(s) with the 'perFlow' bit set in cswmFlowQueryType. The query result will not become available until the current search completes.")
cswmFlowResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 3, 1), ).setIndexNames((0, "CISCO-SWITCH-MULTICAST-MIB", "cswmFlowQueryIndex"), (0, "CISCO-SWITCH-MULTICAST-MIB", "cswmFlowResultIndex"))
if mibBuilder.loadTexts: cswmFlowResultEntry.setStatus('current')
if mibBuilder.loadTexts: cswmFlowResultEntry.setDescription('A conceptual row of cswmFlowResultTable, containing information about an IP multicast layer 3 flow that matchs the search criteria set in the corresponding row of cswmFlowQueryTable. This row instance is indexed by the query index (cswmFlowQueryIndex), and data entry index (cswmFlowResultIndex).')
cswmFlowResultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cswmFlowResultIndex.setStatus('current')
if mibBuilder.loadTexts: cswmFlowResultIndex.setDescription('A positive integer which uniquely identify a result entry matching a particular query.')
cswmFlowResultMvrf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 3, 1, 2), MplsVpnId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswmFlowResultMvrf.setStatus('current')
if mibBuilder.loadTexts: cswmFlowResultMvrf.setDescription('The MVRF to which this flow belongs to.')
cswmFlowResultAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 3, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswmFlowResultAddrType.setStatus('current')
if mibBuilder.loadTexts: cswmFlowResultAddrType.setDescription('The Internet address type of cswmFlowResultGroup, cswmFlowResultGroupMask and cswmFlowResultSource.')
cswmFlowResultGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 3, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswmFlowResultGroup.setStatus('current')
if mibBuilder.loadTexts: cswmFlowResultGroup.setDescription('The group address of the multicast layer 3 flow.')
cswmFlowResultGroupMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 3, 1, 5), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswmFlowResultGroupMask.setStatus('current')
if mibBuilder.loadTexts: cswmFlowResultGroupMask.setDescription('The length of the Prefix associated with cswmFlowResultGroup. A value of zero causes all addresses to match. This prefix length will be consistent with the type specified in cswmFlowResultAddrType.')
cswmFlowResultSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 3, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswmFlowResultSource.setStatus('current')
if mibBuilder.loadTexts: cswmFlowResultSource.setDescription('The source address of the multicast layer 3 flow.')
cswmFlowResultFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 3, 1, 7), Bits().clone(namedValues=NamedValues(("copy", 0), ("punt", 1), ("ineligible", 2), ("hwFail", 3), ("bidir", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswmFlowResultFlags.setStatus('current')
if mibBuilder.loadTexts: cswmFlowResultFlags.setDescription("This object indicates the corresponding flags for this flow: 'copy' - indicates that traffic is copied to CPU and forwarded in hardware. 'punt' - indicates that traffic is punted to CPU and forwarded in software. 'ineligible' - indicates that this flow is ineligible for hardware installation. 'hwFail' - indicates that this flow failed to install in hardware. 'bidir' - indicates that this flow is a Bidir flow.")
cswmFlowResultRpfInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 3, 1, 8), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswmFlowResultRpfInterface.setStatus('current')
if mibBuilder.loadTexts: cswmFlowResultRpfInterface.setDescription('This object represents either the InterfaceIndex of RPF interface for a RPF flow or 0 (zero). The value of zero means that this flow is a non-RPF flow.')
cswmFlowResultPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswmFlowResultPackets.setStatus('current')
if mibBuilder.loadTexts: cswmFlowResultPackets.setDescription('The total number of multicast traffic packets forwarded for this flow.')
cswmFlowResultOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswmFlowResultOctets.setStatus('current')
if mibBuilder.loadTexts: cswmFlowResultOctets.setDescription('The total number of multicast traffic octets forwarded for this flow.')
cswmFlowResultOIFTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 4), )
if mibBuilder.loadTexts: cswmFlowResultOIFTable.setStatus('current')
if mibBuilder.loadTexts: cswmFlowResultOIFTable.setDescription('A table containing list of OIF for a flow listed in cswmFlowResultTable.')
cswmFlowResultOIFEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 4, 1), ).setIndexNames((0, "CISCO-SWITCH-MULTICAST-MIB", "cswmFlowQueryIndex"), (0, "CISCO-SWITCH-MULTICAST-MIB", "cswmFlowResultIndex"), (0, "CISCO-SWITCH-MULTICAST-MIB", "cswmFlowResultOIFIndex"))
if mibBuilder.loadTexts: cswmFlowResultOIFEntry.setStatus('current')
if mibBuilder.loadTexts: cswmFlowResultOIFEntry.setDescription("A conceptual row of cswmFlowResultOIFTable, containing information about the list of OIF for a flow listed in cswmFlowResultTable. An entry is created only when the 'oifList' bit is set in cswmFlowQueryType.")
cswmFlowResultOIFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cswmFlowResultOIFIndex.setStatus('current')
if mibBuilder.loadTexts: cswmFlowResultOIFIndex.setDescription('A positive integer which uniquely identifies a list of OIF for a particular result flow matching a particular query.')
cswmFlowResultOIFIntList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 4, 1, 2), CiscoInterfaceIndexList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswmFlowResultOIFIntList.setStatus('current')
if mibBuilder.loadTexts: cswmFlowResultOIFIntList.setDescription('The object lists the ifIndex for a set of 64 OIF for a particular flow.')
cswmFlowResultDFTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 5), )
if mibBuilder.loadTexts: cswmFlowResultDFTable.setStatus('current')
if mibBuilder.loadTexts: cswmFlowResultDFTable.setDescription('A table containing list of DF interfaces for a flow listed in cswmFlowResultTable.')
cswmFlowResultDFEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 5, 1), ).setIndexNames((0, "CISCO-SWITCH-MULTICAST-MIB", "cswmFlowQueryIndex"), (0, "CISCO-SWITCH-MULTICAST-MIB", "cswmFlowResultIndex"), (0, "CISCO-SWITCH-MULTICAST-MIB", "cswmFlowResultDFIndex"))
if mibBuilder.loadTexts: cswmFlowResultDFEntry.setStatus('current')
if mibBuilder.loadTexts: cswmFlowResultDFEntry.setDescription("A conceptual row of cswmFlowResultDFTable, containing information about the list of DF Interfaces for a flow listed in cswmFlowResultTable. An entry is created only when the 'dfList' bit is set in cswmFlowQueryType.")
cswmFlowResultDFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cswmFlowResultDFIndex.setStatus('current')
if mibBuilder.loadTexts: cswmFlowResultDFIndex.setDescription('A positive integer which uniquely identifies a list of DF interfaces for a particular flow matching a particular query.')
cswmFlowResultDFIntList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 504, 1, 7, 5, 1, 2), CiscoInterfaceIndexList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswmFlowResultDFIntList.setStatus('current')
if mibBuilder.loadTexts: cswmFlowResultDFIntList.setDescription('The object lists the ifIndex for a set of 64 DF interfaces for a particular flow.')
cswmMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 504, 2, 1))
cswmMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 504, 2, 2))
cswmMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 504, 2, 1, 1)).setObjects(("CISCO-SWITCH-MULTICAST-MIB", "cswmGlobalGroup"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmConsistCheckGroup"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmReplicationGroup"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmMvrfStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswmMIBCompliance = cswmMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cswmMIBCompliance.setDescription('The compliance statement for the CISCO-SWITCH-MULTICAST-MIB. OBJECT cswmReplConfigAddrType SYNTAX InetAddressType { ipv4(1), ipv6(2) } DESCRIPTION An implementation is only required to support IPv4 and IPv6 addresses.')
cswmMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 504, 2, 1, 2)).setObjects(("CISCO-SWITCH-MULTICAST-MIB", "cswmGlobalGroup"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmConsistCheckGroup"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmReplicationGroup"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmMvrfStatsGroup"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmBiDirPimDfUsageGroup"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmLtlUsageGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswmMIBCompliance2 = cswmMIBCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: cswmMIBCompliance2.setDescription('The compliance statement for the CISCO-SWITCH-MULTICAST-MIB. OBJECT cswmReplConfigAddrType SYNTAX InetAddressType { ipv4(1), ipv6(2) } DESCRIPTION An implementation is only required to support IPv4 and IPv6 addresses.')
cswmMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 504, 2, 1, 3)).setObjects(("CISCO-SWITCH-MULTICAST-MIB", "cswmGlobalGroup"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmConsistCheckGroup"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmReplicationGroup"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmMvrfStatsGroup"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmBiDirPimDfUsageGroup"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmLtlUsageGroup"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmGlobalReplicationGroup"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmMvrfBiDirPimDfUsageGroup"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmForwardingGroup"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmFlowQueryResultGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswmMIBCompliance3 = cswmMIBCompliance3.setStatus('current')
if mibBuilder.loadTexts: cswmMIBCompliance3.setDescription('The compliance statement for the CISCO-SWITCH-MULTICAST-MIB. OBJECT cswmReplConfigAddrType SYNTAX InetAddressType { ipv4(1), ipv6(2) } DESCRIPTION An implementation is only required to support IPv4 and IPv6 addresses.')
cswmGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 504, 2, 2, 1)).setObjects(("CISCO-SWITCH-MULTICAST-MIB", "cswmMvpnHwSwitchingStatus"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmVrfLiteStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswmGlobalGroup = cswmGlobalGroup.setStatus('current')
if mibBuilder.loadTexts: cswmGlobalGroup.setDescription('A collection of objects providing global multicast information and configuration.')
cswmConsistCheckGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 504, 2, 2, 2)).setObjects(("CISCO-SWITCH-MULTICAST-MIB", "cswmMRouteConsistCheck"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmProcessorConsistCheck"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswmConsistCheckGroup = cswmConsistCheckGroup.setStatus('current')
if mibBuilder.loadTexts: cswmConsistCheckGroup.setDescription('A collection of objects providing multicast consitency check information and configuration.')
cswmReplicationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 504, 2, 2, 3)).setObjects(("CISCO-SWITCH-MULTICAST-MIB", "cswmReplCapability"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmReplConfigCurMode"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmReplConfigAutoDetect"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswmReplicationGroup = cswmReplicationGroup.setStatus('current')
if mibBuilder.loadTexts: cswmReplicationGroup.setDescription('A collection of objects providing multicast replication information and configuration.')
cswmMvrfStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 504, 2, 2, 4)).setObjects(("CISCO-SWITCH-MULTICAST-MIB", "cswmMvrfTotalFlows"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmMvrfPartialFlows"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmMvrfRpfMfdFlows"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswmMvrfStatsGroup = cswmMvrfStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cswmMvrfStatsGroup.setDescription('A collection of objects providing MVRF statistics.')
cswmBiDirPimDfUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 504, 2, 2, 5)).setObjects(("CISCO-SWITCH-MULTICAST-MIB", "cswmBiDirPimDfUsed"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmBiDirPimDfTotal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswmBiDirPimDfUsageGroup = cswmBiDirPimDfUsageGroup.setStatus('current')
if mibBuilder.loadTexts: cswmBiDirPimDfUsageGroup.setDescription('A collection of objects providing Bi-directional PIM Designated Forwarder database Usage information.')
cswmLtlUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 504, 2, 2, 6)).setObjects(("CISCO-SWITCH-MULTICAST-MIB", "cswmLtlUsed"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmLtlTotal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswmLtlUsageGroup = cswmLtlUsageGroup.setStatus('current')
if mibBuilder.loadTexts: cswmLtlUsageGroup.setDescription('A collection of objects providing Multicast LTL usage information.')
cswmGlobalReplicationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 504, 2, 2, 7)).setObjects(("CISCO-SWITCH-MULTICAST-MIB", "cswmGlobalReplcationMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswmGlobalReplicationGroup = cswmGlobalReplicationGroup.setStatus('current')
if mibBuilder.loadTexts: cswmGlobalReplicationGroup.setDescription('A collection of objects providing multicast global replication information and configuration.')
cswmMvrfBiDirPimDfUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 504, 2, 2, 8)).setObjects(("CISCO-SWITCH-MULTICAST-MIB", "cswmMvrfBiDirPimDfUsed"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmMvrfBiDirPimDfTotal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswmMvrfBiDirPimDfUsageGroup = cswmMvrfBiDirPimDfUsageGroup.setStatus('current')
if mibBuilder.loadTexts: cswmMvrfBiDirPimDfUsageGroup.setDescription('A collection of objects providing Bi-directional PIM Designated Forwarder database Usage information for each MVRF available on the device.')
cswmForwardingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 504, 2, 2, 9)).setObjects(("CISCO-SWITCH-MULTICAST-MIB", "cswmForwardingEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswmForwardingGroup = cswmForwardingGroup.setStatus('current')
if mibBuilder.loadTexts: cswmForwardingGroup.setDescription('A collection of objects providing multicast forwarding information and configuration.')
cswmFlowQueryResultGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 504, 2, 2, 10)).setObjects(("CISCO-SWITCH-MULTICAST-MIB", "cswmFlowMaxQueries"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmFlowQueryMask"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmFlowQueryAddrType"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmFlowQuerySource"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmFlowQueryGroup"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmFlowQueryGroupMask"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmFlowQueryType"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmFlowQueryMvrf"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmFlowQueryEntityIndex"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmFlowQuerySkipNFlows"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmFlowQueryTotalFlows"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmFlowMcastQueryRows"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmFlowMcastQueryMoreRows"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmFlowQueryOwner"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmFlowQueryCreateTime"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmFlowQueryStorage"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmFlowQueryStatus"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmFlowResultMvrf"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmFlowResultAddrType"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmFlowResultGroup"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmFlowResultGroupMask"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmFlowResultSource"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmFlowResultFlags"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmFlowResultPackets"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmFlowResultOctets"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmFlowResultRpfInterface"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmFlowResultOIFIntList"), ("CISCO-SWITCH-MULTICAST-MIB", "cswmFlowResultDFIntList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswmFlowQueryResultGroup = cswmFlowQueryResultGroup.setStatus('current')
if mibBuilder.loadTexts: cswmFlowQueryResultGroup.setDescription('A collection of objects for querying l3 multicast flows.')
mibBuilder.exportSymbols("CISCO-SWITCH-MULTICAST-MIB", cswmMvrfBiDirPimDfTotal=cswmMvrfBiDirPimDfTotal, cswmFlowQueryOwner=cswmFlowQueryOwner, cswmFlowResultIndex=cswmFlowResultIndex, cswmMIBConform=cswmMIBConform, cswmFlowResultDFTable=cswmFlowResultDFTable, cswmMvrfRpfMfdFlows=cswmMvrfRpfMfdFlows, cswmFlowResultGroup=cswmFlowResultGroup, cswmFlowQueryEntry=cswmFlowQueryEntry, cswmFlowResultOIFIndex=cswmFlowResultOIFIndex, cswmMRouteConsistCheck=cswmMRouteConsistCheck, cswmFlowMcastQueryMoreRows=cswmFlowMcastQueryMoreRows, cswmMIBCompliance2=cswmMIBCompliance2, cswmFlowQueryMask=cswmFlowQueryMask, cswmFlowResultSource=cswmFlowResultSource, cswmMvrfStatsGroup=cswmMvrfStatsGroup, cswmReplCapabilityEntry=cswmReplCapabilityEntry, cswmInterfaceIndex=cswmInterfaceIndex, cswmLtlStats=cswmLtlStats, cswmFlowResultOIFTable=cswmFlowResultOIFTable, cswmForwardingAddrType=cswmForwardingAddrType, cswmFlowResultDFEntry=cswmFlowResultDFEntry, cswmMvrfBiDirPimDfUsageEntry=cswmMvrfBiDirPimDfUsageEntry, cswmFlowMcastQueryRows=cswmFlowMcastQueryRows, cswmFlowResultPackets=cswmFlowResultPackets, cswmFlowQueryEntityIndex=cswmFlowQueryEntityIndex, cswmFlowQueryAddrType=cswmFlowQueryAddrType, cswmFlowResultFlags=cswmFlowResultFlags, cswmMIBCompliance=cswmMIBCompliance, cswmMvpnHwSwitchingStatus=cswmMvpnHwSwitchingStatus, cswmFlowMaxQueries=cswmFlowMaxQueries, cswmReplConfigCurMode=cswmReplConfigCurMode, cswmFlowQueryGroupMask=cswmFlowQueryGroupMask, cswmFlowResultOctets=cswmFlowResultOctets, cswmReplication=cswmReplication, ciscoSwitchMulticastMIB=ciscoSwitchMulticastMIB, cswmMIBCompliances=cswmMIBCompliances, cswmMvrfPartialFlows=cswmMvrfPartialFlows, cswmMvrfBiDirPimDfUsageGroup=cswmMvrfBiDirPimDfUsageGroup, cswmMvrfStatsTable=cswmMvrfStatsTable, cswmMvrfStatsEntry=cswmMvrfStatsEntry, cswmReplCapabilityTable=cswmReplCapabilityTable, cswmMvrfBiDirPimDfUsageTable=cswmMvrfBiDirPimDfUsageTable, cswmReplCapability=cswmReplCapability, cswmConsistCheckGroup=cswmConsistCheckGroup, cswmFlowQueryStorage=cswmFlowQueryStorage, cswmReplConfigEntry=cswmReplConfigEntry, cswmFlowQuerySource=cswmFlowQuerySource, cswmReplConfigAddrType=cswmReplConfigAddrType, cswmFlowQueryCreateTime=cswmFlowQueryCreateTime, cswmBiDirPimDfStats=cswmBiDirPimDfStats, cswmFlowResultMvrf=cswmFlowResultMvrf, cswmFlowQueryGroup=cswmFlowQueryGroup, cswmFlowResultOIFIntList=cswmFlowResultOIFIntList, cswmFlowQueryIndex=cswmFlowQueryIndex, cswmFlowResultEntry=cswmFlowResultEntry, cswmMvrfBiDirPimDfAddrType=cswmMvrfBiDirPimDfAddrType, cswmGlobal=cswmGlobal, PYSNMP_MODULE_ID=ciscoSwitchMulticastMIB, cswmFlowResultGroupMask=cswmFlowResultGroupMask, cswmFlowQueryMvrf=cswmFlowQueryMvrf, cswmLtlUsed=cswmLtlUsed, cswmGlobalGroup=cswmGlobalGroup, cswmProcessorConsistCheck=cswmProcessorConsistCheck, cswmFlowResultDFIndex=cswmFlowResultDFIndex, cswmFlowQueryStatus=cswmFlowQueryStatus, cswmFlowQuerySkipNFlows=cswmFlowQuerySkipNFlows, cswmForwardingGroup=cswmForwardingGroup, cswmGlobalReplicationGroup=cswmGlobalReplicationGroup, cswmFlowQueryTotalFlows=cswmFlowQueryTotalFlows, cswmFlowResultTable=cswmFlowResultTable, cswmFlowResultOIFEntry=cswmFlowResultOIFEntry, cswmMvrfStats=cswmMvrfStats, cswmVrfLiteStatus=cswmVrfLiteStatus, cswmMvrfBiDirPimDfUsed=cswmMvrfBiDirPimDfUsed, cswmForwardingTable=cswmForwardingTable, cswmFlowResultAddrType=cswmFlowResultAddrType, cswmForwarding=cswmForwarding, cswmBiDirPimDfUsed=cswmBiDirPimDfUsed, cswmFlowQueryType=cswmFlowQueryType, cswmFlowQueryResultGroup=cswmFlowQueryResultGroup, cswmReplicationGroup=cswmReplicationGroup, cswmFlowResultDFIntList=cswmFlowResultDFIntList, cswmFlowResultRpfInterface=cswmFlowResultRpfInterface, cswmReplConfigAutoDetect=cswmReplConfigAutoDetect, cswmMvrfName=cswmMvrfName, cswmLtlTotal=cswmLtlTotal, cswmForwardingEntry=cswmForwardingEntry, cswmBiDirPimDfTotal=cswmBiDirPimDfTotal, cswmForwardingEnabled=cswmForwardingEnabled, cswmMIBObjects=cswmMIBObjects, cswmGlobalReplcationMode=cswmGlobalReplcationMode, cswmMIBGroups=cswmMIBGroups, cswmReplConfigTable=cswmReplConfigTable, cswmMvrfTotalFlows=cswmMvrfTotalFlows, cswmMIBNotifs=cswmMIBNotifs, cswmLtlUsageGroup=cswmLtlUsageGroup, cswmFlowQueryTable=cswmFlowQueryTable, cswmBiDirPimDfUsageGroup=cswmBiDirPimDfUsageGroup, cswmFlowQueryResult=cswmFlowQueryResult, cswmMIBCompliance3=cswmMIBCompliance3)
