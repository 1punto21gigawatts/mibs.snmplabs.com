#
# PySNMP MIB module RBTWS-CLIENT-SESSION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RBTWS-CLIENT-SESSION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:53:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
RbtwsRssi, RbtwsRadioNum, RbtwsAccessType, RbtwsRadioRate, RbtwsApNum, RbtwsApSerialNum = mibBuilder.importSymbols("RBTWS-AP-TC", "RbtwsRssi", "RbtwsRadioNum", "RbtwsAccessType", "RbtwsRadioRate", "RbtwsApNum", "RbtwsApSerialNum")
RbtwsClientSessionState, RbtwsUserAccessType, RbtwsClientAccessMode, RbtwsClientAuthenProtocolType = mibBuilder.importSymbols("RBTWS-CLIENT-SESSION-TC", "RbtwsClientSessionState", "RbtwsUserAccessType", "RbtwsClientAccessMode", "RbtwsClientAuthenProtocolType")
rbtwsMibs, = mibBuilder.importSymbols("RBTWS-ROOT-MIB", "rbtwsMibs")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ObjectIdentity, Gauge32, Counter32, MibIdentifier, TimeTicks, Counter64, Unsigned32, iso, Integer32, Bits, ModuleIdentity, NotificationType, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Gauge32", "Counter32", "MibIdentifier", "TimeTicks", "Counter64", "Unsigned32", "iso", "Integer32", "Bits", "ModuleIdentity", "NotificationType", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TimeStamp, DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "DisplayString", "MacAddress", "TextualConvention")
rbtwsClientSessionMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4))
rbtwsClientSessionMib.setRevisions(('2008-05-23 00:55', '2007-11-01 00:54', '2007-10-09 00:51', '2006-11-16 00:43', '2006-10-17 00:42', '2006-09-26 00:32', '2006-07-29 00:21', '2006-06-06 00:10', '2006-03-30 00:08',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rbtwsClientSessionMib.setRevisionsDescriptions(('v2.4.0: Updated conformance section to reflect the history of changes to this MIB: added more compliance statements and groups. This will be published in 7.0 release.', 'v2.3.4: Added two new columnar objects: - rbtwsClSessClientSessPhysPortNum, - rbtwsClSessRoamHistPhysPortNum, to indicate the port used by wired-auth clients. (for 6.2 release)', 'v2.3.1: Added four new columnar objects: - rbtwsClSessClientSessAccessMode, obsoleting rbtwsClSessClientSessAccessType; - rbtwsClSessClientSessApNum, obsoleting rbtwsClSessClientSessPortOrNum; - rbtwsClSessRoamHistAccessMode, obsoleting rbtwsClSessRoamHistAccessType; - rbtwsClSessRoamHistApNum, obsoleting rbtwsClSessRoamHistApNumOrPort. Reason: in 6.0, direct- and network-attached APs were unified. (for 6.2 release)', 'v2.2.1: added one value (21) to RbtwsSessState', 'v2.2.0: Described semantics of rbtwsClSessRoamHistTimeStamp', 'v2.1.1: Added three new columnar objects: - rbtwsClSessClientSessDot1xAuthMethod, to be used instead of rbtwsClSessClientSessAuthMethod; - rbtwsClSessClientSessSessionState, to be used instead of rbtwsClSessClientSessState; - rbtwsClSessClientSessLoginType, to provide context for interpreting the values of the above objects (Dot1xAuthMethod, SessionState). Changed behaviour for rbtwsClSessClientSessAuthServer: provides system IP when auth is done via local DB (it used to be 0.0.0.0 in such cases).', 'v2.0.2: Fixed imports and compliance group', 'v2.0.1: Adding scalar for total number of sessions.', 'v1.0: Initial version, for 4.1 release',))
if mibBuilder.loadTexts: rbtwsClientSessionMib.setLastUpdated('200805231604Z')
if mibBuilder.loadTexts: rbtwsClientSessionMib.setOrganization('Enterasys Networks')
if mibBuilder.loadTexts: rbtwsClientSessionMib.setContactInfo('www.enterasys.com')
if mibBuilder.loadTexts: rbtwsClientSessionMib.setDescription("Client Session MIB. AP = Access Point; AC = Access Controller (wireless switch), the device that runs a SNMP Agent implementing this MIB. Copyright 2008 Enterasys Networks, Inc. All rights reserved. This SNMP Management Information Base Specification (Specification) embodies confidential and proprietary intellectual property. This Specification is supplied 'AS IS' and Enterasys Networks makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
class RbtwsEncryptionType(TextualConvention, Integer32):
    description = 'Encryption types.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("none", 1), ("aesCcm", 2), ("aesOcb", 3), ("tkip", 4), ("wep104", 5), ("wep40", 6), ("staticWep", 7))

class RbtwsAuthMethod(TextualConvention, Integer32):
    description = 'Authentication methods.'
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 14, 18, 22, 26, 27, 34, 255))
    namedValues = NamedValues(("none", 1), ("identity", 2), ("notification", 3), ("nak", 4), ("md5", 5), ("otp", 6), ("tokenCard", 7), ("tls", 14), ("leap", 18), ("ttls", 22), ("peap", 26), ("msChapv2", 27), ("eapExt", 34), ("passThru", 255))

class RbtwsSessState(TextualConvention, Integer32):
    description = 'Session states.'
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))
    namedValues = NamedValues(("invalid", 1), ("initializing", 2), ("assocReqAndAuth", 3), ("assocAndAuth", 4), ("wired", 5), ("webLoginPh1", 6), ("webLoginPh1B", 7), ("webLoginPh1F", 8), ("webLoginPh2", 9), ("webPortalLogin", 10), ("authorizing", 11), ("authorized", 12), ("active", 13), ("activePortal", 14), ("deassociated", 15), ("roamingAway", 16), ("updatedToRoam", 17), ("roamedAway", 18), ("killing", 19), ("free", 20), ("enforceSoda", 21))

rbtwsClientSessionObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1))
rbtwsClientSessionDataObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1))
rbtwsClSessClientSessionTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 1), )
if mibBuilder.loadTexts: rbtwsClSessClientSessionTable.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessClientSessionTable.setDescription('Client Session Table.')
rbtwsClSessClientSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 1, 1), ).setIndexNames((0, "RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessMacAddress"))
if mibBuilder.loadTexts: rbtwsClSessClientSessionEntry.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessClientSessionEntry.setDescription('Information about a particular client session.')
rbtwsClSessClientSessMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: rbtwsClSessClientSessMacAddress.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessClientSessMacAddress.setDescription('Client MAC address.')
rbtwsClSessClientSessSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessClientSessSessionId.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessClientSessSessionId.setDescription('Session ID is a string long enough to be sure we can make it unique over a long time.')
rbtwsClSessClientSessUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessClientSessUsername.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessClientSessUsername.setDescription('Client user name.')
rbtwsClSessClientSessIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessClientSessIpAddress.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessClientSessIpAddress.setDescription('Client IP address. If the client has no IP address, the value will be 0.0.0.0.')
rbtwsClSessClientSessEncryptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 1, 1, 5), RbtwsEncryptionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessClientSessEncryptionType.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessClientSessEncryptionType.setDescription('Encryption type.')
rbtwsClSessClientSessVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessClientSessVlan.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessClientSessVlan.setDescription('The name of the client VLAN.')
rbtwsClSessClientSessApSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 1, 1, 7), RbtwsApSerialNum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessClientSessApSerialNum.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessClientSessApSerialNum.setDescription('Serial Number of the AP this client is connected to. It is a zero length string when wired access is used.')
rbtwsClSessClientSessRadioNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 1, 1, 8), RbtwsRadioNum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessClientSessRadioNum.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessClientSessRadioNum.setDescription("Number of the Radio that provides service to this client. It is 'not-applicable' when wired access is used.")
rbtwsClSessClientSessAccessType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 1, 1, 9), RbtwsAccessType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessClientSessAccessType.setStatus('obsolete')
if mibBuilder.loadTexts: rbtwsClSessClientSessAccessType.setDescription('Access type this client uses (via AP, DAP or wired). Obsoleted by rbtwsClSessClientSessAccessMode.')
rbtwsClSessClientSessAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 1, 1, 10), RbtwsAuthMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessClientSessAuthMethod.setStatus('deprecated')
if mibBuilder.loadTexts: rbtwsClSessClientSessAuthMethod.setDescription('Authentication Method. Deprecated, use rbtwsClSessClientSessDot1xAuthMethod instead.')
rbtwsClSessClientSessAuthServer = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 1, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessClientSessAuthServer.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessClientSessAuthServer.setDescription("Authentication Server's IP Address. If the client is authenticated via the local DB, or not authenticated, its value will be the system IP.")
rbtwsClSessClientSessPortOrNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessClientSessPortOrNum.setStatus('obsolete')
if mibBuilder.loadTexts: rbtwsClSessClientSessPortOrNum.setDescription('Port number. Obsoleted by rbtwsClSessClientSessApNum.')
rbtwsClSessClientSessVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessClientSessVlanTag.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessClientSessVlanTag.setDescription('VLAN tag.')
rbtwsClSessClientSessTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 1, 1, 14), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessClientSessTimeStamp.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessClientSessTimeStamp.setDescription('Session start time stamp.')
rbtwsClSessClientSessSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 33))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessClientSessSsid.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessClientSessSsid.setDescription('SSID.')
rbtwsClSessClientSessState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 1, 1, 16), RbtwsSessState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessClientSessState.setStatus('deprecated')
if mibBuilder.loadTexts: rbtwsClSessClientSessState.setDescription('Session state. Deprecated, use rbtwsClSessClientSessSessionState instead.')
rbtwsClSessClientSessLoginType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 1, 1, 17), RbtwsUserAccessType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessClientSessLoginType.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessClientSessLoginType.setDescription('Login type (mac, web, dot1x or last-resort).')
rbtwsClSessClientSessDot1xAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 1, 1, 18), RbtwsClientAuthenProtocolType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessClientSessDot1xAuthMethod.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessClientSessDot1xAuthMethod.setDescription('Dot1x Authentication Method.')
rbtwsClSessClientSessSessionState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 1, 1, 19), RbtwsClientSessionState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessClientSessSessionState.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessClientSessSessionState.setDescription('Session non-intermediate state.')
rbtwsClSessClientSessAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 1, 1, 20), RbtwsClientAccessMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessClientSessAccessMode.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessClientSessAccessMode.setDescription('Access mode (type) this client uses (via AP or wired). Obsoletes rbtwsClSessClientSessAccessType since in 6.0 directly attached APs and DAPs were unified.')
rbtwsClSessClientSessApNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 1, 1, 21), RbtwsApNum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessClientSessApNum.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessClientSessApNum.setDescription("The AP providing wireless service to this client is identified by its administratively assigned AP Number, unique on same AC (switch), regardless of how APs are attached to the AC. Meaningful when rbtwsClSessClientSessAccessMode = 'ap'. Obsoletes rbtwsClSessClientSessPortOrNum since in 6.0 directly attached APs and DAPs were unified.")
rbtwsClSessClientSessPhysPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessClientSessPhysPortNum.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessClientSessPhysPortNum.setDescription("The physical port used by this wired-auth client is identified by its port number on the AC (switch). Zero means the port is unknown or not applicable (for example, when rbtwsClSessClientSessAccessMode = 'ap'). Meaningful when rbtwsClSessClientSessAccessMode = 'wired'.")
rbtwsClSessRoamingHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 2), )
if mibBuilder.loadTexts: rbtwsClSessRoamingHistoryTable.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessRoamingHistoryTable.setDescription('Roaming History Table. Expansion of Client Session Table.')
rbtwsClSessRoamingHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 2, 1), ).setIndexNames((0, "RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessRoamHistMacAddress"), (0, "RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessRoamHistIndex"))
if mibBuilder.loadTexts: rbtwsClSessRoamingHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessRoamingHistoryEntry.setDescription('Roaming History Entry.')
rbtwsClSessRoamHistMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: rbtwsClSessRoamHistMacAddress.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessRoamHistMacAddress.setDescription('Client MAC address.')
rbtwsClSessRoamHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: rbtwsClSessRoamHistIndex.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessRoamHistIndex.setDescription('Entry index.')
rbtwsClSessRoamHistApSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 2, 1, 3), RbtwsApSerialNum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessRoamHistApSerialNum.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessRoamHistApSerialNum.setDescription('Serial Number of the AP this client was connected to.')
rbtwsClSessRoamHistRadioNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 2, 1, 4), RbtwsRadioNum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessRoamHistRadioNum.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessRoamHistRadioNum.setDescription('Number of the Radio that provided service to this client.')
rbtwsClSessRoamHistAccessType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 2, 1, 5), RbtwsAccessType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessRoamHistAccessType.setStatus('obsolete')
if mibBuilder.loadTexts: rbtwsClSessRoamHistAccessType.setDescription('Access type used by this client (via AP, DAP or wired). Obsoleted by rbtwsClSessRoamHistAccessMode.')
rbtwsClSessRoamHistApNumOrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessRoamHistApNumOrPort.setStatus('obsolete')
if mibBuilder.loadTexts: rbtwsClSessRoamHistApNumOrPort.setDescription('AP port number, DAP number, or Port number for wired access. Obsoleted by rbtwsClSessRoamHistApNum.')
rbtwsClSessRoamHistIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 2, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessRoamHistIpAddress.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessRoamHistIpAddress.setDescription('IP address of the AC (wireless switch) the client or AP was connected to.')
rbtwsClSessRoamHistTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 2, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessRoamHistTimeStamp.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessRoamHistTimeStamp.setDescription('The difference between the time the session was created on the roamed-to switch and the time the last switch, the one where the user is at currently, started. The timestamp unit is in hundredths of seconds.')
rbtwsClSessRoamHistAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 2, 1, 9), RbtwsClientAccessMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessRoamHistAccessMode.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessRoamHistAccessMode.setDescription('Access mode (type) used by this client (via AP or wired). Obsoletes rbtwsClSessRoamHistAccessType since in 6.0 directly attached APs and DAPs were unified.')
rbtwsClSessRoamHistApNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 2, 1, 10), RbtwsApNum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessRoamHistApNum.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessRoamHistApNum.setDescription('The administratively assigned AP Number, unique on same AC (switch), regardless of how APs are attached to the AC. Obsoletes rbtwsClSessRoamHistApNumOrPort since in 6.0 directly attached APs and DAPs were unified.')
rbtwsClSessRoamHistPhysPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessRoamHistPhysPortNum.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessRoamHistPhysPortNum.setDescription("The physical port used by this wired-auth client is identified by its port number on the AC (switch). Zero means the port is unknown or not applicable (for example, when rbtwsClSessRoamHistAccessMode = 'ap'). Meaningful when rbtwsClSessRoamHistAccessMode = 'wired'.")
rbtwsClSessClientSessionStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 3), )
if mibBuilder.loadTexts: rbtwsClSessClientSessionStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessClientSessionStatisticsTable.setDescription('Client Session Statistics Table.')
rbtwsClSessClientSessionStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 3, 1), ).setIndexNames((0, "RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessStatsMacAddress"))
if mibBuilder.loadTexts: rbtwsClSessClientSessionStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessClientSessionStatisticsEntry.setDescription('Client Session Statistics Table Entry.')
rbtwsClSessClientSessStatsMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: rbtwsClSessClientSessStatsMacAddress.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessClientSessStatsMacAddress.setDescription('Client MAC address.')
rbtwsClSessClientSessStatsUniPktIn = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessClientSessStatsUniPktIn.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessClientSessStatsUniPktIn.setDescription('Unicast packets in.')
rbtwsClSessClientSessStatsUniOctetIn = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessClientSessStatsUniOctetIn.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessClientSessStatsUniOctetIn.setDescription('Unicast octets in.')
rbtwsClSessClientSessStatsUniPktOut = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessClientSessStatsUniPktOut.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessClientSessStatsUniPktOut.setDescription('Unicast packets out.')
rbtwsClSessClientSessStatsUniOctetOut = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessClientSessStatsUniOctetOut.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessClientSessStatsUniOctetOut.setDescription('Unicast octets out.')
rbtwsClSessClientSessStatsMultiPktIn = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessClientSessStatsMultiPktIn.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessClientSessStatsMultiPktIn.setDescription('Multicast packets in.')
rbtwsClSessClientSessStatsMultiOctetIn = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessClientSessStatsMultiOctetIn.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessClientSessStatsMultiOctetIn.setDescription('Multicast octets in.')
rbtwsClSessClientSessStatsEncErrPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessClientSessStatsEncErrPkt.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessClientSessStatsEncErrPkt.setDescription('Number of packets with encryption errors.')
rbtwsClSessClientSessStatsEncErrOctet = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessClientSessStatsEncErrOctet.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessClientSessStatsEncErrOctet.setDescription('Number of octets with encryption errors.')
rbtwsClSessClientSessStatsLastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 3, 1, 10), RbtwsRadioRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessClientSessStatsLastRate.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessClientSessStatsLastRate.setDescription('Last packet data rate.')
rbtwsClSessClientSessStatsLastRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 3, 1, 11), RbtwsRssi()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessClientSessStatsLastRssi.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessClientSessStatsLastRssi.setDescription('RSSI (Received Signal Strength Indicator) for last packet, in decibels referred to 1 milliwatt (dBm). A higher value indicates a stronger signal.')
rbtwsClSessClientSessStatsLastSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessClientSessStatsLastSNR.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessClientSessStatsLastSNR.setDescription('Last packet data Signal to Noise Ratio.')
rbtwsClSessTotalSessions = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsClSessTotalSessions.setStatus('current')
if mibBuilder.loadTexts: rbtwsClSessTotalSessions.setDescription('Total number of sessions.')
rbtwsClientSessionConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 2))
rbtwsClientSessionCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 2, 1))
rbtwsClientSessionGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 2, 2))
rbtwsClientSessionCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 2, 1, 1)).setObjects(("RBTWS-CLIENT-SESSION-MIB", "rbtwsClientSessionCommonGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbtwsClientSessionCompliance = rbtwsClientSessionCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: rbtwsClientSessionCompliance.setDescription('The compliance statement for devices that implement the Client Session MIB. This compliance statement was for releases 4.1 and 4.2 of AC (wireless switch) software. This compliance statement is replaced by rbtwsClientSessionComplianceRev2.')
rbtwsClientSessionComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 2, 1, 2)).setObjects(("RBTWS-CLIENT-SESSION-MIB", "rbtwsClientSessScalarsGroup"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClientSessClientSessionTableGroup"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClientSessRoamingHistoryTableGroup"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClientSessClientSessionStatisticsTableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbtwsClientSessionComplianceRev2 = rbtwsClientSessionComplianceRev2.setStatus('obsolete')
if mibBuilder.loadTexts: rbtwsClientSessionComplianceRev2.setDescription('The compliance statement for devices that implement the Client Session MIB. This compliance statement was for releases 5.0 and 6.0 of AC (wireless switch) software. This compliance statement is replaced by rbtwsClientSessionComplianceRev3.')
rbtwsClientSessionComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 2, 1, 3)).setObjects(("RBTWS-CLIENT-SESSION-MIB", "rbtwsClientSessScalarsGroup"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClientSessClientSessionTableGroupRev2"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClientSessRoamingHistoryTableGroupRev2"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClientSessClientSessionStatisticsTableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbtwsClientSessionComplianceRev3 = rbtwsClientSessionComplianceRev3.setStatus('current')
if mibBuilder.loadTexts: rbtwsClientSessionComplianceRev3.setDescription('The compliance statement for devices that implement the Client Session MIB. This compliance statement is for releases 6.2 and greater of AC (wireless switch) software.')
rbtwsClientSessionCommonGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 2, 2, 1)).setObjects(("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessSessionId"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessUsername"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessIpAddress"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessEncryptionType"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessVlan"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessApSerialNum"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessRadioNum"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessAccessType"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessAuthMethod"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessAuthServer"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessPortOrNum"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessVlanTag"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessTimeStamp"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessSsid"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessState"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessRoamHistApSerialNum"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessRoamHistRadioNum"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessRoamHistAccessType"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessRoamHistApNumOrPort"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessRoamHistIpAddress"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessRoamHistTimeStamp"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessStatsUniPktIn"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessStatsUniOctetIn"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessStatsUniPktOut"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessStatsUniOctetOut"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessStatsMultiPktIn"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessStatsMultiOctetIn"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessStatsEncErrPkt"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessStatsEncErrOctet"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessStatsLastRate"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessStatsLastRssi"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessStatsLastSNR"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbtwsClientSessionCommonGroup = rbtwsClientSessionCommonGroup.setStatus('obsolete')
if mibBuilder.loadTexts: rbtwsClientSessionCommonGroup.setDescription('Mandatory group of objects implemented to provide Client Session info in releases 4.1 and 4.2 of AC (wireless switch) software. Replaced by rbtwsClientSessClientSessionTableGroup, rbtwsClientSessRoamingHistoryTableGroup, rbtwsClientSessClientSessionStatisticsTableGroup.')
rbtwsClientSessScalarsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 2, 2, 2)).setObjects(("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessTotalSessions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbtwsClientSessScalarsGroup = rbtwsClientSessScalarsGroup.setStatus('current')
if mibBuilder.loadTexts: rbtwsClientSessScalarsGroup.setDescription('Group of scalar objects implemented to provide general Client info in releases 5.0 and greater.')
rbtwsClientSessClientSessionTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 2, 2, 3)).setObjects(("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessSessionId"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessUsername"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessIpAddress"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessEncryptionType"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessVlan"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessApSerialNum"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessRadioNum"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessAccessType"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessAuthServer"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessPortOrNum"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessVlanTag"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessTimeStamp"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessSsid"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessLoginType"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessDot1xAuthMethod"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessSessionState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbtwsClientSessClientSessionTableGroup = rbtwsClientSessClientSessionTableGroup.setStatus('obsolete')
if mibBuilder.loadTexts: rbtwsClientSessClientSessionTableGroup.setDescription('Group of columnar objects implemented to provide Client Session info in releases 5.0 and 6.0. Replaced by rbtwsClientSessClientSessionTableGroupRev2.')
rbtwsClientSessRoamingHistoryTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 2, 2, 4)).setObjects(("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessRoamHistApSerialNum"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessRoamHistRadioNum"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessRoamHistAccessType"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessRoamHistApNumOrPort"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessRoamHistIpAddress"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessRoamHistTimeStamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbtwsClientSessRoamingHistoryTableGroup = rbtwsClientSessRoamingHistoryTableGroup.setStatus('obsolete')
if mibBuilder.loadTexts: rbtwsClientSessRoamingHistoryTableGroup.setDescription('Group of columnar objects implemented to provide roaming history per Client Session in releases 5.0 and 6.0. Replaced by rbtwsClientSessRoamingHistoryTableGroupRev2.')
rbtwsClientSessClientSessionStatisticsTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 2, 2, 5)).setObjects(("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessStatsUniPktIn"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessStatsUniOctetIn"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessStatsUniPktOut"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessStatsUniOctetOut"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessStatsMultiPktIn"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessStatsMultiOctetIn"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessStatsEncErrPkt"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessStatsEncErrOctet"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessStatsLastRate"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessStatsLastRssi"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessStatsLastSNR"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbtwsClientSessClientSessionStatisticsTableGroup = rbtwsClientSessClientSessionStatisticsTableGroup.setStatus('current')
if mibBuilder.loadTexts: rbtwsClientSessClientSessionStatisticsTableGroup.setDescription('Group of columnar objects implemented to provide statistics per Client Session in releases 5.0 and greater.')
rbtwsClientSessClientSessionTableGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 2, 2, 6)).setObjects(("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessSessionId"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessUsername"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessIpAddress"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessEncryptionType"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessVlan"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessApSerialNum"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessRadioNum"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessAuthServer"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessVlanTag"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessTimeStamp"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessSsid"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessLoginType"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessDot1xAuthMethod"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessSessionState"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessAccessMode"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessApNum"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessClientSessPhysPortNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbtwsClientSessClientSessionTableGroupRev2 = rbtwsClientSessClientSessionTableGroupRev2.setStatus('current')
if mibBuilder.loadTexts: rbtwsClientSessClientSessionTableGroupRev2.setDescription('Group of columnar objects implemented to provide Client Session info in releases 6.2 and greater.')
rbtwsClientSessRoamingHistoryTableGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 4, 1, 2, 2, 7)).setObjects(("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessRoamHistApSerialNum"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessRoamHistRadioNum"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessRoamHistIpAddress"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessRoamHistTimeStamp"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessRoamHistAccessMode"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessRoamHistApNum"), ("RBTWS-CLIENT-SESSION-MIB", "rbtwsClSessRoamHistPhysPortNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbtwsClientSessRoamingHistoryTableGroupRev2 = rbtwsClientSessRoamingHistoryTableGroupRev2.setStatus('current')
if mibBuilder.loadTexts: rbtwsClientSessRoamingHistoryTableGroupRev2.setDescription('Group of columnar objects implemented to provide roaming history per Client Session in releases 6.2 and greater.')
mibBuilder.exportSymbols("RBTWS-CLIENT-SESSION-MIB", rbtwsClSessClientSessionEntry=rbtwsClSessClientSessionEntry, rbtwsClSessRoamHistIpAddress=rbtwsClSessRoamHistIpAddress, RbtwsEncryptionType=RbtwsEncryptionType, rbtwsClSessClientSessVlan=rbtwsClSessClientSessVlan, rbtwsClSessClientSessRadioNum=rbtwsClSessClientSessRadioNum, rbtwsClSessClientSessStatsEncErrPkt=rbtwsClSessClientSessStatsEncErrPkt, rbtwsClientSessClientSessionStatisticsTableGroup=rbtwsClientSessClientSessionStatisticsTableGroup, rbtwsClSessRoamingHistoryTable=rbtwsClSessRoamingHistoryTable, rbtwsClSessClientSessStatsLastRssi=rbtwsClSessClientSessStatsLastRssi, rbtwsClSessClientSessStatsMultiOctetIn=rbtwsClSessClientSessStatsMultiOctetIn, rbtwsClientSessClientSessionTableGroup=rbtwsClientSessClientSessionTableGroup, rbtwsClSessRoamHistAccessType=rbtwsClSessRoamHistAccessType, rbtwsClSessClientSessStatsUniOctetIn=rbtwsClSessClientSessStatsUniOctetIn, rbtwsClSessClientSessStatsUniPktIn=rbtwsClSessClientSessStatsUniPktIn, rbtwsClSessRoamHistMacAddress=rbtwsClSessRoamHistMacAddress, rbtwsClientSessionDataObjects=rbtwsClientSessionDataObjects, rbtwsClientSessionCompliance=rbtwsClientSessionCompliance, RbtwsAuthMethod=RbtwsAuthMethod, rbtwsClientSessionCompliances=rbtwsClientSessionCompliances, rbtwsClientSessClientSessionTableGroupRev2=rbtwsClientSessClientSessionTableGroupRev2, rbtwsClSessClientSessLoginType=rbtwsClSessClientSessLoginType, rbtwsClSessClientSessAuthMethod=rbtwsClSessClientSessAuthMethod, rbtwsClSessRoamHistApSerialNum=rbtwsClSessRoamHistApSerialNum, rbtwsClSessClientSessMacAddress=rbtwsClSessClientSessMacAddress, rbtwsClSessClientSessStatsUniPktOut=rbtwsClSessClientSessStatsUniPktOut, rbtwsClSessClientSessionTable=rbtwsClSessClientSessionTable, rbtwsClSessClientSessAccessType=rbtwsClSessClientSessAccessType, rbtwsClientSessionMib=rbtwsClientSessionMib, rbtwsClSessClientSessStatsEncErrOctet=rbtwsClSessClientSessStatsEncErrOctet, RbtwsSessState=RbtwsSessState, rbtwsClSessClientSessStatsUniOctetOut=rbtwsClSessClientSessStatsUniOctetOut, rbtwsClSessClientSessStatsMultiPktIn=rbtwsClSessClientSessStatsMultiPktIn, rbtwsClSessClientSessTimeStamp=rbtwsClSessClientSessTimeStamp, rbtwsClSessRoamHistRadioNum=rbtwsClSessRoamHistRadioNum, rbtwsClSessRoamHistTimeStamp=rbtwsClSessRoamHistTimeStamp, rbtwsClientSessionComplianceRev3=rbtwsClientSessionComplianceRev3, rbtwsClientSessRoamingHistoryTableGroup=rbtwsClientSessRoamingHistoryTableGroup, rbtwsClientSessRoamingHistoryTableGroupRev2=rbtwsClientSessRoamingHistoryTableGroupRev2, rbtwsClSessClientSessStatsMacAddress=rbtwsClSessClientSessStatsMacAddress, rbtwsClSessRoamHistApNum=rbtwsClSessRoamHistApNum, rbtwsClSessClientSessVlanTag=rbtwsClSessClientSessVlanTag, rbtwsClSessClientSessIpAddress=rbtwsClSessClientSessIpAddress, rbtwsClientSessionGroups=rbtwsClientSessionGroups, rbtwsClSessRoamingHistoryEntry=rbtwsClSessRoamingHistoryEntry, rbtwsClSessClientSessPhysPortNum=rbtwsClSessClientSessPhysPortNum, rbtwsClSessRoamHistAccessMode=rbtwsClSessRoamHistAccessMode, rbtwsClSessClientSessionStatisticsTable=rbtwsClSessClientSessionStatisticsTable, rbtwsClSessClientSessAuthServer=rbtwsClSessClientSessAuthServer, rbtwsClSessClientSessSessionState=rbtwsClSessClientSessSessionState, rbtwsClientSessionObjects=rbtwsClientSessionObjects, rbtwsClientSessionConformance=rbtwsClientSessionConformance, PYSNMP_MODULE_ID=rbtwsClientSessionMib, rbtwsClSessClientSessApNum=rbtwsClSessClientSessApNum, rbtwsClSessClientSessState=rbtwsClSessClientSessState, rbtwsClSessClientSessAccessMode=rbtwsClSessClientSessAccessMode, rbtwsClSessClientSessApSerialNum=rbtwsClSessClientSessApSerialNum, rbtwsClSessClientSessPortOrNum=rbtwsClSessClientSessPortOrNum, rbtwsClSessClientSessStatsLastSNR=rbtwsClSessClientSessStatsLastSNR, rbtwsClientSessScalarsGroup=rbtwsClientSessScalarsGroup, rbtwsClientSessionComplianceRev2=rbtwsClientSessionComplianceRev2, rbtwsClSessClientSessStatsLastRate=rbtwsClSessClientSessStatsLastRate, rbtwsClSessTotalSessions=rbtwsClSessTotalSessions, rbtwsClientSessionCommonGroup=rbtwsClientSessionCommonGroup, rbtwsClSessClientSessDot1xAuthMethod=rbtwsClSessClientSessDot1xAuthMethod, rbtwsClSessRoamHistIndex=rbtwsClSessRoamHistIndex, rbtwsClSessClientSessSessionId=rbtwsClSessClientSessSessionId, rbtwsClSessRoamHistApNumOrPort=rbtwsClSessRoamHistApNumOrPort, rbtwsClSessClientSessionStatisticsEntry=rbtwsClSessClientSessionStatisticsEntry, rbtwsClSessClientSessSsid=rbtwsClSessClientSessSsid, rbtwsClSessClientSessEncryptionType=rbtwsClSessClientSessEncryptionType, rbtwsClSessClientSessUsername=rbtwsClSessClientSessUsername, rbtwsClSessRoamHistPhysPortNum=rbtwsClSessRoamHistPhysPortNum)
