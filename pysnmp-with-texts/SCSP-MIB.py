#
# PySNMP MIB module SCSP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SCSP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:01:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
IpAddress, Counter32, Counter64, Unsigned32, MibIdentifier, iso, NotificationType, experimental, TimeTicks, Gauge32, Integer32, ObjectIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter32", "Counter64", "Unsigned32", "MibIdentifier", "iso", "NotificationType", "experimental", "TimeTicks", "Gauge32", "Integer32", "ObjectIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
scspMIB = ModuleIdentity((1, 3, 6, 1, 3, 2001))
if mibBuilder.loadTexts: scspMIB.setLastUpdated('9808200000Z')
if mibBuilder.loadTexts: scspMIB.setOrganization('IETF Internetworking Over NBMA Working Group (ion)')
if mibBuilder.loadTexts: scspMIB.setContactInfo('Jim Luciani (luciani@BayNetworks.com) Bay Networks Cliff X. Wang (cliff_wang@vnet.ibm.com) Colin Verrilli (verrilli@vnet.ibm.com) IBM Corp.')
if mibBuilder.loadTexts: scspMIB.setDescription('This module defines a portion of the management information base (MIB) for managing Server Cache Synchronization protocols entities.')
class ScspPIDType(TextualConvention, Integer32):
    description = 'The protocol type associated with a SCSP instance.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("atmarp", 1), ("nhrp", 2), ("mars", 3), ("dhcp", 4), ("lnni", 5))

class ScspHFSMStateType(TextualConvention, Integer32):
    description = 'The various states of the Hello Finite State Machine.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("down", 1), ("waiting", 2), ("uniConn", 3), ("biConn", 4))

class ScspCAFSMStateType(TextualConvention, Integer32):
    description = 'The various states of the Cache Alignment Finite State Machine.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("down", 1), ("msNego", 2), ("cacheSumm", 3), ("cacheUpdate", 4), ("aligned", 5))

class SCSPVPIInteger(TextualConvention, Integer32):
    description = 'An integer large enough to contain the value of a VPI.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class SCSPVCIInteger(TextualConvention, Integer32):
    description = 'An integer large enough to contain the value of a VCI.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

scspObjects = MibIdentifier((1, 3, 6, 1, 3, 2001, 1))
scspNotifications = MibIdentifier((1, 3, 6, 1, 3, 2001, 2))
scspConformance = MibIdentifier((1, 3, 6, 1, 3, 2001, 3))
scspServerGroupTable = MibTable((1, 3, 6, 1, 3, 2001, 1, 1), )
if mibBuilder.loadTexts: scspServerGroupTable.setStatus('current')
if mibBuilder.loadTexts: scspServerGroupTable.setDescription('The objects defined in this table are used to for the management of server groups. There is one entry in this table for each server group.')
scspServerGroupEntry = MibTableRow((1, 3, 6, 1, 3, 2001, 1, 1, 1), ).setIndexNames((0, "SCSP-MIB", "scspServerGroupID"), (0, "SCSP-MIB", "scspServerGroupPID"))
if mibBuilder.loadTexts: scspServerGroupEntry.setStatus('current')
if mibBuilder.loadTexts: scspServerGroupEntry.setDescription('Each entry contains attributes associated with a scsp server group.')
scspServerGroupID = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: scspServerGroupID.setStatus('current')
if mibBuilder.loadTexts: scspServerGroupID.setDescription('This is the Group ID of this SCSP server group instance.')
scspServerGroupPID = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 1, 1, 2), ScspPIDType())
if mibBuilder.loadTexts: scspServerGroupPID.setStatus('current')
if mibBuilder.loadTexts: scspServerGroupPID.setDescription('This is the protocol ID of this SCSP server group instance.')
scspServerGroupRowStatus = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scspServerGroupRowStatus.setReference("RFC 1903, 'Textual Conventions for version 2 of the Simple Network Management Protocol (SNMPv2).'")
if mibBuilder.loadTexts: scspServerGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: scspServerGroupRowStatus.setDescription('This object allows entries to be created and deleted from the scspServerGroupTable. This table is closely coupled with the scspLSTable, scspDCSTable, and the corresponding protocol dependent tables. A new row creation in this table results in creation of corresponding entries in the scspLSTable and scspDCSTable. In addition, entries in appropriate protocol dependent table may also be added. When the scspServerRowStatus is deleted by setting this object to destroy(6), this results in removing corresponding entries in scspLSTable, scspDCSTable, and those in corresponding protocol dependent table.')
scspLSTable = MibTable((1, 3, 6, 1, 3, 2001, 1, 2), )
if mibBuilder.loadTexts: scspLSTable.setStatus('current')
if mibBuilder.loadTexts: scspLSTable.setDescription('The objects defined in this table are for the management of SCSP local server (LS).')
scspLSEntry = MibTableRow((1, 3, 6, 1, 3, 2001, 1, 2, 1), ).setIndexNames((0, "SCSP-MIB", "scspServerGroupID"), (0, "SCSP-MIB", "scspServerGroupPID"), (0, "SCSP-MIB", "scspLSID"))
if mibBuilder.loadTexts: scspLSEntry.setStatus('current')
if mibBuilder.loadTexts: scspLSEntry.setDescription('Information about the Local Server in a SCSP group. Each entry contains attributes associated a LS.')
scspLSID = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63)))
if mibBuilder.loadTexts: scspLSID.setStatus('current')
if mibBuilder.loadTexts: scspLSID.setDescription('This is the Local Server ID of this Local Server.')
scspLSHelloInterval = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scspLSHelloInterval.setReference('SCSP draft, Section 2.1')
if mibBuilder.loadTexts: scspLSHelloInterval.setStatus('current')
if mibBuilder.loadTexts: scspLSHelloInterval.setDescription('This object contains the value for HelloInterval for the Local Server. It is the time (in seconds) between sending of consecutive Hello messages from this server.')
scspLSDeadFactor = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scspLSDeadFactor.setReference('SCSP draft, Section 2.1')
if mibBuilder.loadTexts: scspLSDeadFactor.setStatus('current')
if mibBuilder.loadTexts: scspLSDeadFactor.setDescription("This object contains the value for DeadFactor. The DeadFactor along with HelloInterval are sent with outgoing 'Hello' messages. If the DCS does not received 'Hello' message from this LS within the time out interval 'HelloInterval*DeadFactor' (in seconds), then the DCS MUST consider the LS to be stalled.")
scspLSCAReXmInterval = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scspLSCAReXmInterval.setStatus('current')
if mibBuilder.loadTexts: scspLSCAReXmInterval.setDescription('The time out interval (in seconds) for re-sending CA message to the DCS if no response is received.')
scspLSCSUSReXmtInterval = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scspLSCSUSReXmtInterval.setStatus('current')
if mibBuilder.loadTexts: scspLSCSUSReXmtInterval.setDescription('The time out interval (in seconds) for re-sending CSUS Request to the DCS if not all CSA Records corresponding to the CSAS records in the CSUS message have been received.')
scspLSCSUReXmtInterval = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scspLSCSUReXmtInterval.setStatus('current')
if mibBuilder.loadTexts: scspLSCSUReXmtInterval.setDescription('The time out interval (in seconds) for re-sending CSU Request to the DCS if not all CSA Records corresponding to the CSU request have not been acknowledged.')
scspLSCSAMaxReXmt = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scspLSCSAMaxReXmt.setStatus('current')
if mibBuilder.loadTexts: scspLSCSAMaxReXmt.setDescription("The maximum number of retransmission of a CSA record. If acknowledge fails to occur when the maximum number is reached, an 'abnormal event' has happened between the LS/DCS link.")
scspLSRowStatus = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scspLSRowStatus.setReference('RFC 1903.')
if mibBuilder.loadTexts: scspLSRowStatus.setStatus('current')
if mibBuilder.loadTexts: scspLSRowStatus.setDescription('This object allows entries to be created and deleted from the scspLSTable. This table is closely coupled with DCS table and its corresponding protocol dependent tables. A new row creation in this table results in creation of new rows in the DCS table for each of its configured DCSs (peer servers). In addition, entries are created in the appropriate protocol dependent tables. When the scspServerRowStatus is deleted by setting this object to destroy(6), this results in removing the corresponding entries in the DCS table of the same Server Group. In addition, entries in the corresponding protocol dependent table will also be removed.')
scspDCSTable = MibTable((1, 3, 6, 1, 3, 2001, 1, 3), )
if mibBuilder.loadTexts: scspDCSTable.setStatus('current')
if mibBuilder.loadTexts: scspDCSTable.setDescription('The objects defined in this table are used for the management of the DCS session between the LS and DCS.')
scspDCSEntry = MibTableRow((1, 3, 6, 1, 3, 2001, 1, 3, 1), ).setIndexNames((0, "SCSP-MIB", "scspServerGroupID"), (0, "SCSP-MIB", "scspServerGroupPID"), (0, "SCSP-MIB", "scspDCSID"))
if mibBuilder.loadTexts: scspDCSEntry.setStatus('current')
if mibBuilder.loadTexts: scspDCSEntry.setDescription('Information about each DCS session between the LS and its DCSs. The table is indexed by scspServerGroupID, scspServerGroupPID, and scspDCSID.')
scspDCSID = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63)))
if mibBuilder.loadTexts: scspDCSID.setStatus('current')
if mibBuilder.loadTexts: scspDCSID.setDescription('This ID is used to identify a directly connected server(DCS).')
scspDCSCAFSMState = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 2), ScspCAFSMStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSCAFSMState.setReference('SCSP draft, Section 2.2')
if mibBuilder.loadTexts: scspDCSCAFSMState.setStatus('current')
if mibBuilder.loadTexts: scspDCSCAFSMState.setDescription('The current state of the Cache Alignment Finite State Machine. The allowable states are: down(1), msNego(2), cacheSumm(3), cacheUpdate(4), aligned(5).')
scspDCSCASequence = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSCASequence.setStatus('current')
if mibBuilder.loadTexts: scspDCSCASequence.setDescription('The current CA sequence number associated with this DCS.')
scspDCSCAIn = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSCAIn.setStatus('current')
if mibBuilder.loadTexts: scspDCSCAIn.setDescription('The number of CA messages received from this DCS.')
scspDCSCAOut = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSCAOut.setStatus('current')
if mibBuilder.loadTexts: scspDCSCAOut.setDescription('The number of CA messages sent to this DCS.')
scspDCSCAInvalidIn = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSCAInvalidIn.setReference('SCSP draft, Section 2.2.')
if mibBuilder.loadTexts: scspDCSCAInvalidIn.setStatus('current')
if mibBuilder.loadTexts: scspDCSCAInvalidIn.setDescription("The number of invalid CA messages received from this DCS. During Master/Slave negotiation state, two types of messages are correct: 1) CA from the DCS has the M, I, and O bits on, with no CSAS records and sender's ID is larger than the LSID. 2) CA from the DCS has the M and I bits off and the sender's ID is smaller than the LSID. All other types of CA messages are invalid and ignored. During Cache Summarize State, two kinds of message errors are possible: 1) M bit in received CA is set incorrectly; 2) CA sequence number is neither equal nor one more than the current LS's CA sequence number when LS is slave or CA sequence number is neither equal nor one less than the current LS's CA sequence number when LS is master. Other common errors include failed check sum, failed authentication if applicable, errors in the message fields.")
scspDCSCADuplicateIn = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSCADuplicateIn.setReference('SCSP draft, Section 2.2')
if mibBuilder.loadTexts: scspDCSCADuplicateIn.setStatus('current')
if mibBuilder.loadTexts: scspDCSCADuplicateIn.setDescription("The number of duplicate CA messages received from this DCS. A CA message is considered duplicate when 1)LS is master and received a CA message with its sequence number one less than the current sequence number; or 2)LS is slave and received a CA message with its sequence number equal to the LS's current sequence number.")
scspDCSMSState = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("master", 1), ("slave", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSMSState.setStatus('current')
if mibBuilder.loadTexts: scspDCSMSState.setDescription("The master/slave status of this DCS. This object should be ignored when CAFSM is in 'down' state.")
scspDCSCSUSIn = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSCSUSIn.setStatus('current')
if mibBuilder.loadTexts: scspDCSCSUSIn.setDescription('The number of CSUS sent from this DCS to the LS.')
scspDCSCSUSOut = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSCSUSOut.setStatus('current')
if mibBuilder.loadTexts: scspDCSCSUSOut.setDescription('The number of CSUS sent from LS to this DCS.')
scspDCSCSUSInvalidIn = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSCSUSInvalidIn.setStatus('current')
if mibBuilder.loadTexts: scspDCSCSUSInvalidIn.setDescription('The number of Invalid CSUS sent from this DCS to the LS.')
scspDCSCSURequestIn = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSCSURequestIn.setStatus('current')
if mibBuilder.loadTexts: scspDCSCSURequestIn.setDescription('The number of CSU requests LS received from this DCS.')
scspDCSCSUReplyOut = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSCSUReplyOut.setStatus('current')
if mibBuilder.loadTexts: scspDCSCSUReplyOut.setDescription('The number of CSU replies sent from LS to this DCS.')
scspDCSCSURequestOut = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSCSURequestOut.setStatus('current')
if mibBuilder.loadTexts: scspDCSCSURequestOut.setDescription('The number of CSU requests sent from LS to this DCS.')
scspDCSCSUReplyIn = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSCSUReplyIn.setStatus('current')
if mibBuilder.loadTexts: scspDCSCSUReplyIn.setDescription('The number of CSU replies LS received from this DCS.')
scspDCSCSUInvalidRequestIn = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSCSUInvalidRequestIn.setStatus('current')
if mibBuilder.loadTexts: scspDCSCSUInvalidRequestIn.setDescription("The number of invalid CSU requests LS received from this DCS. The possible errors in the CSU request messages: the received CSU request's Receiver ID is not equal to the LSID, etc. Other common errors include failed authentication if applicable, errors in the message fields, etc.")
scspDCSCSUInvalidReplyIn = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSCSUInvalidReplyIn.setStatus('current')
if mibBuilder.loadTexts: scspDCSCSUInvalidReplyIn.setDescription("The number of invalid CSU replies LS received from this DCS. The possible errors in the CSU reply messages: the received CSU reply's Receiver ID is not equal to the LSID, etc. Other common errors include failed authentication if applicable, errors in the message fields, etc.")
scspDCSCSAIn = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSCSAIn.setStatus('current')
if mibBuilder.loadTexts: scspDCSCSAIn.setDescription('The total number of CSA records received from this DCS to this LS.')
scspDCSCSAOut = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSCSAOut.setStatus('current')
if mibBuilder.loadTexts: scspDCSCSAOut.setDescription('The total number of CSA records sent from LS to this DCS.')
scspDCSCSAReXmted = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSCSAReXmted.setStatus('current')
if mibBuilder.loadTexts: scspDCSCSAReXmted.setDescription('The total number of CSA records re-transmited from LS to this DCS.')
scspDCSCSAReXmtQDepth = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSCSAReXmtQDepth.setStatus('current')
if mibBuilder.loadTexts: scspDCSCSAReXmtQDepth.setDescription('The depth of CSA Re-transmit queue associated with this DCS. The CSAs in the Re-transmit queue are pending to acknowledged.')
scspDCSRowStatus = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 22), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scspDCSRowStatus.setReference("RFC 1903, 'Textual Conventions for version 2 of the Simple Network Management Protocol (SNMPv2).'")
if mibBuilder.loadTexts: scspDCSRowStatus.setStatus('current')
if mibBuilder.loadTexts: scspDCSRowStatus.setDescription('This object allows DCS entries to be created and deleted from the scspDCSTable. This table is closely coupled with its corresponding protocol dependent table. A new row creation in this table results in creation of a new row in the corresponding protocol dependent table. When the scspServerRowStatus is deleted by setting this object to destroy(6), this results in removing the corresponding entries in its corresponding protocol dependent table.')
scspCSAReXmExceed = NotificationType((1, 3, 6, 1, 3, 2001, 2, 1)).setObjects(("SCSP-MIB", "scspServerGroupID"), ("SCSP-MIB", "scspServerGroupPID"), ("SCSP-MIB", "scspDCSID"))
if mibBuilder.loadTexts: scspCSAReXmExceed.setStatus('current')
if mibBuilder.loadTexts: scspCSAReXmExceed.setDescription("Retransmission of a CSA to this DCS has exceeded maximum retry limit, indicating an 'abnormal event' has happened between the LS/DCS association. The HSFM associated with this DCS is transitioned into the 'Waiting' state, and a 'scspHFSMWaiting' trap is also generated.")
scspCompliances = MibIdentifier((1, 3, 6, 1, 3, 2001, 3, 1))
scspGroups = MibIdentifier((1, 3, 6, 1, 3, 2001, 3, 2))
scspCompliance = ModuleCompliance((1, 3, 6, 1, 3, 2001, 3, 1, 1)).setObjects(("SCSP-MIB", "scspLSGroup"), ("SCSP-MIB", "scspDCSGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scspCompliance = scspCompliance.setStatus('current')
if mibBuilder.loadTexts: scspCompliance.setDescription('The compliance statement for entities that are required for the management of SCSP.')
scspLSGroup = ObjectGroup((1, 3, 6, 1, 3, 2001, 3, 2, 1)).setObjects(("SCSP-MIB", "scspServerGroupID"), ("SCSP-MIB", "scspServerGroupPID"), ("SCSP-MIB", "scspLSID"), ("SCSP-MIB", "scspLSHelloInterval"), ("SCSP-MIB", "scspLSCAReXmInterval"), ("SCSP-MIB", "scspLSCSUSReXmtInterval"), ("SCSP-MIB", "scspLSCSUReXmtInterval"), ("SCSP-MIB", "scspLSCSAMaxReXmt"), ("SCSP-MIB", "scspLSDeadFactor"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scspLSGroup = scspLSGroup.setStatus('current')
if mibBuilder.loadTexts: scspLSGroup.setDescription('A collection of objects which support the management of the Server group and the Local Server. This group is mandatory.')
scspDCSGroup = ObjectGroup((1, 3, 6, 1, 3, 2001, 3, 2, 2)).setObjects(("SCSP-MIB", "scspDCSID"), ("SCSP-MIB", "scspDCSCAFSMState"), ("SCSP-MIB", "scspDCSCAIn"), ("SCSP-MIB", "scspDCSCAOut"), ("SCSP-MIB", "scspDCSCAInvalidIn"), ("SCSP-MIB", "scspDCSCADuplicateIn"), ("SCSP-MIB", "scspDCSMSState"), ("SCSP-MIB", "scspDCSCSUSIn"), ("SCSP-MIB", "scspDCSCSUSOut"), ("SCSP-MIB", "scspDCSCSURequestIn"), ("SCSP-MIB", "scspDCSCSURequestOut"), ("SCSP-MIB", "scspDCSCSUReplyOut"), ("SCSP-MIB", "scspDCSCSUReplyIn"), ("SCSP-MIB", "scspDCSCSUInvalidRequestIn"), ("SCSP-MIB", "scspDCSCSUInvalidReplyIn"), ("SCSP-MIB", "scspDCSCSAIn"), ("SCSP-MIB", "scspDCSCSAOut"), ("SCSP-MIB", "scspDCSCSAReXmted"), ("SCSP-MIB", "scspDCSCSAReXmtQDepth"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scspDCSGroup = scspDCSGroup.setStatus('current')
if mibBuilder.loadTexts: scspDCSGroup.setDescription('A collection of objects which support the management of the information exchange session between the LS and its associated DCS. This group is mandatory.')
mibBuilder.exportSymbols("SCSP-MIB", SCSPVCIInteger=SCSPVCIInteger, scspLSHelloInterval=scspLSHelloInterval, scspDCSCASequence=scspDCSCASequence, scspDCSCADuplicateIn=scspDCSCADuplicateIn, scspDCSCAInvalidIn=scspDCSCAInvalidIn, scspLSRowStatus=scspLSRowStatus, scspDCSCSUInvalidRequestIn=scspDCSCSUInvalidRequestIn, scspDCSCSAReXmted=scspDCSCSAReXmted, scspLSEntry=scspLSEntry, scspDCSCSUSInvalidIn=scspDCSCSUSInvalidIn, scspServerGroupEntry=scspServerGroupEntry, scspServerGroupPID=scspServerGroupPID, scspLSCAReXmInterval=scspLSCAReXmInterval, scspServerGroupTable=scspServerGroupTable, scspDCSCAFSMState=scspDCSCAFSMState, ScspPIDType=ScspPIDType, scspDCSTable=scspDCSTable, scspLSCSUSReXmtInterval=scspLSCSUSReXmtInterval, ScspHFSMStateType=ScspHFSMStateType, scspDCSCAOut=scspDCSCAOut, scspDCSCSURequestIn=scspDCSCSURequestIn, scspGroups=scspGroups, scspDCSCSAOut=scspDCSCSAOut, scspDCSGroup=scspDCSGroup, scspLSDeadFactor=scspLSDeadFactor, scspDCSMSState=scspDCSMSState, scspLSCSUReXmtInterval=scspLSCSUReXmtInterval, scspMIB=scspMIB, scspLSTable=scspLSTable, scspDCSID=scspDCSID, scspServerGroupID=scspServerGroupID, scspServerGroupRowStatus=scspServerGroupRowStatus, scspLSCSAMaxReXmt=scspLSCSAMaxReXmt, scspLSID=scspLSID, ScspCAFSMStateType=ScspCAFSMStateType, scspCSAReXmExceed=scspCSAReXmExceed, scspObjects=scspObjects, scspDCSEntry=scspDCSEntry, scspDCSCSUSIn=scspDCSCSUSIn, scspConformance=scspConformance, PYSNMP_MODULE_ID=scspMIB, scspDCSCSAReXmtQDepth=scspDCSCSAReXmtQDepth, scspDCSCSUReplyIn=scspDCSCSUReplyIn, scspDCSRowStatus=scspDCSRowStatus, scspCompliances=scspCompliances, scspDCSCSUReplyOut=scspDCSCSUReplyOut, scspDCSCAIn=scspDCSCAIn, scspLSGroup=scspLSGroup, scspDCSCSAIn=scspDCSCSAIn, scspDCSCSUInvalidReplyIn=scspDCSCSUInvalidReplyIn, scspCompliance=scspCompliance, SCSPVPIInteger=SCSPVPIInteger, scspDCSCSURequestOut=scspDCSCSURequestOut, scspDCSCSUSOut=scspDCSCSUSOut, scspNotifications=scspNotifications)
