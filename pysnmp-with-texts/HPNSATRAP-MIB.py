#
# PySNMP MIB module HPNSATRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPNSATRAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:42:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, iso, MibIdentifier, Counter64, Unsigned32, Counter32, enterprises, IpAddress, NotificationType, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Gauge32, TimeTicks, Integer32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "iso", "MibIdentifier", "Counter64", "Unsigned32", "Counter32", "enterprises", "IpAddress", "NotificationType", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Gauge32", "TimeTicks", "Integer32", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hp = MibIdentifier((1, 3, 6, 1, 4, 1, 11))
adaptec = MibIdentifier((1, 3, 6, 1, 4, 1, 795))
nm = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2))
hpnsa = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23))
hpnsaECC = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 6))
hpnsaRemoteAssist = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 8))
adaptecNm = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 4))
adaptecNmScsiStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 4, 1))
hpnr = MibIdentifier((1, 3, 6, 1, 4, 1, 16))
hpNetRAID = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 1))
hpNetRaidMib = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 1, 1))
raidTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 1, 1, 200))
hpnsaPostError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,4356))
if mibBuilder.loadTexts: hpnsaPostError.setDescription('Post Error has occurred.')
hpnsaParityError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,20528))
if mibBuilder.loadTexts: hpnsaParityError.setDescription('Parity error has been detected in parity memory')
hpnsaBusTimeoutError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,20544))
if mibBuilder.loadTexts: hpnsaBusTimeoutError.setDescription('One of the bus masters caused a bus timeout')
hpnsaIOChannelCheck = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,20560))
if mibBuilder.loadTexts: hpnsaIOChannelCheck.setDescription('I/0 channel check activated by device in EISA slot caused an error')
hpnsaSoftwareNMI = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,20576))
if mibBuilder.loadTexts: hpnsaSoftwareNMI.setDescription('Software NMI has been generated')
hpnsaPostMemoryResize = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,20592))
if mibBuilder.loadTexts: hpnsaPostMemoryResize.setDescription('Memory size has been adjusted during the Power-On-Self-Test during the last boot')
hpnsaPciParityError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,20624))
if mibBuilder.loadTexts: hpnsaPciParityError.setDescription('Parity error has occurred on a transfer to/from a device on one of the PCI buses')
hpnsaPciSystemError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,20640))
if mibBuilder.loadTexts: hpnsaPciSystemError.setDescription('System error has occurred in the PCI subsystem')
hpnsaCPUFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,20656))
if mibBuilder.loadTexts: hpnsaCPUFailure.setDescription('One or more CPUs have failed. Detected by BIOS during POST')
hpnsaFailsafeTimeout = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,20672))
if mibBuilder.loadTexts: hpnsaFailsafeTimeout.setDescription('Timeout of failsafe timer has occurred')
hpnsaErrorLoggingDisabled = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,20704))
if mibBuilder.loadTexts: hpnsaErrorLoggingDisabled.setDescription('Error logging for a specific error has been disabled due to too many errors of that kind in a short time period')
hpnsaSystemReconfig = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,20800))
if mibBuilder.loadTexts: hpnsaSystemReconfig.setDescription('EISA Configuration Utility has altered system configuration')
hpnsaHotSwapPowerFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,24453))
if mibBuilder.loadTexts: hpnsaHotSwapPowerFailure.setDescription('Power connection failure in one of the devices in the hot swap cage')
hpnsaHotSwapDeviceRemoved = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,24454))
if mibBuilder.loadTexts: hpnsaHotSwapDeviceRemoved.setDescription('A device has been removed from the hot swap cage')
hpnsaHotSwapDeviceInserted = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,24455))
if mibBuilder.loadTexts: hpnsaHotSwapDeviceInserted.setDescription('A device has been inserted into the hot swap cage')
hpnsaSystemWarning = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,20736))
if mibBuilder.loadTexts: hpnsaSystemWarning.setDescription('An event of warning severity has occurred in the system. For example, chassis door has been opened')
hpnsaSystemCritical = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,20737))
if mibBuilder.loadTexts: hpnsaSystemCritical.setDescription('An event of critical severity has occurred in the system. For example, both system fans have failed')
hpnsaStorageCapWarning = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,4096))
if mibBuilder.loadTexts: hpnsaStorageCapWarning.setDescription('Volume Storage Capacity has exceeded the warning threshold level.')
hpnsaStorageCapMinor = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,4097))
if mibBuilder.loadTexts: hpnsaStorageCapMinor.setDescription('Volume Storage Capacity has exceeded the minor threshold level.')
hpnsaStorageCapMajor = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,4098))
if mibBuilder.loadTexts: hpnsaStorageCapMajor.setDescription('Volume Storage Capacity has exceeded the major threshold level.')
hpnsaDaCacheError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,8609))
if mibBuilder.loadTexts: hpnsaDaCacheError.setDescription('HPDA Controller: Cache Error')
hpnsaDaLogicalDriveTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,8625))
if mibBuilder.loadTexts: hpnsaDaLogicalDriveTrap.setDescription('HPDA Logical Drive: Critical')
hpnsaDaLogicalDriveNotAvailable = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,8626))
if mibBuilder.loadTexts: hpnsaDaLogicalDriveNotAvailable.setDescription('HPDA Logical Drive Not Available')
hpnsaDaHotSpareFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,8641))
if mibBuilder.loadTexts: hpnsaDaHotSpareFailure.setDescription('HPDA Hot Spare:Failed')
hpnsaDaHotSpareSuccess = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,8642))
if mibBuilder.loadTexts: hpnsaDaHotSpareSuccess.setDescription('HPDA Hot Spare Succeeded')
hpnsaDaHardDiskFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,8657))
if mibBuilder.loadTexts: hpnsaDaHardDiskFailure.setDescription('HPDA Hard Disk Failed')
hpnsaDaParityThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,8673))
if mibBuilder.loadTexts: hpnsaDaParityThresholdTrap.setDescription('HPDA Threshold Exceeded: Parity')
hpnsaDaSoftErrorThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,8674))
if mibBuilder.loadTexts: hpnsaDaSoftErrorThresholdTrap.setDescription('HPDA Threshold Exceeded: Soft Errors')
hpnsaDaHardwareThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,8675))
if mibBuilder.loadTexts: hpnsaDaHardwareThresholdTrap.setDescription('HPDA Threshold Exceeded: Hardware Errors')
hpnsaDaMiscThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,8676))
if mibBuilder.loadTexts: hpnsaDaMiscThresholdTrap.setDescription('HPDA Threshold Exceeded: Miscellaneous Errors')
hpnsaDaControllerTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,8677))
if mibBuilder.loadTexts: hpnsaDaControllerTrap.setDescription('HPDA Controller: NVRAM Age')
hpnsaScsiStatusCorruptedDB = NotificationType((1, 3, 6, 1, 4, 1, 795, 4, 1) + (0,8193))
if mibBuilder.loadTexts: hpnsaScsiStatusCorruptedDB.setDescription('Device Database has been corrupted.')
hpnsaScsiStatusUnloadedNLM = NotificationType((1, 3, 6, 1, 4, 1, 795, 4, 1) + (0,8194))
if mibBuilder.loadTexts: hpnsaScsiStatusUnloadedNLM.setDescription('SCSI Status agent was unloaded from a NetWare Server.')
hpnsaScsiStatusFailedHBA = NotificationType((1, 3, 6, 1, 4, 1, 795, 4, 1) + (0,8196))
if mibBuilder.loadTexts: hpnsaScsiStatusFailedHBA.setDescription('One of the SCSI HBAs can no longer be detected by the SCSI Status agent.')
hpnsaScsiStatusRecoveredHBA = NotificationType((1, 3, 6, 1, 4, 1, 795, 4, 1) + (0,8197))
if mibBuilder.loadTexts: hpnsaScsiStatusRecoveredHBA.setDescription('A Host Adapter which has failed, has become accessible again.')
hpnsaScsiStatusDiscoveredHBA = NotificationType((1, 3, 6, 1, 4, 1, 795, 4, 1) + (0,8198))
if mibBuilder.loadTexts: hpnsaScsiStatusDiscoveredHBA.setDescription('A new SCSI Host Bus Adapter has been discovered or device database has been cleared.')
hpnsaScsiStatusDeviceFailed = NotificationType((1, 3, 6, 1, 4, 1, 795, 4, 1) + (0,8199))
if mibBuilder.loadTexts: hpnsaScsiStatusDeviceFailed.setDescription('One of the SCSI devices installed on the server can no longer be detected by the SCSI Status agent.')
hpnsaScsiStatusDeviceRecovered = NotificationType((1, 3, 6, 1, 4, 1, 795, 4, 1) + (0,8200))
if mibBuilder.loadTexts: hpnsaScsiStatusDeviceRecovered.setDescription('A SCSI device which has failed, has become accessible again.')
hpnsaScsiStatusDeviceDiscovered = NotificationType((1, 3, 6, 1, 4, 1, 795, 4, 1) + (0,8201))
if mibBuilder.loadTexts: hpnsaScsiStatusDeviceDiscovered.setDescription('A new SCSI device has been discovered.')
hpnsaScsiStatusChangedHBA = NotificationType((1, 3, 6, 1, 4, 1, 795, 4, 1) + (0,8205))
if mibBuilder.loadTexts: hpnsaScsiStatusChangedHBA.setDescription('The SCSI Status agent detected that the Host Bus Adapter has been changed.')
hpnsaScsiStatusDeviceChanged = NotificationType((1, 3, 6, 1, 4, 1, 795, 4, 1) + (0,8206))
if mibBuilder.loadTexts: hpnsaScsiStatusDeviceChanged.setDescription('The SCSI Status agent detected that a SCSI device installed on the server has been changed.')
hpnsaScsiStatusTimeoutHBA = NotificationType((1, 3, 6, 1, 4, 1, 795, 4, 1) + (0,8208))
if mibBuilder.loadTexts: hpnsaScsiStatusTimeoutHBA.setDescription('The SCSI Status agent sent a request to an HBA and the request never completed.')
hpnsaScsiStatusDeviceTimeout = NotificationType((1, 3, 6, 1, 4, 1, 795, 4, 1) + (0,8209))
if mibBuilder.loadTexts: hpnsaScsiStatusDeviceTimeout.setDescription('The SCSI Status agent sent a request to a SCSI device and the request never completed.')
hpnsaDiskSysDefects = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,8210))
if mibBuilder.loadTexts: hpnsaDiskSysDefects.setDescription('The Defect List Threshold has been exceeded.')
hpnsaNicReceiveErrors = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16385))
if mibBuilder.loadTexts: hpnsaNicReceiveErrors.setDescription('The total number of packets with receive errors has exceeded the threshold.')
hpnsaNicTransmitErrors = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16386))
if mibBuilder.loadTexts: hpnsaNicTransmitErrors.setDescription('The total number of packets with transmit errors has exceeded the threshold.')
hpnsaNicAdapterReset = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16387))
if mibBuilder.loadTexts: hpnsaNicAdapterReset.setDescription('The total number of LAN Adapter reset errors has exceeded the threshold.')
hpnsaNicAlignmentErrors = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16388))
if mibBuilder.loadTexts: hpnsaNicAlignmentErrors.setDescription('The total number of alignment and CRC errors has exceeded the threshold.')
hpnsaNicGiantFrameErrors = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16389))
if mibBuilder.loadTexts: hpnsaNicGiantFrameErrors.setDescription('The total number of giant frame packets has exceeded the threshold.')
hpnsaNicHardwareMismatch = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16390))
if mibBuilder.loadTexts: hpnsaNicHardwareMismatch.setDescription('The total number of packets with length less than the required minimum length has exceeded the threshold.')
hpnsaNicLateCollision = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16391))
if mibBuilder.loadTexts: hpnsaNicLateCollision.setDescription('The total number of late collision errors has exceeded the threshold (the network is too large).')
hpnsaNicExcessiveCollision = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16392))
if mibBuilder.loadTexts: hpnsaNicExcessiveCollision.setDescription('The total number of colliding packets has exceeded the threshold (the network is too busy).')
hpnsaNicCarrierSenseError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16393))
if mibBuilder.loadTexts: hpnsaNicCarrierSenseError.setDescription('The total number of carrier sense errors has exceeded the threshold.')
hpnsaNicDeferralError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16394))
if mibBuilder.loadTexts: hpnsaNicDeferralError.setDescription('The total number of adapter deferrals has exceeded the threshold (the network is forever busy).')
hpnsaNicNoECBError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16395))
if mibBuilder.loadTexts: hpnsaNicNoECBError.setDescription('The total number of No ECB errors (LAN adapter is out of receive buffers) errors has exceeded the threshold.')
hpnsaNicReceiveOverflow = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16396))
if mibBuilder.loadTexts: hpnsaNicReceiveOverflow.setDescription('The total number of Receive Overflow errors has exceeded the threshold.')
hpnsaNicUtilCount = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16397))
if mibBuilder.loadTexts: hpnsaNicUtilCount.setDescription('LAN adapter utilization count has exceeded the threshold.')
hpnsaNicAdapterMismatch = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16398))
if mibBuilder.loadTexts: hpnsaNicAdapterMismatch.setDescription('The LAN adapter which the alarms were configured for, has been replaced by another type of LAN adapter.')
hpnsaNicTxFIFOUnderrun = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16399))
if mibBuilder.loadTexts: hpnsaNicTxFIFOUnderrun.setDescription('There possibly is a dataflow problem with your HP LAN adapter.')
hpnsaNicTxTimeOut = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16400))
if mibBuilder.loadTexts: hpnsaNicTxTimeOut.setDescription('The HP LAN adapter driver did not receive a transmit complete interrupt.')
hpnsaNicRxFIFOOverrun = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16401))
if mibBuilder.loadTexts: hpnsaNicRxFIFOOverrun.setDescription('There possibly is a dataflow problem with your HP LAN adapter.')
hpnsaNicRxFalseInterrupts = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16402))
if mibBuilder.loadTexts: hpnsaNicRxFalseInterrupts.setDescription('There is a dataflow problem with your HP LAN adapter - receive interrupts are being generated, but no receive packets are being present.')
hpnsaNicPagingError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16403))
if mibBuilder.loadTexts: hpnsaNicPagingError.setDescription('There possibly is a problem with your HP LAN adapter - it generates too many buffer pointer errors.')
hpnsaNicTimedOutDMA = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16404))
if mibBuilder.loadTexts: hpnsaNicTimedOutDMA.setDescription('There possibly is a problem with your HP LAN adapter - DMA timed out while transmitting or receiving a packet.')
hpnsaNicTxNoResources = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16405))
if mibBuilder.loadTexts: hpnsaNicTxNoResources.setDescription('The HP LAN adapter is transmitting faster than the media can handle.')
hpnsaNicTxExcessiveFrags = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16406))
if mibBuilder.loadTexts: hpnsaNicTxExcessiveFrags.setDescription('The number of buffer fragments has exceeded the maximum number allowed by the network protocol in your HP LAN adapter.')
hpnsaNicRxLow = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16407))
if mibBuilder.loadTexts: hpnsaNicRxLow.setDescription('The total number of errors due to requests of an ECB being denied has exceeded the threshold.')
hpnsaNicRxEmpty = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16408))
if mibBuilder.loadTexts: hpnsaNicRxEmpty.setDescription('There possibly is a problem with your HP LAN adapter running in bus master mode.')
hpnsaVoltWarning = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,20739))
if mibBuilder.loadTexts: hpnsaVoltWarning.setDescription('Warning voltage threshold on one of the system voltage channels has been exceeded. Voltage channels are +12V, +5V, -12V, +3.3V to PCI, +3.3V to CPU')
hpnsaVoltEmergency = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,20738))
if mibBuilder.loadTexts: hpnsaVoltEmergency.setDescription('Fatal voltage threshold on one of the system voltage channels has been exceeded. Voltage channels are +12V, +5V, -12V, +3.3V to PCI, +3.3V to CPU')
hpnsaRAVoltServerPowerFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,109))
if mibBuilder.loadTexts: hpnsaRAVoltServerPowerFailure.setDescription('The server has lost the power completely.')
hpnsaRAVoltMinus12VUpper = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,111))
if mibBuilder.loadTexts: hpnsaRAVoltMinus12VUpper.setDescription('Voltage measured in the server has gone outside of -12V Upper Threshold.')
hpnsaRAVoltPlus3VUpper = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,113))
if mibBuilder.loadTexts: hpnsaRAVoltPlus3VUpper.setDescription('Voltage measured in the server has gone outside of +3.3V Upper Threshold.')
hpnsaRAVoltPlus5VUpper = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,114))
if mibBuilder.loadTexts: hpnsaRAVoltPlus5VUpper.setDescription('Voltage measured in the server has gone outside of +5V Upper Threshold.')
hpnsaRAVoltPlus12VUpper = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,115))
if mibBuilder.loadTexts: hpnsaRAVoltPlus12VUpper.setDescription('Voltage measured in the server has gone outside of +12V Upper Threshold.')
hpnsaRAVoltMinus12VLower = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,121))
if mibBuilder.loadTexts: hpnsaRAVoltMinus12VLower.setDescription('Voltage measured in the server has gone outside of -12V Lower Threshold.')
hpnsaRAVoltBatteryLower = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,122))
if mibBuilder.loadTexts: hpnsaRAVoltBatteryLower.setDescription("The HP Remote Assistant Card's battery charging circuit is bad.")
hpnsaRAVoltPlus3VLower = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,123))
if mibBuilder.loadTexts: hpnsaRAVoltPlus3VLower.setDescription('Voltage measured in the server has gone outside of +3.3V Lower Threshold.')
hpnsaRAVoltPlus5VLower = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,124))
if mibBuilder.loadTexts: hpnsaRAVoltPlus5VLower.setDescription('Voltage measured in the server has gone outside of +5V Lower Threshold.')
hpnsaRAVoltPlus12VLower = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,125))
if mibBuilder.loadTexts: hpnsaRAVoltPlus12VLower.setDescription('Voltage measured in the server has gone outside of +12V Lower Threshold.')
hpnsaTempMonitorError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,12288))
if mibBuilder.loadTexts: hpnsaTempMonitorError.setDescription('Server temperature monitor cannot read temperature data.')
hpnsaTempTrapWarning = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,12289))
if mibBuilder.loadTexts: hpnsaTempTrapWarning.setDescription('Server temperature has exceeded the warning temperature threshold.')
hpnsaTempTrapEmergency = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,12290))
if mibBuilder.loadTexts: hpnsaTempTrapEmergency.setDescription('Server temperature has exceeded the emergency temperature threshold.')
hpnsaHotSwapTempMonitorError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,24449))
if mibBuilder.loadTexts: hpnsaHotSwapTempMonitorError.setDescription('Hot Swap Cage: Temperature monitor error occurred')
hpnsaHotSwapTempWarning = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,24451))
if mibBuilder.loadTexts: hpnsaHotSwapTempWarning.setDescription('Hot Swap Cage: Warning temperature exceeded')
hpnsaHotSwapTempEmergency = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,24452))
if mibBuilder.loadTexts: hpnsaHotSwapTempEmergency.setDescription('Hot Swap Cage: Emergency temperature exceeded!')
hpnsaRATempWarning = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,211))
if mibBuilder.loadTexts: hpnsaRATempWarning.setDescription('The server temperature measured on the HP Remote Assistant Card has exceeded the configured warning threshold.')
hpnsaRATempShutdown = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,221))
if mibBuilder.loadTexts: hpnsaRATempShutdown.setDescription('The server temperature measured on the HP Remote Assistant Card has exceeded the configured threshold and the server has been automatically shut down.')
hpnsaRATempCritical = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,231))
if mibBuilder.loadTexts: hpnsaRATempCritical.setDescription('The server temperature measured on the HP Remote Assistant Card has exceeded the configured Graceful Shutdown threshold value by 5 degrees C and the server has been automatically shut down.')
hpnsaASRServerRestart = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,20752))
if mibBuilder.loadTexts: hpnsaASRServerRestart.setDescription('Server has been restarted after the system watchdog timer has timed out due to NOS being hung')
hpnsaRAASRHangNOS = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,501))
if mibBuilder.loadTexts: hpnsaRAASRHangNOS.setDescription('ASR has stopped notifying the HP Remote Assistant Card that the system is running correctly (the server probably hung or crashed).')
hpnsaRAASRServerRestart = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,502))
if mibBuilder.loadTexts: hpnsaRAASRServerRestart.setDescription('The HP Remote Assistant card has restarted the server due to the NOS being hung.')
hpnsaRAASRTimerEnabled = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,503))
if mibBuilder.loadTexts: hpnsaRAASRTimerEnabled.setDescription('The Automatic Server Restart software has been enabled by the Remote Assistant ASR timer.')
hpnsaRAASRTimerDisabled = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,504))
if mibBuilder.loadTexts: hpnsaRAASRTimerDisabled.setDescription('The HP Remote Assistant Automatic Server Restart timer has been disabled.')
hpnsaRABusUtilization = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,800))
if mibBuilder.loadTexts: hpnsaRABusUtilization.setDescription('The 5-minute average EISA bus utilization has exceeded the configured threshold.')
hpnsaRASuccessfulLogin = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,401))
if mibBuilder.loadTexts: hpnsaRASuccessfulLogin.setDescription('An administrator has logged in to the HP Remote Assistant Card.')
hpnsaRAIllegalLogin = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,402))
if mibBuilder.loadTexts: hpnsaRAIllegalLogin.setDescription('An unauthorized user has made 3 or more unsuccessful attempts to log in to the HP Remote Assistant Card within a 5-minute period of time.')
hpnsaRALowBatteryCharge = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,403))
if mibBuilder.loadTexts: hpnsaRALowBatteryCharge.setDescription("The HP Remote Assistant Card's battery charging circuit is bad.")
hpnsaRABoardShutDown = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,404))
if mibBuilder.loadTexts: hpnsaRABoardShutDown.setDescription('The HP Remote Assistant Card has been shut down.')
hpnsaRARemoteInitiatedCtrlAltDel = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,601))
if mibBuilder.loadTexts: hpnsaRARemoteInitiatedCtrlAltDel.setDescription('An administrator has executed a remote <Ctrl-Alt-Del> on the server via the HP Remote Assistant Card.')
hpnsaRARemoteInitiatedReset = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,602))
if mibBuilder.loadTexts: hpnsaRARemoteInitiatedReset.setDescription('An administrator has executed a remote power cycle on the server via the HP Remote Assistant Card.')
hpnsaRARemoteInitiatedPowerDown = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,603))
if mibBuilder.loadTexts: hpnsaRARemoteInitiatedPowerDown.setDescription('An administrator has executed a remote power down of the server via the HP Remote Assistant Card.')
hpnsaRAInitServerBIOS = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,701))
if mibBuilder.loadTexts: hpnsaRAInitServerBIOS.setDescription("The server's BIOS has successfully initialized the HP Remote Assistant Card during the boot process.")
hpnsaRATestNotification = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,900))
if mibBuilder.loadTexts: hpnsaRATestNotification.setDescription('An administrator has executed Test Page from the HP Remote Assistant Configuration Utility.')
hpnsaRAAdminstratorLogout = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,405))
if mibBuilder.loadTexts: hpnsaRAAdminstratorLogout.setDescription('An administrator disconnected from the HP Remote Assistant board.')
hpnsaRAAdministratorAutologout = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,406))
if mibBuilder.loadTexts: hpnsaRAAdministratorAutologout.setDescription('An administrator has been automatically disconnected from the HP Remote Assistant board. The administrator was inactive for more than five minutes.')
hpnsaRAAdministratorConnectionLost = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,407))
if mibBuilder.loadTexts: hpnsaRAAdministratorConnectionLost.setDescription('An administrator has been prematurely disconnected from the Remote Assistant board.')
hpnsaRAAdministratorDialbackFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,408))
if mibBuilder.loadTexts: hpnsaRAAdministratorDialbackFailed.setDescription('An administrator failed to connect to the HP Remote Assistant board on a dialback')
hpnsaRATAPNoConnect = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,901))
if mibBuilder.loadTexts: hpnsaRATAPNoConnect.setDescription('The HP Remote Assistant modem was unable to connect to the TAP paging service modem.')
hpnsaRATAPParam1Error = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,902))
if mibBuilder.loadTexts: hpnsaRATAPParam1Error.setDescription('HP Remote Assistant was unable to connect with the TAP paging service.')
hpnsaRATAPParam2Error = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,903))
if mibBuilder.loadTexts: hpnsaRATAPParam2Error.setDescription('HP Remote Assistant was unable to log on to the TAP paging service.')
hpnsaRATAPParam3Error = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,904))
if mibBuilder.loadTexts: hpnsaRATAPParam3Error.setDescription('The HP Remote Assistant pager message was rejected by the TAP paging service.')
hpnsaEccErrorCorrected = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 6) + (0,4353))
if mibBuilder.loadTexts: hpnsaEccErrorCorrected.setDescription('An ECC single-bit error has been corrected in one of the memory modules')
hpnsaEccSBEOverflow = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 6) + (0,4354))
if mibBuilder.loadTexts: hpnsaEccSBEOverflow.setDescription("Error logging for ECC single-bit errors has been disabled due to too many SBE's detected in a short time period")
hpnsaEccMemoryResize = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 6) + (0,4355))
if mibBuilder.loadTexts: hpnsaEccMemoryResize.setDescription('ECC Memory size has been adjusted during the Power-On-Self-Test during the last boot due to a failed memory module')
hpnsaEccMultiBitError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 6) + (0,4357))
if mibBuilder.loadTexts: hpnsaEccMultiBitError.setDescription('An ECC double-bit error has occurred in one of the memory modules')
hpnsaEccMultiBitErrorOverflow = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 6) + (0,4358))
if mibBuilder.loadTexts: hpnsaEccMultiBitErrorOverflow.setDescription("Error logging for ECC multiple-bit errors has been disabled due to too many MBE's detected in a short time period")
hpnsaRPSAbnormalCondition = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,9101))
if mibBuilder.loadTexts: hpnsaRPSAbnormalCondition.setDescription('The Redundant Power Supply module is not operating properly, but there is no power supply module hardware failure.')
hpnsaRPSACPowerSourceFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,9103))
if mibBuilder.loadTexts: hpnsaRPSACPowerSourceFailure.setDescription('Indicates a failure with the AC power source that is connected to one of the redundant power supply units.')
hpnsaRPSPsuFailureDetected = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,9105))
if mibBuilder.loadTexts: hpnsaRPSPsuFailureDetected.setDescription('Indicates that one of the redundant power supply modules is not in normal operating condition.')
hpnsaRPSDCShutdown = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,9106))
if mibBuilder.loadTexts: hpnsaRPSDCShutdown.setDescription('Indicates that one of the redundant power supply modules is in over temperature protection mode.')
hpnsaRPSPsuRemoved = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,9107))
if mibBuilder.loadTexts: hpnsaRPSPsuRemoved.setDescription('Indicates that one of the redundant power supply modules has been physically removed from the HP NetServer Power Supply Subsystem.')
hpnsaRPSPsuInserted = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,9108))
if mibBuilder.loadTexts: hpnsaRPSPsuInserted.setDescription('Indicates that one of the redundant power supply modules has been physically inserted into the HP NetServer Power Supply Subsystem.')
hpnsaRPSPowerRestored = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,9109))
if mibBuilder.loadTexts: hpnsaRPSPowerRestored.setDescription('Indicates that one of the redundant power supply modules in the HP NetServer has recovered from an over temperature protection mode.')
hpnsaRPSWarningExceeded = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,9110))
if mibBuilder.loadTexts: hpnsaRPSWarningExceeded.setDescription('Indicates that one of the redundant power supply modules in the HP NetServer has exceeded the warning temperature level.')
hpnsaRPSEmergencyExceeded = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,9111))
if mibBuilder.loadTexts: hpnsaRPSEmergencyExceeded.setDescription('Indicates that one of the redundant power supply modules in the HP NetServer has exceeded the emergency temperature level.')
storagemanagement = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 2))
cyclone = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 2, 5))
cycTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000))
cycManagerID = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9001), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycManagerID.setStatus('mandatory')
if mibBuilder.loadTexts: cycManagerID.setDescription('ASCII String description of SCSI Manager')
cycHostAdapterID = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9002), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycHostAdapterID.setStatus('mandatory')
if mibBuilder.loadTexts: cycHostAdapterID.setDescription('ASCII String description of Hostadapter')
cycHostAdapterNumber = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9003), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycHostAdapterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cycHostAdapterNumber.setDescription('The unique Hostadapter Number')
cycVendor = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9004), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycVendor.setStatus('mandatory')
if mibBuilder.loadTexts: cycVendor.setDescription('This indicates the Name of the Vendor')
cycProduct = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9005), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycProduct.setStatus('mandatory')
if mibBuilder.loadTexts: cycProduct.setDescription('This indicates the product information')
cycControllerModel = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9006), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycControllerModel.setStatus('mandatory')
if mibBuilder.loadTexts: cycControllerModel.setDescription('The model of the associated controller e.g ATHENA, VIKING etc')
cycBusNumber = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9007), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycBusNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cycBusNumber.setDescription('The PCI Bus number')
cycChannelNumber = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9008), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycChannelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cycChannelNumber.setDescription('Channel Number')
cycScsiTargetID = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9009), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycScsiTargetID.setStatus('mandatory')
if mibBuilder.loadTexts: cycScsiTargetID.setDescription('SCSI Target ID')
cycLun = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9010), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycLun.setStatus('mandatory')
if mibBuilder.loadTexts: cycLun.setDescription('The LUN of the device ID')
cycArrayName = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9011), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycArrayName.setStatus('mandatory')
if mibBuilder.loadTexts: cycArrayName.setDescription('Array name')
cycMisCompares = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9012), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycMisCompares.setStatus('mandatory')
if mibBuilder.loadTexts: cycMisCompares.setDescription('The number of miscompares in verify ')
cycDriver = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9013), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycDriver.setStatus('mandatory')
if mibBuilder.loadTexts: cycDriver.setDescription('The Driver version')
cycManager = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9014), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycManager.setStatus('mandatory')
if mibBuilder.loadTexts: cycManager.setDescription('The CI/O Manager version')
cycOldArrayName = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9015), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycOldArrayName.setStatus('mandatory')
if mibBuilder.loadTexts: cycOldArrayName.setDescription('Old Array name')
cycNewArrayName = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9016), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycNewArrayName.setStatus('mandatory')
if mibBuilder.loadTexts: cycNewArrayName.setDescription('Changed Array name')
cycPriority = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9017), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycPriority.setStatus('mandatory')
if mibBuilder.loadTexts: cycPriority.setDescription('The Priority of the operation')
cycSenseInfo = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9018), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycSenseInfo.setStatus('mandatory')
if mibBuilder.loadTexts: cycSenseInfo.setDescription('The sense info of the PFA')
cycSNMPAgentIsUp = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,101))
if mibBuilder.loadTexts: cycSNMPAgentIsUp.setDescription('SNMP Agent is up.')
cycSNMPAgentIsDown = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,102))
if mibBuilder.loadTexts: cycSNMPAgentIsDown.setDescription('SNMP Agent is down.')
cycDuplicateHostAdapter = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,107))
if mibBuilder.loadTexts: cycDuplicateHostAdapter.setDescription('Cyclone: duplicate hostadapter ID')
cycHostAdapterDiscovered = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,108)).setObjects(("HPNSATRAP-MIB", "cycHostAdapterNumber"), ("HPNSATRAP-MIB", "cycHostAdapterID"), ("HPNSATRAP-MIB", "cycManagerID"))
if mibBuilder.loadTexts: cycHostAdapterDiscovered.setDescription('The HostAdapter# %d with HostAdapter Id %s and Manager Id %s is discovered')
cycHostAdapterChanged = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,109)).setObjects(("HPNSATRAP-MIB", "cycHostAdapterNumber"), ("HPNSATRAP-MIB", "cycHostAdapterID"), ("HPNSATRAP-MIB", "cycManagerID"))
if mibBuilder.loadTexts: cycHostAdapterChanged.setDescription('The HostAdapter# %d has new HostAdapter Id %s and Manager Id %s ')
cycHostAdapterFailed = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,110)).setObjects(("HPNSATRAP-MIB", "cycHostAdapterNumber"))
if mibBuilder.loadTexts: cycHostAdapterFailed.setDescription('The HostAdapter# %d has Failed')
cycHostAdapterRecovered = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,111)).setObjects(("HPNSATRAP-MIB", "cycHostAdapterNumber"))
if mibBuilder.loadTexts: cycHostAdapterRecovered.setDescription('Host Adapter# %d recovered')
cycDeviceFailed = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,112)).setObjects(("HPNSATRAP-MIB", "cycHostAdapterNumber"), ("HPNSATRAP-MIB", "cycScsiTargetID"), ("HPNSATRAP-MIB", "cycLun"))
if mibBuilder.loadTexts: cycDeviceFailed.setDescription('The HostAdapter# %d , TargetID %d, Lun# %d has failed ')
cycDeviceDiscovered = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,113)).setObjects(("HPNSATRAP-MIB", "cycHostAdapterNumber"), ("HPNSATRAP-MIB", "cycScsiTargetID"), ("HPNSATRAP-MIB", "cycLun"), ("HPNSATRAP-MIB", "cycVendor"), ("HPNSATRAP-MIB", "cycProduct"))
if mibBuilder.loadTexts: cycDeviceDiscovered.setDescription('The HostAdapter# %d , TargetID %d, Lun# %d of vendor %s product %s has discovered ')
cycDeviceRecovered = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,114)).setObjects(("HPNSATRAP-MIB", "cycHostAdapterNumber"), ("HPNSATRAP-MIB", "cycScsiTargetID"), ("HPNSATRAP-MIB", "cycLun"))
if mibBuilder.loadTexts: cycDeviceRecovered.setDescription('The HostAdapter# %d , TargetID %d, Lun# %d has recovered ')
cycDeviceChanged = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,115)).setObjects(("HPNSATRAP-MIB", "cycHostAdapterNumber"), ("HPNSATRAP-MIB", "cycScsiTargetID"), ("HPNSATRAP-MIB", "cycLun"), ("HPNSATRAP-MIB", "cycVendor"), ("HPNSATRAP-MIB", "cycProduct"))
if mibBuilder.loadTexts: cycDeviceChanged.setDescription('The HostAdapter# %d , TargetID %d, Lun# %d has new Vendor %s and Product %s information ')
cycPredictiveFailure = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,116)).setObjects(("HPNSATRAP-MIB", "cycHostAdapterNumber"), ("HPNSATRAP-MIB", "cycScsiTargetID"), ("HPNSATRAP-MIB", "cycLun"), ("HPNSATRAP-MIB", "cycVendor"), ("HPNSATRAP-MIB", "cycProduct"), ("HPNSATRAP-MIB", "cycSenseInfo"))
if mibBuilder.loadTexts: cycPredictiveFailure.setDescription('The HostAdapter# %d , TargetID %d, Lun# %d has Predictive Failure Condition on vendor %s product %s with sense info MSB(sense code), next 8 bits(sense code Qual) next 8 bits (Add sense code Qual) LSB (0000) %d')
cycAspiDatabaseCleared = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,117))
if mibBuilder.loadTexts: cycAspiDatabaseCleared.setDescription('The Aspi database is cleared and therefore all the previous information are not available')
cycAspiCrash = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,118))
if mibBuilder.loadTexts: cycAspiCrash.setDescription('The Aspi has crashed')
cycAspiNoMemory = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,119))
if mibBuilder.loadTexts: cycAspiNoMemory.setDescription('No memory left for Aspi Operations')
cycAspiFileWriteOpenError = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,120))
if mibBuilder.loadTexts: cycAspiFileWriteOpenError.setDescription('Unable to open Aspi file for writing, problem exists in server hard disk')
cycAspiFileWriteError = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,121))
if mibBuilder.loadTexts: cycAspiFileWriteError.setDescription('Unable to open Aspi file , problem exists in server hard disk')
cycAspiNoDeviceFile = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,122))
if mibBuilder.loadTexts: cycAspiNoDeviceFile.setDescription('Aspi device file doesnot exist')
cycAspiNoMemoryReading = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,123))
if mibBuilder.loadTexts: cycAspiNoMemoryReading.setDescription('Aspi: Memory allocation is failing')
cycAspiFileReadError = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,124))
if mibBuilder.loadTexts: cycAspiFileReadError.setDescription('Aspi: unable to read the file server hard disk might have problems')
cycAspiBadFileMagic = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,125))
if mibBuilder.loadTexts: cycAspiBadFileMagic.setDescription('Aspi: database is corrupted')
rtAdapterNumber = MibScalar((1, 3, 6, 1, 4, 1, 16, 1, 1, 200, 1001), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtAdapterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: rtAdapterNumber.setDescription('Adapter Number for which Trap is generated.')
rtLogicalDriveNumber = MibScalar((1, 3, 6, 1, 4, 1, 16, 1, 1, 200, 1002), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtLogicalDriveNumber.setStatus('mandatory')
if mibBuilder.loadTexts: rtLogicalDriveNumber.setDescription('Logical Drive Number for which Trap is generated.')
rtChannelNumber = MibScalar((1, 3, 6, 1, 4, 1, 16, 1, 1, 200, 1003), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtChannelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: rtChannelNumber.setDescription('Channel Number on the Adapter for which Trap is Generated.')
rtTargetID = MibScalar((1, 3, 6, 1, 4, 1, 16, 1, 1, 200, 1004), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtTargetID.setStatus('mandatory')
if mibBuilder.loadTexts: rtTargetID.setDescription('Device ID of the Physical Drive for which Trap is Generated.')
rtOldDriveState = MibScalar((1, 3, 6, 1, 4, 1, 16, 1, 1, 200, 1005), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtOldDriveState.setStatus('mandatory')
if mibBuilder.loadTexts: rtOldDriveState.setDescription('Old State of Logical/Physical Drive, when a State Change Trap is Generated.')
rtNewDriveState = MibScalar((1, 3, 6, 1, 4, 1, 16, 1, 1, 200, 1006), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtNewDriveState.setStatus('mandatory')
if mibBuilder.loadTexts: rtNewDriveState.setDescription('New State of Logical/Physical Drive, when a State Change Trap is Generated.')
rtSenseKey = MibScalar((1, 3, 6, 1, 4, 1, 16, 1, 1, 200, 1007), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtSenseKey.setStatus('mandatory')
if mibBuilder.loadTexts: rtSenseKey.setDescription('Check Condition Sense-Key reported by Physical Drive for which Trap is Generated.')
rtASC = MibScalar((1, 3, 6, 1, 4, 1, 16, 1, 1, 200, 1008), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtASC.setStatus('mandatory')
if mibBuilder.loadTexts: rtASC.setDescription('Check Condition Additional Sense Code (ASC) reported by Physical Drive for which Trap is Generated.')
rtASCQ = MibScalar((1, 3, 6, 1, 4, 1, 16, 1, 1, 200, 1009), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtASCQ.setStatus('mandatory')
if mibBuilder.loadTexts: rtASCQ.setDescription('Check Condition Additional Sense Code Qualifier (ASCQ) reported by Physical Drive for which Trap is Generated.')
rtDriveVendor = MibScalar((1, 3, 6, 1, 4, 1, 16, 1, 1, 200, 1010), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtDriveVendor.setStatus('mandatory')
if mibBuilder.loadTexts: rtDriveVendor.setDescription('Vendor Identification String from the SCSI Inquiry Data for the Drive.')
rtConfigUpdated = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9001)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"))
if mibBuilder.loadTexts: rtConfigUpdated.setDescription('Adapter-%d: A New Configuration has been written.')
rtPhysicalDriveStateChange = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9002)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"), ("HPNSATRAP-MIB", "rtChannelNumber"), ("HPNSATRAP-MIB", "rtTargetID"), ("HPNSATRAP-MIB", "rtOldDriveState"), ("HPNSATRAP-MIB", "rtNewDriveState"))
if mibBuilder.loadTexts: rtPhysicalDriveStateChange.setDescription('Adapter-%d, Channel-%d, Target-%d: Drive State Changed from %s to %s.')
rtLogicalDriveStateChange = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9003)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"), ("HPNSATRAP-MIB", "rtLogicalDriveNumber"), ("HPNSATRAP-MIB", "rtOldDriveState"), ("HPNSATRAP-MIB", "rtNewDriveState"))
if mibBuilder.loadTexts: rtLogicalDriveStateChange.setDescription('Adapter-%d, Logical Drive-%d: State Changed from %s to %s.')
rtInitializeStarted = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9004)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"), ("HPNSATRAP-MIB", "rtLogicalDriveNumber"))
if mibBuilder.loadTexts: rtInitializeStarted.setDescription('Adapter-%d, Logical Drive-%d: Initialization Started.')
rtInitializeCompleted = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9005)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"), ("HPNSATRAP-MIB", "rtLogicalDriveNumber"))
if mibBuilder.loadTexts: rtInitializeCompleted.setDescription('Adapter-%d, Logical Drive-%d: Initialization Completed Successfully.')
rtInitializeAborted = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9006)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"), ("HPNSATRAP-MIB", "rtLogicalDriveNumber"))
if mibBuilder.loadTexts: rtInitializeAborted.setDescription('Adapter-%d, Logical Drive-%d: Initialization Aborted by User.')
rtInitializeFailed = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9007)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"), ("HPNSATRAP-MIB", "rtLogicalDriveNumber"))
if mibBuilder.loadTexts: rtInitializeFailed.setDescription('Adapter-%d, Logical Drive-%d: Initialization Failed.')
rtCheckConsistencyStarted = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9008)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"), ("HPNSATRAP-MIB", "rtLogicalDriveNumber"))
if mibBuilder.loadTexts: rtCheckConsistencyStarted.setDescription('Adapter-%d, Logical Drive-%d: Check Consistency Started.')
rtCheckConsistencyCompleted = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9009)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"), ("HPNSATRAP-MIB", "rtLogicalDriveNumber"))
if mibBuilder.loadTexts: rtCheckConsistencyCompleted.setDescription('Adapter-%d, Logical Drive-%d: Check Consistency Completed. No Inconsistencies Found.')
rtCheckConsistencyAborted = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9010)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"), ("HPNSATRAP-MIB", "rtLogicalDriveNumber"))
if mibBuilder.loadTexts: rtCheckConsistencyAborted.setDescription('Adapter-%d, Logical Drive-%d: Check Consistency Aborted by User.')
rtConsistencyCorrected = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9011)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"), ("HPNSATRAP-MIB", "rtLogicalDriveNumber"))
if mibBuilder.loadTexts: rtConsistencyCorrected.setDescription('Adapter-%d, Logical Drive-%d: Check Consistency Operation Completed. Inconsistencies have been Cured.')
rtCheckConsistencyFailed = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9012)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"), ("HPNSATRAP-MIB", "rtLogicalDriveNumber"))
if mibBuilder.loadTexts: rtCheckConsistencyFailed.setDescription('Adapter-%d, Logical Drive-%d: Check Consistency Failed.')
rtReconstructionStarted = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9013)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"), ("HPNSATRAP-MIB", "rtLogicalDriveNumber"))
if mibBuilder.loadTexts: rtReconstructionStarted.setDescription('Adapter-%d, Logical Drive-%d: Reconstruction Started.')
rtReconstructionCompleted = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9014)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"), ("HPNSATRAP-MIB", "rtLogicalDriveNumber"))
if mibBuilder.loadTexts: rtReconstructionCompleted.setDescription('Adapter-%d, Logical Drive-%d: Reconstruction Completed Successfully.')
rtReconstructionFailed = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9015)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"), ("HPNSATRAP-MIB", "rtLogicalDriveNumber"))
if mibBuilder.loadTexts: rtReconstructionFailed.setDescription('Adapter-%d, Logical Drive-%d: Reconstruction Failed.')
rtPredictiveFailuresFalse = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9016)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"), ("HPNSATRAP-MIB", "rtChannelNumber"), ("HPNSATRAP-MIB", "rtTargetID"), ("HPNSATRAP-MIB", "rtDriveVendor"), ("HPNSATRAP-MIB", "rtSenseKey"), ("HPNSATRAP-MIB", "rtASC"), ("HPNSATRAP-MIB", "rtASCQ"))
if mibBuilder.loadTexts: rtPredictiveFailuresFalse.setDescription('Adapter-%d, Channel-%d, Target-%d: Reported Failure Prediction Threshold Exceeded [FALSE]. Drive Identification String = %s Sense Key = 0x%x, ASC = 0x%x, ASCQ = 0x%x.')
rtPredictiveFailuresExceeded = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9017)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"), ("HPNSATRAP-MIB", "rtChannelNumber"), ("HPNSATRAP-MIB", "rtTargetID"), ("HPNSATRAP-MIB", "rtDriveVendor"), ("HPNSATRAP-MIB", "rtSenseKey"), ("HPNSATRAP-MIB", "rtASC"), ("HPNSATRAP-MIB", "rtASCQ"))
if mibBuilder.loadTexts: rtPredictiveFailuresExceeded.setDescription('Adapter-%d, Channel-%d, Target-%d: Reported Predictive Failure. Drive Identification String = %s Sense Key = 0x%x, ASC = 0x%x, ASCQ = 0x%x.')
rtCheckConditionStatus = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9018)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"), ("HPNSATRAP-MIB", "rtChannelNumber"), ("HPNSATRAP-MIB", "rtTargetID"), ("HPNSATRAP-MIB", "rtSenseKey"), ("HPNSATRAP-MIB", "rtASC"), ("HPNSATRAP-MIB", "rtASCQ"))
if mibBuilder.loadTexts: rtCheckConditionStatus.setDescription('Adapter-%d, Channel-%d, Target-%d: Command Completed with Sense_Key-0x%x ASC-0x%x ASCQ-0x%x.')
rtNewDriveInserted = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9019)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"), ("HPNSATRAP-MIB", "rtChannelNumber"), ("HPNSATRAP-MIB", "rtTargetID"))
if mibBuilder.loadTexts: rtNewDriveInserted.setDescription('Adapter-%d, Channel-%d, Target-%d: New Device Inserted.')
rtBatteryMissing = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9020)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"))
if mibBuilder.loadTexts: rtBatteryMissing.setDescription('Adapter-%d: Battery Module is missing.')
rtBatteryVolatageLow = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9021)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"))
if mibBuilder.loadTexts: rtBatteryVolatageLow.setDescription('Adapter-%d: Battery Module Voltage is Low.')
rtBatteryTemperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9022)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"))
if mibBuilder.loadTexts: rtBatteryTemperatureHigh.setDescription('Adapter-%d: Battery Module Temperature Exceeded Danger Threshold.')
mibBuilder.exportSymbols("HPNSATRAP-MIB", cycLun=cycLun, hpnsaEccMultiBitError=hpnsaEccMultiBitError, hpnsaScsiStatusDeviceDiscovered=hpnsaScsiStatusDeviceDiscovered, hpnsaNicTxNoResources=hpnsaNicTxNoResources, rtCheckConsistencyAborted=rtCheckConsistencyAborted, hpnsaRPSDCShutdown=hpnsaRPSDCShutdown, rtCheckConsistencyFailed=rtCheckConsistencyFailed, hpnsaNicAdapterReset=hpnsaNicAdapterReset, cycDeviceChanged=cycDeviceChanged, hpnsaDaSoftErrorThresholdTrap=hpnsaDaSoftErrorThresholdTrap, hpnsaHotSwapPowerFailure=hpnsaHotSwapPowerFailure, hpnsaNicRxLow=hpnsaNicRxLow, cycPredictiveFailure=cycPredictiveFailure, hpnsaSystemWarning=hpnsaSystemWarning, hpnsaDaMiscThresholdTrap=hpnsaDaMiscThresholdTrap, hpnsaNicTimedOutDMA=hpnsaNicTimedOutDMA, hpnsaNicGiantFrameErrors=hpnsaNicGiantFrameErrors, hpnsaNicDeferralError=hpnsaNicDeferralError, hpnsaRAIllegalLogin=hpnsaRAIllegalLogin, hpnsaStorageCapMajor=hpnsaStorageCapMajor, hpnsaASRServerRestart=hpnsaASRServerRestart, hpnsaRAInitServerBIOS=hpnsaRAInitServerBIOS, cycMisCompares=cycMisCompares, hpnsaRATempShutdown=hpnsaRATempShutdown, hpnsaNicAlignmentErrors=hpnsaNicAlignmentErrors, hpnsaRAASRServerRestart=hpnsaRAASRServerRestart, hpnsaRABusUtilization=hpnsaRABusUtilization, hpnsaRAAdministratorConnectionLost=hpnsaRAAdministratorConnectionLost, cycAspiBadFileMagic=cycAspiBadFileMagic, hpnsaDaLogicalDriveTrap=hpnsaDaLogicalDriveTrap, rtInitializeStarted=rtInitializeStarted, hpnsaScsiStatusDeviceRecovered=hpnsaScsiStatusDeviceRecovered, cycAspiNoDeviceFile=cycAspiNoDeviceFile, rtDriveVendor=rtDriveVendor, hpnsaNicHardwareMismatch=hpnsaNicHardwareMismatch, hpnsaRAVoltPlus5VUpper=hpnsaRAVoltPlus5VUpper, rtReconstructionCompleted=rtReconstructionCompleted, hpnsaNicCarrierSenseError=hpnsaNicCarrierSenseError, hpnsaECC=hpnsaECC, hpnsaNicRxFalseInterrupts=hpnsaNicRxFalseInterrupts, hpnsaRPSPsuInserted=hpnsaRPSPsuInserted, hpnsaNicExcessiveCollision=hpnsaNicExcessiveCollision, hpnsaEccMemoryResize=hpnsaEccMemoryResize, cycAspiNoMemoryReading=cycAspiNoMemoryReading, rtSenseKey=rtSenseKey, hpnsaHotSwapDeviceInserted=hpnsaHotSwapDeviceInserted, storagemanagement=storagemanagement, hpnsaNicTransmitErrors=hpnsaNicTransmitErrors, hpnsaRARemoteInitiatedReset=hpnsaRARemoteInitiatedReset, hpnsaRABoardShutDown=hpnsaRABoardShutDown, cycDuplicateHostAdapter=cycDuplicateHostAdapter, rtReconstructionStarted=rtReconstructionStarted, cycHostAdapterNumber=cycHostAdapterNumber, cycManagerID=cycManagerID, hpnsaRemoteAssist=hpnsaRemoteAssist, hpnsaTempTrapWarning=hpnsaTempTrapWarning, cycTraps=cycTraps, cycManager=cycManager, cycAspiCrash=cycAspiCrash, cyclone=cyclone, rtReconstructionFailed=rtReconstructionFailed, raidTraps=raidTraps, rtPredictiveFailuresExceeded=rtPredictiveFailuresExceeded, cycAspiNoMemory=cycAspiNoMemory, hp=hp, hpnsaScsiStatusChangedHBA=hpnsaScsiStatusChangedHBA, hpnsaRAAdministratorAutologout=hpnsaRAAdministratorAutologout, hpnsaErrorLoggingDisabled=hpnsaErrorLoggingDisabled, hpnsaRAAdminstratorLogout=hpnsaRAAdminstratorLogout, hpnsaScsiStatusUnloadedNLM=hpnsaScsiStatusUnloadedNLM, rtBatteryMissing=rtBatteryMissing, rtASCQ=rtASCQ, adaptecNm=adaptecNm, cycAspiFileWriteOpenError=cycAspiFileWriteOpenError, rtOldDriveState=rtOldDriveState, cycProduct=cycProduct, hpnsaScsiStatusDeviceChanged=hpnsaScsiStatusDeviceChanged, hpnsaHotSwapTempMonitorError=hpnsaHotSwapTempMonitorError, hpnsaNicRxFIFOOverrun=hpnsaNicRxFIFOOverrun, hpnsaRAVoltPlus3VLower=hpnsaRAVoltPlus3VLower, hpnsaRAVoltPlus5VLower=hpnsaRAVoltPlus5VLower, hpNetRaidMib=hpNetRaidMib, hpnsaHotSwapTempWarning=hpnsaHotSwapTempWarning, hpnsaDaLogicalDriveNotAvailable=hpnsaDaLogicalDriveNotAvailable, hpnsaRPSAbnormalCondition=hpnsaRPSAbnormalCondition, hpnsaRPSWarningExceeded=hpnsaRPSWarningExceeded, cycControllerModel=cycControllerModel, hpnsaBusTimeoutError=hpnsaBusTimeoutError, hpnsaNicUtilCount=hpnsaNicUtilCount, hpnsaRALowBatteryCharge=hpnsaRALowBatteryCharge, hpnsaEccSBEOverflow=hpnsaEccSBEOverflow, cycDeviceFailed=cycDeviceFailed, hpnsaSystemReconfig=hpnsaSystemReconfig, cycArrayName=cycArrayName, hpnsaIOChannelCheck=hpnsaIOChannelCheck, hpnsaRAVoltPlus12VLower=hpnsaRAVoltPlus12VLower, hpnsaRPSEmergencyExceeded=hpnsaRPSEmergencyExceeded, cycDeviceDiscovered=cycDeviceDiscovered, hpnsaRATempCritical=hpnsaRATempCritical, cycHostAdapterChanged=cycHostAdapterChanged, hpnsaDaHardwareThresholdTrap=hpnsaDaHardwareThresholdTrap, hpnsaRATestNotification=hpnsaRATestNotification, cycSNMPAgentIsDown=cycSNMPAgentIsDown, hpnsaNicReceiveErrors=hpnsaNicReceiveErrors, hpnsaNicRxEmpty=hpnsaNicRxEmpty, hpnsaDaHotSpareFailure=hpnsaDaHotSpareFailure, hpnsaTempTrapEmergency=hpnsaTempTrapEmergency, cycAspiFileReadError=cycAspiFileReadError, hpnsaScsiStatusCorruptedDB=hpnsaScsiStatusCorruptedDB, cycHostAdapterRecovered=cycHostAdapterRecovered, cycAspiDatabaseCleared=cycAspiDatabaseCleared, hpnsaCPUFailure=hpnsaCPUFailure, hpnsaTempMonitorError=hpnsaTempMonitorError, cycPriority=cycPriority, hpnsaRATempWarning=hpnsaRATempWarning, hpnsaNicPagingError=hpnsaNicPagingError, hpnsaRAASRTimerEnabled=hpnsaRAASRTimerEnabled, hpnsaScsiStatusFailedHBA=hpnsaScsiStatusFailedHBA, hpnsaScsiStatusRecoveredHBA=hpnsaScsiStatusRecoveredHBA, cycDeviceRecovered=cycDeviceRecovered, hpnsaStorageCapMinor=hpnsaStorageCapMinor, hpnsaRATAPParam1Error=hpnsaRATAPParam1Error, rtBatteryVolatageLow=rtBatteryVolatageLow, nm=nm, hpnsaRPSACPowerSourceFailure=hpnsaRPSACPowerSourceFailure, cycHostAdapterID=cycHostAdapterID, cycSenseInfo=cycSenseInfo, rtPredictiveFailuresFalse=rtPredictiveFailuresFalse, hpnsaRARemoteInitiatedPowerDown=hpnsaRARemoteInitiatedPowerDown, hpnsaDaParityThresholdTrap=hpnsaDaParityThresholdTrap, hpnsaScsiStatusDeviceTimeout=hpnsaScsiStatusDeviceTimeout, cycVendor=cycVendor, adaptecNmScsiStatus=adaptecNmScsiStatus, hpnsaNicNoECBError=hpnsaNicNoECBError, hpnsaRAASRHangNOS=hpnsaRAASRHangNOS, cycHostAdapterDiscovered=cycHostAdapterDiscovered, rtTargetID=rtTargetID, hpnsaDaHotSpareSuccess=hpnsaDaHotSpareSuccess, hpnsaNicReceiveOverflow=hpnsaNicReceiveOverflow, hpnsaFailsafeTimeout=hpnsaFailsafeTimeout, hpnsaRAVoltPlus3VUpper=hpnsaRAVoltPlus3VUpper, hpnsaNicAdapterMismatch=hpnsaNicAdapterMismatch, hpnsaSystemCritical=hpnsaSystemCritical, hpnsaRAVoltMinus12VLower=hpnsaRAVoltMinus12VLower, hpnr=hpnr, hpnsaVoltEmergency=hpnsaVoltEmergency, cycDriver=cycDriver, hpnsaScsiStatusTimeoutHBA=hpnsaScsiStatusTimeoutHBA, rtAdapterNumber=rtAdapterNumber, adaptec=adaptec, hpnsaNicTxFIFOUnderrun=hpnsaNicTxFIFOUnderrun, rtInitializeCompleted=rtInitializeCompleted, hpnsaPostError=hpnsaPostError, hpnsaRATAPParam2Error=hpnsaRATAPParam2Error, hpNetRAID=hpNetRAID, hpnsaEccErrorCorrected=hpnsaEccErrorCorrected, hpnsaPciSystemError=hpnsaPciSystemError, hpnsaHotSwapTempEmergency=hpnsaHotSwapTempEmergency, hpnsaRAASRTimerDisabled=hpnsaRAASRTimerDisabled, hpnsaRAVoltBatteryLower=hpnsaRAVoltBatteryLower, hpnsaRARemoteInitiatedCtrlAltDel=hpnsaRARemoteInitiatedCtrlAltDel, hpnsaScsiStatusDeviceFailed=hpnsaScsiStatusDeviceFailed, rtLogicalDriveStateChange=rtLogicalDriveStateChange, cycNewArrayName=cycNewArrayName, cycScsiTargetID=cycScsiTargetID, rtNewDriveInserted=rtNewDriveInserted, hpnsaNicTxExcessiveFrags=hpnsaNicTxExcessiveFrags, hpnsaRAVoltMinus12VUpper=hpnsaRAVoltMinus12VUpper, hpnsaRATAPParam3Error=hpnsaRATAPParam3Error, rtCheckConditionStatus=rtCheckConditionStatus, rtChannelNumber=rtChannelNumber, hpnsaPciParityError=hpnsaPciParityError, rtInitializeAborted=rtInitializeAborted, hpnsaRATAPNoConnect=hpnsaRATAPNoConnect, rtConsistencyCorrected=rtConsistencyCorrected, rtNewDriveState=rtNewDriveState, hpnsaRAAdministratorDialbackFailed=hpnsaRAAdministratorDialbackFailed, rtConfigUpdated=rtConfigUpdated, hpnsaSoftwareNMI=hpnsaSoftwareNMI, cycChannelNumber=cycChannelNumber, cycHostAdapterFailed=cycHostAdapterFailed, rtCheckConsistencyCompleted=rtCheckConsistencyCompleted, hpnsaStorageCapWarning=hpnsaStorageCapWarning, cycBusNumber=cycBusNumber, hpnsaDaCacheError=hpnsaDaCacheError, hpnsaDaHardDiskFailure=hpnsaDaHardDiskFailure, cycSNMPAgentIsUp=cycSNMPAgentIsUp, rtInitializeFailed=rtInitializeFailed, hpnsaRPSPsuFailureDetected=hpnsaRPSPsuFailureDetected, hpnsaDaControllerTrap=hpnsaDaControllerTrap, rtBatteryTemperatureHigh=rtBatteryTemperatureHigh, hpnsaParityError=hpnsaParityError, hpnsaVoltWarning=hpnsaVoltWarning, rtCheckConsistencyStarted=rtCheckConsistencyStarted, hpnsaPostMemoryResize=hpnsaPostMemoryResize, rtPhysicalDriveStateChange=rtPhysicalDriveStateChange, hpnsaNicLateCollision=hpnsaNicLateCollision, hpnsaRPSPsuRemoved=hpnsaRPSPsuRemoved, hpnsaRPSPowerRestored=hpnsaRPSPowerRestored, rtLogicalDriveNumber=rtLogicalDriveNumber, hpnsa=hpnsa, hpnsaScsiStatusDiscoveredHBA=hpnsaScsiStatusDiscoveredHBA, rtASC=rtASC, hpnsaEccMultiBitErrorOverflow=hpnsaEccMultiBitErrorOverflow, cycOldArrayName=cycOldArrayName, hpnsaRASuccessfulLogin=hpnsaRASuccessfulLogin, hpnsaHotSwapDeviceRemoved=hpnsaHotSwapDeviceRemoved, hpnsaDiskSysDefects=hpnsaDiskSysDefects, hpnsaRAVoltPlus12VUpper=hpnsaRAVoltPlus12VUpper, hpnsaRAVoltServerPowerFailure=hpnsaRAVoltServerPowerFailure, cycAspiFileWriteError=cycAspiFileWriteError, hpnsaNicTxTimeOut=hpnsaNicTxTimeOut)
