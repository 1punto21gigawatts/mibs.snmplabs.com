#
# PySNMP MIB module CISCO-LWAPP-INTERFACE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LWAPP-INTERFACE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:05:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ModuleIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Bits, TimeTicks, Integer32, NotificationType, MibIdentifier, iso, Counter64, Counter32, ObjectIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Bits", "TimeTicks", "Integer32", "NotificationType", "MibIdentifier", "iso", "Counter64", "Counter32", "ObjectIdentity", "Unsigned32")
DisplayString, RowStatus, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "TruthValue")
ciscoLwappInterfaceMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 686))
ciscoLwappInterfaceMIB.setRevisions(('2012-05-30 00:00', '2010-08-22 00:00', '2009-01-09 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoLwappInterfaceMIB.setRevisionsDescriptions(('Added clInterfaceDhcpOpt82Enabled object. Added ciscoLwappInterfaceMIBComplianceRev02 module compliance. Added ciscoLwappInterfaceConfigGroupSup1 conformance group. Deprecated ciscoLwappInterfaceMIBComplianceRev01 module compliance.', 'Added the clInterfaceGroupsConfigTable table. Added the clInterfaceGroupsMappingTable table. Replaced ciscoLwappInterfaceMIBCompliance with ciscoLwappInterfaceMIBComplianceRev01. Added ciscoLwappInterfaceGroupConfigSup1 Group.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoLwappInterfaceMIB.setLastUpdated('201205300000Z')
if mibBuilder.loadTexts: ciscoLwappInterfaceMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoLwappInterfaceMIB.setContactInfo('Cisco Systems, Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS Email: cs-wnbu-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoLwappInterfaceMIB.setDescription("This MIB is intended to be implemented on all those devices operating as Central Controllers (CC) that terminate the Light Weight Access Point Protocol tunnel from Cisco Light-weight LWAPP Access Points. This MIB helps to manage the WLANs on the controller. The relationship between CC and the LWAPP APs can be depicted as followshe LWAPP tunnel exists between the controller and the APs. The MNs communicate with the APs through the protocol defined by the 802.11 standard. LWAPP APs, upon bootup, discover and join one of the controllers and the controller pushes the configuration, that includes the WLAN parameters, to the LWAPP APs. The APs then encapsulate all the 802.11 frames from wireless clients inside LWAPP frames and forward the LWAPP frames to the controller. GLOSSARY Access Point ( AP ) An entity that contains an 802.11 medium access control ( MAC ) and physical layer ( PHY ) interface and provides access to the distribution services via the wireless medium for associated clients. LWAPP APs encapsulate all the 802.11 frames in LWAPP frames and sends it to the controller to which it is logically connected to. Central Controller ( CC ) The central entity that terminates the LWAPP protocol tunnel from the LWAPP APs. Throughout this MIB, this entity also referred to as 'controller'. Light Weight Access Point Protocol ( LWAPP ) This is a generic protocol that defines the communication between the Access Points and the controllers. Mobile Node ( MN ) A roaming 802.11 wireless device in a wireless network associated with an access point. REFERENCE [1] Wireless LAN Medium Access Control ( MAC ) and Physical Layer ( PHY ) Specifications. [2] Draft-obara-capwap-lwapp-00.txt, IETF Light Weight Access Point Protocol")
ciscoLwappInterfaceMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 686, 0))
ciscoLwappInterfaceMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 686, 1))
ciscoLwappInterfaceMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 686, 2))
ciscoLwappInterfaceConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 686, 1, 1))
clInterfaceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 686, 1, 1, 1), )
if mibBuilder.loadTexts: clInterfaceConfigTable.setStatus('current')
if mibBuilder.loadTexts: clInterfaceConfigTable.setDescription('This table represents the configuration of all the interfaces, both the static and the dynamic interfaces, on the Wireless LAN Controller(WLC).')
clInterfaceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 686, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-INTERFACE-MIB", "clInterfaceName"))
if mibBuilder.loadTexts: clInterfaceConfigEntry.setStatus('current')
if mibBuilder.loadTexts: clInterfaceConfigEntry.setDescription('This represents an entry in the clInterfaceConfigTable. Each entry corresponds to an interface, indicated by clInterfaceName.')
clInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 686, 1, 1, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: clInterfaceName.setStatus('current')
if mibBuilder.loadTexts: clInterfaceName.setDescription('This object represents the name of the interface on the controller.')
clInterfaceWired = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 686, 1, 1, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clInterfaceWired.setStatus('current')
if mibBuilder.loadTexts: clInterfaceWired.setDescription('This object indicates whether the interface represented by clInterfaceName, will be used for the wireless clients that are connected to the WLC or will be used for the wired clients connected to the WLC.')
clInterfaceQuarantineVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 686, 1, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clInterfaceQuarantineVlanId.setStatus('current')
if mibBuilder.loadTexts: clInterfaceQuarantineVlanId.setDescription('This object represents the quarantine vlan id of the interface. If the value is zero,then it means the interface is non-quarantine and the client traffic through this interface need not pass through any security checks. If the value is non-zero, then it means the interface is quarantine and the client traffic through this interface should pass through the security check and there should be an access vlan mapped to this quarantine vlan id, in the security device.')
clInterfaceDhcpOpt82Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 686, 1, 1, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clInterfaceDhcpOpt82Enabled.setStatus('current')
if mibBuilder.loadTexts: clInterfaceDhcpOpt82Enabled.setDescription('This object indicates whether the interface represented by clInterfaceName, has DHCP Option 82 enabled on it or not.')
clInterfaceGroupsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 686, 1, 1, 2), )
if mibBuilder.loadTexts: clInterfaceGroupsConfigTable.setStatus('current')
if mibBuilder.loadTexts: clInterfaceGroupsConfigTable.setDescription('This table is used to maintain the interface groups. An interface group is a logical grouping of interfaces with unique VLAN ids.')
clInterfaceGroupsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 686, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-LWAPP-INTERFACE-MIB", "clInterfaceGroupName"))
if mibBuilder.loadTexts: clInterfaceGroupsConfigEntry.setStatus('current')
if mibBuilder.loadTexts: clInterfaceGroupsConfigEntry.setDescription('This represents an entry in clInterfaceGroupsConfigTable. Entries can be added or deleted by explicit management action by NMS or by user console.')
clInterfaceGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 686, 1, 1, 2, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: clInterfaceGroupName.setStatus('current')
if mibBuilder.loadTexts: clInterfaceGroupName.setDescription('This object represents the name assigned to identify the interface group.')
clInterfaceGroupDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 686, 1, 1, 2, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clInterfaceGroupDescr.setStatus('current')
if mibBuilder.loadTexts: clInterfaceGroupDescr.setDescription('This object describes the interface group.')
clInterfaceGroupIsQuarantine = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 686, 1, 1, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clInterfaceGroupIsQuarantine.setStatus('current')
if mibBuilder.loadTexts: clInterfaceGroupIsQuarantine.setDescription("This object indicates whether the interface group has quarantine interfaces. A value of 'true' specifies the interface group has quarantine interfaces. A value of 'false' specifies the group has nonquarantine interfaces.")
clInterfaceGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 686, 1, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clInterfaceGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: clInterfaceGroupRowStatus.setDescription('This object is used to add or delete entries in clInterfaceGroupsConfigTable')
clInterfaceGroupsMappingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 686, 1, 1, 3), )
if mibBuilder.loadTexts: clInterfaceGroupsMappingTable.setStatus('current')
if mibBuilder.loadTexts: clInterfaceGroupsMappingTable.setDescription('This table represents the mapping between the interface and the interface group.')
clInterfaceGroupsMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 686, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-LWAPP-INTERFACE-MIB", "clInterfaceGroupName"), (0, "CISCO-LWAPP-INTERFACE-MIB", "clInterfaceName"))
if mibBuilder.loadTexts: clInterfaceGroupsMappingEntry.setStatus('current')
if mibBuilder.loadTexts: clInterfaceGroupsMappingEntry.setDescription('This represents an entry in clInterfaceGroupsMappingTable Entries can be added or deleted by explicit management action By NMS or by user console .')
clInterfaceGroupMappingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 686, 1, 1, 3, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clInterfaceGroupMappingRowStatus.setStatus('current')
if mibBuilder.loadTexts: clInterfaceGroupMappingRowStatus.setDescription('This object is used to add or delete entries in clInterfaceGroupsMappingTable')
ciscoLwappInterfaceMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 686, 2, 1))
ciscoLwappInterfaceMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 686, 2, 2))
ciscoLwappInterfaceMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 686, 2, 1, 1)).setObjects(("CISCO-LWAPP-INTERFACE-MIB", "ciscoLwappInterfaceConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappInterfaceMIBCompliance = ciscoLwappInterfaceMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappInterfaceMIBCompliance.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappInterfaceMIB module.')
ciscoLwappInterfaceMIBComplianceRev01 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 686, 2, 1, 2)).setObjects(("CISCO-LWAPP-INTERFACE-MIB", "ciscoLwappInterfaceConfigGroup"), ("CISCO-LWAPP-INTERFACE-MIB", "ciscoLwappInterfaceGroupConfigSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappInterfaceMIBComplianceRev01 = ciscoLwappInterfaceMIBComplianceRev01.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappInterfaceMIBComplianceRev01.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappInterfaceMIB module.')
ciscoLwappInterfaceMIBComplianceRev02 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 686, 2, 1, 3)).setObjects(("CISCO-LWAPP-INTERFACE-MIB", "ciscoLwappInterfaceConfigGroup"), ("CISCO-LWAPP-INTERFACE-MIB", "ciscoLwappInterfaceGroupConfigSup1"), ("CISCO-LWAPP-INTERFACE-MIB", "ciscoLwappInterfaceConfigGroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappInterfaceMIBComplianceRev02 = ciscoLwappInterfaceMIBComplianceRev02.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappInterfaceMIBComplianceRev02.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappInterfaceMIB module.')
ciscoLwappInterfaceConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 686, 2, 2, 1)).setObjects(("CISCO-LWAPP-INTERFACE-MIB", "clInterfaceWired"), ("CISCO-LWAPP-INTERFACE-MIB", "clInterfaceQuarantineVlanId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappInterfaceConfigGroup = ciscoLwappInterfaceConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappInterfaceConfigGroup.setDescription('This collection of objects represent the configuration of interfaces on the controller.')
ciscoLwappInterfaceGroupConfigSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 686, 2, 2, 2)).setObjects(("CISCO-LWAPP-INTERFACE-MIB", "clInterfaceGroupDescr"), ("CISCO-LWAPP-INTERFACE-MIB", "clInterfaceGroupIsQuarantine"), ("CISCO-LWAPP-INTERFACE-MIB", "clInterfaceGroupRowStatus"), ("CISCO-LWAPP-INTERFACE-MIB", "clInterfaceGroupMappingRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappInterfaceGroupConfigSup1 = ciscoLwappInterfaceGroupConfigSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappInterfaceGroupConfigSup1.setDescription('This collection of objects represent the configuration of interface groups on the controller.')
ciscoLwappInterfaceConfigGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 686, 2, 2, 3)).setObjects(("CISCO-LWAPP-INTERFACE-MIB", "clInterfaceDhcpOpt82Enabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappInterfaceConfigGroupSup1 = ciscoLwappInterfaceConfigGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappInterfaceConfigGroupSup1.setDescription('This collection of objects represent the configuration of interfaces on the controller.')
mibBuilder.exportSymbols("CISCO-LWAPP-INTERFACE-MIB", ciscoLwappInterfaceMIBNotifs=ciscoLwappInterfaceMIBNotifs, clInterfaceGroupDescr=clInterfaceGroupDescr, clInterfaceGroupIsQuarantine=clInterfaceGroupIsQuarantine, PYSNMP_MODULE_ID=ciscoLwappInterfaceMIB, clInterfaceDhcpOpt82Enabled=clInterfaceDhcpOpt82Enabled, ciscoLwappInterfaceMIBComplianceRev01=ciscoLwappInterfaceMIBComplianceRev01, ciscoLwappInterfaceMIBObjects=ciscoLwappInterfaceMIBObjects, ciscoLwappInterfaceMIBGroups=ciscoLwappInterfaceMIBGroups, ciscoLwappInterfaceMIBCompliances=ciscoLwappInterfaceMIBCompliances, clInterfaceGroupsConfigEntry=clInterfaceGroupsConfigEntry, ciscoLwappInterfaceMIBComplianceRev02=ciscoLwappInterfaceMIBComplianceRev02, ciscoLwappInterfaceMIBConform=ciscoLwappInterfaceMIBConform, clInterfaceGroupsConfigTable=clInterfaceGroupsConfigTable, clInterfaceGroupName=clInterfaceGroupName, ciscoLwappInterfaceGroupConfigSup1=ciscoLwappInterfaceGroupConfigSup1, clInterfaceConfigTable=clInterfaceConfigTable, ciscoLwappInterfaceMIB=ciscoLwappInterfaceMIB, clInterfaceQuarantineVlanId=clInterfaceQuarantineVlanId, clInterfaceGroupMappingRowStatus=clInterfaceGroupMappingRowStatus, clInterfaceWired=clInterfaceWired, clInterfaceGroupsMappingEntry=clInterfaceGroupsMappingEntry, clInterfaceName=clInterfaceName, clInterfaceConfigEntry=clInterfaceConfigEntry, clInterfaceGroupRowStatus=clInterfaceGroupRowStatus, ciscoLwappInterfaceMIBCompliance=ciscoLwappInterfaceMIBCompliance, ciscoLwappInterfaceConfigGroupSup1=ciscoLwappInterfaceConfigGroupSup1, ciscoLwappInterfaceConfig=ciscoLwappInterfaceConfig, clInterfaceGroupsMappingTable=clInterfaceGroupsMappingTable, ciscoLwappInterfaceConfigGroup=ciscoLwappInterfaceConfigGroup)
