#
# PySNMP MIB module HUAWEI-L2VLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-L2VLAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:45:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
hwBaseTrapSeverity, hwBaseTrapProbableCause, hwBaseTrapEventType = mibBuilder.importSymbols("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity", "hwBaseTrapProbableCause", "hwBaseTrapEventType")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
VlanIdOrNone, PortList, VlanIndex, VlanId = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIdOrNone", "PortList", "VlanIndex", "VlanId")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, ObjectIdentity, Counter64, Counter32, NotificationType, MibIdentifier, Integer32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Bits, iso, TimeTicks, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "ObjectIdentity", "Counter64", "Counter32", "NotificationType", "MibIdentifier", "Integer32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Bits", "iso", "TimeTicks", "Gauge32")
MacAddress, TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "RowStatus", "DisplayString")
hwL2Mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42))
hwL2Vlan = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3))
if mibBuilder.loadTexts: hwL2Vlan.setLastUpdated('200701121830Z')
if mibBuilder.loadTexts: hwL2Vlan.setOrganization('Huawei Technologies co.,Ltd.')
if mibBuilder.loadTexts: hwL2Vlan.setContactInfo('VRP Team Huawei Technologies co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China http://www.huawei.com Zip:100085 ')
if mibBuilder.loadTexts: hwL2Vlan.setDescription('The L2Vlan MIB module is defined to manage several layer two function of Huawei Technologies co.,Ltd.')
hwL2VlanMngObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1))
hwL2VlanBase = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 1))
hwL2VlanApply = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2))
hwL2VlanStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3))
hwL2VlanMIBTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 1, 1), )
if mibBuilder.loadTexts: hwL2VlanMIBTable.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMIBTable.setDescription('The table contains basic information for this vlan.')
hwL2VlanMIBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 1, 1, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2VlanIndex"))
if mibBuilder.loadTexts: hwL2VlanMIBEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMIBEntry.setDescription('Entries of vlan MIB table.')
hwL2VlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 1, 1, 1, 1), VlanId())
if mibBuilder.loadTexts: hwL2VlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanIndex.setDescription('The vlan-id or other identifier referring to this vlan.')
hwL2VlanDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanDescr.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanDescr.setDescription('Description of the vlan.')
hwL2VlanPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 1, 1, 1, 3), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanPortList.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanPortList.setDescription('The set of Ports which belong to the vlan.')
hwL2VlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("superVlan", 1), ("commonVlan", 2), ("subVlan", 3), ("muxVlan", 4), ("muxSubVlan", 5), ("protocolTransVlan", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanType.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanType.setDescription("Change the value from '2' to '1' indicates that the common-vlan is configured into super-vlan; Change the value from '1' to '2' indicates that the super-vlan is canceled; Change the value from '2' to '4' indicates that the common-vlan is configured into mux-vlan; Change the value from '4' to '2' indicates that the mux-vlan is canceled; Change the value from '2' to '6' indicates that the common-vlan is configured into protocol-transparent-vlan; Change the value from '6' to '2' indicates that the protocol-transparent-vlan is canceled; Note that the switch between other pairs is forbidden.")
hwL2VlanUnknownUnicastProcessing = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("broadcast", 1), ("discard", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanUnknownUnicastProcessing.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanUnknownUnicastProcessing.setDescription("Whether to broadcast the unknown unicast packets when ports receive it. broadcast(1) indicates broadcast the packets, discard(2) indicates it's closed. Default value is broadcast(1).")
hwL2VlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2VlanIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanIfIndex.setDescription(' Whether vlan interface is configured on vlan. If vlan interface is configured, the value of the node is InterfaceIndex, else the value is -1. ')
hwL2VlanMacLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 1, 1, 1, 7), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanMacLearn.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMacLearn.setDescription('The value indicates whether the MAC address learning is opened. The value enabled(1) indicates learning is allowed. Just the common vlan and Sub-vlan have the attribute. Default value is enabled(1).')
hwL2VlanMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 1, 1, 1, 8), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2VlanMulticast.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMulticast.setDescription("The value enabled(1) indicates vlan Multicasting is allowed; disable(2) indicates it's closed. The default value is disable(2).")
hwL2VlanAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 1, 1, 1, 9), EnabledStatus().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanAdminStatus.setDescription('Value disable(2) indicates shutdown the vlan; enabled(1) indicates open the vlan.')
hwL2VlanStatisStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 1, 1, 1, 10), EnabledStatus().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanStatisStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStatisStatus.setDescription("The value enabled(1) indicates Statistics on vlan are allowed; disable(2) indicates aren't. The default value is disable(2).")
hwL2VlanCreateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("static", 2), ("dynamic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2VlanCreateStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanCreateStatus.setDescription('The status indicates how the vlan is created, static configured by management or created dynamicly by GVRP.')
hwL2VlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 1, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanRowStatus.setDescription('Operation status.')
hwL2VlanBcast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 1, 1, 1, 13), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanBcast.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanBcast.setDescription("Whether to broadcast the broadcast packets when ports receive it. enabled(1) indicates broadcast the packets,disable(2) indicates it'll discard the broadcast packet. Default value is enabled(1).")
hwL2VlanUnknownMulticastProcessing = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("broadcast", 1), ("discard", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanUnknownMulticastProcessing.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanUnknownMulticastProcessing.setDescription("Whether to broadcast the unknown multicast packets when ports receive it. broadcast(1) indicates broadcast the packet, discard(2) indicates it'll discard the unknow multicast packet. Default value is broadcast(1).")
hwL2VlanProperty = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("default", 1), ("backboneVlan", 2), ("mutilcastVlan", 3), ("userVlan", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2VlanProperty.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanProperty.setDescription("The Property of Vlan: backboneVlan(2) used by PBT application, mutilcastVlan(3) used by Mutilcast Vlan, userVlan(4) used by users' vlan, and Default(1) means no special apply.")
hwL2VlanAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(60, 1000000), ValueRangeConstraint(0, 0), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanAgingTime.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanAgingTime.setDescription("The aging time of MAC entry that associated with the vlan.'0' means will be never aged,'-1' means aging-time is not configured to the vlan.")
hwL2VlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 1, 1, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanName.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanName.setDescription('Name of the vlan.')
hwL2VlanSmartMacLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 1, 1, 1, 18), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanSmartMacLearn.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSmartMacLearn.setDescription('The value indicates whether the MAC address learning is opened, when the number of the port which is up state and belonging to the vlan is below and equal to two. The value enabled(1) indicates learning is not allowed, when the number of the port which is up state and belonging to the vlan is below and equal to two. Just the common vlan and Sub-vlan have the attribute. Default value is disable(0).')
hwL2VlanServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 1, 1, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanServiceName.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanServiceName.setDescription('Service name of the vlan.')
hwL2VlanManagementVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 1, 1, 1, 20), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanManagementVlan.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanManagementVlan.setDescription('If the VLAN is management VLAN.')
hwL2VlanDynamicVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 1, 1, 1, 21), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2VlanDynamicVlan.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanDynamicVlan.setDescription('If the VLAN is dynamic VLAN.')
hwL2VlanStackingTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 1), )
if mibBuilder.loadTexts: hwL2VlanStackingTable.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingTable.setDescription('QinQ-port configuration table.')
hwL2VlanStackingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 1, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2VlanStackingPortIndex"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanStackingInsideVlanId"))
if mibBuilder.loadTexts: hwL2VlanStackingEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingEntry.setDescription('QinQ-port configuration table.')
hwL2VlanStackingPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hwL2VlanStackingPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingPortIndex.setDescription('Index number of QinQ-port.')
hwL2VlanStackingInsideVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 1, 1, 2), VlanId())
if mibBuilder.loadTexts: hwL2VlanStackingInsideVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingInsideVlanId.setDescription('Inside vlan-id of QinQ-port, use it as the Index.')
hwL2VlanStackingOutsideVlanListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanStackingOutsideVlanListLow.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingOutsideVlanListLow.setDescription('The possible value of the outside vlan-id list.')
hwL2VlanStackingOutsideVlanListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanStackingOutsideVlanListHigh.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingOutsideVlanListHigh.setDescription('The possible value of the outside vlan-id list.')
hwL2VlanStackingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanStackingRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingRowStatus.setDescription('This table can be created.')
hwL2VlanMappingTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 2), )
if mibBuilder.loadTexts: hwL2VlanMappingTable.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMappingTable.setDescription('Configuration table.')
hwL2VlanMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 2, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2VlanMappingPortIndex"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanMappingInsideVlanId"))
if mibBuilder.loadTexts: hwL2VlanMappingEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMappingEntry.setDescription('QinQ-port configuration table.')
hwL2VlanMappingPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hwL2VlanMappingPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMappingPortIndex.setDescription('Index number of QinQ-port.')
hwL2VlanMappingInsideVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 2, 1, 2), VlanId())
if mibBuilder.loadTexts: hwL2VlanMappingInsideVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMappingInsideVlanId.setDescription('Inside vlan-id of QinQ-port ,use it as the Index.')
hwL2VlanMappingOutsideVlanListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanMappingOutsideVlanListLow.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMappingOutsideVlanListLow.setDescription('The possible value of the outside vlan-id list.')
hwL2VlanMappingOutsideVlanListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanMappingOutsideVlanListHigh.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMappingOutsideVlanListHigh.setDescription('The possible value of the outside vlan-id list.')
hwL2VlanMappingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanMappingRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMappingRowStatus.setDescription('This table can be created.')
hwSuperVlanTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 3), )
if mibBuilder.loadTexts: hwSuperVlanTable.setStatus('current')
if mibBuilder.loadTexts: hwSuperVlanTable.setDescription('The table contains configuration and control information for the super vlan.')
hwSuperVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 3, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwSuperVlanId"))
if mibBuilder.loadTexts: hwSuperVlanEntry.setStatus('current')
if mibBuilder.loadTexts: hwSuperVlanEntry.setDescription('Entries of the super vlan table.')
hwSuperVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 3, 1, 1), VlanId())
if mibBuilder.loadTexts: hwSuperVlanId.setStatus('current')
if mibBuilder.loadTexts: hwSuperVlanId.setDescription('The super vlan-id.')
hwSubVlanListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSubVlanListLow.setStatus('current')
if mibBuilder.loadTexts: hwSubVlanListLow.setDescription('The lowest possible value of the sub vlan list on the supervlan.')
hwSubVlanListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSubVlanListHigh.setStatus('current')
if mibBuilder.loadTexts: hwSubVlanListHigh.setDescription('The highest possible value of the sub vlan list on the supervlan.')
hwL2InterfIsolateTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 4), )
if mibBuilder.loadTexts: hwL2InterfIsolateTable.setStatus('current')
if mibBuilder.loadTexts: hwL2InterfIsolateTable.setDescription('The table contains configuration and control information for interfaces isolate.')
hwL2InterfIsolateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 4, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2InterfIsolateVlanId"))
if mibBuilder.loadTexts: hwL2InterfIsolateEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2InterfIsolateEntry.setDescription('Secondary vlan lists of Isolate-vlans.')
hwL2InterfIsolateVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 4, 1, 1), VlanId())
if mibBuilder.loadTexts: hwL2InterfIsolateVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2InterfIsolateVlanId.setDescription('vlan-id. The vlan into which interf-isolate is configured.')
hwL2InterfIsolateInterflistLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(65, 65)).setFixedLength(65)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2InterfIsolateInterflistLow.setStatus('current')
if mibBuilder.loadTexts: hwL2InterfIsolateInterflistLow.setDescription('The lowest possible value of Interface list on the vlan.')
hwL2InterfIsolateInterflistHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(65, 65)).setFixedLength(65)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2InterfIsolateInterflistHigh.setStatus('current')
if mibBuilder.loadTexts: hwL2InterfIsolateInterflistHigh.setDescription('The highest possible value of Interface list on the vlan.')
hwL2IsolatemappingTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 5), )
if mibBuilder.loadTexts: hwL2IsolatemappingTable.setStatus('current')
if mibBuilder.loadTexts: hwL2IsolatemappingTable.setDescription('The table contains mapping information between isolated ports.')
hwL2IsolatemappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 5, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2IsolatemappingPortNum"))
if mibBuilder.loadTexts: hwL2IsolatemappingEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2IsolatemappingEntry.setDescription(' ')
hwL2IsolatemappingPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hwL2IsolatemappingPortNum.setStatus('current')
if mibBuilder.loadTexts: hwL2IsolatemappingPortNum.setDescription('Port number.')
hwL2IsolateInterflistLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IsolateInterflistLow.setStatus('current')
if mibBuilder.loadTexts: hwL2IsolateInterflistLow.setDescription('The lowest possible value of Interface list.')
hwL2IsolateInterflistHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IsolateInterflistHigh.setStatus('current')
if mibBuilder.loadTexts: hwL2IsolateInterflistHigh.setDescription('The highest possible value of Interface.')
hwL2VlanStackingExtTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 6), )
if mibBuilder.loadTexts: hwL2VlanStackingExtTable.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingExtTable.setDescription(' ')
hwL2VlanStackingExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 6, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2VlanStackingExtPortIndex"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanStackingExtVlanId"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanStackingExtAction"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanStackingExtDirection"))
if mibBuilder.loadTexts: hwL2VlanStackingExtEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingExtEntry.setDescription(' ')
hwL2VlanStackingExtPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwL2VlanStackingExtPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingExtPortIndex.setDescription('Configured QinQ-Port Index.')
hwL2VlanStackingExtVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 6, 1, 2), VlanIdOrNone())
if mibBuilder.loadTexts: hwL2VlanStackingExtVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingExtVlanId.setDescription('This vlan-id need be poped or pushed in interface.')
hwL2VlanStackingExtAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pop", 1), ("push", 2))))
if mibBuilder.loadTexts: hwL2VlanStackingExtAction.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingExtAction.setDescription('The packet will be poped or pushed.')
hwL2VlanStackingExtDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inside", 1), ("outside", 2))))
if mibBuilder.loadTexts: hwL2VlanStackingExtDirection.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingExtDirection.setDescription('The direction which the packet need be poped or pushed. That is, the packet is receviced or transitted.')
hwL2VlanStackingExtVlanListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanStackingExtVlanListLow.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingExtVlanListLow.setDescription('If hwL2VlanStackingBothAction is pop, the packet which has hwL2VlanStackingBothPopOrPushVlanId will be taken tag away. If hwL2VlanStackingBothAction is push, the packet will be added tag which is hwL2VlanStackingBothPopOrPushVlanId.')
hwL2VlanStackingExtVlanListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 6, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanStackingExtVlanListHigh.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingExtVlanListHigh.setDescription('If hwL2VlanStackingBothAction is pop, the packet which has hwL2VlanStackingBothPopOrPushVlanId will be taken tag away. If hwL2VlanStackingBothAction is push, the packet will be added tag which is hwL2VlanStackingBothPopOrPushVlanId.')
hwL2VlanStackingExtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 6, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanStackingExtRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingExtRowStatus.setDescription('This table can be created.')
hwL2VlanStackingExtPriorityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("priorityInherit", 1), ("remark8021p", 2))).clone('priorityInherit')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanStackingExtPriorityMode.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingExtPriorityMode.setDescription("The priority mode of outer VLAN, the priority can be appointed or inherit from inner VLAN's priority.")
hwL2VlanStackingExtVlan8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanStackingExtVlan8021p.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingExtVlan8021p.setDescription("The 8021p of outer VLAN ID after pushing, it's an optional field, its default value is 0.")
hwL2VlanQinQTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 7), )
if mibBuilder.loadTexts: hwL2VlanQinQTable.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanQinQTable.setDescription('The table contains global view configuration information for Flexible QinQ.')
hwL2VlanQinQEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 7, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2VlanQinQIndex"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanQinQDirection"))
if mibBuilder.loadTexts: hwL2VlanQinQEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanQinQEntry.setDescription('Flexible QinQ configuration Entry.')
hwL2VlanQinQIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)))
if mibBuilder.loadTexts: hwL2VlanQinQIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanQinQIndex.setDescription('Index number of Flexible QinQ.')
hwL2VlanQinQDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2))))
if mibBuilder.loadTexts: hwL2VlanQinQDirection.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanQinQDirection.setDescription('Inbound or outbound direction for VPN instance.')
hwL2VlanQinQOutSideVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 7, 1, 3), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanQinQOutSideVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanQinQOutSideVlanId.setDescription('Outside vlan-id for ISP.')
hwL2VlanSysQinQRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 7, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanSysQinQRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSysQinQRowStatus.setDescription('The table contains interface view configuration information for Flexible QinQ.')
hwL2VlanInterfaceQinQTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 8), )
if mibBuilder.loadTexts: hwL2VlanInterfaceQinQTable.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanInterfaceQinQTable.setDescription('Interface view Flexible QinQ configuration table.')
hwL2VlanInterfaceQinQEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 8, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2VlanQinQInterfaceIndex"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanQinQIndex"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanQinQCVlanId"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanQinQDirection"))
if mibBuilder.loadTexts: hwL2VlanInterfaceQinQEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanInterfaceQinQEntry.setDescription('Interface view Flexible QinQ configuration entry.')
hwL2VlanQinQInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 8, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwL2VlanQinQInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanQinQInterfaceIndex.setDescription('Interface index.')
hwL2VlanQinQCVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 8, 1, 2), VlanId())
if mibBuilder.loadTexts: hwL2VlanQinQCVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanQinQCVlanId.setDescription('Client vlan-id.')
hwL2VlanQinQSVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 8, 1, 3), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanQinQSVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanQinQSVlanId.setDescription('Internet service provide vlan-id')
hwL2VlanQinQAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("push", 1), ("nop", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanQinQAction.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanQinQAction.setDescription('Action push or nop.')
hwL2VlanQinQNewCVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 8, 1, 5), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanQinQNewCVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanQinQNewCVlanId.setDescription('Replaced of new client vlan-id.')
hwL2VlanInterfaceQinQRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 8, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanInterfaceQinQRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanInterfaceQinQRowStatus.setDescription('This table can be created.')
hwL2DVlanMappingTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 9), )
if mibBuilder.loadTexts: hwL2DVlanMappingTable.setStatus('current')
if mibBuilder.loadTexts: hwL2DVlanMappingTable.setDescription('The table contains double Vlan-Mapping.')
hwL2DVlanMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 9, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2DVlanMappingInterfaceIndex"), (0, "HUAWEI-L2VLAN-MIB", "hwL2DVlanMappingExternalVlanId"), (0, "HUAWEI-L2VLAN-MIB", "hwL2DVlanMappingInternalVlanId"), (0, "HUAWEI-L2VLAN-MIB", "hwL2DVlanMappingDirection"))
if mibBuilder.loadTexts: hwL2DVlanMappingEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2DVlanMappingEntry.setDescription('The table contains double Vlan-Mapping entry.')
hwL2DVlanMappingInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 9, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwL2DVlanMappingInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2DVlanMappingInterfaceIndex.setDescription('Interface Index.')
hwL2DVlanMappingExternalVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 9, 1, 2), VlanId())
if mibBuilder.loadTexts: hwL2DVlanMappingExternalVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2DVlanMappingExternalVlanId.setDescription('Service vlan-id.')
hwL2DVlanMappingInternalVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 9, 1, 3), VlanId())
if mibBuilder.loadTexts: hwL2DVlanMappingInternalVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2DVlanMappingInternalVlanId.setDescription('Client vlan-id.')
hwL2DVlanMappingDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2))))
if mibBuilder.loadTexts: hwL2DVlanMappingDirection.setStatus('current')
if mibBuilder.loadTexts: hwL2DVlanMappingDirection.setDescription('Direction inbound and outbound.')
hwL2DVlanMappingMapExternalVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 9, 1, 5), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2DVlanMappingMapExternalVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2DVlanMappingMapExternalVlanId.setDescription('Replaced of new service vlan-id.')
hwL2DVlanMappingMapInternalVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 9, 1, 6), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2DVlanMappingMapInternalVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2DVlanMappingMapInternalVlanId.setDescription('Replaced of new client vlan-id.')
hwL2DVlanMappingAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("swap", 1), ("popExternalVlan", 2), ("drop", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2DVlanMappingAction.setStatus('current')
if mibBuilder.loadTexts: hwL2DVlanMappingAction.setDescription('Action drop, pop-externalvlan and swap.')
hwL2DVlanMappingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 9, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2DVlanMappingRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2DVlanMappingRowStatus.setDescription('Operation status.')
hwL2VlanMappingExtTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 10), )
if mibBuilder.loadTexts: hwL2VlanMappingExtTable.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMappingExtTable.setDescription('Configuration table.')
hwL2VlanMappingExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 10, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2VlanMappingExtPortIndex"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanMappingExtDirection"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanMappingExtVlanId"))
if mibBuilder.loadTexts: hwL2VlanMappingExtEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMappingExtEntry.setDescription('The table contains Vlan-Mapping entry.')
hwL2VlanMappingExtPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hwL2VlanMappingExtPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMappingExtPortIndex.setDescription('Port Index.')
hwL2VlanMappingExtDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2))))
if mibBuilder.loadTexts: hwL2VlanMappingExtDirection.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMappingExtDirection.setDescription('Direction inbound and outbound.')
hwL2VlanMappingExtVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 10, 1, 3), VlanId())
if mibBuilder.loadTexts: hwL2VlanMappingExtVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMappingExtVlanId.setDescription('The outside vlan-id.')
hwL2VlanMappingExtVlanListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 10, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanMappingExtVlanListLow.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMappingExtVlanListLow.setDescription('The possible value of the inside vlan list.')
hwL2VlanMappingExtVlanListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 10, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanMappingExtVlanListHigh.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMappingExtVlanListHigh.setDescription('The possible value of the inside vlan list.')
hwL2VlanMappingExtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 10, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanMappingExtRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMappingExtRowStatus.setDescription('This table can be created.')
hwL2VlanMappingExtPriorityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("priorityInherit", 1), ("remark8021p", 2))).clone('priorityInherit')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanMappingExtPriorityMode.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMappingExtPriorityMode.setDescription("The priority mode of outside VLAN after mapping, the priority can be appointed or inherit from inner VLAN's priority.")
hwL2VlanMappingExtVlan8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanMappingExtVlan8021p.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMappingExtVlan8021p.setDescription('The priority of outside VLAN after mapping, its default value is 0.')
hwL2VlanStackingAdvTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 11), )
if mibBuilder.loadTexts: hwL2VlanStackingAdvTable.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingAdvTable.setDescription('The table of advanced vlan stacking.')
hwL2VlanStackingAdvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 11, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2VlanStackingAdvPortIndex"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanStackingAdvOutside8021p"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanStackingAdvStackVlanId"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanStackingAdvStack8021p"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanStackingAdvMapVlanId"))
if mibBuilder.loadTexts: hwL2VlanStackingAdvEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingAdvEntry.setDescription('The entry of advanced vlan stacking table.')
hwL2VlanStackingAdvPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hwL2VlanStackingAdvPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingAdvPortIndex.setDescription('The Index of L2-Switch Interface.')
hwL2VlanStackingAdvOutside8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)))
if mibBuilder.loadTexts: hwL2VlanStackingAdvOutside8021p.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingAdvOutside8021p.setDescription('The 8021p value of vlan before stacked operation.')
hwL2VlanStackingAdvStackVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 11, 1, 3), VlanId())
if mibBuilder.loadTexts: hwL2VlanStackingAdvStackVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingAdvStackVlanId.setDescription('The outer vlan-id after stacked operation.')
hwL2VlanStackingAdvStack8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)))
if mibBuilder.loadTexts: hwL2VlanStackingAdvStack8021p.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingAdvStack8021p.setDescription("The 8021p of outer vlan-id after stacked, it's an optional field, if it is not selected, its value is 8.")
hwL2VlanStackingAdvMapVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 11, 1, 5), VlanIdOrNone())
if mibBuilder.loadTexts: hwL2VlanStackingAdvMapVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingAdvMapVlanId.setDescription('The possible value of the inner vlan after mapped operation.')
hwL2VlanStackingAdvOutsideVlanListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 11, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanStackingAdvOutsideVlanListLow.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingAdvOutsideVlanListLow.setDescription('The possible value of the CE-Vlan low list.')
hwL2VlanStackingAdvOutsideVlanListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 11, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanStackingAdvOutsideVlanListHigh.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingAdvOutsideVlanListHigh.setDescription('The possible value of the CE-Vlan high list.')
hwL2VlanStackingAdvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 11, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanStackingAdvRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingAdvRowStatus.setDescription('This table can be created.')
hwL2VlanMappingAdvTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 12), )
if mibBuilder.loadTexts: hwL2VlanMappingAdvTable.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMappingAdvTable.setDescription('The table of advanced vlan mapping.')
hwL2VlanMappingAdvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 12, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2VlanMappingAdvPortIndex"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanMappingAdvOutsideVlan8021p"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanMappingAdvMapVlanId"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanMappingAdvMapVlan8021p"))
if mibBuilder.loadTexts: hwL2VlanMappingAdvEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMappingAdvEntry.setDescription('The entry of advanced vlan mapping table.')
hwL2VlanMappingAdvPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hwL2VlanMappingAdvPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMappingAdvPortIndex.setDescription(' The index of L2-Switch port. ')
hwL2VlanMappingAdvOutsideVlan8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)))
if mibBuilder.loadTexts: hwL2VlanMappingAdvOutsideVlan8021p.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMappingAdvOutsideVlan8021p.setDescription(" The possible value of the CE-Vlan's 802.1p.")
hwL2VlanMappingAdvMapVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 12, 1, 3), VlanId())
if mibBuilder.loadTexts: hwL2VlanMappingAdvMapVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMappingAdvMapVlanId.setDescription('The mapped vlan-id, using it as the index.')
hwL2VlanMappingAdvMapVlan8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)))
if mibBuilder.loadTexts: hwL2VlanMappingAdvMapVlan8021p.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMappingAdvMapVlan8021p.setDescription("The 8021p of outer vlan-id after mapped, it's an optional field, if it is not selected, its value is 8.")
hwL2VlanMappingAdvOutsideVlanListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 12, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanMappingAdvOutsideVlanListLow.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMappingAdvOutsideVlanListLow.setDescription(' The possible value of the CE-Vlan low list ')
hwL2VlanMappingAdvOutsideVlanListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 12, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanMappingAdvOutsideVlanListHigh.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMappingAdvOutsideVlanListHigh.setDescription(' The possible value of the CE-Vlan high list.')
hwL2VlanMappingAdvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 12, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanMappingAdvRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMappingAdvRowStatus.setDescription(' This table can be created.')
hwL2VlanSwitchTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 13), )
if mibBuilder.loadTexts: hwL2VlanSwitchTable.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchTable.setDescription('The table to config the vlan switch.')
hwL2VlanSwitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 13, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2VlanSwitchIfIndex"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanSwitchOuterVlanId"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanSwitchInnerVlanId"))
if mibBuilder.loadTexts: hwL2VlanSwitchEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchEntry.setDescription('The entry of the vlan switch table.')
hwL2VlanSwitchIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 13, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwL2VlanSwitchIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchIfIndex.setDescription('The interface index.')
hwL2VlanSwitchOuterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 13, 1, 2), VlanIdOrNone())
if mibBuilder.loadTexts: hwL2VlanSwitchOuterVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchOuterVlanId.setDescription("The ID of the outer vlan tag(customer's tag).")
hwL2VlanSwitchInnerVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 13, 1, 3), VlanIdOrNone())
if mibBuilder.loadTexts: hwL2VlanSwitchInnerVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchInnerVlanId.setDescription('The ID of the inner vlan tag.')
hwL2VlanSwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("zeroToOne", 1), ("zeroToTwo", 2), ("oneToZero", 3), ("oneToOne", 4), ("oneToTwo", 5), ("twoToZero", 6), ("twoToOne", 7), ("twoToTwo", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanSwitchMode.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchMode.setDescription('The Mode of switch vlan operation, including the following case: 0 to 1, 0 to 2, 1 to 0, 1 to 1, 1 to 2, 2 to 0, 2 to 1, 2 to 2.')
hwL2VlanSwitchOuterSwitchVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 13, 1, 5), VlanIdOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanSwitchOuterSwitchVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchOuterSwitchVlanId.setDescription('The outer vlan-id after switched.')
hwL2VlanSwitchInnerSwitchVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 13, 1, 6), VlanIdOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanSwitchInnerSwitchVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchInnerSwitchVlanId.setDescription("The inner vlan-id after switched. 0 indicates it's not used.")
hwL2VlanSwitch8021pRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 13, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanSwitch8021pRemark.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitch8021pRemark.setDescription("The 8021p of outer vlan-id after switched, it's an optional field, if it is not selected, its value is 8.")
hwL2VlanSwitchOutIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 13, 1, 8), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanSwitchOutIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchOutIfIndex.setDescription('The out interface index.')
hwL2VlanSwitchMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 13, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanSwitchMtu.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchMtu.setDescription('The value of mtu.')
hwL2VlanSwitchMtuDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 13, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2VlanSwitchMtuDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchMtuDiscardPkts.setDescription('The number of discard packets.')
hwL2VlanSwitchMtuDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 13, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2VlanSwitchMtuDiscardBytes.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchMtuDiscardBytes.setDescription('The number of discard bytes.')
hwL2VlanSwitchMtuResetFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 13, 1, 12), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2VlanSwitchMtuResetFlag.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchMtuResetFlag.setDescription('The flag of reset the discard statistics.')
hwL2VlanSwitchMtuEnableFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 13, 1, 13), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2VlanSwitchMtuEnableFlag.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchMtuEnableFlag.setDescription('The flag of enable the discard statistics.')
hwL2VlanSwitchRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 13, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanSwitchRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchRowStatus.setDescription("Used for controlling the creation and deletion of this row. All writable objects in this row may be modified at any time. If a Network Management Application attempts to delete a conceptual row by setting this object to 'destroy' and there are one or more entries in hwL2VlanSwitchTable pointing to the row, the agent MUST also destroy the corresponding entries in hwL2VlanSwitchTable.")
hwL2VlanQinqVlanTransEnaTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 14), )
if mibBuilder.loadTexts: hwL2VlanQinqVlanTransEnaTable.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanQinqVlanTransEnaTable.setDescription('The table of QinQ VLAN translation enable.')
hwL2VlanQinqVlanTransEnaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 14, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2VlanQinqVlanTransEnaPortIndex"))
if mibBuilder.loadTexts: hwL2VlanQinqVlanTransEnaEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanQinqVlanTransEnaEntry.setDescription('The entry of QinQ VLAN translation enable.')
hwL2VlanQinqVlanTransEnaPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hwL2VlanQinqVlanTransEnaPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanQinqVlanTransEnaPortIndex.setDescription(' The index of L2-Switch port. ')
hwL2VlanQinqVlanTransEna = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 14, 1, 2), EnabledStatus().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanQinqVlanTransEna.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanQinqVlanTransEna.setDescription('Enable QinQ VLAN translation.')
hwL2VlanQinqVlanTransEnaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 14, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanQinqVlanTransEnaRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanQinqVlanTransEnaRowStatus.setDescription('This table can be created.')
hwL2VlanQinqVlanTransMissDropTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 15), )
if mibBuilder.loadTexts: hwL2VlanQinqVlanTransMissDropTable.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanQinqVlanTransMissDropTable.setDescription('The table of QinQ VLAN translation miss drop.')
hwL2VlanQinqVlanTransMissDropEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 15, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2VlanQinqVlanTransMissDropPortIndex"))
if mibBuilder.loadTexts: hwL2VlanQinqVlanTransMissDropEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanQinqVlanTransMissDropEntry.setDescription('The entry of QinQ VLAN translation miss drop.')
hwL2VlanQinqVlanTransMissDropPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hwL2VlanQinqVlanTransMissDropPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanQinqVlanTransMissDropPortIndex.setDescription(' The index of L2-Switch port. ')
hwL2VlanQinqVlanTransMissDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noDrop", 1), ("drop", 2))).clone('noDrop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanQinqVlanTransMissDrop.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanQinqVlanTransMissDrop.setDescription('Packets are dropped when a VLAN translation miss occurs.')
hwL2VlanQinqVlanTransMissDropRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 15, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanQinqVlanTransMissDropRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanQinqVlanTransMissDropRowStatus.setDescription('This table can be created.')
hwL2VlanViewMappingTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 16), )
if mibBuilder.loadTexts: hwL2VlanViewMappingTable.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanViewMappingTable.setDescription('The table of vlan-mapping at the VLAN view.')
hwL2VlanViewMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 16, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2VlanViewMappingVlanId"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanViewMappingDirection"))
if mibBuilder.loadTexts: hwL2VlanViewMappingEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanViewMappingEntry.setDescription('The table contains vlan-mapping at the VLAN view entry.')
hwL2VlanViewMappingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 16, 1, 1), VlanId())
if mibBuilder.loadTexts: hwL2VlanViewMappingVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanViewMappingVlanId.setDescription('The VLAN ID before mapping, using it as the index.')
hwL2VlanViewMappingDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2), ("both", 3))))
if mibBuilder.loadTexts: hwL2VlanViewMappingDirection.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanViewMappingDirection.setDescription('Direction inbound and outbound.')
hwL2VlanViewMappingMapVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 16, 1, 3), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanViewMappingMapVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanViewMappingMapVlanId.setDescription('The VLAN ID after mapping.')
hwL2VlanViewMappingPriorityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("priorityInherit", 1), ("remark8021p", 2))).clone('priorityInherit')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanViewMappingPriorityMode.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanViewMappingPriorityMode.setDescription('The priority mode: the priority can be remarked or inherit: 1: priority inherit 2: remark 8021p ')
hwL2VlanViewMappingVlan8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 16, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanViewMappingVlan8021p.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanViewMappingVlan8021p.setDescription('The priority after mapping, its default value is 0.')
hwL2VlanViewMappingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 16, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanViewMappingRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanViewMappingRowStatus.setDescription('Operation status.')
hwL2VlanStackingMaskTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 17), )
if mibBuilder.loadTexts: hwL2VlanStackingMaskTable.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingMaskTable.setDescription('The table of VLAN-stacking with Mask.')
hwL2VlanStackingMaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 17, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2VlanStackingMaskPortIndex"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanStackingMaskStackVlanId"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanStackingMaskStack8021p"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanStackingMaskAction"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanStackingMaskDirection"))
if mibBuilder.loadTexts: hwL2VlanStackingMaskEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingMaskEntry.setDescription('The entry of the table of VLAN-stacking with Mask. ')
hwL2VlanStackingMaskPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 17, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwL2VlanStackingMaskPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingMaskPortIndex.setDescription('The index of L2-Switch interface.')
hwL2VlanStackingMaskStackVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 17, 1, 2), VlanIdOrNone())
if mibBuilder.loadTexts: hwL2VlanStackingMaskStackVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingMaskStackVlanId.setDescription('The outer VLAN-ID after stacking operation.')
hwL2VlanStackingMaskStack8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 17, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)))
if mibBuilder.loadTexts: hwL2VlanStackingMaskStack8021p.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingMaskStack8021p.setDescription("The 8021p of outer VLAN-ID after stacking, it's an optional field, if it is not selected, its value is 8, means inherit the 8021p from inner tag.")
hwL2VlanStackingMaskAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pop", 1), ("push", 2))))
if mibBuilder.loadTexts: hwL2VlanStackingMaskAction.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingMaskAction.setDescription('The packet will be poped or pushed.')
hwL2VlanStackingMaskDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inside", 1), ("outside", 2), ("both", 3))))
if mibBuilder.loadTexts: hwL2VlanStackingMaskDirection.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingMaskDirection.setDescription('The direction which the packet need be poped or pushed, that is ,the packet is receviced or transitted')
hwL2VlanStackingMaskVlanListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 17, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanStackingMaskVlanListLow.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingMaskVlanListLow.setDescription('The possible value of the CE-VLAN low list.')
hwL2VlanStackingMaskVlanListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 17, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanStackingMaskVlanListHigh.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingMaskVlanListHigh.setDescription('The possible value of the CE-VLAN high list.')
hwL2VlanStackingMaskRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 17, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanStackingMaskRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingMaskRowStatus.setDescription('Operation status.')
hwL2VlanIpSubnetVlanTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 18), )
if mibBuilder.loadTexts: hwL2VlanIpSubnetVlanTable.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanIpSubnetVlanTable.setDescription('The table of VLAN assignment based on ip subnet.')
hwL2VlanIpSubnetVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 18, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2VlanIpSubnetVlanVlanId"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanIpSubnetVlanIpSubnetIndex"))
if mibBuilder.loadTexts: hwL2VlanIpSubnetVlanEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanIpSubnetVlanEntry.setDescription('The entry of the table of VLAN assignment based on ip subnet. ')
hwL2VlanIpSubnetVlanVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 18, 1, 1), VlanId())
if mibBuilder.loadTexts: hwL2VlanIpSubnetVlanVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanIpSubnetVlanVlanId.setDescription('The VLAN-ID after VLAN assignment based on ip subnet.')
hwL2VlanIpSubnetVlanIpSubnetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 18, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)))
if mibBuilder.loadTexts: hwL2VlanIpSubnetVlanIpSubnetIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanIpSubnetVlanIpSubnetIndex.setDescription('The index of ip subnet on this vlan, ranging from integer 1 to 12.')
hwL2VlanIpSubnetVlanIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 18, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanIpSubnetVlanIpAddress.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanIpSubnetVlanIpAddress.setDescription('The IpAddress based on vlan.')
hwL2VlanIpSubnetVlanIpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 18, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanIpSubnetVlanIpSubnetMask.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanIpSubnetVlanIpSubnetMask.setDescription('The IpAddress or Ip subnet mask.')
hwL2VlanIpSubnetVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 18, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanIpSubnetVlanPriority.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanIpSubnetVlanPriority.setDescription('The priority after vlan assignment based on ip subnet, its default value is 0.')
hwL2VlanIpSubnetVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 18, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanIpSubnetVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanIpSubnetVlanRowStatus.setDescription('Operation status.')
hwL2VlanMacVlanTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 19), )
if mibBuilder.loadTexts: hwL2VlanMacVlanTable.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMacVlanTable.setDescription('The table of VLAN assignment based on MAC.')
hwL2VlanMacVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 19, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2VlanMacVlanVlanId"))
if mibBuilder.loadTexts: hwL2VlanMacVlanEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMacVlanEntry.setDescription('The entry of the table of VLAN assignment based on MAC. ')
hwL2VlanMacVlanVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 19, 1, 1), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanMacVlanVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMacVlanVlanId.setDescription('mac-vlan.')
hwL2VlanMacVlanMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 19, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanMacVlanMac.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMacVlanMac.setDescription('The VLAN-ID after VLAN assignment based on mac.')
hwL2VlanMacVlanVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 19, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanMacVlanVlanPriority.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMacVlanVlanPriority.setDescription('The priority after vlan assignment based on mac, its default value is 0.')
hwL2VlanMacVlanMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 19, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanMacVlanMacRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMacVlanMacRowStatus.setDescription('Operation status.')
hwL2VlanProtocolVlanTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 20), )
if mibBuilder.loadTexts: hwL2VlanProtocolVlanTable.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanProtocolVlanTable.setDescription('The table of VLAN assignment based on protocol.')
hwL2VlanProtocolVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 20, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2VlanProtocolVlanVlanId"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanProtocolVlanProtocolIndex"))
if mibBuilder.loadTexts: hwL2VlanProtocolVlanEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanProtocolVlanEntry.setDescription('The entry of the table of VLAN assignment based on protocol. ')
hwL2VlanProtocolVlanVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 20, 1, 1), VlanId())
if mibBuilder.loadTexts: hwL2VlanProtocolVlanVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanProtocolVlanVlanId.setDescription('The VLAN-ID after VLAN assignment based on protocol.')
hwL2VlanProtocolVlanProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: hwL2VlanProtocolVlanProtocolIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanProtocolVlanProtocolIndex.setDescription('The index of protocol on vlan, ranging from integer 1 to 16')
hwL2VlanProtocolVlanProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 20, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanProtocolVlanProtocolType.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanProtocolVlanProtocolType.setDescription('Protocol type.')
hwL2VlanProtocolVlanEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("etherii", 1), ("snap", 2), ("llc", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanProtocolVlanEncapType.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanProtocolVlanEncapType.setDescription('Encap type, include ETHERII,SNAP,LLC.')
hwL2VlanProtocolVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 20, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanProtocolVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanProtocolVlanRowStatus.setDescription('Operation status.')
hwL2VlanPolicyVlanTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 21), )
if mibBuilder.loadTexts: hwL2VlanPolicyVlanTable.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanPolicyVlanTable.setDescription('The table of VLAN assignment based on strategy.')
hwL2VlanPolicyVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 21, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2VlanPolicyVlanVlanId"))
if mibBuilder.loadTexts: hwL2VlanPolicyVlanEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanPolicyVlanEntry.setDescription('The entry of the table of VLAN assignment based on strategy. ')
hwL2VlanPolicyVlanMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 21, 1, 1), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanPolicyVlanMac.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanPolicyVlanMac.setDescription('Support MAC+IP and MAC+IP+PORT.')
hwL2VlanPolicyVlanIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 21, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanPolicyVlanIp.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanPolicyVlanIp.setDescription('Support MAC+IP and MAC+IP+PORT.')
hwL2VlanPolicyVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 21, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanPolicyVlanPort.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanPolicyVlanPort.setDescription('Support MAC+IP+PORT.')
hwL2VlanPolicyVlanVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 21, 1, 4), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanPolicyVlanVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanPolicyVlanVlanId.setDescription('The VLAN-ID after VLAN assignment based on policy.')
hwL2VlanPolicyVlanVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 21, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanPolicyVlanVlanPriority.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanPolicyVlanVlanPriority.setDescription('The VLAN-ID after VLAN assignment based on policy.')
hwL2VlanPolicyVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 21, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanPolicyVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanPolicyVlanRowStatus.setDescription('Operation status.')
hwL2VlanVoiceVlanEnabledVlanId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2VlanVoiceVlanEnabledVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanVoiceVlanEnabledVlanId.setDescription('Indicates the global voice VLAN ID. Global voice VLAN is enabled if the value ranges from 1 to 4094; global voice VLAN is disabled if the value is 0.')
hwL2VlanVoiceVlanAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 43200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2VlanVoiceVlanAgingTime.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanVoiceVlanAgingTime.setDescription('Voice vlan aging time(in minute). The default value is 1440.')
hwL2VlanVoiceVlanSecurityMode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("security", 1), ("normal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2VlanVoiceVlanSecurityMode.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanVoiceVlanSecurityMode.setDescription('Voice vlan security mode status.')
hwL2VlanVoiceVlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 25), )
if mibBuilder.loadTexts: hwL2VlanVoiceVlanPortTable.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanVoiceVlanPortTable.setDescription(' A list of voice vlan mode entries.')
hwL2VlanVoiceVlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 25, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2VlanVoiceVlanPortIndex"))
if mibBuilder.loadTexts: hwL2VlanVoiceVlanPortEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanVoiceVlanPortEntry.setDescription(' An entry containing voice vlan mode information, which is applicable to a voice vlan enabled interface.')
hwL2VlanVoiceVlanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hwL2VlanVoiceVlanPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanVoiceVlanPortIndex.setDescription('The port index on which voice vlan is enabled.')
hwL2VlanVoiceVlanPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 25, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2VlanVoiceVlanPortEnable.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanVoiceVlanPortEnable.setDescription('Voice VLAN enable status at port .')
hwL2VlanVoiceVlanPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 25, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2VlanVoiceVlanPortMode.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanVoiceVlanPortMode.setDescription('Voice VLAN configuration mode status, 1 for auto, 2 for manual.')
hwL2VlanVoiceVlanPortLegacy = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 25, 1, 4), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2VlanVoiceVlanPortLegacy.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanVoiceVlanPortLegacy.setDescription("This flag is enabled. It indicates that the interworking with other vendors' equipment is enabled.")
hwL2VlanVoiceVlanPortSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 25, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("security", 1), ("normal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2VlanVoiceVlanPortSecurityMode.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanVoiceVlanPortSecurityMode.setDescription('Voice VLAN configuration security mode status, 1 for security, 2 for normal.')
hwL2VlanVoiceVlanOuiTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 26), )
if mibBuilder.loadTexts: hwL2VlanVoiceVlanOuiTable.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanVoiceVlanOuiTable.setDescription(' A table containing the MAC address which can be identified by voice vlan. ')
hwL2VlanVoiceVlanOuiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 26, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2VlanVoiceVlanOuiAddress"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanVoiceVlanOuiMask"))
if mibBuilder.loadTexts: hwL2VlanVoiceVlanOuiEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanVoiceVlanOuiEntry.setDescription(' An entry containing the information of MAC address which can be identified by voice vlan.')
hwL2VlanVoiceVlanOuiAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 26, 1, 1), MacAddress())
if mibBuilder.loadTexts: hwL2VlanVoiceVlanOuiAddress.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanVoiceVlanOuiAddress.setDescription('MAC address can be identified by Voice VLAN.')
hwL2VlanVoiceVlanOuiMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 26, 1, 2), MacAddress())
if mibBuilder.loadTexts: hwL2VlanVoiceVlanOuiMask.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanVoiceVlanOuiMask.setDescription('The mask of MAC address.')
hwL2VlanVoiceVlanOuiDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 26, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanVoiceVlanOuiDescription.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanVoiceVlanOuiDescription.setDescription('The description of OUI.')
hwL2VlanVoiceVlanOuiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 26, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanVoiceVlanOuiRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanVoiceVlanOuiRowStatus.setDescription('Operation status. ')
hwL2VlanMappingMultiTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 27), )
if mibBuilder.loadTexts: hwL2VlanMappingMultiTable.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMappingMultiTable.setDescription('Configuration table.')
hwL2VlanMappingMultiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 27, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2VlanMappingMultiPortIndex"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanMappingMultiDirection"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanMappingMultiVlanId"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanMappingMultiVlan8021p"))
if mibBuilder.loadTexts: hwL2VlanMappingMultiEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMappingMultiEntry.setDescription('The table contains Vlan-Mapping entry.')
hwL2VlanMappingMultiPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hwL2VlanMappingMultiPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMappingMultiPortIndex.setDescription('Port Index.')
hwL2VlanMappingMultiDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 27, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2), ("both", 3))))
if mibBuilder.loadTexts: hwL2VlanMappingMultiDirection.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMappingMultiDirection.setDescription('Direction inbound and outbound.')
hwL2VlanMappingMultiVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 27, 1, 3), VlanId())
if mibBuilder.loadTexts: hwL2VlanMappingMultiVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMappingMultiVlanId.setDescription('The outside vlan-id.')
hwL2VlanMappingMultiVlan8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 27, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)))
if mibBuilder.loadTexts: hwL2VlanMappingMultiVlan8021p.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMappingMultiVlan8021p.setDescription('The priority of outside VLAN after mapping,8 means priority-inherit.')
hwL2VlanMappingMultiVlanListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 27, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanMappingMultiVlanListLow.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMappingMultiVlanListLow.setDescription('The possible value of the inside vlan list.')
hwL2VlanMappingMultiVlanListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 27, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanMappingMultiVlanListHigh.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMappingMultiVlanListHigh.setDescription('The possible value of the inside vlan list.')
hwL2VlanMappingMultiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 27, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanMappingMultiRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMappingMultiRowStatus.setDescription('This table can be created.')
hwL2VlanMacVlanNewTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 28), )
if mibBuilder.loadTexts: hwL2VlanMacVlanNewTable.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMacVlanNewTable.setDescription('The table of VLAN assignment based on MAC.')
hwL2VlanMacVlanNewEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 28, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2VlanMacVlanNewMac"))
if mibBuilder.loadTexts: hwL2VlanMacVlanNewEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMacVlanNewEntry.setDescription('The entry of the table of VLAN assignment based on MAC. ')
hwL2VlanMacVlanNewMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 28, 1, 1), MacAddress())
if mibBuilder.loadTexts: hwL2VlanMacVlanNewMac.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMacVlanNewMac.setDescription('The VLAN-ID after VLAN assignment based on MAC.')
hwL2VlanMacVlanNewVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 28, 1, 2), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanMacVlanNewVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMacVlanNewVlanId.setDescription('MAC-VLAN VLAN ID.')
hwL2VlanMacVlanNewVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 28, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanMacVlanNewVlanPriority.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMacVlanNewVlanPriority.setDescription('The priority after VLAN assignment based on MAC, its default value is 0.')
hwL2VlanMacVlanNewMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 28, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanMacVlanNewMacRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMacVlanNewMacRowStatus.setDescription('Operation status.')
hwL2VlanProtocolVlanNewTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 29), )
if mibBuilder.loadTexts: hwL2VlanProtocolVlanNewTable.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanProtocolVlanNewTable.setDescription('The table of VLAN assignment based on protocol.')
hwL2VlanProtocolVlanNewEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 29, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2VlanProtocolVlanNewVlanId"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanProtocolVlanNewProtocolIndex"))
if mibBuilder.loadTexts: hwL2VlanProtocolVlanNewEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanProtocolVlanNewEntry.setDescription('The entry of the table of VLAN assignment based on protocol. ')
hwL2VlanProtocolVlanNewVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 29, 1, 1), VlanId())
if mibBuilder.loadTexts: hwL2VlanProtocolVlanNewVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanProtocolVlanNewVlanId.setDescription('The VLAN-ID after VLAN assignment based on protocol.')
hwL2VlanProtocolVlanNewProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 29, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: hwL2VlanProtocolVlanNewProtocolIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanProtocolVlanNewProtocolIndex.setDescription('The index of protocol on vlan, ranging from integer 1 to 16')
hwL2VlanProtocolVlanNewProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 29, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("at", 1), ("ipv4", 2), ("ipv6", 3), ("ipxEthernetii", 4), ("ipxLlc", 5), ("ipxRaw", 6), ("ipxSnap", 7), ("modeEthernetii", 8), ("modeLlc", 9), ("modeSnap", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanProtocolVlanNewProtocolType.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanProtocolVlanNewProtocolType.setDescription('Protocol type.')
hwL2VlanProtocolVlanNewProtocolTypeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 29, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanProtocolVlanNewProtocolTypeValue.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanProtocolVlanNewProtocolTypeValue.setDescription("The value of the configured protocol type. The relationship among hwL2VlanProtocolVlanNewProtocolType and hwL2VlanProtocolVlanNewProtocolTypeValue is as follows. |--------------------------------------------------------------------------------------------| | hwL2VlanProtocol-| | hwL2VlanProtocolVlanNewProtocolTypeValue | | VlanProtocolType | ProtocolSubType | | |------------------|------------------|------------------------------------------------------| | ipv4 | notused | Zero length string | |------------------|------------------|------------------------------------------------------| | ipv6 | notused | Zero length string | |------------------|------------------|------------------------------------------------------| | at | notused | Zero length string | |------------------|------------------|------------------------------------------------------| | ipx | ethernetii | Zero length string | | | llc | | | | raw | | | | snap | | |------------------|------------------|------------------------------------------------------| | mode-ethernetii | etype | hex string like '600', which means 0x0600. | | | | The range is [0x600..0xffff] | |------------------|------------------|------------------------------------------------------| | mode-llc | etype | the sequence of different parts is as follows. | | | | [dsap value;ssap value] | | | | Both range is [0x00..0xff] | | | | | | | | For example. Suppose value of dsap and ssap are 0x09 | | | | and 0x0a, the value is '090a' | |------------------|------------------|------------------------------------------------------| | mode-snap | etype | hex string like '600', which means 0x0600. | | | | The range is [0x600..0xffff] | |------------------|------------------|------------------------------------------------------| ")
hwL2VlanProtocolVlanNewRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 29, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanProtocolVlanNewRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanProtocolVlanNewRowStatus.setDescription('Operation status.')
hwL2VlanPolicyVlanNewTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 30), )
if mibBuilder.loadTexts: hwL2VlanPolicyVlanNewTable.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanPolicyVlanNewTable.setDescription('The table of VLAN assignment based on strategy.')
hwL2VlanPolicyVlanNewEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 30, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2VlanPolicyVlanNewVlanId"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanPolicyVlanNewMac"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanPolicyVlanNewIp"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanPolicyVlanNewPort"))
if mibBuilder.loadTexts: hwL2VlanPolicyVlanNewEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanPolicyVlanNewEntry.setDescription('The entry of the table of VLAN assignment based on strategy. ')
hwL2VlanPolicyVlanNewMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 30, 1, 1), MacAddress())
if mibBuilder.loadTexts: hwL2VlanPolicyVlanNewMac.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanPolicyVlanNewMac.setDescription('Support MAC+IP and MAC+IP+PORT.')
hwL2VlanPolicyVlanNewIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 30, 1, 2), IpAddress())
if mibBuilder.loadTexts: hwL2VlanPolicyVlanNewIp.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanPolicyVlanNewIp.setDescription('Support MAC+IP and MAC+IP+PORT.')
hwL2VlanPolicyVlanNewPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 30, 1, 3), Integer32())
if mibBuilder.loadTexts: hwL2VlanPolicyVlanNewPort.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanPolicyVlanNewPort.setDescription('Support MAC+IP+PORT.')
hwL2VlanPolicyVlanNewVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 30, 1, 4), VlanId())
if mibBuilder.loadTexts: hwL2VlanPolicyVlanNewVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanPolicyVlanNewVlanId.setDescription('The VLAN-ID after VLAN assignment based on policy.')
hwL2VlanPolicyVlanNewVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 30, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanPolicyVlanNewVlanPriority.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanPolicyVlanNewVlanPriority.setDescription('The Priority after VLAN assignment based on policy.')
hwL2VlanPolicyVlanNewRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 30, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanPolicyVlanNewRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanPolicyVlanNewRowStatus.setDescription('Operation status.')
hwL2VlanProtocolVlanPortNewTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 31), )
if mibBuilder.loadTexts: hwL2VlanProtocolVlanPortNewTable.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanProtocolVlanPortNewTable.setDescription(' Protocol-based VLAN port information table. hwL2VlanProtocolVlanPortNewVlanId refers to hwL2VlanProtocolVlanNewVlanId in hwL2VlanProtocolVlanNewTable. hwL2VlanProtocolVlanPortNewProtocolId refers to hwL2VlanProtocolVlanNewProtocolIndex in hwL2VlanProtocolVlanNewTable. So if the value of hwL2VlanProtocolVlanPortNewVlanId and hwL2VlanProtocolVlanPortNewProtocolId have no corresponding entry in hwL2VlanProtocolVlanNewTable, set operation for this table will fail. ')
hwL2VlanProtocolVlanPortNewEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 31, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2VlanProtocolVlanPortNewIndex"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanProtocolVlanPortNewVlanId"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanProtocolVlanPortNewProtocolIndex"))
if mibBuilder.loadTexts: hwL2VlanProtocolVlanPortNewEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanProtocolVlanPortNewEntry.setDescription(' Protocol-based VLAN port information entry. ')
hwL2VlanProtocolVlanPortNewIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 31, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hwL2VlanProtocolVlanPortNewIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanProtocolVlanPortNewIndex.setDescription(' The maximum number is the total number of the ports supported by device. ')
hwL2VlanProtocolVlanPortNewVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 31, 1, 2), VlanId())
if mibBuilder.loadTexts: hwL2VlanProtocolVlanPortNewVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanProtocolVlanPortNewVlanId.setDescription('The protocol-based VLAN ID.')
hwL2VlanProtocolVlanPortNewProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 31, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: hwL2VlanProtocolVlanPortNewProtocolIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanProtocolVlanPortNewProtocolIndex.setDescription('The protocol index.')
hwL2VlanProtocolVlanPortNewPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 31, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanProtocolVlanPortNewPriority.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanProtocolVlanPortNewPriority.setDescription('The protocol-based VLAN priority.')
hwL2VlanProtocolVlanPortNewRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 31, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanProtocolVlanPortNewRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanProtocolVlanPortNewRowStatus.setDescription('The row status of this table.')
hwL2VlanMultiVoiceVlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 32), )
if mibBuilder.loadTexts: hwL2VlanMultiVoiceVlanPortTable.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMultiVoiceVlanPortTable.setDescription('Voice VLAN is enabled on the port.')
hwL2VlanMultiVoiceVlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 32, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2VlanMultiVoiceVlanIfIndex"))
if mibBuilder.loadTexts: hwL2VlanMultiVoiceVlanPortEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMultiVoiceVlanPortEntry.setDescription(' An entry containing voice VLAN mode information, which is applicable to a voice VLAN enabled interface.')
hwL2VlanMultiVoiceVlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 32, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwL2VlanMultiVoiceVlanIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMultiVoiceVlanIfIndex.setDescription('The interface index on which voice VLAN is enabled.')
hwL2VlanMultiVoiceVlanPortVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 32, 1, 2), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanMultiVoiceVlanPortVLanId.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMultiVoiceVlanPortVLanId.setDescription('The VLAN ID of voice VLAN on port .')
hwL2VlanMultiVoiceVlanPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 32, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanMultiVoiceVlanPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMultiVoiceVlanPortRowStatus.setDescription('The row status of this table.')
hwL2VlanSwitchExtTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 33), )
if mibBuilder.loadTexts: hwL2VlanSwitchExtTable.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchExtTable.setDescription('The table to config the vlan switch.')
hwL2VlanSwitchExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 33, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2VlanSwitchExtName"))
if mibBuilder.loadTexts: hwL2VlanSwitchExtEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchExtEntry.setDescription('The entry of the vlan switch table.')
hwL2VlanSwitchExtName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 33, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: hwL2VlanSwitchExtName.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchExtName.setDescription('The vlan switch name.')
hwL2VlanSwitchExtSrcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 33, 1, 2), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanSwitchExtSrcIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchExtSrcIfIndex.setDescription('The index of source interface.')
hwL2VlanSwitchExtOuterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 33, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanSwitchExtOuterVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchExtOuterVlanId.setDescription('The outer vlan.')
hwL2VlanSwitchExtVlanListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 33, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanSwitchExtVlanListLow.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchExtVlanListLow.setDescription('The possible value of the inside vlan list.')
hwL2VlanSwitchExtVlanListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 33, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanSwitchExtVlanListHigh.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchExtVlanListHigh.setDescription('The possible value of the inside vlan list.')
hwL2VlanSwitchExtDstIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 33, 1, 6), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanSwitchExtDstIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchExtDstIfIndex.setDescription('The index of destination interface.')
hwL2VlanSwitchExtVlanXlateAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 33, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unchange", 1), ("switch", 2), ("push", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanSwitchExtVlanXlateAction.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchExtVlanXlateAction.setDescription('The action type of vlan: 1 : unchange vlan, 2 : switch vlan, 3 : push vlan.')
hwL2VlanSwitchExtDstVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 33, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanSwitchExtDstVlan.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchExtDstVlan.setDescription('The outer vlan of destination.')
hwL2VlanSwitchExtDstInnerVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 33, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanSwitchExtDstInnerVlan.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchExtDstInnerVlan.setDescription('The inner vlan of destination.')
hwL2VlanSwitchExtRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 33, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanSwitchExtRemark.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchExtRemark.setDescription('The remark 8021p value.')
hwL2VlanSwitchExtRemarkReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 33, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanSwitchExtRemarkReverse.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchExtRemarkReverse.setDescription('The reverse remark 8021p value.')
hwL2VlanSwitchExtLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 33, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2VlanSwitchExtLinkStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchExtLinkStatus.setDescription('The link status of vlan switch.')
hwL2VlanSwitchExtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 33, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanSwitchExtRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchExtRowStatus.setDescription('The row status.')
hwL2VlanPrecedence = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("macvlan", 1), ("ipsubnetvlan", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2VlanPrecedence.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanPrecedence.setDescription('Determine whether to select the MAC-based VLAN or subnet-based VLAN, 1:MAC VLAN(default); 2:IPSUBNET VLAN.')
hwL2VlanXlateTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 35), )
if mibBuilder.loadTexts: hwL2VlanXlateTable.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanXlateTable.setDescription('VLAN mapping configuration table.')
hwL2VlanXlateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 35, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2VlanXlateInterfaceIndex"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanXlateVlanIdBegin"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanXlateOuterVlanId"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanXlateVlan8021p"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanXlateDirection"))
if mibBuilder.loadTexts: hwL2VlanXlateEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanXlateEntry.setDescription('The entry in the VLAN mapping configuration table.')
hwL2VlanXlateInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 35, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwL2VlanXlateInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanXlateInterfaceIndex.setDescription('The index of the interface.')
hwL2VlanXlateVlanIdBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 35, 1, 2), VlanId())
if mibBuilder.loadTexts: hwL2VlanXlateVlanIdBegin.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanXlateVlanIdBegin.setDescription(' The ID of the first VLAN (VLAN ID in the inner VLAN tag if there are double VLAN tags) at the user side.')
hwL2VlanXlateVlanIdEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 35, 1, 3), VlanIdOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanXlateVlanIdEnd.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanXlateVlanIdEnd.setDescription('The ID of the end VLAN (VLAN ID in the inner VLAN tag if there are double VLAN tags) at the user side.')
hwL2VlanXlateOuterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 35, 1, 4), VlanIdOrNone())
if mibBuilder.loadTexts: hwL2VlanXlateOuterVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanXlateOuterVlanId.setDescription("The value of outer VLAN for packets with double tags in customer side. For one-tag-packet, it's 0.")
hwL2VlanXlateVlan8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 35, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 8), ValueRangeConstraint(65535, 65535), )))
if mibBuilder.loadTexts: hwL2VlanXlateVlan8021p.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanXlateVlan8021p.setDescription('The priority of the packet in customer side.')
hwL2VlanXlateDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 35, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2), ("both", 3))))
if mibBuilder.loadTexts: hwL2VlanXlateDirection.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanXlateDirection.setDescription('Direction inbound or outbound or both.')
hwL2VlanXlateAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 35, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("map", 1), ("stack", 2), ("pop", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanXlateAction.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanXlateAction.setDescription('The packet will be mapped or stacked or poped.')
hwL2VlanXlateToVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 35, 1, 8), VlanIdOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanXlateToVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanXlateToVlanId.setDescription('The ID of the outer VLAN at the network side. If this VLAN is not in use, the ID is 0.')
hwL2VlanXlateToinnerVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 35, 1, 9), VlanIdOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanXlateToinnerVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanXlateToinnerVlanId.setDescription("The value of inner VLAN in network side. It's 0 when it is not used.")
hwL2VlanXlateremark = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 35, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanXlateremark.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanXlateremark.setDescription('The priority of outer VLAN in network side.')
hwL2VlanXlateRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 35, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2VlanXlateRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanXlateRowStatus.setDescription('Operation status.')
hwL2QinQVlanTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 36), )
if mibBuilder.loadTexts: hwL2QinQVlanTable.setStatus('current')
if mibBuilder.loadTexts: hwL2QinQVlanTable.setDescription('The table of QinQ-VLAN configuration.')
hwL2QinQVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 36, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2QinQVlanIfIndex"), (0, "HUAWEI-L2VLAN-MIB", "hwL2QinQVlanIdBegin"), (0, "HUAWEI-L2VLAN-MIB", "hwL2QinQVlanIdEnd"), (0, "HUAWEI-L2VLAN-MIB", "hwL2QinQVlanInnerVlanIdBegin"), (0, "HUAWEI-L2VLAN-MIB", "hwL2QinQVlanInnerVlanIdEnd"), (0, "HUAWEI-L2VLAN-MIB", "hwL2QinQVlan8021pBegin"), (0, "HUAWEI-L2VLAN-MIB", "hwL2QinQVlan8021pEnd"), (0, "HUAWEI-L2VLAN-MIB", "hwL2QinQVlanEtherType"))
if mibBuilder.loadTexts: hwL2QinQVlanEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2QinQVlanEntry.setDescription('The entry of QinQ-VLAN table.')
hwL2QinQVlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 36, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwL2QinQVlanIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2QinQVlanIfIndex.setDescription('The index number of QinQ-VLAN port.')
hwL2QinQVlanIdBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 36, 1, 2), VlanId())
if mibBuilder.loadTexts: hwL2QinQVlanIdBegin.setStatus('current')
if mibBuilder.loadTexts: hwL2QinQVlanIdBegin.setDescription('The begin VLAN ID of outside.')
hwL2QinQVlanIdEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 36, 1, 3), VlanId())
if mibBuilder.loadTexts: hwL2QinQVlanIdEnd.setStatus('current')
if mibBuilder.loadTexts: hwL2QinQVlanIdEnd.setDescription('The end VLAN ID of outside.')
hwL2QinQVlanInnerVlanIdBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 36, 1, 4), VlanIdOrNone())
if mibBuilder.loadTexts: hwL2QinQVlanInnerVlanIdBegin.setStatus('current')
if mibBuilder.loadTexts: hwL2QinQVlanInnerVlanIdBegin.setDescription('The begin VLAN ID of inside.')
hwL2QinQVlanInnerVlanIdEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 36, 1, 5), VlanIdOrNone())
if mibBuilder.loadTexts: hwL2QinQVlanInnerVlanIdEnd.setStatus('current')
if mibBuilder.loadTexts: hwL2QinQVlanInnerVlanIdEnd.setDescription('The end VLAN ID of inside.')
hwL2QinQVlan8021pBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 36, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)))
if mibBuilder.loadTexts: hwL2QinQVlan8021pBegin.setStatus('current')
if mibBuilder.loadTexts: hwL2QinQVlan8021pBegin.setDescription('The begin number of 8021p.')
hwL2QinQVlan8021pEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 36, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)))
if mibBuilder.loadTexts: hwL2QinQVlan8021pEnd.setStatus('current')
if mibBuilder.loadTexts: hwL2QinQVlan8021pEnd.setDescription('The end number of 8021p.')
hwL2QinQVlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 36, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hwL2QinQVlanEtherType.setStatus('current')
if mibBuilder.loadTexts: hwL2QinQVlanEtherType.setDescription('The value of Ethernet Type.')
hwL2QinQVlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 36, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("stacking", 1), ("mapping", 2), ("cosstacking", 3), ("cosmapping", 4), ("mapping2to1", 5), ("mapping2to2", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2QinQVlanMode.setStatus('current')
if mibBuilder.loadTexts: hwL2QinQVlanMode.setDescription('The mode of QinQ-VLAN configuration.')
hwL2QinQVlanChangedVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 36, 1, 10), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2QinQVlanChangedVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2QinQVlanChangedVlanId.setDescription('The changed VLAN ID of outside.')
hwL2QinQVlanChangedInnerVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 36, 1, 11), VlanIdOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2QinQVlanChangedInnerVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2QinQVlanChangedInnerVlanId.setDescription('The changed VLAN ID of inside.')
hwL2QinQVlanRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 36, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2QinQVlanRemark.setStatus('current')
if mibBuilder.loadTexts: hwL2QinQVlanRemark.setDescription('The remark number of outside 8021p.If the value is 8, the priority in the outer tag is not changed.')
hwL2QinQVlanMapStackVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 36, 1, 13), VlanIdOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2QinQVlanMapStackVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2QinQVlanMapStackVlanId.setDescription('The map VLAN ID for inside after stacking action.')
hwL2QinQVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 36, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2QinQVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2QinQVlanRowStatus.setDescription('This table can read, create and delete.')
hwL2UntagAddDTagTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 37), )
if mibBuilder.loadTexts: hwL2UntagAddDTagTable.setStatus('current')
if mibBuilder.loadTexts: hwL2UntagAddDTagTable.setDescription('The table of untagged VLAN add double tagged VLAN configuration.')
hwL2UntagAddDTagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 37, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2UntagAddDTagPortIndex"))
if mibBuilder.loadTexts: hwL2UntagAddDTagEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2UntagAddDTagEntry.setDescription('The entry of untagged VLAN add double tagged VLAN table.')
hwL2UntagAddDTagPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 37, 1, 1), Integer32())
if mibBuilder.loadTexts: hwL2UntagAddDTagPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2UntagAddDTagPortIndex.setDescription('The port index number of interface.')
hwL2UntagAddDTagOuterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 37, 1, 2), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2UntagAddDTagOuterVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2UntagAddDTagOuterVlanId.setDescription('The outer VLAN ID.')
hwL2UntagAddDTagInnerVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 37, 1, 3), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2UntagAddDTagInnerVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2UntagAddDTagInnerVlanId.setDescription('The inner VLAN ID.')
hwL2UntagAddDTagRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 37, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2UntagAddDTagRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2UntagAddDTagRowStatus.setDescription('This table can read, create and delete.')
hwL2VlanVoiceVlan8021p = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2VlanVoiceVlan8021p.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanVoiceVlan8021p.setDescription('It indicates the IEEE 802.1Q priority of the voice VLAN and the default value is 6.')
hwL2VlanVoiceVlanDscp = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 2, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2VlanVoiceVlanDscp.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanVoiceVlanDscp.setDescription('It indicates the Differentiated Services CodePoint priority of the voice VLAN and the default value is 0x2e.')
hwL2IfStatVlanCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 1), )
if mibBuilder.loadTexts: hwL2IfStatVlanCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStatVlanCfgTable.setDescription('The table contains statistics enable configuration for the port and vlan.')
hwL2IfStatVlanCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 1, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2IfStatVlanCfgPortIndex"), (0, "HUAWEI-L2VLAN-MIB", "hwL2IfStatVlanCfgVlanId"))
if mibBuilder.loadTexts: hwL2IfStatVlanCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStatVlanCfgEntry.setDescription('Entries of vlan and port statistics enable table.')
hwL2IfStatVlanCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)))
if mibBuilder.loadTexts: hwL2IfStatVlanCfgPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStatVlanCfgPortIndex.setDescription('The virtual index of L2 Interface.')
hwL2IfStatVlanCfgVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 1, 1, 2), VlanId())
if mibBuilder.loadTexts: hwL2IfStatVlanCfgVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStatVlanCfgVlanId.setDescription("The vlan-id of packets'tag that's received or sent out from the port.")
hwL2IfStatVlanCfgEnableFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 1, 1, 11), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2IfStatVlanCfgEnableFlag.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStatVlanCfgEnableFlag.setDescription('The flag of enable the statistic function based on vlan in the interface.')
hwL2IfStatVlanCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2IfStatVlanCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStatVlanCfgRowStatus.setDescription("Used for controlling the creation and deletion of this row. All writable objects in this row may be modified at any time. If a Network Management Application attempts to delete a conceptual row by setting this object to 'destroy' and there are one or more entries in hwL2IfStatVlanCfgTable pointing to the row, the agent MUST also destroy the corresponding entries in hwL2IfStatVlanCfgTable.")
hwL2IfStat8021pCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 2), )
if mibBuilder.loadTexts: hwL2IfStat8021pCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021pCfgTable.setDescription('The table contains statistics enable for the port and 8021p.')
hwL2IfStat8021pCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 2, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2IfStat8021pCfgPortIndex"), (0, "HUAWEI-L2VLAN-MIB", "hwL2IfStat8021pCfg8021p"))
if mibBuilder.loadTexts: hwL2IfStat8021pCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021pCfgEntry.setDescription('Entries of port and 8021p statistics enable table.')
hwL2IfStat8021pCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)))
if mibBuilder.loadTexts: hwL2IfStat8021pCfgPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021pCfgPortIndex.setDescription('The virtual index of L2 Interface.')
hwL2IfStat8021pCfg8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: hwL2IfStat8021pCfg8021p.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021pCfg8021p.setDescription("The 8021p of packet's tag that's received or sent from the port.")
hwL2IfStat8021pCfgEnableFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 2, 1, 11), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2IfStat8021pCfgEnableFlag.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021pCfgEnableFlag.setDescription(' The flag of enable the static function based on 8021p in the interface.')
hwL2IfStat8021pCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 2, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2IfStat8021pCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021pCfgRowStatus.setDescription("Used for controlling the creation and deletion of this row. All writable objects in this row may be modified at any time. If a Network Management Application attempts to delete a conceptual row by setting this object to 'destroy' and there are one or more entries in hwL2IfStat8021pCfgTable pointing to the row, the agent MUST also destroy the corresponding entries in hwL2IfStat8021pCfgTable.")
hwL2IfStat8021pAndVlanCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 3), )
if mibBuilder.loadTexts: hwL2IfStat8021pAndVlanCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021pAndVlanCfgTable.setDescription('The table contains statistics enable for the port, vlan and 8021p.')
hwL2IfStat8021pAndVlanCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 3, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2IfStat8021pAndVlanCfgPortIndex"), (0, "HUAWEI-L2VLAN-MIB", "hwL2IfStat8021pAndVlanCfgVlanId"), (0, "HUAWEI-L2VLAN-MIB", "hwL2IfStat8021pAndVlanCfg8021p"))
if mibBuilder.loadTexts: hwL2IfStat8021pAndVlanCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021pAndVlanCfgEntry.setDescription('Entries of port, 8021p and vlan statistics enable table.')
hwL2IfStat8021pAndVlanCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)))
if mibBuilder.loadTexts: hwL2IfStat8021pAndVlanCfgPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021pAndVlanCfgPortIndex.setDescription('The virtual index of L2 Interface.')
hwL2IfStat8021pAndVlanCfgVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 3, 1, 2), VlanId())
if mibBuilder.loadTexts: hwL2IfStat8021pAndVlanCfgVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021pAndVlanCfgVlanId.setDescription("The vlan-id of packet's tag that's received or sent out from the port.")
hwL2IfStat8021pAndVlanCfg8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: hwL2IfStat8021pAndVlanCfg8021p.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021pAndVlanCfg8021p.setDescription("The 8021p value of packet's tag that's received or sent from the port.")
hwL2IfStat8021pAndVlanCfgEnableFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 3, 1, 11), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2IfStat8021pAndVlanCfgEnableFlag.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021pAndVlanCfgEnableFlag.setDescription('The Flag of enable the static function based on vlan-id and 8021p in the interface.')
hwL2IfStat8021pAndVlanCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 3, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2IfStat8021pAndVlanCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021pAndVlanCfgRowStatus.setDescription("Used for controlling the creation and deletion of this row. All writable objects in this row may be modified at any time. If a Network Management Application attempts to delete a conceptual row by setting this object to 'destroy' and there are one or more entries in hwL2IfStat8021pAndVlanCfgTable pointing to the row, the agent MUST also destroy the corresponding entries in hwL2IfStat8021pAndVlanCfgTable.")
hwL2VlanStatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 4), )
if mibBuilder.loadTexts: hwL2VlanStatTable.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStatTable.setDescription('The table contains statistics information for the vlan.')
hwL2VlanStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 4, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2VlanStatVlanId"))
if mibBuilder.loadTexts: hwL2VlanStatEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStatEntry.setDescription('Entries of vlan statistics table.')
hwL2VlanStatVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 4, 1, 1), VlanId())
if mibBuilder.loadTexts: hwL2VlanStatVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStatVlanId.setDescription('The vlan-id.')
hwL2VlanStatInTotalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2VlanStatInTotalPkts.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStatInTotalPkts.setDescription('The number of received packets.')
hwL2VlanStatInTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2VlanStatInTotalBytes.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStatInTotalBytes.setDescription('The byte number of received packets.')
hwL2VlanStatOutTotalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2VlanStatOutTotalPkts.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStatOutTotalPkts.setDescription('The number of sent packets.')
hwL2VlanStatOutTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2VlanStatOutTotalBytes.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStatOutTotalBytes.setDescription('The byte number of sent packets.')
hwL2VlanStatUnknownUcastDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2VlanStatUnknownUcastDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStatUnknownUcastDiscardPkts.setDescription('The number of aborted unknown unicast packets.')
hwL2VlanStatUnknownMcastDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2VlanStatUnknownMcastDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStatUnknownMcastDiscardPkts.setDescription('The number of aborted unknown multicast packets.')
hwL2VlanStatBcastDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2VlanStatBcastDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStatBcastDiscardPkts.setDescription('The number of aborted broadcast packets.')
hwL2VlanStatInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2VlanStatInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStatInUcastPkts.setDescription('The number of received unicast packets.')
hwL2VlanStatInUcastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2VlanStatInUcastBytes.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStatInUcastBytes.setDescription("The number of received unicast packets' bytes.")
hwL2VlanStatOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2VlanStatOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStatOutUcastPkts.setDescription('The number of sent unicast packets.')
hwL2VlanStatOutUcastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2VlanStatOutUcastBytes.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStatOutUcastBytes.setDescription("The number of sent unicast packets' bytes.")
hwL2VlanStatInMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2VlanStatInMcastPkts.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStatInMcastPkts.setDescription('The number of received multicast packets.')
hwL2VlanStatInMcastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 4, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2VlanStatInMcastBytes.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStatInMcastBytes.setDescription("The number of received multicast packets' bytes.")
hwL2VlanStatOutMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 4, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2VlanStatOutMcastPkts.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStatOutMcastPkts.setDescription('The number of sent multicast packets.')
hwL2VlanStatOutMcastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 4, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2VlanStatOutMcastBytes.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStatOutMcastBytes.setDescription("The number of sent multicast packets' bytes.")
hwL2VlanStatInBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 4, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2VlanStatInBcastPkts.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStatInBcastPkts.setDescription('The number of received broadcast packets.')
hwL2VlanStatInBcastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 4, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2VlanStatInBcastBytes.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStatInBcastBytes.setDescription("The number of received broadcast packets' bytes.")
hwL2VlanStatOutBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 4, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2VlanStatOutBcastPkts.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStatOutBcastPkts.setDescription('The number of sent broadcast packets.')
hwL2VlanStatOutBcastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 4, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2VlanStatOutBcastBytes.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStatOutBcastBytes.setDescription('The number of sent broadcast packets.')
hwL2VlanStatResetFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 4, 1, 21), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2VlanStatResetFlag.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStatResetFlag.setDescription('The flag of reset.')
hwL2IfStatVlanTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 5), )
if mibBuilder.loadTexts: hwL2IfStatVlanTable.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStatVlanTable.setDescription('The table contains statistics information for the port and vlan.')
hwL2IfStatVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 5, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2IfStatVlanPortIndex"), (0, "HUAWEI-L2VLAN-MIB", "hwL2IfStatVlanId"))
if mibBuilder.loadTexts: hwL2IfStatVlanEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStatVlanEntry.setDescription('Entries of vlan and port statistics table.')
hwL2IfStatVlanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)))
if mibBuilder.loadTexts: hwL2IfStatVlanPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStatVlanPortIndex.setDescription('The virtual Index of L2 Interface.')
hwL2IfStatVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 5, 1, 2), VlanId())
if mibBuilder.loadTexts: hwL2IfStatVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStatVlanId.setDescription("The vlan-id of packets'tag that's received or sent out from the port.")
hwL2IfStatVlanInTotalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfStatVlanInTotalPkts.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStatVlanInTotalPkts.setDescription('The number of received packets.')
hwL2IfStatVlanInTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfStatVlanInTotalBytes.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStatVlanInTotalBytes.setDescription(' The bytes of received packets. ')
hwL2IfStatVlanOutTotalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfStatVlanOutTotalPkts.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStatVlanOutTotalPkts.setDescription('The number of sent packets.')
hwL2IfStatVlanOutTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfStatVlanOutTotalBytes.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStatVlanOutTotalBytes.setDescription('The bytes of sent packets.')
hwL2IfStatVlanInPktsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 5, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfStatVlanInPktsRate.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStatVlanInPktsRate.setDescription(' The rate of received packets.')
hwL2IfStatVlanInBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 5, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfStatVlanInBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStatVlanInBytesRate.setDescription('The rate of received bytes.')
hwL2IfStatVlanOutPktsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 5, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfStatVlanOutPktsRate.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStatVlanOutPktsRate.setDescription('The rate of sent packet.')
hwL2IfStatVlanOutBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 5, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfStatVlanOutBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStatVlanOutBytesRate.setDescription('The rate of sent bytes.')
hwL2IfStatVlanInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 5, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfStatVlanInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStatVlanInUcastPkts.setDescription(' The number of unicast packets received.')
hwL2IfStatVlanInUcastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 5, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfStatVlanInUcastBytes.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStatVlanInUcastBytes.setDescription(' The number of unicast bytes received.')
hwL2IfStatVlanOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 5, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfStatVlanOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStatVlanOutUcastPkts.setDescription('The packet number of unicast packets sent.')
hwL2IfStatVlanOutUcastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 5, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfStatVlanOutUcastBytes.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStatVlanOutUcastBytes.setDescription('The number of unicast bytes sent.')
hwL2IfStatVlanInMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 5, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfStatVlanInMcastPkts.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStatVlanInMcastPkts.setDescription(' The number of multicast packets received.')
hwL2IfStatVlanInMcastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 5, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfStatVlanInMcastBytes.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStatVlanInMcastBytes.setDescription(' The number of multicast bytes received.')
hwL2IfStatVlanOutMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 5, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfStatVlanOutMcastPkts.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStatVlanOutMcastPkts.setDescription('The number of multicast packets sent.')
hwL2IfStatVlanOutMcastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 5, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfStatVlanOutMcastBytes.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStatVlanOutMcastBytes.setDescription('The number of multicast bytes sent.')
hwL2IfStatVlanInBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 5, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfStatVlanInBcastPkts.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStatVlanInBcastPkts.setDescription(' The number of broadcast packets received.')
hwL2IfStatVlanInBcastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 5, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfStatVlanInBcastBytes.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStatVlanInBcastBytes.setDescription(' The number of broadcast bytes received. ')
hwL2IfStatVlanOutBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 5, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfStatVlanOutBcastPkts.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStatVlanOutBcastPkts.setDescription('The number of broadcast packets sent.')
hwL2IfStatVlanOutBcastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 5, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfStatVlanOutBcastBytes.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStatVlanOutBcastBytes.setDescription('The number of broadcast bytes sent.')
hwL2IfStatVlanResetFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 5, 1, 23), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfStatVlanResetFlag.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStatVlanResetFlag.setDescription(' The flag of reset the statistic counter. ')
hwL2IfStat8021pTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 6), )
if mibBuilder.loadTexts: hwL2IfStat8021pTable.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021pTable.setDescription('The table contains statistics information for the port and 8021p.')
hwL2IfStat8021pEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 6, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2IfStat8021pPortIndex"), (0, "HUAWEI-L2VLAN-MIB", "hwL2IfStat8021p"))
if mibBuilder.loadTexts: hwL2IfStat8021pEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021pEntry.setDescription('Entries of port and 8021p statistics table.')
hwL2IfStat8021pPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)))
if mibBuilder.loadTexts: hwL2IfStat8021pPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021pPortIndex.setDescription('The virtual index of L2 Interface.')
hwL2IfStat8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: hwL2IfStat8021p.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021p.setDescription("The priority of the packet's tag.")
hwL2IfStat8021pInTotalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfStat8021pInTotalPkts.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021pInTotalPkts.setDescription('The number of received packets.')
hwL2IfStat8021pInTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfStat8021pInTotalBytes.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021pInTotalBytes.setDescription(' The bytes of received packets. ')
hwL2IfStat8021pOutTotalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfStat8021pOutTotalPkts.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021pOutTotalPkts.setDescription('The number of sent packets.')
hwL2IfStat8021pOutTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfStat8021pOutTotalBytes.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021pOutTotalBytes.setDescription('The bytes of sent packets.')
hwL2IfStat8021pInPktsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 6, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfStat8021pInPktsRate.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021pInPktsRate.setDescription(' The rate of received packets. ')
hwL2IfStat8021pInBytsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 6, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfStat8021pInBytsRate.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021pInBytsRate.setDescription('The rate of received bytes.')
hwL2IfStat8021pOutPktsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 6, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfStat8021pOutPktsRate.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021pOutPktsRate.setDescription('The rate of the sent packets.')
hwL2IfStat8021pOutBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 6, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfStat8021pOutBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021pOutBytesRate.setDescription('The rate of sent bytes.')
hwL2IfStat8021pResetFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 6, 1, 11), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfStat8021pResetFlag.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021pResetFlag.setDescription(' The flag of reset the statistic counter.')
hwL2IfStat8021pAndVlanTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 7), )
if mibBuilder.loadTexts: hwL2IfStat8021pAndVlanTable.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021pAndVlanTable.setDescription('The table contains statistics information for the port ,8021p and vlan-id.')
hwL2IfStat8021pAndVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 7, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2IfStat8021pAndVlanPortIndex"), (0, "HUAWEI-L2VLAN-MIB", "hwL2IfStat8021pAndVlanVlanId"), (0, "HUAWEI-L2VLAN-MIB", "hwL2IfStat8021pAndVlan8021p"))
if mibBuilder.loadTexts: hwL2IfStat8021pAndVlanEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021pAndVlanEntry.setDescription('Entries of port statistics table based on 8021p and vlan-id fields.')
hwL2IfStat8021pAndVlanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)))
if mibBuilder.loadTexts: hwL2IfStat8021pAndVlanPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021pAndVlanPortIndex.setDescription('The virtual Index of L2 Interface.')
hwL2IfStat8021pAndVlanVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 7, 1, 2), VlanId())
if mibBuilder.loadTexts: hwL2IfStat8021pAndVlanVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021pAndVlanVlanId.setDescription('Vlan-id.')
hwL2IfStat8021pAndVlan8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: hwL2IfStat8021pAndVlan8021p.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021pAndVlan8021p.setDescription("The priority in the 8021p packets'tag.")
hwL2IfStat8021pAndVlanInTotalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 7, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfStat8021pAndVlanInTotalPkts.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021pAndVlanInTotalPkts.setDescription('The number of received packets.')
hwL2IfStat8021pAndVlanInTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 7, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfStat8021pAndVlanInTotalBytes.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021pAndVlanInTotalBytes.setDescription('The bytes of received packets.')
hwL2IfStat8021pAndVlanInPktsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 7, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfStat8021pAndVlanInPktsRate.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021pAndVlanInPktsRate.setDescription('The rate of received packets. ')
hwL2IfStat8021pAndVlanInBytsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 7, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfStat8021pAndVlanInBytsRate.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021pAndVlanInBytsRate.setDescription(' The rate of received bytes. ')
hwL2IfStat8021pAndVlanResetFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 7, 1, 8), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfStat8021pAndVlanResetFlag.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021pAndVlanResetFlag.setDescription(' The flag of reset statistic counters.')
hwL2VlanSwitchPSTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 8), )
if mibBuilder.loadTexts: hwL2VlanSwitchPSTable.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchPSTable.setDescription('The table to config the vlan switch by Port+SVlan index.')
hwL2VlanSwitchPSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 8, 1), ).setIndexNames((0, "HUAWEI-L2VLAN-MIB", "hwL2VlanSwitchPSIfIndex"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanSwitchPSSVlanId"), (0, "HUAWEI-L2VLAN-MIB", "hwL2VlanSwitchPSCVlanId"))
if mibBuilder.loadTexts: hwL2VlanSwitchPSEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchPSEntry.setDescription('The entry of the vlan switch IfIndex+SVlan table.')
hwL2VlanSwitchPSIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 8, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwL2VlanSwitchPSIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchPSIfIndex.setDescription('The interface index.')
hwL2VlanSwitchPSSVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: hwL2VlanSwitchPSSVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchPSSVlanId.setDescription('Vlan-id.')
hwL2VlanSwitchPSCVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096)))
if mibBuilder.loadTexts: hwL2VlanSwitchPSCVlanId.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchPSCVlanId.setDescription('CVlan-id.')
hwL2VlanSwitchPSInputPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2VlanSwitchPSInputPkts.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchPSInputPkts.setDescription('The number of inbound discard packets.')
hwL2VlanSwitchPSInputBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 8, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2VlanSwitchPSInputBytes.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchPSInputBytes.setDescription('The number of inbound discard bytes.')
hwL2VlanSwitchPSOutputPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 8, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2VlanSwitchPSOutputPkts.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchPSOutputPkts.setDescription('The number of outbound discard packets.')
hwL2VlanSwitchPSOutputBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 8, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2VlanSwitchPSOutputBytes.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchPSOutputBytes.setDescription('The number of outbound discard bytes.')
hwL2VlanSwitchPSResetFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 8, 1, 8), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2VlanSwitchPSResetFlag.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchPSResetFlag.setDescription('The flag of reset statistics.')
hwL2VlanSwitchPSEnableFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 3, 8, 1, 9), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2VlanSwitchPSEnableFlag.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchPSEnableFlag.setDescription('The flag of enable statistics.')
hwL2VlanTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 4))
hwL2VlanUnkownPacketAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 1, 4, 1)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanStatUnknownUcastDiscardPkts"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanStatUnknownMcastDiscardPkts"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanStatBcastDiscardPkts"))
if mibBuilder.loadTexts: hwL2VlanUnkownPacketAlarm.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanUnkownPacketAlarm.setDescription('Warning of unkown Packets in vlan.')
hwL2vlanConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2))
hwL2vlanGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1))
hwL2vlanCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 2))
hwL2VlanMIBTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 1)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2VlanDescr"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanPortList"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanType"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanUnknownUnicastProcessing"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanIfIndex"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanMacLearn"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanCreateStatus"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanMulticast"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanAdminStatus"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanStatisStatus"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanRowStatus"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanBcast"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanUnknownMulticastProcessing"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanProperty"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanAgingTime"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanName"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanSmartMacLearn"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanServiceName"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanManagementVlan"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanDynamicVlan"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2VlanMIBTableGroup = hwL2VlanMIBTableGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMIBTableGroup.setDescription('A collection of objects providing device level control and status information for the Virtual LAN bridge services.')
hwL2vlanStackingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 2)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2VlanStackingOutsideVlanListLow"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanStackingOutsideVlanListHigh"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanStackingRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2vlanStackingGroup = hwL2vlanStackingGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2vlanStackingGroup.setDescription('A collection of objects providing l2vlan stacking service.')
hwL2vlanMappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 3)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2VlanMappingOutsideVlanListLow"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanMappingOutsideVlanListHigh"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanMappingRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2vlanMappingGroup = hwL2vlanMappingGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2vlanMappingGroup.setDescription('A collection of objects providing l2vlan mapping service.')
hwSupervlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 4)).setObjects(("HUAWEI-L2VLAN-MIB", "hwSubVlanListLow"), ("HUAWEI-L2VLAN-MIB", "hwSubVlanListHigh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSupervlanGroup = hwSupervlanGroup.setStatus('current')
if mibBuilder.loadTexts: hwSupervlanGroup.setDescription('A collection of objects providing supervlan service.')
hwL2InterfIsolateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 5)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2InterfIsolateInterflistLow"), ("HUAWEI-L2VLAN-MIB", "hwL2InterfIsolateInterflistHigh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2InterfIsolateGroup = hwL2InterfIsolateGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2InterfIsolateGroup.setDescription('A collection of objects provding l2interfisolate service. ')
hwL2IsolatemappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 6)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2IsolateInterflistLow"), ("HUAWEI-L2VLAN-MIB", "hwL2IsolateInterflistHigh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2IsolatemappingGroup = hwL2IsolatemappingGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2IsolatemappingGroup.setDescription('A collection of objects provding enhanced l2isolate service. ')
hwL2VlanStackingExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 7)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2VlanStackingExtVlanListLow"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanStackingExtVlanListHigh"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanStackingExtPriorityMode"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanStackingExtVlan8021p"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanStackingExtRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2VlanStackingExtGroup = hwL2VlanStackingExtGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingExtGroup.setDescription('A collection of objects providing flexible QinQ service.')
hwL2vlanQinQGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 8)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2VlanQinQOutSideVlanId"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanSysQinQRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2vlanQinQGroup = hwL2vlanQinQGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2vlanQinQGroup.setDescription('A collection of objects providing l2vlan QinQ service.')
hwL2vlanQinQInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 9)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2VlanQinQSVlanId"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanQinQAction"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanQinQNewCVlanId"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanInterfaceQinQRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2vlanQinQInterfaceGroup = hwL2vlanQinQInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2vlanQinQInterfaceGroup.setDescription('A collection of objects providing l2vlan QinQ service.')
hwL2DVlanMappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 10)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2DVlanMappingMapExternalVlanId"), ("HUAWEI-L2VLAN-MIB", "hwL2DVlanMappingMapInternalVlanId"), ("HUAWEI-L2VLAN-MIB", "hwL2DVlanMappingAction"), ("HUAWEI-L2VLAN-MIB", "hwL2DVlanMappingRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2DVlanMappingGroup = hwL2DVlanMappingGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2DVlanMappingGroup.setDescription('A collection of objects providing double Vlan-Mapping service.')
hwL2VlanStackingAdvGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 11)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2VlanStackingAdvOutsideVlanListLow"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanStackingAdvOutsideVlanListHigh"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanStackingAdvRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2VlanStackingAdvGroup = hwL2VlanStackingAdvGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingAdvGroup.setDescription('A collection of objects vlan Stacking 8021p.')
hwL2VlanMappingAdvGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 12)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2VlanMappingAdvOutsideVlanListLow"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanMappingAdvOutsideVlanListHigh"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanMappingAdvRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2VlanMappingAdvGroup = hwL2VlanMappingAdvGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMappingAdvGroup.setDescription('A collection of objects Vlan-Mapping 8021p.')
hwL2VlanSwitchGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 13)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2VlanSwitchMode"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanSwitchOuterSwitchVlanId"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanSwitchInnerSwitchVlanId"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanSwitch8021pRemark"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanSwitchOutIfIndex"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanSwitchMtu"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanSwitchMtuDiscardPkts"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanSwitchMtuDiscardBytes"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanSwitchMtuResetFlag"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanSwitchMtuEnableFlag"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanSwitchRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2VlanSwitchGroup = hwL2VlanSwitchGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchGroup.setDescription('A collection of hwL2VlanSwitchTable objects.')
hwL2IfStatVlanCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 14)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2IfStatVlanCfgEnableFlag"), ("HUAWEI-L2VLAN-MIB", "hwL2IfStatVlanCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2IfStatVlanCfgGroup = hwL2IfStatVlanCfgGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStatVlanCfgGroup.setDescription('A collection of objects enable the vlan statistic funtion in the port.')
hwL2IfStat8021pCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 15)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2IfStat8021pCfgEnableFlag"), ("HUAWEI-L2VLAN-MIB", "hwL2IfStat8021pCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2IfStat8021pCfgGroup = hwL2IfStat8021pCfgGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021pCfgGroup.setDescription('A collection of objects enable the 8021p statistic funtion in the port.')
hwL2IfStat8021pAndVlanCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 16)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2IfStat8021pAndVlanCfgEnableFlag"), ("HUAWEI-L2VLAN-MIB", "hwL2IfStat8021pAndVlanCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2IfStat8021pAndVlanCfgGroup = hwL2IfStat8021pAndVlanCfgGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021pAndVlanCfgGroup.setDescription('A collection of objects enable the 8021p and vlan statistic funtion in the port.')
hwL2VlanStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 17)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2VlanStatInTotalPkts"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanStatInTotalBytes"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanStatOutTotalPkts"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanStatOutTotalBytes"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanStatUnknownUcastDiscardPkts"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanStatUnknownMcastDiscardPkts"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanStatBcastDiscardPkts"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanStatInUcastPkts"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanStatInUcastBytes"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanStatOutUcastPkts"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanStatOutUcastBytes"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanStatInMcastPkts"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanStatInMcastBytes"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanStatOutMcastPkts"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanStatOutMcastBytes"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanStatInBcastPkts"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanStatInBcastBytes"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanStatOutBcastPkts"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanStatOutBcastBytes"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanStatResetFlag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2VlanStatGroup = hwL2VlanStatGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStatGroup.setDescription('A collection of objects vlan statistic in the port.')
hwL2IfStatVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 18)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2IfStatVlanInTotalPkts"), ("HUAWEI-L2VLAN-MIB", "hwL2IfStatVlanInTotalBytes"), ("HUAWEI-L2VLAN-MIB", "hwL2IfStatVlanOutTotalPkts"), ("HUAWEI-L2VLAN-MIB", "hwL2IfStatVlanOutTotalBytes"), ("HUAWEI-L2VLAN-MIB", "hwL2IfStatVlanInPktsRate"), ("HUAWEI-L2VLAN-MIB", "hwL2IfStatVlanInBytesRate"), ("HUAWEI-L2VLAN-MIB", "hwL2IfStatVlanOutPktsRate"), ("HUAWEI-L2VLAN-MIB", "hwL2IfStatVlanOutBytesRate"), ("HUAWEI-L2VLAN-MIB", "hwL2IfStatVlanInUcastPkts"), ("HUAWEI-L2VLAN-MIB", "hwL2IfStatVlanInUcastBytes"), ("HUAWEI-L2VLAN-MIB", "hwL2IfStatVlanOutUcastPkts"), ("HUAWEI-L2VLAN-MIB", "hwL2IfStatVlanOutUcastBytes"), ("HUAWEI-L2VLAN-MIB", "hwL2IfStatVlanInMcastPkts"), ("HUAWEI-L2VLAN-MIB", "hwL2IfStatVlanInMcastBytes"), ("HUAWEI-L2VLAN-MIB", "hwL2IfStatVlanOutMcastPkts"), ("HUAWEI-L2VLAN-MIB", "hwL2IfStatVlanOutMcastBytes"), ("HUAWEI-L2VLAN-MIB", "hwL2IfStatVlanInBcastPkts"), ("HUAWEI-L2VLAN-MIB", "hwL2IfStatVlanInBcastBytes"), ("HUAWEI-L2VLAN-MIB", "hwL2IfStatVlanOutBcastPkts"), ("HUAWEI-L2VLAN-MIB", "hwL2IfStatVlanOutBcastBytes"), ("HUAWEI-L2VLAN-MIB", "hwL2IfStatVlanResetFlag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2IfStatVlanGroup = hwL2IfStatVlanGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStatVlanGroup.setDescription('A collection of objects vlan statistic in the port.')
hwL2IfStat8021pGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 19)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2IfStat8021pInTotalPkts"), ("HUAWEI-L2VLAN-MIB", "hwL2IfStat8021pInTotalBytes"), ("HUAWEI-L2VLAN-MIB", "hwL2IfStat8021pOutTotalPkts"), ("HUAWEI-L2VLAN-MIB", "hwL2IfStat8021pOutTotalBytes"), ("HUAWEI-L2VLAN-MIB", "hwL2IfStat8021pInPktsRate"), ("HUAWEI-L2VLAN-MIB", "hwL2IfStat8021pInBytsRate"), ("HUAWEI-L2VLAN-MIB", "hwL2IfStat8021pOutPktsRate"), ("HUAWEI-L2VLAN-MIB", "hwL2IfStat8021pOutBytesRate"), ("HUAWEI-L2VLAN-MIB", "hwL2IfStat8021pResetFlag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2IfStat8021pGroup = hwL2IfStat8021pGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021pGroup.setDescription('A collection of objects 8021p statistic in the port.')
hwL2IfStat8021pAndVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 20)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2IfStat8021pAndVlanInTotalPkts"), ("HUAWEI-L2VLAN-MIB", "hwL2IfStat8021pAndVlanInTotalBytes"), ("HUAWEI-L2VLAN-MIB", "hwL2IfStat8021pAndVlanInPktsRate"), ("HUAWEI-L2VLAN-MIB", "hwL2IfStat8021pAndVlanInBytsRate"), ("HUAWEI-L2VLAN-MIB", "hwL2IfStat8021pAndVlanResetFlag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2IfStat8021pAndVlanGroup = hwL2IfStat8021pAndVlanGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2IfStat8021pAndVlanGroup.setDescription('A collection of objects vlan and 8021p statistic in the port.')
hwL2VlanMappingExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 21)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2VlanMappingExtVlanListLow"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanMappingExtVlanListHigh"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanMappingExtRowStatus"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanMappingExtPriorityMode"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanMappingExtVlan8021p"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2VlanMappingExtGroup = hwL2VlanMappingExtGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMappingExtGroup.setDescription('A collection of objects VLAN Mapping in the port.')
hwL2VlanQinqVlanTransEnaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 22)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2VlanQinqVlanTransEna"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanQinqVlanTransEnaRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2VlanQinqVlanTransEnaGroup = hwL2VlanQinqVlanTransEnaGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanQinqVlanTransEnaGroup.setDescription('A collection of objects QinQ VLAN translation enable in the port.')
hwL2VlanQinqVlanTransMissDropGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 23)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2VlanQinqVlanTransMissDrop"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanQinqVlanTransMissDropRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2VlanQinqVlanTransMissDropGroup = hwL2VlanQinqVlanTransMissDropGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanQinqVlanTransMissDropGroup.setDescription('A collection of objects QinQ VLAN translation miss drop in the port.')
hwL2VlanViewMappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 24)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2VlanViewMappingMapVlanId"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanViewMappingPriorityMode"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanViewMappingVlan8021p"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanViewMappingRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2VlanViewMappingGroup = hwL2VlanViewMappingGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanViewMappingGroup.setDescription('A collection of objects VLAN Mapping at the VLAN view.')
hwL2VlanStackingMaskGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 25)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2VlanStackingMaskVlanListLow"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanStackingMaskVlanListHigh"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanStackingMaskRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2VlanStackingMaskGroup = hwL2VlanStackingMaskGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanStackingMaskGroup.setDescription('A collection of hwL2VlanStackingMaskTable objects.')
hwL2VlanIpSubnetVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 26)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2VlanIpSubnetVlanIpAddress"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanIpSubnetVlanIpSubnetMask"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanIpSubnetVlanPriority"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanIpSubnetVlanRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2VlanIpSubnetVlanGroup = hwL2VlanIpSubnetVlanGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanIpSubnetVlanGroup.setDescription('A collection of hwL2VlanIpSubnetVlanTable objects.')
hwL2VlanMacVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 27)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2VlanMacVlanVlanId"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanMacVlanMac"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanMacVlanVlanPriority"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanMacVlanMacRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2VlanMacVlanGroup = hwL2VlanMacVlanGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMacVlanGroup.setDescription('A collection of hwL2VlanMacVlanTable objects.')
hwL2VlanProtocolVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 28)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2VlanProtocolVlanProtocolType"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanProtocolVlanEncapType"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanProtocolVlanRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2VlanProtocolVlanGroup = hwL2VlanProtocolVlanGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanProtocolVlanGroup.setDescription('A collection of hwL2VlanProtocolVlanTable objects.')
hwL2VlanPolicyVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 29)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2VlanPolicyVlanVlanId"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanPolicyVlanVlanPriority"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanPolicyVlanMac"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanPolicyVlanIp"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanPolicyVlanPort"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanPolicyVlanRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2VlanPolicyVlanGroup = hwL2VlanPolicyVlanGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanPolicyVlanGroup.setDescription('A collection of hwL2VlanPolicyVlanTable objects.')
hwL2VlanVoiceVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 30)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2VlanVoiceVlanEnabledVlanId"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanVoiceVlanAgingTime"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanVoiceVlanSecurityMode"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanVoiceVlanPortEnable"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanVoiceVlanPortMode"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanVoiceVlanPortLegacy"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanVoiceVlanPortSecurityMode"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanVoiceVlanOuiDescription"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanVoiceVlanOuiRowStatus"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanVoiceVlan8021p"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanVoiceVlanDscp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2VlanVoiceVlanGroup = hwL2VlanVoiceVlanGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanVoiceVlanGroup.setDescription('A collection of Voice VLAN related objects.')
hwL2VlanMappingMultiGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 31)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2VlanMappingMultiVlanListLow"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanMappingMultiVlanListHigh"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanMappingMultiRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2VlanMappingMultiGroup = hwL2VlanMappingMultiGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMappingMultiGroup.setDescription('A collection of hwL2VlanMappingMultiTable objects.')
hwL2VlanSwitchPSGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 32)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2VlanSwitchPSInputPkts"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanSwitchPSInputBytes"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanSwitchPSOutputPkts"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanSwitchPSOutputBytes"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanSwitchPSResetFlag"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanSwitchPSEnableFlag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2VlanSwitchPSGroup = hwL2VlanSwitchPSGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchPSGroup.setDescription('A collection of vlan statistic in the port.')
hwL2VlanMacVlanNewGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 33)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2VlanMacVlanNewVlanId"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanMacVlanNewVlanPriority"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanMacVlanNewMacRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2VlanMacVlanNewGroup = hwL2VlanMacVlanNewGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMacVlanNewGroup.setDescription('A collection of hwL2VlanMacVlanNewTable objects.')
hwL2VlanProtocolVlanNewGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 34)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2VlanProtocolVlanNewProtocolType"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanProtocolVlanNewProtocolTypeValue"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanProtocolVlanNewRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2VlanProtocolVlanNewGroup = hwL2VlanProtocolVlanNewGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanProtocolVlanNewGroup.setDescription('A collection of hwL2VlanProtocolVlanNewTable objects.')
hwL2VlanPolicyVlanNewGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 35)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2VlanPolicyVlanNewVlanPriority"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanPolicyVlanNewRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2VlanPolicyVlanNewGroup = hwL2VlanPolicyVlanNewGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanPolicyVlanNewGroup.setDescription('A collection of hwL2VlanPolicyVlanNewTable objects.')
hwL2VlanProtocolVlanPortNewGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 36)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2VlanProtocolVlanPortNewPriority"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanProtocolVlanPortNewRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2VlanProtocolVlanPortNewGroup = hwL2VlanProtocolVlanPortNewGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanProtocolVlanPortNewGroup.setDescription('A group of protocol vlan port.')
hwL2VlanMultiVoiceVlanPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 37)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2VlanMultiVoiceVlanPortVLanId"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanMultiVoiceVlanPortRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2VlanMultiVoiceVlanPortGroup = hwL2VlanMultiVoiceVlanPortGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanMultiVoiceVlanPortGroup.setDescription('A collection of hwL2VlanMultiVoiceVlanPortTable objects.')
hwL2VlanPrecedenceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 38)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2VlanPrecedence"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2VlanPrecedenceGroup = hwL2VlanPrecedenceGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanPrecedenceGroup.setDescription('A collection of hwL2VlanPrecedence object.')
hwL2VlanXlateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 39)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2VlanXlateVlanIdEnd"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanXlateAction"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanXlateToVlanId"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanXlateToinnerVlanId"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanXlateremark"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanXlateRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2VlanXlateGroup = hwL2VlanXlateGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanXlateGroup.setDescription('A collection of hwL2VlanXlateGroup object.')
hwL2VlanSwitchExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 40)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2VlanSwitchExtSrcIfIndex"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanSwitchExtDstIfIndex"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanSwitchExtDstInnerVlan"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanSwitchExtRowStatus"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanSwitchExtLinkStatus"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanSwitchExtVlanXlateAction"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanSwitchExtDstVlan"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanSwitchExtRemark"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanSwitchExtRemarkReverse"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanSwitchExtOuterVlanId"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanSwitchExtVlanListLow"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanSwitchExtVlanListHigh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2VlanSwitchExtGroup = hwL2VlanSwitchExtGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanSwitchExtGroup.setDescription('A group of vlan switch extent table.')
hwL2QinQVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 41)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2QinQVlanMode"), ("HUAWEI-L2VLAN-MIB", "hwL2QinQVlanChangedVlanId"), ("HUAWEI-L2VLAN-MIB", "hwL2QinQVlanChangedInnerVlanId"), ("HUAWEI-L2VLAN-MIB", "hwL2QinQVlanRemark"), ("HUAWEI-L2VLAN-MIB", "hwL2QinQVlanMapStackVlanId"), ("HUAWEI-L2VLAN-MIB", "hwL2QinQVlanRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2QinQVlanGroup = hwL2QinQVlanGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2QinQVlanGroup.setDescription('A group of QinQ-VLAN table.')
hwL2UntagAddDTagGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 1, 42)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2UntagAddDTagOuterVlanId"), ("HUAWEI-L2VLAN-MIB", "hwL2UntagAddDTagInnerVlanId"), ("HUAWEI-L2VLAN-MIB", "hwL2UntagAddDTagRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2UntagAddDTagGroup = hwL2UntagAddDTagGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2UntagAddDTagGroup.setDescription('A group of untagged VLAN add double tagged VLAN table.')
hwL2VlanTrapsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 3))
hwL2VlanTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 3, 1)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2VlanUnkownPacketAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2VlanTrapsGroup = hwL2VlanTrapsGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2VlanTrapsGroup.setDescription('The Group of L2VLAN Trap.')
hwL2vlanCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 3, 2, 2, 1)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2VlanMIBTableGroup"), ("HUAWEI-L2VLAN-MIB", "hwSupervlanGroup"), ("HUAWEI-L2VLAN-MIB", "hwL2vlanStackingGroup"), ("HUAWEI-L2VLAN-MIB", "hwL2vlanMappingGroup"), ("HUAWEI-L2VLAN-MIB", "hwL2InterfIsolateGroup"), ("HUAWEI-L2VLAN-MIB", "hwL2IsolatemappingGroup"), ("HUAWEI-L2VLAN-MIB", "hwL2vlanQinQGroup"), ("HUAWEI-L2VLAN-MIB", "hwL2vlanQinQInterfaceGroup"), ("HUAWEI-L2VLAN-MIB", "hwL2DVlanMappingGroup"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanStackingAdvGroup"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanMappingAdvGroup"), ("HUAWEI-L2VLAN-MIB", "hwL2VlanSwitchGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2vlanCompliance = hwL2vlanCompliance.setStatus('current')
if mibBuilder.loadTexts: hwL2vlanCompliance.setDescription('The compliance statement for device support of Virtual LAN services.')
mibBuilder.exportSymbols("HUAWEI-L2VLAN-MIB", hwSubVlanListLow=hwSubVlanListLow, hwL2VlanPolicyVlanEntry=hwL2VlanPolicyVlanEntry, hwL2vlanQinQInterfaceGroup=hwL2vlanQinQInterfaceGroup, hwL2IfStat8021pCfgTable=hwL2IfStat8021pCfgTable, hwL2VlanMappingExtGroup=hwL2VlanMappingExtGroup, hwL2VlanQinqVlanTransEnaGroup=hwL2VlanQinqVlanTransEnaGroup, hwL2IfStat8021pAndVlanCfgTable=hwL2IfStat8021pAndVlanCfgTable, hwL2IfStatVlanInBytesRate=hwL2IfStatVlanInBytesRate, hwL2VlanStatOutTotalPkts=hwL2VlanStatOutTotalPkts, hwL2VlanStackingPortIndex=hwL2VlanStackingPortIndex, hwL2VlanStatOutTotalBytes=hwL2VlanStatOutTotalBytes, hwL2IfStat8021pAndVlanCfgRowStatus=hwL2IfStat8021pAndVlanCfgRowStatus, hwL2QinQVlanChangedInnerVlanId=hwL2QinQVlanChangedInnerVlanId, hwL2VlanProtocolVlanNewEntry=hwL2VlanProtocolVlanNewEntry, hwL2VlanSwitchMtuDiscardBytes=hwL2VlanSwitchMtuDiscardBytes, hwL2VlanMappingOutsideVlanListHigh=hwL2VlanMappingOutsideVlanListHigh, hwL2VlanXlateAction=hwL2VlanXlateAction, hwL2IsolatemappingPortNum=hwL2IsolatemappingPortNum, hwL2VlanBcast=hwL2VlanBcast, hwL2VlanQinqVlanTransMissDropTable=hwL2VlanQinqVlanTransMissDropTable, hwL2VlanAdminStatus=hwL2VlanAdminStatus, hwL2VlanQinQOutSideVlanId=hwL2VlanQinQOutSideVlanId, hwL2VlanPolicyVlanNewVlanId=hwL2VlanPolicyVlanNewVlanId, hwL2VlanSwitchPSInputBytes=hwL2VlanSwitchPSInputBytes, hwL2VlanInterfaceQinQRowStatus=hwL2VlanInterfaceQinQRowStatus, hwL2VlanMappingAdvMapVlanId=hwL2VlanMappingAdvMapVlanId, hwL2VlanProtocolVlanEncapType=hwL2VlanProtocolVlanEncapType, hwL2VlanMappingMultiVlanListLow=hwL2VlanMappingMultiVlanListLow, hwL2QinQVlanInnerVlanIdEnd=hwL2QinQVlanInnerVlanIdEnd, hwL2vlanCompliance=hwL2vlanCompliance, hwL2VlanStackingAdvOutside8021p=hwL2VlanStackingAdvOutside8021p, hwL2VlanQinqVlanTransEnaRowStatus=hwL2VlanQinqVlanTransEnaRowStatus, hwL2VlanProtocolVlanNewProtocolIndex=hwL2VlanProtocolVlanNewProtocolIndex, hwL2VlanProtocolVlanPortNewEntry=hwL2VlanProtocolVlanPortNewEntry, hwL2VlanQinqVlanTransEnaEntry=hwL2VlanQinqVlanTransEnaEntry, hwL2InterfIsolateEntry=hwL2InterfIsolateEntry, hwL2VlanSwitchExtRowStatus=hwL2VlanSwitchExtRowStatus, hwL2IfStatVlanEntry=hwL2IfStatVlanEntry, hwL2InterfIsolateGroup=hwL2InterfIsolateGroup, hwL2VlanXlateOuterVlanId=hwL2VlanXlateOuterVlanId, hwL2VlanStackingTable=hwL2VlanStackingTable, hwL2VlanMappingExtPriorityMode=hwL2VlanMappingExtPriorityMode, hwL2VlanSwitchPSIfIndex=hwL2VlanSwitchPSIfIndex, hwL2VlanQinQEntry=hwL2VlanQinQEntry, hwL2IfStatVlanOutMcastBytes=hwL2IfStatVlanOutMcastBytes, hwL2VlanManagementVlan=hwL2VlanManagementVlan, hwL2VlanVoiceVlanOuiRowStatus=hwL2VlanVoiceVlanOuiRowStatus, hwL2VlanViewMappingDirection=hwL2VlanViewMappingDirection, hwL2IfStatVlanInPktsRate=hwL2IfStatVlanInPktsRate, hwSuperVlanTable=hwSuperVlanTable, hwL2VlanStackingExtVlanId=hwL2VlanStackingExtVlanId, hwL2VlanQinQIndex=hwL2VlanQinQIndex, hwL2VlanStatEntry=hwL2VlanStatEntry, hwL2VlanProtocolVlanPortNewProtocolIndex=hwL2VlanProtocolVlanPortNewProtocolIndex, hwL2VlanStackingExtVlanListHigh=hwL2VlanStackingExtVlanListHigh, hwL2VlanStackingMaskVlanListHigh=hwL2VlanStackingMaskVlanListHigh, hwL2VlanSwitchExtVlanListLow=hwL2VlanSwitchExtVlanListLow, hwL2VlanInterfaceQinQTable=hwL2VlanInterfaceQinQTable, hwL2IfStat8021pInTotalPkts=hwL2IfStat8021pInTotalPkts, hwL2VlanMultiVoiceVlanPortVLanId=hwL2VlanMultiVoiceVlanPortVLanId, hwL2VlanQinqVlanTransEnaTable=hwL2VlanQinqVlanTransEnaTable, hwSuperVlanId=hwSuperVlanId, hwL2IfStat8021pCfgEnableFlag=hwL2IfStat8021pCfgEnableFlag, hwL2VlanUnknownMulticastProcessing=hwL2VlanUnknownMulticastProcessing, hwL2VlanMappingMultiVlanListHigh=hwL2VlanMappingMultiVlanListHigh, hwL2VlanIpSubnetVlanTable=hwL2VlanIpSubnetVlanTable, hwL2VlanVoiceVlanPortMode=hwL2VlanVoiceVlanPortMode, hwL2VlanStackingAdvRowStatus=hwL2VlanStackingAdvRowStatus, hwL2VlanCreateStatus=hwL2VlanCreateStatus, hwL2VlanViewMappingMapVlanId=hwL2VlanViewMappingMapVlanId, hwL2VlanMIBEntry=hwL2VlanMIBEntry, hwL2IfStat8021pAndVlanCfg8021p=hwL2IfStat8021pAndVlanCfg8021p, hwL2VlanVoiceVlanDscp=hwL2VlanVoiceVlanDscp, hwL2VlanProtocolVlanVlanId=hwL2VlanProtocolVlanVlanId, hwL2IfStat8021pAndVlan8021p=hwL2IfStat8021pAndVlan8021p, hwL2VlanPolicyVlanNewPort=hwL2VlanPolicyVlanNewPort, hwL2VlanIndex=hwL2VlanIndex, hwL2IfStatVlanCfgEnableFlag=hwL2IfStatVlanCfgEnableFlag, hwL2VlanTrapsGroups=hwL2VlanTrapsGroups, hwL2QinQVlanInnerVlanIdBegin=hwL2QinQVlanInnerVlanIdBegin, hwL2VlanQinQAction=hwL2VlanQinQAction, hwL2VlanMappingPortIndex=hwL2VlanMappingPortIndex, hwL2VlanSysQinQRowStatus=hwL2VlanSysQinQRowStatus, hwL2VlanMappingExtTable=hwL2VlanMappingExtTable, hwL2UntagAddDTagEntry=hwL2UntagAddDTagEntry, hwL2VlanQinqVlanTransMissDropPortIndex=hwL2VlanQinqVlanTransMissDropPortIndex, hwL2DVlanMappingInterfaceIndex=hwL2DVlanMappingInterfaceIndex, hwL2IsolatemappingTable=hwL2IsolatemappingTable, hwL2VlanStatBcastDiscardPkts=hwL2VlanStatBcastDiscardPkts, hwL2IfStat8021pAndVlanGroup=hwL2IfStat8021pAndVlanGroup, hwL2VlanSwitchExtSrcIfIndex=hwL2VlanSwitchExtSrcIfIndex, hwL2VlanMIBTable=hwL2VlanMIBTable, hwL2IfStat8021pAndVlanCfgVlanId=hwL2IfStat8021pAndVlanCfgVlanId, hwL2IfStatVlanCfgVlanId=hwL2IfStatVlanCfgVlanId, hwL2DVlanMappingMapInternalVlanId=hwL2DVlanMappingMapInternalVlanId, hwL2VlanStatInMcastPkts=hwL2VlanStatInMcastPkts, hwL2VlanQinqVlanTransEnaPortIndex=hwL2VlanQinqVlanTransEnaPortIndex, hwL2VlanSwitch8021pRemark=hwL2VlanSwitch8021pRemark, hwL2VlanStackingMaskPortIndex=hwL2VlanStackingMaskPortIndex, hwL2VlanStatOutMcastBytes=hwL2VlanStatOutMcastBytes, hwL2VlanMacVlanEntry=hwL2VlanMacVlanEntry, hwL2VlanMappingMultiDirection=hwL2VlanMappingMultiDirection, hwL2VlanStackingMaskVlanListLow=hwL2VlanStackingMaskVlanListLow, hwL2VlanStatOutUcastBytes=hwL2VlanStatOutUcastBytes, hwL2VlanProtocolVlanProtocolType=hwL2VlanProtocolVlanProtocolType, hwL2IfStat8021pAndVlanInTotalPkts=hwL2IfStat8021pAndVlanInTotalPkts, hwL2VlanVoiceVlan8021p=hwL2VlanVoiceVlan8021p, hwL2VlanSwitchPSSVlanId=hwL2VlanSwitchPSSVlanId, hwL2VlanSwitchPSResetFlag=hwL2VlanSwitchPSResetFlag, hwL2VlanSwitchExtRemarkReverse=hwL2VlanSwitchExtRemarkReverse, hwL2VlanMacVlanMac=hwL2VlanMacVlanMac, hwL2VlanDescr=hwL2VlanDescr, hwL2VlanMappingAdvEntry=hwL2VlanMappingAdvEntry, hwL2IfStat8021pOutBytesRate=hwL2IfStat8021pOutBytesRate, hwL2IfStatVlanOutTotalBytes=hwL2IfStatVlanOutTotalBytes, hwL2IfStat8021pResetFlag=hwL2IfStat8021pResetFlag, hwL2IfStatVlanResetFlag=hwL2IfStatVlanResetFlag, hwL2VlanStackingExtAction=hwL2VlanStackingExtAction, hwL2VlanSwitchMode=hwL2VlanSwitchMode, hwL2VlanMulticast=hwL2VlanMulticast, hwL2VlanXlateVlan8021p=hwL2VlanXlateVlan8021p, hwL2vlanStackingGroup=hwL2vlanStackingGroup, hwL2VlanViewMappingGroup=hwL2VlanViewMappingGroup, hwL2IfStatVlanCfgRowStatus=hwL2IfStatVlanCfgRowStatus, hwL2VlanStatGroup=hwL2VlanStatGroup, hwL2VlanSwitchEntry=hwL2VlanSwitchEntry, hwL2VlanQinqVlanTransMissDropGroup=hwL2VlanQinqVlanTransMissDropGroup, hwL2VlanMappingAdvGroup=hwL2VlanMappingAdvGroup, hwL2VlanSwitchExtGroup=hwL2VlanSwitchExtGroup, hwL2VlanQinQSVlanId=hwL2VlanQinQSVlanId, hwL2VlanSwitchPSEnableFlag=hwL2VlanSwitchPSEnableFlag, hwL2VlanQinQCVlanId=hwL2VlanQinQCVlanId, hwL2VlanProtocolVlanPortNewIndex=hwL2VlanProtocolVlanPortNewIndex, hwL2VlanStatOutUcastPkts=hwL2VlanStatOutUcastPkts, hwL2InterfIsolateVlanId=hwL2InterfIsolateVlanId, hwL2VlanPolicyVlanNewIp=hwL2VlanPolicyVlanNewIp, hwL2VlanStatisStatus=hwL2VlanStatisStatus, hwL2VlanIfIndex=hwL2VlanIfIndex, hwSubVlanListHigh=hwSubVlanListHigh, hwL2VlanMappingAdvOutsideVlanListHigh=hwL2VlanMappingAdvOutsideVlanListHigh, hwL2VlanQinqVlanTransMissDrop=hwL2VlanQinqVlanTransMissDrop, hwL2VlanQinqVlanTransMissDropRowStatus=hwL2VlanQinqVlanTransMissDropRowStatus, hwL2VlanPrecedenceGroup=hwL2VlanPrecedenceGroup, hwL2VlanAgingTime=hwL2VlanAgingTime, hwL2VlanStackingAdvGroup=hwL2VlanStackingAdvGroup, hwL2VlanTraps=hwL2VlanTraps, hwL2VlanUnknownUnicastProcessing=hwL2VlanUnknownUnicastProcessing, hwL2VlanMappingRowStatus=hwL2VlanMappingRowStatus, hwL2IfStat8021pAndVlanVlanId=hwL2IfStat8021pAndVlanVlanId, hwL2VlanMappingExtEntry=hwL2VlanMappingExtEntry, hwL2VlanMappingAdvRowStatus=hwL2VlanMappingAdvRowStatus, hwL2VlanSwitchInnerSwitchVlanId=hwL2VlanSwitchInnerSwitchVlanId, hwL2IfStatVlanInMcastBytes=hwL2IfStatVlanInMcastBytes, hwL2VlanBase=hwL2VlanBase, hwL2VlanMacLearn=hwL2VlanMacLearn, hwL2VlanMngObjects=hwL2VlanMngObjects, hwL2VlanStatTable=hwL2VlanStatTable, hwL2VlanMultiVoiceVlanIfIndex=hwL2VlanMultiVoiceVlanIfIndex, hwL2VlanPolicyVlanVlanId=hwL2VlanPolicyVlanVlanId, hwL2VlanProtocolVlanPortNewTable=hwL2VlanProtocolVlanPortNewTable, hwL2IfStat8021pOutTotalBytes=hwL2IfStat8021pOutTotalBytes, hwL2IfStatVlanInBcastBytes=hwL2IfStatVlanInBcastBytes, hwL2VlanSwitchOutIfIndex=hwL2VlanSwitchOutIfIndex, hwL2VlanIpSubnetVlanIpAddress=hwL2VlanIpSubnetVlanIpAddress, hwL2VlanStackingOutsideVlanListLow=hwL2VlanStackingOutsideVlanListLow, hwL2VlanStackingOutsideVlanListHigh=hwL2VlanStackingOutsideVlanListHigh, hwL2QinQVlanRowStatus=hwL2QinQVlanRowStatus, hwL2VlanMappingOutsideVlanListLow=hwL2VlanMappingOutsideVlanListLow, hwL2VlanStatInUcastBytes=hwL2VlanStatInUcastBytes, hwL2VlanProtocolVlanProtocolIndex=hwL2VlanProtocolVlanProtocolIndex, hwL2VlanMacVlanVlanId=hwL2VlanMacVlanVlanId, hwL2VlanQinqVlanTransEna=hwL2VlanQinqVlanTransEna, hwL2VlanMacVlanNewEntry=hwL2VlanMacVlanNewEntry, hwL2VlanVoiceVlanPortIndex=hwL2VlanVoiceVlanPortIndex, hwL2VlanViewMappingVlanId=hwL2VlanViewMappingVlanId, hwL2VlanStackingMaskDirection=hwL2VlanStackingMaskDirection, hwL2IfStatVlanId=hwL2IfStatVlanId, hwL2IfStat8021pCfgGroup=hwL2IfStat8021pCfgGroup, hwL2VlanName=hwL2VlanName, hwL2VlanSwitchPSOutputPkts=hwL2VlanSwitchPSOutputPkts, hwL2VlanMappingMultiVlanId=hwL2VlanMappingMultiVlanId, hwL2VlanIpSubnetVlanIpSubnetMask=hwL2VlanIpSubnetVlanIpSubnetMask, hwL2DVlanMappingAction=hwL2DVlanMappingAction, hwL2VlanServiceName=hwL2VlanServiceName, hwL2VlanVoiceVlanOuiEntry=hwL2VlanVoiceVlanOuiEntry, hwL2VlanProtocolVlanEntry=hwL2VlanProtocolVlanEntry, hwL2VlanXlateInterfaceIndex=hwL2VlanXlateInterfaceIndex, hwL2VlanMappingAdvTable=hwL2VlanMappingAdvTable, hwL2VlanMIBTableGroup=hwL2VlanMIBTableGroup, hwL2VlanMappingInsideVlanId=hwL2VlanMappingInsideVlanId, hwL2VlanVoiceVlanSecurityMode=hwL2VlanVoiceVlanSecurityMode, hwL2VlanPrecedence=hwL2VlanPrecedence, hwL2VlanMultiVoiceVlanPortRowStatus=hwL2VlanMultiVoiceVlanPortRowStatus, hwL2InterfIsolateTable=hwL2InterfIsolateTable, hwL2VlanProtocolVlanNewProtocolType=hwL2VlanProtocolVlanNewProtocolType, hwL2VlanSwitchExtName=hwL2VlanSwitchExtName, hwL2IfStatVlanOutTotalPkts=hwL2IfStatVlanOutTotalPkts, hwL2VlanMappingMultiTable=hwL2VlanMappingMultiTable, hwL2IfStat8021p=hwL2IfStat8021p, hwL2VlanSwitchExtTable=hwL2VlanSwitchExtTable, hwL2IfStatVlanOutPktsRate=hwL2IfStatVlanOutPktsRate, hwL2IfStat8021pAndVlanInTotalBytes=hwL2IfStat8021pAndVlanInTotalBytes, hwL2VlanMappingTable=hwL2VlanMappingTable, hwL2VlanStackingEntry=hwL2VlanStackingEntry, hwL2VlanMultiVoiceVlanPortTable=hwL2VlanMultiVoiceVlanPortTable, hwL2QinQVlan8021pEnd=hwL2QinQVlan8021pEnd, hwL2IfStat8021pAndVlanCfgGroup=hwL2IfStat8021pAndVlanCfgGroup, hwL2VlanStatOutBcastPkts=hwL2VlanStatOutBcastPkts, hwL2IsolatemappingGroup=hwL2IsolatemappingGroup, hwSupervlanGroup=hwSupervlanGroup, hwL2VlanStackingAdvTable=hwL2VlanStackingAdvTable, hwL2VlanStackingMaskRowStatus=hwL2VlanStackingMaskRowStatus, hwL2VlanSwitchPSEntry=hwL2VlanSwitchPSEntry, hwL2IfStatVlanOutBytesRate=hwL2IfStatVlanOutBytesRate, hwL2UntagAddDTagRowStatus=hwL2UntagAddDTagRowStatus, hwL2DVlanMappingExternalVlanId=hwL2DVlanMappingExternalVlanId, hwL2VlanMacVlanNewGroup=hwL2VlanMacVlanNewGroup, hwL2VlanMappingMultiGroup=hwL2VlanMappingMultiGroup, hwL2VlanMappingExtVlanListHigh=hwL2VlanMappingExtVlanListHigh, hwL2VlanStatInUcastPkts=hwL2VlanStatInUcastPkts, hwL2QinQVlanEtherType=hwL2QinQVlanEtherType, hwL2VlanQinqVlanTransMissDropEntry=hwL2VlanQinqVlanTransMissDropEntry, hwL2VlanVoiceVlanOuiDescription=hwL2VlanVoiceVlanOuiDescription, hwL2VlanSwitchExtDstIfIndex=hwL2VlanSwitchExtDstIfIndex, PYSNMP_MODULE_ID=hwL2Vlan, hwL2IfStatVlanInTotalPkts=hwL2IfStatVlanInTotalPkts, hwL2VlanSwitchPSOutputBytes=hwL2VlanSwitchPSOutputBytes, hwL2QinQVlan8021pBegin=hwL2QinQVlan8021pBegin, hwL2VlanStatResetFlag=hwL2VlanStatResetFlag, hwL2IfStat8021pTable=hwL2IfStat8021pTable, hwL2VlanMappingMultiPortIndex=hwL2VlanMappingMultiPortIndex, hwL2vlanQinQGroup=hwL2vlanQinQGroup, hwL2IfStat8021pEntry=hwL2IfStat8021pEntry, hwL2VlanStackingAdvPortIndex=hwL2VlanStackingAdvPortIndex, hwL2VlanUnkownPacketAlarm=hwL2VlanUnkownPacketAlarm, hwL2VlanViewMappingPriorityMode=hwL2VlanViewMappingPriorityMode, hwL2VlanVoiceVlanEnabledVlanId=hwL2VlanVoiceVlanEnabledVlanId, hwL2IsolateInterflistLow=hwL2IsolateInterflistLow, hwL2VlanMultiVoiceVlanPortGroup=hwL2VlanMultiVoiceVlanPortGroup, hwL2VlanSwitchMtuResetFlag=hwL2VlanSwitchMtuResetFlag, hwL2VlanStatOutBcastBytes=hwL2VlanStatOutBcastBytes, hwL2VlanPolicyVlanPort=hwL2VlanPolicyVlanPort, hwL2VlanProtocolVlanNewGroup=hwL2VlanProtocolVlanNewGroup, hwL2VlanSwitchExtRemark=hwL2VlanSwitchExtRemark, hwL2VlanSwitchInnerVlanId=hwL2VlanSwitchInnerVlanId, hwL2VlanProtocolVlanTable=hwL2VlanProtocolVlanTable, hwL2vlanCompliances=hwL2vlanCompliances, hwL2VlanPolicyVlanNewTable=hwL2VlanPolicyVlanNewTable, hwL2VlanSwitchPSInputPkts=hwL2VlanSwitchPSInputPkts, hwL2InterfIsolateInterflistHigh=hwL2InterfIsolateInterflistHigh, hwL2VlanStackingExtRowStatus=hwL2VlanStackingExtRowStatus, hwL2VlanPolicyVlanMac=hwL2VlanPolicyVlanMac, hwL2IfStat8021pPortIndex=hwL2IfStat8021pPortIndex, hwL2VlanStatUnknownMcastDiscardPkts=hwL2VlanStatUnknownMcastDiscardPkts)
mibBuilder.exportSymbols("HUAWEI-L2VLAN-MIB", hwL2VlanStatInBcastBytes=hwL2VlanStatInBcastBytes, hwL2VlanViewMappingTable=hwL2VlanViewMappingTable, hwL2VlanProtocolVlanPortNewRowStatus=hwL2VlanProtocolVlanPortNewRowStatus, hwL2IfStatVlanInMcastPkts=hwL2IfStatVlanInMcastPkts, hwL2DVlanMappingEntry=hwL2DVlanMappingEntry, hwL2VlanVoiceVlanGroup=hwL2VlanVoiceVlanGroup, hwL2VlanXlateVlanIdBegin=hwL2VlanXlateVlanIdBegin, hwL2VlanXlateEntry=hwL2VlanXlateEntry, hwL2VlanMappingExtRowStatus=hwL2VlanMappingExtRowStatus, hwL2VlanXlateRowStatus=hwL2VlanXlateRowStatus, hwL2VlanPolicyVlanNewGroup=hwL2VlanPolicyVlanNewGroup, hwL2VlanStackingRowStatus=hwL2VlanStackingRowStatus, hwL2VlanMappingAdvOutsideVlanListLow=hwL2VlanMappingAdvOutsideVlanListLow, hwL2VlanVoiceVlanOuiMask=hwL2VlanVoiceVlanOuiMask, hwL2VlanProtocolVlanRowStatus=hwL2VlanProtocolVlanRowStatus, hwL2VlanStackingInsideVlanId=hwL2VlanStackingInsideVlanId, hwL2VlanViewMappingEntry=hwL2VlanViewMappingEntry, hwL2VlanProtocolVlanPortNewVlanId=hwL2VlanProtocolVlanPortNewVlanId, hwL2IfStatVlanInTotalBytes=hwL2IfStatVlanInTotalBytes, hwL2VlanMappingExtPortIndex=hwL2VlanMappingExtPortIndex, hwL2VlanStackingExtPriorityMode=hwL2VlanStackingExtPriorityMode, hwL2VlanMacVlanNewMacRowStatus=hwL2VlanMacVlanNewMacRowStatus, hwL2VlanStackingMaskAction=hwL2VlanStackingMaskAction, hwL2IfStatVlanCfgGroup=hwL2IfStatVlanCfgGroup, hwL2VlanXlateGroup=hwL2VlanXlateGroup, hwL2VlanPolicyVlanVlanPriority=hwL2VlanPolicyVlanVlanPriority, hwL2VlanXlateVlanIdEnd=hwL2VlanXlateVlanIdEnd, hwL2IfStat8021pCfgRowStatus=hwL2IfStat8021pCfgRowStatus, hwL2VlanVoiceVlanPortSecurityMode=hwL2VlanVoiceVlanPortSecurityMode, hwL2VlanMacVlanNewTable=hwL2VlanMacVlanNewTable, hwL2VlanStatInTotalBytes=hwL2VlanStatInTotalBytes, hwL2VlanPolicyVlanIp=hwL2VlanPolicyVlanIp, hwL2VlanMappingMultiVlan8021p=hwL2VlanMappingMultiVlan8021p, hwL2VlanPolicyVlanTable=hwL2VlanPolicyVlanTable, hwL2VlanStatOutMcastPkts=hwL2VlanStatOutMcastPkts, hwL2VlanStackingExtVlanListLow=hwL2VlanStackingExtVlanListLow, hwL2VlanProperty=hwL2VlanProperty, hwL2VlanProtocolVlanNewVlanId=hwL2VlanProtocolVlanNewVlanId, hwL2VlanSwitchMtuDiscardPkts=hwL2VlanSwitchMtuDiscardPkts, hwL2VlanVoiceVlanPortTable=hwL2VlanVoiceVlanPortTable, hwL2IfStat8021pAndVlanCfgPortIndex=hwL2IfStat8021pAndVlanCfgPortIndex, hwL2VlanSwitchRowStatus=hwL2VlanSwitchRowStatus, hwL2VlanPortList=hwL2VlanPortList, hwL2VlanSwitchOuterSwitchVlanId=hwL2VlanSwitchOuterSwitchVlanId, hwL2QinQVlanTable=hwL2QinQVlanTable, hwL2IfStatVlanCfgEntry=hwL2IfStatVlanCfgEntry, hwL2QinQVlanIfIndex=hwL2QinQVlanIfIndex, hwL2VlanIpSubnetVlanVlanId=hwL2VlanIpSubnetVlanVlanId, hwL2QinQVlanMapStackVlanId=hwL2QinQVlanMapStackVlanId, hwL2VlanViewMappingVlan8021p=hwL2VlanViewMappingVlan8021p, hwL2VlanStackingExtPortIndex=hwL2VlanStackingExtPortIndex, hwL2VlanXlateTable=hwL2VlanXlateTable, hwL2VlanSwitchMtuEnableFlag=hwL2VlanSwitchMtuEnableFlag, hwL2VlanProtocolVlanPortNewGroup=hwL2VlanProtocolVlanPortNewGroup, hwL2DVlanMappingMapExternalVlanId=hwL2DVlanMappingMapExternalVlanId, hwL2VlanStackingAdvOutsideVlanListLow=hwL2VlanStackingAdvOutsideVlanListLow, hwL2VlanStackingExtTable=hwL2VlanStackingExtTable, hwL2DVlanMappingRowStatus=hwL2DVlanMappingRowStatus, hwL2IfStat8021pAndVlanCfgEnableFlag=hwL2IfStat8021pAndVlanCfgEnableFlag, hwL2VlanVoiceVlanOuiTable=hwL2VlanVoiceVlanOuiTable, hwL2IfStat8021pInPktsRate=hwL2IfStat8021pInPktsRate, hwL2UntagAddDTagInnerVlanId=hwL2UntagAddDTagInnerVlanId, hwL2DVlanMappingTable=hwL2DVlanMappingTable, hwL2VlanStackingExtVlan8021p=hwL2VlanStackingExtVlan8021p, hwL2VlanVoiceVlanAgingTime=hwL2VlanVoiceVlanAgingTime, hwL2VlanSwitchMtu=hwL2VlanSwitchMtu, hwL2VlanStackingMaskStack8021p=hwL2VlanStackingMaskStack8021p, hwL2Vlan=hwL2Vlan, hwL2VlanQinQInterfaceIndex=hwL2VlanQinQInterfaceIndex, hwL2VlanStackingAdvOutsideVlanListHigh=hwL2VlanStackingAdvOutsideVlanListHigh, hwL2VlanQinQDirection=hwL2VlanQinQDirection, hwL2VlanTrapsGroup=hwL2VlanTrapsGroup, hwL2IfStatVlanInUcastBytes=hwL2IfStatVlanInUcastBytes, hwL2VlanMacVlanTable=hwL2VlanMacVlanTable, hwL2VlanDynamicVlan=hwL2VlanDynamicVlan, hwL2IfStat8021pGroup=hwL2IfStat8021pGroup, hwL2VlanIpSubnetVlanGroup=hwL2VlanIpSubnetVlanGroup, hwL2VlanSwitchExtOuterVlanId=hwL2VlanSwitchExtOuterVlanId, hwL2QinQVlanChangedVlanId=hwL2QinQVlanChangedVlanId, hwL2IfStatVlanCfgPortIndex=hwL2IfStatVlanCfgPortIndex, hwL2IfStat8021pAndVlanResetFlag=hwL2IfStat8021pAndVlanResetFlag, hwL2VlanQinQTable=hwL2VlanQinQTable, hwL2VlanMappingExtVlanId=hwL2VlanMappingExtVlanId, hwL2VlanIpSubnetVlanRowStatus=hwL2VlanIpSubnetVlanRowStatus, hwSuperVlanEntry=hwSuperVlanEntry, hwL2UntagAddDTagTable=hwL2UntagAddDTagTable, hwL2VlanMappingMultiEntry=hwL2VlanMappingMultiEntry, hwL2UntagAddDTagPortIndex=hwL2UntagAddDTagPortIndex, hwL2VlanSwitchIfIndex=hwL2VlanSwitchIfIndex, hwL2QinQVlanMode=hwL2QinQVlanMode, hwL2IfStatVlanTable=hwL2IfStatVlanTable, hwL2IfStat8021pAndVlanTable=hwL2IfStat8021pAndVlanTable, hwL2VlanProtocolVlanNewTable=hwL2VlanProtocolVlanNewTable, hwL2VlanStackingMaskEntry=hwL2VlanStackingMaskEntry, hwL2IfStat8021pInBytsRate=hwL2IfStat8021pInBytsRate, hwL2VlanStatistics=hwL2VlanStatistics, hwL2VlanStackingAdvMapVlanId=hwL2VlanStackingAdvMapVlanId, hwL2Mgmt=hwL2Mgmt, hwL2VlanSwitchTable=hwL2VlanSwitchTable, hwL2VlanSmartMacLearn=hwL2VlanSmartMacLearn, hwL2VlanViewMappingRowStatus=hwL2VlanViewMappingRowStatus, hwL2IfStat8021pAndVlanEntry=hwL2IfStat8021pAndVlanEntry, hwL2IsolatemappingEntry=hwL2IsolatemappingEntry, hwL2vlanGroups=hwL2vlanGroups, hwL2IfStatVlanCfgTable=hwL2IfStatVlanCfgTable, hwL2VlanStackingAdvStack8021p=hwL2VlanStackingAdvStack8021p, hwL2VlanStackingExtGroup=hwL2VlanStackingExtGroup, hwL2DVlanMappingDirection=hwL2DVlanMappingDirection, hwL2IfStatVlanOutBcastBytes=hwL2IfStatVlanOutBcastBytes, hwL2VlanStackingAdvStackVlanId=hwL2VlanStackingAdvStackVlanId, hwL2VlanSwitchExtVlanListHigh=hwL2VlanSwitchExtVlanListHigh, hwL2VlanSwitchExtLinkStatus=hwL2VlanSwitchExtLinkStatus, hwL2VlanStackingAdvEntry=hwL2VlanStackingAdvEntry, hwL2VlanMappingExtVlanListLow=hwL2VlanMappingExtVlanListLow, hwL2VlanStackingExtEntry=hwL2VlanStackingExtEntry, hwL2VlanInterfaceQinQEntry=hwL2VlanInterfaceQinQEntry, hwL2VlanMappingMultiRowStatus=hwL2VlanMappingMultiRowStatus, hwL2VlanStatUnknownUcastDiscardPkts=hwL2VlanStatUnknownUcastDiscardPkts, hwL2VlanSwitchPSCVlanId=hwL2VlanSwitchPSCVlanId, hwL2VlanStackingMaskStackVlanId=hwL2VlanStackingMaskStackVlanId, hwL2VlanQinQNewCVlanId=hwL2VlanQinQNewCVlanId, hwL2VlanMultiVoiceVlanPortEntry=hwL2VlanMultiVoiceVlanPortEntry, hwL2VlanSwitchGroup=hwL2VlanSwitchGroup, hwL2IsolateInterflistHigh=hwL2IsolateInterflistHigh, hwL2IfStatVlanInBcastPkts=hwL2IfStatVlanInBcastPkts, hwL2VlanXlateDirection=hwL2VlanXlateDirection, hwL2VlanPolicyVlanGroup=hwL2VlanPolicyVlanGroup, hwL2VlanMacVlanMacRowStatus=hwL2VlanMacVlanMacRowStatus, hwL2VlanProtocolVlanGroup=hwL2VlanProtocolVlanGroup, hwL2IfStat8021pCfg8021p=hwL2IfStat8021pCfg8021p, hwL2VlanSwitchPSTable=hwL2VlanSwitchPSTable, hwL2VlanSwitchExtEntry=hwL2VlanSwitchExtEntry, hwL2VlanIpSubnetVlanPriority=hwL2VlanIpSubnetVlanPriority, hwL2IfStat8021pAndVlanCfgEntry=hwL2IfStat8021pAndVlanCfgEntry, hwL2VlanMappingAdvPortIndex=hwL2VlanMappingAdvPortIndex, hwL2VlanStatInBcastPkts=hwL2VlanStatInBcastPkts, hwL2VlanXlateToinnerVlanId=hwL2VlanXlateToinnerVlanId, hwL2VlanProtocolVlanNewProtocolTypeValue=hwL2VlanProtocolVlanNewProtocolTypeValue, hwL2VlanProtocolVlanPortNewPriority=hwL2VlanProtocolVlanPortNewPriority, hwL2VlanIpSubnetVlanIpSubnetIndex=hwL2VlanIpSubnetVlanIpSubnetIndex, hwL2IfStat8021pInTotalBytes=hwL2IfStat8021pInTotalBytes, hwL2IfStatVlanOutBcastPkts=hwL2IfStatVlanOutBcastPkts, hwL2VlanMappingAdvOutsideVlan8021p=hwL2VlanMappingAdvOutsideVlan8021p, hwL2VlanPolicyVlanRowStatus=hwL2VlanPolicyVlanRowStatus, hwL2VlanStackingMaskGroup=hwL2VlanStackingMaskGroup, hwL2IfStatVlanOutMcastPkts=hwL2IfStatVlanOutMcastPkts, hwL2UntagAddDTagOuterVlanId=hwL2UntagAddDTagOuterVlanId, hwL2QinQVlanIdBegin=hwL2QinQVlanIdBegin, hwL2VlanSwitchExtVlanXlateAction=hwL2VlanSwitchExtVlanXlateAction, hwL2VlanSwitchExtDstVlan=hwL2VlanSwitchExtDstVlan, hwL2VlanMacVlanGroup=hwL2VlanMacVlanGroup, hwL2VlanXlateToVlanId=hwL2VlanXlateToVlanId, hwL2IfStatVlanInUcastPkts=hwL2IfStatVlanInUcastPkts, hwL2IfStat8021pOutTotalPkts=hwL2IfStat8021pOutTotalPkts, hwL2QinQVlanRemark=hwL2QinQVlanRemark, hwL2VlanType=hwL2VlanType, hwL2VlanStackingExtDirection=hwL2VlanStackingExtDirection, hwL2IfStat8021pOutPktsRate=hwL2IfStat8021pOutPktsRate, hwL2IfStatVlanOutUcastPkts=hwL2IfStatVlanOutUcastPkts, hwL2IfStatVlanOutUcastBytes=hwL2IfStatVlanOutUcastBytes, hwL2IfStatVlanGroup=hwL2IfStatVlanGroup, hwL2VlanSwitchExtDstInnerVlan=hwL2VlanSwitchExtDstInnerVlan, hwL2IfStat8021pAndVlanInPktsRate=hwL2IfStat8021pAndVlanInPktsRate, hwL2QinQVlanGroup=hwL2QinQVlanGroup, hwL2IfStat8021pAndVlanInBytsRate=hwL2IfStat8021pAndVlanInBytsRate, hwL2VlanStackingMaskTable=hwL2VlanStackingMaskTable, hwL2VlanXlateremark=hwL2VlanXlateremark, hwL2InterfIsolateInterflistLow=hwL2InterfIsolateInterflistLow, hwL2QinQVlanEntry=hwL2QinQVlanEntry, hwL2VlanPolicyVlanNewMac=hwL2VlanPolicyVlanNewMac, hwL2VlanMappingAdvMapVlan8021p=hwL2VlanMappingAdvMapVlan8021p, hwL2VlanApply=hwL2VlanApply, hwL2VlanVoiceVlanOuiAddress=hwL2VlanVoiceVlanOuiAddress, hwL2VlanMappingExtDirection=hwL2VlanMappingExtDirection, hwL2vlanConformance=hwL2vlanConformance, hwL2UntagAddDTagGroup=hwL2UntagAddDTagGroup, hwL2IfStat8021pAndVlanPortIndex=hwL2IfStat8021pAndVlanPortIndex, hwL2VlanVoiceVlanPortEntry=hwL2VlanVoiceVlanPortEntry, hwL2VlanMacVlanNewVlanPriority=hwL2VlanMacVlanNewVlanPriority, hwL2IfStat8021pCfgPortIndex=hwL2IfStat8021pCfgPortIndex, hwL2VlanMappingExtVlan8021p=hwL2VlanMappingExtVlan8021p, hwL2VlanRowStatus=hwL2VlanRowStatus, hwL2VlanMacVlanNewMac=hwL2VlanMacVlanNewMac, hwL2IfStat8021pCfgEntry=hwL2IfStat8021pCfgEntry, hwL2VlanVoiceVlanPortEnable=hwL2VlanVoiceVlanPortEnable, hwL2VlanPolicyVlanNewRowStatus=hwL2VlanPolicyVlanNewRowStatus, hwL2IfStatVlanPortIndex=hwL2IfStatVlanPortIndex, hwL2DVlanMappingGroup=hwL2DVlanMappingGroup, hwL2VlanMappingEntry=hwL2VlanMappingEntry, hwL2VlanProtocolVlanNewRowStatus=hwL2VlanProtocolVlanNewRowStatus, hwL2VlanMacVlanNewVlanId=hwL2VlanMacVlanNewVlanId, hwL2VlanIpSubnetVlanEntry=hwL2VlanIpSubnetVlanEntry, hwL2VlanMacVlanVlanPriority=hwL2VlanMacVlanVlanPriority, hwL2QinQVlanIdEnd=hwL2QinQVlanIdEnd, hwL2VlanStatVlanId=hwL2VlanStatVlanId, hwL2VlanStatInTotalPkts=hwL2VlanStatInTotalPkts, hwL2VlanSwitchOuterVlanId=hwL2VlanSwitchOuterVlanId, hwL2vlanMappingGroup=hwL2vlanMappingGroup, hwL2VlanStatInMcastBytes=hwL2VlanStatInMcastBytes, hwL2VlanPolicyVlanNewEntry=hwL2VlanPolicyVlanNewEntry, hwL2VlanVoiceVlanPortLegacy=hwL2VlanVoiceVlanPortLegacy, hwL2DVlanMappingInternalVlanId=hwL2DVlanMappingInternalVlanId, hwL2VlanSwitchPSGroup=hwL2VlanSwitchPSGroup, hwL2VlanPolicyVlanNewVlanPriority=hwL2VlanPolicyVlanNewVlanPriority)
