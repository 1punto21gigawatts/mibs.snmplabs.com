#
# PySNMP MIB module SONUS-SYSTEM-TIMING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SONUS-SYSTEM-TIMING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:10:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Gauge32, ModuleIdentity, IpAddress, Counter32, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter64, Unsigned32, Integer32, MibIdentifier, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Gauge32", "ModuleIdentity", "IpAddress", "Counter32", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter64", "Unsigned32", "Integer32", "MibIdentifier", "TimeTicks")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
sonusEventLevel, sonusEventDescription, sonusSlotIndex, sonusShelfIndex, sonusEventClass = mibBuilder.importSymbols("SONUS-COMMON-MIB", "sonusEventLevel", "sonusEventDescription", "sonusSlotIndex", "sonusShelfIndex", "sonusEventClass")
sonusSystemMIBs, = mibBuilder.importSymbols("SONUS-SMI", "sonusSystemMIBs")
SonusSlotIndex, SonusEventString, SonusShelfIndex, SonusMtaSlotIndex, SonusAdminState, SonusTimingSource, HwTypeID = mibBuilder.importSymbols("SONUS-TC", "SonusSlotIndex", "SonusEventString", "SonusShelfIndex", "SonusMtaSlotIndex", "SonusAdminState", "SonusTimingSource", "HwTypeID")
sonusSystemTimingMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3))
if mibBuilder.loadTexts: sonusSystemTimingMIB.setLastUpdated('200102030000Z')
if mibBuilder.loadTexts: sonusSystemTimingMIB.setOrganization('Sonus Networks, Inc.')
if mibBuilder.loadTexts: sonusSystemTimingMIB.setContactInfo(' Customer Support Sonus Networks, Inc, 5 carlisle Road Westford, MA 01886 USA Tel: 978-692-8999 Fax: 978-392-9118 E-mail: cs.snmp@sonusnet.com')
if mibBuilder.loadTexts: sonusSystemTimingMIB.setDescription('The MIB Module for System Timing management.')
sonusSystemTimingMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1))
sonusStShelfAdmnTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 1), )
if mibBuilder.loadTexts: sonusStShelfAdmnTable.setStatus('current')
if mibBuilder.loadTexts: sonusStShelfAdmnTable.setDescription(' ')
sonusStShelfAdmnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 1, 1), ).setIndexNames((0, "SONUS-SYSTEM-TIMING-MIB", "sonusStShelfAdmnShelfIndex"))
if mibBuilder.loadTexts: sonusStShelfAdmnEntry.setStatus('current')
if mibBuilder.loadTexts: sonusStShelfAdmnEntry.setDescription(' ')
sonusStShelfAdmnShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 1, 1, 1), SonusShelfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusStShelfAdmnShelfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusStShelfAdmnShelfIndex.setDescription('Identifies the target shelf within the node.')
sonusStShelfAdmnFailoverGuardTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 5)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusStShelfAdmnFailoverGuardTime.setStatus('current')
if mibBuilder.loadTexts: sonusStShelfAdmnFailoverGuardTime.setDescription(' Indicates how long a timing source can be faulting before switchover to another source is initiated ')
sonusStShelfAdmnRecoveryGuardTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 120)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusStShelfAdmnRecoveryGuardTime.setStatus('current')
if mibBuilder.loadTexts: sonusStShelfAdmnRecoveryGuardTime.setDescription(' Indicates how long a timing source must be valid for, after it has faulted, before it will be considered valid again. ')
sonusStShelfAdmnTransmitRemoteAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusStShelfAdmnTransmitRemoteAlarm.setStatus('current')
if mibBuilder.loadTexts: sonusStShelfAdmnTransmitRemoteAlarm.setDescription(' Not Supported ')
sonusStShelfAdmnRevertRefSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusStShelfAdmnRevertRefSwitching.setStatus('current')
if mibBuilder.loadTexts: sonusStShelfAdmnRevertRefSwitching.setDescription(' If enabled, then a timing source which has failed, but then becomes valid again, will be reconsidered for use. If disabled, then once a timing source fails, it will never be automatically reconsidered for use. To use the source again requires manual user intervention. ')
sonusStShelfAdmnRevertMtaSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusStShelfAdmnRevertMtaSwitching.setStatus('current')
if mibBuilder.loadTexts: sonusStShelfAdmnRevertMtaSwitching.setDescription(' If enabled, then an MTA which is hot-inserted will automatically be brought on line and made available for use. If disabled, then an MTA which is hot-inserted will require manual user configuration before being available for use. ')
sonusStShelfAdmnRevertInsertDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 300)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusStShelfAdmnRevertInsertDelay.setStatus('current')
if mibBuilder.loadTexts: sonusStShelfAdmnRevertInsertDelay.setDescription(' MTA warm-up period. When an MTA is hot-inserted, the card will be allowed to warm up and stabilize for this amount of time before being put back into service. This warm-up period is also used during cold start of a shelf. ')
sonusStShelfAdmnFreeRunAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusStShelfAdmnFreeRunAlarm.setStatus('current')
if mibBuilder.loadTexts: sonusStShelfAdmnFreeRunAlarm.setDescription(' Not Supported ')
sonusStShelfAdmnTimingSourceAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("resequence", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusStShelfAdmnTimingSourceAction.setStatus('current')
if mibBuilder.loadTexts: sonusStShelfAdmnTimingSourceAction.setDescription(' Resequence will cause the timing sequence list to be re-evaluated. This may cause the current active timing source to change. ')
sonusStShelfAdmnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 1, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusStShelfAdmnRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusStShelfAdmnRowStatus.setDescription(' This object indicates the row status for this table.')
sonusStShelfAdmnSourceReconfigAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ordered-list", 1), ("ssm-quality", 2))).clone('ordered-list')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusStShelfAdmnSourceReconfigAlg.setStatus('current')
if mibBuilder.loadTexts: sonusStShelfAdmnSourceReconfigAlg.setDescription(" This object indicates which algorithm should be used to select timing sources for use as System Synchronized sources. Selecting Ordered_list causes sources to be selected for use in strict numerical order, as assigned by default or by the operator. Selecting SSM_Quality will cause sources to be selected based upon the quality level of the timing source, as indicated by the sources Synchronized Status Messages. Do not select SSM_Quality unless all configured timing sources support SSM's")
sonusStShelfAdmnMtaSourceAffinity = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("sticky", 2))).clone('sticky')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusStShelfAdmnMtaSourceAffinity.setStatus('current')
if mibBuilder.loadTexts: sonusStShelfAdmnMtaSourceAffinity.setDescription(' This object works in conjunction with the Source Reconfiguration Algorithm object. If sticky is selected, System Timing Manager will exhaust oll timing sources on an MTA at all quality levels before selecting a timing source on the alternate MTA. If none is selected, timing sources will be chosen based on stratum quality only, reguardless of which MTA is providing the source. This object has no effect when the Source Reconfiguration Algorithm is set to Ordered_list.')
sonusStShelfStatTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 2), )
if mibBuilder.loadTexts: sonusStShelfStatTable.setStatus('current')
if mibBuilder.loadTexts: sonusStShelfStatTable.setDescription(' ')
sonusStShelfStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 2, 1), ).setIndexNames((0, "SONUS-SYSTEM-TIMING-MIB", "sonusStShelfStatShelfIndex"))
if mibBuilder.loadTexts: sonusStShelfStatEntry.setStatus('current')
if mibBuilder.loadTexts: sonusStShelfStatEntry.setDescription(' ')
sonusStShelfStatShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 2, 1, 1), SonusShelfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusStShelfStatShelfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusStShelfStatShelfIndex.setDescription(' ')
sonusStShelfStatActiveMtaSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 2, 1, 2), SonusMtaSlotIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusStShelfStatActiveMtaSlot.setStatus('current')
if mibBuilder.loadTexts: sonusStShelfStatActiveMtaSlot.setDescription(' Identifies which MTA is providing the System Synchronized Timing signal.')
sonusStShelfStatActiveSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 2, 1, 3), SonusTimingSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusStShelfStatActiveSource.setStatus('current')
if mibBuilder.loadTexts: sonusStShelfStatActiveSource.setDescription(' Identifies what timing source the active MTA is using to provide System Synchronized Timing.')
sonusStMtaAdmnTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 3), )
if mibBuilder.loadTexts: sonusStMtaAdmnTable.setStatus('current')
if mibBuilder.loadTexts: sonusStMtaAdmnTable.setDescription(' ')
sonusStMtaAdmnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 3, 1), ).setIndexNames((0, "SONUS-SYSTEM-TIMING-MIB", "sonusStMtaAdmnShelfIndex"), (0, "SONUS-SYSTEM-TIMING-MIB", "sonusStMtaAdmnMtaSlotIndex"))
if mibBuilder.loadTexts: sonusStMtaAdmnEntry.setStatus('current')
if mibBuilder.loadTexts: sonusStMtaAdmnEntry.setDescription(' ')
sonusStMtaAdmnShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 3, 1, 1), SonusShelfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusStMtaAdmnShelfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusStMtaAdmnShelfIndex.setDescription(' Identifies the target shelf within the node. ')
sonusStMtaAdmnMtaSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 3, 1, 2), SonusMtaSlotIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusStMtaAdmnMtaSlotIndex.setStatus('current')
if mibBuilder.loadTexts: sonusStMtaAdmnMtaSlotIndex.setDescription(' Identifies the target slot within the shelf. ')
sonusStMtaAdmnState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 3, 1, 3), SonusAdminState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusStMtaAdmnState.setStatus('current')
if mibBuilder.loadTexts: sonusStMtaAdmnState.setDescription(' If enabled, the MTA can participate in system timing. If disabled, then it will be removed from service and not allowed to participate. All timing sequence entries bound to this node will be marked as out of service. In a non-redundant configuration the MTA admin state cannot be disabled. ')
sonusStMtaAdmnLineEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ami", 1), ("b8zs", 2), ("hdb3", 3))).clone('b8zs')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusStMtaAdmnLineEncoding.setStatus('current')
if mibBuilder.loadTexts: sonusStMtaAdmnLineEncoding.setDescription(' Select AMI or B8ZS line coding for BITS LIU. Select HDB3 for SETS LIU')
sonusStMtaAdmnSsmChannelBit = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sa4", 1), ("sa5", 2), ("sa6", 3), ("sa7", 4), ("sa8", 5))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusStMtaAdmnSsmChannelBit.setStatus('current')
if mibBuilder.loadTexts: sonusStMtaAdmnSsmChannelBit.setDescription(' MTA 20, E1 support only. Identifies which of the additional spare bits, embedded within the framing pattern, contains the SSM channel ')
sonusStMtaAdmnFramerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("d4sf", 1), ("esf", 2), ("mf", 3), ("mf-crc4", 4))).clone('esf')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusStMtaAdmnFramerMode.setStatus('current')
if mibBuilder.loadTexts: sonusStMtaAdmnFramerMode.setDescription(' Select ESF or D4/SF for BITS framer. ESF should be selected if B8ZS has been selected for the line encoding. D4/SF should be selected if AMI has been selected for the line encoding. Select MF or MF-CRC4 for SETS framer')
sonusStMtaAdmnFramerTransmitYellowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusStMtaAdmnFramerTransmitYellowAlarm.setStatus('current')
if mibBuilder.loadTexts: sonusStMtaAdmnFramerTransmitYellowAlarm.setDescription(' Not supported ')
sonusStMtaAdmnLiuTransmitAllOnes = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusStMtaAdmnLiuTransmitAllOnes.setStatus('current')
if mibBuilder.loadTexts: sonusStMtaAdmnLiuTransmitAllOnes.setDescription(' Not supported ')
sonusStMtaAdmnAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("available", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusStMtaAdmnAction.setStatus('current')
if mibBuilder.loadTexts: sonusStMtaAdmnAction.setDescription(' Selecting AVAILABLE will cause the MTA to be moved from the Out-Of-Service state to the Available-For-Use state. This command is necessary to manually make an MTA available for use after it has failed, and revertive MTA switching is not enabled. This may cause the current active timing source to change. ')
sonusStMtaAdmnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 3, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusStMtaAdmnRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusStMtaAdmnRowStatus.setDescription('This object indicates the row status for this table.')
sonusStMtaStatTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 4), )
if mibBuilder.loadTexts: sonusStMtaStatTable.setStatus('current')
if mibBuilder.loadTexts: sonusStMtaStatTable.setDescription(' ')
sonusStMtaStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 4, 1), ).setIndexNames((0, "SONUS-SYSTEM-TIMING-MIB", "sonusStMtaStatShelfIndex"), (0, "SONUS-SYSTEM-TIMING-MIB", "sonusStMtaStatMtaSlotIndex"))
if mibBuilder.loadTexts: sonusStMtaStatEntry.setStatus('current')
if mibBuilder.loadTexts: sonusStMtaStatEntry.setDescription(' ')
sonusStMtaStatShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 4, 1, 1), SonusShelfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusStMtaStatShelfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusStMtaStatShelfIndex.setDescription(' ')
sonusStMtaStatMtaSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 4, 1, 2), SonusMtaSlotIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusStMtaStatMtaSlotIndex.setStatus('current')
if mibBuilder.loadTexts: sonusStMtaStatMtaSlotIndex.setDescription(' ')
sonusStMtaStatOperStat = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notPresent", 1), ("fault", 2), ("warmupDelay", 3), ("inService", 4), ("outOfService", 5), ("available", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusStMtaStatOperStat.setStatus('current')
if mibBuilder.loadTexts: sonusStMtaStatOperStat.setDescription(' Indicates the operational status of the MTA')
sonusStMtaStatMtaHwDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusStMtaStatMtaHwDesc.setStatus('current')
if mibBuilder.loadTexts: sonusStMtaStatMtaHwDesc.setDescription(" Description of the MTA hardware in the form of 'hwtype_hwRev'. ")
sonusStMtaStatMtaHwType = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 4, 1, 5), HwTypeID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusStMtaStatMtaHwType.setStatus('current')
if mibBuilder.loadTexts: sonusStMtaStatMtaHwType.setDescription(' Description of the MTA hardware Type only. Entry 5+6 obsolete entry 4.')
sonusStMtaStatMtaHwTypeRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusStMtaStatMtaHwTypeRev.setStatus('current')
if mibBuilder.loadTexts: sonusStMtaStatMtaHwTypeRev.setDescription(' Description of the MTA hardware type revision. Entry 5+6 obsolete entry 4.')
sonusStMtaStatMtaSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusStMtaStatMtaSerialNum.setStatus('current')
if mibBuilder.loadTexts: sonusStMtaStatMtaSerialNum.setDescription(' Identifies the serial number of the server module. This is the serial number assigned to the mta module in manufacturing.')
sonusStMtaStatMtaPartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusStMtaStatMtaPartNum.setStatus('current')
if mibBuilder.loadTexts: sonusStMtaStatMtaPartNum.setDescription(' Identifies the part number of the server module. This is the part number assigned to the mta module in manufacturing.')
sonusStTimingSourceTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 5), )
if mibBuilder.loadTexts: sonusStTimingSourceTable.setStatus('current')
if mibBuilder.loadTexts: sonusStTimingSourceTable.setDescription(' ')
sonusStTimingSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 5, 1), ).setIndexNames((0, "SONUS-SYSTEM-TIMING-MIB", "sonusStTimingSourceShelfIndex"), (0, "SONUS-SYSTEM-TIMING-MIB", "sonusStTimingSourceMtaSlotIndex"), (0, "SONUS-SYSTEM-TIMING-MIB", "sonusStTimingSource"))
if mibBuilder.loadTexts: sonusStTimingSourceEntry.setStatus('current')
if mibBuilder.loadTexts: sonusStTimingSourceEntry.setDescription(' ')
sonusStTimingSourceShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 5, 1, 1), SonusShelfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusStTimingSourceShelfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusStTimingSourceShelfIndex.setDescription(' ')
sonusStTimingSourceMtaSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusStTimingSourceMtaSlotIndex.setStatus('current')
if mibBuilder.loadTexts: sonusStTimingSourceMtaSlotIndex.setDescription(' Indicates which MTA this timing node is bound to. ')
sonusStTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 5, 1, 3), SonusTimingSource().clone('oscillator')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusStTimingSource.setStatus('current')
if mibBuilder.loadTexts: sonusStTimingSource.setDescription(" Indicates which physical timing source is bound to this node. External BITS sources are used by MTA 10's, in T1 based chassis'. External SETS sources are used by MTA 2X's, in E1 based chassis'. REFCLK's are based upon timing recovered from a CNS or PNS Server card. HOLDOVER mimics the last known good source before it failed. OSCILLATOR is used when no other valid sources exist on the currently active MTA. ")
sonusStTimingSourceState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 5, 1, 4), SonusAdminState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusStTimingSourceState.setStatus('current')
if mibBuilder.loadTexts: sonusStTimingSourceState.setDescription(' If enabled, the source can participate in system timing. If disabled, then it will be removed from service and not be allowed to participate. ')
sonusStTimingSourceSequenceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusStTimingSourceSequenceNum.setStatus('current')
if mibBuilder.loadTexts: sonusStTimingSourceSequenceNum.setDescription(' The timing sequence number is automatically generated ')
sonusStTimingSourceAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("available", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusStTimingSourceAction.setStatus('current')
if mibBuilder.loadTexts: sonusStTimingSourceAction.setDescription(' Selecting AVAILABLE will cause the timing source to be moved from the Out-Of-Service state to the Available-For-Use state. This command is necessary to manually make a source available for use after it has failed, and revertive source switching is not enabled. This may cause the current active timing source to change. ')
sonusStTimingSourceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 5, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusStTimingSourceRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusStTimingSourceRowStatus.setDescription('This object indicates the row status for this table.')
sonusStTimingSourceStatTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 6), )
if mibBuilder.loadTexts: sonusStTimingSourceStatTable.setStatus('current')
if mibBuilder.loadTexts: sonusStTimingSourceStatTable.setDescription(' ')
sonusStTimingSourceStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 6, 1), ).setIndexNames((0, "SONUS-SYSTEM-TIMING-MIB", "sonusStTimingSourceStatShelfIndex"), (0, "SONUS-SYSTEM-TIMING-MIB", "sonusStTimingSourceStatMtaSlotIndex"), (0, "SONUS-SYSTEM-TIMING-MIB", "sonusStTimingSourceStat"))
if mibBuilder.loadTexts: sonusStTimingSourceStatEntry.setStatus('current')
if mibBuilder.loadTexts: sonusStTimingSourceStatEntry.setDescription(' ')
sonusStTimingSourceStatShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 6, 1, 1), SonusShelfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusStTimingSourceStatShelfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusStTimingSourceStatShelfIndex.setDescription(' Indicates shelf. ')
sonusStTimingSourceStatMtaSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 6, 1, 2), SonusMtaSlotIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusStTimingSourceStatMtaSlotIndex.setStatus('current')
if mibBuilder.loadTexts: sonusStTimingSourceStatMtaSlotIndex.setDescription(' Indicates which MTA this timing node is bound to. ')
sonusStTimingSourceStat = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 6, 1, 3), SonusTimingSource().clone('oscillator')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusStTimingSourceStat.setStatus('current')
if mibBuilder.loadTexts: sonusStTimingSourceStat.setDescription(' Indicates the physical timing source ')
sonusStTimingSourceStatState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("available", 1), ("inservice", 2), ("faulting", 3), ("outofservice", 4), ("cannotlocate", 5), ("notpresent", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusStTimingSourceStatState.setStatus('current')
if mibBuilder.loadTexts: sonusStTimingSourceStatState.setDescription(' Indicates the current overall state of the timing source, including the hardware state, adminitrative mode and shelf configuration ')
sonusStTimingSourceStatTraceability = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("synchronizedunknown", 1), ("stratum1", 2), ("stratum2", 3), ("stratumTNC", 4), ("stratum3e", 5), ("stratum3", 6), ("stratumSonetMinimum", 7), ("stratum4", 8), ("reserved", 9), ("dontUse", 10), ("indeterminate", 11), ("qualityunknown", 12), ("g811", 13), ("g812transit", 14), ("g812local", 15), ("sets", 16), ("g704rsvdql1", 17), ("g704rsvdql3", 18), ("g704rsvdql5", 19), ("g704rsvdql6", 20), ("g704rsvdql7", 21), ("g704rsvdql9", 22), ("g704rsvdql10", 23), ("g704rsvdql12", 24), ("g704rsvdql13", 25), ("g704rsvdql14", 26)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusStTimingSourceStatTraceability.setStatus('current')
if mibBuilder.loadTexts: sonusStTimingSourceStatTraceability.setDescription(' Indicates the Quality Level of the System Synchronized Timing Source')
sonusStTimingSourceStatLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("notvalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusStTimingSourceStatLineState.setStatus('current')
if mibBuilder.loadTexts: sonusStTimingSourceStatLineState.setDescription(' Indicates the current physical status of the timing source ')
sonusStChannelBindingTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 7), )
if mibBuilder.loadTexts: sonusStChannelBindingTable.setStatus('current')
if mibBuilder.loadTexts: sonusStChannelBindingTable.setDescription(' This table describes how derived timing sources should be mapped to the MTA hardware')
sonusStChannelBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 7, 1), ).setIndexNames((0, "SONUS-SYSTEM-TIMING-MIB", "sonusStChannelBindingShelfIndex"), (0, "SONUS-SYSTEM-TIMING-MIB", "sonusStChannelBindingSlotIndex"), (0, "SONUS-SYSTEM-TIMING-MIB", "sonusStChannelBindingChannel"), (0, "SONUS-SYSTEM-TIMING-MIB", "sonusStChannelBindingRefClk"))
if mibBuilder.loadTexts: sonusStChannelBindingEntry.setStatus('current')
if mibBuilder.loadTexts: sonusStChannelBindingEntry.setDescription(' ')
sonusStChannelBindingShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 7, 1, 1), SonusShelfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusStChannelBindingShelfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusStChannelBindingShelfIndex.setDescription(' ')
sonusStChannelBindingSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 7, 1, 2), SonusSlotIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusStChannelBindingSlotIndex.setStatus('current')
if mibBuilder.loadTexts: sonusStChannelBindingSlotIndex.setDescription(' Server slot number to provide a recovered clock source. The same server can be configured to provide both possible recovered clocks as long as different channels(spans) are selected, and the REFCLK each is bound to differs ')
sonusStChannelBindingChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusStChannelBindingChannel.setStatus('current')
if mibBuilder.loadTexts: sonusStChannelBindingChannel.setDescription(' T1/E1 span or OC12 port number to provide the recovered clock source. T1 span range is 1-12(CNS10), 1-28(CNS30), E1 span range is 1-8(CNS20), OC12 port number(PNS20) is 1 only.')
sonusStChannelBindingRefClk = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("refClkA", 1), ("refClkB", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusStChannelBindingRefClk.setStatus('current')
if mibBuilder.loadTexts: sonusStChannelBindingRefClk.setDescription(' Backplane signal the recovered clock source should be bound to. Each REFCLK must only be bound to a single Server slot/span. ')
sonusStChannelBindingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 1, 7, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusStChannelBindingRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusStChannelBindingRowStatus.setDescription('This object indicates the row status for this table.')
sonusSystemTimingMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 2))
sonusSystemTimingMIBNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 2, 0))
sonusSystemTimingMIBNotificationsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 2, 1))
sonusTimingSource = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 2, 1, 1), SonusTimingSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTimingSource.setStatus('current')
if mibBuilder.loadTexts: sonusTimingSource.setDescription(' ')
sonusTimingSource2 = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 2, 1, 2), SonusEventString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTimingSource2.setStatus('current')
if mibBuilder.loadTexts: sonusTimingSource2.setDescription(' ')
sonusSystemTimingActiveFailedNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 2, 0, 1)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-SYSTEM-TIMING-MIB", "sonusTimingSource"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusSystemTimingActiveFailedNotification.setStatus('current')
if mibBuilder.loadTexts: sonusSystemTimingActiveFailedNotification.setDescription('This trap indicates that the currently active System Timing clock source has failed.')
sonusSystemTimingActiveSwitchoverNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 2, 0, 2)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-SYSTEM-TIMING-MIB", "sonusTimingSource"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusSystemTimingActiveSwitchoverNotification.setStatus('current')
if mibBuilder.loadTexts: sonusSystemTimingActiveSwitchoverNotification.setDescription('This trap indicates that the active System Timing clock source has been switched to another source.')
sonusSystemTimingOscillatorActiveNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 2, 0, 3)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusSystemTimingOscillatorActiveNotification.setStatus('current')
if mibBuilder.loadTexts: sonusSystemTimingOscillatorActiveNotification.setDescription("This trap indicates that all external sources of System Timing have failed and that the current source of timing is the MTA's internal oscillator.")
sonusSystemTimingMTAFailedNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 2, 0, 4)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusSystemTimingMTAFailedNotification.setStatus('current')
if mibBuilder.loadTexts: sonusSystemTimingMTAFailedNotification.setDescription('This trap indicates that the MTA indicated has failed or been removed from the shelf.')
sonusSystemTimingMTAOperationalNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 2, 0, 6)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusSystemTimingMTAOperationalNotification.setStatus('current')
if mibBuilder.loadTexts: sonusSystemTimingMTAOperationalNotification.setDescription('This trap indicates that the specified MTA is now operational.')
sonusSystemTimingMTATotalFailureNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 3, 2, 0, 7)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusSystemTimingMTATotalFailureNotification.setStatus('current')
if mibBuilder.loadTexts: sonusSystemTimingMTATotalFailureNotification.setDescription("This trap indicates that no MTA's are available for use to provide System Timing. They have either failed, been removed from service or been removed from the shelf. The shelf is no longer capable of being properly timed. Downstream Shelves or other equipment connected to this shelf's MITDC(Marlin Inter-chassis Timing Daisy Chain) may be affected.")
mibBuilder.exportSymbols("SONUS-SYSTEM-TIMING-MIB", sonusStMtaAdmnMtaSlotIndex=sonusStMtaAdmnMtaSlotIndex, sonusStShelfAdmnTransmitRemoteAlarm=sonusStShelfAdmnTransmitRemoteAlarm, sonusStMtaAdmnFramerTransmitYellowAlarm=sonusStMtaAdmnFramerTransmitYellowAlarm, sonusSystemTimingOscillatorActiveNotification=sonusSystemTimingOscillatorActiveNotification, sonusStTimingSourceEntry=sonusStTimingSourceEntry, sonusStShelfStatActiveMtaSlot=sonusStShelfStatActiveMtaSlot, PYSNMP_MODULE_ID=sonusSystemTimingMIB, sonusStChannelBindingRowStatus=sonusStChannelBindingRowStatus, sonusStMtaAdmnLineEncoding=sonusStMtaAdmnLineEncoding, sonusSystemTimingActiveSwitchoverNotification=sonusSystemTimingActiveSwitchoverNotification, sonusStMtaStatMtaSerialNum=sonusStMtaStatMtaSerialNum, sonusStChannelBindingChannel=sonusStChannelBindingChannel, sonusTimingSource2=sonusTimingSource2, sonusStChannelBindingShelfIndex=sonusStChannelBindingShelfIndex, sonusStTimingSourceStatShelfIndex=sonusStTimingSourceStatShelfIndex, sonusSystemTimingMTATotalFailureNotification=sonusSystemTimingMTATotalFailureNotification, sonusStMtaStatOperStat=sonusStMtaStatOperStat, sonusStTimingSource=sonusStTimingSource, sonusSystemTimingMIBNotifications=sonusSystemTimingMIBNotifications, sonusStTimingSourceShelfIndex=sonusStTimingSourceShelfIndex, sonusStShelfStatEntry=sonusStShelfStatEntry, sonusStTimingSourceStatTable=sonusStTimingSourceStatTable, sonusStTimingSourceStatLineState=sonusStTimingSourceStatLineState, sonusStShelfAdmnRevertInsertDelay=sonusStShelfAdmnRevertInsertDelay, sonusStTimingSourceStatMtaSlotIndex=sonusStTimingSourceStatMtaSlotIndex, sonusStMtaAdmnShelfIndex=sonusStMtaAdmnShelfIndex, sonusSystemTimingMIBNotificationsObjects=sonusSystemTimingMIBNotificationsObjects, sonusStShelfAdmnTimingSourceAction=sonusStShelfAdmnTimingSourceAction, sonusStMtaStatShelfIndex=sonusStMtaStatShelfIndex, sonusStMtaStatMtaHwDesc=sonusStMtaStatMtaHwDesc, sonusStMtaAdmnTable=sonusStMtaAdmnTable, sonusStShelfAdmnMtaSourceAffinity=sonusStShelfAdmnMtaSourceAffinity, sonusStMtaAdmnLiuTransmitAllOnes=sonusStMtaAdmnLiuTransmitAllOnes, sonusStChannelBindingEntry=sonusStChannelBindingEntry, sonusSystemTimingMIBNotificationsPrefix=sonusSystemTimingMIBNotificationsPrefix, sonusTimingSource=sonusTimingSource, sonusSystemTimingMIBObjects=sonusSystemTimingMIBObjects, sonusStMtaAdmnSsmChannelBit=sonusStMtaAdmnSsmChannelBit, sonusSystemTimingMTAFailedNotification=sonusSystemTimingMTAFailedNotification, sonusStShelfAdmnRecoveryGuardTime=sonusStShelfAdmnRecoveryGuardTime, sonusStChannelBindingTable=sonusStChannelBindingTable, sonusSystemTimingMIB=sonusSystemTimingMIB, sonusStMtaAdmnRowStatus=sonusStMtaAdmnRowStatus, sonusSystemTimingActiveFailedNotification=sonusSystemTimingActiveFailedNotification, sonusStMtaStatEntry=sonusStMtaStatEntry, sonusStShelfAdmnShelfIndex=sonusStShelfAdmnShelfIndex, sonusStShelfAdmnRevertRefSwitching=sonusStShelfAdmnRevertRefSwitching, sonusStMtaStatMtaSlotIndex=sonusStMtaStatMtaSlotIndex, sonusStMtaAdmnEntry=sonusStMtaAdmnEntry, sonusStTimingSourceStatTraceability=sonusStTimingSourceStatTraceability, sonusStShelfAdmnSourceReconfigAlg=sonusStShelfAdmnSourceReconfigAlg, sonusStShelfAdmnTable=sonusStShelfAdmnTable, sonusStShelfAdmnRowStatus=sonusStShelfAdmnRowStatus, sonusStTimingSourceSequenceNum=sonusStTimingSourceSequenceNum, sonusStShelfAdmnRevertMtaSwitching=sonusStShelfAdmnRevertMtaSwitching, sonusStChannelBindingSlotIndex=sonusStChannelBindingSlotIndex, sonusStChannelBindingRefClk=sonusStChannelBindingRefClk, sonusStShelfAdmnFailoverGuardTime=sonusStShelfAdmnFailoverGuardTime, sonusStShelfStatActiveSource=sonusStShelfStatActiveSource, sonusStTimingSourceStatState=sonusStTimingSourceStatState, sonusSystemTimingMTAOperationalNotification=sonusSystemTimingMTAOperationalNotification, sonusStTimingSourceState=sonusStTimingSourceState, sonusStMtaStatMtaHwType=sonusStMtaStatMtaHwType, sonusStShelfStatTable=sonusStShelfStatTable, sonusStMtaAdmnState=sonusStMtaAdmnState, sonusStMtaStatTable=sonusStMtaStatTable, sonusStTimingSourceStat=sonusStTimingSourceStat, sonusStTimingSourceMtaSlotIndex=sonusStTimingSourceMtaSlotIndex, sonusStTimingSourceStatEntry=sonusStTimingSourceStatEntry, sonusStTimingSourceRowStatus=sonusStTimingSourceRowStatus, sonusStShelfAdmnEntry=sonusStShelfAdmnEntry, sonusStMtaStatMtaHwTypeRev=sonusStMtaStatMtaHwTypeRev, sonusStShelfAdmnFreeRunAlarm=sonusStShelfAdmnFreeRunAlarm, sonusStShelfStatShelfIndex=sonusStShelfStatShelfIndex, sonusStTimingSourceTable=sonusStTimingSourceTable, sonusStMtaAdmnFramerMode=sonusStMtaAdmnFramerMode, sonusStMtaStatMtaPartNum=sonusStMtaStatMtaPartNum, sonusStTimingSourceAction=sonusStTimingSourceAction, sonusStMtaAdmnAction=sonusStMtaAdmnAction)
